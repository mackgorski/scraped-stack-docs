[
  {
    "url": "https://docs.stripe.com/radar/rules/supported-attributes",
    "markdown": "# Supported attributes | Stripe DocumentationThe Stripe Docs logo\n\n## Review a complete list of attributes supported in Radar rules.\n\nThe following attributes can be used within Radar to write rules. Learn how to write effective [rules](https://docs.stripe.com/radar/rules/reference).\n\n## Risk scores and levels![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**risk\\_level**\n\n_Case Insensitive String_\n\nnormal\n\nThe risk level of a given payment, as determined by Stripe. The supported values are: **normal**, **elevated**, **highest**, **not\\_assessed**.\n\n**risk\\_score**\n\n_Numeric_\n\n50\n\nThe risk score of a given payment, as determined by Stripe. The values range between 0 (least risky) and 100 (riskiest). By default, a risk score of 65 or above corresponds to a risk level of **elevated**, while a risk score of 75 or above corresponds to a risk level of **highest**. You can adjust the thresholds at [Risk Settings](https://docs.stripe.com/radar/risk-settings).\n\n## 3D Secure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**is\\_3d\\_secure**\n\n_Boolean_\n\ntrue\n\nIdentifies if the payment uses a 3D Secure source.\n\n**is\\_3d\\_secure\\_authenticated**\n\n_Boolean_\n\ntrue\n\nIdentifies if the payment follows a successfully completed 3D Secure verification with authentication. (Authentication can be either risk-based or challenge-based.)\n\n**has\\_liability\\_shift**\n\n_Boolean_\n\ntrue\n\nTrue if the [liability shift rule](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments) might apply for this payment.\n\n## Address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**billing\\_address**\n\n_Case Insensitive String_\n\n1234 Main St #2A Brooklyn NY 10022 US\n\nThe full provided cardholder billing address.\n\n**billing\\_address\\_line1**\n\n_Case Insensitive String_\n\n1234 Main St\n\nThe first line of the provided cardholder billing address (typically a street name and number).\n\n**billing\\_address\\_line2**\n\n_Case Insensitive String_\n\n#2A\n\nThe second line of the provided cardholder billing address (typically an apartment or unit number).\n\n**billing\\_address\\_postal\\_code**\n\n_Case Insensitive String_\n\n10022\n\nThe postal code (ZIP) of the provided cardholder billing address.\n\n**billing\\_address\\_city**\n\n_Case Insensitive String_\n\nBrooklyn\n\nThe city of the provided cardholder billing address.\n\n**billing\\_address\\_state**\n\n_Case Insensitive String_\n\nNY\n\nThe state of the provided cardholder billing address.\n\n**billing\\_address\\_country**\n\n_Case Insensitive Country_\n\nUS\n\nThe two-letter code corresponding to the country of the provided cardholder billing address.\n\n**shipping\\_address**\n\n_Case Insensitive String_\n\n1234 Main St #2A Brooklyn NY 10022 US\n\nThe full provided shipping address.\n\n**shipping\\_address\\_line1**\n\n_Case Insensitive String_\n\n1234 Main St\n\nThe first line of the provided shipping address (typically a street name and number).\n\n**shipping\\_address\\_line2**\n\n_Case Insensitive String_\n\n#2A\n\nThe second line of the provided shipping address (typically an apartment or unit number).\n\n**shipping\\_address\\_postal\\_code**\n\n_Case Insensitive String_\n\n10022\n\nThe postal code (ZIP) of the provided shipping address.\n\n**shipping\\_address\\_city**\n\n_Case Insensitive String_\n\nBrooklyn\n\nThe city of the provided shipping address.\n\n**shipping\\_address\\_state**\n\n_Case Insensitive String_\n\nNY\n\nThe state of the provided shipping address.\n\n**shipping\\_address\\_country**\n\n_Case Insensitive Country_\n\nUS\n\nThe two-letter code corresponding to the country of the provided shipping address.\n\n## Amount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**amount\\_in\\_xyz**\n\n_Numeric_\n\n50\n\nThe amount of the payment, converted to the currency specified by **xyz** (for example, **amount\\_in\\_usd**). Specify one of the following supported currencies and Stripe automatically calculates a [converted amount](#converted-amounts) to use: **aed**, **ars**, **aud**, **brl**, **cad**, **chf**, **clp**, **cop**, **czk**, **dkk**, **eur**, **gbp**, **hkd**, **huf**, **idr**, **ils**, **inr**, **jpy**, **khr**, **krw**, **mxn**, **myr**, **nok**, **nzd**, **php**, **pln**, **ron**, **rub**, **sek**, **sgd**, **thb**, **try**, **twd**, or **usd**. For decimal currencies (for example, **usd**), rules use the base currency unit rather than sub units (for example, dollars, not cents).\n\n**average\\_usd\\_amount\\_attempted\\_on\\_card\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe average amount (in USD) of attempted transactions for the card on your account. This value includes payments from 2020 onwards.\n\n**average\\_usd\\_amount\\_attempted\\_on\\_customer\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe average amount (in USD) of attempted transactions for the [Customer](https://docs.stripe.com/api/customers) object on your account. This value includes payments from 2020 onwards.\n\n**average\\_usd\\_amount\\_successful\\_on\\_card\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe average amount (in USD) of transactions that resulted in an authorization for the card on your account. This value includes payments from 2020 onwards.\n\n**average\\_usd\\_amount\\_successful\\_on\\_customer\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe average amount (in USD) of transactions that resulted in an authorization for the [Customer](https://docs.stripe.com/api/customers) object on your account. This value includes payments from 2020 onwards.\n\n**total\\_usd\\_amount\\_charged\\_on\\_card\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe total amount (in USD) of transactions from this card that were attempted on your account. This value includes payments from 2020 onwards.\n\n**total\\_usd\\_amount\\_charged\\_on\\_customer\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe total amount (in USD) of transactions from the [Customer](https://docs.stripe.com/api/customers) object that were attempted on your account. This value includes payments from 2020 onwards.\n\n**total\\_usd\\_amount\\_failed\\_on\\_card\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe total amount (in USD) of transactions from this card that failed (blocked or declined) on your account. This value includes payments from 2020 onwards.\n\n**total\\_usd\\_amount\\_failed\\_on\\_customer\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe total amount (in USD) of transactions from the [Customer](https://docs.stripe.com/api/customers) object that failed (blocked or declined) on your account. This value includes payments from 2020 onwards.\n\n**total\\_usd\\_amount\\_successful\\_on\\_card\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe total amount (in USD) of transactions that resulted in an authorization for the card on your account. This value includes payments from 2020 onwards.\n\n**total\\_usd\\_amount\\_successful\\_on\\_customer\\_all\\_time**\n\n_Numeric_\n\n50\n\nThe total amount (in USD) of transactions that resulted in an authorization for the [Customer](https://docs.stripe.com/api/customers) object on your account. This value includes payments from 2020 onwards.\n\n## Card Info![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**card\\_bin**\n\n_Case Insensitive String_\n\n483312\n\nThe Bank Identification Number (BIN) of the card used to make the payment. The BIN is the first six digits of the card number.\n\n**card\\_brand**\n\n_Case Insensitive String_\n\nvisa\n\nThe brand of the card used to make the payment. The supported values are: **amex** (American Express), **visa** (Visa), **mc** (Mastercard), **dscvr** (Discover), **diners** (Diners Club), **interac** (Interac), **jcb** (JCB), and **cup** (UnionPay).\n\n**card\\_country**\n\n_Case Insensitive Country_\n\nUS\n\nThe two-letter code corresponding to the country where the card was issued.\n\n**card\\_fingerprint**\n\n_Case Sensitive String_\n\nexample\\_fingerprint\n\nThe fingerprint of the card used to make the payment. The card fingerprint is a unique identifier of a particular card number.\n\n**card\\_funding**\n\n_Case Insensitive String_\n\ncredit\n\nWhether the card is a prepaid, debit, or credit card. The supported values are: **credit**, **debit**, **prepaid**, **unknown**.\n\n**card\\_3d\\_secure\\_support**\n\n_Case Insensitive String_\n\nrequired\n\nThe level of [3D Secure](https://docs.stripe.com/payments/3d-secure) support for the card used to make the payment. The supported values are: **required**, **recommended**, **optional**, and **not\\_supported**.\n\n**charge\\_description**\n\n_Case Insensitive String_\n\npayment for order #12\n\nThe description supplied with the payment.\n\n**statement\\_descriptor** New\n\n_Case Insensitive String_\n\nexample descriptor\n\nThe [statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors) provided on a payment.\n\n## Card Usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**is\\_new\\_card\\_on\\_customer**\n\n_Boolean_\n\ntrue\n\nIdentifies if the card associated with the [Customer](https://docs.stripe.com/api/customers) object hasn’t been seen on a payment by that customer on your account.\n\n**card\\_count\\_for\\_billing\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this billing address from transactions on this account. This value includes payments from 2020 onwards.\n\n**card\\_count\\_for\\_billing\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this billing address from transactions on this account in the past week.\n\n**card\\_count\\_for\\_billing\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this billing address from transactions on this account in the past hour.\n\n**card\\_count\\_for\\_billing\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this billing address from transactions on this account in the past day.\n\n**card\\_count\\_for\\_customer\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with the [Customer](https://docs.stripe.com/api/customers) object from transactions on this account. This value includes payments from 2020 onwards.\n\n**card\\_count\\_for\\_customer\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with the [Customer](https://docs.stripe.com/api/customers) object from transactions on this account in the past week.\n\n**card\\_count\\_for\\_customer\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with the [Customer](https://docs.stripe.com/api/customers) object from transactions on this account in the past day.\n\n**card\\_count\\_for\\_customer\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with the [Customer](https://docs.stripe.com/api/customers) object from transactions on this account in the past hour.\n\n**card\\_count\\_for\\_email\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this email from transactions on this account. This value includes payments from 2020 onwards.\n\n**card\\_count\\_for\\_email\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this email from transactions on this account in the past week.\n\n**card\\_count\\_for\\_email\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this email from transactions on this account in the past day.\n\n**card\\_count\\_for\\_email\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this email from transactions on this account in the past hour.\n\n**card\\_count\\_for\\_ip\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this IP address from transactions on your account. This value includes payments from 2020 onwards.\n\n**card\\_count\\_for\\_ip\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this IP address from transactions on your account in the past week.\n\n**card\\_count\\_for\\_ip\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this IP address from transactions on your account in the past day.\n\n**card\\_count\\_for\\_ip\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this IP address from transactions on your account in the past hour.\n\n**card\\_count\\_for\\_shipping\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this shipping address from transactions on your account. This value includes payments from 2020 onwards.\n\n**card\\_count\\_for\\_shipping\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this shipping address from transactions on your account in the past week.\n\n**card\\_count\\_for\\_shipping\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this shipping address from transactions on your account in the past day.\n\n**card\\_count\\_for\\_shipping\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of cards associated with this shipping address from transactions on your account in the past hour.\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**authorized\\_charges\\_per\\_billing\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this billing address on your account. The value includes payments from 2020 onwards.\n\n**authorized\\_charges\\_per\\_billing\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this billing address in the past week on your account.\n\n**authorized\\_charges\\_per\\_billing\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this billing address in the past day on your account.\n\n**authorized\\_charges\\_per\\_billing\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this billing address in the past hour on your account.\n\n**authorized\\_charges\\_per\\_card\\_number\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this card on your account. The value includes payments from 2020 onwards.\n\n**authorized\\_charges\\_per\\_card\\_number\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this card in the past week on your account.\n\n**authorized\\_charges\\_per\\_card\\_number\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this card in the past day on your account.\n\n**authorized\\_charges\\_per\\_card\\_number\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this card in the past hour on your account.\n\n**authorized\\_charges\\_per\\_customer\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from the [Customer](https://docs.stripe.com/api/customers) object on your account. The value includes payments from 2020 onwards.\n\n**authorized\\_charges\\_per\\_customer\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from the [Customer](https://docs.stripe.com/api/customers) object in the past week on your account.\n\n**authorized\\_charges\\_per\\_customer\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from the [Customer](https://docs.stripe.com/api/customers) object in the past day on your account.\n\n**authorized\\_charges\\_per\\_customer\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from the [Customer](https://docs.stripe.com/api/customers) object in the past hour on your account.\n\n**authorized\\_charges\\_per\\_email\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this email on your account. The value includes payments from 2020 onwards.\n\n**authorized\\_charges\\_per\\_email\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this email in the past week on your account.\n\n**authorized\\_charges\\_per\\_email\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this email in the past day on your account.\n\n**authorized\\_charges\\_per\\_email\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this email in the past hour on your account.\n\n**authorized\\_charges\\_per\\_shipping\\_address\\_all\\_time** New\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this shipping address on your account. The value includes payments from 2020 onwards.\n\n**authorized\\_charges\\_per\\_shipping\\_address\\_weekly** New\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this shipping address in the past week on your account.\n\n**authorized\\_charges\\_per\\_shipping\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this shipping address in the past day on your account.\n\n**authorized\\_charges\\_per\\_shipping\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization on this shipping address in the past hour on your account.\n\n**authorized\\_charges\\_per\\_ip\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this IP address on your account. The value includes payments from 2020 onwards.\n\n**authorized\\_charges\\_per\\_ip\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this IP address in the past week on your account.\n\n**authorized\\_charges\\_per\\_ip\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this IP address in the past day on your account.\n\n**authorized\\_charges\\_per\\_ip\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges that resulted in a successful authorization from this IP address in the past hour on your account.\n\n## Charges that were blocked![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**blocked\\_charges\\_per\\_billing\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this billing address on your account. This value includes payments from 2020 onwards.\n\n**blocked\\_charges\\_per\\_billing\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this billing address in the past week on your account.\n\n**blocked\\_charges\\_per\\_billing\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this billing address in the past day on your account.\n\n**blocked\\_charges\\_per\\_billing\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this billing address in the past hour on your account.\n\n**blocked\\_charges\\_per\\_card\\_number\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this card on your account. This value includes payments from 2020 onwards.\n\n**blocked\\_charges\\_per\\_card\\_number\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this card in the past week on your account.\n\n**blocked\\_charges\\_per\\_card\\_number\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this card in the past day on your account.\n\n**blocked\\_charges\\_per\\_card\\_number\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this card in the past hour on your account.\n\n**blocked\\_charges\\_per\\_customer\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from the [Customer](https://docs.stripe.com/api/customers) object on your account. This value includes payments from 2020 onwards.\n\n**blocked\\_charges\\_per\\_customer\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from the [Customer](https://docs.stripe.com/api/customers) object in the past week on your account.\n\n**blocked\\_charges\\_per\\_customer\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from the [Customer](https://docs.stripe.com/api/customers) object in the past day on your account.\n\n**blocked\\_charges\\_per\\_customer\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from the [Customer](https://docs.stripe.com/api/customers) object in the past hour on your account.\n\n**blocked\\_charges\\_per\\_email\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from this email on your account. This value includes payments from 2020 onwards.\n\n**blocked\\_charges\\_per\\_email\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from this email in the past week on your account.\n\n**blocked\\_charges\\_per\\_email\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from this email in the past day on your account.\n\n**blocked\\_charges\\_per\\_email\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked from this email in the past hour on your account.\n\n**blocked\\_charges\\_per\\_shipping\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this shipping address on your account. This value includes payments from 2020 onwards.\n\n**blocked\\_charges\\_per\\_shipping\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this shipping address in the past week on your account.\n\n**blocked\\_charges\\_per\\_shipping\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this shipping address in the past day on your account.\n\n**blocked\\_charges\\_per\\_shipping\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this shipping address in the past hour on your account.\n\n**blocked\\_charges\\_per\\_ip\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this IP address on your account. This value includes payments from 2020 onwards.\n\n**blocked\\_charges\\_per\\_ip\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this IP address in the past week on your account.\n\n**blocked\\_charges\\_per\\_ip\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this IP address in the past day on your account.\n\n**blocked\\_charges\\_per\\_ip\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges blocked on this IP address in the past hour on your account.\n\n## Charges that were declined![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**declined\\_charges\\_per\\_billing\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this billing address on your account. This value includes payments from 2020 onwards.\n\n**declined\\_charges\\_per\\_billing\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this billing address in the past week on your account.\n\n**declined\\_charges\\_per\\_billing\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this billing address in the past day on your account.\n\n**declined\\_charges\\_per\\_billing\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this billing address in the past hour on your account.\n\n**declined\\_charges\\_per\\_card\\_number\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this card on your account. This value includes payments from 2020 onwards.\n\n**declined\\_charges\\_per\\_card\\_number\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this card in the past week on your account.\n\n**declined\\_charges\\_per\\_card\\_number\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this card in the past day on your account.\n\n**declined\\_charges\\_per\\_card\\_number\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this card in the past hour on your account.\n\n**declined\\_charges\\_per\\_customer\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from the [Customer](https://docs.stripe.com/api/customers) object on your account. This value includes payments from 2020 onwards.\n\n**declined\\_charges\\_per\\_customer\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from the [Customer](https://docs.stripe.com/api/customers) object in the past week on your account.\n\n**declined\\_charges\\_per\\_customer\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from the [Customer](https://docs.stripe.com/api/customers) object in the past day on your account.\n\n**declined\\_charges\\_per\\_customer\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from the [Customer](https://docs.stripe.com/api/customers) object in the past hour on your account.\n\n**declined\\_charges\\_per\\_shipping\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this shipping address on your account. This value includes payments from 2020 onwards.\n\n**declined\\_charges\\_per\\_shipping\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this shipping address in the past week on your account.\n\n**declined\\_charges\\_per\\_shipping\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this shipping address in the past day on your account.\n\n**declined\\_charges\\_per\\_shipping\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this shipping address in the past hour on your account.\n\n**declined\\_charges\\_per\\_ip\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this IP address on your account. This value includes payments from 2020 onwards.\n\n**declined\\_charges\\_per\\_ip\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this IP address in the past week on your account.\n\n**declined\\_charges\\_per\\_ip\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this IP address in the past day on your account.\n\n**declined\\_charges\\_per\\_ip\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined on this IP address in the past hour on your account.\n\n**declined\\_charges\\_per\\_email\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from this email on your account. This value includes payments from 2020 onwards.\n\n**declined\\_charges\\_per\\_email\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from this email in the past week on your account.\n\n**declined\\_charges\\_per\\_email\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from this email in the past day on your account.\n\n**declined\\_charges\\_per\\_email\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of charges declined from this email in the past hour on your account.\n\n## Total charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**total\\_charges\\_per\\_billing\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this billing address on your account. This value includes payments from 2020 onwards.\n\n**total\\_charges\\_per\\_billing\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this billing address in the past week on your account.\n\n**total\\_charges\\_per\\_billing\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this billing address in the past day on your account.\n\n**total\\_charges\\_per\\_billing\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this billing address in the past hour on your account.\n\n**total\\_charges\\_per\\_card\\_number\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this card on your account. This value includes payments from 2020 onwards.\n\n**total\\_charges\\_per\\_card\\_number\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this card in the past week on your account.\n\n**total\\_charges\\_per\\_card\\_number\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this card in the past day on your account.\n\n**total\\_charges\\_per\\_card\\_number\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges on this card in the past hour on your account.\n\n**total\\_charges\\_per\\_customer\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from the [Customer](https://docs.stripe.com/api/customers) object on your account. This value includes payments from 2020 onwards.\n\n**total\\_charges\\_per\\_customer\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from the [Customer](https://docs.stripe.com/api/customers) object in the past week on your account.\n\n**total\\_charges\\_per\\_customer\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from the [Customer](https://docs.stripe.com/api/customers) object in the past day on your account.\n\n**total\\_charges\\_per\\_customer\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from the [Customer](https://docs.stripe.com/api/customers) object in the past hour on your account.\n\n**total\\_charges\\_per\\_email\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this email on your account. This value includes payments from 2020 onwards.\n\n**total\\_charges\\_per\\_email\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this email in the past week on your account.\n\n**total\\_charges\\_per\\_email\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this email in the past day on your account.\n\n**total\\_charges\\_per\\_email\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this email in the past hour on your account.\n\n**total\\_charges\\_per\\_ip\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this IP address on your account. This value includes payments from 2020 onwards.\n\n**total\\_charges\\_per\\_ip\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this IP address in the past week on your account.\n\n**total\\_charges\\_per\\_ip\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this IP address in the past day on your account.\n\n**total\\_charges\\_per\\_ip\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this IP address in the past hour on your account.\n\n**total\\_charges\\_per\\_shipping\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this shipping address on your account. This value includes payments from 2020 onwards.\n\n**total\\_charges\\_per\\_shipping\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this shipping address in the past week on your account.\n\n**total\\_charges\\_per\\_shipping\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this shipping address in the past day on your account.\n\n**total\\_charges\\_per\\_shipping\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of charges from this shipping address in the past hour on your account.\n\n## Client information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**browser** New\n\n_Case Insensitive String_\n\nChrome 103.0.0\n\nThe customer’s browser name and version.\n\n**operating\\_system** New\n\n_Case Insensitive String_\n\nMac OS X 10.15.7\n\nThe customer’s operating system name and version.\n\n**user\\_agent** New\n\n_Case Insensitive String_\n\nmozilla/5.0 (macintosh; intel mac os x 10\\_15\\_7) applewebkit/537.36 (khtml, like gecko) chrome/103.0.0.0 safari/537.36\n\nThe customer’s user agent.\n\n## Customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**customer**\n\n_Case Sensitive String_\n\ncus\\_AeFLnRaI51AbRi\n\nThe [Customer](https://docs.stripe.com/api/customers) object ID supplied with the payment.\n\n**total\\_customers\\_for\\_card\\_yearly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this card on your account. This attribute only includes live mode Customer objects that interacted with your account in the past year. This data updates at most every 72 hours.\n\n**total\\_customers\\_for\\_card\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this card on your account. This attribute only includes live mode Customer objects that interacted with your account in the past week. This data updates at most every 72 hours.\n\n**total\\_customers\\_for\\_email\\_yearly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this email on your account. This attribute only includes live mode Customer objects that interacted with your account in the past year. This data updates at most every 72 hours.\n\n**total\\_customers\\_for\\_email\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this email on your account. This attribute only includes live mode Customer objects that interacted with your account in the past week. This data updates at most every 72 hours.\n\n**total\\_customers\\_with\\_prior\\_fraud\\_activity\\_for\\_card\\_yearly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this card that have fraud activity on your account. Fraud activity includes fraud disputes, early fraud warnings, and high risk Radar blocks. This attribute only includes live mode Customer objects that interacted with your account in the past year. This data updates at most every 72 hours.\n\n**total\\_customers\\_with\\_prior\\_fraud\\_activity\\_for\\_card\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this card that have fraud activity on your account. Fraud activity includes fraud disputes, early fraud warnings, and high risk Radar blocks. This attribute only includes live mode Customer objects that interacted with your account in the past week. This data updates at most every 72 hours.\n\n**total\\_customers\\_with\\_prior\\_fraud\\_activity\\_for\\_email\\_yearly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this email that have fraud activity on your account. Fraud activity includes fraud disputes, early fraud warnings, and high risk Radar blocks. This attribute only includes live mode Customer objects that interacted with your account in the past year. This data updates at most every 72 hours.\n\n**total\\_customers\\_with\\_prior\\_fraud\\_activity\\_for\\_email\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe total number of [Customer](https://docs.stripe.com/api/customers) objects associated with this email that have fraud activity on your account. Fraud activity includes fraud disputes, early fraud warnings, and high risk Radar blocks. This attribute only includes live mode Customer objects that interacted with your account in the past week. This data updates at most every 72 hours.\n\n## Distance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**distance\\_between\\_billing\\_and\\_shipping\\_address** New\n\n_Numeric_\n\n50\n\nThe distance (in km) between the provided billing address and the provided shipping address.\n\n**distance\\_between\\_ip\\_and\\_billing\\_address** New\n\n_Numeric_\n\n50\n\nThe distance (in km) between the IP address from which the payment originates and the provided billing address.\n\n**distance\\_between\\_ip\\_and\\_shipping\\_address** New\n\n_Numeric_\n\n50\n\nThe distance (in km) between the IP address from which the payment originates and the provided shipping address.\n\n## Disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**dispute\\_count\\_on\\_card\\_number\\_all\\_time**\n\n_Bounded numeric (<=25)_\n\n10\n\nThe count of fraudulent disputes associated with charges from this card number on your account. This value includes payments from 2019 onwards.\n\n**dispute\\_count\\_on\\_card\\_number\\_yearly**\n\n_Bounded numeric (<=25)_\n\n10\n\nThe count of fraudulent disputes associated with charges from this card number on your account in the past year.\n\n**dispute\\_count\\_on\\_ip\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe count of fraudulent disputes associated with charges from this IP address on your account. This value includes payments from 2020 onwards.\n\n**dispute\\_count\\_on\\_ip\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe count of fraudulent disputes associated with charges from this IP address on your account in the past week.\n\n**dispute\\_count\\_on\\_ip\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe count of fraudulent disputes associated with charges from this IP address on your account in the past day.\n\n**dispute\\_count\\_on\\_ip\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe count of fraudulent disputes associated with charges from this IP address on your account in the past hour.\n\n## Early Fraud Warnings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**efw\\_count\\_on\\_card\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this card on your account. This value includes EFWs from 2020 onwards.\n\n**efw\\_count\\_on\\_card\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this card on your account in the past week.\n\n**efw\\_count\\_on\\_card\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this card on your account in the past day.\n\n**efw\\_count\\_on\\_card\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this card on your account in the past hour.\n\n**efw\\_count\\_on\\_ip\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this IP address on your account. This value includes EFWs from 2020 onwards.\n\n**efw\\_count\\_on\\_ip\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this IP address on your account in the past week.\n\n**efw\\_count\\_on\\_ip\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this IP address on your account in the past day.\n\n**efw\\_count\\_on\\_ip\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of [EFWs](https://docs.stripe.com/disputes/measuring#early-fraud-warnings) associated with charges from this IP address on your account in the past hour.\n\n## Email![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**email**\n\n_Case Insensitive String_\n\nuser@example.com\n\nThe email address supplied with the payment.\n\n**email\\_domain**\n\n_Case Insensitive String_\n\nexample.com\n\nThe domain of the email address supplied with the payment.\n\n**is\\_disposable\\_email**\n\n_Boolean_\n\ntrue\n\nIdentifies if the email address supplied with the payment uses a known throwaway email address provider. Stripe maintains a list of domains corresponding to throwaway email addresses.\n\nThe **email\\_domain** and **is\\_disposable\\_email** attributes use the email address found in any of the following fields:\n\n*   The `receipt_email` of the payment\n*   The `description` of the payment\n*   The `name` of the card (if an email address has been provided as the cardholder name)\n*   The `email` of the customer that the payment was created on\n*   The `description` of the customer\n\n## Email usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**email\\_count\\_for\\_billing\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this billing address from transactions on your account. This value includes payments from 2020 onwards.\n\n**email\\_count\\_for\\_billing\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this billing address from transactions on your account in the past week.\n\n**email\\_count\\_for\\_billing\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this billing address from transactions on your account in the past day.\n\n**email\\_count\\_for\\_billing\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this billing address from transactions on your account in the past hour.\n\n**email\\_count\\_for\\_card\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this card from transactions on your account. This value includes payments from 2020 onwards.\n\n**email\\_count\\_for\\_card\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this card from transactions on your account in the past week.\n\n**email\\_count\\_for\\_card\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this card from transactions on your account in the past day.\n\n**email\\_count\\_for\\_card\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this card from transactions on your account in the past hour.\n\n**email\\_count\\_for\\_ip\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this IP address from transactions on your account. This value includes payments from 2020 onwards.\n\n**email\\_count\\_for\\_ip\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this IP address from transactions on your account in the past week.\n\n**email\\_count\\_for\\_ip\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this IP address from transactions on your account in the past day.\n\n**email\\_count\\_for\\_ip\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this IP address from transactions on your account in the past hour.\n\n**email\\_count\\_for\\_shipping\\_address\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this shipping address from transactions on your account. This value includes payments from 2020 onwards.\n\n**email\\_count\\_for\\_shipping\\_address\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this shipping address from transactions on your account in the past week.\n\n**email\\_count\\_for\\_shipping\\_address\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this shipping address from transactions on your account in the past day.\n\n**email\\_count\\_for\\_shipping\\_address\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of emails associated with this shipping address from transactions on your account in the past hour.\n\n## IP address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**ip\\_address**\n\n_Case Insensitive String_\n\n192.168.1.1\n\nThe IP address from which the payment originates. If payment is made with **digital\\_wallet**, the IP address might be missing due to obfuscation of the payment’s originating IP address.\n\n**ip\\_address\\_connection\\_type** New\n\n_Case Insensitive String_\n\ncellular\n\nThe connection type of the IP address from which the payment originates. We identify the following types of connections: **cable/dsl**, **cellular**, **corporate**, **dialup**.\n\n**ip\\_country**\n\n_Case Insensitive Country_\n\nUS\n\nThe two-letter code corresponding to the country-level geolocation of the IP address that the payment originates from.\n\n**ip\\_state** New\n\n_Case Insensitive State_\n\nCA\n\nThe ISO code corresponding to the state-level geolocation of the IP address that the payment originates from. If the country doesn’t have a state, this attribute populates with the country’s closest version of a state.\n\n**is\\_anonymous\\_ip**\n\n_Boolean_\n\ntrue\n\nIdentifies if the IP address from which the payment originates is a known proxy or Tor exit node. This information updates daily.\n\n**is\\_my\\_login\\_ip**\n\n_Boolean_\n\ntrue\n\nIdentifies if the IP address from which the payment originates has been used to log into your Stripe account. You can use this attribute as a proxy for “is my IP address.”\n\n## Issuer Checks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**address\\_line1\\_check**\n\n_Case Sensitive String_\n\npass\n\nA check by the card issuer to match the first line of the provided billing address (typically a street name and number) against the information they have on file for the cardholder. The supported values are: **pass**, **fail**, **unavailable**, **unchecked**, **not\\_provided**. ([This is a post-authorization attribute.](#post-authorization-attributes))\n\n**address\\_zip\\_check**\n\n_Case Sensitive String_\n\npass\n\nA check by the card issuer to match the provided postal code against the information they have on file for the cardholder. The supported values are: **pass**, **fail**, **unavailable**, **unchecked**, **not\\_provided**. ([This is a post-authorization attribute.](#post-authorization-attributes))\n\n**cvc\\_check**\n\n_Case Sensitive String_\n\npass\n\nA check by the card issuer to match the provided CVC (also referred to as CVV) against the information they have on file for the cardholder. The supported values are: **pass**, **fail**, **unavailable**, **unchecked**, **not\\_provided**. ([This is a post-authorization attribute.](#post-authorization-attributes))\n\n## Name![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**cardholder\\_name**\n\n_Case Insensitive String_\n\nJane Doe\n\nThe provided name with a purchaser’s card information. This attribute isn’t case sensitive, but it’s punctuation sensitive. You should only use this attribute to block names or name patterns of individuals who you have reason to believe have previously committed fraud on your service. We recommend that your customer service teams are prepared to respond to any customer complaints and to add legitimate end-customers to an “allowlist” where appropriate.\n\n**name\\_count\\_for\\_card\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of names associated with this card from transactions on your account. This value includes payments from 2020 onwards.\n\n**name\\_count\\_for\\_card\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of names associated with this card from transactions on your account in the past week.\n\n**name\\_count\\_for\\_card\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of names associated with this card from transactions on your account in the past day.\n\n**name\\_count\\_for\\_card\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of names associated with this card from transactions on your account in the past hour.\n\n## Other payment details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**currency** New\n\n_Case Insensitive String_\n\nusd\n\nThe 3-digit currency code representing the currency in which the customer paid for the transaction.\n\n**destination**\n\n_Case Sensitive String_\n\nacct\\_19KCB9AlaaEw6AgR\n\nFor Connect users creating [destination charges](https://docs.stripe.com/connect/destination-charges), the destination account on whose behalf the charge is made.\n\n**digital\\_wallet**\n\n_Case Insensitive String_\n\napple\\_pay\n\nThe type of digital wallet used to store payment information. The supported values are: **android\\_pay**, **amex\\_express\\_checkout**, **apple\\_pay**, **masterpass**, **samsung\\_pay**, **unknown**, **visa\\_checkout**, **none**. _Note: Except for **android\\_pay** (valid with or without cryptogram), these are only valid when we receive a cryptogram that can only be generated by a registered device, as opposed to an unencrypted Primary Account Number_.\n\n**is\\_checkout**\n\n_Boolean_\n\ntrue\n\nIdentifies if the payment is processed through [Checkout](https://docs.stripe.com/payments/checkout). (This attribute only applies to payments processed through the current version of [Checkout](https://docs.stripe.com/payments/checkout) and doesn’t capture payments through legacy Checkout.)\n\n**is\\_off\\_session**\n\n_Boolean_\n\ntrue\n\nIndicates when a Stripe Billing payment isn’t triggered by direct user action, or when the off\\_session flag is set at PaymentIntent confirmation.\n\n**is\\_recurring**\n\n_Boolean_\n\ntrue\n\nIdentifies if the payment is recurring, for example, from subscriptions.\n\n**has\\_cryptogram**\n\n_Boolean_\n\ntrue\n\nTrue when we receive a cryptogram that can only be generated by a registered device, as opposed to an unencrypted Primary Account Number.\n\n**transaction\\_type**\n\n_String_\n\ncharge\n\nThe type of the transaction. The supported values are: **charge**, **payment\\_intent**, **setup\\_intent**. The **payment\\_intent** value is only supported for Request Credentials rules. In that case, any Allow, Block, or Review rules run against the charge attempts created when confirming the payment.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**refund\\_count\\_on\\_card\\_all\\_time**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of refunds associated with this billing address from transactions on your account. This value includes payments from 2020 onwards.\n\n**refund\\_count\\_on\\_card\\_weekly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of refunds associated with this card from transactions on your account in the past week.\n\n**refund\\_count\\_on\\_card\\_daily**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of refunds associated with this card from transactions on your account in the past day.\n\n**refund\\_count\\_on\\_card\\_hourly**\n\n_Bounded numeric (≤25)_\n\n10\n\nThe number of refunds associated with this card from transactions on your account in the past hour.\n\n## Time![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Attribute**\n\n**Type**\n\n**Example Value**\n\n**hours\\_since\\_customer\\_was\\_created**\n\n_Numeric_\n\n50\n\nThe number of hours since the [Customer](https://docs.stripe.com/api/customers) object making the payment was created on your account.\n\n**hours\\_since\\_email\\_first\\_seen**\n\n_Numeric_\n\n50\n\nThe number of hours since the email address supplied with the payment was first seen on your account. This value includes payments from 2020 onwards.\n\n**hours\\_since\\_email\\_first\\_seen\\_on\\_stripe**\n\n_Numeric_\n\n50\n\nThe number of hours since the email address supplied with the payment was first seen on Stripe overall. This value includes payments from 2020 onwards.\n\n**hours\\_since\\_card\\_first\\_seen**\n\n_Numeric_\n\n50\n\nThe number of hours since the card for the payment was first seen on your account. This value includes payments from 2020 onwards.\n\n**hours\\_since\\_first\\_successful\\_auth\\_on\\_card**\n\n_Numeric_\n\n50\n\nThe number of hours since the first successful auth for the card associated with the payment happened on your account. This value includes payments from 2020 onwards.\n\n**minutes\\_since\\_customer\\_was\\_created**\n\n_Numeric_\n\n50\n\nThe number of minutes since the [Customer](https://docs.stripe.com/api/customers) object making the payment was created on your account.\n\n**minutes\\_since\\_email\\_first\\_seen**\n\n_Numeric_\n\n50\n\nThe number of minutes since the email address supplied with the payment was first seen on your account. This value includes payments from 2020 onwards.\n\n**minutes\\_since\\_email\\_first\\_seen\\_on\\_stripe**\n\n_Numeric_\n\n50\n\nThe number of minutes since the email address supplied with the payment was first seen on Stripe overall. This value includes payments from 2020 onwards.\n\n**minutes\\_since\\_card\\_first\\_seen**\n\n_Numeric_\n\n50\n\nThe number of minutes since the card for the payment was first seen on your account. This value includes payments from 2020 onwards.\n\n**minutes\\_since\\_first\\_successful\\_auth\\_on\\_card**\n\n_Numeric_\n\n50\n\nThe number of minutes since the first successful auth for the card associated with the payment happened on your account. This value includes payments from 2020 onwards.\n\n**seconds\\_since\\_customer\\_was\\_created**\n\n_Numeric_\n\n50\n\nThe number of seconds since the [Customer](https://docs.stripe.com/api/customers) object making the payment was created on your account.\n\n**seconds\\_since\\_email\\_first\\_seen**\n\n_Numeric_\n\n50\n\nThe number of seconds since the email address supplied with the payment was first seen on your account. This value includes payments from 2020 onwards.\n\n**seconds\\_since\\_email\\_first\\_seen\\_on\\_stripe**\n\n_Numeric_\n\n50\n\nThe number of seconds since the email address supplied with the payment was first seen on Stripe overall. This value includes payments from 2020 onwards.\n\n**seconds\\_since\\_card\\_first\\_seen**\n\n_Numeric_\n\n50\n\nThe number of seconds since the card for the payment was first seen on your account. This value includes payments from 2020 onwards.\n\n**seconds\\_since\\_first\\_successful\\_auth\\_on\\_card**\n\n_Numeric_\n\n50\n\nThe number of seconds since the first successful authorization for the card associated with the payment on your account. This value includes payments from 2020 onwards.",
    "title": "Supported attributes | Stripe Documentation",
    "description": "Review a complete list of attributes supported in Radar rules.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/disputes/prevention/card-testing",
    "markdown": "# Protect yourself from card testing\n\n## Learn about this fraudulent activity and how to protect yourself against it.\n\nCard testing is a type of fraudulent activity where someone tries to determine whether stolen card information is valid so that they can use it to make purchases. A fraudster may do this by purchasing stolen credit card information, and then attempting to validate or make purchases with those cards to determine which cards are still valid. Other common terms for card testing are “carding”, “account testing”, and “card checking.”\n\nFraudulent activity such as card testing is an unavoidable part of online commerce. Card testing, however, has consequences for the entire payments ecosystem, so merchants, card networks, and Stripe share responsibility to prevent it. At Stripe, we’re constantly improving our tools and systems to detect and reduce fraud, but you must remain vigilant with respect to fraud.\n\n## How card testing works ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCard testers use both authorizations and payments to determine whether the stolen or generated card information they have is valid or not.\n\n*   **Authorizations**—This is the recommended method to test cards, as authorizations don’t typically show up on cardholder statements. This also makes it less likely the cardholder will notice or report the fraudulent activity.\n*   **Payments**—Card testers prefer smaller payments, which are less likely to be noticed by cardholders and reported as fraudulent. This makes donation pages and businesses that facilitate small-value purchases ideal targets for card testers.\n\n## Consequences ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCard testing has many negative outcomes, some of which get worse over time as card testing continues:\n\n*   **Disputes**—Many types of card testing involve payments, some of which succeed. Customers notice successful payments and report them as fraud, which will result in disputes that cost you time and money.\n*   **Higher decline rates**—Card testing usually causes a large number of declines to be associated with your business. A high decline rate damages the reputation of your business with card issuers and card networks, which makes all of your transactions appear riskier. This can result in an increased decline rate for legitimate payments, even after card testing stops.\n*   **Additional fees**—Card testing activity can result in additional fees, such as authorization fees for custom pricing plans, and dispute fees.\n*   **Infrastructure strain**—Card testing usually results in numerous network requests and operations. This additional traffic can overburden your infrastructure and disrupt legitimate activity.\n*   **Damages ecosystem health**—Card testing has negative impacts on the financial system as a whole, so both Stripe and our financial partners want to help you stop it.\n\n## Active card testing checklist ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your integration is being exploited by card testers, we recommend that you take the following actions immediately:\n\n*   [Identify](https://docs.stripe.com/disputes/prevention/card-testing#identify-card-testing) the card testing activity.\n*   [Refund](https://docs.stripe.com/refunds) fraudulent payments to avoid disputes.\n*   Add one or more [mitigations](https://docs.stripe.com/disputes/prevention/card-testing#combine-mitigations) to your integration to stop the card testing.\n*   Monitor your integration to ensure your mitigations are effective.\n\n## Identify card testing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can identify most card testing activity by a significant increase in declines. When investigating card testing, you can view declines in three places in the Dashboard. These sections of the Dashboard give you both a high-level and detailed view of card testing activity:\n\n*   Payments that were blocked due to card testing will be indicated as such when you view **Payment Details** on blocked transactions.\n*   The graphs under [Developers](https://dashboard.stripe.com/developers) in the Dashboard show recent activity on your Stripe account. Elevated decline rates caused by card testing will usually show up on these graphs.\n*   Specific card testing declines will be in [your failed request logs](https://dashboard.stripe.com/logs?success=false) as 402 errors.\n\n![Identify card testing](https://b.stripecdn.com/docs-statics-srv/assets/identify-card-testing.b93053f0e243f06d55968d8717cbf3c0.png)\n\nPayment blocked due to suspected card testing\n\n## Prevent card testing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCard testers employ a wide variety of techniques to make their fraudulent activity difficult to block. As a result, simple firewall rules or filters based on things like user agent strings are usually not sufficient to prevent card testing on their own.\n\nOne of the most popular ways a card tester will attack you is by using your Stripe secret key to create charges and validations. Ensure that you’re [keeping your keys safe](https://docs.stripe.com/keys#safe-keys) and don’t publish your secret key publicly.\n\n#### Caution\n\nNot a developer? Using a plugin or platform? Preventing and mitigating card testing typically requires code-level changes, so you’ll need to show this documentation to the developer or vendor who wrote the code and work with them to prevent card testing.\n\n### Optimize your Stripe integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe has many automated and manual controls in place to mitigate card testing, including rate limiters, alerts, machine learning models, ongoing reviews, and so on. When we first detect that you’re under a card testing attack, we’ll apply as many controls as we can to mitigate the attack.\n\n_However, the success of Stripe’s controls depends on your integration and what signals you send to us_. We use many signals to distinguish between card testing and legitimate payments. While we compute some of these signals automatically, many of them depend on the information that your integration provides. In general, the more data your integration provides, the more successful card testing prevention can be.\n\nFurthermore, integrating with Stripe’s recommended integration enables us to run [CAPTCHA](https://www.hcaptcha.com/) automatically on suspected card testing charges. CAPTCHA is an effective challenge that stops fraudsters but is still low friction enough to allow your good users to use your service. To opt out of our CAPTCHA integration, reach out to [Stripe Support](https://support.stripe.com/contact/login).\n\nUsing one of our recommended payment integrations allows you to get the most out of Stripe’s card testing prevention. If you can’t use a recommended integration, include as much data as possible or implement your own controls.\n\n| Integration type | Card testing integration quality |\n| --- | --- |\n| [Stripe Payment Links](https://docs.stripe.com/payment-links) Recommended | Excellent |\n| [Stripe Checkout](https://docs.stripe.com/payments/checkout) Recommended | Excellent |\n| [Stripe Elements](https://docs.stripe.com/payments/elements) with Customer signals Recommended | Excellent |\n| Direct [API](https://docs.stripe.com/api) integration with client and Customer signals | Very good |\n| Direct [API](https://docs.stripe.com/api) integration with client signals | Good |\n| Direct [API](https://docs.stripe.com/api) integration with Customer signals | Fair |\n| Direct [API](https://docs.stripe.com/api) integration with no additional signals | Poor |\n\nIncluding the following information with your payments can have a significant impact on the performance of card testing models. Our recommended integrations enable you to collect this information, while direct integrations might need to explicitly include this data.\n\n*   [Advanced fraud detection](https://docs.stripe.com/disputes/prevention/advanced-fraud-detection) Highest impact\n*   IP address\n*   Customer email\n*   Customer name\n*   Billing address\n\nFinally, your API keys give you access to Stripe’s systems and a global financial network. That access is what card testers want to exploit, so it’s important to [keep your keys safe](https://docs.stripe.com/keys#safe-keys) and [put safeguards around the functionality those keys provide](https://docs.stripe.com/disputes/prevention/card-testing#combine-mitigations) to prevent fraud and other malicious activity.\n\n### Control implementation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEndpoints targeted by card testers typically allow them to do one of the following:\n\n*   Attach a card to a customer.\n*   Make a payment.\n\nAdding security restrictions to endpoints that expose this functionality will help you prevent or mitigate card testing. The restrictions you implement should make card testing impractical while having little to no impact on your legitimate traffic.\n\nThe specific security measures you add to your integration will vary depending on your situation and the needs of your business. Several common approaches are described below.\n\n### Add a CAPTCHA ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCard testers often use automated scripts that can be blocked using a CAPTCHA. [Google’s reCAPTCHA](https://developers.google.com/recaptcha/intro) is often effective for blocking card testing. They provide options for both visible and invisible CAPTCHAS, depending on your needs. If you’ve added a CAPTCHA to your integration but card testing hasn’t stopped, check the following:\n\n*   Make sure the CAPTCHA requires validation on all requests that enable card validations or payments with Stripe.\n*   Review the CAPTCHA documentation to make sure it has been implemented properly.\n*   If you’re using a CAPTCHA that provides a score, adjust the threshold at which you prevent requests from succeeding.\n*   Try a different CAPTCHA solution, such as switching from an invisible CAPTCHA to a visible one, or using a different CAPTCHA solution entirely.\n\n### Add rate limits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn some cases, you can stop card testing by adding [rate limits](https://docs.stripe.com/rate-limits). Tailor these rate limits to stop the specific kind of card testing you’re experiencing. For example, if card testers use your integration to validate cards by attaching them to new customers, an effective deterrent might be to limit the number of new customers that can be created by a single IP address in one day.\n\n### Require login or session validation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCard testing can often be prevented by requiring login or session validation when performing certain actions, such as creating an account or making a payment. Some of [the safeguards that protect against Cross-Site Request Forgery (CSRF) attacks](https://owasp.org/www-project-cheat-sheets/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html) are also effective against some types of card testing, such as CSRF tokens.\n\n### Detect and prevent unusual behavior ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the Dashboard, [webhooks](https://docs.stripe.com/webhooks), or continuous monitoring with [Stripe Sigma or Data Pipelines](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data) to track anomalies in your traffic. You can compare card testing activity to typical legitimate traffic, and then build filters that limit or prevent only the card testing activity. For example, you might make changes to your system that:\n\n*   Limit the number of cards that can be attached to a single customer\n*   Limit the number of customers that can be created with a single IP address\n*   Filter out requests with certain user agents or other parameters\n\nTo do so, you can leverage [custom rules](https://docs.stripe.com/radar/rules/reference#velocity-rules) in Radar for Fraud Teams. We cover that in the next section.\n\n### Build custom rules for your risk appetite![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRadar comes with built-in rules to block based on [bank checks](https://docs.stripe.com/radar/rules#traditional-bank-checks), such as [CVC](https://docs.stripe.com/disputes/prevention/verification \"Card verification code check (CVC)\") checks.\n\nIf you understand your customer behavior and want to customize the velocity of payments in detail, you can build [custom rules](https://docs.stripe.com/radar/rules/reference#velocity-rules) in Radar for Fraud Teams.\n\nYou can find examples in the [Radar 101 guide](https://stripe.com/guides/radar-rules-101#rules-that-help-prevent-card-testing-or-card-cashing).\n\n### Use a combination of mitigations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIt might make sense to combine multiple approaches to stop card testing in order to maximize the impact on fraudulent activity without having an adverse effect on legitimate traffic. For example, you might combine CAPTCHAS and rate limits so the first payment attempt from an IP address succeeds without restriction, but subsequent requests made by that same IP address for the next several hours require a captcha verification to succeed.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Advanced fraud detection](https://docs.stripe.com/disputes/prevention/advanced-fraud-detection)\n*   [Optimizing your Radar integration](https://docs.stripe.com/radar/integration)\n*   [Keeping your keys safe](https://docs.stripe.com/keys#safe-keys)\n*   [Radar 101 guide](https://stripe.com/guides/radar-rules-101)",
    "title": "Protect yourself from card testing | Stripe Documentation",
    "description": "Learn about this fraudulent activity and how to protect yourself against it.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly",
    "markdown": "# Save directly without charging | Stripe DocumentationThe Stripe Docs logo\n\nUse [SetupIntents](https://docs.stripe.com/payments/setup-intents) to collect card details without charging the card. Saving cards with Stripe Terminal using SetupIntents requires you to:\n\n1.  Create or retrieve a [Customer](https://docs.stripe.com/api/customers \"Customers\") object.\n2.  Create a [SetupIntent](https://docs.stripe.com/api/setup_intents) object to track the process.\n3.  Collect a payment method after collecting the customer’s consent.\n4.  Submit the payment method details to Stripe.\n\n## Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use [SetupIntents](https://docs.stripe.com/payments/setup-intents) to collect card details on Visa, Mastercard, American Express, Discover, co-branded Interac, and co-branded eftpos cards. Single-branded Interac cards, single-branded eftpos cards, and [mobile wallets](https://docs.stripe.com/payments/wallets) (for example, Apple Pay or Google Pay) aren’t supported.\n\n#### Note\n\nThe server-driven-based SetupIntents API is compatible with BBPOS WisePOS E and Stripe Reader S700.\n\n[](#create-customer)\n\nTo charge a card saved with Stripe, you must attach it to a [Customer](https://docs.stripe.com/api/customers).\n\nWhen you include a customer in your [SetupIntent](https://docs.stripe.com/api/setup_intents) before confirming, Stripe automatically attaches the generated card payment method to the [Customer](https://docs.stripe.com/api/customers) object you provide.\n\nInclude the following code on your server to create a new `Customer`.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#create-setupintent)\n\n#### Note\n\nWe recommend providing a [customer ID](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-customer) while creating a SetupIntent—doing so attaches the card payment method to the `Customer` upon successful setup. If you don’t provide a customer ID, you must attach the payment method in a separate call.\n\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent to set up a customer’s payment method for future payments. The SetupIntent tracks the steps of this setup process. For Terminal, this includes collecting and recording cardholder consent.\n\nYou must create the SetupIntent on your server and include `card_present` on the `payment_method_types` parameter.\n\nThe SetupIntent contains a [client secret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret), which is a key that’s unique to the individual SetupIntent. You must obtain the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") from the SetupIntent on your server and pass it to the client side.\n\n`post '/create_setup_intent' do   intent = # ... Create or retrieve the SetupIntent   {id: intent.id, client_secret: intent.client_secret}.to_json end`\n\n[](#collect-payment-method)\n\nAfter you create a SetupIntent, you need to collect a payment method with the SDK and collect customer consent. If the customer provides the required form of agreement or consent, set the `customer_consent_collected` boolean to `true`.\n\n#### Note\n\nCollect customer consent verbally or with a checkbox in your application. You must comply with all applicable laws, rules, and regulations in your region.\n\nYou must call the [process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent) endpoint, which handles both collecting and confirming the SetupIntent. If the customer provides consent, set the `customer_consent_collected` boolean to `true`.\n\n`curl https://api.stripe.com/v1/terminal/readers/{{READER_ID}}/process_setup_intent \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d setup_intent={{SETUP_INTENT_ID}} \\   -d customer_consent_collected=true`\n\nThis method collects encrypted payment method data using the connected card reader, and associates the encrypted data with the SetupIntent.\n\n### Cancel collection ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Programmatic cancellation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can cancel collecting a payment method by calling [cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action).\n\n#### Caution\n\nCollecting a payment method happens locally and requires no authorization or updates to the SetupIntent object until the next step.\n\n[](#submit-payment-method)\n\nYour previous call to [process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent) handles the confirm for you, so no further action is necessary.\n\nA successful setup returns a `succeeded` value for the SetupIntent’s [status](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-status) property, along with a [generated\\_card](https://docs.stripe.com/api/setup_attempts/object#setup_attempt_object-payment_method_details-card_present-generated_card), which is a reusable `card` payment method you can use for online payments.\n\n#### Note\n\nThe [setup\\_intent.payment\\_method](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-payment_method) is a `card_present` PaymentMethod that represents the tokenization of the card in-store and isn’t chargeable online.\n\nThe `generated_card` payment method automatically attaches to the customer you provided during [SetupIntent creation](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly#create-setupintent). You can retrieve the `generated_card` payment method by expanding the SetupIntent’s `latest_attempt` property.\n\n`curl -G https://api.stripe.com/v1/setup_intents/`\n\n`{{SETUP_INTENT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"expand[]\"=latest_attempt`\n\nAlternatively, you can retrieve the attached payment method by fetching the list of payment methods that gets attached to the customer.\n\n`curl -G https://api.stripe.com/v1/customers/`\n\n`{{CUSTOMER_ID}}`\n\n`/payment_methods \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d type=card`\n\nIf you didn’t provide a customer during SetupIntent creation, you can attach the `generated_card` to a Customer object in a separate call.\n\n`curl https://api.stripe.com/v1/payment_methods/`\n\n`{{PAYMENT_METHOD_ID}}`\n\n`/attach \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d customer=  {{CUSTOMER_ID}}    `\n\nIf the setup isn’t successful, inspect the returned error to determine the cause. For example, failing to collect and notify Stripe of customer consent results in an error.\n\n## Compliance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. For example, the European Data Protection Board has issued guidance regarding saving payment details. These requirements generally apply if you want to save your customer’s payment method for future use, such as presenting a customer’s payment method to them in the checkout flow for a future purchase or charging them when they’re not actively using your website or app.\n\nAdd terms to your website or app that state how you plan to save payment method details and allow customers to opt in. If you plan to charge the customer while they’re offline, then at a minimum, make sure that your terms also cover the following:\n\n*   The customer’s agreement to your initiating a payment or a series of payments on their behalf for specified transactions.\n*   The anticipated timing and frequency of payments (for instance, whether charges are for scheduled installment or subscription payments, or for unscheduled top-ups).\n*   How the payment amount is determined.\n*   Your cancellation policy, if you’re setting up the payment method for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\nWhen you save a payment method, it can only be used for the specific usage that you included in your terms. If you want to charge customers when they’re offline and also save the customer’s payment method to present to them as a saved payment method for future purchases, you must explicitly collect consent from the customer. One way to do so is with a “Save my payment method for future use” checkbox.",
    "title": "Save directly without charging | Stripe Documentation",
    "description": "Save card details for online reuse from an in-person transaction.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/saving-cards/save-after-payment",
    "markdown": "# Save card details after payment\n\n## Take an in-person payment and save card details to use later, when the cardholder is not physically present.\n\nYou can’t reuse the `card_present` [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") from an in-person transaction, but in most cases you can create a reusable `generated_card` PaymentMethod that represents the same card. From your customer’s perspective, they’re the same payment method.\n\nRequest a `generated_card` when you create a PaymentIntent by specifying a value for [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage). If the card supports being saved for future payments, successfully [processing or confirming the payment](https://docs.stripe.com/terminal/payments/collect-card-payment) returns the `generated_card` ID. If the PaymentIntent has an associated [Customer](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-customer), the `generated_card` automatically attaches to that Customer. If not, then you can manually attach it to a Customer later.\n\nWhen you request a `generated_card`, always verify that the [PaymentIntent.latest\\_charge](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge) contains a [generated\\_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card). In some cases, such as when using certain cards stored in digital wallets, a successful payment doesn’t create a `generated_card`. If that happens, and you require a `generated_card`, you have two options:\n\n*   Prompt the cardholder to save a different card using [the flow to save a card without taking a payment](https://docs.stripe.com/terminal/features/saving-cards/save-cards-directly).\n*   Refund the in-person payment, indicate that the transaction failed, and instruct the cardholder to use a different card.\n\nThe initial, in-person payment benefits from liability shift and, in certain markets, [lower pricing](https://stripe.com/terminal#pricing) for standard Terminal payments. However, subsequent payments using the `generated_card` are card-not-present online transactions. For example:\n\n*   A gym customer pays in person for an initial session and a membership subscription. The transaction sets up a `generated_card` to use for future automatic membership renewals.\n*   A customer at a clothing store provides their email address when making a purchase at the checkout counter. The transaction creates a customer record and an associated `generated_card`. That allows the customer to log into the store’s website later and place an order using the same card.\n\n#### Note\n\nFor most businesses, when you process a [digital wallet payment](https://docs.stripe.com/payments/wallets) such as Apple Pay or Google Pay, you can’t create a `generated_card` or otherwise save the payment method for reuse. For car rental services and hotels, Stripe offers a limited private beta feature that allows you to save a digital wallet payment method for reuse. To request access, contact [stripe-terminal-betas@stripe.com](mailto:stripe-terminal-betas@stripe.com).\n\n### Client-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith the iOS, Android, and React Native SDKs, you can create a PaymentIntent client-side and provide the `customer` and set `setup_future_usage`.\n\n#### Note\n\nClient-side `PaymentIntent` creation is possible with the iOS or Android SDKs. If you’re using the JavaScript SDK for Stripe Terminal, create a `PaymentIntent` server-side.\n\n### Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe JavaScript SDK and server-driven integration require you to create the PaymentIntent on your server. For iOS or Android, you can create the PaymentIntent on your server if the information required to start a payment isn’t readily available in your app.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=card_present \\  -d amount=1099 \\  -d currency=usd \\  -d customer={{CUSTOMER_ID}} \\   -d setup_future_usage=off_session`\n\nYou can retrieve the saved card details by [listing](https://docs.stripe.com/api/payment_methods/list) the card payment methods associated with that customer.\n\n### Compliance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. For example, the European Data Protection Board has issued guidance regarding saving payment details. These requirements generally apply if you want to save your customer’s payment method for future use, such as presenting a customer’s payment method to them in the checkout flow for a future purchase or charging them when they’re not actively using your website or app.\n\nAdd terms to your website or app that state how you plan to save payment method details and allow customers to opt in. If you plan to charge the customer while they’re offline, then at a minimum, make sure that your terms also cover the following:\n\n*   The customer’s agreement to your initiating a payment or a series of payments on their behalf for specified transactions.\n*   The anticipated timing and frequency of payments (for instance, whether charges are for scheduled installment or subscription payments, or for unscheduled top-ups).\n*   How the payment amount is determined.\n*   Your cancellation policy, if you’re setting up the payment method for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\nWhen you save a payment method, it can only be used for the specific usage that you included in your terms. If you want to charge customers when they’re offline and also save the customer’s payment method to present to them as a saved payment method for future purchases, you must explicitly collect consent from the customer. One way to do so is with a “Save my payment method for future use” checkbox.",
    "title": "Save card details after payment | Stripe Documentation",
    "description": "Take an in-person payment and save card details to use later, when the cardholder is not physically present.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/radar/reviews/auth-and-capture",
    "markdown": "# Reviewing uncaptured payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use reviews if your Stripe integration uses auth and capture.\n\nBy default, you [create Stripe payments](https://docs.stripe.com/payments/accept-a-payment) in one step, which requires no further action on your part to send the funds to your bank account.\n\nHowever, Stripe also supports two-step payments, often called [auth and capture](https://support.stripe.com/questions/does-stripe-support-authorize-and-capture). If your integration uses this technique, keep in mind that **approving a review and capturing a payment are separate actions.**\n\n## Reviewing uncaptured payments in the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe places an uncaptured payment in review, the Dashboard displays a **Capture** button in addition to the set of buttons for closing the review by approving or refunding it. Also, because refunding uncaptured payments is often called “releasing” or “[reversing](https://docs.stripe.com/refunds#refund-requests),” uncaptured payments have a **Cancel** button instead of a **Refund** button.\n\n#### Note\n\nApproving the review doesn’t automatically capture the charge. You still need to click **Capture**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/uncaptured-payment.b9aab5781bebea8e1cc8f349dc2092bf.png)\n\n## Using the API to automatically capture approved payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThrough the API, you can set up your integration to:\n\n*   Immediately capture payments _not_ placed in `review`\n*   Leave payments placed in `review` uncaptured\n*   When the review is approved, capture the payment\n\n### Immediately capture payments not placed in review![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create an uncaptured payment, set the capture behavior accordingly in the API request. On success, check the payment intent’s [review](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-review) attribute. If the attribute is empty, capture the charge.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`# Get the credit card details submitted by the form # Create a PaymentIntent with manual capture payment_intent = Stripe::PaymentIntent.create({   amount: 1000,   currency: 'usd',   payment_method: '{{PAYMENT_METHOD_ID}}',   description: 'Example charge',   confirm: true,   capture_method: 'manual', })  # Check if the payment is in review. If not, capture it. if !payment_intent.review   payment_intent.capture end`\n\n### Capturing a payment after a review is approved![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy design, the previous step left the payments in `review` uncaptured. In this step, use [webhooks](https://docs.stripe.com/webhooks \"webhook\") to automate the process of capturing these payments upon approval.\n\nStart by [configuring your webhooks](https://docs.stripe.com/webhooks#register-webhook) to listen for the `review.closed` event. The event data includes the [review object](https://docs.stripe.com/api#review_object), and the object’s `reason` attribute indicates whether the review was approved, or if it was closed for some other reason (for example, the payment was refunded).\n\n`// Review object included in review.closed event webhook. {   \"id\": \"prv_08voh1589O8KAxCGPcIQpmkz\",   \"object\": \"review\",   \"payment_intent\": \"pi_1D0CsEITpIrAk4QYdrWDnbRS\",   \"created\": 1474379631,   \"livemode\": false,   \"open\": false,   \"reason\": \"approved\" }`\n\nIf `reason` is `approved`, capture the charge.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post \"/my/webhook/url\" do   event_json = JSON.parse(request.body.read)   event = Stripe::Event.retrieve(event_json[\"id\"])    if event.type == 'review.closed'     review = event.object     if review.reason == 'approved'       pi = Stripe::PaymentIntent.retrieve(review.payment_intent)       pi.capture     end   end    status 200 end`\n\nTo capture approved payments, the review process must be completed within 7 days. Otherwise, as with any other uncaptured payment, the authorization automatically expires and you can no longer capture the payment.",
    "title": "Reviewing uncaptured payments | Stripe Documentation",
    "description": "Learn how to use reviews if your Stripe integration uses auth and capture.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/radar/analytics/fraud-insights",
    "markdown": "# Fraud insights | Stripe DocumentationThe Stripe Docs logo\n\n## Review fraud trends specific to your business so you can tailor your strategy.\n\nBuilding an effective fraud fighting strategy requires understanding the specific drivers of fraud for your business. If you use [Radar for Fraud Teams](https://docs.stripe.com/radar \"Radar for Fraud Teams\"), you can access the [Insights](https://dashboard.stripe.com/radar/insights) tab of the Radar page in your Dashboard to:\n\n*   Visualize the ratio of fraudulent and legitimate transactions across your payments.\n*   Identify combinations of Radar attributes that have material impact on your fraud rates.\n*   Adjust your Radar rules to effectively balance fraud prevention and legitimate customer conversion.\n\n## Configure your data set![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can specify the time period analyzed and what types of payment activity constitute fraud to further customize your results.\n\n### Specify the time period![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, we display statistics in near real-time for the prior 30 days of transaction history. To see data for a different time period:\n\n1.  Click the **Date** filter to open the time period editor.\n2.  Use the dropdown to choose a relative comparator.\n3.  Depending on the comparator you choose, set the parameters, such as _in the last 1 months_ or _between 2/26/2024 and 3/18/2024_.\n4.  Choose your local time zone or Greenwich Mean Time (UTC).\n5.  Click **Apply**.\n\n### Configure your fraud definition![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nClick **Configure** to choose which types of transactions to include as fraudulent in your Insights statistics.\n\n*   **All fraudulent transactions**: Payments disputed for fraud, reported as early fraud warning (EFW), or refunded as fraud\n*   **Only disputes**: Any disputed payment, regardless of [category](https://docs.stripe.com/disputes/categories)\n*   **Only fraudulent disputes**: Disputed payments in the fraud category\n*   **Only early fraud warnings**: Issuer-flagged suspicious payment [EFWs](https://docs.stripe.com/disputes/how-disputes-work#early-fraud-warnings)\n\n## Evaluate your fraud markers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe analyzes all the payments for the specified time period, then presents:\n\n*   A summary of the total fraudulent and legitimate payments for the time period.\n*   A table of the top rule attribute values that suggest a correlation with fraud, based on the ratio of fraudulent to legitimate payments.\n\nThe summary and each attribute in the table provide the following statistics:\n\n| Statistic | Description |\n| --- | --- |\n| Fraud percentage | The percentage of fraudulent payment volume where this rule attribute was present. |\n| Legitimate percentage | The percentage of legitimate payment volume where this rule attribute was present. |\n| Fraud volume | The total amount of the fraudulent payments where this rule attribute was present. |\n| Legitimate volume | The total amount of the legitimate payments where this rule attribute was present. |\n| Fraud count | The total number of fraudulent payments where this rule attribute was present. |\n| Legitimate count | The total number of legitimate payments where this rule attribute was present. |\n\n![Personalized fraud indicator results](https://b.stripecdn.com/docs-statics-srv/assets/fraud-insights-indicator-table.9f171b09a9e83d23e6cdb6b83a3fc2a7.png)\n\nPersonalized fraud indicator results\n\n## Use filters to discover high-risk attribute combinations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add any of the attribute values presented as your top fraud indicators as a filter. Doing so adjusts the table to show a new set of top attribute values that corresponded to fraud _in combination with the filtered rule attribute value_. Continue applying filters in this way to find a combination of rule attribute values that block transactions with the attributes you desire.\n\nFor example, say your top indicator shows that 19% of fraudulent payment volume had Delaware as the billing state. Blocking all payments from Delaware isn’t sensible, but to further explore through filters, you might take the following steps:\n\n1.  Filter on “billing state is Delaware” and identify which other rule attributes corresponded most to fraud when the billing state is Delaware. In this case, you find that 42% of fraudulent payment volume where Delaware is the billing state has a shipping state that isn’t Delaware. That’s only 8% of the total fraudulent payment volume, and blocking all payments with billing state Delaware and a different shipping state is too aggressive, so you continue.\n2.  Add “shipping state is not Delaware” as a second filter. Applying both filters and looking at the resulting fraudulent payment volume reveals that 75% of it involves payments of greater than 500 USD. This amounts to 6% of the total fraudulent payment volume.\n3.  Add “payment amount greater than 500 USD” as a third filter. Comparing the results of all three filters to total payment volumes shows 6% of all fraudulent payment volume, but only 0.1% of all legitimate payment volume.\n4.  At this point, you might set up a rule to block payments of over 500 USD that have Delaware as the billing state and a different state for shipping. You can expect that rule to block 6% of fraudulent payment volume and only 0.1% of legitimate payment volume.\n\nAs the example illustrates, you can apply a series of filters to determine a set of rule attribute values that together identify a material percentage of fraudulent payment volume. When that set also reflects a low percentage of legitimate payment volume, a rule to block those values can effectively reduce fraud while having limited impact on legitimate payments.\n\n### Customize filters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![Example chart about the risk score attribute](https://b.stripecdn.com/docs-statics-srv/assets/fraud-insights-custom-filter.09750cf1a92546047e0f096bf5585f5b.png)\n\nYou can also create a filter without using the rule attributes presented in the table.\n\n1.  Click **More filters**.\n2.  Choose the rule attribute that you want to create a filter for.\n3.  Depending on the attribute you choose, set the parameters, such as _Risk score is greater than 15_ or _Card bin is 4242_.\n4.  Click **Apply**.\n\n## Create a rule![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you assemble the set of filters that represent your optimum ratio between blocking the most risky transactions without compromising legitimate payments, you can automatically create a rule to prevent payments where all the selected attributes exist simultaneously.\n\n1.  Click **Add block rule** to slide open the rule editor.\n2.  Check that the rule accurately reflects the attributes you filtered.\n3.  (Optional) Augment the rule to include other attributes or your own custom metadata, such as product codes or retail locations. Try [Radar Assistant](https://docs.stripe.com/radar/rules#how-to-create-effective-rules) to generate a rule based on your natural language prompts.\n4.  Click **Test rule**.\n5.  If necessary, correct any validation errors and retest.\n6.  On the **Review new rule** page, review how this rule performs against your recent transactions to confirm whether you want to enable it.\n7.  Click **Add rule** to begin applying this rule to all future transactions.\n\n![Sliding drawer to create a rule from your applied filters](https://b.stripecdn.com/docs-statics-srv/assets/fraud-insights-create-rule.a985df06aaeac7f3d30eb9426922bd8f.png)\n\n## Inspect charts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can find visualizations of the attributes identified as your top drivers of fraud below the table of your most common fraud indicators. Each chart shows the percentages of total fraudulent and legitimate payment volume associated with given values of the attribute over a [specified time period](#specify-the-time-period).\n\n#### Note\n\nThe charts represent percentages of total payment volumes, not percentages of total numbers of payments. As an example, imagine that the **Billing state** graph shows 6% of fraudulent payment volume for Utah. That means the total amount charged for fraudulent payments with Utah as the billing state is 6% of the total amount charged for all fraudulent payments. It doesn’t indicate that 6% of all fraudulent payment transactions had Utah as the billing state.\n\nHover over any point in the chart to see additional metrics for both fraudulent and legitimate payments associated with that attribute value.\n\n![Example chart about the card count by IP address attribute](https://b.stripecdn.com/docs-statics-srv/assets/fraud-insights-chart.f60beaf9b98c5ece9587228c9b23b449.png)\n\nHovering displays additional volume and count metrics.\n\n| Metric | Description |\n| --- | --- |\n| **Percentage** | Percent of payments by volume at the selected point |\n| **Volume** | Total amount charged for payments at the selected point |\n| **Count** | Number of payments at the selected point |\n\n### Change chart attributes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charts displayed reflect the [Radar rule attributes](https://docs.stripe.com/radar/rules/supported-attributes) corresponding to your top fraud drivers. To generate visualizations for other attributes:\n\n1.  Click **Select attributes**.\n2.  Scroll through the list or enter keywords in the search bar to find attributes.\n3.  Click an attribute’s card to select or deselect it. Selected attributes display a checkmark and the button displays the total number of attributes selected.\n4.  Click **Show x attributes** to generate the charts for your selected attributes.\n\n![Radar rule attribute selection modal](https://b.stripecdn.com/docs-statics-srv/assets/fraud-analytics-attribute-selector.686f8b86dbac286e1d030236176134f8.png)\n\nThe Radar rule attribute modal allows you to choose from more than 150 attributes.",
    "title": "Fraud insights | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/onboarding/quickstart",
    "markdown": "# Build a Connect integration | Stripe DocumentationThe Stripe Docs logo\n\nSearch the docs or ask a question",
    "title": "Build a Connect integration | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/direct-charges-fee-payer-behavior",
    "markdown": "# Fee behavior on connected accounts\n\n## Understand how to configure the billing behavior for new connected accounts.\n\nThe `controller.fees.payer` property on `v1/accounts` determines the set of billing behaviors you can expect for direct charges and product usages that occur on this connected account. This doc details the behavior of the different values it can have.\n\n#### Note\n\nAny activity occurring at the platform account level is billed to your platform regardless of the `controller.fees.payer` value on your connected accounts. For example, Stripe charges the platform directly for destination charges (with or without `on_behalf_of`) and card account updates for cards stored on your platform account.\n\n## Selecting billing behavior![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can only set the [controller.fees.payer](https://docs.stripe.com/api/accounts/create#create_account-controller-fees-payer) property when you create an account.\n\nThe following sections describe the behavior of each value.\n\n### `account`\n\nStripe collects fees directly from your connected account. We don’t charge any [Connect fees](https://stripe.com/connect/pricing) to it or to your platform.\n\nAny application fees that your platform bills to the connected account are in addition to Stripe fees.\n\nYou can set the payer type to `account` when you create connected accounts. Accounts created with `type=standard` also have this value.\n\n### `application`\n\nThe platform pays payment fees for direct charges and fees for Stripe products like Radar, Card Account Updater, and Instant Payouts. For complete details, see [the table below](#fee-payer-behaviors).\n\nThe platform also pays [Connect fees](https://stripe.com/connect/pricing) for these accounts .\n\nWe recommend that you monetize payments and Stripe products where the platform is billed by collecting fees from your connected accounts.\n\nYou can set the payer type to `application` when you create connected accounts.\n\nPlatforms that pay Stripe payment fees for direct charges can access dedicated reports.\n\nSee [Platform Reporting for direct charge payment fees paid by platform](https://docs.stripe.com/connect/direct-charge-buy-rate-reporting-overview).\n\n### `application_custom` or `application_express`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`application_custom` and `application_express` are assigned to accounts created with `type=custom` and `type=express`, respectively. Their billing behaviors for direct charges and connected account usage of Stripe products matches the historical behavior of Custom and Express accounts. For complete details, see [the table below](#fee-payer-behaviors).\n\nWe recommend that you monetize payments and Stripe products where the platform is billed by collecting fees from your connected accounts.\n\nYou can’t set the payer type to `application_custom` or `application_express` when you create connected accounts. They only apply to accounts created with `type=custom` or `type=express`.\n\n## List of fee behaviors for payer values ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen connected accounts pay Stripe fees, they’re the same as [fees paid by non-Connect Stripe users](https://stripe.com/pricing).\n\n| Product Category | account | application | application\\_custom | application\\_express |\n| --- | --- | --- | --- | --- |\n| **Stripe payment processing fees** | Connected Account | Platform | Connected Account | Connected Account |\n| **Dispute fees** | Connected Account | Platform | Connected Account | Connected Account |\n| **Instant Payouts** | Connected Account | Platform | Platform | Platform |\n| **LPM Payment Failure Fees** | Connected Account | Platform | Connected Account | Connected Account |\n| **Premium Payouts** | Connected Account | Platform | Platform | Platform |\n| **Invoicing and Subscriptions** | Connected Account | Platform | Platform | Platform |\n| **Radar** | Connected Account | Platform | Varies | Varies |\n| **Terminal Add-ons** | Connected Account | Platform | Connected Account | Connected Account |\n| **Stripe Tax** | Connected Account | Platform | Platform | Platform |\n| **3D Secure** | Connected Account | Platform | Varies | Varies |\n| **Adaptive Acceptance** | Connected Account | Platform | Platform | Platform |\n| **Card Account Updater** | Connected Account | Platform | Platform | Platform |\n| **Checkout Add-ons** | Connected Account | Platform | Platform | Platform |\n| **Instant bank account verifications** | Connected Account | Platform | Platform | Platform |",
    "title": "Fee behavior on connected accounts | Stripe Documentation",
    "description": "Understand how to configure the billing behavior for new connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/updating-service-agreements",
    "markdown": "# Updating service agreement acceptances | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to update your connected accounts and handle acceptance of the Stripe Connected Account Agreement and other disclosures.\n\nWorking with connected accounts where your platform is liable for negative balances, including Custom and Express accounts, provides a lot of flexibility. You can access almost every Stripe [account](https://docs.stripe.com/api/accounts) property through the API.\n\nPlatforms can use the API to perform many account management functions, including:\n\n*   Handle acceptance and re-acceptance of the Stripe Connected Account Agreement (for accounts with no Stripe-hosted Dashboard access, including Custom accounts).\n*   Handle [identity verification](https://docs.stripe.com/connect/identity-verification) (for accounts with no Stripe-hosted Dashboard access, including Custom accounts).\n*   Manage the connected business’s information, such as its name, logo, and URL.\n*   Set some charge behaviors.\n*   Establish [payout handling](https://docs.stripe.com/connect/payouts-connected-accounts).\n\nYou can make those account updates with an [update account](https://docs.stripe.com/api/accounts/update) call.\n\n## View and update a connected account through the platform’s Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can update some account settings in the [Connected accounts](https://dashboard.stripe.com/connect/accounts/overview) section of your Dashboard.\n\nClick any connected account in the list to open that account’s details page. The information that you can view and change depends on the account type or controller properties. Common tasks on this page include checking the status of payouts and searching for payments.\n\n## Stripe’s service agreements for connected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo provide Stripe Connect services to your connected accounts, Stripe must establish a direct contractual relationship with them. That requires all connected accounts with no Stripe-hosted Dashboard access to accept the correct Stripe service agreement. The service agreement your accounts must accept depends on whether they are merchants subject to Stripe’s full terms of service or are payment recipients subject to the recipient service agreement. You’re responsible for making sure that your accounts agree to the correct service agreement before accepting or receiving payments through Stripe on your platform.\n\nIf, after onboarding, one of your connected accounts transfers its ownership or updates its verified tax identification number, the updated account owner must provide their agreement to the correct Stripe service agreement. You’re responsible for obtaining that agreement.\n\n### Referencing Stripe’s service agreement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must present your connected accounts with a link to the correct agreement, and they must expressly consent to it prior to using Stripe. For example, at the point of account activation, you can present language such as the following:\n\n### Add Stripe’s service agreement to your terms of service ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can make accepting Stripe’s service agreement easy for connected accounts by including it in your terms of service. In your terms, include a link to the correct Stripe service agreement and clearly state that accepting your terms includes accepting the Stripe service agreement. Here are some examples of text you can include in your terms:\n\nPayment processing services for \\[account holder term, for example, drivers or sellers\\] on \\[platform name\\] are provided by Stripe and are subject to the [Stripe Connected Account Agreement](https://stripe.com/connect-account/legal/full), which includes the [Stripe Terms of Service](https://stripe.com/legal) (collectively, the “Stripe Services Agreement”). By agreeing to \\[this agreement / these terms / and so on\\] or continuing to operate as a \\[account holder term\\] on \\[platform name\\], you agree to be bound by the Stripe Services Agreement, as the same may be modified by Stripe from time to time. As a condition of \\[platform name\\] enabling payment processing services through Stripe, you agree to provide \\[platform name\\] accurate and complete information about you and your business, and you authorize \\[platform name\\] to share it and transaction information related to your use of the payment processing services provided by Stripe.\n\n### Indicating acceptance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor connected accounts where the platform collects updated information for due or changed requirements, you must collect the updated acceptance of Stripe’s service agreement.\n\nTo indicate to Stripe that a connected account accepted Stripe’s service agreement, make an [update account call](https://docs.stripe.com/api/accounts/update), providing the acceptance date and IP address:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"tos_acceptance[date]\"=1609798905 \\  -d \"tos_acceptance[ip]\"=\"8.8.8.8\"`\n\n### Acquirer disclosure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo meet Stripe’s Financial Partner requirements, you must advise your connected accounts of Stripe’s acquirers and their contact information in a clear and conspicuous manner, including [this disclosure](https://stripe.com/legal/acquirer-disclosure). For accounts that fall solely under the Recipient Service Agreement, you don’t need to include this disclosure.\n\nIf your accounts provide acceptance of Stripe’s service agreement through a Stripe onboarding product, it includes that disclosure.\n\n## Disclosing how Stripe processes connected account data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhile providing your connected accounts with Connect services, Stripe processes their data as explained in [Stripe’s Privacy Policy](https://stripe.com/privacy). You must disclose that to your accounts by providing them with a link to that policy.\n\nIn addition, connected accounts in Canada must consent to allow Stripe to obtain information from credit agencies to verify their identities. You can obtain that consent in your onboarding flow by incorporating language like the following where users agree to your terms of service:\n\n> Our payment processor can obtain information from credit agencies to verify your identity. That information will be used for the purposes described in their Privacy Policy.\n\nIf you are using a Stripe onboarding product like embedded onboarding, but providing a link to your own privacy policy, your privacy policy must include a link to Stripe’s Privacy Policy and the following language:\n\nPrivacy policy link\n\nWhen you provide personal data in connection with\n\nthe payment services\n\nReplace this placeholder with terminology you use to identify the services that Stripe provides to your connected accounts.\n\n, Stripe receives that personal data and processes it in accordance with Stripe’s Privacy Policy.\n\nFor Stripe to lawfully process personal data according to your instructions, you can be legally required to provide additional disclosures or obtain additional consents. Talk to your lawyer about which disclosures and consents might apply to your platform and connected accounts.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Identity Verification](https://docs.stripe.com/connect/identity-verification)\n*   [Account Tokens](https://docs.stripe.com/connect/account-tokens)\n*   [Control Bank and Debit Card Payouts](https://docs.stripe.com/connect/payouts-connected-accounts)\n*   [Manage bank accounts and debit cards](https://docs.stripe.com/connect/payouts-bank-accounts)\n*   [Receive payouts](https://docs.stripe.com/payouts)\n*   [Full API reference](https://docs.stripe.com/api)",
    "title": "Updating service agreement acceptances | Stripe Documentation",
    "description": "Learn how to update your connected accounts and handle acceptance of the Stripe Connected Account Agreement and other disclosures.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/custom/onboarding",
    "markdown": "# Onboarding solutions for Custom accounts\n\n## Choose the onboarding method for Custom accounts that suits your business.\n\nStripe offers several ways to onboard Custom connected accounts. You can choose the best onboarding method for your business.\n\n| Method | Pros | Cons |\n| --- | --- | --- |\n| [API-based onboarding](https://docs.stripe.com/connect/custom/onboarding#api-based-onboarding) | Exercise full control over your own UI | *   Expensive and time-consuming to build<br>*   Continuing high maintenance, especially to keep in compliance with changing global requirements<br>*   Can’t resolve Stripe risk reviews |\n| [Embedded onboarding](https://docs.stripe.com/connect/custom/onboarding#embedded-onboarding) new | *   [Highly themeable](https://docs.stripe.com/connect/customize-connect-embedded-components)<br>*   Limited or no Stripe branding<br>*   Connected accounts remain in the flow of your site<br>*   Low effort integration | Limited control over the flow logic |\n| [Stripe-hosted onboarding](https://docs.stripe.com/connect/custom/onboarding#stripe-hosted-onboarding) | Lowest effort integration | *   Stripe-branded with limited platform branding<br>*   Limited control over the flow logic<br>*   Connected accounts redirect to Stripe instead of completing the process without leaving your site |\n\n## API-based onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI-based onboarding involves building out each aspect of your site’s onboarding user interface to call the corresponding Stripe APIs. Your integration must satisfy all of Stripe’s onboarding requirements.\n\n### Establish Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following factors affect the [onboarding requirements](https://docs.stripe.com/connect/required-verification-information) for your connected accounts:\n\n*   The origin country of the connected accounts\n*   The [service agreement type](https://docs.stripe.com/connect/service-agreement-types) applicable to the connected accounts\n*   The [capabilities](https://docs.stripe.com/connect/account-capabilities) requested for the connected accounts\n*   The [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) (for example, individual or company) and [company.structure](https://docs.stripe.com/api/accounts/object#account_object-company-structure) (for example, public corporation or private partnership)\n\nUse the interactive form to see how changing these factors affects the requirements.\n\n### Requirements form![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Create forms to collect information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs a best practice, organize the required parameters into logical groupings or forms in your onboarding flow. You might wish to encode a mapping between the Stripe parameters and the logical groupings. Suggested logical groupings for parameters are shown in the first column of the example requirements table.\n\nAfter you encode the required parameters into your application, generate UIs for the parameters corresponding to these requirements. For each parameter, design a UI form that includes:\n\n*   Parameter label, localized to each supported country and language\n*   Parameter description, localized to each supported country and language\n*   Parameter input fields with data validation logic and document uploading where required\n\nIt’s important to architect your application logic to account for the possibility of additional parameters in the future. For example, Stripe might introduce new parameters, new verifications, or new thresholds that you must incorporate into your onboarding flows over time.\n\nChanging any of the factors that determine your connected accounts requirements means you must also adjust your collection forms. [Country](https://docs.stripe.com/api/accounts/object#account_object-country) and [service agreement type](https://docs.stripe.com/api/accounts/object#account_object-tos_acceptance-service_agreement) are immutable, while [capabilities](https://docs.stripe.com/api/accounts/object#account_object-capabilities) and [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) are mutable.\n\n*   To change an immutable field such as country or service agreement type, create a new connected account with the new values. Doing so produces new requirements for you to incorporate in your collection flows.\n*   To change a mutable field such as capabilities or business type, update the connected account. Doing so produces new requirements for you to incorporate in your collection flows.\n\n### Include Stripe Terms of Service Agreement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour connected accounts must accept Stripe terms of service before they can be activated. You can [wrap Stripe terms of service in your own terms of service](https://docs.stripe.com/connect/updating-service-agreements#adding-stripes-service-agreement-to-your-terms-of-service).\n\n### Create the Connected Account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Create Account](https://docs.stripe.com/api/accounts/create) API to create a connected account with country, service type agreement, desired capabilities, business type, and any other information matching your [requirements](#establish-requirements). At a minimum, you must specify `capabilities` and `type`. If you don’t specify other parameters, they’re assigned the following default values:\n\n*   The service type agreement (`tos_acceptance.service_agreement`) defaults to `full`.\n*   The `country` defaults to the same country as your platform.\n\nThe following code sample creates a Custom connected account with `card_payments` and `transfers` capabilities under a full service agreement for an individual.\n\n#### Note\n\nThis example includes only some of the fields you can set when creating an account. For a full list of the fields you can set, such as `address` and `website_url`, see the [Create Account API reference](https://docs.stripe.com/api/accounts/create).\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d country=US \\  -d type=custom \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true`\n\n### Take your account through the onboarding flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can enable connected accounts in either of two ways:\n\n*   Incremental onboarding strategy: Collect the minimum [required information](#establish-requirements) up front and the rest later\n*   Upfront onboarding strategy: Collect all information up front\n\nThe incremental onboarding strategy speeds up initial onboarding but requires additional information collection later on. The upfront onboarding strategy minimizes enablement disruption throughout the connected account’s lifecycle at the expense of a lengthier application process. You can decide which strategy better suits your use case.\n\nTo implement your onboarding strategy, inspect the requirements hash of the connected account you created. The requirements hash provides a complete list of parameters you must collect to activate the connected account.\n\n*   If you choose the incremental onboarding strategy, inspect the `currently_due` field in the requirements hash and build an onboarding flow that only collects for the listed parameters.\n*   If you choose the upfront onboarding strategy, inspect the `eventually_due` field in the requirements hash and build an onboarding flow that collects for all the listed parameters.\n\n`{   ...   \"requirements\": {     \"alternatives\": [],     \"current_deadline\": null,     \"currently_due\": [       \"business_profile.product_description\",       \"business_profile.support_phone\",       \"business_profile.url\",       \"external_account\",       \"tos_acceptance.date\",       \"tos_acceptance.ip\"     ],     \"disabled_reason\": \"requirements.past_due\",     \"errors\": [],     \"eventually_due\": [       \"business_profile.product_description\",       \"business_profile.support_phone\",       \"business_profile.url\",       \"external_account\",       \"tos_acceptance.date\",       \"tos_acceptance.ip\"     ],     \"past_due\": [],     \"pending_verification\": []   },   ... }`\n\n### Update the Connected Account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUpdate the connected account object with new information as it progresses through your onboarding flow. Perform an [Update Account](https://docs.stripe.com/api/accounts/update) call, identifying the connected account by the `id` value you stored earlier.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\   --data-urlencode \"business_profile[url]\"=\"[https://furever.dev](https://furever.dev/)\" \\  -d \"tos_acceptance[date]\"=1609798905 \\  -d \"tos_acceptance[ip]\"=\"8.8.8.8\"`\n\nStripe validates every update to a connected account. Update the account at each step in onboarding to allow Stripe to validate information as soon as it’s added, while your users continue through the onboarding flow. After Stripe confirms acceptance of our terms of service, any changes to the connected account trigger reverification. For example, if you change the connected account’s name and ID number, Stripe reruns verifications.\n\nWhen updating a connected account, you must handle any [verification errors](#verification-handling) or [HTTP error codes](https://docs.stripe.com/error-handling) returned by the Accounts API.\n\n## Embedded onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEmbedded onboarding is a highly themeable onboarding UI with limited Stripe branding. Connected account users interact with the embedded component without ever leaving your application. Embedded onboarding uses the [Accounts API](https://docs.stripe.com/api/accounts) to read the requirements and generate an onboarding form with robust data validation and that is localized for all Stripe-supported countries. In addition, embedded onboarding handles all:\n\n*   Business types\n*   Configurations of company representatives\n*   Verification document uploading\n*   Identify verification and statuses\n*   International bank accounts\n*   Error states\n\nYou can integrate embedded onboarding in a few lines of code, while API-based onboarding requires you to construct custom logic. To integrate embedded onboarding, follow our [embedded components guide](https://docs.stripe.com/connect/get-started-connect-embedded-components) and integrate the [Account onboarding](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding) embedded component.\n\n## Stripe hosted onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe hosted onboarding allows you to redirect your user to Stripe to complete the onboarding process in a co-branded interface. Create an [Account Link](https://docs.stripe.com/api/account_links) and direct your user to the hosted onboarding flow. The [return\\_url](https://docs.stripe.com/api/account_links/create#create_account_link-return_url) allows Stripe to return the user to your application and allow you to progress the connected account accordingly.\n\nTo integrate Stripe hosted onboarding, follow our [Stripe hosted onboarding guide](https://docs.stripe.com/connect/custom/hosted-onboarding).\n\n## Verification handling ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen the connected account’s data is submitted, Stripe verifies it. This process might take minutes or hours depending on the nature of the verification required. During this process, the capabilities you requested have [a pending status](https://docs.stripe.com/api/accounts/object#account_object-capabilities).\n\n### Review status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can retrieve the status of your connected account’s capabilities by:\n\n*   Inspecting the Account object’s [capabilities](https://docs.stripe.com/api/accounts/object#account_object-capabilities) hash for the relevant capability.\n*   Requesting capabilities directly from the [Capabilities API](https://docs.stripe.com/api/capabilities/retrieve) and inspecting the status of the relevant capability.\n*   Listening for `account.updated` [events](https://docs.stripe.com/api/events/types#event_types-account.updated) in your [webhook](https://docs.stripe.com/connect/webhooks) endpoint and inspecting the `capabilities` hash for the relevant capability.\n\nAfter verifications are complete, the capability becomes `active` and available to the connected account. Account verifications run continuously, and if a future verification fails, a capability can transition out of `active`. Listen for `account.updated` events to detect changes to capability states.\n\nConfirm that your Connect integration is compliant and operational by checking that the account’s `charges_enabled` and `payouts_enabled` are both true. You can use the API or listen for `account.updated` events. For details on other relevant fields, check the account’s [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) hash. You can’t confirm the integration based on a single value because statuses can vary depending on the application and related policies.\n\n*   [charges\\_enabled](https://docs.stripe.com/api/accounts/object#account_object-charges_enabled) confirms that your full charge path including the charge and transfer works correctly and evaluates if either `card_payments` or `transfers` capabilities are active.\n*   [payouts\\_enabled](https://docs.stripe.com/api/accounts/object#account_object-payouts_enabled) evaluates whether your connected account can pay out to an external account. Depending on your risk policies, you can allow your connected account to start transacting without payouts enabled. You [must eventually enable payouts](https://docs.stripe.com/connect/manage-payout-schedule) to pay your connected accounts.\n\nYou can use the following logic as a starting point for defining a summary status to display to your connected account.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`def account_state(account)   reqs = account.requirements    if reqs.disabled_reason && reqs.disabled_reason.include?(\"rejected\")     \"rejected\"   elsif account.payouts_enabled && account.charges_enabled     if reqs.pending_verification       \"pending enablement\"     elsif !reqs.disabled_reason && !reqs.currently_due       if !reqs.eventually_due         \"complete\"       else         \"enabled\"       end     else       \"restricted\"     end   elsif !account.payouts_enabled && account.charges_enabled     \"restricted (payouts disabled)\"   elsif !account.charges_enabled && account.payouts_enabled     \"restricted (charges disabled)\"   elsif reqs.past_due     \"restricted (past due)\"   elsif reqs.pending_verification     \"pending (disabled)\"   else     \"restricted\"   end end  accounts = Stripe::Account.list(limit: 10)  accounts.each do |account|     puts \"#{account.id} has state: #{account_state(account)}\" end`\n\n### Handle verification errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHandle verification failures differently depending on your onboarding flow.\n\n#### Note\n\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\n\nListen to the [account.updated](https://docs.stripe.com/api/events/types#event_types-account.updated) event. If the account contains any `currently_due` fields when the `current_deadline` arrives, the corresponding functionality is disabled and those fields are added to `past_due`.\n\n[Create a form](#create-forms-to-collect-information) with clear instructions that the account can use to correct the information. Notify the account, then [submit the corrected information](#update-the-connected-account) using the Accounts API.\n\nIf you plan to create custom flows to handle all your verification errors:\n\n*   Review the details regarding all possible [verification errors and how to handle them](https://docs.stripe.com/connect/handling-api-verification).\n*   [Test verification states](https://docs.stripe.com/connect/testing-verification).",
    "title": "Onboarding solutions for Custom accounts | Stripe Documentation",
    "description": "Choose the onboarding method for Custom accounts that suits your business.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/acceptable-verification-documents",
    "markdown": "# Acceptable verification documents by country\n\n## Learn which documents Stripe accepts for verification of identity, address, and legal entity.\n\nSee the following list of documents that Stripe accepts as proof of identity, address, and entity for each country Stripe supports.\n\n## Common requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The format must be no more than one step removed from the original document:\n    *   Document copies and scans must be in PDF format and taken directly from the original document; they can’t be processed, converted, or embedded in other files\n    *   A picture of a physical document must be the original, unprocessed picture in JPEG or PNG format\n    *   Screenshots aren’t acceptable\n*   When the back side of a document contains required information, and you submit it using the API, include an image of the back side using the `document_back` parameter\n*   Photos and scans must be in color\n*   Images must not be low-quality\n*   Identity and legal entity documents must not be expired\n*   Documents must be readable and in a valid upload file format\n*   Documents must not be cropped or missing pages with crucial information, and all borders must be visible\n*   If the country of residence differs from the country of the account, a passport is required for identity verification\n\n## Select a country to view its requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Acceptable identification documents vary by country. A passport scan for identity verification is always preferred and, in some cases, is required. When a Stripe account and an individual associated with that Stripe account (for example, Business Representative, Owner) are from different countries, Stripe only accepts a passport to verify identity.\n\nAcceptable forms of identification:\n\n*   Letërnjoftimi (National Identity Card)\n*   Passport\n*   Leje Drejtimi (Driving License)\n*   çertifikatë regjistrimi (Business registration certificate)\n\nRequired information:\n\n*   Full legal name that matches the name in your Stripe profile\n*   Date of birth (DOB) that matches what’s in your Stripe profile\n*   Photo of person (except where exclusions apply)\n\n### Support articles![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Acceptable verification documents by country | Stripe Documentation",
    "description": "Learn which documents Stripe accepts for verification of identity, address, and legal entity.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/get-started-tax-reporting",
    "markdown": "# Get started with tax reporting\n\n## Use the Stripe 1099 tax reporting product to create, modify, file, and deliver tax forms for your connected accounts.\n\nStripe provides [capabilities](https://docs.stripe.com/connect/account-capabilities#tax-reporting) and a tax reporting dashboard to help platforms meet their [tax reporting obligations](https://support.stripe.com/questions/1099-tax-reporting-and-filing-for-platforms-and-marketplaces).\n\nLog in to your Stripe account and use the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) view in the Dashboard to create, modify, file, and deliver 1099 tax forms for your connected accounts. If you use a [team](https://docs.stripe.com/get-started/account/teams), only team members with the Tax Analyst or Administrator [user role](https://docs.stripe.com/get-started/account/teams/roles) can access all tax-related features.\n\n## Tax season 2023 checklist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow this guide to help you prepare for tax season.\n\n#### Key dates\n\n*   **November 1st**: If you’re using e-delivery, Stripe begins outreach to your connected accounts.\n*   **January 5th**: Last recommended day to enable Stripe [outreach](https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough) to your connected accounts to automatically collect paperless delivery consent and tax information.\n*   **January 10th**: The first date you can e-file tax forms in your Stripe Dashboard.\n*   **January 18th**: Last day that Stripe _could_ send pre-filing outreach to your connected accounts\n*   **January 23rd**: Latest recommended date to e-file tax forms in your Stripe Dashboard to have forms postmarked by the IRS deadline.\n*   **January 31st**: The IRS deadline to postmark 1099 tax forms to your connected accounts.\n*   **February 15th**: The last day that identity updates will automatically sync onto 1099 tax form drafts for tax year 2023.\n\n#### Caution\n\nAction forms in the `Needs attention` state to get missing name, address, and taxpayer ID (SSN or EIN) details from your connected accounts. You need this information for filing.\n\n[](#get-ready)\n\n*   [Configure](https://docs.stripe.com/connect/get-started-tax-reporting#set-tax-form-default-settings) your platform’s tax settings for tax year 2023. You need to do this even if you previously used the Stripe 1099 tax reporting product.\n*   Start reviewing [forms in the Needs attention state](https://docs.stripe.com/connect/identify-forms-missing-information) with missing tax information.\n*   Starting in August, you can edit tax forms [in your Dashboard](https://docs.stripe.com/connect/modify-tax-forms?method=dashboard) or through [CSV](https://docs.stripe.com/connect/modify-tax-forms?method=csv).\n    *   Provide any [missing identity information](https://docs.stripe.com/connect/identify-forms-missing-information) required for filing.\n    *   (Optional) [Update form totals](https://docs.stripe.com/connect/modify-tax-forms) to reflect payment transactions outside of Stripe.\n    *   (Optional) [Export transaction logs](https://docs.stripe.com/connect/calculation-methods#export-transaction-logs) to check which Stripe transactions have contributed to a 1099 form’s total.\n*   If you’re planning to use e-delivery, enable both e-delivery and outreach from Stripe as delivery preferences in your [tax form settings](https://dashboard.stripe.com/settings/connect/tax_forms).\n\n[](#outreach)\n\n*   Publish a [support article](https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs) explaining the tax timeline and your partnership with Stripe for taxes. View the [example article](https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs).\n*   Required for e-delivery:\n    *   Use the _Missing Email Address_ filter in your 1099 dashboard or [export tax forms](https://docs.stripe.com/connect/modify-tax-forms?method=csv) as a CSV to identify missing email addresses, since Column B will be blank if the email is missing. [Update email addresses](https://docs.stripe.com/api/accounts/update#update_account-email) with the Accounts API so we can email your connected accounts.\n    *   Make sure that your [Connect branding settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding) and your [support email address](https://dashboard.stripe.com/settings/public) are up to date.\n    *   Prepare your support teams for tax season 2023. View the [example FAQs](https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs) your support team might receive from your connected accounts.\n*   Recommended for e-delivery:\n    *   Notify your connected accounts when Stripe outreach occurs. View the [example email copy](https://docs.stripe.com/connect/platform-express-dashboard-taxes-communication#email-template:-post-stripe-email).\n\n[](#review-totals)\n\n*   Stripe begins [outreach](https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough) to your connected accounts starting the week of November 1st if you have opted into e-delivery / outreach from Stripe. We recommend opting in by **January 5th** so we can contact all of your accounts for pre-filing confirmation by January 18th, the last possible day for automated outreach from Stripe. Note, we don’t send outreach emails to platforms’ connected accounts until _7 days_ after you enable the setting.\n*   Continue [actioning forms](https://docs.stripe.com/connect/identify-forms-missing-information) in `Needs attention` and reach out to accounts with missing information.\n*   Audit tax calculations on some 1099 tax forms.\n*   Verify your [tax form settings](https://dashboard.stripe.com/settings/connect/tax_forms) so you’re ready to file 1099 tax forms in January.\n\n[](#file)\n\n*   Input [State Tax Registration](https://docs.stripe.com/connect/tax-forms-state-requirements) or withholding numbers for all states where you plan to file.\n*   [File tax forms](https://docs.stripe.com/connect/file-tax-forms) in your Stripe Dashboard no later than January 23rd. You can begin filing forms on January 10th.\n    *   When you press ‘File’ Stripe files any forms in a ‘Ready’ or ‘Ready!’ state.\n        *   If you have forms in a ‘Needs Attention’ state and wish to file them, you need to [explicitly update the filing requirement](https://docs.stripe.com/connect/modify-tax-forms?method=csv#tax-form-status) for these forms before filing.\n*   Stripe e-delivers or postmarks tax forms for postal delivery by January 31st.\n*   After February 15, payee identity updates (name, TIN, address) stop flowing onto the 1099 tax forms that haven’t been filed yet. This doesn’t impact forms that you already filed by February 15.\n\n## Set tax form default settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo configure the settings for tax forms in your account you must log in as the account owner. If you use a team, any user that has the Administrator user role for your account can configure settings. To get started with generating your tax forms for 2023, open the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) page of the Dashboard, and then click **Get started**.\n\n![Tax dashboard with the get started button highlighted.](https://b.stripecdn.com/docs-statics-srv/assets/tax-net-new-user-landing-experience.6ed30557253b2ce8785af2deff182a8b.png)\n\nChoose the default tax form to generate for your connected accounts, the [calculation method](https://docs.stripe.com/connect/calculation-methods) to use for your tax form totals, the type of filer for your business, and the kind of transactions you process. We recommend that you use a tax advisor to determine which options are right for your business. You can change almost all [tax form settings](https://docs.stripe.com/connect/tax-form-settings) at any time for the forms that you haven’t filed.\n\n![Select a form type screen.](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-settings-step.9fdf3acbf457f95499c2bdaa81ce7c2c.png)\n\nSelect a form type\n\n![Tax calculation screen.](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-settings-step1.a54d8be2498440b91e4229e8426424a6.png)\n\nSelect tax calculation\n\n![Type of filer screen](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-settings-step2.dd51a20dca664351848d6b48572ef368.png)\n\nSelect type of filer\n\n![Transaction screen.](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-settings-step3.5c7890ebc89925cd89092b3fc3c0db9c.png)\n\nSelect types of transactions processed\n\nNext, confirm the business information that displays as the **Payer details** on all of your tax forms. Make any necessary changes, then click **Continue**.\n\n![Business information screen.](https://b.stripecdn.com/docs-statics-srv/assets/tax-business-info-step.56acf3720225276598592dffe50c9f34.png)\n\nNext, add state registration or withholding IDs for the states you plan to file with. You can enter these at any time in the future through [tax form settings](https://docs.stripe.com/connect/tax-form-settings).\n\n![State filing screen.](https://b.stripecdn.com/docs-statics-srv/assets/tax-state-filing-step.200b96a91d14dd22795110ac6865399e.png)\n\nThe next step involves choosing your delivery preferences to meet IRS obligations around delivering 1099 forms to payees. We offer two forms of [delivery](https://docs.stripe.com/connect/deliver-tax-forms):\n\n*   _E-delivery through the Stripe Express Dashboard:_ Owners of eligible connected accounts receive an electronic copy of the 1099 form through the Stripe Express App. Stripe sends an email invite to the connected account owners to confirm their tax details, collect their consent, and provide access to the electronic copy of the form. Read more about [how e-delivery works](https://docs.stripe.com/connect/express-dashboard-taxes).\n    \n*   _Paper delivery through postal mail:_ Stripe delivers the 1099 forms to the owners of eligible connected accounts through postal mail based on the address on the tax form. If e-delivery is enabled, but the connected account hasn’t provided e-delivery consent at the time of filing, we fall back on postal delivery to meet IRS obligations.\n    \n\n![Delivery method selection screen.](https://b.stripecdn.com/docs-statics-srv/assets/tax-delivery-preferences-step.72319e394a4f5216a0e18ad0dfbf076c.png)\n\nAs a final step, you can view a summary of your tax form settings to confirm your choices. After you confirm your settings, the tax forms dashboard opens, where you can view all of your tax forms for 2023.\n\n![Summary screen.](https://b.stripecdn.com/docs-statics-srv/assets/tax-summary-step.5bdede405d7cfef3c01442f44794bd0a.png)\n\n## View and filter tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can view all of the tax forms for your connected account using the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) dashboard. Click the appropriate tab to filter the forms displayed. To display the **State filing status**, **Federal filing status**, or **Delivery filing status** instead of **Overall filing status**, click the gear icon to the right of the column heading and select the status to display.\n\n![Tax reporting page of the Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/tax_reporting_dashboard_new.c5898c0728da3cc9b274a72c2dd13229.png)\n\nYou can apply any of the existing filters to limit the results to only those records that match the filter criteria. For example, to display only records for a specific payee, choose the Payee name filter and then enter all or part of a name to match. The records displayed include only the records for payees with Payee names that match the string you used for the filter.\n\nYou can use the following filters to display tax forms:\n\n| Filter name | Filter values |\n| --- | --- |\n| Type | Type of tax form: 1099-K, 1099-MISC, or 1099-NEC |\n| Overall filing status | Overall status of tax form: Will not file, Needs attention, Ready, Filing, Accepted, or Rejected |\n| Federal filing status | Status of the Federal tax form: Will not file, Needs attention, Ready, Filing, Accepted, or Rejected |\n| State filing status | Status of the State tax form: Will not file, Needs attention, Ready, Filing, Accepted, or Rejected |\n| Delivery status | Delivery status of the tax form: Will not deliver, Needs attention, Ready, Scheduled, Delivering, Delivered, Failed |\n| Postal delivery status | Postal delivery status of the tax form: Will not deliver, Needs attention, Ready, Scheduled, Delivering, Delivered, Failed |\n| Electronic delivery status | Electronic delivery status of the tax form: Will not deliver, Needs attention, Ready, Scheduled, Delivering, Delivered, Failed |\n| Pre-filing confirmation status | Status of Stripe’s pre-filing outreach: Not eligible, Queued, Sent |\n| Stripe merchant ID | Tax forms for the specified merchant ID |\n| Forms grouped with | Tax forms grouped with the specified tax form ID |\n| Payee name | Tax forms for the payee |\n| Payee state | Tax forms for the payee’s state |\n| Needs attention | Needs attention status: Any reason, Address, Business name, TIN - Any reason, TIN - Missing, TIN - Mismatch |\n| YTD volume | Tax forms with the specified year-to-date volume |\n| Correction | Correction status: Correction, Original |\n| Threshold | State or federal threshold status: Meets federal threshold, Meets state threshold, Meets any threshold, Meets state and federal threshold, Meets neither state nor federal thresholds |\n| Email address | Tax forms with the specified email address |\n| Missing email address | Filter for tax forms that either have or don’t have email addresses: True, False |\n| Delta values | Filter for tax forms with delta values: With delta values, Without delta values |\n| Standalone forms | Filter for standalone tax forms: All standalone forms, No standalone forms |\n| E-delivery consent | Status of e-delivery consent collection: Provided, Not provided, Revoked |\n| Grouped TIN | Tax forms that have grouped TINs: Grouped forms only, No grouped forms |\n\n## Understand tax form status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe automatically calculates the overall status for each tax form, and allows you to apply filing requirements for each form as appropriate. The [filing requirement](https://docs.stripe.com/connect/modify-tax-forms?method=csv#tax-form-status) appears as a visual indicator in the tax form status. You can view the status for both State and Federal tax forms.\n\n| Status | Description | Next steps |\n| --- | --- | --- |\n| Accepted | The IRS or state accepted the tax form. | No further action required. |\n| Filing | The tax form has been queued for transmission to the IRS or state, and will be sent shortly. | No further action required. |\n| Filed | The tax form was sent to the IRS or state, but hasn’t been accepted yet. | No further action required. |\n| Exported | The tax form was included in a state filing export, which you can find on the [bulk jobs listing](https://dashboard.stripe.com/connect/taxes/forms/?showJobs=true). | You must download the export and manually submit these to the appropriate state reporting agency. |\n| Needs attention | The tax form is above the IRS or state threshold, but requires additional information before filing. | Most tax forms require additional information before filing. You can [update the form](https://docs.stripe.com/connect/modify-tax-forms) or update the connected account. If you determine that you shouldn’t file the tax form, or you want to file with incomplete information, you can [update the filing requirement](https://docs.stripe.com/connect/modify-tax-forms). |\n| Ready | The tax form is above the IRS or state threshold and ready to file. | File most tax forms. If you determine that you shouldn’t file the tax form, you can [update the filing requirement](https://docs.stripe.com/connect/modify-tax-forms). |\n| Rejected | The IRS or state rejected the tax form. | Review the IRS [information return penalties](https://www.irs.gov/government-entities/federal-state-local-governments/increase-in-information-return-penalties), and your connected accounts’ tax forms for incorrect names or tax identification numbers. You have 60 days from the initial submission to file corrected tax forms to the IRS. Learn more about [handling rejections](https://docs.stripe.com/connect/correct-tax-forms#correction-reasons). |\n| Will not file | The tax form is below the IRS or state threshold, or was overridden and won’t be filed. | Most tax forms don’t require further action. If you determine that you should file the tax form, (for example, if the connected account has withholding data), you can [update the form](https://docs.stripe.com/connect/modify-tax-forms). |\n\n## Understand tax form TIN status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms need valid TINs on the tax forms to ensure that the IRS and/or state accepts the forms, and Stripe displays the status of the TIN in the Tax Form Editor as follows:\n\n| Status | Description | Next steps |\n| --- | --- | --- |\n| Verified | Name & TIN are verified | No further action required. |\n| Mismatch | Name + TIN didn’t match the records in IRS and need to be resolved before filing | Follow up with the account to get a name + TIN that matches IRS records. If you still want to file the form in this state, change the [Filing requirement](https://docs.stripe.com/connect/modify-tax-forms?method=csv#tax-form-status) to **Required even if incomplete**. |\n| Overwritten | Platform has overwritten the Name and/or TIN | Verify the name + TIN directly with the IRS and/or use a third party TIN verification tool. You can still file this form in this status. |\n| Provided | Name and TIN were inherited from Connect Settings, but Stripe didn’t verify. | Verify the name + TIN directly with the IRS and/or use a third party TIN verification tool. You can still file this form in this status. |\n| Missing | Name or TIN not provided and needs to be resolved before filing | Follow up with the account to get a name + TIN that matches IRS records. If you still want to file the form in this state, change the Filing requirement to **Required even if incomplete**. |\n\n## Understand tax form delivery status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe sends your tax forms using the delivery method you set for your account, either mail or e-delivery. The [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) page shows the delivery status for your tax forms. The following table describes each possible delivery status.\n\n| Status | Description | Next steps |\n| --- | --- | --- |\n| Delivered | The forms were successfully delivered. | No further action required. |\n| Delivering | The forms were sent, but haven’t been received. | No further action required. |\n| Failed | The forms were not successfully delivered. | No further action required. |\n| Needs attention | The forms are ready to send, but require additional information. | Most tax forms require additional information before delivering. You can update the form or update the user information for the connected account. |\n| Ready | These forms are sent when the forms are filed. | No further action required. |\n| Scheduled | The forms are scheduled for delivery. | No further action required. |\n| Will not deliver | The forms won’t be delivered. | No further action required. |\n\n## Updating tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can [Update 1099 tax forms](https://docs.stripe.com/connect/modify-tax-forms) for the current year and choose whether or not to include tax identification numbers (TIN).",
    "title": "Get started with tax reporting | Stripe Documentation",
    "description": "Use the Stripe 1099 tax reporting product to create, modify, file, and deliver tax forms for your connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/platform-express-dashboard-taxes",
    "markdown": "# 1099 tax support and communication guide\n\n## Learn how to use Stripe Express to manage 1099 Tax forms for connected accounts.\n\n## How to use this guide![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs tax season approaches, Stripe created this guide to help you understand how you can work with your connected accounts to collect verified tax information for the upcoming tax season through Stripe Express. The guide answers many commonly asked questions, and includes example communications and FAQs that you can customize for your platform. We designed our communication proposals and FAQs as recommendations, and we encourage you to adjust for the needs of your platform. This guide covers the following topics:\n\n1.  [Implementation and timeline](https://docs.stripe.com/connect/platform-express-dashboard-taxes-implementation) - provides general implementation guidelines and expectations for using Stripe Express tax forms.\n    \n2.  [Product walkthrough](https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough) - highlights key aspects of Stripe Express so that you and your support team have a better understanding of the user experience.\n    \n3.  [Communications recommendations](https://docs.stripe.com/connect/platform-express-dashboard-taxes-communication) - provides general templates that you can use to help prepare your connected accounts for communications from Stripe during tax season.\n    \n4.  [Support resources](https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs) - includes a detailed guide on how to resolve the top questions from connected accounts during 1099 tax season and example FAQs to use for your own support resources.",
    "title": "1099 tax support and communication guide | Stripe Documentation",
    "description": "Learn how to use Stripe Express to manage 1099 Tax forms for connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/calculation-methods",
    "markdown": "# Choose a calculation method | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the calculation methods for reporting charges and payouts.\n\nThe Stripe 1099 tax reporting product allows platforms to select a calculation method, depending on the type of 1099 form they must file. While these calculation methods reflect the most common reporting scenarios, you can import CSV files and edit the amount on each 1099 form to better match the requirements.\n\n#### Note\n\nStripe recommends that you consult a tax advisor to determine your tax filing and reporting requirements.\n\n| Available calculation method | 1099-K | 1099-MISC | 1099-NEC |\n| --- | --- | --- | --- |\n| Payments including fees | Yes | Yes | Yes |\n| Payments excluding fees | Yes | Yes | Yes |\n| Payouts only |     | Yes | Yes |\n\n## Payments including fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis payment calculation method includes all charges and transfers _including_ any fees related to each transaction. Such fees might be:\n\n*   Stripe processing and foreign currency conversion fees\n*   Platform fees\n\nFor Form 1099-K, the IRS requires reporting [gross reportable amounts](https://www.irs.gov/instructions/i1099k#idm140262090779520) without any adjustments. It’s the taxpayer’s responsibility to determine their taxable income by taking into account their business expenses and deductions.\n\nDepending on your business, you may determine this payment calculation method is also appropriate for the amounts on their Forms 1099-MISC or 1099-NEC.\n\n#### Note\n\nRefunded charges aren’t deducted when using this calculation method.\n\n### Example 1![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOn December 31, 2020, a customer buys flowers for 100 USD from an online flower shop. The flower shop is a connected account and the [destination charge](https://docs.stripe.com/connect/destination-charges#flow-of-funds-app-fee) uses the platform’s API key. The charge authorization and capture time are the same since partial authorization wasn’t specified. The platform retains a 2 USD platform fee and a 3.20 USD Stripe fee nets directly out of the connected account’s charge.\n\nOn January 2, 2021, the issuing bank settles the money to Stripe. On January 7, 2021, a [payout](https://docs.stripe.com/payouts \"payout\") occurs from the connected account’s Stripe balance to their bank account, and includes the proceeds from this sale. With this method, the platform can report 100 USD on their 1099 form for 2021, and no amount for 2020.\n\n| Description | Amount |\n| --- | --- |\n| Customer charged | 100 USD |\n| Increase in connected account’s Stripe balance | 94.80 USD |\n| Increase in platform account’s Stripe balance | 2 USD |\n| **Amount reported with this method** | 100 USD |\n\nAssume the same conditions, but a [direct charge](https://docs.stripe.com/connect/direct-charges#flow-of-funds-with-fees) uses the connected account’s API key. With this method, the platform can report the same 100 USD on their 1099 form for 2021.\n\n### Example 2![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAssume the same conditions as Example 1, but the connected account issues a refund the same day as the charge because they’re unable to fulfill the order. Ignore any potential Stripe fees for refunds.\n\n| Description | Amount |\n| --- | --- |\n| Customer charged | 100 USD |\n| Customer refunded | 100 USD |\n| Net change in connected account’s Stripe balance | 0 USD |\n| Net change in platform account’s Stripe balance | 0 USD |\n| **Amount reported with this method** | 100 USD |\n\nWith this method, the platform can report the same 100 USD on their 1099 form for 2021, and no amount for 2020.\n\n## Payments excluding fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis payment calculation method includes all charges and transfers _excluding_ any fees related to each transaction. Such fees might be:\n\n*   Stripe processing and foreign currency conversion fees\n*   Platform fees\n\nThis method is useful if the platform wants to remove their fee from the amount reported for the connected account.\n\nFor example, in the [destination charge](https://docs.stripe.com/connect/destination-charges#flow-of-funds-app-fee) flow, the application fee is attributed to the connected account, but a platform might pass the application fee to the end customer to pay the platform. Those funds aren’t necessarily attributable or even known to the connected account. While platforms acknowledge that gross amounts should be reported to their connected accounts on the Form 1099-K, they might think the gross amount to report should be payments excluding fees.\n\nFor Form 1099-K, the IRS requires reporting gross amounts for all reportable transactions, without any adjustments for refunds, fees, credits, cash equivalents, or discounts. Because platforms use [Connect](https://docs.stripe.com/connect \"Connect\") differently, we recommend working with a tax advisor to determine if this method is right for you based on the 1099 form you want to file.\n\nDepending on your business, you may determine this payment calculation method is also appropriate for the amounts on their Forms 1099-MISC or 1099-NEC.\n\n#### Note\n\nStripe doesn’t deduct refunded charges when using this calculation method.\n\n### Example ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn December 31, 2020, a customer buys flowers for 100 USD from an online flower shop. The flower shop is a connected account and the [destination charge](https://docs.stripe.com/connect/destination-charges#flow-of-funds-app-fee) uses the platform’s API key. The destination charge specifies an amount of 100 USD and a `transfer_data[amount]` of 94.80 USD. The charge authorization and capture time are the same since partial authorization wasn’t specified. The platform retains a 2 USD platform fee and a 3.20 USD Stripe fee nets directly out of the connected account’s charge.\n\nOn January 2, 2021, the issuing bank settles the money to Stripe. On January 7, 2021, a payout occurs from the connected account’s Stripe balance to their bank account, and includes the proceeds from this sale. With this method, the platform can report 94.80 USD on their 1099 form for 2021, and no amount for 2020.\n\n| Description | Amount |\n| --- | --- |\n| Customer charged | 100 USD |\n| Increase in connected account’s Stripe balance | 94.80 USD |\n| Increase in platform account’s Stripe balance | 2 USD |\n| **Amount reported with this method** | 94.80 USD |\n\nAssume the same conditions, but the [destination charge](https://docs.stripe.com/connect/destination-charges#flow-of-funds-app-fee) specifies an amount of 100 USD and an `application_fee_amount` of 5.20 USD. The Stripe fee is deducted on the platform’s account from the 5.20 USD. With this method, the platform can report the same 94.80 USD on their 1099 form for 2021.\n\nAssume the same conditions, but a [direct charge](https://docs.stripe.com/connect/direct-charges#flow-of-funds-with-fees) uses the connected account’s API key. The direct charge specifies an amount of 100 USD and an `application_fee_amount` of 5.20 USD. With this method, the platform can report the same 94.80 USD on their 1099 form for 2021.\n\n## Payouts only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe payouts only method lets you report only the amount that was paid out to the connected account’s bank account, minus any payout reversals. The amount may also include payments that aren’t related to a specific charge transaction. This calculation method takes into consideration `payouts` and not `charges`.\n\nBecause platforms use Connect differently, we recommend working with a tax advisor to determine if this method is right for you based on the 1099 form you want to file.\n\n### Example ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn December 31, 2020, a customer buys flowers for 100 USD from an online flower shop. The flower shop is a connected account and the [destination charge](https://docs.stripe.com/connect/destination-charges#flow-of-funds-app-fee) uses the platform’s API key. The charge authorization and capture time are the same since partial authorization wasn’t specified. The platform retains a 2 USD platform fee and a 3.20 USD Stripe fee nets directly out of the connected account’s charge.\n\nOn January 2, 2021, the issuing bank settles the money to Stripe. On January 7, 2021, a payout of 94.80 USD occurs from the connected account’s Stripe balance to their bank account, and includes the proceeds from this sale. With this method, the platform can report 94.80 USD on their 1099 form for 2021, and no amount for 2020.\n\n| Description | Amount |\n| --- | --- |\n| Customer charged | 100 USD |\n| Increase in connected account’s Stripe balance | 94.80 USD |\n| Increase in platform account’s Stripe balance | 2 USD |\n| **Amount reported with this method (2020)** | 0 USD |\n| **Amount reported with this method (2021)** | 94.80 USD |\n\nAssume the same conditions, but a [direct charge](https://docs.stripe.com/connect/direct-charges#flow-of-funds-with-fees) uses the connected account’s API key. On January 7, 2021, a payout of 94.80 USD occurs from the connected account’s Stripe balance to their bank account, and includes the proceeds from this sale. With this method, the platform can report the same 94.80 USD on their 1099 form for 2021.\n\n## Additional calculation method topics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following sections discuss calculation method topics that might be applicable to your platform.\n\n### Transactions included in calculations for the account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe inclusion of transactions in the Form 1099 calculations for the forms you will issue depends on the connected account’s `controller.fees.payer` property.\n\n*   Transactions on accounts where `controller.fees.payer` = `application_custom` or `application_express` are included in the calculations.\n*   Transactions on accounts where `controller.fees.payer` = `application` could be included if the application fees for those transactions are paid to the platform. Otherwise, the transactions could be included in a Stripe-issued 1099.\n*   Transactions on accounts where `controller.fees.payer` = `account` won’t be included, but instead could be included in a Stripe-issued 1099 to the account.\n\n### Timing and recognition of transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe uses the [`available_on` date](https://docs.stripe.com/api/balance_transactions/object#balance_transaction_object-available_on) of the balance transaction associated with the payment to determine which tax year the transaction belongs to. The `available_on` date represents the date the funds become available in the Stripe account. We believe this approach best matches the IRS’s instructions.\n\n### Card not present payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIRS Form 1099-K box “1b” reports the volume of “card not present” payments. Stripe classifies a payment as “card present” or “card not present” based on the [PaymentMethod `type`](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type) associated with that payment. The following PaymentMethod `type` values are “card present”. All others are “card not present”:\n\n1.  `card_present`\n2.  `interac_present`\n\n### Tax form totals![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe recommend that platforms audit Stripe transactions that have contributed to a form’s totals by [exporting the transaction log](https://docs.stripe.com/connect/calculation-methods#export-transaction-logs).\n\nAccount transactions performed outside of Stripe aren’t included in form totals. To include non-Stripe transactions, platforms must manually adjust the form box amounts before filing.\n\nTransactions created with the [Transfers API](https://docs.stripe.com/api/transfers) to credit connected accounts (for example, handling dispute reversals and refund failures) are included in 1099-K form totals. Debits from connected accounts are excluded. To remove these credit transfers from the form, platforms must manually adjust the form box amounts before filing.\n\n### Separate charges and transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe derives the reportable amount for a separate charge and transfer from the transfer, not the charge.\n\nAdditionally, you must use the [`source_transaction` parameter](https://docs.stripe.com/api/transfers/object#transfer_object-source_transaction) to associate a charge with a transfer from your platform to a connected account—Stripe classifies any transfers without this parameter as “card not present” transactions.\n\nIf you initially created a separate charge and transfer with a link from the transfer to the charge and later updated the `Charge` object to include the transfer, we treat it like a destination charge in calculations. The gross amount on your draft form might change if you’ve opted to include fees, as we’ll now include the charge in our considerations.\n\n### Foreign exchange rate conversions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s 1099 calculation methods convert non-USD transactions to USD using the market exchange rate from the day the transaction is created. This method might yield a different value than the Stripe Dashboard shows because we compute that value using an intra-day exchange rate adjusted for Stripe’s foreign exchange fee.\n\n### Cancelled asynchronous payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a user cancels an asynchronous payment (for example, ACH debit) that would’ve otherwise been successful before the payment completes, that payment might still be included in the results of the “payments including fees” and “payments excluding fees” methods.\n\n## Export transaction logs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor tax year 2022 and later, you can use the [Stripe Dashboard](https://dashboard.stripe.com/connect/taxes/forms) to export the transaction log of each 1099 form. A transaction log lists the Stripe transactions that have contributed to a form’s total. This log allows you to audit transaction discrepancies and answer questions from your connected accounts about which transactions Stripe includes in their tax forms.\n\nAfter you export the transaction log, the sum of its **Calculation Amount** column reflects the form total that you see on the 1099. For each transaction, we show the applicable **merchant\\_id**, **balance\\_transaction\\_id**, **charge\\_id**, and **transfer\\_id** along with the calculation amount relevant to that transaction. The calculation amount is dependent on the type of calculation method you choose. The 1099-K form transaction logs list **card\\_not\\_present\\_volume** and **transaction\\_count** to match the values on the form.\n\n#### Note\n\nTransaction logs only contain Stripe transactions. [Manual updates](https://docs.stripe.com/connect/modify-tax-forms) through CSV imports or the Dashboard’s Tax form editor won’t be included in the transaction log.\n\nTo export the transaction log of a tax form:\n\n1.  Navigate to the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) page in the Dashboard.\n2.  Select the checkbox next to the tax form.\n3.  Click the overflow menu () at the top-right of the tax form and select **Export transaction log**.\n4.  Specify the date range and rows that you want to export. Use the default export settings to capture all the details of the entire year. The transaction log file downloads in your browser. Keep the email notification option selected if you want to receive an email containing a link to download your transaction log.\n\nThe transaction log file downloads after Stripe finishes the export process. If you exported with the email notification option selected, Stripe also sends you an email from `notification@stripe.com` with a link to download your transaction log.",
    "title": "Choose a calculation method | Stripe Documentation",
    "description": "Learn about the calculation methods for reporting charges and payouts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/direct-charges-multiple-accounts",
    "markdown": "# Share payment methods across multiple accounts for direct charges\n\n## Save payment details on your platform and clone them to connected accounts for direct charges.\n\nIf you need to create direct charges on multiple connected accounts using the same saved payment information, use this approach. Otherwise, use [our guide for creating direct charges](https://docs.stripe.com/connect/direct-charges).\n\n## Save payment details on your platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayment details need to be set up for future use and saved on your platform account when provided by your customer. Setup is only required one time per payment method.\n\n### Create a customer on your platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn your platform account, use the [Customers API](https://docs.stripe.com/api/customers) to create a customer to represent the person paying.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"Jenny Rosen\"`\n\n### Create a SetupIntent on your platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you’re ready to collect payment details, use the [Setup Intents API](https://docs.stripe.com/api/setup_intents) to create a [SetupIntent](https://docs.stripe.com/api/setup_intents \"Setup Intents API\") on your platform and associate it with the customer you created in the previous step.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}    `\n\nIf your platform is in a different country than your connected accounts, the set up performed on your platform might not be sufficient. For example, if your platform is in the US, the set up process might not trigger authentication required for direct charges in countries subject to [SCA enforcement](https://docs.stripe.com/strong-customer-authentication/sca-enforcement). In cases like this, you might need to use [on\\_behalf\\_of](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-on_behalf_of) to specify a connected account in another country to perform the proper setup.\n\n#### Note\n\nIf you want to take a payment on your platform account (not a direct charge) at the same time you set up the payment method for future use, you can create a PaymentIntent with [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage) instead.\n\n### Confirm the SetupIntent ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSend the SetupIntent’s [client\\_secret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret) to your front end and use our client-side SDKs or UI components to collect payment details and confirm the SetupIntent. For example, you can [use the Payment Element to collect payment information and confirm the SetupIntent](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#collect-payment-details).\n\nConfirming on the client allows the customer to go through any flows required to set up their payment details for future use, like authentication with [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\").\n\nA successful confirmation creates a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") and attaches it to the customer for future use.\n\n## Clone and create direct charges on connected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you have a PaymentMethod set up for future use on your platform, clone it to a connected account and create a direct charge.\n\n### Clone the PaymentMethod to the connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [Payment Methods API](https://docs.stripe.com/api/payment_methods) to clone the PaymentMethod saved on your platform account to the connected account.\n\n#### Note\n\nOnly some types of PaymentMethods can be cloned. Cloning is currently supported for PaymentMethods which have `type` set to either `card` or `us_bank_account`.\n\n`curl https://api.stripe.com/v1/payment_methods \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d customer=  {{PLATFORM_CUSTOMER_ID}}   \\  -d payment_method=  {{PAYMENT_METHOD_ID}}    `\n\nThe cloned PaymentMethod has a new ID, and is an independent object. It isn’t linked to, or kept in sync with, the PaymentMethod on your platform. The cloned PaymentMethod inherits the setup performed on your platform account. You don’t need to set it up for future use again on the connected account.\n\n### Create and confirm a PaymentIntent on the connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNow use the [Payment Intents API](https://docs.stripe.com/api/payment_intents) to create and confirm a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") on the connected account with the cloned PaymentMethod to create a direct charge:\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d currency=USD \\  -d amount=1099 \\  -d off_session=true \\  -d confirm=true`\n\nCreating a charge with the cloned PaymentMethod consumes it, because it’s not attached to a customer. You can’t use a consumed PaymentMethod again, but the original PaymentMethod on your platform remains unaffected and you can still clone and reuse it for future charges.\n\n#### Note\n\nIf you want to use the cloned PaymentMethod for recurring direct charges on a connected account, don’t create PaymentIntents directly. Instead, create a customer on the connected account, attach the cloned PaymentMethod to it to enable reuse, and create a [Subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") for the recurring payments.\n\n## Handle customer and payment updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou only need to update the customer and PaymentMethod on your platform account. The PaymentMethod will be cloned for each direct charge, ensuring you’re always using the newest version. The customer only exists on your platform account, so there are no customer details to synchronize across multiple accounts.",
    "title": "Share payment methods across multiple accounts for direct charges | Stripe Documentation",
    "description": "Save payment details on your platform and clone them to connected accounts for direct charges.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/cloning-customers-across-accounts",
    "markdown": "# Clone customers across accounts | Stripe DocumentationThe Stripe Docs logo\n\nWith the token generated in the previous step, [attach this token to a customer](https://docs.stripe.com/api#create_customer) on the connected account.\n\n#### Caution\n\nCharges that are made on the cloned customer aren’t reflected on the original customer. This feature is intended for multiple connected accounts that need to charge the same user.\n\n#### Caution\n\nIf your platform uses the [Payment Methods API](https://docs.stripe.com/payments/payment-methods), you must pass the payment method ID as the `payment_method` parameter instead of passing the `source` parameter.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d source=  {{TOKEN_ID}}    `\n\nThen, use the customer ID (for example, `cus_knMsLEgYMmoour`) and the payment method ID (for example, `card_VLt5MohQBvvbyA`) returned by the `customers.create` call to charge the customer.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=999 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method=  {{PAYMENT_METHOD_ID}}    `",
    "title": "Clone customers across accounts | Stripe Documentation",
    "description": "With Connect, you can clone your customers' payment information across multiple connected accounts for reuse.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/onboarding",
    "markdown": "# Choose your onboarding configuration | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the different options for onboarding your connected accounts.\n\nStripe offers several different onboarding options:\n\n*   **Stripe-hosted onboarding**: Your connected accounts go through the onboarding flow in a Stripe-hosted web form.\n*   **Embedded onboarding**: You embed the Account onboarding component directly in your application and your connected accounts go through the onboarding flow without leaving your application.\n*   **API onboarding**: You use Stripe’s APIs to build your own customized onboarding UI.\n\nChoose the onboarding option that best fits your business. Stripe recommends using Stripe-hosted onboarding or Embedded onboarding. These options automatically update to handle changing requirements when they apply to a connected account.\n\n|     | [**STRIPE-HOSTED ONBOARDING**](https://docs.stripe.com/connect/hosted-onboarding) | [**EMBEDDED ONBOARDING**](https://docs.stripe.com/connect/embedded-onboarding) | [**API ONBOARDING**](https://docs.stripe.com/connect/api-onboarding) |\n| --- | --- | --- | --- |\n| **INTEGRATION EFFORT** | Low coding | More coding | Most coding |\n| **CUSTOMIZATION** | Stripe-branded with limited platform branding | [Highly themeable](https://docs.stripe.com/connect/customize-connect-embedded-components) with limited Stripe branding | Full control over your own UI |\n| **AUTOMATIC UPDATES FOR NEW COMPLIANCE REQUIREMENTS** | Immediate | Immediate | Requires integration changes |\n| **SUPPORT NEW COUNTRIES WITHOUT INTEGRATION CHANGES** |     |     |     |\n| **FLOW LOGIC** | Limited control | Limited control | Full control |\n| **IDEAL FOR** | Platforms that want Stripe to handle onboarding | Platforms that want a branded onboarding flow within their application | Platforms that require full control of the onboarding flow and have the resources to build and maintain it |\n\n## Stripe-hosted onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe-hosted onboarding is a web form hosted by Stripe with your brand’s name, color, and icon. Stripe-hosted onboarding uses the [Accounts API](https://docs.stripe.com/api/accounts) to read the requirements and generate an onboarding form with robust data validation and is localized for all Stripe-supported countries.\n\nUse Stripe-hosted onboarding if you want Stripe to handle onboarding with little effort from your platform.\n\n[Learn more about Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding)\n\n## Embedded onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEmbedded onboarding is a highly themeable onboarding UI with limited Stripe branding. Your platform embeds the [Account onboarding component](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding) in your application, and your connected accounts interact with the embedded component without ever leaving your application. Embedded onboarding uses the [Accounts API](https://docs.stripe.com/api/accounts) to read the requirements and generate an onboarding form with robust data validation and is localized for all Stripe-supported countries.\n\nWith embedded onboarding, you get a customized onboarding flow without the complexity and maintenance associated with updating your onboarding integration as compliance requirements change.\n\n[Learn more about Embedded onboarding](https://docs.stripe.com/connect/embedded-onboarding)\n\n## API onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou use the [Accounts API](https://docs.stripe.com/api/accounts) to build an onboarding flow and handle identity verification, localization, and error handling for each country your connected accounts onboard in. Stripe can be completely invisible to the account holder. Your platform is responsible for all interactions with your connected accounts and for collecting all the information needed to verify each account. Verification requirements are updated as laws and regulations change around the world. You must plan on reviewing and updating onboarding requirements at least every six months.\n\nStripe doesn’t recommend this option unless you’re fully committed to the operational complexity required to build and maintain an API onboarding flow. For a customized onboarding flow, Stripe strongly recommends embedded onboarding.\n\n[Learn more about API onboarding](https://docs.stripe.com/connect/api-onboarding)",
    "title": "Choose your onboarding configuration | Stripe Documentation",
    "description": "Learn about the different options for onboarding your connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/embedded-risk",
    "markdown": "# Embedded Stripe Managed Risk | Stripe DocumentationThe Stripe Docs logo\n\n## Embed Stripe risk management features into your own website.\n\nWith [Stripe Managed Risk](https://docs.stripe.com/connect/risk-management/managed-risk), we provide an end-to-end business risk management solution and your platform isn’t liable for your connected accounts’ negative balances. For connected accounts without access to a Stripe-hosted dashboard, Stripe Managed Risk requires that your website includes the following embedded components:\n\n*   Account onboarding\n*   Account management\n*   Notification banner\n\nThrough those embedded components, Stripe provides:\n\n*   Ongoing monitoring and detection of connected accounts’ credit, fraud, and supportability risk\n*   Risk interventions to ensure business supportability and prevent losses\n*   Co-branded emails and embedded notifications to inform businesses of interventions\n*   Embedded forms to respond to and remediate interventions\n*   Stripe risk operations to review merchant information and make risk decisions\n*   Stripe liability for connected account negative balances\n\n## Risk interventions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith Stripe Managed Risk, Stripe takes the following actions throughout a connected account’s operations:\n\n*   Verifies the information collected during onboarding\n*   Evaluates ongoing fraud risk\n*   Monitors compliance\n\nWhen Stripe detects elevated risk or non-compliance, we raise a risk review or apply a risk intervention, which is an action taken to mitigate losses, such as:\n\n*   Pausing payouts or charges\n*   Holding reserves\n*   Prohibiting the account from using payment processing services\n\nWhile some high-priority interventions have consequences that take effect immediately, most interventions notify connected accounts with a deadline to respond before their business is disrupted. Connected accounts are responsible for promptly reviewing and responding to interventions.\n\n## Emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe raises a risk intervention, we email the connected account to notify them of the issue. The email provides high-level guidance on:\n\n*   What the business must do to resolve the issue\n*   By when the business must address the issue\n*   Consequences to the business if no action is taken\n\nRisk intervention emails might include links to more information about a particular topic, such as restricted business lists or how card brand monitoring programs work. Emails might also include links to details about activity on the connected account, like disputed payments or reserve balances.\n\nEmails sent to fully embedded connected accounts include:\n\n*   Co-branding\n*   A primary button that takes users to the embedded notification banner (as configured in your Connect [Emails](https://dashboard.stripe.com/settings/connect/emails))\n*   Links leading to the co-branded support site (see Support) and your embedded components\n\nThe following example shows a fully embedded risk intervention email:\n\n![Sample risk intervention email from the Furever demo.](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-email.0084c37ff7da0310d58aabebd565d2e5.png)\n\nIn addition to notifying connected accounts about risk interventions through email, Stripe also renders alerts via the [notification banner component](https://docs.stripe.com/connect/supported-embedded-components/notification-banner). The notification banner only appears when there are active notifications.\n\nThe notification banner provides high level guidance on:\n\n*   What the business must do to resolve the issue\n*   By when the business must address the issue\n*   Consequences to the business if no action is taken\n\n![Sample embedded risk notification banner from the Furever demo.](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-notif.c24e386e68a8a56ded5eefb122049842.png)\n\nIn the example above, the banner shows a single notification requiring action within two days to continue taking payments and receiving payouts. The banner’s headline states whether the intervention affects payments, payouts, or both.\n\nThe banner can also have multiple notifications to help connected accounts quickly address all open issues.\n\n![Sample of multiple embedded risk notifications in the banner.](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-notif-multiple.9c9218df9607342367840d9d35656cab.png)\n\nMultiple notifications in the embedded notification banner\n\nThe notification’s due date indicator shows how much time is remaining and becomes red to indicate overdue requirements that the connected account must address urgently to avoid consequences.\n\n![Sample past due embedded risk notification.](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-notif-pastdue.98fa5f8c10d84861178fbbb51392d8be.png)\n\nNotification for a past due risk intervention\n\nAfter the connected account responds, the notification updates to indicate that no action is required.\n\n![Sample embedded risk in-review notification.](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-notif-inreview.7d990f036474fc4d0a630867e202ee13.png)\n\nNotification for an in-review risk intervention\n\nWhen all notifications are in review the banner automatically collapses and can be expanded to see more details.\n\n![embedded-managed-risk-notif-collapse](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-notif-collapse.99b06a09be12ecd64d30c8116b930f3c.png)\n\nCollapsed notification banner\n\nThe banner informs your connected account when Stripe suspends their operation and provides a means for contacting support to appeal.\n\n![embedded-managed-risk-notif-reject](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-notif-reject.94843e428028f640d3ea79f8bac8822c.png)\n\nNotification of unsupportable business\n\n## Responding to interventions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNotifications in the [notification banner](https://docs.stripe.com/connect/supported-embedded-components/notification-banner) include a button that the account user can click to respond directly in a modal window. In the following example, the notification prompts the user to complete an identity verification.\n\n![embedded-managed-risk-remediation-ID](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-remediation-ID.e518cff147ff3ef2d8c7fa3b6d7455f5.png)\n\nEmbedded identity verification\n\nConnected accounts must authenticate with Stripe to resolve risk interventions in the modal window.\n\nSome interventions might request additional information about the business or its operations, which the user can provide and submit directly from within the modal, as shown in the following example.\n\n![embedded-managed-risk-remediation-form](https://b.stripecdn.com/docs-statics-srv/assets/embedded-managed-risk-remediation-form.121ec16bc88310db4db00d5ca5ef2dcb.png)\n\nEmbedded form to respond to risk intervention\n\nMost intervention emails include a button directing users to the notification banner where they can respond directly. In rare cases, the email might direct the user to respond by replying to the email.\n\n## Support for risk issues![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a connected account needs help with a risk issue, they can:\n\n*   Contact Stripe’s risk specialist team using the **Contact support** link at the bottom of the response modal.\n*   Reply to any risk email to create a support request.\n\nThe forms provided through the intervention notifications are the fastest resolution for risk issues because they minimize the back-and-forth nature of email communication.",
    "title": "Embedded Stripe Managed Risk | Stripe Documentation",
    "description": "Embed Stripe risk management features into your own website.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/embedded-comms",
    "markdown": "# Email communications in embedded Connect integrations\n\n## Customize Stripe notifications to your connected accounts in a fully embedded integration.\n\nIn an embedded Connect integration, when connected accounts must review information or take action, Stripe sends email communications directly to them. Those emails direct your connected accounts to embedded components on your website to review information or take required action. You must provide Stripe with the URLs for those components so we can include them in the emails.\n\nYou can customize the messages that Stripe sends to match your platform brand, and you can view an account’s Stripe email history on the account’s details page.\n\n## Communications that Stripe sends to your connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe send the following emails to your connected accounts:\n\n*   **Account emails** verify an account’s information, such as additions or changes to an email address, phone number, or bank account.\n*   **Compliance emails** notify accounts to provide required information. Stripe often needs to collect further information to maintain compliance with our financial partners.\n*   **Risk emails** notify accounts when they are under a risk review. These emails often provide instructions on how to submit information to resolve a risk action; for example, to remove a pause on payouts.\n*   **Tax emails** (only when Stripe collects Stripe fees directly from connected accounts) notify users when their tax invoices or 1099s are ready to download.\n\nIf you want to send any other payments-related emails to your connected accounts, you must send them yourself. For example, to send emails for new disputes, [listen for](https://docs.stripe.com/webhooks) the `charge.dispute.created` event on a connected account. When that event occurs, use [the Disputes API](https://docs.stripe.com/api/disputes) to get the details and email them to the account.\n\nYou must [update your Connect settings with the URLs](https://dashboard.stripe.com/settings/connect/site-links) of your payments and account workflows so Stripe’s email communications can include links for your accounts to respond.\n\n## Site links to your website components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEmails sent by Stripe that contain a call to action include a link to perform that action. For example, if we send an email directing a connected account to respond to a risk notification, it must include a link to the page where you embedded your Notification banner component.\n\nBefore you can create a live mode Account Session, you must provide the URLs where you have integrated the embedded components into your website. Configure the sending email domain and embedded component URLs in the **Site links** section of [your platform’s Connect settings](https://dashboard.stripe.com/settings/connect/embedded_ui).\n\n#### Note\n\nTest mode environments use the same URLs as live mode.\n\nFor embedded components integrated in your site, select **Yes** and enter the URL of the page that hosts the component. For any actions not handled by an embedded component, select **No** and enter the URL of the page on your site where the account can perform the action. After entering the URLs, test them to verify that they open the right pages. You can test a link by clicking **Validate**.\n\nYou must set URLs for the following:\n\n*   Notification banner\n*   Account management\n*   Payments\n*   Payouts\n*   Balances\n*   Documents (when Stripe collects Stripe fees directly from connected accounts)\n\nWhen sending an email, Stripe automatically appends the connected account ID to the redirect URL as the `stripe_account_id` parameter. Use that parameter to identify the account and verify that they’re authenticated. Set up the route on your server to read the parameters and display the correct embedded component.\n\n## Preview and customize communications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can customize the co-branded communications that we send to your connected accounts in your [communication settings](https://dashboard.stripe.com/settings/connect/communication). To customize a category of emails, click **Preview and customize**.\n\n### Customize email branding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can set your Business name, Logo, Icon, Brand color, and Accent color. Stripe uses these values in the co-branded emails we send to your connected accounts.\n\n### Customize email domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, emails are sent from a stripe.com address. You can [customize the domain](https://docs.stripe.com/get-started/account/email-domain), but not the specific address. We set the address automatically [based on the context of the message](https://support.stripe.com/questions/custom-email-domain).\n\n### Preview and test emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you customize a category of co-branded Stripe emails, you can check their appearance and test their links in the preview on the right side of the page. Select a specific email from the **Preview** dropdown list. You can also send test emails to verify that they’re working correctly by clicking **Send email**.\n\n### View the history of emails sent to connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can see the emails that Stripe has sent to your connected accounts on the account details page under **Emails to this account**. To see the details of an email, including its exact contents, its To: address, and its status (such as whether it was delivered successfully or was opened), click it in the list.",
    "title": "Email communications in embedded Connect integrations | Stripe Documentation",
    "description": "Customize Stripe notifications to your connected accounts in a fully embedded integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/embedded-support",
    "markdown": "# Embedded Connect Support | Stripe DocumentationThe Stripe Docs logo\n\n## Use Stripe support management features from your own website.\n\nIn some configurations that use embedded components, Stripe provides targeted support for your connected accounts. That support is available when your connected accounts don’t have access to a Stripe-hosted Dashboard and your platform isn’t liable for their negative balances. It includes:\n\n*   A Stripe-hosted support site with self-serve content specific to Stripe’s embedded components\n*   Access to email and live chat support for your connected accounts\n*   Links to the self-serve support site in your embedded components and co-branded risk and compliance emails\n\nYour connected accounts might need help with payment processing-specific issues like responding to disputes or confirming expected fund settlement times. They can also have questions about risk interventions where only Stripe has full visibility and control. Providing direct access to Stripe Support for such situations greatly reduces your platform support team’s operational load. In addition, you can implement a complete self-serve solution for risk interventions by combining that support access with [Stripe Managed Risk](https://docs.stripe.com/connect/embedded-risk).\n\n## Prerequisites![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet up your platform with [a fully embedded connect configuration](https://docs.stripe.com/connect/build-full-embedded-integration). The Stripe-hosted self-serve support site becomes discoverable to your users after you implement the required [embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components) for your configuration.\n\n## Access the support site![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour users can access the Stripe-hosted support site at `https://support.stripe.com/embedded-connect/`.\n\nEmbedded components include **Contact support** links in the bottom right of each dialog. We also include links in flows where users are most likely to need Stripe’s help.\n\n![Dialog showing contact support link](https://b.stripecdn.com/docs-statics-srv/assets/embedded-support-link.8b61571aab6de31dc1c643f8616b0ca0.png)\n\nEach of the following embedded components contains links to contact support:\n\n*   Account management\n    *   Edit Professional details\n    *   Edit Public details\n    *   Edit Personal details\n    *   Edit Payout details\n*   Notification banner\n    *   Compliance forms\n    *   Risk forms\n*   Onboarding\n*   Authentication dialog\n\n## Self-serve help![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe support site includes articles and related questions across several topic areas, including the following:\n\n*   Accounts\n*   Declines\n*   Disputes\n*   Fraud\n*   Legal\n*   Payments\n*   Payouts\n*   Privacy\n*   Refunds\n*   Reserves\n*   Verification\n\n![Example support site article](https://b.stripecdn.com/docs-statics-srv/assets/support-site-article-example.2094c3de78b4ddf05bd4008ea5aa00fc.png)\n\n**Contact support** links appear on the right side of each page on the self-serve support site.\n\nIf the user is authenticated (for example, provided an SMS OTP), clicking the link opens a support widget. The widget lets them start a real-time chat with Support or send an email.\n\n![Contact support through the support site](https://b.stripecdn.com/docs-statics-srv/assets/support-site-contact-auth.17ef846eb63e7144f1b6f4855fc05f8f.png)\n\nClicking the link while not authenticated, or clicking **Send us an email** in the widget, opens a form to open a support case by email.\n\n![Chat with support through the support site](https://b.stripecdn.com/docs-statics-srv/assets/support-site-email-form.51af965dc976df6654d3909442e33ffe.png)",
    "title": "Embedded Connect Support | Stripe Documentation",
    "description": "Use Stripe support management features from your own website.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/account/retrieve",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/connect/tax-forms-state-requirements",
    "markdown": "# File tax forms with states\n\n## Learn about the state requirements for filing 1099 forms.\n\nWhen you [file](https://docs.stripe.com/connect/file-tax-forms) your 1099 forms from the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) view in the Dashboard, Stripe submits your forms to the IRS and all qualifying states. We automatically apply state thresholds when generating 1099 tax forms, so you can easily determine which forms need state filing based on the addresses of your connected accounts.\n\n#### Note\n\nStripe supports e-filing in all states but won’t transmit forms to states on your behalf that have backup or state withholding amounts. Review [1099 form requirements by state](https://docs.stripe.com/connect/tax-forms-state-requirements#check-1099-form-requirements-by-state) and work with your tax advisor to make sure you understand the tax requirements specific to your business.\n\n## Prepare to file with the states![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore filing forms in your Dashboard, do the following to make sure forms are filed correctly with both the IRS and states:\n\n[](#choose-form-type)\n\n[Configure your tax forms settings](https://docs.stripe.com/connect/get-started-tax-reporting#set-tax-form-default-settings) to choose the tax form type (or types) you’ll file: 1099-K, 1099-NEC, or 1099-MISC. Each state has different requirements for each form type.\n\n[](#determine-location)\n\nIn the [Dashboard](https://dashboard.stripe.com/connect/taxes/forms), you can either [export](https://docs.stripe.com/connect/modify-tax-forms?method=csv) a CSV file with state information (reported in the **payee\\_region** column) or filter by **Payee state**.\n\n![Filter by payee state](https://b.stripecdn.com/docs-statics-srv/assets/payee_state.f077495dfbceb3bba62b27c5aee2bb9f.png)\n\n[](#determine-states)\n\nSome state 1099 filings also require a state tax registration or withholding ID. Refer to the tables in the [Check 1099 form requirements by state](https://docs.stripe.com/connect/tax-forms-state-requirements#check-1099-form-requirements-by-state) section to determine where you might need state online accounts and IDs.\n\n[](#add-state-reg)\n\nAfter you obtain the registration or withholding ID, add the states in which you’ll file and the corresponding IDs on the [Tax forms settings](https://dashboard.stripe.com/settings/connect/tax_forms) page. In the Dashboard, click **Settings**. On **Product settings**, under **Connect**, click **Tax form settings**.\n\n![Add the state tax registration or withholding ID for each state you'll file](https://b.stripecdn.com/docs-statics-srv/assets/state_tax_registration_id.b61e81338146c94a3e98ee995cd866ce.png)\n\nRefer to the tables in the [Check 1099 form requirements by state](https://docs.stripe.com/connect/tax-forms-state-requirements#check-1099-form-requirements-by-state) section to determine where you might need state online accounts and IDs. If prompted that some state registration or withholding IDs were missing during filing, you need to go to the Connect [Tax forms settings](https://dashboard.stripe.com/settings/connect/tax_forms) page, add the missing IDs, and then go through the filing flow again.\n\n## State-by-state breakdown![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you’re ready to [file forms in your Dashboard](https://docs.stripe.com/connect/file-tax-forms), the forms for IRS and state reporting agencies will be filed at the same time. To understand the number of forms being filed in each state, click **Show state-by-state breakdown** on the **File Federal and state tax forms** window in the filing flow. This page also indicates whether the state’s registration or withholding ID is missing or has already been provided. A yellow informational banner displays at the top of every page in the filing flow if state IDs are missing from states that are being filed.\n\n![Review filing details page displaying a banner to indicate a missing Tax ID.](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-review-filing-missing-ID.40d5902778ca845d5190d1679d9f4ee8.png)\n\n## Withholding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe can’t file tax forms with the state authorities if state withholding is present. If you have forms with state withholding, Stripe won’t file those with the states but will make the files available as an export and file with the IRS. Please check the **Exports & Imports** section in the Dashboard for the downloaded file. Please consult a tax advisor on how/whether to file these forms with state agencies.\n\n## Check 1099 form requirements by state![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nChoose the form type to view state filing requirements:\n\n*   [1099-K](https://docs.stripe.com/connect/1099-K)\n*   [1099-NEC](https://docs.stripe.com/connect/1099-NEC)\n*   [1099-MISC](https://docs.stripe.com/connect/1099-MISC)\n\n## Correct 1099 reports with the states![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you file a correction with the IRS, the state correction is filed at the same time. To file a [correction](https://docs.stripe.com/connect/correct-tax-forms) with a state for a form that was already filed, you must create a correction.\n\n## Frequently asked questions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following section provides answers to common questions about filing tax forms through Connect.\n\n### What happens if a connected account needs their form filed in multiple states?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe does not support this at the moment. Stripe only checks eligibility and files in the state where the connected account’s address is registered.\n\n### When we click “File”, does Stripe file with the IRS and the States at the same time, or do we have the ability to make changes if one has a later deadline?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe files with the IRS and the State right away when you file the submission and you can’t make changes to that. But platforms are always able to make “corrections” and then file them and Stripe takes care of processing those corrections to the IRS and the State.\n\n### How do I know if a particular form will be filed with the state?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve introduced a new State filing status. For more information, see [Understand tax form status](https://docs.stripe.com/connect/get-started-tax-reporting#understand-tax-form-status).\n\n### Can I override the filing requirement for State filing without overriding the filing requirement for Federal filing?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNo. If you override the filing requirements, it applies to both federal and state filing.\n\n### Why wasn’t the state filing status overridden when I selected “File even if incomplete”?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you choose to override the filing status and select **File even if incomplete**, there are still certain edge cases where your form might still have a state filing status of `Needs Attention`. This is done to minimize the risk of rejections from the state. Take note of the following state-specific rules:\n\n*   Pennsylvania: The form must have a non-zero Taxpayer Identification Number (TIN) and pass a basic address validation check, which requires at least one digit and one number in the address.\n*   Illinois: The form must have a non-zero TIN and a valid payee name.\n*   Oregon: The form must have a non-zero TIN.\n*   District of Columbia: The form cannot have a TIN with all digits being the same number.",
    "title": "File tax forms with states | Stripe Documentation",
    "description": "Learn about the state requirements for filing 1099 forms.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/connect-w8-w9-onboarding",
    "markdown": "# Connect W-8 and W-9 | Stripe DocumentationThe Stripe Docs logo\n\n## Use Stripe's W-8 and W-9 Connect product to collect the necessary tax forms from your users.\n\n## What’s the Stripe W-8 and W-9 Connect product?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s W-8 and W-9 Connect product provides a seamless way to collect certified tax information from connected accounts through the Express Dashboard or Stripe-hosted onboarding. This includes the name, address, and TIN (Tax ID) of a taxpayer. A [W-9 tax form](https://www.irs.gov/pub/irs-pdf/fw9.pdf) is for [US residents or citizens](https://www.irs.gov/individuals/international-taxpayers/classification-of-taxpayers-for-us-tax-purposes) and is used to confirm their TIN (SSN/ITIN/EIN). A [W-8 tax form](https://www.irs.gov/pub/irs-pdf/fw8ben.pdf) is for non-US tax residents and is used to certify their name, address, and foreign TIN (if applicable), to confirm that they’re not a US taxpayer. A non-US resident can also specify the appropriate treaty and/or withholding rates applicable to their business.\n\nPlatforms might be subject to IRS fines up to 290 USD per incorrect submission if they file 1099s with incorrect information. W-8 and W-9s provide a way for Platforms to collect certified tax information throughout the year directly from your Connected Accounts before issuing 1099s to make sure the correct information is used on the appropriate 1099 forms.\n\nWith the W-8 and W-9 Connect product, your connected accounts can complete the appropriate W8 or W9 form with a few simple clicks. Any information connected accounts have already provided is pre-populated onto the forms for the ease of your users. They only need to confirm the information is accurate and make updates where needed. No more PDFs, emails, or wet-ink signatures needed.\n\nPlatforms will have a fully customizable Dashboard which tracks the status of all W-8 or W-9 requests. You’ll be able to easily see which users have completed the appropriate documentation and which users are still pending, and you can download PDFs of any submitted forms.\n\nConnected Accounts will also have a unified tax experience where they can manage completing their tax forms and storage of their tax documents all within the Tax Center.\n\n![Stripe W-8 and W-9 forms dashboard.](https://b.stripecdn.com/docs-statics-srv/assets/w8-w9-dashboard.fca7e6602823d2420c3c1828b4bad753.svg)\n\nStripe W-8 and W-9 forms dashboard\n\n## How does it work?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms determine appropriate collection timing for when to request a W-8 or W-9. If choosing to collect at onboarding, all new users are asked to verify and attest to their tax information. If choosing to collect at a later date, Platforms request W-8 or W-9 collection with the [Accounts API](https://docs.stripe.com/api/connected_accounts) and then route their user to verify and attest to their tax information. Platforms can also request W-8 or W-9 collection from all accounts—existing accounts will be notified at that time.\n\n![Customize the W-8, W-9 collection configuration.](https://b.stripecdn.com/docs-statics-srv/assets/w8-w9-platform-settings.470e604d117bbd4bac5cd400d59b0eb7.png)\n\nCustomize the W-8 and W-9 collection configuration\n\nPlatforms have full customization in setting enforcement thresholds to determine when Connected Accounts will be required to submit a W-8/W-9 tax form:\n\n*   **Volume**: Block payouts if a W-8 or W-9 isn’t submitted after processing _x_ USD.\n*   **Time**: Block payouts if a W-8 or W-9 isn’t submitted after _x_ days.\n*   **Combo**: Block payouts if a W-8 or W-9 isn’t submitted after _x_ days or after processing _x_ USD.\n\n## How do I get started?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCurrently, access to Stripe’s W-8/W-9 Connect product is limited to US beta users. To request access to the beta and to learn more about pricing, reach out to your account team or [contact Stripe](https://stripe.com/contact/sales) for more information.",
    "title": "Connect W-8 and W-9 | Stripe Documentation",
    "description": "Use Stripe's W-8 and W-9 Connect product to collect the necessary tax forms from your users.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough",
    "markdown": "# 1099 Tax Support product walkthrough\n\n## Learn about how to manage 1099 Tax forms for connected accounts using Express.\n\nThe images in this section describe an example of the product flow connected accounts could encounter. We provide these images to help give you and your support team an idea of the overall user experience. Feel free to reach out to Stripe support with any questions about this flow.\n\n[](#express-dashboard)\n\nEnabling e-delivery for tax year 2023 gives your Custom or Express connected accounts access to Stripe Express Tax Forms page, a prebuilt web and mobile dashboard for managing their tax information and receiving 1099s electronically.\n\nAs you configure your [tax form settings](https://dashboard.stripe.com/settings/connect/tax_forms), you can also choose to have Stripe send pre-filing confirmation emails to collect tax information and paperless delivery consent directly from your connected accounts. We’ll email your eligible connected accounts starting the week of November 1st.\n\n![Stripe Express dashboard for connected account taxes](https://b.stripecdn.com/docs-statics-srv/assets/stripe-express-tax-dashboard-2023.4fc699b9b7f560443aacd25b89d14a59.png)\n\nThe Stripe Express Dashboard where payees can grant e-delivery consent, download their 1099 tax forms, and update their tax information.\n\n![Stripe Express dashboard for connected accounts](https://b.stripecdn.com/docs-statics-srv/assets/stripe-express-dashboard.75de9515d0222275afb3c67a4d6117c4.png)\n\nConnected accounts can also use the Express Dashboard to view their available balance, see upcoming payouts, and track their earnings in real time.\n\n#### Note\n\nIf you don’t want to give your Custom connected accounts access to the Stripe Express Dashboard or if you don’t want Stripe to email your connected accounts, select postal delivery and disable electronic delivery in your [tax form settings](https://dashboard.stripe.com/settings/connect/tax_forms).\n\n[](#receive-email)\n\nYour connected account receives an email from Stripe asking them to confirm their tax information and update their delivery preferences. The subject line reads ‘Get your \\[Platform\\_Name\\] 2023 tax forms faster by enabling e-delivery.’ The following image displays the content of the email.\n\n![Stripe Express Tax form email from Stripe.](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-confirm-information-email-2023.8868bb92bbd3f2fd5fa0e2fe319c11ab.png)\n\nStripe Express Tax form email from Stripe\n\n[](#verify-info)\n\n_Applies to Custom connected accounts only_. After your user clicks the **Get Started** button in Stripe’s email to connected accounts, they are taken to this screen. If they are already logged in to their Stripe Express account, they proceed to the next screen. This step is only needed if they don’t have a Stripe Express account already.\n\n![The Stripe Express page to create an account.](https://b.stripecdn.com/docs-statics-srv/assets/tax-create-stripe-express-account.7bfe7be3830ecb6ca313cadfa256e758.png)\n\nThe Stripe Express page to create an account\n\n[](#two-factor)\n\nExpress and Custom connected accounts who are logged in to their Stripe Express accounts, already have a Stripe Express account, or who have proceeded from the login screen, are asked for a code sent to the phone number they have on file for their account, or the one they just entered.\n\n![Stripe Express account two-factor authentication dialog.](https://b.stripecdn.com/docs-statics-srv/assets/tax-verify-phone.a6b5b1e2455c322950902d1355324d4d.png)\n\nThe Stripe Express account phone number verification dialog.\n\n[](#verify-identity)\n\n**Applies to Custom connected accounts only**. After phone number verification is complete, Stripe provides the connected account with prompts to verify their identity. These are details that should be associated with their connected account. This step is only required for Custom accounts that haven’t already onboarded to Stripe Express. If, after a few attempts, a connected account is unable to enter details that match their account, they’re prompted to check with you as the platform to confirm their details. The error message reads ‘One of the fields didn’t match the information we received from \\[Platform\\_Name\\]. You can try again, or check that your information with \\[Platform\\_Name\\] is up to date.’\n\n![Stripe Express account Verify your identity dialog](https://b.stripecdn.com/docs-statics-srv/assets/tax-verify-identity.7f5df7551dfbb1801cdde12ed9c0dd36.png)\n\nThe Stripe Express account **Verify your identity** dialog.\n\n[](#tax-forms-page)\n\nAfter the connected account’s details are verified, they’re taken to the **Tax forms** page in Stripe Express where they can confirm their tax information they have on file for their account and agree to paperless delivery of their 1099 tax form.\n\n![The Tax forms page of the Express Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-page.0430a010ebfa14b6c8914a90376e7a49.png)\n\nThe Tax forms page of the Express Dashboard.\n\nThey’re prompted to confirm tax information but can choose to skip temporarily if they want to leave their information as is. Your accounts could get blocked if you’ve applied 1099 capabilities and the connected account updates their value to a name and TIN combination that doesn’t match against IRS records. If the connected account is verified and then changes their name or TIN, they’re asked to re-sign a new Stripe Terms Of Service Agreement. Similarly, if Stripe is unable to complete KYC requirements on them based on the information they provided, their account payouts are blocked until they log back in to Stripe Express and correct their information.\n\n![The dialog displayed to connected accounts to confirm their information.](https://b.stripecdn.com/docs-statics-srv/assets/tax-confirm-information.1801e85e31759f80b4e3ffd7fe974778.png)\n\nThe dialog displayed to users to confirm their information.\n\n[](#for-delivery)\n\nAfter the tax information is confirmed, Stripe prompts the connected account to agree to paperless delivery.\n\n![The dialog to consent to paperless delivery of tax forms](https://b.stripecdn.com/docs-statics-srv/assets/tax-consent-edelivery.603807401bba412dd0c3bc383d5abd52.png)\n\nThe dialog to consent to paperless delivery of tax forms.\n\nIf you’ve enabled optional postal delivery, after agreeing to paperless delivery consent, your connected accounts can choose to request a paper copy in addition to the e-delivery of the tax form.\n\n![The dialog to optionally request a paper copy of tax forms](https://b.stripecdn.com/docs-statics-srv/assets/stripe-express-tax-postal-delivery-option.9fe97c25a15822fbe4713b2c281ec96a.png)\n\n[](#email-from-stripe)\n\nAfter filing 1099 tax forms in your Stripe dashboard, your connected account receives an email from Stripe to view their tax form electronically. The subject line reads ‘Your \\[Platform\\_Name\\] 1099 tax form is ready.’ The following image displays the content of the email.\n\n![The 1099 electronic delivery email to users](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-delivery-stripe-as-sender-2023-updated-threshold.408645c565172d0dc413e8a3cc1a860d.jpeg)\n\n[](#display-tax-forms-page)\n\nAfter a connected account agrees to the e-delivery terms, they can download their form when your platform makes it available.\n\n![Stripe Express dashboard where payees can download their 1099 tax forms](https://b.stripecdn.com/docs-statics-srv/assets/stripe-express-tax-dashboard.78c8723a939c34a01e17ae807ffa31d2.png)\n\nThe dashboard where payees can download their 1099 tax forms.\n\nMost connected account owners are prompted to enter the last four digits of the TIN on their 1099 tax form before being able to download a copy of the form. Downloads aren’t available for 24 hours after an update has been made to any personal identity information including name, address, business type, or TIN.\n\n![The dialog to verify your SSN information to securely access tax forms.](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-secure-access.5d000d31ccbd402d50cb3a2731dce4f2.png)\n\n#### Caution\n\nConnected accounts that do not agree to paperless delivery are unable to download their 1099 tax forms and resolve the call to action in their dashboard. Turn on paper delivery in your Stripe [Tax form settings](https://dashboard.stripe.com/settings/connect/tax_forms) to make sure that recipients who don’t consent to e-delivery still receive paper forms.",
    "title": "1099 Tax Support product walkthrough | Stripe Documentation",
    "description": "Learn about how to manage 1099 Tax forms for connected accounts using Express.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/payment-methods",
    "markdown": "# Adding payment method capabilities | Stripe DocumentationThe Stripe Docs logo\n\nFrom the connected accounts [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods), navigate to the payment method you’re interested in.\n\nUse the arrow on the left side of the payment method to expand the details of the payment method. Within this view, you can see the eligibility of each of your connected accounts to use the payment method.\n\n#### Note\n\nThis view includes connected accounts that:\n\n*   Have processed a payment in the last 90 days and are older than 30 days.\n*   Are less than 30 days old, regardless of their payment activity.\n\n![Eligibility details for a payment method](https://b.stripecdn.com/docs-statics-srv/assets/eligibility-results.088e99a8299c21267b07a7b1ba1bd7d6.png)\n\nEligibility details for a payment method\n\nEach connected account appears in one of four different categories:\n\n| Category | Description |\n| --- | --- |\n| Enabled | These businesses already have the capability for this payment method set to `active`. |\n| Eligible | These businesses have met all compliance requirements and passed any relevant MCC checks to have the payment method capability set to `active` when requested. |\n| Missing Info | These businesses are missing some compliance plan information needed to add the payment method. |\n| Ineligible | These businesses aren’t eligible for the payment method, either due to country location or MCC. |\n\nCountries you have connected accounts in that aren’t supported by the payment method appear grayed out.",
    "title": "Adding payment method capabilities | Stripe Documentation",
    "description": "Onboard your connected accounts to accept different payment methods.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_intents/confirm",
    "markdown": "# Confirm a PaymentIntent | Stripe API Reference\n\nConfirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment. If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the `requires_action` status and suggest additional actions via `next_action`. If payment fails, the PaymentIntent transitions to the `requires_payment_method` status or the `canceled` status if the confirmation limit is reached. If payment succeeds, the PaymentIntent will transition to the `succeeded` status (or `requires_capture`, if `capture_method` is set to `manual`). If the `confirmation_method` is `automatic`, payment may be attempted using our [client SDKs](https://docs.stripe.com/stripe-js/reference#stripe-handle-card-payment) and the PaymentIntent’s [client\\_secret](#payment_intent_object-client_secret). After `next_action`s are handled by the client, no additional confirmation is required to complete the payment. If the `confirmation_method` is `manual`, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the `requires_confirmation` state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt.\n\n### Parameters\n\n*   ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://docs.stripe.com/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.\n    \n*   Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this PaymentIntent.\n    \n\n### More parameters\n\n*   #### \n    \n    capture\\_methodenumsecret key only\n    \n\n*   #### \n    \n    error\\_on\\_requires\\_actionboolean\n    \n*   #### \n    \n    mandatestringsecret key only\n    \n\n*   #### \n    \n    off\\_sessionboolean | stringsecret key only\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobjectsecret key only\n    \n*   #### \n    \n    payment\\_method\\_typesarray of stringssecret key only\n    \n*   #### \n    \n    radar\\_optionsobjectsecret key only\n    \n\n### Returns\n\nReturns the resulting PaymentIntent after all possible transitions are applied.\n\nPOST /v1/payment\\_intents/:id/confirm\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtweELkdIwHu7ix0Dt0gF2H/confirm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_method=pm_card_visa \\  --data-urlencode return_url=\"https://www.example.com\"\n```\n\n```\n{  \"id\": \"pi_3MtweELkdIwHu7ix0Dt0gF2H\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 2000,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtweELkdIwHu7ix0Dt0gF2H_secret_ALlpPMIZse0ac8YzPxkMkFgGC\",  \"confirmation_method\": \"automatic\",  \"created\": 1680802258,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_3MtweELkdIwHu7ix05lnLAFd\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1MtweELkdIwHu7ixxrsejPtG\",  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Increment an authorization](https://docs.stripe.com/api/payment_intents/increment_authorization)\n\nPerform an incremental authorization on an eligible [PaymentIntent](https://docs.stripe.com/api/payment_intents/object). To be eligible, the PaymentIntent’s status must be `requires_capture` and [incremental\\_authorization\\_supported](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) must be `true`.\n\nIncremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher `amount` provided. Similar to the initial authorization, incremental authorizations can be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.\n\nIf the incremental authorization succeeds, the PaymentIntent object returns with the updated [amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount). If the incremental authorization fails, a [card\\_declined](https://docs.stripe.com/error-codes#card-declined) error returns, and no other fields on the PaymentIntent or Charge update. The PaymentIntent object remains capturable for the previously authorized amount.\n\nEach PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. After it’s captured, a PaymentIntent can no longer be incremented.\n\nLearn more about [incremental authorizations](https://docs.stripe.com/terminal/features/incremental-authorizations).\n\n### Parameters\n\n*   The updated total amount that you intend to collect from the cardholder. This amount must be greater than the currently authorized amount.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    For card charges, use [statement\\_descriptor\\_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers’ statements. It must contain at least one letter and be 1–22 characters long.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object with the updated amount if the incremental authorization succeeds. Returns an error if the incremental authorization failed or the PaymentIntent isn’t eligible for incremental authorizations.\n\nPOST /v1/payment\\_intents/:id/increment\\_authorization\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_1DtBRR2eZvKYlo2CmCVxxvd7/increment_authorization \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=2099\n```\n\n```\n{  \"id\": \"pi_1DtBRR2eZvKYlo2CmCVxxvd7\",  \"object\": \"payment_intent\",  \"amount\": 2099,  \"amount_capturable\": 2099,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"manual\",  \"client_secret\": \"pi_1DtBRR2eZvKYlo2CmCVxxvd7_secret_cWsUkvyTOjhLKh5Wxu61nYc0i\",  \"confirmation_method\": \"automatic\",  \"created\": 1680196960,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_3MrPBM2eZvKYlo2C1CEBUD4A\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1MrPBL2eZvKYlo2CaNa8L11Z\",  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_capture\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Reconcile a customer\\_balance PaymentIntent](https://docs.stripe.com/api/payment_intents/apply_customer_balance)\n\nManually reconcile the remaining amount for a `customer_balance` PaymentIntent.\n\n### Parameters\n\n*   Amount that you intend to apply to this PaymentIntent from the customer’s cash balance.\n    \n    A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (for example, 100 cents to charge 1 USD or 100 to charge 100 JPY, a zero-decimal currency).\n    \n    The maximum amount is the amount of the PaymentIntent.\n    \n    When you omit the amount, it defaults to the remaining amount requested on the PaymentIntent.\n    \n\n### Returns\n\nReturns a PaymentIntent object.\n\nPOST /v1/payment\\_intents/:id/apply\\_customer\\_balance\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_intents/pi_1GszwY2eZvKYlo2CohCEmT6b/apply_customer_balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_1GszwY2eZvKYlo2CohCEmT6b\",  \"object\": \"payment_intent\",  \"amount\": 1000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_1GszwY2eZvKYlo2CohCEmT6b_secret_1jQJzqkrQvx4BpwI5hn6WSEO5\",  \"confirmation_method\": \"automatic\",  \"created\": 1591918582,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"Created by stripe.com/docs demo\",  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Search PaymentIntents](https://docs.stripe.com/api/payment_intents/search)\n\nSearch for PaymentIntents you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` PaymentIntents. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\nGET /v1/payment\\_intents/search\n\n```\ncurl -G https://api.stripe.com/v1/payment_intents/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d query=\"amount>1000\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/payment_intents/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",      \"object\": \"payment_intent\",      \"amount\": 2000,      \"amount_capturable\": 0,      \"amount_details\": {        \"tip\": {}      },      \"amount_received\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"automatic_payment_methods\": {        \"enabled\": true      },      \"canceled_at\": null,      \"cancellation_reason\": null,      \"capture_method\": \"automatic\",      \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",      \"confirmation_method\": \"automatic\",      \"created\": 1680800504,      \"currency\": \"usd\",      \"customer\": null,      \"description\": null,      \"invoice\": null,      \"last_payment_error\": null,      \"latest_charge\": null,      \"livemode\": false,      \"metadata\": {},      \"next_action\": null,      \"on_behalf_of\": null,      \"payment_method\": null,      \"payment_method_options\": {        \"card\": {          \"installments\": null,          \"mandate_options\": null,          \"network\": null,          \"request_three_d_secure\": \"automatic\"        },        \"link\": {          \"persistent_token\": null        }      },      \"payment_method_types\": [        \"card\",        \"link\"      ],      \"processing\": null,      \"receipt_email\": null,      \"review\": null,      \"setup_future_usage\": null,      \"shipping\": null,      \"source\": null,      \"statement_descriptor\": null,      \"statement_descriptor_suffix\": null,      \"status\": \"requires_payment_method\",      \"transfer_data\": null,      \"transfer_group\": null    }    {...}    {...}  ],}\n```\n\n## [Verify microdeposits on a PaymentIntent](https://docs.stripe.com/api/payment_intents/verify_microdeposits)\n\nVerifies microdeposits on a PaymentIntent object.\n\n### Parameters\n\n*   Two positive integers, in _cents_, equal to the values of the microdeposits sent to the bank account.\n    \n*   A six-character code starting with SM present in the microdeposit sent to the bank account.\n    \n\n### Returns\n\nReturns a PaymentIntent object.\n\nPOST /v1/payment\\_intents/:id/verify\\_microdeposits\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_1DtBRR2eZvKYlo2CmCVxxvd7/verify_microdeposits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"amounts[]\"=32 \\  -d \"amounts[]\"=45\n```\n\n```\n{  \"id\": \"pi_1DtBRR2eZvKYlo2CmCVxxvd7\",  \"object\": \"payment_intent\",  \"amount\": 1099,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_1DtBRR2eZvKYlo2CmCVxxvd7_secret_l80vlOGz9kZQwnzocExJQUsJx\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800210,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1Mtw7C2eZvKYlo2CPsW0F8g0\",  \"payment_method_options\": {    \"acss_debit\": {      \"mandate_options\": {        \"interval_description\": \"First day of every month\",        \"payment_schedule\": \"interval\",        \"transaction_type\": \"personal\"      },      \"verification_method\": \"automatic\"    }  },  \"payment_method_types\": [    \"acss_debit\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```",
    "title": "Confirm a PaymentIntent | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/connect-tax-id-onboarding",
    "markdown": "# Tax ID Additional Verification | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax ID Additional Verification to collect and verify the Tax ID of your users.\n\nConnect [dynamically requires onboarding information](https://docs.stripe.com/connect/required-verification-information) to keep your [accounts](https://docs.stripe.com/connect/accounts) compliant, but you can influence what information Connect requires in your platform by adding additional verifications (AVs) to accounts. Requesting an additional verification requires your connected accounts to provide certain information, which is then verified.\n\nPlatforms might be subject to IRS fines up to 290 USD per submission if they file 1099s with incorrect information (for example, name or tax ID mismatches). The Tax ID AV provides a way for platforms to collect certified tax IDs throughout the year directly from your connected accounts before issuing 1099s, to make sure the appropriate 1099 tax forms use the correct Taxpayer Identification Number (TIN).\n\nThe Tax ID Additional Verification performs a name and TIN check either at the personal level or business level based on [required verification information for taxes](https://docs.stripe.com/connect/required-verification-information-taxes).\n\n## How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Tax ID Additional Verification allows you to enforce the mandatory collection and verification of tax ID requirements for a connected account. Platforms add requirements for Tax ID collection/verification for a connected account using the [Accounts API](https://docs.stripe.com/api/connected_accounts).\n\nFor Custom Connect platforms, after you add the requirements on a connected account, your platform can [Create an account link](https://docs.stripe.com/api/account_links/create) to redirect the user from your platform to [Connect Onboarding](https://docs.stripe.com/connect/express-accounts). Alternatively, you can collect the requirements directly from your platform, and then send it to Stripe using [Update an account](https://docs.stripe.com/api/accounts/update). For Express Connect platforms, Stripe sends the Express connected accounts an email to complete the missing or invalid requirements using the [Express Dashboard](https://docs.stripe.com/connect/express-dashboard).\n\nAfter Stripe receives the user’s TIN, we automatically verify it by comparing it with the IRS database. If the IRS database confirms the TIN is a match, the requirements are considered satisfied. If the IRS database doesn’t return a TIN match with the connected account’s tax details, then enforcement limits are triggered.\n\nPlatforms have full customization in setting **enforcement limits** to determine when Connected Accounts are required to provide a verified TIN. You can set the following enforcement limits to impose disablement of payouts or payouts or payments if a verified TIN isn’t on file:\n\n*   **Upfront**: Block payouts or payments if a verified TIN isn’t on file immediately.\n*   **Volume**: Block payouts or payments if a verified TIN isn’t on file after processing _x_ USD.\n*   **Time**: Block payouts or payments if a verified TIN isn’t on file after _x_ days.\n*   **Combo**: Block payouts or payments if a verified TIN isn’t on file after _x_ days or after processing _x_ USD.\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCurrently, access to Stripe’s Tax ID Additional Verification is limited to US beta users. To request access to the beta, reach out to your account team or [contact Stripe](https://stripe.com/contact/sales) for more information.",
    "title": "Tax ID Additional Verification | Stripe Documentation",
    "description": "Learn how to use Stripe Tax ID Additional Verification to collect and verify the Tax ID of your users.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/capabilities/list?lang=curl",
    "markdown": "# List all account capabilities | Stripe API Reference\n\nReturns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary with a `data` property that contains an array of the capabilities of this account. Each entry in the array is a separate capability object.\n\nGET /v1/accounts/:id/capabilities\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/capabilities\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_payments\",      \"object\": \"capability\",      \"account\": \"acct_1032D82eZvKYlo2C\",      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"requested\": true,      \"requested_at\": 1693951912,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"status\": \"inactive\"    }  ]}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all account capabilities | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/update-verified-information",
    "markdown": "# Update verified user information | Stripe DocumentationThe Stripe Docs logo\n\n## Learn what verified information you can update for your connected accounts.\n\nFor connected accounts where your platform collects updated information for due or changed requirements, you collect the [required information](https://docs.stripe.com/connect/required-verification-information) for each account during onboarding, and Stripe verifies it. If you update verified user information, Stripe must review it. If Stripe can’t verify it, you have a grace period of 14 days to resolve any issues and complete verification.\n\nDuring this grace period, the account functionality remains the same. For example, if charges or [payouts](https://docs.stripe.com/payouts \"payout\") were previously enabled, they’ll continue to be enabled until the grace period ends. The value of [requirements.current\\_deadline](https://docs.stripe.com/api/capabilities/object#capability_object-requirements-current_deadline) determines the end of the grace period and isn’t extended if you update additional information. Resolve all requirements by the end of the grace period to prevent charges or payouts from being disabled.\n\nThese fields can be updated, with a grace period, after they’ve been verified:\n\n*   Business name\n*   Business type\n*   First name\n*   Last name\n*   Date of birth\n*   Business tax ID\n*   Tax ID registrar\n*   Personal ID number\n\nThese fields can’t be updated after a company has been verified:\n\n*   Verification documents\n\n## Change the account representative![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must specify a representative to activate the account, agree to Stripe’s terms, and act as primary contact for the account. You can change the account representative for any reason (for example, the designated representative left the company or they no longer serve as owner or executive).\n\nDo the following to change the account representative:\n\n*   If necessary, add a [Person](https://docs.stripe.com/api/persons/object#person_object-verification) object for the new representative. Stripe recommends that you verify the `Person` before proceeding, whether you designate an existing `Person` as the new representative or add a new `Person`.\n*   Update the [Person](https://docs.stripe.com/api/persons/object#person_object-verification) object to remove them as the current representative:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n`/persons/  {{PERSON_ID}}   \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"relationship[representative]\"=false`\n\n*   Update the [Person](https://docs.stripe.com/api/persons/object#person_object-verification) object to nominate the new representative:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n`/persons/  {{PERSON_ID}}   \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"relationship[representative]\"=true`\n\n*   Monitor the `requirements.currently_due` and `requirements.past_due` arrays to make sure that verification of the new representative is complete. Even if the new representative `Person` is already verified, there might be additional requirements for the representative role.\n\nAfter you set a representative to `false`, Stripe allows a grace period of 14 days for you to set the new representative to `true` and to complete verification.\n\n## Update the account tax identification number![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nConnected account owners in Brazil can’t update Tax IDs (personal\\* or business) after verification.\n\nWhen your connected account updates its verified Tax ID (personal\\* or business), the account must agree again to the Stripe Services Agreement (SSA). Doing so accepts the transfer of ownership of their account and its balances from the entity assigned the initial Tax ID to the one assigned the new Tax ID. The information below describes the process for collecting this requirement when changing an account’s verified Tax ID.\n\n*   This applies when you update or resubmit a verified representative’s existing ID number and ssn\\_last\\_4.\n\n### Update Tax ID with a grace period![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter the account updates its Tax ID, the account enters a 14-day grace period during which it must agree once again to the Stripe Services Agreement (SSA) and make sure it’s compliant with all requirements. If the connected account can’t meet its requirements after 14 days, then charges and payouts for the account are paused\n\nYou have a few ways to collect this requirement:\n\n*   If you use Connect Onboarding, you can provide a link to Stripe’s onboarding flow. From there, the account can fulfill any necessary requirements.\n    \n    *   For accounts with access to [the Stripe Express Dashboard](https://docs.stripe.com/connect/express-dashboard), you can create a single-use Dashboard login link that allows the account to edit their tax identification number and agree once again to the Stripe Services Agreement (SSA).\n    *   For accounts with no Stripe-hosted Dashboard access, you can provide a link to [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding#account_update), where your account can edit their tax identification number and agree once again to the Stripe Services Agreement (SSA).\n*   If you onboard your connected accounts through your platform rather than using Connect Onboarding, you must collect this requirement by following the instructions in the following section.\n    \n\n### Collect agreement of the Stripe Services Agreement once again![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you allow accounts with no Stripe-hosted Dashboard access, including Custom accounts, to update their verified Tax ID through your platform, you must add a section to make it clear that the account agrees once again to the Stripe Services Agreement (SSA). You must also make it clear that the account owner associated with the original TIN agrees to transfer ownership of the account and its balances to the owner associated with the updated TIN.\n\nOne way to achieve this is by including a clear reference and link to the agreement language below, then documenting that the account agrees using the [update account](https://docs.stripe.com/api/accounts/update) API:\n\n_If you own the Stripe account associated with the original TIN, you agree to transfer ownership of the account and balances to the updated account owner (associated with the updated TIN), and that the updated owner has agreed to assume your agreements with Stripe. If you are the updated owner, you acknowledge that the ownership of this Stripe account has been transferred to you and that you assume the agreements that the prior account owner has with Stripe._\n\nUse the [update account](https://docs.stripe.com/api/accounts/update) API to collect the requirements, providing the user’s IP address and the acceptance date as a timestamp. The acceptance date of the signature (`tos_acceptance[date]`) must be the time that your connected account requested the update to the Tax ID number. It can also be any time after they requested the update.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"tos_acceptance[date]\"=1609798905 \\  -d \"tos_acceptance[ip]\"=\"8.8.8.8\"`",
    "title": "Update verified user information | Stripe Documentation",
    "description": "Learn what verified information you can update for your connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/deliver-tax-forms",
    "markdown": "# Deliver your 1099 tax forms\n\n## Learn about 1099 form delivery requirements and how to deliver your tax forms, including e-delivery and postal delivery.\n\n#### Getting your 1099 Forms\n\nIf you work for a platform that pays you via Stripe and want to learn about your 1099 forms and how to get them, see [1099 tax forms](https://support.stripe.com/express/topics/1099-tax-forms) on the Stripe Support site.\n\nRevenue authorities (such as the IRS) typically require that you deliver a copy of the tax form to the payee, in addition to [filing the tax form](https://docs.stripe.com/connect/file-tax-forms). Per IRS recommendations, the tax form you deliver is a “Copy B” with the payee taxpayer identification number (TIN) redacted to the last four digits.\n\nThe IRS requires you to provide tax forms to payees using postal mail unless you’ve obtained consent from the payee to only deliver the forms electronically. If you don’t obtain consent for e-delivery, you can still e-deliver as long as you also mail the copy of the tax form to the payee. For more information, see the IRS [Requirements for Furnishing Information Returns Electronically](https://www.irs.gov/government-entities/federal-state-local-governments/requirements-for-furnishing-form-1099-g-electronically).\n\nYou must deliver tax forms by the first business day on or after January 31st. For postal delivery, tax forms must be postmarked by this date.\n\nTax forms are always delivered to payees the first time they’re filed with a revenue authority. This includes e-filing with the IRS as well as states. If a tax form is both e-filed with the IRS and to a state, it’s only delivered on the first of these events.\n\n## Delivery options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are three options for delivering tax forms:\n\n*   **E-delivery with the Stripe Express Dashboard:** Use the Stripe Express Dashboard to collect e-delivery consent and deliver tax forms.\n*   **E-delivery with Tax Forms API** Beta: Use the Tax Forms API to directly control and manage the entire e-delivery flow.\n*   **Postal delivery:** Use Stripe to send tax forms using postal delivery.\n\n## E-delivery with the Stripe Express Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour connected accounts are eligible to access their e-delivered tax forms through the Express Dashboard if your connected accounts already have access to the Express Dashboard or if you own the full onboarding and management process for your connected accounts. Even if your platform is eligible, some of your connected accounts might not be eligible. Connected accounts that aren’t eligible for hosted e-delivery include:\n\n*   Multi-user accounts\n*   Vendors without a stripe account\n*   Users who have multiple accounts on your platform with the same email address To view a full list of the types of connected accounts that aren’t eligible for e-delivery through the Express Dashboard, see [Which accounts get access to e-delivery](https://docs.stripe.com/connect/express-dashboard-taxes#which-accounts-get-access-to-e-delivery).\n\nConnected account users must provide e-delivery consent to view and download their forms online. The e-delivery consent is applicable to all future electronic deliveries. Enable postal delivery to make sure that eligible accounts receive their tax forms. Consult your tax advisors if you want to completely opt out of paper delivery.\n\n### Prerequisites for using tax form e-delivery ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMake sure that the email address is available and current for the connected accounts on your platform where you own the user experience. You can confirm that an email address for an account is available. Use the following command to view the email address for a connected account:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\   --data-urlencode email=\"jennyrosen@gmail.com\"`\n\n### Turn on e-delivery ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo turn on e-delivery for your account, open the [Tax forms settings](https://dashboard.stripe.com/settings/connect/tax_forms) page in the Dashboard, then choose **Optimize for e-delivery** in the **Delivery settings** section.\n\nAdditionally, you can select the **Have Stripe collect tax information automatically** option to have Stripe email your connected accounts and ask them to update their tax information and delivery preferences. Learn more about [e-delivery for connected accounts](https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough).\n\n### File and deliver 1099 forms ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Express Dashboard is where eligible Connect platforms deliver 1099s to their users. Toward the end of January, when you click file and deliver, your finalized tax forms are automatically sent out to your connected accounts. They’ll receive another email letting them know their tax forms are ready and get a link to download the forms directly from the **Tax forms** tab in the Express App. If a connected account user later consents to e-delivery, it applies only to future years because paper forms were already sent.\n\n![Connect tac forms page showing forms that are ready to download.](https://b.stripecdn.com/docs-statics-srv/assets/connect-tax-form-ready-download.45cd97db253255d3fd8878606e74050c.png)\n\n## E-delivery with Tax Forms API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Beta\n\nThe Tax Forms API is available in limited beta. To request access to the beta, reach out to your account team or contact Stripe for more information. Access is not guaranteed. At this time, we are unable to support additional beta requests for tax year 2023.\n\nYou can use the Tax Forms API to deliver forms to your users directly. With the API, you build and brand the e-delivery flow in your platform and Stripe doesn’t interact with your users directly. You also need to manage the collection of e-delivery consent, how your users access the e-delivered forms, and any user identity changes or corrections that go through your platform.\n\nWe’ll use a fictitious account StripeDelivers, a delivery platform to walk through the API.\n\n### Getting started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe recommends disabling e-delivery and outreach from Stripe — otherwise your users will also have their e-delivered forms accessible through the Stripe Express Dashboard.\n\n### Collect paperless delivery consent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPer [IRS requirements](https://www.irs.gov/government-entities/federal-state-local-governments/requirements-for-furnishing-form-1099-g-electronically), a StripeDelivers account holder who wants to receive tax correspondence electronically instead of by mail must opt out of receiving postal mail. When an account holder provides or revokes consent, the app sends a `POST` request to update the connected account’s tax form settings. If an account holder provides consent, Stripe doesn’t mail a copy of their 1099-K form unless you require postal mailing for all accounts in your [delivery settings](https://docs.stripe.com/connect/tax-form-settings#delivery-method-settings).\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"settings[tax_forms][consented_to_paperless_delivery]\"=true`\n\n### Retrieving tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripeDelivers wants to create a view of a connected account’s filed 1099-K tax forms in their platform’s app, to satisfy the platform’s IRS tax reporting requirement and inform the account holder of their taxable income.\n\nThe developer needs to upload each 1099-K to the platform’s servers to make them available to the view. The app sends a `GET` request for a list of tax forms from Stripe’s Tax Forms API on each user request.\n\n`curl -G https://api.stripe.com/v1/tax/forms \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; retrieve_tax_forms_beta=v1;\" \\   -d type=us_1099_k \\  -d \"payee[account]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nWhen a user requests a PDF version of the form, the app sends a `GET` request to Stripe’s Files API, caches it, and returns it in the response.\n\n`curl https://files.stripe.com/v1/tax/forms/taxform_123/pdf \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Version: 2022-11-15; retrieve_tax_forms_beta=v1;\" \\   -o \"/tmp/tmp.pdf\"`\n\n### Notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nTo receive `tax.form.updated` webhooks, you need to create a webhook endpoint with the Tax Forms API beta `Stripe-Version` header.\n\nStripeDelivers wants to notify an account by email when a form is accepted by the IRS. When StripeDelivers receives a `tax.form.updated` webhook and determines that the form has moved to `accepted`, it sends an email to the user with a download link.\n\n## Postal delivery ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you want to mail your tax forms, you must file by January 23rd, 2024 to guarantee the tax forms are postmarked by January 31st, 2024. You must also provide a valid US return address to comply with USPS guidelines.\n\nYou can use postal delivery for any deliverable address, including PO boxes. For compliance reasons, Stripe doesn’t allow you to set a PO box as the address for a connected account; however, you can use [Tax form editor](https://docs.stripe.com/connect/modify-tax-forms?method=dashboard) or [CSV import](https://docs.stripe.com/connect/modify-tax-forms?method=csv#import-tax-forms) to modify the address on the tax form.\n\nYou may have connected accounts that are only eligible for state filing and not with the IRS. When you use Stripe to file your forms with the IRS and states, Forms 1099 for the state are mailed to these connected accounts after you finish filing.\n\nIf you use CSV import to override the default delivery method, this also affects the state mailing. For example, if you set **postal\\_delivery** to `false`, Stripe doesn’t mail the 1099 form to the connected account for state reporting.",
    "title": "Deliver your 1099 tax forms | Stripe Documentation",
    "description": "Learn about 1099 form delivery requirements and how to deliver your tax forms, including e-delivery and postal delivery.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/handling-api-verification?country=CA&document-type=entity",
    "markdown": "# Handle verification with the API\n\n## Learn how Connect platforms can use webhooks and the API to handle verification of connected accounts.\n\nPlatforms with accounts created using the API can provide Stripe with necessary information about their users for [Know Your Customer](https://support.stripe.com/questions/know-your-customer) (KYC) purposes. Platforms can use [Connect](https://docs.stripe.com/connect \"Connect\") Onboarding to collect KYC information, or use the [Accounts](https://docs.stripe.com/api/accounts) and [Persons](https://docs.stripe.com/api/persons) APIs to provide Stripe with required information. We’ll then perform verification, asking for more information when needed.\n\nThe rest of this page goes through how platforms:\n\n*   Discover verification requirements for a connected account\n*   Provide the necessary information to Stripe\n\n#### Note\n\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\n\n## Verification process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore enabling charges and [payouts](https://docs.stripe.com/payouts \"payout\") for a connected account, Stripe needs certain information that varies based on:\n\n*   The origin country of the connected accounts\n*   The [service agreement type](https://docs.stripe.com/connect/service-agreement-types) applicable to the connected accounts\n*   The [capabilities](https://docs.stripe.com/connect/account-capabilities) requested for the connected accounts\n*   The [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) (for example, individual or company) and [company.structure](https://docs.stripe.com/api/accounts/object#account_object-company-structure) (for example, public corporation or private partnership)\n\nPlatforms need to choose the proper [onboarding flow](https://docs.stripe.com/connect/identity-verification#onboarding-flows) for their business and users to meet the KYC requirements. Broadly speaking, this means providing all the requisite information upfront or incrementally. Either way, set up your integration to watch for and respond to requests from Stripe.\n\n1.  Establish a [Connect webhook](https://docs.stripe.com/connect/webhooks) URL in your [webhook settings](https://dashboard.stripe.com/account/webhooks) to watch for activity, especially events of the `account.updated` type. When using the [Persons API](https://docs.stripe.com/api/persons), you should also watch for `person.updated` events.\n2.  Immediately after creating an account, check the `Account` object’s [requirements.currently\\_due](https://docs.stripe.com/api/accounts/object#account_object-requirements-currently_due) attribute for any additional requirements. Obtain any required information from the user and update the connected account.\n3.  Continue watching for `account.updated` event notifications to see if the `requirements` hash changes, and reach out to your user for additional information as needed.\n\nWhen you provide additional information, you don’t need to resubmit any previously verified details. For example, if the `dob` is already verified, you don’t need to provide it again in subsequent updates.\n\n#### Caution\n\nWhen `requirements.currently_due` isn’t empty, additional information is required. Connected accounts might be blocked from creating charges, receiving payouts, or performing certain tasks if you don’t provide this information in a timely manner.\n\n### Change information after verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter an individual or company is verified, you can [change some of their information](https://docs.stripe.com/connect/update-verified-information), with limitations. See the [Update Account](https://docs.stripe.com/api/accounts/update) API for limitations based on the configuration of the connected account. [Contact support](https://support.stripe.com/contact) to make changes outside of these limitations.\n\n## Determine if verification is needed ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you receive an `account.updated` event to your webhook or [fetch an account](https://docs.stripe.com/api#retrieve_account) with the API, you receive an [Account](https://docs.stripe.com/api/accounts/object) object. The `Account` object’s `charges_enabled` and `payouts_enabled` attributes indicate whether the account can create charges and accept payouts.\n\nThe `Account` object has a `requirements` hash, representing the requirements needed to verify the account.\n\nThe `requirements` hash has the following arrays:\n\n*   `eventually_due`: Fields that you might need to collect, assuming all thresholds are reached. As they become required, they appear in `currently_due` and set the `current_deadline`. All required information starts in this array.\n*   `currently_due`: Fields that you must collect by the `current_deadline` for the connected account to remain enabled. `currently_due` is a subset of `eventually_due`.\n*   `past_due`: Fields you didn’t submit by the deadline, which disabled the connected account. `past_due` is a subset of `currently_due`.\n*   `errors`: The list of reasons why a particular field in `currently_due` or `past_due` must be collected again because validation or verification failed.\n*   `disabled_reason`: Describes why the connected account isn’t enabled.\n*   `current_deadline`: Date by which the fields in `currently_due` must be collected to keep the account enabled. The account may be disabled sooner if the next threshold is reached before the `currently_due` fields are collected.\n*   `pending_verification`: Fields that might become required depending on the results of verification or review. It’s an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending.\n\nThe example below shows what the `requirements` hash might look like for an account that has some information that’s `currently_due`, some information that’s `eventually_due`, and some information that’s raising verification `errors`.\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"requirements\": {       \"disabled_reason\": null,       \"current_deadline\": 1529085600,       \"past_due\": [],       \"currently_due\": [           \"company.tax_id\",           \"company.verification.document\",           \"tos_acceptance.date\",           \"tos_acceptance.ip\"       ],       \"eventually_due\": [           \"company.address.city\",           \"company.address.line1\",           \"company.address.postal_code\",           \"company.address.state\",           \"company.tax_id\",           \"company.verification.document\",           \"external_account\",           \"tos_acceptance.date\",           \"tos_acceptance.ip\"       ],       \"errors\": [           {             \"requirement\": \"company.verification.document\",             \"reason\": \"The company name on the account couldn't be verified. Either update your business name or upload a document containing the business name.\",             \"code\": \"failed_name_match\"           },       ]   },   ... }`\n\nIf `requirements.currently_due` contains entries, check `requirements.current_deadline`. The `current_deadline` is a Unix timestamp identifying when information is needed. Usually, if Stripe doesn’t receive the information by the `current_deadline`, payouts on the account are disabled. However, other consequences might apply in some situations. For example, if payouts are already disabled and the account is unresponsive to our inquiries, Stripe might also disable the ability to process charges.\n\nSeparately, the [requirements.disabled\\_reason](https://docs.stripe.com/api/accounts/object#account_object-requirements-disabled_reason) property can have a value. The value is a string describing the reason why this account is unable to make payouts or charges. In some instances, platforms and connected accounts can submit a form to resolve or appeal the reason.\n\n*   Connected accounts with access to the full Stripe Dashboard and Standard accounts can access additional information (if available) in the Dashboard.\n*   Platforms in any Connect configuration can navigate to [Accounts to review](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) to understand an account’s `disabled_reason`. You might be able to provide additional information on behalf of your connected accounts. If the disabled reason is associated with an appeal, you can generate a link to a form for the account to resolve the appeal.\n\n| Reason | Meaning |\n| --- | --- |\n| `action_required.requested_capabilities` | You need to request capabilities for the connected account. For details, see [Request and unrequest capabilities](https://docs.stripe.com/connect/account-capabilities#requesting-unrequesting). |\n| `listed` | Account might be on a prohibited persons or companies list (Stripe investigates and either rejects or reinstates the account accordingly). |\n| `rejected.fraud` | Account is rejected due to suspected fraud or illegal activity. |\n| `rejected.incomplete_verification` | The account is rejected from incomplete verification requirements within the required threshold. |\n| `rejected.listed` | Account is rejected because it’s on a third-party prohibited persons or companies list (such as financial services provider or government). |\n| `rejected.other` | Account is rejected for another reason. |\n| `rejected.terms_of_service` | Account is rejected due to suspected terms of service violations. |\n| `requirements.past_due` | Additional verification information is required to enable capabilities on this account. |\n| `requirements.pending_verification` | Stripe is currently verifying information on the connected account. No action is required. Inspect the [requirements.pending\\_verification](https://docs.stripe.com/api/accounts/object#account_object-requirements-pending_verification) array to see the information being verified. |\n| `under_review` | The account is under review by Stripe. |\n\n## Validation and verification errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Account](https://docs.stripe.com/api/accounts/object) object includes a [requirements.errors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors) array that explains why the validation or verification requirements haven’t been met, which are needed to enable your account and capabilities. The `errors` array has the following attributes:\n\n*   `requirement`: Specifies which information from the `currently_due` array is needed.\n*   `code`: Indicates the type of error that occurred. See the [API reference](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors-code) for all possible error codes.\n*   `reason`: Explains why the error occurred and how to resolve the error.\n\nBelow is an example that shows what the `errors` array might look like for an account with requirements that are `currently_due`. The example shows the reason why the submitted information can’t be used to enable the account, and how to resolve the error. If verification or validation is unsuccessful, requirements can reappear in `currently_due` with error information. Set a [Connect webhook](https://docs.stripe.com/connect/webhooks) to receive the `account.updated` event to receive these updates.\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"requirements\": {       \"current_deadline\": 1234567800,       \"currently_due\": [           \"company.address.line1\",           \"{{PERSON_ID}}.verification.document\",       ],       \"errors\": [           {             \"requirement\": \"company.address.line1\",             \"code\": \"invalid_street_address\",             \"reason\": \"The provided street address cannot be found. Please verify the street name and number are correct in \\\"10 Downing Street\\\"\",           },           {             \"requirement\": \"{{PERSON_ID}}.verification.document\",             \"code\": \"verification_document_failed_greyscale\",             \"reason\": \"Greyscale documents cannot be read. Please upload a color copy of the document.\",           }       ]   },   ... }`\n\nIf verification or validation is unsuccessful but no requirements are currently due, a webhook triggers indicating that required information is eventually due.\n\n## Business information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen information about a business is submitted, Stripe verifies the new information. For example, Stripe might verify that the provided business URL is valid, reachable, and includes information about the business. To retrieve the status of verification information regarding a business, utilize the `requirements` on the Account object.\n\nBelow is a list of errors related to business information verification:\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_business_profile_name` | Business names must be easy for people to understand and must consist of recognizable words. |\n| `invalid_business_profile_name_denylisted` | Generic or well-known business names aren’t supported. Make sure the provided business name matches the account’s business. |\n| `invalid_product_description_length` | A product description must be at least 10 characters. |\n| `invalid_product_description_url_match` | A product description must be different from the URL of the business. |\n| `invalid_url_denylisted`<br><br>`invalid_url_format`<br><br>`invalid_url_web_presence_detected`<br><br>`invalid_url_website_business_information_mismatch`<br><br>`invalid_url_website_empty`<br><br>`invalid_url_website_inaccessible`<br><br>`invalid_url_website_inaccessible_geoblocked`<br><br>`invalid_url_website_inaccessible_password_protected`<br><br>`invalid_url_website_incomplete`<br><br>`invalid_url_website_incomplete_cancellation_policy`<br><br>`invalid_url_website_incomplete_customer_service_details`<br><br>`invalid_url_website_incomplete_legal_restrictions`<br><br>`invalid_url_website_incomplete_refund_policy`<br><br>`invalid_url_website_incomplete_return_policy`<br><br>`invalid_url_website_incomplete_terms_and_conditions`<br><br>`invalid_url_website_incomplete_under_construction`<br><br>`invalid_url_website_other` | See [handling URL verification errors](#url-verification) below. |\n\n## Statement descriptors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe validates the statement descriptor and statement descriptor prefix when [set on an account](https://docs.stripe.com/connect/statement-descriptors). For example, Stripe might verify that the provided statement descriptor matches the description of the business. When validating the statement descriptor matches the business description, Stripe uses the first 22 characters of the statement descriptor, representing the part that is provided to the card networks. A business description is a close match of the account’s `business_profile.name`, `business_profile.url`, or the name of the company or individual.\n\nTo retrieve the status of verification information regarding statement descriptors, review the `requirements` on the Account object. Below is a list of errors related to statement descriptor verification:\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_statement_descriptor_length` | A statement descriptor must be at least 5 characters. |\n| `invalid_statement_descriptor_business_mismatch` | A statement descriptor must be similar to the business name, legal entity name, or URL of the account. |\n| `invalid_statement_descriptor_denylisted`<br><br>`invalid_statement_descriptor_prefix_denylisted` | Generic or well-known statement descriptors aren’t supported. |\n| `invalid_statement_descriptor_prefix_mismatch` | The statement descriptor prefix must be similar to your statement descriptor, business name, legal entity name, or URL. |\n\n## Person information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring the verification process, information about the persons associated with an account needs to be collected. If you onboard:\n\n*   Only companies, use the [Persons](https://docs.stripe.com/api/persons) API to collect this information.\n*   Only individuals, you can use the [Persons](https://docs.stripe.com/api/persons) API or the [individual](https://docs.stripe.com/api/accounts/object#account_object-individual) hash on the Account object.\n*   A combination of individuals and companies, use the [Persons](https://docs.stripe.com/api/persons) API to collect this information. This way you collect information in the same manner regardless of business type.\n\nTo retrieve the status of verification information regarding a person, utilize the Person object’s [verification](https://docs.stripe.com/api/persons/object#person_object-verification) subhash:\n\n`{   \"id\":` \n\n`\"{{PERSON_ID}}\"`\n\n`,   \"object\": \"person\",   ...   \"verification\": {     \"document\": null   }   ... }`\n\nYou can look up the definition for each verification attribute on the [Person](https://docs.stripe.com/api/persons/object#person_object-verification) object. The two attributes worth noting are `status` and `details`.\n\n`status` indicates the state of verification for the person:\n\n*   `pending`: Stripe is currently trying to verify this entity.\n*   `unverified`: Stripe isn’t able to verify this entity right now, either because verification has failed or because we don’t have enough information to attempt verification.\n*   `verified`: Stripe has successfully verified this entity.\n\nNote that an `unverified` status isn’t necessarily an urgent issue, but it does mean that Stripe might request more information soon.\n\nThe `details` attribute provides an explanation for the current `status`.\n\nBelow is a list of errors related to person verification:\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_address_city_state_postal_code` | Stripe couldn’t validate the combination of the city, state, and postal code in the provided address. |\n| `invalid_address_highway_contract_box` | The address of the person must be a valid physical address from which the account conducts business and can’t be a Highway Contract Box. |\n| `invalid_address_private_mailbox` | The address of the person must be a valid physical address from which the account conducts business and can’t be a private mailbox. |\n| `invalid_dob_age_under_minimum` | The person must be at least 13 years old. |\n| `invalid_dob_age_over_maximum` | The person’s date of birth must be within the past 120 years. |\n| `invalid_phone_number` | Stripe couldn’t validate the phone number on the account. Make sure the formatting matches the country of the person. |\n| `invalid_street_address` | Stripe couldn’t validate the street name and/or number for the provided address. |\n| `invalid_tax_id`<br><br>`invalid_tax_id_format` | Tax IDs must be a unique set of 9 numbers without dashes or other special characters. |\n\n## Acceptable verification documents by country ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSee the following list of documents that Stripe accepts as proof of identity, address, and entity for each country Stripe supports.\n\n## Common requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The format must be no more than one step removed from the original document:\n    *   Document copies and scans must be in PDF format and taken directly from the original document; they can’t be processed, converted, or embedded in other files\n    *   A picture of a physical document must be the original, unprocessed picture in JPEG or PNG format\n    *   Screenshots aren’t acceptable\n*   When the back side of a document contains required information, and you submit it using the API, include an image of the back side using the `document_back` parameter\n*   Photos and scans must be in color\n*   Images must not be low-quality\n*   Identity and legal entity documents must not be expired\n*   Documents must be readable and in a valid upload file format\n*   Documents must not be cropped or missing pages with crucial information, and all borders must be visible\n*   If the country of residence differs from the country of the account, a passport is required for identity verification\n\n## Select a country to view its requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAcceptable forms of legal entity verification:\n\n*   çertifikatë regjistrimi (Business registration certificate)\n*   LICENCË (Business license)\n\nRequired information:\n\n*   Full company legal entity name that matches the legal entity name in your Stripe profile\n*   Tax ID from the local tax authority that matches what’s in your Stripe profile\n*   Company address that matches what’s in your Stripe profile\n\n### Support articles![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Company information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring the verification process, you might need to collect information about the company for an account.\n\nTo retrieve the status of verification information regarding an account’s company, use the Account’s [company.verification](https://docs.stripe.com/api/accounts/object#account_object-company-verification) subhash:\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   ...   \"company\": {     \"verification\": {       \"document\": null     },     ...   },   ... }`\n\nYou can look up the definition for each verification attribute on the [Account](https://docs.stripe.com/api/accounts/object#account_object-company-verification) object.\n\n## Handle document verification problems![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMany complications with the verification process involve the uploaded document itself. To help you recognize and handle the most common problems, the table below lists possible values for the error `code` (in the `requirements.errors` array) and the likely resolutions for each error.\n\nBelow is a list of errors related to document upload:\n\n| Error | Resolution |\n| --- | --- |\n| `verification_document_corrupt`<br><br>`verification_document_failed_copy`<br><br>`verification_document_failed_greyscale`<br><br>`verification_document_incomplete`<br><br>`verification_document_not_readable`<br><br>`verification_document_not_uploaded`<br><br>`verification_document_not_signed`<br><br>`verification_document_missing_back`<br><br>`verification_document_missing_front`<br><br>`verification_document_too_large` | The upload failed due to a problem with the file itself. Ask your user to provide a new file that meets these requirements:<br><br>*   Color image (8,000 pixels by 8,000 pixels or smaller)<br>*   10 MB or less<br>*   Identity documents are JPG or PNG format<br>*   Address or legal entity documents are JPG, PNG, or PDF format<br>*   Legal entity documents must include all pages<br>*   Must not be password protected |\n| `verification_document_country_not_supported`<br><br>`verification_document_invalid`<br><br>`verification_document_type_not_supported` | The provided file isn’t an acceptable form of ID from a supported country, or isn’t a type of legal entity document that is expected. Ask your user to provide a new file that meets that requirement. For a list, see [Acceptable ID types by country](#acceptable-verification-documents). |\n| `verification_failed_other`<br><br>`verification_document_failed_other` | Your team can contact Stripe to learn more about why identity verification failed. |\n| `verification_document_expired`<br><br>`verification_document_issue_or_expiry_date_missing` | The issue or expiry date is missing on the document, or the document is expired. If it’s an identity document, its expiration date must be after the date the document was submitted. If it’s an address document, the issue date must be within the last six months. |\n\nBelow is a list of errors related to identity verification:\n\n| Error | Resolution |\n| --- | --- |\n| `verification_failed_keyed_identity` | The name on the account couldn’t be verified. Ask your user to verify that they have provided their full legal name and to also provide a photo ID matching that name. |\n| `verification_document_name_mismatch`<br><br>`verification_document_dob_mismatch`<br><br>`verification_document_address_mismatch`<br><br>`verification_document_id_number_mismatch`<br><br>`verification_document_photo_mismatch` | The information on the ID document doesn’t match the information provided by the user. Ask your user to verify and correct the provided information on the account. |\n| `verification_document_fraudulent`<br><br>`verification_document_manipulated` | The document might have been altered so it couldn’t be verified. Your team can contact Stripe to learn more. |\n\nBelow is a list of errors related to business verification:\n\n| Error | Resolution |\n| --- | --- |\n| `verification_failed_keyed_match`<br><br>`verification_failed_document_match` | The information on the account couldn’t be verified. Your user can either upload a document to confirm their account details, or update their information on their account. |\n| `verification_failed_tax_id_not_issued`<br><br>`verification_failed_tax_id_match` | The information that your user provided couldn’t be verified with the IRS. Ask your user to correct any possible errors in the company name or tax ID, or upload a document that contains those fields. (US only) |\n| `verification_failed_id_number_match`<br><br>`verification_failed_name_match`<br><br>`verification_failed_address_match` | The information on the document doesn’t match the information provided by the user. Ask your user to verify and correct the provided information on the account, or upload a document with information that matches the account. |\n| `verification_document_address_missing`<br><br>`verification_document_id_number_missing`<br><br>`verification_document_name_missing` | The uploaded document is missing a required field. Ask your user to upload another document that contains the missing field. |\n\n#### Caution\n\nDon’t resubmit a file that previously failed. Duplicate uploads immediately trigger an error and aren’t rechecked.\n\n## Handle URL verification errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nURLs for e-commerce businesses need to conform to certain card network standards. See the [website checklist](https://docs.stripe.com/get-started/checklist/website) for best practices for URLs and common elements for e-commerce businesses. Stripe conducts a number of verifications for URL integrity. There are two methods to resolve URL integrity errors:\n\n*   **Using the API** - Use the error code to handle the URL issue. If you need to update the URL, use the [Update Account](https://docs.stripe.com/api/accounts/update) API, which also causes Stripe to verify the updated URL. If you don’t have to update the URL, Stripe still needs to clear the error by verifying the URL again. After you make any other required updates, trigger reverification by using the API to change the URL to any other value and then change it back.\n*   **Using the Dashboard** - Platforms can use the [Accounts to review](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) page in the Stripe Dashboard to understand the impact to their connected accounts and what actions to take.\n\nNot all URL-related issues can be resolved using the API. Certain types of URL integrity errors require additional information on how to access the connected account’s webpage or to attest that the account is exempt from URL requirements. These types of issues require that you or your connected account provide supplemental information. Visit your [Accounts to review](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) page to resolve the error, or direct your connected account to [contact Stripe Support](https://support.stripe.com/contact).\n\n#### Note\n\nStripe’s Terms of Service requires all e-commerce businesses to populate the [business\\_profile.url](https://docs.stripe.com/api/accounts/object#account_object-business_profile-url) property with a working URL of their business website when activating an account with the `card_payments` capability. An account is considered an e-commerce business if it promotes or sells any products or services through an online website, social media profile, or mobile application. If the account doesn’t operate a website to promote their business, sell products, or accept payments, they’re required to provide [business\\_profile.product\\_description](https://docs.stripe.com/api/accounts/object#account_object-business_profile-product_description) instead. A product description needs to detail the type of products being sold as well as the manner in which the account’s customers are being charged (i.e. in person transactions).\n\nTo help you handle the most common errors associated with the `business_profile.url` field, the following table lists the related error codes (in the `requirements.errors` array) and possible resolutions.\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_url_denylisted` | The URL provided for the account matches a generic business website URL. A URL that is specific to the business of the account must be provided. |\n| `invalid_url_format` | The URL provided for the account is in the incorrect format. A URL in a correct format must be provided, such as `https://example.com`. |\n| `invalid_url_website_inaccessible` | We can’t reach the website at the URL provided for the account. To resolve this issue, update the account with a reachable URL. If the problem persists, go to your [Accounts to review Dashboard page](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) and respond to the intervention in the **Actions required** list or contact Stripe support. |\n| `invalid_url_website_business_information_mismatch` | Information on the account’s website does not match information on the account’s Stripe account. Please view your Accounts to review page in the Dashboard or the account must make sure that the information on the website matches the account’s business. |\n| `invalid_url_website_incomplete` | The account’s website seems to be missing some required information. Learn more about [the information a website must include](https://support.stripe.com/questions/information-required-on-your-business-website-to-use-stripe). |\n| `invalid_url_website_other` | We’re unable to verify the account’s business using the URL of the website, social media profile, or mobile application provided. A new URL must be provided. View your Accounts to review page or the account must contact Stripe support if no URL exists. |\n| `invalid_url_web_presence_detected` | We have detected that the account uses a website, social media profile, or mobile application to sell or promote products or services, but a URL hasn’t been provided for the account. The account should have a URL that isn’t a generic URL for the website or social media provider. |\n| `invalid_url_website_incomplete_customer_service_details` | The account’s website doesn’t contain customer service details, which are required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add these details to its website. |\n| `invalid_url_website_incomplete_return_policy` | The account’s website doesn’t contain a return policy and process, which are required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add a return policy and process to its website. |\n| `invalid_url_website_incomplete_refund_policy` | The account’s website doesn’t contain a refund policy, which is required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add a refund policy to its website. |\n| `invalid_url_website_incomplete_cancellation_policy` | The account’s website doesn’t contain a cancellation policy, which is required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add a cancellation policy to its website. |\n| `invalid_url_website_incomplete_legal_restrictions` | The account’s website suggests that it’s selling goods that have either legal or export restrictions. View your Accounts to review page or the account must remove those goods from its website. |\n| `invalid_url_website_incomplete_terms_and_conditions` | The account’s website doesn’t contain terms and conditions, which are required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add terms and conditions to its website. |\n| `invalid_url_website_incomplete_under_construction` | The account’s website is under construction. Please view your Accounts to review page in the Dashboard or the account must complete construction of its website. |\n| `invalid_url_website_inaccessible_password_protected` | The account’s website is password-protected. Please view your Accounts to review page in the Dashboard or the account must contact Stripe Support with instructions to access the website. |\n| `invalid_url_website_inaccessible_geoblocked` | Stripe couldn’t access the account’s website because it is geoblocked. Please view your Accounts to review page in the Dashboard or the account must contact Stripe Support with instructions to access the website. |\n| `invalid_url_website_empty` | The account’s website doesn’t have any content. Please view your Accounts to review page in the Dashboard or the account must add content that represents its products and services. |\n\n## Handle identity verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can respond in two ways to an identity verification change. The first is to perform an [Update Account](https://docs.stripe.com/connect/updating-service-agreements) call, correcting or adding information.\n\nSecondarily, we might ask you to upload a document. Depending on how much of the user’s information Stripe has been able to verify, we might require three different types of document uploads. You can determine what documents to upload based on the fields listed in `requirements.currently_due`:\n\n*   `person.verification.document`: Requires a color scan or photo of an acceptable form of ID.\n*   `person.verification.additional_document`: Requires a color scan or photo of a document verifying the user’s address, such as a utility bill.\n*   `company.verification.document`: Requires a proof of entity document establishing the business’ entity ID number, such as the company’s articles of incorporation.\n\nUploading a document is a two-step process:\n\n1.  Upload the file to Stripe\n2.  Attach the file to the account\n\n#### Note\n\nFor security reasons, Stripe doesn’t accept copies of IDs sent by email.\n\n### Upload a file ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo upload a file, use the [Create File](https://docs.stripe.com/api/files/create) API by using a POST to send the file data as part of a multipart/form-data request.\n\nThe uploaded file must meet these requirements:\n\n*   Color image (8,000 pixels by 8,000 pixels or smaller)\n*   10 MB or less\n*   Identity documents are JPG or PNG format\n*   Address or legal entity documents are JPG, PNG, or PDF format\n\nPass the file data in the `file` parameter and set the `purpose` parameter to `identity_document`:\n\n`curl https://files.stripe.com/v1/files \\   -u` \n\n`sk_test_Hrs6SAopgFPF0bZXSN3f6ELN`\n\n`: \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\" \\   -F \"purpose\"=\"identity_document\" \\   -F \"file\"=\"@/path/to/a/file\"`\n\nThis request uploads the file and returns a token:\n\n`{   \"id\":` \n\n`\"{{FILE_ID}}\"`\n\n`,   \"created\": 1403047735,   \"size\": 4908 }`\n\nYou may then use the token’s `id` value to attach the file to a connected account for identity verification.\n\n### Attach the file ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you upload the file and receive a representative token, provide the file ID using the appropriate field in your [Update Account](https://docs.stripe.com/connect/updating-service-agreements) call.\n\nBelow is an example for an ID document:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n`/persons/  {{PERSON_ID}}   \\  -u \"  sk_test_Hrs6SAopgFPF0bZXSN3f6ELN  :\" \\  -d \"verification[document][front]\"=  {{FILE_ID}}    `\n\nBelow is an example for a company document:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_Hrs6SAopgFPF0bZXSN3f6ELN  :\" \\  -d \"company[verification][document][front]\"=  {{FILE_ID}}`\n\nThis update changes `verification.status` to `pending`. If an additional person needs to be verified, use the [Persons](https://docs.stripe.com/api/persons) API to update them.\n\n### Confirm ID verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the color scan or photo of the ID passes Stripe’s checks, the document requirement is removed from `requirements.currently_due`. Satisfying all verification requirements for the person or company triggers an `account.updated` webhook notification signaling the verification process is complete.\n\nVerification can take Stripe from a few minutes, to a couple business days to complete, depending on how readable the provided image is.\n\nIf the verification attempt fails, the `requirements.errors` array contains an error stating the cause. The `error[reason]`, such as “The image supplied isn’t readable,” is safe to present to your user, but isn’t localized. The response also contains an `error[code]` value, such as `verification_document_not_readable`, which you can use to localize errors for your users. Upon failure, `requirements.currently_due` indicates that a new ID upload is required. If the deadline for verification is near, `requirements.current_deadline` might also be populated with a date. Verification failure also triggers an `account.updated` webhook notification.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Update service agreements](https://docs.stripe.com/connect/updating-service-agreements)\n*   [File upload guide](https://docs.stripe.com/file-upload)\n*   [Identity verification for connected accounts](https://docs.stripe.com/connect/identity-verification)\n*   [Account tokens](https://docs.stripe.com/connect/account-tokens)\n*   [Testing Connect](https://docs.stripe.com/connect/testing)\n*   [Testing account identity verification](https://docs.stripe.com/connect/testing-verification)\n*   [Required verification information](https://docs.stripe.com/connect/required-verification-information)",
    "title": "Handle verification with the API | Stripe Documentation",
    "description": "Learn how Connect platforms can use webhooks and the API to handle verification of connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/persons/object",
    "markdown": "# The Person object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The account the person is associated with.\n    \n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   #### \n    \n    first\\_namenullable string\n    \n    The person’s first name.\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The person’s phone number.\n    \n*   Describes the person’s relationship to the account.\n    \n*   #### \n    \n    requirementsnullable object\n    \n    Information about the requirements for this person, including what information needs to be collected, and by when.\n    \n\n### More attributes\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n*   #### \n    \n    address\\_kananullable object\n    \n*   #### \n    \n    address\\_kanjinullable object\n    \n\n*   #### \n    \n    first\\_name\\_kananullable string\n    \n*   #### \n    \n    first\\_name\\_kanjinullable string\n    \n*   #### \n    \n    full\\_name\\_aliasesnullable array of strings\n    \n*   #### \n    \n    future\\_requirementsnullable object\n    \n\n*   #### \n    \n    id\\_number\\_providedboolean\n    \n*   #### \n    \n    id\\_number\\_secondary\\_providednullable boolean\n    \n*   #### \n    \n    last\\_name\\_kananullable string\n    \n*   #### \n    \n    last\\_name\\_kanjinullable string\n    \n*   #### \n    \n    maiden\\_namenullable string\n    \n*   #### \n    \n    nationalitynullable string\n    \n*   #### \n    \n    political\\_exposurenullable enum\n    \n*   #### \n    \n    registered\\_addressnullable object\n    \n*   #### \n    \n    ssn\\_last\\_4\\_providedboolean\n    \n\n## [Create a person](https://docs.stripe.com/api/persons/create)\n\nCreates a new person.\n\n### Parameters\n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   The person’s first name.\n    \n*   The person’s ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The person’s phone number.\n    \n*   The relationship that this person has with the account’s legal entity.\n    \n*   The last four digits of the person’s Social Security number (U.S. only).\n    \n\n### More parameters\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n\n*   #### \n    \n    full\\_name\\_aliasesarray of strings\n    \n\n*   #### \n    \n    id\\_number\\_secondarystring\n    \n\n### Returns\n\nReturns a person object.\n\nPOST /v1/accounts/:id/persons\n\n```\ncurl -X POST https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1N9XNb2eZvKYlo2CjPX7xF6F\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1684518375,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": null,  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": null,  \"metadata\": {},  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [Update a person](https://docs.stripe.com/api/persons/update)\n\nUpdates an existing person.\n\n### Parameters\n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   The person’s first name.\n    \n*   The person’s ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The person’s phone number.\n    \n*   The relationship that this person has with the account’s legal entity.\n    \n*   The last four digits of the person’s Social Security number (U.S. only).\n    \n\n### More parameters\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n\n*   #### \n    \n    full\\_name\\_aliasesarray of strings\n    \n\n*   #### \n    \n    id\\_number\\_secondarystring\n    \n\n### Returns\n\nReturns a person object.\n\nPOST /v1/accounts/:id/persons/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"person\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1680035496,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": \"Jane\",  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": \"Diaz\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [Retrieve a person](https://docs.stripe.com/api/persons/retrieve)\n\nRetrieves an existing person.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a person object.\n\nGET /v1/accounts/:id/persons/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1N9XNb2eZvKYlo2CjPX7xF6F\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1684518375,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": null,  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": null,  \"metadata\": {},  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [List all persons](https://docs.stripe.com/api/persons/list)\n\nReturns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.\n\n### Parameters\n\n*   Filters on the list of people returned based on the person’s relationship to the account’s company.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` people, starting after person `starting_after`. Each entry in the array is a separate person object. If no more people are available, the resulting array will be empty.\n\nGET /v1/accounts/:id/persons\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/persons\",  \"has_more\": false,  \"data\": [    {      \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",      \"person\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",      \"object\": \"person\",      \"account\": \"acct_1032D82eZvKYlo2C\",      \"created\": 1680035496,      \"dob\": {        \"day\": null,        \"month\": null,        \"year\": null      },      \"first_name\": \"Jane\",      \"future_requirements\": {        \"alternatives\": [],        \"currently_due\": [],        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"id_number_provided\": false,      \"last_name\": \"Diaz\",      \"metadata\": {},      \"relationship\": {        \"director\": false,        \"executive\": false,        \"owner\": false,        \"percent_ownership\": null,        \"representative\": false,        \"title\": null      },      \"requirements\": {        \"alternatives\": [],        \"currently_due\": [],        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"ssn_last_4_provided\": false,      \"verification\": {        \"additional_document\": {          \"back\": null,          \"details\": null,          \"details_code\": null,          \"front\": null        },        \"details\": null,        \"details_code\": null,        \"document\": {          \"back\": null,          \"details\": null,          \"details_code\": null,          \"front\": null        },        \"status\": \"unverified\"      }    }    {...}    {...}  ],}\n```",
    "title": "The Person object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/payment_intents",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/connect/handling-api-verification?country=CA&document-type=identity",
    "markdown": "# Handle verification with the API\n\n## Learn how Connect platforms can use webhooks and the API to handle verification of connected accounts.\n\nPlatforms with accounts created using the API can provide Stripe with necessary information about their users for [Know Your Customer](https://support.stripe.com/questions/know-your-customer) (KYC) purposes. Platforms can use [Connect](https://docs.stripe.com/connect \"Connect\") Onboarding to collect KYC information, or use the [Accounts](https://docs.stripe.com/api/accounts) and [Persons](https://docs.stripe.com/api/persons) APIs to provide Stripe with required information. We’ll then perform verification, asking for more information when needed.\n\nThe rest of this page goes through how platforms:\n\n*   Discover verification requirements for a connected account\n*   Provide the necessary information to Stripe\n\n#### Note\n\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\n\n## Verification process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore enabling charges and [payouts](https://docs.stripe.com/payouts \"payout\") for a connected account, Stripe needs certain information that varies based on:\n\n*   The origin country of the connected accounts\n*   The [service agreement type](https://docs.stripe.com/connect/service-agreement-types) applicable to the connected accounts\n*   The [capabilities](https://docs.stripe.com/connect/account-capabilities) requested for the connected accounts\n*   The [business type](https://docs.stripe.com/api/accounts/object#account_object-business_type) (for example, individual or company) and [company.structure](https://docs.stripe.com/api/accounts/object#account_object-company-structure) (for example, public corporation or private partnership)\n\nPlatforms need to choose the proper [onboarding flow](https://docs.stripe.com/connect/identity-verification#onboarding-flows) for their business and users to meet the KYC requirements. Broadly speaking, this means providing all the requisite information upfront or incrementally. Either way, set up your integration to watch for and respond to requests from Stripe.\n\n1.  Establish a [Connect webhook](https://docs.stripe.com/connect/webhooks) URL in your [webhook settings](https://dashboard.stripe.com/account/webhooks) to watch for activity, especially events of the `account.updated` type. When using the [Persons API](https://docs.stripe.com/api/persons), you should also watch for `person.updated` events.\n2.  Immediately after creating an account, check the `Account` object’s [requirements.currently\\_due](https://docs.stripe.com/api/accounts/object#account_object-requirements-currently_due) attribute for any additional requirements. Obtain any required information from the user and update the connected account.\n3.  Continue watching for `account.updated` event notifications to see if the `requirements` hash changes, and reach out to your user for additional information as needed.\n\nWhen you provide additional information, you don’t need to resubmit any previously verified details. For example, if the `dob` is already verified, you don’t need to provide it again in subsequent updates.\n\n#### Caution\n\nWhen `requirements.currently_due` isn’t empty, additional information is required. Connected accounts might be blocked from creating charges, receiving payouts, or performing certain tasks if you don’t provide this information in a timely manner.\n\n### Change information after verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter an individual or company is verified, you can [change some of their information](https://docs.stripe.com/connect/update-verified-information), with limitations. See the [Update Account](https://docs.stripe.com/api/accounts/update) API for limitations based on the configuration of the connected account. [Contact support](https://support.stripe.com/contact) to make changes outside of these limitations.\n\n## Determine if verification is needed ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you receive an `account.updated` event to your webhook or [fetch an account](https://docs.stripe.com/api#retrieve_account) with the API, you receive an [Account](https://docs.stripe.com/api/accounts/object) object. The `Account` object’s `charges_enabled` and `payouts_enabled` attributes indicate whether the account can create charges and accept payouts.\n\nThe `Account` object has a `requirements` hash, representing the requirements needed to verify the account.\n\nThe `requirements` hash has the following arrays:\n\n*   `eventually_due`: Fields that you might need to collect, assuming all thresholds are reached. As they become required, they appear in `currently_due` and set the `current_deadline`. All required information starts in this array.\n*   `currently_due`: Fields that you must collect by the `current_deadline` for the connected account to remain enabled. `currently_due` is a subset of `eventually_due`.\n*   `past_due`: Fields you didn’t submit by the deadline, which disabled the connected account. `past_due` is a subset of `currently_due`.\n*   `errors`: The list of reasons why a particular field in `currently_due` or `past_due` must be collected again because validation or verification failed.\n*   `disabled_reason`: Describes why the connected account isn’t enabled.\n*   `current_deadline`: Date by which the fields in `currently_due` must be collected to keep the account enabled. The account may be disabled sooner if the next threshold is reached before the `currently_due` fields are collected.\n*   `pending_verification`: Fields that might become required depending on the results of verification or review. It’s an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending.\n\nThe example below shows what the `requirements` hash might look like for an account that has some information that’s `currently_due`, some information that’s `eventually_due`, and some information that’s raising verification `errors`.\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"requirements\": {       \"disabled_reason\": null,       \"current_deadline\": 1529085600,       \"past_due\": [],       \"currently_due\": [           \"company.tax_id\",           \"company.verification.document\",           \"tos_acceptance.date\",           \"tos_acceptance.ip\"       ],       \"eventually_due\": [           \"company.address.city\",           \"company.address.line1\",           \"company.address.postal_code\",           \"company.address.state\",           \"company.tax_id\",           \"company.verification.document\",           \"external_account\",           \"tos_acceptance.date\",           \"tos_acceptance.ip\"       ],       \"errors\": [           {             \"requirement\": \"company.verification.document\",             \"reason\": \"The company name on the account couldn't be verified. Either update your business name or upload a document containing the business name.\",             \"code\": \"failed_name_match\"           },       ]   },   ... }`\n\nIf `requirements.currently_due` contains entries, check `requirements.current_deadline`. The `current_deadline` is a Unix timestamp identifying when information is needed. Usually, if Stripe doesn’t receive the information by the `current_deadline`, payouts on the account are disabled. However, other consequences might apply in some situations. For example, if payouts are already disabled and the account is unresponsive to our inquiries, Stripe might also disable the ability to process charges.\n\nSeparately, the [requirements.disabled\\_reason](https://docs.stripe.com/api/accounts/object#account_object-requirements-disabled_reason) property can have a value. The value is a string describing the reason why this account is unable to make payouts or charges. In some instances, platforms and connected accounts can submit a form to resolve or appeal the reason.\n\n*   Connected accounts with access to the full Stripe Dashboard and Standard accounts can access additional information (if available) in the Dashboard.\n*   Platforms in any Connect configuration can navigate to [Accounts to review](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) to understand an account’s `disabled_reason`. You might be able to provide additional information on behalf of your connected accounts. If the disabled reason is associated with an appeal, you can generate a link to a form for the account to resolve the appeal.\n\n| Reason | Meaning |\n| --- | --- |\n| `action_required.requested_capabilities` | You need to request capabilities for the connected account. For details, see [Request and unrequest capabilities](https://docs.stripe.com/connect/account-capabilities#requesting-unrequesting). |\n| `listed` | Account might be on a prohibited persons or companies list (Stripe investigates and either rejects or reinstates the account accordingly). |\n| `rejected.fraud` | Account is rejected due to suspected fraud or illegal activity. |\n| `rejected.incomplete_verification` | The account is rejected from incomplete verification requirements within the required threshold. |\n| `rejected.listed` | Account is rejected because it’s on a third-party prohibited persons or companies list (such as financial services provider or government). |\n| `rejected.other` | Account is rejected for another reason. |\n| `rejected.terms_of_service` | Account is rejected due to suspected terms of service violations. |\n| `requirements.past_due` | Additional verification information is required to enable capabilities on this account. |\n| `requirements.pending_verification` | Stripe is currently verifying information on the connected account. No action is required. Inspect the [requirements.pending\\_verification](https://docs.stripe.com/api/accounts/object#account_object-requirements-pending_verification) array to see the information being verified. |\n| `under_review` | The account is under review by Stripe. |\n\n## Validation and verification errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Account](https://docs.stripe.com/api/accounts/object) object includes a [requirements.errors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors) array that explains why the validation or verification requirements haven’t been met, which are needed to enable your account and capabilities. The `errors` array has the following attributes:\n\n*   `requirement`: Specifies which information from the `currently_due` array is needed.\n*   `code`: Indicates the type of error that occurred. See the [API reference](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors-code) for all possible error codes.\n*   `reason`: Explains why the error occurred and how to resolve the error.\n\nBelow is an example that shows what the `errors` array might look like for an account with requirements that are `currently_due`. The example shows the reason why the submitted information can’t be used to enable the account, and how to resolve the error. If verification or validation is unsuccessful, requirements can reappear in `currently_due` with error information. Set a [Connect webhook](https://docs.stripe.com/connect/webhooks) to receive the `account.updated` event to receive these updates.\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"requirements\": {       \"current_deadline\": 1234567800,       \"currently_due\": [           \"company.address.line1\",           \"{{PERSON_ID}}.verification.document\",       ],       \"errors\": [           {             \"requirement\": \"company.address.line1\",             \"code\": \"invalid_street_address\",             \"reason\": \"The provided street address cannot be found. Please verify the street name and number are correct in \\\"10 Downing Street\\\"\",           },           {             \"requirement\": \"{{PERSON_ID}}.verification.document\",             \"code\": \"verification_document_failed_greyscale\",             \"reason\": \"Greyscale documents cannot be read. Please upload a color copy of the document.\",           }       ]   },   ... }`\n\nIf verification or validation is unsuccessful but no requirements are currently due, a webhook triggers indicating that required information is eventually due.\n\n## Business information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen information about a business is submitted, Stripe verifies the new information. For example, Stripe might verify that the provided business URL is valid, reachable, and includes information about the business. To retrieve the status of verification information regarding a business, utilize the `requirements` on the Account object.\n\nBelow is a list of errors related to business information verification:\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_business_profile_name` | Business names must be easy for people to understand and must consist of recognizable words. |\n| `invalid_business_profile_name_denylisted` | Generic or well-known business names aren’t supported. Make sure the provided business name matches the account’s business. |\n| `invalid_product_description_length` | A product description must be at least 10 characters. |\n| `invalid_product_description_url_match` | A product description must be different from the URL of the business. |\n| `invalid_url_denylisted`<br><br>`invalid_url_format`<br><br>`invalid_url_web_presence_detected`<br><br>`invalid_url_website_business_information_mismatch`<br><br>`invalid_url_website_empty`<br><br>`invalid_url_website_inaccessible`<br><br>`invalid_url_website_inaccessible_geoblocked`<br><br>`invalid_url_website_inaccessible_password_protected`<br><br>`invalid_url_website_incomplete`<br><br>`invalid_url_website_incomplete_cancellation_policy`<br><br>`invalid_url_website_incomplete_customer_service_details`<br><br>`invalid_url_website_incomplete_legal_restrictions`<br><br>`invalid_url_website_incomplete_refund_policy`<br><br>`invalid_url_website_incomplete_return_policy`<br><br>`invalid_url_website_incomplete_terms_and_conditions`<br><br>`invalid_url_website_incomplete_under_construction`<br><br>`invalid_url_website_other` | See [handling URL verification errors](#url-verification) below. |\n\n## Statement descriptors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe validates the statement descriptor and statement descriptor prefix when [set on an account](https://docs.stripe.com/connect/statement-descriptors). For example, Stripe might verify that the provided statement descriptor matches the description of the business. When validating the statement descriptor matches the business description, Stripe uses the first 22 characters of the statement descriptor, representing the part that is provided to the card networks. A business description is a close match of the account’s `business_profile.name`, `business_profile.url`, or the name of the company or individual.\n\nTo retrieve the status of verification information regarding statement descriptors, review the `requirements` on the Account object. Below is a list of errors related to statement descriptor verification:\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_statement_descriptor_length` | A statement descriptor must be at least 5 characters. |\n| `invalid_statement_descriptor_business_mismatch` | A statement descriptor must be similar to the business name, legal entity name, or URL of the account. |\n| `invalid_statement_descriptor_denylisted`<br><br>`invalid_statement_descriptor_prefix_denylisted` | Generic or well-known statement descriptors aren’t supported. |\n| `invalid_statement_descriptor_prefix_mismatch` | The statement descriptor prefix must be similar to your statement descriptor, business name, legal entity name, or URL. |\n\n## Person information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring the verification process, information about the persons associated with an account needs to be collected. If you onboard:\n\n*   Only companies, use the [Persons](https://docs.stripe.com/api/persons) API to collect this information.\n*   Only individuals, you can use the [Persons](https://docs.stripe.com/api/persons) API or the [individual](https://docs.stripe.com/api/accounts/object#account_object-individual) hash on the Account object.\n*   A combination of individuals and companies, use the [Persons](https://docs.stripe.com/api/persons) API to collect this information. This way you collect information in the same manner regardless of business type.\n\nTo retrieve the status of verification information regarding a person, utilize the Person object’s [verification](https://docs.stripe.com/api/persons/object#person_object-verification) subhash:\n\n`{   \"id\":` \n\n`\"{{PERSON_ID}}\"`\n\n`,   \"object\": \"person\",   ...   \"verification\": {     \"document\": null   }   ... }`\n\nYou can look up the definition for each verification attribute on the [Person](https://docs.stripe.com/api/persons/object#person_object-verification) object. The two attributes worth noting are `status` and `details`.\n\n`status` indicates the state of verification for the person:\n\n*   `pending`: Stripe is currently trying to verify this entity.\n*   `unverified`: Stripe isn’t able to verify this entity right now, either because verification has failed or because we don’t have enough information to attempt verification.\n*   `verified`: Stripe has successfully verified this entity.\n\nNote that an `unverified` status isn’t necessarily an urgent issue, but it does mean that Stripe might request more information soon.\n\nThe `details` attribute provides an explanation for the current `status`.\n\nBelow is a list of errors related to person verification:\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_address_city_state_postal_code` | Stripe couldn’t validate the combination of the city, state, and postal code in the provided address. |\n| `invalid_address_highway_contract_box` | The address of the person must be a valid physical address from which the account conducts business and can’t be a Highway Contract Box. |\n| `invalid_address_private_mailbox` | The address of the person must be a valid physical address from which the account conducts business and can’t be a private mailbox. |\n| `invalid_dob_age_under_minimum` | The person must be at least 13 years old. |\n| `invalid_dob_age_over_maximum` | The person’s date of birth must be within the past 120 years. |\n| `invalid_phone_number` | Stripe couldn’t validate the phone number on the account. Make sure the formatting matches the country of the person. |\n| `invalid_street_address` | Stripe couldn’t validate the street name and/or number for the provided address. |\n| `invalid_tax_id`<br><br>`invalid_tax_id_format` | Tax IDs must be a unique set of 9 numbers without dashes or other special characters. |\n\n## Acceptable verification documents by country ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSee the following list of documents that Stripe accepts as proof of identity, address, and entity for each country Stripe supports.\n\n## Common requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The format must be no more than one step removed from the original document:\n    *   Document copies and scans must be in PDF format and taken directly from the original document; they can’t be processed, converted, or embedded in other files\n    *   A picture of a physical document must be the original, unprocessed picture in JPEG or PNG format\n    *   Screenshots aren’t acceptable\n*   When the back side of a document contains required information, and you submit it using the API, include an image of the back side using the `document_back` parameter\n*   Photos and scans must be in color\n*   Images must not be low-quality\n*   Identity and legal entity documents must not be expired\n*   Documents must be readable and in a valid upload file format\n*   Documents must not be cropped or missing pages with crucial information, and all borders must be visible\n*   If the country of residence differs from the country of the account, a passport is required for identity verification\n\n## Select a country to view its requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Acceptable identification documents vary by country. A passport scan for identity verification is always preferred and, in some cases, is required. When a Stripe account and an individual associated with that Stripe account (for example, Business Representative, Owner) are from different countries, Stripe only accepts a passport to verify identity.\n\nAcceptable forms of identification:\n\n*   Letërnjoftimi (National Identity Card)\n*   Passport\n*   Leje Drejtimi (Driving License)\n*   çertifikatë regjistrimi (Business registration certificate)\n\nRequired information:\n\n*   Full legal name that matches the name in your Stripe profile\n*   Date of birth (DOB) that matches what’s in your Stripe profile\n*   Photo of person (except where exclusions apply)\n\n### Support articles![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Company information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring the verification process, you might need to collect information about the company for an account.\n\nTo retrieve the status of verification information regarding an account’s company, use the Account’s [company.verification](https://docs.stripe.com/api/accounts/object#account_object-company-verification) subhash:\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   ...   \"company\": {     \"verification\": {       \"document\": null     },     ...   },   ... }`\n\nYou can look up the definition for each verification attribute on the [Account](https://docs.stripe.com/api/accounts/object#account_object-company-verification) object.\n\n## Handle document verification problems![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMany complications with the verification process involve the uploaded document itself. To help you recognize and handle the most common problems, the table below lists possible values for the error `code` (in the `requirements.errors` array) and the likely resolutions for each error.\n\nBelow is a list of errors related to document upload:\n\n| Error | Resolution |\n| --- | --- |\n| `verification_document_corrupt`<br><br>`verification_document_failed_copy`<br><br>`verification_document_failed_greyscale`<br><br>`verification_document_incomplete`<br><br>`verification_document_not_readable`<br><br>`verification_document_not_uploaded`<br><br>`verification_document_not_signed`<br><br>`verification_document_missing_back`<br><br>`verification_document_missing_front`<br><br>`verification_document_too_large` | The upload failed due to a problem with the file itself. Ask your user to provide a new file that meets these requirements:<br><br>*   Color image (8,000 pixels by 8,000 pixels or smaller)<br>*   10 MB or less<br>*   Identity documents are JPG or PNG format<br>*   Address or legal entity documents are JPG, PNG, or PDF format<br>*   Legal entity documents must include all pages<br>*   Must not be password protected |\n| `verification_document_country_not_supported`<br><br>`verification_document_invalid`<br><br>`verification_document_type_not_supported` | The provided file isn’t an acceptable form of ID from a supported country, or isn’t a type of legal entity document that is expected. Ask your user to provide a new file that meets that requirement. For a list, see [Acceptable ID types by country](#acceptable-verification-documents). |\n| `verification_failed_other`<br><br>`verification_document_failed_other` | Your team can contact Stripe to learn more about why identity verification failed. |\n| `verification_document_expired`<br><br>`verification_document_issue_or_expiry_date_missing` | The issue or expiry date is missing on the document, or the document is expired. If it’s an identity document, its expiration date must be after the date the document was submitted. If it’s an address document, the issue date must be within the last six months. |\n\nBelow is a list of errors related to identity verification:\n\n| Error | Resolution |\n| --- | --- |\n| `verification_failed_keyed_identity` | The name on the account couldn’t be verified. Ask your user to verify that they have provided their full legal name and to also provide a photo ID matching that name. |\n| `verification_document_name_mismatch`<br><br>`verification_document_dob_mismatch`<br><br>`verification_document_address_mismatch`<br><br>`verification_document_id_number_mismatch`<br><br>`verification_document_photo_mismatch` | The information on the ID document doesn’t match the information provided by the user. Ask your user to verify and correct the provided information on the account. |\n| `verification_document_fraudulent`<br><br>`verification_document_manipulated` | The document might have been altered so it couldn’t be verified. Your team can contact Stripe to learn more. |\n\nBelow is a list of errors related to business verification:\n\n| Error | Resolution |\n| --- | --- |\n| `verification_failed_keyed_match`<br><br>`verification_failed_document_match` | The information on the account couldn’t be verified. Your user can either upload a document to confirm their account details, or update their information on their account. |\n| `verification_failed_tax_id_not_issued`<br><br>`verification_failed_tax_id_match` | The information that your user provided couldn’t be verified with the IRS. Ask your user to correct any possible errors in the company name or tax ID, or upload a document that contains those fields. (US only) |\n| `verification_failed_id_number_match`<br><br>`verification_failed_name_match`<br><br>`verification_failed_address_match` | The information on the document doesn’t match the information provided by the user. Ask your user to verify and correct the provided information on the account, or upload a document with information that matches the account. |\n| `verification_document_address_missing`<br><br>`verification_document_id_number_missing`<br><br>`verification_document_name_missing` | The uploaded document is missing a required field. Ask your user to upload another document that contains the missing field. |\n\n#### Caution\n\nDon’t resubmit a file that previously failed. Duplicate uploads immediately trigger an error and aren’t rechecked.\n\n## Handle URL verification errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nURLs for e-commerce businesses need to conform to certain card network standards. See the [website checklist](https://docs.stripe.com/get-started/checklist/website) for best practices for URLs and common elements for e-commerce businesses. Stripe conducts a number of verifications for URL integrity. There are two methods to resolve URL integrity errors:\n\n*   **Using the API** - Use the error code to handle the URL issue. If you need to update the URL, use the [Update Account](https://docs.stripe.com/api/accounts/update) API, which also causes Stripe to verify the updated URL. If you don’t have to update the URL, Stripe still needs to clear the error by verifying the URL again. After you make any other required updates, trigger reverification by using the API to change the URL to any other value and then change it back.\n*   **Using the Dashboard** - Platforms can use the [Accounts to review](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) page in the Stripe Dashboard to understand the impact to their connected accounts and what actions to take.\n\nNot all URL-related issues can be resolved using the API. Certain types of URL integrity errors require additional information on how to access the connected account’s webpage or to attest that the account is exempt from URL requirements. These types of issues require that you or your connected account provide supplemental information. Visit your [Accounts to review](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) page to resolve the error, or direct your connected account to [contact Stripe Support](https://support.stripe.com/contact).\n\n#### Note\n\nStripe’s Terms of Service requires all e-commerce businesses to populate the [business\\_profile.url](https://docs.stripe.com/api/accounts/object#account_object-business_profile-url) property with a working URL of their business website when activating an account with the `card_payments` capability. An account is considered an e-commerce business if it promotes or sells any products or services through an online website, social media profile, or mobile application. If the account doesn’t operate a website to promote their business, sell products, or accept payments, they’re required to provide [business\\_profile.product\\_description](https://docs.stripe.com/api/accounts/object#account_object-business_profile-product_description) instead. A product description needs to detail the type of products being sold as well as the manner in which the account’s customers are being charged (i.e. in person transactions).\n\nTo help you handle the most common errors associated with the `business_profile.url` field, the following table lists the related error codes (in the `requirements.errors` array) and possible resolutions.\n\n| Error | Resolution |\n| --- | --- |\n| `invalid_url_denylisted` | The URL provided for the account matches a generic business website URL. A URL that is specific to the business of the account must be provided. |\n| `invalid_url_format` | The URL provided for the account is in the incorrect format. A URL in a correct format must be provided, such as `https://example.com`. |\n| `invalid_url_website_inaccessible` | We can’t reach the website at the URL provided for the account. To resolve this issue, update the account with a reachable URL. If the problem persists, go to your [Accounts to review Dashboard page](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) and respond to the intervention in the **Actions required** list or contact Stripe support. |\n| `invalid_url_website_business_information_mismatch` | Information on the account’s website does not match information on the account’s Stripe account. Please view your Accounts to review page in the Dashboard or the account must make sure that the information on the website matches the account’s business. |\n| `invalid_url_website_incomplete` | The account’s website seems to be missing some required information. Learn more about [the information a website must include](https://support.stripe.com/questions/information-required-on-your-business-website-to-use-stripe). |\n| `invalid_url_website_other` | We’re unable to verify the account’s business using the URL of the website, social media profile, or mobile application provided. A new URL must be provided. View your Accounts to review page or the account must contact Stripe support if no URL exists. |\n| `invalid_url_web_presence_detected` | We have detected that the account uses a website, social media profile, or mobile application to sell or promote products or services, but a URL hasn’t been provided for the account. The account should have a URL that isn’t a generic URL for the website or social media provider. |\n| `invalid_url_website_incomplete_customer_service_details` | The account’s website doesn’t contain customer service details, which are required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add these details to its website. |\n| `invalid_url_website_incomplete_return_policy` | The account’s website doesn’t contain a return policy and process, which are required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add a return policy and process to its website. |\n| `invalid_url_website_incomplete_refund_policy` | The account’s website doesn’t contain a refund policy, which is required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add a refund policy to its website. |\n| `invalid_url_website_incomplete_cancellation_policy` | The account’s website doesn’t contain a cancellation policy, which is required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add a cancellation policy to its website. |\n| `invalid_url_website_incomplete_legal_restrictions` | The account’s website suggests that it’s selling goods that have either legal or export restrictions. View your Accounts to review page or the account must remove those goods from its website. |\n| `invalid_url_website_incomplete_terms_and_conditions` | The account’s website doesn’t contain terms and conditions, which are required for the business type of the account. Please view your Accounts to review page in the Dashboard or the account must add terms and conditions to its website. |\n| `invalid_url_website_incomplete_under_construction` | The account’s website is under construction. Please view your Accounts to review page in the Dashboard or the account must complete construction of its website. |\n| `invalid_url_website_inaccessible_password_protected` | The account’s website is password-protected. Please view your Accounts to review page in the Dashboard or the account must contact Stripe Support with instructions to access the website. |\n| `invalid_url_website_inaccessible_geoblocked` | Stripe couldn’t access the account’s website because it is geoblocked. Please view your Accounts to review page in the Dashboard or the account must contact Stripe Support with instructions to access the website. |\n| `invalid_url_website_empty` | The account’s website doesn’t have any content. Please view your Accounts to review page in the Dashboard or the account must add content that represents its products and services. |\n\n## Handle identity verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can respond in two ways to an identity verification change. The first is to perform an [Update Account](https://docs.stripe.com/connect/updating-service-agreements) call, correcting or adding information.\n\nSecondarily, we might ask you to upload a document. Depending on how much of the user’s information Stripe has been able to verify, we might require three different types of document uploads. You can determine what documents to upload based on the fields listed in `requirements.currently_due`:\n\n*   `person.verification.document`: Requires a color scan or photo of an acceptable form of ID.\n*   `person.verification.additional_document`: Requires a color scan or photo of a document verifying the user’s address, such as a utility bill.\n*   `company.verification.document`: Requires a proof of entity document establishing the business’ entity ID number, such as the company’s articles of incorporation.\n\nUploading a document is a two-step process:\n\n1.  Upload the file to Stripe\n2.  Attach the file to the account\n\n#### Note\n\nFor security reasons, Stripe doesn’t accept copies of IDs sent by email.\n\n### Upload a file ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo upload a file, use the [Create File](https://docs.stripe.com/api/files/create) API by using a POST to send the file data as part of a multipart/form-data request.\n\nThe uploaded file must meet these requirements:\n\n*   Color image (8,000 pixels by 8,000 pixels or smaller)\n*   10 MB or less\n*   Identity documents are JPG or PNG format\n*   Address or legal entity documents are JPG, PNG, or PDF format\n\nPass the file data in the `file` parameter and set the `purpose` parameter to `identity_document`:\n\n`curl https://files.stripe.com/v1/files \\   -u` \n\n`sk_test_Hrs6SAopgFPF0bZXSN3f6ELN`\n\n`: \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\" \\   -F \"purpose\"=\"identity_document\" \\   -F \"file\"=\"@/path/to/a/file\"`\n\nThis request uploads the file and returns a token:\n\n`{   \"id\":` \n\n`\"{{FILE_ID}}\"`\n\n`,   \"created\": 1403047735,   \"size\": 4908 }`\n\nYou may then use the token’s `id` value to attach the file to a connected account for identity verification.\n\n### Attach the file ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you upload the file and receive a representative token, provide the file ID using the appropriate field in your [Update Account](https://docs.stripe.com/connect/updating-service-agreements) call.\n\nBelow is an example for an ID document:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n`/persons/  {{PERSON_ID}}   \\  -u \"  sk_test_Hrs6SAopgFPF0bZXSN3f6ELN  :\" \\  -d \"verification[document][front]\"=  {{FILE_ID}}    `\n\nBelow is an example for a company document:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_Hrs6SAopgFPF0bZXSN3f6ELN  :\" \\  -d \"company[verification][document][front]\"=  {{FILE_ID}}`\n\nThis update changes `verification.status` to `pending`. If an additional person needs to be verified, use the [Persons](https://docs.stripe.com/api/persons) API to update them.\n\n### Confirm ID verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the color scan or photo of the ID passes Stripe’s checks, the document requirement is removed from `requirements.currently_due`. Satisfying all verification requirements for the person or company triggers an `account.updated` webhook notification signaling the verification process is complete.\n\nVerification can take Stripe from a few minutes, to a couple business days to complete, depending on how readable the provided image is.\n\nIf the verification attempt fails, the `requirements.errors` array contains an error stating the cause. The `error[reason]`, such as “The image supplied isn’t readable,” is safe to present to your user, but isn’t localized. The response also contains an `error[code]` value, such as `verification_document_not_readable`, which you can use to localize errors for your users. Upon failure, `requirements.currently_due` indicates that a new ID upload is required. If the deadline for verification is near, `requirements.current_deadline` might also be populated with a date. Verification failure also triggers an `account.updated` webhook notification.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Update service agreements](https://docs.stripe.com/connect/updating-service-agreements)\n*   [File upload guide](https://docs.stripe.com/file-upload)\n*   [Identity verification for connected accounts](https://docs.stripe.com/connect/identity-verification)\n*   [Account tokens](https://docs.stripe.com/connect/account-tokens)\n*   [Testing Connect](https://docs.stripe.com/connect/testing)\n*   [Testing account identity verification](https://docs.stripe.com/connect/testing-verification)\n*   [Required verification information](https://docs.stripe.com/connect/required-verification-information)",
    "title": "Handle verification with the API | Stripe Documentation",
    "description": "Learn how Connect platforms can use webhooks and the API to handle verification of connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/customize-express-dashboard",
    "markdown": "# Customize the Express Dashboard | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to customize the Express Dashboard for your users.\n\nThe Express Dashboard allows a platform’s users (connected accounts) to view their available balance, see upcoming [payouts](https://docs.stripe.com/payouts \"payout\"), and track their earnings in real time. It displays an **Activity** feed, an **Earnings** chart, and your platform’s brand name and icon. Learn how to customize the Express Dashboard for your users in this guide.\n\nTo learn more about each feature in the Express Dashboard, see [Express Dashboard](https://docs.stripe.com/connect/express-dashboard).\n\n[\n\n## Add your platform's brand name and icon![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#add-platform-branding)\n\nYou can display your platform’s brand name and icon in the Express Dashboard.\n\nAccess your [Connect settings](https://dashboard.stripe.com/settings/connect), enter your platform’s `business_name`, upload your platform’s icon, and save your changes. If you already saved your brand information before reading this guide, you can skip this step.\n\n[](#set-custom-descriptions)\n\nBy default, the **Transactions** list on the Express Dashboard displays generic descriptions for charges and transfers (for example: `Payment on {YOUR_PLATFORM}`).\n\nFirst, determine which type of charge your platform uses. The two recommended charge types for Express connected accounts are [Destination Charges](https://docs.stripe.com/connect/charges#destination) and [Separate Charges and Transfers](https://docs.stripe.com/connect/charges#separate-charges-transfers).\n\nAfter you determine the charge type, use the following instructions to update your integration.\n\n### Destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo update the [description](https://docs.stripe.com/api/charges/object#charge_object-description) on a payment object that’s visible to your platform’s users, you need to use the Stripe API. This applies to all platforms that use [destination charges](https://docs.stripe.com/connect/destination-charges).\n\n1.  Find the existing transfer object you created for an account by finding the latest [charge](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-charges) created on the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object).\n2.  Use the charge object to find the [transfer](https://docs.stripe.com/api/charges/object#charge_object-transfer) object associated with the charge.\n3.  Use the transfer object to find the [destination\\_payment](https://docs.stripe.com/api/transfers/object#transfer_object-destination_payment) ID that exists on the transfer.\n4.  Call the [Update Charge](https://docs.stripe.com/api/charges/update) API to update the [description](https://docs.stripe.com/api/charges/update#update_charge-description) on the destination payment using the `destination_payment` ID.\n\n#### Note\n\n`curl https://api.stripe.com/v1/charges/`\n\n`{{PAYMENT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d description=\"My custom description\"`\n\nThis description becomes visible on the charge after you’ve written this field.\n\nLearn more about [creating destination charges on your platform](https://docs.stripe.com/connect/destination-charges).\n\n### Separate charges and transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo update the [description](https://docs.stripe.com/api/charges/object#charge_object-description) on a payment object that’s visible to your platform’s users, you need to use the Stripe API. This applies to platforms that use [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers).\n\n1.  Use the transfer object to find the [destination\\_payment](https://docs.stripe.com/api/transfers/object#transfer_object-destination_payment) ID that exists on the transfer.\n2.  Call the [Update Charge](https://docs.stripe.com/api/charges/update) API to update the [description](https://docs.stripe.com/api/charges/update#update_charge-description) on the destination payment using the `destination_payment` ID found in the previous step.\n\n#### Note\n\n`curl https://api.stripe.com/v1/charges/`\n\n`{{PAYMENT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d description=\"My custom description\"`\n\nThis description becomes visible on the charge after you’ve written this field.\n\nLearn more about [creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Collect payments and then pay out](https://docs.stripe.com/connect/collect-then-transfer-guide) (if you process payments with Stripe)\n*   [Pay out money](https://docs.stripe.com/connect/add-and-pay-out-guide) (if you add money from a bank account to pay out)",
    "title": "Customize the Express Dashboard | Stripe Documentation",
    "description": "Learn how to customize the Express Dashboard for your users.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/payout-statement-descriptors",
    "markdown": "# Payout statement descriptors | Stripe DocumentationThe Stripe Docs logo\n\n## Understand and manage how Stripe payouts look on a connected account's bank statements.\n\nThe statement descriptor used for Connect payouts varies according to the properties of the connected account and the conditions of the payout. There is a precedence order used for [manual](#manual-payouts) and [automatic](#automatic-payouts) payouts.\n\nConnected accounts can have a customized statement descriptor stored on the Account object at [settings.payout.statement\\_descriptor](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-statement_descriptor).\n\n## Default statement descriptor![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnect platforms can configure a platform-wide default statement descriptor in their [Connect settings](https://dashboard.stripe.com/settings/connect/payouts/statement-descriptor), which is also used under certain criteria. Even when the precedence order falls to it, the default statement descriptor configured in your platform’s [Connect settings](https://dashboard.stripe.com/settings/connect/payouts/statement-descriptor) only applies to a connected account’s payout under certain criteria.\n\n*   The connected account belongs to a platform that pays Stripe fees (including Custom and Express accounts), or you have [platform controls](https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts) for it.\n*   The connected account doesn’t have access to the Stripe API. Connected accounts only have access to the Stripe API if they can access the Stripe Dashboard.\n*   The connected account isn’t restricted from using the `read_write` OAuth scope. Connected accounts can use the `read_write` OAuth scope if they have access to the Stripe Dashboard and aren’t explicitly restricted from using it with platform controls.\n\nUnless all of these criteria apply, the statement descriptor defaults to STRIPE. However, this default might be subject to other external factors, such as which bank processed the payout.\n\n## Precedence order![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe precedence order for the statement descriptor is different for manual and automatic payouts.\n\n### Manual payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  The [statement\\_descriptor](https://docs.stripe.com/api/payouts/object#payout_object-statement_descriptor) set on the Payout object.\n2.  The [settings.payout.statement\\_descriptor](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-statement_descriptor) from the connected account, if your platform and the connected account were created on or after October 9th, 2023.\n3.  Your platform’s default statement descriptor, if it’s applicable to the connected account.\n4.  If no other conditions are met, the statement descriptor might default to STRIPE.\n\n### Automatic payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  The [settings.payout.statement\\_descriptor](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-statement_descriptor) from the connected account, if your platform and the connected account were created on or after October 9th, 2023.\n2.  Your platform’s default statement descriptor, if it’s applicable to the connected account.\n3.  If no other conditions are met, the statement descriptor might default to STRIPE.",
    "title": "Payout statement descriptors | Stripe Documentation",
    "description": "Understand and manage how Stripe payouts look on a connected account's bank statements.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/correct-tax-forms",
    "markdown": "# Correct tax forms | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to file corrections to tax forms.\n\n#### Getting your 1099 Forms\n\nIf you work for a platform that pays you via Stripe and want to learn about your 1099 forms and how to get them, see [1099 tax forms](https://support.stripe.com/express/topics/1099-tax-forms) on the Stripe Support site.\n\nIn some cases, you need to correct the values in a 1099 tax form after you’ve filed it. If you try to update a tax form that you already filed, you see a **Correct** button instead of an Edit button in the form.\n\n## Correction Reasons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou might need to issue a correction for several reasons:\n\n*   To change the identity data of your connected account. For example, users may request changes to their name, address, or tax identification information\n    \n*   To change form totals\n    \n*   To handle forms with `Rejected` state filing status. If you have forms with _federal_ filing status of `Rejected`, please reach out to [Stripe support](https://support.stripe.com/contact/login).\n    \n    Here are the most common rejection reasons:\n    \n    | Attribute | Example rejection reasons |\n    | --- | --- |\n    | TIN | Missing, invalid, mismatched with IRS records |\n    | Address | Non-English characters, malformed zip codes, missing fields (for example, city, empty Line 1 address) |\n    | Name | Missing, non-English or non-alphabetical characters |\n    \n    The `Rejected` status implies that the form was either rejected by the IRS or state after submission, or that the state refused to accept the information during submission.\n    \n    You can file a correction to update information on a form that has been rejected by a state (if federal filing status shows up as “rejected”, please contact [Stripe support](https://support.stripe.com/contact/login)). Stripe 1099 intelligently files Corrections if the form was initially accepted or Replacements if it was rejected.\n    \n*   To handle delivery failures\n    \n    If the delivery status is `Failed`, that means we couldn’t deliver the tax form to the mailing address on file. There could be two reasons for this:\n    \n    *   **Misconfigured address** - The address is missing or invalid. For example, it includes non-English characters, the zip code doesn’t have the correct number of digits, or the city is missing.\n    *   **Non-deliverable address** - The address doesn’t exist and our delivery partners can’t use it to deliver first-class mail.\n\n## Supported corrections![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can correct most boxes on a tax form. Depending on when you submit a correction and what you’re correcting, [penalties may apply](https://www.irs.gov/irm/part20/irm_20-001-007r#idm140612976878064).\n\nThe IRS generally allows you to correct totals or payee information.\n\n*   When you correct totals, a single form replaces the original and includes the original payee information, new totals, and a checked **Corrected** checkbox.\n    \n*   When you correct payee information, two forms replace the original:\n    \n    *   The first form includes the original payee information, zeros for all totals, and a checked **Corrected** checkbox.\n    *   The second form includes the new payee information, original totals, and an unchecked **Corrected** checkbox (because this is the first form received by the new payee).\n\nThe IRS imposes certain requirements on tax form corrections.\n\nYou can’t correct:\n\n*   The payee name and form totals in the same form\n*   The payee tax identification number and form totals in the same form\n*   Tax forms that the IRS hasn’t accepted\n*   The form type (for example, 1099-MISC to 1099-NEC)\n\n## Create a correction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can only correct tax forms that the IRS has accepted. There are a few ways to start corrections, each of which results in a corrected form that shows up as a **Ready Correction**.\n\n#### Note\n\nIf you want to update information for the connected account permanently, make the changes programmatically using the Accounts API or the Connected Accounts details page and you can then use **Quick Correct** as shown below. Without doing this first, you’ll be updating the information only on the tax form. This doesn’t persist onto the connected account details and you’ll have to re-enter this information next tax season.\n\n*   **Use the [Tax form editor](https://docs.stripe.com/connect/modify-tax-forms?method=dashboard)**\n    \n    1.  Select the form on the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) page.\n    2.  Click **Correct** to create a correction.\n    3.  Make the necessary changes.\n    4.  Save the changes.\n*   **Use a CSV import**\n    \n    1.  Select the form and export it as a CSV.\n    2.  Open the CSV in a compatible tool to make and save the necessary changes.\n    3.  Import the updated CSV using the import mode **Correct**.\n    \n    Corrections use the same [CSV schema](https://docs.stripe.com/connect/modify-tax-forms?method=csv#1099-csv-schema) as updates and are filed regardless of filing threshold. This allows you to zero out a tax form that was accidentally filed or to correct a tax form to have a lower volume. The [Filing\\_requirement](https://docs.stripe.com/connect/modify-tax-forms?method=csv#tax-form-status) allows you to specify whether or not to file a correction.\n    \n*   **Use [Quick Correct](https://docs.stripe.com/connect/modify-tax-forms?method=dashboard#quick-correct:-payee-details)**\n    \n    If the identity (name, address, TIN) of the connected account has been updated in Stripe and now differs from what’s on the filed form, a pencil icon appears next to the “Payee details” for platform admin accounts. Hovering over the pencil and clicking **Correct** generates a corrected form to match the identity values of the connected account.\n    \n    When you click **Correct** to update the values in the tax form, it updates all values that are different in the connected account than the tax form. You can’t choose which fields to update values for. Verify all changes before filing the updated forms. For example, if a connected account user made a typo in their address, the incorrect address is updated in the corrected form.\n    \n    To list the forms with identity values that differ between the connected account and the tax form in order to find potential corrections, add a Payee details filter with a value of “Payee has updated identity info”.\n    \n\n## View or cancel a correction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTax form corrections have a **Correction** badge in the tax forms list and on the detail pane in the Dashboard. You can download previous versions of a tax form from the detail pane. To cancel a correction before filing, click **Cancel correction** from the menu on the detail pane.\n\n![View or cancel tax form corrections](https://b.stripecdn.com/docs-statics-srv/assets/view-cancel-correction-new.2c0d2cdae64ec49be826b5e641ea5b89.png)\n\n## File a correction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnce you have successfully created a correction via one of the methods above, the corrected form will move to “Ready” column of your Tax Forms page after a page refresh regardless of whether the form is above filing threshold.\n\nIf you want to file the correction, select the correction and click the file button. If you want to skip filing one of the corrections, set the filing requirement to `NOT_REQUIRED` in the Tax Form Editor or [import a CSV file](https://docs.stripe.com/connect/modify-tax-forms?method=csv#tax-form-status).\n\nIf you’ve selected to e-deliver your tax forms, your connected account will get an [email](https://docs.stripe.com/connect/platform-express-dashboard-taxes-communication) letting them know that the corrected form is available in Stripe Express.",
    "title": "Correct tax forms | Stripe Documentation",
    "description": "Learn how to file corrections to tax forms.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/cli/listen",
    "markdown": "# Stripe CLI Reference\n\n[cli](https://docs.stripe.com/cli)",
    "title": "Stripe CLI Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/connect/split-tax-forms",
    "markdown": "# Split tax forms | Stripe DocumentationThe Stripe Docs logo\n\n## Split your tax forms for your connected accounts after a change of ownership occurs during the tax year.\n\nSplitting a 1099 tax form means that you distribute the amount initially reported on a single 1099 form across two 1099 forms. You can split a 1099 form after a change of ownership occurs during the tax year for the legal entity receiving the form. Splitting a 1099 form assigns a portion of the reported amount to the legal entity before the change and assigns the remaining amount to the legal entity after the change.\n\nChanges to the legal entity of your connected accounts may include these examples:\n\n*   Change of ownership—The owner of the connected account sells the business to a new entity.\n*   Change of legal entity type—The owner of the connected account changes the business type from individual to company, and wants to file for both entities.\n*   Change of Tax Identification Number (TIN)—A sole proprietorship that uses the individual’s social security number (SSN) as the business TIN changes it to an employer identification number (EIN), and wants to file for both entities.\n\n#### Note\n\nChanging the TIN doesn’t necessarily require a split (for example, if the change was due to an oversight). You’ll need to determine whether changing the TIN requires a split, an [update](https://docs.stripe.com/connect/modify-tax-forms), or a [correction](https://docs.stripe.com/connect/correct-tax-forms). Work with your tax advisor to ensure you understand the split requirements specific to your business.\n\n## Create a split![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can split a tax form beginning January 4th of the year following that form’s tax year. For example, you can split a 2023 tax form starting January 4th, 2024. To create a split, select the form in the [Dashboard](https://dashboard.stripe.com/connect/taxes/forms) and then click **Split** from the menu on the detail pane. You can filter by the account ID to identify the form of the connected account you want to create a split for.\n\n#### Note\n\nYou can’t split a form after you manually edit the numerical data. To split one of these forms, you must revert the numerical data on the form to the Stripe-supplied values by clicking **Undo edits** on the **Totals** section. If the split forms are drafts, you can then [update](https://docs.stripe.com/connect/modify-tax-forms) the draft form prior to filing. If you have already filed the original form, you can then update form totals on the split forms with a [correction](https://docs.stripe.com/connect/correct-tax-forms).\n\n![Click Split from the menu on the detail pane](https://b.stripecdn.com/docs-statics-srv/assets/split-menu.8cd4a2d5b6f4ca57d77c36b0f1617bdb.png)\n\nIn the **Split 1099 tax form**, provide the date of the legal entity change and then click **Split**.\n\n![Provide date of legal entity change on Split 1099 tax form](https://b.stripecdn.com/docs-statics-srv/assets/split-tax-form.46d061fd477e72d8b0dc0c672d2f624e.png)\n\nYou’ll see two forms for the connected account:\n\n*   Form one includes the amounts from January 1 to the day before the specified split date.\n*   Form two includes the amounts from the specified split date to December 31.\n\nIf the legal entity is the same on both forms, they’re marked `Needs Attention`. To correct this, you can [update the form](https://docs.stripe.com/connect/modify-tax-forms) to replace the values for relevant payees.\n\n#### Note\n\nYou have to update the identity information on the forms (name, address, TIN) correctly, so that it isn’t the same as what it was before the split. You are responsible for marking the right identity information on each of the split forms.\n\nAfter you update the form so that the payee information is different for each form, the form status changes to `Ready`. Click **File** to send both forms to the IRS.\n\n#### Note\n\nSplit forms can only be delivered using postal mail. Paperless deliveries using the Express app is not currently supported.",
    "title": "Split tax forms | Stripe Documentation",
    "description": "Split your tax forms for your connected accounts after a change of ownership occurs during the tax year.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/customize-connect-embedded-components",
    "markdown": "Customize Connect embedded components | Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\nCustomize Connect embedded components\n\n[\n\nCreate account\n\n\n\n](https://dashboard.stripe.com/register/connect)or[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fcustomize-connect-embedded-components)\n\n[\n\n](/)\n\nSearch the docs or ask a question\n\n/\n\n[Create account](https://dashboard.stripe.com/register/connect)\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fcustomize-connect-embedded-components)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](/development)\n\n[\n\nNo-code\n\n\n\n](/no-code)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](/development)\n\nAPIs & SDKs\n\nHelp\n\n[Overview](/payments)\n\nAccept a payment\n\nAbout Stripe payments\n\n[Upgrade your integration](/payments/upgrades \"Improve your existing integration\")\n\nStart an integration\n\nPayment Links\n\nCheckout\n\nWeb Elements\n\nMobile Elements\n\nPayment scenarios\n\nDuring the payment\n\nAfter the payment\n\nAdd payment methods\n\nMore payment scenarios\n\nFaster checkout with Link\n\nOther Stripe products\n\nConnect\n\n[Overview](/connect \"Connect overview\")\n\n[Build a multi-party integration](/connect/overview \"Learn about how Connect works\")\n\n[Design an integration](/connect/design-an-integration)\n\n[Migrate to account controller properties](/connect/migrate-to-controller-properties)\n\n[Upcoming requirements updates](/connect/upcoming-requirements-updates \"Changes to required verification information\")\n\n[Onboarding Quickstart](/connect/onboarding/quickstart)\n\nConnect integration fundamentals\n\n[Make API calls for connected accounts](/connect/authentication \"Authenticating and making API calls as a connected account\")\n\n[Listen for updates](/connect/webhooks \"Connect webhooks\")\n\n[Testing](/connect/testing \"Testing with Connect\")\n\nExample integrations\n\n[Collect payments then pay out](/connect/collect-then-transfer-guide)\n\n[Enable other businesses to accept payments directly](/connect/enable-payment-acceptance-guide)\n\n[Pay out money](/connect/add-and-pay-out-guide)\n\n[Build a fully embedded Connect integration](/connect/build-full-embedded-integration)\n\nOnboard accounts\n\n[Choose your onboarding configuration](/connect/onboarding)\n\n[Account capabilities](/connect/account-capabilities \"Capabilities on a connected account\")\n\n[Required verification information](/connect/required-verification-information \"Learn what information you need to collect for different countries and account configurations\")\n\n[Service agreement types](/connect/service-agreement-types \"Service agreement types on a connected account\")\n\n[Additional Verifications](/connect/additional-verifications \"Add identity verification checks to your platform's connected accounts\")\n\n[Migrate to Stripe](/connect/migrate-to-stripe \"Migrate connected accounts to Stripe from an existing processor\")\n\nSet up dashboards\n\n[Get started with Connect embedded components](/connect/get-started-connect-embedded-components \"Embed dashboard functionality to your website with just a few lines of code\")\n\n[Supported Connect embedded components](/connect/supported-embedded-components \"Learn how to use embedded components for Connect\")\n\nCustomize Connect embedded components\n\n[Appearance options](/connect/embedded-appearance-options \"Customization options for Connect embedded components\")\n\n[Stripe Dashboard customization](/connect/stripe-dashboard \"Learn about the features of the Stripe Dashboard for connected accounts.\")\n\n[Platform controls for Stripe Dashboard accounts](/connect/platform-controls-for-stripe-dashboard-accounts \"Manage features on behalf of your connected accounts\")\n\n[Express Dashboard](/connect/express-dashboard \"Learn about the features of the Express Dashboard\")\n\nAccept payments\n\n[Create a charge](/connect/charges \"Create a charge type\")\n\n[Set statement descriptors](/connect/statement-descriptors \"Set statement descriptors\")\n\n[Set MCCs](/connect/setting-mcc \"Set merchant category codes\")\n\n[Handle multiple currencies](/connect/currencies \"Multiple currencies\")\n\n[Create payment links with Connect](/connect/payment-links \"Create payment links for connected accounts\")\n\n[Use Radar with Connect](/connect/radar \"Identify fraud in connected account charges\")\n\n[Create subscriptions](/connect/subscriptions)\n\n[Create invoices](/connect/invoices)\n\n[Connect platforms using the Payment Methods API](/payments/payment-methods/connect \"Considerations for Stripe Connect platforms adding support for new payment methods using the Payment Methods API\")\n\n[Multiple payment method configurations](/connect/multiple-payment-method-configurations \"Learn how to allow your connected accounts to display different sets of payment methods to their buyers in different scenarios.\")\n\n[Embed the payment method settings component](/connect/embed-payment-method-settings \"Learn how to embed the payment method settings into your website\")\n\n[Account balance](/connect/account-balances \"Connected account balance\")\n\nPay out to accounts\n\n[Payouts to connected accounts](/connect/payouts-connected-accounts \"Manage payouts and external accounts for your platform's connected accounts.\")\n\n[Manage payout accounts for connected accounts](/connect/payouts-bank-accounts \"Learn how to manage external bank accounts and debit cards for your connected accounts.\")\n\n[Manage payout schedule](/connect/manage-payout-schedule \"Manage when users get paid with automatic payouts\")\n\n[Manual payouts](/connect/manual-payouts \"Manual payouts\")\n\n[Payout reversals](/connect/payout-reversals \"Payout reversals\")\n\n[Payout statement descriptors](/connect/payout-statement-descriptors \"Understand and manage how Stripe payouts look on connected account's bank statements\")\n\n[Alternative Currency Payouts](/connect/alternative-currency-payouts \"Alternative Currency Payouts\")\n\n[Instant Payouts](/connect/instant-payouts \"Instant Payouts\")\n\n[Cross-border payouts](/connect/cross-border-payouts \"Cross-border payouts\")\n\n[Crypto payouts](/connect/crypto-payouts \"Crypto payouts\")\n\nManage your Connect platform\n\n[Dashboard account management](/connect/dashboard \"Managing connected accounts with the Dashboard\")\n\n[Remediation links](/connect/dashboard/remediation-links \"Remediation link process walkthrough\")\n\n[Risk management with Connect](/connect/risk-management \"Learn how Connect can help you manage risk and losses\")\n\n[Platform pricing tools](/connect/platform-pricing-tools)\n\n[Connect margin reports](/connect/margin-reports \"Analyze your Connect volume, revenue and costs\")\n\nManage tax forms for your Connect platform\n\n[Overview](/connect/tax-reporting \"US tax reporting for Connect platforms\")\n\n[Get started with tax reporting](/connect/get-started-tax-reporting \"Get started with 1099 tax reporting\")\n\n[1099 Tax Support and Communication Guide](/connect/platform-express-dashboard-taxes \"1099 Tax Support and Communication Guide for 2021\")\n\n[Tax form settings](/connect/tax-form-settings \"Configure tax form settings\")\n\n[Calculation methods](/connect/calculation-methods \"Choose a calculation method\")\n\n[Identity information on tax forms](/connect/required-verification-information-taxes \"Identity information on tax forms\")\n\n[File tax forms](/connect/file-tax-forms \"File your 1099 tax forms\")\n\n[File tax forms with states](/connect/tax-forms-state-requirements \"File tax forms with states\")\n\n[Identify forms with missing information](/connect/identify-forms-missing-information \"Learn how to find and correct forms with missing information\")\n\n[Update and create tax forms](/connect/modify-tax-forms \"Update your 1099 tax forms using CSV\")\n\n[Deliver tax forms](/connect/deliver-tax-forms \"Deliver your 1099 tax forms\")\n\n[Deliver tax forms with the Express Dashboard](/connect/express-dashboard-taxes \"Learn how to e-deliver tax forms to connected accounts through the Express Dashboard\")\n\n[Correct tax forms](/connect/correct-tax-forms \"Correct your 1099 tax forms\")\n\n[Split tax forms](/connect/split-tax-forms \"Split your 1099 tax forms\")\n\n[Tax year changeover](/connect/tax-year-changeover \"Manage tax forms for a new year\")\n\n[What's new for tax year 2023](/connect/tax/whats-new-2023 \"Learn about new features available for Connect platforms and marketplaces filing 1099s with Stripe\")\n\nWork with connected account types\n\n[Connected account types](/connect/accounts)\n\n[Dynamic payment methods](/connect/dynamic-payment-methods \"Update your integration to use dynamic payment methods\")\n\nTerminal\n\nFinancial Connections\n\nCrypto\n\nClimate\n\nCustom Checkout\n\nUnited States\n\nEnglish (United States)",
    "title": "Customize Connect embedded components | Stripe Documentation",
    "description": "Change the appearance of Connect embedded components to match your website.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/tax-year-changeover",
    "markdown": "# Tax year changeover | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to manage tax forms for a new tax year.\n\n#### Getting your 1099 Forms\n\nIf you work for a platform that pays you via Stripe and want to learn about your 1099 forms and how to get them, see [1099 tax forms](https://support.stripe.com/express/topics/1099-tax-forms) on the Stripe Support site.\n\n## Preparing for tax year changeover![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a new tax year starts, you need to collect financial data for the new year in a new tax form for the new tax year. This is often before a user completes and submits tax forms from the previous year and before you provide them to users on your platform. To view the tax forms for the new year, you need to change the year selected either on the **Tax reporting** page or on the **Tax form settings** page.\n\n## About tax year settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a new tax year starts, we apply your settings from the previous year to the new one. If no settings are in place from the previous tax year, the **Tax year settings** dialog displays so you can configure settings for that tax year.\n\nTax forms are generated as soon as a new tax year starts and a payment is made. To see the tax forms that belong to the new tax year, users need to go through a changeover process. This means they need to enable the tax year picker either on the tax forms list or on the Tax Forms settings pages, and they need to create new settings.\n\n## Selecting a tax year![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Tax reporting** page displays tax forms and settings for the _current tax year_.\n\nYou can display a different tax year by doing one of the following:\n\n*   Selecting a new tax year from the drop-down on the **Tax reporting** page\n*   Selecting a new tax year from the drop-down on the **Tax form settings** page\n\nWhen you select a tax year from the drop-down for a year that has no activity, the **Tax form defaults** dialog opens. To activate the tax year, configure and save the Tax form default settings. If you don’t configure and save settings, you see the onboarding page when you open the **Tax reporting** page. Select a different tax year from the drop-down to change to that year.\n\nThe selection persists between sessions, so it displays the same tax year when you next use the Dashboard. This lets you start working with tax forms for the current year and then switch back to the previous year to file or correct existing forms.\n\n## Frequently asked questions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following section provides answers to common questions about tax year changeover.\n\n### How does the user change between tax years?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nClick the small downward arrow next to the current tax year. All available tax years appear in a dropdown menu. Click one of these years to change the user’s view to that tax year.\n\n### What is the default tax year?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter the new year’s forms become available, your Dashboard automatically changes over to that year.\n\n### Does the default tax year reset when you log in? Will it remember what year I last looked at?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe year you select to view persists between logins. If you select to view your 2023 forms, the UI defaults to your 2023 forms when you log back in.\n\n### What determines how many tax years are available to me?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery time a tax year launches and those forms become available while you have a Stripe account with [Tax Form Defaults](https://docs.stripe.com/connect/get-started-tax-reporting) configured, that year becomes available to you in your drop-down. If you began processing transactions in 2022, you won’t see 2021 forms in your Dashboard because you didn’t have an account when those were launched.\n\n### Will I see tax years from before I used Stripe?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNo. You only see years that launched while you had a Stripe account.\n\n### Will I see tax years for which I filed no forms?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are able to see any year in which you previously generated 1099 forms in the Connect dashboard, regardless of whether or not they were filed.",
    "title": "Tax year changeover | Stripe Documentation",
    "description": "Learn how to manage tax forms for a new tax year.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/tax/whats-new-2023",
    "markdown": "# What's new for tax year 2023\n\n## Learn about new features available for Connect platforms and marketplaces filing 1099s with Stripe.\n\nFor tax year 2023, Stripe is introducing features that help Connect platforms efficiently and accurately meet their 1099 tax reporting obligations for [Custom](https://docs.stripe.com/connect/custom-accounts) and [Express](https://docs.stripe.com/connect/express-accounts) US-based accounts. The 2023 tax year features help platforms comply with their 1099 tax reporting obligations at scale.\n\n#### Note\n\nStripe delivers 1099 forms to Standard accounts through the Stripe Dashboard.\n\n## Early access to editable tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStarting in August, you can access preliminary 2023 tax forms and associated tax reporting features directly from your Stripe Connect Dashboard. Your team needs either Administrator or Tax analyst [user permissions](https://docs.stripe.com/get-started/account/teams) to get started.\n\nAlong with early access to tax forms, you can start editing tax forms right away, as opposed to waiting to make edits in January. You can do so for individual tax forms or in bulk by importing a CSV file.\n\n## Improved state ID collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn our platform onboarding flow for tax year 2023, we clarified the strict ID requirements for filing in two states: Delaware and Pennsylvania. If you intend to file in either of these states, include your state IDs during this step to prevent possible rejection of your filings.\n\n## Create and update tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several features to help you [create and update tax forms](https://docs.stripe.com/connect/modify-tax-forms).\n\n### Deltas![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nImporting tax forms using **Delta** allows you to add to (or subtract from) the values on the initial tax form totals from Stripe. This lets you report just the totals of transactions that happened outside of Stripe. You don’t need to sum the values from Stripe with external values—instead, you only need to provide the delta amounts and Stripe does the rest. This is particularly useful if you have multiple payout mechanisms or reimbursements on Stripe connected accounts for activity that happened outside of Stripe.\n\n![Add deltas to a tax form through CSV imports](https://b.stripecdn.com/docs-statics-srv/assets/deltas-tax-form-2023.1955229634d237c2dded771a26dede66.png)\n\n### Zero dollar tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms can generate tax forms for a Stripe account ID, even when it hasn’t received any payouts in 2023. If your connected account doesn’t already have a tax form, performing **Update** imports (to override form values supplied by Stripe) or **Delta** imports (to make incremental changes to form values supplied by Stripe) automatically creates the form.\n\n![Update a tax form through CSV imports](https://b.stripecdn.com/docs-statics-srv/assets/update-tax-form-2023.3ee26a28748bfa00607ba5db863ec3dc.png)\n\n### Standalone tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create standalone tax forms for accounts that might not be a connected account (for example, accounts from a different provider). You can create them seamlessly by using a **Create** import with a CSV file containing the data of the form you want to generate. You must include all columns except for `form_id` and `stripe_account_id`. E-delivery isn’t available for standalone forms (only postal mailing is allowed for delivery).\n\n![Create a tax form through CSV imports](https://b.stripecdn.com/docs-statics-srv/assets/create-tax-form-2023.57be1986e99960197e157a73bb2a89aa.png)\n\n### Increased CSV import and export speed![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re using CSV imports to create or modify tax forms, we’ve increased the speed of CSV imports and exports by up to _10 times_ the speed of previous years.\n\n## Improved splitting and grouping of forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use pre-filing splits and improved TIN aggregation to reduce the amount of overhead for filing taxes.\n\n### Pre-filing splits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can now [split tax forms](https://docs.stripe.com/connect/split-tax-forms) to handle account ownership changes before filing the forms. Splitting a 1099 tax form means that you distribute the amount initially reported on a single 1099 form across two 1099 forms. Previously, you could only split tax forms post-filing, meaning you might have needed to file the wrong tax forms and then correct them. Now, after January 1, you can do so before filing from the 1099 Dashboard.\n\n![Pre-filing splits](https://b.stripecdn.com/docs-statics-srv/assets/pre-file-spits-2023.c93202c5520f7be4de8a00cfff2cc264.png)\n\n### Improved TIN aggregation of tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nForms that share the same TIN get their totals aggregated to determine filing eligibility at all times, even when the platform updates the tax form totals or identity data. When there are multiple forms with the same TIN, we aggregate the totals from each form with a maximum of 100 other forms. However, if forms of different types share the same TIN, we might not aggregate them. In these cases, check your filing eligibility and apply an override if necessary. To simplify finding other forms grouped with a particular form, use the **Forms grouped with** filter.\n\n![Form aggregation filter](https://b.stripecdn.com/docs-statics-srv/assets/form-agg-filter-2023.a13264f451ac25e0b6ebee27a6915306.png)\n\n## Form Delivery Improvements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the Dashboard to track delivery status and Stripe outreach emails, and to address missing emails.\n\n### Delivery status visibility![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can now view both postal delivery and e-delivery statuses directly in the 1099 Dashboard. You can also [filter](https://docs.stripe.com/connect/get-started-tax-reporting#view-and-filter-tax-forms) for both statuses. Previously, we only showed a combined delivery status, which reported the best result between the e-delivery and postal delivery status. With the combined status, if one of the forms was successfully delivered (but not the other) it showed a status of `delivered`. In other words, if e-delivery was successful and postal delivery was unsuccessful, the combined status was `delivered`. Going forward, you can track the individual status for each of the forms you deliver.\n\n![New dashboard statuses and filters for delivery and outreach](https://b.stripecdn.com/docs-statics-srv/assets/new-statuses-2023.25eb0f5aecc794bef2ac9ada37c0b05d.png)\n\n### Tracking Stripe outreach![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your platform opts for e-delivery through Stripe Express and enables the collection of tax information in advance using 1099 tax form settings, Stripe sends emails to the connected accounts on behalf of platforms. We do this to confirm their tax information and provide e-delivery consent through Stripe Express. You can now track the status of that outreach directly in the 1099 Dashboard, and use the `Pre-filing confirmation status` filter. The status is either `ineligible`, `queued`, `sent`, or `not sent`.\n\n### Addressing missing emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[For e-delivery with Stripe Express](https://docs.stripe.com/connect/deliver-tax-forms#e-delivery-with-stripe-express), the connected account owner must be able to receive the email from Stripe inviting them to create their account. Stripe can’t electronically deliver the forms without the email address for the account. If you’ve opted in to paper delivery, we send paper forms (assuming we have a valid delivery address). You can now filter for any accounts with missing emails and add them to allow e-delivery. Any emails added by the following methods will result in updating the email on the connected account, which will carry over each year.\n\n*   Use the [Update](https://docs.stripe.com/api/accounts/update#update_account-email) API.\n*   Use the CSV import functionality on the [Emails page](https://dashboard.stripe.com/settings/connect/emails) in the Dashboard. New\n*   Edit the email addresses in the _Payee Details_ section in the 1099 dashboard. New\n\nYou can no longer update email addresses using the email\\_address field in a CSV import directly into the 1099 product. Changes made using this method don’t carry over each year.\n\n### Send Stripe pre-filing confirmation invites![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms who enable e-delivery can choose to have Stripe collect identity information and paperless delivery consent directly from their connected accounts through pre-filing confirmation. This email invites your user to Stripe Express. If you need to send a one-off pre-filing confirmation email (for example, your user didn’t receive one since they had the wrong email on file), you can now do it from the 1099 dashboard. [Learn more](https://docs.stripe.com/connect/express-dashboard-taxes#my-connected-account-did-not-receive-a-pre-filing-confirmation-email) about how to resolve issues related to your user not receiving a pre-filing confirmation email.\n\n### Reset account claim attempts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts must claim their Stripe accounts to view the Tax Center in the Express dashboard. To authorize the claim, Stripe asks the user a series of questions to verify their identity. For security reasons, if the user fails to correctly answer the verification questions too many times, Stripe locks their account. You can now see the status in the 1099 dashboard, and you can reset your user’s claim attempts directly in the 1099 Dashboard. [Learn more](https://docs.stripe.com/connect/express-dashboard-taxes#my-connected-account-was-locked-out-of-their-stripe-express-account-for-failing-the-verification-process.-how-can-i-resolve-this-issue) about how you can use these new features to self-resolve account claim issues.",
    "title": "What's new for tax year 2023 | Stripe Documentation",
    "description": "Learn about new features available for Connect platforms and marketplaces filing 1099s with Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts",
    "markdown": "# Platform controls in the Stripe Dashboard\n\n## Manage more features on behalf of your connected accounts that use the Stripe Dashboard with platform controls.\n\nThousands of platforms and marketplaces use [Stripe Connect](https://stripe.com/connect) to facilitate payments and pay out recipients. Connected accounts with Stripe Dashboard access is the fastest way to enable your customers to accept payments directly, while relying on Stripe to manage onboarding, reporting, and loss liability. With platform controls, you can manage more features on behalf of your connected accounts.\n\n#### Note\n\n## Configure platform controls ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNavigate to the [third-party extensions](https://dashboard.stripe.com/settings/connect/stripe-dashboard/extensions) page to select the options for your connected accounts. These options apply to all of your new connected accounts moving forward. Visit the [connected accounts](https://dashboard.stripe.com/connect/accounts/overview) page to change settings for individual connected accounts.\n\n## Control payout timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs the platform, you can now update your connected accounts’ [payouts](https://docs.stripe.com/payouts \"payout\") programmatically [using the Stripe API](https://docs.stripe.com/connect/manage-payout-schedule) or [in the Dashboard](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#updating-accounts). You can also initiate payouts on behalf of your connected accounts programmatically [using the Stripe API](https://docs.stripe.com/connect/manual-payouts) or [in the Dashboard](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#sending-funds).\n\nNavigate to the [payout schedules](https://dashboard.stripe.com/settings/connect/payouts/schedules) page to determine whether connected accounts can manage their own payout schedules. Connected accounts can still make manual payouts after you, as the platform, choose to restrict connected accounts from updating their own payout schedule.\n\n#### Note\n\nIf you need full control over your connected accounts’ payouts and want to restrict your connected accounts from being able to make their own payouts, [contact us](https://support.stripe.com/contact) with a detailed description of your use case.\n\n## Access consolidated reporting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can access reporting across all connected accounts that you control using the built in-Dashboard reporting as well as within Stripe Sigma, a custom reporting solution that makes all of your data available as an interactive SQL environment in the Dashboard. To learn more, see [Financial reports](https://docs.stripe.com/reports) and [Sigma for Connect platforms](https://docs.stripe.com/stripe-data/query-connect-data).\n\n## Co-brand your connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs the platform, you can manage your brand settings within the **Connect Settings** > **Stripe Dashboard** section. All new accounts onboarding to your platform will see your icon and branding color in their dashboard. To understand changes for connected accounts, see this [Support article](https://support.stripe.com/questions/platform-administered-stripe-accounts).\n\n#### Note\n\nThese features apply only to new accounts onboarding to your platform, denoted by `true` in the `is_controller` property for the [Account object](https://docs.stripe.com/api/accounts/object#account_object-controller-is_controller). Existing accounts aren’t eligible for these features.\n\n## Remove accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFrom the connected account details page in your [Dashboard](https://dashboard.stripe.com/connect/accounts/overview), click the overflow menu () and choose **Remove account**. This action disconnects the account and revokes access in the same way as the OAuth de-authorize endpoint. Removing an account from your platform resets any platform controls (such as payout timing) you’ve configured for the connected account. If the account reconnects later, prior platform controls aren’t reinstated.",
    "title": "Platform controls in the Stripe Dashboard | Stripe Documentation",
    "description": "Manage more features on behalf of your connected accounts that use the Stripe Dashboard with platform controls.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/separate-charges-and-transfers",
    "markdown": "# Create separate charges and transfers\n\n## Create charges on your platform account and transfer funds to multiple connected accounts.\n\nCreate _separate charges and transfers_ to transfer funds from one payment to multiple connected accounts, or when a specific user isn’t known at the time of the payment. The charge on your platform account is decoupled from the transfer(s) to your connected accounts. With this charge type:\n\n*   You create a charge on your platform’s account and also transfer funds to your connected accounts. The payment appears as a charge on your account and there are also transfers to connected accounts (amount determined by you), which are withdrawn from your account balance.\n*   You can transfer funds to multiple connected accounts.\n*   Your account balance is debited for the cost of the Stripe fees, refunds, and chargebacks.\n\nThis charge type is most optimal for marketplaces that need to split payments between multiple parties, such as DoorDash, a restaurant delivery platform.\n\nStripe supports separate charges and transfers in the following regions:\n\nAustralia\n\nAustria\n\nBelgium\n\nBrazil\n\nBulgaria\n\nCanada\n\nCroatia\n\nCyprus\n\nCzech Republic\n\nDenmark\n\nEstonia\n\nFinland\n\nFrance\n\nGermany\n\nGreece\n\nHungary\n\nIreland\n\nItaly\n\nJapan\n\nLatvia\n\nLiechtenstein\n\nLithuania\n\nLuxembourg\n\nMalaysia\n\nMalta\n\nMexico\n\nNetherlands\n\nNew Zealand\n\nNorway\n\nPoland\n\nPortugal\n\nRomania\n\nSingapore\n\nSlovakia\n\nSlovenia\n\nSpain\n\nSweden\n\nSwitzerland\n\nUnited Kingdom\n\nUnited States\n\nIn most scenarios, your platform and any connected account must be in the same region. Attempting to transfer funds across a disallowed border returns an error. For information about cross-region support, see [cross-border transfers](https://docs.stripe.com/connect/account-capabilities#transfers-cross-border). You must only use transfers in combination with the permitted use cases for [charges](https://docs.stripe.com/connect/charges), [tops-ups](https://docs.stripe.com/connect/top-ups) and [fees](#collect-fees).\n\nRedirect to a Stripe-hosted payment page using [Stripe Checkout](https://docs.stripe.com/payments/checkout). See how this integration [compares to Stripe’s other integration types](https://docs.stripe.com/payments/accept-a-payment/web/compare-integrations).\n\n[![Checkout preview](https://b.stripecdn.com/docs-statics-srv/assets/b2c79a23390b89a7b589d29387f3e2b2.png)](https://checkout.stripe.dev/)\n\n### Integration effort\n\n### Integration type\n\nRedirect to Stripe-hosted payment page\n\n### UI customization\n\n[Try it out](https://checkout.stripe.dev/)\n\n[](#set-up-stripe)\n\nFirst, [register](https://dashboard.stripe.com/register) for a Stripe account.\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-checkout-session)\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) controls what your customer sees in the payment form such as line items, the order amount and currency, and acceptable payment methods. Add a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nOn your server, create a Checkout Session and redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][price_data][product_data][name]\"=\"Restaurant delivery service\" \\  -d \"line_items[0][price_data][unit_amount]\"=10000 \\  -d \"line_items[0][quantity]\"=1 \\  -d \"payment_intent_data[transfer_group]\"=ORDER100 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success?session_id={CHECKOUT_SESSION_ID}](https://example.com/success?session_id={CHECKOUT_SESSION_ID})\"`\n\n*   `line_items` - This attribute represents the items the customer is purchasing. The items are displayed in the Stripe-hosted checkout page.\n*   `payment_intent_data[transfer_group]` - Use a unique string as the `transfer_group` to identify objects that are associated with each other. When Stripe automatically creates a charge for a PaymentIntent with a `transfer_group` value, it assigns the same value to the charge’s `transfer_group`.\n*   `success_url` - Stripe redirects the customer to the success URL after they complete a payment and replaces the `{CHECKOUT_SESSION_ID}` string with the Checkout Session ID. Use this to retrieve the Checkout Session and inspect the status to decide what to show your customer. You can also append your own query parameters, which persist through the redirect process. See [customize redirect behavior with a Stripe-hosted page](https://docs.stripe.com/payments/checkout/custom-success-page) for more information.\n\n[\n\n## Handle post-payment events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-post-payment-events)\n\nStripe sends a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event when the payment completes. [Use a webhook to receive these events](https://docs.stripe.com/webhooks/quickstart) and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple [payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nStripe recommends handling all of the following events when collecting payments with Checkout:\n\nThese events all include the [Checkout Session](https://docs.stripe.com/api/checkout/sessions) object. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") [status](https://docs.stripe.com/payments/paymentintents/lifecycle) changes from `processing` to `succeeded` or a failure status.\n\n[](#create-transfer)\n\nOn your server, send funds from your account to a connected account by creating a [Transfer](https://docs.stripe.com/api/transfers/create) and specifying the `transfer_group` used.\n\n`curl https://api.stripe.com/v1/transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=7000 \\  -d currency=usd \\  -d destination=  {{CONNECTED_ACCOUNT_ID}}   \\  -d transfer_group=ORDER100`\n\nTransfer and charge amounts don’t have to match. You can split a single charge between multiple transfers or include multiple charges in a single transfer. The following example creates an additional transfer associated with the same `transfer_group`.\n\n`curl https://api.stripe.com/v1/transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2000 \\  -d currency=usd \\  -d destination={{OTHER_CONNECTED_ACCOUNT_ID}} \\   -d transfer_group=ORDER100`\n\n[](#test-the-integration)\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.\n\n## Specify the settlement merchant ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe settlement merchant is dependent on the [capabilities](https://docs.stripe.com/connect/account-capabilities) set on an account and how a charge is created. The settlement merchant determines whose information is used to make the charge. This includes the statement descriptor (either the platform’s or the connected account’s) that’s displayed on the customer’s credit card or bank statement for that charge.\n\nSpecifying the settlement merchant allows you to be more explicit about who to create charges for. For example, some platforms prefer to be the settlement merchant because the end customer interacts directly with their platform (such as on-demand platforms). However, some platforms have connected accounts that interact directly with end customers instead (such as a storefront on an e-commerce platform). In these scenarios, it might make more sense for the connected account to be the settlement merchant.\n\nYou can set the `on_behalf_of` parameter to the ID of a connected account to make that account the settlement merchant for the payment. When using `on_behalf_of`:\n\n*   Charges settle in the connected account’s country and settlement currency.\n*   The fee structure for the connected account’s country is used.\n*   The connected account’s statement descriptor is displayed on the customer’s credit card statement.\n*   If the connected account is in a different country than the platform, the connected account’s address and phone number are displayed on the customer’s credit card statement.\n*   The number of days that a [pending balance](https://docs.stripe.com/connect/account-balances) is held before being paid out depends on the [delay\\_days](https://docs.stripe.com/api/accounts/create#create_account-settings-payouts-schedule-delay_days) setting on the connected account.\n\nIf `on_behalf_of` is omitted, the platform is the business of record for the payment.\n\n#### Caution\n\nThe `on_behalf_of` parameter is supported only for connected accounts with a payments capability such as [card\\_payments](https://docs.stripe.com/connect/account-capabilities#card-payments). Accounts under the [recipient service agreement](https://docs.stripe.com/connect/service-agreement-types#recipient) can’t request `card_payments` or other payments capabilities.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][price_data][product_data][name]\"=\"Restaurant delivery service\" \\  -d \"line_items[0][price_data][unit_amount]\"=10000 \\  -d \"line_items[0][quantity]\"=1 \\  -d \"payment_intent_data[on_behalf_of]\"=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"payment_intent_data[transfer_group]\"=ORDER100 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\"`\n\n## Collect fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using separate charges and transfers, the platform can collect fees on a charge by reducing the amount it transfers to the destination accounts. For example, consider a restaurant delivery service transaction that involves payments to the restaurant and to the driver:\n\n1.  The customer pays a 100 USD charge.\n2.  Stripe collects a 3.20 USD fee and adds the remaining 96.80 USD to the platform account’s pending balance.\n3.  The platform transfers 70 USD to the restaurant’s connected account and 20 USD to the driver’s connected account.\n4.  A platform fee of 6.80 USD remains in the platform account.\n\n![How a charge is divided into fees for the platform account and transfers for the connected accounts](https://b.stripecdn.com/docs-statics-srv/assets/charges_transfers.c54b814c7e6f88993bf259c8a53f03e8.png)\n\nTo learn about processing payments in multiple currencies with Connect, see [working with multiple currencies](https://docs.stripe.com/connect/currencies).\n\n## Transfer availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe default behavior is to transfer funds from the platform account’s available balance. Attempting a transfer that exceeds the available balance fails with an error. To avoid this problem, when creating a transfer, tie it to an existing [charge](https://docs.stripe.com/api/charges) by specifying the charge ID as the `source_transaction` parameter. With a `source_transaction`, the transfer request returns success regardless of your available balance. However, the funds don’t become available in the destination account until the funds from the associated charge are available to transfer from the platform account.\n\nIf the source charge has a `transfer_group` value, Stripe assigns the same value to the transfer’s `transfer_group`. If it doesn’t, then Stripe generates a string in the format `group_` plus the associated PaymentIntent ID, for example: `group_pi_2NHDDD589O8KAxCG0179Du2s`. It assigns that string as the `transfer_group` for both the charge and the transfer.\n\n#### Note\n\nYou must specify the `source_transaction` when you create a transfer. You can’t update that attribute later.\n\n`curl https://api.stripe.com/v1/transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=7000 \\  -d currency=usd \\  -d source_transaction=  {{CHARGE_ID}}   \\  -d destination=  {{CONNECTED_ACCOUNT_ID}}    `\n\nYou can get the charge ID from the [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"PaymentIntent\"):\n\n*   Get the PaymentIntent’s [latest\\_charge attribute](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge). This attribute is the ID of the most recent charge associated with the PaymentIntent.\n*   [Request a list of charges](https://docs.stripe.com/api/charges/list), specifying the `payment_intent` in the request. This method returns full data for all charges associated with the PaymentIntent.\n\nWhen using this parameter:\n\n*   The amount of the transfer must not exceed the amount of the source charge\n*   You can create multiple transfers with the same `source_transaction`, as long as the sum of the transfers doesn’t exceed the source charge\n*   The transfer takes on the pending status of the associated charge: if the funds from the charge become available in N days, the payment that the destination Stripe account receives from the transfer also becomes available in N days\n*   Stripe automatically creates a `transfer_group` for you\n*   The currency of the balance transaction associated with the charge must match the currency of the transfer\n\nAsynchronous payment methods, like ACH, can fail after a subsequent transfer request is made. For these payments, avoid using `source_transaction`. Instead, wait until a [charge.succeeded](https://docs.stripe.com/api/events/types#event_types-charge.succeeded) event is triggered before transferring the funds. If you have to use `source_transaction` with these payments, you must implement functionality to manage payment failures.\n\nWhen a payment used as a `source_transaction` fails, funds from your platform’s account balance are transferred to the connected account to cover the payment. To recover these funds, [reverse](https://docs.stripe.com/connect/separate-charges-and-transfers#reverse-transfers) the transfer associated with the failed `source_transaction`.\n\n## Transfer options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can assign any value to the `transfer_group` string, but it must represent a single business action. You can also make a transfer with neither an associated charge nor a `transfer_group`—for example, when you must pay a provider but there’s no associated customer payment.\n\n#### Note\n\nThe `transfer_group` only identifies associated objects. It doesn’t affect any standard functionality. To prevent a transfer from executing before the funds from the associated charge are available, use the transfer’s `source_transaction` attribute.\n\nTransfer and charge amounts don’t have to match. You can split a single charge between multiple transfers or include multiple charges in a single transfer. You can perform transfers and charges in any order.\n\nBy default, a transfer request fails when the amount exceeds the platform’s [available account balance](https://docs.stripe.com/connect/account-balances). You can instead validate the transfer amount against its associated charge [by specifying that charge as the transfer’s source\\_transaction](#transfer-availability). In that case, the transfer request automatically succeeds but isn’t executed until the funds from that charge are available in the platform account.\n\n#### Note\n\nIf you use separate charges and transfers, take that into account when planning your [payout](https://docs.stripe.com/payouts \"payout\") schedule. Automatic payouts can interfere with transfers that don’t have a defined `source_transaction`.\n\n## Issue refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund charges created on your platform using its secret key. However, refunding a charge has no impact on any associated transfers. It’s up to your platform to reconcile any amount owed back to it by reducing subsequent transfer amounts or by [reversing transfers](#reversing-transfers).\n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d charge=  {{CHARGE_ID}}    `\n\n## Reverse transfers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConnect supports the ability to [reverse transfers](https://docs.stripe.com/api#create_transfer_reversal) made to connected accounts, either entirely or partially (by setting an `amount` value). Use transfer reversals only for refunds or disputes related to the charge, or to correct errors in the transfer.\n\n`curl https://api.stripe.com/v1/transfers/`\n\n`{{TRANSFER_ID}}`\n\n`/reversals \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d amount=7000`\n\nTransfer reversals add the specified (or entire) amount back to the platform’s available balance, reducing the connected account’s available balance accordingly. It is only possible to reverse a transfer if the connected account’s available balance is greater than the reversal amount or has [connected reserves](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances) enabled.\n\nIf the transfer reversal requires a currency conversion, and the reversal amount would result in a zero balance after the conversion, it returns an error.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Working with multiple currencies](https://docs.stripe.com/connect/currencies)\n*   [Statement descriptors with Connect](https://docs.stripe.com/connect/statement-descriptors)\n*   [Understanding Connect account balances](https://docs.stripe.com/connect/account-balances)",
    "title": "Create separate charges and transfers | Stripe Documentation",
    "description": "Create charges on your platform account and transfer funds to multiple connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/instant-payouts",
    "markdown": "# Instant Payouts for Connect marketplaces and platforms\n\n## Offer your users instant access to their funds.\n\nWith Instant Payouts, Connect platforms and marketplaces can allow their users to access their balances immediately following a successful charge. Instant Payouts are available at any day or time, including weekends and holidays, and funds typically settle in the associated bank account within 30 minutes.\n\nYou can use Instant Payouts to:\n\n*   Attract and retain new users\n*   Realize additional revenue by [assessing a fee](#monetization-and-fees)\n\nFunds acquired from card payments are available for Instant Payouts as soon as the charge is complete. ACH or bank debits are only available for Instant Payouts after the payment has settled.\n\n## Eligible connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInstant Payouts are only available to connected accounts in the same country as the platform and must be in the local currency. For example, an Instant Payout to a Canadian business must be through a Canadian platform and must be in CAD.\n\n### External Account eligibility![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo receive Instant Payouts, a user must have an eligible External Account. Eligible accounts vary by country.\n\nIf you’re responsible for connected accounts that might not be able to refund negative balances, including Custom and Express accounts, you might need to enable Stripe-hosted onboarding and dashboard interfaces to collect debit card details. To enable this, navigate to your [External Account settings](https://dashboard.stripe.com/settings/connect/payouts/external_accounts) and select **Yes** under **Allow debit cards?**.\n\nYou can verify Instant Payout eligibility for your user by calling the [External Accounts API](https://docs.stripe.com/api/external_account_bank_accounts/list) with the Connected Account ID. The response returns the account’s 10 most recently active External Accounts, and those with `instant` in the `available_payout_methods` parameter are eligible for Instant Payouts. You can paginate through the results if you need to review more than the default display of 10.\n\nCheck eligibility response\n\n`{   \"object\": \"list\",   \"data\": [     {       \"object\": \"bank_account\",       \"available_payout_methods\": [         \"standard\",         \"instant\"       ],       ...     }   ], }`\n\n### Invite users to add eligible accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your user doesn’t have an External Account eligible for Instant Payouts, you can prompt them to add an eligible account through the [Account API](https://docs.stripe.com/api/accounts/update#update_account-external_account).\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d external_account=  {{BANK_ACCOUNT_TOKEN_ID}}`\n\n## Monetization and fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome marketplaces and platforms choose to monetize Instant Payouts, offering the convenience for a fee. If you monetize Instant Payouts, Stripe supports two methods of fee collection: Application Fees and account debits\n\n### Application Fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith [Application Fees](https://docs.stripe.com/api/application_fees), Stripe collects the fee you determine and initiates the Instant Payout synchronously. Stripe recommends applying an application fee because it’s a single, seamless transaction:\n\n*   Users can’t pay out more than their available balance\n*   Fees can be refunded through the API or the Dashboard\n*   Monetization options include fixed or variable fees with minimums and maximums\n*   Fees are paired to your Instant Payouts revenue with the [Payout Object](https://docs.stripe.com/api/payouts/object), helping with reporting and reconciliation. You can view your collected fees in the [Payments tab](https://dashboard.stripe.com/connect/application_fees) on the Dashboard\n\nTo use Application Fees, set your pricing structure using the [Dashboard](https://dashboard.stripe.com/settings/connect/payouts/instant-payouts).\n\n#### Caution\n\nApplication Fees for Instant Payouts rely on the [Balance API net-of-fees](https://docs.stripe.com/api/balance/balance_object#balance_object-instant_available-net_available) field. Turning this on without using the new field could break your API integration.\n\n### Account Debits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can [directly debit](https://docs.stripe.com/connect/account-debits) your connected account’s Stripe balance and credit your platform account’s Stripe balance to collect fees. After the Instant Payout, call the [Charge API](https://docs.stripe.com/api#create_charge), specifying the connected account ID as the `source` parameter. Consider the following limitations when using account debits to collect Instant Payout fees:\n\n*   You must get legally binding consent from your connected accounts.\n*   Account debits carry an [additional cost](https://stripe.com/connect/pricing).\n*   Debiting an account can’t make the connected account balance become negative unless you have [reserves enabled](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances) (on by default for all new platforms created after January 31, 2017) and have a bank account in the same currency as the debit.\n*   If the connected account has already paid out their available balance in full, you might be delayed in collecting the fee.\n*   Reconciliation requires maintaining an internal database of debits and related payouts.\n\n## Initiate an Instant Payout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can initiate Instant Payouts either manually on your users’ behalf or you can use the Stripe APIs to compose user interfaces to allow your users to initiate an Instant Payout. In circumstances where you initiate Instant Payouts on your users’ behalf, you may only do so in accordance with instructions and authorizations given by your users.\n\n1.  Call [retrieve balance](https://docs.stripe.com/api/balance/balance_retrieve), expanding [instant\\_available-net\\_available](https://docs.stripe.com/api/balance/balance_object#balance_object-instant_available-net_available).\n\nThe property `instant_available.net_available` is the connected account’s instant balance net of platform fees for each instantly available destination. You must use this field if you’re monetizing with [Application Fees](#application-fees). This amount is calculated from the platform’s Application Fee pricing structure set in the Dashboard.\n\nThe property `instant_available.amount` is the connected account’s gross balance, not including any platform fees.\n\nThe following example shows a platform setting 2% pricing for any USD Instant Payout:\n\n`curl -G https://api.stripe.com/v1/balance \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"expand[]\"=\"instant_available.net_available\"`\n\nRetrieve balance response\n\n`{   \"object\": \"balance\",   \"available\": [     {       \"amount\": 500,       \"currency\": \"usd\",       \"source_types\": {         \"card\": 500       }     }   ],   \"instant_available\": [     {       \"amount\": 500,       \"currency\": \"usd\",       \"net_available\": [         {           \"amount\": 490,           \"destination\": \"ba_abc123\",           \"source_types\": {             \"card\": 490           }         }       ],       \"source_types\": {         \"card\": 500       }     }   ],   ... }`\n\n#### Note\n\nFunds from card charges are available immediately, but funds from bank debits (such as ACH) aren’t available immediately.\n\nKey considerations:\n\n*   `net_available` only appears when included as an [expanded parameter](https://docs.stripe.com/expand).\n*   `net_available` only appears for connected accounts. You’ll receive an error expanding this for your platform.\n*   A hash in `net_available` only appears for instantly-available external accounts. External accounts that aren’t valid instant payouts destinations won’t appear.\n*   External accounts can have different `net_available` balances based on external account properties and platform-set pricing rules.\n\n1.  Call [create payout](https://docs.stripe.com/api/payouts/create) with `method=instant`. Use the amount field corresponding with your monetization strategy, either `instant_available.amount` or `instant_available.net_available[0].amount`. Use the `destination` from the balance endpoint to pay out to an intended external account.\n\n`curl https://api.stripe.com/v1/payouts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=490 \\  -d currency=usd \\  -d method=instant \\  -d destination=  {{BANK_ACCOUNT_TOKEN_ID}}    `\n\n#### Caution\n\nInstant payouts to ineligible external accounts will fail, so [confirm eligibility](#external-account-eligibility) before surfacing the capability to your connected accounts.\n\n1.  View your [application fee](https://docs.stripe.com/api/application_fee/retrieve) that was created by the payout.\n\n`curl https://api.stripe.com/v1/application_fees/`\n\n`{{APPLICATION_FEE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\n## Eligibility and daily volume limits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour account has a maximum amount it can pay out instantly per day across all connected accounts. Your users can’t initiate Instant Payouts after you reach your daily limit. Daily limits reset at midnight US Central Time (CT).\n\n## Pricing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIrrespective of your monetization decisions, Stripe charges marketplaces and platforms a 1% fee for all Instant Payouts. Each Instant Payout transaction has a minimum and maximum amount dependent on the currency. These fees are assessed as part of your overall Connect fees.\n\n| Country | Instant Payout Minimum | Instant Payout Maximum |\n| --- | --- | --- |\n| US  | 0.50 USD | 9,999 USD |\n| Canada | 0.60 CAD | 9,999 CAD |\n| Singapore | 0.50 SGD | 9,999 SGD |\n| United Kingdom | 0.40 GBP | 9,999 GBP |\n| Australia | 0.50 AUD | 9,999 AUD |\n\n## Manage risk and eligibility![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen platforms and marketplaces are liable for losses, you’re liable for uncovered negative balances due to refunds or disputes.\n\nStripe recommends setting risk parameters to protect your platform from unintended losses. We provide a number of [best practices for managing fraud and risk](https://docs.stripe.com/connect/risk-management/best-practices#fraud), such as setting trust thresholds like the following:\n\n*   Minimum processing volume\n*   Days active\n*   Chargeback rate\n\nStripe has tools to help manage eligibility– if you’re interested, [contact us](https://support.stripe.com/?contact=true).\n\n## Marketing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour marketing of Instant Payouts to Connected Accounts must clearly and conspicuously disclose any fees you intend to apply for Instant Payouts.\n\nMake sure your marketing is consistent with Stripe’s marketing of the product, which states that: “You can request Instant Payouts 24/7, including weekends and holidays, and funds typically appear in the associated bank account within 30 minutes”. Some Instant Payouts might not settle within 30 minutes, and instead might take longer to be credited to the relevant bank account.",
    "title": "Instant Payouts for Connect marketplaces and platforms | Stripe Documentation",
    "description": "Offer your users instant access to their funds.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/cross-border-payouts",
    "markdown": "# Cross-border payouts | Stripe DocumentationThe Stripe Docs logo\n\n## Cross-border payoutsUS only\n\n## Transfer and pay out funds around the world.\n\nCross-border [payouts](https://docs.stripe.com/payouts \"payout\") enable you to pay sellers, freelancers, content creators, and service providers in their local currencies. You can transfer funds to connected accounts in other countries with your existing platform account and charge configuration.\n\n## Fund flow restrictions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following fund flows are generally supported in countries for cross-border payouts:\n\n*   [Separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) without the `on_behalf_of` parameter\n*   [Top-ups and transfers](https://docs.stripe.com/connect/top-ups)\n*   [Destination charges](https://docs.stripe.com/connect/destination-charges)\n\nDirect charges and destination charges _with_ the `on_behalf_of` parameter aren’t supported. However, some countries have additional limitations.\n\nFor Brazil, [India](https://support.stripe.com/questions/stripe-india-support-for-marketplaces), and [Thailand](https://support.stripe.com/questions/stripe-thailand-support-for-marketplaces), only the following fund flows are supported:\n\n*   [Separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) without the `on_behalf_of` parameter\n*   Top-up and transfers\n\n## Supported countries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCross-border payouts enable US platforms using separate charges and transfers, destination charges, or top-ups to pay out to connected accounts in the following countries:\n\nAlbania\n\nAlgeriaPreview\n\nAngolaPreview\n\nAntigua & Barbuda\n\nArgentina\n\nArmenia\n\nAustralia\n\nAustria\n\nAzerbaijanPreview\n\nBahamas\n\nBahrain\n\nBangladeshPreview\n\nBelgium\n\nBenin\n\nBhutanPreview\n\nBolivia\n\nBosnia & Herzegovina\n\nBotswana\n\nBrunei\n\nBulgaria\n\nCambodia\n\nCanada\n\nChile\n\nColombia\n\nCosta Rica\n\nCôte d’Ivoire\n\nCroatia\\*\n\nCyprus\n\nCzech Republic\\*\n\nDenmark\n\nDominican Republic\n\nEcuador\n\nEgypt\n\nEl Salvador\n\nEstonia\n\nEthiopia\n\nFinland\n\nFrance\n\nGabonPreview\n\nGambia\n\nGermany\n\nGhana\n\nGreece\n\nGuatemala\n\nGuyana\n\nHong Kong\n\nHungary\n\nIceland\\*\n\nIndia\n\nIndonesia\n\nIreland\n\nIsrael\n\nItaly\n\nJamaica\n\nJapan\n\nJordan\n\nKazakhstanPreview\n\nKenya\n\nKuwait\n\nLaosPreview\n\nLatvia\n\nLiechtenstein\\*\n\nLithuania\n\nLuxembourg\n\nMacao SAR China\n\nMadagascar\n\nMalaysia\n\nMalta\n\nMauritius\n\nMexico\n\nMoldova\n\nMonaco\n\nMongolia\n\nMorocco\n\nMozambiquePreview\n\nNamibia\n\nNetherlands\n\nNew Zealand\n\nNigerPreview\n\nNigeria\n\nNorth Macedonia\n\nNorway\n\nOman\n\nPakistan\n\nPanama\n\nParaguay\n\nPeru\n\nPhilippines\n\nPoland\n\nPortugal\n\nQatar\n\nRomania\n\nRwanda\n\nSan MarinoPreview\n\nSaudi Arabia\n\nSenegal\n\nSerbia\n\nSingapore\n\nSlovakia\n\nSlovenia\n\nSouth Africa\n\nSouth Korea\n\nSpain\n\nSri Lanka\n\nSt. Lucia\n\nSweden\n\nSwitzerland\\*\n\nTaiwan\n\nTanzania\n\nThailand\n\nTrinidad & Tobago\n\nTunisia\n\nTurkey\n\nUnited Arab Emirates\n\nUnited Kingdom\n\nUruguay\n\nUzbekistan\n\nVietnam\n\n\\* Bank accounts in countries with an asterisk (\\*) can only receive Euro (EUR) payouts.\n\n#### Note\n\nStripe might pause payouts to countries in the preview program while any issues are resolved. We don’t provide advance notice to you as the owner of the platform or to the owners of your connected accounts.\n\nSome countries have [special requirements](https://docs.stripe.com/connect/cross-border-payouts/special-requirements) for payments received from outside their country’s borders, or limitations on the supported fund flows. Those countries might also have higher [minimum payout amounts](https://docs.stripe.com/payouts#cbp-minimum-payout-amounts).\n\nStripe isn’t responsible for providing direct support for accounts on the [recipient service agreement](https://docs.stripe.com/connect/service-agreement-types#recipient). However, the platform can reach out to Stripe for support for these accounts.\n\n## Restrictions and requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The platform must be in the US.\n*   Funds must come from separate charges and transfers, destination charges without `on_behalf_of` (OBO), or top-ups.\n*   The platform must be the business of record. Consequently, [destination charges with `on_behalf_of` (OBO)](https://docs.stripe.com/connect/destination-charges#settlement-merchant) aren’t supported.\n*   Connected accounts must onboard under the [recipient service agreement](https://docs.stripe.com/connect/service-agreement-types#recipient). That means transfers to `recipient` accounts take an extra 24 hours to become available in the connected account’s balance.\n*   US connected accounts don’t support cross-border payouts; onboard US connected accounts using the full [terms of service](https://docs.stripe.com/connect/service-agreement-types).\n*   You can’t make cross-border [instant payouts](https://docs.stripe.com/connect/instant-payouts).\n\nIn addition to businesses [prohibited on Stripe](https://stripe.com/legal/restricted-businesses), you can’t use cross-border payouts for:\n\n*   Crowdfunding\n*   Donations or fund contributions\n*   Non-fungible tokens (NFTs) minting and sales\n\nThe onboarding specifications for cross-border payouts vary by destination country. To learn more, see:\n\n*   [Required verification information](https://docs.stripe.com/connect/required-verification-information)\n*   [Supported settlement currencies](https://docs.stripe.com/connect/payouts-connected-accounts#supported-settlement)\n*   [Bank account formats](https://docs.stripe.com/connect/payouts-bank-accounts)",
    "title": "Cross-border payouts | Stripe Documentation",
    "description": "Transfer and pay out funds around the world.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/crypto-payouts",
    "markdown": "# Crypto payouts | Stripe DocumentationThe Stripe Docs logo\n\n## Crypto payoutsBeta\n\n## Learn how to enable crypto payouts on your platform.\n\n#### Beta\n\nAccess to Crypto payouts is currently limited to beta users. If you’re interested in trying it out, fill out the [interest form](https://stripe.com/use-cases/crypto#request-invite) and select **Paying out third parties in crypto**.\n\nCrypto payouts enable your platform to pay out in crypto, starting with USDC. You can use crypto payouts with your existing integration to avoid managing crypto yourself—your platform’s funds can remain in fiat currency, and Stripe handles converting to crypto and then paying it out.\n\n## Supported countries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCrypto payouts enable platforms in the US to pay out to connected accounts in the following countries:\n\nArmenia\n\nAustria\n\nAzerbaijan\n\nBahrain\n\nBenin\n\nBhutan\n\nBosnia & Herzegovina\n\nBrunei\n\nBulgaria\n\nCanada\n\nCroatia\n\nCyprus\n\nCzech Republic\n\nDenmark\n\nDjibouti\n\nDominica\n\nEcuador\n\nEl Salvador\n\nEstonia\n\nFinland\n\nFrance\n\nGambia\n\nGermany\n\nGhana\n\nGreece\n\nGrenada\n\nGuatemala\n\nHong Kong\n\nHungary\n\nIndia\n\nIreland\n\nJamaica\n\nJapan\n\nKuwait\n\nLatvia\n\nLiechtenstein\n\nLithuania\n\nMalta\n\nMauritius\n\nMoldova\n\nMontenegro\n\nNetherlands\n\nNew Zealand\n\nNiger\n\nNorway\n\nOman\n\nPanama\n\nPhilippines\n\nPoland\n\nPortugal\n\nRomania\n\nSamoa\n\nSan Marino\n\nSenegal\n\nSingapore\n\nSlovakia\n\nSlovenia\n\nSouth Korea\n\nSpain\n\nSt. Lucia\n\nSt. Vincent & Grenadines\n\nSweden\n\nSwitzerland\n\nTunisia\n\nUnited Kingdom\n\nUnited States\n\nCrypto payouts aren’t currently available in New York or Hawaii.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  **Activated US Platform**: Your Platform must be in the US and activated. You can activate it by [registering your platform](https://dashboard.stripe.com/connect/tasklist), [activating your account](https://dashboard.stripe.com/account/onboarding), and [completing the platform profile](https://dashboard.stripe.com/connect/settings/profile).\n2.  **Individual recipients**: Recipients paid in crypto must be individuals or sole proprietors. Paying companies and non-profits in crypto isn’t currently supported.\n3.  **Express Dashboard access**: To pay an individual in crypto, create a connected account for them with access to the [Express Dashboard](https://docs.stripe.com/connect/express-dashboard). They can link a crypto wallet and choose their preferred currency in this Dashboard.\n4.  **Pay with the Transfers API**: You must use the [Transfers API](https://docs.stripe.com/api/transfers) within your integration to pay in crypto. Transfers to connected accounts with linked crypto wallets are converted from fiat to USDC, enabling you to pay in USDC while your platform balance stays in fiat. If you haven’t built an integration yet, you can pay in crypto using a [no-code](https://docs.stripe.com/connect/add-and-pay-out-guide?dashboard-or-api?dashboard-or-api=dashboard) or [programmatic integration](https://docs.stripe.com/connect/add-and-pay-out-guide?dashboard-or-api?dashboard-or-api=api).\n\n## Paying out in crypto with Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSellers, freelancers, content creators, and service providers around the world are increasingly looking to be paid directly in crypto. Being paid in crypto helps them access international platforms that otherwise could not support them, or because they regularly use crypto and often convert funds from fiat. With crypto payouts, you can now support these users without writing a single line of code.\n\n### How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you opt in to crypto payouts and provide your users access to the Express Dashboard, your users can link a crypto wallet with their account and set their default currency to USDC. Your users can link a crypto wallet using the Express Dashboard.\n\nWhen a user links a crypto wallet, they immediately see a new USDC balance on their connected account. The USDC balance works like any other local currency balance. You can Transfer funds into the balance and the funds are paid out to their linked crypto wallet instead of their bank account. When you create [Transfers](https://docs.stripe.com/api/transfers) in USD, they automatically convert to the preferred currency of your recipients. This simplifies your integration and enables you to have a unified integration across fiat and crypto payouts.\n\nConnected account users can view account information, such as their crypto account balance and upcoming payouts, using the Express Dashboard. Stripe handles all compliance requirements, and generates tax forms for recipients paid in crypto.\n\n### Getting started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter Stripe approves your use case, your users can link a crypto wallet to their account and set USDC as their preferred currency. For any user with a default currency set to USDC, Stripe automatically converts Transfers to USDC.",
    "title": "Crypto payouts | Stripe Documentation",
    "description": "Learn how to enable crypto payouts on your platform.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/alternative-currency-payouts",
    "markdown": "# Alternative Currency Payouts for Connect marketplaces and platforms\n\n## Offer your connected accounts the ability to pay out in alternative currencies.\n\nAlternative Currency Payouts allow your connected accounts to maintain balances and make payouts domestically in currencies other than their primary currency, or make payouts non-domestically in the account’s local currency. Connected accounts can hold and payout funds in up to 18 supported currencies needed to pay suppliers, process refunds, and so on, without having to re-convert funds.\n\n## Enable Alternative Currency Payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEnable Alternative Currency Payouts in the [Connect payouts settings](https://dashboard.stripe.com/settings/connect/payouts) of the Dashboard. Your account must be in a supported region to access these settings.\n\nAfter you enable Alternative Currency Payouts, your users can access all alternative currencies that are supported in their region. For a full list of supported currencies, see [supported alternative currencies](https://docs.stripe.com/payouts/alternative-currencies#alternative-currency-payouts-fees).\n\n#### Note\n\nConnected accounts must be in the same region as your platform to use Alternative Currency Payouts. For example, both you and your connected account could be in Australia, or if you’re in Europe, your connected account could be in any European country.\n\nYou can prevent new connected accounts from using Alternative Currency Payouts by disabling it with the same settings in the Dashboard. However, this doesn’t disable it for connected accounts that are already using it. To disable Alternative Currency Payouts for connected accounts that are already using it, use the [Delete external bank accounts API](https://docs.stripe.com/api/external_account_bank_accounts/delete) to remove the connected account’s external accounts that are in an alternative currency or offshore.\n\n## Add external accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you enable Alternative Currency Payouts, your connected accounts can start using it by adding an alternative currency external account.\n\nIf your connected account has access to the Express Dashboard, you can send them a [Login Link](https://docs.stripe.com/api/account/create_login_link) to update their payout methods to add an alternative currency external account.\n\nAfter your connected account has an external account in an alternative currency, charges presented in that currency accrue towards the alternative currency’s balance. Your connected accounts can pay out their alternative currency balances in the same way as a primary currency balance. However, each supported currency is subject to a payout minimum and fee, as described in the following section.\n\nTo learn more about processing charges in multiple currencies with Connect, see [Working with multiple currencies](https://docs.stripe.com/connect/currencies).\n\n## Pricing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe charges platforms a 1% fee for all Alternative Currency Payouts made by their users. Each currency has a minimum fee. For a full list of fees, see the [supported alternative currencies table](https://docs.stripe.com/payouts/alternative-currencies#alternative-currency-payouts-fees).\n\nStripe deducts your connected accounts’ Alternative Currency Payouts fees from your platform balance in the alternative currency. For example, if your connected account makes an alternative currency payout in USD, we charge the fee to your platform balance in USD when possible. If your platform account doesn’t support the payout currency, Stripe converts the fee to your default currency and deducts it from your primary balance. See [conversion on Stripe fees](https://docs.stripe.com/currencies/conversions#conversion-stripe-fees) for more details.\n\n## Request early access![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following form to request updates on beta features as we expand Alternative Currency Payouts features and regional support.",
    "title": "Alternative Currency Payouts for Connect marketplaces and platforms | Stripe Documentation",
    "description": "Offer your connected accounts the ability to pay out in alternative currencies.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/dynamic-payment-methods",
    "markdown": "# Upgrading to dynamic payment methods\n\n## Increase conversion with dynamic payment methods for existing platforms.\n\nThis guide provides instructions on how to integrate dynamic payment methods for existing platforms. If you need help setting up a new platform, refer to either the [Collect payments then pay out](https://docs.stripe.com/connect/collect-then-transfer-guide) guide or the [Enable other businesses to accept payments directly](https://docs.stripe.com/connect/enable-payment-acceptance-guide) guide.\n\n## Integration instructions for dynamic payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following form to select your integration. If you need help determining your platform setup, including checkout solution, connected account types, and charge types, refer to [Create a charge](https://docs.stripe.com/connect/charges).\n\n[](#enable-payment-methods-connected-accounts)\n\nIf necessary, consult the following resources for payment method information:\n\n*   [A guide to payment methods](https://stripe.com/payments/payment-methods-guide#choosing-the-right-payment-methods-for-your-business) for help in choosing the right payment methods for your platform.\n*   [Country availability for payment methods](https://docs.stripe.com/connect/payment-method-available-countries) for a list of payment methods and the countries they’re available in.\n*   [Payment method and product support](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) table to make sure your chosen payment methods work for your Stripe products and payments flows.\n\nStripe enables certain payment methods for your connected accounts by default. Visit the [Manage payment methods for your connected accounts](https://dashboard.stripe.com/settings/payment_methods/connected_accounts) page in your Dashboard to configure which payment methods your connected accounts accept. Changes to default settings apply to all new and existing connected accounts.\n\nFor each payment method, you can select one of the following dropdown options:\n\n|     |     |\n| --- | --- |\n| **On by default** | Your connected accounts accept this payment method during checkout. Some payment methods can only be off or blocked, this is because the owners of your platform’s connected accounts must activate them in their Dashboard settings page. |\n| **Off by default** | Your connected accounts don’t accept this payment method during checkout. If you allow the owners of your platform’s connected accounts to manage their own payment methods in their Dashboard, however, they have the ability to turn it on. |\n| **Blocked** | Your connected accounts don’t accept this payment method during checkout. If you allow the owners of your platform’s connected accounts to manage their own payment methods in their Dashboard, they don’t have the option to turn it on. |\n\n![Dropdown options for payment methods, each showing an available option (blocked, on by default, off by default)](https://b.stripecdn.com/docs-statics-srv/assets/dropdowns.ef651d721d5939d81521dd34dde4577f.png)\n\nPayment method options\n\nIf you make a change to a payment method, you must click **Review changes** in the bottom bar of your screen and **Save and apply** to update your connected accounts.\n\n![Dialog that shows after clicking Save button with a list of what the user changed](https://b.stripecdn.com/docs-statics-srv/assets/dialog.a56ea7716f60db9778706790320d13be.png)\n\nSave dialog\n\n[](#allow-connected-accounts-manage)\n\nStripe recommends that you allow the owners of your platform’s connected accounts to customize their own payment methods from the Dashboard. If you enable this option, then each connected account with Stripe Dashboard access can log in to their Dashboard and view their [Payment methods](https://dashboard.stripe.com/settings/payment_methods) page. The Dashboard displays the set of payment method defaults you applied to all new and existing connected accounts. The owners of your platform’s connected accounts can override these defaults, excluding payment methods you have blocked.\n\nCheck the **Account customization** checkbox to enable this option. You must click **Review changes** in the bottom bar of your screen and then select **Save and apply** to update this setting.\n\n![Screenshot of the checkbox to select when allowing connected owners to customize payment methods](https://b.stripecdn.com/docs-statics-srv/assets/checkbox.275bd35d2a025272f03af029a144e577.png)\n\nAccount customization checkbox\n\n[](#integrate)\n\nPreviously, you might have used the `payment_method_types` parameter when defining your Checkout session to accept different payment methods. To begin managing your payment methods in the Dashboard, remove this parameter from your integration.\n\nAfter you remove the `payment_method_types` parameter from your integration, some payment methods turn on automatically, including cards and wallets. The `currency` parameter restricts the payment methods that are shown to the customer during the checkout session.\n\n`Stripe::Checkout::Session.create({ mode: 'payment', # Remove the payment_method_types parameter # to manage payment methods in the Dashboard payment_method_types: ['card'], line_items: [{   price_data: {   # The currency parameter determines which   # payment methods are used in the Checkout Session.     currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })`\n\n[](#collect-shipping-address)\n\nIf you collect [shipping addresses](https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout), you need to define which countries you can ship to when you create the Checkout session. Specify the two-letter ISO country codes in the `shipping_address_collection.allowed_countries` [parameter](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-shipping_address_collection-allowed_countries).\n\nYou can optionally add shipping rates with the `shipping_options` [parameter](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-shipping_options).\n\nIf you use Afterpay or Clearpay, you must collect shipping addresses, but you don’t need to specify shipping rates for those payment methods.\n\n#### Note\n\nShipping address collection is required to use Afterpay or Clearpay as a payment method in Checkout, but shipping rates aren’t.\n\n[](#test)\n\n[Test your integration](https://docs.stripe.com/payments/dashboard-payment-methods#testing) to ensure it performs as you expect. Log in to one of your test accounts and navigate to **Payment methods** settings to view your settings for your connected accounts. Test your checkout flow with your test API key and a test account. If a payment method you expect to be available is not available, check the [payment method product support table](https://docs.stripe.com/connect/account-capabilities#payment-methods) to make sure your products and merchants are in a compatible currency and country.\n\n[](#auto-payment)\n\nYour connected accounts with Stripe Dashboard access are able to use most payment methods by default; however, some payment methods (such as Alipay and WeChat Pay) require your users to manually activate the payment method in their Dashboard. Confirm which payment methods require manual activation using the [payment method capabilities](https://docs.stripe.com/connect/account-capabilities#payment-methods) table. If the **Available by default** column reads **no**, the payment method requires manual activation.\n\nIf you allow the owners of your platform’s connected accounts to manage payment methods, then instruct them to enable these payment methods from their [Dashboard](https://dashboard.stripe.com/settings/payment_methods).\n\n![Screenshot of connected account payment method customization through Dashboard showing available payment methods as on and available.](https://b.stripecdn.com/docs-statics-srv/assets/turn-on-payments.afef26196ebae8f5564d328d6ba73b92.png)\n\nPayment method customization\n\nIf you don’t allow the owners of your platform’s connected accounts to customize payment methods, then instruct them to visit their [manual settings page](https://dashboard.stripe.com/settings/payment_methods).\n\n![Screenshot of manual settings page with payment methods listed with the option to request access, request invite, or configure.](https://b.stripecdn.com/docs-statics-srv/assets/manual-settings.db0a0c2abebb94e197e1bef683ea7db9.png)\n\nManual settings for payment methods",
    "title": "Upgrading to dynamic payment methods | Stripe Documentation",
    "description": "Increase conversion with dynamic payment methods for existing platforms.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/building-extensions",
    "markdown": "# Legacy extensions | Stripe DocumentationThe Stripe Docs logo\n\n## Legacy extensionsDeprecated\n\n## Learn how to build Stripe extensions, and see our Partner Directory for extensions created by our verified partners.\n\n#### Stripe Apps replaces extensions\n\nYou can no longer build new Stripe extensions. Stripe Apps replaces extensions for developing on Stripe. However, existing extensions will continue to work until 2024. If you already have an extension, we recommend migrating it to Stripe Apps.\n\n[View the Stripe Apps migration docs](https://docs.stripe.com/stripe-apps/migrate-extension)\n\n#### Note\n\nYou can now automatically send your Stripe data and reports to Snowflake or Amazon Redshift in a few clicks with Stripe Data Pipeline. [Learn more](https://stripe.com/data-pipeline).\n\nStripe’s products and features allow companies to accept online payments, but offer other reasons to integrate as well. Companies like [Baremetrics](https://stripe.com/partners/baremetrics) and [Segment](https://stripe.com/partners/segmentsources) build on top of Stripe to provide their services to Stripe accounts with a Standard dashboard.\n\nBuilding an extension on Stripe consists of four steps:\n\n1.  [Configure OAuth and specify a redirect URI](#configure-oauth-redirect).\n2.  [Configure branding settings](#configure-branding).\n3.  [Create an OAuth link for your users](#create-oauth-link).\n4.  [Use the API on behalf of connected accounts](#use-api).\n\nYou’re also required to add business details to activate your account, if you haven’t already.\n\nTo get started, visit the [Extensions page](https://dashboard.stripe.com/test/extensions) located in the Developers tab of the Stripe dashboard.\n\n[](#configure-oauth-redirect)\n\nYou can configure this setting in the **Integration** section of the [Extensions Settings](https://dashboard.stripe.com/test/settings/extensions) page.\n\nStart your integration by toggling the button to enable onboarding Standard accounts with OAuth. Extensions shouldn’t use OAuth with Express accounts.\n\nStripe provides a unique identifier for your extension called a `client_id`. You set the `redirect_uri` and users are directed to that page after they connect their accounts. You must specify all redirect URIs in your extension settings. The development and production versions of these two values make [testing](https://docs.stripe.com/connect/testing#using-oauth) easier. Take note of these values so you can create an OAuth link in the third step.\n\n[\n\n## Configure branding settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#configure-branding)\n\nYou can customize how your business appears to your users in the **Branding** section of the [Extensions Settings](https://dashboard.stripe.com/test/settings/extensions) page.\n\nUsers see your logo when they link their Stripe accounts to your application. After they link their accounts, your icon displays in their connected applications list.\n\n[](#create-oauth-link)\n\nStripe offers a standard OAuth 2.0 flow to connect to Stripe accounts. Using the `client_id` and `redirect_uri` values from step one, you can create an OAuth link for your users to onboard with. We recommend showing this link with a **Connect with Stripe** button that sends users to the `authorize_url` endpoint:\n\nHere’s an example of how you can display the above link to your user, along with the [Connect with Stripe button](https://d37ugbyn3rpeym.cloudfront.net/docs/connect/Connect-with-Stripe-button.zip):\n\n[Connect with](https://connect.stripe.com/oauth/authorize?response_type=code&client_id=ca_FkyHCg7X8mlvCUdMDao4mMxagUfhIwXb&scope=read_write)\n\nAfter the user clicks the link on your site, we redirect them to a page to allow or deny the connection to your extension. Stripe’s authorization flow prompts them to either choose an existing account to connect with your extension, or create a new one.\n\nAfter the user connects their existing or newly created account to your extension, we redirect them back to the URL you set as your extension’s `redirect_uri` .\n\nAt the end of the OAuth workflow, you’re provided with authorization credentials for the user’s account:\n\n`{   ...   \"stripe_user_id\": \"acct_0123456789\",   ... }`\n\nYou need to store the `stripe_user_id` so you can identify user accounts.\n\n[](#use-api)\n\nAfter users link their Stripe accounts to your application, you can make [API requests](https://docs.stripe.com/api) on their behalf. To perform API requests, you need your extension account’s secret key, and a `Stripe-Account` header that identifies the account that you’re making the request for. All Stripe libraries support this style of authentication on a per-request basis.\n\n### Fetching stored data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStored data includes information like charges and customer details. With `read_only` access, you can make most `GET` requests in Stripe’s API. You can retrieve a single object (for example, [retrieve a Payment Intent](https://docs.stripe.com/api/payment_intents/retrieve)) or a list of objects (for example, [list all Payment Intents](https://docs.stripe.com/api/payment_intents/list)).\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"created[lte]\"=1612048287 \\   -d \"limit\"=50 \\   -H \"Stripe-Account: {{CONNECTED_ACCOUNT_ID}}\"`\n\nWhile the API performs at a high level, repeatedly fetching large data sets slows your application’s responsiveness. We recommended storing fetched data on your side for analysis and reporting.\n\n### Listening for real-time data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn addition to stored data, you can access real-time data via [webhooks](https://docs.stripe.com/connect/webhooks). After you define an [extension webhook endpoint in your account](https://dashboard.stripe.com/account/webhooks), Stripe sends [event notifications](https://docs.stripe.com/api#events) to your endpoint for every connected account. The event object’s `account` property identifies the account where the event occurred.\n\nFor example, the event below shows that a customer was created in the `acct_0123456789` account. Again, we recommend storing this data on your side for analysis and reporting. By watching events as they occur, your application can respond faster, and you won’t need to make as many API calls.\n\n`{   \"id\": \"evt_mfLuJDQFXBZNnQ\",   \"livemode\": true,   \"object\": \"event\",   \"type\": \"customer.created\",   \"account\": \"acct_0123456789\",   \"pending_webhooks\": 2,   \"created\": 1349654313,   \"data\": {...} }`\n\n## Charging for your application ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour extension’s Stripe account can process its own charges, so you can still charge for your application with `read_only` access. After customers connect their Stripe accounts, ask for their payment details and then [create a subscription](https://docs.stripe.com/api/subscriptions/create) for them in your Stripe account. Make sure to store the created customer ID with the associated Stripe account ID, so that you can track which users are paid and active, and which ones are not.\n\nIf you create [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), you can also specify an `application_fee_percent` as a fee for your application. This is charged on top of any Stripe fees. Read the [Subscriptions](https://docs.stripe.com/connect/subscriptions) documentation to learn more.\n\n## Disconnected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsers can disconnect their accounts from your integration at any time. When this happens, Stripe sends an `account.application.deauthorized` [webhook](https://docs.stripe.com/webhooks \"webhook\"). You can use this notification to trigger cleanup on your end, such as disabling the user’s account on your site or removing their data.\n\nYou can also disconnect accounts from your integration, by making a request to the [OAuth deauthorization](https://docs.stripe.com/connect/oauth-reference#post-deauthorize) endpoint.",
    "title": "Legacy extensions | Stripe Documentation",
    "description": "Learn how to build Stripe extensions, and see our Partner Directory for extensions created by our verified partners.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/dashboard/remediation-links",
    "markdown": "# Remediation link process walkthrough | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use remediation links to collect verification information from your connected accounts.\n\nRemediation links are a no-code solution for platforms to collect verification information from their connected accounts. Platforms generate account-specific remediation links in the Dashboard, then send them to connected accounts through any communication channels, such as email, chat, in-app notifications, or support interactions. When a connected account clicks a remediation link, it takes them to a Stripe-hosted page where they can provide updated information directly to Stripe.\n\nRemediation links are active for 90 days and an account can access them multiple times. If a link expires, you can generate a new one.\n\nOnly the following [user roles](https://docs.stripe.com/get-started/account/teams/roles) have permission to generate remediation links:\n\n*   Administrator\n*   Connect Onboarding Analyst\n*   Developer\n*   Data Migration Specialist\n*   Support Associate\n*   Support Specialist\n\n#### Note\n\nYou can only generate remediation links in the Dashboard, not using the API. To use the API to direct connected accounts to onboarding, create [Account links](https://docs.stripe.com/connect/custom/onboarding?verification=hosted#stripe-hosted-onboarding), which are temporary and can only be used once.\n\nThe page that a remediation link opens depends on the account’s configuration:\n\n| Connected account has access to: | Remediation link opens: |\n| --- | --- |\n| A Stripe embedded onboarding component and embedded notification banner | A platform website page that contains the notification banner; configured in the [platform Dashboard](https://dashboard.stripe.com/settings/connect/site-links) |\n| Stripe Dashboard and no embedded onboarding or notification banner (including Standard accounts) | Account Status page in the Stripe Dashboard |\n| Express Dashboard and no embedded onboarding or notification banner (including Express accounts) | Stripe Express onboarding flow |\n| No Stripe Dashboard and no embedded onboarding or notification banner (including Custom accounts) | Stripe-hosted onboarding; account holder must create a Stripe account |\n\nThis page walks through the process of generating and sending remediation links and describes the experience of a connected account when they use a link.\n\nYou can generate a remediation link for an individual account or export a list of remediation links for multiple accounts.\n\n### Generate a link for an individual account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can generate a link for an account from the **Accounts to review** tab of your [Connect Dashboard](https://dashboard.stripe.com/connect/accounts_to_review) or from that account’s details page.\n\nOn the **Accounts to review** tab, find the account in the **Action required** list or **In review** list. Hover over the account’s overflow menu , then click the link icon .\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/remediation-links-listview.086eeab10e2d47ec1286946ba3471942.png)\n\nGenerate a remediation link from Accounts to review list\n\nIn the **Activity** section of the connected account’s details page, select the **Actions required** tab and click an issue to open its possible remediation paths. Generate the link by clicking **Send a remediation link**. If the account can’t address the issue through a remediation link, then that path doesn’t appear.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/remediation-links-connected-account-detail.86a05ab693818dc38d2376ad33ebd98d.png)\n\nGenerate a remediation link from the connected account’s details page\n\n### Export links for multiple accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOn the **Accounts to review** tab of your Connect Dashboard, filter the view to include the accounts that you want to generate remediation links for, then click **Export**. In the export dialog, select **Remediation link** and any other desired fields, then export the list of accounts.\n\n![Export a list of accounts](https://b.stripecdn.com/docs-statics-srv/assets/bulk-export-A2R.56ffa4d9f3eb55c08a1eb71ed46f0904.png)\n\nExport a list of accounts\n\nYou can send remediation links by any communication channel. Because they direct accounts to a Stripe-hosted page, we recommend that when you send a link, you inform the account that you partner with Stripe for payments. That explains why your link takes them to a Stripe-hosted page.\n\nHere’s an example of an email that a platform might use to send a remediation link:\n\n![Example of a remediation link email](https://b.stripecdn.com/docs-statics-srv/assets/email-action-required.15e5878a481c6a8726e15965bdfaffe1.png)\n\nRemediation link email\n\nThe following example scenarios help you and your support team understand remediation links from the perspective of a connected account. Select the Dashboard that’s applicable to your connected accounts.\n\n#### Note\n\nThe screenshots are representative examples that might not match the actual screens presented to your connected accounts.\n\nFor connected accounts without access to a Stripe-hosted Dashboard or to the Notification banner embedded component, including Custom accounts, remediation links take them to Stripe-hosted onboarding. To securely update account information, the account owner must create a Stripe user account. If the account owner has already clicked the remediation link and verified their identity in the current browser session, the link opens the information collection onboarding step.\n\n1.  **The account owner enters their phone number and email address**\n\nThis information establishes the identity of the person updating verification information for the connected account. We use the phone number for SMS authentication with a one-time-password. The phone number doesn’t have to match any number already associated with the account. We only use the email address as a backup authentication method. We don’t send any other emails to that address.\n\nIf the email address is associated with an existing Stripe user account, we prompt them to log in to that account using its existing password.\n\n![Phone and email form](https://b.stripecdn.com/docs-statics-srv/assets/custom-hosted-form-phone.aba39ace900df058332908895a12e362.png)\n\nEnter phone number and email address\n\n1.  **The account owner verifies the phone number**\n\nWe send a code in an SMS message to the phone number and prompt the account owner to enter it. If they access the link again in another browser session, or access another remediation link, we send a new code for re-authentication.\n\n![Phone number verification form](https://b.stripecdn.com/docs-statics-srv/assets/custom-hosted-form-sms.8caf66b1b4b13bebf8a3ffe9dfbaefb0.png)\n\nVerify the phone number\n\n1.  **The account owner verifies their identity**\n\nTo make sure that only authorized people access account information, we prompt the account owner to verify their identity by requesting details associated with the account and its representative. If they fail to enter the requested details a few times, they see the following error message:\n\n`One of the fields didn't match the information we received from [platform_name]. You can try again, or check that your information with [platform_name] is up to date.`\n\nIf the account owner has already verified their identity, or has onboarded through Stripe Express (such as to access Stripe’s Tax Reporting Dashboard), we skip this step.\n\n![Identity verification form](https://b.stripecdn.com/docs-statics-srv/assets/custom-hosted-form-identity.bbe88e8a2278a893f3490b6229f11e03.png)\n\nVerify identity\n\n1.  **The account owner provides information**\n\nAfter verifying the account owner’s identity, we present forms for entering required information.\n\nIf the account has any outstanding risk reviews, we present them first. The following is an example of a risk review form:\n\n![Example of a risk review form](https://b.stripecdn.com/docs-statics-srv/assets/custom-hosted-form-risk.1f54e301a7ad0f5946bfb011dbb44e76.png)\n\nExample risk review form\n\nAfter the forms for any risk reviews, we prompt the account owner to provide any additional information that requires updating. For example, if the statement descriptor isn’t aligned to the business, we present the screen for collecting public details including the statement descriptor, highlighting any fields with errors.\n\nAfter collecting all the information, we display a summary screen, highlighting any fields that are still outstanding or pending verification from Stripe. To update a field, they can click **Edit** in the corresponding section.\n\nIf an account owner clicks a remediation link and has no outstanding risk reviews or outstanding information requirements, they see the summary page.\n\n![The summary page](https://b.stripecdn.com/docs-statics-srv/assets/custom-hosted-summary.b6a700157643004b92918a31d3edf3d0.png)\n\nSummary page\n\n#### Note\n\nAn account owner can update information in these forms other than the required fields. If they do so, they can trigger additional reviews or verifications. For example, changing the SSN can require the account owner to re-accept the Stripe terms of service or to upload an identity document. The account owner can use the same remediation link to address any additional requirements.",
    "title": "Remediation link process walkthrough | Stripe Documentation",
    "description": "Learn how to use remediation links to collect verification information from your connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/integrate-express-dashboard",
    "markdown": "# Integrate the Express Dashboard in your platform\n\nTypically, you generate a login link URL on demand when a connected account intends to visit the Express Dashboard. For example, you include an **Open Dashboard** button in your application. When a connected account user clicks it, your application calls the API to generate a login link and redirects them to that URL.\n\n#### Security tip\n\nDon’t email, text, or otherwise send login link URLs outside of your platform. Redirect authenticated users to it only from within your platform application.\n\nWhen you redirect a connected account user to a login link, Stripe sends an SMS authentication code to their phone number. They verify their identity on the Express Dashboard login page by entering the code.\n\nIf they don’t have access to their account phone number, they can change it by clicking **I no longer have access to this phone number**. This sends a verification code to their account email. They can change the account phone number by entering the code. If the user changes the number, Stripe redirects them to the Express Dashboard login page and sends an SMS authentication code to the new number.",
    "title": "Integrate the Express Dashboard in your platform | Stripe Documentation",
    "description": "Learn how to direct your connected accounts to their Express Dashboard using login links.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/dashboard",
    "markdown": "# Manage connected accounts with the Dashboard\n\n## Learn about using the Stripe Dashboard to find and manage connected accounts.\n\nYou can use the Dashboard to inspect, support, and better understand your platform’s connected accounts. Some common tasks supported by the Dashboard include:\n\n*   [Understand and manage your Connect payments business](https://docs.stripe.com/connect/dashboard/understand-your-connect-business)\n*   [View all accounts](https://docs.stripe.com/connect/dashboard/viewing-all-accounts)\n*   [Review actionable accounts](https://docs.stripe.com/connect/dashboard/review-actionable-accounts)\n*   [Create accounts](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#creating-accounts)\n*   [Find individual accounts](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#finding-accounts)\n*   [Update account information](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#updating-accounts)\n*   [Send funds to accounts](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#sending-funds)\n\n[Viewing all accounts](https://docs.stripe.com/connect/dashboard/viewing-all-accounts) provides a high-level view of your connected accounts. By default, all accounts are displayed on the [accounts overview](https://dashboard.stripe.com/connect/accounts/overview) page, but you can filter by account status, balance, and other attributes. Filtering accounts is useful because it allows you to:\n\n*   View accounts that are restricted or have other issues that you can help resolve.\n*   View your largest accounts.\n*   View accounts based on their status.\n\nThe other workflows, like inspecting accounts and sending funds, are actions you can take on [individual accounts](https://docs.stripe.com/connect/dashboard/managing-individual-accounts). These actions are generally made after you know which accounts need to be inspected or modified.\n\nBefore viewing and making changes to accounts, learn more about the [status badges](#status-badges) displayed in the Dashboard.\n\n## Status badges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStatus badges provide a quick way to understand the status of an account. You can hover over the badges to view contextual information, and you can click the [status tabs](https://docs.stripe.com/connect/dashboard/viewing-all-accounts#tabs-workflows) to view accounts grouped by that status. Status badges include:\n\n| Status | Badge |\n| --- | --- |\n| [Restricted](#restricted) | Restricted |\n| [Restricted soon](#restricted-soon) | Restricted soon |\n| [Pending](#pending) (enabled or disabled) | Pending or Pending |\n| [Enabled](#enabled) | Enabled |\n| [Complete](#complete) | Complete |\n| [Rejected](#rejected) | Rejected |\n\n### Restricted ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Restricted** means the account has [payouts](https://docs.stripe.com/payouts \"payout\") or payments disabled. Additional information usually needs to be collected to enable these accounts. Hovering over the status badge displays:\n\n*   Which capability is disabled (payouts or payments).\n\nTo find what information is required to enable the account, navigate to the **Actions required** tab on the connected account details page.\n\n### Restricted soon ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Restricted soon** means the account has a due date for providing additional information.\n\nTo find what information is required to enable the account, navigate to the **Actions required** tab on the connected account details page.\n\n### Pending ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Pending** means the account is being reviewed or verified by Stripe. This occurs when:\n\n*   Stripe is verifying the information that was provided, such as an ID document upload.\n*   Stripe is performing a watchlist check against a list of prohibited individuals and businesses.\n*   Stripe is reviewing the account for suspected fraudulent activity.\n\nPayouts can be enabled or disabled for accounts with a pending status and requires no action on your part. Stripe automatically updates the account’s status when the review finishes.\n\n### Enabled ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Enabled** means the account is in good standing, though additional information might be required if another payment volume [threshold](https://docs.stripe.com/connect/identity-verification#verification-requirements) is reached. Hovering over the status badge displays:\n\n*   What information Stripe might request in the future.\n\nIn the account’s [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) hash, the array `eventually_due` contains at least one requirement, but payments and payouts are enabled and `current_deadline` is empty.\n\n### Complete ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Complete** means the account provided all the required information and is in good standing.\n\nIn the account’s [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) hash, the array `eventually_due` is empty.\n\n### Rejected ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Rejected** means you (the platform) or Stripe rejected the connected account. Hovering over the status badge displays:\n\n*   Whether the account was rejected by you (the platform), or by Stripe.\n\nYou can navigate to the **Actions required** tab on the connected account details page to see the reason the account was rejected. In general, accounts are rejected by Stripe if they’re suspected of fraudulent activity.\n\n## Use Platform Branding for Connected Accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs the platform, you can initialize newly created connected accounts with your platform branding settings. To do so, navigate to **Connect Settings** > **Branding** and enable **Copy Platform Branding**. After you enable it, all new accounts onboarding to your platform receive the same branding settings as your platform.\n\nUse [Account Update](https://docs.stripe.com/api/accounts/update) to update the account’s branding after creation.",
    "title": "Manage connected accounts with the Dashboard | Stripe Documentation",
    "description": "Learn about using the Stripe Dashboard to find and manage connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/charges",
    "markdown": "# Create a charge | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to create a charge and split payments between your platform and your sellers or service providers when you accept payments.\n\nTo accept a payment from a customer, you must first create a charge. The type of charge you create—[direct](#direct), [destination](#destination), or [separate charges and transfers](#separate-charges-transfers)—determines how these funds are split among all parties involved, impacts how the charge appears on the customer’s bank or billing statement (with your platform’s information or your user’s), and determines which account Stripe debits for refunds and chargebacks.\n\n## Charge types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThere are many factors to consider when choosing a charge type, as listed in the table below. Your platform’s business model is particularly important because it can affect how funds flow through Stripe. To review charge type recommendations for your business, refer to your [platform profile](https://dashboard.stripe.com/connect/settings/profile).\n\n| Charge type | Use when | Examples |\n| --- | --- | --- |\n| [Direct charges](https://docs.stripe.com/connect/direct-charges) | *   Customers directly transact with your connected account, often unaware of your platform’s existence.<br>*   The transaction involves a single user.<br>*   You’d like to choose if Stripe fees are debited from your connected accounts or your platform | *   An e-commerce platform like Shopify or Squarespace<br>*   An accounting platform that enables invoice payments like Freshbooks |\n| [Destination charges](https://docs.stripe.com/connect/destination-charges) | *   Customers transact with your platform for products or services provided by your connected account.<br>*   The transaction involves a single user.<br>*   Stripe fees are debited from your platform account. | *   A ride-hailing service like Lyft<br>*   A services platform like Thumbtack |\n| [Separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) | Any one of these instances:<br><br>*   The transaction involves multiple users.<br>*   A specific user isn’t known at the time of charge.<br>*   Transfer can’t be made at the time of charge.<br>*   Stripe fees and processing fees are debited from your platform account. | *   An e-commerce marketplace that allows a single shopping cart for goods sold by multiple businesses |\n\nYou can use a single approach, more than one approach, or switch approaches as appropriate for your organization.\n\n### Direct charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a charge directly on a connected account. Customers are often unaware of your platform’s existence. You can add an application fee to the charge which is transferred to your platform’s account balance.\n\nThis charge type is best suited for platforms providing software as a service. For example, Shopify provides tools for building online storefronts, and Thinkific enables educators to sell online courses.\n\nWith this charge type:\n\n*   You create a charge on your user’s account so the payment appears as a charge on the connected account, not in your account balance.\n*   The connected account’s balance increases with every charge.\n*   Funds always settle in the country of the connected account.\n*   Your account balance increases with application fees from every charge.\n*   The connected account’s balance is debited for refunds and chargebacks.\n*   You can choose whether to have Stripe debit fees directly from connected accounts or from your platform account.\n\n![Direct charges funds flow diagram](https://b.stripecdn.com/docs-statics-srv/assets/direct_charges.a2a8b68037ac95fe22140d6dde9740d3.svg)\n\nHow are funds routed with direct charges?\n\n#### Caution\n\n### Destination charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a charge on the platform and immediately transfers funds to a specified connected account. You decide whether some or all of those funds are transferred, and whether to deduct an application fee.\n\nThis charge type is best suited for marketplaces such as Airbnb, a home rental marketplace or Lyft, a ridesharing app.\n\nWith this charge type:\n\n*   You create a charge on your platform’s account so the payment appears as a charge on your account. Then, you determine whether some or all of those funds are transferred to the connected account (see funds flow diagrams below).\n*   Your platform account balance is debited for the cost of the Stripe fees, refunds, and chargebacks.\n\n![Destination charges balance funds flow diagram](https://b.stripecdn.com/docs-statics-srv/assets/platform_charges.6a14fd660d7433ba617e816ff09f10b5.svg)\n\nSend the balance after platform fee to your connected account.\n\n![Destination charges funds flow diagram](https://b.stripecdn.com/docs-statics-srv/assets/application_fee_amount.837aa2339469b3c1a4319672971c1367.svg)\n\nSend the full payment amount to your connected account, then charge your platform fee.\n\n#### Caution\n\nIn most scenarios, destination charges are only supported if both your platform and the connected account are in the same region (for example, both in the US). For cross-region support, you can specify the [settlement merchant](https://docs.stripe.com/connect/destination-charges#settlement-merchant) to the connected account using the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) attribute on the charge. For more information about cross-region support, see [Cross-border transfers](https://docs.stripe.com/connect/account-capabilities#transfers-cross-border).\n\n### Separate charges and transfers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate charges on your platform and split funds between multiple connected accounts, or hold them when you don’t know the specific user at the time of the charge. The charge on your platform account is decoupled from the transfer(s) to your connected accounts.\n\nThis charge type is best suited for marketplaces that need to split payments between multiple parties, such as Doordash, a restaurant delivery platform.\n\nWith this charge type:\n\n*   You create a charge on your platform’s account first. Create a separate transfer to move funds to your connected account. The payment appears as a charge on your account and there’s also a transfer to a connected account (amount determined by you), which is withdrawn from your [account balance](https://docs.stripe.com/connect/account-balances).\n*   You can transfer funds to multiple connected accounts.\n*   Your account balance is debited for the cost of the Stripe fees, refunds, and chargebacks.\n\n![Transfer funds flow diagram](https://b.stripecdn.com/docs-statics-srv/assets/charges_transfers.a95f5bf398651fba0fb303e32a742546.svg)\n\nTransfer funds to multiple connected accounts.\n\n#### Caution\n\nIn most scenarios, your platform and any connected account must be in the same region. Attempting to transfer funds across a disallowed border returns an error. For information about cross-region support, see [Cross-border transfers](https://docs.stripe.com/connect/account-capabilities#transfers-cross-border).\n\nUsing separate charges and transfers requires a more complex [Connect](https://docs.stripe.com/connect \"Connect\") integration.\n\nUse this charge type if your business has specific use cases:\n\n*   A one-to-many relationship. For example, a payment made to a delivery service needs to be split between the store (the source of the items being delivered) and the delivery person.\n*   A many-to-one relationship. For example, a carpool trip with a ride-hailing service.\n*   Charges created before the destination account is known. For example, a janitorial service could process a payment before deciding which janitor to assign to the job.\n*   Need to transfer funds before receiving a payment, or while the charge is pending. For example, an ad network needs to purchase ad space before they can sell ad time or before receiving any payment from customers.\n*   Transfer amounts greater than the associated payments. For example, a platform provides a discount to its customer but pays its user the full amount.\n\nIn some cases, the transfer amount can be greater than the charge amount, or the transfer is made before the payment is processed. You must monitor your account balance carefully to make sure it has enough available funds to cover the transfer amount. You can also associate a transfer with a charge so the transfer doesn’t occur until the funds from that charge are available.\n\n#### on\\_behalf\\_of parameter ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo make the connected account the business of record for the payment use the `on_behalf_of` parameter. When `on_behalf_of` is set to the ID of the connected account, Stripe automatically:\n\n*   Settles charges in the country of the specified account, thereby minimizing declines and avoiding [currency conversions](https://docs.stripe.com/connect/currencies#currency-conversions).\n*   Uses the fee structure for the connected account’s country.\n*   Uses the [connected account’s statement descriptor](https://docs.stripe.com/connect/statement-descriptors).\n*   If the account is in a different country than the platform, the connected account’s address and phone number shows up on the customer’s credit card statement (as opposed to the platform’s).\n*   The number of days that a [pending balance](https://docs.stripe.com/connect/account-balances) is held before being paid out depends on the `delay_days` setting on the connected account.\n\n## Stripe fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are two components to Stripe fees with Connect: which pricing plan applies to the payment and which account pays Stripe fees.\n\nWhen using Direct charges, you can choose how Stripe fees are billed to your connected accounts.\n\nRead more about fee billing behaviors with Direct charges.\n\nDestination charges and separate charges and transfers typically use the platform’s pricing plan and are assessed on the platform. When the `on_behalf_of` field is set, the country of the connected account is used to determine the country specific fees charged to your platform account.\n\nFor more information on Connect fees and how to request custom pricing, please see [Connect pricing](https://stripe.com/connect/pricing).\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can issue a [refund](https://docs.stripe.com/api/refunds) to pay back the money spent on the returned good or to compensate for unsatisfactory service. Below describes how refunds are handled for each charge type:\n\n| Charge Types | Pending Refunds |\n| --- | --- |\n| **Direct charges** | If the connected account’s balance is sufficiently negative at [creation time](https://docs.stripe.com/connect/direct-charges#issue-refunds), the `refund` object is set to a status of `pending`. When enough funds are available in the connected account’s balance, Stripe automatically processes any refunds with a `pending` status and updates the status to `successful`. |\n| **Separate charges and transfers** | If the connected account’s balance and your platform’s account balance are sufficiently negative at [creation time](https://docs.stripe.com/connect/separate-charges-and-transfers#issue-refunds), the `refund` object is set to a status of `pending`. When enough funds become available in your connected account’s or platform’s balance, Stripe automatically processes the refunds with a `pending` status and updates their status to `successful`. |\n| **Destination charges** | If your platform’s account balance is sufficiently negative at [creation time](https://docs.stripe.com/connect/destination-charges#issue-refunds), the `refund` object is set to a status of `pending`. When enough funds become available in your platform’s balance, Stripe automatically processes the refunds with a `pending` status and updates their status to `successful`.<br><br>If the connected account’s balance is sufficiently negative and a refund request also attempts a transfer reversal, the refund request returns an error, instead of creating a refund with `pending` status. |\n\n## Disputes and chargebacks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor payments created using [direct charges](https://docs.stripe.com/connect/direct-charges), Stripe debits the balance of the connected account for disputes. Funds are withdrawn from the connected account’s balance, not your platform’s balance.\n\nFor disputes where payments were created on your platform using [destination charges](https://docs.stripe.com/connect/destination-charges) or [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), with or without `on_behalf_of`, your platform balance is automatically debited for the disputed amount and fee. When this happens, your platform can attempt to recover funds from the connected account by reversing the transfer either through the [Dashboard](https://dashboard.stripe.com/test/transfers) or by [creating a transfer reversal](https://docs.stripe.com/api#create_transfer_reversal).\n\n#### Caution\n\nCreating payments using destination charges or separate charges or transfers, with or without `on_behalf_of`, always debits refund and disputed amounts from your platform balance, even when [Stripe is liable for negative balances](https://docs.stripe.com/connect/risk-management \"negative balance liability\") on your connected accounts.\n\nIf there’s a negative balance on the connected account, Stripe attempts to debit the external account on file for the connected account only if `debit_negative_balances` is set to `true`.\n\nFor more details, see [Disputes and fraud](https://docs.stripe.com/disputes) and [Dispute categories](https://docs.stripe.com/disputes/categories). You can also use [Fraud Stripe Apps](https://marketplace.stripe.com/categories/fraud) to automate dispute management and handle chargebacks.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Create direct charges](https://docs.stripe.com/connect/direct-charges)\n*   [Create destination charges](https://docs.stripe.com/connect/destination-charges)\n*   [Create separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n*   [Set statement descriptors](https://docs.stripe.com/connect/statement-descriptors)\n*   [Supported payment methods](https://stripe.com/payments/features#local-payment-methods)\n*   [Integrate tax calculation and collection](https://docs.stripe.com/tax/connect)",
    "title": "Create a charge | Stripe Documentation",
    "description": "Learn how to create a charge and split payments between your platform and your sellers or service providers when you accept payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/appendix/css_font_source_object",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/appendix/custom_font_source_object",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/account_sessions/object",
    "markdown": "# The Account Session object | Stripe API Reference\n\n### Attributes\n\n*   The ID of the account the AccountSession was created for\n    \n*   The client secret of this AccountSession. Used on the client to set up secure access to the given `account`.\n    \n    The client secret can be used to provide access to `account` from your frontend. It should not be stored, logged, or exposed to anyone other than the connected account. Make sure that you have TLS enabled on any page that includes the client secret.\n    \n    Refer to our docs to [setup Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components) and learn about how `client_secret` should be handled.\n    \n*   Each key of the dictionary represents an embedded component, and each embedded component maps to its configuration (e.g. whether it has been enabled or not).\n    \n*   The timestamp at which this AccountSession will expire.\n    \n\n### More attributes\n\nThe Account Session object\n\n```\n{  \"object\": \"account_session\",  \"account\": \"acct_1NkDjjJyhOZfPCWt\",  \"client_secret\": \"_OXIKXxEihJokDBnDoe2sgG5OGSO2Q12shKvbeboxpALZGng\",  \"expires_at\": 1693261123,  \"livemode\": false,  \"components\": {    \"account_management\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"account_onboarding\": {      \"enabled\": true,      \"features\": {        \"external_account_collection\": true      }    },    \"balances\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"documents\": {      \"enabled\": false,      \"features\": {}    },    \"notification_banner\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"payment_details\": {      \"enabled\": false,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payments\": {      \"enabled\": true,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payouts\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"payouts_list\": {      \"enabled\": false,      \"features\": {}    }  }}\n```\n\n## [Create an Account Session](https://docs.stripe.com/api/account_sessions/create)\n\nCreates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.\n\n### Parameters\n\n*   The identifier of the account to create an Account Session for.\n    \n*   Each key of the dictionary represents an embedded component, and each embedded component maps to its configuration (e.g. whether it has been enabled or not).\n    \n\n### Returns\n\nReturns an Account Session object if the call succeeded.\n\nPOST /v1/account\\_sessions\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=acct_1NkDjjJyhOZfPCWt \\  -d \"components[account_onboarding][enabled]\"=true \\  -d \"components[payments][enabled]\"=true \\  -d \"components[payouts][enabled]\"=true \\  -d \"components[balances][enabled]\"=true\n```\n\n```\n{  \"object\": \"account_session\",  \"account\": \"acct_1NkDjjJyhOZfPCWt\",  \"client_secret\": \"_OXIKXxEihJokDBnDoe2sgG5OGSO2Q12shKvbeboxpALZGng\",  \"expires_at\": 1693261123,  \"livemode\": false,  \"components\": {    \"account_management\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"account_onboarding\": {      \"enabled\": true,      \"features\": {        \"external_account_collection\": true      }    },    \"balances\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"documents\": {      \"enabled\": false,      \"features\": {}    },    \"notification_banner\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"payment_details\": {      \"enabled\": false,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payments\": {      \"enabled\": true,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payouts\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"payouts_list\": {      \"enabled\": false,      \"features\": {}    }  }}\n```\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Account Session object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/embedded-appearance-options",
    "markdown": "# Supported appearance options | Stripe DocumentationThe Stripe Docs logo\n\n`buttonPrimaryColorBackground`\n\nstring\n\n`#0074D4`\n\nThe color used as a background for primary buttons. This accepts hex values or RGB/HSL strings.\n\n`buttonPrimaryColorBorder`\n\nstring\n\n`#0074D4`\n\nThe border color used for primary buttons. This accepts hex values or RGB/HSL strings.\n\n`buttonPrimaryColorText`\n\nstring\n\n`#FFFFFF`\n\nThe text color used for primary buttons. This accepts hex values or RGB/HSL strings.\n\n`buttonSecondaryColorBackground`\n\nstring\n\n`#EBEEF1`\n\nThe color used as a background for secondary buttons. This accepts hex values or RGB/HSL strings.\n\n`buttonSecondaryColorBorder`\n\nstring\n\n`#EBEEF1`\n\nThe color used as a border for secondary buttons. This accepts hex values or RGB/HSL strings.\n\n`buttonSecondaryColorText`\n\nstring\n\n`#393B3E`\n\nThe text color used for secondary buttons. This accepts hex values or RGB/HSL strings.\n\n`colorSecondaryText`\n\nstring\n\n`#717171`\n\nThe color used for secondary text. This accepts hex values or RGB/RGBA/HSL strings.\n\n`actionPrimaryColorText`\n\nstring\n\n`#0074D4`\n\nThe color used for primary actions and links. This accepts hex values or RGB/HSL strings.\n\n`actionSecondaryColorText`\n\nstring\n\n`#444444`\n\nThe color used for secondary actions and links. This accepts hex values or RGB/HSL strings.\n\n`badgeNeutralColorBackground`\n\nstring\n\n`#E4ECEC`\n\nThe background color used to represent neutral state or lack of state in status badges. This accepts hex values or RGB/HSL strings.\n\n`badgeNeutralColorText`\n\nstring\n\n`#545969`\n\nThe text color used to represent neutral state or lack of state in status badges. This accepts hex values or RGB/HSL strings.\n\n`badgeNeutralColorBorder`\n\nstring\n\n`#CBD5D6`\n\nThe border color used to represent neutral state or lack of state in status badges. This accepts hex values or RGB/RGBA/HSL strings.\n\n`badgeSuccessColorBackground`\n\nstring\n\n`#CEF6BB`\n\nThe background color used to reinforce a successful outcome in status badges. This accepts hex values or RGB/HSL strings.\n\n`badgeSuccessColorText`\n\nstring\n\n`#05690D`\n\nThe text color used to reinforce a successful outcome in status badges. This accepts hex values or RGB/HSL strings.\n\n`badgeSuccessColorBorder`\n\nstring\n\n`#B4E1A2`\n\nThe border color used to reinforce a successful outcome in status badges. This accepts hex values or RGB/RGBA/HSL strings.\n\n`badgeWarningColorBackground`\n\nstring\n\n`#FCEEBA`\n\nThe background color used in status badges to highlight things that might require action, but are optional to resolve. This accepts hex values or RGB/HSL strings.\n\n`badgeWarningColorText`\n\nstring\n\n`#A82C00`\n\nThe text color used in status badges to highlight things that might require action, but are optional to resolve. This accepts hex values or RGB/HSL strings.\n\n`badgeWarningColorBorder`\n\nstring\n\n`#F5DA80`\n\nThe border color used in status badges to highlight things that might require action, but are optional to resolve. This accepts hex values or RGB/RGBA/HSL strings.\n\n`badgeDangerColorBackground`\n\nstring\n\n`#F9E4F1`\n\nThe background color used in status badges for high-priority, critical situations that the user must address immediately, and to indicate failed or unsuccessful outcomes. This accepts hex values or RGB/HSL strings.\n\n`badgeDangerColorText`\n\nstring\n\n`#B3063D`\n\nThe text color used in status badges for high-priority, critical situations that the user must address immediately, and to indicate failed or unsuccessful outcomes. This accepts hex values or RGB/HSL strings.\n\n`badgeDangerColorBorder`\n\nstring\n\n`#F2C9E3`\n\nThe border color used in status badges for high-priority, critical situations that the user must address immediately, and to indicate failed or unsuccessful outcomes. This accepts hex values or RGB/RGBA/HSL strings.\n\n`offsetBackgroundColor`\n\nstring\n\n`#FFFFFF`\n\nThe background color used when highlighting information, like the selected row on a table or particular piece of UI. This accepts hex values or RGB/HSL strings.\n\n`formBackgroundColor`\n\nstring\n\n`#FFFFFF`\n\nThe background color used for form items. This accepts hex values or RGB/HSL strings.\n\n`colorBorder`\n\nstring\n\n`#D7D7D7`\n\nThe color used for borders throughout the component. This accepts hex values or RGB/RGBA/HSL strings.\n\n`formHighlightColorBorder`\n\nstring\n\n`#D7D7D7`\n\nThe color used to highlight form items when focused. This accepts hex values or RGB/RGBA/HSL strings.\n\n`formAccentColor`\n\nstring\n\n`#0074D4`\n\nThe color used for to fill in form items like checkboxes, radio buttons and switches. This accepts hex values or RGB/HSL strings.\n\n`buttonBorderRadius`\n\nstring\n\n`4px`\n\nThe border radius used for buttons. This supports pixel values only.\n\n`formBorderRadius`\n\nstring\n\n`6px`\n\nThe border radius used for form elements. This supports pixel values only.\n\n`badgeBorderRadius`\n\nstring\n\n`4px`\n\nThe border radius used for badges. This supports pixel values only.\n\n`overlayBorderRadius`\n\nstring\n\n`8px`\n\nThe border radius used for overlays. This supports pixel values only.\n\n`overlayZIndex`\n\nnumber\n\n`1000`\n\nA [z-index](https://developer.mozilla.org/en-US/docs/Web/CSS/z-index) to use for the overlay throughout embedded components. Set this number to control the z-order of the overlay.\n\n`bodyMdFontSize`\n\nstring\n\n`16px`\n\nThe font size for the medium body typography. Body typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`bodyMdFontWeight`\n\nstring\n\n`400`\n\nThe font weight for the medium body typography. Body typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`bodySmFontSize`\n\nstring\n\n`14px`\n\nThe font size for the small body typography. Body typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`bodySmFontWeight`\n\nstring\n\n`400`\n\nThe font weight for the small body typography. Body typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`headingXlFontSize`\n\nstring\n\n`28px`\n\nThe font size for the extra large heading typography. Heading typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`headingXlFontWeight`\n\nstring\n\n`700`\n\nThe font weight for the extra large heading typography. Heading typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`headingXlTextTransform`\n\nstring\n\n`uppercase`\n\nThe text transform for the extra large heading typography. Heading typography variables accept a valid [text transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) value.\n\n`headingLgFontSize`\n\nstring\n\n`24px`\n\nThe font size for the large heading typography. Heading typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`headingLgFontWeight`\n\nstring\n\n`700`\n\nThe font weight for the large heading typography. Heading typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`headingLgTextTransform`\n\nstring\n\n`uppercase`\n\nThe text transform for the large heading typography. Heading typography variables accept a valid [text transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) value.\n\n`headingMdFontSize`\n\nstring\n\n`20px`\n\nThe font size for the medium heading typography. Heading typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`headingMdFontWeight`\n\nstring\n\n`700`\n\nThe font weight for the medium heading typography. Heading typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`headingMdTextTransform`\n\nstring\n\n`uppercase`\n\nThe text transform for the medium heading typography. Heading typography variables accept a valid [text transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) value.\n\n`headingSmFontSize`\n\nstring\n\n`16px`\n\nThe font size for the small heading typography. Heading typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`headingSmFontWeight`\n\nstring\n\n`700`\n\nThe font weight for the small heading typography. Heading typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`headingSmTextTransform`\n\nstring\n\n`uppercase`\n\nThe text transform for the small heading typography. Heading typography variables accept a valid [text transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) value.\n\n`headingXsFontSize`\n\nstring\n\n`12px`\n\nThe font size for the extra small heading typography. Heading typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`headingXsFontWeight`\n\nstring\n\n`700`\n\nThe font weight for the extra small heading typography. Heading typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`headingXsTextTransform`\n\nstring\n\n`uppercase`\n\nThe text transform for the extra small heading typography. Heading typography variables accept a valid [text transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) value.\n\n`labelMdFontSize`\n\nstring\n\n`14px`\n\nThe font size for the medium label typography. Label typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`labelMdFontWeight`\n\nstring\n\n`400`\n\nThe font weight for the medium label typography. Label typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`labelMdTextTransform`\n\nstring\n\n`uppercase`\n\nThe text transform for the medium label typography. Label typography variables accept a valid [text transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) value.\n\n`labelSmFontSize`\n\nstring\n\n`12px`\n\nThe font size for the small label typography. Label typography variables accept a valid [font size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) value.\n\n`labelSmFontWeight`\n\nstring\n\n`400`\n\nThe font weight for the small label typography. Label typography variables accept a valid [font weight](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) value.\n\n`labelSmTextTransform`\n\nstring\n\n`uppercase`\n\nThe text transform for the small label typography. Label typography variables accept a valid [text transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) value.",
    "title": "Supported appearance options | Stripe Documentation",
    "description": "Review the appearance options available for Embedded Components.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/external_account_cards/object",
    "markdown": "# The External Account Card object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    accountnullable stringExpandableAvailable conditionally\n    \n    The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. This property is only available for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   #### \n    \n    address\\_citynullable string\n    \n    City/District/Suburb/Town/Village.\n    \n*   #### \n    \n    address\\_countrynullable string\n    \n    Billing address country, if provided when creating card.\n    \n*   #### \n    \n    address\\_line1nullable string\n    \n    Address line 1 (Street address/PO Box/Company name).\n    \n*   #### \n    \n    address\\_line2nullable string\n    \n    Address line 2 (Apartment/Suite/Unit/Building).\n    \n*   #### \n    \n    address\\_statenullable string\n    \n    State/County/Province/Region.\n    \n*   #### \n    \n    address\\_zipnullable string\n    \n    ZIP or postal code.\n    \n*   #### \n    \n    address\\_zip\\_checknullable string\n    \n    If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.\n    \n*   Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.\n    \n*   Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.\n    \n*   #### \n    \n    currencynullable enumAvailable conditionally\n    \n    Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. This property is only available for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn’t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).\n    \n*   #### \n    \n    default\\_for\\_currencynullable booleanAvailable conditionally\n    \n    Whether this card is the default external account for its currency. This property is only available for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Two-digit number representing the card’s expiration month.\n    \n*   Four-digit number representing the card’s expiration year.\n    \n*   #### \n    \n    fingerprintnullable string\n    \n    Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n    \n    _As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card—one for India and one for the rest of the world._\n    \n*   Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.\n    \n*   The last four digits of the card.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Cardholder name.\n    \n*   For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated.\n    \n\n### More attributes\n\n*   #### \n    \n    address\\_line1\\_checknullable string\n    \n*   #### \n    \n    available\\_payout\\_methodsnullable array of enums\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    dynamic\\_last4nullable string\n    \n*   #### \n    \n    tokenization\\_methodnullable string\n    \n*   #### \n    \n    walletnullable objectPreview feature\n    \n\nThe External Account Card object\n\n```\n{  \"id\": \"card_1MvoiELkdIwHu7ixOeFGbN9D\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"customer\": \"cus_NhD8HD2bY8dP3V\",  \"cvc_check\": null,  \"dynamic_last4\": null,  \"exp_month\": 4,  \"exp_year\": 2024,  \"fingerprint\": \"mToisGZ01V71BCos\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [Create a card](https://docs.stripe.com/api/external_account_cards/create)\n\nWhen you create a new debit card, you must specify a [connected account](#accounts) to create it on. You can only specify connected accounts where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nIf the account has no default destination card, then the new card will become the default. However, if the owner already has a default then it will not change. To change the default, you should set `default_for_currency` to `true`.\n\n### Parameters\n\n*   #### \n    \n    external\\_accountobject | stringRequired\n    \n    A token, like the ones returned by [Stripe.js](https://docs.stripe.com/js) or a dictionary containing a user’s card details (with the options shown below). Stripe will automatically validate the card.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n\n### Returns\n\nReturns the card object\n\nPOST /v1/accounts/:id/external\\_accounts\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d external_account=tok_visa_debit\n```\n\n```\n{  \"id\": \"card_1NAiaG2eZvKYlo2CDXvcMb6m\",  \"object\": \"card\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [Update a card](https://docs.stripe.com/api/external_account_cards/update)\n\nIf you need to update only some card details, like the billing address or expiration date, you can do so without having to re-enter the full card details. Stripe also works directly with card networks so that your customers can [continue using your service](https://stripe.com/docs/saving-cards#automatic-card-updates) without interruption.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns the card object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NBLeN2eZvKYlo2CIq1o7Pzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"card_1NBLeN2eZvKYlo2CIq1o7Pzs\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/external_account_cards/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific card stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the card object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAinb2eZvKYlo2C1Fm9mZsu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAinb2eZvKYlo2C1Fm9mZsu\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [List all cards](https://docs.stripe.com/api/external_account_cards/list)\n\nYou can see a list of the cards that belong to a [connected account](https://docs.stripe.com/connect/accounts). The 10 most recent external accounts are available on the account object. If you need more than 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional cards.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the cards stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=card\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",      \"object\": \"card\",      \"address_city\": null,      \"address_country\": null,      \"address_line1\": null,      \"address_line1_check\": null,      \"address_line2\": null,      \"address_state\": null,      \"address_zip\": null,      \"address_zip_check\": null,      \"brand\": \"Visa\",      \"country\": \"US\",      \"cvc_check\": \"pass\",      \"dynamic_last4\": null,      \"exp_month\": 8,      \"exp_year\": 2024,      \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",      \"funding\": \"credit\",      \"last4\": \"4242\",      \"metadata\": {},      \"name\": null,      \"redaction\": null,      \"tokenization_method\": null,      \"wallet\": null,      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```",
    "title": "The External Account Card object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/risk-management/managed-risk",
    "markdown": "# Stripe Managed Risk | Stripe DocumentationThe Stripe Docs logo\n\n## Let Stripe protect your platform from losses due to negative balances on your connected accounts.\n\nStripe Managed Risk is an end-to-end merchant risk management solution for platforms that includes ongoing monitoring and mitigation for credit and fraud risk. In addition, Stripe assumes risk of loss in the event of unrecoverable negative balances on connected accounts.\n\nWhen Stripe manages risk, we monitor risk signals on connected accounts, apply risk interventions on connected accounts in response to observed signals, and seek to recover negative balances from your connected accounts. You aren’t liable for unrecoverable negative balances on your connected accounts.\n\n## Components of Stripe Managed Risk![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are three core components of the Stripe Managed Risk offering:\n\n*   Screening & detection\n*   Monitoring & mitigation\n*   Stripe Negative Balance Liability\n\n### Screening & detection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you onboard new connected accounts to your platform, Stripe conducts a number of upfront risk-based onboarding checks. These checks are for adherence to our compliance and regulatory standards as well as for identifying fraud and credit risk signals.\n\nYou can implement additional onboarding verifications to meet relevant regulations for products or services offered by your platform or connected accounts.\n\n### Monitoring & mitigation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe performs ongoing monitoring of risk signals (KYC, transaction data, and so on) to identify connected accounts that might pose credit or fraud risks. We use automated processes, such as machine learning models, and Stripe risk team manual reviews. Stripe automates interventions against risky businesses to reduce fraud and risk of loss. For example, Stripe’s processes might flag a risky connected account in response to a number of signals such as elevated losses, spikes in chargeback rates, or refunds. In response, Stripe might take targeted action on that account using any of a large number of interventions to reduce risk exposure. Some of Stripe’s key risk interventions include:\n\n*   Changes to capabilities: In response to risk signals, Stripe might slow or pause payouts, or pause a connected account’s ability to process charges.\n*   Reserves: In response to risk signals, Stripe might hold a reserve on the connected account balance. It can be a fixed amount or a percentage of transaction amounts.\n*   Offboarding: In the extreme case that a business poses significant risk to Stripe or your platform (ToS violations, fraud, and so on), Stripe might deactivate the connected account.\n\n### Stripe negative balance liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you choose to use Stripe negative balance liability for connected accounts, Stripe assumes the risk of losses from unrecoverable negative balances on those connected accounts. In particular, Stripe doesn’t deduct unrecoverable negative connected account balances from your platform account.\n\n### Requirements to use Stripe Managed Risk![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Managed Risk has these requirements:\n\n*   **Radar**: You must use Radar on connected account transactions. (For users who pay Stripe’s listed prices for payments processing, Radar is included at no additional cost.)\n*   **Connected account onboarding**: When onboarding connected accounts, you must use either Stripe-hosted onboarding or the embedded onboarding component. Connected accounts where Stripe is liable for negative balances, including Standard accounts, can’t complete onboarding in any other way.\n*   **Connected account dashboard**: Connected accounts where Stripe is liable for negative balances must have access to a Stripe-hosted dashboard, or your platform’s interface must include both the Notifications Banner and Account Management embedded components. Some Stripe risk interventions require them to allow connected accounts to update their business information.\n\n## Stripe Managed Risk for connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou define how your connected accounts interact with Stripe Managed Risk by configuring their onboarding flow and their dashboard or other platform interface.\n\n### Connected account onboarding flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe is liable for negative balances, you can onboard connected accounts using Stripe-hosted onboarding or the [embedded onboarding component](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding). With either option, Stripe collects the required information for risk management and prompts the connected account to accept Stripe’s terms of service. You can pre-fill any information that you have previously collected in your onboarding flow via the Accounts API.\n\n### Connected account dashboard or platform interface![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost connected accounts are likely to have few, if any, interactions with Stripe’s risk management. However, in the event that Stripe requires additional risk-related information from one of your connected accounts, Stripe notifies your connected account and provides a pathway for them to respond to and resolve the intervention.\n\nTo resolve an intervention, a connected account owner might provide additional KYC information, complete a form, or provide other documentation. Stripe reviews their response to assess whether to lift, revise, or continue the intervention.\n\n### Connected accounts with access to a Stripe-hosted Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Connected accounts with access only to embedded components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Fees for Stripe Managed Risk![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe fees for Stripe Managed Risk depend on the economic model:\n\n*   **Revenue share**: For connected accounts where the platform uses a revenue share economic model for payments processing, including Standard accounts, Stripe Managed Risk is included at no additional cost.\n*   **Buy rate**: For connected accounts where the platform uses a buy-rate economic model, including Express and Custom accounts, Stripe Managed Risk fees depend on the pricing arrangements:\n    *   **Listed pricing**: For platforms that pay listed pricing for payments processing and Connect fees, Stripe Managed Risk is included at no additional cost.\n    *   **Negotiated pricing**: For platforms with negotiated pricing for either payments processing or Connect fees, Stripe Managed Risk involves additional fees. For more information, contact Stripe Sales.",
    "title": "Stripe Managed Risk | Stripe Documentation",
    "description": "Let Stripe protect your platform from losses due to negative balances on your connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/risk-management/risk-tooling",
    "markdown": "# Merchant risk tooling | Stripe DocumentationThe Stripe Docs logo\n\n## Merchant risk toolingBeta\n\n## Use Stripe tools to prevent and manage merchant risk.\n\nIf you decide to manage merchant risk yourself, Stripe offers tools to help you:\n\n*   Identify a potentially fraudulent connected account using a fraud risk score.\n*   Investigate a connected account by reviewing risk metrics and fraud indicators.\n*   Gather additional information about a connected account through document verification and a selfie check.\n*   Take action against a connected account by pausing payouts, pausing payments, rejecting the account, or blocking its external payout account.\n\n## Identify potentially fraudulent connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides a fraud risk score for each connected account based on the risk-related signals that we collect. In your Dashboard, you can filter the [accounts overview](https://docs.stripe.com/connect/dashboard/viewing-all-accounts) based on the fraud risk score. The Home page also alerts you to potentially fraudulent connected accounts.\n\n## Investigate a connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn your Dashboard, you can view the following information in the connected account details page:\n\n*   The fraud risk score of the connected account\n*   Potential fraud indicators, which provide you with suggestions for potential areas to investigate further\n*   Risk-related metrics, such as declines, disputes, and refunds, specific to that connected account\n\n## Gather additional information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo gather more information on the connected account, you can ask to verify a government-issued ID document and, optionally, a selfie. When you do so, you also set an enforcement that automatically occurs if the connected account doesn’t successfully complete the verification. This enforcement can either be to pause payouts only, or to pause both payouts and payments. This enforcement can occur either after a certain period of time or after a certain total lifetime volume.\n\n## Take action![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can pause payments, pause payouts, or reject a connected account using the API or the Dashboard.\n\n## Request early access![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Merchant risk tooling | Stripe Documentation",
    "description": "Use Stripe tools to prevent and manage merchant risk.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/pausing-payments-or-payouts-on-connected-accounts",
    "markdown": "# Pause payments and payouts on connected accounts\n\n## Support risk management by controlling the flow of funds into and out of your connected accounts.\n\nPlatforms can pause payments or [payouts](https://docs.stripe.com/payouts \"payout\") on accounts where they’re liable for negative balances, including Express and Custom accounts, through the [Connected Account details](https://docs.stripe.com/connect/dashboard/managing-individual-accounts) Dashboard page. Unlike [rejecting an account](https://docs.stripe.com/api/account/reject), you can pause payments or payouts regardless of the connected account’s balance. You can unpause payments or payouts at any time through the same page.\n\n![Risk Action Dropdown](https://b.stripecdn.com/docs-statics-srv/assets/risk-action-dropdown.2ae7b4d238c08427d9a9f67fbbeda87f.png)\n\n## Effects of pausing payments or payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Pausing payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPausing payments blocks creation of any charges. It also makes the [`transfer`](https://docs.stripe.com/connect/account-capabilities#transfers), [`card_payments`](https://docs.stripe.com/connect/account-capabilities#card-payments) and other [payment methods](https://docs.stripe.com/connect/account-capabilities#payment-methods) capabilities `inactive`.\n\n### Pausing payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPausing payouts blocks creation of both automatic and manual payouts. The pause also stops processing of any in-flight payouts, which remain in `pending` status for up to 10 days:\n\n*   If you unpause payouts within 10 days of a payout’s creation, the payout resumes.\n*   If you don’t unpause payouts within 10 days of a payout’s creation, the payout is canceled and the funds are returned to the connected account’s balance.\n\n#### Note\n\nYou can pause payments in both live mode and test mode. However, in test mode we don’t enforce it. Pausing payments in test mode deactivates the corresponding capabilities on the account, but that doesn’t block the creation of charges.\n\nAfter performing an action on a connected account, you can view the change in the account’s status, which is reflected in the Accounts API. In the API response for the connected account, the `charges_enabled` or `payouts_enabled` fields return `false` depending on the action taken, and the `requirements` hash has a `disabled_reason` of `platform_paused`.\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   ...   \"charges_enabled\": false,   \"payouts_enabled\": false,   \"requirements\": {     \"disabled_reason\": \"platform_paused\"   } }`\n\n### Filter connected accounts by risk action![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy visiting the [Connected Account list](https://docs.stripe.com/connect/dashboard/viewing-all-accounts) page, you can filter for the accounts that you have restricted either payments or payouts for.\n\n![Filter by risk action](https://b.stripecdn.com/docs-statics-srv/assets/risk-action-filter.e5de33081fc98d114e3082284a251f6f.png)\n\n### Connected account notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nActioned accounts with access to the Express Dashboard see a notice there, explaining that their platform paused payments or payouts on their account, and telling them to direct any questions to their platform.\n\nActioned accounts without access to a Stripe-hosted Dashboard, including Custom accounts, don’t see any communication from Stripe. You’re responsible for notifying them when you pause their payments or payouts.",
    "title": "Pause payments and payouts on connected accounts | Stripe Documentation",
    "description": "Support risk management by controlling the flow of funds into and out of your connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/direct-charge-buy-rate-reporting-overview",
    "markdown": "# Platform Reporting for direct charge payment fees paid by connected accounts\n\nPlatforms that pay payments fees for direct charges they facilitate on their connected accounts can use the reports outlined here to understand those fees.\n\n## Financial reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Stripe’s financial reports](https://docs.stripe.com/reports) help you understand and reconcile the activity in your account, in particular the total costs and earnings of your platform. These reports are available for download in the Dashboard or through the API.\n\n## Connect margin reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Connect margin reports](https://docs.stripe.com/connect/margin-reports) show platforms their aggregated and transaction-level payment volumes, fees, and revenue associated with activity where the platform is responsible for pricing and fees. Use them to calculate your margins and set your fees appropriately given your underlying Stripe fees and network costs. These reports are available for download in the Dashboard.\n\nConnect margin reports are available to platforms that facilitate buy-rate direct charges. Platforms using destination charges can also request access to them.\n\n## Sigma and Data Pipeline![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll Sigma and Data Pipeline users have access to [the itemized\\_fees table](https://docs.stripe.com/stripe-data/access-data-in-dashboard). It offers a comprehensive, granular breakdown of every fee charged to or deducted from your Stripe balance. You can use it to review itemized details of card, LPM, and product fees that your platform has paid.",
    "title": "Platform Reporting for direct charge payment fees paid by connected accounts | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/bacs-debit/accept-a-payment",
    "markdown": "# Bacs Direct Debit payments | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nStripe users in the UK can use [Checkout](https://docs.stripe.com/payments/checkout) in payment mode to accept Bacs Direct Debit payments.\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) represents the details of your customer’s intent to purchase. You create a Session when your customer wants to pay for something. After redirecting your customer to a Checkout Session, Stripe presents a payment form where your customer can complete their purchase. Once your customer has completed a purchase, they are redirected back to your site.\n\n[](#set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[\n\n## Create products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-products-and-prices)\n\nTo use Checkout, you first need to create a [Product](https://docs.stripe.com/api/products \"Products\") and a [Price](https://docs.stripe.com/api/prices \"Prices\"). Different physical goods or levels of service should be represented by products. Each product’s pricing is represented by one or more prices.\n\nFor example, you can create a T-shirt _product_ that has two _prices_ for different currencies, 20 GBP and 25 EUR. This allows you to change and add prices without needing to change the details of your underlying products. You can either create a product and price [through the API](https://docs.stripe.com/api/prices) or in the [Dashboard](https://dashboard.stripe.com/products).\n\nIf you determine your price at checkout (for example, the customer sets a donation amount) or you prefer not to create prices upfront, you can also create [ad-hoc prices](https://docs.stripe.com/payments/accept-a-payment?platform=web#redirect-customers) at Checkout Session creation using an existing product.\n\n#### Note\n\nProducts created in test mode can be copied to live mode so that you don’t need to re-create them. In the Product detail view in the Dashboard, click **Copy to live mode** in the upper right corner. You can only do this once for each product created in test mode. Subsequent updates to the test product are not reflected for the live product.\n\nMake sure you are in test mode by toggling the **View test data** button at the bottom of the Stripe Dashboard. Next, define the items you want to sell. To create a new product and price:\n\n*   Navigate to the [Products](https://dashboard.stripe.com/test/products) section in the Dashboard\n*   Click **Add product**\n*   Select **One time** when setting the price\n\nThe product name, description, and image that you supply are displayed to customers in Checkout.\n\n[](#create-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Session with [line\\_items](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items). Line items represent a list of items the customer is purchasing.\n\nWhen your customer successfully completes their payment, they are redirected to the `success_url`, a page on your website that informs the customer that their payment details have been successfully collected and their payment is being processed.\n\nWhen your customer clicks on your logo in a Checkout Session without completing a payment, Checkout redirects them back to your website by navigating to the `cancel_url`. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nCheckout can accept a payment and save the payment method for future use. Payment methods saved this way can be used for future payments using a [PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method). After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"payment_method_types[]\"=\"bacs_debit\" \\   -d \"line_items[][price]\"=\"{{PRICE_ID}}\" \\   -d \"line_items[][quantity]\"=1 \\   -d \"mode\"=\"payment\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"payment_intent_data[setup_future_usage]\"=\"off_session\" \\   -d \"success_url\"=\"[https://example.com/success?session_id={CHECKOUT_SESSION_ID}](https://example.com/success?session_id={CHECKOUT_SESSION_ID})\" \\   -d \"cancel_url\"=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n#### Note\n\nThe Bacs Direct Debit rules require that customers receive [debit notification emails](https://docs.stripe.com/payments/payment-methods/bacs-debit#debit-notifications) when payment details are initially collected and when their account is debitted. Stripe sends these emails for you by default.\n\nCreating a Checkout Session returns a [Session ID](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-id). Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[](#async)\n\nWhen your customer completes a payment, Stripe redirects them to the URL that you specified in the `success_url` parameter. Typically, this is a page on your website that informs your customer that their payment was successful.\n\nHowever, Bacs Direct Debit is a delayed notification payment method, which means that funds are not immediately available. A Bacs Direct Debit payment typically takes 3 business days to make the funds available. Because of this, you’ll want to delay order fulfillment until the funds are available. Once the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") status changes from `processing` to `succeeded`.\n\nThe following Checkout events are sent when the payment status changes:\n\nYour [webhook](https://docs.stripe.com/webhooks \"webhook\") code will need to handle all 3 of these Checkout events.\n\nEach Checkout webhook payload includes the [Checkout Session object](https://docs.stripe.com/api/checkout/sessions), which contains information about the [Customer](https://docs.stripe.com/api/customers \"Customers\") and [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nThe `checkout.session.completed` webhook is sent to your server before your customer is redirected. Your webhook acknowledgement (any `2xx` status code) triggers the customer’s redirect to the `success_url`. If Stripe doesn’t receive successful acknowledgement within 10 seconds of a successful payment, your customer is automatically redirected to the `success_url` page.\n\nOn your `success_url` page, you’ll want to show a success message to your customer, and let them know that fulfillment of the order will take a few days as the Bacs Direct Debit payment method is not instant.\n\nWhen accepting instant payments (such as credit cards) in addition to delayed notification payments, you’ll need to update your webhook endpoint to handle both kinds of payments when receiving a `checkout.session.completed` event.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`# You can find your endpoint's secret in your webhook settings endpoint_secret = 'whsec_...'  # Using Sinatra post '/webhook' do   payload = request.body.read   event = nil    # Verify webhook signature and extract the event   # See [https://stripe.com/docs/webhooks#verify-events](https://stripe.com/docs/webhooks#verify-events) for more information.   sig_header = request.env['HTTP_STRIPE_SIGNATURE']   begin     event = Stripe::Webhook.construct_event(       payload, sig_header, endpoint_secret     )   rescue JSON::ParserError => e     # Invalid payload     status 400     return   rescue Stripe::SignatureVerificationError => e     # Invalid signature     status 400     return   end    case event['type']   when 'checkout.session.completed'     session = event['data']['object']      # Check if the order is paid (for example, from a card payment)     payment_intent = Stripe::PaymentIntent.retrieve(session.payment_intent)     # A delayed notification payment will have the status 'processing'     order_paid = payment_intent.status == \"succeeded\"      # Save an order in your database, marked as 'awaiting payment'     create_order(session)      if order_paid       fulfill_order(session)     end   when 'checkout.session.async_payment_succeeded'     session = event['data']['object']      # Fulfill the purchase...     fulfill_order(session)   when 'checkout.session.async_payment_failed'     session = event['data']['object']      # Send an email to the customer asking them to retry their order     email_customer_about_failed_payment(session)   end    status 200 end`\n\nYou can get information about the customer and payment by retrieving the Customer or PaymentIntent objects referenced by the `customer`, `payment_intent` properties in the webhook payload.\n\n### Testing webhooks locally![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo test webhooks locally, you can use [Stripe CLI](https://docs.stripe.com/stripe-cli). Once you have it installed, you can forward events to your server:\n\n`stripe listen --forward-to localhost:4242/webhook Ready! Your webhook signing secret is '{{WEBHOOK_SIGNING_SECRET}}' (^C to quit)`\n\nLearn more about [setting up webhooks](https://docs.stripe.com/webhooks).\n\n[](#testing)\n\nBy this point you should have a basic Bacs Direct Debit integration that collects bank account details and accepts a payment.\n\nThere are several test bank account numbers you can use in [test mode](https://docs.stripe.com/keys#test-live-modes) to make sure this integration is ready.\n\n| Sort code | Account number | Description |\n| --- | --- | --- |\n| 108800 | 00012345 | The payment succeeds and the PaymentIntent transitions from `processing` to `succeeded`. |\n| 108800 | 90012345 | The payment succeeds after three minutes and the PaymentIntent transitions from `processing` to `succeeded`. |\n| 108800 | 33333335 | The payment is accepted but then immediately fails with a `debit_not_authorized` failure code and the PaymentIntent transitions from `processing` to `requires_payment_method`. The Mandate becomes `inactive` and the PaymentMethod can not be used again. |\n| 108800 | 93333335 | The payment fails after three minutes with a `debit_not_authorized` failure code and the PaymentIntent transitions from `processing` to `requires_payment_method`. The Mandate becomes `inactive` and the PaymentMethod can not be used again. |\n| 108800 | 22222227 | The payment fails with an `insufficient_funds` failure code and the PaymentIntent transitions from `processing` to `requires_payment_method`. The Mandate remains `active` and the PaymentMethod can be used again. |\n| 108800 | 92222227 | The payment fails after three minutes with an `insufficient_funds` failure code and the PaymentIntent transitions from `processing` to `requires_payment_method`. The Mandate remains `active` and the PaymentMethod can be used again. |\n| 108800 | 55555559 | The payment succeeds after three minutes and the PaymentIntent transitions from `processing` to `succeeded`, but a dispute is immediately created. |\n| 108800 | 00033333 | Payment Method creation succeeds, but the Mandate is refused by the customer’s bank and immediately transitions to inactive. |\n| 108800 | 00044444 | The request to set up Bacs Direct Debit fails immediately due to an invalid account number and the customer is prompted to update their information before submitting. Payment details are not collected. |\n\nYou can test using any of the account numbers provided above. However, because Bacs Direct Debit payments take several days to process, use the test account numbers that operate on a three-minute delay to better simulate the behavior of live payments.\n\n#### Note\n\nBy default, Stripe automatically sends [emails](https://docs.stripe.com/payments/payment-methods/bacs-debit#debit-notifications) to the customer when payment details are initially collected and each time a debit will be made on their account. These notifications aren’t sent in testmode.\n\n## Payment failures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments can fail for a variety of reasons. The reason for a failure is available through [charge.failure\\_code](https://docs.stripe.com/api/charges/object#charge_object-failure_code). You can only retry payments with certain failure codes. If you can’t retry a payment, we recommend reaching out to the customer and asking them to pay again using a different bank account or a different payment method.\n\nBelow is a list of failure codes we currently send for Bacs Direct Debit. We might add more at any time, so in developing and maintaining your code, don’t assume that only these types exist.\n\n| Failure code | Description | Retryable |\n| --- | --- | --- |\n| `account_closed` | The bank account has been closed. | No  |\n| `bank_ownership_changed` | The account has been transferred to a new Payment Service Provider (PSP). Check if you have been notified of the new PSP’s details. If not, you must collect a new mandate from the customer. | No  |\n| `debit_not_authorized` | The customer has notified their bank that this payment was unauthorized or there is no mandate held by the paying bank. | No  |\n| `generic_could_not_process` | This payment could not be processed. | Yes |\n| `insufficient_funds` | The customer’s account has insufficient funds to cover this payment. | Yes |\n| `invalid_account_number` | The account number is not valid. This could mean it is not for a GBP account or that the account cannot process Direct Debit payments. | No  |\n\nTo retry a payment, [confirm the PaymentIntent](https://docs.stripe.com/api/payment_intents/confirm) again using the same [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\").\n\nTo ensure success, we recommend reaching out to the payer before retrying a payment.",
    "title": "Bacs Direct Debit payments | Stripe Documentation",
    "description": "Learn to accept Bacs Direct Debit payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/financial_connections/accounts/object",
    "markdown": "# The Account object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    account\\_holdernullable object\n    \n    The account holder that this account belongs to.\n    \n*   The most recent information about the account’s balance.\n    \n*   #### \n    \n    balance\\_refreshnullable object\n    \n    The state of the most recent attempt to refresh the account balance.\n    \n*   The type of the account. Account category is further divided in `subcategory`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `cash`<br><br>The account represents real funds held by the institution (e.g. a checking or savings account). |\n    | `credit`<br><br>The account represents credit extended by the institution (e.g. a credit card or mortgage). |\n    | `investment`<br><br>The account represents investments, or any account where there are funds of unknown liquidity. |\n    | `other`<br><br>The account does not fall under the other categories. |\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    display\\_namenullable string\n    \n    A human-readable name that has been assigned to this account, either by the account holder or by the institution.\n    \n*   The name of the institution that holds this account.\n    \n*   The last 4 digits of the account number. If present, this will be 4 numeric characters.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    ownershipnullable stringExpandable\n    \n    The most recent information about the account’s owners.\n    \n*   #### \n    \n    ownership\\_refreshnullable object\n    \n    The state of the most recent attempt to refresh the account owners.\n    \n*   #### \n    \n    permissionsnullable array of enums\n    \n    The list of permissions granted by this account.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balances`<br><br>Allows accessing balance data from the account. |\n    | `ownership`<br><br>Allows accessing ownership data from the account. |\n    | `payment_method`<br><br>Allows the creation of a payment method from the account. |\n    | `transactions`<br><br>Allows accessing transactions data from the account. |\n    \n*   The status of the link to the account.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Stripe is able to retrieve data from the Account without issues. |\n    | `disconnected`<br><br>Account connection has been terminated. |\n    | `inactive`<br><br>Stripe cannot retrieve data from the Account. |\n    \n*   If `category` is `cash`, one of:\n    \n    *   `checking`\n    *   `savings`\n    *   `other`\n    \n    If `category` is `credit`, one of:\n    \n    *   `mortgage`\n    *   `line_of_credit`\n    *   `credit_card`\n    *   `other`\n    \n    If `category` is `investment` or `other`, this will be `other`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `checking`<br><br>The account is a checking account. |\n    | `credit_card`<br><br>The account represents a credit card. |\n    | `line_of_credit`<br><br>The account represents a line of credit. |\n    | `mortgage`<br><br>The account represents a mortgage. |\n    | `other`<br><br>The account does not fall under any of the other subcategories. |\n    | `savings`<br><br>The account is a savings account. |\n    \n*   #### \n    \n    subscriptionsnullable array of enums\n    \n    The list of data refresh subscriptions requested on this account.\n    \n    Possible enum values\n    \n    `transactions`\n    \n    Subscribes to periodic transactions data refreshes from the account.\n    \n*   #### \n    \n    supported\\_payment\\_method\\_typesarray of enums\n    \n    The [PaymentMethod type](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type)(s) that can be created from this account.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `link`<br><br>A `link` PaymentMethod can be created. |\n    | `us_bank_account`<br><br>A `us_bank_account` PaymentMethod can be created. |\n    \n*   #### \n    \n    transaction\\_refreshnullable object\n    \n    The state of the most recent attempt to refresh the account transactions.\n    \n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [Retrieve an Account](https://docs.stripe.com/api/financial_connections/accounts/retrieve)\n\nRetrieves the details of an Financial Connections `Account`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/financial\\_connections/accounts/:id\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"active\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [List Accounts](https://docs.stripe.com/api/financial_connections/accounts/list)\n\nReturns a list of Financial Connections `Account` objects.\n\n### Parameters\n\n*   If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive.\n    \n*   If present, only return accounts that were collected as part of the given session.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` `Account` objects, starting after account `starting_after`. Each entry in the array is a separate `Account` object. If no more accounts are available, the resulting array will be empty. This request will raise an error if more than one of `account_holder[account]`, `account_holder[customer]`, or `session` is specified.\n\nGET /v1/financial\\_connections/accounts\n\n```\ncurl -G https://api.stripe.com/v1/financial_connections/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/financial_connections/accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",      \"object\": \"linked_account\",      \"account_holder\": {        \"customer\": \"cus_9s6XI9OFIdpjIg\",        \"type\": \"customer\"      },      \"balance\": null,      \"balance_refresh\": null,      \"category\": \"cash\",      \"created\": 1681412208,      \"display_name\": \"Sample Checking Account\",      \"institution_name\": \"StripeBank\",      \"last4\": \"6789\",      \"livemode\": false,      \"ownership\": null,      \"ownership_refresh\": null,      \"permissions\": [],      \"status\": \"active\",      \"subcategory\": \"checking\",      \"subscriptions\": [],      \"supported_payment_method_types\": [        \"us_bank_account\"      ],      \"transaction_refresh\": null    }    {...}    {...}  ],}\n```\n\n## [Disconnect an Account](https://docs.stripe.com/api/financial_connections/accounts/disconnect)\n\nDisables your access to a Financial Connections `Account`. You will no longer be able to access data associated with the account (e.g. balances, transactions).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/disconnect\n\n```\ncurl -X POST https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf/disconnect \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": null,  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"disconnected\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```\n\n## [Refresh Account data](https://docs.stripe.com/api/financial_connections/accounts/refresh)\n\nRefreshes the data associated with a Financial Connections `Account`.\n\n### Parameters\n\n*   #### \n    \n    featuresarray of enumsRequired\n    \n    The list of account features that you would like to refresh.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balance`<br><br>Balance data from the account |\n    | `ownership`<br><br>Ownership data from the account |\n    | `transactions`<br><br>Transactions data from the account |\n    \n\n### Returns\n\nReturns an `Account` object if a valid identifier was provided and if you have sufficient permissions to that account. Raises [an error](#errors) otherwise.\n\nPOST /v1/financial\\_connections/accounts/:id/refresh\n\n```\ncurl https://api.stripe.com/v1/financial_connections/accounts/fca_1MwVK82eZvKYlo2Cjw8FMxXf/refresh \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"features[]\"=balance\n```\n\n```\n{  \"id\": \"fca_1MwVK82eZvKYlo2Cjw8FMxXf\",  \"object\": \"linked_account\",  \"account_holder\": {    \"customer\": \"cus_9s6XI9OFIdpjIg\",    \"type\": \"customer\"  },  \"balance\": null,  \"balance_refresh\": {    \"status\": \"pending\",    \"last_attempted_at\": 1681422295  },  \"category\": \"cash\",  \"created\": 1681412208,  \"display_name\": \"Sample Checking Account\",  \"institution_name\": \"StripeBank\",  \"last4\": \"6789\",  \"livemode\": false,  \"ownership\": null,  \"ownership_refresh\": null,  \"permissions\": [],  \"status\": \"pending\",  \"subcategory\": \"checking\",  \"subscriptions\": [],  \"supported_payment_method_types\": [    \"us_bank_account\"  ],  \"transaction_refresh\": null}\n```",
    "title": "The Account object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/acss-debit/accept-a-payment",
    "markdown": "# Accept a Canadian pre-authorized debit payment\n\n## Build a custom payment form or use Stripe Checkout to accept payments with pre-authorized debit in Canada.\n\nAccepting Canadian pre-authorized debit (PAD) payments on your website consists of creating an object to track a payment, collecting payment method information and mandate acknowledgement, submitting the payment to Stripe for processing and verifying your customer’s bank account.\n\nStripe uses this payment object, the [Payment Intent](https://docs.stripe.com/payments/payment-intents), to track and handle all the states of the payment until the payment completes.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-customer)\n\nTo reuse a bank account for future payments, it must be attached to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nYou should create a Customer object when your customer creates an account with your business. Associating the ID of the Customer object with your own internal representation of a customer enables you to retrieve and use the stored payment method details later.\n\nCreate a new Customer or retrieve an existing Customer to associate with this payment. Include the following code on your server to create a new Customer.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#web-create-payment-intent)\n\nA [PaymentIntent](https://docs.stripe.com/api/payment_intents) is an object that represents your intent to collect a payment from a customer and tracks the lifecycle of the payment process through [each stage](https://docs.stripe.com/payments/paymentintents/lifecycle).\n\nIn order to use Canadian pre-authorized debits, you must obtain authorization from your customer for one-time and recurring debits using a pre-authorized debit agreement (see [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates)). The [Mandate](https://docs.stripe.com/api/mandates) object records this agreement and authorization.\n\nFirst, create a PaymentIntent on your server and specify the amount to collect and currency ([usually `cad`](https://docs.stripe.com/payments/acss-debit#presentment-currency)). If you already have another integration using the [Payment Intents API](https://docs.stripe.com/payments/payment-intents), add `acss_debit` to the list of [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types) for your PaymentIntent. Specify the [id](https://docs.stripe.com/api/customers/object#customer_object-id) of the Customer.\n\nIf you want to reuse the payment method in the future, provide the [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage) parameter with a value of `off_session`.\n\nIn order to define a payment schedule and verification method on the [Mandate](https://docs.stripe.com/api/mandates) for this PaymentIntent, also include the following parameters:\n\n| Parameter | Value | Required? |\n| --- | --- | --- |\n| `payment_method_options[acss_debit][mandate_options][payment_schedule]` | The mandate payment schedule. Accepted values are `interval`, `sporadic`, or `combined`. See the [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates) overview to help you select the right schedule for your business. | Yes |\n| `payment_method_options[acss_debit][mandate_options][interval_description]` | Text description of the interval of payment schedule. See the [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates) overview to help you construct the right interval description for your business. | If `payment_schedule` is specified as `interval` or `combined` |\n| `payment_method_options[acss_debit][mandate_options][transaction_type]` | The type of the mandate you are creating, either `personal` (if your customer is an individual) or `business` (if your customer is a business). | Yes |\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=cad \\  -d setup_future_usage=off_session \\  -d customer={{CUSTOMER_ID}} \\   -d \"payment_method_types[]\"=acss_debit \\  -d \"payment_method_options[acss_debit][mandate_options][payment_schedule]\"=interval \\  -d \"payment_method_options[acss_debit][mandate_options][interval_description]\"=\"First day of every month\" \\  -d \"payment_method_options[acss_debit][mandate_options][transaction_type]\"=personal`\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the PaymentIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[\n\n## Collect payment method details and submit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-collect-mandate-and-submit)\n\nWhen a customer clicks to pay with Canadian pre-authorized debit, we recommend you use Stripe.js to submit the payment to Stripe. [Stripe.js](https://docs.stripe.com/payments/elements) is our foundational JavaScript library for building payment flows. It will automatically handle integration complexities, and enables you to easily extend your integration to other payment methods in the future.\n\nInclude the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\nRather than sending the entire PaymentIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") from the previous step. This is different from your API keys that authenticate Stripe API requests.\n\nThe client secret should still be handled carefully because it can complete the charge. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.confirmAcssDebitPayment](https://docs.stripe.com/js/payment_intents/confirm_acss_debit_payment) to collect bank account details and verification, confirm the mandate, and complete the payment when the user submits the form. Including the customer’s email address and the account holder’s name in the `billing_details` property of the `payment_method` parameter is required to create a PAD payment method.\n\n`const form = document.getElementById('payment-form'); const accountholderName = document.getElementById('accountholder-name'); const email = document.getElementById('email'); const submitButton = document.getElementById('submit-button'); const clientSecret = submitButton.dataset.secret;  form.addEventListener('submit', async (event) => {   event.preventDefault();    const {paymentIntent, error} = await stripe.confirmAcssDebitPayment(     clientSecret,     {       payment_method: {         billing_details: {           name: accountholderName.value,           email: email.value,         },       },     }   );    if (error) {     // Inform the customer that there was an error.     console.log(error.message);   } else {       // Handle next step based on PaymentIntent's status.       console.log(\"PaymentIntent ID: \" + paymentIntent.id);       console.log(\"PaymentIntent status: \" + paymentIntent.status);   } });`\n\nStripe.js then loads an on-page modal UI that handles bank account details collection and verification, presents a hosted mandate agreement and collects authorization.\n\n#### Note\n\n`stripe.confirmAcssDebitPayment` may take several seconds to complete. During that time, disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error, show it to the customer, re-enable the form, and hide the waiting indicator.\n\nIf successful, Stripe returns a [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object, with one of the following possible statuses:\n\n| Status | Description | Next step |\n| --- | --- | --- |\n| `processing` | The bank account has been instantly verified or verification was not necessary. | ​​​​​​Step 6: [Confirm the PaymentIntent succeeded](#web-confirm-paymentintent-succeeded) |\n| `requires_action` | Further action needed to complete bank account verification. | Step 5: [Verifying bank accounts with micro-deposits](#web-verify-with-microdeposits) |\n\nAfter successfully confirming the PaymentIntent, an email confirmation of the mandate and collected bank account details must be sent to your customer. Stripe handles these by default, but you can choose to [send custom notifications](https://docs.stripe.com/payments/acss-debit#mandate-and-debit-notification-emails) if you prefer.\n\n#### Note\n\nMandate confirmation emails will not be sent to the customer’s email address when testing the integration.\n\nIf the customer chooses to close the modal without completing the verification flow, Stripe.js returns the following error:\n\n`{   \"error\": {     \"type\": \"validation_error\",     \"code\": \"incomplete_payment_details\",     \"message\": \"Please provide complete payment details.\"   } }`\n\n[](#web-verify-with-microdeposits)\n\nNot all customers can verify the bank account instantly. This step only applies if your customer has elected to opt out of the instant verification flow in the previous step.\n\nIn this case, Stripe automatically sends two micro-deposits to the customer’s bank account. These deposits take one to two business days to appear on the customer’s online statement and have statement descriptors that include `ACCTVERIFY`.\n\nThe result of the `stripe.confirmAcssDebitPayment` method call in the previous step is a PaymentIntent in the `requires_action` state. The PaymentIntent contains a `next_action` field that contains some useful information for completing the verification.\n\nStripe notifies your customer at the [billing email](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details-email) when the deposits are expected to arrive. The email includes a link to a Stripe-hosted verification page where they can confirm the amounts of the deposits and complete verification.\n\nThere is a limit of three failed verification attempts. If this limit is exceeded, the bank account can no longer be verified. In addition, there is a timeout for micro-deposit verifications of 10 days. If micro-deposits are not verified in that time, the PaymentIntent reverts to requiring new payment method details. Clear messaging about what these micro-deposits are and how you use them can help your customers avoid verification issues.\n\n### Optional: Custom email and verification page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you choose to send [custom email notifications](https://docs.stripe.com/payments/acss-debit#mandate-and-debit-notification-emails), you have to email your customer instead. To do this, you can use the `verify_with_microdeposits[hosted_verification_url]` URL in the `next_action` object to direct your customer to complete the verification process.\n\nIf you are sending custom emails and don’t want to use the Stripe hosted verification page, you can create a form on your site for your customers to relay these amounts to you and verify the bank account using [Stripe.js](https://docs.stripe.com/js/payment_intents/verify_microdeposits_for_payment).\n\n`stripe.verifyMicrodepositsForPayment(clientSecret, {   amounts: [32, 45], });`\n\nWhen the bank account is successfully verified, Stripe returns the [PaymentIntent object](https://docs.stripe.com/api/payment_intents/object) with a `status` of `processing`, and sends a `payment_intent.processing` [webhook](https://docs.stripe.com/webhooks \"webhook\") event.\n\nVerification can fail for several reasons. The failure may happen synchronously as a direct error response, or asynchronously through a `payment_intent.payment_failed` webhook event (shown in the following examples).\n\n`{   \"error\": {     \"code\": \"payment_method_microdeposit_verification_amounts_mismatch\",     \"message\": \"The amounts provided do not match the amounts that were sent to the bank account. You have {attempts_remaining} verification attempts remaining.\",     \"type\": \"invalid_request_error\"   } }`\n\n| Error Code | Synchronous or asynchronous | Message | Status Change |\n| --- | --- | --- | --- |\n| `payment_method_microdeposit_failed` | Synchronously, or asynchronously through webhook event | Microdeposits failed. Please check the account, institution and transit numbers provided | `status` is `requires_payment_method`, and `last_payment_error` is set. |\n| `payment_method_microdeposit_verification_amounts_mismatch` | Synchronously | The amounts provided do not match the amounts that were sent to the bank account. You have {attempts\\_remaining} verification attempts remaining. | Unchanged |\n| `payment_method_microdeposit_verification_attempts_exceeded` | Synchronously, and asynchronously through webhook event | Exceeded number of allowed verification attempts | `status` is `requires_payment_method`, and `last_payment_error` is set. |\n| `payment_method_microdeposit_verification_timeout` | Asynchronously through webhook event | Microdeposit timeout. Customer hasn’t verified their bank account within the required 10 day period. | `status` is `requires_payment_method`, and `last_payment_error` is set. |\n\n[](#web-confirm-paymentintent-succeeded)\n\nCanadian pre-authorized debits are a [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method. This means that it can take up to five business days to receive notification of the success or failure of a payment after you initiate a debit from your customer’s account.\n\nThe PaymentIntent you create initially has a status of `processing`. Successful completion of the payment updates the PaymentIntent status from `processing` to `succeeded`.\n\nThe following events are sent when the PaymentIntent status is updated:\n\n| Event | Description | Next step |\n| --- | --- | --- |\n| `payment_intent.processing` | The customer’s payment was submitted to Stripe successfully. | Wait for the initiated payment to succeed or fail. |\n| `payment_intent.succeeded` | The customer’s payment succeeded. | Fulfill the goods or services that the customer purchased. |\n| `payment_intent.payment_failed` | The customer’s payment was declined. This can also apply to a failed microdeposit verification. | Contact the customer via email or push notification and request another payment method. If the webhook was sent due to a failed microdeposit verification, the user needs to enter in their bank account details again and a new set of microdeposits will be deposited in their account. |\n\nWe recommend using [webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to confirm the charge has succeeded and to notify the customer that the payment is complete. You can also view events on the [Stripe Dashboard](https://dashboard.stripe.com/test/events).\n\n[](#web-test-integration)\n\n### Receive micro-deposit verification email![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn order to receive the micro-deposit verification email in test mode after collecting the bank account details and accepting a mandate, provide an email in the `payment_method[billing_details][email]` field in the form of `{any_prefix}+test_email@{any_domain}` when confirming the payment method details.\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers you can use to make sure your integration for manually-entered bank accounts is ready for production. All test accounts that automatically succeed or fail the payment must be verified using the test micro-deposit amounts below before they can be completed.\n\n| Institution Number | Transit Number | Account Number | Scenario |\n| --- | --- | --- | --- |\n| `000` | `11000` | `000123456789` | Succeeds the payment immediately after micro-deposits are verified. |\n| `000` | `11000` | `900123456789` | Succeeds the payment with a three-minute delay after micro-deposits are verified. |\n| `000` | `11000` | `000222222227` | Fails the payment immediately after micro-deposits are verified. |\n| `000` | `11000` | `900222222227` | Fails the payment with a three-minute delay after micro-deposits are verified. |\n| `000` | `11000` | `000666666661` | Fails to send verification micro-deposits. |\n\nTo mimic successful or failed bank account verifications in test mode, use these meaningful amounts for micro-deposits:\n\n| Micro-deposit Values | Scenario |\n| --- | --- |\n| `32` and `45` | Successfully verifies the account. |\n| Any other number combinations | Fails account verification. |",
    "title": "Accept a Canadian pre-authorized debit payment | Stripe Documentation",
    "description": "Build a custom payment form or use Stripe Checkout to accept payments with pre-authorized debit in Canada.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/konbini/accept-a-payment",
    "markdown": "# Konbini payments | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nKonbini is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [take additional steps](https://docs.stripe.com/payments/payment-methods#customer-actions) to complete their payment. Customers pay by providing a payment code, confirmation number, and cash payment at Japanese convenience stores. Stripe notifies you when the payment is completed.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Konbini payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency (JPY).\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable Konbini—it shows the differences between accepting a card payment and using Konbini.\n\n### Enable Konbini as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `konbini` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `jpy` currency.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"mode\"=\"payment\" \\   -d \"payment_method_types[]\"=\"card\" \\   -d \"payment_method_types[]\"=\"konbini\" \\   -d \"payment_method_options[konbini][expires_after_days]\"=3 \\   -d \"line_items[0][price_data][currency]\"=\"jpy\" \\   -d \"line_items[0][price_data][unit_amount]\"=2000 \\   -d \"line_items[0][price_data][product_data][name]\"=\"Tシャツ\" \\   -d \"line_items[0][quantity]\"=1 \\   -d \"success_url\"=\"[https://example.com/success](https://example.com/success)\" \\   -d \"cancel_url\"=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n### Additional payment method options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayment method options can be specified in the [payment method options](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_method_options-konbini) under the `konbini` key.\n\n| Field | Value | Required | Default Value |\n| --- | --- | --- | --- |\n| `expires_after_days` | The number of calendar days before a pending Konbini payment expires. Valid values are from 1 to 60 days. See [Expiration](#checkout-additional-options-expiration). | No  | 3   |\n\n#### Expiration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPending Konbini payments expire right before midnight (23:59:59 JST) on the specified date. For example if `expires_after_days` is set to 2 and the PaymentIntent is confirmed on Monday, the pending Konbini payment will expire on Wednesday at 23:59:59 Japan (UTC+9) time.\n\n#### Phone number ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn the Konbini checkout form, your customers can optionally supply a phone number to use as their confirmation number. This simplifies their payment process at a convenience store where the in-store UI asks for the customer to provide a payment code and their confirmation number. Both are reflected in the payment instructions that Stripe displays after the customer submits their checkout form. If your customer doesn’t provide a phone number, Stripe generates a random confirmation number.\n\nStripe proactively blocks phone numbers consisting of only zeros.\n\n### Redirect to Stripe hosted voucher page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nUnlike card payments, the customer won’t be redirected to the [success\\_url](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-success_url) with Konbini payment.\n\nAfter submitting the Checkout form successfully, the customer is redirected to the `hosted_voucher_url`. The customer can reference the hosted page’s payment instructions for details on how to complete their payment. The page is viewable on desktop and mobile, as well as being printable.\n\nStripe sends a [payment\\_intent.requires\\_action](https://docs.stripe.com/api/events/types#event_types-payment_intent.requires_action) event when a Konbini voucher is created successfully. If you need to email your customers the voucher’s payment instructions link, you can locate the `hosted_voucher_url` in [payment\\_intent.next\\_action.konbini\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-konbini_display_details-hosted_voucher_url). Learn more about how to [monitor a PaymentIntent with webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks).\n\nStripe allows customization of customer-facing UIs on the [Branding Settings](https://dashboard.stripe.com/account/branding) page. The following brand settings can be applied to the voucher:\n\n*   **Icon**—your brand image and public business name\n*   **Accent color**—used as the color of the Copy Number button\n*   **Brand color**—used as the background color\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause Konbini is a delayed notification payment method, you need to use a method such as [webhooks](https://docs.stripe.com/webhooks \"webhook\") to monitor the payment status and handle order fulfillment. Learn more about [setting up webhooks and fulfilling orders](https://docs.stripe.com/checkout/fulfillment).\n\nThe following events are sent when the payment status changes:\n\n| Event Name | Description | Next steps |\n| --- | --- | --- |\n| [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) | The customer has successfully submitted the Checkout form. Stripe has generated the Konbini voucher.<br><br>You can choose to email the `hosted_voucher_url` to your customer in case they lose the Konbini voucher. | Wait for the customer to pay at a Konbini. |\n| [checkout.session.async\\_payment\\_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded) | The customer has successfully paid the Konbini voucher. The `PaymentIntent` transitions to `succeeded`. | Fulfill the goods or services that the customer purchased. |\n| [checkout.session.async\\_payment\\_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed) | The Konbini voucher has expired, or the payment has failed for some other reason. The `PaymentIntent` returns to a status of `requires_payment_method`. | Contact the customer via email and request that they place a new order. |\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Konbini as the payment method and click the **Pay** button.\n\nProvide the following values in the Checkout form to test different scenarios. You can either test with a special confirmation number or an email pattern. If both are provided the behavior of the special confirmation number applies.\n\n| Email | Confirmation number | Description |\n| --- | --- | --- |\n| `{any_prefix}@{any_domain}` | `11111111110` | Simulates a Konbini payment which succeeds after 3 minutes and the `payment_intent.succeeded` webhook arrives after that.<br><br>Example: hanako@test.com |\n| `{any_prefix}succeed_immediately@{any_domain}` | `22222222220` | Simulates a Konbini payment which succeeds immediately and the `payment_intent.succeeded` webhook arrives after that.<br><br>Example: succeed\\_immediately@test.com |\n| `{any_prefix}expire_immediately@{any_domain}` | `33333333330` | Simulates a Konbini payment which expires immediately and the `payment_intent.payment_failed` webhook arrives after that.<br><br>The `expires_at` field in [next\\_action.konbini\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-konbini_display_details-expires_at) is set to the current time regardless of what the `expires_after_days` or `expires_at` parameter in [payment method options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-konbini-expires_after_days) is set to.<br><br>Example: expire\\_immediately@test.com |\n| `{any_prefix}expire_with_delay@{any_domain}` | `44444444440` | Simulates a Konbini payment which never succeeds; it expires in 3 minutes and the `payment_intent.payment_failed` webhook arrives after that.<br><br>The `expires_at` field in [next\\_action.konbini\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-konbini_display_details-expires_at) is set to 3 minutes in the future regardless of what the `expires_after_days` or `expires_at` parameter in [payment method options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-konbini-expires_after_days) is set to.<br><br>Example: expire\\_with\\_delay@test.com |\n| `{any_prefix}fill_never@{any_domain}` | `55555555550` | Simulates a Konbini payment which never succeeds; it expires according to the `expires_at` field in `next_action.konbini_display_details` per the provided parameters in the [payment method options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-konbini-expires_after_days) and the `payment_intent.payment_failed` webhook arrives after that.<br><br>Example: fill\\_never@test.com |\n\nIn order to test [confirmation number](#web-confirm-payment-intent-additional-options-confirmation-number) errors you may use the following values:\n\n*   `01234567890` simulates a confirmation number rejection.\n*   `00000000000` results in a validation error.\n\n[\n\n## Expiration and cancellation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-expiration-and-cancellation)\n\nAfter the time specified by the `expires_at` value in the [next\\_action.konbini\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-konbini_display_details-expires_at), the customer can no longer _initiate_ the payment process for a pending Konbini payment at a convenience store kiosk. However, if they issued a valid payment slip before the deadline they may be able to _complete_ the payment at the cash register after the `expires_at` time.\n\nThere is a buffer period to avoid premature payment failures in such an event. The PaymentIntent’s status changes to `requires_payment_method`. At this point, you can cancel or confirm the PaymentIntent with another payment method.\n\nYou can also cancel a pending Konbini payment after confirmation and before the time specified by `next_action.konbini_display_details.expires_at`. Updating the PaymentIntent or confirming it with another payment method will also implicitly cancel the existing Konbini payment.\n\nIf the customer is currently paying for the Konbini payment at the convenience store, the cancellation request will fail. Cancellation may be re-attempted if the customer abandons the payment attempt and after the payment slip expires.\n\nNote that [temporary payment method availability issues](#web-handling-temporary-availability-issues) also affect (both explicit as well as implicit) cancellation requests.\n\n#### Caution\n\nWhen you cancel a pending payment the original payment instructions become invalid. For most use cases we suggest you reach out to your customer to inform them of the cancellation.\n\nWhen you successfully reconfirm a PaymentIntent in status `requires_action` we create new instructions and a new `hosted_voucher_url`. You need to ensure that your customer is made aware of these.\n\n[](#refunds)\n\nIt is possible to refund Konbini payments through the [Dashboard](https://dashboard.stripe.com/payments) or [API](https://docs.stripe.com/api#create_refund).\n\nTo complete a refund sent to the customer’s bank account directly, your customer must provide the bank account details where they would like to receive the funds. Stripe contacts the customer at the email address from the billing details on the payment method and requests these details from them. After we receive the bank details, we process the refund automatically.\n\nThe refund’s status transitions as follows:\n\n| Event | Refund status |\n| --- | --- |\n| Refund is created | `requires_action` |\n| Customer submits bank account details, and Stripe begins processing the refund | `pending` |\n| Refund is expected to arrive in customer’s bank | `succeeded` |\n| Customer’s bank returns the funds back to Stripe | `requires_action` |\n| Refund is in `requires_action` 45 days after creation | `failed` |\n| Refund is canceled from a `requires_action` state | `canceled` |\n\nIf the customer’s bank can’t successfully complete the transfer, the funds are returned to Stripe and the refund transitions to `requires_action`. This can happen if the account holder’s name doesn’t match what the recipient bank has on file or if the provided bank account number has a typo. In these cases, Stripe emails the customer to inform them of the failure and to request that they resubmit their bank account details.\n\nIf your customer does not provide their bank account details within 45 days, the refund’s status transitions to `failed` and the [charge.refund.updated](https://docs.stripe.com/api/events/types#event_types-charge.refund.updated) event is sent. This means that Stripe is unable to process the refund, and you must [return the funds to your customer outside of Stripe](https://docs.stripe.com/refunds#failed-refunds).\n\nThe [instructions\\_email](https://docs.stripe.com/api/refunds/object#refund_object-instructions_email) field on the refund is the email that the refund was sent to. While a refund is waiting for a response from the customer, details of the email sent to the customer can also be found under the [next\\_action.display\\_details.email\\_sent](https://docs.stripe.com/api/refunds/object#refund_object-next_action-display_details-email_sent) field on the refund.\n\nEach individual refund (including each partial refund) may incur a fee. Please reach out to your point of contact at Stripe to learn more about this.\n\n### Testing Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can test refund behavior in testmode using the following test bank accounts on the bank account details collection page linked in the email sent to the customer. Bank account details outside of these test bank accounts will not be accepted.\n\n| Routing | Account | Type |\n| --- | --- | --- |\n| `1100000` | `0001234` | Refund succeeds. |\n| `1100000` | `1111113`<br><br>`1111116`<br><br>`1111113`<br><br>`3333335`<br><br>`4444440` | Refund fails. |\n\n#### Testing Refunds Expiry ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can make an API call to simulate the expiry of a testmode refund.\n\n`curl https://api.stripe.com/v1/test_helpers/refunds/{{REFUND_ID}}/expire \\   -X POST \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`",
    "title": "Konbini payments | Stripe Documentation",
    "description": "Use the Payment Intents and Payment Methods APIs to accept payments through Konbini, a common way to make payments through convenience stores in Japan.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/oxxo/accept-a-payment",
    "markdown": "# Accept an OXXO payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nOXXO is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [take additional steps](https://docs.stripe.com/payments/payment-methods#customer-actions) to complete their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay by providing an OXXO voucher with a generated number and cash payment at an OXXO convenience store.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support OXXO payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable OXXO—it shows the differences between accepting a card payment and using OXXO.\n\n### Enable OXXO as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `oxxo` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `mxn` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'oxxo'],   # The parameter is optional. The default value of expires_after_days is 3.   payment_method_options: {     oxxo: {       expires_after_days: 2     }   },   line_items: [{     price_data: {       # To accept `oxxo`, all line items must have currency: mxn       currency: 'mxn',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Additional payment method options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can specify an optional `expires_after_days` parameter in the [payment method options](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_method_options-oxxo-expires_after_days) for your `Session` that sets the number of calendar days before an OXXO voucher expires. For example, if you create an OXXO voucher on Monday and you set `expires_after_days` to 2, the OXXO voucher will expire on Wednesday at 23:59 America/Mexico\\_City (UTC-6) time. The `expires_after_days` parameter can be set from 1 to 7 days. The default is 3 days.\n\n### Redirect to Stripe hosted voucher page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter submitting the Checkout form successfully, the customer is redirected to the `hosted_voucher_url`. The customer can find the barcode or print the OXXO voucher from the hosted voucher page. You can locate the `hosted_voucher_url` in [payment\\_intent.next\\_action.oxxo\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-oxxo_display_details-hosted_voucher_url).\n\nStripe allows customization of customer-facing UIs on the [Branding Settings](https://dashboard.stripe.com/account/branding) page. The following brand settings can be applied to the voucher:\n\n*   **Icon**—your brand image and public business name\n*   **Accent color**—used as the color of Print button\n*   **Brand color**—used as the background color\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause OXXO is a delayed notification payment method, you need to use a method such as [webhooks](https://docs.stripe.com/webhooks \"webhook\") to monitor the payment status and handle order fulfillment. Learn more about [setting up webhooks and fulfilling orders](https://docs.stripe.com/checkout/fulfillment).\n\nThe following events are sent when the payment status changes:\n\n| Event Name | Description | Next steps |\n| --- | --- | --- |\n| [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) | The customer has successfully submitted the Checkout form. Stripe has generated the OXXO voucher.<br><br>You can choose to email the `hosted_voucher_url` to your customer in case they lose the OXXO voucher. | Wait for the customer to pay the OXXO voucher. |\n| [checkout.session.async\\_payment\\_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded) | The customer has successfully paid the OXXO. The `PaymentIntent` transitions to `succeeded`. | Fulfill the goods or services that the customer purchased. |\n| [checkout.session.async\\_payment\\_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed) | The OXXO voucher has expired, or the payment has failed for some other reason. The `PaymentIntent` returns to a status of `requires_payment_method`. | Contact the customer via email and request that they place a new order. |\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select OXXO as the payment method and click the **Pay** button.\n\n| Email | Description |\n| --- | --- |\n| `{any_prefix}@{any_domain}` | Simulates an OXXO voucher which a customer pays after 3 minutes and the `payment_intent.succeeded` webhook arrives after about 3 minutes. In production, this webhook arrives after 1 business day.<br><br>Example: fulano@test.com |\n| `{any_prefix}succeed_immediately@{any_domain}` | Simulates an OXXO voucher which a customer pays immediately and the `payment_intent.succeeded` webhook arrives within several seconds. In production, this webhook arrives after 1 business day.<br><br>Example: succeed\\_immediately@test.com |\n| `{any_prefix}expire_immediately@{any_domain}` | Simulates an OXXO voucher which expires before a customer pays and the `payment_intent.payment_failed` webhook arrives within several seconds.<br><br>The `expires_after` field in [next\\_action.oxxo\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-oxxo_display_details-expires_after) is set to the current time regardless of what the `expires_after_days` parameter in [payment method options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-oxxo-expires_after_days) is set to.<br><br>Example: expire\\_immediately@test.com |\n| `{any_prefix}expire_with_delay@{any_domain}` | Simulates an OXXO voucher which expires before a customer pays and the `payment_intent.payment_failed` webhook arrives after about 3 minutes.<br><br>The `expires_after` field in [next\\_action.oxxo\\_display\\_details](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-oxxo_display_details-expires_after) is set to 3 minutes in the future regardless of what the `expires_after_days` parameter in [payment method options](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-oxxo-expires_after_days) is set to.<br><br>Example: expire\\_with\\_delay@test.com |\n| `{any_prefix}fill_never@{any_domain}` | Simulates an OXXO voucher which expires before a customer pays and the `payment_intent.payment_failed` webhook arrives after 1 business day and 2 calendar days. In production, this webhook arrives at the same time as in testmode.<br><br>Example: fill\\_never@test.com |",
    "title": "Accept an OXXO payment | Stripe Documentation",
    "description": "Learn how to accept OXXO, a common payment method in Mexico.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/pay-by-bank/accept-a-payment",
    "markdown": "# Pay by Bank payments | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nWe recommend that you follow the [Accept a payment](https://docs.stripe.com/payments/accept-a-payment) guide unless you need to use manual server-side confirmation, or your integration requires presenting payment methods separately. If you’ve already integrated with Elements, see the [Payment Element migration guide](https://docs.stripe.com/payments/payment-element/migration).\n\nPay by Bank is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers must [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Pay by Bank redirects customers from your website, authorizes the payment, and returns them to your website. You receive [notification](https://docs.stripe.com/payments/payment-methods#payment-notification) of whether a payment succeeded or failed within a few seconds.\n\n#### Note\n\nPay by Bank is a **delayed notification payment method**, which means that funds are not immediately available after payment. A payment typically takes **5 seconds** to arrive in your account.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-payment-intent)\n\nA [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) is an object that represents your intent to collect payment from a customer and tracks the lifecycle of the payment process through each stage.\n\nFirst, create a `PaymentIntent` on your server and specify the amount to collect and the `gbp` currency (Pay by Bank doesn’t support other currencies). If you already have an integration using the [Payment Intents API](https://docs.stripe.com/payments/payment-intents), add `pay_by_bank` to the list of [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types) for your `PaymentIntent`. Stripe enables the functionality that `automatic_payment_methods` provides by default in the latest version of the API.\n\n*   You can either use the [automatic\\_payment\\_methods](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-automatic_payment_methods-enabled) attribute or add `pay_by_bank` to [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n*   Regardless of which option you choose, make sure to enable Pay by Bank on the\n*   [payment methods settings page](https://dashboard.stripe.com/settings/payment_methods) in the Dashboard.\n\nYou can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. Make sure to enable Pay by Bank on the [payment methods settings page](https://dashboard.stripe.com/settings/payment_methods) in the Dashboard. To manually specify payment method types, add `pay_by_bank` to [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=gbp \\  -d \"automatic_payment_methods[enabled]\"=true`\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=gbp \\  -d \"payment_method_types[]\"=pay_by_bank`\n\n## Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The minimum amount is 0.50 GBP and the maximum amount is 10,000 GBP. (Reach out to us if you want to increase the maximum limit.)\n*   Enter a `statement_descriptor` (optional). This is the merchant name shown on the customer’s bank statement. It has a limit of 18 characters and consists only of alphanumeric values and spaces. If this field is left blank, a shortened version of the [Stripe statement descriptors](https://docs.stripe.com/get-started/account/statement-descriptors) appears on the bank statement.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=gbp \\  -d \"payment_method_options[pay_by_bank][statement_descriptor]\"=\"merchant name\" \\  -d \"payment_method_types[]\"=pay_by_bank`\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the PaymentIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[](#submit-payment)\n\nWhen a customer clicks to pay with Pay by Bank, use Stripe.js to submit the payment to Stripe. [Stripe.js](https://docs.stripe.com/payments/elements) is the foundational JavaScript library for building payment flows. It automatically handles complexities like the redirect described below, and enables you to extend your integration to other payment methods. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\nYou also need to specify the beta flag, `pay_by_bank_beta_1`, to use Pay by Bank with Stripe.js.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`,   {betas: ['pay_by_bank_beta_1']} );`\n\n### Confirm with Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRather than sending the entire PaymentIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) from [step 2](#web-create-payment-intent). This is different from your API keys that authenticate Stripe API requests.\n\nHandle the client secret carefully because it can confirm the payment. Don’t log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.confirmPayByBankPayment](https://docs.stripe.com/js/payment_intents/confirm_pay_by_bank_payment) to handle the redirect away from your page and to complete the payment. Add a `return_url` to this function to instruct Stripe where to redirect the user after they complete the payment.\n\n`const {error} = await stripe.confirmPayByBankPayment(   '{{PAYMENT_INTENT_CLIENT_SECRET}}',   {     return_url: 'https://example.com/checkout/complete',   } );`\n\nWhen your customer submits a payment, Stripe redirects them to the `return_url` and includes the following URL query parameters. The return page can use them to get the status of the PaymentIntent so it can display the payment status to the customer.\n\nWhen you specify the `return_url`, you can also append your own query parameters for use on the return page.\n\n| Parameter | Description |\n| --- | --- |\n| `payment_intent` | The unique identifier for the `PaymentIntent`. |\n| `payment_intent_client_secret` | The [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` object. |\n\nWhen the customer is redirected back to your site, you can use the `payment_intent_client_secret` to query for the PaymentIntent and display the transaction status to your customer.\n\n[](#test-your-integration)\n\nWhen using your [test API keys](https://docs.stripe.com/keys#test-live-modes), you’re redirected to a test page with options to authorize or fail the payment.\n\n*   Click **Authorize test payment** to test the case when the payment is successful. The PaymentIntent transitions from `requires_action` to `succeeded`.\n*   Click **Fail test payment** to test the case when the customer fails to authenticate. The PaymentIntent transitions from `requires_action` to `requires_payment_method`.\n\n[](#web-fulfillment)\n\nStripe sends a [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event when the payment completes. Use the Dashboard, a custom [webhook](https://docs.stripe.com/webhooks \"webhook\"), or a partner solution to receive these events and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes, and malicious clients could manipulate the response. Setting up your integration to listen for asynchronous events also makes it easier to accept more payment methods in the future. Check out our [guide to payment methods](https://stripe.com/payments/payment-methods-guide) to see the differences between all supported payment methods.\n\n### Manually![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Stripe Dashboard to view all your Stripe payments, send email receipts, handle payouts, or retry failed payments.\n\n*   [View your test payments in the Dashboard](https://dashboard.stripe.com/test/payments)\n\n### Custom code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild a webhook handler to listen for events and build custom asynchronous payment flows. Test and debug your webhook integration locally with the Stripe CLI.\n\n*   [Build a custom webhook](https://docs.stripe.com/payments/handling-payment-events#build-your-own-webhook)\n\n### Prebuilt apps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHandle common business events, like [automation](https://stripe.partners/?f_category=automation) or [marketing and sales](https://stripe.partners/?f_category=marketing-and-sales), by integrating a partner application.\n\n[](#order-fulfillment)\n\n[Use a method such as webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to handle order fulfillment. When a customer completes payment, the `PaymentIntent` transitions to `succeeded` and emits the [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) [webhook](https://docs.stripe.com/webhooks \"webhook\") event.\n\nYou can find details about the bank account the customer used to complete the payment on the resulting Charge under the [payment\\_method\\_details](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-pay_by_bank) property.\n\n`{   \"charges\": {     \"data\": [       {         \"payment_method_details\": {           \"pay_by_bank\": {             \"bank_account_details_type\": \"sort_code\",             \"sort_code\": {               \"account_holder_name\": \"John Doe\",               \"account_number_last4\": \"1820\",               \"sort_code\": \"040004\"             }           },           \"type\": \"pay_by_bank\"         },`\n\nIf a customer cancels the payment flow, the `PaymentIntent` emits the [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types#event_types-payment_intent.payment_failed) webhook event and returns to a status of `requires_payment_method`.",
    "title": "Pay by Bank payments | Stripe Documentation",
    "description": "Learn how to accept Pay by Bank payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/sofort/accept-a-payment",
    "markdown": "# Accept a Sofort payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\n#### Note\n\nSOFORT is a **delayed notification payment method**, which means that funds are not immediately available after payment. A payment typically takes **2 to 14 business days** to arrive in your account.\n\nCustomers pay with SOFORT by redirecting away from the Checkout Session to their bank, sending you payment, and then returning to Checkout. They are then redirected back to your site.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support SOFORT payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Euro (currency code `eur`).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable SOFORT—it shows the differences between accepting a card payment and using SOFORT.\n\n### Enable SOFORT as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `sofort` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the `eur` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'sofort'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `sofort`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select SOFORT as the payment method and click the **Pay** button.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for SOFORT is up to 180 days after the original payment.\n\nThere is no dispute process–customers authenticate with their bank.",
    "title": "Accept a Sofort payment | Stripe Documentation",
    "description": "Learn how to accept Sofort, a common payment method in Europe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/sepa-debit/accept-a-payment",
    "markdown": "# Accept a SEPA Direct Debit payment\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nAccepting SEPA Direct Debit payments on your website consists of creating an object to track a payment, collecting payment method information and mandate acknowledgement, and submitting the payment to Stripe for processing. Stripe uses this payment object, the PaymentIntent, to track and handle all the states of the payment until the payment completes.\n\n#### Note\n\nSEPA Direct Debit is a **delayed notification payment method**, which means that funds are not immediately available after payment. A payment typically takes **5 business days** to arrive in your account.\n\n[](#compatibility)\n\nTo support SEPA Direct Debit payments in Checkout, [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Euro (currency code `eur`).\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?ui=stripe-hosted) Checkout integration.\n\nUse this guide to learn how to enable SEPA Direct Debit—it shows the differences between accepting a card payment and using SEPA Direct Debit.\n\n### Enable SEPA Direct Debit as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `sepa_debit` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the `eur` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'sepa_debit'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `sepa_debit`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nStripe provides several test numbers you can use to make sure your integration is ready for production.\n\nUse the [SEPA Direct Debit test numbers](#test-integration) when testing your Checkout integration with SEPA Direct Debit.\n\n##### Test IBANs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Account Number | Description |\n| --- | --- |\n| `AT611904300234573201` | The PaymentIntent status transitions from `processing` to `succeeded`. |\n| `AT321904300235473204` | The PaymentIntent status transitions from `processing` to `succeeded` after three minutes. |\n| `AT861904300235473202` | The PaymentIntent status transitions from `processing` to `requires_payment_method`. |\n| `AT051904300235473205` | The PaymentIntent status transitions from `processing` to `requires_payment_method` after three minutes. |\n| `AT591904300235473203` | The PaymentIntent status transitions from `processing` to `succeeded`, but a dispute is immediately created. |\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for SEPA Direct Debit is up to 180 days after the original payment.\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") can dispute a payment through their bank up to 13 months after the original payment and there’s no appeal process.\n\nLearn more about [SEPA Direct Debit disputes](https://docs.stripe.com/payments/sepa-debit#disputed-payments).",
    "title": "Accept a SEPA Direct Debit payment | Stripe Documentation",
    "description": "Learn to accept SEPA Direct Debit payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/financial_connections/collect_financial_connections_accounts",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/ach-debit/accept-a-payment",
    "markdown": "# Accept an ACH Direct Debit payment\n\n## Build a custom payment form or use Stripe Checkout to accept payments with ACH Direct Debit.\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nStripe users in the US can use Checkout in payment mode to accept ACH Direct Debit payments.\n\nA Checkout Session represents the details of your customer’s intent to purchase. You create a Session when your customer wants to pay for something. After redirecting your customer to a Checkout Session, Stripe presents a payment form where your customer can complete their purchase. After your customer has completed a purchase, they are redirected back to your site.\n\nWith Checkout, you can create a Checkout Session with `us_bank_account` as a payment method type to track and handle the states of the payment until the payment completes.\n\n#### Note\n\nACH Direct Debit is a [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method, which means that funds aren’t immediately available after payment. A payment typically takes 4 business days to arrive in your account.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support ACH Direct Debit payments:\n\n*   Express all [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items in US dollars (currency code `usd`).\n\n[](#create-customer)\n\nCreate a [Customer](https://docs.stripe.com/api/customers \"Customers\") object when your user creates an account with your business, or retrieve an existing Customer associated with this user. Associating the ID of the Customer object with your own internal representation of a customer enables you to retrieve and use the stored payment method details later. Include an email address on the Customer to enable Financial Connections’ [return user optimization](https://docs.stripe.com/financial-connections/fundamentals#return-user-optimization).\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}}`\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nThis guides you through enabling ACH Direct Debit and shows the differences between accepting a card payment and using this payment method.\n\n### Enable ACH Direct Debit as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `us_bank_account` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the `usd` currency.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=payment \\  -d customer={{CUSTOMER_ID}} \\   -d \"payment_method_types[0]\"=card \\  -d \"payment_method_types[1]\"=us_bank_account \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][price_data][unit_amount]\"=2000 \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][quantity]\"=1 \\   --data-urlencode success_url=\"https://example.com/success\" \\   --data-urlencode cancel_url=\"https://example.com/cancel\"`\n\nBy default, collecting bank account payment information uses [Financial Connections](https://docs.stripe.com/financial-connections) to instantly verify your customer’s account, with a fallback option of manual account number entry and microdeposit verification. See the [Financial Connections docs](https://docs.stripe.com/financial-connections/ach-direct-debit-payments) to learn how to configure Financial Connections and access additional account data to optimize your ACH integration. For example, you can use Financial Connections to check an account’s balance before initiating the ACH payment.\n\n#### Note\n\nTo expand access to additional data after a customer authenticates their account, they must re-link their account with expanded permissions.\n\nIf the customer opts for microdeposit verification instead of Financial Connections, Stripe automatically sends two small deposits to the provided bank account. These deposits can take 1-2 business days to appear on the customer’s online bank statement. When the deposits are expected to arrive, the customer receives an email with a link to confirm these amounts and verify the bank account with Stripe. After verification is complete, the payment begins processing.\n\nWe recommend including the [payment\\_intent\\_data.setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) parameter with a value of `off_session` when creating a payment mode Session for ACH Direct Debit so you can [save payment method details](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted#save-payment-method-details).\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nLearn how to test scenarios with instant verifications using [Financial Connections](https://docs.stripe.com/financial-connections/testing#web-how-to-use-test-accounts).\n\n### Send transaction emails in test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the `payment_method_data.billing_details[email]` field in the form of `{any-prefix}+test_email@{any_domain}` when you collect the [payment method details](#web-collect-details).\n\n#### Common mistake\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\n| Account number | Token | Routing number | Behavior |\n| --- | --- | --- | --- |\n| `000123456789` | `pm_usBankAccount_success` | `110000000` | The payment succeeds. |\n| `000111111113` | `pm_usBankAccount_accountClosed` | `110000000` | The payment fails because the account is closed. |\n| `000111111116` | `pm_usBankAccount_noAccount` | `110000000` | The payment fails because no account is found. |\n| `000222222227` | `pm_usBankAccount_insufficientFunds` | `110000000` | The payment fails due to insufficient funds. |\n| `000333333335` | `pm_usBankAccount_debitNotAuthorized` | `110000000` | The payment fails because debits aren’t authorized. |\n| `000444444440` | `pm_usBankAccount_invalidCurrency` | `110000000` | The payment fails due to invalid currency. |\n| `000666666661` | `pm_usBankAccount_failMicrodeposits` | `110000000` | The payment fails to send microdeposits. |\n| `000555555559` | `pm_usBankAccount_dispute` | `110000000` | The payment triggers a dispute. |\n| `000000000009` | `pm_usBankAccount_processing` | `110000000` | The payment stays in processing indefinitely. Useful for testing [PaymentIntent cancellation](https://docs.stripe.com/api/payment_intents/cancel). |\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\n### Test microdeposit amounts and descriptor codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo mimic different scenarios, use these microdeposit amounts _or_ 0.01 descriptor code values.\n\n| Microdeposit values | 0.01 descriptor code values | Scenario |\n| --- | --- | --- |\n| `32` and `45` | SM11AA | Simulates verifying the account. |\n| `10` and `11` | SM33CC | Simulates exceeding the number of allowed verification attempts. |\n| `40` and `41` | SM44DD | Simulates a microdeposit timeout. |\n\n[](#additional-considerations)\n\n### Microdeposit verification failure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a bank account is pending verification with microdeposits, the customer can fail to verify for three reasons:\n\n*   The microdeposits failed to send to the customer’s bank account (this usually indicates a closed or unavailable bank account or incorrect bank account number).\n*   The customer made 10 failed verification attempts for the account. Exceeding this limit means the bank account can no longer be verified or reused.\n*   The customer failed to verify the bank account within 10 days.\n\nIf the bank account fails verification for one of these reasons, you can [handle the `checkout.session.async_payment_failed` event](https://docs.stripe.com/api/events/types?event_types-invoice.payment_succeeded=#event_types-checkout.session.async_payment_failed) to contact the customer about placing a new order.",
    "title": "Accept an ACH Direct Debit payment | Stripe Documentation",
    "description": "Build a custom payment form or use Stripe Checkout to accept payments with ACH Direct Debit.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/identity/verification_sessions/object",
    "markdown": "# The VerificationSession object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    client\\_reference\\_idnullable string\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   #### \n    \n    client\\_secretnullable string\n    \n    The short-lived client secret used by Stripe.js to [show a verification modal](https://docs.stripe.com/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://docs.stripe.com/identity/verification-sessions#client-secret) to learn more.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    last\\_errornullable object\n    \n    If present, this property tells you the last error encountered when processing the verification.\n    \n*   #### \n    \n    last\\_verification\\_reportnullable stringExpandable\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   A set of options for the session’s verification checks.\n    \n*   #### \n    \n    provided\\_detailsnullable objectExpandable\n    \n    Details provided about the user being verified. These details may be shown to the user.\n    \n*   Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null.\n    \n*   Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://docs.stripe.com/identity/how-sessions-work).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The VerificationSession has been invalidated for future submission attempts. |\n    | `processing`<br><br>The session has been submitted and is being processed. Most [verification checks](https://docs.stripe.com/identity/verification-checks) are processed in less than 1 minute. |\n    | `requires_input`<br><br>Requires user input before processing can continue. |\n    | `verified`<br><br>Processing of all the verification checks are complete and successfully verified. |\n    \n\n*   The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://docs.stripe.com/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe.\n    \n*   #### \n    \n    verification\\_flownullable string\n    \n    The configuration token of a Verification Flow from the dashboard.\n    \n*   #### \n    \n    verified\\_outputsnullable objectExpandable\n    \n    The user’s verified data.\n    \n\nThe VerificationSession object\n\n```\n{  \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680526,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"document\",  \"url\": \"...\"}\n```\n\n## [Create a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/create)\n\nCreates a VerificationSession object.\n\nAfter the VerificationSession is created, display a verification modal using the session `client_secret` or send your users to the session’s `url`.\n\nIf your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.\n\nRelated guide: [Verify your users’ identity documents](https://docs.stripe.com/identity/verify-identity-documents)\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A set of options for the session’s verification checks.\n    \n*   Details provided about the user being verified. These details may be shown to the user.\n    \n*   The URL that the user will be redirected to upon completing the verification flow.\n    \n*   The type of [verification check](https://docs.stripe.com/identity/verification-checks) to be performed. You must provide a `type` if not passing `verification_flow`.\n    \n*   The ID of a Verification Flow from the Dashboard. See https://docs.stripe.com/identity/verification-flows.\n    \n\n### Returns\n\nReturns the created VerificationSession object\n\nPOST /v1/identity/verification\\_sessions\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=document\n```\n\n```\n{  \"id\": \"vs_1NuN4zLkdIwHu7ixleE6HvkI\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680197,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {},  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"document\",  \"url\": \"...\"}\n```\n\n## [Update a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/update)\n\nUpdates a VerificationSession object.\n\nWhen the session status is `requires_input`, you can use this method to update the verification check and options.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A set of options for the session’s verification checks.\n    \n*   Details provided about the user being verified. These details may be shown to the user.\n    \n\n### Returns\n\nReturns the updated VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN9WLkdIwHu7ix597AR9uz \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=id_number\n```\n\n```\n{  \"id\": \"vs_1NuN9WLkdIwHu7ix597AR9uz\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680478,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {},  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"id_number\",  \"url\": \"...\"}\n```\n\n## [Retrieve a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/retrieve)\n\nRetrieves the details of a VerificationSession that was previously created.\n\nWhen the session status is `requires_input`, you can use this method to retrieve a valid `client_secret` or `url` to allow re-submission.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a VerificationSession object\n\nGET /v1/identity/verification\\_sessions/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_sessions/vs_1NuNAILkdIwHu7ixh7OtGMLw \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",  \"object\": \"identity.verification_session\",  \"client_secret\": \"...\",  \"created\": 1695680526,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": null,  \"status\": \"requires_input\",  \"type\": \"document\",  \"url\": \"...\"}\n```\n\n## [List VerificationSessions](https://docs.stripe.com/api/identity/verification_sessions/list)\n\nReturns a list of VerificationSessions\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Only return VerificationSessions that were created during the given date interval.\n    \n*   Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://docs.stripe.com/identity/how-sessions-work).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The VerificationSession has been invalidated for future submission attempts. |\n    | `processing`<br><br>The session has been submitted and is being processed. Most [verification checks](https://docs.stripe.com/identity/verification-checks) are processed in less than 1 minute. |\n    | `requires_input`<br><br>Requires user input before processing can continue. |\n    | `verified`<br><br>Processing of all the verification checks are complete and successfully verified. |\n    \n\n### More parameters\n\n### Returns\n\nList of VerificationSession objects that match the provided filter criteria.\n\nGET /v1/identity/verification\\_sessions\n\n```\ncurl -G https://api.stripe.com/v1/identity/verification_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/identity/verification_sessions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",      \"object\": \"identity.verification_session\",      \"client_secret\": \"...\",      \"created\": 1695680526,      \"last_error\": null,      \"last_verification_report\": null,      \"livemode\": false,      \"metadata\": {},      \"options\": {        \"document\": {          \"require_matching_selfie\": true        }      },      \"redaction\": null,      \"status\": \"requires_input\",      \"type\": \"document\",      \"url\": \"...\"    }    {...}    {...}  ],}\n```",
    "title": "The VerificationSession object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/elements_object/create_without_intent",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/identity/modal",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/identity/insights",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Insights\n\n## Learn how to identify risks and understand signals from verification checks.\n\nStripe Identity’s machine learning system considers a variety of signals when verifying a user’s identity. It examines a number of factors to produce insights that can give further clarity into Stripe’s decision.\n\nThese insights are more nuanced than the top-level verification decisions, and you can use them to assist with manual reviews or customer support processes.\n\n### Definitions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Insights**: The name Stripe uses to refer to the collection of all insights.\n*   **Insight**: The specific attribute scored (for example, blur, authenticity). It’s of either type `Level` or `Label`.\n    *   **Level**: These insights provide a computed level, which is a score that translates to low, elevated, or high. Insights of this type evaluate the potential risk to verification.\n    *   **Label**: These insights provide a binary value of being either present or absent. Some of these insights evaluate a potential risk to verification, but others might be neutral, with no inherent risk associated with them.\n\n## Document insights![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese are the insights produced on [document checks](https://docs.stripe.com/identity/verification-checks?type=document):\n\n| Name | Type | Description |\n| --- | --- | --- |\n| Activity on Stripe network | `Label` | Indicates whether the identity presented fails to match a Stripe-known identity. It’s not uncommon for an identity to be unknown, though it does represent higher risk than a known user. |\n| Barcode or machine-readable zone | `Level` | Indicates if the machine-readable zone or barcode is present and decoded, but was manipulated. |\n| Document authenticity | `Level` | Indicates whether the document presented might have been digitally manipulated or is otherwise inauthentic. |\n| Fraud | `Level` | This comprehensive score evaluates various signals related to document verification, including signals from Stripe Network data. |\n| Image blurriness | `Level` | Indicates the severity of the blurriness of the document image presented during the verification process. |\n| Physical document detection | `Level` | Indicates whether the document presented is a screenshot of a document. |\n| Risky behavior on the Stripe network | `Label` | Indicates whether the identity presented matches a Stripe-known identity with a history of high risk activity. |\n\n## Selfie insights![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese are the insights produced on [selfie checks](https://docs.stripe.com/identity/verification-checks?type=selfie):\n\n| Name | Type | Description |\n| --- | --- | --- |\n| Duplicate selfie | `Label` | Indicates whether the selfie presented matches a selfie from a previous identity verification. |\n| Duplicate selfie with a data mismatch | `Label` | Indicates that the selfie presented matches a selfie from a previous identity verification, but the extracted document data from each doesn’t match. |\n| Selfie and document match | `Level` | Indicates whether the selfie isn’t a high confidence match with the face on the document. |\n| Selfie liveness | `Level` | Indicates that the selfie presented might not have been a live person in front of the camera, such as a photograph or screen presentation attack. |\n\n## Dashboard usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Dashboard page for a submitted VerificationSession contains a panel showing the insights generated for this session.",
    "title": "Insights | Stripe Documentation",
    "description": "Learn how to identify risks and understand signals from verification checks.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/financial_connections/transactions/object",
    "markdown": "# The Transaction object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The ID of the Financial Connections Account this transaction belongs to.\n    \n*   The amount of this transaction, in cents.\n    \n\n*   The description of this transaction.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The status of the transaction.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `pending`<br><br>This transaction is processing and does not yet affect the account’s balance. |\n    | `posted`<br><br>This transaction has processed and affects the account’s balance. |\n    | `void`<br><br>This transaction has disappeared and no longer affects the account’s balance. |\n    \n*   The timestamps at which the transaction status was updated.\n    \n*   Time at which the transaction was transacted. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    transaction\\_refreshstring\n    \n    The token of the transaction refresh that last updated or created this transaction.\n    \n*   Time at which the object was last updated. Measured in seconds since the Unix epoch.\n    \n\n```\n{  \"id\": \"fctxn_1MwVKd2eZvKYlo2ChNw2UxSa\",  \"object\": \"financial_connections.transaction\",  \"account\": \"fca_1MwVKd2eZvKYlo2CnlgoF3I4\",  \"amount\": 300,  \"currency\": \"usd\",  \"description\": \"Rocket Rides\",  \"livemode\": false,  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1681412239,    \"void_at\": null  },  \"transacted_at\": 1681412239,  \"transaction_refresh\": \"fctxnref_NhvAgiKSFDg9jOe6eIlj41X5\",  \"updated\": 1681412239}\n```\n\n## [Retrieve a Transaction](https://docs.stripe.com/api/financial-connections/transaction/retrieve)\n\nRetrieves the details of a Financial Connections `Transaction`\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Transaction` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/financial\\_connections/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/financial_connections/transactions/fctxn_1MwVKd2eZvKYlo2ChNw2UxSa \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fctxn_1MwVKd2eZvKYlo2ChNw2UxSa\",  \"object\": \"financial_connections.transaction\",  \"account\": \"fca_1MwVKd2eZvKYlo2CnlgoF3I4\",  \"amount\": 300,  \"currency\": \"usd\",  \"description\": \"Rocket Rides\",  \"livemode\": false,  \"status\": \"posted\",  \"status_transitions\": {    \"posted_at\": 1681412239,    \"void_at\": null  },  \"transacted_at\": 1681412239,  \"transaction_refresh\": \"fctxnref_NhvAgiKSFDg9jOe6eIlj41X5\",  \"updated\": 1681412239}\n```\n\n## [List Transactions](https://docs.stripe.com/api/financial_connections/transactions/list)\n\nReturns a list of Financial Connections `Transaction` objects.\n\n### Parameters\n\n*   The ID of the Stripe account whose transactions will be retrieved.\n    \n*   A filter on the list based on the object `transacted_at` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:\n    \n*   #### \n    \n    transaction\\_refreshobject\n    \n    A filter on the list based on the object `transaction_refresh` field. The value can be a dictionary with the following options:\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` `Transaction` objects, starting after transaction `starting_after`. Each entry in the array is a separate `Transaction` object. If no more transactions are available, the resulting array will be empty.\n\nGET /v1/financial\\_connections/transactions\n\n```\ncurl -G https://api.stripe.com/v1/financial_connections/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=fca_1NpHiT2eZvKYlo2C6pRwOFjr \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/financial_connections/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fctxn_1NpHiT2eZvKYlo2CZFvnM3HJ\",      \"object\": \"financial_connections.transaction\",      \"account\": \"fca_1NpHiT2eZvKYlo2C6pRwOFjr\",      \"amount\": 300,      \"currency\": \"usd\",      \"description\": \"Rocket Rides\",      \"livemode\": false,      \"status\": \"posted\",      \"status_transitions\": {        \"posted_at\": 1694467941,        \"void_at\": null      },      \"transacted_at\": 1694467941,      \"transaction_refresh\": \"fctxnref_OcWmGrWptAdJ2bmpYE2P0Hws\",      \"updated\": 1694467941    }    {...}    {...}  ],}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Transaction object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/cli",
    "markdown": "# Stripe CLI Reference\n\n[cli](https://docs.stripe.com/cli)",
    "title": "Stripe CLI Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/identity/verification-checks?type=id-number",
    "markdown": "# Verification checks | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the different verification checks supported by Stripe Identity.\n\nStripe Identity currently supports five types of verification checks: document, selfie, ID number, address, and phone.\n\nEach verification check requires different information from your user, has different coverage, and has a different verification flow. After you’ve integrated one check, you can add another with minimal changes to your integration.\n\nID Number checks provide a way to verify a user’s name, date of birth, and national ID number. Stripe uses a combination of third-party data sources such as credit agencies or bureaus, utility or government-issued databases, and others to verify the provided ID number.\n\nTo add ID number checks to your app, see [Creating a VerificationSession](https://docs.stripe.com/identity/verification-sessions#create).\n\n### Availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nID Number checks are available in the following countries:\n\n### Additional Availability Invite only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Reach out to support](https://support.stripe.com/contact) to request access to ID Number countries in the following countries:\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Verify your users’ identity documents](https://docs.stripe.com/identity/verify-identity-documents)\n*   [Adding selfie checks](https://docs.stripe.com/identity/selfie)\n*   [The Verification Sessions API](https://docs.stripe.com/identity/verification-sessions#create)",
    "title": "Verification checks | Stripe Documentation",
    "description": "Learn about the different verification checks supported by Stripe Identity.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/cli/fixtures",
    "markdown": "# Stripe CLI Reference\n\n[cli](https://docs.stripe.com/cli)",
    "title": "Stripe CLI Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/pending-updates-reference",
    "markdown": "# Pending updates reference | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about the pending updates feature.\n\n## Supported attributes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOnly certain attributes can be used to create a pending update. These attributes either control proration behavior or generate new [invoices](https://docs.stripe.com/api/invoices \"invoices\").\n\nThe supported attributes for the [update subscription](https://docs.stripe.com/api/subscriptions/update) endpoint are:\n\n*   `expand`\n*   `payment_behavior`\n*   `proration_behavior`\n*   `proration_date`\n*   `billing_cycle_anchor`\n*   `items`\n    *   `price`\n    *   `quantity`\n*   `trial_end`\n*   `trial_from_plan`\n*   `add_invoice_items`\n\nThe supported attributes for the [create subscription item](https://docs.stripe.com/api/subscription_items/create) and [update subscription item](https://docs.stripe.com/api/subscription_items/update) endpoints are:\n\n*   `expand`\n*   `payment_behavior`\n*   `proration_behavior`\n*   `proration_date`\n*   `price`\n*   `quantity`\n\n## Pending updates lifecycle ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf payment succeeds, the invoice is updated to `paid` and the changes are applied to the [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") immediately. If payment fails, the updated values are added to the `pending_update` hash on the `Subscription` object. The `latest_invoice` for the subscription refers to an unpaid invoice in an `open` status. The subscription will continue to cycle as if no update request was made.\n\nThere are two ways to [handle payment failures](https://docs.stripe.com/billing/subscriptions/pending-updates#handling-failed-payments). These are related to declines and customer authentication. After resolving these issues, payment is attempted again. If the payment succeeds, the changes are applied and the `pending_update` hash is cleared. If payment fails again, the `pending_update` hash remains on the subscription with the original expiry date and no changes are applied.\n\nIf you [cancel a pending update](https://docs.stripe.com/billing/subscriptions/pending-updates#canceling-changing), the `pending_update` hash is cleared and the associated changes are discarded.\n\n### Expiration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you don’t take any action after an update fails, the invoice is voided and the pending update is discarded after the `expired_at` time on the `pending_update` has passed. This time is set to either the [trial end](https://docs.stripe.com/api/subscriptions/object#subscription_object-trial_end) time or the [current period end](https://docs.stripe.com/api/subscriptions/object#subscription_object-current_period_end), whichever comes first. If these times are greater than 23 hours from the time the update is made, the `expired_at` time is calculated to 23 hours after the update call was made.\n\nStripe also automatically voids the invoice and removes the pending update if any of the following occurs:\n\n*   The subscription reaches a billing threshold.\n*   A subscription schedule linked to the subscription transitions to a new phase.\n\n## Pending updates events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [webhooks](https://docs.stripe.com/webhooks \"webhook\") to listen for the following events related to pending updates:\n\n| Event | Purpose |\n| --- | --- |\n| `customer.subscription.updated` | Receive notifications for subscriptions, checking for the `pending_updates` hash and [resolving payment failures](https://docs.stripe.com/billing/subscriptions/pending-updates#handling-failed-payments) if needed. |\n| `customer.subscription.pending_update_applied` | Receive notifications when pending updates are applied so that you can take further actions like upgrading, downgrading, provisioning or deprovisioning services, and so on. |\n| `customer.subscription.pending_update_expired` | Receive notifications when pending updates expire or are automatically voided, and if needed, try the update request again. |\n\n## Pending updates and subscription schedules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPending updates and [subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules) can both be used to manage subscriptions. If a pending update exists when a schedule changes phases, the pending update is discarded and the associated invoice is voided before the phase transition occurs. You can retry the update request after the phase transition if needed.\n\n## Usage records![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a subscription includes metered items, Stripe bills any outstanding usage records on the pending update invoice. However, if payment for the pending update doesn’t occur before the expiration date, Stripe discards these usage records, which prevents billing on the subsequent invoice. Additionally, if the pending update removes a metered price, Stripe disregards any usage reported between the pending update’s creation and the resulting invoice’s payment, excluding it from all invoices.",
    "title": "Pending updates reference | Stripe Documentation",
    "description": "Learn more about the pending updates feature.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/saas",
    "markdown": "# Integrate a SaaS business on Stripe\n\n## Learn how to build a Software as a Service (SaaS) business with Billing and other Stripe products.\n\nMany Stripe users have a SaaS business model that involves subscriptions or recurring payments. This guide describes the unique actions you need to take in your Stripe integration to support typical SaaS business models. To help get you started more quickly, this guide presents no-code options where available.\n\n[](#modeling)\n\nSet up pricing structures for different products. Stripe Billing supports many types of pricing models, including:\n\n*   Flat rate-Good-better-best\n*   Per-seat\n*   Usage-based pricing\n*   Tiered pricing\n*   Multiple prices\n*   Multiple products in a subscription\n\nLearn more about [product modeling](https://docs.stripe.com/products-prices/pricing-models).\n\n[](#pricing)\n\nThe pricing table is an embeddable UI component that displays pricing models for different subscription options. With pricing tables, customers can view pricing information and select a subscription. After selecting a subscription, they can complete the purchase with Stripe Checkout. Learn more about [pricing tables for SaaS businesses](https://docs.stripe.com/payments/checkout/pricing-table).\n\n![Pricing table is an embedded UI that displays pricing information and takes customers to Checkout.](https://b.stripecdn.com/docs-statics-srv/assets/pricing-table-embed.b27a06fcd84b57a8866a8b4b62323fdc.png)\n\nEmbed a pricing table on your website to display pricing details and convert customers to checkout.\n\n[](#discounts)\n\nUse discounts to acquire new subscribers. You can create coupons and apply them to a subscription or create a customer-facing promotion code that customers can apply at checkout. Learn more about [discounts for subscriptions](https://docs.stripe.com/billing/subscriptions/coupons).\n\n[](#trials)\n\nLet customers try your product before subscribing. With Stripe Checkout, they can sign up for a trial without submitting payment information. You can configure a subscription to automatically send a reminder email when the trial is about to expire. Learn more about [trials](https://docs.stripe.com/payments/checkout/free-trials).\n\n[](#subscriptions)\n\nThe customer portal lets customers manage their subscriptions in a self-serve environment where they can:\n\n*   Update their subscription plan\n*   Cancel their subscription plan\n*   Add or update a payment method\n*   Update billing and shipping information\n*   Review their invoice history\n\nLearn more about [integrating the customer portal](https://docs.stripe.com/customer-management).\n\n![Customer portal](https://b.stripecdn.com/docs-statics-srv/assets/customer-portal.c7a8337f3b8ef35b9c55595187508996.png)\n\nCustomer portal\n\n[](#invoices)\n\nInvoices represent how much money a customer owes, and Stripe automatically generates one for every period in a subscription billing cycle. You can also create an invoice manually for custom deals or one-time payments. When an invoice is due, Stripe tries to collect payment by either automatically charging the payment method on file, or emailing the invoice. Learn more about [invoices](https://docs.stripe.com/invoicing).\n\n![Hosted Invoice Page](https://b.stripecdn.com/docs-statics-srv/assets/hosted-invoice-page-guide.df3cc5a1e4180c338269aacdfa792180.png)\n\nHosted Invoice Page\n\n[](#monitor)\n\nMonitor subscriptions in the Dashboard or set up webhook endpoints and listen for events. Learn more about [subscriptions and webhooks](https://docs.stripe.com/billing/subscriptions/webhooks).\n\nYou can also use [Affiliate and referral Stripe Apps](https://marketplace.stripe.com/categories/affiliate_and_referrals) to set up and manage referral and affiliate programs with Stripe, get customer information, and automate commission adjustments from the Stripe Dashboard.\n\n[](#retries)\n\nUse recovery tools like Smart Retries and reminder emails to recover revenue that would be lost to involuntary churn. Learn more about [revenue recovery tools](https://docs.stripe.com/billing/revenue-recovery).\n\n[](#tax)\n\nAfter you register to collect taxes, Stripe Tax determines your customer’s location, and automatically calculates and collects the correct amount of tax at checkout. Stripe Tax supports sales tax, VAT, and GST. Learn more about [Stripe Tax](https://docs.stripe.com/tax).\n\n[](#recurring-revenue)\n\nUse Stripe Revenue Recognition to automate revenue reporting and stay compliant with rules for accrual accounting. Stripe Revenue Recognition automates revenue accounting based on your payments and billing transactions.\n\nLearn more about [Revenue Recognition](https://docs.stripe.com/revenue-recognition).\n\n[](#test)\n\nTest your integration to make sure it behaves as you expect. With test clocks, you can simulate how a subscription integration would handle events such as trials and payment failures over a billing cycle. Learn more about [testing subscriptions integrations](https://docs.stripe.com/billing/testing).",
    "title": "Integrate a SaaS business on Stripe | Stripe Documentation",
    "description": "Learn how to build a Software as a Service (SaaS) business with Billing and other Stripe products.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/sales-led-billing",
    "markdown": "# Sales-led B2B billing | Stripe DocumentationThe Stripe Docs logo\n\n## Quote and bill complex sales contracts automatically on Stripe Billing.\n\nStripe Billing enables you to set up and automate workflows for your sales team. This guide explains how to model complex sales contracts, use Quotes to negotiate them with your customers, create sales-negotiated deals in the Stripe Dashboard, and update or renew such contracts. If a feature in this guide doesn’t have a Beta label, then it’s publicly available.\n\n## Request early access![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following form to request early access to the beta features mentioned in this guide.\n\n## Overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSales-led B2B billing features allow sales-focused businesses to track and manage sales and fulfillment processes end-to-end. A typical sales deal flow is an iterative process that lasts as long as the lifecycle of your customer. It starts with a quote that the sales team creates and finalizes with the customer. After finalizing the quote, your team shapes the deal in Stripe Billing. Throughout the lifecycle of the deal, events like end of term renewals, upselling new products, and amending mid-cycle changes require you to make changes to the existing deal or create a new one. Using the Stripe sales-led B2B billing features, you can automate and manage the end-to-end deal flow within Stripe.\n\nSee the following diagram for a visual representation of a common deal lifecycle.\n\n![Deal flow](https://b.stripecdn.com/docs-statics-srv/assets/deal-flow.5b5d78bfd1e971b5143da8f450c506bf.png)\n\n## Model your contract![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nQuotes allow you to deliver estimated pricing for requested sales deals and can help facilitate negotiation before beginning a subscription or invoice. You can offer pre-sales deal pricing by creating a quote for the customer. Whether your sold deal requires a single invoice, a subscription, or a multiphase ramp up deal, use quotes to provide your customers with a price estimate, including any discounts or taxes.\n\nYour sales team can start drafting a quote in the Stripe dashboard or automate the creation of one using the Stripe API. The quote remains in draft mode during the initial negotiation. After you finalize the quote you can send it to the customer for approval. Upon approving the quote, your sales team can convert the approved quote to a deployed deal containing a subscription, invoice, or multiphase installment plan.\n\nYou don’t use quotes exclusively during the initial deal creation process—you also use them when customers renew, buy additional products mid-cycle (upsell), or request changes to their existing deals. In all of these scenarios, the sales team typically goes through a new quote negotiation process and uses the approved quote to apply an amendment to the existing deal or create a new deal. Stripe’s advanced multiphase quote functionality (beta) enables your team to apply amendments to the existing deal. These functionalities work directly with Stripe subscriptions, subscription schedules, and invoices to give full flexibility of building a complex deal process.\n\nLearn more about some of the existing Stripe [quote functionalities](https://docs.stripe.com/quotes) and sign up in the [form above](#request-early-access) to get access to some of the more advanced deal flow quoting capabilities.\n\nIf you’re using a third-party quoting tool to create and finalize your quotes, you can use one of our [connectors](https://docs.stripe.com/connectors) to create your sold deals within Stripe. For example, the [Stripe Billing connector for Salesforce (beta)](https://docs.stripe.com/billing/integrations/salesforce) enables your sales team to manage subscriptions on Stripe directly on Salesforce.\n\n### Model your pricing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing Stripe Products and Prices, you can model your subscription pricing model and one-off charges. Both subscriptions and invoices work with Products and Prices. In many sales deal scenarios, the sales team overrides the original price based on the negotiated deal. Ad-hoc prices allow your team to override predefined prices. Read the [getting started guide](https://docs.stripe.com/products-prices/getting-started) to learn how to create products and prices. If you already have a product catalog in another system, you can also [import that product catalog](https://docs.stripe.com/products-prices/getting-started#import-products-prices) into Stripe using the API. If you have any questions, contact Stripe Support at [support-migrations@stripe.com](mailto:support-migrations@stripe.com).\n\n## Create a contract![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSales deals can become very complex. You might have billing cycle durations with different pricing models, discounts, and advanced fee structures. A simple scenario is when you ramp up your pricing over a period of three years. Stripe Billing’s [subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules) enable your sales team to create these deals. Your subscriptions can be basic flat rate monthly deals or complex multi-year ramp ups.\n\nThe following sections describe some of the sales-led B2B billing capabilities for creating a sales deal.\n\n### Create contract subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s sales-led B2B billing features work on top of Stripe Billing, our subscriptions platform. Stripe Billing allows you to create subscriptions and update different aspects of subscriptions, such as the billing cycle and the subscription price. You can use subscription schedules to automate these updates over time. Subscription schedules are made up of phases that define how and when changes to a subscription occur. For example, you can set a subscription schedule to begin a subscription on a future date. Here is a quick video of how to create complex multi-phase subscription schedules using the Stripe Billing dashboard:\n\nSubscription schedules in the Dashboard\n\n### Create contract invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s sales-led B2B billing features also work on top of Stripe Invoicing, allowing you to [create invoices](https://docs.stripe.com/invoicing) with complex fee structures, automated sales taxes, and due date modifications. Converting a quote automatically creates an invoice. You can also create them manually from the Stripe Dashboard. After you create the invoice, you can also send the invoice link to your users to pay it through a hosted invoice page. Stripe Invoicing automates the email reminders for any past due and failed payments.\n\n### Prebill customers in advance Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome customers pay for a certain number of billing cycles when they sign the deal. Sales prebills the customer when the deal is created. Using the Stripe prebilling feature you can charge customers for more than the next service period. This enables use cases like charging customers up front for their first 3 months when they sign up for your service, or charging early for an upcoming renewal.\n\nA prebilled subscription continues to cycle naturally, but no invoices are generated based on the recurring price until the prebilled period has ended. Prebilling creates an invoice immediately with the current period plus the number of additional cycles to collect up front. Afterward, a prebilled subscription continues to cycle naturally. One-off subscription invoices are generated at the time of renewal if pending invoice items are created during the prebilled period.\n\n### Offer trials and discounts Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSales teams often offer trials and discounts during deal negotiations to incentivize customers. You can offer free time-based trials such as a 14-day free trial before sending the invoices, or paid trials that have a promotional price for the first 2 months of the deal.\n\n### Additional discount features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can apply multiple discounts to each phase of a given subscription. You can also apply discounts at a line-item level for each price-point you sell.\n\n## Update a contract Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDeals get updated often. For example, the customer might be approaching the end of the deal and need a renewal plan, they might be buying a new product soon after the closing, or requesting a change to the originally agreed upon contract. All of these reasons cause sales teams to create an amendment. Amendments allow your sales team to apply updates to deals without managing the complex changes that need to happen to every phase of the subscription. You can apply amendments directly to an existing deal or apply them through a new quote agreement.\n\nChanges to a deal such as upgrading or downgrading can result in prorated charges. You can configure your deal to enable proration charges when you apply amendments. You can also decide to handle prorations differently for different phases of the deal using Stripe’s advanced proration features.\n\nYou can prebill customers, offer different trials, and apply additional discounts during the deal update process. Your sales team can apply these changes from the Stripe Dashboard or automate it through our [third-party connectors](https://docs.stripe.com/connectors).\n\n## Let customers manage invoices and subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the Stripe customer portal as a no-code way to manage subscriptions and invoices. You can configure the customer portal to allow certain subscription management features for your customers. After you create and amend deals, customers can go to the customer portal to manage their payment method, download invoices, and pay invoices. Your sales team can share a direct link to the customer portal with your customers or your product team to integrate it inside your SaaS application.\n\nYou can also use the Stripe API and webhooks to automatically apply the deal updates inside your SaaS app or sync with third-party tools.\n\n## Migrate old deals to new pricing Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have deals that you need to update to a new pricing model, it might be time consuming to update those deals manually. With the price migration toolkit, you can migrate all or a portion of your existing deals to new pricing models.\n\nIf you have subscriptions from other sources, like an internal homegrown billing system or a third-party billing solution, you can [import them into Stripe Billing](https://docs.stripe.com/billing/subscriptions/migrate-subscriptions). If you’re also moving payment processors from a third-party to Stripe Payments, you can use our data migration process to request a migration on your behalf. To request support on data migration, contact [billing-migrations@stripe.com](mailto:billing-migrations@stripe.com).\n\n## Billing features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHere’s a list of Stripe’s sales-led B2B billing capabilities. If you’re interested in getting early access to some of these beta features, you can sign up in the [form above](#request-early-access).\n\n| Component | Description |\n| --- | --- |\n| **Quotes** | Use [quotes](https://docs.stripe.com/quotes) to combine recurring and one-off line items so you can provide your customers with a price estimate, including any discounts or taxes. |\n| **Advanced multi-phase quotes**<br><br>Beta | Create quotes with multiple phases that correspond to your sales process phases. |\n| **Invoices** | Use [Stripe Invoicing](https://docs.stripe.com/invoicing) to create, customize, and send invoices to customers. Automatically charge your customer’s payment method on file, or email them the invoice with or without a link to a payment page. |\n| **Hosted invoice page** | Use the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page#set-payment-methods) to securely collect payment from your customers. From the Hosted Invoice Page, you can configure invoices to allow payment with one or more of the [supported payment methods](https://docs.stripe.com/invoicing/payment-methods). |\n| **Subscriptions** | Create subscriptions and multi-phase subscription schedules to model your complex deal flow. |\n| **Prebilling**<br><br>Beta | Prebill customers ahead of schedule. Prebilling lets you charge customers in advance for upcoming billing cycles. |\n| **Advanced discounts**<br><br>Beta | Apply multiple discounts to subscriptions or individual line items. |\n| **Prorate scheduled changes upfront**<br><br>Beta | By default, prorations might occur when the subscription is updated. When updates are scheduled for the same billing cycle, simplify prorations by prorating for all the scheduled changes up front rather than every time the updates happen. |\n| **Price migrations**<br><br>Beta | Use price migration to move customers from an old pricing model to a new pricing model. |\n| **Amendments**<br><br>Beta | Use amendments to update an existing multi-phase contract. |\n| **Paid trials**<br><br>Beta | Charge a fee for trial days. |\n| **Customer portal** | Let your customers manage their subscriptions through a Stripe-hosted [customer portal](https://docs.stripe.com/customer-management) without writing any code. |",
    "title": "Sales-led B2B billing | Stripe Documentation",
    "description": "Quote and bill complex sales contracts automatically on Stripe Billing.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/testing",
    "markdown": "# Testing Stripe Connect | Stripe DocumentationThe Stripe Docs logo\n\n## Before going live, test your Connect integration for account creation, identity verification, and payouts.\n\nUse testing to make sure your [Connect](https://docs.stripe.com/connect \"Connect\") integration handles different flows correctly. Use [test mode](https://docs.stripe.com/test-mode) to simulate live mode while taking advantage of Stripe-provided special tokens to use in your tests. Take a look at our [payments testing guide](https://docs.stripe.com/testing) for more information on testing charges, disputes, and so on.\n\n## Create test accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create multiple test accounts and use any [account type](https://docs.stripe.com/connect/accounts) or [controller properties](https://docs.stripe.com/connect/migrate-to-controller-properties) you might need (for example, representing multiple countries).\n\nYou can create test accounts using the [Accounts API](https://docs.stripe.com/api/accounts/create) or in the [Stripe Dashboard](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#creating-accounts).\n\nUse `000-000` as the SMS code when prompted for test accounts.\n\n## Test the OAuth flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can test your OAuth integration with connected accounts that use a Stripe-hosted dashboard using your test mode `client_id`.\n\nYour test mode `client_id` is `ca_FkyHCg7X8mlvCUdMDao4mMxagUfhIwXb`. You can find this in your [Connect OAuth settings](https://dashboard.stripe.com/settings/connect/onboarding-options/oauth).\n\nYour test mode `client_id` allows you to:\n\n*   Set your `redirect_uri` to a non-HTTPS URL\n*   Set your `redirect_uri` to **localhost**\n*   Force-skip the account form instead of having to fill out an entire account application (Stripe Dashboard accounts only)\n*   Get test access tokens for connected accounts\n\nTo test the [OAuth](https://docs.stripe.com/connect/oauth-standard-accounts) flow, create a new account after clicking the OAuth link. You can also test connecting an existing Stripe account only if the email is different from your platform account.\n\n## Identity verification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter creating a test connected account, you can use tokens to test different verification statuses to make sure you’re handling different requirements and account states. You can use the following tokens to test verification with test accounts.\n\n### Test dates of birth ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these dates of birth (DOB) to trigger certain verification conditions.\n\n| DOB | Type |\n| --- | --- |\n| `1901-01-01` | Successful verification. Any other DOB results in unsuccessful verification. |\n| `1902-01-01` | Successful, immediate verification. The verification result is returned directly in the response, not as part of a [webhook](https://docs.stripe.com/webhooks \"webhook\") event. |\n| `1900-01-01` | This DOB triggers an Office of Foreign Assets Control (OFAC) alert. |\n\n### Test addresses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these addresses for `line1` to trigger certain verification conditions. You must pass in legitimate values for the `city`, `state`, and `postal_code` arguments.\n\n| Token | Type |\n| --- | --- |\n| `address_full_match`​ | Successful verification. |\n| `address_no_match` | Unsuccessful verification. |\n| `address_line1_no_match` | Unsuccessful verification from partial address match. |\n\n### Test personal ID numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse these personal ID numbers for [individual.id\\_number](https://docs.stripe.com/api/accounts/create#create_account-individual-id_number) or the [id\\_number](https://docs.stripe.com/api/persons/create#create_person-id_number) attribute on the `Person` object to trigger certain verification conditions.\n\n| Number | Type |\n| --- | --- |\n| `000000000` | Successful verification. **0000** also works for SSN last 4 verification. |\n| `111111111` | Unsuccessful verification (identity mismatch). |\n| `222222222` | Successful, immediate verification. The verification result is returned directly in the response, not as part of a [webhook](https://docs.stripe.com/webhooks \"webhook\") event. |\n\n### Test identity documents![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor testing, use file tokens instead of uploading your own test IDs. For details, refer to [Uploading a file](https://docs.stripe.com/connect/handling-api-verification#upload-a-file).\n\n### Test file tokens ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these file tokens to trigger certain identity verification conditions.\n\n| Token | Type |\n| --- | --- |\n| `file_identity_document_success` | Uses the verified image and marks that document requirement as satisfied. |\n| `file_identity_document_failure` | Uses the unverified image and marks that document requirement as not satisfied. |\n\n## Business information verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Business address validation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn some countries, the business address associated with your connected account must be validated before charges, [payouts](https://docs.stripe.com/payouts \"payout\"), or both can be enabled on the connected account.\n\n### Test business addresses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these addresses for `line1` to trigger certain validation conditions. You must pass in legitimate values for the `city`, `state`, and `postal_code` arguments.\n\nMake sure you start with an address token that has the least permissive validation condition you want to test for. This is because you can’t use an address token that has a more restrictive validation condition than the previous token used. For example, if you provided `address_full_match` to have both charges and payouts enabled, you can’t disable payouts or charges afterward by changing the token to an invalid one. You can work around this by creating a new account with the relevant token.\n\n| Token | Type |\n| --- | --- |\n| `address_full_match`​ | Both charges and payouts are enabled on the account. |\n| `address_no_match`​ | Only charges are enabled on the account. Since validation failed on the `line1` attribute, it becomes listed again in the [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) hash. |\n| `address_line1_no_match` | Neither charges nor payouts are enabled on the account. Since validation failed, the address attributes become listed again in the [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) hash. |\n\n### Test business tax IDs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse these business tax ID numbers for [company.tax\\_id](https://docs.stripe.com/api/accounts/create#create_account-company-tax_id) to trigger certain verification conditions.\n\n| Number | Type |\n| --- | --- |\n| `000000000` | Successful verification. |\n| `000000001` | Successful verification as a non-profit. |\n| `111111111` | Unsuccessful verification (identity mismatch). |\n| `111111112` | Unsuccessful verification (tax ID not issued). |\n| `222222222` | Successful, immediate verification. The verification result is returned directly in the response, not as part of a [webhook](https://docs.stripe.com/webhooks \"webhook\") event. |\n\n### Test directorship verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe performs directorship verification by comparing the list of directors on the `Account` object against a list retrieved from local registries. If the country requires it, you can trigger verification for an `Account` object by using these tokens for the [person.first\\_name](https://docs.stripe.com/api/persons/object#person_object-first_name) attribute and setting the [person.relationship.director](https://docs.stripe.com/api/persons/object#person_object-relationship-director) attribute to true.\n\n| Token | Type |\n| --- | --- |\n| `mismatch_director` | Unsuccessful verification of director due to a mismatched name. This can trigger a `verification_directors_mismatch` verification error. |\n| `missing_director` | Unsuccessful verification due to directors missing on the account. This can trigger a `verification_missing_directors` verification error. |\n| `extraneous_director` | Unsuccessful verification due to too many directors on the account. This can trigger a `verification_extraneous_directors` verification error. |\n\nThe verification errors can trigger if multiple directors on the `Account` object use these magic tokens.\n\n### Test company name verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrigger company name verification for an `Account` object by using this token for the [company.name](https://docs.stripe.com/api/accounts/object#account_object-company-name) attribute.\n\n| Token | Type |\n| --- | --- |\n| `mismatch_business_name` | Unsuccessful verification due to a mismatched business name. |\n| `disallowed_name` | Unsuccessful verification due to a generic or well-known business name. |\n| `match_name_relationships` | Successful verification of the business name. |\n| `match_name_only` | Unsuccessful verification due to a business name discrepancy. |\n\n### Test statement descriptor verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrigger statement descriptor verification for an `Account` object by using this token for the [settings.payments.statement\\_descriptor](https://docs.stripe.com/api/accounts/object#account_object-settings-payments-statement_descriptor) attribute.\n\n| Token | Type |\n| --- | --- |\n| `mismatch` | Trigger an `invalid_statement_descriptor_business_mismatch` verification error. |\n| `disallowed` | Trigger an `invalid_statement_descriptor_denylisted` verification error. |\n\nTrigger statement descriptor prefix verification for an `Account` object by using this token for the [settings.payments.statement\\_descriptor\\_prefix](https://docs.stripe.com/api/accounts/object#account_object-settings-payments-statement_descriptor_prefix) attribute.\n\n| Token | Type |\n| --- | --- |\n| `mismatch` | Trigger an `invalid_statement_descriptor_prefix_mismatch` verification error. |\n| `disallowed` | Trigger an `invalid_statement_descriptor_prefix_denylisted` verification error. |\n\n### Test business URL verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrigger URL verification for an `Account` object by using this token for the [business\\_profile.url](https://docs.stripe.com/api/accounts/object#account_object-business_profile-url) attribute.\n\n| Token | Type |\n| --- | --- |\n| `https://disallowed.stripe.com` | Trigger an `invalid_url_denylisted` verification error. |\n| `https://geoblocked.stripe.com` | Trigger an `invalid_url_website_inaccessible_geoblocked` verification error. |\n| `https://problem.stripe.com` | Trigger an `invalid_url_website_other` verification error. |\n| `https://missing.stripe.com` | Trigger an `invalid_url_website_incomplete` verification error. |\n| `https://mismatch.stripe.com` | Trigger an `invalid_url_website_business_information_mismatch` verification error. |\n| `https://passwordprotected.stripe.com` | Trigger an `invalid_url_website_inaccessible_password_protected` verification error. |\n| `https://accessible.stripe.com` | Trigger a successful validation of the URL. |\n| `https://underconstruction.stripe.com` | Trigger an `invalid_url_website_incomplete_under_construction` verification error. |\n| `https://inaccessible.stripe.com` | Trigger an `invalid_url_website_inaccessible` verification error. |\n\n### Test Doing Business As (DBA) verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrigger DBA verification for an `Account` object by using this token for the [business\\_profile.name](https://docs.stripe.com/api/accounts/object#account_object-business_profile-name) attribute.\n\n| Token | Type |\n| --- | --- |\n| `disallowed_dba` | Trigger an `invalid_business_profile_name_denylisted` verification error. |\n| `invalid_dba` | Trigger an `invalid_business_profile_name` verification error. |\n\n### Test product description verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrigger product description verification for an `Account` object by using this token for the [business\\_profile.product\\_description](https://docs.stripe.com/api/accounts/object#account_object-business_profile-product_description) attribute.\n\n| Token | Type |\n| --- | --- |\n| `require_url` | Trigger an `invalid_url_web_presence_detected` verification error. |\n\n### Test capability disabled reasons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrigger assignment of a specific [requirements.disabled\\_reason](https://docs.stripe.com/api/capabilities/object#capability_object-requirements-disabled_reason) to all of an `Account` object’s inactive `Capability` objects by using this token for the account’s [business\\_profile.url](https://docs.stripe.com/api/accounts/object#account_object-business_profile-url) attribute.\n\n| Token | Type |\n| --- | --- |\n| `https://inactivity.stripe.com` | Set an account with no recent activity as inactive and pause all verifications for it. Set the disabled reason for any inactive capabilities to `paused.inactivity` (`rejected.other` for API versions prior to `2024-06-20`). |\n\n## Trigger or advance verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Trigger cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse these card numbers to trigger various conditions when you’re testing both requirements and tiered verification. For the trigger actions to work, you must use these cards with a Connect charge by setting [`on_behalf_of`](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant), or creating the charge [directly on the connected account](https://docs.stripe.com/connect/direct-charges).\n\n| Number | Token | Type |\n| --- | --- | --- |\n| 4000000000004202 | `tok_visa_triggerNextRequirements` | Changes the next set of eventually due requirements to currently due. |\n| 4000000000004210 | `tok_visa_triggerChargeBlock` | Triggers a charge block. |\n| 4000000000004236 | `tok_visa_triggerPayoutBlock` | Triggers a payout block. |\n\n#### Trigger next requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLive mode can require additional verification information when a connected account processes a certain amount of volume. This card sets any additional verification information to be required immediately. If no additional information is required, nothing appears.\n\n#### Trigger a charge or payout block![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf required information isn’t provided by the deadline, Stripe disables the connected account’s charges or payouts. These cards disable the connected account and move any currently due requirements to overdue. These cards have no effect until an account provides the initial information that’s required to enable charges and payouts.\n\n### Trigger bank account ownership verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts in the United States and India are subject to [Bank account ownership verification](https://support.stripe.com/questions/bank-account-ownership-verification). You can complete this verification by uploading supporting documents with the Connect Dashboard or with the API through the [documents\\[bank\\_account\\_ownership\\_verification\\]](https://docs.stripe.com/api/accounts/update#update_account-documents-bank_account_ownership_verification-files) hash.\n\nIn test mode, you can simulate the US bank account ownership verification process. Use the following test bank account numbers to trigger the verification process. One number presumes successful verification and the other prompts you to upload test images or file tokens to complete the verification process. These test accounts are only available for US accounts.\n\n| Routing | Account | Type |\n| --- | --- | --- |\n| `110000000` | `000999999991` | Triggers and completes the bank account ownership verification process after a short delay |\n| `110000000` | `000999999992` | Beta Triggers the bank account ownership verification process after a short delay and requests for document upload |\n\n### Simulate requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your platform has connected accounts in different countries or plans to, you might need to verify a person’s address as well as their identity (depending on the country). Stripe provides a sample [date of birth](#test-dobs) (DOB) and sample [addresses](#test-verification-addresses) to test for this requirement.\n\n| Information provided | Person verification status | `requirements.currently_due` |\n| --- | --- | --- |\n| Verified date of birth and verified address | Verified | None |\n| Verified date of birth and unverified address | Unverified | `verification.additional_document` |\n| Unverified date of birth and verified address | Unverified | `verification.document` |\n| Unverified date of birth and unverified address | Unverified | `verification.additional_document`, `verification.document` |\n\n## Add funds to Stripe balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo test [adding funds](https://docs.stripe.com/connect/top-ups) to your Stripe balance from a bank account in the Dashboard, enable test mode and select the desired test bank account in the drop-down menu within the **Add to balance** dialog. You can simulate success or failure due to insufficient funds.\n\nTo test adding funds in the API, use the following test bank tokens as the source while in test mode. Each token simulates a specific kind of event.\n\n| Token | Type |\n| --- | --- |\n| `btok_us_verified` | Successful |\n| `btok_us_verified_noAccount` | Unsuccessful with a `no_account` code |\n| `btok_us_verified_accountClosed` | Unsuccessful with an `account_closed` code |\n| `btok_us_verified_insufficientFunds` | Unsuccessful with an `insufficient_funds` code |\n| `btok_us_verified_debitNotAuthorized` | Unsuccessful with a `debit_not_authorized` code |\n| `btok_us_verified_invalidCurrency` | Unsuccessful with an `invalid_currency` code |\n\n## Payouts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the following test bank and debit card numbers to trigger certain events during [payout](https://docs.stripe.com/connect/payouts-connected-accounts) testing. You can only use these values in test mode with test secret keys.\n\nTest mode payouts simulate a live payout but aren’t processed with the bank. Test mode accounts with Stripe Dashboard access always have payouts enabled, as long as valid external bank information and other relevant conditions are met, and never requires real identity verification.\n\n#### Note\n\nYou can’t use test bank and debit card numbers in the Stripe Dashboard on a live mode connected account. If you’ve entered your bank account information on a live mode account, you can still use test mode, and test mode payouts will simulate a live payout without processing actual money.\n\n### Bank numbers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these test bank account numbers to test payouts. You can only use them with test secret keys.\n\n| SWIFT / BIC Code | IBAN | Type |\n| --- | --- | --- |\n| `AAAAALTXXXX` | `AL35202111090000000001234567` | Payout succeeds. |\n| `AAAAALTXXXX` | `AL00000062370400440532013001` | Payout fails with a `no_account` code. |\n| `AAAAALTXXXX` | `AL00000089370400440532013002` | Payout fails with a `account_closed` code. |\n| `AAAAALTXXXX` | `AL00000089370400440532013003` | Payout fails with a `insufficient_funds` code. |\n| `AAAAALTXXXX` | `AL00000089370400440532013004` | Payout fails with a `debit_not_authorized` code. |\n| `AAAAALTXXXX` | `AL00000089370400440532013005` | Payout fails with a `invalid_currency` code. |\n\n### Debit card numbers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these test debit card numbers to test payouts to a debit card. These can only be used with test secret keys.\n\n| Number | Token | Type |\n| --- | --- | --- |\n| 4000056655665556 | `tok_visa_debit_us_transferSuccess` | Visa debit. Payout succeeds. |\n| 4000056655665572 | `tok_visa_debit_us_transferFail` | Visa debit. Payout fails with a `could_not_process` code. |\n| 4000056755665555 | `tok_visa_debit_us_instantPayoutUnsupported` | Visa debit. Card is not eligible for Instant Payouts. |\n| 5200828282828210 | `tok_mastercard_debit_us_transferSuccess` | Mastercard debit. Payout succeeds. |\n| 6011981111111113 | `tok_discover_debit_us_transferSuccess` | Discover debit. Payout succeeds. |",
    "title": "Testing Stripe Connect | Stripe Documentation",
    "description": "Before going live, test your Connect integration for account creation, identity verification, and payouts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoice/line_item",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/pause-payment",
    "markdown": "# Pause payment collection | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to pause payment collection on subscriptions.\n\n#### Caution\n\nPausing payment collection is often used to temporarily offer your services for free. This is sometimes referred to as a “grace period” if a customer needs additional time to pay or can’t pay for one or more billing cycles.\n\nYou can pause or resume collection in the [Stripe Dashboard](https://support.stripe.com/questions/how-to-pause-or-cancel-subscriptions) or the API. While collection is paused, [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") still generate [invoices](https://docs.stripe.com/api/invoices \"invoices\"), but you have a few options for handling these invoices. Review the following use cases to determine the best approach for you:\n\n| Use case | API configuration |\n| --- | --- |\n| [Temporarily offer services for free and collect payment later](#collect-payment-later) | Use `behavior=keep_as_draft` |\n| [Temporarily offer services for free and never collect payment](#collect-payment-never) | Use `behavior=void` |\n| [Temporarily offer services for free and mark invoice as uncollectible](#mark-as-uncollectible) | Use `behavior=mark_uncollectible` |\n\nIf these options don’t fit your use case, you might want to consider [canceling subscriptions](https://docs.stripe.com/billing/subscriptions/cancel) instead.\n\nInvoices created before subscriptions are paused continue to be [retried](https://docs.stripe.com/invoicing/automatic-collection) unless you [void](https://docs.stripe.com/api/invoices/void) them.\n\n## Temporarily offer services for free and never collect payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you temporarily want to offer your services for free and you don’t want to collect payment on the invoice (for example, a “grace period”), you can void invoices that your subscription creates to make sure that your customers aren’t charged and the subscription remains `status=active`. Use the Subscription ID to update `pause_collection[behavior]` to `void` and `pause_collection[resumes_at]` to the date you want to start collecting payments again.\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"pause_collection[behavior]\"=void`\n\nAll invoices created before the `resumes_at` date are immediately marked as void. Stripe won’t send any upcoming invoice emails or webhooks and the subscription’s status remains unchanged.\n\nIf you don’t set a `resumes_at` date, the subscription remains paused until you unset `pause_collection`.\n\n## Temporarily offer services for free and collect payment later ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you want to temporarily offer your services for free and collect payments later, set `pause_collection[behavior]=keep_as_draft`. If you know when you want to resume collection, pass a timestamp for `resumes_at`.\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"pause_collection[behavior]\"=keep_as_draft`\n\nAll invoices created before the `resumes_at` date remain in `draft` state and `auto_advance` is set to `false`. During this time, Stripe won’t send any upcoming invoice emails or webhooks for these invoices and the subscription’s status remains unchanged.\n\nIf you don’t set a `resumes_at` date, the subscription remains paused until you unset `pause_collection`.\n\n#### Caution\n\nIf you have custom logic that finalizes invoices you might need to disable or modify it so that it doesn’t conflict with these settings.\n\nWhen you’re ready to collect payment for these invoices, set `auto_advance` back to `true`. If you don’t have the invoice IDs, you can use Subscription IDs to check for invoices with `status=draft`. Using the invoice ID, you can then update `auto_advance=true`:\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d auto_advance=true`\n\n## Temporarily offer services for free and mark invoices as uncollectible ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you temporarily want to offer your services for free and mark any invoices generated by the subscription as uncollectible, use the Subscription ID to update `pause_collection[behavior]` to `mark_uncollectible` and optionally `pause_collection[resumes_at]` to the date you want to start collecting payments again. This makes sure that any downstream reporting is accurate, your customer isn’t charged, and the subscription remains `status=active`.\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"pause_collection[behavior]\"=mark_uncollectible`\n\nAll invoices for the subscription created before the `resumes_at` date are immediately marked as uncollectible. Stripe won’t send any upcoming invoice emails or webhooks and the subscription’s status remains unchanged.\n\nIf you don’t set a `resumes_at` date, the subscription remains paused until you unset `pause_collection`.\n\n## Manually unpausing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo resume collecting payments at any time, you can update the subscription and unset `pause_collection`:\n\n`curl https://api.stripe.com/v1/subscriptions/sub_GTbTiykEwMRog0 \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"pause_collection\"=`\n\nResuming collection this way only affects future invoices.\n\n## Pausing and subscription schedules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you pause a subscription on a [subscription schedule](https://docs.stripe.com/billing/subscriptions/subscription-schedules), the scheduled updates still take effect. However, payment is not collected while the subscription is paused. When you want to collect payment again, you need to [manually unpause](#unpausing) the subscription. You also need to update `auto_advance` to `true` on any invoices with `status=draft` that you want to collect payment on.",
    "title": "Pause payment collection | Stripe Documentation",
    "description": "Learn how to pause payment collection on subscriptions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/api/invoices/line_item",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/cancel",
    "markdown": "# Cancel subscriptions | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to cancel existing subscriptions.\n\nThis guide describes how to use the [Subscription API](https://docs.stripe.com/api#cancel_subscription) or the [Dashboard](https://dashboard.stripe.com/test/subscriptions) to manage customer subscriptions.\n\nIf you want to keep a subscription active but temporarily stop collecting payment, you can [pause payment collection](https://docs.stripe.com/billing/subscriptions/pause-payment). Pausing payment collection doesn’t affect the [subscription status](https://docs.stripe.com/billing/subscriptions/overview#subscription-statuses), which we recommend using as the trigger for starting or stopping service to your customer.\n\n[Subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") cancel automatically after up to four unsuccessful attempts to bill the customer. You can configure the number of attempts in your [subscription lifecycle settings](https://docs.stripe.com/billing/subscriptions/overview#settings). Learn more about revenue recovery settings, such as [Smart Retries](https://docs.stripe.com/billing/revenue-recovery/smart-retries#smart-retries) and configurable [customer emails](https://docs.stripe.com/billing/revenue-recovery/customer-emails#configure-emails).\n\n## Cancel subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can cancel customer subscriptions manually through the [Subscription](https://docs.stripe.com/api#cancel_subscription) or the [Dashboard](https://dashboard.stripe.com/test/subscriptions). By default, cancellation takes effect immediately and [invoices](https://docs.stripe.com/api/invoices \"invoices\") are no longer generated for canceled subscriptions.\n\n#### Common mistake\n\nIf you set a custom cancellation date, you can’t provide a refund. A credit proration is always generated. To prevent a credit proration from generating, make sure the custom cancellation date is within the current billing period and `proration_behavior` is set to `none`.\n\nTo cancel a subscription in the Dashboard:\n\n1.  From the customer account page or the subscription details page, click the overflow menu (), then select **Cancel subscription**.\n2.  Choose when to end the subscription: immediately, at the end of the period, or on a custom day.\n3.  Choose to provide a refund for a [prorated](https://docs.stripe.com/billing/subscriptions/prorations) amount, refund the last payment in full, or provide no [refund](https://docs.stripe.com/refunds).\n4.  After finalizing all settings, click **Cancel subscription**.\n\n### Prorate for usage-based billing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a subscription is part of the way through a paid billing period, you can prorate the cancellation by passing the [prorate](https://docs.stripe.com/api/subscriptions/cancel#cancel_subscription-prorate) parameter.\n\nWhen you prorate a cancellation, you can optionally invoice for:\n\n*   Outstanding prorations\n*   [Metered usage](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing)\n\nIf you don’t prorate the subscription, all metered usage gets discarded and the customer won’t receive credit for any potential prorations.\n\nCreate a final invoice immediately using the [invoice\\_now](https://docs.stripe.com/api/subscriptions/cancel#cancel_subscription-invoice_now) parameter. If you owe the customer a credit after cancellation, you can add the credit to their credit balance to apply to future invoices. To [refund your customer](https://support.stripe.com/questions/refunding-credit-balance-to-customer-after-subscription-downgrade-or-cancellation), issue [refunds](https://docs.stripe.com/refunds#issuing) and then [adjust their account balance](https://docs.stripe.com/billing/customer/balance#modifying) back to zero.\n\n### Cancel at the end of the current billing cycle![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo cancel a subscription at the end of the current billing period, set `cancel_at_period_end` to `true`:\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d cancel_at_period_end=true`\n\nThis allows the subscription to complete the duration of time the customer has already paid for. You can reactivate subscriptions scheduled for cancellation by updating `cancel_at_period_end` to `false`. You can reactivate the subscription at any time up to the end of the period.\n\n### Cancel at the end of a future billing cycle![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo configure a subscription to end after a specified number of billing cycles, [define a schedule](https://docs.stripe.com/billing/subscriptions/subscription-schedules) for the subscription. Set the schedule length by specifying one or more phases and intervals, and set its `end_behavior` attribute to `cancel`.\n\n### Configure automatic cancellation after a dispute ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Limited support\n\nThis feature is only supported for disputed credit and debit card payments opened in the _full amount_.\n\nWhen a customer [disputes](https://docs.stripe.com/disputes) a charge for a subscription, the subscription continues to cycle, which can create more disputed charges. You can change this behavior in the [Dashboard](https://dashboard.stripe.com/settings/billing/automatic) to cancel subscriptions instead. Changes to the subscription take effect after approximately one hour.\n\nUnder [Manage disputed payments](https://dashboard.stripe.com/settings/billing/automatic), select one of the following:\n\n*   **cancel the subscription immediately without prorating** – The subscription cancels immediately without any prorating. You can’t restart a canceled subscription. You must create a new subscription for the customer if you want to continue billing them.\n    \n*   **cancel the subscription at the end of the period** – The subscription cancels at the end of the current billing period and [cancel\\_at\\_period\\_end](https://docs.stripe.com/api/subscriptions/object#subscription_object-cancel_at_period_end) is set to `true`. This allows you time to work through the dispute process before the cancellation occurs.\n    \n\nFor subscriptions managed with [schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules), the subscription is first released from the schedule and then canceled. This means the rest of the scheduled changes won’t take effect.\n\n## Handle invoice items when canceling subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour customer might still be billed for pending [invoice items](https://docs.stripe.com/billing/invoices/subscription#adding-draft-invoice-items) on a subscription in the following cases:\n\n*   The subscription cancellation includes a final invoice\n*   Your customer has another active subscription\n\nTo prevent billing your customer for pending invoice items, you must [manually delete](https://docs.stripe.com/api#delete_invoiceitem) the invoice items.\n\nSimilarly, any [usage](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage) reported during the billing period bills at the end of the period. To avoid a final usage charge, use the [clear\\_usage](https://docs.stripe.com/api#update_subscription-items-clear_usage) parameter to [update the subscription](https://docs.stripe.com/api#update_subscription) and remove the metered price.\n\nIf you set the subscription to cancel at period end, any pending prorations are left in place and still collected at the end of the period. If you cancel the subscription before the end of the period, invoice items remain and won’t be processed unless you specifically generate an invoice that includes them.\n\nWhen you cancel a subscription, all `open` and `draft` invoices for that subscription have their `auto_advance` property set to `false`. This [pauses automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) for these invoices and prevents automatic reminder emails from sending. You can still manually attempt to collect payment and send emails.\n\n## Identify cancellation events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe sends the following events for canceled subscriptions.\n\n| Event | Description |\n| --- | --- |\n| `customer.subscription.deleted` | Sent when you cancel a customer’s subscription immediately. If the event’s `request` property isn’t `null`, that indicates the cancellation is a result of your request rather than based on your subscription settings. |\n| `customer.subscription.updated` | Sent when you cancel a customer’s subscription at the end of the billing period. This triggers when you set `cancel_at_period_end` to `true` and the event reflects a change in the `cancel_at_period_end` value for the subscription. |\n\n## Stop a pending cancellation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can stop a scheduled cancellation through the [Update Subscription API](https://docs.stripe.com/api/subscriptions/update) or the [Dashboard](https://dashboard.stripe.com/test/subscriptions). You can’t reactivate a canceled subscription.\n\nTo stop a scheduled cancellation in the Dashboard:\n\n1.  On the [Subscriptions page](https://dashboard.stripe.com/test/subscriptions), select the subscription you want to update.\n2.  From the Subscription details page, click **Actions**, then select **Don’t cancel**.\n\n## Set a custom cancel date ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [cancel\\_at](https://docs.stripe.com/api/subscriptions/update#update_subscription-cancel_at) parameter to cancel a subscription at a future timestamp.\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d cancel_at=1723766400`\n\nWhen you schedule a cancel date that occurs before the billing period ends, the subscription’s [current\\_period\\_end](https://docs.stripe.com/api/subscriptions/object#subscription_object-current_period_end) updates to match the `cancel_at` date. This creates prorations for the change in the current period, unless your update [disables](https://docs.stripe.com/billing/subscriptions/prorations#disable-prorations) prorations.\n\nIf you schedule a cancel date that occurs more than one period away, the subscription’s cycle remains unaffected until the subscription renews into the period that contains the `cancel_at` date. Then, the `current_period_end` for the renewal shortens to match the `cancel_at` date.\n\nFor example, your customer subscribes to a 120 USD per year licensed subscription that renews on January 1, 2024. They cancel the subscription on July 1, 2024. The final invoice subtotal on January 1 calculates as 60 USD.\n\nChanging or removing a scheduled cancel date updates the `current_period_end` and creates prorations. In the above example, on February 15 you update the cancel date to October 1. The current period end becomes October 1, and Stripe creates prorations for 30 USD for the additional quarter. To invoice the prorated items immediately instead of in a final invoice on October 1, you can pass a [proration\\_behavior](https://docs.stripe.com/api/subscriptions/update#update_subscription-proration_behavior) of `always_invoice` in the update.",
    "title": "Cancel subscriptions | Stripe Documentation",
    "description": "Learn how to cancel existing subscriptions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/change",
    "markdown": "# Modify subscriptions | Stripe DocumentationThe Stripe Docs logo\n\n## Change existing subscriptions to cancel, pause, apply prorated charges and credits, and more.\n\nYou can change existing subscriptions without having to cancel and recreate them. Set up the [customer portal](https://docs.stripe.com/customer-management) to let your customers manage their own subscriptions and billing details through a Stripe-hosted page.\n\nFor changes that automatically create a new [subscription invoice](https://docs.stripe.com/billing/invoices/subscription), use [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates) so that the updates are only applied if the new invoice is successfully paid.\n\n## Use cases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Modify subscriptions | Stripe Documentation",
    "description": "Use Stripe Billing to modify existing subscriptions. You can change the billing cycle, upgrate or downgrade the price, cancel, or pause a subscription. You can also apply discounts, use trial periods, set quantities, add taxes, or or set payment methods.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/third-party-payment-processing",
    "markdown": "# Third-party payment processing | Stripe DocumentationThe Stripe Docs logo\n\n## Integrate Stripe Billing subscriptions with third-party payment providers.\n\nWhen you use Stripe Billing with third-party payment processors, Stripe consolidates all of your key billing data, such as [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), [invoices](https://docs.stripe.com/api/invoices \"invoices\"), payment amounts, and payment frequencies.\n\n## Out-of-band invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you submit payments to a third-party processor based on Stripe invoices, your system records the invoices as `paid_out_of_band`. The rest of Billing’s subscription cycle continues normally. You’ll customize two key Stripe Billing workflows:\n\n*   Collecting customers’ payment method details\n*   Paying invoices\n\nThe following diagrams illustrate the high-level request flows of a multiprocessor integration.\n\n### Collecting and storing customers’ payment method details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Paying invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](#configure-stripe)\n\nTo set up a multiprocessor integration, you have to make some configuration changes to Stripe.\n\n### Disable invoice emails ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo prevent customers from paying directly on Stripe, disable automatic emails for any customer who processes payments on a third-party provider. To disable automatic emails:\n\n*   Disable **Send finalized invoices and credit notes to customers** in Stripe’s [automatic billing settings](https://dashboard.stripe.com/settings/billing/automatic). After you change this setting, changes to any subscription with [collection\\_method](https://docs.stripe.com/api/subscriptions/object#subscription_object-collection_method) set to `send_invoice` won’t trigger customer emails. Only use this if all of your emailed subscription invoices are paid with a third-party payment provider.\n\n### Configure the customer portal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use the [customer portal](https://docs.stripe.com/customer-management#customer-portal-features), disable **Allow customers to view and update payment methods** in the [customer portal settings](https://dashboard.stripe.com/settings/billing/portal). (You also need to disable the **Customers can switch plans** setting.) You need to build custom flows to allow users to self-serve updates to their payment method on a third-party processor.\n\n[](#sign-up-new-customers)\n\n### Create a Stripe customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFirst create a blank [Customer](https://docs.stripe.com/api/customers) record on Stripe.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n### Create a subscription![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNext, create a [Subscription](https://docs.stripe.com/api/subscription) and set the `collection_method` to `send_invoice`. This setting doesn’t require a Stripe payment method and generates [Invoices](https://docs.stripe.com/api/invoice) that must be paid directly instead. Set the `days_until_due` parameter to the number of days an unpaid invoice remains open before your [configured failed payment logic](https://docs.stripe.com/billing/subscriptions/overview#failed-payments) activates. You’re responsible for retrying failed payments on the third-party provider, and you need to set this long enough so that any recovery workflows you implement have time to complete.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"items[0][price]\"=  {{PRICE_ID}}   \\  -d customer=  {{CUSTOMER_ID}}   \\  -d collection_method=send_invoice \\  -d days_until_due=30`\n\n### Present the amount to the user for payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThird-party payments don’t work with [Stripe Checkout](https://docs.stripe.com/payments/checkout \"Stripe Checkout\") or [Elements](https://docs.stripe.com/payments/elements \"Stripe Elements\"). You have to build a checkout flow that uses the third party to create a valid payment method but with Stripe as the source of truth for billable amounts. To determine the amount to charge in the checkout flow, [retrieve the initial invoice](https://docs.stripe.com/api/invoices/retrieve) generated by the subscription.\n\n### Collect payment method details Third party![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow the instructions from the third-party payment provider to collect payment method details from customers. Make sure to set up payment methods for use in future or off-session transactions.\n\nThe output of this step varies by processor. Some third-party processors provide a payment method token that you use to generate payments on that processor.\n\n### Update the Customer object ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUpdate the Customer record created in the [first step](#create-customer) of the subscription creation flow. For convenience, store non-sensitive third-party tokens as [metadata](https://docs.stripe.com/api/customers/object#customer_object-metadata) on the Customer record.\n\nRemember to turn off the **Send finalized invoices and credit notes to customers** option before setting the `email` property on the Customer.\n\n`curl https://api.stripe.com/v1/customers/`\n\n`{{CUSTOMER_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d description=\"Third-party payment customer\" \\  -d \"metadata[third_party_customer_id]\"={{THIRD_PARTY_CUSTOMER_ID}} \\   -d \"metadata[third_party_payment_method_id]\"={{THIRD_PARTY_PAYMENT_METHOD_ID}}`\n\n[](#collect-payment)\n\n### Listen for `invoice.created` [webhook](https://docs.stripe.com/webhooks \"webhook\") events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll invoices (including the first invoice created from a subscription) start in a draft state and trigger [invoice.created](https://docs.stripe.com/api/events/types#event_types-invoice.created) webhooks. Invoices created by a subscription are automatically finalized after 1 hour to give time for integrations to modify the draft invoice. [Finalize the invoice manually](https://docs.stripe.com/api/invoices/finalize) to skip this delay.\n\nInvoice finalization triggers an [invoice.finalized](https://docs.stripe.com/api/events/types#event_types-invoice.finalized) event. [Listen to this event](https://docs.stripe.com/billing/subscriptions/webhooks) to trigger payments on the third-party processor.\n\n### Process payments Third party![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow the instructions from the third-party payment provider to collect payments for the amounts represented on each invoice using the tokens stored on the associated Customer record. This might include listening to webhooks from the third party for notifications of successful payments.\n\n### Mark the Stripe Invoice as paid out-of-band![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen payment on the third party is successful, mark the corresponding invoice as `paid_out_of_band`.\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/pay \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d paid_out_of_band=true`\n\nMark the invoice as paid before the subscription’s payment due date to keep the subscription operating normally. The Subscription object’s [days\\_until\\_due](https://docs.stripe.com/api/subscriptions/object#subscription_object-days_until_due) attribute defines the payment due date.\n\n[\n\n## Handle state changes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-state-changes)\n\n### Stripe Subscription cancellation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo cancel Subscriptions, remove third-party payment method details from Stripe’s Customer records and your database. Listen for the [customer.subscription.deleted](https://docs.stripe.com/api/events/types#event_types-customer.subscription.deleted) event and delete any tokens related to the canceled subscription.\n\n### Third-party payment cancellation Third party![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome third-party payment processors allow end customers to cancel billing agreements directly. If the processor allows this, listen for any associated events and then [cancel the subscription](https://docs.stripe.com/api/subscriptions/cancel) on Stripe.\n\n### Refunds and disputes Third party![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou’re responsible for processing refunds and disputes originating from the third-party processor. To maintain accurate accounting data, use [Credit Notes](https://docs.stripe.com/api/credit_notes/object) to adjust the amounts on issued invoices to log refunds. Create a Credit Note, and set the [out\\_of\\_band\\_amount](https://docs.stripe.com/api/credit_notes/create#create_credit_note-out_of_band_amount) to the refunded amount.\n\n[](#other-considerations)\n\n### Switching between third-party payments and Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo switch a customer from a third-party processor to Stripe:\n\n1.  Collect a new payment method for the customer by [setting up future payments](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) or using the [Customer Portal](https://docs.stripe.com/no-code/customer-portal).\n2.  Update the subscription [collection\\_method](https://docs.stripe.com/api/subscriptions/update#update_subscription-collection_method) from `send_invoice` to `charge_automatically` and set the new payment method as the `default_payment_method`.\n3.  Delete any existing third-party payment method tokens.\n\n### Retries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must handle any recovery of failed third-party payments yourself. Stripe doesn’t have any visibility into the state of third-party payments until you mark an invoice as paid.\n\n### Taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax automatically adds the correct tax amounts to invoices as long as you set a billing postal code or IP address when [updating the Customer record after checkout](#update-customer).\n\n### Partial Payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe don’t support partial payments on `out_of_band` invoices. In the event of a partial payment, use a Credit Note to adjust the original invoice then manually generate a new invoice for any remaining balance.",
    "title": "Third-party payment processing | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/amazon-pay",
    "markdown": "# Set up a subscription with Amazon Pay\n\nCreate and confirm a subscription using two API calls. The [first API call](https://docs.stripe.com/billing/subscriptions/amazon-pay#create-setup-intent) uses the [Setup Intents API](https://docs.stripe.com/api/setup_intents) to set Amazon Pay as a payment method. The [second API call](https://docs.stripe.com/billing/subscriptions/amazon-pay#create-subscription) sends customer, product, and payment method information to the [Subscriptions API](https://docs.stripe.com/api/subscriptions) to create a Subscription and confirm a payment in one call.\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15 USD monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **15** for the price.\n4.  Select **USD** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n[](#web-create-customer)\n\nTo save an Amazon Pay payment method for future payments, you must attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a `Customer` object after your customer creates an account on your business. Associating the ID of the `Customer` object with your own internal representation of a customer enables you to retrieve and use the payment method details that you store later. If your customer hasn’t created an account, you can still create a `Customer` object and associate it with your internal representation of their account at a later point.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode description=\"My First Test Customer (created for API docs)\"`\n\n[](#create-setup-intent)\n\nCreate a [SetupIntent](https://docs.stripe.com/api/setup_intents) to save a customer’s payment method for future payments. A [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent to set up a customer’s payment method for future payments. The SetupIntent tracks the steps of this set up process. Create a SetupIntent on your server with [payment\\_method\\_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types) set to `amazon_pay` and specify the Customer’s ID and [usage=off\\_session](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-usage) or `usage=on_session`.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d confirm=true \\   --data-urlencode return_url=\"[https://www.stripe.com](https://www.stripe.com/)\" \\  -d usage=off_session \\  -d customer=cus_ODQluYFNl44ODI \\  -d \"payment_method_data[type]\"=amazon_pay \\  -d \"payment_method_types[]\"=amazon_pay \\  -d \"mandate_data[customer_acceptance][type]\"=online \\  -d \"mandate_data[customer_acceptance][online][ip_address]\"=\"127.0.0.0\" \\  -d \"mandate_data[customer_acceptance][online][user_agent]\"=device`\n\nThe SetupIntent object contains a `client_secret`, which is a unique key that you must pass to Stripe.js on the client side to redirect your buyer to Amazon Pay and authorize the mandate.\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SetupIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the SetupIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\nNext, you save Amazon Pay on the client with [Stripe.js](https://docs.stripe.com/payments/elements).\n\nInclude the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nWhen a customer clicks to pay with Amazon Pay, use Stripe.js to submit the payment to Stripe. [Stripe.js](https://docs.stripe.com/payments/elements) is the foundational JavaScript library for building payment flows. It automatically handles complexities like the redirect described below, and enables you to extend your integration to other payment methods. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\nUse `stripe.confirmAmazonPaySetup` to confirm the setupIntent on the client side, with a [return\\_url](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-return_url) and [mandate\\_data](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-mandate_data). Use the [return\\_url](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-return_url) to redirect customers to a specific page after the SetupIntent succeeds.\n\n`// Redirects away from the client  const {error} = await stripe.confirmAmazonPaySetup(    '{{SETUP_INTENT_CLIENT_SECRET}}',    {      return_url: 'https://example.com/setup/complete',      mandate_data: {        customer_acceptance: {          type: 'online',          online: {              infer_from_client: true          }        }      },    }  );   if (error) {    // Inform the customer that there was an error.  }`\n\n[](#create-subscription)\n\nCreate a subscription that has a price and a customer. Set the value of the `default_payment_method` parameter to the PaymentMethod ID from the SetupIntent response.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"items[0][price]\"={{PRICE_ID}} \\   -d default_payment_method={{PAYMENT_METHOD_ID}} \\   -d off_session=true`\n\nCreating subscriptions automatically charges customers due to the pre-set default payment method. After a successful payment, the status in the Stripe Dashboard changes to **Active**. The price that you previously set up determines the amount for future billings. Learn how to [create a subscription with a free trial period](#trial-periods).",
    "title": "Set up a subscription with Amazon Pay | Stripe Documentation",
    "description": "Learn how to create and charge for a subscription with Amazon Pay.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscription_items/object",
    "markdown": "# The Subscription Item object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The price the customer is subscribed to.\n    \n*   The [quantity](https://docs.stripe.com/subscriptions/quantities) of the plan to which the customer should be subscribed.\n    \n*   The `subscription` this `subscription_item` belongs to.\n    \n\n### More attributes\n\n*   #### \n    \n    billing\\_thresholdsnullable object\n    \n\n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    tax\\_ratesnullable array of objects\n    \n\nThe Subscription Item object\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Create a subscription item](https://docs.stripe.com/api/subscription_items/create)\n\nAdds a new item to an existing subscription. No existing items will be changed or replaced.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The identifier of the subscription to modify.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `allow_incomplete` |\n    | `default_incomplete` |\n    | `error_if_incomplete` |\n    | `pending_if_incomplete` |\n    \n*   The ID of the price object.\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n*   The quantity you’d like to apply to the subscription item you’re creating.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nReturns the created `Subscription Item` object, if successful. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/subscription\\_items\n\n```\ncurl https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d subscription=sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd \\  -d price=price_1Mr6rdLkdIwHu7ixwPmiybbR \\  -d quantity=2\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Update a subscription item](https://docs.stripe.com/api/subscription_items/update)\n\nUpdates the plan or quantity of an item on a current subscription.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `allow_incomplete` |\n    | `default_incomplete` |\n    | `error_if_incomplete` |\n    | `pending_if_incomplete` |\n    \n*   The ID of the price object. One of `price` or `price_data` is required. When changing a subscription item’s price, `quantity` is set to 1 unless a `quantity` parameter is provided.\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `always_invoice`<br><br>Always invoice immediately for prorations. |\n    | `create_prorations`<br><br>Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment). |\n    | `none`<br><br>Disable creating prorations in this request. |\n    \n*   The quantity you’d like to apply to the subscription item you’re creating.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nPOST /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {    \"order_id\": \"6735\"  },  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [Retrieve a subscription item](https://docs.stripe.com/api/subscription_items/retrieve)\n\nRetrieves the subscription item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a subscription item if a valid subscription item ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/subscription\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_NcLYdDxLHxlFo7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"si_NcLYdDxLHxlFo7\",  \"object\": \"subscription_item\",  \"billing_thresholds\": null,  \"created\": 1680126546,  \"metadata\": {},  \"price\": {    \"id\": \"price_1Mr6rdLkdIwHu7ixwPmiybbR\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680126545,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"discounts\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NcLYGKH0eY5b8s\",    \"recurring\": {      \"aggregate_usage\": null,      \"interval\": \"month\",      \"interval_count\": 1,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    },    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"recurring\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"quantity\": 2,  \"subscription\": \"sub_1Mr6rbLkdIwHu7ix4Xm9Ahtd\",  \"tax_rates\": []}\n```\n\n## [List all subscription items](https://docs.stripe.com/api/subscription_items/list)\n\nReturns a list of your subscription items for a given subscription.\n\n### Parameters\n\n*   #### \n    \n    subscriptionstringRequired\n    \n    The ID of the subscription whose items will be retrieved.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` subscription items, starting after subscription item `starting_after`. Each entry in the array is a separate subscription item object. If no more subscription items are available, the resulting array will be empty.\n\nGET /v1/subscription\\_items\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d subscription=sub_1NQH9iLkdIwHu7ixxhHui9yi\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"si_OCgWsGlqpbN4EP\",      \"object\": \"subscription_item\",      \"billing_thresholds\": null,      \"created\": 1688507587,      \"metadata\": {},      \"price\": {        \"id\": \"price_1NQH9iLkdIwHu7ix3tkaSxhj\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1688507586,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_OCgWE6cbwiSu27\",        \"recurring\": {          \"aggregate_usage\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"recurring\",        \"unit_amount\": 1000,        \"unit_amount_decimal\": \"1000\"      },      \"quantity\": 1,      \"subscription\": \"sub_1NQH9iLkdIwHu7ixxhHui9yi\",      \"tax_rates\": []    }    {...}    {...}  ],}\n```",
    "title": "The Subscription Item object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/bacs-debit",
    "markdown": "# Set up a subscription with Bacs Direct Debit\n\n## Use Stripe Checkout with Stripe Billing to set up recurring payments.\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) represents the details of your customer’s intent to purchase. You create a Session when your customer wants to start a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). After redirecting your customer to a Checkout Session, Stripe presents a payment form where your customer can complete their purchase. Once your customer has completed a purchase, they will be redirected back to your site.\n\n[](#web-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[\n\n## Create recurring products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-products-and-prices)\n\n#### Caution\n\nThe Prices API unifies how one-time purchases and subscriptions are modeled on Stripe. Existing integrations that don’t use the Prices API are still [supported](https://support.stripe.com/questions/prices-api-and-existing-checkout-integrations). However, some Checkout features only support Prices. See the [migration guide](https://docs.stripe.com/payments/checkout/migrating-prices) to upgrade to the Prices API.\n\nTo use Checkout, you first need to create a [Product](https://docs.stripe.com/api/products \"Products\") and a [Price](https://docs.stripe.com/api/prices \"Prices\"). Different physical goods or levels of service should be represented by products. Each product’s pricing is represented by one or more prices.\n\nFor example, you can create a software _product_ that has four _prices_: 10 USD/month, 100 USD/year, 9 GBP/month, and 90 GBP/year. This allows you to change and add prices without needing to change the details of your underlying products. You can either create a product and price [through the API](https://docs.stripe.com/api/prices) or through [the Stripe Dashboard](https://dashboard.stripe.com/products).\n\nIf your price is determined at checkout (for example, the customer sets a donation amount) or you prefer not to create prices upfront, you can create [prices inline](#creating-prices-inline) at Checkout Session creation.\n\nBefore you start configuring products, make sure you are in test mode by toggling the **View test data** button at the bottom of the Stripe Dashboard. Next, define the goods and services you plan to sell. To create a new product and price:\n\n*   Navigate to the [Products](https://dashboard.stripe.com/products) section in the Dashboard\n*   Click **Add product**\n*   Select “Recurring” when setting the price\n*   Configure the pricing plan\n\nYou can define multiple pricing plans with different parameters for each recurring product. Each price has a generated ID that you can use as a reference during the checkout process.\n\n#### Note\n\nProducts created in test mode can be copied to live mode so that you don’t need to re-create them. In the Product detail view in the Dashboard, click **Copy to live mode** on the upper right corner. You can only do this once for each product created in test mode. Subsequent updates to the test product are not reflected for the live product.\n\n[](#create-checkout-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Session with the ID of an existing [Price](https://docs.stripe.com/api/prices). Ensure that mode is set to `subscription` and you pass at least one recurring price. You can add one-time prices in addition to recurring prices. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen your customer successfully completes their payment, they are redirected to the `success_url`, a page on your website that informs the customer that their payment was successful. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without completing a payment, Checkout redirects them back to your website by navigating to the `cancel_url`. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nCheckout Sessions expire 24 hours after creation.\n\nFrom your [Dashboard](https://dashboard.stripe.com/settings/payment_methods), enable the payment methods you want to accept from your customers. Checkout supports [several payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support).\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[](#payment-success)\n\nWhen your customer completes a payment, Stripe redirects them to the URL that you specified in the `success_url` parameter. Typically, this is a page on your website that informs your customer that their payment was successful.\n\nHowever, Bacs Direct Debit is a delayed notification payment method, which means that funds aren’t immediately available. A Bacs Direct Debit payment typically takes three business days to make the funds available. Because of this, you’ll want to delay order fulfillment until the funds are available. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") status changes from `processing` to `succeeded`.\n\nYou can confirm the payment is successful in several ways:\n\nSuccessful payments appear in the Dashboard’s [list of payments](https://dashboard.stripe.com/payments). When you click a payment, it takes you to the payment detail page. The **Checkout summary** section contains billing information and the list of items purchased, which you can use to manually fulfill the order.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/source.16d3029596357c80a8efdbbfe106108a.png)\n\n#### Note\n\nStripe can help you keep up with incoming payments by sending you email notifications whenever a customer successfully completes one. Use the Dashboard to [configure email notifications](https://dashboard.stripe.com/settings/user).\n\n[](#testing)\n\nThere are several test bank account numbers you can use in [test mode](https://docs.stripe.com/keys#test-live-modes) to make sure this integration is ready.\n\n| Sort code | Account number | Description |\n| --- | --- | --- |\n| 10-88-00 | 00012345 | The payment succeeds and the Invoice transitions to `paid`. |\n| 10-88-00 | 90012345 | The payment succeeds after three minutes and the Invoice transitions to `paid`. |\n| 10-88-00 | 33333335 | The payment fails with a `debit_not_authorized` failure code and the Invoice transitions to `open`. The Mandate becomes `inactive` and the PaymentMethod can not be used again. |\n| 10-88-00 | 93333335 | The payment fails after three minutes with a `debit_not_authorized` failure code and the Invoice transitions to `open`. The Mandate becomes `inactive` and the PaymentMethod can not be used again. |\n| 10-88-00 | 22222227 | The payment fails with an `insufficient_funds` failure code and the Invoice transitions to `open`. The Mandate remains `active` and the PaymentMethod can be used again. |\n| 10-88-00 | 92222227 | The payment fails after three minutes with an `insufficient_funds` failure code and the Invoice transitions to `open`. The Mandate remains `active` and the PaymentMethod can be used again. |\n| 10-88-00 | 55555559 | The payment succeeds after three minutes and the Invoice transitions to `paid`, but a dispute is immediately created. |\n| 10-88-00 | 00033333 | Payment Method creation succeeds, but the Mandate is refused by the customer’s bank and immediately transitions to inactive. |\n| 10-88-00 | 00044444 | The request to set up Bacs Direct Debit fails immediately due to an invalid account number and the customer is prompted to update their information before submitting. Payment details are not collected. |\n\nYou can test using any of the account numbers provided above. However, because Bacs Direct Debit payments take several days to process, use the test account numbers that operate on a three-minute delay to better simulate the behavior of live payments.\n\n#### Note\n\nBy default, Stripe automatically sends [emails](https://docs.stripe.com/payments/payment-methods/bacs-debit#debit-notifications) to the customer when payment details are initially collected and each time a debit will be made on their account. These notifications aren’t sent in testmode.",
    "title": "Set up a subscription with Bacs Direct Debit | Stripe Documentation",
    "description": "Use Stripe Checkout with Stripe Billing to set up recurring payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/ach-debit",
    "markdown": "# Set up a subscription with ACH Direct Debit\n\n## Learn how to create and charge for a subscription with US bank account.\n\n#### Note\n\nIf you’re a new user, use the [Payment Element](https://docs.stripe.com/payments/payment-element) instead of using Stripe Elements as described in this guide. The Payment Element provides a low-code integration path with built-in conversion optimizations. For instructions, see [Build a subscription](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements).\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15 USD monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **15** for the price.\n4.  Select **USD** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n[](#create-subscription)\n\nCreate a [subscription](https://docs.stripe.com/api/subscriptions) with the price and customer with status `incomplete` by providing the [payment\\_behavior](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior) parameter with the value of `default_incomplete`.\n\n`curl https://api.stripe.com/v1/subscriptions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"items[0][price]\"=\"price_F52b2UdntfQsfR\" \\   -d \"payment_behavior\"=\"default_incomplete\" \\   -d \"payment_settings[payment_method_types][]\"=\"us_bank_account\" \\   -d \"expand[0]\"=\"latest_invoice.payment_intent\"`\n\nIncluded in the response is the [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\")’s first [PaymentIntent](https://docs.stripe.com/payments/payment-intents), containing the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), which is used on the client side to securely complete the payment process instead of passing the entire PaymentIntent object. Return the `client_secret` to the frontend to complete payment.\n\n[](#collect-payment-details)\n\nWhen a customer clicks to pay with ACH Direct Debit, we recommend you use Stripe.js to submit the payment to Stripe. [Stripe.js](https://docs.stripe.com/payments/elements) is our foundational JavaScript library for building payment flows. It will automatically handle integration complexities, and enables you to easily extend your integration to other payment methods in the future.\n\nInclude the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\nRather than sending the entire PaymentIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") from the previous step. This is different from your API keys that authenticate Stripe API requests.\n\nHandle the client secret carefully because it can complete the charge. Don’t log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.collectBankAccountForPayment](https://docs.stripe.com/js/payment_intents/collect_bank_account_for_payment) to collect bank account details with [Financial Connections](https://docs.stripe.com/financial-connections), create a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"), and attach that PaymentMethod to the PaymentIntent. Including the account holder’s name in the `billing_details` parameter is required to create an ACH Direct Debit PaymentMethod.\n\n`// Use the form that already exists on the web page. const paymentMethodForm = document.getElementById('payment-method-form'); const confirmationForm = document.getElementById('confirmation-form');  paymentMethodForm.addEventListener('submit', (ev) => {   ev.preventDefault();   const accountHolderNameField = document.getElementById('account-holder-name-field');   const emailField = document.getElementById('email-field');    // Calling this method will open the instant verification dialog.   stripe.collectBankAccountForPayment({     clientSecret: clientSecret,     params: {       payment_method_type: 'us_bank_account',       payment_method_data: {         billing_details: {           name: accountHolderNameField.value,           email: emailField.value,         },       },     },     expand: ['payment_method'],   })   .then(({paymentIntent, error}) => {     if (error) {       console.error(error.message);       // PaymentMethod collection failed for some reason.     } else if (paymentIntent.status === 'requires_payment_method') {       // Customer canceled the hosted verification modal. Present them with other       // payment method type options.     } else if (paymentIntent.status === 'requires_confirmation') {       // We collected an account - possibly instantly verified, but possibly       // manually-entered. Display payment method details and mandate text       // to the customer and confirm the intent once they accept       // the mandate.       confirmationForm.show();     }   }); });`\n\nThe [Financial Connections authentication flow](https://docs.stripe.com/financial-connections/fundamentals#authentication-flow) automatically handles bank account details collection and verification. When your customer completes the authentication flow, the [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") automatically attaches to the PaymentIntent, and creates a [Financial Connections Account](https://docs.stripe.com/api/financial_connections/accounts).\n\n#### Common mistake\n\nBank accounts that your customers link through manual entry and microdeposits won’t have access to additional bank account data like balances, ownership, and transactions.\n\nTo provide the best user experience on all devices, set the viewport `minimum-scale` for your page to 1 using the viewport `meta` tag.\n\n`<meta name=\"viewport\" content=\"width=device-width, minimum-scale=1\" />`\n\n[\n\n## Collect mandate acknowledgement and submit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#collect-mandate-and-submit)\n\nBefore you can initiate the payment, you must obtain authorization from your customer by displaying mandate terms for them to accept.\n\nTo be compliant with Nacha rules, you must obtain authorization from your customer before you can initiate payment by displaying mandate terms for them to accept. For more information on mandates, see [Mandates](https://docs.stripe.com/payments/ach-debit#mandates).\n\nWhen the customer accepts the mandate terms, you must confirm the PaymentIntent. Use [stripe.confirmUsBankAccountPayment](https://docs.stripe.com/js/payment_intents/confirm_us_bank_account_payment) to complete the payment when the customer submits the form.\n\n`confirmationForm.addEventListener('submit', (ev) => {   ev.preventDefault();   stripe.confirmUsBankAccountPayment(clientSecret)   .then(({paymentIntent, error}) => {     if (error) {       console.error(error.message);       // The payment failed for some reason.     } else if (paymentIntent.status === \"requires_payment_method\") {       // Confirmation failed. Attempt again with a different payment method.     } else if (paymentIntent.status === \"processing\") {       // Confirmation succeeded! The account will be debited.       // Display a message to customer.     } else if (paymentIntent.next_action?.type === \"verify_with_microdeposits\") {       // The account needs to be verified via microdeposits.       // Display a message to consumer with next steps (consumer waits for       // microdeposits, then enters a statement descriptor code on a page sent to them via email).     }   }); });`\n\n#### Note\n\n[stripe.confirmUsBankAccountPayment](https://docs.stripe.com/js/payment_intents/confirm_us_bank_account_payment) may take several seconds to complete. During that time, disable resubmittals of your form and show a waiting indicator (for example, a spinner). If you receive an error, show it to the customer, re-enable the form, and hide the waiting indicator.\n\nIf the customer completes instant verification, the subscription automatically becomes `active`. Otherwise, see [Verify bank account with microdeposits](#verify-with-microdeposits) to learn how to handle microdeposit verification while the subscription remains `incomplete`.\n\n[](#verify-with-microdeposits)\n\n#### Note\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") have 10 days to successfully verify microdeposits for a subscription, instead of the 23 hours normally given in the [subscription lifecycle](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle). However, this expiration can’t be later than the [billing cycle date](#billing-cycle).\n\nNot all customers can verify the bank account instantly. This step only applies if your customer has elected to opt out of the instant verification flow in the previous step.\n\nIn these cases, Stripe sends a `descriptor_code` microdeposit and might fall back to an `amount` microdeposit if any further issues arise with verifying the bank account. These deposits take 1-2 business days to appear on the customer’s online statement.\n\n*   **Descriptor code**. Stripe sends a single, 0.01 USD microdeposit to the customer’s bank account with a unique, 6-digit `descriptor_code` that starts with SM. Your customer uses this string to verify their bank account.\n*   **Amount**. Stripe sends two, non-unique microdeposits to the customer’s bank account, with a statement descriptor that reads `ACCTVERIFY`. Your customer uses the deposit amounts to verify their bank account.\n\nThe result of the [stripe.confirmUsBankAccountPayment](https://docs.stripe.com/js/payment_intents/confirm_us_bank_account_payment) method call in the previous step is a PaymentIntent in the `requires_action` state. The PaymentIntent contains a `next_action` field that contains some useful information for completing the verification.\n\n`next_action: {   type: \"verify_with_microdeposits\",   verify_with_microdeposits: {     arrival_date: 1647586800,     hosted_verification_url: \"[https://payments.stripe.com/…](https://payments.stripe.com/%E2%80%A6)\",     microdeposit_type: \"descriptor_code\"   } }`\n\nIf you supplied a [billing email](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details-email), Stripe notifies your customer via this email when the deposits are expected to arrive. The email includes a link to a Stripe-hosted verification page where they can confirm the amounts of the deposits and complete verification.\n\n#### Warning\n\nVerification attempts have a limit of ten failures for descriptor-based microdeposits and three for amount-based ones. If you exceed this limit, we can no longer verify the bank account. In addition, microdeposit verifications have a timeout of 10 days. If you can’t verify microdeposits in that time, the PaymentIntent reverts to requiring new payment method details. Clear messaging about what these microdeposits are and how you use them can help your customers avoid verification issues.\n\n### Optional: Send custom email notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOptionally, you can send [custom email notifications](https://docs.stripe.com/payments/ach-debit#mandate-and-microdeposit-emails) to your customer. After you set up custom emails, you need to specify how the customer responds to the verification email. To do so, choose _one_ of the following:\n\n*   Use the Stripe-hosted verification page. To do this, use the `verify_with_microdeposits[hosted_verification_url]` URL in the [`next_action`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-verify_with_microdeposits-hosted_verification_url) object to direct your customer to complete the verification process.\n    \n*   If you prefer not to use the Stripe-hosted verification page, create a form on your site. Your customers then use this form to relay microdeposit amounts to you and verify the bank account using [Stripe.js](https://docs.stripe.com/js/payment_intents/verify_microdeposits_for_payment).\n    \n    *   At minimum, set up the form to handle the `descriptor code` parameter, which is a 6-digit string for verification purposes.\n    *   Stripe also recommends that you set your form to handle the `amounts` parameter, as some banks your customers use may require it.\n    \n    Integrations only pass in the `descriptor_code` _or_ `amounts`. To determine which one your integration uses, check the value for `verify_with_microdeposits[microdeposit_type]` in the `next_action` object.\n    \n\n`stripe.verifyMicrodepositsForPayment(clientSecret, {   // Provide either a descriptor_code OR amounts, not both   descriptor_code: 'SMT86W',   amounts: [32, 45], });`\n\n[](#default-payment-method)\n\nYou now have an active [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") belonging to a customer with a payment method, but this payment method isn’t automatically used for future payments. To automatically bill this payment method in the future, use a [webhook](https://docs.stripe.com/webhooks \"webhook\") consumer to listen to the `invoice.payment_succeeded` event for new subscriptions and set the default payment method.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`if event.type == 'invoice.payment_succeeded'   invoice = event.data.object   if invoice['billing_reason'] == 'subscription_create'     subscription_id = invoice['subscription']     payment_intent_id = invoice['payment_intent']      # Retrieve the payment intent used to pay the subscription     payment_intent = Stripe::PaymentIntent.retrieve(payment_intent_id)      # Set the default payment method     Stripe::Subscription.update(       subscription_id,       default_payment_method: payment_intent.payment_method     )   end end`\n\n[](#test-integration)\n\nLearn how to test scenarios with instant verifications using [Financial Connections](https://docs.stripe.com/financial-connections/testing#web-how-to-use-test-accounts).\n\n### Send transaction emails in test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the `payment_method_data.billing_details[email]` field in the form of `{any-prefix}+test_email@{any_domain}` when you collect the [payment method details](#web-collect-details).\n\n#### Common mistake\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\n| Account number | Token | Routing number | Behavior |\n| --- | --- | --- | --- |\n| `000123456789` | `pm_usBankAccount_success` | `110000000` | The payment succeeds. |\n| `000111111113` | `pm_usBankAccount_accountClosed` | `110000000` | The payment fails because the account is closed. |\n| `000111111116` | `pm_usBankAccount_noAccount` | `110000000` | The payment fails because no account is found. |\n| `000222222227` | `pm_usBankAccount_insufficientFunds` | `110000000` | The payment fails due to insufficient funds. |\n| `000333333335` | `pm_usBankAccount_debitNotAuthorized` | `110000000` | The payment fails because debits aren’t authorized. |\n| `000444444440` | `pm_usBankAccount_invalidCurrency` | `110000000` | The payment fails due to invalid currency. |\n| `000666666661` | `pm_usBankAccount_failMicrodeposits` | `110000000` | The payment fails to send microdeposits. |\n| `000555555559` | `pm_usBankAccount_dispute` | `110000000` | The payment triggers a dispute. |\n| `000000000009` | `pm_usBankAccount_processing` | `110000000` | The payment stays in processing indefinitely. Useful for testing [PaymentIntent cancellation](https://docs.stripe.com/api/payment_intents/cancel). |\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\n### Test microdeposit amounts and descriptor codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo mimic different scenarios, use these microdeposit amounts _or_ 0.01 descriptor code values.\n\n| Microdeposit values | 0.01 descriptor code values | Scenario |\n| --- | --- | --- |\n| `32` and `45` | SM11AA | Simulates verifying the account. |\n| `10` and `11` | SM33CC | Simulates exceeding the number of allowed verification attempts. |\n| `40` and `41` | SM44DD | Simulates a microdeposit timeout. |",
    "title": "Set up a subscription with ACH Direct Debit | Stripe Documentation",
    "description": "Learn how to create and charge for a subscription with US bank account.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/au-becs-debit",
    "markdown": "# Set up a subscription with BECS Direct Debit in Australia\n\n## Learn how to create and charge for a subscription with BECS Direct Debit.\n\n#### Note\n\nIf you’re a new user, use the [Payment Element](https://docs.stripe.com/payments/payment-element) instead of using Stripe Elements as described in this guide. The Payment Element provides a low-code integration path with built-in conversion optimizations. For instructions, see [Build a subscription](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements).\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15 AUD monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **15** for the price.\n4.  Select **AUD** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n[](#create-setup-intent)\n\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent to set up a customer’s payment method for future payments. The `SetupIntent` will track the steps of this set-up process. For BECS Direct Debit, this includes collecting a mandate from the customer and tracking its validity throughout its lifecycle.\n\nCreate a [SetupIntent](https://docs.stripe.com/api/setup_intents) on your server with [payment\\_method\\_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types) set to `au_becs_debit`:\n\n`curl https://api.stripe.com/v1/setup_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"payment_method_types[]\"=\"au_becs_debit\"`\n\nThe returned `SetupIntent` object contains a `client_secret` property. Pass the client secret to the client-side application to continue with the setup process.\n\n[](#collect-payment-method-details)\n\nYou’re ready to collect payment information on the client with [Stripe Elements](https://docs.stripe.com/payments/elements). Elements is a set of prebuilt UI components for collecting payment details.\n\nA Stripe Element contains an iframe that securely sends the payment information to Stripe over an HTTPS connection. The checkout page address must also start with https:// rather than http:// for your integration to work.\n\nYou can test your integration without using HTTPS. [Enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe Elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Elements is automatically available as a feature of Stripe.js. Include the Stripe.js script on your payment page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of [Elements](https://docs.stripe.com/js#stripe-elements) with the following JavaScript on your payment page:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const elements = stripe.elements();`\n\n### Direct Debit Requests![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you can create a BECS Direct Debit payment, your customer must agree with the Direct Debit Request Service Agreement. They do so by submitting a completed Direct Debit Request (DDR). The approval gives you a mandate to debit their account. The `Mandate` is a record of the permission to debit a payment method.\n\nFor online mandate acceptance, you can create a form to collect the necessary information. Serve the form over [HTTPS](https://docs.stripe.com/security/guide#tls) and capture the following information:\n\n| Information | Description |\n| --- | --- |\n| **Account name** | The full name of the account holder |\n| **BSB number** | The Bank-State-Branch number of the bank account (for example, `123-456`) |\n| **Account number** | The bank account number (for example, `87654321`) |\n\nWhen collecting a Direct Debit Request, follow our [BECS Direct Debit Terms](https://stripe.com/au-becs/legal) and as part of your checkout form:\n\n*   Display the exact terms of [Stripe’s DDR service agreement](https://stripe.com/au-becs-dd-service-agreement/legal) either inline on the form, or on a page linked from the form, and identifying it as the “DDR service agreement.”\n*   Make sure the accepted DDR and its accompanying [DDR service agreement](https://stripe.com/au-becs-dd-service-agreement/legal) can be shared with your customer at all times, either as a printed or non-changeable electronic copy (such as email). Stripe hosts this for you.\n*   Display the following standard authorization text for your customer to accept the BECS DDR, where you replace _Rocketship Inc_ with your company name. Their acceptance authorizes you to initiate BECS Direct Debit payments from their bank account.\n\n#### Note\n\nBy providing your bank account details, you agree to this Direct Debit Request and the [Direct Debit Request service agreement](https://stripe.com/au-becs-dd-service-agreement/legal), and authorize Stripe Payments Australia Pty Ltd ACN 160 180 343 Direct Debit User ID number 507156 (“Stripe”) to debit your account through the Bulk Electronic Clearing System (BECS) on behalf of _Rocketship Inc_ (the “Merchant”) for any amounts separately communicated to you by the Merchant. You certify that you’re either an account holder or an authorized signatory on the account listed above.\n\nThe details of the accepted mandate are generated when setting up a [PaymentMethod](https://docs.stripe.com/payments/payment-methods) or confirming a `PaymentIntent`. At all times, you should be able to share this mandate—the accepted DDR and its accompanying DDR service agreement—with your customer, either in print or as a non-changeable electronic copy (such as email). Stripe hosts this for you under the `url` property of the `Mandate` object linked to the `PaymentMethod`.\n\n### Add and configure an Australia Bank Account Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Australia Bank Account Element will help you collect and validate both the BSB number and the account number. It needs a place to live in your payment form. Create empty DOM nodes (containers) with unique IDs in your payment form. Additionally, your customer must read and accept the [Direct Debit Request service agreement](https://stripe.com/au-becs-dd-service-agreement/legal).\n\n`<form action=\"/setup\" method=\"post\" id=\"setup-form\">   <div class=\"form-row inline\">     <div class=\"col\">       <label for=\"accountholder-name\">         Name       </label>       <input         id=\"accountholder-name\"         name=\"accountholder-name\"         placeholder=\"John Smith\"         required       />     </div>     <div class=\"col\">       <label for=\"email\">         Email Address       </label>       <input         id=\"email\"         name=\"email\"         type=\"email\"         placeholder=\"john.smith@example.com\"         required       />     </div>   </div>    <div class=\"form-row\">     <!--     Using a label with a for attribute that matches the ID of the     Element container enables the Element to automatically gain focus     when the customer clicks on the label.     -->     <label for=\"au-bank-account-element\">       Bank Account     </label>     <div id=\"au-bank-account-element\">       <!-- A Stripe Element will be inserted here. -->     </div>   </div>    <!-- Used to display bank (branch) name associated with the entered BSB -->   <div id=\"bank-name\"></div>    <!-- Used to display form errors. -->   <div id=\"error-message\" role=\"alert\"></div>    <!-- Display mandate acceptance text. -->   <div class=\"col\" id=\"mandate-acceptance\">     By providing your bank account details, you agree to this Direct Debit Request     and the <a href=\"stripe.com/au-becs-dd-service-agreement/legal\">Direct Debit Request service agreement</a>,     and authorise Stripe Payments Australia Pty Ltd ACN 160 180 343     Direct Debit User ID number 507156 (“Stripe”) to debit your account     through the Bulk Electronic Clearing System (BECS) on behalf of     Rocket Rides (the \"Merchant\") for any amounts separately     communicated to you by the Merchant. You certify that you are either     an account holder or an authorised signatory on the account listed above.   </div>      <!-- Add the client_secret from the SetupIntent as a data attribute -->   <button id=\"submit-button\" data-secret=\"{{CLIENT_SECRET}}\">Set up BECS Direct Debit</button>  </form>`\n\nWhen the form loads, you can [create an instance](https://docs.stripe.com/js/elements_object/create_element?type=au_bank_account) of the Australia Bank Account Element and mount it to the Element container:\n\n``// Custom styling can be passed to options when creating an Element const style = {   base: {     color: '#32325d',     fontSize: '16px',     '::placeholder': {       color: '#aab7c4'     },     ':-webkit-autofill': {       color: '#32325d',     },   },   invalid: {     color: '#fa755a',     iconColor: '#fa755a',     ':-webkit-autofill': {       color: '#fa755a',     },   } };  const options = {     style: style,     disabled: false,     hideIcon: false,     iconStyle: \"default\", // or \"solid\" }  // Create an instance of the auBankAccount Element. const auBankAccount = elements.create('auBankAccount', options);  // Add an instance of the auBankAccount Element into // the `au-bank-account-element` <div>. auBankAccount.mount('#au-bank-account-element');``\n\n[](#submit-payment-method)\n\nRather than sending the entire `SetupIntent` object to the client, use its [client secret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret) from [step 2](#web-create-setup-intent). This is different from your API keys that authenticate Stripe API requests.\n\nThe client secret should be handled carefully because it can complete the setup. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.confirmAuBecsDebitSetup](https://docs.stripe.com/js/setup_intents/confirm_au_becs_debit_setup) to complete the setup when the user submits the form. A successful setup returns a `succeeded` value for the SetupIntent’s `status` property. If the setup isn’t successful, inspect the returned `error` to determine the cause.\n\n`const form = document.getElementById('setup-form'); const accountholderName = document.getElementById('accountholder-name'); const email = document.getElementById('email'); const submitButton = document.getElementById('submit-button'); const clientSecret = submitButton.dataset.secret;  form.addEventListener('submit', async (event) => {   event.preventDefault();   stripe.confirmAuBecsDebitSetup(     clientSecret,     {       payment_method: {         au_becs_debit: auBankAccount,         billing_details: {           name: accountholderName.value,           email: email.value         }       }     }   ); });`\n\nAfter successfully confirming the `SetupIntent`, you should share the [mandate URL](https://docs.stripe.com/api/mandates/object#mandate_object-payment_method_details-au_becs_debit-url) from the [Mandate object](https://docs.stripe.com/api/mandates) with your customer. We also recommend including the following details to your customer when you confirm their mandate has been established:\n\n*   an explicit confirmation message that indicates a Direct Debit arrangement has been set up\n*   the [business name](#statement-descriptors) that will appear on the customer’s bank statement whenever their account gets debited\n*   the payment amount and schedule (if applicable)\n*   a link to the generated DDR mandate URL\n\nThe `Mandate` object’s ID is accessible from the `mandate` on the SetupIntent object, which is sent as part of the `setup_intent.succeeded` event sent after confirmation, but can also be [retrieved through the API](https://docs.stripe.com/api/setup_intents/retrieve).\n\n`curl https://api.stripe.com/v1/setup_intents/{{SETUP_INTENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=mandate`\n\n[](#create-customer)\n\nCreating [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") requires a [customer](https://docs.stripe.com/api#customer_object), which represents the customer purchasing your product. Because the price you created charges on a monthly basis, you need to add a stored payment method to the customer so future payments are successful. You do this by setting the payment method you just collected at the top level of the [Customer](https://docs.stripe.com/api/customers \"Customers\") object and as the [default payment method](https://docs.stripe.com/api/customers/create#create_customer-invoice_settings-default_payment_method) for [invoices](https://docs.stripe.com/api/invoices \"invoices\"):\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode email=\"jenny.rosen@example.com\" \\  -d payment_method=pm_1FU2bgBF6ERF9jhEQvwnA7sX \\  -d \"invoice_settings[default_payment_method]\"=pm_1FU2bgBF6ERF9jhEQvwnA7sX`\n\nThis returns a `Customer` object. You can see the default payment method in the `invoice_settings` object:\n\n`{   \"id\": \"cus_Gk0uVzT2M4xOKD\",   \"object\": \"customer\",   \"address\": null,   \"balance\": 0,   \"created\": 1581797088,   \"currency\": null,   \"default_source\": null,   \"delinquent\": false,   \"description\": null,   \"discount\": null,   \"email\": \"jenny.rosen@example.com\",   \"invoice_prefix\": \"11D0B3D7\",   \"invoice_settings\": {     \"custom_fields\": null,     \"default_payment_method\": \"pm_1FU2bgBF6ERF9jhEQvwnA7sX\",     \"footer\": null   },`\n\nAfter creating the customer, store the `id` value in your own database so you can use it later. The next step also requires this ID.\n\n[](#create-subscription-code)\n\nCreate a [subscription](https://docs.stripe.com/api/subscriptions) with the price and customer:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_Gk0uVzT2M4xOKD \\  -d \"items[0][price]\"=price_F52b2UdntfQsfR \\  -d \"expand[0]\"=\"latest_invoice.payment_intent\"`\n\nCreating subscriptions automatically charges customers because the [default payment method](https://docs.stripe.com/api/customers/create#create_customer-invoice_settings-default_payment_method) is set. After a successful payment, the status in the [Stripe Dashboard](https://dashboard.stripe.com/test/subscriptions) changes to **Active**. The price you created earlier determines subsequent billings.\n\n[](#test-integration)\n\nYou can test your form using the test BSB number `000-000` and one of the test account numbers below with your [confirmAuBecsDebitSetup](https://docs.stripe.com/js/setup_intents/confirm_au_becs_debit_setup) request.\n\n| BSB Number | Account Number | Description |\n| --- | --- | --- |\n| `000-000` | `000123456` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `succeeded`. The mandate status remains `active`. |\n| `000-000` | `900123456` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `succeeded` (with a three-minute delay). The mandate status remains `active`. |\n| `000-000` | `111111113` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with an `account_closed` failure code. The mandate status becomes `inactive` at that point. |\n| `000-000` | `111111116` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with a `no_account` failure code. The mandate status becomes `inactive` at that point. |\n| `000-000` | `222222227` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with a `refer_to_customer` failure code. The mandate status remains `active`. |\n| `000-000` | `922222227` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with a `refer_to_customer` failure code (with a three-minute delay). The mandate status remains `active`. |\n| `000-000` | `333333335` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with a `debit_not_authorized` failure code. The mandate status becomes `inactive` at that point. |\n| `000-000` | `666666660` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `succeeded`, but a dispute is immediately created. |",
    "title": "Set up a subscription with BECS Direct Debit in Australia | Stripe Documentation",
    "description": "Learn how to create and charge for a subscription with BECS Direct Debit.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/cash-app-pay",
    "markdown": "# Set up a subscription with Cash App Pay\n\nCreate and confirm a subscription using two API calls. The [first API call](https://docs.stripe.com/billing/subscriptions/cash-app-pay#create-setup-intent) uses the [Setup Intents API](https://docs.stripe.com/api/setup_intents) to set Cash App Pay as a payment method. The [second API call](https://docs.stripe.com/billing/subscriptions/cash-app-pay#create-subscription) sends customer, product, and payment method information to the [Subscriptions API](https://docs.stripe.com/api/subscriptions) to create a Subscription and confirm a payment in one call.\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15 USD monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **15** for the price.\n4.  Select **USD** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n[](#create-setup-intent)\n\nCreate a [SetupIntent](https://docs.stripe.com/api/setup_intents) to save a customer’s payment method for future payments. The `SetupIntent` tracks the steps of this setup process.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d confirm=true \\   --data-urlencode return_url=\"[https://www.stripe.com](https://www.stripe.com/)\" \\  -d usage=off_session \\  -d \"payment_method_data[type]\"=cashapp \\  -d \"payment_method_types[]\"=cashapp \\  -d \"mandate_data[customer_acceptance][type]\"=online \\  -d \"mandate_data[customer_acceptance][online][ip_address]\"=\"127.0.0.0\" \\  -d \"mandate_data[customer_acceptance][online][user_agent]\"=device`\n\nThe returned SetupIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), which the client side uses to securely complete the setup instead of passing the entire SetupIntent object. You can use different approaches to [pass the client secret to the client side](https://docs.stripe.com/payments/payment-intents#passing-to-client). The SetupIntent response also includes a payment method ID that you need to use in the next step to confirm a PaymentIntent.\n\nThe SetupIntent response includes the status `requires_action`, which means your users must perform another action to complete the SetupIntent. Use the `next_action.cashapp_handle_redirect_or_display_qr_code` object from the SetupIntent response to redirect your users to a Stripe hosted page that displays the QR code, or render the QR code directly. To authenticate users, follow the instructions to [confirm SetupIntent and save a payment method](https://docs.stripe.com/payments/cash-app-pay/set-up-payment?platform=web&ui=direct-api#web-create-setup-intent). After they authenticate, the Cash App mobile application redirects users to the `return_url` on their mobile device, and the SetupIntent moves to a `succeeded` state.\n\n[](#create-subscription)\n\nCreate a subscription that has a price and customer. Set the value of the `default_payment_method` parameter to the PaymentMethod ID from the SetupIntent response.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"items[0][price]\"={{PRICE_ID}} \\   -d default_payment_method={{PAYMENT_METHOD_ID}}`\n\nIncluded in the response is the subscription’s first [PaymentIntent](https://docs.stripe.com/payments/payment-intents), containing the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), which you use on the client side to securely complete the payment process instead of passing the entire PaymentIntent object. Return the `client_secret` to the frontend to complete payment.",
    "title": "Set up a subscription with Cash App Pay | Stripe Documentation",
    "description": "Learn how to create and charge for a subscription with Cash App Pay.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/revolut-pay",
    "markdown": "# Set up a subscription with Revolut Pay\n\nCreate and confirm a subscription using two API calls. The [first API call](https://docs.stripe.com/billing/subscriptions/revolut-pay#create-setup-intent) uses the [Setup Intents API](https://docs.stripe.com/api/setup_intents) to set Revolut Pay as a payment method. The [second API call](https://docs.stripe.com/billing/subscriptions/revolut-pay#create-subscription) sends customer, product, and payment method information to the [Subscriptions API](https://docs.stripe.com/api/subscriptions) to create a Subscription and confirm a payment in one call.\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15 GBP monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **15** for the price.\n4.  Select **GBP** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n[](#create-setup-intent)\n\nCreate a [SetupIntent](https://docs.stripe.com/api/setup_intents) to save a customer’s payment method for future payments. The `SetupIntent` tracks the steps of this setup process.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d confirm=true \\   --data-urlencode return_url=\"[https://www.stripe.com](https://www.stripe.com/)\" \\  -d usage=off_session \\  -d customer=cus_ODQluYFNl44ODI \\  -d \"payment_method_data[type]\"=revolut_pay \\  -d \"payment_method_types[]\"=revolut_pay \\  -d \"mandate_data[customer_acceptance][type]\"=online \\  -d \"mandate_data[customer_acceptance][online][ip_address]\"=\"127.0.0.0\" \\  -d \"mandate_data[customer_acceptance][online][user_agent]\"=device`\n\nThe SetupIntent object contains a `client_secret`, which is a unique key that you must pass to Stripe.js on the client side to redirect your buyer to Revolut Pay and authorize the mandate.\n\n[](#create-subscription)\n\nCreate a subscription that has a price and a customer. Set the value of the `default_payment_method` parameter to the PaymentMethod ID from the SetupIntent response.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"items[0][price]\"={{PRICE_ID}} \\   -d default_payment_method={{PAYMENT_METHOD_ID}} \\   -d off_session=true`\n\nCreating subscriptions automatically charges customers due to the pre-set default payment method. After a successful payment, the status in the Stripe Dashboard changes to **Active**. The price that you previously set up determines the amount for future billings. Learn how to [create a subscription with a free trial period](#trial-periods).",
    "title": "Set up a subscription with Revolut Pay | Stripe Documentation",
    "description": "Learn how to create and charge for a subscription with Revolut Pay.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/paypal",
    "markdown": "# Set up a subscription with PayPal\n\n## Learn how to create and charge for a subscription with PayPal.\n\n#### Caution\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15 EUR monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **15** for the price.\n4.  Select **EUR** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n[](#web-create-a-customer)\n\nTo reuse a PayPal payment method for future payments, it must be attached to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nYou should create a Customer object when your customer creates an account on your business. Associating the ID of the Customer object with your own internal representation of a customer will enable you to retrieve and use the stored payment method details later. If your customer hasn’t created an account, you can still create a Customer object now and associate it with your internal representation of the customer’s account later.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#web-create-setup-intent)\n\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent and tracks the steps to set up your customer’s payment method for future payments.\n\nCreate a [SetupIntent](https://docs.stripe.com/api/setup_intents) on your server with [payment\\_method\\_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types) set to `paypal` and specify the [Customer](https://docs.stripe.com/api/customers \"Customers\")’s [id](https://docs.stripe.com/api/customers/object#customer_object-id).\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"payment_method_types[]\"=paypal \\  -d \"payment_method_data[type]\"=paypal`\n\nThe SetupIntent object contains a [client\\_secret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret), a unique key that you need to pass to Stripe on the client side to redirect your buyer to PayPal and authorize the mandate.\n\n[](#web-confirm-setup-intent)\n\nWhen a customer attempts to set up their PayPal account for future payments, we recommend you use [Stripe.js](https://docs.stripe.com/js) to confirm the SetupIntent. Stripe.js is our foundational JavaScript library for building payment flows. It will automatically handle complexities like the redirect described below, and enables you to easily extend your integration to other payment methods in the future.\n\nInclude the Stripe.js script on your checkout page by adding it to the head of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`,   {} );`\n\nTo confirm the setup on the client side, pass the client secret of the SetupIntent object that you created in Step 3.\n\nThe client secret is different from your API keys that authenticate Stripe API requests. It should still be handled carefully because it can complete the charge. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\n### Confirm PayPal Setup![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo authorize you to use their PayPal account for future payments, your customer will be redirected to a PayPal billing agreement page, which they will need to approve before being redirected back to your website. Use [stripe.confirmPayPalSetup](https://docs.stripe.com/js/setup_intents/confirm_paypal_setup) to handle the redirect away from your page and to complete the setup. Add a `return_url` to this function to indicate where Stripe should redirect the user to after they approve the billing agreement on PayPal’s website.\n\n`// Redirects away from the client const {error} = await stripe.confirmPayPalSetup(   '{{SETUP_INTENT_CLIENT_SECRET}}',   {     return_url: 'https://example.com/setup/complete',     mandate_data: {       customer_acceptance: {         type: 'online',         online: {             infer_from_client: true         }       }     },   } );  if (error) {   // Inform the customer that there was an error. }`\n\nYou can find the Payment Method owner’s email, payer ID, and Billing Agreement ID on the resulting [Mandate](https://docs.stripe.com/api/mandates/) under the [payment\\_method\\_details](https://docs.stripe.com/api/mandates/object#mandate_object-payment_method_details-paypal) property. You can also find the buyer’s email and payer ID in the [paypal](https://docs.stripe.com/api/payment_methods/object#payment_method_object-paypal) property on the [PaymentMethod](https://docs.stripe.com/api/payment_methods).\n\n| Field | Value |\n| --- | --- |\n| `verified_email` | The email address of the payer on their PayPal account. |\n| `payer_id` | A unique ID of the payer’s PayPal account. |\n| `billing_agreement_id` | The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the business and the customer. |\n\n[](#web-monitor-webhooks)\n\nUse a method such as [webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to confirm the billing agreement was authorized successfully by your customer, instead of relying on your customer to return to the payment status page. When a customer successfully authorizes the billing agreement, the SetupIntent emits the [setup\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-setup_intent.succeeded) [webhook](https://docs.stripe.com/webhooks \"webhook\") event. If a customer doesn’t successfully authorize the billing agreement, the SetupIntent will emit the [setup\\_intent.setup\\_failed](https://docs.stripe.com/api/events/types#event_types-setup_intent.setup_failed) webhook event and returns to a status of `requires_payment_method`. When a customer revokes the billing agreement from their PayPal account, the [mandate.updated](https://docs.stripe.com/api/events/types#event_types-mandate.updated) is emitted.\n\n[](#create-subscription-code)\n\nCreate a [subscription](https://docs.stripe.com/api/subscriptions) with the price and customer:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_Gk0uVzT2M4xOKD \\  -d default_payment_method=pm_1F0c9v2eZvKYlo2CJDeTrB4n \\  -d \"items[0][price]\"=price_F52b2UdntfQsfR \\  -d \"expand[0]\"=\"latest_invoice.payment_intent\" \\  -d off_session=true`\n\nCreating [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") automatically charges customers because the [default payment method](https://docs.stripe.com/api/customers/create#create_customer-invoice_settings-default_payment_method) is set. After a successful payment, the status in the [Stripe Dashboard](https://dashboard.stripe.com/test/subscriptions) changes to **Active**. The price you created earlier determines subsequent billings.\n\n[](#update-subscription)\n\nWhen you update a subscription, you need to specify `off_session=true`. Otherwise, any new payment will require a user redirection to PayPal for confirmation. For example, if you want to change the quantity of an item included in the subscription you can use:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_Gk0uVzT2M4xOKD \\  -d default_payment_method=pm_1F0c9v2eZvKYlo2CJDeTrB4n \\  -d \"items[0][price]\"=price_F52b2UdntfQsfR \\  -d \"items[0][quantity]\"=2 \\  -d off_session=true`\n\n[](#test-integration)\n\nTest your PayPal integration with your [test API keys](https://docs.stripe.com/keys#test-live-modes) by viewing the redirect page. You can test the successful payment case by authenticating the payment on the redirect page. The PaymentIntent will transition from `requires_action` to `succeeded`.\n\nTo test the case where the user fails to authenticate, use your test API keys and view the redirect page. On the redirect page, click **Fail test payment**. The PaymentIntent will transition from `requires_action` to `requires_payment_method`.",
    "title": "Set up a subscription with PayPal | Stripe Documentation",
    "description": "Learn how to create and charge for a subscription with PayPal.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/paypal-subscription-mode",
    "markdown": "# Set up a subscription with PayPal\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Session with the ID of an existing [Price](https://docs.stripe.com/api/prices). Ensure that mode is set to `subscription` and you pass at least one recurring price. You can add one-time prices in addition to recurring prices. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen your customer successfully completes their payment, they are redirected to the `success_url`, a page on your website that informs the customer that their payment was successful. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without completing a payment, Checkout redirects them back to your website by navigating to the `cancel_url`. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nCheckout Sessions expire 24 hours after creation.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.",
    "title": "Set up a subscription with PayPal | Stripe Documentation",
    "description": "Use Stripe Checkout with Stripe Billing to set up recurring payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/acss-debit",
    "markdown": "# Set up a subscription with pre-authorized debit in Canada\n\n## Learn how to create and charge for a subscription with Canadian pre-authorized debits.\n\n#### Note\n\nSubscription mode in [Checkout](https://docs.stripe.com/payments/checkout) isn’t yet supported. To learn about early access when this feature is available, [contact us](mailto:payment-methods-feedback@stripe.com?subject=PADs%20Subscription%20Mode%20User%20Interest) to join the waitlist.\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products) represent the item or service you’re selling. [Prices](https://docs.stripe.com/api/prices) define how much and how frequently you charge for a product. This includes how much the product costs, what currency you accept, and whether it’s a one-time or recurring charge. If you only have a few products and prices, create and manage them in the Dashboard.\n\nThis guide uses a stock photo service as an example and charges customers a 15 CAD monthly subscription. To model this:\n\n1.  Navigate to the [Add a product](https://dashboard.stripe.com/test/products/create) page.\n2.  Enter a **Name** for the product.\n3.  Enter **15** for the price.\n4.  Select **CAD** as the currency.\n5.  Click **Save product**.\n\nAfter you create the product and the price, record the price ID so you can use it in subsequent steps. The pricing page displays the ID and it looks similar to this: `price_G0FvDp6vZvdwRZ`.\n\n[](#create-subscription)\n\n#### Note\n\nTo create a subscription with a free trial period, see [Subscription trials](#trial-periods).\n\nCreate a [subscription](https://docs.stripe.com/api/subscriptions) with the price and customer with status `incomplete` by providing the [payment\\_behavior](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_behavior) parameter with the value of `default_incomplete`.\n\n`curl https://api.stripe.com/v1/subscriptions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"items[0][price]\"=\"price_F52b2UdntfQsfR\" \\   -d \"payment_behavior\"=\"default_incomplete\" \\   -d \"payment_settings[payment_method_types][]\"=\"acss_debit\" \\   -d \"expand[0]\"=\"latest_invoice.payment_intent\"`\n\nIncluded in the response is the [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\")’s first [PaymentIntent](https://docs.stripe.com/payments/payment-intents), containing the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), which is used on the client side to securely complete the payment process instead of passing the entire PaymentIntent object. Return the `client_secret` to the frontend to complete payment.\n\n[\n\n## Collect payment method details and mandate acknowledgment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#collect-payment-and-mandate)\n\nTo use Canadian pre-authorized debits, you must obtain authorization from your customer for one-time and recurring debits using a pre-authorized debit agreement (see [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates)). The [Mandate](https://docs.stripe.com/api/mandates) object records this agreement and authorization.\n\nStripe automatically configures subscription and [invoice](https://docs.stripe.com/api/invoices \"invoices\") mandates for you. The customer only needs to acknowledge the mandate terms once, subsequent subscription charges will succeed without further intervention.\n\nWhen a customer clicks to pay with Canadian pre-authorized debit, we recommend you use Stripe.js to submit the payment to Stripe. [Stripe.js](https://docs.stripe.com/payments/elements) is our foundational JavaScript library for building payment flows. It will automatically handle integration complexities, and enables you to easily extend your integration to other payment methods in the future.\n\nInclude the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\nRather than sending the entire PaymentIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") from the previous step. This is different from your API keys that authenticate Stripe API requests.\n\nThe client secret should still be handled carefully because it can complete the charge. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.confirmAcssDebitPayment](https://docs.stripe.com/js/payment_intents/confirm_acss_debit_payment) to collect bank account details and verification, confirm the mandate, and complete the payment when the user submits the form. Including the customer’s email address and the account holder’s name in the `billing_details` property of the `payment_method` parameter is required to create a PAD payment method.\n\n`const form = document.getElementById('payment-form'); const accountholderName = document.getElementById('accountholder-name'); const email = document.getElementById('email'); const submitButton = document.getElementById('submit-button'); const clientSecret = submitButton.dataset.secret;  form.addEventListener('submit', async (event) => {   event.preventDefault();    const {paymentIntent, error} = await stripe.confirmAcssDebitPayment(     clientSecret,     {       payment_method: {         billing_details: {           name: accountholderName.value,           email: email.value,         },       },     }   );    if (error) {     // Inform the customer that there was an error.     console.log(error.message);   } else {       // Handle next step based on PaymentIntent's status.       console.log(\"PaymentIntent ID: \" + paymentIntent.id);       console.log(\"PaymentIntent status: \" + paymentIntent.status);   } });`\n\nStripe.js then loads an on-page modal UI that handles bank account details collection and verification, presents a hosted mandate agreement and collects authorization.\n\n#### Note\n\n`stripe.confirmAcssDebitPayment` may take several seconds to complete. During that time, disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error, show it to the customer, re-enable the form, and hide the waiting indicator.\n\nIf the customer completes instant verification, the subscription automatically becomes `active`. Otherwise, consult the following section to handle micro-deposit verification while the subscription remains `incomplete`.\n\n[](#verify-with-microdeposits)\n\n#### Note\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") have 10 days to successfully verify micro-deposits for a subscription, instead of 23 hours normally given in the [subscription lifecycle](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle). However, this expiration can’t be later than the [billing cycle date](#billing-cycle).\n\nNot all customers can verify the bank account instantly. This step only applies if your customer has elected to opt out of the instant verification flow in the previous step.\n\nIn this case, Stripe automatically sends two micro-deposits to the customer’s bank account. These deposits take one to two business days to appear on the customer’s online statement and have statement descriptors that include `ACCTVERIFY`.\n\nThe result of the `stripe.confirmAcssDebitPayment` method call in the previous step is a PaymentIntent in the `requires_action` state. The PaymentIntent contains a `next_action` field that contains some useful information for completing the verification.\n\nStripe notifies your customer at the [billing email](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details-email) when the deposits are expected to arrive. The email includes a link to a Stripe-hosted verification page where they can confirm the amounts of the deposits and complete verification.\n\nThere is a limit of three failed verification attempts. If this limit is exceeded, the bank account can no longer be verified. In addition, there is a timeout for micro-deposit verifications of 10 days. If micro-deposits are not verified in that time, the PaymentIntent reverts to requiring new payment method details. Clear messaging about what these micro-deposits are and how you use them can help your customers avoid verification issues.\n\n### Optional: Custom email and verification page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you choose to send [custom email notifications](https://docs.stripe.com/payments/acss-debit#mandate-and-debit-notification-emails), you have to email your customer instead. To do this, you can use the `verify_with_microdeposits[hosted_verification_url]` URL in the `next_action` object to direct your customer to complete the verification process.\n\nIf you are sending custom emails and don’t want to use the Stripe hosted verification page, you can create a form on your site for your customers to relay these amounts to you and verify the bank account using [Stripe.js](https://docs.stripe.com/js/payment_intents/verify_microdeposits_for_payment).\n\n`stripe.verifyMicrodepositsForPayment(clientSecret, {   amounts: [32, 45], });`\n\n[](#default-payment-method)\n\nYou now have an active [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") belonging to a customer with a payment method, but this payment method isn’t automatically used for future payments. To automatically bill this payment method in the future, use a [webhook](https://docs.stripe.com/webhooks \"webhook\") consumer to listen to the `invoice.payment_succeeded` event for new subscriptions and set the default payment method.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`if event.type == 'invoice.payment_succeeded'   invoice = event.data.object   if invoice['billing_reason'] == 'subscription_create'     subscription_id = invoice['subscription']     payment_intent_id = invoice['payment_intent']      # Retrieve the payment intent used to pay the subscription     payment_intent = Stripe::PaymentIntent.retrieve(payment_intent_id)      # Set the default payment method     Stripe::Subscription.update(       subscription_id,       default_payment_method: payment_intent.payment_method     )   end end`\n\n[](#manage-sub-status)\n\nAssuming the initial payment succeeds, the state of the subscription is `active` and requires no further action. When payments fail, the status changes to the **Subscription status** configured in your [automatic collection settings](https://docs.stripe.com/invoicing/automatic-collection). Notify the customer upon failure and [charge them with a different payment method](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method).\n\n#### Note\n\nCanadian pre-authorized debit payments are never automatically retried, even if you have a [retry schedule](https://docs.stripe.com/invoicing/automatic-collection) configured for other payment methods.\n\n[](#test-integration)\n\n### Receive micro-deposit verification email![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn order to receive the micro-deposit verification email in test mode after collecting the bank account details and accepting a mandate, provide an email in the `payment_method[billing_details][email]` field in the form of `{any_prefix}+test_email@{any_domain}` when confirming the payment method details.\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers you can use to make sure your integration for manually-entered bank accounts is ready for production. All test accounts that automatically succeed or fail the payment must be verified using the test micro-deposit amounts below before they can be completed.\n\n| Institution Number | Transit Number | Account Number | Scenario |\n| --- | --- | --- | --- |\n| `000` | `11000` | `000123456789` | Succeeds the payment immediately after micro-deposits are verified. |\n| `000` | `11000` | `900123456789` | Succeeds the payment with a three-minute delay after micro-deposits are verified. |\n| `000` | `11000` | `000222222227` | Fails the payment immediately after micro-deposits are verified. |\n| `000` | `11000` | `900222222227` | Fails the payment with a three-minute delay after micro-deposits are verified. |\n| `000` | `11000` | `000666666661` | Fails to send verification micro-deposits. |\n\nTo mimic successful or failed bank account verifications in test mode, use these meaningful amounts for micro-deposits:\n\n| Micro-deposit Values | Scenario |\n| --- | --- |\n| `32` and `45` | Successfully verifies the account. |\n| Any other number combinations | Fails account verification. |",
    "title": "Set up a subscription with pre-authorized debit in Canada | Stripe Documentation",
    "description": "Learn how to create and charge for a subscription with Canadian pre-authorized debits.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/sepa-debit",
    "markdown": "# Set up a subscription with SEPA Direct Debit\n\n## Use Stripe Billing to set up recurring payments.\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) represents the details of your customer’s intent to purchase. You create a Session when your customer wants to start a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). After redirecting your customer to a Checkout Session, Stripe presents a payment form where your customer can complete their purchase. Once your customer has completed a purchase, they will be redirected back to your site.\n\n[](#web-setup)\n\nInstall the Stripe client of your choice:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\nInstall the Stripe CLI (optional). The CLI provides [webhook testing](https://docs.stripe.com/webhooks#test-webhook), and you can run it to create your products and prices.\n\n`# Install Homebrew to run this command: [https://brew.sh/](https://brew.sh/) brew install stripe/stripe-cli/stripe  # Connect the CLI to your dashboard stripe login`\n\nFor additional install options, see [Get started with the Stripe CLI](https://docs.stripe.com/stripe-cli).\n\n[](#create-pricing-model)\n\nCreate your [products](https://docs.stripe.com/api/products \"subscription products\") and their [prices](https://docs.stripe.com/api/prices \"Prices\") in the Dashboard or with the Stripe CLI.\n\nThis example uses a fixed-price service with two different service-level options: Basic and Premium. For each service-level option, you need to create a product and a recurring price. (If you want to add a one-time charge for something like a setup fee, create a third product with a one-time price. To keep things simple, this example doesn’t include a one-time charge.)\n\nIn this example, each product bills at monthly intervals. The price for the Basic product is 5 EUR. The price for the Premium product is 15 EUR.\n\nGo to the [Add a product](https://dashboard.stripe.com/test/products/create) page and create two products. Add one price for each product, each with a monthly recurring billing period:\n\n*   Premium product: Premium service with extra features\n    \n    *   Price: Standard pricing | 15 EUR\n*   Basic product: Basic service with minimum features\n    \n    *   Price: Standard pricing | 5 EUR\n\nAfter you create the prices, record the price IDs so you can use them in other steps. Price IDs look like this: `price_G0FvDp6vZvdwRZ`.\n\nWhen you’re ready, use the **Copy to live mode** button at the top right of the page to clone your product from [test mode to live mode](https://docs.stripe.com/keys#test-live-modes).\n\nFor other pricing models, see [Billing examples](https://docs.stripe.com/products-prices/pricing-models).\n\n[](#create-checkout-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Session with the ID of an existing [Price](https://docs.stripe.com/api/prices \"Prices\"). Ensure that mode is set to `subscription` and you pass at least one recurring price. You can add one-time prices in addition to recurring prices. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen your customer successfully completes their payment, they are redirected to the `success_url`, a page on your website that informs the customer that their payment was successful. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without completing a payment, Checkout redirects them back to your website by navigating to the `cancel_url`. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nCheckout Sessions expire 24 hours after creation.\n\nFrom your [Dashboard](https://dashboard.stripe.com/settings/payment_methods), enable the payment methods you want to accept from your customers. Checkout supports [several payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support).\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[](#payment-success)\n\nWhen your customer completes a payment, Stripe redirects them to the URL that you specified in the `success_url` parameter. Typically, this is a page on your website that informs your customer that their payment was successful.\n\nHowever, SEPA Direct Debit is a delayed notification payment method, which means that funds aren’t immediately available. A SEPA Direct Debit payment typically takes three business days to make the funds available. Because of this, you’ll want to delay order fulfillment until the funds are available. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") status changes from `processing` to `succeeded`.\n\nYou can confirm the payment is successful in several ways:\n\nSuccessful payments appear in the Dashboard’s [list of payments](https://dashboard.stripe.com/payments). When you click a payment, it takes you to the payment detail page. The **Checkout summary** section contains billing information and the list of items purchased, which you can use to manually fulfill the order.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/source.16d3029596357c80a8efdbbfe106108a.png)\n\n#### Note\n\nStripe can help you keep up with incoming payments by sending you email notifications whenever a customer successfully completes one. Use the Dashboard to [configure email notifications](https://dashboard.stripe.com/settings/user).\n\n[](#testing)\n\nYou can test your integration using the IBANs below. The payment method details are successfully collected for each IBAN but exhibit different behavior when charged.\n\n##### Test IBANs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Account Number | Description |\n| --- | --- |\n| `AT611904300234573201` | The PaymentIntent status transitions from `processing` to `succeeded`. |\n| `AT321904300235473204` | The PaymentIntent status transitions from `processing` to `succeeded` after three minutes. |\n| `AT861904300235473202` | The PaymentIntent status transitions from `processing` to `requires_payment_method`. |\n| `AT051904300235473205` | The PaymentIntent status transitions from `processing` to `requires_payment_method` after three minutes. |\n| `AT591904300235473203` | The PaymentIntent status transitions from `processing` to `succeeded`, but a dispute is immediately created. |",
    "title": "Set up a subscription with SEPA Direct Debit | Stripe Documentation",
    "description": "Use Stripe Billing to set up recurring payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/ideal",
    "markdown": "# Set up a subscription with iDEAL and SEPA Direct Debit\n\n## Use Stripe Billing to set up recurring payments.\n\niDEAL is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) each payment. After your customer authenticates the payment, Stripe saves your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) in a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) payment method. You can then use the SEPA Direct Debit payment method to [accept future payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment).\n\nWith this integration, Stripe charges the first Subscription payment through iDEAL to collect your customer’s bank details. If you’re offering a free trial, Stripe charges your customer 0.01 EUR through iDEAL to collect their bank details and immediately refunds it.\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) represents the details of your customer’s intent to purchase. You create a Session when your customer wants to start a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). After redirecting your customer to a Checkout Session, Stripe presents a payment form where your customer can complete their purchase. After your customer completes a purchase, they’re redirected back to your site.\n\n[](#web-setup)\n\nInstall the Stripe client of your choice:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\nInstall the Stripe CLI (optional). The CLI provides [webhook testing](https://docs.stripe.com/webhooks#test-webhook), and you can run it to create your products and prices.\n\nFrom the command-line, use an install script or download and extract a versioned archive file for your operating system to install the CLI.\n\nTo install the Stripe CLI with [homebrew](https://brew.sh/), run:\n\n`brew install stripe/stripe-cli/stripe`\n\nTo run the Stripe CLI, you must also pair it with your Stripe account. Run `stripe login` and follow the prompts. For more information, see the [Stripe CLI documentation page](https://docs.stripe.com/stripe-cli).\n\n[](#create-pricing-model)\n\nCreate your [products](https://docs.stripe.com/api/products \"subscription products\") and their [prices](https://docs.stripe.com/api/prices \"Prices\") in the Dashboard or with the Stripe CLI.\n\nThis example uses a fixed-price service with two different service-level options: Basic and Premium. For each service-level option, you need to create a product and a recurring price. (If you want to add a one-time charge for something like a setup fee, create a third product with a one-time price. To keep things simple, this example doesn’t include a one-time charge.)\n\nIn this example, each product bills at monthly intervals. The price for the Basic product is 5 EUR. The price for the Premium product is 15 EUR.\n\nGo to the [Add a product](https://dashboard.stripe.com/test/products/create) page and create two products. Add one price for each product, each with a monthly recurring billing period:\n\n*   Premium product: Premium service with extra features\n    \n    *   Price: Standard pricing | 15 EUR\n*   Basic product: Basic service with minimum features\n    \n    *   Price: Standard pricing | 5 EUR\n\nAfter you create the prices, record the price IDs so you can use them in other steps. Price IDs look like this: `price_G0FvDp6vZvdwRZ`.\n\nWhen you’re ready, use the **Copy to live mode** button at the top right of the page to clone your product from [test mode to live mode](https://docs.stripe.com/keys#test-live-modes).\n\nFor other pricing models, see [Billing examples](https://docs.stripe.com/products-prices/pricing-models).\n\n[](#create-checkout-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Session with the ID of an existing [Price](https://docs.stripe.com/api/prices \"Prices\"). Make sure that the mode is set to `subscription` and that you pass at least one recurring price. You can add one-time prices in addition to recurring prices. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen creating a Session, you can specify `payment_method_types` or have Stripe automatically pick payment methods based on your [Dashboard](https://dashboard.stripe.com/settings/payment_methods) settings. If you don’t specify `payment_method_types`, you must turn on iDEAL recurring payments in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). This enables SEPA Direct Debit for recurring iDEAL payments only, but doesn’t turn on SEPA Direct Debit payments as a stand alone payment method.\n\nWhen your customer successfully completes their payment, they’re redirected to the `success_url`, a page on your website that informs the customer that their payment was successful. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without completing a payment, Checkout redirects them back to your website by navigating to the `cancel_url`. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nCheckout Sessions expire 24 hours after creation.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[](#payment-success)\n\nWhen your customer completes a payment, they’re redirected to the URL that you specified as the `success_url`. This is typically a page on your website that informs your customer that their payment was successful.\n\nUse the Dashboard, a custom [webhook](https://docs.stripe.com/webhooks \"webhook\"), or a third-party plugin to handle post-payment events like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nSuccessful payments appear in the Dashboard’s [list of payments](https://dashboard.stripe.com/payments). When you click a payment, it takes you to the payment detail page. The **Checkout summary** section contains billing information and the list of items purchased, which you can use to manually fulfill the order.\n\n![Checkout summary](https://b.stripecdn.com/docs-statics-srv/assets/source.16d3029596357c80a8efdbbfe106108a.png)\n\nWhen a customer successfully pays for a recurring service, they’re automatically subscribed. Their subscription is recorded as a new entry in the Dashboard’s [list of subscriptions](https://dashboard.stripe.com/subscriptions).\n\n#### Note\n\nStripe can help you keep up with incoming payments by sending you email notifications whenever a customer successfully completes one. Use the Dashboard to [configure email notifications](https://dashboard.stripe.com/settings/user).\n\nYou can use plugins like [Zapier](https://stripe.com/works-with/zapier) to automate updating your purchase fulfillment systems with information from Stripe payments.\n\nSome examples of automation supported by plugins include:\n\n*   Updating spreadsheets used for order tracking in response to successful payments\n*   Updating inventory management systems in response to successful payments\n*   Triggering notifications to internal customer service teams using email or chat applications\n\n[](#testing)\n\nUsing your [test API keys](https://docs.stripe.com/keys#test-live-modes), select any bank from the list. After confirming, you’re redirected to a test page with options to authorize or fail the payment.\n\n*   Click **Authorize test payment** to test the case when the setup is successful.\n*   Click **Fail test payment** to test the case when the customer fails to authenticate.",
    "title": "Set up a subscription with iDEAL and SEPA Direct Debit | Stripe Documentation",
    "description": "Use Stripe Billing to set up recurring payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/bancontact",
    "markdown": "# Set up a subscription with Bancontact and SEPA Direct Debit\n\n## Use Stripe Billing to set up recurring payments.\n\nBancontact is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) each payment. After your customer authenticates the payment, Stripe saves your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) in a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) payment method. You can then use the SEPA Direct Debit payment method to [accept future payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment).\n\nWith this integration, Stripe charges the first Subscription payment through Bancontact to collect your customer’s bank details. If you’re offering a free trial, Stripe charges your customer 0.02 EUR through Bancontact to collect their bank details and immediately refunds it.\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) represents the details of your customer’s intent to purchase. You create a Session when your customer wants to start a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). After redirecting your customer to a Checkout Session, Stripe presents a payment form where your customer can complete their purchase. After your customer completes a purchase, they’re redirected back to your site.\n\n[](#web-setup)\n\nInstall the Stripe client of your choice:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\nInstall the Stripe CLI (optional). The CLI provides [webhook testing](https://docs.stripe.com/webhooks#test-webhook), and you can run it to create your products and prices.\n\n`# Install Homebrew to run this command: [https://brew.sh/](https://brew.sh/) brew install stripe/stripe-cli/stripe  # Connect the CLI to your dashboard stripe login`\n\nFor additional install options, see [Get started with the Stripe CLI](https://docs.stripe.com/stripe-cli).\n\n[](#create-pricing-model)\n\nCreate your [products](https://docs.stripe.com/api/products \"subscription products\") and their [prices](https://docs.stripe.com/api/prices \"Prices\") in the Dashboard or with the Stripe CLI.\n\nThis example uses a fixed-price service with two different service-level options: Basic and Premium. For each service-level option, you need to create a product and a recurring price. (If you want to add a one-time charge for something like a setup fee, create a third product with a one-time price. To keep things simple, this example doesn’t include a one-time charge.)\n\nIn this example, each product bills at monthly intervals. The price for the Basic product is 5 EUR. The price for the Premium product is 15 EUR.\n\nGo to the [Add a product](https://dashboard.stripe.com/test/products/create) page and create two products. Add one price for each product, each with a monthly recurring billing period:\n\n*   Premium product: Premium service with extra features\n    \n    *   Price: Standard pricing | 15 EUR\n*   Basic product: Basic service with minimum features\n    \n    *   Price: Standard pricing | 5 EUR\n\nAfter you create the prices, record the price IDs so you can use them in other steps. Price IDs look like this: `price_G0FvDp6vZvdwRZ`.\n\nWhen you’re ready, use the **Copy to live mode** button at the top right of the page to clone your product from [test mode to live mode](https://docs.stripe.com/keys#test-live-modes).\n\nFor other pricing models, see [Billing examples](https://docs.stripe.com/products-prices/pricing-models).\n\n[](#create-checkout-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Session with the ID of an existing [Price](https://docs.stripe.com/api/prices \"Prices\"). Make sure that the mode is set to `subscription` and that you pass at least one recurring price. You can add one-time prices in addition to recurring prices. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen creating a Session, you can specify `payment_method_types` or have Stripe automatically pick payment methods based on your [Dashboard](https://dashboard.stripe.com/settings/payment_methods) settings. If you don’t specify `payment_method_types`, you must turn on Bancontact recurring payments in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). This enables SEPA Direct Debit for recurring Bancontact payments only, but doesn’t turn on SEPA Direct Debit payments as a stand alone payment method.\n\nWhen your customer successfully completes their payment, they’re redirected to the `success_url`, a page on your website that informs the customer that their payment was successful. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without completing a payment, Checkout redirects them back to your website by navigating to the `cancel_url`. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nCheckout Sessions expire 24 hours after creation.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[](#payment-success)\n\nWhen your customer completes a payment, they’re redirected to the URL that you specified as the `success_url`. This is typically a page on your website that informs your customer that their payment was successful.\n\nUse the Dashboard, a custom [webhook](https://docs.stripe.com/webhooks \"webhook\"), or a third-party plugin to handle post-payment events like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nSuccessful payments appear in the Dashboard’s [list of payments](https://dashboard.stripe.com/payments). When you click a payment, it takes you to the payment detail page. The **Checkout summary** section contains billing information and the list of items purchased, which you can use to manually fulfill the order.\n\n![Checkout summary](https://b.stripecdn.com/docs-statics-srv/assets/source.16d3029596357c80a8efdbbfe106108a.png)\n\nWhen a customer successfully pays for a recurring service, they’re automatically subscribed. Their subscription is recorded as a new entry in the Dashboard’s [list of subscriptions](https://dashboard.stripe.com/subscriptions).\n\n#### Note\n\nStripe can help you keep up with incoming payments by sending you email notifications whenever a customer successfully completes one. Use the Dashboard to [configure email notifications](https://dashboard.stripe.com/settings/user).\n\nYou can use plugins like [Zapier](https://stripe.com/works-with/zapier) to automate updating your purchase fulfillment systems with information from Stripe payments.\n\nSome examples of automation supported by plugins include:\n\n*   Updating spreadsheets used for order tracking in response to successful payments\n*   Updating inventory management systems in response to successful payments\n*   Triggering notifications to internal customer service teams using email or chat applications\n\n[](#testing)\n\nUsing your [test API keys](https://docs.stripe.com/keys#test-live-modes), select Bancontact as the payment method and click the **Subscribe** button. After confirming, you’re redirected to a test page with options to authorize or fail the payment.\n\n*   Click **Authorize test payment** to test the case when the setup is successful.\n*   Click **Fail test payment** to test the case when the customer fails to authenticate.",
    "title": "Set up a subscription with Bancontact and SEPA Direct Debit | Stripe Documentation",
    "description": "Use Stripe Billing to set up recurring payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/sofort",
    "markdown": "# Set up a subscription with Sofort and SEPA Direct Debit\n\n## Use Stripe Billing to set up recurring payments.\n\n#### Warning\n\nOur financial partners are in the process of deprecating Sofort. New businesses can’t accept Sofort payments. For more information read our [support page](https://support.stripe.com/questions/sofort-is-being-deprecated-as-a-standalone-payment-method).\n\nSofort is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) each payment. After your customer authenticates the payment, Stripe saves your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) in a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) payment method. You can then use the SEPA Direct Debit payment method to [accept future payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment).\n\nWith this integration, Stripe charges the first Subscription payment through Sofort to collect your customer’s bank details. If you’re offering a free trial, Stripe charges your customer 1 EUR through Sofort to collect their bank details and immediately refunds it.\n\nA [Checkout Session](https://docs.stripe.com/api/checkout/sessions) represents the details of your customer’s intent to purchase. You create a Session when your customer wants to start a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). After redirecting your customer to a Checkout Session, Stripe presents a payment form where your customer can complete their purchase. After your customer completes a purchase, they’re redirected back to your site.\n\n[](#web-setup)\n\nInstall the Stripe client of your choice:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\nInstall the Stripe CLI (optional). The CLI provides [webhook testing](https://docs.stripe.com/webhooks#test-webhook), and you can run it to create your products and prices.\n\n`# Install Homebrew to run this command: [https://brew.sh/](https://brew.sh/) brew install stripe/stripe-cli/stripe  # Connect the CLI to your dashboard stripe login`\n\nFor additional install options, see [Get started with the Stripe CLI](https://docs.stripe.com/stripe-cli).\n\n[](#create-pricing-model)\n\nCreate your [products](https://docs.stripe.com/api/products \"subscription products\") and their [prices](https://docs.stripe.com/api/prices \"Prices\") in the Dashboard or with the Stripe CLI.\n\nThis example uses a fixed-price service with two different service-level options: Basic and Premium. For each service-level option, you need to create a product and a recurring price. (If you want to add a one-time charge for something like a setup fee, create a third product with a one-time price. To keep things simple, this example doesn’t include a one-time charge.)\n\nIn this example, each product bills at monthly intervals. The price for the Basic product is 5 EUR. The price for the Premium product is 15 EUR.\n\nGo to the [Add a product](https://dashboard.stripe.com/test/products/create) page and create two products. Add one price for each product, each with a monthly recurring billing period:\n\n*   Premium product: Premium service with extra features\n    \n    *   Price: Standard pricing | 15 EUR\n*   Basic product: Basic service with minimum features\n    \n    *   Price: Standard pricing | 5 EUR\n\nAfter you create the prices, record the price IDs so you can use them in other steps. Price IDs look like this: `price_G0FvDp6vZvdwRZ`.\n\nWhen you’re ready, use the **Copy to live mode** button at the top right of the page to clone your product from [test mode to live mode](https://docs.stripe.com/keys#test-live-modes).\n\nFor other pricing models, see [Billing examples](https://docs.stripe.com/products-prices/pricing-models).\n\n[](#create-checkout-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Session with the ID of an existing [Price](https://docs.stripe.com/api/prices \"Prices\"). Make sure that the mode is set to `subscription` and that you pass at least one recurring price. You can add one-time prices in addition to recurring prices. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen creating a Session, you can specify `payment_method_types` or have Stripe automatically pick payment methods based on your [Dashboard](https://dashboard.stripe.com/settings/payment_methods) settings. If you don’t specify `payment_method_types`, you must turn on Sofort recurring payments in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). This enables SEPA Direct Debit for recurring Sofort payments only, but doesn’t turn on SEPA Direct Debit payments as a stand alone payment method.\n\nWhen your customer successfully completes their payment, they’re redirected to the `success_url`, a page on your website that informs the customer that their payment was successful. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without completing a payment, Checkout redirects them back to your website by navigating to the `cancel_url`. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nCheckout Sessions expire 24 hours after creation.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[](#payment-success)\n\nWhen your customer completes a payment, Stripe redirects them to the URL that you specified in the `success_url` parameter. Typically, this is a page on your website that informs your customer that their payment is successful.\n\nSofort is a delayed notification payment method, which means that funds aren’t immediately available. A Sofort payment takes up to 14 business days to make the funds available. Because of this possibility, you might want to delay order fulfillment until the funds are available. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") status changes from `processing` to `succeeded`.\n\nStripe recommends fulfilling orders during the `processing` state. On average, approximately 0.2% of Sofort payments fail after entering the `processing` state.\n\nThere are several ways you can confirm the payment is successful:\n\nSuccessful payments appear in the Dashboard’s [list of payments](https://dashboard.stripe.com/payments). Click a payment to open the payment detail page. The **Checkout summary** section contains billing information and the list of items purchased, which you can use to manually fulfill the order.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/source.16d3029596357c80a8efdbbfe106108a.png)\n\n#### Note\n\nStripe can help you keep up with incoming payments by sending you email notifications whenever a customer successfully completes one. Use the Dashboard to [configure email notifications](https://dashboard.stripe.com/settings/user).\n\n[](#testing)\n\nUsing your [test API keys](https://docs.stripe.com/keys#test-live-modes), select Sofort as the payment method and click the **Subscribe** button. After confirming, you’re redirected to a test page with options to authorize or fail the payment. Sofort payments remain pending for 3 minutes in test mode.\n\n*   Click **Authorize test payment** to test the case when the setup is successful.\n*   Click **Fail test payment** to test the case when the customer fails to authenticate.",
    "title": "Set up a subscription with Sofort and SEPA Direct Debit | Stripe Documentation",
    "description": "Use Stripe Billing to set up recurring payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/checkout/embedded/quickstart",
    "markdown": "Embedded form | Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\nQuickstart (Embedded form)\n\n[\n\nCreate account\n\n\n\n](https://dashboard.stripe.com/register)or[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fcheckout%2Fembedded%2Fquickstart)\n\n[\n\n](/)\n\nSearch the docs or ask a question\n\n/\n\n[Create account](https://dashboard.stripe.com/register)\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fcheckout%2Fembedded%2Fquickstart)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](/development)\n\n[\n\nNo-code\n\n\n\n](/no-code)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](/development)\n\nAPIs & SDKs\n\nHelp\n\n[Overview](/payments)\n\nAccept a payment\n\nAbout Stripe payments\n\n[Upgrade your integration](/payments/upgrades \"Improve your existing integration\")\n\nStart an integration\n\nPayment Links\n\nCheckout\n\n[Overview](/payments/checkout)\n\n[How Checkout works](/payments/checkout/how-checkout-works)\n\n[Quickstart (Stripe-hosted page)](/checkout/quickstart \"Quickstart\")\n\nQuickstart (Embedded form)\n\n[Fulfillment](/checkout/fulfillment)\n\n[Migrate payment methods to the Dashboard](/payments/dashboard-payment-methods)\n\n[Migrate from legacy Checkout](/payments/checkout/migration)\n\n[Migrate Checkout to use Prices](/payments/checkout/migrating-prices)\n\nCustomize your integration\n\n[Customize Checkout](/payments/checkout/customization)\n\n[Font compatibility](/payments/checkout/customization/font-compatibility)\n\n[Use your custom domain](/payments/checkout/custom-domains)\n\n[Customize redirect behavior (Embedded form)](/payments/checkout/custom-redirect-behavior)\n\n[Customize redirect behavior (Stripe-hosted page)](/payments/checkout/custom-success-page)\n\n[Collect taxes](/payments/checkout/taxes)\n\n[Collect tax IDs](/tax/checkout/tax-ids)\n\n[Collect phone numbers](/payments/checkout/phone-numbers)\n\n[Make line item quantities adjustable](/payments/checkout/adjustable-quantity)\n\n[Add custom fields](/payments/checkout/custom-fields)\n\n[Let customers decide what to pay](/payments/checkout/pay-what-you-want)\n\n[Limit customers to one subscription](/payments/checkout/limit-subscriptions)\n\n[Let customers complete orders for free](/payments/checkout/no-cost-orders)\n\nBoost revenue\n\n[Let customers pay in their local currency](/payments/checkout/adaptive-pricing)\n\n[Configure subscription upsells](/payments/checkout/upsells)\n\n[Configure cross-sells](/payments/checkout/cross-sells)\n\n[Recover abandoned carts](/payments/checkout/abandoned-carts)\n\n[Collect consent for promotional emails](/payments/checkout/promotional-emails-consent)\n\n[Analyze conversion funnel](/payments/checkout/analyze-conversion-funnel)\n\nAdditional features\n\n[Add discounts](/payments/checkout/discounts)\n\n[Start a free trial without collecting payment details](/payments/checkout/free-trials)\n\n[Set billing cycle date](/payments/checkout/billing-cycle)\n\n[Manage limited inventory](/payments/checkout/managing-limited-inventory)\n\n[Guest customers](/payments/checkout/guest-customers)\n\n[Customize payment method reuse agreement](/payments/checkout/customize-payment-method-reuse-agreement)\n\nWeb Elements\n\nMobile Elements\n\nPayment scenarios\n\nDuring the payment\n\nAfter the payment\n\nAdd payment methods\n\nMore payment scenarios\n\nFaster checkout with Link\n\nOther Stripe products\n\nConnect\n\nTerminal\n\nFinancial Connections\n\nCrypto\n\nClimate\n\nCustom Checkout\n\nUnited States\n\nEnglish (United States)",
    "title": "Embedded form | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/dashboard-payment-methods",
    "markdown": "# Migrate payment methods to the Dashboard\n\n## Turn on different Checkout payment methods through the Dashboard.\n\nMigrate your Checkout payment methods to Dashboard settings by following this guide. By changing your integration to pull your payment method preferences from the Dashboard, Stripe displays all compatible payment methods to your customers when checking out depending on the chosen currency or any payment method restrictions like maximum transaction amounts. Stripe also presents the most relevant payment methods for each customer based on their location and currency used. The checkout page prioritizes showing payment methods known to increase conversion for your customer’s location while lower priority payment methods are hidden beneath an overflow menu.\n\nYour customers see multiple payment methods at check out that are popular for their location and currency. But, they still have the option to choose a different payment method from the overflow menu.\n\n[](#update)\n\n#### Note\n\nIf you have an existing integration with Stripe Checkout, you must change one line of code in your integration to begin migrating payment methods to the Dashboard.\n\n#### Warning\n\nUpgrading your integration initially turns off any non-default payment methods for your integration, like bank redirects. If you added payment methods to your Checkout integration, you must go to the payment methods settings page in the Dashboard to turn them back on.\n\nPreviously, you used the `payment_method_types` parameter when defining your Checkout session to accept different payment methods. To begin managing your payment methods in the Dashboard, remove this parameter from your integration.\n\nAfter you remove the `payment_method_types` parameter from your integration, some payment methods turn on automatically including cards and wallets. The `currency` parameter restricts the payment methods that are shown to the customer during the checkout session.\n\n`Stripe::Checkout::Session.create({ mode: 'payment', # Remove the payment_method_types parameter # to manage payment methods in the Dashboard payment_method_types: ['card'], line_items: [{   price_data: {   # The currency parameter determines which   # payment methods are used in the Checkout Session.     currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })`\n\n[](#view-dash)\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) to see the payment methods that you currently accept. This list includes the payment methods turned on by default, like cards. These payment methods cost the same or less than cards and settle immediately.\n\nTo see how your payment methods appear to customers, enter a transaction ID or set an order amount and currency in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods/review).\n\n[](#add-remove)\n\nOn the payment methods settings Dashboard page, you can view the available payment methods and turn on new payment methods for your integration.\n\nYou can enable some payment methods just by selecting **Turn on**. However, some payment methods require additional steps to turn them on. For those cases, you’ll see a button that says **Set up** or **Review terms**.\n\nTo learn more about which payment methods are right for your business, see our [payment methods guide](https://stripe.com/payments/payment-methods-guide).\n\n[](#delayed-notifications)\n\nDepending on the type of payment method you integrate, there can be a 2-14 day delay in payment confirmation. If you set up [webhooks](https://docs.stripe.com/webhooks \"webhook\") to [automatically fulfill](https://docs.stripe.com/checkout/fulfillment#create-payment-event-handler) orders with your Checkout integration, when you add your first delayed notification payment methods, you might need to update your code.\n\n#### Caution\n\nWhen receiving payments with a delayed notification payment method, funds aren’t immediately available. It can take multiple days for funds to process so you should delay order fulfillment until the funds are available in your account. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") status changes from `processing` to `succeeded`.\n\nYou’ll need to handle the following Checkout events:\n\nThese events all include the [Checkout Session](https://docs.stripe.com/api/checkout/sessions) object.\n\nUpdate your event handler to fulfill the order:\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``# You can find your endpoint's secret in the output of the `stripe listen` # command you ran earlier endpoint_secret = 'whsec_...'  post '/webhook' do   event = nil    # Verify webhook signature and extract the event   # See [https://stripe.com/docs/webhooks#verify-events](https://stripe.com/docs/webhooks#verify-events) for more information.   begin     sig_header = request.env['HTTP_STRIPE_SIGNATURE']     payload = request.body.read     event = Stripe::Webhook.construct_event(payload, sig_header, endpoint_secret)   rescue JSON::ParserError => e     # Invalid payload     return status 400   rescue Stripe::SignatureVerificationError => e     # Invalid signature     return status 400   end    case event['type']   if event['type'] == 'checkout.session.completed'     checkout_session = event['data']['object']      fulfill_order(checkout_session)   end   when 'checkout.session.completed'     checkout_session = event['data']['object']      # Save an order in your database, marked as 'awaiting payment'     create_order(checkout_session)      # Check if the order is already paid (for example, from a card payment)     #     # A delayed notification payment will have an `unpaid` status, as     # you're still waiting for funds to be transferred from the customer's     # account.     if checkout_session.payment_status == 'paid'       fulfill_order(checkout_session)     end   when 'checkout.session.async_payment_succeeded'     checkout_session = event['data']['object']      # Fulfill the purchase...     fulfill_order(checkout_session)   when 'checkout.session.async_payment_failed'     session = event['data']['object']      # Send an email to the customer asking them to retry their order     email_customer_about_failed_payment(checkout_session)   end    status 200 end  def fulfill_order(checkout_session)   # TODO: fill in with your own logic   puts \"Fulfilling order for #{checkout_session.inspect}\" end  def create_order(checkout_session)   # TODO: fill in with your own logic   puts \"Creating order for #{checkout_session.inspect}\" end  def email_customer_about_failed_payment(checkout_session)   # TODO: fill in with your own logic   puts \"Emailing customer about payment failure for: #{checkout_session.inspect}\" end``\n\n### Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEnsure that `stripe listen` is still running. Go through Checkout as a test user, like you did in the prior steps. Your event handler should receive a `checkout.session.completed` event, and you should have successfully handled it.\n\nNow that you’ve completed these steps, you’re ready to go live in production whenever you decide to do so.\n\n[](#testing)\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.",
    "title": "Migrate payment methods to the Dashboard | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/migrating-prices",
    "markdown": "# Checkout prices migration guide | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to update your integration to use prices with Stripe Checkout.\n\nThe [Prices API](https://docs.stripe.com/api/prices) adds new features and flexibility to how you charge customers. This new integration offers:\n\n*   More unified modeling for Checkout items—instead of plans, [SKUs](https://docs.stripe.com/api/skus \"SKU\"), and inline line items, every item is now a _price_.\n*   The ability to render product images for recurring items.\n\nFor the client and server integration, the Prices API unlocks the ability to:\n\n*   Create a reusable product and price catalog instead of one-time line items\n*   Create inline pricing for [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\")\n*   Apply dynamic tax rates to [subscriptions](https://docs.stripe.com/billing/taxes/collect-taxes?tax-calculation=tax-rates#adding-tax-rates-to-checkout) and [one-time payments](https://docs.stripe.com/payments/checkout/taxes)\n\nDon’t want to migrate? You can continue to [use your current integration](https://support.stripe.com/questions/prices-api-and-existing-checkout-integrations), but new features are not supported. Any new plans or recurring prices you create can be used in the `plan` parameter of your existing API calls.\n\n## Products and prices overview ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Prices](https://docs.stripe.com/api/prices \"Prices\") are a new, core entity within Stripe that works with subscriptions, [invoices](https://docs.stripe.com/api/invoices \"invoices\"), and Checkout. Each price is tied to a single [Product](https://docs.stripe.com/api/products \"Products\"), and each product can have multiple prices. Different physical goods or levels of service should be represented by products. Pricing of that product should be represented by prices.\n\nPrices define the base price, currency, and—for recurring products—the billing cycle. This allows you to change and add prices without needing to change the details of what you offer. For example, you might have a single “gold” product that has prices for 10 USD/month, 100 USD/year, 9 EUR/month, and 90 EUR/year. Or you might have a blue t-shirt with 20 USD and 15 EUR prices.\n\nPlans and SKUs (client-only) may be used with the new integration wherever Prices are accepted. You can either create a product and price [through the API](https://docs.stripe.com/api/prices) or through the [Dashboard](https://dashboard.stripe.com/products).\n\n## One-time payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe client and server integration has the following changes for one-time payments:\n\n*   Instead of ad-hoc line items (that is, setting the name, amount, and currency), creating a Checkout Session requires creating a [product](https://docs.stripe.com/api/products \"Products\") and, usually, a [price](https://docs.stripe.com/api/prices \"Prices\").\n*   [mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-mode) is now required.\n\nThe client-side code remains the same.\n\n### Mapping table ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInstead of defining each field on `line_items`, Checkout uses the underlying product and price objects to determine name, description, amount, currency, and images. You can [create products and prices](https://docs.stripe.com/payments/accept-a-payment) with the API or Dashboard.\n\n| Without prices | With prices |\n| --- | --- |\n| `line_items.name` | `product.name` |\n| `line_items.description` | `product.description` |\n| `line_items.amount` | *   `price.unit_amount`<br>*   `price_data.unit_amount` (if defined when the Checkout Session is created) |\n| `line_items.currency` | *   `price.currency`<br>*   `price_data.currency` (if defined when the Checkout Session is created) |\n| `line_items.images` | `product.images` (displays the first image supplied) |\n\n### Server-side code for inline items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPreviously, you could only create one-time items inline. With prices, you can continue to configure your items inline, but you can also define your prices dynamically with [price\\_data](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data) when you create the Checkout Session.\n\nWhen you create the Checkout Session with `price_data`, reference an existing product ID with [price\\_data.product](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data-product), or define your product details dynamically using [price\\_data.product\\_data](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data-product_data). The following example demonstrates the flow for creating a one-time item.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"line_items[0][quantity]\"=1 \\   -d \"line_items[0][amount]\"=2000 \\   -d \"line_items[0][name]\"=T-shirt \\   -d \"line_items[0][description]\"=\"Comfortable cotton t-shirt\" \\   -d \"line_items[0][images][]\"=\"[https://example.com/t-shirt.png](https://example.com/t-shirt.png)\" \\   -d \"line_items[0][currency]\"=usd \\   -d \"line_items[0][price_data][unit_amount]\"=2000 \\   -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\   -d \"line_items[0][price_data][product_data][description]\"=\"Comfortable cotton t-shirt\" \\   -d \"line_items[0][price_data][product_data][images][]\"=\"[https://example.com/t-shirt.png](https://example.com/t-shirt.png)\" \\   -d \"line_items[0][price_data][currency]\"=usd \\   -d mode=payment \\   -d success_url=\"[https://example.com/success](https://example.com/success)\" \\   -d cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n### Server-side code for one-time prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith this new integration, you can [create a product and price catalog](https://docs.stripe.com/payments/accept-a-payment) upfront instead of needing to define the amount, currency, and name each time you create a Checkout Session.\n\nYou can either create a product and price with the [Prices API](https://docs.stripe.com/api/prices) or through the [Dashboard](https://dashboard.stripe.com/products). You will need the price ID to create the Checkout Session. The following example demonstrates how to create a product and price through API:\n\n`curl https://api.stripe.com/v1/products \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d name=T-shirt \\   -d description=\"Comfortable cotton t-shirt\" \\   -d \"images[]\"=\"https://example.com/t-shirt.png\" curl https://api.stripe.com/v1/prices \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d product=\"{{PRODUCT_ID}}\" \\   -d unit_amount=2000 \\   -d currency=usd curl https://api.stripe.com/v1/checkout/sessions \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"line_items[0][quantity]\"=1 \\   -d \"line_items[0][amount]\"=2000 \\   -d \"line_items[0][name]\"=T-shirt \\   -d \"line_items[0][description]\"=\"Comfortable cotton t-shirt\" \\   -d \"line_items[0][images][]\"=\"[https://example.com/t-shirt.png](https://example.com/t-shirt.png)\" \\   -d \"line_items[0][currency]\"=usd \\   -d \"line_items[0][price]\"=\"{{PRICE_ID}}\" \\   -d mode=payment \\   -d success_url=\"[https://example.com/success](https://example.com/success)\" \\   -d cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n## Subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe client and server integration has the following changes for recurring payments:\n\n*   All items are passed into a single [line\\_items](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items) field, instead of `subscription_data.items`.\n*   [mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-mode) is now required. Set `mode=subscription` if the session includes any recurring items.\n\nThe client-side code remains the same. Existing plans can be used wherever recurring prices are accepted.\n\n### Server-side code with plans ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nHere is a before and after example of creating a Checkout Session with a trial and using an existing plan, which can be used interchangeably with a price. The plan is now passed into `line_items` instead of `subscription_data.items`.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"subscription_data[items][][plan]\"=\"{{PRICE_OR_PLAN_ID}}\" \\   -d \"line_items[0][price]\"=\"{{PRICE_OR_PLAN_ID}}\" \\   -d \"line_items[0][quantity]\"=1 \\   -d mode=subscription \\   -d success_url=\"[https://example.com/success](https://example.com/success)\" \\   -d cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n### Server-side code for recurring price with setup fee![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have recurring plans with a one-time setup fee, create the product and price representing the one-time fee before creating the Checkout Session. See the [mapping table](#mapping-table-server-one-time) for how the old `line_items` fields map to the new integration. You can either create a product and price through the [Prices API](https://docs.stripe.com/api/prices) or through the [Stripe Dashboard](https://dashboard.stripe.com/products). You can also [create the one-time item inline](https://docs.stripe.com/payments/checkout/migrating-prices#server-side-code-for-inline-items). The following example uses an existing price ID:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"line_items[0][quantity]\"=1 \\   -d \"line_items[0][amount]\"=2000 \\   -d \"line_items[0][name]\"=T-shirt \\   -d \"line_items[0][description]\"=\"Comfortable cotton t-shirt\" \\   -d \"line_items[0][images][]\"=\"https://example.com/t-shirt.png\" \\   -d \"line_items[0][currency]\"=usd \\   -d \"subscription_data[items][][plan]\"=\"{{PLAN_ID}}\" \\   -d \"line_items[0][price]\"=\"{{PRICE_OR_PLAN_ID}}\" \\   -d \"line_items[0][quantity]\"=1 \\   -d \"line_items[1][price]\"=\"{{ONE_TIME_PRICE_ID}}\" \\   -d \"line_items[1][quantity]\"=1 \\   -d mode=subscription \\   -d success_url=\"[https://example.com/success](https://example.com/success)\" \\   -d cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n## Response object changes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInstead of listing items with `display_items`, the Checkout Session object uses `line_items`. The `line_items` field does not render by default as `display_items` did, but you can include it using [expand](https://docs.stripe.com/api/expanding_objects) when creating a Checkout Session:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"payment_method_types[]\"=\"card\" \\   -d \"mode\"=\"payment\" \\   -d \"line_items[0][price]\"=\"{{PRICE_ID}}\" \\   -d \"line_items[0][quantity]\"=1 \\   -d \"success_url\"=\"[https://example.com/success](https://example.com/success)\" \\   -d \"cancel_url\"=\"[https://example.com/cancel](https://example.com/cancel)\" \\   -d \"expand[]\"=\"line_items\"`\n\n## Webhook changes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSince `line_items` is includable, the `checkout.session.completed` [webhook](https://docs.stripe.com/webhooks \"webhook\") response no longer list items by default. The smaller response object enables you to receive your Checkout webhooks faster. You can retrieve items with the new `line_items` endpoint:\n\n`curl https://api.stripe.com/v1/checkout/sessions/{{CHECKOUT_SESSION_ID}}/line_items \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\nFor more details, see [fulfilling orders with Checkout](https://docs.stripe.com/checkout/fulfillment).",
    "title": "Checkout prices migration guide | Stripe Documentation",
    "description": "Learn how to update your integration to use prices with Stripe Checkout.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/custom-redirect-behavior",
    "markdown": "# Customize redirect behavior with an embedded form\n\n## For embedded forms, redirect your customers to a return page or prompt them to retry.\n\nIf you have a Checkout integration that uses an embedded form, you can customize how and whether Stripe redirects your customers after they complete payment. You can have Stripe always redirect customers, only redirect for some payment methods, or completely disable redirects.\n\n#### Common mistake\n\nIf you’ve integrated with a Stripe-hosted payment page, you can’t use the `return_url` parameter. You must use `success_url`. Learn more about [customizing a success page](https://docs.stripe.com/payments/checkout/custom-success-page) for integrations with a Stripe-hosted page.\n\nTo set up redirects, specify the return page in the `return_url` [parameter](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-return_url).\n\nYou can also optionally:\n\n*   [Only redirect customers if the payment method requires it](#redirect-if-required) (for example, a bank authorization page for a debit-based method).\n*   Not use a return page and [disable redirect-based payment methods](#disable-redirects).\n\n## Redirect customers to a return page ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you create the [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you specify the URL of the return page in the `return_url` [parameter](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-return_url). Include the `{CHECKOUT_SESSION_ID}` template variable in the URL. When Checkout redirects a customer, it replaces the variable with the actual Checkout Session ID.\n\nWhen rendering your return page, retrieve the Checkout Session status using the Checkout Session ID in the URL. Handle the result according to the session status as follows:\n\n*   `complete`: The payment succeeded. Use the information from the Checkout Session to render a success page.\n*   `open`: The payment failed or was canceled. Remount Checkout so that your customer can try again.\n\n`app.get('/session_status', async (req, res) => {   const session = await stripe.checkout.sessions.retrieve(req.query.session_id);   const customer = await stripe.customers.retrieve(session.customer);    res.send({     status: session.status,     payment_status: session.payment_status,     customer_email: customer.email   }); });`\n\n``const session = await fetch(`/session_status?session_id=${session_id}`) if (session.status == 'open') {   // Remount embedded Checkout else if (session.status == 'complete') {   // Show success page   // Optionally use session.payment_status or session.customer_email   // to customize the success page }``\n\n## Redirect-based payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring payment, some payment methods redirect the customer to an intermediate page, such as a bank authorization page. When they complete that page, Stripe redirects them to your return page.\n\n### Only redirect for redirect-based payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you don’t want to redirect customers after payments that don’t require a redirect, set [redirect\\_on\\_completion](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-redirect_on_completion) to `if_required`. That redirects only customers who check out with redirect-based payment methods.\n\nFor card payments, Checkout renders a default success state instead of redirecting. To use your own success state, pass an [onComplete](https://docs.stripe.com/js/embedded_checkout/init#embedded_checkout_init-options-onComplete) callback that destroys the Checkout instance and renders your custom success state.\n\n`onComplete` is called when the Checkout Session completes successfully, or when the [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) webhook event is sent.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``);  initialize();  async function initialize() {   const fetchClientSecret = async () => {     const response = await fetch(\"/create-checkout-session\", {       method: \"POST\",     });     const { clientSecret } = await response.json();     return clientSecret;   };    // Example `onComplete` callback   const handleComplete = async function() {     // Destroy Checkout instance     checkout.destroy()      // Retrieve details from server (which loads Checkout Session)     const details = await retrievePurchaseDetails();      // Show custom purchase summary     showPurchaseSummary(details);   }    const checkout = await stripe.initEmbeddedCheckout({     fetchClientSecret,     onComplete: handleComplete   });    checkout.mount('#checkout'); }``\n\n### Disable redirect-based payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you don’t want to create a return page, create your Checkout Session with [redirect\\_on\\_completion](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-redirect_on_completion) set to `never`.\n\nThis disables redirect-based payment methods:\n\n*   If you use [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), you can still manage payment methods from the Dashboard, but payment methods that require redirects aren’t eligible.\n*   If you manually specify payment methods with [payment\\_method\\_types](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-payment_method_types), you can’t include any redirect-based payment methods.\n\nSetting `redirect_on_completion: never` removes the `return_url` requirement. For these sessions, Checkout renders a default success state instead of redirecting. You can use your own success state by passing an [onComplete](https://docs.stripe.com/js/embedded_checkout/init#embedded_checkout_init-options-onComplete) callback which destroys the Checkout instance and renders your custom success state.\n\n`onComplete` is called when the Checkout Session completes successfully, or when the [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) webhook event is sent.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``);  initialize();  async function initialize() {   const fetchClientSecret = async () => {     const response = await fetch(\"/create-checkout-session\", {       method: \"POST\",     });     const { clientSecret } = await response.json();     return clientSecret;   };    // Example `onComplete` callback   const handleComplete = async function() {     // Destroy Checkout instance     checkout.destroy()      // Retrieve details from server (which loads Checkout Session)     const details = await retrievePurchaseDetails();      // Show custom purchase summary     showPurchaseSummary(details);   }    const checkout = await stripe.initEmbeddedCheckout({     fetchClientSecret,     onComplete: handleComplete   });    checkout.mount('#checkout'); }``",
    "title": "Customize redirect behavior with an embedded form | Stripe Documentation",
    "description": "For embedded forms, redirect your customers to a return page or prompt them to retry.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/custom-fields",
    "markdown": "# Add custom fields | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to add additional fields to a prebuilt payment page with Checkout.\n\n#### Caution\n\nDon’t use custom fields to collect personal, protected, or sensitive data, or information restricted by law.\n\nYou can add custom fields on the payment form to collect additional information from your customers. The information is available after the payment is complete and is useful for fulfilling the purchase.\n\n### Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Up to three fields allowed.\n*   Not available in `setup` mode.\n*   Support for up to 255 characters on text fields.\n*   Support for up to 255 digits on numeric fields.\n*   Support for up to 200 options on dropdown fields.\n\n[](#create-session)\n\nCreate a Checkout Session while specifying an array of [custom fields](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-custom_fields). Each field must have a unique `key` that your integration uses to reconcile the field. Also provide a label for the field that you display to your customer. Labels for custom fields aren’t translated, but you can use the [locale](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-locale) parameter to set the language of your Checkout Session to match the same language as your labels.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d \"custom_fields[0][key]\"=engraving \\  -d \"custom_fields[0][label][type]\"=custom \\  -d \"custom_fields[0][label][custom]\"=\"Personalized engraving\" \\  -d \"custom_fields[0][type]\"=text`\n\n![A checkout page with custom fields](https://b.stripecdn.com/docs-statics-srv/assets/required.b8a7aedd127b6e37c710488ad4478ddc.png)\n\n[](#retrieve-fields)\n\nWhen your customer completes the Checkout Session, we send a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) [webhook](https://docs.stripe.com/webhooks \"webhook\") with the completed fields.\n\nExample `checkout.session.completed` payload:\n\n`{   \"id\": \"evt_1Ep24XHssDVaQm2PpwS19Yt0\",   \"object\": \"event\",   \"api_version\": \"2022-11-15\",   \"created\": 1664928000,   \"data\": {     \"object\": {       \"id\": \"cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\",       \"object\": \"checkout.session\",       \"custom_fields\": [{         \"key\": \"engraving\",         \"label\": {           \"type\": \"custom\",           \"custom\": \"Personalized engraving\"         },         \"optional\": false,         \"type\": \"text\",         \"text\": {           \"value\": \"Jane\",         }       }],       \"mode\": \"payment\",     }   },   \"livemode\": false,   \"pending_webhooks\": 1,   \"request\": {     \"id\": null,     \"idempotency_key\": null   },   \"type\": \"checkout.session.completed\" }`",
    "title": "Add custom fields | Stripe Documentation",
    "description": "Learn how to add additional fields to a prebuilt payment page with Checkout.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/phone-numbers",
    "markdown": "# Collect customer phone numbers with Checkout\n\nTo enable phone number collection, set [`phone_number_collection[enabled]`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-phone_number_collection-enabled) to `true` when creating a Checkout session.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][unit_amount]\"=1000 \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][currency]\"=eur \\  -d \"line_items[0][quantity]\"=2 \\  -d \"phone_number_collection[enabled]\"=true \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n#### Note\n\nThe above code example creates a Session in `payment` mode with phone number collection enabled. To enable phone number collection in `subscription` mode, make the same changes highlighted in green to your `subscription` mode Session creation request.\n\nWith phone number collection enabled, Checkout adds a _required_ phone number field to the payment form. If you’re collecting a shipping address, the phone number field displays under the address fields. Otherwise, Checkout displays the phone number field below the email input. Customers can only enter one phone number per session.",
    "title": "Collect customer phone numbers with Checkout | Stripe Documentation",
    "description": "Learn how to collect phone numbers with Checkout.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/adjustable-quantity",
    "markdown": "# Make line item quantities adjustable\n\n## Configure the Checkout Session so customers can adjust line item quantity during checkout.\n\n## Create a Checkout Session with `adjustable_quantity` enabled ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSet `adjustable_quantity` on your `line_items` when creating a Checkout Session to enable your customers to update the quantity of an item during checkout.\n\nYou can customize the default settings for the minimum and maximum quantities allowed by setting `adjustable_quantity.minimum` and `adjustable_quantity.maximum`. By default, an item’s minimum adjustable quantity is `0` and the maximum adjustable quantity is `99`. You can specify a value of up to `999999` for `adjustable_quantity.maximum`.\n\nWhen using adjustable quantities with a `line_items[].quantity` value greater than `99` (the default adjustable maximum), set `adjustable_quantity.maximum` to be greater than or equal to that item’s quantity.\n\nIf you use adjustable quantities, change your configuration so that it uses `adjustable_quantity.maximum` when creating the Checkout Session to reserve inventory quantity instead of the `line_items` quantity.\n\nCheckout prevents the customer from removing an item if it is the only item remaining.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][unit_amount]\"=2000 \\  -d \"line_items[0][price_data][tax_behavior]\"=exclusive \\  -d \"line_items[0][adjustable_quantity][enabled]\"=true \\  -d \"line_items[0][adjustable_quantity][minimum]\"=1 \\  -d \"line_items[0][adjustable_quantity][maximum]\"=10 \\  -d \"line_items[0][quantity]\"=1 \\  -d \"automatic_tax[enabled]\"=true \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n## Handling completed transactions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter the payment completes, you can make a request for the finalized [line items](https://docs.stripe.com/api/checkout/sessions/line_items) and their quantities. If your customer removes a line item, it is also removed from the line items response. See the [Fulfillment guide](https://docs.stripe.com/checkout/fulfillment) to learn how to create an event handler to handle completed Checkout Sessions.\n\n#### Note\n\n`# Set your secret key. Remember to switch to your live secret key in production! # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`\"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"`\n\n``require 'sinatra'  # You can find your endpoint's secret in your webhook settings endpoint_secret = 'whsec_...'  post '/webhook' do   event = nil    # Verify webhook signature and extract the event   # See [https://stripe.com/docs/webhooks#verify-events](https://stripe.com/docs/webhooks#verify-events) for more information.   begin     sig_header = request.env['HTTP_STRIPE_SIGNATURE']     payload = request.body.read     event = Stripe::Webhook.construct_event(payload, sig_header, endpoint_secret)   rescue JSON::ParserError => e     # Invalid payload     return status 400   rescue Stripe::SignatureVerificationError => e     # Invalid signature     return status 400   end    if event['type'] == 'checkout.session.completed'     checkout_session = event['data']['object']      line_items = Stripe::Checkout::Session.list_line_items(checkout_session['id'], {limit: 100})      # Fulfill the purchase...     begin       fulfill_order(checkout_session, line_items)     rescue NotImplementedError => e       return status 400     end   end    status 200 end  def fulfill_order(checkout_session, line_items)   # TODO: Remove error and implement...   raise NotImplementedError.new(<<~MSG)     Given the Checkout Session \"#{checkout_session.id}\" load your internal order from the database here.     Then you can reconcile your order's quantities with the final line item quantity purchased. You can use `checkout_session.metadata` and `price.metadata` to store and later reference your internal order and item ids.   MSG end``",
    "title": "Make line item quantities adjustable | Stripe Documentation",
    "description": "Configure the Checkout Session so customers can adjust line item quantity during checkout.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/analyze-conversion-funnel",
    "markdown": "# Analyze your conversion funnel | Stripe DocumentationThe Stripe Docs logo\n\n`// This example sets up endpoints using the Express framework. // Watch this video to get started: [https://youtu.be/rPR2aJ6XnAc.](https://youtu.be/rPR2aJ6XnAc)  const express = require(\"express\"); require(\"dotenv\").config();  const app = express();  // Set your secret key. Remember to switch to your live key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)  const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``);  const request = require(\"request\");  app.post(   \"/create-checkout-session\",   express.urlencoded({ extended: false }),   async (req, res) => {     const session = await stripe.checkout.sessions.create({       payment_method_types: [\"card\"],       line_items: [         {           price_data: {             currency: \"usd\",             product_data: {               name: \"T-shirt\",             },             unit_amount: 2000,           },           quantity: 1,         },       ],       mode: \"payment\",       success_url: req.get(\"origin\") + \"/success\",       cancel_url: req.get(\"origin\") + \"/cancel\",     });      res.json({ url: session.url });   } );  app.get(\"/product\", function (req, res) {   res.sendFile(__dirname + \"/product.html\"); });  app.get(\"/success\", function (req, res) {   res.sendFile(__dirname + \"/success.html\"); });  app.get(\"/cancel\", function (req, res) {   res.sendFile(__dirname + \"/cancel.html\"); });  app.listen(4242, () => console.log(`Listening on port ${4242}!`));``",
    "title": "Analyze your conversion funnel | Stripe Documentation",
    "description": "Analyze your Stripe Checkout conversion funnel with Google Analytics 4.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/no-cost-orders",
    "markdown": "# No-cost orders | Stripe DocumentationThe Stripe Docs logo\n\n## Accept orders for no-cost line items, and apply 100% off discounts in payment mode.\n\nWith Checkout, you can process no-cost orders for one-time payments. Use free line items or discounts for 100% off. If the total amount is 0, Checkout doesn’t collect a payment method from the customer.\n\n#### Note\n\nTo process no-cost orders using the Checkout API, make sure you’re on API version [2023-08-16](https://docs.stripe.com/upgrades#2023-08-16) or later.\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf the `customer` property isn’t set, the Checkout Session automatically creates a new Customer object. This means [guest customers](https://docs.stripe.com/payments/checkout/guest-customers) aren’t supported.\n\n## Create a Checkout Session with no-cost line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a [Price](https://docs.stripe.com/api/prices) with a [unit\\_amount](https://docs.stripe.com/api/prices/object#price_object-unit_amount) of 0, and pass it into the [line items](https://docs.stripe.com/api/checkout/sessions/line_items) array of the Checkout Session. See [Products and prices](https://docs.stripe.com/invoicing/products-prices) for more information on creating prices.\n\nYou can also use the [price\\_data](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data) parameter of the `line_items` array to pass in a free price.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][unit_amount]\"=0 \\  -d \"line_items[0][price_data][product_data][name]\"=\"Free t-shirt\" \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n## Create a discount to allow customers to complete orders for free ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Coupons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate a [Coupon](https://docs.stripe.com/api/coupons) that makes your Checkout Session free. For example, you can create a 100% off coupon.\n\n`curl https://api.stripe.com/v1/coupons \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d percent_off=100 \\  -d duration=once`\n\nTo create a session with an applied discount, pass the [coupon ID](https://docs.stripe.com/api/coupons/object#coupon_object-id) in the `coupon` parameter of the [discounts](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-discounts) array.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][unit_amount]\"=2000 \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][quantity]\"=1 \\  -d \"discounts[0][coupon]\"={{COUPON_ID}} \\   -d mode=payment \\   --data-urlencode success_url=\"https://example.com/success\" \\   --data-urlencode cancel_url=\"https://example.com/cancel\"`\n\nYou can also create a free Checkout Session by applying a coupon for an amount equal to or exceeding the Checkout Session total.\n\n### Promotion codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPromotion codes are customer-facing codes created on top of coupons. You can share these codes with customers who can enter them into Checkout to apply a discount. Create a promotion code from a 100% off coupon to allow customers to create orders for free.\n\n`curl https://api.stripe.com/v1/promotion_codes \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d coupon={{COUPON_ID}} \\   -d code=FREECODE`\n\nEnable user-redeemable promotion codes using the [allow\\_promotion\\_codes](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-allow_promotion_codes) parameter in a Checkout Session. This enables a field in Checkout to allow users to enter promotion codes.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][unit_amount]\"=2000 \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\  -d allow_promotion_codes=true \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\nCustomers can also check out for free if they apply a promotion code for an amount equal to or exceeding the Checkout Session total.\n\nFor more ways to apply discounts, see [Add discounts](https://docs.stripe.com/payments/checkout/discounts).\n\n## Payment links and pricing tables Optional![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayment links and pricing tables support no-cost orders by default when your account is created after August 17, 2023. For accounts created before August 17, 2023, you can enable no-cost orders for your Payment links and pricing tables by visiting your [Checkout settings](https://dashboard.stripe.com/settings/checkout) in the Dashboard.\n\n#### Caution\n\nWhen you enable this feature, it has a 3-day grace period in which you can turn it off. After 3 days, you can’t disable it. Before you enable it for your live payment links and pricing tables, test it with your fulfillment flow in test mode.\n\nTo use no-cost orders with a payment link in test mode, specify a `prefilled_email` [URL parameter](https://docs.stripe.com/payment-links/customize#customize-checkout-with-url-parameters) with an email whose local part includes the suffix `+no_cost_orders`. For example, \\`j.appleseed+no\\_cost\\_orders@example.com’. The resulting checkout session lets you apply a discount that reduces the order total to zero.\n\nTo use no-cost orders with a pricing table in test mode, set the pricing table’s `customer-email` [property](https://docs.stripe.com/payments/checkout/pricing-table#customer-email) to an email whose local part includes the suffix `+no_cost_orders`. For example, \\`j.appleseed+no\\_cost\\_orders@example.com’. The resulting checkout session lets you apply a discount that reduces the order total to zero.\n\n## Handling completed orders ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter the Checkout Session completes, you can make a request for the finalized [line items](https://docs.stripe.com/api/checkout/sessions/line_items) and their quantities. If your customer removes a line item, it also removes it from the line items response. See the [Fulfillment guide](https://docs.stripe.com/checkout/fulfillment) to learn how to create an event handler to handle completed Checkout Sessions.\n\n#### Common mistake\n\nTo fulfill no-cost orders, make sure to handle the `checkout.session.completed` event rather than [PaymentIntent](https://docs.stripe.com/payments/payment-intents) events. Completed Checkout Sessions that are free won’t have an associated [PaymentIntent](https://docs.stripe.com/payments/payment-intents).\n\nYou can see your completed no-cost orders in the [Dashboard](https://dashboard.stripe.com/no-cost-orders). The no-cost orders tab only appears if you have at least one completed no-cost order.",
    "title": "No-cost orders | Stripe Documentation",
    "description": "Accept orders for no-cost line items, and apply 100% off discounts in payment mode.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/billing-cycle",
    "markdown": "# Set the billing cycle date in Checkout\n\n## Use Stripe Checkout to set a billing cycle date for subscriptions.\n\nYou can explicitly set a subscription’s [billing cycle anchor](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-subscription_data-billing_cycle_anchor) to a fixed date (for example, the 1st of the next month) in Checkout.\n\nThe billing cycle anchor determines the first full invoice date, when customers are billed the full subscription amount. The billing cycle anchor and the recurring interval of its [price](https://docs.stripe.com/products-prices/overview) also determine a subscription’s future billing dates. For example, a monthly subscription created in Checkout on May 15 with an anchor at June 1 is billed on May 15, then always on the 1st of the month.\n\nFor the initial billing period up until the first full invoice date, you can customize how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) with the [proration\\_behavior](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-subscription_data-proration_behavior) parameter. By default, `proration_behavior` is set to **create\\_prorations**, and customers receive a prorated [invoice](https://docs.stripe.com/api/invoices \"invoices\"). If `proration_behavior` is **none**, customers receive the initial period up to the first full invoice date for free.\n\n## Create a Checkout Session with a billing cycle anchor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo configure a billing cycle anchor, set the `subscription_data.billing_cycle_anchor` parameter when you create a Checkout Session in `subscription` mode.\n\nThe anchor must be a future UNIX timestamp before the next natural subscription billing date.\n\nIf the billing cycle anchor is during a session’s active period and a customer attempts payment after it has passed, Checkout displays and charges for the full period starting with the billing cycle anchor instead of the prorated period before the billing cycle anchor.\n\n## Disable prorations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo disable prorations, set the `subscription_data.proration_behavior` parameter to **none** when creating a Checkout Session.\n\nSimilar to a free trial, the initial period up to the billing cycle anchor is free. Unlike a trial, no 0 USD invoice is generated. Customers receive an invoice with the full subscription amount on the billing cycle anchor date.\n\nIn the Checkout Session response object, amounts attached to the [line items](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-line_items) and [total details](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-total_details) are always 0 when prorations are disabled. Additionally, the [payment status](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-payment_status) of the Session is set to `no_payment_required` to reflect that payment is delayed to a future date.\n\n## Current limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   You can’t use trials in Checkout with a billing cycle anchor.\n*   One-time prices can’t be used in Checkout Sessions when `proration_behavior` is **none**.\n*   You can’t apply [`amount_off` coupons](https://docs.stripe.com/api/coupons/create#create_coupon-amount_off) to Checkout Sessions with a default `proration_behavior` of **create\\_prorations**.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Setting the subscription billing cycle date](https://docs.stripe.com/billing/subscriptions/billing-cycle)\n*   [Prorations](https://docs.stripe.com/billing/subscriptions/prorations)\n*   [Create Checkout Session](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session)",
    "title": "Set the billing cycle date in Checkout | Stripe Documentation",
    "description": "Use Stripe Checkout to set a billing cycle date for subscriptions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/managing-limited-inventory",
    "markdown": "# Manage limited inventory with Checkout\n\n## Prevent customers from holding inventory in carts by expiring Checkout sessions.\n\nFor some types of limited-inventory businesses, it’s necessary to prevent customers from reserving items for a long time without completing the purchase. For example, an event ticket seller wants to allow customers only a few minutes to buy their selected tickets before cancelling the sale and making those tickets available again. You can cancel a pending sale by expiring the [Checkout Session](https://docs.stripe.com/api/checkout/sessions \"checkout session\").\n\nWhen a Checkout Session expires, its [status property](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-status) changes to `expired`.\n\nCheckout supports both manual and timed session expiration.\n\n## Manual expiration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo immediately expire an open Checkout Session and cancel any pending purchase, use the [expire](https://docs.stripe.com/api/checkout/sessions/expire) endpoint.\n\n`curl -X POST https://api.stripe.com/v1/checkout/sessions/{{CHECKOUT_SESSION_ID}}/expire \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n## Set an expiration time ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you create a Checkout Session, specify an expiration timestamp by setting the [`expires_at`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-expires_at) parameter. The value must be between 30 minutes and 24 hours after the current time. If you don’t specify `expires_at`, the default value is 24 hours after the current time.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\   -d \"line_items[0][quantity]\"=2 \\   -d customer=  {{CUSTOMER_ID}}   \\   -d mode=payment \\   -d \"success_url\"=\"[https://example.com/success](https://example.com/success)\" \\   -d \"cancel_url\"=\"[https://example.com/cancel](https://example.com/cancel)\" \\   -d \"expires_at\"=\"{{NOW_PLUS_TWO_HOURS}}\"`\n\n## Return items to your inventory ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen a [Checkout Session](https://docs.stripe.com/api/checkout/sessions) expires, it triggers the `checkout.session.expired` event. Configure your webhook endpoint to listen for this event so your webhook handler can return to inventory any items reserved in the expired session. For more information, see [Expire a Session](https://docs.stripe.com/api/checkout/sessions/expire).",
    "title": "Manage limited inventory with Checkout | Stripe Documentation",
    "description": "Prevent customers from holding inventory in carts by expiring Checkout sessions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/taxes/account-tax-ids",
    "markdown": "# Account tax IDs | Stripe DocumentationThe Stripe Docs logo\n\n## Store and render your tax IDs with Stripe Invoicing.\n\nDisplaying your tax IDs on [invoice](https://docs.stripe.com/api/invoices \"invoices\") documents is a common regulatory requirement. With Stripe, you can add up to 25 tax IDs to your account. Both the account and [customer tax IDs](https://docs.stripe.com/invoicing/customer/tax-ids) display in the header of invoice and credit note PDFs.\n\nIn the [Invoice template](https://dashboard.stripe.com/settings/billing/invoice), you can:\n\n*   Select default tax IDs to appear on every invoice and credit note PDF.\n*   Define a list of tax IDs to appear on a specific invoice.\n\n#### Warning\n\nYou can’t add, change, or remove account tax IDs after an invoice is finalized.\n\n## Managing account tax IDs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can add and delete tax IDs using the [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) page in the Dashboard. After you add a tax ID in the Dashboard, you can set it as the default tax ID for every invoice and credit note PDF. Tax IDs are immutable—you can’t change the country and ID after you save the tax ID to your account.\n\nAdditionally, you can add and delete tax IDs with the [create](https://docs.stripe.com/api/tax_ids/create) and [delete](https://docs.stripe.com/api/tax_ids/delete) endpoints.\n\n### Adding and removing IDs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nVisit the [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) page. Click the **Tax** tab and add a new tax ID or remove an existing tax ID:\n\n![Manage tax IDs in the Stripe Dashboard.](https://b.stripecdn.com/docs-statics-srv/assets/manage-add.f10a7efcaf2ce75e42bc986ff3954c0b.png)\n\nManage account tax IDs in the Dashboard\n\n### Setting default tax IDs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn the [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) page, click the **Tax** tab and locate the tax ID you want to set as the default. Click the overflow menu (), select **Set as default**, and click **Save**.\n\n![Set default tax ID in the Stripe Dashboard.](https://b.stripecdn.com/docs-statics-srv/assets/manage-default.c36bf6e90db0825b107b5b6d375396cf.png)\n\nSet default account tax ID in the Dashboard\n\n​​After you set a tax ID as the default, you can see a label in the tax information box:\n\n![A default tax ID in the Stripe Dashboard.](https://b.stripecdn.com/docs-statics-srv/assets/manage-default-set.a1c4d9a7605eabbe0491fb64cf031397.png)\n\nA default account tax ID in the Dashboard\n\n## Displaying tax IDs on invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe automatically pulls your [default tax IDs](#default-tax-ids) during invoice finalization.\n\nTo override the default and display multiple tax IDs on invoices, you can set tax IDs in the Dashboard or by using the API. To learn more about taxes and invoices, see [Taxes](https://docs.stripe.com/invoicing/taxes).\n\nYou can set a list of tax IDs in the Dashboard using the Invoice Editor. ​​You can’t modify account tax IDs after an Invoice has been finalized.\n\nIn the Invoice Editor, scroll down to the **Advanced Options** section. Click the checkboxes to toggle which tax IDs ​​to display on that invoice. To remove tax IDs from the invoice, uncheck the boxes.\n\n![Tax ID invoice settings in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/invoice-editor.1e64187379099e87ac0eb00a4a1c0e15.png)\n\nAdvanced Options section in the Invoice Editor\n\n## Supported tax ID types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCurrently, Stripe Invoicing supports the following tax ID types in the following regions:\n\n| Country | Enum | Description | Example |\n| --- | --- | --- | --- |\n| Andorra | `ad_nrt` | Andorran NRT number | _A-123456-Z_ |\n| Argentina | `ar_cuit` | Argentinian tax ID number | _12-3456789-01_ |\n| Australia | `au_abn` | Australian Business Number (AU ABN) | _12345678912_ |\n| Australia | `au_arn` | Australian Taxation Office Reference Number | _123456789123_ |\n| Austria | `eu_vat` | European VAT number | _ATU12345678_ |\n| Bahrain | `bh_vat` | Bahraini VAT Number | _123456789012345_ |\n| Belgium | `eu_vat` | European VAT number | _BE0123456789_ |\n| Bolivia | `bo_tin` | Bolivian tax ID | _123456789_ |\n| Brazil | `br_cnpj` | Brazilian CNPJ number | _01.234.456/5432-10_ |\n| Brazil | `br_cpf` | Brazilian CPF number | _123.456.789-87_ |\n| Bulgaria | `bg_uic` | Bulgaria Unified Identification Code | _123456789_ |\n| Bulgaria | `eu_vat` | European VAT number | _BG0123456789_ |\n| Canada | `ca_bn` | Canadian BN | _123456789_ |\n| Canada | `ca_gst_hst` | Canadian GST/HST number | _123456789RT0002_ |\n| Canada | `ca_pst_bc` | Canadian PST number (British Columbia) | _PST-1234-5678_ |\n| Canada | `ca_pst_mb` | Canadian PST number (Manitoba) | _123456-7_ |\n| Canada | `ca_pst_sk` | Canadian PST number (Saskatchewan) | _1234567_ |\n| Canada | `ca_qst` | Canadian QST number (Québec) | _1234567890TQ1234_ |\n| Chile | `cl_tin` | Chilean TIN | _12.345.678-K_ |\n| China | `cn_tin` | Chinese tax ID | _123456789012345678_ |\n| Colombia | `co_nit` | Colombian NIT number | _123.456.789-0_ |\n| Costa Rica | `cr_tin` | Costa Rican tax ID | _1-234-567890_ |\n| Croatia | `eu_vat` | European VAT number | _HR12345678912_ |\n| Cyprus | `eu_vat` | European VAT number | _CY12345678Z_ |\n| Czech Republic | `eu_vat` | European VAT number | _CZ1234567890_ |\n| Denmark | `eu_vat` | European VAT number | _DK12345678_ |\n| Dominican Republic | `do_rcn` | Dominican RCN number | _123-4567890-1_ |\n| Ecuador | `ec_ruc` | Ecuadorian RUC number | _1234567890001_ |\n| Egypt | `eg_tin` | Egyptian Tax Identification Number | _123456789_ |\n| El Salvador | `sv_nit` | El Salvadorian NIT number | _1234-567890-123-4_ |\n| Estonia | `eu_vat` | European VAT number | _EE123456789_ |\n| EU  | `eu_oss_vat` | European One Stop Shop VAT number for non-Union scheme | _EU123456789_ |\n| Finland | `eu_vat` | European VAT number | _FI12345678_ |\n| France | `eu_vat` | European VAT number | _FRAB123456789_ |\n| Georgia | `ge_vat` | Georgian VAT | _123456789_ |\n| Germany | `de_stn` | German Tax Number (Steuernummer) | _1234567890_ |\n| Germany | `eu_vat` | European VAT number | _DE123456789_ |\n| Greece | `eu_vat` | European VAT number | _EL123456789_ |\n| Hong Kong | `hk_br` | Hong Kong BR number | _12345678_ |\n| Hungary | `eu_vat` | European VAT number | _HU12345678_ |\n| Hungary | `hu_tin` | Hungary tax number (adószám) | _12345678-1-23_ |\n| Iceland | `is_vat` | Icelandic VAT | _123456_ |\n| India | `in_gst` | Indian GST number | _12ABCDE3456FGZH_ |\n| Indonesia | `id_npwp` | Indonesian NPWP number | _12.345.678.9-012.345_ |\n| Ireland | `eu_vat` | European VAT number | _IE1234567AB_ |\n| Israel | `il_vat` | Israel VAT | _000012345_ |\n| Italy | `eu_vat` | European VAT number | _IT12345678912_ |\n| Japan | `jp_cn` | Japanese Corporate Number (\\*Hōjin Bangō\\*) | _1234567891234_ |\n| Japan | `jp_rn` | Japanese Registered Foreign Businesses' Registration Number (\\*Tōroku Kokugai Jigyōsha no Tōroku Bangō\\*) | _12345_ |\n| Japan | `jp_trn` | Japanese Tax Registration Number (\\*Tōroku Bangō\\*) | _T1234567891234_ |\n| Kazakhstan | `kz_bin` | Kazakhstani Business Identification Number | _123456789012_ |\n| Kenya | `ke_pin` | Kenya Revenue Authority Personal Identification Number | _P000111111A_ |\n| Latvia | `eu_vat` | European VAT number | _LV12345678912_ |\n| Liechtenstein | `li_uid` | Liechtensteinian UID number | _CHE123456789_ |\n| Lithuania | `eu_vat` | European VAT number | _LT123456789123_ |\n| Luxembourg | `eu_vat` | European VAT number | _LU12345678_ |\n| Malaysia | `my_frp` | Malaysian FRP number | _12345678_ |\n| Malaysia | `my_itn` | Malaysian ITN | _C 1234567890_ |\n| Malaysia | `my_sst` | Malaysian SST number | _A12-3456-78912345_ |\n| Malta | `eu_vat` | European VAT number | _MT12345678_ |\n| Mexico | `mx_rfc` | Mexican RFC number | _ABC010203AB9_ |\n| Netherlands | `eu_vat` | European VAT number | _NL123456789B12_ |\n| New Zealand | `nz_gst` | New Zealand GST number | _123456789_ |\n| Nigeria | `ng_tin` | Nigerian Tax Identification Number | _12345678-0001_ |\n| Norway | `no_vat` | Norwegian VAT number | _123456789MVA_ |\n| Norway | `no_voec` | Norwegian VAT on e-commerce number | _1234567_ |\n| Oman | `om_vat` | Omani VAT Number | _OM1234567890_ |\n| Peru | `pe_ruc` | Peruvian RUC number | _12345678901_ |\n| Philippines | `ph_tin` | Philippines Tax Identification Number | _123456789012_ |\n| Poland | `eu_vat` | European VAT number | _PL1234567890_ |\n| Portugal | `eu_vat` | European VAT number | _PT123456789_ |\n| Romania | `eu_vat` | European VAT number | _RO1234567891_ |\n| Romania | `ro_tin` | Romanian tax ID number | _1234567890123_ |\n| Russia | `ru_inn` | Russian INN | _1234567891_ |\n| Russia | `ru_kpp` | Russian KPP | _123456789_ |\n| Saudi Arabia | `sa_vat` | Saudi Arabia VAT | _123456789012345_ |\n| Serbia | `rs_pib` | Serbian PIB number | _123456789_ |\n| Singapore | `sg_gst` | Singaporean GST | _M12345678X_ |\n| Singapore | `sg_uen` | Singaporean UEN | _123456789F_ |\n| Slovakia | `eu_vat` | European VAT number | _SK1234567891_ |\n| Slovenia | `eu_vat` | European VAT number | _SI12345678_ |\n| Slovenia | `si_tin` | Slovenia tax number (davčna številka) | _12345678_ |\n| South Africa | `za_vat` | South African VAT number | _4123456789_ |\n| South Korea | `kr_brn` | Korean BRN | _123-45-67890_ |\n| Spain | `es_cif` | Spanish NIF number (previously Spanish CIF number) | _A12345678_ |\n| Spain | `eu_vat` | European VAT number | _ESA1234567Z_ |\n| Sweden | `eu_vat` | European VAT number | _SE123456789123_ |\n| Switzerland | `ch_uid` | Switzerland UID number | _CHE-123.456.789 HR_ |\n| Switzerland | `ch_vat` | Switzerland VAT number | _CHE-123.456.789 MWST_ |\n| Taiwan | `tw_vat` | Taiwanese VAT | _12345678_ |\n| Thailand | `th_vat` | Thai VAT | _1234567891234_ |\n| Turkey | `tr_tin` | Turkish Tax Identification Number | _0123456789_ |\n| Ukraine | `ua_vat` | Ukrainian VAT | _123456789_ |\n| United Arab Emirates | `ae_trn` | United Arab Emirates TRN | _123456789012345_ |\n| United Kingdom | `eu_vat` | Northern Ireland VAT number | _XI123456789_ |\n| United Kingdom | `gb_vat` | United Kingdom VAT number | _GB123456789_ |\n| United States | `us_ein` | United States EIN | _12-3456789_ |\n| Uruguay | `uy_ruc` | Uruguayan RUC number | _123456789012_ |\n| Venezuela | `ve_rif` | Venezuelan RIF number | _A-12345678-9_ |\n| Vietnam | `vn_tin` | Vietnamese tax ID number | _1234567890_ |",
    "title": "Account tax IDs | Stripe Documentation",
    "description": "Store and render your tax IDs with Stripe Invoicing.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/customize-payment-method-reuse-agreement",
    "markdown": "# Customize payment method reuse agreement\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=subscription \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d \"consent_collection[payment_method_reuse_agreement][position]\"=hidden \\   --data-urlencode \"custom_text[after_submit][message]\"=\"You can cancel your subscription at any time by [logging into your account]([https://www.example.com/)](https://www.example.com/))\"`\n\nTo hide the payment method reuse agreement text, set `consent_collections.payment_method_reuse_agreement.position='hidden'`. Checkout won’t display its default language governing the reuse of the payment method. To set your own text in place of Stripe’s default language, set `custom_text.after_submit.message`. You can also use `custom_text.submit` or `custom_text.terms_of_service_acceptance` to display your own version of this language.\n\n#### Warning\n\nBy customizing this text, you’re responsible for maintaining compliance, which includes updating this text as card network rules and local regulations change. Don’t use this feature without consulting with your legal team or setting custom text that includes information regarding the reuse of the payment method. Make sure that your customized text covers all modes you plan to support.",
    "title": "Customize payment method reuse agreement | Stripe Documentation",
    "description": "Learn how to customize the appearance of payment method reuse agreement.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/identity/verification_reports/object",
    "markdown": "# The VerificationReport object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    client\\_reference\\_idnullable string\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Result of the document check for this report.\n    \n*   Result of the email check for this report.\n    \n*   Result of the id number check for this report.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Configuration options for this report.\n    \n*   Result of the phone check for this report.\n    \n*   Result of the selfie check for this report.\n    \n*   Type of report.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `document`<br><br>Perform a document check. |\n    | `id_number`<br><br>Perform an ID number check. |\n    | `verification_flow`<br><br>Configuration provided by Verification Flow |\n    \n*   #### \n    \n    verification\\_flownullable string\n    \n    The configuration token of a Verification Flow from the dashboard.\n    \n*   #### \n    \n    verification\\_sessionnullable string\n    \n    ID of the VerificationSession that created this report.\n    \n\nThe VerificationReport object\n\n```\n{  \"id\": \"vr_1MwBlH2eZvKYlo2C91hOpFMf\",  \"object\": \"identity.verification_report\",  \"created\": 1681337011,  \"livemode\": false,  \"options\": {    \"document\": {}  },  \"type\": \"document\",  \"verification_session\": \"vs_NhaxYCqOE27AqaUTxbIZOnHw\",  \"document\": {    \"status\": \"verified\",    \"error\": null,    \"first_name\": \"Jenny\",    \"last_name\": \"Rosen\",    \"address\": {      \"line1\": \"1234 Main St.\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"zip\": \"94111\",      \"country\": \"US\"    },    \"type\": \"driving_license\",    \"files\": [      \"file_NhaxRCXT8Iuu8apSuci00UC4\",      \"file_NhaxDeWKGAOTc8Uec7UY9Ljj\"    ],    \"expiration_date\": {      \"month\": 12,      \"day\": 1,      \"year\": 2025    },    \"issued_date\": {      \"month\": 12,      \"day\": 1,      \"year\": 2020    },    \"issuing_country\": \"US\"  }}\n```\n\n## [Retrieve a VerificationReport](https://docs.stripe.com/api/identity/verification_reports/retrieve)\n\nRetrieves an existing VerificationReport\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a VerificationReport object\n\nGET /v1/identity/verification\\_reports/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_reports/vr_1MwBlH2eZvKYlo2C91hOpFMf \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vr_1MwBlH2eZvKYlo2C91hOpFMf\",  \"object\": \"identity.verification_report\",  \"created\": 1681337011,  \"livemode\": false,  \"options\": {    \"document\": {}  },  \"type\": \"document\",  \"verification_session\": \"vs_NhaxYCqOE27AqaUTxbIZOnHw\",  \"document\": {    \"status\": \"verified\",    \"error\": null,    \"first_name\": \"Jenny\",    \"last_name\": \"Rosen\",    \"address\": {      \"line1\": \"1234 Main St.\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"zip\": \"94111\",      \"country\": \"US\"    },    \"type\": \"driving_license\",    \"files\": [      \"file_NhaxRCXT8Iuu8apSuci00UC4\",      \"file_NhaxDeWKGAOTc8Uec7UY9Ljj\"    ],    \"expiration_date\": {      \"month\": 12,      \"day\": 1,      \"year\": 2025    },    \"issued_date\": {      \"month\": 12,      \"day\": 1,      \"year\": 2020    },    \"issuing_country\": \"US\"  }}\n```\n\n## [List VerificationReports](https://docs.stripe.com/api/identity/verification_reports/list)\n\nList all verification reports.\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Only return VerificationReports that were created during the given date interval.\n    \n*   Only return VerificationReports of this type\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `document`<br><br>Perform a document check. |\n    | `id_number`<br><br>Perform an ID number check. |\n    \n*   #### \n    \n    verification\\_sessionstring\n    \n    Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID.\n    \n\n### More parameters\n\n### Returns\n\nList of VerificationInent objects that match the provided filter criteria.\n\nGET /v1/identity/verification\\_reports\n\n```\ncurl -G https://api.stripe.com/v1/identity/verification_reports \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/identity/verification_reports\",  \"has_more\": false,  \"data\": [    {      \"id\": \"vr_1MwBlH2eZvKYlo2C91hOpFMf\",      \"object\": \"identity.verification_report\",      \"created\": 1681337011,      \"livemode\": false,      \"options\": {        \"document\": {}      },      \"type\": \"document\",      \"verification_session\": \"vs_NhaxYCqOE27AqaUTxbIZOnHw\",      \"document\": {        \"status\": \"verified\",        \"error\": null,        \"first_name\": \"Jenny\",        \"last_name\": \"Rosen\",        \"address\": {          \"line1\": \"1234 Main St.\",          \"city\": \"San Francisco\",          \"state\": \"CA\",          \"zip\": \"94111\",          \"country\": \"US\"        },        \"type\": \"driving_license\",        \"files\": [          \"file_NhaxRCXT8Iuu8apSuci00UC4\",          \"file_NhaxDeWKGAOTc8Uec7UY9Ljj\"        ],        \"expiration_date\": {          \"month\": 12,          \"day\": 1,          \"year\": 2025        },        \"issued_date\": {          \"month\": 12,          \"day\": 1,          \"year\": 2020        },        \"issuing_country\": \"US\"      }    }    {...}    {...}  ],}\n```\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The VerificationReport object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_portal/configuration",
    "markdown": "# The Customer portal configuration object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Whether the configuration is active and can be used to create portal sessions.\n    \n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n    ID of the Connect Application that created the configuration.\n    \n*   The business information shown to customers in the portal.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    default\\_return\\_urlnullable string\n    \n    The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   Information about the features available in the portal.\n    \n*   Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Time at which the object was last updated. Measured in seconds since the Unix epoch.\n    \n\nThe Customer portal configuration object\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [Create a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/create)\n\nCreates a configuration that describes the functionality and behavior of a PortalSession\n\n### Parameters\n\n*   #### \n    \n    business\\_profileobjectRequired\n    \n    The business information shown to customers in the portal.\n    \n*   Information about the features available in the portal.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a portal configuration object.\n\nPOST /v1/billing\\_portal/configurations\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode \"business_profile[privacy_policy_url]\"=\"https://example.com/privacy\" \\  --data-urlencode \"business_profile[terms_of_service_url]\"=\"https://example.com/terms\" \\  -d \"features[customer_update][allowed_updates][]\"=email \\  -d \"features[customer_update][allowed_updates][]\"=tax_id \\  -d \"features[customer_update][enabled]\"=true \\  -d \"features[invoice_history][enabled]\"=true\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [Update a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/update)\n\nUpdates a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\n*   Whether the configuration is active and can be used to create portal sessions.\n    \n*   The business information shown to customers in the portal.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website. This can be [overriden](https://docs.stripe.com/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.\n    \n*   Information about the features available in the portal.\n    \n*   The hosted login page for this configuration. Learn more about the portal login page in our [integration docs](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal#share).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a portal configuration object.\n\nPOST /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode \"business_profile[privacy_policy_url]\"=\"https://example.com/new_privacy_url\" \\  --data-urlencode \"business_profile[terms_of_service_url]\"=\"https://example.com/new_terms_of_service_url\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/new_privacy_url\",    \"terms_of_service_url\": \"https://example.com/new_terms_of_service_url\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1688593779}\n```\n\n## [Retrieve a portal configuration](https://docs.stripe.com/api/customer_portal/configurations/retrieve)\n\nRetrieves a configuration that describes the functionality of the customer portal.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a portal configuration object.\n\nGET /v1/billing\\_portal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/billing_portal/configurations/bpc_1MrnZsLkdIwHu7ixNiQL1xPM \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",  \"object\": \"billing_portal.configuration\",  \"active\": true,  \"application\": null,  \"business_profile\": {    \"headline\": null,    \"privacy_policy_url\": \"https://example.com/privacy\",    \"terms_of_service_url\": \"https://example.com/terms\"  },  \"created\": 1680290736,  \"default_return_url\": null,  \"features\": {    \"customer_update\": {      \"allowed_updates\": [        \"email\",        \"tax_id\"      ],      \"enabled\": true    },    \"invoice_history\": {      \"enabled\": true    },    \"payment_method_update\": {      \"enabled\": false    },    \"subscription_cancel\": {      \"cancellation_reason\": {        \"enabled\": false,        \"options\": [          \"too_expensive\",          \"missing_features\",          \"switched_service\",          \"unused\",          \"other\"        ]      },      \"enabled\": false,      \"mode\": \"at_period_end\",      \"proration_behavior\": \"none\"    },    \"subscription_pause\": {      \"enabled\": false    },    \"subscription_update\": {      \"default_allowed_updates\": [],      \"enabled\": false,      \"proration_behavior\": \"none\"    }  },  \"is_default\": false,  \"livemode\": false,  \"login_page\": {    \"enabled\": false,    \"url\": null  },  \"metadata\": {},  \"updated\": 1680290736}\n```\n\n## [List portal configurations](https://docs.stripe.com/api/customer_portal/configurations/list)\n\nReturns a list of configurations that describe the functionality of the customer portal.\n\n### Parameters\n\n*   Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).\n    \n*   Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of portal configuration objects.\n\nGET /v1/billing\\_portal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/billing_portal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/billing_portal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"bpc_1MrnZsLkdIwHu7ixNiQL1xPM\",      \"object\": \"billing_portal.configuration\",      \"active\": true,      \"application\": null,      \"business_profile\": {        \"headline\": null,        \"privacy_policy_url\": \"https://example.com/privacy\",        \"terms_of_service_url\": \"https://example.com/terms\"      },      \"created\": 1680290736,      \"default_return_url\": null,      \"features\": {        \"customer_update\": {          \"allowed_updates\": [            \"email\",            \"tax_id\"          ],          \"enabled\": true        },        \"invoice_history\": {          \"enabled\": true        },        \"payment_method_update\": {          \"enabled\": false        },        \"subscription_cancel\": {          \"cancellation_reason\": {            \"enabled\": false,            \"options\": [              \"too_expensive\",              \"missing_features\",              \"switched_service\",              \"unused\",              \"other\"            ]          },          \"enabled\": false,          \"mode\": \"at_period_end\",          \"proration_behavior\": \"none\"        },        \"subscription_pause\": {          \"enabled\": false        },        \"subscription_update\": {          \"default_allowed_updates\": [],          \"enabled\": false,          \"proration_behavior\": \"none\"        }      },      \"is_default\": false,      \"livemode\": false,      \"login_page\": {        \"enabled\": false,        \"url\": null      },      \"metadata\": {},      \"updated\": 1680290736    }    {...}    {...}  ],}\n```",
    "title": "The Customer portal configuration object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  }
]