[
  {
    "url": "https://typicode.github.io/husky/",
    "markdown": "# Husky\n\n![npm](https://img.shields.io/npm/dm/husky)\n\n> Modern native git hooks made easy\n\nHusky enhances your commits and more 🐶 _woof!_\n\nAutomatically **lint your commit messages**, **code**, and **run tests** upon committing or pushing.\n\nGet started [here](https://typicode.github.io/husky/get-started.html).\n\n[Check out the v9 changelog](https://github.com/typicode/husky/releases/tag/v9.0.1) to discover all the new and improved features! 🚀\n\n## Features [​](#features)\n\n*   Just `2 kB` (📦 _gzipped_) with no dependencies\n*   Extremely fast (runs in `~1ms`)\n*   Uses new Git feature (`core.hooksPath`)\n*   Supports:\n    *   macOS, Linux, Windows\n    *   Git GUIs, Node version managers, custom hooks directory, nested projects, monorepos\n    *   [All 13 client-side Git hooks](https://git-scm.com/docs/githooks)\n\nAnd more:\n\n*   Branch-specific hooks\n*   Use POSIX shell to script advanced cases\n*   Adheres to Git's native hook organization\n*   Aligns with [npm](https://docs.npmjs.com/cli/v10/using-npm/scripts#best-practices) best practices using `prepare` script\n*   Opt-in/opt-out options\n*   User-friendly error messages\n\n## Sponsors [​](#sponsors)\n\nSupport this project by becoming a sponsor [here](https://github.com/sponsors/typicode) 💖\n\n### Special Sponsor [​](#special-sponsor)\n\n[![](https://github.com/typicode/husky/assets/5502029/1b95c571-0157-48bc-a147-0d8d2fbc1d8a)  \nGet rewards for your open-source contributions](https://app.tea.xyz/sign-up?r=8L2HWfJB6hs)\n\n### GitHub [​](#github)\n\n[![](https://typicode.github.io/husky/assets/sponsors.CIPmOxma.svg)](https://typicode.github.io/husky/sponsorkit/sponsors.svg)\n\n### Open Collective [​](#open-collective)\n\n[![](https://opencollective.com/husky/tiers/company/0/avatar.svg?avatarHeight=120)](https://opencollective.com/husky/tiers/company/0/website)[![](https://opencollective.com/husky/tiers/company/1/avatar.svg?avatarHeight=120)](https://opencollective.com/husky/tiers/company/1/website)[![](https://opencollective.com/husky/tiers/company/2/avatar.svg?avatarHeight=120)](https://opencollective.com/husky/tiers/company/2/website)[![](https://opencollective.com/husky/tiers/company/3/avatar.svg?avatarHeight=120)](https://opencollective.com/husky/tiers/company/3/website)[![](https://opencollective.com/husky/tiers/company/4/avatar.svg?avatarHeight=120)](https://opencollective.com/husky/tiers/company/4/website)[![](https://opencollective.com/husky/tiers/company/5/avatar.svg?avatarHeight=120)](https://opencollective.com/husky/tiers/company/5/website)\n\n## Used by [​](#used-by)\n\nHusky is used in [**over 1.3M projects**](https://github.com/typicode/husky/network/dependents?package_id=UGFja2FnZS0xODQzNTgwNg%3D%3D) on GitHub, including:\n\n*   [vercel/next.js](https://github.com/vercel/next.js)\n*   [vercel/hyper](https://github.com/vercel/hyper)\n*   [webpack/webpack](https://github.com/webpack/webpack)\n*   [angular/angular](https://github.com/angular/angular)\n*   [facebook/docusaurus](https://github.com/facebook/docusaurus)\n*   [microsoft/vscode](https://github.com/microsoft/vscode)\n*   [11ty/eleventy](https://github.com/11ty/eleventy)\n*   [stylelint/stylelint](https://github.com/stylelint/stylelint)\n*   [colinhacks/zod](https://github.com/colinhacks/zod)\n*   [rollup/rollup](https://github.com/rollup/rollup)\n*   [tinyhttp/tinyhttp](https://github.com/tinyhttp/tinyhttp)\n*   ...\n\n## Articles [​](#articles)\n\n*   [Why husky has dropped conventional JS config](https://blog.typicode.com/posts/husky-git-hooks-javascript-config/)\n*   [Why husky doesn't autoinstall anymore](https://blog.typicode.com/posts/husky-git-hooks-autoinstall/)",
    "title": "Husky",
    "description": "Git hooks made easy",
    "languageCode": "en-US"
  },
  {
    "url": "https://typicode.github.io/husky/get-started.html",
    "markdown": "# Get started | Husky\n\n## Install [​](#install)\n\nnpmpnpmyarnbun\n\nshell\n\n```\nnpm install --save-dev husky\n```\n\nshell\n\n```\npnpm add --save-dev husky\n```\n\nshell\n\n```\nyarn add --dev husky\n# Add pinst ONLY if your package is not private\nyarn add --dev pinst\n```\n\n## `husky init` (recommended) [​](#husky-init-recommended)\n\nThe `init` command simplifies setting up husky in a project. It creates a `pre-commit` script in `.husky/` and updates the `prepare` script in `package.json`. Modifications can be made later to suit your workflow.\n\nnpmpnpmyarnbun\n\nshell\n\n```\npnpm exec husky init\n```\n\nshell\n\n```\n# Due to specific caveats and differences with other package managers,\n# refer to the How To section.\n```\n\n## Try it [​](#try-it)\n\nCongratulations! You've successfully set up your first Git hook with just one command 🎉. Let's test it:\n\nshell\n\n```\ngit commit -m \"Keep calm and commit\"\n# test script will run every time you commit\n```\n\n_For manual setup and more information, see the [How To](https://typicode.github.io/husky/how-to.html) section._",
    "title": "Get started | Husky",
    "description": "Git hooks made easy",
    "languageCode": "en-US"
  },
  {
    "url": "https://typicode.github.io/husky/zh/",
    "markdown": "# Husky\n\n![npm](https://img.shields.io/npm/dm/husky)\n\n> 使现代的原生 Git 钩子变得简单\n\nHusky 能使你的提交变得更好 🐶 _汪!_\n\n在提交或推送时，自动化 **检查提交信息**、**检查代码** 和 **运行测试**。\n\n从 [这里](https://typicode.github.io/husky/zh/get-started.html) 快速开始。\n\n[查看 v9 更新日志](https://github.com/typicode/husky/releases/tag/v9.0.1)去发现所有新特性！ 🚀\n\n## 特性 [​](#特性)\n\n*   仅有 `2 kB`（📦 _gzip 压缩后_），没有任何依赖。\n*   非常快（运行速度约 `~1ms`）\n*   使用新 Git 特性（`core.hooksPath`）\n*   支持：\n    *   macOS、Linux、Windows\n    *   Git GUI、Node 版本管理器、自定义钩子目录、嵌套项目、Monorepos\n    *   [所有 13 个客户端 Git 钩子](https://git-scm.com/docs/githooks)\n\n更多：\n\n*   Branch-specific 钩子\n*   使用 POSIX shell 为高级案例编写脚本\n*   遵循 Git 的原生钩子组织结构\n*   使用 `prepare` 脚本与 [npm](https://docs.npmjs.com/cli/v10/using-npm/scripts#best-practices) 最佳实践保持一致\n*   Opt-in/opt-out 选项\n*   用户友好的报错信息\n\n## 赞助者 [​](#赞助者)\n\n支持这个项目来成为一个赞助者 [点击此处](https://github.com/sponsors/typicode) 💖\n\n### 特别赞助 [​](#特别赞助)\n\n[![](https://github.com/typicode/husky/assets/5502029/1b95c571-0157-48bc-a147-0d8d2fbc1d8a)  \nGet rewards for your open-source contributions](https://app.tea.xyz/sign-up?r=8L2HWfJB6hs)\n\n### GitHub [​](#github)\n\n[![](https://typicode.github.io/husky/assets/sponsors.CIPmOxma.svg)](https://typicode.github.io/husky/sponsorkit/sponsors.svg)\n\n### Open Collective [​](#open-collective)\n\n[![](https://opencollective.com/husky/tiers/company/0/avatar.svg?avatarHeight=120)](https://opencollective.com/husky/tiers/company/0/website)[![](https://opencollective.com/husky/tiers/company/1/avatar.svg?avatarHeight=120)](https://opencollective.com/husky/tiers/company/1/website)[![](https://opencollective.com/husky/tiers/company/2/avatar.svg?avatarHeight=120)](https://opencollective.com/husky/tiers/company/2/website)[![](https://opencollective.com/husky/tiers/company/3/avatar.svg?avatarHeight=120)](https://opencollective.com/husky/tiers/company/3/website)[![](https://opencollective.com/husky/tiers/company/4/avatar.svg?avatarHeight=120)](https://opencollective.com/husky/tiers/company/4/website)[![](https://opencollective.com/husky/tiers/company/5/avatar.svg?avatarHeight=120)](https://opencollective.com/husky/tiers/company/5/website)\n\n## 谁在使用 [​](#谁在使用)\n\nHusky 在 GitHub 上用于[超过 130 万个项目](https://github.com/typicode/husky/network/dependents?package_id=UGFja2FnZS0xODQzNTgwNg%3D%3D)，包括：\n\n*   [vercel/next.js](https://github.com/vercel/next.js)\n*   [vercel/hyper](https://github.com/vercel/hyper)\n*   [webpack/webpack](https://github.com/webpack/webpack)\n*   [angular/angular](https://github.com/angular/angular)\n*   [facebook/docusaurus](https://github.com/facebook/docusaurus)\n*   [microsoft/vscode](https://github.com/microsoft/vscode)\n*   [11ty/eleventy](https://github.com/11ty/eleventy)\n*   [stylelint/stylelint](https://github.com/stylelint/stylelint)\n*   [colinhacks/zod](https://github.com/colinhacks/zod)\n*   [rollup/rollup](https://github.com/rollup/rollup)\n*   [tinyhttp/tinyhttp](https://github.com/tinyhttp/tinyhttp)\n*   ...\n\n## 相关文章 [​](#相关文章)\n\n*   [为什么 Husky 放弃了传统的 JS 配置](https://blog.typicode.com/posts/husky-git-hooks-javascript-config/)\n*   [为什么 Husky 不再自动安装了](https://blog.typicode.com/posts/husky-git-hooks-autoinstall/)",
    "title": "Husky",
    "description": "使 Git hooks 变得简单",
    "languageCode": "zh-hans"
  },
  {
    "url": "https://typicode.github.io/husky/how-to.html",
    "markdown": "# How To | Husky\n\n## Adding a New Hook [​](#adding-a-new-hook)\n\nAdding a hook is as simple as creating a file. This can be accomplished using your favorite editor, a script or a basic echo command. For example, on Linux/macOS:\n\nshell\n\n```\necho \"npm test\" > .husky/pre-commit\n```\n\n## Startup files [​](#startup-files)\n\nHusky allows you to execute local commands before running hooks. It reads commands from these files:\n\n*   `$XDG_CONFIG_HOME/husky/init.sh`\n*   `~/.config/husky/init.sh`\n*   `~/.huskyrc` (deprecated)\n\nOn Windows: `C:\\Users\\yourusername\\.config\\husky\\init.sh`\n\n## Skipping Git Hooks [​](#skipping-git-hooks)\n\n### For a Single Command [​](#for-a-single-command)\n\nMost Git commands include a `-n/--no-verify` option to skip hooks:\n\nsh\n\n```\ngit commit -m \"...\" -n # Skips Git hooks\n```\n\nFor commands without this flag, disable hooks temporarily with HUSKY=0:\n\nshell\n\n```\nHUSKY=0 git ... # Temporarily disables all Git hooks\ngit ... # Hooks will run again\n```\n\n### For multiple commands [​](#for-multiple-commands)\n\nTo disable hooks for an extended period (e.g., during rebase/merge):\n\nshell\n\n```\nexport HUSKY=0 # Disables all Git hooks\ngit ...\ngit ...\nunset HUSKY # Re-enables hooks\n```\n\n### For a GUI or Globally [​](#for-a-gui-or-globally)\n\nTo disable Git hooks in a GUI client or globally, modify the husky config:\n\nsh\n\n```\n# ~/.config/husky/init.sh\nexport HUSKY=0 # Husky won't install and won't run hooks on your machine\n```\n\n## CI server and Docker [​](#ci-server-and-docker)\n\nTo avoid installing Git Hooks on CI servers or in Docker, use `HUSKY=0`. For instance, in GitHub Actions:\n\nyml\n\n```\n# https://docs.github.com/en/actions/learn-github-actions/variables\nenv:\n  HUSKY: 0\n```\n\nIf installing only `dependencies` (not `devDependencies`), the `\"prepare\": \"husky\"` script may fail because Husky won't be installed.\n\nYou have multiple solutions.\n\nModify the `prepare` script to never fail:\n\njson\n\n```\n// package.json\n\"prepare\": \"husky || true\"\n```\n\nYou'll still get a `command not found` error message in your output which may be confusing. To make it silent, create `.husky/install.mjs`:\n\njs\n\n```\n// Skip Husky install in production and CI\nif (process.env.NODE_ENV === 'production' || process.env.CI === 'true') {\n  process.exit(0)\n}\nconst husky = (await import('husky')).default\nconsole.log(husky())\n```\n\nThen, use it in `prepare`:\n\njson\n\n```\n\"prepare\": \"node .husky/install.mjs\"\n```\n\n## Testing Hooks Without Committing [​](#testing-hooks-without-committing)\n\nTo test a hook, add `exit 1` to the hook script to abort the Git command:\n\nshell\n\n```\n# .husky/pre-commit\n\n# Your WIP script\n# ...\n\nexit 1\n```\n\nshell\n\n```\ngit commit -m \"testing pre-commit code\"\n# A commit will not be created\n```\n\n## Project Not in Git Root Directory [​](#project-not-in-git-root-directory)\n\nHusky doesn't install in parent directories (`../`) for security reasons. However, you can change the directory in the `prepare` script.\n\nConsider this project structure:\n\n```\n.\n├── .git/\n├── backend/  # No package.json\n└── frontend/ # Package.json with husky\n```\n\nSet your prepare script like this:\n\njson\n\n```\n\"prepare\": \"cd .. && husky frontend/.husky\"\n```\n\nIn your hook script, change the directory back to the relevant subdirectory:\n\nshell\n\n```\n# frontend/.husky/pre-commit\ncd frontend\nnpm test\n```\n\n## Non-shell hooks [​](#non-shell-hooks)\n\nIn order to run scripts that require the use of a scripting language, use the following pattern for each applicable hook:\n\n(Example using hook `pre-commit` and NodeJS)\n\n1.  Create an entrypoint for the hook:\n2.  In the file add the following\n    \n    shell\n    \n    ```\n    node .husky/pre-commit.js\n    ```\n    \n3.  in `.husky/pre-commit.js`\n    \n    javascript\n    \n    ```\n    // Your NodeJS code\n    // ...\n    ```\n    \n\n## Bash [​](#bash)\n\nHook scripts need to be POSIX compliant to ensure best compatibility as not everyone has `bash` (e.g. Windows users).\n\nThat being said, if your team doesn't use Windows, you can use Bash this way:\n\nshell\n\n```\n# .husky/pre-commit\n\nbash << EOF\n# Put your bash script inside\n# ...\nEOF\n```\n\n## Node Version Managers and GUIs [​](#node-version-managers-and-guis)\n\nIf you're using Git hooks in GUIs with Node installed via a version manager (like `nvm`, `n`, `fnm`, `asdf`, `volta`, etc...), you might face a `command not found` error due to `PATH` environment variable issues.\n\n### Understanding `PATH` and Version Managers [​](#understanding-path-and-version-managers)\n\n`PATH` is an environment variable containing a list of directories. Your shell searches these directories for commands. If it doesn't find a command, you get a `command not found` message.\n\nRun `echo $PATH` in a shell to view its contents.\n\nVersion managers work by:\n\n1.  Adding initialization code to your shell startup file (`.zshrc`, `.bashrc`, etc.), which runs each time you open a terminal.\n2.  Downloading Node versions to a directory in your home folder.\n\nFor example, if you have two Node versions:\n\nshell\n\n```\n~/version-manager/Node-X/node\n~/version-manager/Node-Y/node\n```\n\nOpening a terminal initializes the version manager, which picks a version (say `Node-Y`) and prepends its path to `PATH`:\n\nshell\n\n```\necho $PATH\n# Output\n~/version-manager/Node-Y/:...\n```\n\nNow, node refers to `Node-Y`. Switching to `Node-X` changes `PATH` accordingly:\n\nshell\n\n```\necho $PATH\n# Output\n~/version-manager/Node-X/:...\n```\n\nThe issue arises because GUIs, launched outside a terminal, don't initialize the version manager, leaving `PATH` without the Node install path. Thus, Git hooks from GUIs often fail.\n\n### Solution [​](#solution)\n\nHusky sources `~/.config/husky/init.sh` before each Git hook. Copy your version manager initialization code here to ensure it runs in GUIs.\n\nExample with `nvm`:\n\nshell\n\n```\n# ~/.config/husky/init.sh\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\nAlternatively, if your shell startup file is fast and lightweight, source it directly:\n\nshell\n\n```\n# ~/.config/husky/init.sh\n. ~/.zshrc\n```\n\n## Manual setup [​](#manual-setup)\n\nGit needs to be configured and husky needs to setup files in `.husky/`.\n\nRun the `husky` command once in your repo. Ideally, include it in the `prepare` script in `package.json` for automatic execution after each install (recommended).\n\nnpmpnpmyarnbun\n\njson\n\n```\n{\n  \"scripts\": {\n    \"prepare\": \"husky\"\n  }\n}\n```\n\njson\n\n```\n{\n  \"scripts\": {\n    \"prepare\": \"husky\"\n  }\n}\n```\n\njson\n\n```\n{\n  \"scripts\": {\n    // Yarn doesn't support prepare script\n    \"postinstall\": \"husky\",\n    // Include this if publishing to npmjs.com\n    \"prepack\": \"pinst --disable\",\n    \"postpack\": \"pinst --enable\"\n  }\n}\n```\n\njson\n\n```\n{\n  \"scripts\": {\n    \"prepare\": \"husky\"\n  }\n}\n```\n\nRun `prepare` once:\n\nnpmpnpmyarnbun\n\nsh\n\n```\n# Yarn doesn't support `prepare`\nyarn run postinstall\n```\n\nCreate a `pre-commit` file in the `.husky/` directory:\n\nnpmpnpmyarnbun\n\nshell\n\n```\n# .husky/pre-commit\nnpm test\n```\n\nshell\n\n```\n# .husky/pre-commit\npnpm test\n```\n\nshell\n\n```\n# .husky/pre-commit\nyarn test\n```\n\nsh\n\n```\n# .husky/pre-commit\nbun test\n```",
    "title": "How To | Husky",
    "description": "Git hooks made easy",
    "languageCode": "en-US"
  },
  {
    "url": "https://typicode.github.io/husky/troubleshoot.html",
    "markdown": "# Troubleshoot | Husky\n\n## Command not found [​](#command-not-found)\n\nSee [How To](https://typicode.github.io/husky/how-to.html) for solutions.\n\n## Hooks not running [​](#hooks-not-running)\n\n1.  Verify the file name is correct. For example, `precommit` or `pre-commit.sh` are invalid names. Refer to the Git hooks [documentation](https://git-scm.com/docs/githooks) for valid names.\n2.  Run `git config core.hooksPath` and ensure it points to `.husky/_` (or your custom hooks directory).\n3.  Confirm your Git version is above `2.9`.\n\n## `.git/hooks/` Not Working After Uninstall [​](#git-hooks-not-working-after-uninstall)\n\nIf hooks in `.git/hooks/` don't work post-uninstalling `husky`, execute `git config --unset core.hooksPath`.\n\n## Yarn on Windows [​](#yarn-on-windows)\n\nGit hooks might fail with Yarn on Windows using Git Bash (`stdin is not a tty`). For Windows users, implement this workaround:\n\n1.  Create `.husky/common.sh`:\n\nshell\n\n```\ncommand_exists () {\n  command -v \"$1\" >/dev/null 2>&1\n}\n\n# Workaround for Windows 10, Git Bash, and Yarn\nif command_exists winpty && test -t 1; then\n  exec < /dev/tty\nfi\n```\n\n2.  Source it where Yarn commands are run:\n\nshell\n\n```\n# .husky/pre-commit\n. \"$(dirname -- \"$0\")/common.sh\"\n\nyarn ...\n```",
    "title": "Troubleshoot | Husky",
    "description": "Git hooks made easy",
    "languageCode": "en-US"
  },
  {
    "url": "https://typicode.github.io/husky/migrate-from-v4.html",
    "markdown": "# Migrate from v4 | Husky\n\nIf you were calling `package.json` scripts using `npm` or `yarn`, **you can simply copy your commands** from your config file to the corresponding hook:\n\nHusky v4\n\njson\n\n```\n// package.json\n{\n  \"hooks\": {\n    \"pre-commit\": \"npm test && npm run foo\"\n  }\n}\n```\n\nHusky v9\n\nshell\n\n```\n# .husky/pre-commit\n# Note that you can now have commands on multiple lines\nnpm test // [!code hl]\nnpm run foo // [!code hl]\n```\n\nIf you were calling locally installed binaries, **you need to run them via your package manager now**:\n\n.huskyrc.json (v4).husky/pre-commit (v9)\n\njs\n\n```\n{\n  \"hooks\": {\n    \"pre-commit\": \"jest\"\n  }\n}\n```\n\nshell\n\n```\n# ...\nnpx --no jest\n# or\nyarn jest\n```\n\n`HUSKY_GIT_PARAMS` environment variable is replaced now by native params `$1`, `$2`, etc.\n\n.huskyrc.json (v4).husky/commit-msg (v9)\n\njs\n\n```\n{\n  \"hooks\": {\n    \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\n  }\n}\n```\n\nshell\n\n```\n# ...\nnpx --no -- commitlint --edit $1\n# or\nyarn commitlint --edit $1\n```\n\nOther environment variables changes:\n\n*   `HUSKY_SKIP_HOOKS` is replaced by `HUSKY`.\n*   `HUSKY_SKIP_INSTALL` is replaced by `HUSKY`.\n*   `HUSKY_GIT_PARAMS` is removed. Instead Git parameters should be used directly in scripts (e.g. `$1`).\n*   `PATH` for locally installed tools is not automatically set anymore. You'll need to use your package manager to run them.",
    "title": "Migrate from v4 | Husky",
    "description": "Git hooks made easy",
    "languageCode": "en-US"
  },
  {
    "url": "https://typicode.github.io/husky/sponsorkit/sponsors.svg",
    "markdown": "# 404 | Husky\n\n[Skip to content](#VPContent)\n\n404\n\n## PAGE NOT FOUND\n\n> But if you don't change your direction, and if you keep looking, you may end up where you are heading.",
    "title": "404 | Husky",
    "description": "Not Found",
    "languageCode": "en-US"
  },
  {
    "url": "https://typicode.github.io/husky/zh/how-to.html",
    "markdown": "# 如何使用 | Husky\n\n## 如何使用 [​](#如何使用)\n\n## 添加新 Hook [​](#添加新-hook)\n\n添加 hook 与创建文件一样简单。可以通过你喜欢的编辑器、脚本或 echo 命令来实现。例如，在 Linux/macOS 中：\n\nshell\n\n```\necho \"npm test\" > .husky/pre-commit\n```\n\n## 启动文件 [​](#启动文件)\n\nHusky 允许你在运行钩子之前执行本地命令。它从这些文件中读取命令：\n\n*   `$XDG_CONFIG_HOME/husky/init.sh`\n*   `~/.config/husky/init.sh`\n*   `~/.huskyrc` (已弃用)\n\nWindows 系统：`C:\\Users\\yourusername\\.config\\husky\\init.sh`\n\n## 跳过 Git 钩子 [​](#跳过-git-钩子)\n\n### 对于单个命令 [​](#对于单个命令)\n\n大多数 Git 命令都包含一个 `-n/--no-verify` 选项来用于跳过钩子：\n\nsh\n\n```\ngit commit -m \"...\" -n # 跳过 Git 钩子\n```\n\n对于没有使用此标识的命令，使用 HUSKY=0 来临时禁用钩子：\n\nshell\n\n```\nHUSKY=0 git ... # 临时禁用所有 Git 钩子\ngit ... # 钩子会再次运行\n```\n\n### 对于多个命令 [​](#对于多个命令)\n\n在一个较长的时间里禁用钩子（例如，在变基或者合并期间）：\n\nshell\n\n```\nexport HUSKY=0 # 禁用所有 Git 钩子\ngit ...\ngit ...\nunset HUSKY # 重新启用钩子\n```\n\n### 对于 GUI 或全局 [​](#对于-gui-或全局)\n\n要在 GUI 客户端或全局禁用 Git 钩子，请修改 Husky 配置:\n\nsh\n\n```\n# ~/.config/husky/init.sh\nexport HUSKY=0 # Husky 不会安装，也不会再你的机器上运行钩子\n```\n\n## CI 服务器和 Docker [​](#ci-服务器和-docker)\n\n要避免在 CI 服务器或 Docker 中安装 Git 钩子，请使用 `HUSKY=0`。例如，在 GitHub Actions 中：\n\nyml\n\n```\n# https://docs.github.com/en/actions/learn-github-actions/variables\nenv:\n  HUSKY: 0\n```\n\n如果只安装 `dependencies`（不是 `devDependencies`），`\"prepare\": \"husky\"` 脚本可能会失败，因为 Husky 不会被安装。\n\n你有多种解决方案。\n\n修改 `prepare` 脚本使其永远不会失败：\n\njson\n\n```\n// package.json\n\"prepare\": \"husky || true\"\n```\n\n你仍然会在输出中看到一个 `command not found` 的错误消息，这可能会让你很感到困惑。为了让它消失，创建 `.husky/install.mjs`：\n\njs\n\n```\n// 在生产环境或 CI 环境中跳过 Husky 的安装\nif (process.env.NODE_ENV === 'production' || process.env.CI === 'true') {\n  process.exit(0)\n}\nconst husky = (await import('husky')).default\nconsole.log(husky())\n```\n\n然后，在 `prepare` 脚本中使用它：\n\njson\n\n```\n\"prepare\": \"node .husky/install.mjs\"\n```\n\n## 测试钩子 [​](#测试钩子)\n\n要测试一个钩子，将 `exit 1` 添加到钩子脚本以中止 Git 命令:\n\nshell\n\n```\n# .husky/pre-commit\n\n# 你的 WIP 脚本\n# ...\n\nexit 1\n```\n\nshell\n\n```\ngit commit -m \"testing pre-commit code\"\n# 提交不会被创建\n```\n\n## 项目不在 Git 根目录 [​](#项目不在-git-根目录)\n\n出于安全考虑，Husky 不会安装在父目录（`../`）中。但是，你可以在 `prepare` 脚本中更改目录。\n\n考虑一下这个项目结构：\n\n```\n.\n├── .git/\n├── backend/  # 没有 package.json\n└── frontend/ # package.json 中带有 husky\n```\n\n像这样设置你的 prepare 脚本：\n\njson\n\n```\n\"prepare\": \"cd .. && husky frontend/.husky\"\n```\n\n在你的 hook 脚本中，将目录切换回相关的子目录：\n\nshell\n\n```\n# frontend/.husky/pre-commit\ncd frontend\nnpm test\n```\n\n## 非 shell 脚本钩子 [​](#非-shell-脚本钩子)\n\n为了运行需要使用脚本语言的脚本，对每个适用的钩子使用以下模式：\n\n（使用钩子 `pre-commit` 和 NodeJS 的示例）\n\n1.  为钩子创建一个入口：\n2.  在文件中添加以下内容：\n    \n    shell\n    \n    ```\n    node .husky/pre-commit.js\n    ```\n    \n3.  在 `.husky/pre-commit.js` 文件中：\n    \n    javascript\n    \n    ```\n    // 你的 NodeJS 代码\n    // ...\n    ```\n    \n\n## Bash [​](#bash)\n\n钩子脚本需要与 POSIX 兼容，以确保最佳兼容性，因为并非每个人都有 bash (例如 Windows 用户)。\n\n也就是说，如果你的团队不使用 Windows，你可以这样使用 Bash：\n\nshell\n\n```\n# .husky/pre-commit\n\nbash << EOF\n# Put your bash script inside\n# ...\nEOF\n```\n\n## Node 版本管理器和 GUI [​](#node-版本管理器和-gui)\n\n如果您在 GUI 中使用 Git 钩子，并通过版本管理器（比如 `nvm`、`n`、`fnm`、`asdf`、`volta` 等等）安装 Node，由于 `PATH` 环境变量问题，你可能会遇到 `command not found` 报错。\n\n### 了解 `PATH` 和版本管理器 [​](#了解-path-和版本管理器)\n\n`PATH` 是一个包含目录列表的环境变量，你的 shell 在这些目录中检索命令，如果没找到这个命令，你就会得到一个 `command not found` 报错。\n\n在 shell 中运行 `echo $PATH` 来查看其内容。\n\n版本管理器的工作方式如下：\n\n1.  将初始化代码添加到 shell 启动文件（`.zshrc`、`.bashrc` 等），它会在每次打开终端时运行。\n2.  将 Node 版本下载到主文件夹下的目录中。\n\n例如，如果你有两个 Node 版本：\n\nshell\n\n```\n~/version-manager/Node-X/node\n~/version-manager/Node-Y/node\n```\n\n打开终端将初始化版本管理器，它将选择一个版本（比如 `Node-Y`）并预先设置其到 `PATH` 的路径:\n\nshell\n\n```\necho $PATH\n# 输出\n~/version-manager/Node-Y/:...\n```\n\n现在，Node 指向 `Node-Y`。切换到 `Node-X` 时会相应地改变 `PATH`：\n\nshell\n\n```\necho $PATH\n# 输出\n~/version-manager/Node-X/:...\n```\n\n出现这个问题是因为在终端之外启动的 GUI 没有初始化版本管理器，导致 `PATH` 没有 Node 安装路径。因此，来自 GUI 的 Git 钩子常常会失败。\n\n### 解决方案 [​](#解决方案)\n\nhusky 在每个钩子之前都会执行 `~/.config/husky/init.sh`。将版本管理器初始化代码复制到这里，以确保在 GUI 中运行。\n\n`nvm` 示例:\n\nshell\n\n```\n# ~/.config/husky/init.sh\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # 加载 nvm\n```\n\n或者，如果你的 shell 启动文件快速且轻量，也可以直接使用：\n\nshell\n\n```\n# ~/.config/husky/init.sh\n. ~/.zshrc\n```\n\n## 手动设置 [​](#手动设置)\n\nGit 需要配置，husky 需要在 `.husky/` 中设置文件。\n\n在仓库中运行一次 `husky` 命令。理想情况下，将其设置在 `package.json` 的 `prepare` 脚本中，以便每次安装后自动执行推荐。\n\nnpmpnpmyarnbun\n\njson\n\n```\n{\n  \"scripts\": {\n    \"prepare\": \"husky\"\n  }\n}\n```\n\njson\n\n```\n{\n  \"scripts\": {\n    \"prepare\": \"husky\"\n  }\n}\n```\n\njson\n\n```\n{\n  \"scripts\": {\n    // Yarn 不支持 prepare 脚本\n    \"postinstall\": \"husky\",\n    // 如果发布到 npmjs.com，需要加上这个\n    \"prepack\": \"pinst --disable\",\n    \"postpack\": \"pinst --enable\"\n  }\n}\n```\n\njson\n\n```\n{\n  \"scripts\": {\n    \"prepare\": \"husky\"\n  }\n}\n```\n\n运行一次 `prepare`：\n\nnpmpnpmyarnbun\n\nsh\n\n```\n# Yarn 不支持 `prepare`\nyarn run postinstall\n```\n\n在 `.husky/` 目录中创建一个 `pre-commit` 文件：\n\nnpmpnpmyarnbun\n\nshell\n\n```\n# .husky/pre-commit\nnpm test\n```\n\nshell\n\n```\n# .husky/pre-commit\npnpm test\n```\n\nshell\n\n```\n# .husky/pre-commit\nyarn test\n```\n\nsh\n\n```\n# .husky/pre-commit\nbun test\n```",
    "title": "如何使用 | Husky",
    "description": "使 Git hooks 变得简单",
    "languageCode": "zh-hans"
  },
  {
    "url": "https://typicode.github.io/husky/zh/get-started.html",
    "markdown": "# 快速开始 | Husky\n\n## 快速开始 [​](#快速开始)\n\n## 安装 [​](#安装)\n\nnpmpnpmyarnbun\n\nshell\n\n```\nnpm install --save-dev husky\n```\n\nshell\n\n```\npnpm add --save-dev husky\n```\n\nshell\n\n```\nyarn add --dev husky\n# 如果你的项目不是私有的，那么只需要安装 pinst\nyarn add --dev pinst\n```\n\n## `husky init` 推荐 [​](#husky-init)\n\n`init` 命令简化了项目中的 husky 设置。它会在 `.husky/` 中创建 `pre-commit` 脚本，并更新 `package.json` 中的 `prepare` 脚本。随后可根据你的工作流进行修改。\n\nnpmpnpmyarnbun\n\nshell\n\n```\npnpm exec husky init\n```\n\nshell\n\n```\n# 由于特殊的注意事项和与其他包管理器的差异，\n# 请参考“如何使用”章节。\n```\n\n## 试一试 [​](#试一试)\n\n恭喜你！你已经成功地用一个命令设置了你的第一个 Git 钩子 🎉。让我们测试一下：\n\nshell\n\n```\ngit commit -m \"Keep calm and commit\"\n# 测试脚本会在每次提交时运行\n```\n\n_有关手动设置和更多信息，请参见 [如何使用](https://typicode.github.io/husky/zh/how-to.html) 章节_",
    "title": "快速开始 | Husky",
    "description": "使 Git hooks 变得简单",
    "languageCode": "zh-hans"
  },
  {
    "url": "https://typicode.github.io/husky/zh/troubleshoot.html",
    "markdown": "# 故障排查 | Husky\n\n## 故障排查 [​](#故障排查)\n\n## 找不到命令（Command not found） [​](#找不到命令-command-not-found)\n\n请参阅 [如何使用](https://typicode.github.io/husky/zh/how-to.html) 获取解决方案。\n\n## 钩子未运行 [​](#钩子未运行)\n\n1.  验证文件名是否正确。例如，`precommit` 或 `pre-commit.sh` 都是无效的名称。有效名称请参考 Git 钩子[文档](https://git-scm.com/docs/githooks)。\n2.  运行 `git config core.hooksPath` 并确保它指向 `.husky/_`（或者你的自定义目录）。\n3.  确认你的 Git 版本高于 `2.9`。\n\n## 卸载后 `.git/hooks/` 无法正常使用 [​](#卸载后-git-hooks-无法正常使用)\n\n如果卸载 `husky` 后 hooks 在 `.git/hooks/` 中无法正常使用，请执行命令 `git config --unset core.hooksPath`。\n\n## 在 Windows 上使用 Yarn [​](#在-windows-上使用-yarn)\n\n在 Windows 上使用 Git Bash 时，Git 钩子可能会失败(`stdin is not a tty`)。对于 Windows 用户，通过以下解决方案来实现：\n\n1.  创建 `.husky/common.sh`:\n\nshell\n\n```\ncommand_exists () {\n  command -v \"$1\" >/dev/null 2>&1\n}\n\n# Windows 10、Git Bash 和 Yarn 的解决方案\nif command_exists winpty && test -t 1; then\n  exec < /dev/tty\nfi\n```\n\n1.  在运行 Yarn 命令的地方使用它：\n\nshell\n\n```\n# .husky/pre-commit\n. \"$(dirname -- \"$0\")/common.sh\"\n\nyarn ...\n```",
    "title": "故障排查 | Husky",
    "description": "使 Git hooks 变得简单",
    "languageCode": "zh-hans"
  },
  {
    "url": "https://typicode.github.io/husky/zh/migrate-from-v4.html",
    "markdown": "# 从 v4 迁移 | Husky\n\n如果你使用 `npm` 或 `yarn` 调用 `package.json` 脚本，**你可以简单地将命令**从配置文件复制到相应的钩子：\n\nHusky v4\n\njson\n\n```\n// package.json\n{\n  \"hooks\": {\n    \"pre-commit\": \"npm test && npm run foo\"\n  }\n}\n```\n\nHusky v9\n\nshell\n\n```\n# .husky/pre-commit\n# 提示，你现在可以在多行中输入命令\nnpm test\nnpm run foo\n```\n\n如果你想调用本地安装的二进制文件，**现在你需要通过包管理器运行它们**：\n\n.huskyrc.json (v4).husky/pre-commit (v9)\n\njs\n\n```\n{\n  \"hooks\": {\n    \"pre-commit\": \"jest\"\n  }\n}\n```\n\nshell\n\n```\n# ...\nnpx --no jest\n# 或者\nyarn jest\n```\n\n`HUSKY_GIT_PARAMS` 环境变量现在替换成原生参数 `$1`、`$2`。\n\n.huskyrc.json (v4).husky/commit-msg (v9)\n\njs\n\n```\n{\n  \"hooks\": {\n    \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\n  }\n}\n```\n\nshell\n\n```\n# ...\nnpx --no -- commitlint --edit $1\n# 或者\nyarn commitlint --edit $1\n```\n\n其他环境变量的变化：\n\n*   `HUSKY_SKIP_HOOKS` 替换成 `HUSKY`.\n*   `HUSKY_SKIP_INSTALL` 替换成 `HUSKY`.\n*   `HUSKY_GIT_PARAMS` 被移除。取而代之的是 Git 参数应该直接在脚本中使用（例如 `$1`）。\n*   本地安装工具的 `PATH` 不再自动设置，你需要使用包管理器来运行它们。",
    "title": "从 v4 迁移 | Husky",
    "description": "使 Git hooks 变得简单",
    "languageCode": "zh-hans"
  }
]