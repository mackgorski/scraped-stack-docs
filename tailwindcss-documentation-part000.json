[
  {
    "url": "https://tailwindcss.com/docs/",
    "markdown": "# Installation - Tailwind CSS\n\nInstallation\n\n## Get started with Tailwind CSS\n\nTailwind CSS works by scanning all of your HTML files, JavaScript components, and any other templates for class names, generating the corresponding styles and then writing them to a static CSS file.\n\nIt's fast, flexible, and reliable — with zero-runtime.\n\n*   ## [Tailwind CLI](https://tailwindcss.com/docs/installation)\n    \n*   ## [Using PostCSS](https://tailwindcss.com/docs/installation/using-postcss)\n    \n*   ## [Framework Guides](https://tailwindcss.com/docs/installation/framework-guides)\n    \n*   ## [Play CDN](https://tailwindcss.com/docs/installation/play-cdn)\n    \n\n### Installing Tailwind CLI\n\nThe simplest and fastest way to get up and running with Tailwind CSS from scratch is with the Tailwind CLI tool. The CLI is also available as a [standalone executable](https://tailwindcss.com/blog/standalone-cli) if you want to use it without installing Node.js.\n\n![](https://tailwindcss.com/_next/static/media/installation.50c59fdd.jpg)\n\n1.  #### Install Tailwind CSS\n    \n    Install `tailwindcss` via npm, and create your `tailwind.config.js` file.\n    \n    ```\n    npm install -D tailwindcssnpx tailwindcss init\n    ```\n    \n2.  #### Configure your template paths\n    \n    Add the paths to all of your template files in your `tailwind.config.js` file.\n    \n    ```\n    /** @type {import('tailwindcss').Config} */\n    module.exports = {\n      content: [\"./src/**/*.{html,js}\"],\n      theme: {\n        extend: {},\n      },\n      plugins: [],\n    }\n    ```\n    \n3.  #### Add the Tailwind directives to your CSS\n    \n    Add the `@tailwind` directives for each of Tailwind’s layers to your main CSS file.\n    \n    ```\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n    ```\n    \n4.  #### Start the Tailwind CLI build process\n    \n    Run the CLI tool to scan your template files for classes and build your CSS.\n    \n    ```\n    npx tailwindcss -i ./src/input.css -o ./src/output.css --watch\n    ```\n    \n5.  #### Start using Tailwind in your HTML\n    \n    Add your compiled CSS file to the `<head>` and start using Tailwind’s utility classes to style your content.\n    \n    ```\n    <!doctype html>\n    <html>\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <link href=\"./output.css\" rel=\"stylesheet\">\n    </head>\n    <body>\n      <h1 class=\"text-3xl font-bold underline\">\n        Hello world!\n      </h1>\n    </body>\n    </html>\n    ```\n    \n\n## What to read next\n\nGet familiar with some of the core concepts that make Tailwind CSS different from writing traditional CSS.\n\n*   ### [Utility-First Fundamentals](https://tailwindcss.com/docs/utility-first)\n    \n    Using a utility-first workflow to build complex components from a constrained set of primitive utilities.\n    \n*   ### [Responsive Design](https://tailwindcss.com/docs/responsive-design)\n    \n    Build fully responsive user interfaces that adapt to any screen size using responsive modifiers.\n    \n\n*   ### [Dark Mode](https://tailwindcss.com/docs/dark-mode)\n    \n    Optimize your site for dark mode directly in your HTML using the dark mode modifier.\n    \n*   ### [Reusing Styles](https://tailwindcss.com/docs/reusing-styles)\n    \n    Manage duplication and keep your projects maintainable by creating reusable abstractions.",
    "title": "Installation - Tailwind CSS",
    "description": "The simplest and fastest way to get up and running with Tailwind CSS from scratch is with the Tailwind CLI tool.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/break-after",
    "markdown": "# Break After - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the break-after behavior](#setting-the-break-after-behavior)\n\nUse the `break-after-*` utilities to control how a column or page break should behave after an element. For example, use the `break-after-column` utility to force a column break after an element.\n\n```\n<div class=\"columns-2\">\n  <p>Well, let me tell you something, ...</p>\n  <p class=\"break-after-column\">Sure, go ahead, laugh...</p>\n  <p>Maybe we can live without...</p>\n  <p>Look. If you think this is...</p>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:break-after-column` to only apply the `break-after-column` utility on hover.\n\n```\n<div class=\"hover:break-after-column\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:break-after-column` to apply the `break-after-column` utility at only medium screen sizes and above.\n\n```\n<div class=\"md:break-after-column\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Break After - Tailwind CSS",
    "description": "Utilities for controlling how a column or page should break after an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/break-before",
    "markdown": "# Break Before - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the break-before behavior](#setting-the-break-before-behavior)\n\nUse the `break-before-*` utilities to control how a column or page break should behave before an element. For example, use the `break-before-column` utility to force a column break before an element.\n\n```\n<div class=\"columns-2\">\n  <p>Well, let me tell you something, ...</p>\n  <p class=\"break-before-column\">Sure, go ahead, laugh...</p>\n  <p>Maybe we can live without...</p>\n  <p>Look. If you think this is...</p>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:break-before-column` to only apply the `break-before-column` utility on hover.\n\n```\n<div class=\"hover:break-before-column\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:break-before-column` to apply the `break-before-column` utility at only medium screen sizes and above.\n\n```\n<div class=\"md:break-before-column\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Break Before - Tailwind CSS",
    "description": "Utilities for controlling how a column or page should break before an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/break-inside",
    "markdown": "# Break Inside - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the break-inside behavior](#setting-the-break-inside-behavior)\n\nUse the `break-inside-*` utilities to control how a column or page break should behave within an element. For example, use the `break-inside-avoid-column` utility to avoid a column break within an element.\n\n```\n<div class=\"columns-2\">\n  <p>Well, let me tell you something, ...</p>\n  <p class=\"break-inside-avoid-column\">Sure, go ahead, laugh...</p>\n  <p>Maybe we can live without...</p>\n  <p>Look. If you think this is...</p>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:break-inside-avoid-column` to only apply the `break-inside-avoid-column` utility on hover.\n\n```\n<div class=\"hover:break-inside-avoid-column\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:break-inside-avoid-column` to apply the `break-inside-avoid-column` utility at only medium screen sizes and above.\n\n```\n<div class=\"md:break-inside-avoid-column\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Break Inside - Tailwind CSS",
    "description": "Utilities for controlling how a column or page should break within an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/box-decoration-break",
    "markdown": "# Box Decoration Break - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the box decoration break](#setting-the-box-decoration-break)\n\nUse the `box-decoration-slice` and `box-decoration-clone` utilities to control whether properties like background, border, border-image, box-shadow, clip-path, margin, and padding should be rendered as if the element were one continuous fragment, or distinct blocks.\n\n```\n<span class=\"box-decoration-slice bg-gradient-to-r from-indigo-600 to-pink-500 text-white px-2 ...\">\n  Hello<br />\n  World\n</span>\n<span class=\"box-decoration-clone bg-gradient-to-r from-indigo-600 to-pink-500 text-white px-2 ...\">\n  Hello<br />\n  World\n</span>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:box-decoration-slice` to only apply the `box-decoration-slice` utility on hover.\n\n```\n<div class=\"box-decoration-clone hover:box-decoration-slice\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:box-decoration-slice` to apply the `box-decoration-slice` utility at only medium screen sizes and above.\n\n```\n<div class=\"box-decoration-clone md:box-decoration-slice\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Box Decoration Break - Tailwind CSS",
    "description": "Utilities for controlling how element fragments should be rendered across multiple lines, columns, or pages.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/box-sizing",
    "markdown": "# Box Sizing - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Including borders and padding](#including-borders-and-padding)\n\nUse the `box-border` utility to set an element’s `box-sizing` to `border-box`, telling the browser to include the element’s borders and padding when you give it a height or width.\n\nThis means a 100px × 100px element with a 2px border and 4px of padding on all sides will be rendered as 100px × 100px, with an internal content area of 88px × 88px.\n\nTailwind makes this the default for all elements in our [preflight base styles](https://tailwindcss.com/docs/preflight).\n\n```\n<div class=\"box-border h-32 w-32 p-4 border-4 ...\">\n  <!-- ... -->\n</div>\n```\n\n### [​Excluding borders and padding](#excluding-borders-and-padding)\n\nUse the `box-content` utility to set an element’s `box-sizing` to `content-box`, telling the browser to add borders and padding on top of the element’s specified width or height.\n\nThis means a 100px × 100px element with a 2px border and 4px of padding on all sides will actually be rendered as 112px × 112px, with an internal content area of 100px × 100px.\n\n```\n<div class=\"box-content h-32 w-32 p-4 border-4 ...\">\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:box-content` to only apply the `box-content` utility on hover.\n\n```\n<div class=\"box-border hover:box-content\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:box-content` to apply the `box-content` utility at only medium screen sizes and above.\n\n```\n<div class=\"box-border md:box-content\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Box Sizing - Tailwind CSS",
    "description": "Utilities for controlling how the browser should calculate an element's total size.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/display",
    "markdown": "# Display - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Block & Inline](#block-and-inline)\n\nUse the `inline`, `inline-block`, and `block` utilities to control the flow of text and elements.\n\n```\n<div>\n  When controlling the flow of text, using the CSS property\n  <span class=\"inline\">display: inline</span>\n  will cause the text inside the element to wrap normally.\n\n  While using the property <span class=\"inline-block\">display: inline-block</span>\n  will wrap the element to prevent the text inside from extending beyond its parent.\n\n  Lastly, using the property <span class=\"block\">display: block</span>\n  will put the element on its own line and fill its parent.\n</div>\n```\n\n### [​Flow Root](#flow-root)\n\nUse the `flow-root` utility to create a block-level element with its own [block formatting context](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context).\n\n```\n<div class=\"p-4\">\n  <div class=\"flow-root ...\">\n    <div class=\"my-4 ...\">Well, let me tell you something, ...</div>\n  </div>\n  <div class=\"flow-root ...\">\n    <div class=\"my-4 ...\">Sure, go ahead, laugh if you want...</div>\n  </div>\n</div>\n```\n\n### [​Flex](#flex)\n\nUse the `flex` utility to create a block-level flex container.\n\n```\n<div class=\"flex items-center\">\n  <img src=\"path/to/image.jpg\">\n  <div>\n    <strong>Andrew Alfred</strong>\n    <span>Technical advisor</span>\n  </div>\n</div>\n```\n\n### [​Inline Flex](#inline-flex)\n\nUse the `inline-flex` utility to create an inline flex container that flows with text.\n\n```\n<p>\n  Today I spent most of the day researching ways to ...\n  <span class=\"inline-flex items-baseline\">\n    <img src=\"path/to/image.jpg\" alt=\"\" class=\"self-center w-5 h-5 rounded-full mx-1\" />\n    <span>Kramer</span>\n  </span>\n  keeps telling me there is no way to make it work, that ...\n</p>\n```\n\n### [​Grid](#grid)\n\nUse the `grid` utility to create a grid container.\n\n```\n<div class=\"grid gap-4 grid-cols-3 grid-rows-3\">\n  <!-- ... -->\n</div>\n```\n\n### [​Inline Grid](#inline-grid)\n\nUse the `inline-grid` utility to create an inline grid container.\n\n```\n<span class=\"inline-grid grid-cols-3 gap-4\">\n  <span>01</span>\n  <span>02</span>\n  <span>03</span>\n  <span>04</span>\n  <span>05</span>\n  <span>06</span>\n</span>\n<span class=\"inline-grid grid-cols-3 gap-4\">\n  <span>01</span>\n  <span>02</span>\n  <span>03</span>\n  <span>04</span>\n  <span>05</span>\n  <span>06</span>\n</span>\n```\n\n### [​Contents](#contents)\n\nUse the `contents` utility to create a “phantom” container whose children act like direct children of the parent.\n\n```\n<div class=\"flex ...\">\n  <div class=\"flex-1 ...\">01</div>\n  <div class=\"contents\">\n    <div class=\"flex-1 ...\">02</div>\n    <div class=\"flex-1 ...\">03</div>\n  </div>\n  <div class=\"flex-1 ...\">04</div>\n</div>\n```\n\n### [​Table](#table)\n\nUse the `table`, `table-row`, `table-cell`, `table-caption`, `table-column`, `table-column-group`, `table-header-group`, `table-row-group`, and `table-footer-group` utilities to create elements that behave like their respective table elements.\n\n```\n<div class=\"table w-full ...\">\n  <div class=\"table-header-group ...\">\n    <div class=\"table-row\">\n      <div class=\"table-cell text-left ...\">Song</div>\n      <div class=\"table-cell text-left ...\">Artist</div>\n      <div class=\"table-cell text-left ...\">Year</div>\n    </div>\n  </div>\n  <div class=\"table-row-group\">\n    <div class=\"table-row\">\n      <div class=\"table-cell ...\">The Sliding Mr. Bones (Next Stop, Pottersville)</div>\n      <div class=\"table-cell ...\">Malcolm Lockyer</div>\n      <div class=\"table-cell ...\">1961</div>\n    </div>\n    <div class=\"table-row\">\n      <div class=\"table-cell ...\">Witchy Woman</div>\n      <div class=\"table-cell ...\">The Eagles</div>\n      <div class=\"table-cell ...\">1972</div>\n    </div>\n    <div class=\"table-row\">\n      <div class=\"table-cell ...\">Shining Star</div>\n      <div class=\"table-cell ...\">Earth, Wind, and Fire</div>\n      <div class=\"table-cell ...\">1975</div>\n    </div>\n  </div>\n</div>\n```\n\n### [​Hidden](#hidden)\n\nUse the `hidden` utility to set an element to `display: none` and remove it from the page layout (compare with `invisible` from the [visibility](https://tailwindcss.com/docs/visibility#invisible) documentation).\n\n```\n<div class=\"flex ...\">\n  <div class=\"hidden ...\">01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:inline-flex` to only apply the `inline-flex` utility on hover.\n\n```\n<div class=\"flex hover:inline-flex\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:inline-flex` to apply the `inline-flex` utility at only medium screen sizes and above.\n\n```\n<div class=\"flex md:inline-flex\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Display - Tailwind CSS",
    "description": "Utilities for controlling the display box type of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/float",
    "markdown": "# Floats - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Floating elements to the right](#floating-elements-to-the-right)\n\nUse the `float-right` utility to float an element to the right of its container.\n\n```\n<img class=\"float-right ...\" src=\"path/to/image.jpg\">\n<p>Maybe we can live without libraries, people like you and me. ...</p>\n```\n\n### [​Floating elements to the left](#floating-elements-to-the-left)\n\nUse the `float-left` utility to float an element to the left of its container.\n\n```\n<img class=\"float-left ...\" src=\"path/to/image.jpg\">\n<p>Maybe we can live without libraries, people like you and me. ...</p>\n```\n\n### [​Disabling a float](#disabling-a-float)\n\nUse the `float-none` utility to reset any floats that are applied to an element. This is the default value for the float property.\n\n```\n<img class=\"float-none ...\" src=\"path/to/image.jpg\">\n<p>Maybe we can live without libraries, people like you and me. ...</p>\n```\n\n### [​Using logical properties](#using-logical-properties)\n\nUse the `float-start` or `float-end` utilities, which use [logical properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties/Basic_concepts) to map to either the left or right side based on the text direction.\n\n```\n<img class=\"float-start ...\" src=\"path/to/image.jpg\">\n<p>Maybe we can live without libraries, people like you and me. ...</p>\n\n<img class=\"float-start ...\" src=\"path/to/image.jpg\">\n<p dir=\"rtl\">... ربما يمكننا العيش بدون مكتبات، أشخاص مثلي ومثلك. ربما. بالتأكيد </p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:float-right` to only apply the `float-right` utility on hover.\n\n```\n<img class=\"float-right hover:float-left\" src=\"path/to/image.jpg\">\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:float-right` to apply the `float-right` utility at only medium screen sizes and above.\n\n```\n<img class=\"float-right md:float-left\" src=\"path/to/image.jpg\">\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Floats - Tailwind CSS",
    "description": "Utilities for controlling the wrapping of content around an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/clear",
    "markdown": "# Clear - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Clearing left-floated elements](#clearing-left-floated-elements)\n\nUse the `clear-left` utility to position an element below any preceding left-floated elements.\n\n```\n<article>\n  <img class=\"float-left ...\" src=\"path/to/image.jpg\">\n  <img class=\"float-right ...\" src=\"path/to/image.jpg\">\n  <p class=\"clear-left ...\">Maybe we can live without libraries...</p>\n</article>\n```\n\n### [​Clearing right-floated elements](#clearing-right-floated-elements)\n\nUse the `clear-right` utility to position an element below any preceding right-floated elements.\n\n```\n<article>\n  <img class=\"float-left ...\" src=\"path/to/image.jpg\">\n  <img class=\"float-right ...\" src=\"path/to/image.jpg\">\n  <p class=\"clear-right ...\">Maybe we can live without libraries...</p>\n</article>\n```\n\n### [​Clearing all floated elements](#clearing-all-floated-elements)\n\nUse the `clear-both` utility to position an element below all preceding floated elements.\n\n```\n<article>\n  <img class=\"float-left ...\" src=\"path/to/image.jpg\">\n  <img class=\"float-right ...\" src=\"path/to/image.jpg\">\n  <p class=\"clear-both ...\">Maybe we can live without libraries...</p>\n</article>\n```\n\n### [​Disabling applied clears](#disabling-applied-clears)\n\nUse the `clear-none` utility to reset any clears that are applied to an element. This is the default value for the clear property.\n\n```\n<article>\n  <img class=\"float-left ...\" src=\"path/to/image.jpg\">\n  <img class=\"float-right ...\" src=\"path/to/image.jpg\">\n  <p class=\"clear-none ...\">Maybe we can live without libraries...</p>\n</article>\n```\n\n### [​Using logical properties](#using-logical-properties)\n\nUse the `clear-start` or `clear-end` [logical properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties/Basic_concepts), which map to either the left or right side based on the text direction.\n\n```\n<article dir=\"rtl\">\n  <img class=\"float-start ...\" src=\"path/to/image.jpg\">\n  <img class=\"float-end ...\" src=\"path/to/image.jpg\">\n  <p class=\"clear-end ...\">...ربما يمكننا العيش بدون مكتبات،</p>\n</article>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:clear-none` to only apply the `clear-none` utility on hover.\n\n```\n<p class=\"clear-left hover:clear-none\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:clear-none` to apply the `clear-none` utility at only medium screen sizes and above.\n\n```\n<p class=\"clear-left md:clear-none\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Clear - Tailwind CSS",
    "description": "Utilities for controlling the wrapping of content around an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/isolation",
    "markdown": "# Isolation - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the stacking context](#setting-the-stacking-context)\n\nUse the `isolate` and `isolation-auto` utilities to control whether an element should explicitly create a new stacking context.\n\n```\n<div class=\"isolate ...\">\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:isolation-auto` to only apply the `isolation-auto` utility on hover.\n\n```\n<div class=\"isolate hover:isolation-auto\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:isolation-auto` to apply the `isolation-auto` utility at only medium screen sizes and above.\n\n```\n<div class=\"isolate md:isolation-auto\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Isolation - Tailwind CSS",
    "description": "Utilities for controlling whether an element should explicitly create a new stacking context.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/object-fit",
    "markdown": "# Object Fit - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Resizing to cover a container](#resizing-to-cover-a-container)\n\nUse the `object-cover` utility to resize an element’s content to cover its container.\n\n```\n<div class=\"bg-indigo-300 ...\">\n  <img class=\"object-cover h-48 w-96 ...\">\n</div>\n```\n\n### [​Containing an element](#containing-an-element)\n\nUse the `object-contain` utility to resize an element’s content to stay contained within its container.\n\n```\n<div class=\"bg-purple-300 ...\">\n  <img class=\"object-contain h-48 w-96 ...\">\n</div>\n```\n\n### [​Stretching to fit a container](#stretching-to-fit-a-container)\n\nUse the `object-fill` utility to stretch an element’s content to fit its container.\n\n```\n<div class=\"bg-sky-300 ...\">\n  <img class=\"object-fill h-48 w-96 ...\">\n</div>\n```\n\n### [​Scaling down if too large](#scaling-down-if-too-large)\n\nUse the `object-scale-down` utility to display an element’s content at its original size but scale it down to fit its container if necessary.\n\n```\n<div class=\"bg-cyan-300\">\n  <img class=\"object-scale-down h-48 w-96 ...\">\n</div>\n```\n\n### [​Using an element’s original size](#using-an-elements-original-size)\n\nUse the `object-none` utility to display an element’s content at its original size ignoring the container size.\n\n```\n<div class=\"bg-yellow-300\">\n  <img class=\"object-none h-48 w-96 ...\">\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:object-scale-down` to only apply the `object-scale-down` utility on hover.\n\n```\n<img class=\"object-contain hover:object-scale-down\">\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:object-scale-down` to apply the `object-scale-down` utility at only medium screen sizes and above.\n\n```\n<img class=\"object-contain md:object-scale-down\">\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Object Fit - Tailwind CSS",
    "description": "Utilities for controlling how a replaced element's content should be resized.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/size",
    "markdown": "# Size - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Fixed sizes](#fixed-sizes)\n\nUse utilities like `size-px`, `size-1`, and `size-64` to set an element to a fixed width and height at the same time.\n\n```\n<div class=\"size-16 ...\">size-16</div>\n<div class=\"size-20 ...\">size-20</div>\n<div class=\"size-24 ...\">size-24</div>\n<div class=\"size-32 ...\">size-32</div>\n<div class=\"size-40 ...\">size-40</div>\n```\n\n### [​Percentage sizes](#percentage-sizes)\n\nUse `size-full` to set an element’s width and height to be 100% of the parent container’s width and height.\n\n```\n<div class=\"h-56 p-2 ...\">\n  <div class=\"size-full ...\">size-full</div>\n</div>\n```\n\n### [​Resetting the size](#resetting-the-size)\n\nThe `size-auto` utility can be useful if you need to remove an element’s assigned width and height under a specific condition, like at a particular breakpoint:\n\n```\n<div class=\"size-full md:size-auto\">\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:size-full` to only apply the `size-full` utility on hover.\n\n```\n<div class=\"size-48 hover:size-full\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:size-full` to apply the `size-full` utility at only medium screen sizes and above.\n\n```\n<div class=\"size-48 md:size-full\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind’s size scale is a combination of the [default spacing scale](https://tailwindcss.com/docs/customizing-spacing#default-spacing-scale) as well as some additional values specific to sizing.\n\nYou can customize your spacing scale by editing `theme.spacing` or `theme.extend.spacing` in your `tailwind.config.js` file.\n\nTo customize size separately, use the `theme.size` section of your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `size` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"size-[32rem]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Size - Tailwind CSS",
    "description": "Utilities for setting the width and height of an element at the same time.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/object-position",
    "markdown": "# Object Position - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Positioning a replaced element](#positioning-a-replaced-element)\n\nUse the `object-*` utilities to specify how a replaced element’s content should be positioned within its container.\n\n```\n<img class=\"object-none object-left-top bg-yellow-300 w-24 h-24 ...\" src=\"...\">\n<img class=\"object-none object-top bg-yellow-300 w-24 h-24 ...\" src=\"...\">\n<img class=\"object-none object-right-top bg-yellow-300 w-24 h-24 ...\" src=\"...\">\n<img class=\"object-none object-left bg-yellow-300 w-24 h-24 ...\" src=\"...\">\n<img class=\"object-none object-center bg-yellow-300 w-24 h-24 ...\" src=\"...\">\n<img class=\"object-none object-right bg-yellow-300 w-24 h-24 ...\" src=\"...\">\n<img class=\"object-none object-left-bottom bg-yellow-300 w-24 h-24 ...\" src=\"...\">\n<img class=\"object-none object-bottom bg-yellow-300 w-24 h-24 ...\" src=\"...\">\n<img class=\"object-none object-right-bottom bg-yellow-300 w-24 h-24 ...\" src=\"...\">\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:object-top` to only apply the `object-top` utility on hover.\n\n```\n<img class=\"object-center hover:object-top\" src=\"...\">\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:object-top` to apply the `object-top` utility at only medium screen sizes and above.\n\n```\n<img class=\"object-center md:object-top\" src=\"...\">\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides nine object position utilities. You can customize these values by editing `theme.objectPosition` or `theme.extend.objectPosition` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `object-position` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<img class=\"object-[center_bottom]\" src=\"...\">\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Object Position - Tailwind CSS",
    "description": "Utilities for controlling how a replaced element's content should be positioned within its container.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/grid-column",
    "markdown": "# Grid Column Start / End\n\n## [​Basic usage](#basic-usage)\n\n### [​Spanning columns](#spanning-columns)\n\nUse the `col-span-*` utilities to make an element span _n_ columns.\n\n```\n<div class=\"grid grid-cols-3 gap-4\">\n  <div class=\"...\">01</div>\n  <div class=\"...\">02</div>\n  <div class=\"...\">03</div>\n  <div class=\"col-span-2 ...\">04</div>\n  <div class=\"...\">05</div>\n  <div class=\"...\">06</div>\n  <div class=\"col-span-2 ...\">07</div>\n</div>\n```\n\n### [​Starting and ending lines](#starting-and-ending-lines)\n\nUse the `col-start-*` and `col-end-*` utilities to make an element start or end at the _nth_ grid line. These can also be combined with the `col-span-*` utilities to span a specific number of columns.\n\nNote that CSS grid lines start at 1, not 0, so a full-width element in a 6-column grid would start at line 1 and end at line 7.\n\n```\n<div class=\"grid grid-cols-6 gap-4\">\n  <div class=\"col-start-2 col-span-4 ...\">01</div>\n  <div class=\"col-start-1 col-end-3 ...\">02</div>\n  <div class=\"col-end-7 col-span-2 ...\">03</div>\n  <div class=\"col-start-1 col-end-7 ...\">04</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:col-span-6` to only apply the `col-span-6` utility on hover.\n\n```\n<div class=\"col-span-2 hover:col-span-6\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:col-span-6` to apply the `col-span-6` utility at only medium screen sizes and above.\n\n```\n<div class=\"col-span-2 md:col-span-6\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind includes grid-column utilities for working with grids with up to 12 columns. You change, add, or remove these by customizing the `gridColumn`, `gridColumnStart`, and `gridColumnEnd` sections of your Tailwind theme config.\n\nTo add new `col-*` utilities, customize the `gridColumn` section of your Tailwind theme config:\n\nWe use this internally for our `col-span-*` utilities. Note that since this configures the `grid-column` shorthand property directly, we include the word `span` directly in the value name, it’s _not_ baked into the class name automatically. That means you are free to add entries that do whatever you want here — they don’t just have to be `span` utilities.\n\nTo add new `col-start-*` utilities, customize the `gridColumnStart` section of your Tailwind theme config:\n\nTo add new `col-end-*` utilities, customize the `gridColumnEnd` section of your Tailwind theme config:\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off grid column value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"col-[16_/_span_16]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Grid Column Start / End - Tailwind CSS",
    "description": "Utilities for controlling how elements are sized and placed across grid columns.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/overflow",
    "markdown": "# Overflow - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Showing content that overflows](#showing-content-that-overflows)\n\nUse the `overflow-visible` utility to prevent content within an element from being clipped. Note that any content that overflows the bounds of the element will then be visible.\n\n```\n<div class=\"overflow-visible ...\"></div>\n```\n\n### [​Hiding content that overflows](#hiding-content-that-overflows)\n\nUse the `overflow-hidden` utility to clip any content within an element that overflows the bounds of that element.\n\n```\n<div class=\"overflow-hidden ...\"></div>\n```\n\n### [​Scrolling if needed](#scrolling-if-needed)\n\nUse the `overflow-auto` utility to add scrollbars to an element in the event that its content overflows the bounds of that element. Unlike `overflow-scroll`, which always shows scrollbars, this utility will only show them if scrolling is necessary.\n\n```\n<div class=\"overflow-auto ...\"></div>\n```\n\n### [​Scrolling horizontally if needed](#scrolling-horizontally-if-needed)\n\nUse the `overflow-x-auto` utility to allow horizontal scrolling if needed.\n\n```\n<div class=\"overflow-x-auto ...\"></div>\n```\n\n### [​Scrolling vertically if needed](#scrolling-vertically-if-needed)\n\nUse the `overflow-y-auto` utility to allow vertical scrolling if needed.\n\n```\n<div class=\"overflow-y-auto h-32 ...\"></div>\n```\n\n### [​Scrolling horizontally always](#scrolling-horizontally-always)\n\nUse the `overflow-x-scroll` utility to allow horizontal scrolling and always show scrollbars unless always-visible scrollbars are disabled by the operating system.\n\n```\n<div class=\"overflow-x-scroll ...\"></div>\n```\n\n### [​Scrolling vertically always](#scrolling-vertically-always)\n\nUse the `overflow-y-scroll` utility to allow vertical scrolling and always show scrollbars unless always-visible scrollbars are disabled by the operating system.\n\n```\n<div class=\"overflow-y-scroll ...\"></div>\n```\n\n### [​Scrolling in all directions](#scrolling-in-all-directions)\n\nUse the `overflow-scroll` utility to add scrollbars to an element. Unlike `overflow-auto`, which only shows scrollbars if they are necessary, this utility always shows them. Note that some operating systems (like macOS) hide unnecessary scrollbars regardless of this setting.\n\n```\n<div class=\"overflow-scroll ...\"></div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:overflow-scroll` to only apply the `overflow-scroll` utility on hover.\n\n```\n<div class=\"overflow-auto hover:overflow-scroll\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:overflow-scroll` to apply the `overflow-scroll` utility at only medium screen sizes and above.\n\n```\n<div class=\"overflow-auto md:overflow-scroll\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Overflow - Tailwind CSS",
    "description": "Utilities for controlling how an element handles content that is too large for the container.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/whitespace",
    "markdown": "# Whitespace - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Normal](#normal)\n\nUse `whitespace-normal` to cause text to wrap normally within an element. Newlines and spaces will be collapsed.\n\n```\n<div class=\"w-3/4 ...\">\n  <div class=\"whitespace-normal ...\">Hey everyone!\n\nIt's almost 2022       and we still don't know if there       is aliens living among us, or do we? Maybe the person writing this is an alien.\n\nYou will never know.</div>\n</div>\n```\n\n### [​No Wrap](#no-wrap)\n\nUse `whitespace-nowrap` to prevent text from wrapping within an element. Newlines and spaces will be collapsed.\n\n```\n<div class=\"w-3/4 overflow-x-auto ...\">\n  <div class=\"whitespace-nowrap ...\">Hey everyone!\n\nIt's almost 2022       and we still don't know if there       is aliens living among us, or do we? Maybe the person writing this is an alien.\n\nYou will never know.</div>\n</div>\n```\n\n### [​Pre](#pre)\n\nUse `whitespace-pre` to preserve newlines and spaces within an element. Text will not be wrapped.\n\n```\n<div class=\"w-3/4 overflow-x-auto ...\">\n  <div class=\"whitespace-pre ...\">Hey everyone!\n\nIt's almost 2022       and we still don't know if there       is aliens living among us, or do we? Maybe the person writing this is an alien.\n\nYou will never know.</div>\n</div>\n```\n\n### [​Pre Line](#pre-line)\n\nUse `whitespace-pre-line` to preserve newlines but not spaces within an element. Text will be wrapped normally.\n\n```\n<div class=\"w-3/4 ...\">\n  <div class=\"whitespace-pre-line ...\">Hey everyone!\n\nIt's almost 2022       and we still don't know if there       is aliens living among us, or do we? Maybe the person writing this is an alien.\n\nYou will never know.</div>\n</div>\n```\n\n### [​Pre Wrap](#pre-wrap)\n\nUse `whitespace-pre-wrap` to preserve newlines and spaces within an element. Text will be wrapped normally.\n\n```\n<div class=\"w-3/4 ...\">\n  <div class=\"whitespace-pre-wrap ...\">Hey everyone!\n\nIt's almost 2022       and we still don't know if there       is aliens living among us, or do we? Maybe the person writing this is an alien.\n\nYou will never know.</div>\n</div>\n```\n\n### [​Break Spaces](#break-spaces)\n\nUse `whitespace-break-spaces` to preserve newlines and spaces within an element. White space at the end of lines will not hang, but will wrap to the next line.\n\n```\n<div class=\"w-3/4 ...\">\n  <div class=\"whitespace-break-spaces ...\">Hey everyone!\n\nIt's almost 2022       and we still don't know if there       is aliens living among us, or do we? Maybe the person writing this is an alien.\n\nYou will never know.</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:whitespace-pre` to only apply the `whitespace-pre` utility on hover.\n\n```\n<div class=\"whitespace-normal hover:whitespace-pre\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:whitespace-pre` to apply the `whitespace-pre` utility at only medium screen sizes and above.\n\n```\n<div class=\"whitespace-normal md:whitespace-pre\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Whitespace - Tailwind CSS",
    "description": "Utilities for controlling an element's white-space property.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/font-family",
    "markdown": "# Font Family - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the font family](#setting-the-font-family)\n\nYou can control the typeface of text using the font family utilities.\n\n```\n<p class=\"font-sans ...\">The quick brown fox ...</p>\n<p class=\"font-serif ...\">The quick brown fox ...</p>\n<p class=\"font-mono ...\">The quick brown fox ...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:font-serif` to only apply the `font-serif` utility on hover.\n\n```\n<p class=\"font-sans hover:font-serif\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:font-serif` to apply the `font-serif` utility at only medium screen sizes and above.\n\n```\n<p class=\"font-sans md:font-serif\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides three font family utilities: a cross-browser sans-serif stack, a cross-browser serif stack, and a cross-browser monospaced stack. You can change, add, or remove these by editing the `theme.fontFamily` section of your Tailwind config.\n\nFont families can be specified as an array or as a simple comma-delimited string:\n\n```\n{\n  // Array format:\n  'sans': ['Helvetica', 'Arial', 'sans-serif'],\n\n  // Comma-delimited format:\n  'sans': 'Helvetica, Arial, sans-serif',\n}\n```\n\nNote that **Tailwind does not automatically escape font names** for you. If you’re using a font that contains an invalid identifier, wrap it in quotes or escape the invalid characters.\n\n```\n{\n  // Won't work:\n  'sans': ['Exo 2', ...],\n\n  // Add quotes:\n  'sans': ['\"Exo 2\"', ...],\n\n  // ...or escape the space:\n  'sans': ['Exo\\\\ 2', ...],\n}\n```\n\nLike any other web project, make sure to include the necessary `@font-face` or `@import` rules in your CSS for any custom fonts you’re using so that those fonts are loaded by the browser for your site:\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n#### [​Providing default font settings](#providing-default-font-settings)\n\nYou can optionally provide default [font-feature-settings](https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings) and [font-variation-settings](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variation-settings) for each font in your project using a tuple of the form `[fontFamilies, { fontFeatureSettings, fontVariationSettings }]` when configuring custom fonts.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `font-family` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<p class=\"font-['Open_Sans']\">\n  <!-- ... -->\n</p>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.\n\n### [​Customizing the default font](#customizing-the-default-font)\n\nFor convenience, [Preflight](https://tailwindcss.com/docs/preflight) sets the font family on the `html` element to match your configured `sans` font, so one way to change the default font for your project is to customize the `sans` key in your `fontFamily` configuration:\n\nYou can also customize the default font used in your project by [adding a custom base style](https://tailwindcss.com/docs/adding-custom-styles#adding-base-styles) that sets the `font-family` property explicitly:\n\nThis is the best approach if you have customized your font family utilities to have different names and don’t want there to be `font-sans` utility available in your project.",
    "title": "Font Family - Tailwind CSS",
    "description": "Utilities for controlling the font family of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/grid-template-rows",
    "markdown": "# Grid Template Rows - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Specifying the rows in a grid](#specifying-the-rows-in-a-grid)\n\nUse the `grid-rows-*` utilities to create grids with _n_ equally sized rows.\n\n```\n<div class=\"grid grid-rows-4 grid-flow-col gap-4\">\n  <div>01</div>\n  <!-- ... -->\n  <div>09</div>\n</div>\n```\n\n### [​Subgrid](#subgrid)\n\nUse the `grid-rows-subgrid` utility to adopt the row tracks defined by the item’s parent.\n\n```\n<div class=\"grid grid-rows-4 grid-flow-col gap-4\">\n  <div>01</div>\n  <!-- ... -->\n  <div>05</div>\n  <div class=\"grid grid-rows-subgrid gap-4 row-span-3\">\n      <div class=\"row-start-2\">06</div>\n  </div>\n  <div>07</div>\n  <!-- ... -->\n  <div>10</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:grid-rows-6` to only apply the `grid-rows-6` utility on hover.\n\n```\n<div class=\"grid grid-rows-2 hover:grid-rows-6\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:grid-rows-6` to apply the `grid-rows-6` utility at only medium screen sizes and above.\n\n```\n<div class=\"grid grid-rows-2 md:grid-rows-6\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind includes `grid-template-row` utilities for creating basic grids with up to 12 equal width rows. You can customize these values by editing `theme.gridTemplateRows` or `theme.extend.gridTemplateRows` in your `tailwind.config.js` file.\n\nYou have direct access to the `grid-template-rows` CSS property here so you can make your custom rows values as generic or as complicated and site-specific as you like.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `grid-template-rows` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"grid grid-rows-[200px_minmax(900px,_1fr)_100px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Grid Template Rows - Tailwind CSS",
    "description": "Utilities for specifying the rows in a grid layout.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/font-size",
    "markdown": "# Font Size - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the font size](#setting-the-font-size)\n\nUse the `text-*` utilities to control the font size of an element.\n\n```\n<p class=\"text-sm ...\">The quick brown fox ...</p>\n<p class=\"text-base ...\">The quick brown fox ...</p>\n<p class=\"text-lg ...\">The quick brown fox ...</p>\n<p class=\"text-xl ...\">The quick brown fox ...</p>\n<p class=\"text-2xl ...\">The quick brown fox ...</p>\n```\n\n### [​Setting the line-height](#setting-the-line-height)\n\nSet an element’s line-height at the same time you set the font size by adding a line-height modifier to any font size utility. For example, use `text-xl/8` to set a font size of `1.25rem` with a line-height of `2rem`.\n\n```\n<p class=\"text-base/6 ...\">So I started to walk into the water...</p>\n<p class=\"text-base/7 ...\">So I started to walk into the water...</p>\n<p class=\"text-base/loose ...\">So I started to walk into the water...</p>\n```\n\nYou can use any value defined in your [line-height scale](https://tailwindcss.com/docs/line-height), or use arbitrary values if you need to deviate from your design tokens.\n\n```\n<p class=\"text-sm/[17px] ...\"></p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:text-base` to only apply the `text-base` utility on hover.\n\n```\n<p class=\"text-sm hover:text-base\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:text-base` to apply the `text-base` utility at only medium screen sizes and above.\n\n```\n<p class=\"text-sm md:text-base\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nYou can configure your own custom set of font size utilities using the `theme.fontSize` section of your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n#### [​Providing a default line-height](#providing-a-default-line-height)\n\nTailwind’s default theme configures a sensible default `line-height` for each `font-size` utility. You can configure your own default line heights when using custom font sizes by defining each size using a tuple of the form `[fontSize, lineHeight]` in your `tailwind.config.js` file.\n\nYou can also specify a default line height using the object syntax, which allows you to also provide default `letter-spacing` and `font-weight` values. You can do this using a tuple of the form `[fontSize, { lineHeight?, letterSpacing?, fontWeight? }]`.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `font-size` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<p class=\"text-[14px]\">\n  <!-- ... -->\n</p>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Font Size - Tailwind CSS",
    "description": "Utilities for controlling the font size of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/word-break",
    "markdown": "# Word Break - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Normal](#normal)\n\nUse `break-normal` to only add line breaks at normal word break points.\n\n```\n<p class=\"break-normal ...\">...</p>\n```\n\n### [​Break Words](#break-words)\n\nUse `break-words` to add line breaks mid-word if needed.\n\n```\n<p class=\"break-words ...\">...</p>\n```\n\n### [​Break All](#break-all)\n\nUse `break-all` to add line breaks whenever necessary, without trying to preserve whole words.\n\n```\n<p class=\"break-all ...\">...</p>\n```\n\n### [​Break Keep](#break-keep)\n\nUse `break-keep` to prevent line breaks from being applied to Chinese/Japanese/Korean (CJK) text. For non-CJK text `break-keep` has the same behavior as `break-normal`.\n\n```\n<p class=\"break-keep ...\">...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:break-all` to only apply the `break-all` utility on hover.\n\n```\n<p class=\"break-normal hover:break-all\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:break-all` to apply the `break-all` utility at only medium screen sizes and above.\n\n```\n<p class=\"break-normal md:break-all\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Word Break - Tailwind CSS",
    "description": "Utilities for controlling word breaks in an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/overscroll-behavior",
    "markdown": "# Overscroll Behavior - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Preventing parent overscrolling](#preventing-parent-overscrolling)\n\nUse the `overscroll-contain` utility to prevent scrolling in the target area from triggering scrolling in the parent element, but preserve “bounce” effects when scrolling past the end of the container in operating systems that support it.\n\n```\n<div class=\"overscroll-contain ...\">Well, let me tell you something, ...</div>\n```\n\n### [​Preventing overscroll bouncing](#preventing-overscroll-bouncing)\n\nUse the `overscroll-none` utility to prevent scrolling in the target area from triggering scrolling in the parent element, and also prevent “bounce” effects when scrolling past the end of the container.\n\n```\n<div class=\"overscroll-none ...\">Well, let me tell you something, ...</div>\n```\n\n### [​Using the default overscroll behavior](#using-the-default-overscroll-behavior)\n\nUse the `overscroll-auto` utility to make it possible for the user to continue scrolling a parent scroll area when they reach the boundary of the primary scroll area.\n\n```\n<div class=\"overscroll-auto ...\">Well, let me tell you something, ...</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `focus:overscroll-contain` to only apply the `overscroll-contain` utility on focus.\n\n```\n<html class=\"overscroll-auto focus:overscroll-contain\">\n  <!-- ... -->\n</html>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:overscroll-contain` to apply the `overscroll-contain` utility at only medium screen sizes and above.\n\n```\n<html class=\"overscroll-auto md:overscroll-contain\">\n  <!-- ... -->\n</html>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Overscroll Behavior - Tailwind CSS",
    "description": "Utilities for controlling how the browser behaves when reaching the boundary of a scrolling area.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/grid-row",
    "markdown": "# Grid Row Start / End\n\n## [​Basic usage](#basic-usage)\n\n### [​Spanning rows](#spanning-rows)\n\nUse the `row-span-*` utilities to make an element span _n_ rows.\n\n```\n<div class=\"grid grid-rows-3 grid-flow-col gap-4\">\n  <div class=\"row-span-3 ...\">01</div>\n  <div class=\"col-span-2 ...\">02</div>\n  <div class=\"row-span-2 col-span-2 ...\">03</div>\n</div>\n```\n\n### [​Starting and ending lines](#starting-and-ending-lines)\n\nUse the `row-start-*` and `row-end-*` utilities to make an element start or end at the _nth_ grid line. These can also be combined with the `row-span-*` utilities to span a specific number of rows.\n\nNote that CSS grid lines start at 1, not 0, so a full-height element in a 3-row grid would start at line 1 and end at line 4.\n\n```\n<div class=\"grid grid-rows-3 grid-flow-col gap-4\">\n  <div class=\"row-start-2 row-span-2 ...\">01</div>\n  <div class=\"row-end-3 row-span-2 ...\">02</div>\n  <div class=\"row-start-1 row-end-4 ...\">03</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:row-span-4` to only apply the `row-span-4` utility on hover.\n\n```\n<div class=\"row-span-3 hover:row-span-4\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:row-span-4` to apply the `row-span-4` utility at only medium screen sizes and above.\n\n```\n<div class=\"row-span-3 md:row-span-4\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind includes grid-row utilities for working with grids with up to 6 explicit rows. You can customize these values by editing `theme.gridRow`, `theme.extend.gridRow`, `theme.gridRowStart`, `theme.extend.gridRowStart`, `theme.gridRowEnd`, and `theme.extend.gridRowEnd` in your `tailwind.config.js` file.\n\nTo add new `row-*` utilities, customize the `gridRow` section of your Tailwind theme config:\n\nWe use this internally for our `row-span-*` utilities. Note that since this configures the `grid-row` shorthand property directly, we include the word `span` directly in the value name, it’s _not_ baked into the class name automatically. That means you are free to add entries that do whatever you want here — they don’t just have to be `span` utilities.\n\nTo add new `row-start-*` utilities, customize the `gridRowStart` section of your Tailwind theme config:\n\nTo add new `row-end-*` utilities, customize the `gridRowEnd` section of your Tailwind theme config:\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off grid row value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"row-[span_16_/_span_16]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Grid Row Start / End - Tailwind CSS",
    "description": "Utilities for controlling how elements are sized and placed across grid rows.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/hyphens",
    "markdown": "# Hyphens - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​None](#none)\n\nUse `hyphens-none` to prevent words from being hyphenated even if the line break suggestion `&shy;` is used:\n\n```\n<p class=\"hyphens-none ...\">\n  ... Kraftfahrzeug&shy;haftpflichtversicherung is a ...\n</p>\n```\n\n### [​Manual](#manual)\n\nUse `hyphens-manual` to only set hyphenation points where the line break suggestion `&shy;` is used:\n\n```\n<p class=\"hyphens-manual ...\">\n  ... Kraftfahrzeug&shy;haftpflichtversicherung is a ...\n</p>\n```\n\n### [​Auto](#auto)\n\nUse `hyphens-auto` to allow the browser to automatically choose hyphenation points based on the language. The line break suggestion `&shy;` will be preferred over automatic hyphenation points.\n\n```\n<p class=\"hyphens-auto ...\" lang=\"de\">\n  ... Kraftfahrzeughaftpflichtversicherung is a ...\n</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:hyphens-auto` to only apply the `hyphens-auto` utility on hover.\n\n```\n<p class=\"hyphens-none hover:hyphens-auto\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:hyphens-auto` to apply the `hyphens-auto` utility at only medium screen sizes and above.\n\n```\n<p class=\"hyphens-none md:hyphens-auto\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Hyphens - Tailwind CSS",
    "description": "Utilities for controlling how words should be hyphenated.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/font-smoothing",
    "markdown": "# Font Smoothing - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Applying font smoothing](#applying-font-smoothing)\n\nUse the `subpixel-antialiased` utility to render text using subpixel antialiasing and the `antialiased` utility to render text using grayscale antialiasing.\n\n```\n<p class=\"subpixel-antialiased ...\">The quick brown fox ...</p>\n<p class=\"antialiased ...\">The quick brown fox ...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:subpixel-antialiased` to only apply the `subpixel-antialiased` utility on hover.\n\n```\n<p class=\"antialiased hover:subpixel-antialiased\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:subpixel-antialiased` to apply the `subpixel-antialiased` utility at only medium screen sizes and above.\n\n```\n<p class=\"antialiased md:subpixel-antialiased\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Font Smoothing - Tailwind CSS",
    "description": "Utilities for controlling the font smoothing of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/position",
    "markdown": "# Position - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Statically positioning elements](#statically-positioning-elements)\n\nUse the `static` utility to position an element according to the normal flow of the document.\n\nAny [offsets](https://tailwindcss.com/docs/top-right-bottom-left) will be ignored and the element will not act as a position reference for absolutely positioned children.\n\n```\n<div class=\"static ...\">\n  <p>Static parent</p>\n  <div class=\"absolute bottom-0 left-0 ...\">\n    <p>Absolute child</p>\n  </div>\n</div>\n```\n\n### [​Relatively positioning elements](#relatively-positioning-elements)\n\nUse the `relative` utility to position an element according to the normal flow of the document.\n\nAny [offsets](https://tailwindcss.com/docs/top-right-bottom-left) are calculated relative to the element’s normal position and the element _will_ act as a position reference for absolutely positioned children.\n\n```\n<div class=\"relative ...\">\n  <p>Relative parent</p>\n  <div class=\"absolute bottom-0 left-0 ...\">\n    <p>Absolute child</p>\n  </div>\n</div>\n```\n\n### [​Absolutely positioning elements](#absolutely-positioning-elements)\n\nUse the `absolute` utility to position an element _outside_ of the normal flow of the document, causing neighboring elements to act as if the element doesn’t exist.\n\nAny [offsets](https://tailwindcss.com/docs/top-right-bottom-left) are calculated relative to the nearest parent that has a position other than `static`, and the element _will_ act as a position reference for other absolutely positioned children.\n\n```\n<div class=\"static ...\">\n  <!-- Static parent -->\n  <div class=\"static ...\"><p>Static child</p></div>\n  <div class=\"inline-block ...\"><p>Static sibling</p></div>\n  <!-- Static parent -->\n  <div class=\"absolute ...\"><p>Absolute child</p></div>\n  <div class=\"inline-block ...\"><p>Static sibling</p></div>\n</div>\n```\n\n### [​Fixed positioning elements](#fixed-positioning-elements)\n\nUse the `fixed` utility to position an element relative to the browser window.\n\nAny [offsets](https://tailwindcss.com/docs/top-right-bottom-left) are calculated relative to the viewport and the element _will_ act as a position reference for absolutely positioned children.\n\n```\n<div class=\"relative\">\n  <div class=\"fixed top-0 left-0 right-0\">Contacts</div>\n  <div>\n    <div>\n      <img src=\"...\" />\n      <strong>Andrew Alfred</strong>\n    </div>\n    <div>\n      <img src=\"...\" />\n      <strong>Debra Houston</strong>\n    </div>\n    <!-- ... -->\n  </div>\n</div>\n```\n\n### [​Sticky positioning elements](#sticky-positioning-elements)\n\nUse the `sticky` utility to position an element as `relative` until it crosses a specified threshold, then treat it as `fixed` until its parent is off screen.\n\nAny [offsets](https://tailwindcss.com/docs/top-right-bottom-left) are calculated relative to the element’s normal position and the element _will_ act as a position reference for absolutely positioned children.\n\n```\n<div>\n  <div>\n    <div class=\"sticky top-0 ...\">A</div>\n    <div>\n      <div>\n        <img src=\"...\" />\n        <strong>Andrew Alfred</strong>\n      </div>\n      <div>\n        <img src=\"...\" />\n        <strong>Aisha Houston</strong>\n      </div>\n      <!-- ... -->\n    </div>\n  </div>\n  <div>\n    <div class=\"sticky top-0\">B</div>\n    <div>\n      <div>\n        <img src=\"...\" />\n        <strong>Bob Alfred</strong>\n      </div>\n      <!-- ... -->\n    </div>\n  </div>\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:absolute` to only apply the `absolute` utility on hover.\n\n```\n<div class=\"relative hover:absolute\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:absolute` to apply the `absolute` utility at only medium screen sizes and above.\n\n```\n<div class=\"relative md:absolute\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Position - Tailwind CSS",
    "description": "Utilities for controlling how an element is positioned in the DOM.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/editor-setup",
    "markdown": "# Editor Setup - Tailwind CSS\n\n## [​Syntax support](#syntax-support)\n\nTailwind CSS uses a lot of custom CSS at-rules like `@tailwind`, `@apply`, and `@config`, and in many editors this can trigger warnings or errors where these rules aren’t recognized.\n\nThe solution to this is almost always to install a plugin for your editor/IDE for PostCSS language support instead of regular CSS.\n\nIf you’re using VS Code, our official [Tailwind CSS IntelliSense](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss) plugin includes a dedicated Tailwind CSS language mode that has support for all of the custom at-rules and functions Tailwind uses.\n\nIn some cases, you may need to disable native CSS linting/validations if your editor is very strict about the syntax it expects in your CSS files.\n\n## [​IntelliSense for VS Code](#intelli-sense-for-vs-code)\n\nThe official [Tailwind CSS IntelliSense](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss) extension for Visual Studio Code enhances the Tailwind development experience by providing users with advanced features such as autocomplete, syntax highlighting, and linting.\n\n![Tailwind CSS IntelliSense extension for Visual Studio Code](https://tailwindcss.com/_next/static/media/intellisense.c22de782.png)\n\n*   **Autocomplete**. Intelligent suggestions for class names, as well as [CSS functions and directives](https://tailwindcss.com/docs/functions-and-directives).\n*   **Linting**. Highlights errors and potential bugs in both your CSS and your markup.\n*   **Hover Previews**. See the complete CSS for a Tailwind class name by hovering over it.\n*   **Syntax Highlighting**. Provides syntax definitions so that Tailwind features are highlighted correctly.\n\nCheck out the project [on GitHub](https://github.com/tailwindcss/intellisense) to learn more, or [add it to Visual Studio Code](vscode:extension/bradlc.vscode-tailwindcss) to get started now.\n\n## [​Automatic class sorting with Prettier](#automatic-class-sorting-with-prettier)\n\nWe maintain an official [Prettier plugin](https://github.com/tailwindlabs/prettier-plugin-tailwindcss) for Tailwind CSS that automatically sorts your classes following our [recommended class order](https://tailwindcss.com/blog/automatic-class-sorting-with-prettier#how-classes-are-sorted).\n\n![](https://tailwindcss.com/_next/static/media/prettier-banner.79c40690.jpg)\n\nIt works seamlessly with custom Tailwind configurations, and because it’s just a Prettier plugin, it works anywhere Prettier works — including every popular editor and IDE, and of course on the command line.\n\n```\n<!-- Before -->\n<button class=\"text-white px-4 sm:px-8 py-2 sm:py-3 bg-sky-700 hover:bg-sky-800\">...</button>\n\n<!-- After -->\n<button class=\"bg-sky-700 px-4 py-2 text-white hover:bg-sky-800 sm:px-8 sm:py-3\">...</button>\n```\n\nCheck out the plugin [on GitHub](https://github.com/tailwindlabs/prettier-plugin-tailwindcss) to learn more and get started.\n\n## [​JetBrains IDEs](#jet-brains-ides)\n\nJetBrains IDEs like WebStorm, PhpStorm, and others include support for intelligent Tailwind CSS completions in your HTML and when using `@apply`.\n\n[Learn more about Tailwind CSS support in JetBrains IDEs →](https://www.jetbrains.com/help/webstorm/tailwind-css.html)",
    "title": "Editor Setup - Tailwind CSS",
    "description": "Plugins and configuration settings that can improve the developer experience when working with Tailwind CSS.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/grid-auto-flow",
    "markdown": "# Grid Auto Flow - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Controlling grid element placement](#controlling-grid-element-placement)\n\nUse the `grid-flow-*` utilities to control how the auto-placement algorithm works for a grid layout.\n\n```\n<div class=\"grid grid-flow-row-dense grid-cols-3 grid-rows-3 ...\">\n  <div class=\"col-span-2\">01</div>\n  <div class=\"col-span-2\">02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:grid-flow-row` to only apply the `grid-flow-row` utility on hover.\n\n```\n<div class=\"grid grid-flow-col hover:grid-flow-row\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:grid-flow-row` to apply the `grid-flow-row` utility at only medium screen sizes and above.\n\n```\n<div class=\"grid grid-flow-col md:grid-flow-row\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Grid Auto Flow - Tailwind CSS",
    "description": "Utilities for controlling how elements in a grid are auto-placed.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/font-style",
    "markdown": "# Font Style - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Italicizing text](#italicizing-text)\n\nThe `italic` utility can be used to make text italic. Likewise, the `not-italic` utility can be used to display text normally — typically to reset italic text at different breakpoints.\n\n```\n<p class=\"italic ...\">The quick brown fox ...</p>\n<p class=\"not-italic ...\">The quick brown fox ...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:not-italic` to only apply the `not-italic` utility on hover.\n\n```\n<p class=\"italic hover:not-italic\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:not-italic` to apply the `not-italic` utility at only medium screen sizes and above.\n\n```\n<p class=\"italic md:not-italic\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Font Style - Tailwind CSS",
    "description": "Utilities for controlling the style of text.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/content",
    "markdown": "# Content - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting a pseudo-element’s content](#setting-a-pseudo-elements-content)\n\nUse the `content-*` utilities along with the `before` and `after` variant modifiers to set the contents of the `::before` and `::after` pseudo-elements.\n\nOut of the box, `content-none` is the only available preconfigured content utility. And while you can add additional utilities by [customizing your theme](https://tailwindcss.com/docs/content#customizing-your-theme), it generally makes more sense to just use an arbitrary value.\n\nUse the square bracket notation to define any arbitrary content value on the fly.\n\n```\nHigher resolution means more than just a better-quality image. With a Retina\n6K display, <a class=\"text-blue-600 after:content-['_↗'] ...\" href=\"https://www.\napple.com/pro-display-xdr/\" target=\"_blank\">Pro Display XDR</a> gives you\nnearly 40 percent more screen real estate than a 5K display.\n```\n\n### [​Referencing an attribute value](#referencing-an-attribute-value)\n\nThese content utilities even support CSS features like the `attr()` function, which you can use to reference a value stored in an attribute:\n\n```\n<div before=\"Hello World\" class=\"before:content-[attr(before)]\">\n  <!-- ... -->\n</div>\n```\n\n### [​Using spaces and underscores](#using-spaces-and-underscores)\n\nSince whitespace denotes the end of a class in HTML, replace any spaces in an arbitrary value with an underscore:\n\n```\n<div class=\"before:content-['Hello_World']\">\n  <!-- ... -->\n</div>\n```\n\nIf you need to include an actual underscore, you can do this by escaping it with a backslash:\n\n```\n<div class=\"before:content-['Hello\\_World']\">\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:before:content-['Hovering']` to only apply the `before:content-['Hovering']` utility on hover.\n\n```\n<div class=\"before:content-['Not_Hovering'] hover:before:content-['Hovering']\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:before:content-['Desktop']` to apply the `before:content-['Desktop']` utility at only medium screen sizes and above.\n\n```\n<div class=\"before:content-['Mobile'] md:before:content-['Desktop']\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind only provides the `content-none` utility. You can customize these values by editing `theme.content` or `theme.extend.content` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `content` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"before:content-['Hello_World']\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Content - Tailwind CSS",
    "description": "Utilities for controlling the content of the before and after pseudo-elements.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/top-right-bottom-left",
    "markdown": "# Top / Right / Bottom / Left\n\ninset-0inset: 0px; inset-x-0left: 0px; right: 0px; inset-y-0top: 0px; bottom: 0px; start-0inset-inline-start: 0px; end-0inset-inline-end: 0px; top-0top: 0px; right-0right: 0px; bottom-0bottom: 0px; left-0left: 0px; inset-pxinset: 1px; inset-x-pxleft: 1px; right: 1px; inset-y-pxtop: 1px; bottom: 1px; start-pxinset-inline-start: 1px; end-pxinset-inline-end: 1px; top-pxtop: 1px; right-pxright: 1px; bottom-pxbottom: 1px; left-pxleft: 1px; inset-0.5inset: 0.125rem; /\\* 2px \\*/ inset-x-0.5left: 0.125rem; /\\* 2px \\*/ right: 0.125rem; /\\* 2px \\*/ inset-y-0.5top: 0.125rem; /\\* 2px \\*/ bottom: 0.125rem; /\\* 2px \\*/ start-0.5inset-inline-start: 0.125rem; /\\* 2px \\*/ end-0.5inset-inline-end: 0.125rem; /\\* 2px \\*/ top-0.5top: 0.125rem; /\\* 2px \\*/ right-0.5right: 0.125rem; /\\* 2px \\*/ bottom-0.5bottom: 0.125rem; /\\* 2px \\*/ left-0.5left: 0.125rem; /\\* 2px \\*/ inset-1inset: 0.25rem; /\\* 4px \\*/ inset-x-1left: 0.25rem; /\\* 4px \\*/ right: 0.25rem; /\\* 4px \\*/ inset-y-1top: 0.25rem; /\\* 4px \\*/ bottom: 0.25rem; /\\* 4px \\*/ start-1inset-inline-start: 0.25rem; /\\* 4px \\*/ end-1inset-inline-end: 0.25rem; /\\* 4px \\*/ top-1top: 0.25rem; /\\* 4px \\*/ right-1right: 0.25rem; /\\* 4px \\*/ bottom-1bottom: 0.25rem; /\\* 4px \\*/ left-1left: 0.25rem; /\\* 4px \\*/ inset-1.5inset: 0.375rem; /\\* 6px \\*/ inset-x-1.5left: 0.375rem; /\\* 6px \\*/ right: 0.375rem; /\\* 6px \\*/ inset-y-1.5top: 0.375rem; /\\* 6px \\*/ bottom: 0.375rem; /\\* 6px \\*/ start-1.5inset-inline-start: 0.375rem; /\\* 6px \\*/ end-1.5inset-inline-end: 0.375rem; /\\* 6px \\*/ top-1.5top: 0.375rem; /\\* 6px \\*/ right-1.5right: 0.375rem; /\\* 6px \\*/ bottom-1.5bottom: 0.375rem; /\\* 6px \\*/ left-1.5left: 0.375rem; /\\* 6px \\*/ inset-2inset: 0.5rem; /\\* 8px \\*/ inset-x-2left: 0.5rem; /\\* 8px \\*/ right: 0.5rem; /\\* 8px \\*/ inset-y-2top: 0.5rem; /\\* 8px \\*/ bottom: 0.5rem; /\\* 8px \\*/ start-2inset-inline-start: 0.5rem; /\\* 8px \\*/ end-2inset-inline-end: 0.5rem; /\\* 8px \\*/ top-2top: 0.5rem; /\\* 8px \\*/ right-2right: 0.5rem; /\\* 8px \\*/ bottom-2bottom: 0.5rem; /\\* 8px \\*/ left-2left: 0.5rem; /\\* 8px \\*/ inset-2.5inset: 0.625rem; /\\* 10px \\*/ inset-x-2.5left: 0.625rem; /\\* 10px \\*/ right: 0.625rem; /\\* 10px \\*/ inset-y-2.5top: 0.625rem; /\\* 10px \\*/ bottom: 0.625rem; /\\* 10px \\*/ start-2.5inset-inline-start: 0.625rem; /\\* 10px \\*/ end-2.5inset-inline-end: 0.625rem; /\\* 10px \\*/ top-2.5top: 0.625rem; /\\* 10px \\*/ right-2.5right: 0.625rem; /\\* 10px \\*/ bottom-2.5bottom: 0.625rem; /\\* 10px \\*/ left-2.5left: 0.625rem; /\\* 10px \\*/ inset-3inset: 0.75rem; /\\* 12px \\*/ inset-x-3left: 0.75rem; /\\* 12px \\*/ right: 0.75rem; /\\* 12px \\*/ inset-y-3top: 0.75rem; /\\* 12px \\*/ bottom: 0.75rem; /\\* 12px \\*/ start-3inset-inline-start: 0.75rem; /\\* 12px \\*/ end-3inset-inline-end: 0.75rem; /\\* 12px \\*/ top-3top: 0.75rem; /\\* 12px \\*/ right-3right: 0.75rem; /\\* 12px \\*/ bottom-3bottom: 0.75rem; /\\* 12px \\*/ left-3left: 0.75rem; /\\* 12px \\*/ inset-3.5inset: 0.875rem; /\\* 14px \\*/ inset-x-3.5left: 0.875rem; /\\* 14px \\*/ right: 0.875rem; /\\* 14px \\*/ inset-y-3.5top: 0.875rem; /\\* 14px \\*/ bottom: 0.875rem; /\\* 14px \\*/ start-3.5inset-inline-start: 0.875rem; /\\* 14px \\*/ end-3.5inset-inline-end: 0.875rem; /\\* 14px \\*/ top-3.5top: 0.875rem; /\\* 14px \\*/ right-3.5right: 0.875rem; /\\* 14px \\*/ bottom-3.5bottom: 0.875rem; /\\* 14px \\*/ left-3.5left: 0.875rem; /\\* 14px \\*/ inset-4inset: 1rem; /\\* 16px \\*/ inset-x-4left: 1rem; /\\* 16px \\*/ right: 1rem; /\\* 16px \\*/ inset-y-4top: 1rem; /\\* 16px \\*/ bottom: 1rem; /\\* 16px \\*/ start-4inset-inline-start: 1rem; /\\* 16px \\*/ end-4inset-inline-end: 1rem; /\\* 16px \\*/ top-4top: 1rem; /\\* 16px \\*/ right-4right: 1rem; /\\* 16px \\*/ bottom-4bottom: 1rem; /\\* 16px \\*/ left-4left: 1rem; /\\* 16px \\*/ inset-5inset: 1.25rem; /\\* 20px \\*/ inset-x-5left: 1.25rem; /\\* 20px \\*/ right: 1.25rem; /\\* 20px \\*/ inset-y-5top: 1.25rem; /\\* 20px \\*/ bottom: 1.25rem; /\\* 20px \\*/ start-5inset-inline-start: 1.25rem; /\\* 20px \\*/ end-5inset-inline-end: 1.25rem; /\\* 20px \\*/ top-5top: 1.25rem; /\\* 20px \\*/ right-5right: 1.25rem; /\\* 20px \\*/ bottom-5bottom: 1.25rem; /\\* 20px \\*/ left-5left: 1.25rem; /\\* 20px \\*/ inset-6inset: 1.5rem; /\\* 24px \\*/ inset-x-6left: 1.5rem; /\\* 24px \\*/ right: 1.5rem; /\\* 24px \\*/ inset-y-6top: 1.5rem; /\\* 24px \\*/ bottom: 1.5rem; /\\* 24px \\*/ start-6inset-inline-start: 1.5rem; /\\* 24px \\*/ end-6inset-inline-end: 1.5rem; /\\* 24px \\*/ top-6top: 1.5rem; /\\* 24px \\*/ right-6right: 1.5rem; /\\* 24px \\*/ bottom-6bottom: 1.5rem; /\\* 24px \\*/ left-6left: 1.5rem; /\\* 24px \\*/ inset-7inset: 1.75rem; /\\* 28px \\*/ inset-x-7left: 1.75rem; /\\* 28px \\*/ right: 1.75rem; /\\* 28px \\*/ inset-y-7top: 1.75rem; /\\* 28px \\*/ bottom: 1.75rem; /\\* 28px \\*/ start-7inset-inline-start: 1.75rem; /\\* 28px \\*/ end-7inset-inline-end: 1.75rem; /\\* 28px \\*/ top-7top: 1.75rem; /\\* 28px \\*/ right-7right: 1.75rem; /\\* 28px \\*/ bottom-7bottom: 1.75rem; /\\* 28px \\*/ left-7left: 1.75rem; /\\* 28px \\*/ inset-8inset: 2rem; /\\* 32px \\*/ inset-x-8left: 2rem; /\\* 32px \\*/ right: 2rem; /\\* 32px \\*/ inset-y-8top: 2rem; /\\* 32px \\*/ bottom: 2rem; /\\* 32px \\*/ start-8inset-inline-start: 2rem; /\\* 32px \\*/ end-8inset-inline-end: 2rem; /\\* 32px \\*/ top-8top: 2rem; /\\* 32px \\*/ right-8right: 2rem; /\\* 32px \\*/ bottom-8bottom: 2rem; /\\* 32px \\*/ left-8left: 2rem; /\\* 32px \\*/ inset-9inset: 2.25rem; /\\* 36px \\*/ inset-x-9left: 2.25rem; /\\* 36px \\*/ right: 2.25rem; /\\* 36px \\*/ inset-y-9top: 2.25rem; /\\* 36px \\*/ bottom: 2.25rem; /\\* 36px \\*/ start-9inset-inline-start: 2.25rem; /\\* 36px \\*/ end-9inset-inline-end: 2.25rem; /\\* 36px \\*/ top-9top: 2.25rem; /\\* 36px \\*/ right-9right: 2.25rem; /\\* 36px \\*/ bottom-9bottom: 2.25rem; /\\* 36px \\*/ left-9left: 2.25rem; /\\* 36px \\*/ inset-10inset: 2.5rem; /\\* 40px \\*/ inset-x-10left: 2.5rem; /\\* 40px \\*/ right: 2.5rem; /\\* 40px \\*/ inset-y-10top: 2.5rem; /\\* 40px \\*/ bottom: 2.5rem; /\\* 40px \\*/ start-10inset-inline-start: 2.5rem; /\\* 40px \\*/ end-10inset-inline-end: 2.5rem; /\\* 40px \\*/ top-10top: 2.5rem; /\\* 40px \\*/ right-10right: 2.5rem; /\\* 40px \\*/ bottom-10bottom: 2.5rem; /\\* 40px \\*/ left-10left: 2.5rem; /\\* 40px \\*/ inset-11inset: 2.75rem; /\\* 44px \\*/ inset-x-11left: 2.75rem; /\\* 44px \\*/ right: 2.75rem; /\\* 44px \\*/ inset-y-11top: 2.75rem; /\\* 44px \\*/ bottom: 2.75rem; /\\* 44px \\*/ start-11inset-inline-start: 2.75rem; /\\* 44px \\*/ end-11inset-inline-end: 2.75rem; /\\* 44px \\*/ top-11top: 2.75rem; /\\* 44px \\*/ right-11right: 2.75rem; /\\* 44px \\*/ bottom-11bottom: 2.75rem; /\\* 44px \\*/ left-11left: 2.75rem; /\\* 44px \\*/ inset-12inset: 3rem; /\\* 48px \\*/ inset-x-12left: 3rem; /\\* 48px \\*/ right: 3rem; /\\* 48px \\*/ inset-y-12top: 3rem; /\\* 48px \\*/ bottom: 3rem; /\\* 48px \\*/ start-12inset-inline-start: 3rem; /\\* 48px \\*/ end-12inset-inline-end: 3rem; /\\* 48px \\*/ top-12top: 3rem; /\\* 48px \\*/ right-12right: 3rem; /\\* 48px \\*/ bottom-12bottom: 3rem; /\\* 48px \\*/ left-12left: 3rem; /\\* 48px \\*/ inset-14inset: 3.5rem; /\\* 56px \\*/ inset-x-14left: 3.5rem; /\\* 56px \\*/ right: 3.5rem; /\\* 56px \\*/ inset-y-14top: 3.5rem; /\\* 56px \\*/ bottom: 3.5rem; /\\* 56px \\*/ start-14inset-inline-start: 3.5rem; /\\* 56px \\*/ end-14inset-inline-end: 3.5rem; /\\* 56px \\*/ top-14top: 3.5rem; /\\* 56px \\*/ right-14right: 3.5rem; /\\* 56px \\*/ bottom-14bottom: 3.5rem; /\\* 56px \\*/ left-14left: 3.5rem; /\\* 56px \\*/ inset-16inset: 4rem; /\\* 64px \\*/ inset-x-16left: 4rem; /\\* 64px \\*/ right: 4rem; /\\* 64px \\*/ inset-y-16top: 4rem; /\\* 64px \\*/ bottom: 4rem; /\\* 64px \\*/ start-16inset-inline-start: 4rem; /\\* 64px \\*/ end-16inset-inline-end: 4rem; /\\* 64px \\*/ top-16top: 4rem; /\\* 64px \\*/ right-16right: 4rem; /\\* 64px \\*/ bottom-16bottom: 4rem; /\\* 64px \\*/ left-16left: 4rem; /\\* 64px \\*/ inset-20inset: 5rem; /\\* 80px \\*/ inset-x-20left: 5rem; /\\* 80px \\*/ right: 5rem; /\\* 80px \\*/ inset-y-20top: 5rem; /\\* 80px \\*/ bottom: 5rem; /\\* 80px \\*/ start-20inset-inline-start: 5rem; /\\* 80px \\*/ end-20inset-inline-end: 5rem; /\\* 80px \\*/ top-20top: 5rem; /\\* 80px \\*/ right-20right: 5rem; /\\* 80px \\*/ bottom-20bottom: 5rem; /\\* 80px \\*/ left-20left: 5rem; /\\* 80px \\*/ inset-24inset: 6rem; /\\* 96px \\*/ inset-x-24left: 6rem; /\\* 96px \\*/ right: 6rem; /\\* 96px \\*/ inset-y-24top: 6rem; /\\* 96px \\*/ bottom: 6rem; /\\* 96px \\*/ start-24inset-inline-start: 6rem; /\\* 96px \\*/ end-24inset-inline-end: 6rem; /\\* 96px \\*/ top-24top: 6rem; /\\* 96px \\*/ right-24right: 6rem; /\\* 96px \\*/ bottom-24bottom: 6rem; /\\* 96px \\*/ left-24left: 6rem; /\\* 96px \\*/ inset-28inset: 7rem; /\\* 112px \\*/ inset-x-28left: 7rem; /\\* 112px \\*/ right: 7rem; /\\* 112px \\*/ inset-y-28top: 7rem; /\\* 112px \\*/ bottom: 7rem; /\\* 112px \\*/ start-28inset-inline-start: 7rem; /\\* 112px \\*/ end-28inset-inline-end: 7rem; /\\* 112px \\*/ top-28top: 7rem; /\\* 112px \\*/ right-28right: 7rem; /\\* 112px \\*/ bottom-28bottom: 7rem; /\\* 112px \\*/ left-28left: 7rem; /\\* 112px \\*/ inset-32inset: 8rem; /\\* 128px \\*/ inset-x-32left: 8rem; /\\* 128px \\*/ right: 8rem; /\\* 128px \\*/ inset-y-32top: 8rem; /\\* 128px \\*/ bottom: 8rem; /\\* 128px \\*/ start-32inset-inline-start: 8rem; /\\* 128px \\*/ end-32inset-inline-end: 8rem; /\\* 128px \\*/ top-32top: 8rem; /\\* 128px \\*/ right-32right: 8rem; /\\* 128px \\*/ bottom-32bottom: 8rem; /\\* 128px \\*/ left-32left: 8rem; /\\* 128px \\*/ inset-36inset: 9rem; /\\* 144px \\*/ inset-x-36left: 9rem; /\\* 144px \\*/ right: 9rem; /\\* 144px \\*/ inset-y-36top: 9rem; /\\* 144px \\*/ bottom: 9rem; /\\* 144px \\*/ start-36inset-inline-start: 9rem; /\\* 144px \\*/ end-36inset-inline-end: 9rem; /\\* 144px \\*/ top-36top: 9rem; /\\* 144px \\*/ right-36right: 9rem; /\\* 144px \\*/ bottom-36bottom: 9rem; /\\* 144px \\*/ left-36left: 9rem; /\\* 144px \\*/ inset-40inset: 10rem; /\\* 160px \\*/ inset-x-40left: 10rem; /\\* 160px \\*/ right: 10rem; /\\* 160px \\*/ inset-y-40top: 10rem; /\\* 160px \\*/ bottom: 10rem; /\\* 160px \\*/ start-40inset-inline-start: 10rem; /\\* 160px \\*/ end-40inset-inline-end: 10rem; /\\* 160px \\*/ top-40top: 10rem; /\\* 160px \\*/ right-40right: 10rem; /\\* 160px \\*/ bottom-40bottom: 10rem; /\\* 160px \\*/ left-40left: 10rem; /\\* 160px \\*/ inset-44inset: 11rem; /\\* 176px \\*/ inset-x-44left: 11rem; /\\* 176px \\*/ right: 11rem; /\\* 176px \\*/ inset-y-44top: 11rem; /\\* 176px \\*/ bottom: 11rem; /\\* 176px \\*/ start-44inset-inline-start: 11rem; /\\* 176px \\*/ end-44inset-inline-end: 11rem; /\\* 176px \\*/ top-44top: 11rem; /\\* 176px \\*/ right-44right: 11rem; /\\* 176px \\*/ bottom-44bottom: 11rem; /\\* 176px \\*/ left-44left: 11rem; /\\* 176px \\*/ inset-48inset: 12rem; /\\* 192px \\*/ inset-x-48left: 12rem; /\\* 192px \\*/ right: 12rem; /\\* 192px \\*/ inset-y-48top: 12rem; /\\* 192px \\*/ bottom: 12rem; /\\* 192px \\*/ start-48inset-inline-start: 12rem; /\\* 192px \\*/ end-48inset-inline-end: 12rem; /\\* 192px \\*/ top-48top: 12rem; /\\* 192px \\*/ right-48right: 12rem; /\\* 192px \\*/ bottom-48bottom: 12rem; /\\* 192px \\*/ left-48left: 12rem; /\\* 192px \\*/ inset-52inset: 13rem; /\\* 208px \\*/ inset-x-52left: 13rem; /\\* 208px \\*/ right: 13rem; /\\* 208px \\*/ inset-y-52top: 13rem; /\\* 208px \\*/ bottom: 13rem; /\\* 208px \\*/ start-52inset-inline-start: 13rem; /\\* 208px \\*/ end-52inset-inline-end: 13rem; /\\* 208px \\*/ top-52top: 13rem; /\\* 208px \\*/ right-52right: 13rem; /\\* 208px \\*/ bottom-52bottom: 13rem; /\\* 208px \\*/ left-52left: 13rem; /\\* 208px \\*/ inset-56inset: 14rem; /\\* 224px \\*/ inset-x-56left: 14rem; /\\* 224px \\*/ right: 14rem; /\\* 224px \\*/ inset-y-56top: 14rem; /\\* 224px \\*/ bottom: 14rem; /\\* 224px \\*/ start-56inset-inline-start: 14rem; /\\* 224px \\*/ end-56inset-inline-end: 14rem; /\\* 224px \\*/ top-56top: 14rem; /\\* 224px \\*/ right-56right: 14rem; /\\* 224px \\*/ bottom-56bottom: 14rem; /\\* 224px \\*/ left-56left: 14rem; /\\* 224px \\*/ inset-60inset: 15rem; /\\* 240px \\*/ inset-x-60left: 15rem; /\\* 240px \\*/ right: 15rem; /\\* 240px \\*/ inset-y-60top: 15rem; /\\* 240px \\*/ bottom: 15rem; /\\* 240px \\*/ start-60inset-inline-start: 15rem; /\\* 240px \\*/ end-60inset-inline-end: 15rem; /\\* 240px \\*/ top-60top: 15rem; /\\* 240px \\*/ right-60right: 15rem; /\\* 240px \\*/ bottom-60bottom: 15rem; /\\* 240px \\*/ left-60left: 15rem; /\\* 240px \\*/ inset-64inset: 16rem; /\\* 256px \\*/ inset-x-64left: 16rem; /\\* 256px \\*/ right: 16rem; /\\* 256px \\*/ inset-y-64top: 16rem; /\\* 256px \\*/ bottom: 16rem; /\\* 256px \\*/ start-64inset-inline-start: 16rem; /\\* 256px \\*/ end-64inset-inline-end: 16rem; /\\* 256px \\*/ top-64top: 16rem; /\\* 256px \\*/ right-64right: 16rem; /\\* 256px \\*/ bottom-64bottom: 16rem; /\\* 256px \\*/ left-64left: 16rem; /\\* 256px \\*/ inset-72inset: 18rem; /\\* 288px \\*/ inset-x-72left: 18rem; /\\* 288px \\*/ right: 18rem; /\\* 288px \\*/ inset-y-72top: 18rem; /\\* 288px \\*/ bottom: 18rem; /\\* 288px \\*/ start-72inset-inline-start: 18rem; /\\* 288px \\*/ end-72inset-inline-end: 18rem; /\\* 288px \\*/ top-72top: 18rem; /\\* 288px \\*/ right-72right: 18rem; /\\* 288px \\*/ bottom-72bottom: 18rem; /\\* 288px \\*/ left-72left: 18rem; /\\* 288px \\*/ inset-80inset: 20rem; /\\* 320px \\*/ inset-x-80left: 20rem; /\\* 320px \\*/ right: 20rem; /\\* 320px \\*/ inset-y-80top: 20rem; /\\* 320px \\*/ bottom: 20rem; /\\* 320px \\*/ start-80inset-inline-start: 20rem; /\\* 320px \\*/ end-80inset-inline-end: 20rem; /\\* 320px \\*/ top-80top: 20rem; /\\* 320px \\*/ right-80right: 20rem; /\\* 320px \\*/ bottom-80bottom: 20rem; /\\* 320px \\*/ left-80left: 20rem; /\\* 320px \\*/ inset-96inset: 24rem; /\\* 384px \\*/ inset-x-96left: 24rem; /\\* 384px \\*/ right: 24rem; /\\* 384px \\*/ inset-y-96top: 24rem; /\\* 384px \\*/ bottom: 24rem; /\\* 384px \\*/ start-96inset-inline-start: 24rem; /\\* 384px \\*/ end-96inset-inline-end: 24rem; /\\* 384px \\*/ top-96top: 24rem; /\\* 384px \\*/ right-96right: 24rem; /\\* 384px \\*/ bottom-96bottom: 24rem; /\\* 384px \\*/ left-96left: 24rem; /\\* 384px \\*/ inset-autoinset: auto; inset-1/2inset: 50%; inset-1/3inset: 33.333333%; inset-2/3inset: 66.666667%; inset-1/4inset: 25%; inset-2/4inset: 50%; inset-3/4inset: 75%; inset-fullinset: 100%; inset-x-autoleft: auto; right: auto; inset-x-1/2left: 50%; right: 50%; inset-x-1/3left: 33.333333%; right: 33.333333%; inset-x-2/3left: 66.666667%; right: 66.666667%; inset-x-1/4left: 25%; right: 25%; inset-x-2/4left: 50%; right: 50%; inset-x-3/4left: 75%; right: 75%; inset-x-fullleft: 100%; right: 100%; inset-y-autotop: auto; bottom: auto; inset-y-1/2top: 50%; bottom: 50%; inset-y-1/3top: 33.333333%; bottom: 33.333333%; inset-y-2/3top: 66.666667%; bottom: 66.666667%; inset-y-1/4top: 25%; bottom: 25%; inset-y-2/4top: 50%; bottom: 50%; inset-y-3/4top: 75%; bottom: 75%; inset-y-fulltop: 100%; bottom: 100%; start-autoinset-inline-start: auto; start-1/2inset-inline-start: 50%; start-1/3inset-inline-start: 33.333333%; start-2/3inset-inline-start: 66.666667%; start-1/4inset-inline-start: 25%; start-2/4inset-inline-start: 50%; start-3/4inset-inline-start: 75%; start-fullinset-inline-start: 100%; end-autoinset-inline-end: auto; end-1/2inset-inline-end: 50%; end-1/3inset-inline-end: 33.333333%; end-2/3inset-inline-end: 66.666667%; end-1/4inset-inline-end: 25%; end-2/4inset-inline-end: 50%; end-3/4inset-inline-end: 75%; end-fullinset-inline-end: 100%; top-autotop: auto; top-1/2top: 50%; top-1/3top: 33.333333%; top-2/3top: 66.666667%; top-1/4top: 25%; top-2/4top: 50%; top-3/4top: 75%; top-fulltop: 100%; right-autoright: auto; right-1/2right: 50%; right-1/3right: 33.333333%; right-2/3right: 66.666667%; right-1/4right: 25%; right-2/4right: 50%; right-3/4right: 75%; right-fullright: 100%; bottom-autobottom: auto; bottom-1/2bottom: 50%; bottom-1/3bottom: 33.333333%; bottom-2/3bottom: 66.666667%; bottom-1/4bottom: 25%; bottom-2/4bottom: 50%; bottom-3/4bottom: 75%; bottom-fullbottom: 100%; left-autoleft: auto; left-1/2left: 50%; left-1/3left: 33.333333%; left-2/3left: 66.666667%; left-1/4left: 25%; left-2/4left: 50%; left-3/4left: 75%; left-fullleft: 100%;",
    "title": "Top / Right / Bottom / Left - Tailwind CSS",
    "description": "Utilities for controlling the placement of positioned elements.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/font-weight",
    "markdown": "# Font Weight - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the font weight](#setting-the-font-weight)\n\nUse the `font-*` utilities to control the font weight of an element.\n\n```\n<p class=\"font-light ...\">The quick brown fox ...</p>\n<p class=\"font-normal ...\">The quick brown fox ...</p>\n<p class=\"font-medium ...\">The quick brown fox ...</p>\n<p class=\"font-semibold ...\">The quick brown fox ...</p>\n<p class=\"font-bold ...\">The quick brown fox ...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:font-bold` to only apply the `font-bold` utility on hover.\n\n```\n<p class=\"font-normal hover:font-bold\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:font-bold` to apply the `font-bold` utility at only medium screen sizes and above.\n\n```\n<p class=\"font-normal md:font-bold\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides nine `font-weight` utilities. You change, add, or remove these by editing the `theme.fontWeight` section of your Tailwind config.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `font-weight` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<p class=\"font-[1100]\">\n  <!-- ... -->\n</p>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Font Weight - Tailwind CSS",
    "description": "Utilities for controlling the font weight of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/using-with-preprocessors",
    "markdown": "# Using with Preprocessors - Tailwind CSS\n\nSince Tailwind is a PostCSS plugin, there’s nothing stopping you from using it with Sass, Less, Stylus, or other preprocessors, just like you can with other PostCSS plugins like [Autoprefixer](https://github.com/postcss/autoprefixer).\n\nIt’s important to note that **you don’t need to use a preprocessor with Tailwind** — you typically write very little CSS on a Tailwind project anyway, so using a preprocessor just isn’t as beneficial as it would be in a project where you write a lot of custom CSS.\n\nThis guide only exists as a reference for people who need to integrate Tailwind with a preprocessor for reasons outside of their control, not because it is a recommended practice.\n\n* * *\n\n## [​Using PostCSS as your preprocessor](#using-post-css-as-your-preprocessor)\n\nIf you’re using Tailwind for a brand new project and don’t need to integrate it with any existing Sass/Less/Stylus stylesheets, you should highly consider relying on other PostCSS plugins to add the preprocessor features you use instead of using a separate preprocessor.\n\nThis has a few benefits:\n\n*   **Your builds will be faster**. Since your CSS doesn’t have to be parsed and processed by multiple tools, your CSS will compile much quicker using only PostCSS.\n*   **No quirks or workarounds.** Because Tailwind adds some new non-standard keywords to CSS (like `@tailwind`, `@apply`, `theme()`, etc.), you often have to write your CSS in annoying, unintuitive ways to get a preprocessor to give you the expected output. Working exclusively with PostCSS avoids this.\n\nFor a fairly comprehensive list of available PostCSS plugins see the [PostCSS GitHub repository](https://github.com/postcss/postcss/blob/master/docs/plugins.md), but here are a few important ones we use on our own projects and can recommend.\n\n### [​Build-time imports](#build-time-imports)\n\nOne of the most useful features preprocessors offer is the ability to organize your CSS into multiple files and combine them at build time by processing `@import` statements in advance, instead of in the browser.\n\nThe canonical plugin for handling this with PostCSS is [postcss-import](https://github.com/postcss/postcss-import).\n\nTo use it, install the plugin via npm:\n\n```\nnpm install -D postcss-import\n```\n\nThen add it as the very first plugin in your PostCSS configuration:\n\n```\n// postcss.config.js\nmodule.exports = {\n  plugins: {\n    'postcss-import': {},\n    tailwindcss: {},\n    autoprefixer: {},\n  }\n}\n```\n\nOne important thing to note about `postcss-import` is that it strictly adheres to the CSS spec and disallows `@import` statements anywhere except at the very top of a file.\n\nWon’t work, `@import` statements must come first\n\n```\n/* components.css */\n\n.btn {\n  padding: theme('spacing.4') theme('spacing.2');\n  /* ... */\n}\n\n/* Will not work */\n@import \"./components/card\";\n```\n\nThe easiest solution to this problem is to never mix regular CSS and imports in the same file. Instead, create one main entry-point file for your imports, and keep all of your actual CSS in separate files.\n\nUse separate files for imports and actual CSS\n\n```\n/* components.css */\n@import \"./components/buttons.css\";\n@import \"./components/card.css\";\n```\n\n```\n/* components/buttons.css */\n.btn {\n  padding: theme('spacing.4') theme('spacing.2');\n  /* ... */\n}\n```\n\n```\n/* components/card.css */\n.card {\n  padding: theme('spacing.4');\n  /* ... */\n}\n```\n\nThe place you are most likely to run into this situation is in your main CSS file that includes your `@tailwind` declarations.\n\nWon’t work, `@import` statements must come first\n\n```\n@tailwind base;\n@import \"./custom-base-styles.css\";\n\n@tailwind components;\n@import \"./custom-components.css\";\n\n@tailwind utilities;\n@import \"./custom-utilities.css\";\n```\n\nYou can solve this by creating separate files for each `@tailwind` declaration, and then importing those files in your main stylesheet. To make this easy, we provide separate files for each `@tailwind` declaration out of the box that you can import directly from `node_modules`.\n\nThe `postcss-import` plugin is smart enough to look for files in the `node_modules` folder automatically, so you don’t need to provide the entire path — `\"tailwindcss/base\"` for example is enough.\n\nImport our provided CSS files\n\n```\n@import \"tailwindcss/base\";\n@import \"./custom-base-styles.css\";\n\n@import \"tailwindcss/components\";\n@import \"./custom-components.css\";\n\n@import \"tailwindcss/utilities\";\n@import \"./custom-utilities.css\";\n```\n\n### [​Nesting](#nesting)\n\nTo add support for nested declarations, we recommend our bundled `tailwindcss/nesting` plugin, which is a PostCSS plugin that wraps [postcss-nested](https://github.com/postcss/postcss-nested) or [postcss-nesting](https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-nesting) and acts as a compatibility layer to make sure your nesting plugin of choice properly understands Tailwind’s custom syntax.\n\nIt’s included directly in the `tailwindcss` package itself, so to use it all you need to do is add it to your PostCSS configuration, somewhere before Tailwind:\n\n```\n// postcss.config.js\nmodule.exports = {\n  plugins: {\n    'postcss-import': {},\n    'tailwindcss/nesting': {},\n    tailwindcss: {},\n    autoprefixer: {},\n  }\n}\n```\n\nBy default, it uses the [postcss-nested](https://github.com/postcss/postcss-nested) plugin under the hood, which uses a Sass-like syntax and is the plugin that powers nesting support in the [Tailwind CSS plugin API](https://tailwindcss.com/docs/plugins#css-in-js-syntax).\n\nIf you’d rather use [postcss-nesting](https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-nesting) (which is based on the standard [CSS Nesting](https://drafts.csswg.org/css-nesting-1/) specification), first install the plugin:\n\n```\nnpm install -D postcss-nesting\n```\n\nThen pass the plugin itself as an argument to `tailwindcss/nesting` in your PostCSS configuration:\n\n```\n// postcss.config.js\nmodule.exports = {\n  plugins: {\n    'postcss-import': {},\n    'tailwindcss/nesting': 'postcss-nesting',\n    tailwindcss: {},\n    autoprefixer: {},\n  }\n}\n```\n\nThis can also be helpful if for whatever reason you need to use a very specific version of `postcss-nested` and want to override the version we bundle with `tailwindcss/nesting` itself.\n\nNote that if you are using [`postcss-preset-env`](https://github.com/csstools/postcss-plugins/tree/main/plugin-packs/postcss-preset-env) in your project, you should make sure to disable nesting and let `tailwindcss/nesting` handle it for you instead:\n\n```\n// postcss.config.js\nmodule.exports = {\n  plugins: {\n    'postcss-import': {},\n    'tailwindcss/nesting': 'postcss-nesting',\n    tailwindcss: {},\n    'postcss-preset-env': {\n      features: { 'nesting-rules': false },\n    },\n  }\n}\n```\n\n### [​Variables](#variables)\n\nThese days CSS variables (officially known as custom properties) have really good [browser support](https://caniuse.com/#search=css%20custom%20properties), so you don’t need a preprocessor to use variables at all.\n\n```\n:root {\n  --theme-color: #52b3d0;\n}\n\n/* ... */\n\n.btn {\n  background-color: var(--theme-color);\n  /* ... */\n}\n```\n\nWe use CSS variables extensively within Tailwind itself, so if you can use Tailwind, you can use native CSS variables.\n\nYou may also find that most of the things you’ve used variables for in the past can be replaced with Tailwind’s `theme()` function, which gives you access to all of your design tokens from your `tailwind.config.js` file directly in your CSS:\n\n```\n.btn {\n  background-color: theme('colors.blue.500');\n  padding: theme('spacing.2') theme('spacing.4');\n  /* ... */\n}\n```\n\nLearn more about the `theme()` function in our [functions and directives documentation](https://tailwindcss.com/docs/functions-and-directives#theme).\n\n### [​Vendor prefixes](#vendor-prefixes)\n\nFor automatically managing vendor prefixes in your CSS, you should use [Autoprefixer](https://github.com/postcss/autoprefixer).\n\nTo use it, install it via npm:\n\n```\nnpm install -D autoprefixer\n```\n\nThen add it to the very end of your plugin list in your PostCSS configuration:\n\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  }\n}\n```\n\n* * *\n\n## [​Using Sass, Less, or Stylus](#using-sass-less-or-stylus)\n\nFor the best development experience, we highly recommend that you [use PostCSS exclusively](https://tailwindcss.com/docs/using-with-preprocessors#using-post-css-as-your-preprocessor), and that you don’t use preprocessors like Sass or Less in your Tailwind projects.\n\nTo use Tailwind with a preprocessing tool like Sass, Less, or Stylus, you’ll need to add an additional build step to your project that lets you run your preprocessed CSS through PostCSS. If you’re using Autoprefixer in your project, you already have something like this set up.\n\nSee our documentation on [installing Tailwind as a PostCSS plugin](https://tailwindcss.com/docs/installation/using-postcss) to learn more about integrating Tailwind into your existing build process.\n\nThe most important thing to understand about using Tailwind with a preprocessor is that **preprocessors like Sass, Less, and Stylus run separately, before Tailwind**. This means that you can’t feed output from Tailwind’s `theme()` function into a Sass color function for example, because the `theme()` function isn’t actually evaluated until your Sass has been compiled to CSS and fed into PostCSS.\n\nWon’t work, Sass is processed first\n\n```\n.alert {\n  background-color: darken(theme('colors.red.500'), 10%);\n}\n```\n\nAside from that, some preprocessors have quirks when used with Tailwind, which are outlined with workarounds below.\n\n### [​Sass](#sass)\n\nWhen using Tailwind with Sass, using `!important` with `@apply` requires you to use interpolation to compile properly.\n\nWon’t work, Sass complains about !important\n\n```\n.alert {\n  @apply bg-red-500 !important;\n}\n```\n\nUse interpolation as a workaround\n\n```\n.alert {\n  @apply bg-red-500 #{!important};\n}\n```\n\nIn addition to this, Sass has trouble with Tailwind’s `screen()` function unless wrapped in parentheses.\n\nWon’t work, Sass will generate an error\n\n```\n@media screen(md) {\n  .foo {\n    color: blue;\n  }\n}\n```\n\nWrap the screen() function in parentheses\n\n```\n@media (screen(md)) {\n  .foo {\n    color: blue;\n  }\n}\n```\n\nTechnically this results in an extra set of parentheses around your media query, but it still works.\n\n### [​Stylus](#stylus)\n\nWhen using Tailwind with Stylus, you can’t use Tailwind’s `@apply` feature without wrapping the entire CSS rule in `@css` so that Stylus treats it as literal CSS.\n\nWon’t work, Stylus complains about @apply\n\n```\n.card {\n  @apply rounded-lg bg-white p-4\n}\n```\n\nUse @css to avoid processing as Stylus\n\n```\n@css {\n  .card {\n    @apply rounded-lg bg-white p-4\n  }\n}\n```\n\nThis comes with a significant cost however, which is that **you cannot use any Stylus features inside a `@css` block**.\n\nAnother option is to use the `theme()` function instead of `@apply`, and write out the actual CSS properties in long form:\n\nUse theme() instead of @apply\n\n```\n.card {\n  border-radius: theme('borderRadius.lg');\n  background-color: theme('colors.white');\n  padding: theme('spacing.4');\n}\n```\n\nIn addition to this, Stylus has trouble with Tailwind’s `screen()` function unless you use interpolation and wrap it in parentheses.\n\nWon’t work, Stylus will generate an error\n\n```\n@media screen(md) {\n  .foo {\n    color: blue;\n  }\n}\n```\n\nUse interpolation and parentheses as a workaround\n\n```\n@media ({'screen(md)'}) {\n  .foo {\n    color: blue;\n  }\n}\n```\n\nTechnically this results in an extra set of parentheses around your media query, but it still works.",
    "title": "Using with Preprocessors - Tailwind CSS",
    "description": "A guide to using Tailwind with common CSS preprocessors like Sass, Less, and Stylus.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/visibility",
    "markdown": "# Visibility - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Making elements invisible](#making-elements-invisible)\n\nUse the `invisible` utility to hide an element, but still maintain its place in the DOM, affecting the layout of other elements (compare with `hidden` from the [display](https://tailwindcss.com/docs/display#hidden) documentation).\n\n```\n<div class=\"grid grid-cols-3 gap-4\">\n  <div>01</div>\n  <div class=\"invisible ...\">02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Collapsing elements](#collapsing-elements)\n\nUse the `collapse` utility to hide table rows, row groups, columns, and column groups as if they were set to `display: none`, but without impacting the size of other rows and columns.\n\nThis makes it possible to dynamically toggle rows and columns without affecting the table layout.\n\n```\n<table>\n  <thead>\n    <tr>\n      <th>Invoice #</th>\n      <th>Client</th>\n      <th>Amount</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>#100</td>\n      <td>Pendant Publishing</td>\n      <td>$2,000.00</td>\n    </tr>\n    <tr class=\"collapse\">\n      <td>#101</td>\n      <td>Kruger Industrial Smoothing</td>\n      <td>$545.00</td>\n    </tr>\n    <tr>\n      <td>#102</td>\n      <td>J. Peterman</td>\n      <td>$10,000.25</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n### [​Making elements visible](#making-elements-visible)\n\nUse the `visible` utility to make an element visible. This is mostly useful for undoing the `invisible` utility at different screen sizes.\n\n```\n<div class=\"grid grid-cols-3 gap-4\">\n  <div>01</div>\n  <div class=\"visible ...\">02</div>\n  <div>03</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:invisible` to only apply the `invisible` utility on hover.\n\n```\n<div class=\"visible hover:invisible\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:invisible` to apply the `invisible` utility at only medium screen sizes and above.\n\n```\n<div class=\"visible md:invisible\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Visibility - Tailwind CSS",
    "description": "Utilities for controlling the visibility of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/background-attachment",
    "markdown": "# Background Attachment - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Fixed](#fixed)\n\nUse `bg-fixed` to fix the background image relative to the viewport.\n\n```\n<div class=\"bg-fixed ...\" style=\"background-image: url(...)\"></div>\n```\n\n### [​Local](#local)\n\nUse `bg-local` to scroll the background image with the container and the viewport.\n\n```\n<div class=\"bg-local ...\" style=\"background-image: url(...)\"></div>\n```\n\n### [​Scroll](#scroll)\n\nUse `bg-scroll` to scroll the background image with the viewport, but not with the container.\n\n```\n<div class=\"bg-scroll ...\" style=\"background-image: url(...)\"></div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:bg-fixed` to only apply the `bg-fixed` utility on hover.\n\n```\n<div class=\"bg-local hover:bg-fixed\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:bg-fixed` to apply the `bg-fixed` utility at only medium screen sizes and above.\n\n```\n<div class=\"bg-local md:bg-fixed\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Background Attachment - Tailwind CSS",
    "description": "Utilities for controlling how a background image behaves when scrolling.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/grid-auto-columns",
    "markdown": "# Grid Auto Columns - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Sizing implicitly-created grid columns](#sizing-implicitly-created-grid-columns)\n\nUse the `auto-cols-*` utilities to control the size of implicitly-created grid columns.\n\n```\n<div class=\"grid grid-flow-col auto-cols-max\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:auto-cols-min` to only apply the `auto-cols-min` utility on hover.\n\n```\n<div class=\"grid grid-flow-col auto-cols-max hover:auto-cols-min\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:auto-cols-min` to apply the `auto-cols-min` utility at only medium screen sizes and above.\n\n```\n<div class=\"grid grid-flow-col auto-cols-max md:auto-cols-min\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind includes four general purpose `grid-auto-columns` utilities. You can customize these values by editing `theme.gridAutoColumns` or `theme.extend.gridAutoColumns` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `grid-auto-columns` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"grid grid-flow-col auto-cols-[minmax(0,_2fr)]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Grid Auto Columns - Tailwind CSS",
    "description": "Utilities for controlling the size of implicitly-created grid columns.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/z-index",
    "markdown": "# Z-Index - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the z-index](#setting-the-z-index)\n\nUse the `z-*` utilities to control the stack order (or three-dimensional positioning) of an element, regardless of order it has been displayed.\n\n```\n<div class=\"z-40 ...\">05</div>\n<div class=\"z-30 ...\">04</div>\n<div class=\"z-20 ...\">03</div>\n<div class=\"z-10 ...\">02</div>\n<div class=\"z-0 ...\">01</div>\n```\n\n### [​Using negative values](#using-negative-values)\n\nTo use a negative z-index value, prefix the class name with a dash to convert it to a negative value.\n\n```\n<div class=\"-z-50\">\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:z-50` to only apply the `z-50` utility on hover.\n\n```\n<div class=\"z-0 hover:z-50\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:z-50` to apply the `z-50` utility at only medium screen sizes and above.\n\n```\n<div class=\"z-0 md:z-50\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides six numeric `z-index` utilities and an `auto` utility. You can customize these values by editing `theme.zIndex` or `theme.extend.zIndex` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `z-index` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"z-[100]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Z-Index - Tailwind CSS",
    "description": "Utilities for controlling the stack order of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/optimizing-for-production",
    "markdown": "# Optimizing for Production - Tailwind CSS\n\nTailwind CSS is incredibly performance focused and aims to produce the smallest CSS file possible by only generating the CSS you are _actually using_ in your project.\n\nCombined with minification and network compression, this usually leads to CSS files that are less than 10kB, even for large projects. For example, Netflix uses Tailwind for [Netflix Top 10](https://top10.netflix.com/) and the entire website delivers only 6.5kB of CSS over the network.\n\nWith CSS files this small, you don’t have to worry about complex solutions like code-splitting your CSS for each page, and can instead just ship a single small CSS file that’s downloaded once and cached until you redeploy your site.\n\nFor the smallest possible production build, we recommend minifying your CSS with a tool like [cssnano](https://cssnano.github.io/cssnano), and compressing your CSS with [Brotli](https://en.wikipedia.org/wiki/Brotli).\n\nIf you’re using Tailwind CLI, you can minify your CSS by adding the `--minify` flag:\n\n```\nnpx tailwindcss -o build.css --minify\n```\n\nIf you’ve installed Tailwind as a PostCSS plugin, add `cssnano` to the end of your plugin list:\n\nIf you’re using a framework, check the documentation as this is often handled for you in production automatically and you don’t even need to configure it.",
    "title": "Optimizing for Production - Tailwind CSS",
    "description": "Getting the most performance out of Tailwind CSS projects.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/font-variant-numeric",
    "markdown": "# Font Variant Numeric - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Applying numeric variants](#applying-numeric-variants)\n\nUse the `font-variant-numeric` utilities to enable additional glyphs for numbers, fractions, and ordinal markers _(in fonts that support them)_.\n\nThese utilities are composable so you can enable multiple `font-variant-numeric` features by combining multiple classes in your HTML:\n\n```\n<p class=\"ordinal slashed-zero tabular-nums ...\">\n  1234567890\n</p>\n```\n\nNote that many fonts don’t support these features _(stacked fractions support for example is especially rare)_, so some of these utilities may have no effect depending on the font family you are using.\n\n### [​Ordinal](#ordinal)\n\nUse the `ordinal` utility to enable special glyphs for the ordinal markers.\n\n```\n<p class=\"ordinal ...\">1st</p>\n```\n\n### [​Slashed Zero](#slashed-zero)\n\nUse the `slashed-zero` utility to force a 0 with a slash; this is useful when a clear distinction between O and 0 is needed.\n\n```\n<p class=\"slashed-zero ...\">0</p>\n```\n\n### [​Lining figures](#lining-figures)\n\nUse the `lining-nums` utility to use the numeric glyphs that are all aligned by their baseline. This corresponds to the `lnum` OpenType feature. This is the default for most fonts.\n\n```\n<p class=\"lining-nums ...\">\n  1234567890\n</p>\n```\n\n### [​Oldstyle figures](#oldstyle-figures)\n\nUse the `oldstyle-nums` utility to use numeric glyphs where some numbers have descenders. This corresponds to the `onum` OpenType feature.\n\n```\n<p class=\"oldstyle-nums ...\">\n  1234567890\n</p>\n```\n\n### [​Proportional figures](#proportional-figures)\n\nUse the `proportional-nums` utility to use numeric glyphs that have proportional widths (rather than uniform/tabular). This corresponds to the `pnum` OpenType feature.\n\n```\n<p class=\"proportional-nums ...\">\n  12121\n</p>\n<p class=\"proportional-nums ...\">\n  90909\n</p>\n```\n\n### [​Tabular figures](#tabular-figures)\n\nUse the `tabular-nums` utility to use numeric glyphs that have uniform/tabular widths (rather than proportional). This corresponds to the `tnum` OpenType feature.\n\n```\n<p class=\"tabular-nums ...\">\n  12121\n</p>\n<p class=\"tabular-nums ...\">\n  90909\n</p>\n```\n\n### [​Diagonal fractions](#diagonal-fractions)\n\nUse the `diagonal-fractions` utility to replace numbers separated by a slash with common diagonal fractions. This corresponds to the `frac` OpenType feature.\n\n```\n<p class=\"diagonal-fractions ...\">\n  1/2 3/4 5/6\n</p>\n```\n\n### [​Stacked fractions](#stacked-fractions)\n\nUse the `stacked-fractions` utility to replace numbers separated by a slash with common stacked fractions. This corresponds to the `afrc` OpenType feature. Very few fonts seem to support this feature — we’ve used Ubuntu Mono here.\n\n```\n<p class=\"stacked-fractions ...\">\n  1/2 3/4 5/6\n</p>\n```\n\n### [​Resetting numeric font variants](#resetting-numeric-font-variants)\n\nUse the `normal-nums` property to reset numeric font variants. This is usually useful for resetting a font feature at a particular breakpoint:\n\n```\n<p class=\"slashed-zero tabular-nums md:normal-nums ...\">\n  12345\n</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:tabular-nums` to only apply the `tabular-nums` utility on hover.\n\n```\n<p class=\"proportional-nums hover:tabular-nums\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:tabular-nums` to apply the `tabular-nums` utility at only medium screen sizes and above.\n\n```\n<p class=\"proportional-nums md:tabular-nums\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Font Variant Numeric - Tailwind CSS",
    "description": "Utilities for controlling the variant of numbers.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/background-clip",
    "markdown": "# Background Clip - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the background clip](#setting-the-background-clip)\n\nUse the `bg-clip-*` utilities to control the bounding box of an element’s background.\n\n```\n<div class=\"bg-clip-border p-6 bg-violet-600 border-4 border-violet-300 border-dashed\"></div>\n<div class=\"bg-clip-padding p-6 bg-violet-600 border-4 border-violet-300 border-dashed\"></div>\n<div class=\"bg-clip-content p-6 bg-violet-600 border-4 border-violet-300 border-dashed\"></div>\n```\n\n### [​Cropping to text](#cropping-to-text)\n\nUse `bg-clip-text` to crop an element’s background to match the shape of the text. Useful for effects where you want a background image to be visible through the text.\n\n```\n<div class=\"text-5xl font-extrabold ...\">\n  <span class=\"bg-clip-text text-transparent bg-gradient-to-r from-pink-500 to-violet-500\">\n    Hello world\n  </span>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:bg-clip-padding` to only apply the `bg-clip-padding` utility on hover.\n\n```\n<div class=\"bg-clip-border hover:bg-clip-padding\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:bg-clip-padding` to apply the `bg-clip-padding` utility at only medium screen sizes and above.\n\n```\n<div class=\"bg-clip-border md:bg-clip-padding\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Background Clip - Tailwind CSS",
    "description": "Utilities for controlling the bounding box of an element's background.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/gap",
    "markdown": "# Gap - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the gap between elements](#setting-the-gap-between-elements)\n\nUse the `gap-*` utilities to change the gap between both rows and columns in grid and flexbox layouts.\n\n```\n<div class=\"grid gap-4 grid-cols-2\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n</div>\n```\n\n### [​Changing row and column gaps independently](#changing-row-and-column-gaps-independently)\n\nUse the `gap-x-*` and `gap-y-*` utilities to change the gap between columns and rows independently.\n\n```\n<div class=\"grid gap-x-8 gap-y-4 grid-cols-3\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n  <div>06</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:gap-6` to only apply the `gap-6` utility on hover.\n\n```\n<div class=\"grid gap-4 hover:gap-6\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:gap-6` to apply the `gap-6` utility at only medium screen sizes and above.\n\n```\n<div class=\"grid gap-4 md:gap-6\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind’s gap scale uses the [default spacing scale](https://tailwindcss.com/docs/customizing-spacing). You can customize your spacing scale by editing `theme.spacing` or `theme.extend.spacing` in your `tailwind.config.js` file.\n\nAlternatively, you can customize just the gap scale by editing `theme.gap` or `theme.extend.gap` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `gap` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"grid gap-[2.75rem]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Gap - Tailwind CSS",
    "description": "Utilities for controlling gutters between grid and flexbox items.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/flex-basis",
    "markdown": "# Flex Basis - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the flex basis](#setting-the-flex-basis)\n\nUse the `basis-*` utilities to set the initial size of flex items.\n\n```\n<div class=\"flex flex-row\">\n  <div class=\"basis-1/4\">01</div>\n  <div class=\"basis-1/4\">02</div>\n  <div class=\"basis-1/2\">03</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:basis-1/2` to only apply the `basis-1/2` utility on hover.\n\n```\n<div class=\"basis-1/3 hover:basis-1/2\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:basis-1/3` to apply the `basis-1/3` utility at only medium screen sizes and above.\n\n```\n<div class=\"flex flex-row\">\n  <div class=\"basis-1/4 md:basis-1/3\">01</div>\n  <div class=\"basis-1/4 md:basis-1/3\">02</div>\n  <div class=\"basis-1/2 md:basis-1/3\">03</div>\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nThe default flex basis scale is a combination of the [default spacing scale](https://tailwindcss.com/docs/customizing-spacing#default-spacing-scale) as well as a set of percentage based values.\n\nYou can customize your spacing scale by editing `theme.spacing` or `theme.extend.spacing` in your `tailwind.config.js` file.\n\nAlternatively, you can customize just the flex basis scale by editing `theme.flexBasis` or `theme.extend.flexBasis` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `flex-basis` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"basis-[14.2857143%]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Flex Basis - Tailwind CSS",
    "description": "Utilities for controlling the initial size of flex items.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/grid-auto-rows",
    "markdown": "# Grid Auto Rows - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Sizing implicitly-created grid rows](#sizing-implicitly-created-grid-rows)\n\nUse the `auto-rows-*` utilities to control the size of implicitly-created grid rows.\n\n```\n<div class=\"grid grid-flow-row auto-rows-max\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:auto-rows-min` to only apply the `auto-rows-min` utility on hover.\n\n```\n<div class=\"grid grid-flow-row auto-rows-max hover:auto-rows-min\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:auto-rows-min` to apply the `auto-rows-min` utility at only medium screen sizes and above.\n\n```\n<div class=\"grid grid-flow-row auto-rows-max md:auto-rows-min\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind includes four general purpose `grid-auto-rows` utilities. You can customize these values by editing `theme.gridAutoRows` or `theme.extend.gridAutoRows` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `grid-auto-rows` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"grid grid-flow-row auto-rows-[minmax(0,_2fr)]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Grid Auto Rows - Tailwind CSS",
    "description": "Utilities for controlling the size of implicitly-created grid rows.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/browser-support",
    "markdown": "# Browser Support - Tailwind CSS\n\nIn general, Tailwind CSS v3.0 is designed for and tested on the latest stable versions of Chrome, Firefox, Edge, and Safari. It does not support any version of IE, including IE 11.\n\nWhile most of the features in Tailwind CSS will work in all modern browsers, Tailwind also includes APIs for several bleeding-edge features that aren’t yet supported by all browsers, for example the `:focus-visible` pseudo-class and `backdrop-filter` utilities.\n\nSince Tailwind is such a low-level framework, it’s easy to avoid these features if you can’t use them by simply not using the utility or modifier that’s not supported, much like how you just wouldn’t use those CSS features in your CSS.\n\nThe [Can I Use](https://caniuse.com/?search=focus-visible) database is a great resource when you’re unsure about the support for an unfamiliar CSS feature.\n\n* * *\n\n## [​Vendor Prefixes](#vendor-prefixes)\n\nMany CSS properties require vendor prefixes to be understood by browsers, for example `background-clip: text` needs the `-webkit` prefix to work in most browsers:\n\n```\n.bg-clip-text {\n  -webkit-background-clip: text;\n  background-clip: text;\n}\n```\n\nIf you’re using the Tailwind CLI tool, vendor prefixes like this will be added automatically.\n\nIf not, we recommend that you use [Autoprefixer](https://github.com/postcss/autoprefixer), which is a PostCSS plugin that automatically adds any necessary vendor prefixes based on the browsers you tell it you need to support.\n\nTo use it, install it via npm:\n\n```\nnpm install -D autoprefixer\n```\n\nThen add it to the very end of your plugin list in your PostCSS configuration:\n\n```\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  }\n}\n```\n\nTo learn more about specifying which browsers you need to support, check out [Browserslist](https://github.com/browserslist/browserslist) which is the standard way to define target browsers in front-end tooling.",
    "title": "Browser Support - Tailwind CSS",
    "description": "Understanding which browsers Tailwind supports and how to manage vendor prefixes.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/letter-spacing",
    "markdown": "# Letter Spacing - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the letter spacing](#setting-the-letter-spacing)\n\nUse the `tracking-*` utilities to control the letter spacing of an element.\n\n```\n<p class=\"tracking-tight ...\">The quick brown fox ...</p>\n<p class=\"tracking-normal ...\">The quick brown fox ...</p>\n<p class=\"tracking-wide ...\">The quick brown fox ...</p>\n```\n\n### [​Using negative values](#using-negative-values)\n\nTo use a negative letter-spacing value, prefix the class name with a dash to convert it to a negative value.\n\nUsing negative values doesn’t make a ton of sense with the letter-spacing scale Tailwind includes out of the box, but if you’ve opted to customize your letter-spacing scale to use numbers instead of descriptive words like “wide” the negative value modifier can be useful.\n\n```\n<p class=\"-tracking-2\">The quick brown fox ...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:tracking-wide` to only apply the `tracking-wide` utility on hover.\n\n```\n<p class=\"tracking-tight hover:tracking-wide\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:tracking-wide` to apply the `tracking-wide` utility at only medium screen sizes and above.\n\n```\n<p class=\"tracking-tight md:tracking-wide\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides six `letter-spacing` utilities. You can change, add, or remove these by editing the `theme.letterSpacing` section of your Tailwind config.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `letter-spacing` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<p class=\"tracking-[.25em]\">\n  <!-- ... -->\n</p>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Letter Spacing - Tailwind CSS",
    "description": "Utilities for controlling the tracking (letter spacing) of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/background-color",
    "markdown": "# Background Color - Tailwind CSS\n\nbg-inheritbackground-color: inherit; bg-currentbackground-color: currentColor; bg-transparentbackground-color: transparent; bg-blackbackground-color: rgb(0 0 0); bg-whitebackground-color: rgb(255 255 255); bg-slate-50background-color: rgb(248 250 252); bg-slate-100background-color: rgb(241 245 249); bg-slate-200background-color: rgb(226 232 240); bg-slate-300background-color: rgb(203 213 225); bg-slate-400background-color: rgb(148 163 184); bg-slate-500background-color: rgb(100 116 139); bg-slate-600background-color: rgb(71 85 105); bg-slate-700background-color: rgb(51 65 85); bg-slate-800background-color: rgb(30 41 59); bg-slate-900background-color: rgb(15 23 42); bg-slate-950background-color: rgb(2 6 23); bg-gray-50background-color: rgb(249 250 251); bg-gray-100background-color: rgb(243 244 246); bg-gray-200background-color: rgb(229 231 235); bg-gray-300background-color: rgb(209 213 219); bg-gray-400background-color: rgb(156 163 175); bg-gray-500background-color: rgb(107 114 128); bg-gray-600background-color: rgb(75 85 99); bg-gray-700background-color: rgb(55 65 81); bg-gray-800background-color: rgb(31 41 55); bg-gray-900background-color: rgb(17 24 39); bg-gray-950background-color: rgb(3 7 18); bg-zinc-50background-color: rgb(250 250 250); bg-zinc-100background-color: rgb(244 244 245); bg-zinc-200background-color: rgb(228 228 231); bg-zinc-300background-color: rgb(212 212 216); bg-zinc-400background-color: rgb(161 161 170); bg-zinc-500background-color: rgb(113 113 122); bg-zinc-600background-color: rgb(82 82 91); bg-zinc-700background-color: rgb(63 63 70); bg-zinc-800background-color: rgb(39 39 42); bg-zinc-900background-color: rgb(24 24 27); bg-zinc-950background-color: rgb(9 9 11); bg-neutral-50background-color: rgb(250 250 250); bg-neutral-100background-color: rgb(245 245 245); bg-neutral-200background-color: rgb(229 229 229); bg-neutral-300background-color: rgb(212 212 212); bg-neutral-400background-color: rgb(163 163 163); bg-neutral-500background-color: rgb(115 115 115); bg-neutral-600background-color: rgb(82 82 82); bg-neutral-700background-color: rgb(64 64 64); bg-neutral-800background-color: rgb(38 38 38); bg-neutral-900background-color: rgb(23 23 23); bg-neutral-950background-color: rgb(10 10 10); bg-stone-50background-color: rgb(250 250 249); bg-stone-100background-color: rgb(245 245 244); bg-stone-200background-color: rgb(231 229 228); bg-stone-300background-color: rgb(214 211 209); bg-stone-400background-color: rgb(168 162 158); bg-stone-500background-color: rgb(120 113 108); bg-stone-600background-color: rgb(87 83 78); bg-stone-700background-color: rgb(68 64 60); bg-stone-800background-color: rgb(41 37 36); bg-stone-900background-color: rgb(28 25 23); bg-stone-950background-color: rgb(12 10 9); bg-red-50background-color: rgb(254 242 242); bg-red-100background-color: rgb(254 226 226); bg-red-200background-color: rgb(254 202 202); bg-red-300background-color: rgb(252 165 165); bg-red-400background-color: rgb(248 113 113); bg-red-500background-color: rgb(239 68 68); bg-red-600background-color: rgb(220 38 38); bg-red-700background-color: rgb(185 28 28); bg-red-800background-color: rgb(153 27 27); bg-red-900background-color: rgb(127 29 29); bg-red-950background-color: rgb(69 10 10); bg-orange-50background-color: rgb(255 247 237); bg-orange-100background-color: rgb(255 237 213); bg-orange-200background-color: rgb(254 215 170); bg-orange-300background-color: rgb(253 186 116); bg-orange-400background-color: rgb(251 146 60); bg-orange-500background-color: rgb(249 115 22); bg-orange-600background-color: rgb(234 88 12); bg-orange-700background-color: rgb(194 65 12); bg-orange-800background-color: rgb(154 52 18); bg-orange-900background-color: rgb(124 45 18); bg-orange-950background-color: rgb(67 20 7); bg-amber-50background-color: rgb(255 251 235); bg-amber-100background-color: rgb(254 243 199); bg-amber-200background-color: rgb(253 230 138); bg-amber-300background-color: rgb(252 211 77); bg-amber-400background-color: rgb(251 191 36); bg-amber-500background-color: rgb(245 158 11); bg-amber-600background-color: rgb(217 119 6); bg-amber-700background-color: rgb(180 83 9); bg-amber-800background-color: rgb(146 64 14); bg-amber-900background-color: rgb(120 53 15); bg-amber-950background-color: rgb(69 26 3); bg-yellow-50background-color: rgb(254 252 232); bg-yellow-100background-color: rgb(254 249 195); bg-yellow-200background-color: rgb(254 240 138); bg-yellow-300background-color: rgb(253 224 71); bg-yellow-400background-color: rgb(250 204 21); bg-yellow-500background-color: rgb(234 179 8); bg-yellow-600background-color: rgb(202 138 4); bg-yellow-700background-color: rgb(161 98 7); bg-yellow-800background-color: rgb(133 77 14); bg-yellow-900background-color: rgb(113 63 18); bg-yellow-950background-color: rgb(66 32 6); bg-lime-50background-color: rgb(247 254 231); bg-lime-100background-color: rgb(236 252 203); bg-lime-200background-color: rgb(217 249 157); bg-lime-300background-color: rgb(190 242 100); bg-lime-400background-color: rgb(163 230 53); bg-lime-500background-color: rgb(132 204 22); bg-lime-600background-color: rgb(101 163 13); bg-lime-700background-color: rgb(77 124 15); bg-lime-800background-color: rgb(63 98 18); bg-lime-900background-color: rgb(54 83 20); bg-lime-950background-color: rgb(26 46 5); bg-green-50background-color: rgb(240 253 244); bg-green-100background-color: rgb(220 252 231); bg-green-200background-color: rgb(187 247 208); bg-green-300background-color: rgb(134 239 172); bg-green-400background-color: rgb(74 222 128); bg-green-500background-color: rgb(34 197 94); bg-green-600background-color: rgb(22 163 74); bg-green-700background-color: rgb(21 128 61); bg-green-800background-color: rgb(22 101 52); bg-green-900background-color: rgb(20 83 45); bg-green-950background-color: rgb(5 46 22); bg-emerald-50background-color: rgb(236 253 245); bg-emerald-100background-color: rgb(209 250 229); bg-emerald-200background-color: rgb(167 243 208); bg-emerald-300background-color: rgb(110 231 183); bg-emerald-400background-color: rgb(52 211 153); bg-emerald-500background-color: rgb(16 185 129); bg-emerald-600background-color: rgb(5 150 105); bg-emerald-700background-color: rgb(4 120 87); bg-emerald-800background-color: rgb(6 95 70); bg-emerald-900background-color: rgb(6 78 59); bg-emerald-950background-color: rgb(2 44 34); bg-teal-50background-color: rgb(240 253 250); bg-teal-100background-color: rgb(204 251 241); bg-teal-200background-color: rgb(153 246 228); bg-teal-300background-color: rgb(94 234 212); bg-teal-400background-color: rgb(45 212 191); bg-teal-500background-color: rgb(20 184 166); bg-teal-600background-color: rgb(13 148 136); bg-teal-700background-color: rgb(15 118 110); bg-teal-800background-color: rgb(17 94 89); bg-teal-900background-color: rgb(19 78 74); bg-teal-950background-color: rgb(4 47 46); bg-cyan-50background-color: rgb(236 254 255); bg-cyan-100background-color: rgb(207 250 254); bg-cyan-200background-color: rgb(165 243 252); bg-cyan-300background-color: rgb(103 232 249); bg-cyan-400background-color: rgb(34 211 238); bg-cyan-500background-color: rgb(6 182 212); bg-cyan-600background-color: rgb(8 145 178); bg-cyan-700background-color: rgb(14 116 144); bg-cyan-800background-color: rgb(21 94 117); bg-cyan-900background-color: rgb(22 78 99); bg-cyan-950background-color: rgb(8 51 68); bg-sky-50background-color: rgb(240 249 255); bg-sky-100background-color: rgb(224 242 254); bg-sky-200background-color: rgb(186 230 253); bg-sky-300background-color: rgb(125 211 252); bg-sky-400background-color: rgb(56 189 248); bg-sky-500background-color: rgb(14 165 233); bg-sky-600background-color: rgb(2 132 199); bg-sky-700background-color: rgb(3 105 161); bg-sky-800background-color: rgb(7 89 133); bg-sky-900background-color: rgb(12 74 110); bg-sky-950background-color: rgb(8 47 73); bg-blue-50background-color: rgb(239 246 255); bg-blue-100background-color: rgb(219 234 254); bg-blue-200background-color: rgb(191 219 254); bg-blue-300background-color: rgb(147 197 253); bg-blue-400background-color: rgb(96 165 250); bg-blue-500background-color: rgb(59 130 246); bg-blue-600background-color: rgb(37 99 235); bg-blue-700background-color: rgb(29 78 216); bg-blue-800background-color: rgb(30 64 175); bg-blue-900background-color: rgb(30 58 138); bg-blue-950background-color: rgb(23 37 84); bg-indigo-50background-color: rgb(238 242 255); bg-indigo-100background-color: rgb(224 231 255); bg-indigo-200background-color: rgb(199 210 254); bg-indigo-300background-color: rgb(165 180 252); bg-indigo-400background-color: rgb(129 140 248); bg-indigo-500background-color: rgb(99 102 241); bg-indigo-600background-color: rgb(79 70 229); bg-indigo-700background-color: rgb(67 56 202); bg-indigo-800background-color: rgb(55 48 163); bg-indigo-900background-color: rgb(49 46 129); bg-indigo-950background-color: rgb(30 27 75); bg-violet-50background-color: rgb(245 243 255); bg-violet-100background-color: rgb(237 233 254); bg-violet-200background-color: rgb(221 214 254); bg-violet-300background-color: rgb(196 181 253); bg-violet-400background-color: rgb(167 139 250); bg-violet-500background-color: rgb(139 92 246); bg-violet-600background-color: rgb(124 58 237); bg-violet-700background-color: rgb(109 40 217); bg-violet-800background-color: rgb(91 33 182); bg-violet-900background-color: rgb(76 29 149); bg-violet-950background-color: rgb(46 16 101); bg-purple-50background-color: rgb(250 245 255); bg-purple-100background-color: rgb(243 232 255); bg-purple-200background-color: rgb(233 213 255); bg-purple-300background-color: rgb(216 180 254); bg-purple-400background-color: rgb(192 132 252); bg-purple-500background-color: rgb(168 85 247); bg-purple-600background-color: rgb(147 51 234); bg-purple-700background-color: rgb(126 34 206); bg-purple-800background-color: rgb(107 33 168); bg-purple-900background-color: rgb(88 28 135); bg-purple-950background-color: rgb(59 7 100); bg-fuchsia-50background-color: rgb(253 244 255); bg-fuchsia-100background-color: rgb(250 232 255); bg-fuchsia-200background-color: rgb(245 208 254); bg-fuchsia-300background-color: rgb(240 171 252); bg-fuchsia-400background-color: rgb(232 121 249); bg-fuchsia-500background-color: rgb(217 70 239); bg-fuchsia-600background-color: rgb(192 38 211); bg-fuchsia-700background-color: rgb(162 28 175); bg-fuchsia-800background-color: rgb(134 25 143); bg-fuchsia-900background-color: rgb(112 26 117); bg-fuchsia-950background-color: rgb(74 4 78); bg-pink-50background-color: rgb(253 242 248); bg-pink-100background-color: rgb(252 231 243); bg-pink-200background-color: rgb(251 207 232); bg-pink-300background-color: rgb(249 168 212); bg-pink-400background-color: rgb(244 114 182); bg-pink-500background-color: rgb(236 72 153); bg-pink-600background-color: rgb(219 39 119); bg-pink-700background-color: rgb(190 24 93); bg-pink-800background-color: rgb(157 23 77); bg-pink-900background-color: rgb(131 24 67); bg-pink-950background-color: rgb(80 7 36); bg-rose-50background-color: rgb(255 241 242); bg-rose-100background-color: rgb(255 228 230); bg-rose-200background-color: rgb(254 205 211); bg-rose-300background-color: rgb(253 164 175); bg-rose-400background-color: rgb(251 113 133); bg-rose-500background-color: rgb(244 63 94); bg-rose-600background-color: rgb(225 29 72); bg-rose-700background-color: rgb(190 18 60); bg-rose-800background-color: rgb(159 18 57); bg-rose-900background-color: rgb(136 19 55); bg-rose-950background-color: rgb(76 5 25);",
    "title": "Background Color - Tailwind CSS",
    "description": "Utilities for controlling an element's background color.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/background-origin",
    "markdown": "# Background Origin - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the background origin](#setting-the-background-origin)\n\nUse `bg-origin-border`, `bg-origin-padding`, and `bg-origin-content` to control where an element’s background is rendered.\n\n```\n<div class=\"bg-origin-border p-4 border-4 border-dashed ...\" style=\"background-image: url(...)\"></div>\n<div class=\"bg-origin-padding p-4 border-4 border-dashed ...\" style=\"background-image: url(...)\"></div>\n<div class=\"bg-origin-content p-4 border-4 border-dashed ...\" style=\"background-image: url(...)\"></div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:bg-origin-padding` to only apply the `bg-origin-padding` utility on hover.\n\n```\n<div class=\"bg-origin-border hover:bg-origin-padding\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:bg-origin-padding` to apply the `bg-origin-padding` utility at only medium screen sizes and above.\n\n```\n<div class=\"bg-origin-border md:bg-origin-padding\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Background Origin - Tailwind CSS",
    "description": "Utilities for controlling how an element's background is positioned relative to borders, padding, and content.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/justify-content",
    "markdown": "# Justify Content - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Start](#start)\n\nUse `justify-start` to justify items against the start of the container’s main axis:\n\n```\n<div class=\"flex justify-start ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Center](#center)\n\nUse `justify-center` to justify items along the center of the container’s main axis:\n\n```\n<div class=\"flex justify-center ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​End](#end)\n\nUse `justify-end` to justify items against the end of the container’s main axis:\n\n```\n<div class=\"flex justify-end ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Space between](#space-between)\n\nUse `justify-between` to justify items along the container’s main axis such that there is an equal amount of space between each item:\n\n```\n<div class=\"flex justify-between ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Space around](#space-around)\n\nUse `justify-around` to justify items along the container’s main axis such that there is an equal amount of space on each side of each item:\n\n```\n<div class=\"flex justify-around ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Space evenly](#space-evenly)\n\nUse `justify-evenly` to justify items along the container’s main axis such that there is an equal amount of space around each item, but also accounting for the doubling of space you would normally see between each item when using `justify-around`:\n\n```\n<div class=\"flex justify-evenly ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Stretch](#stretch)\n\nUse `justify-stretch` to allow content items to fill the available space along the container’s main axis:\n\n```\n<div class=\"grid grid-flow-col justify-stretch ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Normal](#normal)\n\nUse `justify-normal` to pack content items in their default position as if no `justify-content` value was set:\n\n```\n<div class=\"flex justify-normal ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:justify-between` to only apply the `justify-between` utility on hover.\n\n```\n<div class=\"flex justify-start hover:justify-between\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:justify-between` to apply the `justify-between` utility at only medium screen sizes and above.\n\n```\n<div class=\"flex justify-start md:justify-between\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Justify Content - Tailwind CSS",
    "description": "Utilities for controlling how flex and grid items are positioned along a container's main axis.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/line-clamp",
    "markdown": "# Line Clamp - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Truncating multi-line text](#truncating-multi-line-text)\n\nUse the `line-clamp-*` utilities to truncate a block of text after a specific number of lines.\n\n```\n<article>\n  <time>Mar 10, 2020</time>\n  <h2>Boost your conversion rate</h2>\n  <p class=\"line-clamp-3\">Nulla dolor velit adipisicing duis excepteur esse in duis nostrud occaecat mollit incididunt deserunt sunt. Ut ut sunt laborum ex occaecat eu tempor labore enim adipisicing minim ad. Est in quis eu dolore occaecat excepteur fugiat dolore nisi aliqua fugiat enim ut cillum. Labore enim duis nostrud eu. Est ut eiusmod consequat irure quis deserunt ex. Enim laboris dolor magna pariatur. Dolor et ad sint voluptate sunt elit mollit officia ad enim sit consectetur enim.</p>\n  <div>\n    <img src=\"...\" />\n    Lindsay Walton\n  </div>\n</article>\n```\n\n### [​Undoing line clamping](#undoing-line-clamping)\n\nUse `line-clamp-none` to undo a previously applied line clamp utility.\n\n```\n<p class=\"line-clamp-3 lg:line-clamp-none\">\n  <!-- ... -->\n</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:line-clamp-4` to only apply the `line-clamp-4` utility on hover.\n\n```\n<p class=\"line-clamp-3 hover:line-clamp-4\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:line-clamp-4` to apply the `line-clamp-4` utility at only medium screen sizes and above.\n\n```\n<p class=\"line-clamp-3 md:line-clamp-4\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides the six `line-clamp` utilities. You can customize these values by editing `theme.lineClamp` or `theme.extend.lineClamp` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `line-clamp` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<p class=\"line-clamp-[7]\">\n  <!-- ... -->\n</p>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Line Clamp - Tailwind CSS",
    "description": "Utilities for clamping text to a specific number of lines.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/flex-direction",
    "markdown": "# Flex Direction - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Row](#row)\n\nUse `flex-row` to position flex items horizontally in the same direction as text:\n\n```\n<div class=\"flex flex-row ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Row reversed](#row-reversed)\n\nUse `flex-row-reverse` to position flex items horizontally in the opposite direction:\n\n```\n<div class=\"flex flex-row-reverse ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Column](#column)\n\nUse `flex-col` to position flex items vertically:\n\n```\n<div class=\"flex flex-col ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Column reversed](#column-reversed)\n\nUse `flex-col-reverse` to position flex items vertically in the opposite direction:\n\n```\n<div class=\"flex flex-col-reverse ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:flex-row` to only apply the `flex-row` utility on hover.\n\n```\n<div class=\"flex flex-col hover:flex-row\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:flex-row` to apply the `flex-row` utility at only medium screen sizes and above.\n\n```\n<div class=\"flex flex-col md:flex-row\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Flex Direction - Tailwind CSS",
    "description": "Utilities for controlling the direction of flex items.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/upgrade-guide",
    "markdown": "# Upgrade Guide - Tailwind CSS\n\nTailwind CSS v3.0 is a major update to the framework with a brand new internal engine and as such includes a small number of breaking changes.\n\nWe take stability very seriously and have worked hard to make any breaking changes as painless as possible. For most projects, upgrading to Tailwind CSS v3.0 should take less than 30 minutes.\n\nTo learn more about what’s new in Tailwind CSS v3.0, read the [Tailwind CSS v3.0 announcement](https://tailwindcss.com/blog/tailwindcss-v3) on our blog.\n\n* * *\n\n## [​Upgrade packages](#upgrade-packages)\n\nUpdate Tailwind, as well as PostCSS and autoprefixer, using npm:\n\n```\nnpm install -D tailwindcss@latest postcss@latest autoprefixer@latest\n```\n\nNote that Tailwind CSS v3.0 requires PostCSS 8, and no longer supports PostCSS 7. If you can’t upgrade to PostCSS 8, we recommend using [Tailwind CLI](https://tailwindcss.com/docs/installation) instead of installing Tailwind as a PostCSS plugin.\n\nIf you are using nesting in your custom CSS (in combination with a PostCSS nesting plugin), you should also [configure the `tailwindcss/nesting` plugin](https://tailwindcss.com/docs/using-with-preprocessors#nesting) in your PostCSS configuration to ensure compatibility with Tailwind CSS v3.0.\n\n### [​Official plugins](#official-plugins)\n\nAll of our first-party plugins have been updated for compatibility with v3.0.\n\nIf you’re using any of our plugins, make sure to update them all to the latest version at the same time to avoid version constraint errors.\n\n```\nnpm install -D tailwindcss@latest \\\n  @tailwindcss/typography@latest \\\n  @tailwindcss/forms@latest \\\n  @tailwindcss/aspect-ratio@latest \\\n  @tailwindcss/line-clamp@latest \\\n  postcss@latest \\\n  autoprefixer@latest\n```\n\n### [​Play CDN](#play-cdn)\n\nFor Tailwind CSS v3.0, the CSS-based CDN build we’ve offered in the past has been replaced by the new [Play CDN](https://tailwindcss.com/docs/installation/play-cdn), which gives you the full power of the new engine right in the browser with no build step.\n\nTo try it out, throw this `<script>` tag in your `<head>`:\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Example</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n  </head>\n  <body>\n    <!-- -->\n  </body>\n</html>\n```\n\nThe Play CDN is designed for development purposes only — compiling your own static CSS build is a much better choice in production.\n\n* * *\n\n## [​Migrating to the JIT engine](#migrating-to-the-jit-engine)\n\nThe new [Just-in-Time engine](https://tailwindcss.com/blog/just-in-time-the-next-generation-of-tailwind-css) we announced in March has replaced the classic engine in Tailwind CSS v3.0.\n\nThe new engine generates the styles you need for your project on-demand, and might necessitate some small changes to your project depending on how you have Tailwind configured.\n\nIf you were already opting in to `mode: 'jit'` in Tailwind CSS v2.x, you can safely remove that from your configuration in v3.0:\n\n### [​Configure content sources](#configure-content-sources)\n\nSince Tailwind no longer uses PurgeCSS under the hood, we’ve renamed the `purge` option to `content` to better reflect what it’s for:\n\nIf you weren’t already using the `purge` option in your project, it’s crucial that you configure your template paths now or your compiled CSS will be empty.\n\nSince we’re not using PurgeCSS under the hood anymore, some of the advanced purge options have changed. See the new [content configuration](https://tailwindcss.com/docs/content-configuration) documentation for more information on advanced options.\n\n### [​Remove dark mode configuration](#remove-dark-mode-configuration)\n\nThe dark mode feature is now enabled using the `media` strategy by default, so you can remove this key entirely from your `tailwind.config.js` file, _unless_ you’re using the `class` strategy.\n\nYou can also safely remove this key if it’s currently set to `false`:\n\n### [​Remove variant configuration](#remove-variant-configuration)\n\nIn Tailwind CSS v3.0, every variant is automatically available for every utility by default, so you can remove the `variants` section from your `tailwind.config.js` file:\n\n### [​Replace @variants with @layer](#replace-variants-with-layer)\n\nSince all variants are now enabled by default, you no longer need to explicitly enable these for custom CSS using the `@variants` or `@responsive` directives.\n\nInstead, add any custom CSS to appropriate “layer” using the `@layer` directive:\n\n```\n @variants hover, focus {\n @layer utilities {\n   .content-auto {\n     content-visibility: auto;\n   }\n }\n```\n\nAny custom CSS added to one of Tailwind’s layers will automatically support variants.\n\nSee the documentation on [adding custom styles using CSS and @layer](https://tailwindcss.com/docs/adding-custom-styles#using-css-and-layer) for more information.\n\n### [​Automatic transforms and filters](#automatic-transforms-and-filters)\n\nIn Tailwind CSS v3.0, transform and filter utilities like `scale-50` and `brightness-75` will automatically take effect without needing to add the `transform`, `filter`, or `backdrop-filter` classes:\n\n```\n<div class=\"transform scale-50 filter grayscale backdrop-filter backdrop-blur-sm\">\n<div class=\"scale-50 grayscale backdrop-blur-sm\">\n```\n\nWhile there’s no harm in leaving them in your HTML, they can safely be removed — with one exception. If you’re relying on `transform` to create a new stacking context, you may want to leave it, otherwise you may run into z-order issues. Alternatively, replace it with `relative` or `isolate` to force a new stacking context.\n\n### [​New opacity modifier syntax](#new-opacity-modifier-syntax)\n\nThe new engine introduces [a new syntax](https://tailwindcss.com/docs/background-color#changing-the-opacity) for changing the opacity of color utilities that we recommend migrating to from utilities like `bg-opacity-*`:\n\n```\n<div class=\"bg-black bg-opacity-25\">\n<div class=\"bg-black/25\">\n```\n\nThe old approach still works in all cases except when using a `border-opacity-*` utility with the default `border` class — in v3 you’ll need to explicitly specify your border color:\n\n```\n<div class=\"border border-opacity-25\">\n<div class=\"border border-gray-200/25\">\n```\n\nEvery other situation behaves the same, so aside from that change your projects will work exactly as they did before. We do recommend using the new syntax going forward though, and plan to disable utilities like `border-opacity-*` and `bg-opacity-*` by default in v4, though you will still be able to enable them if needed.\n\nThis new syntax works for all color utilities, even utilities that didn’t have any way to change the opacity in the past like `from-red-500/75`.\n\n* * *\n\n## [​Color palette changes](#color-palette-changes)\n\nTailwind CSS v3.0 now includes every color from the extended color palette by default, including previously disabled colors like cyan, rose, fuchsia, and lime, and all five variations of gray.\n\n### [​Removed color aliases](#removed-color-aliases)\n\nIn v2.0, several of the default colors were actually aliases for the extended colors:\n\n| v2 Default | v2 Extended |\n| --- | --- |\n| `green` | `emerald` |\n| `yellow` | `amber` |\n| `purple` | `violet` |\n\nIn v3.0, these colors use their extended names by default, so what was previously `bg-green-500` is now `bg-emerald-500`, and `bg-green-500` now refers to the green from the extended palette.\n\nIf you’re using these colors in your project, the simplest way to upgrade is to alias them back to their previous names in your `tailwind.config.js` file:\n\nIf you are already using a custom color palette, this change doesn’t impact you at all.\n\n### [​Renamed gray scales](#renamed-gray-scales)\n\nAs part of enabling all of the extended colors by default, we’ve given the different gray shades shorter single-word names to make them more practical to use and make it less awkward for them to co-exist at the same time.\n\n| v2 Default | v2 Extended | v3 Unified |\n| --- | --- | --- |\n| N/A | `blueGray` | `slate` |\n| `gray` | `coolGray` | `gray` |\n| N/A | `gray` | `zinc` |\n| N/A | `trueGray` | `neutral` |\n| N/A | `warmGray` | `stone` |\n\nIf you were referencing any of the extended grays, you should update your references to the new names, for example:\n\nIf you weren’t referencing any of the grays from the extended color palette, this change doesn’t impact you at all.\n\n* * *\n\n## [​Class name changes](#class-name-changes)\n\nSome class names in Tailwind CSS v3.0 have changed to avoid naming collisions, improve the developer experience, or make it possible to support new features.\n\nWherever possible we have preserved the old name as well so many of these changes are non-breaking, but you’re encouraged to update to the new class names.\n\n### [​overflow-clip/ellipsis](#overflow-clip-ellipsis)\n\nThose damn browser developers added a real `overflow: clip` property, so using `overflow-clip` for `text-overflow: clip` is a really bad idea now.\n\nWe’ve renamed `overflow-clip` to `text-clip`, and renamed `overflow-ellipsis` to `text-ellipsis` to avoid the naming collision:\n\n```\n<div class=\"overflow-clip overflow-ellipsis\">\n<div class=\"text-clip text-ellipsis\">\n```\n\nThis is extremely unlikely to affect anyone, as there are very few use-cases for `text-clip` and it’s only really included for the sake of completion.\n\n### [​flex-grow/shrink](#flex-grow-shrink)\n\nWe’ve added `grow-*` and `shrink-*` as aliases for `flex-grow-*` and `flex-shrink-*`:\n\n```\n<div class=\"flex-grow-0 flex-shrink\">\n<div class=\"grow-0 shrink\">\n```\n\nThe old class names will always work but you’re encouraged to update to the new ones.\n\n### [​outline-black/white](#outline-black-white)\n\nSince browsers are finally starting to respect border radius when rendering outlines, we’ve added separate utilities for the `outline-style`, `outline-color`, `outline-width` and `outline-offset` properties.\n\nThis means that `outline-white` and `outline-black` now only set the outline _color_, whereas in v2 they set the color, width, style, and offset.\n\nIf you are using `outline-white` or `outline-black` in your project, you can bring back the old styles by adding the following custom CSS to your project:\n\n```\n@layer utilities {\n  .outline-black {\n    outline: 2px dotted black;\n    outline-offset: 2px;\n  }\n\n  .outline-white {\n    outline: 2px dotted white;\n    outline-offset: 2px;\n  }\n}\n```\n\nAlternatively, you can update any usage of them in your CSS with the following classes:\n\n```\n<div class=\"outline-black\">\n<div class=\"outline-black outline-2 outline-dotted outline-offset-2\">\n\n<div class=\"outline-white\">\n<div class=\"outline-white outline-2 outline-dotted outline-offset-2\">\n```\n\n### [​decoration-clone/slice](#decoration-clone-slice)\n\nWe’ve added `box-decoration-clone` and `box-decoration-slice` as aliases for `decoration-clone` and `decoration-slice` to avoid confusion with all of the new `text-decoration` utilities that use the `decoration-` namespace:\n\n```\n<div class=\"decoration-clone\"></div>\n<div class=\"box-decoration-clone\"></div>\n\n<div class=\"decoration-slice\"></div>\n<div class=\"box-decoration-slice\"></div>\n```\n\nThe old class names will always work but you’re encouraged to update to the new ones.\n\n* * *\n\n## [​Other minor changes](#other-minor-changes)\n\nTailwind CSS v3.0 necessitates a couple of other small breaking changes that are unlikely to affect many people, but have been captured here.\n\n### [​Separator cannot be a dash](#separator-cannot-be-a-dash)\n\nThe dash (`-`) character cannot be used as a custom separator in v3.0 because of a parsing ambiguity it introduces in the engine.\n\nYou’ll have to switch to another character like `_` instead:\n\n### [​Prefix cannot be a function](#prefix-cannot-be-a-function)\n\nPrior to Tailwind CSS v3.0, it was possible to define your class prefix as a function:\n\nThis isn’t possible in the new engine and we’ve had to remove support for this feature.\n\nInstead, use a static prefix that is the same for every class Tailwind generates:\n\n### [​File modifier order reversed](#file-modifier-order-reversed)\n\nSuper minor change since v3.0.0-alpha.2 where the `file` modifier was introduced — if you were combining it with other modifiers like `hover` or `focus`, you’ll need to flip the modifier order:\n\n```\n<input class=\"file:hover:bg-blue-600 ...\">\n<input class=\"hover:file:bg-blue-600 ...\">\n```\n\nLearn more in the [ordering stacked modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#ordering-stacked-modifiers) documentation.\n\n### [​Fill and stroke use color palette](#fill-and-stroke-use-color-palette)\n\nThe `fill-*` and `stroke-*` utilities mirror your `theme.colors` key by default now. This isn’t a breaking change if you haven’t customized your color palette, but if you have, the `fill-current` and `stroke-current` classes may not work if you don’t have `current` included in your own custom color palette.\n\nAdd `current` to your custom color palette to resolve this:\n\n### [​Negative values removed](#negative-values-removed)\n\nThe negative prefix in utilities like `-mx-4` is a first class feature in Tailwind now, rather than something driven by your theme, so you can add `-` in front of any utility that support negative values and it will just work.\n\nThe negative values have been removed from the default theme, so if you were referencing them with `theme()`, you will see an error when trying to compile your CSS.\n\nUse the `calc()` function to update any affected code:\n\n```\n.my-class {\n  top: theme('top.-4')\n  top: calc(theme('top.4') * -1)\n}\n```\n\n### [​Base layer must be present](#base-layer-must-be-present)\n\nIn Tailwind CSS v3.0, the `@tailwind base` directive must be present for utilities like transforms, filters, and shadows to work as expected.\n\nIf you were previously disabling Tailwind’s base styles by not including this directive, you should add it back and disable `preflight` in your `corePlugins` configuration instead:\n\nThis will disable Tailwind’s global base styles without affecting utilities that rely on adding their own base styles to function correctly.\n\n### [​Screens layer has been renamed](#screens-layer-has-been-renamed)\n\nThe `@tailwind screens` layer has been renamed to `@tailwind variants`:\n\nI think you are more likely to be attacked by a shark while working at your desk than you are to be affected by this change.",
    "title": "Upgrade Guide - Tailwind CSS",
    "description": "Upgrading your Tailwind CSS projects from v2 to v3.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/background-position",
    "markdown": "# Background Position - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the background position](#setting-the-background-position)\n\nUse utilities like `bg-center`, `bg-right`, and `bg-left-top` to the position of an element’s background image.\n\n```\n<div class=\"bg-no-repeat bg-left-top ...\" style=\"background-image: url(...);\"></div>\n<div class=\"bg-no-repeat bg-top ...\" style=\"background-image: url(...);\"></div>\n<div class=\"bg-no-repeat bg-right-top ...\" style=\"background-image: url(...);\"></div>\n<div class=\"bg-no-repeat bg-left ...\" style=\"background-image: url(...);\"></div>\n<div class=\"bg-no-repeat bg-center ...\" style=\"background-image: url(...);\"></div>\n<div class=\"bg-no-repeat bg-right ...\" style=\"background-image: url(...);\"></div>\n<div class=\"bg-no-repeat bg-left-bottom ...\" style=\"background-image: url(...);\"></div>\n<div class=\"bg-no-repeat bg-bottom ...\" style=\"background-image: url(...);\"></div>\n<div class=\"bg-no-repeat bg-right-bottom ...\" style=\"background-image: url(...);\"></div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:bg-top` to only apply the `bg-top` utility on hover.\n\n```\n<div class=\"bg-center hover:bg-top ...\" style=\"background-image: url(...)\"></div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:bg-top` to apply the `bg-top` utility at only medium screen sizes and above.\n\n```\n<div class=\"bg-center md:bg-top ...\" style=\"background-image: url(...)\"></div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides nine `background-position` utilities. You change, add, or remove these by editing the `theme.backgroundPosition` section of your Tailwind config.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `background-position` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"bg-[center_top_1rem]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Background Position - Tailwind CSS",
    "description": "Utilities for controlling the position of an element's background image.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/line-height",
    "markdown": "# Line Height - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Relative line-heights](#relative-line-heights)\n\nUse the `leading-none`, `leading-tight`, `leading-snug`, `leading-normal`, `leading-relaxed`, and `leading-loose` utilities to give an element a relative line-height based on its current font-size.\n\n```\n<p class=\"leading-normal ...\">So I started to walk into the water...</p>\n<p class=\"leading-relaxed ...\">So I started to walk into the water...</p>\n<p class=\"leading-loose ...\">So I started to walk into the water...</p>\n```\n\n### [​Fixed line-heights](#fixed-line-heights)\n\nUse utilities like `leading-6` and `leading-7` to give an element a fixed line-height, irrespective of the current font-size. These are useful when you need very precise control over an element’s final size.\n\n```\n<p class=\"leading-6 ...\">So I started to walk into the water...</p>\n<p class=\"leading-7 ...\">So I started to walk into the water...</p>\n<p class=\"leading-8 ...\">So I started to walk into the water...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:leading-loose` to only apply the `leading-loose` utility on hover.\n\n```\n<p class=\"leading-none hover:leading-loose\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:leading-loose` to apply the `leading-loose` utility at only medium screen sizes and above.\n\n```\n<p class=\"leading-none md:leading-loose\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n### [​Overriding default line-heights](#overriding-default-line-heights)\n\nIt’s important to note that by default, Tailwind’s [font-size](https://tailwindcss.com/docs/font-size) utilities each set their own default line-height. This means that any time you use a responsive font-size utility like `sm:text-xl`, any explicit line-height you have set for a smaller breakpoint will be overridden.\n\n```\n<!-- The `leading-loose` class will be overridden at the `md` breakpoint -->\n<p class=\"text-lg leading-loose md:text-xl\">\n  Maybe we can live without libraries...\n</p>\n```\n\nIf you want to override the default line-height after setting a breakpoint-specific font-size, make sure to set a breakpoint-specific line-height as well:\n\n```\n<!-- The `leading-loose` class will be overridden at the `md` breakpoint -->\n<p class=\"text-lg leading-loose md:text-xl md:leading-loose\">\n  Maybe we can live without libraries...\n</p>\n```\n\nUsing the same line-height across different font sizes is generally not going to give you good typographic results. Line-height should typically get smaller as font-size increases, so the default behavior here usually saves you a ton of work. If you find yourself fighting it, you can always [customize your font-size scale](https://tailwindcss.com/docs/font-size#customizing) to not include default line-heights.\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides six relative and eight fixed `line-height` utilities. You change, add, or remove these by customizing the `lineHeight` section of your Tailwind theme config.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `line-height` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<p class=\"leading-[3rem]\">\n  <!-- ... -->\n</p>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Line Height - Tailwind CSS",
    "description": "Utilities for controlling the leading (line height) of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/utility-first",
    "markdown": "# Utility-First Fundamentals - Tailwind CSS\n\n* * *\n\n## [​Overview](#overview)\n\nTraditionally, whenever you need to style something on the web, you write CSS.\n\nUsing a traditional approach where custom designs require custom CSS\n\n```\n<div class=\"chat-notification\">\n  <div class=\"chat-notification-logo-wrapper\">\n    <img class=\"chat-notification-logo\" src=\"/img/logo.svg\" alt=\"ChitChat Logo\">\n  </div>\n  <div class=\"chat-notification-content\">\n    <h4 class=\"chat-notification-title\">ChitChat</h4>\n    <p class=\"chat-notification-message\">You have a new message!</p>\n  </div>\n</div>\n\n<style>\n  .chat-notification {\n    display: flex;\n    align-items: center;\n    max-width: 24rem;\n    margin: 0 auto;\n    padding: 1.5rem;\n    border-radius: 0.5rem;\n    background-color: #fff;\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n  .chat-notification-logo-wrapper {\n    flex-shrink: 0;\n  }\n  .chat-notification-logo {\n    height: 3rem;\n    width: 3rem;\n  }\n  .chat-notification-content {\n    margin-left: 1.5rem;\n  }\n  .chat-notification-title {\n    color: #1a202c;\n    font-size: 1.25rem;\n    line-height: 1.25;\n  }\n  .chat-notification-message {\n    color: #718096;\n    font-size: 1rem;\n    line-height: 1.5;\n  }\n</style>\n```\n\nWith Tailwind, you style elements by applying pre-existing classes directly in your HTML.\n\nUsing utility classes to build custom designs without writing CSS\n\n```\n<div class=\"p-6 max-w-sm mx-auto bg-white rounded-xl shadow-lg flex items-center space-x-4\">\n  <div class=\"shrink-0\">\n    <img class=\"h-12 w-12\" src=\"/img/logo.svg\" alt=\"ChitChat Logo\">\n  </div>\n  <div>\n    <div class=\"text-xl font-medium text-black\">ChitChat</div>\n    <p class=\"text-slate-500\">You have a new message!</p>\n  </div>\n</div>\n```\n\nIn the example above, we’ve used:\n\n*   Tailwind’s [flexbox](https://tailwindcss.com/docs/display#flex) and [padding](https://tailwindcss.com/docs/padding) utilities (`flex`, `shrink-0`, and `p-6`) to control the overall card layout\n*   The [max-width](https://tailwindcss.com/docs/max-width) and [margin](https://tailwindcss.com/docs/margin) utilities (`max-w-sm` and `mx-auto`) to constrain the card width and center it horizontally\n*   The [background color](https://tailwindcss.com/docs/background-color), [border radius](https://tailwindcss.com/docs/border-radius), and [box-shadow](https://tailwindcss.com/docs/box-shadow) utilities (`bg-white`, `rounded-xl`, and `shadow-lg`) to style the card’s appearance\n*   The [width](https://tailwindcss.com/docs/width) and [height](https://tailwindcss.com/docs/height) utilities (`w-12` and `h-12`) to size the logo image\n*   The [space-between](https://tailwindcss.com/docs/space) utilities (`space-x-4`) to handle the spacing between the logo and the text\n*   The [font size](https://tailwindcss.com/docs/font-size), [text color](https://tailwindcss.com/docs/text-color), and [font-weight](https://tailwindcss.com/docs/font-weight) utilities (`text-xl`, `text-black`, `font-medium`, etc.) to style the card text\n\nThis approach allows us to implement a completely custom component design without writing a single line of custom CSS.\n\nNow I know what you’re thinking, _“this is an atrocity, what a horrible mess!”_ and you’re right, it’s kind of ugly. In fact it’s just about impossible to think this is a good idea the first time you see it — **you have to actually try it**.\n\nBut once you’ve actually built something this way, you’ll quickly notice some really important benefits:\n\n*   **You aren’t wasting energy inventing class names**. No more adding silly class names like `sidebar-inner-wrapper` just to be able to style something, and no more agonizing over the perfect abstract name for something that’s really just a flex container.\n*   **Your CSS stops growing**. Using a traditional approach, your CSS files get bigger every time you add a new feature. With utilities, everything is reusable so you rarely need to write new CSS.\n*   **Making changes feels safer**. CSS is global and you never know what you’re breaking when you make a change. Classes in your HTML are local, so you can change them without worrying about something else breaking.\n\nWhen you realize how productive you can be working exclusively in HTML with predefined utility classes, working any other way will feel like torture.\n\n* * *\n\n## [​Why not just use inline styles?](#why-not-just-use-inline-styles)\n\nA common reaction to this approach is wondering, “isn’t this just inline styles?” and in some ways it is — you’re applying styles directly to elements instead of assigning them a class name and then styling that class.\n\nBut using utility classes has a few important advantages over inline styles:\n\n*   **Designing with constraints**. Using inline styles, every value is a magic number. With utilities, you’re choosing styles from a predefined [design system](https://tailwindcss.com/docs/theme), which makes it much easier to build visually consistent UIs.\n*   **Responsive design**. You can’t use media queries in inline styles, but you can use Tailwind’s [responsive utilities](https://tailwindcss.com/docs/responsive-design) to build fully responsive interfaces easily.\n*   **Hover, focus, and other states**. Inline styles can’t target states like hover or focus, but Tailwind’s [state variants](https://tailwindcss.com/docs/hover-focus-and-other-states) make it easy to style those states with utility classes.\n\nThis component is fully responsive and includes a button with hover and focus styles, and is built entirely with utility classes:\n\n```\n<div class=\"py-8 px-8 max-w-sm mx-auto bg-white rounded-xl shadow-lg space-y-2 sm:py-4 sm:flex sm:items-center sm:space-y-0 sm:space-x-6\">\n  <img class=\"block mx-auto h-24 rounded-full sm:mx-0 sm:shrink-0\" src=\"/img/erin-lindford.jpg\" alt=\"Woman's Face\" />\n  <div class=\"text-center space-y-2 sm:text-left\">\n    <div class=\"space-y-0.5\">\n      <p class=\"text-lg text-black font-semibold\">\n        Erin Lindford\n      </p>\n      <p class=\"text-slate-500 font-medium\">\n        Product Engineer\n      </p>\n    </div>\n    <button class=\"px-4 py-1 text-sm text-purple-600 font-semibold rounded-full border border-purple-200 hover:text-white hover:bg-purple-600 hover:border-transparent focus:outline-none focus:ring-2 focus:ring-purple-600 focus:ring-offset-2\">Message</button>\n  </div>\n</div>\n```\n\n* * *\n\n## [​Maintainability concerns](#maintainability-concerns)\n\nThe biggest maintainability concern when using a utility-first approach is managing commonly repeated utility combinations.\n\nThis is easily solved by [extracting components and partials](https://tailwindcss.com/docs/reusing-styles#extracting-components-and-partials), and using [editor and language features](https://tailwindcss.com/docs/reusing-styles#using-editor-and-language-features) like multi-cursor editing and simple loops.\n\n```\n<!-- PrimaryButton.vue -->\n<template>\n  <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n    <slot/>\n  </button>\n</template>\n```\n\nAside from that, maintaining a utility-first CSS project turns out to be a lot easier than maintaining a large CSS codebase, simply because HTML is so much easier to maintain than CSS. Large companies like GitHub, Netflix, Heroku, Kickstarter, Twitch, Segment, and more are using this approach with great success.\n\nIf you’d like to hear about others’ experiences with this approach, check out the following resources:\n\n*   [By The Numbers: A Year and a Half with Atomic CSS](https://medium.com/@johnpolacek/by-the-numbers-a-year-and-half-with-atomic-css-39d75b1263b4) by John Polacek\n*   [No, Utility Classes Aren’t the Same As Inline Styles](https://frontstuff.io/no-utility-classes-arent-the-same-as-inline-styles) by Sarah Dayan of Algolia\n*   [Diana Mounter on using utility classes at GitHub](http://www.fullstackradio.com/75), a podcast interview\n\nFor even more, check out [The Case for Atomic/Utility-First CSS](https://johnpolacek.github.io/the-case-for-atomic-css/), curated by [John Polacek](https://twitter.com/johnpolacek).",
    "title": "Utility-First Fundamentals - Tailwind CSS",
    "description": "Building complex components from a constrained set of primitive utilities.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/flex-wrap",
    "markdown": "# Flex Wrap - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Don’t wrap](#dont-wrap)\n\nUse `flex-nowrap` to prevent flex items from wrapping, causing inflexible items to overflow the container if necessary:\n\n```\n<div class=\"flex flex-nowrap\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Wrap normally](#wrap-normally)\n\nUse `flex-wrap` to allow flex items to wrap:\n\n```\n<div class=\"flex flex-wrap\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Wrap reversed](#wrap-reversed)\n\nUse `flex-wrap-reverse` to wrap flex items in the reverse direction:\n\n```\n<div class=\"flex flex-wrap-reverse\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:flex-wrap-reverse` to only apply the `flex-wrap-reverse` utility on hover.\n\n```\n<div class=\"flex flex-wrap hover:flex-wrap-reverse\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:flex-wrap-reverse` to apply the `flex-wrap-reverse` utility at only medium screen sizes and above.\n\n```\n<div class=\"flex flex-wrap md:flex-wrap-reverse\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Flex Wrap - Tailwind CSS",
    "description": "Utilities for controlling how flex items wrap.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/flex",
    "markdown": "# Flex - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Initial](#initial)\n\nUse `flex-initial` to allow a flex item to shrink but not grow, taking into account its initial size:\n\n```\n<div class=\"flex\">\n  <div class=\"flex-none w-14 ...\">\n    01\n  </div>\n  <div class=\"flex-initial w-64 ...\">\n    02\n  </div>\n  <div class=\"flex-initial w-32 ...\">\n    03\n  </div>\n</div>\n```\n\n### [​Flex 1](#flex-1)\n\nUse `flex-1` to allow a flex item to grow and shrink as needed, ignoring its initial size:\n\n```\n<div class=\"flex\">\n  <div class=\"flex-none w-14 ...\">\n    01\n  </div>\n  <div class=\"flex-1 w-64 ...\">\n    02\n  </div>\n  <div class=\"flex-1 w-32 ...\">\n    03\n  </div>\n</div>\n```\n\n### [​Auto](#auto)\n\nUse `flex-auto` to allow a flex item to grow and shrink, taking into account its initial size:\n\n```\n<div class=\"flex ...\">\n  <div class=\"flex-none w-14 ...\">\n    01\n  </div>\n  <div class=\"flex-auto w-64 ...\">\n    02\n  </div>\n  <div class=\"flex-auto w-32 ...\">\n    03\n  </div>\n</div>\n```\n\n### [​None](#none)\n\nUse `flex-none` to prevent a flex item from growing or shrinking:\n\n```\n<div class=\"flex ...\">\n  <div class=\"flex-none w-14 ...\">\n    01\n  </div>\n  <div class=\"flex-none w-32 ...\">\n    02\n  </div>\n  <div class=\"flex-1 ...\">\n    03\n  </div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:flex-1` to only apply the `flex-1` utility on hover.\n\n```\n<div class=\"flex-none hover:flex-1\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:flex-1` to apply the `flex-1` utility at only medium screen sizes and above.\n\n```\n<div class=\"flex-none md:flex-1\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides four `flex` utilities. You can customize these values by editing `theme.flex` or `theme.extend.flex` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `flex` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"flex-[2_2_0%]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Flex - Tailwind CSS",
    "description": "Utilities for controlling how flex items both grow and shrink.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/justify-items",
    "markdown": "# Justify Items - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Start](#start)\n\nUse `justify-items-start` to justify grid items against the start of their inline axis:\n\n```\n<div class=\"grid justify-items-start ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n  <div>06</div>\n</div>\n```\n\n### [​End](#end)\n\nUse `justify-items-end` to justify grid items against the end of their inline axis:\n\n```\n<div class=\"grid justify-items-end ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n  <div>06</div>\n</div>\n```\n\n### [​Center](#center)\n\nUse `justify-items-center` to justify grid items along their inline axis:\n\n```\n<div class=\"grid justify-items-center ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n  <div>06</div>\n</div>\n```\n\n### [​Stretch](#stretch)\n\nUse `justify-items-stretch` to stretch items along their inline axis:\n\n```\n<div class=\"grid justify-items-stretch ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n  <div>06</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:justify-items-center` to only apply the `justify-items-center` utility on hover.\n\n```\n<div class=\"grid justify-items-start hover:justify-items-center\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:justify-items-center` to apply the `justify-items-center` utility at only medium screen sizes and above.\n\n```\n<div class=\"grid justify-items-start md:justify-items-center\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Justify Items - Tailwind CSS",
    "description": "Utilities for controlling how grid items are aligned along their inline axis.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/list-style-image",
    "markdown": "# List Style Image - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the list style image](#setting-the-list-style-image)\n\nUse the `list-image-*` utilities to control the marker image for list items.\n\nOut of the box, `list-image-none` is the only available preconfigured list style image utility. And while you can add additional utilities by [customizing your theme](https://tailwindcss.com/docs/list-style-image#customizing-your-theme), you can also use the square bracket notation to generate an arbitrary value on the fly.\n\n```\n<ul class=\"list-image-[url(checkmark.png)] ...\">\n  <li>5 cups chopped Porcini mushrooms</li>\n  <!-- ... -->\n</ul>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:list-image-[url(checkmark.png)]` to only apply the `list-image-[url(checkmark.png)]` utility on hover.\n\n```\n<ul class=\"list-image-none hover:list-image-[url(checkmark.png)]\">\n  <!-- ... -->\n</ul>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:list-image-[url(checkmark.png)]` to apply the `list-image-[url(checkmark.png)]` utility at only medium screen sizes and above.\n\n```\n<ul class=\"list-image-none md:list-image-[url(checkmark.png)]\">\n  <!-- ... -->\n</ul>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind only provides the `list-image-none` utility. You can customize these values by editing `theme.listStyleImage` or `theme.extend.listStyleImage` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `list-style-image` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<ul class=\"list-image-[url(checkmark.png)]\">\n  <!-- ... -->\n</ul>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "List Style Image - Tailwind CSS",
    "description": "Utilities for controlling the marker images for list items.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/background-repeat",
    "markdown": "# Background Repeat - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Repeat](#repeat)\n\nUse `bg-repeat` to repeat the background image both vertically and horizontally.\n\n```\n<div class=\"bg-repeat ...\" style=\"background-image: url(...)\"></div>\n```\n\n### [​No Repeat](#no-repeat)\n\nUse `bg-no-repeat` when you don’t want to repeat the background image.\n\n```\n<div class=\"bg-no-repeat bg-center ...\" style=\"background-image: url(...)\"></div>\n```\n\n### [​Repeat Horizontally](#repeat-horizontally)\n\nUse `bg-repeat-x` to repeat the background image only horizontally.\n\n```\n<div class=\"bg-repeat-x bg-center ...\" style=\"background-image: url(...)\"></div>\n```\n\n### [​Repeat Vertically](#repeat-vertically)\n\nUse `bg-repeat-y` to repeat the background image only vertically.\n\n```\n<div class=\"bg-repeat-y bg-center ...\" style=\"background-image: url(...)\"></div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:bg-repeat-x` to only apply the `bg-repeat-x` utility on hover.\n\n```\n<div class=\"bg-repeat hover:bg-repeat-x\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:bg-repeat-x` to apply the `bg-repeat-x` utility at only medium screen sizes and above.\n\n```\n<div class=\"bg-repeat md:bg-repeat-x\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Background Repeat - Tailwind CSS",
    "description": "Utilities for controlling the repetition of an element's background image.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/responsive-design",
    "markdown": "# Responsive Design - Tailwind CSS\n\n## [​Overview](#overview)\n\nEvery utility class in Tailwind can be applied conditionally at different breakpoints, which makes it a piece of cake to build complex responsive interfaces without ever leaving your HTML.\n\nFirst, make sure you’ve added the [viewport meta tag](https://developer.mozilla.org/en-US/docs/Web/HTML/Viewport_meta_tag) to the `<head>` of your document:\n\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\nThen to add a utility but only have it take effect at a certain breakpoint, all you need to do is prefix the utility with the breakpoint name, followed by the `:` character:\n\n```\n<!-- Width of 16 by default, 32 on medium screens, and 48 on large screens -->\n<img class=\"w-16 md:w-32 lg:w-48\" src=\"...\">\n```\n\nThere are five breakpoints by default, inspired by common device resolutions:\n\n| Breakpoint prefix | Minimum width | CSS |\n| --- | --- | --- |\n| `sm` | 640px | `@media (min-width: 640px) { ... }` |\n| `md` | 768px | `@media (min-width: 768px) { ... }` |\n| `lg` | 1024px | `@media (min-width: 1024px) { ... }` |\n| `xl` | 1280px | `@media (min-width: 1280px) { ... }` |\n| `2xl` | 1536px | `@media (min-width: 1536px) { ... }` |\n\nThis works for **every utility class in the framework**, which means you can change literally anything at a given breakpoint — even things like letter spacing or cursor styles.\n\nHere’s a simple example of a marketing page component that uses a stacked layout on small screens, and a side-by-side layout on larger screens _(resize your browser to see it in action)_:\n\n```\n<div class=\"max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden md:max-w-2xl\">\n  <div class=\"md:flex\">\n    <div class=\"md:shrink-0\">\n      <img class=\"h-48 w-full object-cover md:h-full md:w-48\" src=\"/img/building.jpg\" alt=\"Modern building architecture\">\n    </div>\n    <div class=\"p-8\">\n      <div class=\"uppercase tracking-wide text-sm text-indigo-500 font-semibold\">Company retreats</div>\n      <a href=\"#\" class=\"block mt-1 text-lg leading-tight font-medium text-black hover:underline\">Incredible accommodation for your team</a>\n      <p class=\"mt-2 text-slate-500\">Looking to take your team away on a retreat to enjoy awesome food and take in some sunshine? We have a list of places to do just that.</p>\n    </div>\n  </div>\n</div>\n```\n\nHere’s how the example above works:\n\n*   By default, the outer `div` is `display: block`, but by adding the `md:flex` utility, it becomes `display: flex` on medium screens and larger.\n*   When the parent is a flex container, we want to make sure the image never shrinks, so we’ve added `md:shrink-0` to prevent shrinking on medium screens and larger. Technically we could have just used `shrink-0` since it would do nothing on smaller screens, but since it only matters on `md` screens, it’s a good idea to make that clear in the class name.\n*   On small screens the image is automatically full width by default. On medium screens and up, we’ve constrained the width to a fixed size and ensured the image is full height using `md:h-full md:w-48`.\n\nWe’ve only used one breakpoint in this example, but you could easily customize this component at other sizes using the `sm`, `lg`, `xl`, or `2xl` responsive prefixes as well.\n\n* * *\n\n## [​Working mobile-first](#working-mobile-first)\n\nBy default, Tailwind uses a mobile-first breakpoint system, similar to what you might be used to in other frameworks like Bootstrap.\n\nWhat this means is that unprefixed utilities (like `uppercase`) take effect on all screen sizes, while prefixed utilities (like `md:uppercase`) only take effect at the specified breakpoint _and above_.\n\n### [​Targeting mobile screens](#targeting-mobile-screens)\n\nWhere this approach surprises people most often is that to style something for mobile, you need to use the unprefixed version of a utility, not the `sm:` prefixed version. Don’t think of `sm:` as meaning “on small screens”, think of it as “at the small _breakpoint_“.\n\nDon’t use `sm:` to target mobile devices\n\n```\n<!-- This will only center text on screens 640px and wider, not on small screens -->\n<div class=\"sm:text-center\"></div>\n```\n\nUse unprefixed utilities to target mobile, and override them at larger breakpoints\n\n```\n<!-- This will center text on mobile, and left align it on screens 640px and wider -->\n<div class=\"text-center sm:text-left\"></div>\n```\n\nFor this reason, it’s often a good idea to implement the mobile layout for a design first, then layer on any changes that make sense for `sm` screens, followed by `md` screens, etc.\n\n### [​Targeting a breakpoint range](#targeting-a-breakpoint-range)\n\nBy default, styles applied by rules like `md:flex` will apply at that breakpoint and stay applied at larger breakpoints.\n\nIf you’d like to apply a utility _only_ when a specific breakpoint range is active, stack a responsive modifier like `md` with a `max-*` modifier to limit that style to a specific range:\n\n```\n<div class=\"md:max-xl:flex\">\n  <!-- ... -->\n</div>\n```\n\nTailwind generates a corresponding `max-*` modifier for each breakpoint, so out of the box the following modifiers are available:\n\n| Modifier | Media query |\n| --- | --- |\n| `max-sm` | `@media not all and (min-width: 640px) { ... }` |\n| `max-md` | `@media not all and (min-width: 768px) { ... }` |\n| `max-lg` | `@media not all and (min-width: 1024px) { ... }` |\n| `max-xl` | `@media not all and (min-width: 1280px) { ... }` |\n| `max-2xl` | `@media not all and (min-width: 1536px) { ... }` |\n\n### [​Targeting a single breakpoint](#targeting-a-single-breakpoint)\n\nTo target a single breakpoint, target the range for that breakpoint by stacking a responsive modifier like `md` with the `max-*` modifier for the next breakpoint:\n\n```\n<div class=\"md:max-lg:flex\">\n  <!-- ... -->\n</div>\n```\n\nRead about [targeting breakpoint ranges](https://tailwindcss.com/docs/responsive-design#targeting-a-breakpoint-range) to learn more.\n\n* * *\n\n## [​Using custom breakpoints](#using-custom-breakpoints)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nYou can completely customize your breakpoints in your `tailwind.config.js` file:\n\nLearn more in the [customizing breakpoints documentation](https://tailwindcss.com/docs/breakpoints).\n\n* * *\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off breakpoint that doesn’t make sense to include in your theme, use the `min` or `max` modifiers to generate a custom breakpoint on the fly using any arbitrary value.\n\n```\n<div class=\"min-[320px]:text-center max-[600px]:bg-sky-300\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Responsive Design - Tailwind CSS",
    "description": "Using responsive utility variants to build adaptive user interfaces.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/justify-self",
    "markdown": "# Justify Self - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Auto](#auto)\n\nUse `justify-self-auto` to align an item based on the value of the grid’s `justify-items` property:\n\n```\n<div class=\"grid justify-items-stretch ...\">\n  <!-- ... -->\n  <div class=\"justify-self-auto ...\">02</div>\n  <!-- ... -->\n  <!-- ... -->\n  <!-- ... -->\n  <!-- ... -->\n</div>\n```\n\n### [​Start](#start)\n\nUse `justify-self-start` to align a grid item to the start of its inline axis:\n\n```\n<div class=\"grid justify-items-stretch ...\">\n  <!-- ... -->\n  <div class=\"justify-self-start ...\">02</div>\n  <!-- ... -->\n  <!-- ... -->\n  <!-- ... -->\n  <!-- ... -->\n</div>\n```\n\n### [​Center](#center)\n\nUse `justify-self-center` to align a grid item along the center of its inline axis:\n\n```\n<div class=\"grid justify-items-stretch ...\">\n  <!-- ... -->\n  <div class=\"justify-self-center ...\">02</div>\n  <!-- ... -->\n  <!-- ... -->\n  <!-- ... -->\n  <!-- ... -->\n</div>\n```\n\n### [​End](#end)\n\nUse `justify-self-end` to align a grid item to the end of its inline axis:\n\n```\n<div class=\"grid justify-items-stretch ...\">\n  <!-- ... -->\n  <div class=\"justify-self-end ...\">02</div>\n  <!-- ... -->\n  <!-- ... -->\n  <!-- ... -->\n  <!-- ... -->\n</div>\n```\n\n### [​Stretch](#stretch)\n\nUse `justify-self-stretch` to stretch a grid item to fill the grid area on its inline axis:\n\n```\n<div class=\"grid justify-items-start ...\">\n  <!-- ... -->\n  <div class=\"justify-self-stretch ...\">02</div>\n  <!-- ... -->\n  <!-- ... -->\n  <!-- ... -->\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:justify-self-end` to only apply the `justify-self-end` utility on hover.\n\n```\n<div class=\"justify-self-start hover:justify-self-end\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:justify-self-end` to apply the `justify-self-end` utility at only medium screen sizes and above.\n\n```\n<div class=\"justify-self-start md:justify-self-end\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Justify Self - Tailwind CSS",
    "description": "Utilities for controlling how an individual grid item is aligned along its inline axis.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/flex-grow",
    "markdown": "# Flex Grow - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Grow](#grow)\n\nUse `grow` to allow a flex item to grow to fill any available space:\n\n```\n<div class=\"flex ...\">\n  <div class=\"flex-none w-14 h-14 ...\">\n    01\n  </div>\n  <div class=\"grow h-14 ...\">\n    02\n  </div>\n  <div class=\"flex-none w-14 h-14 ...\">\n    03\n  </div>\n</div>\n```\n\n### [​Don’t grow](#dont-grow)\n\nUse `grow-0` to prevent a flex item from growing:\n\n```\n<div class=\"flex ...\">\n  <div class=\"grow h-14 ...\">\n    01\n  </div>\n  <div class=\"grow-0 h-14 ...\">\n    02\n  </div>\n  <div class=\"grow h-14 ...\">\n    03\n  </div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:grow-0` to only apply the `grow-0` utility on hover.\n\n```\n<div class=\"grow hover:grow-0\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:grow-0` to apply the `grow-0` utility at only medium screen sizes and above.\n\n```\n<div class=\"grow md:grow-0\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides two `grow` utilities. You can customize these values by editing `theme.flexGrow` or `theme.extend.flexGrow` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `flex-grow` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"grow-[2]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Flex Grow - Tailwind CSS",
    "description": "Utilities for controlling how flex items grow.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/list-style-position",
    "markdown": "# List Style Position - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the list style position](#setting-the-list-style-position)\n\nUse the `list-inside` and `list-outside` utilities to control the position of the markers and text indentation in a list.\n\n```\n<ul class=\"list-inside ...\">\n  <li>5 cups chopped Porcini mushrooms</li>\n  <!-- ... -->\n</ul>\n\n<ul class=\"list-outside ...\">\n  <li>5 cups chopped Porcini mushrooms</li>\n  <!-- ... -->\n</ul>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:list-inside` to only apply the `list-inside` utility on hover.\n\n```\n<ul class=\"list-outside hover:list-inside\">\n  <!-- ... -->\n</ul>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:list-inside` to apply the `list-inside` utility at only medium screen sizes and above.\n\n```\n<ul class=\"list-outside md:list-inside\">\n  <!-- ... -->\n</ul>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "List Style Position - Tailwind CSS",
    "description": "Utilities for controlling the position of bullets/numbers in lists.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/hover-focus-and-other-states",
    "markdown": "# Handling Hover, Focus, and Other States\n\nEvery utility class in Tailwind can be applied _conditionally_ by adding a modifier to the beginning of the class name that describes the condition you want to target.\n\nFor example, to apply the `bg-sky-700` class on hover, use the `hover:bg-sky-700` class:\n\nHover over this button to see the background color change\n\n```\n<button class=\"bg-sky-500 hover:bg-sky-700 ...\">\n  Save changes\n</button>\n```\n\nHow does this compare to traditional CSS?\n\nWhen writing CSS the traditional way, a single class name would do different things based on the current state.\n\nTraditionally the same class name applies different styles on hover\n\n```\n.btn-primary {\n  background-color: #0ea5e9;\n}\n.btn-primary:hover {\n  background-color: #0369a1;\n}\n```\n\nIn Tailwind, rather than adding the styles for a hover state to an existing class, you add another class to the element that _only_ does something on hover.\n\nIn Tailwind, separate classes are used for the default state and the hover state\n\n```\n.bg-sky-500 {\n  background-color: #0ea5e9;\n}\n.hover\\:bg-sky-700:hover {\n  background-color: #0369a1;\n}\n```\n\nNotice how `hover:bg-sky-700` _only_ defines styles for the `:hover` state? It does nothing by default, but as soon as you hover over an element with that class, the background color will change to `sky-700`.\n\nThis is what we mean when we say a utility class can be applied _conditionally_ — by using modifiers you can control exactly how your design behaves in different states, without ever leaving your HTML.\n\nTailwind includes modifiers for just about everything you’ll ever need, including:\n\n*   [Pseudo-classes](https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-classes), like `:hover`, `:focus`, `:first-child`, and `:required`\n*   [Pseudo-elements](https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-elements), like `::before`, `::after`, `::placeholder`, and `::selection`\n*   [Media and feature queries](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries), like responsive breakpoints, dark mode, and `prefers-reduced-motion`\n*   [Attribute selectors](https://tailwindcss.com/docs/hover-focus-and-other-states#attribute-selectors), like `[dir=\"rtl\"]` and `[open]`\n\nThese modifiers can even be [stacked](https://tailwindcss.com/docs/hover-focus-and-other-states#ordering-stacked-modifiers) to target more specific situations, for example changing the background color in dark mode, at the medium breakpoint, on hover:\n\n```\n<button class=\"dark:md:hover:bg-fuchsia-600 ...\">\n  Save changes\n</button>\n```\n\nIn this guide you’ll learn about every modifier available in the framework, how to use them with your own custom classes, and even how to create your own.\n\n* * *\n\n## [​Pseudo-classes](#pseudo-classes)\n\n### [​Hover, focus, and active](#hover-focus-and-active)\n\nStyle elements on hover, focus, and active using the `hover`, `focus`, and `active` modifiers:\n\nTry interacting with this button to see the hover, focus, and active states\n\n```\n<button class=\"bg-violet-500 hover:bg-violet-600 active:bg-violet-700 focus:outline-none focus:ring focus:ring-violet-300 ...\">\n  Save changes\n</button>\n```\n\nTailwind also includes modifiers for other interactive states like `:visited`, `:focus-within`, `:focus-visible`, and more.\n\nSee the [pseudo-class reference](https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-class-reference) for a complete list of available pseudo-class modifiers.\n\n### [​First, last, odd, and even](#first-last-odd-and-even)\n\nStyle an element when it is the first-child or last-child using the `first` and `last` modifiers:\n\n```\n<ul role=\"list\" class=\"p-6 divide-y divide-slate-200\">\n  {#each people as person}\n    <!-- Remove top/bottom padding when first/last child -->\n    <li class=\"flex py-4 first:pt-0 last:pb-0\">\n      <img class=\"h-10 w-10 rounded-full\" src=\"{person.imageUrl}\" alt=\"\" />\n      <div class=\"ml-3 overflow-hidden\">\n        <p class=\"text-sm font-medium text-slate-900\">{person.name}</p>\n        <p class=\"text-sm text-slate-500 truncate\">{person.email}</p>\n      </div>\n    </li>\n  {/each}\n</ul>\n```\n\nYou can also style an element when it’s an odd or even child using the `odd` and `even` modifiers:\n\n```\n<table>\n  <!-- ... -->\n  <tbody>\n    {#each people as person}\n      <!-- Use a white background for odd rows, and slate-50 for even rows -->\n      <tr class=\"odd:bg-white even:bg-slate-50\">\n        <td>{person.name}</td>\n        <td>{person.title}</td>\n        <td>{person.email}</td>\n      </tr>\n    {/each}\n  </tbody>\n</table>\n```\n\nTailwind also includes modifiers for other structural pseudo-classes like `:only-child`, `:first-of-type`, `:empty`, and more.\n\nSee the [pseudo-class reference](https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-class-reference) for a complete list of available pseudo-class modifiers.\n\n### [​Form states](#form-states)\n\nStyle form elements in different states using modifiers like `required`, `invalid`, and `disabled`:\n\nTry making the email address valid to see the styles change\n\n```\n<form>\n  <label class=\"block\">\n    <span class=\"block text-sm font-medium text-slate-700\">Username</span>\n    <!-- Using form state modifiers, the classes can be identical for every input -->\n    <input type=\"text\" value=\"tbone\" disabled class=\"mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400\n      focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500\n      disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none\n      invalid:border-pink-500 invalid:text-pink-600\n      focus:invalid:border-pink-500 focus:invalid:ring-pink-500\n    \"/>\n  </label>\n  <!-- ... -->\n</form>\n```\n\nUsing modifiers for this sort of thing can reduce the amount of conditional logic in your templates, letting you use the same set of classes regardless of what state an input is in and letting the browser apply the right styles for you.\n\nTailwind also includes modifiers for other form states like `:read-only`, `:indeterminate`, `:checked`, and more.\n\nSee the [pseudo-class reference](https://tailwindcss.com/docs/hover-focus-and-other-states#disabled) for a complete list of available pseudo-class modifiers.\n\n### [​Styling based on parent state (group-{modifier})](#styling-based-on-parent-state)\n\nWhen you need to style an element based on the state of some _parent_ element, mark the parent with the `group` class, and use `group-*` modifiers like `group-hover` to style the target element:\n\nHover over the card to see both text elements change color\n\n```\n<a href=\"#\" class=\"group block max-w-xs mx-auto rounded-lg p-6 bg-white ring-1 ring-slate-900/5 shadow-lg space-y-3 hover:bg-sky-500 hover:ring-sky-500\">\n  <div class=\"flex items-center space-x-3\">\n    <svg class=\"h-6 w-6 stroke-sky-500 group-hover:stroke-white\" fill=\"none\" viewBox=\"0 0 24 24\"><!-- ... --></svg>\n    <h3 class=\"text-slate-900 group-hover:text-white text-sm font-semibold\">New project</h3>\n  </div>\n  <p class=\"text-slate-500 group-hover:text-white text-sm\">Create a new project from a variety of starting templates.</p>\n</a>\n```\n\nThis pattern works with every pseudo-class modifier, for example `group-focus`, `group-active`, or even `group-odd`.\n\n#### [​Differentiating nested groups](#differentiating-nested-groups)\n\nWhen nesting groups, you can style something based on the state of a _specific_ parent group by giving that parent a unique group name using a `group/{name}` class, and including that name in modifiers using classes like `group-hover/{name}`:\n\n```\n<ul role=\"list\">\n  {#each people as person}\n    <li class=\"group/item hover:bg-slate-100 ...\">\n      <img src=\"{person.imageUrl}\" alt=\"\" />\n      <div>\n        <a href=\"{person.url}\">{person.name}</a>\n        <p>{person.title}</p>\n      </div>\n      <a class=\"group/edit invisible hover:bg-slate-200 group-hover/item:visible ...\" href=\"tel:{person.phone}\">\n        <span class=\"group-hover/edit:text-gray-700 ...\">Call</span>\n        <svg class=\"group-hover/edit:translate-x-0.5 group-hover/edit:text-slate-500 ...\">\n          <!-- ... -->\n        </svg>\n      </a>\n    </li>\n  {/each}\n</ul>\n```\n\nGroups can be named however you like and don’t need to be configured in any way — just name your groups directly in your markup and Tailwind will automatically generate the necessary CSS.\n\n#### [​Arbitrary groups](#arbitrary-groups)\n\nYou can create one-off `group-*` modifiers on the fly by providing your own selector as an [arbitrary value](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) between square brackets:\n\n```\n<div class=\"group is-published\">\n  <div class=\"hidden group-[.is-published]:block\">\n    Published\n  </div>\n</div>\n```\n\nFor more control, you can use the `&` character to mark where `.group` should end up in the final selector relative to the selector you are passing in:\n\n```\n<div class=\"group\">\n  <div class=\"group-[:nth-of-type(3)_&]:block\">\n    <!-- ... -->\n  </div>\n</div>\n```\n\n### [​Styling based on sibling state (peer-{modifier})](#styling-based-on-sibling-state)\n\nWhen you need to style an element based on the state of a _sibling_ element, mark the sibling with the `peer` class, and use `peer-*` modifiers like `peer-invalid` to style the target element:\n\nTry making the email address valid to see the warning disappear\n\n```\n<form>\n  <label class=\"block\">\n    <span class=\"block text-sm font-medium text-slate-700\">Email</span>\n    <input type=\"email\" class=\"peer ...\"/>\n    <p class=\"mt-2 invisible peer-invalid:visible text-pink-600 text-sm\">\n      Please provide a valid email address.\n    </p>\n  </label>\n</form>\n```\n\nThis makes it possible to do all sorts of neat tricks, like [floating labels](https://www.youtube.com/watch?v=nJzKi6oIvBA) for example without any JS.\n\nThis pattern works with every pseudo-class modifier, for example `peer-focus`, `peer-required`, and `peer-disabled`.\n\nIt’s important to note that the `peer` marker can only be used on _previous_ siblings because of how the [subsequent-sibling combinator](https://developer.mozilla.org/en-US/docs/Web/CSS/Subsequent-sibling_combinator) works in CSS.\n\nWon’t work, only previous siblings can be marked as peers\n\n```\n<label>\n  <span class=\"peer-invalid:text-red-500 ...\">Email</span>\n  <input type=\"email\" class=\"peer ...\"/>\n</label>\n```\n\n#### [​Differentiating peers](#differentiating-peers)\n\nWhen using multiple peers, you can style something on the state of a _specific_ peer by giving that peer a unique name using a `peer/{name}` class, and including that name in modifiers using classes like `peer-checked/{name}`:\n\n```\n<fieldset>\n  <legend>Published status</legend>\n\n  <input id=\"draft\" class=\"peer/draft\" type=\"radio\" name=\"status\" checked />\n  <label for=\"draft\" class=\"peer-checked/draft:text-sky-500\">Draft</label>\n\n  <input id=\"published\" class=\"peer/published\" type=\"radio\" name=\"status\" />\n  <label for=\"published\" class=\"peer-checked/published:text-sky-500\">Published</label>\n\n  <div class=\"hidden peer-checked/draft:block\">Drafts are only visible to administrators.</div>\n  <div class=\"hidden peer-checked/published:block\">Your post will be publicly visible on your site.</div>\n</fieldset>\n```\n\nPeers can be named however you like and don’t need to be configured in any way — just name your peers directly in your markup and Tailwind will automatically generate the necessary CSS.\n\n#### [​Arbitrary peers](#arbitrary-peers)\n\nYou can create one-off `peer-*` modifiers on the fly by providing your own selector as an [arbitrary value](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) between square brackets:\n\n```\n<form>\n  <label for=\"email\">Email:</label>\n  <input id=\"email\" name=\"email\" type=\"email\" class=\"is-dirty peer\" required />\n  <div class=\"peer-[.is-dirty]:peer-required:block hidden\">This field is required.</div>\n  <!-- ... -->\n</form>\n```\n\nFor more control, you can use the `&` character to mark where `.peer` should end up in the final selector relative to the selector you are passing in:\n\n```\n<div>\n  <input type=\"text\" class=\"peer\" />\n  <div class=\"hidden peer-[:nth-of-type(3)_&]:block\">\n    <!-- ... -->\n  </div>\n</div>\n```\n\n### [​Styling direct children (\\*-{modifier})](#styling-direct-children)\n\nWhile it’s generally preferable to put utility classes directly on child elements, you can use the `*` modifier in situations where you need to style direct children that you don’t have control over.\n\n```\n<div>\n  <h2>Categories<h2>\n  <ul class=\"*:rounded-full *:border *:border-sky-100 *:bg-sky-50 *:px-2 *:py-0.5 dark:text-sky-300 dark:*:border-sky-500/15 dark:*:bg-sky-500/10 ...\">\n    <li>Sales</li>\n    <li>Marketing</li>\n    <li>SEO</li>\n    <!-- ... -->\n  </ul>\n</div>\n```\n\nIt’s important to note that overriding a style with a utility directly on the child itself won’t work due to the specificity of the generated child selector.\n\nWon’t work, children can’t override their own styling.\n\n```\n<ul class=\"*:bg-sky-50 ...\">\n  <li class=\"bg-red-50 ...\">Sales</li>\n  <li>Marketing</li>\n  <li>SEO</li>\n  <!-- ... -->\n</ul>\n```\n\n* * *\n\n### [​Styling based on descendants (has-{modifier})](#styling-based-on-descendants)\n\nUse the `has-*` modifier to style an element based on the state or content of its descendants.\n\n```\n<label class=\"has-[:checked]:bg-indigo-50 has-[:checked]:text-indigo-900 has-[:checked]:ring-indigo-200 ..\">\n  <svg fill=\"currentColor\">\n    <!-- ... -->\n  </svg>\n  Google Pay\n  <input type=\"radio\" class=\"checked:border-indigo-500 ...\" />\n</label>\n```\n\nYou can use `has-*` with a pseudo-class, like `has-[:focus]`, to style an element based on the state of its descendants. You can also use element selectors, like `has-[img]` or `has-[a]`, to style an element based on the content of its descendants.\n\n#### [​Styling based on the descendants of a group (group-has-{modifier})](#styling-based-on-the-descendants-of-a-group)\n\nIf you need to style an element based on the descendants of a parent element, you can mark the parent with the `group` class and use the `group-has-*` modifier to style the target element.\n\n```\n<div class=\"group ...\">\n  <img src=\"...\" />\n  <h4>Spencer Sharp</h4>\n  <svg class=\"hidden group-has-[a]:block ...\">\n    <!-- ... -->\n  </svg>\n  <p>Product Designer at <a href=\"...\">planeteria.tech</a></p>\n</div>\n```\n\n#### [​Styling based on the descendants of a peer (peer-has-{modifier})](#styling-based-on-the-descendants-of-a-peer)\n\nIf you need to style an element based on the descendants of a sibling element, you can mark the sibling with the `peer` class and use the `peer-has-*` modifier to style the target element.\n\n```\n<fieldset>\n  <legend>Today</legend>\n\n  <div>\n    <label class=\"peer ...\">\n      <input type=\"checkbox\" name=\"todo[1]\" checked />\n      Create a to do list\n    </label>\n    <svg class=\"peer-has-[:checked]:hidden ...\">\n      <!-- ... -->\n    </svg>\n  </div>\n\n  <!-- ... -->\n</fieldset>\n```\n\n* * *\n\n## [​Pseudo-elements](#pseudo-elements)\n\n### [​Before and after](#before-and-after)\n\nStyle the `::before` and `::after` pseudo-elements using the `before` and `after` modifiers:\n\n```\n<label class=\"block\">\n  <span class=\"after:content-['*'] after:ml-0.5 after:text-red-500 block text-sm font-medium text-slate-700\">\n    Email\n  </span>\n  <input type=\"email\" name=\"email\" class=\"mt-1 px-3 py-2 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block w-full rounded-md sm:text-sm focus:ring-1\" placeholder=\"you@example.com\" />\n</label>\n```\n\nWhen using these modifiers, Tailwind will automatically add `content: ''` by default so you don’t have to specify it unless you want a different value:\n\n```\n<blockquote class=\"text-2xl font-semibold italic text-center text-slate-900\">\n  When you look\n  <span class=\"before:block before:absolute before:-inset-1 before:-skew-y-3 before:bg-pink-500 relative inline-block\">\n    <span class=\"relative text-white\">annoyed</span>\n  </span>\n  all the time, people think that you're busy.\n</blockquote>\n```\n\nIt’s worth noting that you don’t really need `::before` and `::after` pseudo-elements for most things in Tailwind projects — it’s usually simpler to just use a real HTML element.\n\nFor example, here’s the same design from above but using a `<span>` instead of the `::before` pseudo-element, which is a little easier to read and is actually less code:\n\n```\n<blockquote class=\"text-2xl font-semibold italic text-center text-slate-900\">\n  When you look\n  <span class=\"relative\">\n    <span class=\"block absolute -inset-1 -skew-y-3 bg-pink-500\" aria-hidden=\"true\"></span>\n    <span class=\"relative text-white\">annoyed</span>\n  </span>\n  all the time, people think that you're busy.\n</blockquote>\n```\n\nSave `before` and `after` for situations where it’s important that the content of the pseudo-element is not actually in the DOM and can’t be selected by the user.\n\nNote that if you’ve disabled our [preflight base styles](https://tailwindcss.com/docs/preflight), the content property will not be set to an empty string by default, and you will need to include `content-['']` any time you use the `before` and `after` modifiers.\n\nIf you’ve disabled preflight make sure to set the content manually\n\n```\n<div class=\"before:content-[''] before:block ...\">\n  <!-- ... -->\n</div>\n```\n\n### [​Placeholder text](#placeholder-text)\n\nStyle the placeholder text of any input or textarea using the `placeholder` modifier:\n\n```\n<label class=\"relative block\">\n  <span class=\"sr-only\">Search</span>\n  <span class=\"absolute inset-y-0 left-0 flex items-center pl-2\">\n    <svg class=\"h-5 w-5 fill-slate-300\" viewBox=\"0 0 20 20\"><!-- ... --></svg>\n  </span>\n  <input class=\"placeholder:italic placeholder:text-slate-400 block bg-white w-full border border-slate-300 rounded-md py-2 pl-9 pr-3 shadow-sm focus:outline-none focus:border-sky-500 focus:ring-sky-500 focus:ring-1 sm:text-sm\" placeholder=\"Search for anything...\" type=\"text\" name=\"search\"/>\n</label>\n```\n\n### [​File input buttons](#file-input-buttons)\n\nStyle the button in file inputs using the `file` modifier:\n\n```\n<form class=\"flex items-center space-x-6\">\n  <div class=\"shrink-0\">\n    <img class=\"h-16 w-16 object-cover rounded-full\" src=\"https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1361&q=80\" alt=\"Current profile photo\" />\n  </div>\n  <label class=\"block\">\n    <span class=\"sr-only\">Choose profile photo</span>\n    <input type=\"file\" class=\"block w-full text-sm text-slate-500\n      file:mr-4 file:py-2 file:px-4\n      file:rounded-full file:border-0\n      file:text-sm file:font-semibold\n      file:bg-violet-50 file:text-violet-700\n      hover:file:bg-violet-100\n    \"/>\n  </label>\n</form>\n```\n\nNote that Tailwind’s [border reset](https://tailwindcss.com/docs/preflight#border-styles-are-reset-globally) is not applied to file input buttons. This means that to add a border to a file input button, you need to explicitly set the [border-style](https://tailwindcss.com/docs/border-style) using a class like `file:border-solid` alongside any [border-width](https://tailwindcss.com/docs/border-width) utility:\n\n```\n<input type=\"file\" class=\"file:border file:border-solid ...\" />\n```\n\n### [​List markers](#list-markers)\n\nStyle the counters or bullets in lists using the `marker` modifier:\n\n```\n<ul role=\"list\" class=\"marker:text-sky-400 list-disc pl-5 space-y-3 text-slate-500\">\n  <li>5 cups chopped Porcini mushrooms</li>\n  <li>1/2 cup of olive oil</li>\n  <li>3lb of celery</li>\n</ul>\n```\n\nWe’ve designed the `marker` modifier to be inheritable, so although you can use it directly on an `<li>` element, you can also use it on a parent to avoid repeating yourself.\n\n### [​Highlighted text](#highlighted-text)\n\nStyle the active text selection using the `selection` modifier:\n\nTry selecting some of this text with your mouse\n\n```\n<div class=\"selection:bg-fuchsia-300 selection:text-fuchsia-900\">\n  <p>\n    So I started to walk into the water. I won't lie to you boys, I was\n    terrified. But I pressed on, and as I made my way past the breakers\n    a strange calm came over me. I don't know if it was divine intervention\n    or the kinship of all living things but I tell you Jerry at that moment,\n    I <em>was</em> a marine biologist.\n  </p>\n</div>\n```\n\nWe’ve designed the `selection` modifier to be inheritable, so you can add it anywhere in the tree and it will be applied to all descendant elements.\n\nThis makes it easy to set the selection color to match your brand across your entire site:\n\n```\n<html>\n<head>\n  <!-- ... -->\n</head>\n<body class=\"selection:bg-pink-300\">\n  <!-- ... -->\n</body>\n</html>\n```\n\n### [​First-line and first-letter](#first-line-and-first-letter)\n\nStyle the first line in a block of content using the `first-line` modifier, and the first letter using the `first-letter` modifier:\n\n```\n<p class=\"first-line:uppercase first-line:tracking-widest\n  first-letter:text-7xl first-letter:font-bold first-letter:text-slate-900\n  first-letter:mr-3 first-letter:float-left\n\">\n  Well, let me tell you something, funny boy. Y'know that little stamp, the one\n  that says \"New York Public Library\"? Well that may not mean anything to you,\n  but that means a lot to me. One whole hell of a lot.\n</p>\n```\n\n### [​Dialog backdrops](#dialog-backdrops)\n\nStyle the backdrop of a [native `<dialog>` element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog) using the `backdrop` modifier:\n\n```\n<dialog class=\"backdrop:bg-gray-50\">\n  <form method=\"dialog\">\n    <!-- ... -->\n  </form>\n</dialog>\n```\n\nIf you’re using native `<dialog>` elements in your project, you may also want to read about [styling open/closed states](https://tailwindcss.com/docs/hover-focus-and-other-states#open-closed-state) using the `open` modifier.\n\n* * *\n\n## [​Media and feature queries](#media-and-feature-queries)\n\n### [​Responsive breakpoints](#responsive-breakpoints)\n\nTo style an element at a specific breakpoint, use responsive modifiers like `md` and `lg`.\n\nFor example, this will render a 3-column grid on mobile, a 4-column grid on medium-width screens, and a 6-column grid on large-width screens:\n\n```\n<div class=\"grid grid-cols-3 md:grid-cols-4 lg:grid-cols-6\">\n  <!-- ... -->\n</div>\n```\n\nCheck out the [Responsive Design](https://tailwindcss.com/docs/responsive-design) documentation for an in-depth look at how these features work.\n\n### [​Prefers color scheme](#prefers-color-scheme)\n\nThe `prefers-color-scheme` media query tells you whether the user prefers a light theme or dark theme, and is usually configured at the operating system level.\n\nUse utilities with no modifier to target light mode, and use the `dark` modifier to provide overrides for dark mode:\n\n```\n<div class=\"bg-white dark:bg-slate-900 rounded-lg px-6 py-8 ring-1 ring-slate-900/5 shadow-xl\">\n  <div>\n    <span class=\"inline-flex items-center justify-center p-2 bg-indigo-500 rounded-md shadow-lg\">\n      <svg class=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\"><!-- ... --></svg>\n    </span>\n  </div>\n  <h3 class=\"text-slate-900 dark:text-white mt-5 text-base font-medium tracking-tight\">Writes Upside-Down</h3>\n  <p class=\"text-slate-500 dark:text-slate-400 mt-2 text-sm\">\n    The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space.\n  </p>\n</div>\n```\n\nCheck out the [Dark Mode](https://tailwindcss.com/docs/dark-mode) documentation for an in-depth look at how this feature works.\n\n### [​Prefers reduced motion](#prefers-reduced-motion)\n\nThe `prefers-reduced-motion` media query tells you if the user has requested that you minimize non-essential motion.\n\nUse the `motion-reduce` modifier to conditionally add styles when the user has requested reduced motion:\n\nTry emulating \\`prefers-reduced-motion: reduce\\` in your developer tools to hide the spinner\n\n```\n<button type=\"button\" class=\"bg-indigo-500 ...\" disabled>\n  <svg class=\"motion-reduce:hidden animate-spin ...\" viewBox=\"0 0 24 24\"><!-- ... --></svg>\n  Processing...\n</button>\n```\n\nTailwind also includes a `motion-safe` modifier that only adds styles when the user has _not_ requested reduced motion. This can be useful when using the `motion-reduce` helper would mean having to “undo” a lot of styles:\n\n```\n<!-- Using `motion-reduce` can mean lots of \"undoing\" styles -->\n<button class=\"hover:-translate-y-0.5 transition motion-reduce:hover:translate-y-0 motion-reduce:transition-none ...\">\n  Save changes\n</button>\n\n<!-- Using `motion-safe` is less code in these situations -->\n<button class=\"motion-safe:hover:-translate-x-0.5 motion-safe:transition ...\">\n  Save changes\n</button>\n```\n\n### [​Prefers contrast](#prefers-contrast)\n\nThe `prefers-contrast` media query tells you if the user has requested more or less contrast.\n\nUse the `contrast-more` modifier to conditionally add styles when the user has requested more contrast:\n\nTry emulating \\`prefers-contrast: more\\` in your developer tools to see the changes\n\n```\n<form>\n  <label class=\"block\">\n    <span class=\"block text-sm font-medium text-slate-700\">Social Security Number</span>\n    <input class=\"border-slate-200 placeholder-slate-400 contrast-more:border-slate-400 contrast-more:placeholder-slate-500\"/>\n    <p class=\"mt-2 opacity-10 contrast-more:opacity-100 text-slate-600 text-sm\">\n      We need this to steal your identity.\n    </p>\n  </label>\n</form>\n```\n\nTailwind also includes a `contrast-less` modifier you can use to conditionally add styles when the user has requested less contrast.\n\n### [​Forced colors mode](#forced-colors-mode)\n\nThe `forced-colors` media query indicates if the user is using a forced colors mode. These modes override your site’s colors with a user defined palette for text, backgrounds, links and buttons.\n\nUse the `forced-colors` modifier to conditionally add styles when the user has enabled a forced color mode:\n\nTry emulating \\`forced-colors: active\\` in your developer tools to see the changes\n\n```\n<form>\n  <legend> Choose a theme: </legend>\n  <label>\n    <input type=\"radio\" class=\"forced-colors:appearance-auto appearance-none\" />\n    <p class=\"forced-colors:block hidden\">\n      Cyan\n    </p>\n    <div class=\"forced-colors:hidden h-6 w-6 rounded-full bg-cyan-200 ...\"></div>\n    <div class=\"forced-colors:hidden h-6 w-6 rounded-full bg-cyan-500 ...\"></div>\n  </label>\n  <!-- ... -->\n</form>\n```\n\nTailwind also includes a [forced color adjust](https://tailwindcss.com/docs/forced-color-adjust) utilities to opt in and out of forced colors.\n\n### [​Viewport orientation](#viewport-orientation)\n\nUse the `portrait` and `landscape` modifiers to conditionally add styles when the viewport is in a specific orientation:\n\n```\n<div>\n  <div class=\"portrait:hidden\">\n    <!-- ... -->\n  </div>\n  <div class=\"landscape:hidden\">\n    <p>\n      This experience is designed to be viewed in landscape. Please rotate your\n      device to view the site.\n    </p>\n  </div>\n</div>\n```\n\n### [​Print styles](#print-styles)\n\nUse the `print` modifier to conditionally add styles that only apply when the document is being printed:\n\n```\n<div>\n  <article class=\"print:hidden\">\n    <h1>My Secret Pizza Recipe</h1>\n    <p>This recipe is a secret, and must not be shared with anyone</p>\n    <!-- ... -->\n  </article>\n  <div class=\"hidden print:block\">\n    Are you seriously trying to print this? It's secret!\n  </div>\n</div>\n```\n\n### [​Supports rules](#supports-rules)\n\nUse the `supports-[...]` modifier to style things based on whether a certain feature is supported in the user’s browser.\n\n```\n<div class=\"flex supports-[display:grid]:grid ...\">\n  <!-- ... -->\n</div>\n```\n\nUnder the hood the `supports-[...]` modifier generates [`@supports rules`](https://developer.mozilla.org/en-US/docs/Web/CSS/@supports) and takes anything you’d use with `@supports (...)` between the square brackets, like a property/value pair, and even expressions using `and` and `or`.\n\nFor terseness, if you only need to check if a property is supported (and not a specific value), you can just specify the property name:\n\n```\n<div class=\"bg-black/75 supports-[backdrop-filter]:bg-black/25 supports-[backdrop-filter]:backdrop-blur ...\">\n  <!-- ... -->\n</div>\n```\n\nYou can configure shortcuts for common `@supports` rules you’re using in your project in the `theme.supports` section of your `tailwind.config.js` file:\n\nYou can then use these custom `supports-*` modifiers in your project:\n\n```\n<div class=\"supports-grid:grid\">\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Attribute selectors](#attribute-selectors)\n\n### [​ARIA states](#aria-states)\n\nUse the `aria-*` modifier to conditionally style things based on [ARIA attributes](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes).\n\nFor example, to apply the `bg-sky-700` class when the `aria-checked` attribute is set to `true`, use the `aria-checked:bg-sky-700` class:\n\n```\n<div aria-checked=\"true\" class=\"bg-gray-600 aria-checked:bg-sky-700\">\n  <!-- ... -->\n</div>\n```\n\nBy default we’ve included modifiers for the most common boolean ARIA attributes:\n\nModifier\n\nCSS\n\n`aria-busy`\n\n`&[aria-busy=“true”]`\n\n`aria-checked`\n\n`&[aria-checked=“true”]`\n\n`aria-disabled`\n\n`&[aria-disabled=“true”]`\n\n`aria-expanded`\n\n`&[aria-expanded=“true”]`\n\n`aria-hidden`\n\n`&[aria-hidden=“true”]`\n\n`aria-pressed`\n\n`&[aria-pressed=“true”]`\n\n`aria-readonly`\n\n`&[aria-readonly=“true”]`\n\n`aria-required`\n\n`&[aria-required=“true”]`\n\n`aria-selected`\n\n`&[aria-selected=“true”]`\n\nYou can customize which `aria-*` modifiers are available by editing `theme.aria` or `theme.extend.aria` in your `tailwind.config.js` file:\n\nIf you need to use a one-off `aria` modifier that doesn’t make sense to include in your theme, or for more complex ARIA attributes that take specific values, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<table>\n  <thead>\n    <tr>\n      <th\n        aria-sort=\"ascending\"\n        class=\"aria-[sort=ascending]:bg-[url('/img/down-arrow.svg')] aria-[sort=descending]:bg-[url('/img/up-arrow.svg')]\"\n      >\n        Invoice #\n      </th>\n      <!-- ... -->\n    </tr>\n  </thead>\n  <!-- ... -->\n</table>\n```\n\nARIA state modifiers can also target parent and sibling elements using the `group-aria-*` and `peer-aria-*` modifiers:\n\n```\n<table>\n  <thead>\n    <tr>\n    <th aria-sort=\"ascending\" class=\"group\">\n      Invoice #\n      <svg class=\"group-aria-[sort=ascending]:rotate-0 group-aria-[sort=descending]:rotate-180\"><!-- ... --></svg>\n    </th>\n    <!-- ... -->\n    </tr>\n  </thead>\n  <!-- ... -->\n</table>\n```\n\n### [​Data attributes](#data-attributes)\n\nUse the `data-*` modifier to conditionally apply styles based on [data attributes](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes).\n\nSince there are no standard `data-*` attributes by definition, by default we only support arbitrary values out of the box, for example:\n\n```\n<!-- Will apply -->\n<div data-size=\"large\" class=\"data-[size=large]:p-8\">\n  <!-- ... -->\n</div>\n\n<!-- Will not apply -->\n<div data-size=\"medium\" class=\"data-[size=large]:p-8\">\n  <!-- ... -->\n</div>\n```\n\nYou can configure shortcuts for common data attribute selectors you’re using in your project in the `theme.data` section of your `tailwind.config.js` file:\n\nYou can then use these custom `data-*` modifiers in your project:\n\n```\n<div data-ui=\"checked active\" class=\"data-checked:underline\">\n  <!-- ... -->\n</div>\n```\n\n### [​RTL support](#rtl-support)\n\nUse the `rtl` and `ltr` modifiers to conditionally add styles in right-to-left and left-to-right modes respectively when building multi-directional layouts:\n\n```\n<div class=\"group flex items-center\">\n  <img class=\"shrink-0 h-12 w-12 rounded-full\" src=\"...\" alt=\"\" />\n  <div class=\"ltr:ml-3 rtl:mr-3\">\n    <p class=\"text-sm font-medium text-slate-700 group-hover:text-slate-900\">...</p>\n    <p class=\"text-sm font-medium text-slate-500 group-hover:text-slate-700\">...</p>\n  </div>\n</div>\n```\n\nNote that the `ltr` modifier will not take effect unless the `dir` attribute is explicitly set to `ltr`, so if you are building a multi-directional site make sure to always set a direction, not just in `rtl` mode.\n\nAlways set the direction, even if left-to-right is your default\n\n```\n<html dir=\"ltr\">\n  <!-- ... -->\n</html>\n```\n\nRemember, these modifiers are only useful if you are building a site that needs to support _both_ left-to-right and right-to-left layouts. If you’re building a site that only needs to support a single direction, you don’t need these modifiers — just apply the styles that make sense for your content.\n\n### [​Open/closed state](#open-closed-state)\n\nUse the `open` modifier to conditionally add styles when a `<details>` or `<dialog>` element is in an open state:\n\nTry toggling the disclosure to see the styles change\n\n```\n<div class=\"max-w-lg mx-auto p-8\">\n  <details class=\"open:bg-white dark:open:bg-slate-900 open:ring-1 open:ring-black/5 dark:open:ring-white/10 open:shadow-lg p-6 rounded-lg\" open>\n    <summary class=\"text-sm leading-6 text-slate-900 dark:text-white font-semibold select-none\">\n      Why do they call it Ovaltine?\n    </summary>\n    <div class=\"mt-3 text-sm leading-6 text-slate-600 dark:text-slate-400\">\n      <p>The mug is round. The jar is round. They should call it Roundtine.</p>\n    </div>\n  </details>\n</div>\n```\n\n* * *\n\n## [​Custom modifiers](#custom-modifiers)\n\n### [​Using arbitrary variants](#using-arbitrary-variants)\n\nJust like [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) let you use custom values with your utility classes, arbitrary variants let you write custom selector modifiers directly in your HTML.\n\nArbitrary variants are just format strings that represent the selector, wrapped in square brackets. For example, this arbitrary modifier selects an element only when it is the third child:\n\n```\n<ul role=\"list\">\n  {#each items as item}\n    <li class=\"[&:nth-child(3)]:underline\">{item}</li>\n  {/each}\n</ul>\n```\n\nThe format string is the same as what you’d use with the [`addVariant` plugin API](https://tailwindcss.com/docs/plugins#adding-variants), with the `&` representing the selector being modified.\n\nArbitrary variants can be stacked with built-in modifiers or with each other, just like the rest of the modifiers in Tailwind:\n\n```\n<ul role=\"list\">\n  {#each items as item}\n    <li class=\"lg:[&:nth-child(3)]:hover:underline\">{item}</li>\n  {/each}\n</ul>\n```\n\nIf you need spaces in your selector, you can use an underscore. For example, this arbitrary modifier selects all `p` elements within the element where you’ve added the class:\n\n```\n<div class=\"[&_p]:mt-4\">\n  <p>Lorem ipsum...</p>\n  <ul>\n    <li>\n      <p>Lorem ipsum...</p>\n    </li>\n    <!-- ... -->\n  </ul>\n</div>\n```\n\nYou can also use at-rules like `@media` or `@supports` in arbitrary variants:\n\n```\n<div class=\"flex [@supports(display:grid)]:grid\">\n  <!-- ... -->\n</div>\n```\n\nWith at-rule custom modifiers the `&` placeholder isn’t necessary, just like when nesting with a preprocessor.\n\nYou can even combine at-rules and regular selector modifiers by including the selector modifier within curly braces after the at-rule:\n\n```\n<button type=\"button\" class=\"[@media(any-hover:hover){&:hover}]:opacity-100\">\n  <!-- ... -->\n</button>\n```\n\n### [​Creating a plugin](#creating-a-plugin)\n\nIf you find yourself using the same arbitrary modifier multiple times in your project, it might be worth extracting it to a plugin using the `addVariant` API:\n\nLearn more in the [adding variant plugins](https://tailwindcss.com/docs/plugins#adding-variants) documentation.\n\n* * *\n\n## [​Advanced topics](#advanced-topics)\n\n### [​Using with your own classes](#using-with-your-own-classes)\n\nAll of Tailwind’s modifiers are available to use with your own custom classes as long as you’ve defined them in one of Tailwind’s [layers](https://tailwindcss.com/docs/adding-custom-styles#using-css-and-layer) or added them using a [plugin](https://tailwindcss.com/docs/adding-custom-styles#writing-plugins):\n\n### [​Ordering stacked modifiers](#ordering-stacked-modifiers)\n\nWhen stacking modifiers, they are applied from the inside-out, like nested function calls:\n\n```\n// These modifiers:\n'dark:group-hover:focus:opacity-100'\n\n// ...are applied like this:\ndark(groupHover(focus('opacity-100')))\n```\n\nFor the most part this doesn’t actually matter, but there are a few situations where the order you use actually generates meaningfully different CSS.\n\nFor example, if you have `darkMode` configured to `class`, combining the `dark` and `group-hover` modifiers generates a different result depending on the order you use:\n\n```\n/* dark:group-hover:opacity-100 */\n.dark .group:hover .dark\\:group-hover\\:opacity-100 {\n  opacity: 1;\n}\n\n/* group-hover:dark:opacity-100 */\n.group:hover .dark .group-hover\\:dark\\:opacity-100 {\n  opacity: 1;\n}\n```\n\nIn the first example, the `dark` element needs to be a parent of the `group` element, but in the second example it’s reversed.\n\nAnother place this is important is when using modifiers like `prose-headings` that are included with the official typography plugin:\n\n```\n/* prose-headings:hover:underline */\n.prose-headings\\:hover\\:underline:hover :is(:where(h1, h2, h3, h4, th)) {\n  text-decoration: underline;\n}\n\n/* hover:prose-headings:underline */\n.hover\\:prose-headings\\:underline :is(:where(h1, h2, h3, h4, th)):hover {\n  text-decoration: underline;\n}\n```\n\nIn the first example, every single heading is underlined when you hover over the article itself, whereas in the second example each heading is only underlined when you hover over that heading.\n\n* * *\n\n## [​Appendix](#appendix)\n\n### [​Quick reference](#quick-reference)\n\nA quick reference table of every single modifier included in Tailwind by default.\n\n### [​Pseudo-class reference](#pseudo-class-reference)\n\nThis is a comprehensive list of examples for all the pseudo-class modifiers included in Tailwind to complement the [pseudo-classes documentation](https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-classes) at the beginning of this guide.\n\n#### [​hover (:hover)](#hover)\n\nStyle an element when the user hovers over it with the mouse cursor using the `hover` modifier:\n\n```\n<div class=\"bg-black hover:bg-white ...\">\n  <!-- ... -->\n</div>\n```\n\n#### [​focus (:focus)](#focus)\n\nStyle an element when it has focus using the `focus` modifier:\n\n```\n<input class=\"border-gray-300 focus:border-blue-400 ...\" />\n```\n\n#### [​focus-within (:focus-within)](#focus-within)\n\nStyle an element when it or one of its descendants has focus using the `focus-within` modifier:\n\n```\n<div class=\"focus-within:shadow-lg ...\">\n  <input type=\"text\" />\n</div>\n```\n\n#### [​focus-visible (:focus-visible)](#focus-visible)\n\nStyle an element when it has been focused using the keyboard using the `focus-visible` modifier:\n\n```\n<button class=\"focus:outline-none focus-visible:ring ...\">\n  Submit\n</button>\n```\n\n#### [​active (:active)](#active)\n\nStyle an element when it is being pressed using the `active` modifier:\n\n```\n<button class=\"bg-blue-500 active:bg-blue-600 ...\">\n  Submit\n</button>\n```\n\n#### [​visited (:visited)](#visited)\n\nStyle a link when it has already been visited using the `visited` modifier:\n\n```\n<a href=\"https://seinfeldquotes.com\" class=\"text-blue-600 visited:text-purple-600 ...\">\n  Inspiration\n</a>\n```\n\n#### [​target (:target)](#target)\n\nStyle an element if its ID matches the current URL fragment using the `target` modifier:\n\n```\n<div id=\"about\" class=\"target:shadow-lg ...\">\n  <!-- ... -->\n</div>\n```\n\n#### [​first (:first-child)](#first)\n\nStyle an element if it’s the first child using the `first` modifier:\n\n```\n<ul>\n  {#each people as person}\n    <li class=\"py-4 first:pt-0 ...\">\n      <!-- ... -->\n    </li>\n  {/each}\n</ul>\n```\n\n#### [​last (:last-child)](#last)\n\nStyle an element if it’s the last child using the `last` modifier:\n\n```\n<ul>\n  {#each people as person}\n    <li class=\"py-4 last:pb-0 ...\">\n      <!-- ... -->\n    </li>\n  {/each}\n</ul>\n```\n\n#### [​only (:only-child)](#only)\n\nStyle an element if it’s the only child using the `only` modifier:\n\n```\n<ul>\n  {#each people as person}\n    <li class=\"py-4 only:py-0 ...\">\n      <!-- ... -->\n    </li>\n  {/each}\n</ul>\n```\n\n#### [​odd (:nth-child(odd))](#odd)\n\nStyle an element if it’s an oddly numbered child using the `odd` modifier:\n\n```\n<table>\n  {#each people as person}\n    <tr class=\"bg-white odd:bg-gray-100 ...\">\n      <!-- ... -->\n    </tr>\n  {/each}\n</table>\n```\n\n#### [​even (:nth-child(even))](#even)\n\nStyle an element if it’s an evenly numbered child using the `even` modifier:\n\n```\n<table>\n  {#each people as person}\n    <tr class=\"bg-white even:bg-gray-100 ...\">\n      <!-- ... -->\n    </tr>\n  {/each}\n</table>\n```\n\n#### [​first-of-type (:first-of-type)](#first-of-type)\n\nStyle an element if it’s the first child of its type using the `first-of-type` modifier:\n\n```\n<nav>\n  <img src=\"/logo.svg\" alt=\"Vandelay Industries\" />\n  {#each links as link}\n    <a href=\"#\" class=\"ml-2 first-of-type:ml-6 ...\">\n      <!-- ... -->\n    </a>\n  {/each}\n</nav>\n```\n\n#### [​last-of-type (:last-of-type)](#last-of-type)\n\nStyle an element if it’s the last child of its type using the `last-of-type` modifier:\n\n```\n<nav>\n  <img src=\"/logo.svg\" alt=\"Vandelay Industries\" />\n  {#each links as link}\n    <a href=\"#\" class=\"mr-2 last-of-type:mr-6 ...\">\n      <!-- ... -->\n    </a>\n  {/each}\n  <button>More</button>\n</nav>\n```\n\n#### [​only-of-type (:only-of-type)](#only-of-type)\n\nStyle an element if it’s the only child of its type using the `only-of-type` modifier:\n\n```\n<nav>\n  <img src=\"/logo.svg\" alt=\"Vandelay Industries\" />\n  {#each links as link}\n    <a href=\"#\" class=\"mx-2 only-of-type:mx-6 ...\">\n      <!-- ... -->\n    </a>\n  {/each}\n  <button>More</button>\n</nav>\n```\n\n#### [​empty (:empty)](#empty)\n\nStyle an element if it has no content using the `empty` modifier:\n\n```\n<ul>\n  {#each people as person}\n    <li class=\"empty:hidden ...\">{person.hobby}</li>\n  {/each}\n</ul>\n```\n\n#### [​disabled (:disabled)](#disabled)\n\nStyle an input when it’s disabled using the `disabled` modifier:\n\n```\n<input class=\"disabled:opacity-75 ...\" />\n```\n\n#### [​enabled (:enabled)](#enabled)\n\nStyle an input when it’s enabled using the `enabled` modifier, most helpful when you only want to apply another style when an element is not disabled:\n\n```\n<input class=\"enabled:hover:border-gray-400 disabled:opacity-75 ...\" />\n```\n\n#### [​checked (:checked)](#checked)\n\nStyle a checkbox or radio button when it’s checked using the `checked` modifier:\n\n```\n<input type=\"checkbox\" class=\"appearance-none checked:bg-blue-500 ...\" />\n```\n\n#### [​indeterminate (:indeterminate)](#indeterminate)\n\nStyle a checkbox or radio button in an indeterminate state using the `indeterminate` modifier:\n\n```\n<input type=\"checkbox\" class=\"appearance-none indeterminate:bg-gray-300 ...\" />\n```\n\n#### [​default (:default)](#default)\n\nStyle an option, checkbox or radio button that was the default value when the page initially loaded using the `default` modifier:\n\n```\n<input type=\"checkbox\" class=\"default:ring-2 ...\" />\n```\n\n#### [​required (:required)](#required)\n\nStyle an input when it’s required using the `required` modifier:\n\n```\n<input class=\"required:border-red-500 ...\" />\n```\n\n#### [​valid (:valid)](#valid)\n\nStyle an input when it’s valid using the `valid` modifier:\n\n```\n<input class=\"valid:border-green-500 ...\" />\n```\n\n#### [​invalid (:invalid)](#invalid)\n\nStyle an input when it’s invalid using the `invalid` modifier:\n\n```\n<input class=\"invalid:border-red-500 ...\" />\n```\n\n#### [​in-range (:in-range)](#in-range)\n\nStyle an input when its value is within a specified range limit using the `in-range` modifier:\n\n```\n<input min=\"1\" max=\"5\" class=\"in-range:border-green-500 ...\" />\n```\n\n#### [​out-of-range (:out-of-range)](#out-of-range)\n\nStyle an input when its value is outside of a specified range limit using the `out-of-range` modifier:\n\n```\n<input min=\"1\" max=\"5\" class=\"out-of-range:border-red-500 ...\" />\n```\n\n#### [​placeholder-shown (:placeholder-shown)](#placeholder-shown)\n\nStyle an input when the placeholder is shown using the `placeholder-shown` modifier:\n\n```\n<input class=\"placeholder-shown:border-gray-500 ...\" placeholder=\"you@example.com\" />\n```\n\n#### [​autofill (:autofill)](#autofill)\n\nStyle an input when it has been autofilled by the browser using the `autofill` modifier:\n\n```\n<input class=\"autofill:bg-yellow-200 ...\" />\n```\n\n#### [​read-only (:read-only)](#read-only)\n\nStyle an input when it is read-only using the `read-only` modifier:\n\n```\n<input class=\"read-only:bg-gray-100 ...\" />\n```",
    "title": "Handling Hover, Focus, and Other States - Tailwind CSS",
    "description": "Using utilities to style elements on hover, focus, and more.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/align-content",
    "markdown": "# Align Content - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Start](#start)\n\nUse `content-start` to pack rows in a container against the start of the cross axis:\n\n```\n<div class=\"h-56 grid grid-cols-3 gap-4 content-start ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n</div>\n```\n\n### [​Center](#center)\n\nUse `content-center` to pack rows in a container in the center of the cross axis:\n\n```\n<div class=\"h-56 grid grid-cols-3 gap-4 content-center ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n</div>\n```\n\n### [​End](#end)\n\nUse `content-end` to pack rows in a container against the end of the cross axis:\n\n```\n<div class=\"h-56 grid grid-cols-3 gap-4 content-end ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n</div>\n```\n\n### [​Space between](#space-between)\n\nUse `content-between` to distribute rows in a container such that there is an equal amount of space between each line:\n\n```\n<div class=\"h-56 grid grid-cols-3 gap-4 content-between ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n</div>\n```\n\n### [​Space around](#space-around)\n\nUse `content-around` to distribute rows in a container such that there is an equal amount of space around each line:\n\n```\n<div class=\"h-56 grid grid-cols-3 gap-4 content-around ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n</div>\n```\n\n### [​Space evenly](#space-evenly)\n\nUse `content-evenly` to distribute rows in a container such that there is an equal amount of space around each item, but also accounting for the doubling of space you would normally see between each item when using `content-around`:\n\n```\n<div class=\"h-56 grid grid-cols-3 gap-4 content-evenly ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n</div>\n```\n\n### [​Stretch](#stretch)\n\nUse `content-stretch` to allow content items to fill the available space along the container’s cross axis:\n\n```\n<div class=\"h-56 grid grid-cols-3 gap-4 content-stretch ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n</div>\n```\n\n### [​Normal](#normal)\n\nUse `content-normal` to pack content items in their default position as if no `align-content` value was set:\n\n```\n<div class=\"h-56 grid grid-cols-3 gap-4 content-normal ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:content-around` to only apply the `content-around` utility on hover.\n\n```\n<div class=\"grid content-start hover:content-around\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:content-around` to apply the `content-around` utility at only medium screen sizes and above.\n\n```\n<div class=\"grid content-start md:content-around\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Align Content - Tailwind CSS",
    "description": "Utilities for controlling how rows are positioned in multi-row flex and grid containers.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/background-size",
    "markdown": "# Background Size - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Auto](#auto)\n\nUse `bg-auto` to display the background image at its default size.\n\n```\n<div class=\"bg-auto bg-no-repeat bg-center ...\" style=\"background-image: url(...)\"></div>\n```\n\n### [​Cover](#cover)\n\nUse `bg-cover` to scale the background image until it fills the background layer.\n\n```\n<div class=\"bg-cover bg-center ...\" style=\"background-image: url(...)\"></div>\n```\n\n### [​Contain](#contain)\n\nUse `bg-contain` to scale the background image to the outer edges without cropping or stretching.\n\n```\n<div class=\"bg-contain bg-center ...\" style=\"background-image: url(...)\"></div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:bg-contain` to only apply the `bg-contain` utility on hover.\n\n```\n<div class=\"bg-auto hover:bg-contain\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:bg-contain` to apply the `bg-contain` utility at only medium screen sizes and above.\n\n```\n<div class=\"bg-auto md:bg-contain\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides utilities for `auto`, `cover`, and `contain` background sizes. You can change, add, or remove these by editing the `theme.backgroundSize` section of your config.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `background-size` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"bg-[length:200px_100px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Background Size - Tailwind CSS",
    "description": "Utilities for controlling the background size of an element's background image.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/dark-mode",
    "markdown": "# Dark Mode - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\nNow that dark mode is a first-class feature of many operating systems, it’s becoming more and more common to design a dark version of your website to go along with the default design.\n\nTo make this as easy as possible, Tailwind includes a `dark` variant that lets you style your site differently when dark mode is enabled:\n\n```\n<div class=\"bg-white dark:bg-slate-800 rounded-lg px-6 py-8 ring-1 ring-slate-900/5 shadow-xl\">\n  <div>\n    <span class=\"inline-flex items-center justify-center p-2 bg-indigo-500 rounded-md shadow-lg\">\n      <svg class=\"h-6 w-6 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\"><!-- ... --></svg>\n    </span>\n  </div>\n  <h3 class=\"text-slate-900 dark:text-white mt-5 text-base font-medium tracking-tight\">Writes Upside-Down</h3>\n  <p class=\"text-slate-500 dark:text-slate-400 mt-2 text-sm\">\n    The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space.\n  </p>\n</div>\n```\n\nBy default this uses the `prefers-color-scheme` CSS media feature, but you can also build sites that support toggling dark mode manually using the [‘selector’ strategy](https://tailwindcss.com/docs/dark-mode#toggling-dark-mode-manually).\n\n* * *\n\n## [​Toggling dark mode manually](#toggling-dark-mode-manually)\n\nIf you want to support toggling dark mode manually instead of relying on the operating system preference, use the `selector` strategy instead of the `media` strategy:\n\nThe `selector` strategy replaced the `class` strategy in Tailwind CSS v3.4.1.\n\nNow instead of `dark:{class}` classes being applied based on `prefers-color-scheme`, they will be applied whenever the `dark` class is present earlier in the HTML tree.\n\n```\n<!-- Dark mode not enabled -->\n<html>\n<body>\n  <!-- Will be white -->\n  <div class=\"bg-white dark:bg-black\">\n    <!-- ... -->\n  </div>\n</body>\n</html>\n\n<!-- Dark mode enabled -->\n<html class=\"dark\">\n<body>\n  <!-- Will be black -->\n  <div class=\"bg-white dark:bg-black\">\n    <!-- ... -->\n  </div>\n</body>\n</html>\n```\n\nIf you’ve set [a prefix](https://tailwindcss.com/docs/configuration#prefix) in your Tailwind config, be sure to add that to the `dark` class. For example, if you have a prefix of `tw-`, you’ll need to use the `tw-dark` class to enable dark mode.\n\nHow you add the `dark` class to the `html` element is up to you, but a common approach is to use a bit of JavaScript that reads a preference from somewhere (like `localStorage`) and updates the DOM accordingly.\n\n### [​Customizing the selector](#customizing-the-selector)\n\nSome frameworks (like NativeScript) have their own approach to enabling dark mode and add a different class name when dark mode is active.\n\nYou can customize the dark mode selector by setting `darkMode` to an array with your custom selector as the second item:\n\nTailwind will automatically wrap your custom dark mode selector with the `:where()` pseudo-class to make sure the specificity is the same as it would be when using the `media` strategy:\n\n```\n.dark\\:underline:where([data-mode=\"dark\"], [data-mode=\"dark\"] *){\n  text-decoration-line: underline\n}\n```\n\n### [​Supporting system preference and manual selection](#supporting-system-preference-and-manual-selection)\n\nThe `selector` strategy can be used to support both the user’s system preference _or_ a manually selected mode by using the [`window.matchMedia()` API](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia).\n\nHere’s a simple example of how you can support light mode, dark mode, as well as respecting the operating system preference:\n\nAgain you can manage this however you like, even storing the preference server-side in a database and rendering the class on the server — it’s totally up to you.\n\n## [​Overriding the dark variant](#overriding-the-dark-variant)\n\nIf you’d like to replace Tailwind’s built-in dark variant with your own custom variant, you can do so using the `variant` dark mode strategy:\n\nWhen using this strategy Tailwind will not modify the provided selector in any way, so be mindful of it’s specificity and consider using the `:where()` pseudo-class to ensure it has the same specificity as other utilities.\n\n### [​Using multiple selectors](#using-multiple-selectors)\n\nIf you have multiple scenarios where dark mode should be enabled, you can specify all of them by providing an array:",
    "title": "Dark Mode - Tailwind CSS",
    "description": "Using Tailwind CSS to style your site in dark mode.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/list-style-type",
    "markdown": "# List Style Type - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the list style type](#setting-the-list-style-type)\n\nTo create bulleted or numeric lists, use the `list-disc` and `list-decimal` utilities.\n\n```\n<ul class=\"list-disc\">\n  <li>Now this is a story all about how, my life got flipped-turned upside down</li>\n  <!-- ... -->\n</ul>\n\n<ol class=\"list-decimal\">\n  <li>Now this is a story all about how, my life got flipped-turned upside down</li>\n  <!-- ... -->\n</ol>\n\n<ul class=\"list-none\">\n  <li>Now this is a story all about how, my life got flipped-turned upside down</li>\n  <!-- ... -->\n</ul>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:list-disc` to only apply the `list-disc` utility on hover.\n\n```\n<ul class=\"list-none hover:list-disc\">\n  <!-- ... -->\n</ul>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:list-disc` to apply the `list-disc` utility at only medium screen sizes and above.\n\n```\n<ul class=\"list-none md:list-disc\">\n  <!-- ... -->\n</ul>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides three utilities for the most common list style types. You change, add, or remove these by editing the `theme.listStyleType` section of your Tailwind config.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `list-style-type` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<ul class=\"list-[upper-roman]\">\n  <!-- ... -->\n</ul>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "List Style Type - Tailwind CSS",
    "description": "Utilities for controlling the bullet/number style of a list.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/align-self",
    "markdown": "# Align Self - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Auto](#auto)\n\nUse `self-auto` to align an item based on the value of the container’s `align-items` property:\n\n```\n<div class=\"flex items-stretch ...\">\n  <div>01</div>\n  <div class=\"self-auto ...\">02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Start](#start)\n\nUse `self-start` to align an item to the start of the container’s cross axis, despite the container’s `align-items` value:\n\n```\n<div class=\"flex items-stretch ...\">\n  <div>01</div>\n  <div class=\"self-start ...\">02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Center](#center)\n\nUse `self-center` to align an item along the center of the container’s cross axis, despite the container’s `align-items` value:\n\n```\n<div class=\"flex items-stretch ...\">\n  <div>01</div>\n  <div class=\"self-center ...\">02</div>\n  <div>03</div>\n</div>\n```\n\n### [​End](#end)\n\nUse `self-end` to align an item to the end of the container’s cross axis, despite the container’s `align-items` value:\n\n```\n<div class=\"flex items-stretch ...\">\n  <div>01</div>\n  <div class=\"self-end ...\">02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Stretch](#stretch)\n\nUse `self-stretch` to stretch an item to fill the container’s cross axis, despite the container’s `align-items` value:\n\n```\n<div class=\"flex items-stretch ...\">\n  <div>01</div>\n  <div class=\"self-stretch ...\">02</div>\n  <div>03</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:self-end` to only apply the `self-end` utility on hover.\n\n```\n<div class=\"self-auto hover:self-end\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:self-end` to apply the `self-end` utility at only medium screen sizes and above.\n\n```\n<div class=\"self-auto md:self-end\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Align Self - Tailwind CSS",
    "description": "Utilities for controlling how an individual flex or grid item is positioned along its container's cross axis.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/order",
    "markdown": "# Order - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Ordering flex and grid items](#ordering-flex-and-grid-items)\n\nUse the `order-*` utilities to render flex and grid items in a different order than they appear in the DOM.\n\n```\n<div class=\"flex justify-between ...\">\n  <div class=\"order-last\">01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Using negative values](#using-negative-values)\n\nTo use a negative order value, prefix the class name with a dash to convert it to a negative value.\n\n```\n<div class=\"-order-1\">\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:order-last` to only apply the `order-last` utility on hover.\n\n```\n<div class=\"order-first hover:order-last\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:order-last` to apply the `order-last` utility at only medium screen sizes and above.\n\n```\n<div class=\"order-first md:order-last\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides utilities for `order-first`, `order-last`, `order-none`, and numbered utilities from 1 through 12. You can customize these values by editing `theme.order` or `theme.extend.order` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `order` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"order-[13]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Order - Tailwind CSS",
    "description": "Utilities for controlling the order of flex and grid items.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/background-image",
    "markdown": "# Background Image - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Linear gradients](#linear-gradients)\n\nUse the `bg-gradient-*` utilities in combination with the [gradient color stop](https://tailwindcss.com/docs/gradient-color-stops) utilities to give an element a linear gradient background.\n\n```\n<div class=\"h-14 bg-gradient-to-r from-cyan-500 to-blue-500\"></div>\n<div class=\"h-14 bg-gradient-to-r from-sky-500 to-indigo-500\"></div>\n<div class=\"h-14 bg-gradient-to-r from-violet-500 to-fuchsia-500\"></div>\n<div class=\"h-14 bg-gradient-to-r from-purple-500 to-pink-500\"></div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:bg-gradient-to-r` to only apply the `bg-gradient-to-r` utility on hover.\n\n```\n<div class=\"bg-gradient-to-l hover:bg-gradient-to-r\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:bg-gradient-to-r` to apply the `bg-gradient-to-r` utility at only medium screen sizes and above.\n\n```\n<div class=\"bg-gradient-to-l md:bg-gradient-to-r\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind includes background image utilities for creating linear gradient backgrounds in eight directions.\n\nYou can add your own background images by editing the `theme.backgroundImage` section of your `tailwind.config.js` file:\n\nThese don’t just have to be gradients — they can be any background images you need.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `background-image` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"bg-[url('/img/hero-pattern.svg')]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Background Image - Tailwind CSS",
    "description": "Utilities for controlling an element's background image.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/flex-shrink",
    "markdown": "# Flex Shrink - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Shrink](#shrink)\n\nUse `shrink` to allow a flex item to shrink if needed:\n\n```\n<div class=\"flex ...\">\n  <div class=\"flex-none w-14 h-14 ...\">\n    01\n  </div>\n  <div class=\"shrink w-64 h-14 ...\">\n    02\n  </div>\n  <div class=\"flex-none w-14 h-14 ...\">\n    03\n  </div>\n</div>\n```\n\n### [​Don’t shrink](#dont-shrink)\n\nUse `shrink-0` to prevent a flex item from shrinking:\n\n```\n<div class=\"flex ...\">\n  <div class=\"flex-1 h-16 ...\">\n    01\n  </div>\n  <div class=\"shrink-0 h-16 w-32 ...\">\n    02\n  </div>\n  <div class=\"flex-1 h-16 ...\">\n    03\n  </div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:shrink-0` to only apply the `shrink-0` utility on hover.\n\n```\n<div class=\"shrink hover:shrink-0\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:shrink-0` to apply the `shrink-0` utility at only medium screen sizes and above.\n\n```\n<div class=\"shrink md:shrink-0\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides two `shrink` utilities. You can customize these values by editing `theme.flexShrink` or `theme.extend.flexShrink` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `flex-shrink` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"shrink-[2]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Flex Shrink - Tailwind CSS",
    "description": "Utilities for controlling how flex items shrink.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/align-items",
    "markdown": "# Align Items - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Stretch](#stretch)\n\nUse `items-stretch` to stretch items to fill the container’s cross axis:\n\n```\n<div class=\"flex items-stretch ...\">\n  <div class=\"py-4\">01</div>\n  <div class=\"py-12\">02</div>\n  <div class=\"py-8\">03</div>\n</div>\n```\n\n### [​Start](#start)\n\nUse `items-start` to align items to the start of the container’s cross axis:\n\n```\n<div class=\"flex items-start ...\">\n  <div class=\"py-4\">01</div>\n  <div class=\"py-12\">02</div>\n  <div class=\"py-8\">03</div>\n</div>\n```\n\n### [​Center](#center)\n\nUse `items-center` to align items along the center of the container’s cross axis:\n\n```\n<div class=\"flex items-center ...\">\n  <div class=\"py-4\">01</div>\n  <div class=\"py-12\">02</div>\n  <div class=\"py-8\">03</div>\n</div>\n```\n\n### [​End](#end)\n\nUse `items-end` to align items to the end of the container’s cross axis:\n\n```\n<div class=\"flex items-end ...\">\n  <div class=\"py-4\">01</div>\n  <div class=\"py-12\">02</div>\n  <div class=\"py-8\">03</div>\n</div>\n```\n\n### [​Baseline](#baseline)\n\nUse `items-baseline` to align items along the container’s cross axis such that all of their baselines align:\n\n```\n<div class=\"flex items-baseline ...\">\n  <div class=\"pt-2 pb-6\">01</div>\n  <div class=\"pt-8 pb-12\">02</div>\n  <div class=\"pt-12 pb-4\">03</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:items-center` to only apply the `items-center` utility on hover.\n\n```\n<div class=\"flex items-stretch hover:items-center\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:items-center` to apply the `items-center` utility at only medium screen sizes and above.\n\n```\n<div class=\"flex items-stretch md:items-center\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Align Items - Tailwind CSS",
    "description": "Utilities for controlling how flex and grid items are positioned along a container's cross axis.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/text-align",
    "markdown": "# Text Align - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the text alignment](#setting-the-text-alignment)\n\nUse the `text-left`, `text-center`, `text-right`, and `text-justify` utilities to control the text alignment of an element.\n\n```\n<p class=\"text-left ...\">So I started to walk into the water...</p>\n```\n\n```\n<p class=\"text-center ...\">So I started to walk into the water...</p>\n```\n\n```\n<p class=\"text-right ...\">So I started to walk into the water...</p>\n```\n\n```\n<p class=\"text-justify ...\">So I started to walk into the water...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:text-center` to only apply the `text-center` utility on hover.\n\n```\n<p class=\"text-left hover:text-center\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:text-center` to apply the `text-center` utility at only medium screen sizes and above.\n\n```\n<p class=\"text-left md:text-center\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Text Align - Tailwind CSS",
    "description": "Utilities for controlling the alignment of text.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/grid-template-columns",
    "markdown": "# Grid Template Columns - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Specifying the columns in a grid](#specifying-the-columns-in-a-grid)\n\nUse the `grid-cols-*` utilities to create grids with _n_ equally sized columns.\n\n```\n<div class=\"grid grid-cols-4 gap-4\">\n  <div>01</div>\n  <!-- ... -->\n  <div>09</div>\n</div>\n```\n\n### [​Subgrid](#subgrid)\n\nUse the `grid-cols-subgrid` utility to adopt the column tracks defined by the item’s parent.\n\n```\n<div class=\"grid grid-cols-4 gap-4\">\n  <div>01</div>\n  <!-- ... -->\n  <div>05</div>\n  <div class=\"grid grid-cols-subgrid gap-4 col-span-3\">\n    <div class=\"col-start-2\">06</div>\n  </div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:grid-cols-6` to only apply the `grid-cols-6` utility on hover.\n\n```\n<div class=\"grid grid-cols-1 hover:grid-cols-6\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:grid-cols-6` to apply the `grid-cols-6` utility at only medium screen sizes and above.\n\n```\n<div class=\"grid grid-cols-1 md:grid-cols-6\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind includes `grid-template-column` utilities for creating basic grids with up to 12 equal width columns. You can customize these values by editing `theme.gridTemplateColumns` or `theme.extend.gridTemplateColumns` in your `tailwind.config.js` file.\n\nYou have direct access to the `grid-template-columns` CSS property here so you can make your custom column values as generic or as complicated and site-specific as you like.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `grid-template-columns` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"grid grid-cols-[200px_minmax(900px,_1fr)_100px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Grid Template Columns - Tailwind CSS",
    "description": "Utilities for specifying the columns in a grid layout.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/adding-custom-styles",
    "markdown": "# Adding Custom Styles - Tailwind CSS\n\nOften the biggest challenge when working with a framework is figuring out what you’re supposed to do when there’s something you need that the framework doesn’t handle for you.\n\nTailwind has been designed from the ground up to be extensible and customizable, so that no matter what you’re building you never feel like you’re fighting the framework.\n\nThis guide covers topics like customizing your design tokens, how to break out of those constraints when necessary, adding your own custom CSS, and extending the framework with plugins.\n\n## [​Customizing your theme](#customizing-your-theme)\n\nIf you want to change things like your color palette, spacing scale, typography scale, or breakpoints, add your customizations to the `theme` section of your `tailwind.config.js` file:\n\nLearn more about customizing your theme in the [Theme Configuration](https://tailwindcss.com/docs/theme) documentation.\n\n* * *\n\n## [​Using arbitrary values](#using-arbitrary-values)\n\nWhile you can usually build the bulk of a well-crafted design using a constrained set of design tokens, once in a while you need to break out of those constraints to get things pixel-perfect.\n\nWhen you find yourself really needing something like `top: 117px` to get a background image in just the right spot, use Tailwind’s square bracket notation to generate a class on the fly with any arbitrary value:\n\n```\n<div class=\"top-[117px]\">\n  <!-- ... -->\n</div>\n```\n\nThis is basically like inline styles, with the major benefit that you can combine it with interactive modifiers like `hover` and responsive modifiers like `lg`:\n\n```\n<div class=\"top-[117px] lg:top-[344px]\">\n  <!-- ... -->\n</div>\n```\n\nThis works for everything in the framework, including things like background colors, font sizes, pseudo-element content, and more:\n\n```\n<div class=\"bg-[#bada55] text-[22px] before:content-['Festivus']\">\n  <!-- ... -->\n</div>\n```\n\nIt’s even possible to use the [`theme` function](https://tailwindcss.com/docs/functions-and-directives#theme) to reference the design tokens in your `tailwind.config.js` file:\n\n```\n<div class=\"grid grid-cols-[fit-content(theme(spacing.32))]\">\n  <!-- ... -->\n</div>\n```\n\nWhen using a CSS variable as an arbitrary value, wrapping your variable in `var(...)` isn’t needed — just providing the actual variable name is enough:\n\n```\n<div class=\"bg-[--my-color]\">\n  <!-- ... -->\n</div>\n```\n\n### [​Arbitrary properties](#arbitrary-properties)\n\nIf you ever need to use a CSS property that Tailwind doesn’t include a utility for out of the box, you can also use square bracket notation to write completely arbitrary CSS:\n\n```\n<div class=\"[mask-type:luminance]\">\n  <!-- ... -->\n</div>\n```\n\nThis is _really_ like inline styles, but again with the benefit that you can use modifiers:\n\n```\n<div class=\"[mask-type:luminance] hover:[mask-type:alpha]\">\n  <!-- ... -->\n</div>\n```\n\nThis can be useful for things like CSS variables as well, especially when they need to change under different conditions:\n\n```\n<div class=\"[--scroll-offset:56px] lg:[--scroll-offset:44px]\">\n  <!-- ... -->\n</div>\n```\n\n### [​Arbitrary variants](#arbitrary-variants)\n\nArbitrary _variants_ are like arbitrary values but for doing on-the-fly selector modification, like you can with built-in pseudo-class variants like `hover:{utility}` or responsive variants like `md:{utility}` but using square bracket notation directly in your HTML.\n\n```\n<ul role=\"list\">\n  {#each items as item}\n    <li class=\"lg:[&:nth-child(3)]:hover:underline\">{item}</li>\n  {/each}\n</ul>\n```\n\nLearn more in the [arbitrary variants](https://tailwindcss.com/docs/hover-focus-and-other-states#using-arbitrary-variants) documentation.\n\n### [​Handling whitespace](#handling-whitespace)\n\nWhen an arbitrary value needs to contain a space, use an underscore (`_`) instead and Tailwind will automatically convert it to a space at build-time:\n\n```\n<div class=\"grid grid-cols-[1fr_500px_2fr]\">\n  <!-- ... -->\n</div>\n```\n\nIn situations where underscores are common but spaces are invalid, Tailwind will preserve the underscore instead of converting it to a space, for example in URLs:\n\n```\n<div class=\"bg-[url('/what_a_rush.png')]\">\n  <!-- ... -->\n</div>\n```\n\nIn the rare case that you actually need to use an underscore but it’s ambiguous because a space is valid as well, escape the underscore with a backslash and Tailwind won’t convert it to a space:\n\n```\n<div class=\"before:content-['hello\\_world']\">\n  <!-- ... -->\n</div>\n```\n\nIf you’re using something like JSX where the backslash is stripped from the rendered HTML, use [String.raw()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw) so the backslash isn’t treated as a JavaScript escape character:\n\n```\n<div className={String.raw`before:content-['hello\\_world']`}>\n  <!-- ... -->\n</div>\n```\n\n### [​Resolving ambiguities](#resolving-ambiguities)\n\nMany utilities in Tailwind share a common namespace but map to different CSS properties. For example `text-lg` and `text-black` both share the `text-` namespace, but one is for `font-size` and the other is for `color`.\n\nWhen using arbitrary values, Tailwind can generally handle this ambiguity automatically based on the value you pass in:\n\n```\n<!-- Will generate a font-size utility -->\n<div class=\"text-[22px]\">...</div>\n\n<!-- Will generate a color utility -->\n<div class=\"text-[#bada55]\">...</div>\n```\n\nSometimes it really is ambiguous though, for example when using CSS variables:\n\n```\n<div class=\"text-[var(--my-var)]\">...</div>\n```\n\nIn these situations, you can “hint” the underlying type to Tailwind by adding a [CSS data type](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Types) before the value:\n\n```\n<!-- Will generate a font-size utility -->\n<div class=\"text-[length:var(--my-var)]\">...</div>\n\n<!-- Will generate a color utility -->\n<div class=\"text-[color:var(--my-var)]\">...</div>\n```\n\n* * *\n\n## [​Using CSS and @layer](#using-css-and-layer)\n\nWhen you need to add truly custom CSS rules to a Tailwind project, the easiest approach is to just add the custom CSS to your stylesheet:\n\nFor more power, you can also use the `@layer` directive to add styles to Tailwind’s `base`, `components`, and `utilities` layers:\n\nWhy does Tailwind group styles into “layers”?\n\nIn CSS, the order of the rules in your stylesheet decides which declaration wins when two selectors have the same specificity:\n\n```\n.btn {\n  background: blue;\n  /* ... */\n}\n\n.bg-black {\n  background: black;\n}\n```\n\nHere, both buttons will be black since `.bg-black` comes after `.btn` in the CSS:\n\n```\n<button class=\"btn bg-black\">...</button>\n<button class=\"bg-black btn\">...</button>\n```\n\nTo manage this, Tailwind organizes the styles it generates into three different “layers” — a concept popularized by [ITCSS](https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/#what-is-itcss).\n\n*   The `base` layer is for things like reset rules or default styles applied to plain HTML elements.\n*   The `components` layer is for class-based styles that you want to be able to override with utilities.\n*   The `utilities` layer is for small, single-purpose classes that should always take precedence over any other styles.\n\nBeing explicit about this makes it easier to understand how your styles will interact with each other, and using the `@layer` directive lets you control the final declaration order while still organizing your actual code in whatever way you like.\n\nThe `@layer` directive helps you control declaration order by automatically relocating your styles to the corresponding `@tailwind` directive, and also enables features like [modifiers](https://tailwindcss.com/docs/adding-custom-styles#using-modifiers-with-custom-css) and [tree-shaking](https://tailwindcss.com/docs/adding-custom-styles#removing-unused-custom-css) for your own custom CSS.\n\n### [​Adding base styles](#adding-base-styles)\n\nIf you just want to set some defaults for the page (like the text color, background color, or font family), the easiest option is just adding some classes to the `html` or `body` elements:\n\n```\n<!doctype html>\n<html lang=\"en\" class=\"text-gray-900 bg-gray-100 font-serif\">\n  <!-- ... -->\n</html>\n```\n\nThis keeps your base styling decisions in your markup alongside all of your other styles, instead of hiding them in a separate file.\n\nIf you want to add your own default base styles for specific HTML elements, use the `@layer` directive to add those styles to Tailwind’s `base` layer:\n\nUse the [`theme`](https://tailwindcss.com/docs/functions-and-directives#theme) function or [`@apply`](https://tailwindcss.com/docs/functions-and-directives#apply) directive when adding custom base styles if you want to refer to any of the values defined in your [theme](https://tailwindcss.com/docs/theme).\n\n### [​Adding component classes](#adding-component-classes)\n\nUse the `components` layer for any more complicated classes you want to add to your project that you’d still like to be able to override with utility classes.\n\nTraditionally these would be classes like `card`, `btn`, `badge` — that kind of thing.\n\nBy defining component classes in the `components` layer, you can still use utility classes to override them when necessary:\n\n```\n<!-- Will look like a card, but with square corners -->\n<div class=\"card rounded-none\">\n  <!-- ... -->\n</div>\n```\n\nUsing Tailwind you probably don’t need these types of classes as often as you think. Read our guide on [Reusing Styles](https://tailwindcss.com/docs/reusing-styles) for our recommendations.\n\nThe `components` layer is also a good place to put custom styles for any third-party components you’re using:\n\nUse the [`theme`](https://tailwindcss.com/docs/functions-and-directives#theme) function or [`@apply`](https://tailwindcss.com/docs/functions-and-directives#apply) directive when adding custom component styles if you want to refer to any of the values defined in your [theme](https://tailwindcss.com/docs/theme).\n\n### [​Adding custom utilities](#adding-custom-utilities)\n\nAdd any of your own custom utility classes to Tailwind’s `utilities` layer:\n\nThis can be useful when there’s a CSS feature you’d like to use in your project that Tailwind doesn’t include utilities for out of the box.\n\n### [​Using modifiers with custom CSS](#using-modifiers-with-custom-css)\n\nAny custom styles you add to Tailwind with `@layer` will automatically support Tailwind’s modifier syntax for handling things like hover states, responsive breakpoints, dark mode, and more.\n\nLearn more about how these modifiers work in the [Hover, Focus, and Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Removing unused custom CSS](#removing-unused-custom-css)\n\nAny custom styles you add to the `base`, `components`, or `utilities` layers will only be included in your compiled CSS if those styles are actually used in your HTML.\n\nIf you want to add some custom CSS that should always be included, add it to your stylesheet without using the `@layer` directive:\n\nMake sure to put your custom styles where they need to go to get the precedence behavior you want. In the example above, we’ve added the `.card` class before `@tailwind utilities` to make sure utilities can still override it.\n\n### [​Using multiple CSS files](#using-multiple-css-files)\n\nIf you are writing a lot of CSS and organizing it into multiple files, make sure those files are combined into a single stylesheet before processing them with Tailwind, or you’ll see errors about using `@layer` without the corresponding `@tailwind` directive.\n\nThe easiest way to do this is using the [postcss-import](https://github.com/postcss/postcss-import) plugin:\n\nLearn more in our [build-time imports](https://tailwindcss.com/docs/using-with-preprocessors#build-time-imports) documentation.\n\n### [​Layers and per-component CSS](#layers-and-per-component-css)\n\nComponent frameworks like Vue and Svelte support adding per-component styles within a `<style>` block that lives in each component file.\n\nWhile you can use features like `@apply` and `theme` inside component styles like this, the `@layer` directive will not work and you’ll see an error about `@layer` being used without a matching `@tailwind` directive:\n\nDon’t use `@layer` in component styles\n\nThis is because under-the-hood, frameworks like Vue and Svelte are processing every single `<style>` block independently, and running your PostCSS plugin chain against each one in isolation.\n\nThat means if you have 10 components that each have a `<style>` block, Tailwind is being run 10 separate times, and each run has zero knowledge about the other runs. Because of this, Tailwind can’t take the styles you define in a `@layer` and move them to the corresponding `@tailwind` directive, because as far as Tailwind can tell there is no `@tailwind` directive to move it to.\n\nOne solution to this is to simply _not_ use `@layer` inside your component styles:\n\nAdd your styles without using `@layer`\n\nYou lose the ability to control the precedence of your styles, but unfortunately that’s totally out of our control because of how these tools work.\n\nOur recommendation is that you just don’t use component styles like this at all and instead use Tailwind the way it’s intended to be used — as a single global stylesheet where you use the classes directly in your HTML:\n\nUse Tailwind’s utilities instead of component styles\n\n* * *\n\n## [​Writing plugins](#writing-plugins)\n\nYou can also add custom styles to your project using Tailwind’s plugin system instead of using a CSS file:\n\nLearn more about writing your own plugins in the [Plugins](https://tailwindcss.com/docs/plugins) documentation.",
    "title": "Adding Custom Styles - Tailwind CSS",
    "description": "Best practices for adding your own custom styles to Tailwind.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/reusing-styles",
    "markdown": "# Reusing Styles - Tailwind CSS\n\nTailwind encourages a [utility-first](https://tailwindcss.com/docs/utility-first) workflow, where designs are implemented using only low-level utility classes. This is a powerful way to avoid premature abstraction and the pain points that come with it.\n\nBut of course as a project grows, you’ll inevitably find yourself repeating common utility combinations to recreate the same design in many different places.\n\nFor example, in the template below you can see the utility classes for each avatar image are repeated five separate times:\n\n```\n<div>\n  <div class=\"flex items-center space-x-2 text-base\">\n    <h4 class=\"font-semibold text-slate-900\">Contributors</h4>\n    <span class=\"rounded-full bg-slate-100 px-2 py-1 text-xs font-semibold text-slate-700\">204</span>\n  </div>\n  <div class=\"mt-3 flex -space-x-2 overflow-hidden\">\n    <img class=\"inline-block h-12 w-12 rounded-full ring-2 ring-white\" src=\"https://images.unsplash.com/photo-1491528323818-fdd1faba62cc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\" alt=\"\"/>\n    <img class=\"inline-block h-12 w-12 rounded-full ring-2 ring-white\" src=\"https://images.unsplash.com/photo-1550525811-e5869dd03032?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\" alt=\"\"/>\n    <img class=\"inline-block h-12 w-12 rounded-full ring-2 ring-white\" src=\"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80\" alt=\"\"/>\n    <img class=\"inline-block h-12 w-12 rounded-full ring-2 ring-white\" src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\" alt=\"\"/>\n    <img class=\"inline-block h-12 w-12 rounded-full ring-2 ring-white\" src=\"https://images.unsplash.com/photo-1517365830460-955ce3ccd263?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\" alt=\"\"/>\n  </div>\n  <div class=\"mt-3 text-sm font-medium\">\n    <a href=\"#\" class=\"text-blue-500\">+ 198 others</a>\n  </div>\n</div>\n```\n\nDon’t panic! In this guide, you’ll learn about different strategies for reusing styles in your project, as well as best practices for when to employ each one.\n\n* * *\n\n## [​Using editor and language features](#using-editor-and-language-features)\n\nA lot of the time, duplication like this isn’t even a real problem because it’s all together in one place, or doesn’t even actually exist because you’re iterating over an array of items and only writing the markup once.\n\nIf the styles you need to reuse only need to be reused within a single file, multi-cursor editing and loops are the simplest way to manage any duplication.\n\n### [​Multi-cursor editing](#multi-cursor-editing)\n\nWhen duplication is localized to a group of elements in a single file, the easiest way to deal with it to use [multi-cursor editing](https://code.visualstudio.com/docs/editor/codebasics#_multiple-selections-multicursor) to quickly select and edit the class list for each element at once:\n\n```\n<nav class=\"flex justify-center space-x-4\">\n  <a href=\"/dashboard\" class=\"font-medium px-3 py-2 text-slate-700 rounded-lg hover:bg-slate-100 hover:text-slate-900\">Home</a>\n  <a href=\"/team\" class=\"font-medium px-3 py-2 text-slate-700 rounded-lg hover:bg-slate-100 hover:text-slate-900\">Team</a>\n  <a href=\"/projects\" class=\"font-medium px-3 py-2 text-slate-700 rounded-lg hover:bg-slate-100 hover:text-slate-900\">Projects</a>\n  <a href=\"/reports\" class=\"font-medium px-3 py-2 text-slate-700 rounded-lg hover:bg-slate-100 hover:text-slate-900\">Reports</a>\n</nav>\n```\n\nYou’d be surprised at how often this ends up being the best solution. If you can quickly edit all of the duplicated class lists simultaneously, there’s no benefit to introducing any additional abstraction.\n\n### [​Loops](#loops)\n\nBefore you assume you’re going to need to extract a component or create a custom class for something, make sure you’re _actually_ using it more than once in your template.\n\nA lot of the time a design element that shows up more than once in the rendered page is only actually authored once because the actual markup is rendered in a loop.\n\nFor example, the duplicate avatars at the beginning of this guide would almost certainly be rendered in a loop in a real project:\n\n```\n<div>\n  <div class=\"flex items-center space-x-2 text-base\">\n    <h4 class=\"font-semibold text-slate-900\">Contributors</h4>\n    <span class=\"rounded-full bg-slate-100 px-2 py-1 text-xs font-semibold text-slate-700\">204</span>\n  </div>\n  <div class=\"mt-3 flex -space-x-2 overflow-hidden\">\n    {#each contributors as user}\n      <img class=\"inline-block h-12 w-12 rounded-full ring-2 ring-white\" src=\"{user.avatarUrl}\" alt=\"{user.handle}\"/>\n    {/each}\n  </div>\n  <div class=\"mt-3 text-sm font-medium\">\n    <a href=\"#\" class=\"text-blue-500\">+ 198 others</a>\n  </div>\n</div>\n```\n\nYou could even rewrite the navigation example using a loop or `map` if you preferred as well:\n\n```\n<nav className=\"flex sm:justify-center space-x-4\">\n  {[\n    ['Home', '/dashboard'],\n    ['Team', '/team'],\n    ['Projects', '/projects'],\n    ['Reports', '/reports'],\n  ].map(([title, url]) => (\n    <a href={url} className=\"rounded-lg px-3 py-2 text-slate-700 font-medium hover:bg-slate-100 hover:text-slate-900\">{title}</a>\n  ))}\n</nav>\n```\n\nWhen elements are rendered in a loop like this, the actual class list is only written once so there’s no actual duplication problem to solve.\n\n* * *\n\n## [​Extracting components and partials](#extracting-components-and-partials)\n\nIf you need to reuse some styles across multiple files, the best strategy is to create a _component_ if you’re using a front-end framework like React, Svelte, or Vue, or a _template partial_ if you’re using a templating language like Blade, ERB, Twig, or Nunjucks.\n\nNow you can use this component in as many places as you like, while still having a single source of truth for the styles so they can easily be updated together in one place.\n\n### [​Compared to CSS abstractions](#compared-to-css-abstractions)\n\nUnless a component is a single HTML element, the information needed to define it can’t be captured in CSS alone. For anything even remotely complex, the HTML structure is just as important as the CSS.\n\nDon’t rely on CSS classes to extract complex components\n\n```\n<!-- Even with custom CSS, you still need to duplicate this HTML structure -->\n<div class=\"chat-notification\">\n  <div class=\"chat-notification-logo-wrapper\">\n    <img class=\"chat-notification-logo\" src=\"/img/logo.svg\" alt=\"ChitChat Logo\">\n  </div>\n  <div class=\"chat-notification-content\">\n    <h4 class=\"chat-notification-title\">ChitChat</h4>\n    <p class=\"chat-notification-message\">You have a new message!</p>\n  </div>\n</div>\n\n<style>\n  .chat-notification { /* ... */ }\n  .chat-notification-logo-wrapper { /* ... */ }\n  .chat-notification-logo { /* ... */ }\n  .chat-notification-content { /* ... */ }\n  .chat-notification-title { /* ... */ }\n  .chat-notification-message { /* ... */ }\n</style>\n```\n\nEven if you create classes for the different elements in a component like this, _you still have to duplicate the HTML every time you want to use this component_. Sure you can update the font-size for every instance in a single place, but what if you need to turn the title into a link?\n\nComponents and template partials solve this problem much better than CSS-only abstractions because a component can encapsulate the HTML _and_ the styles. Changing the font-size for every instance is just as easy as it is with CSS, but now you can turn all of the titles into links in a single place too.\n\nCreate a template partial or JavaScript component\n\nWhen you create components and template partials like this, there’s no reason to use anything other than utility classes because you already have a single source of truth for the styles.\n\n* * *\n\nIf you’re using a traditional templating language like ERB or Twig, creating a template partial for something as small as a button can feel like overkill compared to a simple CSS class like `btn`.\n\nWhile it’s highly recommended that you create proper template partials for more complex components, you can use Tailwind’s `@apply` directive to extract repeated utility patterns to custom CSS classes when a template partial feels heavy-handed.\n\nHere’s what a `btn-primary` class might look like using `@apply` to compose it from existing utilities:\n\nLearn more about `@apply` and `@layer` in the [Functions & Directives](https://tailwindcss.com/docs/functions-and-directives#layer) documentation.\n\n### [​Avoiding premature abstraction](#avoiding-premature-abstraction)\n\nWhatever you do, **don’t use `@apply` just to make things look “cleaner”**. Yes, HTML templates littered with Tailwind classes are kind of ugly. Making changes in a project that has tons of custom CSS is worse.\n\nIf you start using `@apply` for everything, you are basically just writing CSS again and throwing away all of the workflow and maintainability advantages Tailwind gives you, for example:\n\n*   **You have to think up class names all the time** — nothing will slow you down or drain your energy like coming up with a class name for something that doesn’t deserve to be named.\n*   **You have to jump between multiple files to make changes** — which is a way bigger workflow killer than you’d think before co-locating everything together.\n*   **Changing styles is scarier** — CSS is global, are you _sure_ you can change the min-width value in that class without breaking something in another part of the site?\n*   **Your CSS bundle will be bigger** — oof.\n\nIf you’re going to use `@apply`, use it for very small, highly reusable things like buttons and form controls — and even then only if you’re not using a framework like React where a component would be a better choice.",
    "title": "Reusing Styles - Tailwind CSS",
    "description": "Managing duplication and creating reusable abstractions.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/text-color",
    "markdown": "# Text Color - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the text color](#setting-the-text-color)\n\nUse the `text-*` utilities to control the text color of an element.\n\n```\n<p class=\"text-blue-600\">The quick brown fox...</p>\n```\n\n### [​Changing the opacity](#changing-the-opacity)\n\nUse the color opacity modifier to control the opacity of an element’s text color.\n\n```\n<p class=\"text-blue-600/100\">The quick brown fox...</p>\n<p class=\"text-blue-600/75\">The quick brown fox...</p>\n<p class=\"text-blue-600/50\">The quick brown fox...</p>\n<p class=\"text-blue-600/25\">The quick brown fox...</p>\n<p class=\"text-blue-600/0\">The quick brown fox...</p>\n```\n\nYou can use any value defined in your [opacity scale](https://tailwindcss.com/docs/opacity), or use arbitrary values if you need to deviate from your design tokens.\n\n```\n<p class=\"text-blue-600/[.06]\">The quick brown fox...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:text-blue-600` to only apply the `text-blue-600` utility on hover.\n\nTry hovering over the text to see the expected behaviour\n\n```\n<p class=\"text-slate-500 hover:text-blue-600\">The quick brown fox...</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:text-green-600` to apply the `text-green-600` utility at only medium screen sizes and above.\n\n```\n<p class=\"text-blue-600 md:text-green-600\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind makes the entire [default color palette](https://tailwindcss.com/docs/customizing-colors#default-color-palette) available as text colors. You can [customize your color palette](https://tailwindcss.com/docs/colors#customizing) by editing `theme.colors` or `theme.extend.colors` in your `tailwind.config.js` file.\n\nAlternatively, you can customize just your text colors by editing `theme.textColor` or `theme.extend.textColor` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `color` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<p class=\"text-[#50d71e]\">\n  <!-- ... -->\n</p>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Text Color - Tailwind CSS",
    "description": "Utilities for controlling the text color of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/border-radius",
    "markdown": "# Border Radius - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Rounded corners](#rounded-corners)\n\nUse utilities like `rounded-sm`, `rounded`, or `rounded-lg` to apply different border radius sizes to an element.\n\n```\n<div class=\"rounded ...\"></div>\n<div class=\"rounded-md ...\"></div>\n<div class=\"rounded-lg ...\"></div>\n<div class=\"rounded-full ...\"></div>\n```\n\n### [​Pill buttons](#pill-buttons)\n\nUse the `rounded-full` utility to create pill buttons.\n\n```\n<button class=\"rounded-full ...\">Save Changes</button>\n```\n\n### [​No rounding](#no-rounding)\n\nUse `rounded-none` to remove an existing border radius from an element.\n\n```\n<button class=\"rounded-none ...\">Save Changes</button>\n```\n\nThis is most commonly used to remove a border radius that was applied at a smaller breakpoint.\n\n### [​Rounding sides separately](#rounding-sides-separately)\n\nUse the `rounded-t-*`, `rounded-r-*`, `rounded-b-*`, and `rounded-l-*` utilities to only round one side of an element.\n\n```\n<div class=\"rounded-t-lg ...\"></div>\n<div class=\"rounded-r-lg ...\"></div>\n<div class=\"rounded-b-lg ...\"></div>\n<div class=\"rounded-l-lg ...\"></div>\n```\n\n### [​Rounding corners separately](#rounding-corners-separately)\n\nUse the `rounded-tl-*`, `rounded-tr-*`, `rounded-br-*`, and `rounded-bl-*` utilities to only round one corner of an element.\n\n```\n<div class=\"rounded-tl-lg ...\"></div>\n<div class=\"rounded-tr-lg ...\"></div>\n<div class=\"rounded-br-lg ...\"></div>\n<div class=\"rounded-bl-lg ...\"></div>\n```\n\n### [​Using logical properties](#using-logical-properties)\n\nUse the `rounded-s-*`, `rounded-e-*`, `rounded-ss-*`, `rounded-se-*`, `rounded-es-*`, and `rounded-ee-*` utilities to set the border radius using [logical properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties/Basic_concepts), which map to the appropriate corners based on the text direction.\n\n```\n<div dir=\"ltr\">\n  <div class=\"rounded-s-lg ...\"></div>\n<div>\n\n<div dir=\"rtl\">\n  <div class=\"rounded-s-lg ...\"></div>\n<div>\n```\n\nHere are all the available border color logical property utilities and their physical property equivalents in both LTR and RTL modes.\n\n| Class | Left-to-right | Right-to-left |\n| --- | --- | --- |\n| `rounded-s-*` | `rounded-l-*` | `rounded-r-*` |\n| `rounded-e-*` | `rounded-r-*` | `rounded-l-*` |\n| `rounded-ss-*` | `rounded-tl-*` | `rounded-tr-*` |\n| `rounded-se-*` | `rounded-tr-*` | `rounded-tl-*` |\n| `rounded-es-*` | `rounded-bl-*` | `rounded-br-*` |\n| `rounded-ee-*` | `rounded-br-*` | `rounded-bl-*` |\n\nFor more control, you can also use the [LTR and RTL modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#rtl-support) to conditionally apply specific styles depending on the current text direction.\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:rounded-lg` to only apply the `rounded-lg` utility on hover.\n\n```\n<div class=\"rounded hover:rounded-lg\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:rounded-lg` to apply the `rounded-lg` utility at only medium screen sizes and above.\n\n```\n<div class=\"rounded md:rounded-lg\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides five border radius size utilities. You can change, add, or remove these by editing the `theme.borderRadius` section of your Tailwind config.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `border-radius` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"rounded-[12px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Border Radius - Tailwind CSS",
    "description": "Utilities for controlling the border radius of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/gradient-color-stops",
    "markdown": "# Gradient Color Stops - Tailwind CSS\n\nfrom-inherit--tw-gradient-from: inherit var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(255 255 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-current--tw-gradient-from: currentColor var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(255 255 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-transparent--tw-gradient-from: transparent var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(0 0 0 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-black--tw-gradient-from: #000 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(0 0 0 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-white--tw-gradient-from: #fff var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(255 255 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-slate-50--tw-gradient-from: #f8fafc var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(248 250 252 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-slate-100--tw-gradient-from: #f1f5f9 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(241 245 249 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-slate-200--tw-gradient-from: #e2e8f0 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(226 232 240 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-slate-300--tw-gradient-from: #cbd5e1 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(203 213 225 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-slate-400--tw-gradient-from: #94a3b8 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(148 163 184 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-slate-500--tw-gradient-from: #64748b var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(100 116 139 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-slate-600--tw-gradient-from: #475569 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(71 85 105 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-slate-700--tw-gradient-from: #334155 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(51 65 85 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-slate-800--tw-gradient-from: #1e293b var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(30 41 59 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-slate-900--tw-gradient-from: #0f172a var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(15 23 42 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-slate-950--tw-gradient-from: #020617 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(2 6 23 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-gray-50--tw-gradient-from: #f9fafb var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(249 250 251 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-gray-100--tw-gradient-from: #f3f4f6 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(243 244 246 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-gray-200--tw-gradient-from: #e5e7eb var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(229 231 235 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-gray-300--tw-gradient-from: #d1d5db var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(209 213 219 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-gray-400--tw-gradient-from: #9ca3af var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(156 163 175 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-gray-500--tw-gradient-from: #6b7280 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(107 114 128 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-gray-600--tw-gradient-from: #4b5563 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(75 85 99 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-gray-700--tw-gradient-from: #374151 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(55 65 81 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-gray-800--tw-gradient-from: #1f2937 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(31 41 55 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-gray-900--tw-gradient-from: #111827 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(17 24 39 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-gray-950--tw-gradient-from: #030712 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(3 7 18 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-zinc-50--tw-gradient-from: #fafafa var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(250 250 250 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-zinc-100--tw-gradient-from: #f4f4f5 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(244 244 245 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-zinc-200--tw-gradient-from: #e4e4e7 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(228 228 231 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-zinc-300--tw-gradient-from: #d4d4d8 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(212 212 216 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-zinc-400--tw-gradient-from: #a1a1aa var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(161 161 170 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-zinc-500--tw-gradient-from: #71717a var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(113 113 122 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-zinc-600--tw-gradient-from: #52525b var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(82 82 91 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-zinc-700--tw-gradient-from: #3f3f46 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(63 63 70 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-zinc-800--tw-gradient-from: #27272a var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(39 39 42 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-zinc-900--tw-gradient-from: #18181b var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(24 24 27 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-zinc-950--tw-gradient-from: #09090b var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(9 9 11 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-neutral-50--tw-gradient-from: #fafafa var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(250 250 250 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-neutral-100--tw-gradient-from: #f5f5f5 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(245 245 245 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-neutral-200--tw-gradient-from: #e5e5e5 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(229 229 229 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-neutral-300--tw-gradient-from: #d4d4d4 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(212 212 212 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-neutral-400--tw-gradient-from: #a3a3a3 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(163 163 163 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-neutral-500--tw-gradient-from: #737373 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(115 115 115 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-neutral-600--tw-gradient-from: #525252 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(82 82 82 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-neutral-700--tw-gradient-from: #404040 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(64 64 64 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-neutral-800--tw-gradient-from: #262626 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(38 38 38 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-neutral-900--tw-gradient-from: #171717 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(23 23 23 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-neutral-950--tw-gradient-from: #0a0a0a var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(10 10 10 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-stone-50--tw-gradient-from: #fafaf9 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(250 250 249 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-stone-100--tw-gradient-from: #f5f5f4 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(245 245 244 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-stone-200--tw-gradient-from: #e7e5e4 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(231 229 228 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-stone-300--tw-gradient-from: #d6d3d1 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(214 211 209 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-stone-400--tw-gradient-from: #a8a29e var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(168 162 158 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-stone-500--tw-gradient-from: #78716c var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(120 113 108 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-stone-600--tw-gradient-from: #57534e var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(87 83 78 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-stone-700--tw-gradient-from: #44403c var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(68 64 60 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-stone-800--tw-gradient-from: #292524 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(41 37 36 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-stone-900--tw-gradient-from: #1c1917 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(28 25 23 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-stone-950--tw-gradient-from: #0c0a09 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(12 10 9 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-red-50--tw-gradient-from: #fef2f2 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(254 242 242 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-red-100--tw-gradient-from: #fee2e2 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(254 226 226 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-red-200--tw-gradient-from: #fecaca var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(254 202 202 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-red-300--tw-gradient-from: #fca5a5 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(252 165 165 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-red-400--tw-gradient-from: #f87171 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(248 113 113 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-red-500--tw-gradient-from: #ef4444 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(239 68 68 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-red-600--tw-gradient-from: #dc2626 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(220 38 38 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-red-700--tw-gradient-from: #b91c1c var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(185 28 28 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-red-800--tw-gradient-from: #991b1b var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(153 27 27 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-red-900--tw-gradient-from: #7f1d1d var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(127 29 29 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-red-950--tw-gradient-from: #450a0a var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(69 10 10 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-orange-50--tw-gradient-from: #fff7ed var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(255 247 237 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-orange-100--tw-gradient-from: #ffedd5 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(255 237 213 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-orange-200--tw-gradient-from: #fed7aa var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(254 215 170 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-orange-300--tw-gradient-from: #fdba74 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(253 186 116 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-orange-400--tw-gradient-from: #fb923c var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(251 146 60 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-orange-500--tw-gradient-from: #f97316 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(249 115 22 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-orange-600--tw-gradient-from: #ea580c var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(234 88 12 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-orange-700--tw-gradient-from: #c2410c var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(194 65 12 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-orange-800--tw-gradient-from: #9a3412 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(154 52 18 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-orange-900--tw-gradient-from: #7c2d12 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(124 45 18 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-orange-950--tw-gradient-from: #431407 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(67 20 7 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-amber-50--tw-gradient-from: #fffbeb var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(255 251 235 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-amber-100--tw-gradient-from: #fef3c7 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(254 243 199 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-amber-200--tw-gradient-from: #fde68a var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(253 230 138 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-amber-300--tw-gradient-from: #fcd34d var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(252 211 77 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-amber-400--tw-gradient-from: #fbbf24 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(251 191 36 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-amber-500--tw-gradient-from: #f59e0b var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(245 158 11 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-amber-600--tw-gradient-from: #d97706 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(217 119 6 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-amber-700--tw-gradient-from: #b45309 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(180 83 9 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-amber-800--tw-gradient-from: #92400e var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(146 64 14 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-amber-900--tw-gradient-from: #78350f var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(120 53 15 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-amber-950--tw-gradient-from: #451a03 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(69 26 3 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-yellow-50--tw-gradient-from: #fefce8 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(254 252 232 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-yellow-100--tw-gradient-from: #fef9c3 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(254 249 195 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-yellow-200--tw-gradient-from: #fef08a var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(254 240 138 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-yellow-300--tw-gradient-from: #fde047 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(253 224 71 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-yellow-400--tw-gradient-from: #facc15 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(250 204 21 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-yellow-500--tw-gradient-from: #eab308 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(234 179 8 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-yellow-600--tw-gradient-from: #ca8a04 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(202 138 4 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-yellow-700--tw-gradient-from: #a16207 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(161 98 7 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-yellow-800--tw-gradient-from: #854d0e var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(133 77 14 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-yellow-900--tw-gradient-from: #713f12 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(113 63 18 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-yellow-950--tw-gradient-from: #422006 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(66 32 6 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-lime-50--tw-gradient-from: #f7fee7 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(247 254 231 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-lime-100--tw-gradient-from: #ecfccb var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(236 252 203 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-lime-200--tw-gradient-from: #d9f99d var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(217 249 157 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-lime-300--tw-gradient-from: #bef264 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(190 242 100 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-lime-400--tw-gradient-from: #a3e635 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(163 230 53 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-lime-500--tw-gradient-from: #84cc16 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(132 204 22 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-lime-600--tw-gradient-from: #65a30d var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(101 163 13 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-lime-700--tw-gradient-from: #4d7c0f var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(77 124 15 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-lime-800--tw-gradient-from: #3f6212 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(63 98 18 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-lime-900--tw-gradient-from: #365314 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(54 83 20 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-lime-950--tw-gradient-from: #1a2e05 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(26 46 5 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-green-50--tw-gradient-from: #f0fdf4 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(240 253 244 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-green-100--tw-gradient-from: #dcfce7 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(220 252 231 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-green-200--tw-gradient-from: #bbf7d0 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(187 247 208 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-green-300--tw-gradient-from: #86efac var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(134 239 172 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-green-400--tw-gradient-from: #4ade80 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(74 222 128 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-green-500--tw-gradient-from: #22c55e var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(34 197 94 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-green-600--tw-gradient-from: #16a34a var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(22 163 74 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-green-700--tw-gradient-from: #15803d var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(21 128 61 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-green-800--tw-gradient-from: #166534 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(22 101 52 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-green-900--tw-gradient-from: #14532d var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(20 83 45 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-green-950--tw-gradient-from: #052e16 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(5 46 22 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-emerald-50--tw-gradient-from: #ecfdf5 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(236 253 245 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-emerald-100--tw-gradient-from: #d1fae5 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(209 250 229 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-emerald-200--tw-gradient-from: #a7f3d0 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(167 243 208 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-emerald-300--tw-gradient-from: #6ee7b7 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(110 231 183 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-emerald-400--tw-gradient-from: #34d399 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(52 211 153 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-emerald-500--tw-gradient-from: #10b981 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(16 185 129 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-emerald-600--tw-gradient-from: #059669 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(5 150 105 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-emerald-700--tw-gradient-from: #047857 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(4 120 87 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-emerald-800--tw-gradient-from: #065f46 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(6 95 70 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-emerald-900--tw-gradient-from: #064e3b var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(6 78 59 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-emerald-950--tw-gradient-from: #022c22 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(2 44 34 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-teal-50--tw-gradient-from: #f0fdfa var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(240 253 250 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-teal-100--tw-gradient-from: #ccfbf1 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(204 251 241 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-teal-200--tw-gradient-from: #99f6e4 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(153 246 228 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-teal-300--tw-gradient-from: #5eead4 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(94 234 212 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-teal-400--tw-gradient-from: #2dd4bf var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(45 212 191 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-teal-500--tw-gradient-from: #14b8a6 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(20 184 166 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-teal-600--tw-gradient-from: #0d9488 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(13 148 136 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-teal-700--tw-gradient-from: #0f766e var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(15 118 110 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-teal-800--tw-gradient-from: #115e59 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(17 94 89 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-teal-900--tw-gradient-from: #134e4a var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(19 78 74 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-teal-950--tw-gradient-from: #042f2e var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(4 47 46 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-cyan-50--tw-gradient-from: #ecfeff var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(236 254 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-cyan-100--tw-gradient-from: #cffafe var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(207 250 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-cyan-200--tw-gradient-from: #a5f3fc var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(165 243 252 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-cyan-300--tw-gradient-from: #67e8f9 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(103 232 249 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-cyan-400--tw-gradient-from: #22d3ee var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(34 211 238 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-cyan-500--tw-gradient-from: #06b6d4 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(6 182 212 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-cyan-600--tw-gradient-from: #0891b2 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(8 145 178 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-cyan-700--tw-gradient-from: #0e7490 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(14 116 144 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-cyan-800--tw-gradient-from: #155e75 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(21 94 117 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-cyan-900--tw-gradient-from: #164e63 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(22 78 99 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-cyan-950--tw-gradient-from: #083344 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(8 51 68 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-sky-50--tw-gradient-from: #f0f9ff var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(240 249 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-sky-100--tw-gradient-from: #e0f2fe var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(224 242 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-sky-200--tw-gradient-from: #bae6fd var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(186 230 253 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-sky-300--tw-gradient-from: #7dd3fc var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(125 211 252 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-sky-400--tw-gradient-from: #38bdf8 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(56 189 248 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-sky-500--tw-gradient-from: #0ea5e9 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(14 165 233 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-sky-600--tw-gradient-from: #0284c7 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(2 132 199 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-sky-700--tw-gradient-from: #0369a1 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(3 105 161 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-sky-800--tw-gradient-from: #075985 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(7 89 133 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-sky-900--tw-gradient-from: #0c4a6e var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(12 74 110 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-sky-950--tw-gradient-from: #082f49 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(8 47 73 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-blue-50--tw-gradient-from: #eff6ff var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(239 246 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-blue-100--tw-gradient-from: #dbeafe var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(219 234 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-blue-200--tw-gradient-from: #bfdbfe var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(191 219 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-blue-300--tw-gradient-from: #93c5fd var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(147 197 253 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-blue-400--tw-gradient-from: #60a5fa var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(96 165 250 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-blue-500--tw-gradient-from: #3b82f6 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(59 130 246 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-blue-600--tw-gradient-from: #2563eb var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(37 99 235 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-blue-700--tw-gradient-from: #1d4ed8 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(29 78 216 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-blue-800--tw-gradient-from: #1e40af var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(30 64 175 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-blue-900--tw-gradient-from: #1e3a8a var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(30 58 138 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-blue-950--tw-gradient-from: #172554 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(23 37 84 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-indigo-50--tw-gradient-from: #eef2ff var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(238 242 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-indigo-100--tw-gradient-from: #e0e7ff var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(224 231 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-indigo-200--tw-gradient-from: #c7d2fe var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(199 210 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-indigo-300--tw-gradient-from: #a5b4fc var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(165 180 252 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-indigo-400--tw-gradient-from: #818cf8 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(129 140 248 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-indigo-500--tw-gradient-from: #6366f1 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(99 102 241 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-indigo-600--tw-gradient-from: #4f46e5 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(79 70 229 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-indigo-700--tw-gradient-from: #4338ca var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(67 56 202 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-indigo-800--tw-gradient-from: #3730a3 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(55 48 163 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-indigo-900--tw-gradient-from: #312e81 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(49 46 129 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-indigo-950--tw-gradient-from: #1e1b4b var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(30 27 75 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-violet-50--tw-gradient-from: #f5f3ff var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(245 243 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-violet-100--tw-gradient-from: #ede9fe var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(237 233 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-violet-200--tw-gradient-from: #ddd6fe var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(221 214 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-violet-300--tw-gradient-from: #c4b5fd var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(196 181 253 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-violet-400--tw-gradient-from: #a78bfa var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(167 139 250 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-violet-500--tw-gradient-from: #8b5cf6 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(139 92 246 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-violet-600--tw-gradient-from: #7c3aed var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(124 58 237 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-violet-700--tw-gradient-from: #6d28d9 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(109 40 217 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-violet-800--tw-gradient-from: #5b21b6 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(91 33 182 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-violet-900--tw-gradient-from: #4c1d95 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(76 29 149 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-violet-950--tw-gradient-from: #2e1065 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(46 16 101 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-purple-50--tw-gradient-from: #faf5ff var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(250 245 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-purple-100--tw-gradient-from: #f3e8ff var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(243 232 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-purple-200--tw-gradient-from: #e9d5ff var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(233 213 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-purple-300--tw-gradient-from: #d8b4fe var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(216 180 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-purple-400--tw-gradient-from: #c084fc var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(192 132 252 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-purple-500--tw-gradient-from: #a855f7 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(168 85 247 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-purple-600--tw-gradient-from: #9333ea var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(147 51 234 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-purple-700--tw-gradient-from: #7e22ce var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(126 34 206 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-purple-800--tw-gradient-from: #6b21a8 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(107 33 168 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-purple-900--tw-gradient-from: #581c87 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(88 28 135 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-purple-950--tw-gradient-from: #3b0764 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(59 7 100 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-fuchsia-50--tw-gradient-from: #fdf4ff var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(253 244 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-fuchsia-100--tw-gradient-from: #fae8ff var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(250 232 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-fuchsia-200--tw-gradient-from: #f5d0fe var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(245 208 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-fuchsia-300--tw-gradient-from: #f0abfc var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(240 171 252 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-fuchsia-400--tw-gradient-from: #e879f9 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(232 121 249 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-fuchsia-500--tw-gradient-from: #d946ef var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(217 70 239 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-fuchsia-600--tw-gradient-from: #c026d3 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(192 38 211 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-fuchsia-700--tw-gradient-from: #a21caf var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(162 28 175 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-fuchsia-800--tw-gradient-from: #86198f var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(134 25 143 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-fuchsia-900--tw-gradient-from: #701a75 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(112 26 117 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-fuchsia-950--tw-gradient-from: #4a044e var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(74 4 78 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-pink-50--tw-gradient-from: #fdf2f8 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(253 242 248 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-pink-100--tw-gradient-from: #fce7f3 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(252 231 243 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-pink-200--tw-gradient-from: #fbcfe8 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(251 207 232 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-pink-300--tw-gradient-from: #f9a8d4 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(249 168 212 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-pink-400--tw-gradient-from: #f472b6 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(244 114 182 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-pink-500--tw-gradient-from: #ec4899 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(236 72 153 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-pink-600--tw-gradient-from: #db2777 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(219 39 119 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-pink-700--tw-gradient-from: #be185d var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(190 24 93 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-pink-800--tw-gradient-from: #9d174d var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(157 23 77 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-pink-900--tw-gradient-from: #831843 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(131 24 67 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-pink-950--tw-gradient-from: #500724 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(80 7 36 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-rose-50--tw-gradient-from: #fff1f2 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(255 241 242 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-rose-100--tw-gradient-from: #ffe4e6 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(255 228 230 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-rose-200--tw-gradient-from: #fecdd3 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(254 205 211 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-rose-300--tw-gradient-from: #fda4af var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(253 164 175 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-rose-400--tw-gradient-from: #fb7185 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(251 113 133 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-rose-500--tw-gradient-from: #f43f5e var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(244 63 94 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-rose-600--tw-gradient-from: #e11d48 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(225 29 72 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-rose-700--tw-gradient-from: #be123c var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(190 18 60 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-rose-800--tw-gradient-from: #9f1239 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(159 18 57 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-rose-900--tw-gradient-from: #881337 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(136 19 55 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-rose-950--tw-gradient-from: #4c0519 var(--tw-gradient-from-position); \\--tw-gradient-to: rgb(76 5 25 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to); from-0%--tw-gradient-from-position: 0%; from-5%--tw-gradient-from-position: 5%; from-10%--tw-gradient-from-position: 10%; from-15%--tw-gradient-from-position: 15%; from-20%--tw-gradient-from-position: 20%; from-25%--tw-gradient-from-position: 25%; from-30%--tw-gradient-from-position: 30%; from-35%--tw-gradient-from-position: 35%; from-40%--tw-gradient-from-position: 40%; from-45%--tw-gradient-from-position: 45%; from-50%--tw-gradient-from-position: 50%; from-55%--tw-gradient-from-position: 55%; from-60%--tw-gradient-from-position: 60%; from-65%--tw-gradient-from-position: 65%; from-70%--tw-gradient-from-position: 70%; from-75%--tw-gradient-from-position: 75%; from-80%--tw-gradient-from-position: 80%; from-85%--tw-gradient-from-position: 85%; from-90%--tw-gradient-from-position: 90%; from-95%--tw-gradient-from-position: 95%; from-100%--tw-gradient-from-position: 100%; via-inherit--tw-gradient-to: rgb(255 255 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), inherit var(--tw-gradient-via-position), var(--tw-gradient-to); via-current--tw-gradient-to: rgb(255 255 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), currentColor var(--tw-gradient-via-position), var(--tw-gradient-to); via-transparent--tw-gradient-to: rgb(0 0 0 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), transparent var(--tw-gradient-via-position), var(--tw-gradient-to); via-black--tw-gradient-to: rgb(0 0 0 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #000 var(--tw-gradient-via-position), var(--tw-gradient-to); via-white--tw-gradient-to: rgb(255 255 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fff var(--tw-gradient-via-position), var(--tw-gradient-to); via-slate-50--tw-gradient-to: rgb(248 250 252 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f8fafc var(--tw-gradient-via-position), var(--tw-gradient-to); via-slate-100--tw-gradient-to: rgb(241 245 249 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f1f5f9 var(--tw-gradient-via-position), var(--tw-gradient-to); via-slate-200--tw-gradient-to: rgb(226 232 240 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #e2e8f0 var(--tw-gradient-via-position), var(--tw-gradient-to); via-slate-300--tw-gradient-to: rgb(203 213 225 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #cbd5e1 var(--tw-gradient-via-position), var(--tw-gradient-to); via-slate-400--tw-gradient-to: rgb(148 163 184 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #94a3b8 var(--tw-gradient-via-position), var(--tw-gradient-to); via-slate-500--tw-gradient-to: rgb(100 116 139 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #64748b var(--tw-gradient-via-position), var(--tw-gradient-to); via-slate-600--tw-gradient-to: rgb(71 85 105 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #475569 var(--tw-gradient-via-position), var(--tw-gradient-to); via-slate-700--tw-gradient-to: rgb(51 65 85 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #334155 var(--tw-gradient-via-position), var(--tw-gradient-to); via-slate-800--tw-gradient-to: rgb(30 41 59 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #1e293b var(--tw-gradient-via-position), var(--tw-gradient-to); via-slate-900--tw-gradient-to: rgb(15 23 42 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #0f172a var(--tw-gradient-via-position), var(--tw-gradient-to); via-slate-950--tw-gradient-to: rgb(2 6 23 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #020617 var(--tw-gradient-via-position), var(--tw-gradient-to); via-gray-50--tw-gradient-to: rgb(249 250 251 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f9fafb var(--tw-gradient-via-position), var(--tw-gradient-to); via-gray-100--tw-gradient-to: rgb(243 244 246 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f3f4f6 var(--tw-gradient-via-position), var(--tw-gradient-to); via-gray-200--tw-gradient-to: rgb(229 231 235 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #e5e7eb var(--tw-gradient-via-position), var(--tw-gradient-to); via-gray-300--tw-gradient-to: rgb(209 213 219 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #d1d5db var(--tw-gradient-via-position), var(--tw-gradient-to); via-gray-400--tw-gradient-to: rgb(156 163 175 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #9ca3af var(--tw-gradient-via-position), var(--tw-gradient-to); via-gray-500--tw-gradient-to: rgb(107 114 128 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #6b7280 var(--tw-gradient-via-position), var(--tw-gradient-to); via-gray-600--tw-gradient-to: rgb(75 85 99 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #4b5563 var(--tw-gradient-via-position), var(--tw-gradient-to); via-gray-700--tw-gradient-to: rgb(55 65 81 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #374151 var(--tw-gradient-via-position), var(--tw-gradient-to); via-gray-800--tw-gradient-to: rgb(31 41 55 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #1f2937 var(--tw-gradient-via-position), var(--tw-gradient-to); via-gray-900--tw-gradient-to: rgb(17 24 39 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #111827 var(--tw-gradient-via-position), var(--tw-gradient-to); via-gray-950--tw-gradient-to: rgb(3 7 18 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #030712 var(--tw-gradient-via-position), var(--tw-gradient-to); via-zinc-50--tw-gradient-to: rgb(250 250 250 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fafafa var(--tw-gradient-via-position), var(--tw-gradient-to); via-zinc-100--tw-gradient-to: rgb(244 244 245 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f4f4f5 var(--tw-gradient-via-position), var(--tw-gradient-to); via-zinc-200--tw-gradient-to: rgb(228 228 231 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #e4e4e7 var(--tw-gradient-via-position), var(--tw-gradient-to); via-zinc-300--tw-gradient-to: rgb(212 212 216 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #d4d4d8 var(--tw-gradient-via-position), var(--tw-gradient-to); via-zinc-400--tw-gradient-to: rgb(161 161 170 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #a1a1aa var(--tw-gradient-via-position), var(--tw-gradient-to); via-zinc-500--tw-gradient-to: rgb(113 113 122 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #71717a var(--tw-gradient-via-position), var(--tw-gradient-to); via-zinc-600--tw-gradient-to: rgb(82 82 91 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #52525b var(--tw-gradient-via-position), var(--tw-gradient-to); via-zinc-700--tw-gradient-to: rgb(63 63 70 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #3f3f46 var(--tw-gradient-via-position), var(--tw-gradient-to); via-zinc-800--tw-gradient-to: rgb(39 39 42 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #27272a var(--tw-gradient-via-position), var(--tw-gradient-to); via-zinc-900--tw-gradient-to: rgb(24 24 27 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #18181b var(--tw-gradient-via-position), var(--tw-gradient-to); via-zinc-950--tw-gradient-to: rgb(9 9 11 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #09090b var(--tw-gradient-via-position), var(--tw-gradient-to); via-neutral-50--tw-gradient-to: rgb(250 250 250 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fafafa var(--tw-gradient-via-position), var(--tw-gradient-to); via-neutral-100--tw-gradient-to: rgb(245 245 245 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f5f5f5 var(--tw-gradient-via-position), var(--tw-gradient-to); via-neutral-200--tw-gradient-to: rgb(229 229 229 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #e5e5e5 var(--tw-gradient-via-position), var(--tw-gradient-to); via-neutral-300--tw-gradient-to: rgb(212 212 212 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #d4d4d4 var(--tw-gradient-via-position), var(--tw-gradient-to); via-neutral-400--tw-gradient-to: rgb(163 163 163 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #a3a3a3 var(--tw-gradient-via-position), var(--tw-gradient-to); via-neutral-500--tw-gradient-to: rgb(115 115 115 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #737373 var(--tw-gradient-via-position), var(--tw-gradient-to); via-neutral-600--tw-gradient-to: rgb(82 82 82 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #525252 var(--tw-gradient-via-position), var(--tw-gradient-to); via-neutral-700--tw-gradient-to: rgb(64 64 64 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #404040 var(--tw-gradient-via-position), var(--tw-gradient-to); via-neutral-800--tw-gradient-to: rgb(38 38 38 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #262626 var(--tw-gradient-via-position), var(--tw-gradient-to); via-neutral-900--tw-gradient-to: rgb(23 23 23 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #171717 var(--tw-gradient-via-position), var(--tw-gradient-to); via-neutral-950--tw-gradient-to: rgb(10 10 10 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #0a0a0a var(--tw-gradient-via-position), var(--tw-gradient-to); via-stone-50--tw-gradient-to: rgb(250 250 249 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fafaf9 var(--tw-gradient-via-position), var(--tw-gradient-to); via-stone-100--tw-gradient-to: rgb(245 245 244 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f5f5f4 var(--tw-gradient-via-position), var(--tw-gradient-to); via-stone-200--tw-gradient-to: rgb(231 229 228 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #e7e5e4 var(--tw-gradient-via-position), var(--tw-gradient-to); via-stone-300--tw-gradient-to: rgb(214 211 209 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #d6d3d1 var(--tw-gradient-via-position), var(--tw-gradient-to); via-stone-400--tw-gradient-to: rgb(168 162 158 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #a8a29e var(--tw-gradient-via-position), var(--tw-gradient-to); via-stone-500--tw-gradient-to: rgb(120 113 108 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #78716c var(--tw-gradient-via-position), var(--tw-gradient-to); via-stone-600--tw-gradient-to: rgb(87 83 78 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #57534e var(--tw-gradient-via-position), var(--tw-gradient-to); via-stone-700--tw-gradient-to: rgb(68 64 60 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #44403c var(--tw-gradient-via-position), var(--tw-gradient-to); via-stone-800--tw-gradient-to: rgb(41 37 36 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #292524 var(--tw-gradient-via-position), var(--tw-gradient-to); via-stone-900--tw-gradient-to: rgb(28 25 23 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #1c1917 var(--tw-gradient-via-position), var(--tw-gradient-to); via-stone-950--tw-gradient-to: rgb(12 10 9 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #0c0a09 var(--tw-gradient-via-position), var(--tw-gradient-to); via-red-50--tw-gradient-to: rgb(254 242 242 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fef2f2 var(--tw-gradient-via-position), var(--tw-gradient-to); via-red-100--tw-gradient-to: rgb(254 226 226 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fee2e2 var(--tw-gradient-via-position), var(--tw-gradient-to); via-red-200--tw-gradient-to: rgb(254 202 202 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fecaca var(--tw-gradient-via-position), var(--tw-gradient-to); via-red-300--tw-gradient-to: rgb(252 165 165 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fca5a5 var(--tw-gradient-via-position), var(--tw-gradient-to); via-red-400--tw-gradient-to: rgb(248 113 113 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f87171 var(--tw-gradient-via-position), var(--tw-gradient-to); via-red-500--tw-gradient-to: rgb(239 68 68 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #ef4444 var(--tw-gradient-via-position), var(--tw-gradient-to); via-red-600--tw-gradient-to: rgb(220 38 38 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #dc2626 var(--tw-gradient-via-position), var(--tw-gradient-to); via-red-700--tw-gradient-to: rgb(185 28 28 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #b91c1c var(--tw-gradient-via-position), var(--tw-gradient-to); via-red-800--tw-gradient-to: rgb(153 27 27 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #991b1b var(--tw-gradient-via-position), var(--tw-gradient-to); via-red-900--tw-gradient-to: rgb(127 29 29 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #7f1d1d var(--tw-gradient-via-position), var(--tw-gradient-to); via-red-950--tw-gradient-to: rgb(69 10 10 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #450a0a var(--tw-gradient-via-position), var(--tw-gradient-to); via-orange-50--tw-gradient-to: rgb(255 247 237 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fff7ed var(--tw-gradient-via-position), var(--tw-gradient-to); via-orange-100--tw-gradient-to: rgb(255 237 213 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #ffedd5 var(--tw-gradient-via-position), var(--tw-gradient-to); via-orange-200--tw-gradient-to: rgb(254 215 170 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fed7aa var(--tw-gradient-via-position), var(--tw-gradient-to); via-orange-300--tw-gradient-to: rgb(253 186 116 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fdba74 var(--tw-gradient-via-position), var(--tw-gradient-to); via-orange-400--tw-gradient-to: rgb(251 146 60 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fb923c var(--tw-gradient-via-position), var(--tw-gradient-to); via-orange-500--tw-gradient-to: rgb(249 115 22 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f97316 var(--tw-gradient-via-position), var(--tw-gradient-to); via-orange-600--tw-gradient-to: rgb(234 88 12 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #ea580c var(--tw-gradient-via-position), var(--tw-gradient-to); via-orange-700--tw-gradient-to: rgb(194 65 12 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #c2410c var(--tw-gradient-via-position), var(--tw-gradient-to); via-orange-800--tw-gradient-to: rgb(154 52 18 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #9a3412 var(--tw-gradient-via-position), var(--tw-gradient-to); via-orange-900--tw-gradient-to: rgb(124 45 18 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #7c2d12 var(--tw-gradient-via-position), var(--tw-gradient-to); via-orange-950--tw-gradient-to: rgb(67 20 7 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #431407 var(--tw-gradient-via-position), var(--tw-gradient-to); via-amber-50--tw-gradient-to: rgb(255 251 235 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fffbeb var(--tw-gradient-via-position), var(--tw-gradient-to); via-amber-100--tw-gradient-to: rgb(254 243 199 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fef3c7 var(--tw-gradient-via-position), var(--tw-gradient-to); via-amber-200--tw-gradient-to: rgb(253 230 138 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fde68a var(--tw-gradient-via-position), var(--tw-gradient-to); via-amber-300--tw-gradient-to: rgb(252 211 77 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fcd34d var(--tw-gradient-via-position), var(--tw-gradient-to); via-amber-400--tw-gradient-to: rgb(251 191 36 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fbbf24 var(--tw-gradient-via-position), var(--tw-gradient-to); via-amber-500--tw-gradient-to: rgb(245 158 11 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f59e0b var(--tw-gradient-via-position), var(--tw-gradient-to); via-amber-600--tw-gradient-to: rgb(217 119 6 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #d97706 var(--tw-gradient-via-position), var(--tw-gradient-to); via-amber-700--tw-gradient-to: rgb(180 83 9 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #b45309 var(--tw-gradient-via-position), var(--tw-gradient-to); via-amber-800--tw-gradient-to: rgb(146 64 14 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #92400e var(--tw-gradient-via-position), var(--tw-gradient-to); via-amber-900--tw-gradient-to: rgb(120 53 15 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #78350f var(--tw-gradient-via-position), var(--tw-gradient-to); via-amber-950--tw-gradient-to: rgb(69 26 3 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #451a03 var(--tw-gradient-via-position), var(--tw-gradient-to); via-yellow-50--tw-gradient-to: rgb(254 252 232 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fefce8 var(--tw-gradient-via-position), var(--tw-gradient-to); via-yellow-100--tw-gradient-to: rgb(254 249 195 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fef9c3 var(--tw-gradient-via-position), var(--tw-gradient-to); via-yellow-200--tw-gradient-to: rgb(254 240 138 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fef08a var(--tw-gradient-via-position), var(--tw-gradient-to); via-yellow-300--tw-gradient-to: rgb(253 224 71 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fde047 var(--tw-gradient-via-position), var(--tw-gradient-to); via-yellow-400--tw-gradient-to: rgb(250 204 21 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #facc15 var(--tw-gradient-via-position), var(--tw-gradient-to); via-yellow-500--tw-gradient-to: rgb(234 179 8 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #eab308 var(--tw-gradient-via-position), var(--tw-gradient-to); via-yellow-600--tw-gradient-to: rgb(202 138 4 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #ca8a04 var(--tw-gradient-via-position), var(--tw-gradient-to); via-yellow-700--tw-gradient-to: rgb(161 98 7 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #a16207 var(--tw-gradient-via-position), var(--tw-gradient-to); via-yellow-800--tw-gradient-to: rgb(133 77 14 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #854d0e var(--tw-gradient-via-position), var(--tw-gradient-to); via-yellow-900--tw-gradient-to: rgb(113 63 18 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #713f12 var(--tw-gradient-via-position), var(--tw-gradient-to); via-yellow-950--tw-gradient-to: rgb(66 32 6 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #422006 var(--tw-gradient-via-position), var(--tw-gradient-to); via-lime-50--tw-gradient-to: rgb(247 254 231 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f7fee7 var(--tw-gradient-via-position), var(--tw-gradient-to); via-lime-100--tw-gradient-to: rgb(236 252 203 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #ecfccb var(--tw-gradient-via-position), var(--tw-gradient-to); via-lime-200--tw-gradient-to: rgb(217 249 157 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #d9f99d var(--tw-gradient-via-position), var(--tw-gradient-to); via-lime-300--tw-gradient-to: rgb(190 242 100 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #bef264 var(--tw-gradient-via-position), var(--tw-gradient-to); via-lime-400--tw-gradient-to: rgb(163 230 53 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #a3e635 var(--tw-gradient-via-position), var(--tw-gradient-to); via-lime-500--tw-gradient-to: rgb(132 204 22 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #84cc16 var(--tw-gradient-via-position), var(--tw-gradient-to); via-lime-600--tw-gradient-to: rgb(101 163 13 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #65a30d var(--tw-gradient-via-position), var(--tw-gradient-to); via-lime-700--tw-gradient-to: rgb(77 124 15 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #4d7c0f var(--tw-gradient-via-position), var(--tw-gradient-to); via-lime-800--tw-gradient-to: rgb(63 98 18 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #3f6212 var(--tw-gradient-via-position), var(--tw-gradient-to); via-lime-900--tw-gradient-to: rgb(54 83 20 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #365314 var(--tw-gradient-via-position), var(--tw-gradient-to); via-lime-950--tw-gradient-to: rgb(26 46 5 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #1a2e05 var(--tw-gradient-via-position), var(--tw-gradient-to); via-green-50--tw-gradient-to: rgb(240 253 244 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f0fdf4 var(--tw-gradient-via-position), var(--tw-gradient-to); via-green-100--tw-gradient-to: rgb(220 252 231 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #dcfce7 var(--tw-gradient-via-position), var(--tw-gradient-to); via-green-200--tw-gradient-to: rgb(187 247 208 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #bbf7d0 var(--tw-gradient-via-position), var(--tw-gradient-to); via-green-300--tw-gradient-to: rgb(134 239 172 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #86efac var(--tw-gradient-via-position), var(--tw-gradient-to); via-green-400--tw-gradient-to: rgb(74 222 128 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #4ade80 var(--tw-gradient-via-position), var(--tw-gradient-to); via-green-500--tw-gradient-to: rgb(34 197 94 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #22c55e var(--tw-gradient-via-position), var(--tw-gradient-to); via-green-600--tw-gradient-to: rgb(22 163 74 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #16a34a var(--tw-gradient-via-position), var(--tw-gradient-to); via-green-700--tw-gradient-to: rgb(21 128 61 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #15803d var(--tw-gradient-via-position), var(--tw-gradient-to); via-green-800--tw-gradient-to: rgb(22 101 52 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #166534 var(--tw-gradient-via-position), var(--tw-gradient-to); via-green-900--tw-gradient-to: rgb(20 83 45 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #14532d var(--tw-gradient-via-position), var(--tw-gradient-to); via-green-950--tw-gradient-to: rgb(5 46 22 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #052e16 var(--tw-gradient-via-position), var(--tw-gradient-to); via-emerald-50--tw-gradient-to: rgb(236 253 245 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #ecfdf5 var(--tw-gradient-via-position), var(--tw-gradient-to); via-emerald-100--tw-gradient-to: rgb(209 250 229 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #d1fae5 var(--tw-gradient-via-position), var(--tw-gradient-to); via-emerald-200--tw-gradient-to: rgb(167 243 208 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #a7f3d0 var(--tw-gradient-via-position), var(--tw-gradient-to); via-emerald-300--tw-gradient-to: rgb(110 231 183 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #6ee7b7 var(--tw-gradient-via-position), var(--tw-gradient-to); via-emerald-400--tw-gradient-to: rgb(52 211 153 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #34d399 var(--tw-gradient-via-position), var(--tw-gradient-to); via-emerald-500--tw-gradient-to: rgb(16 185 129 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #10b981 var(--tw-gradient-via-position), var(--tw-gradient-to); via-emerald-600--tw-gradient-to: rgb(5 150 105 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #059669 var(--tw-gradient-via-position), var(--tw-gradient-to); via-emerald-700--tw-gradient-to: rgb(4 120 87 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #047857 var(--tw-gradient-via-position), var(--tw-gradient-to); via-emerald-800--tw-gradient-to: rgb(6 95 70 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #065f46 var(--tw-gradient-via-position), var(--tw-gradient-to); via-emerald-900--tw-gradient-to: rgb(6 78 59 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #064e3b var(--tw-gradient-via-position), var(--tw-gradient-to); via-emerald-950--tw-gradient-to: rgb(2 44 34 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #022c22 var(--tw-gradient-via-position), var(--tw-gradient-to); via-teal-50--tw-gradient-to: rgb(240 253 250 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f0fdfa var(--tw-gradient-via-position), var(--tw-gradient-to); via-teal-100--tw-gradient-to: rgb(204 251 241 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #ccfbf1 var(--tw-gradient-via-position), var(--tw-gradient-to); via-teal-200--tw-gradient-to: rgb(153 246 228 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #99f6e4 var(--tw-gradient-via-position), var(--tw-gradient-to); via-teal-300--tw-gradient-to: rgb(94 234 212 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #5eead4 var(--tw-gradient-via-position), var(--tw-gradient-to); via-teal-400--tw-gradient-to: rgb(45 212 191 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #2dd4bf var(--tw-gradient-via-position), var(--tw-gradient-to); via-teal-500--tw-gradient-to: rgb(20 184 166 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #14b8a6 var(--tw-gradient-via-position), var(--tw-gradient-to); via-teal-600--tw-gradient-to: rgb(13 148 136 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #0d9488 var(--tw-gradient-via-position), var(--tw-gradient-to); via-teal-700--tw-gradient-to: rgb(15 118 110 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #0f766e var(--tw-gradient-via-position), var(--tw-gradient-to); via-teal-800--tw-gradient-to: rgb(17 94 89 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #115e59 var(--tw-gradient-via-position), var(--tw-gradient-to); via-teal-900--tw-gradient-to: rgb(19 78 74 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #134e4a var(--tw-gradient-via-position), var(--tw-gradient-to); via-teal-950--tw-gradient-to: rgb(4 47 46 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #042f2e var(--tw-gradient-via-position), var(--tw-gradient-to); via-cyan-50--tw-gradient-to: rgb(236 254 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #ecfeff var(--tw-gradient-via-position), var(--tw-gradient-to); via-cyan-100--tw-gradient-to: rgb(207 250 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #cffafe var(--tw-gradient-via-position), var(--tw-gradient-to); via-cyan-200--tw-gradient-to: rgb(165 243 252 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #a5f3fc var(--tw-gradient-via-position), var(--tw-gradient-to); via-cyan-300--tw-gradient-to: rgb(103 232 249 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #67e8f9 var(--tw-gradient-via-position), var(--tw-gradient-to); via-cyan-400--tw-gradient-to: rgb(34 211 238 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #22d3ee var(--tw-gradient-via-position), var(--tw-gradient-to); via-cyan-500--tw-gradient-to: rgb(6 182 212 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #06b6d4 var(--tw-gradient-via-position), var(--tw-gradient-to); via-cyan-600--tw-gradient-to: rgb(8 145 178 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #0891b2 var(--tw-gradient-via-position), var(--tw-gradient-to); via-cyan-700--tw-gradient-to: rgb(14 116 144 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #0e7490 var(--tw-gradient-via-position), var(--tw-gradient-to); via-cyan-800--tw-gradient-to: rgb(21 94 117 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #155e75 var(--tw-gradient-via-position), var(--tw-gradient-to); via-cyan-900--tw-gradient-to: rgb(22 78 99 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #164e63 var(--tw-gradient-via-position), var(--tw-gradient-to); via-cyan-950--tw-gradient-to: rgb(8 51 68 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #083344 var(--tw-gradient-via-position), var(--tw-gradient-to); via-sky-50--tw-gradient-to: rgb(240 249 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f0f9ff var(--tw-gradient-via-position), var(--tw-gradient-to); via-sky-100--tw-gradient-to: rgb(224 242 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #e0f2fe var(--tw-gradient-via-position), var(--tw-gradient-to); via-sky-200--tw-gradient-to: rgb(186 230 253 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #bae6fd var(--tw-gradient-via-position), var(--tw-gradient-to); via-sky-300--tw-gradient-to: rgb(125 211 252 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #7dd3fc var(--tw-gradient-via-position), var(--tw-gradient-to); via-sky-400--tw-gradient-to: rgb(56 189 248 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #38bdf8 var(--tw-gradient-via-position), var(--tw-gradient-to); via-sky-500--tw-gradient-to: rgb(14 165 233 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #0ea5e9 var(--tw-gradient-via-position), var(--tw-gradient-to); via-sky-600--tw-gradient-to: rgb(2 132 199 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #0284c7 var(--tw-gradient-via-position), var(--tw-gradient-to); via-sky-700--tw-gradient-to: rgb(3 105 161 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #0369a1 var(--tw-gradient-via-position), var(--tw-gradient-to); via-sky-800--tw-gradient-to: rgb(7 89 133 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #075985 var(--tw-gradient-via-position), var(--tw-gradient-to); via-sky-900--tw-gradient-to: rgb(12 74 110 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #0c4a6e var(--tw-gradient-via-position), var(--tw-gradient-to); via-sky-950--tw-gradient-to: rgb(8 47 73 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #082f49 var(--tw-gradient-via-position), var(--tw-gradient-to); via-blue-50--tw-gradient-to: rgb(239 246 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #eff6ff var(--tw-gradient-via-position), var(--tw-gradient-to); via-blue-100--tw-gradient-to: rgb(219 234 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #dbeafe var(--tw-gradient-via-position), var(--tw-gradient-to); via-blue-200--tw-gradient-to: rgb(191 219 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #bfdbfe var(--tw-gradient-via-position), var(--tw-gradient-to); via-blue-300--tw-gradient-to: rgb(147 197 253 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #93c5fd var(--tw-gradient-via-position), var(--tw-gradient-to); via-blue-400--tw-gradient-to: rgb(96 165 250 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #60a5fa var(--tw-gradient-via-position), var(--tw-gradient-to); via-blue-500--tw-gradient-to: rgb(59 130 246 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #3b82f6 var(--tw-gradient-via-position), var(--tw-gradient-to); via-blue-600--tw-gradient-to: rgb(37 99 235 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #2563eb var(--tw-gradient-via-position), var(--tw-gradient-to); via-blue-700--tw-gradient-to: rgb(29 78 216 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #1d4ed8 var(--tw-gradient-via-position), var(--tw-gradient-to); via-blue-800--tw-gradient-to: rgb(30 64 175 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #1e40af var(--tw-gradient-via-position), var(--tw-gradient-to); via-blue-900--tw-gradient-to: rgb(30 58 138 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #1e3a8a var(--tw-gradient-via-position), var(--tw-gradient-to); via-blue-950--tw-gradient-to: rgb(23 37 84 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #172554 var(--tw-gradient-via-position), var(--tw-gradient-to); via-indigo-50--tw-gradient-to: rgb(238 242 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #eef2ff var(--tw-gradient-via-position), var(--tw-gradient-to); via-indigo-100--tw-gradient-to: rgb(224 231 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #e0e7ff var(--tw-gradient-via-position), var(--tw-gradient-to); via-indigo-200--tw-gradient-to: rgb(199 210 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #c7d2fe var(--tw-gradient-via-position), var(--tw-gradient-to); via-indigo-300--tw-gradient-to: rgb(165 180 252 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #a5b4fc var(--tw-gradient-via-position), var(--tw-gradient-to); via-indigo-400--tw-gradient-to: rgb(129 140 248 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #818cf8 var(--tw-gradient-via-position), var(--tw-gradient-to); via-indigo-500--tw-gradient-to: rgb(99 102 241 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #6366f1 var(--tw-gradient-via-position), var(--tw-gradient-to); via-indigo-600--tw-gradient-to: rgb(79 70 229 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #4f46e5 var(--tw-gradient-via-position), var(--tw-gradient-to); via-indigo-700--tw-gradient-to: rgb(67 56 202 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #4338ca var(--tw-gradient-via-position), var(--tw-gradient-to); via-indigo-800--tw-gradient-to: rgb(55 48 163 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #3730a3 var(--tw-gradient-via-position), var(--tw-gradient-to); via-indigo-900--tw-gradient-to: rgb(49 46 129 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #312e81 var(--tw-gradient-via-position), var(--tw-gradient-to); via-indigo-950--tw-gradient-to: rgb(30 27 75 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #1e1b4b var(--tw-gradient-via-position), var(--tw-gradient-to); via-violet-50--tw-gradient-to: rgb(245 243 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f5f3ff var(--tw-gradient-via-position), var(--tw-gradient-to); via-violet-100--tw-gradient-to: rgb(237 233 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #ede9fe var(--tw-gradient-via-position), var(--tw-gradient-to); via-violet-200--tw-gradient-to: rgb(221 214 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #ddd6fe var(--tw-gradient-via-position), var(--tw-gradient-to); via-violet-300--tw-gradient-to: rgb(196 181 253 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #c4b5fd var(--tw-gradient-via-position), var(--tw-gradient-to); via-violet-400--tw-gradient-to: rgb(167 139 250 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #a78bfa var(--tw-gradient-via-position), var(--tw-gradient-to); via-violet-500--tw-gradient-to: rgb(139 92 246 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #8b5cf6 var(--tw-gradient-via-position), var(--tw-gradient-to); via-violet-600--tw-gradient-to: rgb(124 58 237 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #7c3aed var(--tw-gradient-via-position), var(--tw-gradient-to); via-violet-700--tw-gradient-to: rgb(109 40 217 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #6d28d9 var(--tw-gradient-via-position), var(--tw-gradient-to); via-violet-800--tw-gradient-to: rgb(91 33 182 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #5b21b6 var(--tw-gradient-via-position), var(--tw-gradient-to); via-violet-900--tw-gradient-to: rgb(76 29 149 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #4c1d95 var(--tw-gradient-via-position), var(--tw-gradient-to); via-violet-950--tw-gradient-to: rgb(46 16 101 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #2e1065 var(--tw-gradient-via-position), var(--tw-gradient-to); via-purple-50--tw-gradient-to: rgb(250 245 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #faf5ff var(--tw-gradient-via-position), var(--tw-gradient-to); via-purple-100--tw-gradient-to: rgb(243 232 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f3e8ff var(--tw-gradient-via-position), var(--tw-gradient-to); via-purple-200--tw-gradient-to: rgb(233 213 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #e9d5ff var(--tw-gradient-via-position), var(--tw-gradient-to); via-purple-300--tw-gradient-to: rgb(216 180 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #d8b4fe var(--tw-gradient-via-position), var(--tw-gradient-to); via-purple-400--tw-gradient-to: rgb(192 132 252 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #c084fc var(--tw-gradient-via-position), var(--tw-gradient-to); via-purple-500--tw-gradient-to: rgb(168 85 247 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #a855f7 var(--tw-gradient-via-position), var(--tw-gradient-to); via-purple-600--tw-gradient-to: rgb(147 51 234 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #9333ea var(--tw-gradient-via-position), var(--tw-gradient-to); via-purple-700--tw-gradient-to: rgb(126 34 206 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #7e22ce var(--tw-gradient-via-position), var(--tw-gradient-to); via-purple-800--tw-gradient-to: rgb(107 33 168 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #6b21a8 var(--tw-gradient-via-position), var(--tw-gradient-to); via-purple-900--tw-gradient-to: rgb(88 28 135 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #581c87 var(--tw-gradient-via-position), var(--tw-gradient-to); via-purple-950--tw-gradient-to: rgb(59 7 100 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #3b0764 var(--tw-gradient-via-position), var(--tw-gradient-to); via-fuchsia-50--tw-gradient-to: rgb(253 244 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fdf4ff var(--tw-gradient-via-position), var(--tw-gradient-to); via-fuchsia-100--tw-gradient-to: rgb(250 232 255 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fae8ff var(--tw-gradient-via-position), var(--tw-gradient-to); via-fuchsia-200--tw-gradient-to: rgb(245 208 254 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f5d0fe var(--tw-gradient-via-position), var(--tw-gradient-to); via-fuchsia-300--tw-gradient-to: rgb(240 171 252 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f0abfc var(--tw-gradient-via-position), var(--tw-gradient-to); via-fuchsia-400--tw-gradient-to: rgb(232 121 249 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #e879f9 var(--tw-gradient-via-position), var(--tw-gradient-to); via-fuchsia-500--tw-gradient-to: rgb(217 70 239 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #d946ef var(--tw-gradient-via-position), var(--tw-gradient-to); via-fuchsia-600--tw-gradient-to: rgb(192 38 211 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #c026d3 var(--tw-gradient-via-position), var(--tw-gradient-to); via-fuchsia-700--tw-gradient-to: rgb(162 28 175 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #a21caf var(--tw-gradient-via-position), var(--tw-gradient-to); via-fuchsia-800--tw-gradient-to: rgb(134 25 143 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #86198f var(--tw-gradient-via-position), var(--tw-gradient-to); via-fuchsia-900--tw-gradient-to: rgb(112 26 117 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #701a75 var(--tw-gradient-via-position), var(--tw-gradient-to); via-fuchsia-950--tw-gradient-to: rgb(74 4 78 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #4a044e var(--tw-gradient-via-position), var(--tw-gradient-to); via-pink-50--tw-gradient-to: rgb(253 242 248 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fdf2f8 var(--tw-gradient-via-position), var(--tw-gradient-to); via-pink-100--tw-gradient-to: rgb(252 231 243 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fce7f3 var(--tw-gradient-via-position), var(--tw-gradient-to); via-pink-200--tw-gradient-to: rgb(251 207 232 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fbcfe8 var(--tw-gradient-via-position), var(--tw-gradient-to); via-pink-300--tw-gradient-to: rgb(249 168 212 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f9a8d4 var(--tw-gradient-via-position), var(--tw-gradient-to); via-pink-400--tw-gradient-to: rgb(244 114 182 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f472b6 var(--tw-gradient-via-position), var(--tw-gradient-to); via-pink-500--tw-gradient-to: rgb(236 72 153 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #ec4899 var(--tw-gradient-via-position), var(--tw-gradient-to); via-pink-600--tw-gradient-to: rgb(219 39 119 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #db2777 var(--tw-gradient-via-position), var(--tw-gradient-to); via-pink-700--tw-gradient-to: rgb(190 24 93 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #be185d var(--tw-gradient-via-position), var(--tw-gradient-to); via-pink-800--tw-gradient-to: rgb(157 23 77 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #9d174d var(--tw-gradient-via-position), var(--tw-gradient-to); via-pink-900--tw-gradient-to: rgb(131 24 67 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #831843 var(--tw-gradient-via-position), var(--tw-gradient-to); via-pink-950--tw-gradient-to: rgb(80 7 36 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #500724 var(--tw-gradient-via-position), var(--tw-gradient-to); via-rose-50--tw-gradient-to: rgb(255 241 242 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fff1f2 var(--tw-gradient-via-position), var(--tw-gradient-to); via-rose-100--tw-gradient-to: rgb(255 228 230 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #ffe4e6 var(--tw-gradient-via-position), var(--tw-gradient-to); via-rose-200--tw-gradient-to: rgb(254 205 211 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fecdd3 var(--tw-gradient-via-position), var(--tw-gradient-to); via-rose-300--tw-gradient-to: rgb(253 164 175 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fda4af var(--tw-gradient-via-position), var(--tw-gradient-to); via-rose-400--tw-gradient-to: rgb(251 113 133 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #fb7185 var(--tw-gradient-via-position), var(--tw-gradient-to); via-rose-500--tw-gradient-to: rgb(244 63 94 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #f43f5e var(--tw-gradient-via-position), var(--tw-gradient-to); via-rose-600--tw-gradient-to: rgb(225 29 72 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #e11d48 var(--tw-gradient-via-position), var(--tw-gradient-to); via-rose-700--tw-gradient-to: rgb(190 18 60 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #be123c var(--tw-gradient-via-position), var(--tw-gradient-to); via-rose-800--tw-gradient-to: rgb(159 18 57 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #9f1239 var(--tw-gradient-via-position), var(--tw-gradient-to); via-rose-900--tw-gradient-to: rgb(136 19 55 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #881337 var(--tw-gradient-via-position), var(--tw-gradient-to); via-rose-950--tw-gradient-to: rgb(76 5 25 / 0) var(--tw-gradient-to-position); \\--tw-gradient-stops: var(--tw-gradient-from), #4c0519 var(--tw-gradient-via-position), var(--tw-gradient-to); via-0%--tw-gradient-via-position: 0%; via-5%--tw-gradient-via-position: 5%; via-10%--tw-gradient-via-position: 10%; via-15%--tw-gradient-via-position: 15%; via-20%--tw-gradient-via-position: 20%; via-25%--tw-gradient-via-position: 25%; via-30%--tw-gradient-via-position: 30%; via-35%--tw-gradient-via-position: 35%; via-40%--tw-gradient-via-position: 40%; via-45%--tw-gradient-via-position: 45%; via-50%--tw-gradient-via-position: 50%; via-55%--tw-gradient-via-position: 55%; via-60%--tw-gradient-via-position: 60%; via-65%--tw-gradient-via-position: 65%; via-70%--tw-gradient-via-position: 70%; via-75%--tw-gradient-via-position: 75%; via-80%--tw-gradient-via-position: 80%; via-85%--tw-gradient-via-position: 85%; via-90%--tw-gradient-via-position: 90%; via-95%--tw-gradient-via-position: 95%; via-100%--tw-gradient-via-position: 100%; to-inherit--tw-gradient-to: inherit var(--tw-gradient-to-position); to-current--tw-gradient-to: currentColor var(--tw-gradient-to-position); to-transparent--tw-gradient-to: transparent var(--tw-gradient-to-position); to-black--tw-gradient-to: #000 var(--tw-gradient-to-position); to-white--tw-gradient-to: #fff var(--tw-gradient-to-position); to-slate-50--tw-gradient-to: #f8fafc var(--tw-gradient-to-position); to-slate-100--tw-gradient-to: #f1f5f9 var(--tw-gradient-to-position); to-slate-200--tw-gradient-to: #e2e8f0 var(--tw-gradient-to-position); to-slate-300--tw-gradient-to: #cbd5e1 var(--tw-gradient-to-position); to-slate-400--tw-gradient-to: #94a3b8 var(--tw-gradient-to-position); to-slate-500--tw-gradient-to: #64748b var(--tw-gradient-to-position); to-slate-600--tw-gradient-to: #475569 var(--tw-gradient-to-position); to-slate-700--tw-gradient-to: #334155 var(--tw-gradient-to-position); to-slate-800--tw-gradient-to: #1e293b var(--tw-gradient-to-position); to-slate-900--tw-gradient-to: #0f172a var(--tw-gradient-to-position); to-slate-950--tw-gradient-to: #020617 var(--tw-gradient-to-position); to-gray-50--tw-gradient-to: #f9fafb var(--tw-gradient-to-position); to-gray-100--tw-gradient-to: #f3f4f6 var(--tw-gradient-to-position); to-gray-200--tw-gradient-to: #e5e7eb var(--tw-gradient-to-position); to-gray-300--tw-gradient-to: #d1d5db var(--tw-gradient-to-position); to-gray-400--tw-gradient-to: #9ca3af var(--tw-gradient-to-position); to-gray-500--tw-gradient-to: #6b7280 var(--tw-gradient-to-position); to-gray-600--tw-gradient-to: #4b5563 var(--tw-gradient-to-position); to-gray-700--tw-gradient-to: #374151 var(--tw-gradient-to-position); to-gray-800--tw-gradient-to: #1f2937 var(--tw-gradient-to-position); to-gray-900--tw-gradient-to: #111827 var(--tw-gradient-to-position); to-gray-950--tw-gradient-to: #030712 var(--tw-gradient-to-position); to-zinc-50--tw-gradient-to: #fafafa var(--tw-gradient-to-position); to-zinc-100--tw-gradient-to: #f4f4f5 var(--tw-gradient-to-position); to-zinc-200--tw-gradient-to: #e4e4e7 var(--tw-gradient-to-position); to-zinc-300--tw-gradient-to: #d4d4d8 var(--tw-gradient-to-position); to-zinc-400--tw-gradient-to: #a1a1aa var(--tw-gradient-to-position); to-zinc-500--tw-gradient-to: #71717a var(--tw-gradient-to-position); to-zinc-600--tw-gradient-to: #52525b var(--tw-gradient-to-position); to-zinc-700--tw-gradient-to: #3f3f46 var(--tw-gradient-to-position); to-zinc-800--tw-gradient-to: #27272a var(--tw-gradient-to-position); to-zinc-900--tw-gradient-to: #18181b var(--tw-gradient-to-position); to-zinc-950--tw-gradient-to: #09090b var(--tw-gradient-to-position); to-neutral-50--tw-gradient-to: #fafafa var(--tw-gradient-to-position); to-neutral-100--tw-gradient-to: #f5f5f5 var(--tw-gradient-to-position); to-neutral-200--tw-gradient-to: #e5e5e5 var(--tw-gradient-to-position); to-neutral-300--tw-gradient-to: #d4d4d4 var(--tw-gradient-to-position); to-neutral-400--tw-gradient-to: #a3a3a3 var(--tw-gradient-to-position); to-neutral-500--tw-gradient-to: #737373 var(--tw-gradient-to-position); to-neutral-600--tw-gradient-to: #525252 var(--tw-gradient-to-position); to-neutral-700--tw-gradient-to: #404040 var(--tw-gradient-to-position); to-neutral-800--tw-gradient-to: #262626 var(--tw-gradient-to-position); to-neutral-900--tw-gradient-to: #171717 var(--tw-gradient-to-position); to-neutral-950--tw-gradient-to: #0a0a0a var(--tw-gradient-to-position); to-stone-50--tw-gradient-to: #fafaf9 var(--tw-gradient-to-position); to-stone-100--tw-gradient-to: #f5f5f4 var(--tw-gradient-to-position); to-stone-200--tw-gradient-to: #e7e5e4 var(--tw-gradient-to-position); to-stone-300--tw-gradient-to: #d6d3d1 var(--tw-gradient-to-position); to-stone-400--tw-gradient-to: #a8a29e var(--tw-gradient-to-position); to-stone-500--tw-gradient-to: #78716c var(--tw-gradient-to-position); to-stone-600--tw-gradient-to: #57534e var(--tw-gradient-to-position); to-stone-700--tw-gradient-to: #44403c var(--tw-gradient-to-position); to-stone-800--tw-gradient-to: #292524 var(--tw-gradient-to-position); to-stone-900--tw-gradient-to: #1c1917 var(--tw-gradient-to-position); to-stone-950--tw-gradient-to: #0c0a09 var(--tw-gradient-to-position); to-red-50--tw-gradient-to: #fef2f2 var(--tw-gradient-to-position); to-red-100--tw-gradient-to: #fee2e2 var(--tw-gradient-to-position); to-red-200--tw-gradient-to: #fecaca var(--tw-gradient-to-position); to-red-300--tw-gradient-to: #fca5a5 var(--tw-gradient-to-position); to-red-400--tw-gradient-to: #f87171 var(--tw-gradient-to-position); to-red-500--tw-gradient-to: #ef4444 var(--tw-gradient-to-position); to-red-600--tw-gradient-to: #dc2626 var(--tw-gradient-to-position); to-red-700--tw-gradient-to: #b91c1c var(--tw-gradient-to-position); to-red-800--tw-gradient-to: #991b1b var(--tw-gradient-to-position); to-red-900--tw-gradient-to: #7f1d1d var(--tw-gradient-to-position); to-red-950--tw-gradient-to: #450a0a var(--tw-gradient-to-position); to-orange-50--tw-gradient-to: #fff7ed var(--tw-gradient-to-position); to-orange-100--tw-gradient-to: #ffedd5 var(--tw-gradient-to-position); to-orange-200--tw-gradient-to: #fed7aa var(--tw-gradient-to-position); to-orange-300--tw-gradient-to: #fdba74 var(--tw-gradient-to-position); to-orange-400--tw-gradient-to: #fb923c var(--tw-gradient-to-position); to-orange-500--tw-gradient-to: #f97316 var(--tw-gradient-to-position); to-orange-600--tw-gradient-to: #ea580c var(--tw-gradient-to-position); to-orange-700--tw-gradient-to: #c2410c var(--tw-gradient-to-position); to-orange-800--tw-gradient-to: #9a3412 var(--tw-gradient-to-position); to-orange-900--tw-gradient-to: #7c2d12 var(--tw-gradient-to-position); to-orange-950--tw-gradient-to: #431407 var(--tw-gradient-to-position); to-amber-50--tw-gradient-to: #fffbeb var(--tw-gradient-to-position); to-amber-100--tw-gradient-to: #fef3c7 var(--tw-gradient-to-position); to-amber-200--tw-gradient-to: #fde68a var(--tw-gradient-to-position); to-amber-300--tw-gradient-to: #fcd34d var(--tw-gradient-to-position); to-amber-400--tw-gradient-to: #fbbf24 var(--tw-gradient-to-position); to-amber-500--tw-gradient-to: #f59e0b var(--tw-gradient-to-position); to-amber-600--tw-gradient-to: #d97706 var(--tw-gradient-to-position); to-amber-700--tw-gradient-to: #b45309 var(--tw-gradient-to-position); to-amber-800--tw-gradient-to: #92400e var(--tw-gradient-to-position); to-amber-900--tw-gradient-to: #78350f var(--tw-gradient-to-position); to-amber-950--tw-gradient-to: #451a03 var(--tw-gradient-to-position); to-yellow-50--tw-gradient-to: #fefce8 var(--tw-gradient-to-position); to-yellow-100--tw-gradient-to: #fef9c3 var(--tw-gradient-to-position); to-yellow-200--tw-gradient-to: #fef08a var(--tw-gradient-to-position); to-yellow-300--tw-gradient-to: #fde047 var(--tw-gradient-to-position); to-yellow-400--tw-gradient-to: #facc15 var(--tw-gradient-to-position); to-yellow-500--tw-gradient-to: #eab308 var(--tw-gradient-to-position); to-yellow-600--tw-gradient-to: #ca8a04 var(--tw-gradient-to-position); to-yellow-700--tw-gradient-to: #a16207 var(--tw-gradient-to-position); to-yellow-800--tw-gradient-to: #854d0e var(--tw-gradient-to-position); to-yellow-900--tw-gradient-to: #713f12 var(--tw-gradient-to-position); to-yellow-950--tw-gradient-to: #422006 var(--tw-gradient-to-position); to-lime-50--tw-gradient-to: #f7fee7 var(--tw-gradient-to-position); to-lime-100--tw-gradient-to: #ecfccb var(--tw-gradient-to-position); to-lime-200--tw-gradient-to: #d9f99d var(--tw-gradient-to-position); to-lime-300--tw-gradient-to: #bef264 var(--tw-gradient-to-position); to-lime-400--tw-gradient-to: #a3e635 var(--tw-gradient-to-position); to-lime-500--tw-gradient-to: #84cc16 var(--tw-gradient-to-position); to-lime-600--tw-gradient-to: #65a30d var(--tw-gradient-to-position); to-lime-700--tw-gradient-to: #4d7c0f var(--tw-gradient-to-position); to-lime-800--tw-gradient-to: #3f6212 var(--tw-gradient-to-position); to-lime-900--tw-gradient-to: #365314 var(--tw-gradient-to-position); to-lime-950--tw-gradient-to: #1a2e05 var(--tw-gradient-to-position); to-green-50--tw-gradient-to: #f0fdf4 var(--tw-gradient-to-position); to-green-100--tw-gradient-to: #dcfce7 var(--tw-gradient-to-position); to-green-200--tw-gradient-to: #bbf7d0 var(--tw-gradient-to-position); to-green-300--tw-gradient-to: #86efac var(--tw-gradient-to-position); to-green-400--tw-gradient-to: #4ade80 var(--tw-gradient-to-position); to-green-500--tw-gradient-to: #22c55e var(--tw-gradient-to-position); to-green-600--tw-gradient-to: #16a34a var(--tw-gradient-to-position); to-green-700--tw-gradient-to: #15803d var(--tw-gradient-to-position); to-green-800--tw-gradient-to: #166534 var(--tw-gradient-to-position); to-green-900--tw-gradient-to: #14532d var(--tw-gradient-to-position); to-green-950--tw-gradient-to: #052e16 var(--tw-gradient-to-position); to-emerald-50--tw-gradient-to: #ecfdf5 var(--tw-gradient-to-position); to-emerald-100--tw-gradient-to: #d1fae5 var(--tw-gradient-to-position); to-emerald-200--tw-gradient-to: #a7f3d0 var(--tw-gradient-to-position); to-emerald-300--tw-gradient-to: #6ee7b7 var(--tw-gradient-to-position); to-emerald-400--tw-gradient-to: #34d399 var(--tw-gradient-to-position); to-emerald-500--tw-gradient-to: #10b981 var(--tw-gradient-to-position); to-emerald-600--tw-gradient-to: #059669 var(--tw-gradient-to-position); to-emerald-700--tw-gradient-to: #047857 var(--tw-gradient-to-position); to-emerald-800--tw-gradient-to: #065f46 var(--tw-gradient-to-position); to-emerald-900--tw-gradient-to: #064e3b var(--tw-gradient-to-position); to-emerald-950--tw-gradient-to: #022c22 var(--tw-gradient-to-position); to-teal-50--tw-gradient-to: #f0fdfa var(--tw-gradient-to-position); to-teal-100--tw-gradient-to: #ccfbf1 var(--tw-gradient-to-position); to-teal-200--tw-gradient-to: #99f6e4 var(--tw-gradient-to-position); to-teal-300--tw-gradient-to: #5eead4 var(--tw-gradient-to-position); to-teal-400--tw-gradient-to: #2dd4bf var(--tw-gradient-to-position); to-teal-500--tw-gradient-to: #14b8a6 var(--tw-gradient-to-position); to-teal-600--tw-gradient-to: #0d9488 var(--tw-gradient-to-position); to-teal-700--tw-gradient-to: #0f766e var(--tw-gradient-to-position); to-teal-800--tw-gradient-to: #115e59 var(--tw-gradient-to-position); to-teal-900--tw-gradient-to: #134e4a var(--tw-gradient-to-position); to-teal-950--tw-gradient-to: #042f2e var(--tw-gradient-to-position); to-cyan-50--tw-gradient-to: #ecfeff var(--tw-gradient-to-position); to-cyan-100--tw-gradient-to: #cffafe var(--tw-gradient-to-position); to-cyan-200--tw-gradient-to: #a5f3fc var(--tw-gradient-to-position); to-cyan-300--tw-gradient-to: #67e8f9 var(--tw-gradient-to-position); to-cyan-400--tw-gradient-to: #22d3ee var(--tw-gradient-to-position); to-cyan-500--tw-gradient-to: #06b6d4 var(--tw-gradient-to-position); to-cyan-600--tw-gradient-to: #0891b2 var(--tw-gradient-to-position); to-cyan-700--tw-gradient-to: #0e7490 var(--tw-gradient-to-position); to-cyan-800--tw-gradient-to: #155e75 var(--tw-gradient-to-position); to-cyan-900--tw-gradient-to: #164e63 var(--tw-gradient-to-position); to-cyan-950--tw-gradient-to: #083344 var(--tw-gradient-to-position); to-sky-50--tw-gradient-to: #f0f9ff var(--tw-gradient-to-position); to-sky-100--tw-gradient-to: #e0f2fe var(--tw-gradient-to-position); to-sky-200--tw-gradient-to: #bae6fd var(--tw-gradient-to-position); to-sky-300--tw-gradient-to: #7dd3fc var(--tw-gradient-to-position); to-sky-400--tw-gradient-to: #38bdf8 var(--tw-gradient-to-position); to-sky-500--tw-gradient-to: #0ea5e9 var(--tw-gradient-to-position); to-sky-600--tw-gradient-to: #0284c7 var(--tw-gradient-to-position); to-sky-700--tw-gradient-to: #0369a1 var(--tw-gradient-to-position); to-sky-800--tw-gradient-to: #075985 var(--tw-gradient-to-position); to-sky-900--tw-gradient-to: #0c4a6e var(--tw-gradient-to-position); to-sky-950--tw-gradient-to: #082f49 var(--tw-gradient-to-position); to-blue-50--tw-gradient-to: #eff6ff var(--tw-gradient-to-position); to-blue-100--tw-gradient-to: #dbeafe var(--tw-gradient-to-position); to-blue-200--tw-gradient-to: #bfdbfe var(--tw-gradient-to-position); to-blue-300--tw-gradient-to: #93c5fd var(--tw-gradient-to-position); to-blue-400--tw-gradient-to: #60a5fa var(--tw-gradient-to-position); to-blue-500--tw-gradient-to: #3b82f6 var(--tw-gradient-to-position); to-blue-600--tw-gradient-to: #2563eb var(--tw-gradient-to-position); to-blue-700--tw-gradient-to: #1d4ed8 var(--tw-gradient-to-position); to-blue-800--tw-gradient-to: #1e40af var(--tw-gradient-to-position); to-blue-900--tw-gradient-to: #1e3a8a var(--tw-gradient-to-position); to-blue-950--tw-gradient-to: #172554 var(--tw-gradient-to-position); to-indigo-50--tw-gradient-to: #eef2ff var(--tw-gradient-to-position); to-indigo-100--tw-gradient-to: #e0e7ff var(--tw-gradient-to-position); to-indigo-200--tw-gradient-to: #c7d2fe var(--tw-gradient-to-position); to-indigo-300--tw-gradient-to: #a5b4fc var(--tw-gradient-to-position); to-indigo-400--tw-gradient-to: #818cf8 var(--tw-gradient-to-position); to-indigo-500--tw-gradient-to: #6366f1 var(--tw-gradient-to-position); to-indigo-600--tw-gradient-to: #4f46e5 var(--tw-gradient-to-position); to-indigo-700--tw-gradient-to: #4338ca var(--tw-gradient-to-position); to-indigo-800--tw-gradient-to: #3730a3 var(--tw-gradient-to-position); to-indigo-900--tw-gradient-to: #312e81 var(--tw-gradient-to-position); to-indigo-950--tw-gradient-to: #1e1b4b var(--tw-gradient-to-position); to-violet-50--tw-gradient-to: #f5f3ff var(--tw-gradient-to-position); to-violet-100--tw-gradient-to: #ede9fe var(--tw-gradient-to-position); to-violet-200--tw-gradient-to: #ddd6fe var(--tw-gradient-to-position); to-violet-300--tw-gradient-to: #c4b5fd var(--tw-gradient-to-position); to-violet-400--tw-gradient-to: #a78bfa var(--tw-gradient-to-position); to-violet-500--tw-gradient-to: #8b5cf6 var(--tw-gradient-to-position); to-violet-600--tw-gradient-to: #7c3aed var(--tw-gradient-to-position); to-violet-700--tw-gradient-to: #6d28d9 var(--tw-gradient-to-position); to-violet-800--tw-gradient-to: #5b21b6 var(--tw-gradient-to-position); to-violet-900--tw-gradient-to: #4c1d95 var(--tw-gradient-to-position); to-violet-950--tw-gradient-to: #2e1065 var(--tw-gradient-to-position); to-purple-50--tw-gradient-to: #faf5ff var(--tw-gradient-to-position); to-purple-100--tw-gradient-to: #f3e8ff var(--tw-gradient-to-position); to-purple-200--tw-gradient-to: #e9d5ff var(--tw-gradient-to-position); to-purple-300--tw-gradient-to: #d8b4fe var(--tw-gradient-to-position); to-purple-400--tw-gradient-to: #c084fc var(--tw-gradient-to-position); to-purple-500--tw-gradient-to: #a855f7 var(--tw-gradient-to-position); to-purple-600--tw-gradient-to: #9333ea var(--tw-gradient-to-position); to-purple-700--tw-gradient-to: #7e22ce var(--tw-gradient-to-position); to-purple-800--tw-gradient-to: #6b21a8 var(--tw-gradient-to-position); to-purple-900--tw-gradient-to: #581c87 var(--tw-gradient-to-position); to-purple-950--tw-gradient-to: #3b0764 var(--tw-gradient-to-position); to-fuchsia-50--tw-gradient-to: #fdf4ff var(--tw-gradient-to-position); to-fuchsia-100--tw-gradient-to: #fae8ff var(--tw-gradient-to-position); to-fuchsia-200--tw-gradient-to: #f5d0fe var(--tw-gradient-to-position); to-fuchsia-300--tw-gradient-to: #f0abfc var(--tw-gradient-to-position); to-fuchsia-400--tw-gradient-to: #e879f9 var(--tw-gradient-to-position); to-fuchsia-500--tw-gradient-to: #d946ef var(--tw-gradient-to-position); to-fuchsia-600--tw-gradient-to: #c026d3 var(--tw-gradient-to-position); to-fuchsia-700--tw-gradient-to: #a21caf var(--tw-gradient-to-position); to-fuchsia-800--tw-gradient-to: #86198f var(--tw-gradient-to-position); to-fuchsia-900--tw-gradient-to: #701a75 var(--tw-gradient-to-position); to-fuchsia-950--tw-gradient-to: #4a044e var(--tw-gradient-to-position); to-pink-50--tw-gradient-to: #fdf2f8 var(--tw-gradient-to-position); to-pink-100--tw-gradient-to: #fce7f3 var(--tw-gradient-to-position); to-pink-200--tw-gradient-to: #fbcfe8 var(--tw-gradient-to-position); to-pink-300--tw-gradient-to: #f9a8d4 var(--tw-gradient-to-position); to-pink-400--tw-gradient-to: #f472b6 var(--tw-gradient-to-position); to-pink-500--tw-gradient-to: #ec4899 var(--tw-gradient-to-position); to-pink-600--tw-gradient-to: #db2777 var(--tw-gradient-to-position); to-pink-700--tw-gradient-to: #be185d var(--tw-gradient-to-position); to-pink-800--tw-gradient-to: #9d174d var(--tw-gradient-to-position); to-pink-900--tw-gradient-to: #831843 var(--tw-gradient-to-position); to-pink-950--tw-gradient-to: #500724 var(--tw-gradient-to-position); to-rose-50--tw-gradient-to: #fff1f2 var(--tw-gradient-to-position); to-rose-100--tw-gradient-to: #ffe4e6 var(--tw-gradient-to-position); to-rose-200--tw-gradient-to: #fecdd3 var(--tw-gradient-to-position); to-rose-300--tw-gradient-to: #fda4af var(--tw-gradient-to-position); to-rose-400--tw-gradient-to: #fb7185 var(--tw-gradient-to-position); to-rose-500--tw-gradient-to: #f43f5e var(--tw-gradient-to-position); to-rose-600--tw-gradient-to: #e11d48 var(--tw-gradient-to-position); to-rose-700--tw-gradient-to: #be123c var(--tw-gradient-to-position); to-rose-800--tw-gradient-to: #9f1239 var(--tw-gradient-to-position); to-rose-900--tw-gradient-to: #881337 var(--tw-gradient-to-position); to-rose-950--tw-gradient-to: #4c0519 var(--tw-gradient-to-position); to-0%--tw-gradient-to-position: 0%; to-5%--tw-gradient-to-position: 5%; to-10%--tw-gradient-to-position: 10%; to-15%--tw-gradient-to-position: 15%; to-20%--tw-gradient-to-position: 20%; to-25%--tw-gradient-to-position: 25%; to-30%--tw-gradient-to-position: 30%; to-35%--tw-gradient-to-position: 35%; to-40%--tw-gradient-to-position: 40%; to-45%--tw-gradient-to-position: 45%; to-50%--tw-gradient-to-position: 50%; to-55%--tw-gradient-to-position: 55%; to-60%--tw-gradient-to-position: 60%; to-65%--tw-gradient-to-position: 65%; to-70%--tw-gradient-to-position: 70%; to-75%--tw-gradient-to-position: 75%; to-80%--tw-gradient-to-position: 80%; to-85%--tw-gradient-to-position: 85%; to-90%--tw-gradient-to-position: 90%; to-95%--tw-gradient-to-position: 95%; to-100%--tw-gradient-to-position: 100%;",
    "title": "Gradient Color Stops - Tailwind CSS",
    "description": "Utilities for controlling the color stops in background gradients.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/place-content",
    "markdown": "# Place Content - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Center](#center)\n\nUse `place-content-center` to pack items in the center of the block axis:\n\n```\n<div class=\"grid grid-cols-2 gap-4 place-content-center h-48 ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n</div>\n```\n\n### [​Start](#start)\n\nUse `place-content-start` to pack items against the start of the block axis:\n\n```\n<div class=\"grid grid-cols-2 gap-4 place-content-start h-48 ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n</div>\n```\n\n### [​End](#end)\n\nUse `place-content-end` to to pack items against the end of the block axis:\n\n```\n<div class=\"grid grid-cols-2 gap-4 place-content-end h-48 ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n</div>\n```\n\n### [​Space between](#space-between)\n\nUse `place-content-between` to distribute grid items along the block axis so that that there is an equal amount of space between each row on the block axis.\n\n```\n<div class=\"grid grid-cols-2 gap-4 place-content-between h-48 ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n</div>\n```\n\n### [​Space around](#space-around)\n\nUse `place-content-around` distribute grid items such that there is an equal amount of space around each row on the block axis:\n\n```\n<div class=\"grid grid-cols-2 gap-4 place-content-around h-48 ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n</div>\n```\n\n### [​Space evenly](#space-evenly)\n\nUse `place-content-evenly` to distribute grid items such that they are evenly spaced on the block axis:\n\n```\n<div class=\"grid grid-cols-2 gap-4 place-content-evenly h-48 ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n</div>\n```\n\n### [​Stretch](#stretch)\n\nUse `place-content-stretch` to stretch grid items along their grid areas on the block axis:\n\n```\n<div class=\"grid grid-cols-2 gap-4 place-content-stretch h-48 ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:place-content-center` to only apply the `place-content-center` utility on hover.\n\n```\n<div class=\"grid place-content-start hover:place-content-center\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:place-content-center` to apply the `place-content-center` utility at only medium screen sizes and above.\n\n```\n<div class=\"grid place-content-start md:place-content-center\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Place Content - Tailwind CSS",
    "description": "Utilities for controlling how content is justified and aligned at the same time.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/border-width",
    "markdown": "# Border Width - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​All sides](#all-sides)\n\nUse the `border`, `border-0`, `border-2`, `border-4`, or `border-8` utilities to set the border width for all sides of an element.\n\n```\n<div class=\"border border-indigo-600 ...\"></div>\n<div class=\"border-2 border-indigo-600 ...\"></div>\n<div class=\"border-4 border-indigo-600 ...\"></div>\n<div class=\"border-8 border-indigo-600 ...\"></div>\n```\n\n### [​Individual sides](#individual-sides)\n\nUse the `border-*`, `border-*-0`, `border-*-2`, `border-*-4`, or `border-*-8` utilities to set the border width for one side of an element.\n\n```\n<div class=\"border-t-4 border-indigo-500 ...\"></div>\n<div class=\"border-r-4 border-indigo-500 ...\"></div>\n<div class=\"border-b-4 border-indigo-500 ...\"></div>\n<div class=\"border-l-4 border-indigo-500 ...\"></div>\n```\n\n### [​Horizontal and vertical sides](#horizontal-and-vertical-sides)\n\nUse the `border-x-*` and `border-y-*` utilities to set the border width on two sides of an element at the same time.\n\n```\n<div class=\"border-x-4 border-indigo-500 ...\"></div>\n<div class=\"border-y-4 border-indigo-500 ...\"></div>\n```\n\n### [​Between elements](#between-elements)\n\nYou can also add borders between child elements using the `divide-x-*` and `divide-y-*` width utilities along with the `divide-*` color utilities.\n\n```\n<div class=\"divide-y divide-slate-200 ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\nLearn more in the [Divide Width](https://tailwindcss.com/docs/divide-width) and [Divide Color](https://tailwindcss.com/docs/divide-color) documentation.\n\n### [​Using logical properties](#using-logical-properties)\n\nUse the `border-s-*` and `border-e-*` utilities to set the `border-inline-start-width` and `border-inline-end-width` [logical properties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties/Basic_concepts), which map to either the left or right border based on the text direction.\n\n```\n<div dir=\"ltr\">\n  <div class=\"border-s-4 ...\"></div>\n<div>\n\n<div dir=\"rtl\">\n  <div class=\"border-s-4 ...\"></div>\n<div>\n```\n\nFor more control, you can also use the [LTR and RTL modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#rtl-support) to conditionally apply specific styles depending on the current text direction.\n\n### [​Using without Preflight](#using-without-preflight)\n\nIf you’ve [disabled Preflight](https://tailwindcss.com/docs/preflight#disabling-preflight) in your project, you’ll need to include a [border style](https://tailwindcss.com/docs/border-style) utility any time you use one of the `border-width` utilities for the border to actually take effect:\n\n```\n<div class=\"border-4 border-indigo-500 ...\">\n<div class=\"border-4 border-solid border-indigo-500 ...\">\n  <!-- ... -->\n</div>\n```\n\nThis is because browsers set the `border-style` of most elements to `none` by default, so adding a `border-width` on its own isn’t enough to render a border.\n\nPreflight applies a global [border reset](https://tailwindcss.com/docs/preflight#border-styles-are-reset-globally) that sets `border-style` to `solid` and `border-width` to `0`, which is what makes it possible to add a border to an element using just a `border-width` utility in projects using Preflight.\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:border-t-4` to only apply the `border-t-4` utility on hover.\n\n```\n<div class=\"border-2 hover:border-t-4\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:border-t-4` to apply the `border-t-4` utility at only medium screen sizes and above.\n\n```\n<div class=\"border-2 md:border-t-4\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides five `border-width` utilities, and the same number of utilities per side (horizontal, vertical, top, right, bottom, and left). You change, add, or remove these by editing the `theme.borderWidth` section of your Tailwind config.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `border-width` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"border-t-[3px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Border Width - Tailwind CSS",
    "description": "Utilities for controlling the width of an element's borders.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/functions-and-directives",
    "markdown": "# Functions & Directives - Tailwind CSS\n\nDirectives are custom Tailwind-specific [at-rules](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule) you can use in your CSS that offer special functionality for Tailwind CSS projects.\n\n### [​@tailwind](#tailwind)\n\nUse the `@tailwind` directive to insert Tailwind’s `base`, `components`, `utilities` and `variants` styles into your CSS.\n\n```\n/**\n * This injects Tailwind's base styles and any base styles registered by\n * plugins.\n */\n@tailwind base;\n\n/**\n * This injects Tailwind's component classes and any component classes\n * registered by plugins.\n */\n@tailwind components;\n\n/**\n * This injects Tailwind's utility classes and any utility classes registered\n * by plugins.\n */\n@tailwind utilities;\n\n/**\n * Use this directive to control where Tailwind injects the hover, focus,\n * responsive, dark mode, and other variants of each class.\n *\n * If omitted, Tailwind will append these classes to the very end of\n * your stylesheet by default.\n */\n@tailwind variants;\n```\n\n### [​@layer](#layer)\n\nUse the `@layer` directive to tell Tailwind which “bucket” a set of custom styles belong to. Valid layers are `base`, `components`, and `utilities`.\n\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  h1 {\n    @apply text-2xl;\n  }\n  h2 {\n    @apply text-xl;\n  }\n}\n\n@layer components {\n  .btn-blue {\n    @apply bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded;\n  }\n}\n\n@layer utilities {\n  .filter-none {\n    filter: none;\n  }\n  .filter-grayscale {\n    filter: grayscale(100%);\n  }\n}\n```\n\nTailwind will automatically move the CSS within any `@layer` directive to the same place as the corresponding `@tailwind` rule, so you don’t have to worry about authoring your CSS in a specific order to avoid specificity issues.\n\nAny custom CSS added to a layer will only be included in the final build if that CSS is actually used in your HTML, just like all of the classes built in to Tailwind by default.\n\nWrapping any custom CSS with `@layer` also makes it possible to use modifiers with those rules, like `hover:` and `focus:` or responsive modifiers like `md:` and `lg:`.\n\n### [​@apply](#apply)\n\nUse `@apply` to inline any existing utility classes into your own custom CSS.\n\nThis is useful when you need to write custom CSS (like to override the styles in a third-party library) but still want to work with your design tokens and use the same syntax you’re used to using in your HTML.\n\n```\n.select2-dropdown {\n  @apply rounded-b-lg shadow-md;\n}\n.select2-search {\n  @apply border border-gray-300 rounded;\n}\n.select2-results__group {\n  @apply text-lg font-bold text-gray-900;\n}\n```\n\nAny rules inlined with `@apply` will have `!important` **removed** by default to avoid specificity issues:\n\n```\n/* Input */\n.foo {\n  color: blue !important;\n}\n\n.bar {\n  @apply foo;\n}\n\n/* Output */\n.foo {\n  color: blue !important;\n}\n\n.bar {\n  color: blue;\n}\n```\n\nIf you’d like to `@apply` an existing class and make it `!important`, simply add `!important` to the end of the declaration:\n\n```\n/* Input */\n.btn {\n  @apply font-bold py-2 px-4 rounded !important;\n}\n\n/* Output */\n.btn {\n  font-weight: 700 !important;\n  padding-top: .5rem !important;\n  padding-bottom: .5rem !important;\n  padding-right: 1rem !important;\n  padding-left: 1rem !important;\n  border-radius: .25rem !important;\n}\n```\n\nNote that if you’re using Sass/SCSS, you’ll need to use Sass’ interpolation feature to get this to work:\n\n```\n.btn {\n  @apply font-bold py-2 px-4 rounded #{!important};\n}\n```\n\n#### [​Using @apply with per-component CSS](#using-apply-with-per-component-css)\n\nComponent frameworks like Vue and Svelte support adding per-component styles within a `<style>` block that lives in each component file.\n\nIf you try to `@apply` a custom class you’ve defined in your global CSS in one of these per-component `<style>` blocks, you’ll get an error about the class not existing:\n\nThis is because under-the-hood, frameworks like Vue and Svelte are processing every single `<style>` block independently, and running your PostCSS plugin chain against each one in isolation.\n\nThat means if you have 10 components that each have a `<style>` block, Tailwind is being run 10 separate times, and each run has zero knowledge about the other runs. Because of this, when you try to `@apply card` in `Card.svelte` it fails, because Tailwind has no idea that the `card` class exists since Svelte processed `Card.svelte` and `main.css` in total isolation from each other.\n\nThe solution to this problem is to define any custom styles you want to `@apply` in your components using the [plugin system](https://tailwindcss.com/docs/plugins) instead:\n\nThis way any file processed by Tailwind that uses this config file will have access to those styles.\n\nHonestly though the best solution is to just not do weird stuff like this at all. Use Tailwind’s utilities directly in your markup the way they are intended to be used, and don’t abuse the `@apply` feature to do things like this and you will have a much better experience.\n\n### [​@config](#config)\n\nUse the `@config` directive to specify which config file Tailwind should use when compiling that CSS file. This is useful for projects that need to use different configuration files for different CSS entry points.\n\n```\n@config \"./tailwind.site.config.js\";\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nThe path you provide to the `@config` directive is relative to that CSS file, and will take precedence over a path defined in your PostCSS configuration or in the Tailwind CLI.\n\nNote that if you’re using `postcss-import`, your `@import` statements need to come before `@config` for things to work correctly, as `postcss-import` is strict about following the CSS spec which requires `@import` statements to precede any other rules in the file.\n\nDon’t put `@config` before your `@import` statements\n\nPut your `@import` statements before the `@config` directive\n\n* * *\n\n## [​Functions](#functions)\n\nTailwind adds a few custom functions you can use in your CSS to access Tailwind-specific values. These functions are evaluated at build-time, and are replaced by static values in your final CSS.\n\n### [​theme()](#theme)\n\nUse the `theme()` function to access your Tailwind config values using dot notation.\n\n```\n.content-area {\n  height: calc(100vh - theme(spacing.12));\n}\n```\n\nIf you need to access a value that contains a dot (like the `2.5` value in the spacing scale), you can use square bracket notation:\n\n```\n.content-area {\n  height: calc(100vh - theme(spacing[2.5]));\n}\n```\n\nSince Tailwind uses a [nested object syntax](https://tailwindcss.com/docs/customizing-colors#color-object-syntax) to define its default color palette, make sure to use dot notation to access the nested colors.\n\nDon’t use the dash syntax when accessing nested color values\n\n```\n.btn-blue {\n  background-color: theme(colors.blue-500);\n}\n```\n\nUse dot notation to access nested color values\n\n```\n.btn-blue {\n  background-color: theme(colors.blue.500);\n}\n```\n\nTo adjust the opacity of a color retrieved with `theme`, use a slash followed by the opacity value you want to use:\n\n```\n.btn-blue {\n  background-color: theme(colors.blue.500 / 75%);\n}\n```\n\n### [​screen()](#screen)\n\nThe `screen` function allows you to create media queries that reference your breakpoints by name instead of duplicating their values in your own CSS.\n\n```\n@media screen(sm) {\n  /* ... */\n}\n```\n\nThis will resolve to the underlying screen value at build-time, generating a regular media query that matches specified breakpoint:\n\n```\n@media (min-width: 640px) {\n  /* ... */\n}\n```",
    "title": "Functions & Directives - Tailwind CSS",
    "description": "A reference for the custom functions and directives Tailwind exposes to your CSS.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/place-items",
    "markdown": "# Place Items - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Start](#start)\n\nUse `place-items-start` to place grid items on the start of their grid areas on both axes:\n\n```\n<div class=\"grid grid-cols-3 gap-4 place-items-start ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n  <div>06</div>\n</div>\n```\n\n### [​End](#end)\n\nUse `place-items-end` to place grid items on the end of their grid areas on both axes:\n\n```\n<div class=\"grid grid-cols-3 gap-4 place-items-end h-56 ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n  <div>06</div>\n</div>\n```\n\n### [​Center](#center)\n\nUse `place-items-center` to place grid items on the center of their grid areas on both axes:\n\n```\n<div class=\"grid grid-cols-3 gap-4 place-items-center h-56 ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n  <div>06</div>\n</div>\n```\n\n### [​Stretch](#stretch)\n\nUse `place-items-stretch` to stretch items along their grid areas on both axes:\n\n```\n<div class=\"grid grid-cols-3 gap-4 place-items-stretch h-56 ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n  <div>06</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:place-items-center` to only apply the `place-items-center` utility on hover.\n\n```\n<div class=\"grid place-items-start hover:place-items-center\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:place-items-center` to apply the `place-items-center` utility at only medium screen sizes and above.\n\n```\n<div class=\"grid place-items-start md:place-items-center\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Place Items - Tailwind CSS",
    "description": "Utilities for controlling how items are justified and aligned at the same time.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/configuration",
    "markdown": "# Configuration - Tailwind CSS\n\nBecause Tailwind is a framework for building bespoke user interfaces, it has been designed from the ground up with customization in mind.\n\nBy default, Tailwind will look for an optional `tailwind.config.js` file at the root of your project where you can define any customizations.\n\nEvery section of the config file is optional, so you only have to specify what you’d like to change. Any missing sections will fall back to Tailwind’s [default configuration](https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/config.full.js).\n\n* * *\n\n## [​Creating your configuration file](#creating-your-configuration-file)\n\nGenerate a Tailwind config file for your project using the Tailwind CLI utility included when you install the `tailwindcss` npm package:\n\n```\nnpx tailwindcss init\n```\n\nThis will create a minimal `tailwind.config.js` file at the root of your project:\n\n### [​Using a different file name](#using-a-different-file-name)\n\nTo use a name other than `tailwind.config.js`, pass it as an argument on the command-line:\n\n```\nnpx tailwindcss init tailwindcss-config.js\n```\n\nWhen you use a custom file name, you will need to specify it as a command-line argument when compiling your CSS with the Tailwind CLI tool:\n\n```\nnpx tailwindcss -c ./tailwindcss-config.js -i input.css -o output.css\n```\n\nIf you’re using Tailwind as a PostCSS plugin, you will need to specify your custom configuration path in your PostCSS configuration:\n\nAlternatively, you can specify your custom configuration path using the `@config` directive:\n\n```\n@config \"./tailwindcss-config.js\";\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nLearn more about the `@config` directive in the [Functions & Directives](https://tailwindcss.com/docs/functions-and-directives#config) documentation.\n\n### [​Using ESM or TypeScript](#using-esm-or-type-script)\n\nYou can also configure Tailwind CSS in ESM or even TypeScript:\n\n```\n/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\nWhen you run `npx tailwindcss init`, we’ll detect if your project is an ES Module and automatically generate your config file with the right syntax.\n\nYou can also generate an ESM config file explicitly by using the `--esm` flag:\n\n```\nnpx tailwindcss init --esm\n```\n\nTo generate a TypeScript config file, use the `--ts` flag:\n\n```\nnpx tailwindcss init --ts\n```\n\n### [​Generating a PostCSS configuration file](#generating-a-post-css-configuration-file)\n\nUse the `-p` flag if you’d like to also generate a basic `postcss.config.js` file alongside your `tailwind.config.js` file:\n\n```\nnpx tailwindcss init -p\n```\n\nThis will generate a `postcss.config.js` file in your project that looks like this:\n\n### [​Scaffolding the entire default configuration](#scaffolding-the-entire-default-configuration)\n\nFor most users we encourage you to keep your config file as minimal as possible, and only specify the things you want to customize.\n\nIf you’d rather scaffold a complete configuration file that includes all of Tailwind’s default configuration, use the `--full` option:\n\n```\nnpx tailwindcss init --full\n```\n\nYou’ll get a file that matches the [default configuration file](https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/config.full.js) Tailwind uses internally.\n\n* * *\n\n## [​Configuration options](#configuration-options)\n\n### [​Content](#content)\n\nThe `content` section is where you configure the paths to all of your HTML templates, JS components, and any other files that contain Tailwind class names.\n\nLearn more about configuring your content sources in the [Content Configuration](https://tailwindcss.com/docs/content-configuration) documentation.\n\n### [​Theme](#theme)\n\nThe `theme` section is where you define your color palette, fonts, type scale, border sizes, breakpoints — anything related to the visual design of your site.\n\nLearn more about the default theme and how to customize it in the [theme configuration guide](https://tailwindcss.com/docs/theme).\n\n### [​Plugins](#plugins)\n\nThe `plugins` section allows you to register plugins with Tailwind that can be used to generate extra utilities, components, base styles, or custom variants.\n\nLearn more about writing your own plugins in the [plugin authoring guide](https://tailwindcss.com/docs/plugins).\n\n### [​Presets](#presets)\n\nThe `presets` section allows you to specify your own custom base configuration instead of using Tailwind’s default base configuration.\n\nLearn more about presets in the [presets documentation](https://tailwindcss.com/docs/presets).\n\n### [​Prefix](#prefix)\n\nThe `prefix` option allows you to add a custom prefix to all of Tailwind’s generated utility classes. This can be really useful when layering Tailwind on top of existing CSS where there might be naming conflicts.\n\nFor example, you could add a `tw-` prefix by setting the `prefix` option like so:\n\nNow every class will be generated with the configured prefix:\n\n```\n.tw-text-left {\n  text-align: left;\n}\n.tw-text-center {\n  text-align: center;\n}\n.tw-text-right {\n  text-align: right;\n}\n/* etc. */\n```\n\nIt’s important to understand that this prefix is added _after_ any variant modifiers. That means that classes with responsive or state modifiers like `sm:` or `hover:` will still have the responsive or state modifier _first_, with your custom prefix appearing after the colon:\n\n```\n<div class=\"tw-text-lg md:tw-text-xl tw-bg-red-500 hover:tw-bg-blue-500\">\n  <!-- -->\n</div>\n```\n\nThe dash modifier for negative values should be added before your prefix, so `-mt-8` would become `-tw-mt-8` if you’ve configured `tw-` as your prefix:\n\n```\n<div class=\"-tw-mt-8\">\n  <!-- -->\n</div>\n```\n\nPrefixes are only added to classes generated by Tailwind; **no prefix will be added to your own custom classes.**\n\nThat means if you add your own custom utility like this:\n\n```\n@layer utilities {\n  .bg-brand-gradient { /* ... */ }\n}\n```\n\n…the generated variants will not have your configured prefix:\n\n```\n.bg-brand-gradient { /* ... */ }\n.hover\\:bg-brand-gradient:hover { /* ... */ }\n```\n\nIf you’d like to prefix your own utilities as well, just add the prefix to the class definition:\n\n```\n@layer utilities {\n  .tw-bg-brand-gradient { /* ... */ }\n}\n```\n\n### [​Important](#important)\n\nThe `important` option lets you control whether or not Tailwind’s utilities should be marked with `!important`. This can be really useful when using Tailwind with existing CSS that has high specificity selectors.\n\nTo generate utilities as `!important`, set the `important` key in your configuration options to `true`:\n\nNow all of Tailwind’s utility classes will be generated as `!important`:\n\n```\n.leading-none {\n  line-height: 1 !important;\n}\n.leading-tight {\n  line-height: 1.25 !important;\n}\n.leading-snug {\n  line-height: 1.375 !important;\n}\n/* etc. */\n```\n\nThis also applies to any custom utilities you define in your CSS using the `@layer utilities` directive:\n\n```\n/* Input */\n@layer utilities {\n  .bg-brand-gradient {\n    background-image: linear-gradient(#3490dc, #6574cd);\n  }\n}\n\n/* Output */\n.bg-brand-gradient {\n  background-image: linear-gradient(#3490dc, #6574cd) !important;\n}\n```\n\n#### [​Selector strategy](#selector-strategy)\n\nSetting `important` to `true` can introduce some issues when incorporating third-party JS libraries that add inline styles to your elements. In those cases, Tailwind’s `!important` utilities defeat the inline styles, which can break your intended design.\n\nTo get around this, you can set `important` to an ID selector like `#app` instead:\n\nThis configuration will prefix all of your utilities with the given selector, effectively increasing their specificity without actually making them `!important`.\n\nAfter you specify the `important` selector, you’ll need to ensure that the root element of your site matches it. Using the example above, we would need to set our root element’s `id` attribute to `app` in order for styles to work properly.\n\nAfter your configuration is all set up and your root element matches the selector in your Tailwind config, all of Tailwind’s utilities will have a high enough specificity to defeat other classes used in your project, **without** interfering with inline styles:\n\n```\n<html>\n<!-- ... -->\n<style>\n  .high-specificity .nested .selector {\n    color: blue;\n  }\n</style>\n<body id=\"app\">\n  <div class=\"high-specificity\">\n    <div class=\"nested\">\n      <!-- Will be red-500 -->\n      <div class=\"selector text-red-500\"><!-- ... --></div>\n    </div>\n  </div>\n\n  <!-- Will be #bada55 -->\n  <div class=\"text-red-500\" style=\"color: #bada55;\"><!-- ... --></div>\n</body>\n</html>\n```\n\nWhen using the selector strategy, be sure that the template file that includes your root selector is included in your [content configuration](https://tailwindcss.com/docs/optimizing-for-production#basic-usage), otherwise all of your CSS will be removed when building for production.\n\n#### [​Important modifier](#important-modifier)\n\nAlternatively, you can make any utility important by adding a `!` character to the beginning:\n\n```\n<p class=\"!font-medium font-bold\">\n  This will be medium even though bold comes later in the CSS.\n</p>\n```\n\nThe `!` always goes at the beginning of the utility name, after any variants, but before any prefix:\n\n```\n<div class=\"sm:hover:!tw-font-bold\">\n```\n\nThis can be useful in rare situations where you need to increase specificity because you’re at war with some styles you don’t control.\n\n### [​Separator](#separator)\n\nThe `separator` option lets you customize which character should be used to separate modifiers (screen sizes, `hover`, `focus`, etc.) from utility names (`text-center`, `items-end`, etc.).\n\nWe use a colon by default (`:`), but it can be useful to change this if you’re using a templating language like [Pug](https://pugjs.org/) that doesn’t support special characters in class names.\n\n### [​Core Plugins](#core-plugins)\n\nThe `corePlugins` section lets you completely disable classes that Tailwind would normally generate by default if you don’t need them for your project.\n\nTo disable specific core plugins, provide an object for `corePlugins` that sets those plugins to `false`:\n\nIf you’d like to safelist which core plugins should be enabled, provide an array that includes a list of the core plugins you’d like to use:\n\nIf you’d like to disable all of Tailwind’s core plugins and simply use Tailwind as a tool for processing your own custom plugins, provide an empty array:\n\nHere’s a list of every core plugin for reference:\n\n| Core Plugin | Description |\n| --- | --- |\n| `accentColor` | The `accent-color` utilities like `accent-green-800` |\n| `accessibility` | The `sr-only` and `not-sr-only` utilities |\n| `alignContent` | The `align-content` utilities like `content-between` |\n| `alignItems` | The `align-items` utilities like `items-center` |\n| `alignSelf` | The `align-self` utilities like `self-end` |\n| `animation` | The `animation` utilities like `animate-ping` |\n| `appearance` | The `appearance` utilities like `appearance-none` |\n| `aspectRatio` | The `aspect-ratio` utilities like `aspect-square` |\n| `backdropBlur` | The `backdrop-blur` utilities like `backdrop-blur-md` |\n| `backdropBrightness` | The `backdrop-brightness` utilities like `backdrop-brightness-100` |\n| `backdropContrast` | The `backdrop-contrast` utilities like `backdrop-contrast-100` |\n| `backdropFilter` | The `backdrop-filter` utilities like `backdrop-filter` |\n| `backdropGrayscale` | The `backdrop-grayscale` utilities like `backdrop-grayscale-0` |\n| `backdropHueRotate` | The `backdrop-hue-rotate` utilities like `backdrop-hue-rotate-30` |\n| `backdropInvert` | The `backdrop-invert` utilities like `backdrop-invert-0` |\n| `backdropOpacity` | The `backdrop-opacity` utilities like `backdrop-opacity-50` |\n| `backdropSaturate` | The `backdrop-saturate` utilities like `backdrop-saturate-100` |\n| `backdropSepia` | The `backdrop-sepia` utilities like `backdrop-sepia-0` |\n| `backgroundAttachment` | The `background-attachment` utilities like `bg-local` |\n| `backgroundBlendMode` | The `background-blend-mode` utilities like `bg-blend-color-burn` |\n| `backgroundClip` | The `background-clip` utilities like `bg-clip-padding` |\n| `backgroundColor` | The `background-color` utilities like `bg-green-800` |\n| `backgroundImage` | The `background-image` utilities like `bg-gradient-to-br` |\n| `backgroundOpacity` | The `background-color` opacity utilities like `bg-opacity-25` |\n| `backgroundOrigin` | The `background-origin` utilities like `bg-origin-padding` |\n| `backgroundPosition` | The `background-position` utilities like `bg-left-top` |\n| `backgroundRepeat` | The `background-repeat` utilities like `bg-repeat-x` |\n| `backgroundSize` | The `background-size` utilities like `bg-cover` |\n| `blur` | The `blur` utilities like `blur-md` |\n| `borderCollapse` | The `border-collapse` utilities like `border-collapse` |\n| `borderColor` | The `border-color` utilities like `border-e-green-800` |\n| `borderOpacity` | The `border-color` opacity utilities like `border-opacity-25` |\n| `borderRadius` | The `border-radius` utilities like `rounded-ss-lg` |\n| `borderSpacing` | The `border-spacing` utilities like `border-spacing-x-28` |\n| `borderStyle` | The `border-style` utilities like `border-dotted` |\n| `borderWidth` | The `border-width` utilities like `border-e-4` |\n| `boxDecorationBreak` | The `box-decoration-break` utilities like `decoration-clone` |\n| `boxShadow` | The `box-shadow` utilities like `shadow-lg` |\n| `boxShadowColor` | The `box-shadow-color` utilities like `shadow-green-800` |\n| `boxSizing` | The `box-sizing` utilities like `box-border` |\n| `breakAfter` | The `break-after` utilities like `break-after-avoid-page` |\n| `breakBefore` | The `break-before` utilities like `break-before-avoid-page` |\n| `breakInside` | The `break-inside` utilities like `break-inside-avoid` |\n| `brightness` | The `brightness` utilities like `brightness-100` |\n| `captionSide` | The `caption-side` utilities like `caption-top` |\n| `caretColor` | The `caret-color` utilities like `caret-green-800` |\n| `clear` | The `clear` utilities like `clear-left` |\n| `columns` | The `columns` utilities like `columns-auto` |\n| `contain` | The `contain` utilities like `contain-size` |\n| `container` | The `container` component |\n| `content` | The `content` utilities like `content-none` |\n| `contrast` | The `contrast` utilities like `contrast-100` |\n| `cursor` | The `cursor` utilities like `cursor-grab` |\n| `display` | The `display` utilities like `table-column-group` |\n| `divideColor` | The between elements `border-color` utilities like `divide-slate-500` |\n| `divideOpacity` | The `divide-opacity` utilities like `divide-opacity-50` |\n| `divideStyle` | The `divide-style` utilities like `divide-dotted` |\n| `divideWidth` | The between elements `border-width` utilities like `divide-x-2` |\n| `dropShadow` | The `drop-shadow` utilities like `drop-shadow-lg` |\n| `fill` | The `fill` utilities like `fill-green-700` |\n| `filter` | The `filter` utilities like `filter` |\n| `flex` | The `flex` utilities like `flex-auto` |\n| `flexBasis` | The `flex-basis` utilities like `basis-px` |\n| `flexDirection` | The `flex-direction` utilities like `flex-row-reverse` |\n| `flexGrow` | The `flex-grow` utilities like `flex-grow` |\n| `flexShrink` | The `flex-shrink` utilities like `flex-shrink` |\n| `flexWrap` | The `flex-wrap` utilities like `flex-wrap-reverse` |\n| `float` | The `float` utilities like `float-right` |\n| `fontFamily` | The `font-family` utilities like `font-serif` |\n| `fontSize` | The `font-size` utilities like `text-3xl` |\n| `fontSmoothing` | The `font-smoothing` utilities like `antialiased` |\n| `fontStyle` | The `font-style` utilities like `italic` |\n| `fontVariantNumeric` | The `font-variant-numeric` utilities like `oldstyle-nums` |\n| `fontWeight` | The `font-weight` utilities like `font-medium` |\n| `forcedColorAdjust` | The `forced-color-adjust` utilities like `forced-color-adjust-auto` |\n| `gap` | The `gap` utilities like `gap-x-28` |\n| `gradientColorStops` | The `gradient-color-stops` utilities like `via-emerald-700` |\n| `grayscale` | The `grayscale` utilities like `grayscale-0` |\n| `gridAutoColumns` | The `grid-auto-columns` utilities like `auto-cols-min` |\n| `gridAutoFlow` | The `grid-auto-flow` utilities like `grid-flow-dense` |\n| `gridAutoRows` | The `grid-auto-rows` utilities like `auto-rows-min` |\n| `gridColumn` | The `grid-column` utilities like `col-span-6` |\n| `gridColumnEnd` | The `grid-column-end` utilities like `col-end-7` |\n| `gridColumnStart` | The `grid-column-start` utilities like `col-start-7` |\n| `gridRow` | The `grid-row` utilities like `row-span-6` |\n| `gridRowEnd` | The `grid-row-end` utilities like `row-end-7` |\n| `gridRowStart` | The `grid-row-start` utilities like `row-start-7` |\n| `gridTemplateColumns` | The `grid-template-columns` utilities like `grid-cols-7` |\n| `gridTemplateRows` | The `grid-template-rows` utilities like `grid-rows-7` |\n| `height` | The `height` utilities like `h-96` |\n| `hueRotate` | The `hue-rotate` utilities like `hue-rotate-30` |\n| `hyphens` | The `hyphens` utilities like `hyphens-manual` |\n| `inset` | The `inset` utilities like `end-44` |\n| `invert` | The `invert` utilities like `invert-0` |\n| `isolation` | The `isolation` utilities like `isolate` |\n| `justifyContent` | The `justify-content` utilities like `justify-center` |\n| `justifyItems` | The `justify-items` utilities like `justify-items-end` |\n| `justifySelf` | The `justify-self` utilities like `justify-self-end` |\n| `letterSpacing` | The `letter-spacing` utilities like `tracking-normal` |\n| `lineClamp` | The `line-clamp` utilities like `line-clamp-4` |\n| `lineHeight` | The `line-height` utilities like `leading-9` |\n| `listStyleImage` | The `list-style-image` utilities like `list-image-none` |\n| `listStylePosition` | The `list-style-position` utilities like `list-inside` |\n| `listStyleType` | The `list-style-type` utilities like `list-disc` |\n| `margin` | The `margin` utilities like `me-28` |\n| `maxHeight` | The `max-height` utilities like `max-h-44` |\n| `maxWidth` | The `max-width` utilities like `max-w-80` |\n| `minHeight` | The `min-height` utilities like `min-h-44` |\n| `minWidth` | The `min-width` utilities like `min-w-36` |\n| `mixBlendMode` | The `mix-blend-mode` utilities like `mix-blend-hard-light` |\n| `objectFit` | The `object-fit` utilities like `object-fill` |\n| `objectPosition` | The `object-position` utilities like `object-left-top` |\n| `opacity` | The `opacity` utilities like `opacity-50` |\n| `order` | The `order` utilities like `order-8` |\n| `outlineColor` | The `outline-color` utilities like `outline-green-800` |\n| `outlineOffset` | The `outline-offset` utilities like `outline-offset-2` |\n| `outlineStyle` | The `outline-style` utilities like `outline-dashed` |\n| `outlineWidth` | The `outline-width` utilities like `outline-2` |\n| `overflow` | The `overflow` utilities like `overflow-x-hidden` |\n| `overscrollBehavior` | The `overscroll-behavior` utilities like `overscroll-y-contain` |\n| `padding` | The `padding` utilities like `pe-28` |\n| `placeContent` | The `place-content` utilities like `place-content-between` |\n| `placeItems` | The `place-items` utilities like `place-items-center` |\n| `placeSelf` | The `place-self` utilities like `place-self-end` |\n| `placeholderColor` | The placeholder `color` utilities like `placeholder-red-600` |\n| `placeholderOpacity` | The placeholder `color` opacity utilities like `placeholder-opacity-25` |\n| `pointerEvents` | The `pointer-events` utilities like `pointer-events-none` |\n| `position` | The `position` utilities like `absolute` |\n| `preflight` | Tailwind's base/reset styles |\n| `resize` | The `resize` utilities like `resize-y` |\n| `ringColor` | The `ring-color` utilities like `ring-green-800` |\n| `ringOffsetColor` | The `ring-offset-color` utilities like `ring-offset-green-800` |\n| `ringOffsetWidth` | The `ring-offset-width` utilities like `ring-offset-2` |\n| `ringOpacity` | The `ring-opacity` utilities like `ring-opacity-50` |\n| `ringWidth` | The `ring-width` utilities like `ring-4` |\n| `rotate` | The `rotate` utilities like `rotate-6` |\n| `saturate` | The `saturate` utilities like `saturate-100` |\n| `scale` | The `scale` utilities like `scale-x-95` |\n| `scrollBehavior` | The `scroll-behavior` utilities like `scroll-auto` |\n| `scrollMargin` | The `scroll-margin` utilities like `scroll-me-28` |\n| `scrollPadding` | The `scroll-padding` utilities like `scroll-pe-28` |\n| `scrollSnapAlign` | The `scroll-snap-align` utilities like `snap-end` |\n| `scrollSnapStop` | The `scroll-snap-stop` utilities like `snap-normal` |\n| `scrollSnapType` | The `scroll-snap-type` utilities like `snap-y` |\n| `sepia` | The `sepia` utilities like `sepia-0` |\n| `size` | The `size` utilities like `size-0.5` |\n| `skew` | The `skew` utilities like `skew-x-12` |\n| `space` | The \"space-between\" utilities like `space-x-4` |\n| `stroke` | The `stroke` utilities like `stroke-green-700` |\n| `strokeWidth` | The `stroke-width` utilities like `stroke-1` |\n| `tableLayout` | The `table-layout` utilities like `table-auto` |\n| `textAlign` | The `text-align` utilities like `text-right` |\n| `textColor` | The `text-color` utilities like `text-green-800` |\n| `textDecoration` | The `text-decoration` utilities like `overline` |\n| `textDecorationColor` | The `text-decoration-color` utilities like `decoration-green-800` |\n| `textDecorationStyle` | The `text-decoration-style` utilities like `decoration-dotted` |\n| `textDecorationThickness` | The `text-decoration-thickness` utilities like `decoration-4` |\n| `textIndent` | The `text-indent` utilities like `indent-28` |\n| `textOpacity` | The `text-opacity` utilities like `text-opacity-50` |\n| `textOverflow` | The `text-overflow` utilities like `overflow-ellipsis` |\n| `textTransform` | The `text-transform` utilities like `lowercase` |\n| `textUnderlineOffset` | The `text-underline-offset` utilities like `underline-offset-2` |\n| `textWrap` | The `text-wrap` utilities like `text-nowrap` |\n| `touchAction` | The `touch-action` utilities like `touch-pan-right` |\n| `transform` | The `transform` utility (for enabling transform features) |\n| `transformOrigin` | The `transform-origin` utilities like `origin-bottom-right` |\n| `transitionDelay` | The `transition-delay` utilities like `delay-200` |\n| `transitionDuration` | The `transition-duration` utilities like `duration-200` |\n| `transitionProperty` | The `transition-property` utilities like `transition-colors` |\n| `transitionTimingFunction` | The `transition-timing-function` utilities like `ease-in` |\n| `translate` | The `translate` utilities like `translate-x-full` |\n| `userSelect` | The `user-select` utilities like `select-text` |\n| `verticalAlign` | The `vertical-align` utilities like `align-bottom` |\n| `visibility` | The `visibility` utilities like `invisible` |\n| `whitespace` | The `whitespace` utilities like `whitespace-pre` |\n| `width` | The `width` utilities like `w-2.5` |\n| `willChange` | The `will-change` utilities like `will-change-scroll` |\n| `wordBreak` | The `word-break` utilities like `break-words` |\n| `zIndex` | The `z-index` utilities like `z-30` |\n\n* * *\n\n## [​Using multiple configurations](#using-multiple-configurations)\n\nFor projects that need to generate multiple CSS files using different Tailwind configurations, use the `@config` directive to specify which config file should be used for each CSS entry point:\n\n```\n@config \"./tailwind.site.config.js\";\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nLearn more about the `@config` directive in the [Functions & Directives](https://tailwindcss.com/docs/functions-and-directives#config) documentation.\n\n* * *\n\n## [​Referencing in JavaScript](#referencing-in-java-script)\n\nIt can often be useful to reference your configuration values in your own client-side JavaScript — for example to access some of your theme values when dynamically applying inline styles in a React or Vue component.\n\nTo make this easy, Tailwind provides a `resolveConfig` helper you can use to generate a fully merged version of your configuration object:\n\n```\nimport resolveConfig from 'tailwindcss/resolveConfig'\nimport tailwindConfig from './tailwind.config.js'\n\nconst fullConfig = resolveConfig(tailwindConfig)\n\nfullConfig.theme.width[4]\n// => '1rem'\n\nfullConfig.theme.screens.md\n// => '768px'\n\nfullConfig.theme.boxShadow['2xl']\n// => '0 25px 50px -12px rgba(0, 0, 0, 0.25)'\n```\n\nNote that this will transitively pull in a lot of our build-time dependencies, resulting in bigger client-side bundle size. To avoid this, we recommend using a tool like [babel-plugin-preval](https://github.com/kentcdodds/babel-plugin-preval) to generate a static version of your configuration at build-time.\n\n* * *\n\n## [​TypeScript types](#type-script-types)\n\nWe ship first-party TypeScript types for the `tailwind.config.js` file which give you all sorts of useful IDE support, and makes it a lot easier to make changes to your configuration without referencing the documentation quite as much.\n\nConfiguration files generated with Tailwind CLI include the necessary type annotation by default, but to configure TypeScript types manually, just add the type annotation above your configuration object:",
    "title": "Configuration - Tailwind CSS",
    "description": "A guide to configuring and customizing your Tailwind installation.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/text-decoration",
    "markdown": "# Text Decoration - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the text decoration](#setting-the-text-decoration)\n\nControl how text is decorated with the `underline`, `no-underline`, and `line-through` utilities.\n\n```\n<p class=\"underline ...\">The quick brown fox ...</p>\n<p class=\"overline ...\">The quick brown fox ...</p>\n<p class=\"line-through ...\">The quick brown fox ...</p>\n<p class=\"no-underline ...\">The quick brown fox ...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:underline` to only apply the `underline` utility on hover.\n\nTry hovering over the text to see the expected behaviour\n\n```\n<a href=\"#\" class=\"no-underline hover:underline ...\">Link</a>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:underline` to apply the `underline` utility at only medium screen sizes and above.\n\n```\n<p class=\"no-underline md:underline\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Text Decoration - Tailwind CSS",
    "description": "Utilities for controlling the decoration of text.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/border-color",
    "markdown": "# Border Color - Tailwind CSS\n\nborder-inheritborder-color: inherit; border-currentborder-color: currentColor; border-transparentborder-color: transparent; border-blackborder-color: rgb(0 0 0); border-whiteborder-color: rgb(255 255 255); border-slate-50border-color: rgb(248 250 252); border-slate-100border-color: rgb(241 245 249); border-slate-200border-color: rgb(226 232 240); border-slate-300border-color: rgb(203 213 225); border-slate-400border-color: rgb(148 163 184); border-slate-500border-color: rgb(100 116 139); border-slate-600border-color: rgb(71 85 105); border-slate-700border-color: rgb(51 65 85); border-slate-800border-color: rgb(30 41 59); border-slate-900border-color: rgb(15 23 42); border-slate-950border-color: rgb(2 6 23); border-gray-50border-color: rgb(249 250 251); border-gray-100border-color: rgb(243 244 246); border-gray-200border-color: rgb(229 231 235); border-gray-300border-color: rgb(209 213 219); border-gray-400border-color: rgb(156 163 175); border-gray-500border-color: rgb(107 114 128); border-gray-600border-color: rgb(75 85 99); border-gray-700border-color: rgb(55 65 81); border-gray-800border-color: rgb(31 41 55); border-gray-900border-color: rgb(17 24 39); border-gray-950border-color: rgb(3 7 18); border-zinc-50border-color: rgb(250 250 250); border-zinc-100border-color: rgb(244 244 245); border-zinc-200border-color: rgb(228 228 231); border-zinc-300border-color: rgb(212 212 216); border-zinc-400border-color: rgb(161 161 170); border-zinc-500border-color: rgb(113 113 122); border-zinc-600border-color: rgb(82 82 91); border-zinc-700border-color: rgb(63 63 70); border-zinc-800border-color: rgb(39 39 42); border-zinc-900border-color: rgb(24 24 27); border-zinc-950border-color: rgb(9 9 11); border-neutral-50border-color: rgb(250 250 250); border-neutral-100border-color: rgb(245 245 245); border-neutral-200border-color: rgb(229 229 229); border-neutral-300border-color: rgb(212 212 212); border-neutral-400border-color: rgb(163 163 163); border-neutral-500border-color: rgb(115 115 115); border-neutral-600border-color: rgb(82 82 82); border-neutral-700border-color: rgb(64 64 64); border-neutral-800border-color: rgb(38 38 38); border-neutral-900border-color: rgb(23 23 23); border-neutral-950border-color: rgb(10 10 10); border-stone-50border-color: rgb(250 250 249); border-stone-100border-color: rgb(245 245 244); border-stone-200border-color: rgb(231 229 228); border-stone-300border-color: rgb(214 211 209); border-stone-400border-color: rgb(168 162 158); border-stone-500border-color: rgb(120 113 108); border-stone-600border-color: rgb(87 83 78); border-stone-700border-color: rgb(68 64 60); border-stone-800border-color: rgb(41 37 36); border-stone-900border-color: rgb(28 25 23); border-stone-950border-color: rgb(12 10 9); border-red-50border-color: rgb(254 242 242); border-red-100border-color: rgb(254 226 226); border-red-200border-color: rgb(254 202 202); border-red-300border-color: rgb(252 165 165); border-red-400border-color: rgb(248 113 113); border-red-500border-color: rgb(239 68 68); border-red-600border-color: rgb(220 38 38); border-red-700border-color: rgb(185 28 28); border-red-800border-color: rgb(153 27 27); border-red-900border-color: rgb(127 29 29); border-red-950border-color: rgb(69 10 10); border-orange-50border-color: rgb(255 247 237); border-orange-100border-color: rgb(255 237 213); border-orange-200border-color: rgb(254 215 170); border-orange-300border-color: rgb(253 186 116); border-orange-400border-color: rgb(251 146 60); border-orange-500border-color: rgb(249 115 22); border-orange-600border-color: rgb(234 88 12); border-orange-700border-color: rgb(194 65 12); border-orange-800border-color: rgb(154 52 18); border-orange-900border-color: rgb(124 45 18); border-orange-950border-color: rgb(67 20 7); border-amber-50border-color: rgb(255 251 235); border-amber-100border-color: rgb(254 243 199); border-amber-200border-color: rgb(253 230 138); border-amber-300border-color: rgb(252 211 77); border-amber-400border-color: rgb(251 191 36); border-amber-500border-color: rgb(245 158 11); border-amber-600border-color: rgb(217 119 6); border-amber-700border-color: rgb(180 83 9); border-amber-800border-color: rgb(146 64 14); border-amber-900border-color: rgb(120 53 15); border-amber-950border-color: rgb(69 26 3); border-yellow-50border-color: rgb(254 252 232); border-yellow-100border-color: rgb(254 249 195); border-yellow-200border-color: rgb(254 240 138); border-yellow-300border-color: rgb(253 224 71); border-yellow-400border-color: rgb(250 204 21); border-yellow-500border-color: rgb(234 179 8); border-yellow-600border-color: rgb(202 138 4); border-yellow-700border-color: rgb(161 98 7); border-yellow-800border-color: rgb(133 77 14); border-yellow-900border-color: rgb(113 63 18); border-yellow-950border-color: rgb(66 32 6); border-lime-50border-color: rgb(247 254 231); border-lime-100border-color: rgb(236 252 203); border-lime-200border-color: rgb(217 249 157); border-lime-300border-color: rgb(190 242 100); border-lime-400border-color: rgb(163 230 53); border-lime-500border-color: rgb(132 204 22); border-lime-600border-color: rgb(101 163 13); border-lime-700border-color: rgb(77 124 15); border-lime-800border-color: rgb(63 98 18); border-lime-900border-color: rgb(54 83 20); border-lime-950border-color: rgb(26 46 5); border-green-50border-color: rgb(240 253 244); border-green-100border-color: rgb(220 252 231); border-green-200border-color: rgb(187 247 208); border-green-300border-color: rgb(134 239 172); border-green-400border-color: rgb(74 222 128); border-green-500border-color: rgb(34 197 94); border-green-600border-color: rgb(22 163 74); border-green-700border-color: rgb(21 128 61); border-green-800border-color: rgb(22 101 52); border-green-900border-color: rgb(20 83 45); border-green-950border-color: rgb(5 46 22); border-emerald-50border-color: rgb(236 253 245); border-emerald-100border-color: rgb(209 250 229); border-emerald-200border-color: rgb(167 243 208); border-emerald-300border-color: rgb(110 231 183); border-emerald-400border-color: rgb(52 211 153); border-emerald-500border-color: rgb(16 185 129); border-emerald-600border-color: rgb(5 150 105); border-emerald-700border-color: rgb(4 120 87); border-emerald-800border-color: rgb(6 95 70); border-emerald-900border-color: rgb(6 78 59); border-emerald-950border-color: rgb(2 44 34); border-teal-50border-color: rgb(240 253 250); border-teal-100border-color: rgb(204 251 241); border-teal-200border-color: rgb(153 246 228); border-teal-300border-color: rgb(94 234 212); border-teal-400border-color: rgb(45 212 191); border-teal-500border-color: rgb(20 184 166); border-teal-600border-color: rgb(13 148 136); border-teal-700border-color: rgb(15 118 110); border-teal-800border-color: rgb(17 94 89); border-teal-900border-color: rgb(19 78 74); border-teal-950border-color: rgb(4 47 46); border-cyan-50border-color: rgb(236 254 255); border-cyan-100border-color: rgb(207 250 254); border-cyan-200border-color: rgb(165 243 252); border-cyan-300border-color: rgb(103 232 249); border-cyan-400border-color: rgb(34 211 238); border-cyan-500border-color: rgb(6 182 212); border-cyan-600border-color: rgb(8 145 178); border-cyan-700border-color: rgb(14 116 144); border-cyan-800border-color: rgb(21 94 117); border-cyan-900border-color: rgb(22 78 99); border-cyan-950border-color: rgb(8 51 68); border-sky-50border-color: rgb(240 249 255); border-sky-100border-color: rgb(224 242 254); border-sky-200border-color: rgb(186 230 253); border-sky-300border-color: rgb(125 211 252); border-sky-400border-color: rgb(56 189 248); border-sky-500border-color: rgb(14 165 233); border-sky-600border-color: rgb(2 132 199); border-sky-700border-color: rgb(3 105 161); border-sky-800border-color: rgb(7 89 133); border-sky-900border-color: rgb(12 74 110); border-sky-950border-color: rgb(8 47 73); border-blue-50border-color: rgb(239 246 255); border-blue-100border-color: rgb(219 234 254); border-blue-200border-color: rgb(191 219 254); border-blue-300border-color: rgb(147 197 253); border-blue-400border-color: rgb(96 165 250); border-blue-500border-color: rgb(59 130 246); border-blue-600border-color: rgb(37 99 235); border-blue-700border-color: rgb(29 78 216); border-blue-800border-color: rgb(30 64 175); border-blue-900border-color: rgb(30 58 138); border-blue-950border-color: rgb(23 37 84); border-indigo-50border-color: rgb(238 242 255); border-indigo-100border-color: rgb(224 231 255); border-indigo-200border-color: rgb(199 210 254); border-indigo-300border-color: rgb(165 180 252); border-indigo-400border-color: rgb(129 140 248); border-indigo-500border-color: rgb(99 102 241); border-indigo-600border-color: rgb(79 70 229); border-indigo-700border-color: rgb(67 56 202); border-indigo-800border-color: rgb(55 48 163); border-indigo-900border-color: rgb(49 46 129); border-indigo-950border-color: rgb(30 27 75); border-violet-50border-color: rgb(245 243 255); border-violet-100border-color: rgb(237 233 254); border-violet-200border-color: rgb(221 214 254); border-violet-300border-color: rgb(196 181 253); border-violet-400border-color: rgb(167 139 250); border-violet-500border-color: rgb(139 92 246); border-violet-600border-color: rgb(124 58 237); border-violet-700border-color: rgb(109 40 217); border-violet-800border-color: rgb(91 33 182); border-violet-900border-color: rgb(76 29 149); border-violet-950border-color: rgb(46 16 101); border-purple-50border-color: rgb(250 245 255); border-purple-100border-color: rgb(243 232 255); border-purple-200border-color: rgb(233 213 255); border-purple-300border-color: rgb(216 180 254); border-purple-400border-color: rgb(192 132 252); border-purple-500border-color: rgb(168 85 247); border-purple-600border-color: rgb(147 51 234); border-purple-700border-color: rgb(126 34 206); border-purple-800border-color: rgb(107 33 168); border-purple-900border-color: rgb(88 28 135); border-purple-950border-color: rgb(59 7 100); border-fuchsia-50border-color: rgb(253 244 255); border-fuchsia-100border-color: rgb(250 232 255); border-fuchsia-200border-color: rgb(245 208 254); border-fuchsia-300border-color: rgb(240 171 252); border-fuchsia-400border-color: rgb(232 121 249); border-fuchsia-500border-color: rgb(217 70 239); border-fuchsia-600border-color: rgb(192 38 211); border-fuchsia-700border-color: rgb(162 28 175); border-fuchsia-800border-color: rgb(134 25 143); border-fuchsia-900border-color: rgb(112 26 117); border-fuchsia-950border-color: rgb(74 4 78); border-pink-50border-color: rgb(253 242 248); border-pink-100border-color: rgb(252 231 243); border-pink-200border-color: rgb(251 207 232); border-pink-300border-color: rgb(249 168 212); border-pink-400border-color: rgb(244 114 182); border-pink-500border-color: rgb(236 72 153); border-pink-600border-color: rgb(219 39 119); border-pink-700border-color: rgb(190 24 93); border-pink-800border-color: rgb(157 23 77); border-pink-900border-color: rgb(131 24 67); border-pink-950border-color: rgb(80 7 36); border-rose-50border-color: rgb(255 241 242); border-rose-100border-color: rgb(255 228 230); border-rose-200border-color: rgb(254 205 211); border-rose-300border-color: rgb(253 164 175); border-rose-400border-color: rgb(251 113 133); border-rose-500border-color: rgb(244 63 94); border-rose-600border-color: rgb(225 29 72); border-rose-700border-color: rgb(190 18 60); border-rose-800border-color: rgb(159 18 57); border-rose-900border-color: rgb(136 19 55); border-rose-950border-color: rgb(76 5 25); border-x-inheritborder-left-color: inherit; border-right-color: inherit; border-x-currentborder-left-color: currentColor; border-right-color: currentColor; border-x-transparentborder-left-color: transparent; border-right-color: transparent; border-x-blackborder-left-color: rgb(0 0 0); border-right-color: rgb(0 0 0); border-x-whiteborder-left-color: rgb(255 255 255); border-right-color: rgb(255 255 255); border-x-slate-50border-left-color: rgb(248 250 252); border-right-color: rgb(248 250 252); border-x-slate-100border-left-color: rgb(241 245 249); border-right-color: rgb(241 245 249); border-x-slate-200border-left-color: rgb(226 232 240); border-right-color: rgb(226 232 240); border-x-slate-300border-left-color: rgb(203 213 225); border-right-color: rgb(203 213 225); border-x-slate-400border-left-color: rgb(148 163 184); border-right-color: rgb(148 163 184); border-x-slate-500border-left-color: rgb(100 116 139); border-right-color: rgb(100 116 139); border-x-slate-600border-left-color: rgb(71 85 105); border-right-color: rgb(71 85 105); border-x-slate-700border-left-color: rgb(51 65 85); border-right-color: rgb(51 65 85); border-x-slate-800border-left-color: rgb(30 41 59); border-right-color: rgb(30 41 59); border-x-slate-900border-left-color: rgb(15 23 42); border-right-color: rgb(15 23 42); border-x-slate-950border-left-color: rgb(2 6 23); border-right-color: rgb(2 6 23); border-x-gray-50border-left-color: rgb(249 250 251); border-right-color: rgb(249 250 251); border-x-gray-100border-left-color: rgb(243 244 246); border-right-color: rgb(243 244 246); border-x-gray-200border-left-color: rgb(229 231 235); border-right-color: rgb(229 231 235); border-x-gray-300border-left-color: rgb(209 213 219); border-right-color: rgb(209 213 219); border-x-gray-400border-left-color: rgb(156 163 175); border-right-color: rgb(156 163 175); border-x-gray-500border-left-color: rgb(107 114 128); border-right-color: rgb(107 114 128); border-x-gray-600border-left-color: rgb(75 85 99); border-right-color: rgb(75 85 99); border-x-gray-700border-left-color: rgb(55 65 81); border-right-color: rgb(55 65 81); border-x-gray-800border-left-color: rgb(31 41 55); border-right-color: rgb(31 41 55); border-x-gray-900border-left-color: rgb(17 24 39); border-right-color: rgb(17 24 39); border-x-gray-950border-left-color: rgb(3 7 18); border-right-color: rgb(3 7 18); border-x-zinc-50border-left-color: rgb(250 250 250); border-right-color: rgb(250 250 250); border-x-zinc-100border-left-color: rgb(244 244 245); border-right-color: rgb(244 244 245); border-x-zinc-200border-left-color: rgb(228 228 231); border-right-color: rgb(228 228 231); border-x-zinc-300border-left-color: rgb(212 212 216); border-right-color: rgb(212 212 216); border-x-zinc-400border-left-color: rgb(161 161 170); border-right-color: rgb(161 161 170); border-x-zinc-500border-left-color: rgb(113 113 122); border-right-color: rgb(113 113 122); border-x-zinc-600border-left-color: rgb(82 82 91); border-right-color: rgb(82 82 91); border-x-zinc-700border-left-color: rgb(63 63 70); border-right-color: rgb(63 63 70); border-x-zinc-800border-left-color: rgb(39 39 42); border-right-color: rgb(39 39 42); border-x-zinc-900border-left-color: rgb(24 24 27); border-right-color: rgb(24 24 27); border-x-zinc-950border-left-color: rgb(9 9 11); border-right-color: rgb(9 9 11); border-x-neutral-50border-left-color: rgb(250 250 250); border-right-color: rgb(250 250 250); border-x-neutral-100border-left-color: rgb(245 245 245); border-right-color: rgb(245 245 245); border-x-neutral-200border-left-color: rgb(229 229 229); border-right-color: rgb(229 229 229); border-x-neutral-300border-left-color: rgb(212 212 212); border-right-color: rgb(212 212 212); border-x-neutral-400border-left-color: rgb(163 163 163); border-right-color: rgb(163 163 163); border-x-neutral-500border-left-color: rgb(115 115 115); border-right-color: rgb(115 115 115); border-x-neutral-600border-left-color: rgb(82 82 82); border-right-color: rgb(82 82 82); border-x-neutral-700border-left-color: rgb(64 64 64); border-right-color: rgb(64 64 64); border-x-neutral-800border-left-color: rgb(38 38 38); border-right-color: rgb(38 38 38); border-x-neutral-900border-left-color: rgb(23 23 23); border-right-color: rgb(23 23 23); border-x-neutral-950border-left-color: rgb(10 10 10); border-right-color: rgb(10 10 10); border-x-stone-50border-left-color: rgb(250 250 249); border-right-color: rgb(250 250 249); border-x-stone-100border-left-color: rgb(245 245 244); border-right-color: rgb(245 245 244); border-x-stone-200border-left-color: rgb(231 229 228); border-right-color: rgb(231 229 228); border-x-stone-300border-left-color: rgb(214 211 209); border-right-color: rgb(214 211 209); border-x-stone-400border-left-color: rgb(168 162 158); border-right-color: rgb(168 162 158); border-x-stone-500border-left-color: rgb(120 113 108); border-right-color: rgb(120 113 108); border-x-stone-600border-left-color: rgb(87 83 78); border-right-color: rgb(87 83 78); border-x-stone-700border-left-color: rgb(68 64 60); border-right-color: rgb(68 64 60); border-x-stone-800border-left-color: rgb(41 37 36); border-right-color: rgb(41 37 36); border-x-stone-900border-left-color: rgb(28 25 23); border-right-color: rgb(28 25 23); border-x-stone-950border-left-color: rgb(12 10 9); border-right-color: rgb(12 10 9); border-x-red-50border-left-color: rgb(254 242 242); border-right-color: rgb(254 242 242); border-x-red-100border-left-color: rgb(254 226 226); border-right-color: rgb(254 226 226); border-x-red-200border-left-color: rgb(254 202 202); border-right-color: rgb(254 202 202); border-x-red-300border-left-color: rgb(252 165 165); border-right-color: rgb(252 165 165); border-x-red-400border-left-color: rgb(248 113 113); border-right-color: rgb(248 113 113); border-x-red-500border-left-color: rgb(239 68 68); border-right-color: rgb(239 68 68); border-x-red-600border-left-color: rgb(220 38 38); border-right-color: rgb(220 38 38); border-x-red-700border-left-color: rgb(185 28 28); border-right-color: rgb(185 28 28); border-x-red-800border-left-color: rgb(153 27 27); border-right-color: rgb(153 27 27); border-x-red-900border-left-color: rgb(127 29 29); border-right-color: rgb(127 29 29); border-x-red-950border-left-color: rgb(69 10 10); border-right-color: rgb(69 10 10); border-x-orange-50border-left-color: rgb(255 247 237); border-right-color: rgb(255 247 237); border-x-orange-100border-left-color: rgb(255 237 213); border-right-color: rgb(255 237 213); border-x-orange-200border-left-color: rgb(254 215 170); border-right-color: rgb(254 215 170); border-x-orange-300border-left-color: rgb(253 186 116); border-right-color: rgb(253 186 116); border-x-orange-400border-left-color: rgb(251 146 60); border-right-color: rgb(251 146 60); border-x-orange-500border-left-color: rgb(249 115 22); border-right-color: rgb(249 115 22); border-x-orange-600border-left-color: rgb(234 88 12); border-right-color: rgb(234 88 12); border-x-orange-700border-left-color: rgb(194 65 12); border-right-color: rgb(194 65 12); border-x-orange-800border-left-color: rgb(154 52 18); border-right-color: rgb(154 52 18); border-x-orange-900border-left-color: rgb(124 45 18); border-right-color: rgb(124 45 18); border-x-orange-950border-left-color: rgb(67 20 7); border-right-color: rgb(67 20 7); border-x-amber-50border-left-color: rgb(255 251 235); border-right-color: rgb(255 251 235); border-x-amber-100border-left-color: rgb(254 243 199); border-right-color: rgb(254 243 199); border-x-amber-200border-left-color: rgb(253 230 138); border-right-color: rgb(253 230 138); border-x-amber-300border-left-color: rgb(252 211 77); border-right-color: rgb(252 211 77); border-x-amber-400border-left-color: rgb(251 191 36); border-right-color: rgb(251 191 36); border-x-amber-500border-left-color: rgb(245 158 11); border-right-color: rgb(245 158 11); border-x-amber-600border-left-color: rgb(217 119 6); border-right-color: rgb(217 119 6); border-x-amber-700border-left-color: rgb(180 83 9); border-right-color: rgb(180 83 9); border-x-amber-800border-left-color: rgb(146 64 14); border-right-color: rgb(146 64 14); border-x-amber-900border-left-color: rgb(120 53 15); border-right-color: rgb(120 53 15); border-x-amber-950border-left-color: rgb(69 26 3); border-right-color: rgb(69 26 3); border-x-yellow-50border-left-color: rgb(254 252 232); border-right-color: rgb(254 252 232); border-x-yellow-100border-left-color: rgb(254 249 195); border-right-color: rgb(254 249 195); border-x-yellow-200border-left-color: rgb(254 240 138); border-right-color: rgb(254 240 138); border-x-yellow-300border-left-color: rgb(253 224 71); border-right-color: rgb(253 224 71); border-x-yellow-400border-left-color: rgb(250 204 21); border-right-color: rgb(250 204 21); border-x-yellow-500border-left-color: rgb(234 179 8); border-right-color: rgb(234 179 8); border-x-yellow-600border-left-color: rgb(202 138 4); border-right-color: rgb(202 138 4); border-x-yellow-700border-left-color: rgb(161 98 7); border-right-color: rgb(161 98 7); border-x-yellow-800border-left-color: rgb(133 77 14); border-right-color: rgb(133 77 14); border-x-yellow-900border-left-color: rgb(113 63 18); border-right-color: rgb(113 63 18); border-x-yellow-950border-left-color: rgb(66 32 6); border-right-color: rgb(66 32 6); border-x-lime-50border-left-color: rgb(247 254 231); border-right-color: rgb(247 254 231); border-x-lime-100border-left-color: rgb(236 252 203); border-right-color: rgb(236 252 203); border-x-lime-200border-left-color: rgb(217 249 157); border-right-color: rgb(217 249 157); border-x-lime-300border-left-color: rgb(190 242 100); border-right-color: rgb(190 242 100); border-x-lime-400border-left-color: rgb(163 230 53); border-right-color: rgb(163 230 53); border-x-lime-500border-left-color: rgb(132 204 22); border-right-color: rgb(132 204 22); border-x-lime-600border-left-color: rgb(101 163 13); border-right-color: rgb(101 163 13); border-x-lime-700border-left-color: rgb(77 124 15); border-right-color: rgb(77 124 15); border-x-lime-800border-left-color: rgb(63 98 18); border-right-color: rgb(63 98 18); border-x-lime-900border-left-color: rgb(54 83 20); border-right-color: rgb(54 83 20); border-x-lime-950border-left-color: rgb(26 46 5); border-right-color: rgb(26 46 5); border-x-green-50border-left-color: rgb(240 253 244); border-right-color: rgb(240 253 244); border-x-green-100border-left-color: rgb(220 252 231); border-right-color: rgb(220 252 231); border-x-green-200border-left-color: rgb(187 247 208); border-right-color: rgb(187 247 208); border-x-green-300border-left-color: rgb(134 239 172); border-right-color: rgb(134 239 172); border-x-green-400border-left-color: rgb(74 222 128); border-right-color: rgb(74 222 128); border-x-green-500border-left-color: rgb(34 197 94); border-right-color: rgb(34 197 94); border-x-green-600border-left-color: rgb(22 163 74); border-right-color: rgb(22 163 74); border-x-green-700border-left-color: rgb(21 128 61); border-right-color: rgb(21 128 61); border-x-green-800border-left-color: rgb(22 101 52); border-right-color: rgb(22 101 52); border-x-green-900border-left-color: rgb(20 83 45); border-right-color: rgb(20 83 45); border-x-green-950border-left-color: rgb(5 46 22); border-right-color: rgb(5 46 22); border-x-emerald-50border-left-color: rgb(236 253 245); border-right-color: rgb(236 253 245); border-x-emerald-100border-left-color: rgb(209 250 229); border-right-color: rgb(209 250 229); border-x-emerald-200border-left-color: rgb(167 243 208); border-right-color: rgb(167 243 208); border-x-emerald-300border-left-color: rgb(110 231 183); border-right-color: rgb(110 231 183); border-x-emerald-400border-left-color: rgb(52 211 153); border-right-color: rgb(52 211 153); border-x-emerald-500border-left-color: rgb(16 185 129); border-right-color: rgb(16 185 129); border-x-emerald-600border-left-color: rgb(5 150 105); border-right-color: rgb(5 150 105); border-x-emerald-700border-left-color: rgb(4 120 87); border-right-color: rgb(4 120 87); border-x-emerald-800border-left-color: rgb(6 95 70); border-right-color: rgb(6 95 70); border-x-emerald-900border-left-color: rgb(6 78 59); border-right-color: rgb(6 78 59); border-x-emerald-950border-left-color: rgb(2 44 34); border-right-color: rgb(2 44 34); border-x-teal-50border-left-color: rgb(240 253 250); border-right-color: rgb(240 253 250); border-x-teal-100border-left-color: rgb(204 251 241); border-right-color: rgb(204 251 241); border-x-teal-200border-left-color: rgb(153 246 228); border-right-color: rgb(153 246 228); border-x-teal-300border-left-color: rgb(94 234 212); border-right-color: rgb(94 234 212); border-x-teal-400border-left-color: rgb(45 212 191); border-right-color: rgb(45 212 191); border-x-teal-500border-left-color: rgb(20 184 166); border-right-color: rgb(20 184 166); border-x-teal-600border-left-color: rgb(13 148 136); border-right-color: rgb(13 148 136); border-x-teal-700border-left-color: rgb(15 118 110); border-right-color: rgb(15 118 110); border-x-teal-800border-left-color: rgb(17 94 89); border-right-color: rgb(17 94 89); border-x-teal-900border-left-color: rgb(19 78 74); border-right-color: rgb(19 78 74); border-x-teal-950border-left-color: rgb(4 47 46); border-right-color: rgb(4 47 46); border-x-cyan-50border-left-color: rgb(236 254 255); border-right-color: rgb(236 254 255); border-x-cyan-100border-left-color: rgb(207 250 254); border-right-color: rgb(207 250 254); border-x-cyan-200border-left-color: rgb(165 243 252); border-right-color: rgb(165 243 252); border-x-cyan-300border-left-color: rgb(103 232 249); border-right-color: rgb(103 232 249); border-x-cyan-400border-left-color: rgb(34 211 238); border-right-color: rgb(34 211 238); border-x-cyan-500border-left-color: rgb(6 182 212); border-right-color: rgb(6 182 212); border-x-cyan-600border-left-color: rgb(8 145 178); border-right-color: rgb(8 145 178); border-x-cyan-700border-left-color: rgb(14 116 144); border-right-color: rgb(14 116 144); border-x-cyan-800border-left-color: rgb(21 94 117); border-right-color: rgb(21 94 117); border-x-cyan-900border-left-color: rgb(22 78 99); border-right-color: rgb(22 78 99); border-x-cyan-950border-left-color: rgb(8 51 68); border-right-color: rgb(8 51 68); border-x-sky-50border-left-color: rgb(240 249 255); border-right-color: rgb(240 249 255); border-x-sky-100border-left-color: rgb(224 242 254); border-right-color: rgb(224 242 254); border-x-sky-200border-left-color: rgb(186 230 253); border-right-color: rgb(186 230 253); border-x-sky-300border-left-color: rgb(125 211 252); border-right-color: rgb(125 211 252); border-x-sky-400border-left-color: rgb(56 189 248); border-right-color: rgb(56 189 248); border-x-sky-500border-left-color: rgb(14 165 233); border-right-color: rgb(14 165 233); border-x-sky-600border-left-color: rgb(2 132 199); border-right-color: rgb(2 132 199); border-x-sky-700border-left-color: rgb(3 105 161); border-right-color: rgb(3 105 161); border-x-sky-800border-left-color: rgb(7 89 133); border-right-color: rgb(7 89 133); border-x-sky-900border-left-color: rgb(12 74 110); border-right-color: rgb(12 74 110); border-x-sky-950border-left-color: rgb(8 47 73); border-right-color: rgb(8 47 73); border-x-blue-50border-left-color: rgb(239 246 255); border-right-color: rgb(239 246 255); border-x-blue-100border-left-color: rgb(219 234 254); border-right-color: rgb(219 234 254); border-x-blue-200border-left-color: rgb(191 219 254); border-right-color: rgb(191 219 254); border-x-blue-300border-left-color: rgb(147 197 253); border-right-color: rgb(147 197 253); border-x-blue-400border-left-color: rgb(96 165 250); border-right-color: rgb(96 165 250); border-x-blue-500border-left-color: rgb(59 130 246); border-right-color: rgb(59 130 246); border-x-blue-600border-left-color: rgb(37 99 235); border-right-color: rgb(37 99 235); border-x-blue-700border-left-color: rgb(29 78 216); border-right-color: rgb(29 78 216); border-x-blue-800border-left-color: rgb(30 64 175); border-right-color: rgb(30 64 175); border-x-blue-900border-left-color: rgb(30 58 138); border-right-color: rgb(30 58 138); border-x-blue-950border-left-color: rgb(23 37 84); border-right-color: rgb(23 37 84); border-x-indigo-50border-left-color: rgb(238 242 255); border-right-color: rgb(238 242 255); border-x-indigo-100border-left-color: rgb(224 231 255); border-right-color: rgb(224 231 255); border-x-indigo-200border-left-color: rgb(199 210 254); border-right-color: rgb(199 210 254); border-x-indigo-300border-left-color: rgb(165 180 252); border-right-color: rgb(165 180 252); border-x-indigo-400border-left-color: rgb(129 140 248); border-right-color: rgb(129 140 248); border-x-indigo-500border-left-color: rgb(99 102 241); border-right-color: rgb(99 102 241); border-x-indigo-600border-left-color: rgb(79 70 229); border-right-color: rgb(79 70 229); border-x-indigo-700border-left-color: rgb(67 56 202); border-right-color: rgb(67 56 202); border-x-indigo-800border-left-color: rgb(55 48 163); border-right-color: rgb(55 48 163); border-x-indigo-900border-left-color: rgb(49 46 129); border-right-color: rgb(49 46 129); border-x-indigo-950border-left-color: rgb(30 27 75); border-right-color: rgb(30 27 75); border-x-violet-50border-left-color: rgb(245 243 255); border-right-color: rgb(245 243 255); border-x-violet-100border-left-color: rgb(237 233 254); border-right-color: rgb(237 233 254); border-x-violet-200border-left-color: rgb(221 214 254); border-right-color: rgb(221 214 254); border-x-violet-300border-left-color: rgb(196 181 253); border-right-color: rgb(196 181 253); border-x-violet-400border-left-color: rgb(167 139 250); border-right-color: rgb(167 139 250); border-x-violet-500border-left-color: rgb(139 92 246); border-right-color: rgb(139 92 246); border-x-violet-600border-left-color: rgb(124 58 237); border-right-color: rgb(124 58 237); border-x-violet-700border-left-color: rgb(109 40 217); border-right-color: rgb(109 40 217); border-x-violet-800border-left-color: rgb(91 33 182); border-right-color: rgb(91 33 182); border-x-violet-900border-left-color: rgb(76 29 149); border-right-color: rgb(76 29 149); border-x-violet-950border-left-color: rgb(46 16 101); border-right-color: rgb(46 16 101); border-x-purple-50border-left-color: rgb(250 245 255); border-right-color: rgb(250 245 255); border-x-purple-100border-left-color: rgb(243 232 255); border-right-color: rgb(243 232 255); border-x-purple-200border-left-color: rgb(233 213 255); border-right-color: rgb(233 213 255); border-x-purple-300border-left-color: rgb(216 180 254); border-right-color: rgb(216 180 254); border-x-purple-400border-left-color: rgb(192 132 252); border-right-color: rgb(192 132 252); border-x-purple-500border-left-color: rgb(168 85 247); border-right-color: rgb(168 85 247); border-x-purple-600border-left-color: rgb(147 51 234); border-right-color: rgb(147 51 234); border-x-purple-700border-left-color: rgb(126 34 206); border-right-color: rgb(126 34 206); border-x-purple-800border-left-color: rgb(107 33 168); border-right-color: rgb(107 33 168); border-x-purple-900border-left-color: rgb(88 28 135); border-right-color: rgb(88 28 135); border-x-purple-950border-left-color: rgb(59 7 100); border-right-color: rgb(59 7 100); border-x-fuchsia-50border-left-color: rgb(253 244 255); border-right-color: rgb(253 244 255); border-x-fuchsia-100border-left-color: rgb(250 232 255); border-right-color: rgb(250 232 255); border-x-fuchsia-200border-left-color: rgb(245 208 254); border-right-color: rgb(245 208 254); border-x-fuchsia-300border-left-color: rgb(240 171 252); border-right-color: rgb(240 171 252); border-x-fuchsia-400border-left-color: rgb(232 121 249); border-right-color: rgb(232 121 249); border-x-fuchsia-500border-left-color: rgb(217 70 239); border-right-color: rgb(217 70 239); border-x-fuchsia-600border-left-color: rgb(192 38 211); border-right-color: rgb(192 38 211); border-x-fuchsia-700border-left-color: rgb(162 28 175); border-right-color: rgb(162 28 175); border-x-fuchsia-800border-left-color: rgb(134 25 143); border-right-color: rgb(134 25 143); border-x-fuchsia-900border-left-color: rgb(112 26 117); border-right-color: rgb(112 26 117); border-x-fuchsia-950border-left-color: rgb(74 4 78); border-right-color: rgb(74 4 78); border-x-pink-50border-left-color: rgb(253 242 248); border-right-color: rgb(253 242 248); border-x-pink-100border-left-color: rgb(252 231 243); border-right-color: rgb(252 231 243); border-x-pink-200border-left-color: rgb(251 207 232); border-right-color: rgb(251 207 232); border-x-pink-300border-left-color: rgb(249 168 212); border-right-color: rgb(249 168 212); border-x-pink-400border-left-color: rgb(244 114 182); border-right-color: rgb(244 114 182); border-x-pink-500border-left-color: rgb(236 72 153); border-right-color: rgb(236 72 153); border-x-pink-600border-left-color: rgb(219 39 119); border-right-color: rgb(219 39 119); border-x-pink-700border-left-color: rgb(190 24 93); border-right-color: rgb(190 24 93); border-x-pink-800border-left-color: rgb(157 23 77); border-right-color: rgb(157 23 77); border-x-pink-900border-left-color: rgb(131 24 67); border-right-color: rgb(131 24 67); border-x-pink-950border-left-color: rgb(80 7 36); border-right-color: rgb(80 7 36); border-x-rose-50border-left-color: rgb(255 241 242); border-right-color: rgb(255 241 242); border-x-rose-100border-left-color: rgb(255 228 230); border-right-color: rgb(255 228 230); border-x-rose-200border-left-color: rgb(254 205 211); border-right-color: rgb(254 205 211); border-x-rose-300border-left-color: rgb(253 164 175); border-right-color: rgb(253 164 175); border-x-rose-400border-left-color: rgb(251 113 133); border-right-color: rgb(251 113 133); border-x-rose-500border-left-color: rgb(244 63 94); border-right-color: rgb(244 63 94); border-x-rose-600border-left-color: rgb(225 29 72); border-right-color: rgb(225 29 72); border-x-rose-700border-left-color: rgb(190 18 60); border-right-color: rgb(190 18 60); border-x-rose-800border-left-color: rgb(159 18 57); border-right-color: rgb(159 18 57); border-x-rose-900border-left-color: rgb(136 19 55); border-right-color: rgb(136 19 55); border-x-rose-950border-left-color: rgb(76 5 25); border-right-color: rgb(76 5 25); border-y-inheritborder-top-color: inherit; border-bottom-color: inherit; border-y-currentborder-top-color: currentColor; border-bottom-color: currentColor; border-y-transparentborder-top-color: transparent; border-bottom-color: transparent; border-y-blackborder-top-color: rgb(0 0 0); border-bottom-color: rgb(0 0 0); border-y-whiteborder-top-color: rgb(255 255 255); border-bottom-color: rgb(255 255 255); border-y-slate-50border-top-color: rgb(248 250 252); border-bottom-color: rgb(248 250 252); border-y-slate-100border-top-color: rgb(241 245 249); border-bottom-color: rgb(241 245 249); border-y-slate-200border-top-color: rgb(226 232 240); border-bottom-color: rgb(226 232 240); border-y-slate-300border-top-color: rgb(203 213 225); border-bottom-color: rgb(203 213 225); border-y-slate-400border-top-color: rgb(148 163 184); border-bottom-color: rgb(148 163 184); border-y-slate-500border-top-color: rgb(100 116 139); border-bottom-color: rgb(100 116 139); border-y-slate-600border-top-color: rgb(71 85 105); border-bottom-color: rgb(71 85 105); border-y-slate-700border-top-color: rgb(51 65 85); border-bottom-color: rgb(51 65 85); border-y-slate-800border-top-color: rgb(30 41 59); border-bottom-color: rgb(30 41 59); border-y-slate-900border-top-color: rgb(15 23 42); border-bottom-color: rgb(15 23 42); border-y-slate-950border-top-color: rgb(2 6 23); border-bottom-color: rgb(2 6 23); border-y-gray-50border-top-color: rgb(249 250 251); border-bottom-color: rgb(249 250 251); border-y-gray-100border-top-color: rgb(243 244 246); border-bottom-color: rgb(243 244 246); border-y-gray-200border-top-color: rgb(229 231 235); border-bottom-color: rgb(229 231 235); border-y-gray-300border-top-color: rgb(209 213 219); border-bottom-color: rgb(209 213 219); border-y-gray-400border-top-color: rgb(156 163 175); border-bottom-color: rgb(156 163 175); border-y-gray-500border-top-color: rgb(107 114 128); border-bottom-color: rgb(107 114 128); border-y-gray-600border-top-color: rgb(75 85 99); border-bottom-color: rgb(75 85 99); border-y-gray-700border-top-color: rgb(55 65 81); border-bottom-color: rgb(55 65 81); border-y-gray-800border-top-color: rgb(31 41 55); border-bottom-color: rgb(31 41 55); border-y-gray-900border-top-color: rgb(17 24 39); border-bottom-color: rgb(17 24 39); border-y-gray-950border-top-color: rgb(3 7 18); border-bottom-color: rgb(3 7 18); border-y-zinc-50border-top-color: rgb(250 250 250); border-bottom-color: rgb(250 250 250); border-y-zinc-100border-top-color: rgb(244 244 245); border-bottom-color: rgb(244 244 245); border-y-zinc-200border-top-color: rgb(228 228 231); border-bottom-color: rgb(228 228 231); border-y-zinc-300border-top-color: rgb(212 212 216); border-bottom-color: rgb(212 212 216); border-y-zinc-400border-top-color: rgb(161 161 170); border-bottom-color: rgb(161 161 170); border-y-zinc-500border-top-color: rgb(113 113 122); border-bottom-color: rgb(113 113 122); border-y-zinc-600border-top-color: rgb(82 82 91); border-bottom-color: rgb(82 82 91); border-y-zinc-700border-top-color: rgb(63 63 70); border-bottom-color: rgb(63 63 70); border-y-zinc-800border-top-color: rgb(39 39 42); border-bottom-color: rgb(39 39 42); border-y-zinc-900border-top-color: rgb(24 24 27); border-bottom-color: rgb(24 24 27); border-y-zinc-950border-top-color: rgb(9 9 11); border-bottom-color: rgb(9 9 11); border-y-neutral-50border-top-color: rgb(250 250 250); border-bottom-color: rgb(250 250 250); border-y-neutral-100border-top-color: rgb(245 245 245); border-bottom-color: rgb(245 245 245); border-y-neutral-200border-top-color: rgb(229 229 229); border-bottom-color: rgb(229 229 229); border-y-neutral-300border-top-color: rgb(212 212 212); border-bottom-color: rgb(212 212 212); border-y-neutral-400border-top-color: rgb(163 163 163); border-bottom-color: rgb(163 163 163); border-y-neutral-500border-top-color: rgb(115 115 115); border-bottom-color: rgb(115 115 115); border-y-neutral-600border-top-color: rgb(82 82 82); border-bottom-color: rgb(82 82 82); border-y-neutral-700border-top-color: rgb(64 64 64); border-bottom-color: rgb(64 64 64); border-y-neutral-800border-top-color: rgb(38 38 38); border-bottom-color: rgb(38 38 38); border-y-neutral-900border-top-color: rgb(23 23 23); border-bottom-color: rgb(23 23 23); border-y-neutral-950border-top-color: rgb(10 10 10); border-bottom-color: rgb(10 10 10); border-y-stone-50border-top-color: rgb(250 250 249); border-bottom-color: rgb(250 250 249); border-y-stone-100border-top-color: rgb(245 245 244); border-bottom-color: rgb(245 245 244); border-y-stone-200border-top-color: rgb(231 229 228); border-bottom-color: rgb(231 229 228); border-y-stone-300border-top-color: rgb(214 211 209); border-bottom-color: rgb(214 211 209); border-y-stone-400border-top-color: rgb(168 162 158); border-bottom-color: rgb(168 162 158); border-y-stone-500border-top-color: rgb(120 113 108); border-bottom-color: rgb(120 113 108); border-y-stone-600border-top-color: rgb(87 83 78); border-bottom-color: rgb(87 83 78); border-y-stone-700border-top-color: rgb(68 64 60); border-bottom-color: rgb(68 64 60); border-y-stone-800border-top-color: rgb(41 37 36); border-bottom-color: rgb(41 37 36); border-y-stone-900border-top-color: rgb(28 25 23); border-bottom-color: rgb(28 25 23); border-y-stone-950border-top-color: rgb(12 10 9); border-bottom-color: rgb(12 10 9); border-y-red-50border-top-color: rgb(254 242 242); border-bottom-color: rgb(254 242 242); border-y-red-100border-top-color: rgb(254 226 226); border-bottom-color: rgb(254 226 226); border-y-red-200border-top-color: rgb(254 202 202); border-bottom-color: rgb(254 202 202); border-y-red-300border-top-color: rgb(252 165 165); border-bottom-color: rgb(252 165 165); border-y-red-400border-top-color: rgb(248 113 113); border-bottom-color: rgb(248 113 113); border-y-red-500border-top-color: rgb(239 68 68); border-bottom-color: rgb(239 68 68); border-y-red-600border-top-color: rgb(220 38 38); border-bottom-color: rgb(220 38 38); border-y-red-700border-top-color: rgb(185 28 28); border-bottom-color: rgb(185 28 28); border-y-red-800border-top-color: rgb(153 27 27); border-bottom-color: rgb(153 27 27); border-y-red-900border-top-color: rgb(127 29 29); border-bottom-color: rgb(127 29 29); border-y-red-950border-top-color: rgb(69 10 10); border-bottom-color: rgb(69 10 10); border-y-orange-50border-top-color: rgb(255 247 237); border-bottom-color: rgb(255 247 237); border-y-orange-100border-top-color: rgb(255 237 213); border-bottom-color: rgb(255 237 213); border-y-orange-200border-top-color: rgb(254 215 170); border-bottom-color: rgb(254 215 170); border-y-orange-300border-top-color: rgb(253 186 116); border-bottom-color: rgb(253 186 116); border-y-orange-400border-top-color: rgb(251 146 60); border-bottom-color: rgb(251 146 60); border-y-orange-500border-top-color: rgb(249 115 22); border-bottom-color: rgb(249 115 22); border-y-orange-600border-top-color: rgb(234 88 12); border-bottom-color: rgb(234 88 12); border-y-orange-700border-top-color: rgb(194 65 12); border-bottom-color: rgb(194 65 12); border-y-orange-800border-top-color: rgb(154 52 18); border-bottom-color: rgb(154 52 18); border-y-orange-900border-top-color: rgb(124 45 18); border-bottom-color: rgb(124 45 18); border-y-orange-950border-top-color: rgb(67 20 7); border-bottom-color: rgb(67 20 7); border-y-amber-50border-top-color: rgb(255 251 235); border-bottom-color: rgb(255 251 235); border-y-amber-100border-top-color: rgb(254 243 199); border-bottom-color: rgb(254 243 199); border-y-amber-200border-top-color: rgb(253 230 138); border-bottom-color: rgb(253 230 138); border-y-amber-300border-top-color: rgb(252 211 77); border-bottom-color: rgb(252 211 77); border-y-amber-400border-top-color: rgb(251 191 36); border-bottom-color: rgb(251 191 36); border-y-amber-500border-top-color: rgb(245 158 11); border-bottom-color: rgb(245 158 11); border-y-amber-600border-top-color: rgb(217 119 6); border-bottom-color: rgb(217 119 6); border-y-amber-700border-top-color: rgb(180 83 9); border-bottom-color: rgb(180 83 9); border-y-amber-800border-top-color: rgb(146 64 14); border-bottom-color: rgb(146 64 14); border-y-amber-900border-top-color: rgb(120 53 15); border-bottom-color: rgb(120 53 15); border-y-amber-950border-top-color: rgb(69 26 3); border-bottom-color: rgb(69 26 3); border-y-yellow-50border-top-color: rgb(254 252 232); border-bottom-color: rgb(254 252 232); border-y-yellow-100border-top-color: rgb(254 249 195); border-bottom-color: rgb(254 249 195); border-y-yellow-200border-top-color: rgb(254 240 138); border-bottom-color: rgb(254 240 138); border-y-yellow-300border-top-color: rgb(253 224 71); border-bottom-color: rgb(253 224 71); border-y-yellow-400border-top-color: rgb(250 204 21); border-bottom-color: rgb(250 204 21); border-y-yellow-500border-top-color: rgb(234 179 8); border-bottom-color: rgb(234 179 8); border-y-yellow-600border-top-color: rgb(202 138 4); border-bottom-color: rgb(202 138 4); border-y-yellow-700border-top-color: rgb(161 98 7); border-bottom-color: rgb(161 98 7); border-y-yellow-800border-top-color: rgb(133 77 14); border-bottom-color: rgb(133 77 14); border-y-yellow-900border-top-color: rgb(113 63 18); border-bottom-color: rgb(113 63 18); border-y-yellow-950border-top-color: rgb(66 32 6); border-bottom-color: rgb(66 32 6); border-y-lime-50border-top-color: rgb(247 254 231); border-bottom-color: rgb(247 254 231); border-y-lime-100border-top-color: rgb(236 252 203); border-bottom-color: rgb(236 252 203); border-y-lime-200border-top-color: rgb(217 249 157); border-bottom-color: rgb(217 249 157); border-y-lime-300border-top-color: rgb(190 242 100); border-bottom-color: rgb(190 242 100); border-y-lime-400border-top-color: rgb(163 230 53); border-bottom-color: rgb(163 230 53); border-y-lime-500border-top-color: rgb(132 204 22); border-bottom-color: rgb(132 204 22); border-y-lime-600border-top-color: rgb(101 163 13); border-bottom-color: rgb(101 163 13); border-y-lime-700border-top-color: rgb(77 124 15); border-bottom-color: rgb(77 124 15); border-y-lime-800border-top-color: rgb(63 98 18); border-bottom-color: rgb(63 98 18); border-y-lime-900border-top-color: rgb(54 83 20); border-bottom-color: rgb(54 83 20); border-y-lime-950border-top-color: rgb(26 46 5); border-bottom-color: rgb(26 46 5); border-y-green-50border-top-color: rgb(240 253 244); border-bottom-color: rgb(240 253 244); border-y-green-100border-top-color: rgb(220 252 231); border-bottom-color: rgb(220 252 231); border-y-green-200border-top-color: rgb(187 247 208); border-bottom-color: rgb(187 247 208); border-y-green-300border-top-color: rgb(134 239 172); border-bottom-color: rgb(134 239 172); border-y-green-400border-top-color: rgb(74 222 128); border-bottom-color: rgb(74 222 128); border-y-green-500border-top-color: rgb(34 197 94); border-bottom-color: rgb(34 197 94); border-y-green-600border-top-color: rgb(22 163 74); border-bottom-color: rgb(22 163 74); border-y-green-700border-top-color: rgb(21 128 61); border-bottom-color: rgb(21 128 61); border-y-green-800border-top-color: rgb(22 101 52); border-bottom-color: rgb(22 101 52); border-y-green-900border-top-color: rgb(20 83 45); border-bottom-color: rgb(20 83 45); border-y-green-950border-top-color: rgb(5 46 22); border-bottom-color: rgb(5 46 22); border-y-emerald-50border-top-color: rgb(236 253 245); border-bottom-color: rgb(236 253 245); border-y-emerald-100border-top-color: rgb(209 250 229); border-bottom-color: rgb(209 250 229); border-y-emerald-200border-top-color: rgb(167 243 208); border-bottom-color: rgb(167 243 208); border-y-emerald-300border-top-color: rgb(110 231 183); border-bottom-color: rgb(110 231 183); border-y-emerald-400border-top-color: rgb(52 211 153); border-bottom-color: rgb(52 211 153); border-y-emerald-500border-top-color: rgb(16 185 129); border-bottom-color: rgb(16 185 129); border-y-emerald-600border-top-color: rgb(5 150 105); border-bottom-color: rgb(5 150 105); border-y-emerald-700border-top-color: rgb(4 120 87); border-bottom-color: rgb(4 120 87); border-y-emerald-800border-top-color: rgb(6 95 70); border-bottom-color: rgb(6 95 70); border-y-emerald-900border-top-color: rgb(6 78 59); border-bottom-color: rgb(6 78 59); border-y-emerald-950border-top-color: rgb(2 44 34); border-bottom-color: rgb(2 44 34); border-y-teal-50border-top-color: rgb(240 253 250); border-bottom-color: rgb(240 253 250); border-y-teal-100border-top-color: rgb(204 251 241); border-bottom-color: rgb(204 251 241); border-y-teal-200border-top-color: rgb(153 246 228); border-bottom-color: rgb(153 246 228); border-y-teal-300border-top-color: rgb(94 234 212); border-bottom-color: rgb(94 234 212); border-y-teal-400border-top-color: rgb(45 212 191); border-bottom-color: rgb(45 212 191); border-y-teal-500border-top-color: rgb(20 184 166); border-bottom-color: rgb(20 184 166); border-y-teal-600border-top-color: rgb(13 148 136); border-bottom-color: rgb(13 148 136); border-y-teal-700border-top-color: rgb(15 118 110); border-bottom-color: rgb(15 118 110); border-y-teal-800border-top-color: rgb(17 94 89); border-bottom-color: rgb(17 94 89); border-y-teal-900border-top-color: rgb(19 78 74); border-bottom-color: rgb(19 78 74); border-y-teal-950border-top-color: rgb(4 47 46); border-bottom-color: rgb(4 47 46); border-y-cyan-50border-top-color: rgb(236 254 255); border-bottom-color: rgb(236 254 255); border-y-cyan-100border-top-color: rgb(207 250 254); border-bottom-color: rgb(207 250 254); border-y-cyan-200border-top-color: rgb(165 243 252); border-bottom-color: rgb(165 243 252); border-y-cyan-300border-top-color: rgb(103 232 249); border-bottom-color: rgb(103 232 249); border-y-cyan-400border-top-color: rgb(34 211 238); border-bottom-color: rgb(34 211 238); border-y-cyan-500border-top-color: rgb(6 182 212); border-bottom-color: rgb(6 182 212); border-y-cyan-600border-top-color: rgb(8 145 178); border-bottom-color: rgb(8 145 178); border-y-cyan-700border-top-color: rgb(14 116 144); border-bottom-color: rgb(14 116 144); border-y-cyan-800border-top-color: rgb(21 94 117); border-bottom-color: rgb(21 94 117); border-y-cyan-900border-top-color: rgb(22 78 99); border-bottom-color: rgb(22 78 99); border-y-cyan-950border-top-color: rgb(8 51 68); border-bottom-color: rgb(8 51 68); border-y-sky-50border-top-color: rgb(240 249 255); border-bottom-color: rgb(240 249 255); border-y-sky-100border-top-color: rgb(224 242 254); border-bottom-color: rgb(224 242 254); border-y-sky-200border-top-color: rgb(186 230 253); border-bottom-color: rgb(186 230 253); border-y-sky-300border-top-color: rgb(125 211 252); border-bottom-color: rgb(125 211 252); border-y-sky-400border-top-color: rgb(56 189 248); border-bottom-color: rgb(56 189 248); border-y-sky-500border-top-color: rgb(14 165 233); border-bottom-color: rgb(14 165 233); border-y-sky-600border-top-color: rgb(2 132 199); border-bottom-color: rgb(2 132 199); border-y-sky-700border-top-color: rgb(3 105 161); border-bottom-color: rgb(3 105 161); border-y-sky-800border-top-color: rgb(7 89 133); border-bottom-color: rgb(7 89 133); border-y-sky-900border-top-color: rgb(12 74 110); border-bottom-color: rgb(12 74 110); border-y-sky-950border-top-color: rgb(8 47 73); border-bottom-color: rgb(8 47 73); border-y-blue-50border-top-color: rgb(239 246 255); border-bottom-color: rgb(239 246 255); border-y-blue-100border-top-color: rgb(219 234 254); border-bottom-color: rgb(219 234 254); border-y-blue-200border-top-color: rgb(191 219 254); border-bottom-color: rgb(191 219 254); border-y-blue-300border-top-color: rgb(147 197 253); border-bottom-color: rgb(147 197 253); border-y-blue-400border-top-color: rgb(96 165 250); border-bottom-color: rgb(96 165 250); border-y-blue-500border-top-color: rgb(59 130 246); border-bottom-color: rgb(59 130 246); border-y-blue-600border-top-color: rgb(37 99 235); border-bottom-color: rgb(37 99 235); border-y-blue-700border-top-color: rgb(29 78 216); border-bottom-color: rgb(29 78 216); border-y-blue-800border-top-color: rgb(30 64 175); border-bottom-color: rgb(30 64 175); border-y-blue-900border-top-color: rgb(30 58 138); border-bottom-color: rgb(30 58 138); border-y-blue-950border-top-color: rgb(23 37 84); border-bottom-color: rgb(23 37 84); border-y-indigo-50border-top-color: rgb(238 242 255); border-bottom-color: rgb(238 242 255); border-y-indigo-100border-top-color: rgb(224 231 255); border-bottom-color: rgb(224 231 255); border-y-indigo-200border-top-color: rgb(199 210 254); border-bottom-color: rgb(199 210 254); border-y-indigo-300border-top-color: rgb(165 180 252); border-bottom-color: rgb(165 180 252); border-y-indigo-400border-top-color: rgb(129 140 248); border-bottom-color: rgb(129 140 248); border-y-indigo-500border-top-color: rgb(99 102 241); border-bottom-color: rgb(99 102 241); border-y-indigo-600border-top-color: rgb(79 70 229); border-bottom-color: rgb(79 70 229); border-y-indigo-700border-top-color: rgb(67 56 202); border-bottom-color: rgb(67 56 202); border-y-indigo-800border-top-color: rgb(55 48 163); border-bottom-color: rgb(55 48 163); border-y-indigo-900border-top-color: rgb(49 46 129); border-bottom-color: rgb(49 46 129); border-y-indigo-950border-top-color: rgb(30 27 75); border-bottom-color: rgb(30 27 75); border-y-violet-50border-top-color: rgb(245 243 255); border-bottom-color: rgb(245 243 255); border-y-violet-100border-top-color: rgb(237 233 254); border-bottom-color: rgb(237 233 254); border-y-violet-200border-top-color: rgb(221 214 254); border-bottom-color: rgb(221 214 254); border-y-violet-300border-top-color: rgb(196 181 253); border-bottom-color: rgb(196 181 253); border-y-violet-400border-top-color: rgb(167 139 250); border-bottom-color: rgb(167 139 250); border-y-violet-500border-top-color: rgb(139 92 246); border-bottom-color: rgb(139 92 246); border-y-violet-600border-top-color: rgb(124 58 237); border-bottom-color: rgb(124 58 237); border-y-violet-700border-top-color: rgb(109 40 217); border-bottom-color: rgb(109 40 217); border-y-violet-800border-top-color: rgb(91 33 182); border-bottom-color: rgb(91 33 182); border-y-violet-900border-top-color: rgb(76 29 149); border-bottom-color: rgb(76 29 149); border-y-violet-950border-top-color: rgb(46 16 101); border-bottom-color: rgb(46 16 101); border-y-purple-50border-top-color: rgb(250 245 255); border-bottom-color: rgb(250 245 255); border-y-purple-100border-top-color: rgb(243 232 255); border-bottom-color: rgb(243 232 255); border-y-purple-200border-top-color: rgb(233 213 255); border-bottom-color: rgb(233 213 255); border-y-purple-300border-top-color: rgb(216 180 254); border-bottom-color: rgb(216 180 254); border-y-purple-400border-top-color: rgb(192 132 252); border-bottom-color: rgb(192 132 252); border-y-purple-500border-top-color: rgb(168 85 247); border-bottom-color: rgb(168 85 247); border-y-purple-600border-top-color: rgb(147 51 234); border-bottom-color: rgb(147 51 234); border-y-purple-700border-top-color: rgb(126 34 206); border-bottom-color: rgb(126 34 206); border-y-purple-800border-top-color: rgb(107 33 168); border-bottom-color: rgb(107 33 168); border-y-purple-900border-top-color: rgb(88 28 135); border-bottom-color: rgb(88 28 135); border-y-purple-950border-top-color: rgb(59 7 100); border-bottom-color: rgb(59 7 100); border-y-fuchsia-50border-top-color: rgb(253 244 255); border-bottom-color: rgb(253 244 255); border-y-fuchsia-100border-top-color: rgb(250 232 255); border-bottom-color: rgb(250 232 255); border-y-fuchsia-200border-top-color: rgb(245 208 254); border-bottom-color: rgb(245 208 254); border-y-fuchsia-300border-top-color: rgb(240 171 252); border-bottom-color: rgb(240 171 252); border-y-fuchsia-400border-top-color: rgb(232 121 249); border-bottom-color: rgb(232 121 249); border-y-fuchsia-500border-top-color: rgb(217 70 239); border-bottom-color: rgb(217 70 239); border-y-fuchsia-600border-top-color: rgb(192 38 211); border-bottom-color: rgb(192 38 211); border-y-fuchsia-700border-top-color: rgb(162 28 175); border-bottom-color: rgb(162 28 175); border-y-fuchsia-800border-top-color: rgb(134 25 143); border-bottom-color: rgb(134 25 143); border-y-fuchsia-900border-top-color: rgb(112 26 117); border-bottom-color: rgb(112 26 117); border-y-fuchsia-950border-top-color: rgb(74 4 78); border-bottom-color: rgb(74 4 78); border-y-pink-50border-top-color: rgb(253 242 248); border-bottom-color: rgb(253 242 248); border-y-pink-100border-top-color: rgb(252 231 243); border-bottom-color: rgb(252 231 243); border-y-pink-200border-top-color: rgb(251 207 232); border-bottom-color: rgb(251 207 232); border-y-pink-300border-top-color: rgb(249 168 212); border-bottom-color: rgb(249 168 212); border-y-pink-400border-top-color: rgb(244 114 182); border-bottom-color: rgb(244 114 182); border-y-pink-500border-top-color: rgb(236 72 153); border-bottom-color: rgb(236 72 153); border-y-pink-600border-top-color: rgb(219 39 119); border-bottom-color: rgb(219 39 119); border-y-pink-700border-top-color: rgb(190 24 93); border-bottom-color: rgb(190 24 93); border-y-pink-800border-top-color: rgb(157 23 77); border-bottom-color: rgb(157 23 77); border-y-pink-900border-top-color: rgb(131 24 67); border-bottom-color: rgb(131 24 67); border-y-pink-950border-top-color: rgb(80 7 36); border-bottom-color: rgb(80 7 36); border-y-rose-50border-top-color: rgb(255 241 242); border-bottom-color: rgb(255 241 242); border-y-rose-100border-top-color: rgb(255 228 230); border-bottom-color: rgb(255 228 230); border-y-rose-200border-top-color: rgb(254 205 211); border-bottom-color: rgb(254 205 211); border-y-rose-300border-top-color: rgb(253 164 175); border-bottom-color: rgb(253 164 175); border-y-rose-400border-top-color: rgb(251 113 133); border-bottom-color: rgb(251 113 133); border-y-rose-500border-top-color: rgb(244 63 94); border-bottom-color: rgb(244 63 94); border-y-rose-600border-top-color: rgb(225 29 72); border-bottom-color: rgb(225 29 72); border-y-rose-700border-top-color: rgb(190 18 60); border-bottom-color: rgb(190 18 60); border-y-rose-800border-top-color: rgb(159 18 57); border-bottom-color: rgb(159 18 57); border-y-rose-900border-top-color: rgb(136 19 55); border-bottom-color: rgb(136 19 55); border-y-rose-950border-top-color: rgb(76 5 25); border-bottom-color: rgb(76 5 25); border-s-inheritborder-inline-start-color: inherit; border-s-currentborder-inline-start-color: currentColor; border-s-transparentborder-inline-start-color: transparent; border-s-blackborder-inline-start-color: rgb(0 0 0); border-s-whiteborder-inline-start-color: rgb(255 255 255); border-s-slate-50border-inline-start-color: rgb(248 250 252); border-s-slate-100border-inline-start-color: rgb(241 245 249); border-s-slate-200border-inline-start-color: rgb(226 232 240); border-s-slate-300border-inline-start-color: rgb(203 213 225); border-s-slate-400border-inline-start-color: rgb(148 163 184); border-s-slate-500border-inline-start-color: rgb(100 116 139); border-s-slate-600border-inline-start-color: rgb(71 85 105); border-s-slate-700border-inline-start-color: rgb(51 65 85); border-s-slate-800border-inline-start-color: rgb(30 41 59); border-s-slate-900border-inline-start-color: rgb(15 23 42); border-s-slate-950border-inline-start-color: rgb(2 6 23); border-s-gray-50border-inline-start-color: rgb(249 250 251); border-s-gray-100border-inline-start-color: rgb(243 244 246); border-s-gray-200border-inline-start-color: rgb(229 231 235); border-s-gray-300border-inline-start-color: rgb(209 213 219); border-s-gray-400border-inline-start-color: rgb(156 163 175); border-s-gray-500border-inline-start-color: rgb(107 114 128); border-s-gray-600border-inline-start-color: rgb(75 85 99); border-s-gray-700border-inline-start-color: rgb(55 65 81); border-s-gray-800border-inline-start-color: rgb(31 41 55); border-s-gray-900border-inline-start-color: rgb(17 24 39); border-s-gray-950border-inline-start-color: rgb(3 7 18); border-s-zinc-50border-inline-start-color: rgb(250 250 250); border-s-zinc-100border-inline-start-color: rgb(244 244 245); border-s-zinc-200border-inline-start-color: rgb(228 228 231); border-s-zinc-300border-inline-start-color: rgb(212 212 216); border-s-zinc-400border-inline-start-color: rgb(161 161 170); border-s-zinc-500border-inline-start-color: rgb(113 113 122); border-s-zinc-600border-inline-start-color: rgb(82 82 91); border-s-zinc-700border-inline-start-color: rgb(63 63 70); border-s-zinc-800border-inline-start-color: rgb(39 39 42); border-s-zinc-900border-inline-start-color: rgb(24 24 27); border-s-zinc-950border-inline-start-color: rgb(9 9 11); border-s-neutral-50border-inline-start-color: rgb(250 250 250); border-s-neutral-100border-inline-start-color: rgb(245 245 245); border-s-neutral-200border-inline-start-color: rgb(229 229 229); border-s-neutral-300border-inline-start-color: rgb(212 212 212); border-s-neutral-400border-inline-start-color: rgb(163 163 163); border-s-neutral-500border-inline-start-color: rgb(115 115 115); border-s-neutral-600border-inline-start-color: rgb(82 82 82); border-s-neutral-700border-inline-start-color: rgb(64 64 64); border-s-neutral-800border-inline-start-color: rgb(38 38 38); border-s-neutral-900border-inline-start-color: rgb(23 23 23); border-s-neutral-950border-inline-start-color: rgb(10 10 10); border-s-stone-50border-inline-start-color: rgb(250 250 249); border-s-stone-100border-inline-start-color: rgb(245 245 244); border-s-stone-200border-inline-start-color: rgb(231 229 228); border-s-stone-300border-inline-start-color: rgb(214 211 209); border-s-stone-400border-inline-start-color: rgb(168 162 158); border-s-stone-500border-inline-start-color: rgb(120 113 108); border-s-stone-600border-inline-start-color: rgb(87 83 78); border-s-stone-700border-inline-start-color: rgb(68 64 60); border-s-stone-800border-inline-start-color: rgb(41 37 36); border-s-stone-900border-inline-start-color: rgb(28 25 23); border-s-stone-950border-inline-start-color: rgb(12 10 9); border-s-red-50border-inline-start-color: rgb(254 242 242); border-s-red-100border-inline-start-color: rgb(254 226 226); border-s-red-200border-inline-start-color: rgb(254 202 202); border-s-red-300border-inline-start-color: rgb(252 165 165); border-s-red-400border-inline-start-color: rgb(248 113 113); border-s-red-500border-inline-start-color: rgb(239 68 68); border-s-red-600border-inline-start-color: rgb(220 38 38); border-s-red-700border-inline-start-color: rgb(185 28 28); border-s-red-800border-inline-start-color: rgb(153 27 27); border-s-red-900border-inline-start-color: rgb(127 29 29); border-s-red-950border-inline-start-color: rgb(69 10 10); border-s-orange-50border-inline-start-color: rgb(255 247 237); border-s-orange-100border-inline-start-color: rgb(255 237 213); border-s-orange-200border-inline-start-color: rgb(254 215 170); border-s-orange-300border-inline-start-color: rgb(253 186 116); border-s-orange-400border-inline-start-color: rgb(251 146 60); border-s-orange-500border-inline-start-color: rgb(249 115 22); border-s-orange-600border-inline-start-color: rgb(234 88 12); border-s-orange-700border-inline-start-color: rgb(194 65 12); border-s-orange-800border-inline-start-color: rgb(154 52 18); border-s-orange-900border-inline-start-color: rgb(124 45 18); border-s-orange-950border-inline-start-color: rgb(67 20 7); border-s-amber-50border-inline-start-color: rgb(255 251 235); border-s-amber-100border-inline-start-color: rgb(254 243 199); border-s-amber-200border-inline-start-color: rgb(253 230 138); border-s-amber-300border-inline-start-color: rgb(252 211 77); border-s-amber-400border-inline-start-color: rgb(251 191 36); border-s-amber-500border-inline-start-color: rgb(245 158 11); border-s-amber-600border-inline-start-color: rgb(217 119 6); border-s-amber-700border-inline-start-color: rgb(180 83 9); border-s-amber-800border-inline-start-color: rgb(146 64 14); border-s-amber-900border-inline-start-color: rgb(120 53 15); border-s-amber-950border-inline-start-color: rgb(69 26 3); border-s-yellow-50border-inline-start-color: rgb(254 252 232); border-s-yellow-100border-inline-start-color: rgb(254 249 195); border-s-yellow-200border-inline-start-color: rgb(254 240 138); border-s-yellow-300border-inline-start-color: rgb(253 224 71); border-s-yellow-400border-inline-start-color: rgb(250 204 21); border-s-yellow-500border-inline-start-color: rgb(234 179 8); border-s-yellow-600border-inline-start-color: rgb(202 138 4); border-s-yellow-700border-inline-start-color: rgb(161 98 7); border-s-yellow-800border-inline-start-color: rgb(133 77 14); border-s-yellow-900border-inline-start-color: rgb(113 63 18); border-s-yellow-950border-inline-start-color: rgb(66 32 6); border-s-lime-50border-inline-start-color: rgb(247 254 231); border-s-lime-100border-inline-start-color: rgb(236 252 203); border-s-lime-200border-inline-start-color: rgb(217 249 157); border-s-lime-300border-inline-start-color: rgb(190 242 100); border-s-lime-400border-inline-start-color: rgb(163 230 53); border-s-lime-500border-inline-start-color: rgb(132 204 22); border-s-lime-600border-inline-start-color: rgb(101 163 13); border-s-lime-700border-inline-start-color: rgb(77 124 15); border-s-lime-800border-inline-start-color: rgb(63 98 18); border-s-lime-900border-inline-start-color: rgb(54 83 20); border-s-lime-950border-inline-start-color: rgb(26 46 5); border-s-green-50border-inline-start-color: rgb(240 253 244); border-s-green-100border-inline-start-color: rgb(220 252 231); border-s-green-200border-inline-start-color: rgb(187 247 208); border-s-green-300border-inline-start-color: rgb(134 239 172); border-s-green-400border-inline-start-color: rgb(74 222 128); border-s-green-500border-inline-start-color: rgb(34 197 94); border-s-green-600border-inline-start-color: rgb(22 163 74); border-s-green-700border-inline-start-color: rgb(21 128 61); border-s-green-800border-inline-start-color: rgb(22 101 52); border-s-green-900border-inline-start-color: rgb(20 83 45); border-s-green-950border-inline-start-color: rgb(5 46 22); border-s-emerald-50border-inline-start-color: rgb(236 253 245); border-s-emerald-100border-inline-start-color: rgb(209 250 229); border-s-emerald-200border-inline-start-color: rgb(167 243 208); border-s-emerald-300border-inline-start-color: rgb(110 231 183); border-s-emerald-400border-inline-start-color: rgb(52 211 153); border-s-emerald-500border-inline-start-color: rgb(16 185 129); border-s-emerald-600border-inline-start-color: rgb(5 150 105); border-s-emerald-700border-inline-start-color: rgb(4 120 87); border-s-emerald-800border-inline-start-color: rgb(6 95 70); border-s-emerald-900border-inline-start-color: rgb(6 78 59); border-s-emerald-950border-inline-start-color: rgb(2 44 34); border-s-teal-50border-inline-start-color: rgb(240 253 250); border-s-teal-100border-inline-start-color: rgb(204 251 241); border-s-teal-200border-inline-start-color: rgb(153 246 228); border-s-teal-300border-inline-start-color: rgb(94 234 212); border-s-teal-400border-inline-start-color: rgb(45 212 191); border-s-teal-500border-inline-start-color: rgb(20 184 166); border-s-teal-600border-inline-start-color: rgb(13 148 136); border-s-teal-700border-inline-start-color: rgb(15 118 110); border-s-teal-800border-inline-start-color: rgb(17 94 89); border-s-teal-900border-inline-start-color: rgb(19 78 74); border-s-teal-950border-inline-start-color: rgb(4 47 46); border-s-cyan-50border-inline-start-color: rgb(236 254 255); border-s-cyan-100border-inline-start-color: rgb(207 250 254); border-s-cyan-200border-inline-start-color: rgb(165 243 252); border-s-cyan-300border-inline-start-color: rgb(103 232 249); border-s-cyan-400border-inline-start-color: rgb(34 211 238); border-s-cyan-500border-inline-start-color: rgb(6 182 212); border-s-cyan-600border-inline-start-color: rgb(8 145 178); border-s-cyan-700border-inline-start-color: rgb(14 116 144); border-s-cyan-800border-inline-start-color: rgb(21 94 117); border-s-cyan-900border-inline-start-color: rgb(22 78 99); border-s-cyan-950border-inline-start-color: rgb(8 51 68); border-s-sky-50border-inline-start-color: rgb(240 249 255); border-s-sky-100border-inline-start-color: rgb(224 242 254); border-s-sky-200border-inline-start-color: rgb(186 230 253); border-s-sky-300border-inline-start-color: rgb(125 211 252); border-s-sky-400border-inline-start-color: rgb(56 189 248); border-s-sky-500border-inline-start-color: rgb(14 165 233); border-s-sky-600border-inline-start-color: rgb(2 132 199); border-s-sky-700border-inline-start-color: rgb(3 105 161); border-s-sky-800border-inline-start-color: rgb(7 89 133); border-s-sky-900border-inline-start-color: rgb(12 74 110); border-s-sky-950border-inline-start-color: rgb(8 47 73); border-s-blue-50border-inline-start-color: rgb(239 246 255); border-s-blue-100border-inline-start-color: rgb(219 234 254); border-s-blue-200border-inline-start-color: rgb(191 219 254); border-s-blue-300border-inline-start-color: rgb(147 197 253); border-s-blue-400border-inline-start-color: rgb(96 165 250); border-s-blue-500border-inline-start-color: rgb(59 130 246); border-s-blue-600border-inline-start-color: rgb(37 99 235); border-s-blue-700border-inline-start-color: rgb(29 78 216); border-s-blue-800border-inline-start-color: rgb(30 64 175); border-s-blue-900border-inline-start-color: rgb(30 58 138); border-s-blue-950border-inline-start-color: rgb(23 37 84); border-s-indigo-50border-inline-start-color: rgb(238 242 255); border-s-indigo-100border-inline-start-color: rgb(224 231 255); border-s-indigo-200border-inline-start-color: rgb(199 210 254); border-s-indigo-300border-inline-start-color: rgb(165 180 252); border-s-indigo-400border-inline-start-color: rgb(129 140 248); border-s-indigo-500border-inline-start-color: rgb(99 102 241); border-s-indigo-600border-inline-start-color: rgb(79 70 229); border-s-indigo-700border-inline-start-color: rgb(67 56 202); border-s-indigo-800border-inline-start-color: rgb(55 48 163); border-s-indigo-900border-inline-start-color: rgb(49 46 129); border-s-indigo-950border-inline-start-color: rgb(30 27 75); border-s-violet-50border-inline-start-color: rgb(245 243 255); border-s-violet-100border-inline-start-color: rgb(237 233 254); border-s-violet-200border-inline-start-color: rgb(221 214 254); border-s-violet-300border-inline-start-color: rgb(196 181 253); border-s-violet-400border-inline-start-color: rgb(167 139 250); border-s-violet-500border-inline-start-color: rgb(139 92 246); border-s-violet-600border-inline-start-color: rgb(124 58 237); border-s-violet-700border-inline-start-color: rgb(109 40 217); border-s-violet-800border-inline-start-color: rgb(91 33 182); border-s-violet-900border-inline-start-color: rgb(76 29 149); border-s-violet-950border-inline-start-color: rgb(46 16 101); border-s-purple-50border-inline-start-color: rgb(250 245 255); border-s-purple-100border-inline-start-color: rgb(243 232 255); border-s-purple-200border-inline-start-color: rgb(233 213 255); border-s-purple-300border-inline-start-color: rgb(216 180 254); border-s-purple-400border-inline-start-color: rgb(192 132 252); border-s-purple-500border-inline-start-color: rgb(168 85 247); border-s-purple-600border-inline-start-color: rgb(147 51 234); border-s-purple-700border-inline-start-color: rgb(126 34 206); border-s-purple-800border-inline-start-color: rgb(107 33 168); border-s-purple-900border-inline-start-color: rgb(88 28 135); border-s-purple-950border-inline-start-color: rgb(59 7 100); border-s-fuchsia-50border-inline-start-color: rgb(253 244 255); border-s-fuchsia-100border-inline-start-color: rgb(250 232 255); border-s-fuchsia-200border-inline-start-color: rgb(245 208 254); border-s-fuchsia-300border-inline-start-color: rgb(240 171 252); border-s-fuchsia-400border-inline-start-color: rgb(232 121 249); border-s-fuchsia-500border-inline-start-color: rgb(217 70 239); border-s-fuchsia-600border-inline-start-color: rgb(192 38 211); border-s-fuchsia-700border-inline-start-color: rgb(162 28 175); border-s-fuchsia-800border-inline-start-color: rgb(134 25 143); border-s-fuchsia-900border-inline-start-color: rgb(112 26 117); border-s-fuchsia-950border-inline-start-color: rgb(74 4 78); border-s-pink-50border-inline-start-color: rgb(253 242 248); border-s-pink-100border-inline-start-color: rgb(252 231 243); border-s-pink-200border-inline-start-color: rgb(251 207 232); border-s-pink-300border-inline-start-color: rgb(249 168 212); border-s-pink-400border-inline-start-color: rgb(244 114 182); border-s-pink-500border-inline-start-color: rgb(236 72 153); border-s-pink-600border-inline-start-color: rgb(219 39 119); border-s-pink-700border-inline-start-color: rgb(190 24 93); border-s-pink-800border-inline-start-color: rgb(157 23 77); border-s-pink-900border-inline-start-color: rgb(131 24 67); border-s-pink-950border-inline-start-color: rgb(80 7 36); border-s-rose-50border-inline-start-color: rgb(255 241 242); border-s-rose-100border-inline-start-color: rgb(255 228 230); border-s-rose-200border-inline-start-color: rgb(254 205 211); border-s-rose-300border-inline-start-color: rgb(253 164 175); border-s-rose-400border-inline-start-color: rgb(251 113 133); border-s-rose-500border-inline-start-color: rgb(244 63 94); border-s-rose-600border-inline-start-color: rgb(225 29 72); border-s-rose-700border-inline-start-color: rgb(190 18 60); border-s-rose-800border-inline-start-color: rgb(159 18 57); border-s-rose-900border-inline-start-color: rgb(136 19 55); border-s-rose-950border-inline-start-color: rgb(76 5 25); border-e-inheritborder-inline-end-color: inherit; border-e-currentborder-inline-end-color: currentColor; border-e-transparentborder-inline-end-color: transparent; border-e-blackborder-inline-end-color: rgb(0 0 0); border-e-whiteborder-inline-end-color: rgb(255 255 255); border-e-slate-50border-inline-end-color: rgb(248 250 252); border-e-slate-100border-inline-end-color: rgb(241 245 249); border-e-slate-200border-inline-end-color: rgb(226 232 240); border-e-slate-300border-inline-end-color: rgb(203 213 225); border-e-slate-400border-inline-end-color: rgb(148 163 184); border-e-slate-500border-inline-end-color: rgb(100 116 139); border-e-slate-600border-inline-end-color: rgb(71 85 105); border-e-slate-700border-inline-end-color: rgb(51 65 85); border-e-slate-800border-inline-end-color: rgb(30 41 59); border-e-slate-900border-inline-end-color: rgb(15 23 42); border-e-slate-950border-inline-end-color: rgb(2 6 23); border-e-gray-50border-inline-end-color: rgb(249 250 251); border-e-gray-100border-inline-end-color: rgb(243 244 246); border-e-gray-200border-inline-end-color: rgb(229 231 235); border-e-gray-300border-inline-end-color: rgb(209 213 219); border-e-gray-400border-inline-end-color: rgb(156 163 175); border-e-gray-500border-inline-end-color: rgb(107 114 128); border-e-gray-600border-inline-end-color: rgb(75 85 99); border-e-gray-700border-inline-end-color: rgb(55 65 81); border-e-gray-800border-inline-end-color: rgb(31 41 55); border-e-gray-900border-inline-end-color: rgb(17 24 39); border-e-gray-950border-inline-end-color: rgb(3 7 18); border-e-zinc-50border-inline-end-color: rgb(250 250 250); border-e-zinc-100border-inline-end-color: rgb(244 244 245); border-e-zinc-200border-inline-end-color: rgb(228 228 231); border-e-zinc-300border-inline-end-color: rgb(212 212 216); border-e-zinc-400border-inline-end-color: rgb(161 161 170); border-e-zinc-500border-inline-end-color: rgb(113 113 122); border-e-zinc-600border-inline-end-color: rgb(82 82 91); border-e-zinc-700border-inline-end-color: rgb(63 63 70); border-e-zinc-800border-inline-end-color: rgb(39 39 42); border-e-zinc-900border-inline-end-color: rgb(24 24 27); border-e-zinc-950border-inline-end-color: rgb(9 9 11); border-e-neutral-50border-inline-end-color: rgb(250 250 250); border-e-neutral-100border-inline-end-color: rgb(245 245 245); border-e-neutral-200border-inline-end-color: rgb(229 229 229); border-e-neutral-300border-inline-end-color: rgb(212 212 212); border-e-neutral-400border-inline-end-color: rgb(163 163 163); border-e-neutral-500border-inline-end-color: rgb(115 115 115); border-e-neutral-600border-inline-end-color: rgb(82 82 82); border-e-neutral-700border-inline-end-color: rgb(64 64 64); border-e-neutral-800border-inline-end-color: rgb(38 38 38); border-e-neutral-900border-inline-end-color: rgb(23 23 23); border-e-neutral-950border-inline-end-color: rgb(10 10 10); border-e-stone-50border-inline-end-color: rgb(250 250 249); border-e-stone-100border-inline-end-color: rgb(245 245 244); border-e-stone-200border-inline-end-color: rgb(231 229 228); border-e-stone-300border-inline-end-color: rgb(214 211 209); border-e-stone-400border-inline-end-color: rgb(168 162 158); border-e-stone-500border-inline-end-color: rgb(120 113 108); border-e-stone-600border-inline-end-color: rgb(87 83 78); border-e-stone-700border-inline-end-color: rgb(68 64 60); border-e-stone-800border-inline-end-color: rgb(41 37 36); border-e-stone-900border-inline-end-color: rgb(28 25 23); border-e-stone-950border-inline-end-color: rgb(12 10 9); border-e-red-50border-inline-end-color: rgb(254 242 242); border-e-red-100border-inline-end-color: rgb(254 226 226); border-e-red-200border-inline-end-color: rgb(254 202 202); border-e-red-300border-inline-end-color: rgb(252 165 165); border-e-red-400border-inline-end-color: rgb(248 113 113); border-e-red-500border-inline-end-color: rgb(239 68 68); border-e-red-600border-inline-end-color: rgb(220 38 38); border-e-red-700border-inline-end-color: rgb(185 28 28); border-e-red-800border-inline-end-color: rgb(153 27 27); border-e-red-900border-inline-end-color: rgb(127 29 29); border-e-red-950border-inline-end-color: rgb(69 10 10); border-e-orange-50border-inline-end-color: rgb(255 247 237); border-e-orange-100border-inline-end-color: rgb(255 237 213); border-e-orange-200border-inline-end-color: rgb(254 215 170); border-e-orange-300border-inline-end-color: rgb(253 186 116); border-e-orange-400border-inline-end-color: rgb(251 146 60); border-e-orange-500border-inline-end-color: rgb(249 115 22); border-e-orange-600border-inline-end-color: rgb(234 88 12); border-e-orange-700border-inline-end-color: rgb(194 65 12); border-e-orange-800border-inline-end-color: rgb(154 52 18); border-e-orange-900border-inline-end-color: rgb(124 45 18); border-e-orange-950border-inline-end-color: rgb(67 20 7); border-e-amber-50border-inline-end-color: rgb(255 251 235); border-e-amber-100border-inline-end-color: rgb(254 243 199); border-e-amber-200border-inline-end-color: rgb(253 230 138); border-e-amber-300border-inline-end-color: rgb(252 211 77); border-e-amber-400border-inline-end-color: rgb(251 191 36); border-e-amber-500border-inline-end-color: rgb(245 158 11); border-e-amber-600border-inline-end-color: rgb(217 119 6); border-e-amber-700border-inline-end-color: rgb(180 83 9); border-e-amber-800border-inline-end-color: rgb(146 64 14); border-e-amber-900border-inline-end-color: rgb(120 53 15); border-e-amber-950border-inline-end-color: rgb(69 26 3); border-e-yellow-50border-inline-end-color: rgb(254 252 232); border-e-yellow-100border-inline-end-color: rgb(254 249 195); border-e-yellow-200border-inline-end-color: rgb(254 240 138); border-e-yellow-300border-inline-end-color: rgb(253 224 71); border-e-yellow-400border-inline-end-color: rgb(250 204 21); border-e-yellow-500border-inline-end-color: rgb(234 179 8); border-e-yellow-600border-inline-end-color: rgb(202 138 4); border-e-yellow-700border-inline-end-color: rgb(161 98 7); border-e-yellow-800border-inline-end-color: rgb(133 77 14); border-e-yellow-900border-inline-end-color: rgb(113 63 18); border-e-yellow-950border-inline-end-color: rgb(66 32 6); border-e-lime-50border-inline-end-color: rgb(247 254 231); border-e-lime-100border-inline-end-color: rgb(236 252 203); border-e-lime-200border-inline-end-color: rgb(217 249 157); border-e-lime-300border-inline-end-color: rgb(190 242 100); border-e-lime-400border-inline-end-color: rgb(163 230 53); border-e-lime-500border-inline-end-color: rgb(132 204 22); border-e-lime-600border-inline-end-color: rgb(101 163 13); border-e-lime-700border-inline-end-color: rgb(77 124 15); border-e-lime-800border-inline-end-color: rgb(63 98 18); border-e-lime-900border-inline-end-color: rgb(54 83 20); border-e-lime-950border-inline-end-color: rgb(26 46 5); border-e-green-50border-inline-end-color: rgb(240 253 244); border-e-green-100border-inline-end-color: rgb(220 252 231); border-e-green-200border-inline-end-color: rgb(187 247 208); border-e-green-300border-inline-end-color: rgb(134 239 172); border-e-green-400border-inline-end-color: rgb(74 222 128); border-e-green-500border-inline-end-color: rgb(34 197 94); border-e-green-600border-inline-end-color: rgb(22 163 74); border-e-green-700border-inline-end-color: rgb(21 128 61); border-e-green-800border-inline-end-color: rgb(22 101 52); border-e-green-900border-inline-end-color: rgb(20 83 45); border-e-green-950border-inline-end-color: rgb(5 46 22); border-e-emerald-50border-inline-end-color: rgb(236 253 245); border-e-emerald-100border-inline-end-color: rgb(209 250 229); border-e-emerald-200border-inline-end-color: rgb(167 243 208); border-e-emerald-300border-inline-end-color: rgb(110 231 183); border-e-emerald-400border-inline-end-color: rgb(52 211 153); border-e-emerald-500border-inline-end-color: rgb(16 185 129); border-e-emerald-600border-inline-end-color: rgb(5 150 105); border-e-emerald-700border-inline-end-color: rgb(4 120 87); border-e-emerald-800border-inline-end-color: rgb(6 95 70); border-e-emerald-900border-inline-end-color: rgb(6 78 59); border-e-emerald-950border-inline-end-color: rgb(2 44 34); border-e-teal-50border-inline-end-color: rgb(240 253 250); border-e-teal-100border-inline-end-color: rgb(204 251 241); border-e-teal-200border-inline-end-color: rgb(153 246 228); border-e-teal-300border-inline-end-color: rgb(94 234 212); border-e-teal-400border-inline-end-color: rgb(45 212 191); border-e-teal-500border-inline-end-color: rgb(20 184 166); border-e-teal-600border-inline-end-color: rgb(13 148 136); border-e-teal-700border-inline-end-color: rgb(15 118 110); border-e-teal-800border-inline-end-color: rgb(17 94 89); border-e-teal-900border-inline-end-color: rgb(19 78 74); border-e-teal-950border-inline-end-color: rgb(4 47 46); border-e-cyan-50border-inline-end-color: rgb(236 254 255); border-e-cyan-100border-inline-end-color: rgb(207 250 254); border-e-cyan-200border-inline-end-color: rgb(165 243 252); border-e-cyan-300border-inline-end-color: rgb(103 232 249); border-e-cyan-400border-inline-end-color: rgb(34 211 238); border-e-cyan-500border-inline-end-color: rgb(6 182 212); border-e-cyan-600border-inline-end-color: rgb(8 145 178); border-e-cyan-700border-inline-end-color: rgb(14 116 144); border-e-cyan-800border-inline-end-color: rgb(21 94 117); border-e-cyan-900border-inline-end-color: rgb(22 78 99); border-e-cyan-950border-inline-end-color: rgb(8 51 68); border-e-sky-50border-inline-end-color: rgb(240 249 255); border-e-sky-100border-inline-end-color: rgb(224 242 254); border-e-sky-200border-inline-end-color: rgb(186 230 253); border-e-sky-300border-inline-end-color: rgb(125 211 252); border-e-sky-400border-inline-end-color: rgb(56 189 248); border-e-sky-500border-inline-end-color: rgb(14 165 233); border-e-sky-600border-inline-end-color: rgb(2 132 199); border-e-sky-700border-inline-end-color: rgb(3 105 161); border-e-sky-800border-inline-end-color: rgb(7 89 133); border-e-sky-900border-inline-end-color: rgb(12 74 110); border-e-sky-950border-inline-end-color: rgb(8 47 73); border-e-blue-50border-inline-end-color: rgb(239 246 255); border-e-blue-100border-inline-end-color: rgb(219 234 254); border-e-blue-200border-inline-end-color: rgb(191 219 254); border-e-blue-300border-inline-end-color: rgb(147 197 253); border-e-blue-400border-inline-end-color: rgb(96 165 250); border-e-blue-500border-inline-end-color: rgb(59 130 246); border-e-blue-600border-inline-end-color: rgb(37 99 235); border-e-blue-700border-inline-end-color: rgb(29 78 216); border-e-blue-800border-inline-end-color: rgb(30 64 175); border-e-blue-900border-inline-end-color: rgb(30 58 138); border-e-blue-950border-inline-end-color: rgb(23 37 84); border-e-indigo-50border-inline-end-color: rgb(238 242 255); border-e-indigo-100border-inline-end-color: rgb(224 231 255); border-e-indigo-200border-inline-end-color: rgb(199 210 254); border-e-indigo-300border-inline-end-color: rgb(165 180 252); border-e-indigo-400border-inline-end-color: rgb(129 140 248); border-e-indigo-500border-inline-end-color: rgb(99 102 241); border-e-indigo-600border-inline-end-color: rgb(79 70 229); border-e-indigo-700border-inline-end-color: rgb(67 56 202); border-e-indigo-800border-inline-end-color: rgb(55 48 163); border-e-indigo-900border-inline-end-color: rgb(49 46 129); border-e-indigo-950border-inline-end-color: rgb(30 27 75); border-e-violet-50border-inline-end-color: rgb(245 243 255); border-e-violet-100border-inline-end-color: rgb(237 233 254); border-e-violet-200border-inline-end-color: rgb(221 214 254); border-e-violet-300border-inline-end-color: rgb(196 181 253); border-e-violet-400border-inline-end-color: rgb(167 139 250); border-e-violet-500border-inline-end-color: rgb(139 92 246); border-e-violet-600border-inline-end-color: rgb(124 58 237); border-e-violet-700border-inline-end-color: rgb(109 40 217); border-e-violet-800border-inline-end-color: rgb(91 33 182); border-e-violet-900border-inline-end-color: rgb(76 29 149); border-e-violet-950border-inline-end-color: rgb(46 16 101); border-e-purple-50border-inline-end-color: rgb(250 245 255); border-e-purple-100border-inline-end-color: rgb(243 232 255); border-e-purple-200border-inline-end-color: rgb(233 213 255); border-e-purple-300border-inline-end-color: rgb(216 180 254); border-e-purple-400border-inline-end-color: rgb(192 132 252); border-e-purple-500border-inline-end-color: rgb(168 85 247); border-e-purple-600border-inline-end-color: rgb(147 51 234); border-e-purple-700border-inline-end-color: rgb(126 34 206); border-e-purple-800border-inline-end-color: rgb(107 33 168); border-e-purple-900border-inline-end-color: rgb(88 28 135); border-e-purple-950border-inline-end-color: rgb(59 7 100); border-e-fuchsia-50border-inline-end-color: rgb(253 244 255); border-e-fuchsia-100border-inline-end-color: rgb(250 232 255); border-e-fuchsia-200border-inline-end-color: rgb(245 208 254); border-e-fuchsia-300border-inline-end-color: rgb(240 171 252); border-e-fuchsia-400border-inline-end-color: rgb(232 121 249); border-e-fuchsia-500border-inline-end-color: rgb(217 70 239); border-e-fuchsia-600border-inline-end-color: rgb(192 38 211); border-e-fuchsia-700border-inline-end-color: rgb(162 28 175); border-e-fuchsia-800border-inline-end-color: rgb(134 25 143); border-e-fuchsia-900border-inline-end-color: rgb(112 26 117); border-e-fuchsia-950border-inline-end-color: rgb(74 4 78); border-e-pink-50border-inline-end-color: rgb(253 242 248); border-e-pink-100border-inline-end-color: rgb(252 231 243); border-e-pink-200border-inline-end-color: rgb(251 207 232); border-e-pink-300border-inline-end-color: rgb(249 168 212); border-e-pink-400border-inline-end-color: rgb(244 114 182); border-e-pink-500border-inline-end-color: rgb(236 72 153); border-e-pink-600border-inline-end-color: rgb(219 39 119); border-e-pink-700border-inline-end-color: rgb(190 24 93); border-e-pink-800border-inline-end-color: rgb(157 23 77); border-e-pink-900border-inline-end-color: rgb(131 24 67); border-e-pink-950border-inline-end-color: rgb(80 7 36); border-e-rose-50border-inline-end-color: rgb(255 241 242); border-e-rose-100border-inline-end-color: rgb(255 228 230); border-e-rose-200border-inline-end-color: rgb(254 205 211); border-e-rose-300border-inline-end-color: rgb(253 164 175); border-e-rose-400border-inline-end-color: rgb(251 113 133); border-e-rose-500border-inline-end-color: rgb(244 63 94); border-e-rose-600border-inline-end-color: rgb(225 29 72); border-e-rose-700border-inline-end-color: rgb(190 18 60); border-e-rose-800border-inline-end-color: rgb(159 18 57); border-e-rose-900border-inline-end-color: rgb(136 19 55); border-e-rose-950border-inline-end-color: rgb(76 5 25); border-t-inheritborder-top-color: inherit; border-t-currentborder-top-color: currentColor; border-t-transparentborder-top-color: transparent; border-t-blackborder-top-color: rgb(0 0 0); border-t-whiteborder-top-color: rgb(255 255 255); border-t-slate-50border-top-color: rgb(248 250 252); border-t-slate-100border-top-color: rgb(241 245 249); border-t-slate-200border-top-color: rgb(226 232 240); border-t-slate-300border-top-color: rgb(203 213 225); border-t-slate-400border-top-color: rgb(148 163 184); border-t-slate-500border-top-color: rgb(100 116 139); border-t-slate-600border-top-color: rgb(71 85 105); border-t-slate-700border-top-color: rgb(51 65 85); border-t-slate-800border-top-color: rgb(30 41 59); border-t-slate-900border-top-color: rgb(15 23 42); border-t-slate-950border-top-color: rgb(2 6 23); border-t-gray-50border-top-color: rgb(249 250 251); border-t-gray-100border-top-color: rgb(243 244 246); border-t-gray-200border-top-color: rgb(229 231 235); border-t-gray-300border-top-color: rgb(209 213 219); border-t-gray-400border-top-color: rgb(156 163 175); border-t-gray-500border-top-color: rgb(107 114 128); border-t-gray-600border-top-color: rgb(75 85 99); border-t-gray-700border-top-color: rgb(55 65 81); border-t-gray-800border-top-color: rgb(31 41 55); border-t-gray-900border-top-color: rgb(17 24 39); border-t-gray-950border-top-color: rgb(3 7 18); border-t-zinc-50border-top-color: rgb(250 250 250); border-t-zinc-100border-top-color: rgb(244 244 245); border-t-zinc-200border-top-color: rgb(228 228 231); border-t-zinc-300border-top-color: rgb(212 212 216); border-t-zinc-400border-top-color: rgb(161 161 170); border-t-zinc-500border-top-color: rgb(113 113 122); border-t-zinc-600border-top-color: rgb(82 82 91); border-t-zinc-700border-top-color: rgb(63 63 70); border-t-zinc-800border-top-color: rgb(39 39 42); border-t-zinc-900border-top-color: rgb(24 24 27); border-t-zinc-950border-top-color: rgb(9 9 11); border-t-neutral-50border-top-color: rgb(250 250 250); border-t-neutral-100border-top-color: rgb(245 245 245); border-t-neutral-200border-top-color: rgb(229 229 229); border-t-neutral-300border-top-color: rgb(212 212 212); border-t-neutral-400border-top-color: rgb(163 163 163); border-t-neutral-500border-top-color: rgb(115 115 115); border-t-neutral-600border-top-color: rgb(82 82 82); border-t-neutral-700border-top-color: rgb(64 64 64); border-t-neutral-800border-top-color: rgb(38 38 38); border-t-neutral-900border-top-color: rgb(23 23 23); border-t-neutral-950border-top-color: rgb(10 10 10); border-t-stone-50border-top-color: rgb(250 250 249); border-t-stone-100border-top-color: rgb(245 245 244); border-t-stone-200border-top-color: rgb(231 229 228); border-t-stone-300border-top-color: rgb(214 211 209); border-t-stone-400border-top-color: rgb(168 162 158); border-t-stone-500border-top-color: rgb(120 113 108); border-t-stone-600border-top-color: rgb(87 83 78); border-t-stone-700border-top-color: rgb(68 64 60); border-t-stone-800border-top-color: rgb(41 37 36); border-t-stone-900border-top-color: rgb(28 25 23); border-t-stone-950border-top-color: rgb(12 10 9); border-t-red-50border-top-color: rgb(254 242 242); border-t-red-100border-top-color: rgb(254 226 226); border-t-red-200border-top-color: rgb(254 202 202); border-t-red-300border-top-color: rgb(252 165 165); border-t-red-400border-top-color: rgb(248 113 113); border-t-red-500border-top-color: rgb(239 68 68); border-t-red-600border-top-color: rgb(220 38 38); border-t-red-700border-top-color: rgb(185 28 28); border-t-red-800border-top-color: rgb(153 27 27); border-t-red-900border-top-color: rgb(127 29 29); border-t-red-950border-top-color: rgb(69 10 10); border-t-orange-50border-top-color: rgb(255 247 237); border-t-orange-100border-top-color: rgb(255 237 213); border-t-orange-200border-top-color: rgb(254 215 170); border-t-orange-300border-top-color: rgb(253 186 116); border-t-orange-400border-top-color: rgb(251 146 60); border-t-orange-500border-top-color: rgb(249 115 22); border-t-orange-600border-top-color: rgb(234 88 12); border-t-orange-700border-top-color: rgb(194 65 12); border-t-orange-800border-top-color: rgb(154 52 18); border-t-orange-900border-top-color: rgb(124 45 18); border-t-orange-950border-top-color: rgb(67 20 7); border-t-amber-50border-top-color: rgb(255 251 235); border-t-amber-100border-top-color: rgb(254 243 199); border-t-amber-200border-top-color: rgb(253 230 138); border-t-amber-300border-top-color: rgb(252 211 77); border-t-amber-400border-top-color: rgb(251 191 36); border-t-amber-500border-top-color: rgb(245 158 11); border-t-amber-600border-top-color: rgb(217 119 6); border-t-amber-700border-top-color: rgb(180 83 9); border-t-amber-800border-top-color: rgb(146 64 14); border-t-amber-900border-top-color: rgb(120 53 15); border-t-amber-950border-top-color: rgb(69 26 3); border-t-yellow-50border-top-color: rgb(254 252 232); border-t-yellow-100border-top-color: rgb(254 249 195); border-t-yellow-200border-top-color: rgb(254 240 138); border-t-yellow-300border-top-color: rgb(253 224 71); border-t-yellow-400border-top-color: rgb(250 204 21); border-t-yellow-500border-top-color: rgb(234 179 8); border-t-yellow-600border-top-color: rgb(202 138 4); border-t-yellow-700border-top-color: rgb(161 98 7); border-t-yellow-800border-top-color: rgb(133 77 14); border-t-yellow-900border-top-color: rgb(113 63 18); border-t-yellow-950border-top-color: rgb(66 32 6); border-t-lime-50border-top-color: rgb(247 254 231); border-t-lime-100border-top-color: rgb(236 252 203); border-t-lime-200border-top-color: rgb(217 249 157); border-t-lime-300border-top-color: rgb(190 242 100); border-t-lime-400border-top-color: rgb(163 230 53); border-t-lime-500border-top-color: rgb(132 204 22); border-t-lime-600border-top-color: rgb(101 163 13); border-t-lime-700border-top-color: rgb(77 124 15); border-t-lime-800border-top-color: rgb(63 98 18); border-t-lime-900border-top-color: rgb(54 83 20); border-t-lime-950border-top-color: rgb(26 46 5); border-t-green-50border-top-color: rgb(240 253 244); border-t-green-100border-top-color: rgb(220 252 231); border-t-green-200border-top-color: rgb(187 247 208); border-t-green-300border-top-color: rgb(134 239 172); border-t-green-400border-top-color: rgb(74 222 128); border-t-green-500border-top-color: rgb(34 197 94); border-t-green-600border-top-color: rgb(22 163 74); border-t-green-700border-top-color: rgb(21 128 61); border-t-green-800border-top-color: rgb(22 101 52); border-t-green-900border-top-color: rgb(20 83 45); border-t-green-950border-top-color: rgb(5 46 22); border-t-emerald-50border-top-color: rgb(236 253 245); border-t-emerald-100border-top-color: rgb(209 250 229); border-t-emerald-200border-top-color: rgb(167 243 208); border-t-emerald-300border-top-color: rgb(110 231 183); border-t-emerald-400border-top-color: rgb(52 211 153); border-t-emerald-500border-top-color: rgb(16 185 129); border-t-emerald-600border-top-color: rgb(5 150 105); border-t-emerald-700border-top-color: rgb(4 120 87); border-t-emerald-800border-top-color: rgb(6 95 70); border-t-emerald-900border-top-color: rgb(6 78 59); border-t-emerald-950border-top-color: rgb(2 44 34); border-t-teal-50border-top-color: rgb(240 253 250); border-t-teal-100border-top-color: rgb(204 251 241); border-t-teal-200border-top-color: rgb(153 246 228); border-t-teal-300border-top-color: rgb(94 234 212); border-t-teal-400border-top-color: rgb(45 212 191); border-t-teal-500border-top-color: rgb(20 184 166); border-t-teal-600border-top-color: rgb(13 148 136); border-t-teal-700border-top-color: rgb(15 118 110); border-t-teal-800border-top-color: rgb(17 94 89); border-t-teal-900border-top-color: rgb(19 78 74); border-t-teal-950border-top-color: rgb(4 47 46); border-t-cyan-50border-top-color: rgb(236 254 255); border-t-cyan-100border-top-color: rgb(207 250 254); border-t-cyan-200border-top-color: rgb(165 243 252); border-t-cyan-300border-top-color: rgb(103 232 249); border-t-cyan-400border-top-color: rgb(34 211 238); border-t-cyan-500border-top-color: rgb(6 182 212); border-t-cyan-600border-top-color: rgb(8 145 178); border-t-cyan-700border-top-color: rgb(14 116 144); border-t-cyan-800border-top-color: rgb(21 94 117); border-t-cyan-900border-top-color: rgb(22 78 99); border-t-cyan-950border-top-color: rgb(8 51 68); border-t-sky-50border-top-color: rgb(240 249 255); border-t-sky-100border-top-color: rgb(224 242 254); border-t-sky-200border-top-color: rgb(186 230 253); border-t-sky-300border-top-color: rgb(125 211 252); border-t-sky-400border-top-color: rgb(56 189 248); border-t-sky-500border-top-color: rgb(14 165 233); border-t-sky-600border-top-color: rgb(2 132 199); border-t-sky-700border-top-color: rgb(3 105 161); border-t-sky-800border-top-color: rgb(7 89 133); border-t-sky-900border-top-color: rgb(12 74 110); border-t-sky-950border-top-color: rgb(8 47 73); border-t-blue-50border-top-color: rgb(239 246 255); border-t-blue-100border-top-color: rgb(219 234 254); border-t-blue-200border-top-color: rgb(191 219 254); border-t-blue-300border-top-color: rgb(147 197 253); border-t-blue-400border-top-color: rgb(96 165 250); border-t-blue-500border-top-color: rgb(59 130 246); border-t-blue-600border-top-color: rgb(37 99 235); border-t-blue-700border-top-color: rgb(29 78 216); border-t-blue-800border-top-color: rgb(30 64 175); border-t-blue-900border-top-color: rgb(30 58 138); border-t-blue-950border-top-color: rgb(23 37 84); border-t-indigo-50border-top-color: rgb(238 242 255); border-t-indigo-100border-top-color: rgb(224 231 255); border-t-indigo-200border-top-color: rgb(199 210 254); border-t-indigo-300border-top-color: rgb(165 180 252); border-t-indigo-400border-top-color: rgb(129 140 248); border-t-indigo-500border-top-color: rgb(99 102 241); border-t-indigo-600border-top-color: rgb(79 70 229); border-t-indigo-700border-top-color: rgb(67 56 202); border-t-indigo-800border-top-color: rgb(55 48 163); border-t-indigo-900border-top-color: rgb(49 46 129); border-t-indigo-950border-top-color: rgb(30 27 75); border-t-violet-50border-top-color: rgb(245 243 255); border-t-violet-100border-top-color: rgb(237 233 254); border-t-violet-200border-top-color: rgb(221 214 254); border-t-violet-300border-top-color: rgb(196 181 253); border-t-violet-400border-top-color: rgb(167 139 250); border-t-violet-500border-top-color: rgb(139 92 246); border-t-violet-600border-top-color: rgb(124 58 237); border-t-violet-700border-top-color: rgb(109 40 217); border-t-violet-800border-top-color: rgb(91 33 182); border-t-violet-900border-top-color: rgb(76 29 149); border-t-violet-950border-top-color: rgb(46 16 101); border-t-purple-50border-top-color: rgb(250 245 255); border-t-purple-100border-top-color: rgb(243 232 255); border-t-purple-200border-top-color: rgb(233 213 255); border-t-purple-300border-top-color: rgb(216 180 254); border-t-purple-400border-top-color: rgb(192 132 252); border-t-purple-500border-top-color: rgb(168 85 247); border-t-purple-600border-top-color: rgb(147 51 234); border-t-purple-700border-top-color: rgb(126 34 206); border-t-purple-800border-top-color: rgb(107 33 168); border-t-purple-900border-top-color: rgb(88 28 135); border-t-purple-950border-top-color: rgb(59 7 100); border-t-fuchsia-50border-top-color: rgb(253 244 255); border-t-fuchsia-100border-top-color: rgb(250 232 255); border-t-fuchsia-200border-top-color: rgb(245 208 254); border-t-fuchsia-300border-top-color: rgb(240 171 252); border-t-fuchsia-400border-top-color: rgb(232 121 249); border-t-fuchsia-500border-top-color: rgb(217 70 239); border-t-fuchsia-600border-top-color: rgb(192 38 211); border-t-fuchsia-700border-top-color: rgb(162 28 175); border-t-fuchsia-800border-top-color: rgb(134 25 143); border-t-fuchsia-900border-top-color: rgb(112 26 117); border-t-fuchsia-950border-top-color: rgb(74 4 78); border-t-pink-50border-top-color: rgb(253 242 248); border-t-pink-100border-top-color: rgb(252 231 243); border-t-pink-200border-top-color: rgb(251 207 232); border-t-pink-300border-top-color: rgb(249 168 212); border-t-pink-400border-top-color: rgb(244 114 182); border-t-pink-500border-top-color: rgb(236 72 153); border-t-pink-600border-top-color: rgb(219 39 119); border-t-pink-700border-top-color: rgb(190 24 93); border-t-pink-800border-top-color: rgb(157 23 77); border-t-pink-900border-top-color: rgb(131 24 67); border-t-pink-950border-top-color: rgb(80 7 36); border-t-rose-50border-top-color: rgb(255 241 242); border-t-rose-100border-top-color: rgb(255 228 230); border-t-rose-200border-top-color: rgb(254 205 211); border-t-rose-300border-top-color: rgb(253 164 175); border-t-rose-400border-top-color: rgb(251 113 133); border-t-rose-500border-top-color: rgb(244 63 94); border-t-rose-600border-top-color: rgb(225 29 72); border-t-rose-700border-top-color: rgb(190 18 60); border-t-rose-800border-top-color: rgb(159 18 57); border-t-rose-900border-top-color: rgb(136 19 55); border-t-rose-950border-top-color: rgb(76 5 25); border-r-inheritborder-right-color: inherit; border-r-currentborder-right-color: currentColor; border-r-transparentborder-right-color: transparent; border-r-blackborder-right-color: rgb(0 0 0); border-r-whiteborder-right-color: rgb(255 255 255); border-r-slate-50border-right-color: rgb(248 250 252); border-r-slate-100border-right-color: rgb(241 245 249); border-r-slate-200border-right-color: rgb(226 232 240); border-r-slate-300border-right-color: rgb(203 213 225); border-r-slate-400border-right-color: rgb(148 163 184); border-r-slate-500border-right-color: rgb(100 116 139); border-r-slate-600border-right-color: rgb(71 85 105); border-r-slate-700border-right-color: rgb(51 65 85); border-r-slate-800border-right-color: rgb(30 41 59); border-r-slate-900border-right-color: rgb(15 23 42); border-r-slate-950border-right-color: rgb(2 6 23); border-r-gray-50border-right-color: rgb(249 250 251); border-r-gray-100border-right-color: rgb(243 244 246); border-r-gray-200border-right-color: rgb(229 231 235); border-r-gray-300border-right-color: rgb(209 213 219); border-r-gray-400border-right-color: rgb(156 163 175); border-r-gray-500border-right-color: rgb(107 114 128); border-r-gray-600border-right-color: rgb(75 85 99); border-r-gray-700border-right-color: rgb(55 65 81); border-r-gray-800border-right-color: rgb(31 41 55); border-r-gray-900border-right-color: rgb(17 24 39); border-r-gray-950border-right-color: rgb(3 7 18); border-r-zinc-50border-right-color: rgb(250 250 250); border-r-zinc-100border-right-color: rgb(244 244 245); border-r-zinc-200border-right-color: rgb(228 228 231); border-r-zinc-300border-right-color: rgb(212 212 216); border-r-zinc-400border-right-color: rgb(161 161 170); border-r-zinc-500border-right-color: rgb(113 113 122); border-r-zinc-600border-right-color: rgb(82 82 91); border-r-zinc-700border-right-color: rgb(63 63 70); border-r-zinc-800border-right-color: rgb(39 39 42); border-r-zinc-900border-right-color: rgb(24 24 27); border-r-zinc-950border-right-color: rgb(9 9 11); border-r-neutral-50border-right-color: rgb(250 250 250); border-r-neutral-100border-right-color: rgb(245 245 245); border-r-neutral-200border-right-color: rgb(229 229 229); border-r-neutral-300border-right-color: rgb(212 212 212); border-r-neutral-400border-right-color: rgb(163 163 163); border-r-neutral-500border-right-color: rgb(115 115 115); border-r-neutral-600border-right-color: rgb(82 82 82); border-r-neutral-700border-right-color: rgb(64 64 64); border-r-neutral-800border-right-color: rgb(38 38 38); border-r-neutral-900border-right-color: rgb(23 23 23); border-r-neutral-950border-right-color: rgb(10 10 10); border-r-stone-50border-right-color: rgb(250 250 249); border-r-stone-100border-right-color: rgb(245 245 244); border-r-stone-200border-right-color: rgb(231 229 228); border-r-stone-300border-right-color: rgb(214 211 209); border-r-stone-400border-right-color: rgb(168 162 158); border-r-stone-500border-right-color: rgb(120 113 108); border-r-stone-600border-right-color: rgb(87 83 78); border-r-stone-700border-right-color: rgb(68 64 60); border-r-stone-800border-right-color: rgb(41 37 36); border-r-stone-900border-right-color: rgb(28 25 23); border-r-stone-950border-right-color: rgb(12 10 9); border-r-red-50border-right-color: rgb(254 242 242); border-r-red-100border-right-color: rgb(254 226 226); border-r-red-200border-right-color: rgb(254 202 202); border-r-red-300border-right-color: rgb(252 165 165); border-r-red-400border-right-color: rgb(248 113 113); border-r-red-500border-right-color: rgb(239 68 68); border-r-red-600border-right-color: rgb(220 38 38); border-r-red-700border-right-color: rgb(185 28 28); border-r-red-800border-right-color: rgb(153 27 27); border-r-red-900border-right-color: rgb(127 29 29); border-r-red-950border-right-color: rgb(69 10 10); border-r-orange-50border-right-color: rgb(255 247 237); border-r-orange-100border-right-color: rgb(255 237 213); border-r-orange-200border-right-color: rgb(254 215 170); border-r-orange-300border-right-color: rgb(253 186 116); border-r-orange-400border-right-color: rgb(251 146 60); border-r-orange-500border-right-color: rgb(249 115 22); border-r-orange-600border-right-color: rgb(234 88 12); border-r-orange-700border-right-color: rgb(194 65 12); border-r-orange-800border-right-color: rgb(154 52 18); border-r-orange-900border-right-color: rgb(124 45 18); border-r-orange-950border-right-color: rgb(67 20 7); border-r-amber-50border-right-color: rgb(255 251 235); border-r-amber-100border-right-color: rgb(254 243 199); border-r-amber-200border-right-color: rgb(253 230 138); border-r-amber-300border-right-color: rgb(252 211 77); border-r-amber-400border-right-color: rgb(251 191 36); border-r-amber-500border-right-color: rgb(245 158 11); border-r-amber-600border-right-color: rgb(217 119 6); border-r-amber-700border-right-color: rgb(180 83 9); border-r-amber-800border-right-color: rgb(146 64 14); border-r-amber-900border-right-color: rgb(120 53 15); border-r-amber-950border-right-color: rgb(69 26 3); border-r-yellow-50border-right-color: rgb(254 252 232); border-r-yellow-100border-right-color: rgb(254 249 195); border-r-yellow-200border-right-color: rgb(254 240 138); border-r-yellow-300border-right-color: rgb(253 224 71); border-r-yellow-400border-right-color: rgb(250 204 21); border-r-yellow-500border-right-color: rgb(234 179 8); border-r-yellow-600border-right-color: rgb(202 138 4); border-r-yellow-700border-right-color: rgb(161 98 7); border-r-yellow-800border-right-color: rgb(133 77 14); border-r-yellow-900border-right-color: rgb(113 63 18); border-r-yellow-950border-right-color: rgb(66 32 6); border-r-lime-50border-right-color: rgb(247 254 231); border-r-lime-100border-right-color: rgb(236 252 203); border-r-lime-200border-right-color: rgb(217 249 157); border-r-lime-300border-right-color: rgb(190 242 100); border-r-lime-400border-right-color: rgb(163 230 53); border-r-lime-500border-right-color: rgb(132 204 22); border-r-lime-600border-right-color: rgb(101 163 13); border-r-lime-700border-right-color: rgb(77 124 15); border-r-lime-800border-right-color: rgb(63 98 18); border-r-lime-900border-right-color: rgb(54 83 20); border-r-lime-950border-right-color: rgb(26 46 5); border-r-green-50border-right-color: rgb(240 253 244); border-r-green-100border-right-color: rgb(220 252 231); border-r-green-200border-right-color: rgb(187 247 208); border-r-green-300border-right-color: rgb(134 239 172); border-r-green-400border-right-color: rgb(74 222 128); border-r-green-500border-right-color: rgb(34 197 94); border-r-green-600border-right-color: rgb(22 163 74); border-r-green-700border-right-color: rgb(21 128 61); border-r-green-800border-right-color: rgb(22 101 52); border-r-green-900border-right-color: rgb(20 83 45); border-r-green-950border-right-color: rgb(5 46 22); border-r-emerald-50border-right-color: rgb(236 253 245); border-r-emerald-100border-right-color: rgb(209 250 229); border-r-emerald-200border-right-color: rgb(167 243 208); border-r-emerald-300border-right-color: rgb(110 231 183); border-r-emerald-400border-right-color: rgb(52 211 153); border-r-emerald-500border-right-color: rgb(16 185 129); border-r-emerald-600border-right-color: rgb(5 150 105); border-r-emerald-700border-right-color: rgb(4 120 87); border-r-emerald-800border-right-color: rgb(6 95 70); border-r-emerald-900border-right-color: rgb(6 78 59); border-r-emerald-950border-right-color: rgb(2 44 34); border-r-teal-50border-right-color: rgb(240 253 250); border-r-teal-100border-right-color: rgb(204 251 241); border-r-teal-200border-right-color: rgb(153 246 228); border-r-teal-300border-right-color: rgb(94 234 212); border-r-teal-400border-right-color: rgb(45 212 191); border-r-teal-500border-right-color: rgb(20 184 166); border-r-teal-600border-right-color: rgb(13 148 136); border-r-teal-700border-right-color: rgb(15 118 110); border-r-teal-800border-right-color: rgb(17 94 89); border-r-teal-900border-right-color: rgb(19 78 74); border-r-teal-950border-right-color: rgb(4 47 46); border-r-cyan-50border-right-color: rgb(236 254 255); border-r-cyan-100border-right-color: rgb(207 250 254); border-r-cyan-200border-right-color: rgb(165 243 252); border-r-cyan-300border-right-color: rgb(103 232 249); border-r-cyan-400border-right-color: rgb(34 211 238); border-r-cyan-500border-right-color: rgb(6 182 212); border-r-cyan-600border-right-color: rgb(8 145 178); border-r-cyan-700border-right-color: rgb(14 116 144); border-r-cyan-800border-right-color: rgb(21 94 117); border-r-cyan-900border-right-color: rgb(22 78 99); border-r-cyan-950border-right-color: rgb(8 51 68); border-r-sky-50border-right-color: rgb(240 249 255); border-r-sky-100border-right-color: rgb(224 242 254); border-r-sky-200border-right-color: rgb(186 230 253); border-r-sky-300border-right-color: rgb(125 211 252); border-r-sky-400border-right-color: rgb(56 189 248); border-r-sky-500border-right-color: rgb(14 165 233); border-r-sky-600border-right-color: rgb(2 132 199); border-r-sky-700border-right-color: rgb(3 105 161); border-r-sky-800border-right-color: rgb(7 89 133); border-r-sky-900border-right-color: rgb(12 74 110); border-r-sky-950border-right-color: rgb(8 47 73); border-r-blue-50border-right-color: rgb(239 246 255); border-r-blue-100border-right-color: rgb(219 234 254); border-r-blue-200border-right-color: rgb(191 219 254); border-r-blue-300border-right-color: rgb(147 197 253); border-r-blue-400border-right-color: rgb(96 165 250); border-r-blue-500border-right-color: rgb(59 130 246); border-r-blue-600border-right-color: rgb(37 99 235); border-r-blue-700border-right-color: rgb(29 78 216); border-r-blue-800border-right-color: rgb(30 64 175); border-r-blue-900border-right-color: rgb(30 58 138); border-r-blue-950border-right-color: rgb(23 37 84); border-r-indigo-50border-right-color: rgb(238 242 255); border-r-indigo-100border-right-color: rgb(224 231 255); border-r-indigo-200border-right-color: rgb(199 210 254); border-r-indigo-300border-right-color: rgb(165 180 252); border-r-indigo-400border-right-color: rgb(129 140 248); border-r-indigo-500border-right-color: rgb(99 102 241); border-r-indigo-600border-right-color: rgb(79 70 229); border-r-indigo-700border-right-color: rgb(67 56 202); border-r-indigo-800border-right-color: rgb(55 48 163); border-r-indigo-900border-right-color: rgb(49 46 129); border-r-indigo-950border-right-color: rgb(30 27 75); border-r-violet-50border-right-color: rgb(245 243 255); border-r-violet-100border-right-color: rgb(237 233 254); border-r-violet-200border-right-color: rgb(221 214 254); border-r-violet-300border-right-color: rgb(196 181 253); border-r-violet-400border-right-color: rgb(167 139 250); border-r-violet-500border-right-color: rgb(139 92 246); border-r-violet-600border-right-color: rgb(124 58 237); border-r-violet-700border-right-color: rgb(109 40 217); border-r-violet-800border-right-color: rgb(91 33 182); border-r-violet-900border-right-color: rgb(76 29 149); border-r-violet-950border-right-color: rgb(46 16 101); border-r-purple-50border-right-color: rgb(250 245 255); border-r-purple-100border-right-color: rgb(243 232 255); border-r-purple-200border-right-color: rgb(233 213 255); border-r-purple-300border-right-color: rgb(216 180 254); border-r-purple-400border-right-color: rgb(192 132 252); border-r-purple-500border-right-color: rgb(168 85 247); border-r-purple-600border-right-color: rgb(147 51 234); border-r-purple-700border-right-color: rgb(126 34 206); border-r-purple-800border-right-color: rgb(107 33 168); border-r-purple-900border-right-color: rgb(88 28 135); border-r-purple-950border-right-color: rgb(59 7 100); border-r-fuchsia-50border-right-color: rgb(253 244 255); border-r-fuchsia-100border-right-color: rgb(250 232 255); border-r-fuchsia-200border-right-color: rgb(245 208 254); border-r-fuchsia-300border-right-color: rgb(240 171 252); border-r-fuchsia-400border-right-color: rgb(232 121 249); border-r-fuchsia-500border-right-color: rgb(217 70 239); border-r-fuchsia-600border-right-color: rgb(192 38 211); border-r-fuchsia-700border-right-color: rgb(162 28 175); border-r-fuchsia-800border-right-color: rgb(134 25 143); border-r-fuchsia-900border-right-color: rgb(112 26 117); border-r-fuchsia-950border-right-color: rgb(74 4 78); border-r-pink-50border-right-color: rgb(253 242 248); border-r-pink-100border-right-color: rgb(252 231 243); border-r-pink-200border-right-color: rgb(251 207 232); border-r-pink-300border-right-color: rgb(249 168 212); border-r-pink-400border-right-color: rgb(244 114 182); border-r-pink-500border-right-color: rgb(236 72 153); border-r-pink-600border-right-color: rgb(219 39 119); border-r-pink-700border-right-color: rgb(190 24 93); border-r-pink-800border-right-color: rgb(157 23 77); border-r-pink-900border-right-color: rgb(131 24 67); border-r-pink-950border-right-color: rgb(80 7 36); border-r-rose-50border-right-color: rgb(255 241 242); border-r-rose-100border-right-color: rgb(255 228 230); border-r-rose-200border-right-color: rgb(254 205 211); border-r-rose-300border-right-color: rgb(253 164 175); border-r-rose-400border-right-color: rgb(251 113 133); border-r-rose-500border-right-color: rgb(244 63 94); border-r-rose-600border-right-color: rgb(225 29 72); border-r-rose-700border-right-color: rgb(190 18 60); border-r-rose-800border-right-color: rgb(159 18 57); border-r-rose-900border-right-color: rgb(136 19 55); border-r-rose-950border-right-color: rgb(76 5 25); border-b-inheritborder-bottom-color: inherit; border-b-currentborder-bottom-color: currentColor; border-b-transparentborder-bottom-color: transparent; border-b-blackborder-bottom-color: rgb(0 0 0); border-b-whiteborder-bottom-color: rgb(255 255 255); border-b-slate-50border-bottom-color: rgb(248 250 252); border-b-slate-100border-bottom-color: rgb(241 245 249); border-b-slate-200border-bottom-color: rgb(226 232 240); border-b-slate-300border-bottom-color: rgb(203 213 225); border-b-slate-400border-bottom-color: rgb(148 163 184); border-b-slate-500border-bottom-color: rgb(100 116 139); border-b-slate-600border-bottom-color: rgb(71 85 105); border-b-slate-700border-bottom-color: rgb(51 65 85); border-b-slate-800border-bottom-color: rgb(30 41 59); border-b-slate-900border-bottom-color: rgb(15 23 42); border-b-slate-950border-bottom-color: rgb(2 6 23); border-b-gray-50border-bottom-color: rgb(249 250 251); border-b-gray-100border-bottom-color: rgb(243 244 246); border-b-gray-200border-bottom-color: rgb(229 231 235); border-b-gray-300border-bottom-color: rgb(209 213 219); border-b-gray-400border-bottom-color: rgb(156 163 175); border-b-gray-500border-bottom-color: rgb(107 114 128); border-b-gray-600border-bottom-color: rgb(75 85 99); border-b-gray-700border-bottom-color: rgb(55 65 81); border-b-gray-800border-bottom-color: rgb(31 41 55); border-b-gray-900border-bottom-color: rgb(17 24 39); border-b-gray-950border-bottom-color: rgb(3 7 18); border-b-zinc-50border-bottom-color: rgb(250 250 250); border-b-zinc-100border-bottom-color: rgb(244 244 245); border-b-zinc-200border-bottom-color: rgb(228 228 231); border-b-zinc-300border-bottom-color: rgb(212 212 216); border-b-zinc-400border-bottom-color: rgb(161 161 170); border-b-zinc-500border-bottom-color: rgb(113 113 122); border-b-zinc-600border-bottom-color: rgb(82 82 91); border-b-zinc-700border-bottom-color: rgb(63 63 70); border-b-zinc-800border-bottom-color: rgb(39 39 42); border-b-zinc-900border-bottom-color: rgb(24 24 27); border-b-zinc-950border-bottom-color: rgb(9 9 11); border-b-neutral-50border-bottom-color: rgb(250 250 250); border-b-neutral-100border-bottom-color: rgb(245 245 245); border-b-neutral-200border-bottom-color: rgb(229 229 229); border-b-neutral-300border-bottom-color: rgb(212 212 212); border-b-neutral-400border-bottom-color: rgb(163 163 163); border-b-neutral-500border-bottom-color: rgb(115 115 115); border-b-neutral-600border-bottom-color: rgb(82 82 82); border-b-neutral-700border-bottom-color: rgb(64 64 64); border-b-neutral-800border-bottom-color: rgb(38 38 38); border-b-neutral-900border-bottom-color: rgb(23 23 23); border-b-neutral-950border-bottom-color: rgb(10 10 10); border-b-stone-50border-bottom-color: rgb(250 250 249); border-b-stone-100border-bottom-color: rgb(245 245 244); border-b-stone-200border-bottom-color: rgb(231 229 228); border-b-stone-300border-bottom-color: rgb(214 211 209); border-b-stone-400border-bottom-color: rgb(168 162 158); border-b-stone-500border-bottom-color: rgb(120 113 108); border-b-stone-600border-bottom-color: rgb(87 83 78); border-b-stone-700border-bottom-color: rgb(68 64 60); border-b-stone-800border-bottom-color: rgb(41 37 36); border-b-stone-900border-bottom-color: rgb(28 25 23); border-b-stone-950border-bottom-color: rgb(12 10 9); border-b-red-50border-bottom-color: rgb(254 242 242); border-b-red-100border-bottom-color: rgb(254 226 226); border-b-red-200border-bottom-color: rgb(254 202 202); border-b-red-300border-bottom-color: rgb(252 165 165); border-b-red-400border-bottom-color: rgb(248 113 113); border-b-red-500border-bottom-color: rgb(239 68 68); border-b-red-600border-bottom-color: rgb(220 38 38); border-b-red-700border-bottom-color: rgb(185 28 28); border-b-red-800border-bottom-color: rgb(153 27 27); border-b-red-900border-bottom-color: rgb(127 29 29); border-b-red-950border-bottom-color: rgb(69 10 10); border-b-orange-50border-bottom-color: rgb(255 247 237); border-b-orange-100border-bottom-color: rgb(255 237 213); border-b-orange-200border-bottom-color: rgb(254 215 170); border-b-orange-300border-bottom-color: rgb(253 186 116); border-b-orange-400border-bottom-color: rgb(251 146 60); border-b-orange-500border-bottom-color: rgb(249 115 22); border-b-orange-600border-bottom-color: rgb(234 88 12); border-b-orange-700border-bottom-color: rgb(194 65 12); border-b-orange-800border-bottom-color: rgb(154 52 18); border-b-orange-900border-bottom-color: rgb(124 45 18); border-b-orange-950border-bottom-color: rgb(67 20 7); border-b-amber-50border-bottom-color: rgb(255 251 235); border-b-amber-100border-bottom-color: rgb(254 243 199); border-b-amber-200border-bottom-color: rgb(253 230 138); border-b-amber-300border-bottom-color: rgb(252 211 77); border-b-amber-400border-bottom-color: rgb(251 191 36); border-b-amber-500border-bottom-color: rgb(245 158 11); border-b-amber-600border-bottom-color: rgb(217 119 6); border-b-amber-700border-bottom-color: rgb(180 83 9); border-b-amber-800border-bottom-color: rgb(146 64 14); border-b-amber-900border-bottom-color: rgb(120 53 15); border-b-amber-950border-bottom-color: rgb(69 26 3); border-b-yellow-50border-bottom-color: rgb(254 252 232); border-b-yellow-100border-bottom-color: rgb(254 249 195); border-b-yellow-200border-bottom-color: rgb(254 240 138); border-b-yellow-300border-bottom-color: rgb(253 224 71); border-b-yellow-400border-bottom-color: rgb(250 204 21); border-b-yellow-500border-bottom-color: rgb(234 179 8); border-b-yellow-600border-bottom-color: rgb(202 138 4); border-b-yellow-700border-bottom-color: rgb(161 98 7); border-b-yellow-800border-bottom-color: rgb(133 77 14); border-b-yellow-900border-bottom-color: rgb(113 63 18); border-b-yellow-950border-bottom-color: rgb(66 32 6); border-b-lime-50border-bottom-color: rgb(247 254 231); border-b-lime-100border-bottom-color: rgb(236 252 203); border-b-lime-200border-bottom-color: rgb(217 249 157); border-b-lime-300border-bottom-color: rgb(190 242 100); border-b-lime-400border-bottom-color: rgb(163 230 53); border-b-lime-500border-bottom-color: rgb(132 204 22); border-b-lime-600border-bottom-color: rgb(101 163 13); border-b-lime-700border-bottom-color: rgb(77 124 15); border-b-lime-800border-bottom-color: rgb(63 98 18); border-b-lime-900border-bottom-color: rgb(54 83 20); border-b-lime-950border-bottom-color: rgb(26 46 5); border-b-green-50border-bottom-color: rgb(240 253 244); border-b-green-100border-bottom-color: rgb(220 252 231); border-b-green-200border-bottom-color: rgb(187 247 208); border-b-green-300border-bottom-color: rgb(134 239 172); border-b-green-400border-bottom-color: rgb(74 222 128); border-b-green-500border-bottom-color: rgb(34 197 94); border-b-green-600border-bottom-color: rgb(22 163 74); border-b-green-700border-bottom-color: rgb(21 128 61); border-b-green-800border-bottom-color: rgb(22 101 52); border-b-green-900border-bottom-color: rgb(20 83 45); border-b-green-950border-bottom-color: rgb(5 46 22); border-b-emerald-50border-bottom-color: rgb(236 253 245); border-b-emerald-100border-bottom-color: rgb(209 250 229); border-b-emerald-200border-bottom-color: rgb(167 243 208); border-b-emerald-300border-bottom-color: rgb(110 231 183); border-b-emerald-400border-bottom-color: rgb(52 211 153); border-b-emerald-500border-bottom-color: rgb(16 185 129); border-b-emerald-600border-bottom-color: rgb(5 150 105); border-b-emerald-700border-bottom-color: rgb(4 120 87); border-b-emerald-800border-bottom-color: rgb(6 95 70); border-b-emerald-900border-bottom-color: rgb(6 78 59); border-b-emerald-950border-bottom-color: rgb(2 44 34); border-b-teal-50border-bottom-color: rgb(240 253 250); border-b-teal-100border-bottom-color: rgb(204 251 241); border-b-teal-200border-bottom-color: rgb(153 246 228); border-b-teal-300border-bottom-color: rgb(94 234 212); border-b-teal-400border-bottom-color: rgb(45 212 191); border-b-teal-500border-bottom-color: rgb(20 184 166); border-b-teal-600border-bottom-color: rgb(13 148 136); border-b-teal-700border-bottom-color: rgb(15 118 110); border-b-teal-800border-bottom-color: rgb(17 94 89); border-b-teal-900border-bottom-color: rgb(19 78 74); border-b-teal-950border-bottom-color: rgb(4 47 46); border-b-cyan-50border-bottom-color: rgb(236 254 255); border-b-cyan-100border-bottom-color: rgb(207 250 254); border-b-cyan-200border-bottom-color: rgb(165 243 252); border-b-cyan-300border-bottom-color: rgb(103 232 249); border-b-cyan-400border-bottom-color: rgb(34 211 238); border-b-cyan-500border-bottom-color: rgb(6 182 212); border-b-cyan-600border-bottom-color: rgb(8 145 178); border-b-cyan-700border-bottom-color: rgb(14 116 144); border-b-cyan-800border-bottom-color: rgb(21 94 117); border-b-cyan-900border-bottom-color: rgb(22 78 99); border-b-cyan-950border-bottom-color: rgb(8 51 68); border-b-sky-50border-bottom-color: rgb(240 249 255); border-b-sky-100border-bottom-color: rgb(224 242 254); border-b-sky-200border-bottom-color: rgb(186 230 253); border-b-sky-300border-bottom-color: rgb(125 211 252); border-b-sky-400border-bottom-color: rgb(56 189 248); border-b-sky-500border-bottom-color: rgb(14 165 233); border-b-sky-600border-bottom-color: rgb(2 132 199); border-b-sky-700border-bottom-color: rgb(3 105 161); border-b-sky-800border-bottom-color: rgb(7 89 133); border-b-sky-900border-bottom-color: rgb(12 74 110); border-b-sky-950border-bottom-color: rgb(8 47 73); border-b-blue-50border-bottom-color: rgb(239 246 255); border-b-blue-100border-bottom-color: rgb(219 234 254); border-b-blue-200border-bottom-color: rgb(191 219 254); border-b-blue-300border-bottom-color: rgb(147 197 253); border-b-blue-400border-bottom-color: rgb(96 165 250); border-b-blue-500border-bottom-color: rgb(59 130 246); border-b-blue-600border-bottom-color: rgb(37 99 235); border-b-blue-700border-bottom-color: rgb(29 78 216); border-b-blue-800border-bottom-color: rgb(30 64 175); border-b-blue-900border-bottom-color: rgb(30 58 138); border-b-blue-950border-bottom-color: rgb(23 37 84); border-b-indigo-50border-bottom-color: rgb(238 242 255); border-b-indigo-100border-bottom-color: rgb(224 231 255); border-b-indigo-200border-bottom-color: rgb(199 210 254); border-b-indigo-300border-bottom-color: rgb(165 180 252); border-b-indigo-400border-bottom-color: rgb(129 140 248); border-b-indigo-500border-bottom-color: rgb(99 102 241); border-b-indigo-600border-bottom-color: rgb(79 70 229); border-b-indigo-700border-bottom-color: rgb(67 56 202); border-b-indigo-800border-bottom-color: rgb(55 48 163); border-b-indigo-900border-bottom-color: rgb(49 46 129); border-b-indigo-950border-bottom-color: rgb(30 27 75); border-b-violet-50border-bottom-color: rgb(245 243 255); border-b-violet-100border-bottom-color: rgb(237 233 254); border-b-violet-200border-bottom-color: rgb(221 214 254); border-b-violet-300border-bottom-color: rgb(196 181 253); border-b-violet-400border-bottom-color: rgb(167 139 250); border-b-violet-500border-bottom-color: rgb(139 92 246); border-b-violet-600border-bottom-color: rgb(124 58 237); border-b-violet-700border-bottom-color: rgb(109 40 217); border-b-violet-800border-bottom-color: rgb(91 33 182); border-b-violet-900border-bottom-color: rgb(76 29 149); border-b-violet-950border-bottom-color: rgb(46 16 101); border-b-purple-50border-bottom-color: rgb(250 245 255); border-b-purple-100border-bottom-color: rgb(243 232 255); border-b-purple-200border-bottom-color: rgb(233 213 255); border-b-purple-300border-bottom-color: rgb(216 180 254); border-b-purple-400border-bottom-color: rgb(192 132 252); border-b-purple-500border-bottom-color: rgb(168 85 247); border-b-purple-600border-bottom-color: rgb(147 51 234); border-b-purple-700border-bottom-color: rgb(126 34 206); border-b-purple-800border-bottom-color: rgb(107 33 168); border-b-purple-900border-bottom-color: rgb(88 28 135); border-b-purple-950border-bottom-color: rgb(59 7 100); border-b-fuchsia-50border-bottom-color: rgb(253 244 255); border-b-fuchsia-100border-bottom-color: rgb(250 232 255); border-b-fuchsia-200border-bottom-color: rgb(245 208 254); border-b-fuchsia-300border-bottom-color: rgb(240 171 252); border-b-fuchsia-400border-bottom-color: rgb(232 121 249); border-b-fuchsia-500border-bottom-color: rgb(217 70 239); border-b-fuchsia-600border-bottom-color: rgb(192 38 211); border-b-fuchsia-700border-bottom-color: rgb(162 28 175); border-b-fuchsia-800border-bottom-color: rgb(134 25 143); border-b-fuchsia-900border-bottom-color: rgb(112 26 117); border-b-fuchsia-950border-bottom-color: rgb(74 4 78); border-b-pink-50border-bottom-color: rgb(253 242 248); border-b-pink-100border-bottom-color: rgb(252 231 243); border-b-pink-200border-bottom-color: rgb(251 207 232); border-b-pink-300border-bottom-color: rgb(249 168 212); border-b-pink-400border-bottom-color: rgb(244 114 182); border-b-pink-500border-bottom-color: rgb(236 72 153); border-b-pink-600border-bottom-color: rgb(219 39 119); border-b-pink-700border-bottom-color: rgb(190 24 93); border-b-pink-800border-bottom-color: rgb(157 23 77); border-b-pink-900border-bottom-color: rgb(131 24 67); border-b-pink-950border-bottom-color: rgb(80 7 36); border-b-rose-50border-bottom-color: rgb(255 241 242); border-b-rose-100border-bottom-color: rgb(255 228 230); border-b-rose-200border-bottom-color: rgb(254 205 211); border-b-rose-300border-bottom-color: rgb(253 164 175); border-b-rose-400border-bottom-color: rgb(251 113 133); border-b-rose-500border-bottom-color: rgb(244 63 94); border-b-rose-600border-bottom-color: rgb(225 29 72); border-b-rose-700border-bottom-color: rgb(190 18 60); border-b-rose-800border-bottom-color: rgb(159 18 57); border-b-rose-900border-bottom-color: rgb(136 19 55); border-b-rose-950border-bottom-color: rgb(76 5 25); border-l-inheritborder-left-color: inherit; border-l-currentborder-left-color: currentColor; border-l-transparentborder-left-color: transparent; border-l-blackborder-left-color: rgb(0 0 0); border-l-whiteborder-left-color: rgb(255 255 255); border-l-slate-50border-left-color: rgb(248 250 252); border-l-slate-100border-left-color: rgb(241 245 249); border-l-slate-200border-left-color: rgb(226 232 240); border-l-slate-300border-left-color: rgb(203 213 225); border-l-slate-400border-left-color: rgb(148 163 184); border-l-slate-500border-left-color: rgb(100 116 139); border-l-slate-600border-left-color: rgb(71 85 105); border-l-slate-700border-left-color: rgb(51 65 85); border-l-slate-800border-left-color: rgb(30 41 59); border-l-slate-900border-left-color: rgb(15 23 42); border-l-slate-950border-left-color: rgb(2 6 23); border-l-gray-50border-left-color: rgb(249 250 251); border-l-gray-100border-left-color: rgb(243 244 246); border-l-gray-200border-left-color: rgb(229 231 235); border-l-gray-300border-left-color: rgb(209 213 219); border-l-gray-400border-left-color: rgb(156 163 175); border-l-gray-500border-left-color: rgb(107 114 128); border-l-gray-600border-left-color: rgb(75 85 99); border-l-gray-700border-left-color: rgb(55 65 81); border-l-gray-800border-left-color: rgb(31 41 55); border-l-gray-900border-left-color: rgb(17 24 39); border-l-gray-950border-left-color: rgb(3 7 18); border-l-zinc-50border-left-color: rgb(250 250 250); border-l-zinc-100border-left-color: rgb(244 244 245); border-l-zinc-200border-left-color: rgb(228 228 231); border-l-zinc-300border-left-color: rgb(212 212 216); border-l-zinc-400border-left-color: rgb(161 161 170); border-l-zinc-500border-left-color: rgb(113 113 122); border-l-zinc-600border-left-color: rgb(82 82 91); border-l-zinc-700border-left-color: rgb(63 63 70); border-l-zinc-800border-left-color: rgb(39 39 42); border-l-zinc-900border-left-color: rgb(24 24 27); border-l-zinc-950border-left-color: rgb(9 9 11); border-l-neutral-50border-left-color: rgb(250 250 250); border-l-neutral-100border-left-color: rgb(245 245 245); border-l-neutral-200border-left-color: rgb(229 229 229); border-l-neutral-300border-left-color: rgb(212 212 212); border-l-neutral-400border-left-color: rgb(163 163 163); border-l-neutral-500border-left-color: rgb(115 115 115); border-l-neutral-600border-left-color: rgb(82 82 82); border-l-neutral-700border-left-color: rgb(64 64 64); border-l-neutral-800border-left-color: rgb(38 38 38); border-l-neutral-900border-left-color: rgb(23 23 23); border-l-neutral-950border-left-color: rgb(10 10 10); border-l-stone-50border-left-color: rgb(250 250 249); border-l-stone-100border-left-color: rgb(245 245 244); border-l-stone-200border-left-color: rgb(231 229 228); border-l-stone-300border-left-color: rgb(214 211 209); border-l-stone-400border-left-color: rgb(168 162 158); border-l-stone-500border-left-color: rgb(120 113 108); border-l-stone-600border-left-color: rgb(87 83 78); border-l-stone-700border-left-color: rgb(68 64 60); border-l-stone-800border-left-color: rgb(41 37 36); border-l-stone-900border-left-color: rgb(28 25 23); border-l-stone-950border-left-color: rgb(12 10 9); border-l-red-50border-left-color: rgb(254 242 242); border-l-red-100border-left-color: rgb(254 226 226); border-l-red-200border-left-color: rgb(254 202 202); border-l-red-300border-left-color: rgb(252 165 165); border-l-red-400border-left-color: rgb(248 113 113); border-l-red-500border-left-color: rgb(239 68 68); border-l-red-600border-left-color: rgb(220 38 38); border-l-red-700border-left-color: rgb(185 28 28); border-l-red-800border-left-color: rgb(153 27 27); border-l-red-900border-left-color: rgb(127 29 29); border-l-red-950border-left-color: rgb(69 10 10); border-l-orange-50border-left-color: rgb(255 247 237); border-l-orange-100border-left-color: rgb(255 237 213); border-l-orange-200border-left-color: rgb(254 215 170); border-l-orange-300border-left-color: rgb(253 186 116); border-l-orange-400border-left-color: rgb(251 146 60); border-l-orange-500border-left-color: rgb(249 115 22); border-l-orange-600border-left-color: rgb(234 88 12); border-l-orange-700border-left-color: rgb(194 65 12); border-l-orange-800border-left-color: rgb(154 52 18); border-l-orange-900border-left-color: rgb(124 45 18); border-l-orange-950border-left-color: rgb(67 20 7); border-l-amber-50border-left-color: rgb(255 251 235); border-l-amber-100border-left-color: rgb(254 243 199); border-l-amber-200border-left-color: rgb(253 230 138); border-l-amber-300border-left-color: rgb(252 211 77); border-l-amber-400border-left-color: rgb(251 191 36); border-l-amber-500border-left-color: rgb(245 158 11); border-l-amber-600border-left-color: rgb(217 119 6); border-l-amber-700border-left-color: rgb(180 83 9); border-l-amber-800border-left-color: rgb(146 64 14); border-l-amber-900border-left-color: rgb(120 53 15); border-l-amber-950border-left-color: rgb(69 26 3); border-l-yellow-50border-left-color: rgb(254 252 232); border-l-yellow-100border-left-color: rgb(254 249 195); border-l-yellow-200border-left-color: rgb(254 240 138); border-l-yellow-300border-left-color: rgb(253 224 71); border-l-yellow-400border-left-color: rgb(250 204 21); border-l-yellow-500border-left-color: rgb(234 179 8); border-l-yellow-600border-left-color: rgb(202 138 4); border-l-yellow-700border-left-color: rgb(161 98 7); border-l-yellow-800border-left-color: rgb(133 77 14); border-l-yellow-900border-left-color: rgb(113 63 18); border-l-yellow-950border-left-color: rgb(66 32 6); border-l-lime-50border-left-color: rgb(247 254 231); border-l-lime-100border-left-color: rgb(236 252 203); border-l-lime-200border-left-color: rgb(217 249 157); border-l-lime-300border-left-color: rgb(190 242 100); border-l-lime-400border-left-color: rgb(163 230 53); border-l-lime-500border-left-color: rgb(132 204 22); border-l-lime-600border-left-color: rgb(101 163 13); border-l-lime-700border-left-color: rgb(77 124 15); border-l-lime-800border-left-color: rgb(63 98 18); border-l-lime-900border-left-color: rgb(54 83 20); border-l-lime-950border-left-color: rgb(26 46 5); border-l-green-50border-left-color: rgb(240 253 244); border-l-green-100border-left-color: rgb(220 252 231); border-l-green-200border-left-color: rgb(187 247 208); border-l-green-300border-left-color: rgb(134 239 172); border-l-green-400border-left-color: rgb(74 222 128); border-l-green-500border-left-color: rgb(34 197 94); border-l-green-600border-left-color: rgb(22 163 74); border-l-green-700border-left-color: rgb(21 128 61); border-l-green-800border-left-color: rgb(22 101 52); border-l-green-900border-left-color: rgb(20 83 45); border-l-green-950border-left-color: rgb(5 46 22); border-l-emerald-50border-left-color: rgb(236 253 245); border-l-emerald-100border-left-color: rgb(209 250 229); border-l-emerald-200border-left-color: rgb(167 243 208); border-l-emerald-300border-left-color: rgb(110 231 183); border-l-emerald-400border-left-color: rgb(52 211 153); border-l-emerald-500border-left-color: rgb(16 185 129); border-l-emerald-600border-left-color: rgb(5 150 105); border-l-emerald-700border-left-color: rgb(4 120 87); border-l-emerald-800border-left-color: rgb(6 95 70); border-l-emerald-900border-left-color: rgb(6 78 59); border-l-emerald-950border-left-color: rgb(2 44 34); border-l-teal-50border-left-color: rgb(240 253 250); border-l-teal-100border-left-color: rgb(204 251 241); border-l-teal-200border-left-color: rgb(153 246 228); border-l-teal-300border-left-color: rgb(94 234 212); border-l-teal-400border-left-color: rgb(45 212 191); border-l-teal-500border-left-color: rgb(20 184 166); border-l-teal-600border-left-color: rgb(13 148 136); border-l-teal-700border-left-color: rgb(15 118 110); border-l-teal-800border-left-color: rgb(17 94 89); border-l-teal-900border-left-color: rgb(19 78 74); border-l-teal-950border-left-color: rgb(4 47 46); border-l-cyan-50border-left-color: rgb(236 254 255); border-l-cyan-100border-left-color: rgb(207 250 254); border-l-cyan-200border-left-color: rgb(165 243 252); border-l-cyan-300border-left-color: rgb(103 232 249); border-l-cyan-400border-left-color: rgb(34 211 238); border-l-cyan-500border-left-color: rgb(6 182 212); border-l-cyan-600border-left-color: rgb(8 145 178); border-l-cyan-700border-left-color: rgb(14 116 144); border-l-cyan-800border-left-color: rgb(21 94 117); border-l-cyan-900border-left-color: rgb(22 78 99); border-l-cyan-950border-left-color: rgb(8 51 68); border-l-sky-50border-left-color: rgb(240 249 255); border-l-sky-100border-left-color: rgb(224 242 254); border-l-sky-200border-left-color: rgb(186 230 253); border-l-sky-300border-left-color: rgb(125 211 252); border-l-sky-400border-left-color: rgb(56 189 248); border-l-sky-500border-left-color: rgb(14 165 233); border-l-sky-600border-left-color: rgb(2 132 199); border-l-sky-700border-left-color: rgb(3 105 161); border-l-sky-800border-left-color: rgb(7 89 133); border-l-sky-900border-left-color: rgb(12 74 110); border-l-sky-950border-left-color: rgb(8 47 73); border-l-blue-50border-left-color: rgb(239 246 255); border-l-blue-100border-left-color: rgb(219 234 254); border-l-blue-200border-left-color: rgb(191 219 254); border-l-blue-300border-left-color: rgb(147 197 253); border-l-blue-400border-left-color: rgb(96 165 250); border-l-blue-500border-left-color: rgb(59 130 246); border-l-blue-600border-left-color: rgb(37 99 235); border-l-blue-700border-left-color: rgb(29 78 216); border-l-blue-800border-left-color: rgb(30 64 175); border-l-blue-900border-left-color: rgb(30 58 138); border-l-blue-950border-left-color: rgb(23 37 84); border-l-indigo-50border-left-color: rgb(238 242 255); border-l-indigo-100border-left-color: rgb(224 231 255); border-l-indigo-200border-left-color: rgb(199 210 254); border-l-indigo-300border-left-color: rgb(165 180 252); border-l-indigo-400border-left-color: rgb(129 140 248); border-l-indigo-500border-left-color: rgb(99 102 241); border-l-indigo-600border-left-color: rgb(79 70 229); border-l-indigo-700border-left-color: rgb(67 56 202); border-l-indigo-800border-left-color: rgb(55 48 163); border-l-indigo-900border-left-color: rgb(49 46 129); border-l-indigo-950border-left-color: rgb(30 27 75); border-l-violet-50border-left-color: rgb(245 243 255); border-l-violet-100border-left-color: rgb(237 233 254); border-l-violet-200border-left-color: rgb(221 214 254); border-l-violet-300border-left-color: rgb(196 181 253); border-l-violet-400border-left-color: rgb(167 139 250); border-l-violet-500border-left-color: rgb(139 92 246); border-l-violet-600border-left-color: rgb(124 58 237); border-l-violet-700border-left-color: rgb(109 40 217); border-l-violet-800border-left-color: rgb(91 33 182); border-l-violet-900border-left-color: rgb(76 29 149); border-l-violet-950border-left-color: rgb(46 16 101); border-l-purple-50border-left-color: rgb(250 245 255); border-l-purple-100border-left-color: rgb(243 232 255); border-l-purple-200border-left-color: rgb(233 213 255); border-l-purple-300border-left-color: rgb(216 180 254); border-l-purple-400border-left-color: rgb(192 132 252); border-l-purple-500border-left-color: rgb(168 85 247); border-l-purple-600border-left-color: rgb(147 51 234); border-l-purple-700border-left-color: rgb(126 34 206); border-l-purple-800border-left-color: rgb(107 33 168); border-l-purple-900border-left-color: rgb(88 28 135); border-l-purple-950border-left-color: rgb(59 7 100); border-l-fuchsia-50border-left-color: rgb(253 244 255); border-l-fuchsia-100border-left-color: rgb(250 232 255); border-l-fuchsia-200border-left-color: rgb(245 208 254); border-l-fuchsia-300border-left-color: rgb(240 171 252); border-l-fuchsia-400border-left-color: rgb(232 121 249); border-l-fuchsia-500border-left-color: rgb(217 70 239); border-l-fuchsia-600border-left-color: rgb(192 38 211); border-l-fuchsia-700border-left-color: rgb(162 28 175); border-l-fuchsia-800border-left-color: rgb(134 25 143); border-l-fuchsia-900border-left-color: rgb(112 26 117); border-l-fuchsia-950border-left-color: rgb(74 4 78); border-l-pink-50border-left-color: rgb(253 242 248); border-l-pink-100border-left-color: rgb(252 231 243); border-l-pink-200border-left-color: rgb(251 207 232); border-l-pink-300border-left-color: rgb(249 168 212); border-l-pink-400border-left-color: rgb(244 114 182); border-l-pink-500border-left-color: rgb(236 72 153); border-l-pink-600border-left-color: rgb(219 39 119); border-l-pink-700border-left-color: rgb(190 24 93); border-l-pink-800border-left-color: rgb(157 23 77); border-l-pink-900border-left-color: rgb(131 24 67); border-l-pink-950border-left-color: rgb(80 7 36); border-l-rose-50border-left-color: rgb(255 241 242); border-l-rose-100border-left-color: rgb(255 228 230); border-l-rose-200border-left-color: rgb(254 205 211); border-l-rose-300border-left-color: rgb(253 164 175); border-l-rose-400border-left-color: rgb(251 113 133); border-l-rose-500border-left-color: rgb(244 63 94); border-l-rose-600border-left-color: rgb(225 29 72); border-l-rose-700border-left-color: rgb(190 18 60); border-l-rose-800border-left-color: rgb(159 18 57); border-l-rose-900border-left-color: rgb(136 19 55); border-l-rose-950border-left-color: rgb(76 5 25);",
    "title": "Border Color - Tailwind CSS",
    "description": "Utilities for controlling the color of an element's borders.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/place-self",
    "markdown": "# Place Self - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Auto](#auto)\n\nUse `place-self-auto` to align an item based on the value of the container’s `place-items` property:\n\n```\n<div class=\"grid grid-cols-3 gap-4 ...\">\n  <div>01</div>\n  <div class=\"place-self-auto ...\">02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n  <div>06</div>\n</div>\n```\n\n### [​Start](#start)\n\nUse `place-self-start` to align an item to the start on both axes:\n\n```\n<div class=\"grid grid-cols-3 gap-4 ...\">\n  <div>01</div>\n  <div class=\"place-self-start ...\">02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n  <div>06</div>\n</div>\n```\n\n### [​Center](#center)\n\nUse `place-self-center` to align an item at the center on both axes:\n\n```\n<div class=\"grid grid-cols-3 gap-4 ...\">\n  <div>01</div>\n  <div class=\"place-self-center ...\">02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n  <div>06</div>\n</div>\n```\n\n### [​End](#end)\n\nUse `place-self-end` to align an item to the end on both axes:\n\n```\n<div class=\"grid grid-cols-3 gap-4 ...\">\n  <div>01</div>\n  <div class=\"place-self-end ...\">02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n  <div>06</div>\n</div>\n```\n\n### [​Stretch](#stretch)\n\nUse `place-self-stretch` to stretch an item on both axes:\n\n```\n<div class=\"grid grid-cols-3 gap-2 ...\">\n  <div>01</div>\n  <div class=\"place-self-stretch ...\">02</div>\n  <div>03</div>\n  <div>04</div>\n  <div>05</div>\n  <div>06</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:place-self-end` to only apply the `place-self-end` utility on hover.\n\n```\n<div class=\"place-self-start hover:place-self-end\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:place-self-end` to apply the `place-self-end` utility at only medium screen sizes and above.\n\n```\n<div class=\"place-self-start md:place-self-end\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Place Self - Tailwind CSS",
    "description": "Utilities for controlling how an individual item is justified and aligned at the same time.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/text-decoration-color",
    "markdown": "# Text Decoration Color - Tailwind CSS\n\ndecoration-inherittext-decoration-color: inherit; decoration-currenttext-decoration-color: currentColor; decoration-transparenttext-decoration-color: transparent; decoration-blacktext-decoration-color: #000; decoration-whitetext-decoration-color: #fff; decoration-slate-50text-decoration-color: #f8fafc; decoration-slate-100text-decoration-color: #f1f5f9; decoration-slate-200text-decoration-color: #e2e8f0; decoration-slate-300text-decoration-color: #cbd5e1; decoration-slate-400text-decoration-color: #94a3b8; decoration-slate-500text-decoration-color: #64748b; decoration-slate-600text-decoration-color: #475569; decoration-slate-700text-decoration-color: #334155; decoration-slate-800text-decoration-color: #1e293b; decoration-slate-900text-decoration-color: #0f172a; decoration-slate-950text-decoration-color: #020617; decoration-gray-50text-decoration-color: #f9fafb; decoration-gray-100text-decoration-color: #f3f4f6; decoration-gray-200text-decoration-color: #e5e7eb; decoration-gray-300text-decoration-color: #d1d5db; decoration-gray-400text-decoration-color: #9ca3af; decoration-gray-500text-decoration-color: #6b7280; decoration-gray-600text-decoration-color: #4b5563; decoration-gray-700text-decoration-color: #374151; decoration-gray-800text-decoration-color: #1f2937; decoration-gray-900text-decoration-color: #111827; decoration-gray-950text-decoration-color: #030712; decoration-zinc-50text-decoration-color: #fafafa; decoration-zinc-100text-decoration-color: #f4f4f5; decoration-zinc-200text-decoration-color: #e4e4e7; decoration-zinc-300text-decoration-color: #d4d4d8; decoration-zinc-400text-decoration-color: #a1a1aa; decoration-zinc-500text-decoration-color: #71717a; decoration-zinc-600text-decoration-color: #52525b; decoration-zinc-700text-decoration-color: #3f3f46; decoration-zinc-800text-decoration-color: #27272a; decoration-zinc-900text-decoration-color: #18181b; decoration-zinc-950text-decoration-color: #09090b; decoration-neutral-50text-decoration-color: #fafafa; decoration-neutral-100text-decoration-color: #f5f5f5; decoration-neutral-200text-decoration-color: #e5e5e5; decoration-neutral-300text-decoration-color: #d4d4d4; decoration-neutral-400text-decoration-color: #a3a3a3; decoration-neutral-500text-decoration-color: #737373; decoration-neutral-600text-decoration-color: #525252; decoration-neutral-700text-decoration-color: #404040; decoration-neutral-800text-decoration-color: #262626; decoration-neutral-900text-decoration-color: #171717; decoration-neutral-950text-decoration-color: #0a0a0a; decoration-stone-50text-decoration-color: #fafaf9; decoration-stone-100text-decoration-color: #f5f5f4; decoration-stone-200text-decoration-color: #e7e5e4; decoration-stone-300text-decoration-color: #d6d3d1; decoration-stone-400text-decoration-color: #a8a29e; decoration-stone-500text-decoration-color: #78716c; decoration-stone-600text-decoration-color: #57534e; decoration-stone-700text-decoration-color: #44403c; decoration-stone-800text-decoration-color: #292524; decoration-stone-900text-decoration-color: #1c1917; decoration-stone-950text-decoration-color: #0c0a09; decoration-red-50text-decoration-color: #fef2f2; decoration-red-100text-decoration-color: #fee2e2; decoration-red-200text-decoration-color: #fecaca; decoration-red-300text-decoration-color: #fca5a5; decoration-red-400text-decoration-color: #f87171; decoration-red-500text-decoration-color: #ef4444; decoration-red-600text-decoration-color: #dc2626; decoration-red-700text-decoration-color: #b91c1c; decoration-red-800text-decoration-color: #991b1b; decoration-red-900text-decoration-color: #7f1d1d; decoration-red-950text-decoration-color: #450a0a; decoration-orange-50text-decoration-color: #fff7ed; decoration-orange-100text-decoration-color: #ffedd5; decoration-orange-200text-decoration-color: #fed7aa; decoration-orange-300text-decoration-color: #fdba74; decoration-orange-400text-decoration-color: #fb923c; decoration-orange-500text-decoration-color: #f97316; decoration-orange-600text-decoration-color: #ea580c; decoration-orange-700text-decoration-color: #c2410c; decoration-orange-800text-decoration-color: #9a3412; decoration-orange-900text-decoration-color: #7c2d12; decoration-orange-950text-decoration-color: #431407; decoration-amber-50text-decoration-color: #fffbeb; decoration-amber-100text-decoration-color: #fef3c7; decoration-amber-200text-decoration-color: #fde68a; decoration-amber-300text-decoration-color: #fcd34d; decoration-amber-400text-decoration-color: #fbbf24; decoration-amber-500text-decoration-color: #f59e0b; decoration-amber-600text-decoration-color: #d97706; decoration-amber-700text-decoration-color: #b45309; decoration-amber-800text-decoration-color: #92400e; decoration-amber-900text-decoration-color: #78350f; decoration-amber-950text-decoration-color: #451a03; decoration-yellow-50text-decoration-color: #fefce8; decoration-yellow-100text-decoration-color: #fef9c3; decoration-yellow-200text-decoration-color: #fef08a; decoration-yellow-300text-decoration-color: #fde047; decoration-yellow-400text-decoration-color: #facc15; decoration-yellow-500text-decoration-color: #eab308; decoration-yellow-600text-decoration-color: #ca8a04; decoration-yellow-700text-decoration-color: #a16207; decoration-yellow-800text-decoration-color: #854d0e; decoration-yellow-900text-decoration-color: #713f12; decoration-yellow-950text-decoration-color: #422006; decoration-lime-50text-decoration-color: #f7fee7; decoration-lime-100text-decoration-color: #ecfccb; decoration-lime-200text-decoration-color: #d9f99d; decoration-lime-300text-decoration-color: #bef264; decoration-lime-400text-decoration-color: #a3e635; decoration-lime-500text-decoration-color: #84cc16; decoration-lime-600text-decoration-color: #65a30d; decoration-lime-700text-decoration-color: #4d7c0f; decoration-lime-800text-decoration-color: #3f6212; decoration-lime-900text-decoration-color: #365314; decoration-lime-950text-decoration-color: #1a2e05; decoration-green-50text-decoration-color: #f0fdf4; decoration-green-100text-decoration-color: #dcfce7; decoration-green-200text-decoration-color: #bbf7d0; decoration-green-300text-decoration-color: #86efac; decoration-green-400text-decoration-color: #4ade80; decoration-green-500text-decoration-color: #22c55e; decoration-green-600text-decoration-color: #16a34a; decoration-green-700text-decoration-color: #15803d; decoration-green-800text-decoration-color: #166534; decoration-green-900text-decoration-color: #14532d; decoration-green-950text-decoration-color: #052e16; decoration-emerald-50text-decoration-color: #ecfdf5; decoration-emerald-100text-decoration-color: #d1fae5; decoration-emerald-200text-decoration-color: #a7f3d0; decoration-emerald-300text-decoration-color: #6ee7b7; decoration-emerald-400text-decoration-color: #34d399; decoration-emerald-500text-decoration-color: #10b981; decoration-emerald-600text-decoration-color: #059669; decoration-emerald-700text-decoration-color: #047857; decoration-emerald-800text-decoration-color: #065f46; decoration-emerald-900text-decoration-color: #064e3b; decoration-emerald-950text-decoration-color: #022c22; decoration-teal-50text-decoration-color: #f0fdfa; decoration-teal-100text-decoration-color: #ccfbf1; decoration-teal-200text-decoration-color: #99f6e4; decoration-teal-300text-decoration-color: #5eead4; decoration-teal-400text-decoration-color: #2dd4bf; decoration-teal-500text-decoration-color: #14b8a6; decoration-teal-600text-decoration-color: #0d9488; decoration-teal-700text-decoration-color: #0f766e; decoration-teal-800text-decoration-color: #115e59; decoration-teal-900text-decoration-color: #134e4a; decoration-teal-950text-decoration-color: #042f2e; decoration-cyan-50text-decoration-color: #ecfeff; decoration-cyan-100text-decoration-color: #cffafe; decoration-cyan-200text-decoration-color: #a5f3fc; decoration-cyan-300text-decoration-color: #67e8f9; decoration-cyan-400text-decoration-color: #22d3ee; decoration-cyan-500text-decoration-color: #06b6d4; decoration-cyan-600text-decoration-color: #0891b2; decoration-cyan-700text-decoration-color: #0e7490; decoration-cyan-800text-decoration-color: #155e75; decoration-cyan-900text-decoration-color: #164e63; decoration-cyan-950text-decoration-color: #083344; decoration-sky-50text-decoration-color: #f0f9ff; decoration-sky-100text-decoration-color: #e0f2fe; decoration-sky-200text-decoration-color: #bae6fd; decoration-sky-300text-decoration-color: #7dd3fc; decoration-sky-400text-decoration-color: #38bdf8; decoration-sky-500text-decoration-color: #0ea5e9; decoration-sky-600text-decoration-color: #0284c7; decoration-sky-700text-decoration-color: #0369a1; decoration-sky-800text-decoration-color: #075985; decoration-sky-900text-decoration-color: #0c4a6e; decoration-sky-950text-decoration-color: #082f49; decoration-blue-50text-decoration-color: #eff6ff; decoration-blue-100text-decoration-color: #dbeafe; decoration-blue-200text-decoration-color: #bfdbfe; decoration-blue-300text-decoration-color: #93c5fd; decoration-blue-400text-decoration-color: #60a5fa; decoration-blue-500text-decoration-color: #3b82f6; decoration-blue-600text-decoration-color: #2563eb; decoration-blue-700text-decoration-color: #1d4ed8; decoration-blue-800text-decoration-color: #1e40af; decoration-blue-900text-decoration-color: #1e3a8a; decoration-blue-950text-decoration-color: #172554; decoration-indigo-50text-decoration-color: #eef2ff; decoration-indigo-100text-decoration-color: #e0e7ff; decoration-indigo-200text-decoration-color: #c7d2fe; decoration-indigo-300text-decoration-color: #a5b4fc; decoration-indigo-400text-decoration-color: #818cf8; decoration-indigo-500text-decoration-color: #6366f1; decoration-indigo-600text-decoration-color: #4f46e5; decoration-indigo-700text-decoration-color: #4338ca; decoration-indigo-800text-decoration-color: #3730a3; decoration-indigo-900text-decoration-color: #312e81; decoration-indigo-950text-decoration-color: #1e1b4b; decoration-violet-50text-decoration-color: #f5f3ff; decoration-violet-100text-decoration-color: #ede9fe; decoration-violet-200text-decoration-color: #ddd6fe; decoration-violet-300text-decoration-color: #c4b5fd; decoration-violet-400text-decoration-color: #a78bfa; decoration-violet-500text-decoration-color: #8b5cf6; decoration-violet-600text-decoration-color: #7c3aed; decoration-violet-700text-decoration-color: #6d28d9; decoration-violet-800text-decoration-color: #5b21b6; decoration-violet-900text-decoration-color: #4c1d95; decoration-violet-950text-decoration-color: #2e1065; decoration-purple-50text-decoration-color: #faf5ff; decoration-purple-100text-decoration-color: #f3e8ff; decoration-purple-200text-decoration-color: #e9d5ff; decoration-purple-300text-decoration-color: #d8b4fe; decoration-purple-400text-decoration-color: #c084fc; decoration-purple-500text-decoration-color: #a855f7; decoration-purple-600text-decoration-color: #9333ea; decoration-purple-700text-decoration-color: #7e22ce; decoration-purple-800text-decoration-color: #6b21a8; decoration-purple-900text-decoration-color: #581c87; decoration-purple-950text-decoration-color: #3b0764; decoration-fuchsia-50text-decoration-color: #fdf4ff; decoration-fuchsia-100text-decoration-color: #fae8ff; decoration-fuchsia-200text-decoration-color: #f5d0fe; decoration-fuchsia-300text-decoration-color: #f0abfc; decoration-fuchsia-400text-decoration-color: #e879f9; decoration-fuchsia-500text-decoration-color: #d946ef; decoration-fuchsia-600text-decoration-color: #c026d3; decoration-fuchsia-700text-decoration-color: #a21caf; decoration-fuchsia-800text-decoration-color: #86198f; decoration-fuchsia-900text-decoration-color: #701a75; decoration-fuchsia-950text-decoration-color: #4a044e; decoration-pink-50text-decoration-color: #fdf2f8; decoration-pink-100text-decoration-color: #fce7f3; decoration-pink-200text-decoration-color: #fbcfe8; decoration-pink-300text-decoration-color: #f9a8d4; decoration-pink-400text-decoration-color: #f472b6; decoration-pink-500text-decoration-color: #ec4899; decoration-pink-600text-decoration-color: #db2777; decoration-pink-700text-decoration-color: #be185d; decoration-pink-800text-decoration-color: #9d174d; decoration-pink-900text-decoration-color: #831843; decoration-pink-950text-decoration-color: #500724; decoration-rose-50text-decoration-color: #fff1f2; decoration-rose-100text-decoration-color: #ffe4e6; decoration-rose-200text-decoration-color: #fecdd3; decoration-rose-300text-decoration-color: #fda4af; decoration-rose-400text-decoration-color: #fb7185; decoration-rose-500text-decoration-color: #f43f5e; decoration-rose-600text-decoration-color: #e11d48; decoration-rose-700text-decoration-color: #be123c; decoration-rose-800text-decoration-color: #9f1239; decoration-rose-900text-decoration-color: #881337; decoration-rose-950text-decoration-color: #4c0519;",
    "title": "Text Decoration Color - Tailwind CSS",
    "description": "Utilities for controlling the color of text decorations.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/content-configuration",
    "markdown": "# Content Configuration - Tailwind CSS\n\nThe `content` section of your `tailwind.config.js` file is where you configure the paths to all of your HTML templates, JavaScript components, and any other source files that contain Tailwind class names.\n\nThis guide covers everything you need to know to make sure Tailwind generates all of the CSS needed for your project.\n\n* * *\n\n## [​Configuring source paths](#configuring-source-paths)\n\nTailwind CSS works by scanning all of your HTML, JavaScript components, and any other template files for class names, then generating all of the corresponding CSS for those styles.\n\nIn order for Tailwind to generate all of the CSS you need, it needs to know about every single file in your project that contains any Tailwind class names.\n\nConfigure the paths to all of your content files in the `content` section of your configuration file:\n\nPaths are configured as [glob patterns](https://en.wikipedia.org/wiki/Glob_(programming)), making it easy to match all of the content files in your project without a ton of configuration:\n\n*   Use `*` to match anything except slashes and hidden files\n*   Use `**` to match zero or more directories\n*   Use comma separate values between `{}` to match against a list of options\n\nTailwind uses the [fast-glob](https://github.com/mrmlnc/fast-glob) library under-the-hood — check out their documentation for other supported pattern features.\n\nPaths are relative to your project root, _not_ your `tailwind.config.js` file, so if your `tailwind.config.js` file is in a custom location, you should still write your paths relative to the root of your project.\n\n### [​Pattern recommendations](#pattern-recommendations)\n\nFor the best performance and to avoid false positives, be as specific as possible with your content configuration.\n\nIf you use a really broad pattern like this one, Tailwind will even scan `node_modules` for content which is probably not what you want:\n\nDon’t use extremely broad patterns\n\nIf you have any files you need to scan that are at the root of your project (often an `index.html` file), list that file independently so your other patterns can be more specific:\n\nBe specific with your content patterns\n\nSome frameworks hide their main HTML entry point in a different place than the rest of your templates (often `public/index.html`), so if you are adding Tailwind classes to that file make sure it’s included in your configuration as well:\n\nRemember to include your HTML entry point if applicable\n\nIf you have any JavaScript files that manipulate your HTML to add classes, make sure you include those as well:\n\nIt’s also important that you don’t scan any CSS files — configure Tailwind to scan your _templates_ where your class names are being used, never the CSS file that Tailwind is generating.\n\nNever include CSS files in your content configuration\n\n### [​Class detection in-depth](#class-detection-in-depth)\n\nThe way Tailwind scans your source code for classes is intentionally very simple — we don’t actually parse or execute any of your code in the language it’s written in, we just use regular expressions to extract every string that could possibly be a class name.\n\nFor example, here’s some HTML with every potential class name string individually highlighted:\n\n```\n<div class=\"md:flex\">\n  <div class=\"md:flex-shrink-0\">\n    <img class=\"rounded-lg md:w-56\" src=\"/img/shopping.jpg\" alt=\"Woman paying for a purchase\">\n  </div>\n  <div class=\"mt-4 md:mt-0 md:ml-6\">\n    <div class=\"uppercase tracking-wide text-sm text-indigo-600 font-bold\">\n      Marketing\n    </div>\n    <a href=\"/get-started\" class=\"block mt-1 text-lg leading-tight font-semibold text-gray-900 hover:underline\">\n      Finding customers for your new business\n    </a>\n    <p class=\"mt-2 text-gray-600\">\n      Getting a new business off the ground is a lot of hard work.\n      Here are five ideas you can use to find your first customers.\n    </p>\n  </div>\n</div>\n```\n\nWe don’t just limit our search to `class=\"...\"` attributes because you could be using classes anywhere, like in some JavaScript for toggling a menu:\n\nBy using this very simple approach, Tailwind works extremely reliably with any programming language, like JSX for example:\n\n### [​Dynamic class names](#dynamic-class-names)\n\nThe most important implication of how Tailwind extracts class names is that it will only find classes that exist _as complete unbroken strings_ in your source files.\n\nIf you use string interpolation or concatenate partial class names together, Tailwind will not find them and therefore will not generate the corresponding CSS:\n\nDon’t construct class names dynamically\n\n```\n<div class=\"text-{{ error ? 'red' : 'green' }}-600\"></div>\n```\n\nIn the example above, the strings `text-red-600` and `text-green-600` do not exist, so Tailwind will not generate those classes.\n\nInstead, make sure any class names you’re using exist in full:\n\nAlways use complete class names\n\n```\n<div class=\"{{ error ? 'text-red-600' : 'text-green-600' }}\"></div>\n```\n\nIf you’re using a component library like React or Vue, this means you shouldn’t use props to dynamically construct classes:\n\nDon’t use props to build class names dynamically\n\n```\nfunction Button({ color, children }) {\n  return (\n    <button className={`bg-${color}-600 hover:bg-${color}-500 ...`}>\n      {children}\n    </button>\n  )\n}\n```\n\nInstead, map props to complete class names that are statically detectable at build-time:\n\nAlways map props to static class names\n\n```\nfunction Button({ color, children }) {\n  const colorVariants = {\n    blue: 'bg-blue-600 hover:bg-blue-500',\n    red: 'bg-red-600 hover:bg-red-500',\n  }\n\n  return (\n    <button className={`${colorVariants[color]} ...`}>\n      {children}\n    </button>\n  )\n}\n```\n\nThis has the added benefit of letting you map different prop values to different color shades for example:\n\n```\nfunction Button({ color, children }) {\n  const colorVariants = {\n    blue: 'bg-blue-600 hover:bg-blue-500 text-white',\n    red: 'bg-red-500 hover:bg-red-400 text-white',\n    yellow: 'bg-yellow-300 hover:bg-yellow-400 text-black',\n  }\n\n  return (\n    <button className={`${colorVariants[color]} ...`}>\n      {children}\n    </button>\n  )\n}\n```\n\nAs long as you always use complete class names in your code, Tailwind will generate all of your CSS perfectly every time.\n\n### [​Working with third-party libraries](#working-with-third-party-libraries)\n\nIf you’re working with any third-party libraries (for example [Select2](https://select2.org/)) and styling that library with your own custom CSS, we recommend writing those styles _without_ using Tailwind’s `@layer` feature:\n\nThis will ensure that Tailwind _always_ includes those styles in your CSS, which is a lot easier than configuring Tailwind to scan the source code of a third-party library.\n\nIf you’ve created your own reusable set of components that are styled with Tailwind and are importing them in multiple projects, make sure to configure Tailwind to scan those components for class names:\n\nThis will make sure Tailwind generates all of the CSS needed for those components as well.\n\nIf you’re working in a monorepo with workspaces, you may need to use `require.resolve` to make sure Tailwind can see your content files:\n\n### [​Using relative paths](#using-relative-paths)\n\nBy default Tailwind resolves non-absolute content paths relative to the current working directory, not the `tailwind.config.js` file. This can lead to unexpected results if you run Tailwind from a different directory.\n\nTo always resolve paths relative to the `tailwind.config.js` file, use the object notation for your `content` configuration and set the `relative` property to `true`:\n\nThis will likely become the default behavior in the next major version of the framework.\n\n### [​Configuring raw content](#configuring-raw-content)\n\nIf for whatever reason you need to configure Tailwind to scan some raw content rather than the contents of a file, use an object with a `raw` key instead of a path:\n\nThere aren’t many valid use-cases for this — [safelisting](https://tailwindcss.com/docs/content-configuration#safelisting-classes) is usually what you really want instead.\n\n* * *\n\n## [​Safelisting classes](#safelisting-classes)\n\nFor the smallest file size and best development experience, we highly recommend relying on your `content` configuration to tell Tailwind which classes to generate as much as possible.\n\nSafelisting is a last-resort, and should only be used in situations where it’s impossible to scan certain content for class names. These situations are rare, and you should almost never need this feature.\n\nIf you need to make sure Tailwind generates certain class names that don’t exist in your content files, use the `safelist` option:\n\nOne example of where this can be useful is if your site displays user-generated content and you want users to be able to use a constrained set of Tailwind classes in their content that might not exist in your own site’s source files.\n\n### [​Using regular expressions](#using-regular-expressions)\n\nTailwind supports pattern-based safelisting for situations where you need to safelist a lot of classes:\n\nPatterns can only match against base utility names like `/bg-red-.+/`, and won’t match if the pattern includes a variant modifier like `/hover:bg-red-.+/`.\n\nIf you want to force Tailwind to generate variants for any matched classes, include them using the `variants` option:\n\n### [​Discarding classes](#discarding-classes)\n\nSince Tailwind uses a very simple approach to detecting class names in your content, you may find that some classes are being generated that you don’t actually need.\n\nFor example, this HTML would still generate the `container` class, even though that class is not actually being used:\n\n```\n<div class=\"text-lg leading-8 text-gray-600\">\n  Every custom pool we design starts as a used shipping container, and is\n  retrofitted with state of the art technology and finishes to turn it into\n  a beautiful and functional way to entertain your guests all summer long.\n</div>\n```\n\nYou may also want to prevent Tailwind from generating certain classes when those classes would conflict with some existing CSS, but you don’t want to go so far as to prefix all of your Tailwind classes.\n\nIn these situations, you can use the `blocklist` option to tell Tailwind to ignore specific classes that it detects in your content:\n\nThe `blocklist` option only affects CSS that would be generated by Tailwind, not custom CSS you’ve authored yourself or are importing from another library.\n\nUnlike `safelist`, the `blocklist` option only supports strings, and you cannot block classes using regular expressions.\n\n* * *\n\n## [​Transforming source files](#transforming-source-files)\n\nIf you’re authoring content in a format that _compiles_ to HTML (like Markdown), it often makes sense to compile that content to HTML _before_ scanning it for class names.\n\nUse the `content.transform` option to transform any content matching a specific file extension before extracting classes:\n\nWhen using `content.transform`, you’ll need to provide your source paths using `content.files` instead of as a top-level array under `content`.\n\n* * *\n\nUse the `extract` option to override the logic Tailwind uses to detect class names for specific file extensions:\n\nThis is an advanced feature and most users won’t need it — the default extraction logic in Tailwind works extremely well for almost all projects.\n\nAs with transforming, when using `content.extract`, you’ll need to provide your source paths using `content.files` instead of as a top-level array under `content`.\n\n* * *\n\n## [​Troubleshooting](#troubleshooting)\n\n### [​Classes aren’t generated](#classes-arent-generated)\n\nIf Tailwind isn’t generating classes, make sure your `content` configuration is correct and matches all of the right source files.\n\nA common mistake is missing a file extension, for example if you’re using `jsx` instead of `js` for your React components:\n\nOr creating a new folder mid-project that wasn’t covered originally and forgetting to add it to your configuration:\n\nIt could also be that you are trying to use dynamic class names, which won’t work because Tailwind doesn’t actually evaluate your source code and can only detect static unbroken class strings.\n\nDon’t construct class names dynamically\n\n```\n<div class=\"text-{{ error ? 'red' : 'green' }}-600\"></div>\n```\n\nMake sure you always use complete class names in your code:\n\nAlways use complete class names\n\n```\n<div class=\"{{ error ? 'text-red-600' : 'text-green-600' }}\"></div>\n```\n\nRead our documentation on [dynamic class names](https://tailwindcss.com/docs/content-configuration#dynamic-class-names) for more details.\n\n### [​Styles rebuild in an infinite loop](#styles-rebuild-in-an-infinite-loop)\n\nIf your CSS seems to be rebuilding in an infinite loop, there’s a good chance it’s because your build tool doesn’t support the `glob` option when [registering PostCSS dependencies](https://github.com/postcss/postcss/blob/main/docs/guidelines/runner.md#31-rebuild-when-dependencies-change).\n\nMany build tools (such as webpack) don’t support this option, and as a result we can only tell them to watch specific files or _entire directories_. We can’t tell webpack to _only_ watch `*.html` files in a directory for example.\n\nThat means that if building your CSS causes _any_ files in those directories to change, a rebuild will be triggered, even if the changed file doesn’t match the extension in your glob.\n\nSo if you are watching `src/**/*.html` for changes, but you are writing your CSS output file to `src/css/styles.css`, you will get an infinite rebuild loop using some tools.\n\nIdeally we could warn you about this in the console, but many tools support it perfectly fine (including our own CLI tool), and we have no reliable way to detect what build tool you are using.\n\nTo solve this problem, use more specific paths in your `content` config, making sure to only include directories that won’t change when your CSS builds:\n\nIf necessary, adjust your actual project directory structure to make sure you can target your template files without accidentally catching your CSS file or other build artifacts like manifest files.\n\nIf you absolutely can’t change your content config or directory structure, your best bet is to compile your CSS separately with a tool that has complete glob support. We recommend using [Tailwind CLI](https://tailwindcss.com/docs/installation), which is a fast, simple, purpose-built tool for compiling your CSS with Tailwind.\n\n### [​It just isn’t working properly](#it-just-isnt-working-properly)\n\nIf you are experiencing weird, hard to describe issues with the output, or things just don’t seem like they are working at all, there’s a good chance it’s due to your build tool not supporting PostCSS dependency messages properly _(or at all)_. One known example of this currently is [Stencil](https://github.com/ionic-team/stencil-postcss/issues/38).\n\nWhen you are having these sorts of issues, we recommend using [Tailwind CLI](https://tailwindcss.com/docs/installation) to compile your CSS separately instead of trying to integrate Tailwind into your existing tooling.\n\nYou can use packages like `npm-run-all` or `concurrently` to compile your CSS alongside your usual development command by adding some scripts to your project like this:\n\n```\n// package.json\n{\n  // ...\n  \"scripts\": {\n    \"start\": \"concurrently \\\"npm run start:css\\\" \\\"react-scripts start\\\"\",\n    \"start:css\": \"tailwindcss -o src/tailwind.css --watch\",\n    \"build\": \"npm run build:css && react-scripts build\",\n    \"build:css\": \"NODE_ENV=production tailwindcss -o src/tailwind.css -m\",\n  },\n}\n```\n\nEither way, please be sure to [check for an existing issue](https://github.com/tailwindlabs/tailwindcss/issues) or [open a new one](https://github.com/tailwindlabs/tailwindcss/issues/new/choose) so we can figure out the problem and try to improve compatibility with whatever tool you are using.",
    "title": "Content Configuration - Tailwind CSS",
    "description": "Configuring the content sources for your project.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/text-decoration-style",
    "markdown": "# Text Decoration Style - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the text decoration style](#setting-the-text-decoration-style)\n\nUse the `decoration-*` utilities to change the style of an element’s [text decoration](https://tailwindcss.com/docs/text-decoration).\n\n```\n<p class=\"underline decoration-solid ...\">The quick brown fox...</p>\n<p class=\"underline decoration-double ...\">The quick brown fox...</p>\n<p class=\"underline decoration-dotted ...\">The quick brown fox...</p>\n<p class=\"underline decoration-dashed ...\">The quick brown fox...</p>\n<p class=\"underline decoration-wavy ...\">The quick brown fox...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:decoration-dashed` to only apply the `decoration-dashed` utility on hover.\n\n```\n<p class=\"underline hover:decoration-dashed\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:decoration-dashed` to apply the `decoration-dashed` utility at only medium screen sizes and above.\n\n```\n<p class=\"underline md:decoration-dashed\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Text Decoration Style - Tailwind CSS",
    "description": "Utilities for controlling the style of text decorations.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/padding",
    "markdown": "# Padding - Tailwind CSS\n\np-0padding: 0px; px-0padding-left: 0px; padding-right: 0px; py-0padding-top: 0px; padding-bottom: 0px; ps-0padding-inline-start: 0px; pe-0padding-inline-end: 0px; pt-0padding-top: 0px; pr-0padding-right: 0px; pb-0padding-bottom: 0px; pl-0padding-left: 0px; p-pxpadding: 1px; px-pxpadding-left: 1px; padding-right: 1px; py-pxpadding-top: 1px; padding-bottom: 1px; ps-pxpadding-inline-start: 1px; pe-pxpadding-inline-end: 1px; pt-pxpadding-top: 1px; pr-pxpadding-right: 1px; pb-pxpadding-bottom: 1px; pl-pxpadding-left: 1px; p-0.5padding: 0.125rem; /\\* 2px \\*/ px-0.5padding-left: 0.125rem; /\\* 2px \\*/ padding-right: 0.125rem; /\\* 2px \\*/ py-0.5padding-top: 0.125rem; /\\* 2px \\*/ padding-bottom: 0.125rem; /\\* 2px \\*/ ps-0.5padding-inline-start: 0.125rem; /\\* 2px \\*/ pe-0.5padding-inline-end: 0.125rem; /\\* 2px \\*/ pt-0.5padding-top: 0.125rem; /\\* 2px \\*/ pr-0.5padding-right: 0.125rem; /\\* 2px \\*/ pb-0.5padding-bottom: 0.125rem; /\\* 2px \\*/ pl-0.5padding-left: 0.125rem; /\\* 2px \\*/ p-1padding: 0.25rem; /\\* 4px \\*/ px-1padding-left: 0.25rem; /\\* 4px \\*/ padding-right: 0.25rem; /\\* 4px \\*/ py-1padding-top: 0.25rem; /\\* 4px \\*/ padding-bottom: 0.25rem; /\\* 4px \\*/ ps-1padding-inline-start: 0.25rem; /\\* 4px \\*/ pe-1padding-inline-end: 0.25rem; /\\* 4px \\*/ pt-1padding-top: 0.25rem; /\\* 4px \\*/ pr-1padding-right: 0.25rem; /\\* 4px \\*/ pb-1padding-bottom: 0.25rem; /\\* 4px \\*/ pl-1padding-left: 0.25rem; /\\* 4px \\*/ p-1.5padding: 0.375rem; /\\* 6px \\*/ px-1.5padding-left: 0.375rem; /\\* 6px \\*/ padding-right: 0.375rem; /\\* 6px \\*/ py-1.5padding-top: 0.375rem; /\\* 6px \\*/ padding-bottom: 0.375rem; /\\* 6px \\*/ ps-1.5padding-inline-start: 0.375rem; /\\* 6px \\*/ pe-1.5padding-inline-end: 0.375rem; /\\* 6px \\*/ pt-1.5padding-top: 0.375rem; /\\* 6px \\*/ pr-1.5padding-right: 0.375rem; /\\* 6px \\*/ pb-1.5padding-bottom: 0.375rem; /\\* 6px \\*/ pl-1.5padding-left: 0.375rem; /\\* 6px \\*/ p-2padding: 0.5rem; /\\* 8px \\*/ px-2padding-left: 0.5rem; /\\* 8px \\*/ padding-right: 0.5rem; /\\* 8px \\*/ py-2padding-top: 0.5rem; /\\* 8px \\*/ padding-bottom: 0.5rem; /\\* 8px \\*/ ps-2padding-inline-start: 0.5rem; /\\* 8px \\*/ pe-2padding-inline-end: 0.5rem; /\\* 8px \\*/ pt-2padding-top: 0.5rem; /\\* 8px \\*/ pr-2padding-right: 0.5rem; /\\* 8px \\*/ pb-2padding-bottom: 0.5rem; /\\* 8px \\*/ pl-2padding-left: 0.5rem; /\\* 8px \\*/ p-2.5padding: 0.625rem; /\\* 10px \\*/ px-2.5padding-left: 0.625rem; /\\* 10px \\*/ padding-right: 0.625rem; /\\* 10px \\*/ py-2.5padding-top: 0.625rem; /\\* 10px \\*/ padding-bottom: 0.625rem; /\\* 10px \\*/ ps-2.5padding-inline-start: 0.625rem; /\\* 10px \\*/ pe-2.5padding-inline-end: 0.625rem; /\\* 10px \\*/ pt-2.5padding-top: 0.625rem; /\\* 10px \\*/ pr-2.5padding-right: 0.625rem; /\\* 10px \\*/ pb-2.5padding-bottom: 0.625rem; /\\* 10px \\*/ pl-2.5padding-left: 0.625rem; /\\* 10px \\*/ p-3padding: 0.75rem; /\\* 12px \\*/ px-3padding-left: 0.75rem; /\\* 12px \\*/ padding-right: 0.75rem; /\\* 12px \\*/ py-3padding-top: 0.75rem; /\\* 12px \\*/ padding-bottom: 0.75rem; /\\* 12px \\*/ ps-3padding-inline-start: 0.75rem; /\\* 12px \\*/ pe-3padding-inline-end: 0.75rem; /\\* 12px \\*/ pt-3padding-top: 0.75rem; /\\* 12px \\*/ pr-3padding-right: 0.75rem; /\\* 12px \\*/ pb-3padding-bottom: 0.75rem; /\\* 12px \\*/ pl-3padding-left: 0.75rem; /\\* 12px \\*/ p-3.5padding: 0.875rem; /\\* 14px \\*/ px-3.5padding-left: 0.875rem; /\\* 14px \\*/ padding-right: 0.875rem; /\\* 14px \\*/ py-3.5padding-top: 0.875rem; /\\* 14px \\*/ padding-bottom: 0.875rem; /\\* 14px \\*/ ps-3.5padding-inline-start: 0.875rem; /\\* 14px \\*/ pe-3.5padding-inline-end: 0.875rem; /\\* 14px \\*/ pt-3.5padding-top: 0.875rem; /\\* 14px \\*/ pr-3.5padding-right: 0.875rem; /\\* 14px \\*/ pb-3.5padding-bottom: 0.875rem; /\\* 14px \\*/ pl-3.5padding-left: 0.875rem; /\\* 14px \\*/ p-4padding: 1rem; /\\* 16px \\*/ px-4padding-left: 1rem; /\\* 16px \\*/ padding-right: 1rem; /\\* 16px \\*/ py-4padding-top: 1rem; /\\* 16px \\*/ padding-bottom: 1rem; /\\* 16px \\*/ ps-4padding-inline-start: 1rem; /\\* 16px \\*/ pe-4padding-inline-end: 1rem; /\\* 16px \\*/ pt-4padding-top: 1rem; /\\* 16px \\*/ pr-4padding-right: 1rem; /\\* 16px \\*/ pb-4padding-bottom: 1rem; /\\* 16px \\*/ pl-4padding-left: 1rem; /\\* 16px \\*/ p-5padding: 1.25rem; /\\* 20px \\*/ px-5padding-left: 1.25rem; /\\* 20px \\*/ padding-right: 1.25rem; /\\* 20px \\*/ py-5padding-top: 1.25rem; /\\* 20px \\*/ padding-bottom: 1.25rem; /\\* 20px \\*/ ps-5padding-inline-start: 1.25rem; /\\* 20px \\*/ pe-5padding-inline-end: 1.25rem; /\\* 20px \\*/ pt-5padding-top: 1.25rem; /\\* 20px \\*/ pr-5padding-right: 1.25rem; /\\* 20px \\*/ pb-5padding-bottom: 1.25rem; /\\* 20px \\*/ pl-5padding-left: 1.25rem; /\\* 20px \\*/ p-6padding: 1.5rem; /\\* 24px \\*/ px-6padding-left: 1.5rem; /\\* 24px \\*/ padding-right: 1.5rem; /\\* 24px \\*/ py-6padding-top: 1.5rem; /\\* 24px \\*/ padding-bottom: 1.5rem; /\\* 24px \\*/ ps-6padding-inline-start: 1.5rem; /\\* 24px \\*/ pe-6padding-inline-end: 1.5rem; /\\* 24px \\*/ pt-6padding-top: 1.5rem; /\\* 24px \\*/ pr-6padding-right: 1.5rem; /\\* 24px \\*/ pb-6padding-bottom: 1.5rem; /\\* 24px \\*/ pl-6padding-left: 1.5rem; /\\* 24px \\*/ p-7padding: 1.75rem; /\\* 28px \\*/ px-7padding-left: 1.75rem; /\\* 28px \\*/ padding-right: 1.75rem; /\\* 28px \\*/ py-7padding-top: 1.75rem; /\\* 28px \\*/ padding-bottom: 1.75rem; /\\* 28px \\*/ ps-7padding-inline-start: 1.75rem; /\\* 28px \\*/ pe-7padding-inline-end: 1.75rem; /\\* 28px \\*/ pt-7padding-top: 1.75rem; /\\* 28px \\*/ pr-7padding-right: 1.75rem; /\\* 28px \\*/ pb-7padding-bottom: 1.75rem; /\\* 28px \\*/ pl-7padding-left: 1.75rem; /\\* 28px \\*/ p-8padding: 2rem; /\\* 32px \\*/ px-8padding-left: 2rem; /\\* 32px \\*/ padding-right: 2rem; /\\* 32px \\*/ py-8padding-top: 2rem; /\\* 32px \\*/ padding-bottom: 2rem; /\\* 32px \\*/ ps-8padding-inline-start: 2rem; /\\* 32px \\*/ pe-8padding-inline-end: 2rem; /\\* 32px \\*/ pt-8padding-top: 2rem; /\\* 32px \\*/ pr-8padding-right: 2rem; /\\* 32px \\*/ pb-8padding-bottom: 2rem; /\\* 32px \\*/ pl-8padding-left: 2rem; /\\* 32px \\*/ p-9padding: 2.25rem; /\\* 36px \\*/ px-9padding-left: 2.25rem; /\\* 36px \\*/ padding-right: 2.25rem; /\\* 36px \\*/ py-9padding-top: 2.25rem; /\\* 36px \\*/ padding-bottom: 2.25rem; /\\* 36px \\*/ ps-9padding-inline-start: 2.25rem; /\\* 36px \\*/ pe-9padding-inline-end: 2.25rem; /\\* 36px \\*/ pt-9padding-top: 2.25rem; /\\* 36px \\*/ pr-9padding-right: 2.25rem; /\\* 36px \\*/ pb-9padding-bottom: 2.25rem; /\\* 36px \\*/ pl-9padding-left: 2.25rem; /\\* 36px \\*/ p-10padding: 2.5rem; /\\* 40px \\*/ px-10padding-left: 2.5rem; /\\* 40px \\*/ padding-right: 2.5rem; /\\* 40px \\*/ py-10padding-top: 2.5rem; /\\* 40px \\*/ padding-bottom: 2.5rem; /\\* 40px \\*/ ps-10padding-inline-start: 2.5rem; /\\* 40px \\*/ pe-10padding-inline-end: 2.5rem; /\\* 40px \\*/ pt-10padding-top: 2.5rem; /\\* 40px \\*/ pr-10padding-right: 2.5rem; /\\* 40px \\*/ pb-10padding-bottom: 2.5rem; /\\* 40px \\*/ pl-10padding-left: 2.5rem; /\\* 40px \\*/ p-11padding: 2.75rem; /\\* 44px \\*/ px-11padding-left: 2.75rem; /\\* 44px \\*/ padding-right: 2.75rem; /\\* 44px \\*/ py-11padding-top: 2.75rem; /\\* 44px \\*/ padding-bottom: 2.75rem; /\\* 44px \\*/ ps-11padding-inline-start: 2.75rem; /\\* 44px \\*/ pe-11padding-inline-end: 2.75rem; /\\* 44px \\*/ pt-11padding-top: 2.75rem; /\\* 44px \\*/ pr-11padding-right: 2.75rem; /\\* 44px \\*/ pb-11padding-bottom: 2.75rem; /\\* 44px \\*/ pl-11padding-left: 2.75rem; /\\* 44px \\*/ p-12padding: 3rem; /\\* 48px \\*/ px-12padding-left: 3rem; /\\* 48px \\*/ padding-right: 3rem; /\\* 48px \\*/ py-12padding-top: 3rem; /\\* 48px \\*/ padding-bottom: 3rem; /\\* 48px \\*/ ps-12padding-inline-start: 3rem; /\\* 48px \\*/ pe-12padding-inline-end: 3rem; /\\* 48px \\*/ pt-12padding-top: 3rem; /\\* 48px \\*/ pr-12padding-right: 3rem; /\\* 48px \\*/ pb-12padding-bottom: 3rem; /\\* 48px \\*/ pl-12padding-left: 3rem; /\\* 48px \\*/ p-14padding: 3.5rem; /\\* 56px \\*/ px-14padding-left: 3.5rem; /\\* 56px \\*/ padding-right: 3.5rem; /\\* 56px \\*/ py-14padding-top: 3.5rem; /\\* 56px \\*/ padding-bottom: 3.5rem; /\\* 56px \\*/ ps-14padding-inline-start: 3.5rem; /\\* 56px \\*/ pe-14padding-inline-end: 3.5rem; /\\* 56px \\*/ pt-14padding-top: 3.5rem; /\\* 56px \\*/ pr-14padding-right: 3.5rem; /\\* 56px \\*/ pb-14padding-bottom: 3.5rem; /\\* 56px \\*/ pl-14padding-left: 3.5rem; /\\* 56px \\*/ p-16padding: 4rem; /\\* 64px \\*/ px-16padding-left: 4rem; /\\* 64px \\*/ padding-right: 4rem; /\\* 64px \\*/ py-16padding-top: 4rem; /\\* 64px \\*/ padding-bottom: 4rem; /\\* 64px \\*/ ps-16padding-inline-start: 4rem; /\\* 64px \\*/ pe-16padding-inline-end: 4rem; /\\* 64px \\*/ pt-16padding-top: 4rem; /\\* 64px \\*/ pr-16padding-right: 4rem; /\\* 64px \\*/ pb-16padding-bottom: 4rem; /\\* 64px \\*/ pl-16padding-left: 4rem; /\\* 64px \\*/ p-20padding: 5rem; /\\* 80px \\*/ px-20padding-left: 5rem; /\\* 80px \\*/ padding-right: 5rem; /\\* 80px \\*/ py-20padding-top: 5rem; /\\* 80px \\*/ padding-bottom: 5rem; /\\* 80px \\*/ ps-20padding-inline-start: 5rem; /\\* 80px \\*/ pe-20padding-inline-end: 5rem; /\\* 80px \\*/ pt-20padding-top: 5rem; /\\* 80px \\*/ pr-20padding-right: 5rem; /\\* 80px \\*/ pb-20padding-bottom: 5rem; /\\* 80px \\*/ pl-20padding-left: 5rem; /\\* 80px \\*/ p-24padding: 6rem; /\\* 96px \\*/ px-24padding-left: 6rem; /\\* 96px \\*/ padding-right: 6rem; /\\* 96px \\*/ py-24padding-top: 6rem; /\\* 96px \\*/ padding-bottom: 6rem; /\\* 96px \\*/ ps-24padding-inline-start: 6rem; /\\* 96px \\*/ pe-24padding-inline-end: 6rem; /\\* 96px \\*/ pt-24padding-top: 6rem; /\\* 96px \\*/ pr-24padding-right: 6rem; /\\* 96px \\*/ pb-24padding-bottom: 6rem; /\\* 96px \\*/ pl-24padding-left: 6rem; /\\* 96px \\*/ p-28padding: 7rem; /\\* 112px \\*/ px-28padding-left: 7rem; /\\* 112px \\*/ padding-right: 7rem; /\\* 112px \\*/ py-28padding-top: 7rem; /\\* 112px \\*/ padding-bottom: 7rem; /\\* 112px \\*/ ps-28padding-inline-start: 7rem; /\\* 112px \\*/ pe-28padding-inline-end: 7rem; /\\* 112px \\*/ pt-28padding-top: 7rem; /\\* 112px \\*/ pr-28padding-right: 7rem; /\\* 112px \\*/ pb-28padding-bottom: 7rem; /\\* 112px \\*/ pl-28padding-left: 7rem; /\\* 112px \\*/ p-32padding: 8rem; /\\* 128px \\*/ px-32padding-left: 8rem; /\\* 128px \\*/ padding-right: 8rem; /\\* 128px \\*/ py-32padding-top: 8rem; /\\* 128px \\*/ padding-bottom: 8rem; /\\* 128px \\*/ ps-32padding-inline-start: 8rem; /\\* 128px \\*/ pe-32padding-inline-end: 8rem; /\\* 128px \\*/ pt-32padding-top: 8rem; /\\* 128px \\*/ pr-32padding-right: 8rem; /\\* 128px \\*/ pb-32padding-bottom: 8rem; /\\* 128px \\*/ pl-32padding-left: 8rem; /\\* 128px \\*/ p-36padding: 9rem; /\\* 144px \\*/ px-36padding-left: 9rem; /\\* 144px \\*/ padding-right: 9rem; /\\* 144px \\*/ py-36padding-top: 9rem; /\\* 144px \\*/ padding-bottom: 9rem; /\\* 144px \\*/ ps-36padding-inline-start: 9rem; /\\* 144px \\*/ pe-36padding-inline-end: 9rem; /\\* 144px \\*/ pt-36padding-top: 9rem; /\\* 144px \\*/ pr-36padding-right: 9rem; /\\* 144px \\*/ pb-36padding-bottom: 9rem; /\\* 144px \\*/ pl-36padding-left: 9rem; /\\* 144px \\*/ p-40padding: 10rem; /\\* 160px \\*/ px-40padding-left: 10rem; /\\* 160px \\*/ padding-right: 10rem; /\\* 160px \\*/ py-40padding-top: 10rem; /\\* 160px \\*/ padding-bottom: 10rem; /\\* 160px \\*/ ps-40padding-inline-start: 10rem; /\\* 160px \\*/ pe-40padding-inline-end: 10rem; /\\* 160px \\*/ pt-40padding-top: 10rem; /\\* 160px \\*/ pr-40padding-right: 10rem; /\\* 160px \\*/ pb-40padding-bottom: 10rem; /\\* 160px \\*/ pl-40padding-left: 10rem; /\\* 160px \\*/ p-44padding: 11rem; /\\* 176px \\*/ px-44padding-left: 11rem; /\\* 176px \\*/ padding-right: 11rem; /\\* 176px \\*/ py-44padding-top: 11rem; /\\* 176px \\*/ padding-bottom: 11rem; /\\* 176px \\*/ ps-44padding-inline-start: 11rem; /\\* 176px \\*/ pe-44padding-inline-end: 11rem; /\\* 176px \\*/ pt-44padding-top: 11rem; /\\* 176px \\*/ pr-44padding-right: 11rem; /\\* 176px \\*/ pb-44padding-bottom: 11rem; /\\* 176px \\*/ pl-44padding-left: 11rem; /\\* 176px \\*/ p-48padding: 12rem; /\\* 192px \\*/ px-48padding-left: 12rem; /\\* 192px \\*/ padding-right: 12rem; /\\* 192px \\*/ py-48padding-top: 12rem; /\\* 192px \\*/ padding-bottom: 12rem; /\\* 192px \\*/ ps-48padding-inline-start: 12rem; /\\* 192px \\*/ pe-48padding-inline-end: 12rem; /\\* 192px \\*/ pt-48padding-top: 12rem; /\\* 192px \\*/ pr-48padding-right: 12rem; /\\* 192px \\*/ pb-48padding-bottom: 12rem; /\\* 192px \\*/ pl-48padding-left: 12rem; /\\* 192px \\*/ p-52padding: 13rem; /\\* 208px \\*/ px-52padding-left: 13rem; /\\* 208px \\*/ padding-right: 13rem; /\\* 208px \\*/ py-52padding-top: 13rem; /\\* 208px \\*/ padding-bottom: 13rem; /\\* 208px \\*/ ps-52padding-inline-start: 13rem; /\\* 208px \\*/ pe-52padding-inline-end: 13rem; /\\* 208px \\*/ pt-52padding-top: 13rem; /\\* 208px \\*/ pr-52padding-right: 13rem; /\\* 208px \\*/ pb-52padding-bottom: 13rem; /\\* 208px \\*/ pl-52padding-left: 13rem; /\\* 208px \\*/ p-56padding: 14rem; /\\* 224px \\*/ px-56padding-left: 14rem; /\\* 224px \\*/ padding-right: 14rem; /\\* 224px \\*/ py-56padding-top: 14rem; /\\* 224px \\*/ padding-bottom: 14rem; /\\* 224px \\*/ ps-56padding-inline-start: 14rem; /\\* 224px \\*/ pe-56padding-inline-end: 14rem; /\\* 224px \\*/ pt-56padding-top: 14rem; /\\* 224px \\*/ pr-56padding-right: 14rem; /\\* 224px \\*/ pb-56padding-bottom: 14rem; /\\* 224px \\*/ pl-56padding-left: 14rem; /\\* 224px \\*/ p-60padding: 15rem; /\\* 240px \\*/ px-60padding-left: 15rem; /\\* 240px \\*/ padding-right: 15rem; /\\* 240px \\*/ py-60padding-top: 15rem; /\\* 240px \\*/ padding-bottom: 15rem; /\\* 240px \\*/ ps-60padding-inline-start: 15rem; /\\* 240px \\*/ pe-60padding-inline-end: 15rem; /\\* 240px \\*/ pt-60padding-top: 15rem; /\\* 240px \\*/ pr-60padding-right: 15rem; /\\* 240px \\*/ pb-60padding-bottom: 15rem; /\\* 240px \\*/ pl-60padding-left: 15rem; /\\* 240px \\*/ p-64padding: 16rem; /\\* 256px \\*/ px-64padding-left: 16rem; /\\* 256px \\*/ padding-right: 16rem; /\\* 256px \\*/ py-64padding-top: 16rem; /\\* 256px \\*/ padding-bottom: 16rem; /\\* 256px \\*/ ps-64padding-inline-start: 16rem; /\\* 256px \\*/ pe-64padding-inline-end: 16rem; /\\* 256px \\*/ pt-64padding-top: 16rem; /\\* 256px \\*/ pr-64padding-right: 16rem; /\\* 256px \\*/ pb-64padding-bottom: 16rem; /\\* 256px \\*/ pl-64padding-left: 16rem; /\\* 256px \\*/ p-72padding: 18rem; /\\* 288px \\*/ px-72padding-left: 18rem; /\\* 288px \\*/ padding-right: 18rem; /\\* 288px \\*/ py-72padding-top: 18rem; /\\* 288px \\*/ padding-bottom: 18rem; /\\* 288px \\*/ ps-72padding-inline-start: 18rem; /\\* 288px \\*/ pe-72padding-inline-end: 18rem; /\\* 288px \\*/ pt-72padding-top: 18rem; /\\* 288px \\*/ pr-72padding-right: 18rem; /\\* 288px \\*/ pb-72padding-bottom: 18rem; /\\* 288px \\*/ pl-72padding-left: 18rem; /\\* 288px \\*/ p-80padding: 20rem; /\\* 320px \\*/ px-80padding-left: 20rem; /\\* 320px \\*/ padding-right: 20rem; /\\* 320px \\*/ py-80padding-top: 20rem; /\\* 320px \\*/ padding-bottom: 20rem; /\\* 320px \\*/ ps-80padding-inline-start: 20rem; /\\* 320px \\*/ pe-80padding-inline-end: 20rem; /\\* 320px \\*/ pt-80padding-top: 20rem; /\\* 320px \\*/ pr-80padding-right: 20rem; /\\* 320px \\*/ pb-80padding-bottom: 20rem; /\\* 320px \\*/ pl-80padding-left: 20rem; /\\* 320px \\*/ p-96padding: 24rem; /\\* 384px \\*/ px-96padding-left: 24rem; /\\* 384px \\*/ padding-right: 24rem; /\\* 384px \\*/ py-96padding-top: 24rem; /\\* 384px \\*/ padding-bottom: 24rem; /\\* 384px \\*/ ps-96padding-inline-start: 24rem; /\\* 384px \\*/ pe-96padding-inline-end: 24rem; /\\* 384px \\*/ pt-96padding-top: 24rem; /\\* 384px \\*/ pr-96padding-right: 24rem; /\\* 384px \\*/ pb-96padding-bottom: 24rem; /\\* 384px \\*/ pl-96padding-left: 24rem; /\\* 384px \\*/",
    "title": "Padding - Tailwind CSS",
    "description": "Utilities for controlling an element's padding.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/border-style",
    "markdown": "# Border Style - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the border style](#setting-the-border-style)\n\nUse `border-*` to control an element’s border style.\n\n```\n<div class=\"border-solid border-2 border-indigo-600 ...\"></div>\n<div class=\"border-dashed border-2 border-indigo-600 ...\"></div>\n<div class=\"border-dotted border-2 border-indigo-600 ...\"></div>\n<div class=\"border-double border-4 border-indigo-600 ...\"></div>\n```\n\n### [​No style](#no-style)\n\nUse `border-none` to remove an existing border style from an element.\n\nThis is most commonly used to remove a border style that was applied at a smaller breakpoint.\n\n```\n<button class=\"border-none ...\">Save Changes</button>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:border-dotted` to only apply the `border-dotted` utility on hover.\n\n```\n<div class=\"border-solid hover:border-dotted\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:border-dotted` to apply the `border-dotted` utility at only medium screen sizes and above.\n\n```\n<div class=\"border-solid md:border-dotted\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Border Style - Tailwind CSS",
    "description": "Utilities for controlling the style of an element's borders.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/divide-width",
    "markdown": "# Divide Width - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Add borders between horizontal children](#add-borders-between-horizontal-children)\n\nUse the `divide-x-*` utilities to add borders between horizontal elements.\n\n```\n<div class=\"grid grid-cols-3 divide-x\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Add borders between stacked children](#add-borders-between-stacked-children)\n\nUse the `divide-y-*` utilities to add borders between stacked elements.\n\n```\n<div class=\"grid grid-cols-1 divide-y\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Reversing children order](#reversing-children-order)\n\nIf your elements are in reverse order (using say `flex-row-reverse` or `flex-col-reverse`), use the `divide-x-reverse` or `divide-y-reverse` utilities to ensure the border is added to the correct side of each element.\n\n```\n<div class=\"flex flex-col-reverse divide-y divide-y-reverse\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:divide-y-8` to only apply the `divide-y-8` utility on hover.\n\n```\n<div class=\"divide-y divide-gray-400 hover:divide-y-8\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:divide-y-8` to apply the `divide-y-8` utility at only medium screen sizes and above.\n\n```\n<div class=\"divide-y divide-gray-400 md:divide-y-8\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nThe divide width scale inherits its values from the `borderWidth` scale by default, so if you’d like to customize your values for both border width and divide width together, use the `theme.borderWidth` section of your `tailwind.config.js` file.\n\nTo customize only the divide width values, use the `theme.divideWidth` section of your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off divide width value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"divide-x-[3px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Divide Width - Tailwind CSS",
    "description": "Utilities for controlling the border width between elements.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/margin",
    "markdown": "# Margin - Tailwind CSS\n\nm-0margin: 0px; mx-0margin-left: 0px; margin-right: 0px; my-0margin-top: 0px; margin-bottom: 0px; ms-0margin-inline-start: 0px; me-0margin-inline-end: 0px; mt-0margin-top: 0px; mr-0margin-right: 0px; mb-0margin-bottom: 0px; ml-0margin-left: 0px; m-pxmargin: 1px; mx-pxmargin-left: 1px; margin-right: 1px; my-pxmargin-top: 1px; margin-bottom: 1px; ms-pxmargin-inline-start: 1px; me-pxmargin-inline-end: 1px; mt-pxmargin-top: 1px; mr-pxmargin-right: 1px; mb-pxmargin-bottom: 1px; ml-pxmargin-left: 1px; m-0.5margin: 0.125rem; /\\* 2px \\*/ mx-0.5margin-left: 0.125rem; /\\* 2px \\*/ margin-right: 0.125rem; /\\* 2px \\*/ my-0.5margin-top: 0.125rem; /\\* 2px \\*/ margin-bottom: 0.125rem; /\\* 2px \\*/ ms-0.5margin-inline-start: 0.125rem; /\\* 2px \\*/ me-0.5margin-inline-end: 0.125rem; /\\* 2px \\*/ mt-0.5margin-top: 0.125rem; /\\* 2px \\*/ mr-0.5margin-right: 0.125rem; /\\* 2px \\*/ mb-0.5margin-bottom: 0.125rem; /\\* 2px \\*/ ml-0.5margin-left: 0.125rem; /\\* 2px \\*/ m-1margin: 0.25rem; /\\* 4px \\*/ mx-1margin-left: 0.25rem; /\\* 4px \\*/ margin-right: 0.25rem; /\\* 4px \\*/ my-1margin-top: 0.25rem; /\\* 4px \\*/ margin-bottom: 0.25rem; /\\* 4px \\*/ ms-1margin-inline-start: 0.25rem; /\\* 4px \\*/ me-1margin-inline-end: 0.25rem; /\\* 4px \\*/ mt-1margin-top: 0.25rem; /\\* 4px \\*/ mr-1margin-right: 0.25rem; /\\* 4px \\*/ mb-1margin-bottom: 0.25rem; /\\* 4px \\*/ ml-1margin-left: 0.25rem; /\\* 4px \\*/ m-1.5margin: 0.375rem; /\\* 6px \\*/ mx-1.5margin-left: 0.375rem; /\\* 6px \\*/ margin-right: 0.375rem; /\\* 6px \\*/ my-1.5margin-top: 0.375rem; /\\* 6px \\*/ margin-bottom: 0.375rem; /\\* 6px \\*/ ms-1.5margin-inline-start: 0.375rem; /\\* 6px \\*/ me-1.5margin-inline-end: 0.375rem; /\\* 6px \\*/ mt-1.5margin-top: 0.375rem; /\\* 6px \\*/ mr-1.5margin-right: 0.375rem; /\\* 6px \\*/ mb-1.5margin-bottom: 0.375rem; /\\* 6px \\*/ ml-1.5margin-left: 0.375rem; /\\* 6px \\*/ m-2margin: 0.5rem; /\\* 8px \\*/ mx-2margin-left: 0.5rem; /\\* 8px \\*/ margin-right: 0.5rem; /\\* 8px \\*/ my-2margin-top: 0.5rem; /\\* 8px \\*/ margin-bottom: 0.5rem; /\\* 8px \\*/ ms-2margin-inline-start: 0.5rem; /\\* 8px \\*/ me-2margin-inline-end: 0.5rem; /\\* 8px \\*/ mt-2margin-top: 0.5rem; /\\* 8px \\*/ mr-2margin-right: 0.5rem; /\\* 8px \\*/ mb-2margin-bottom: 0.5rem; /\\* 8px \\*/ ml-2margin-left: 0.5rem; /\\* 8px \\*/ m-2.5margin: 0.625rem; /\\* 10px \\*/ mx-2.5margin-left: 0.625rem; /\\* 10px \\*/ margin-right: 0.625rem; /\\* 10px \\*/ my-2.5margin-top: 0.625rem; /\\* 10px \\*/ margin-bottom: 0.625rem; /\\* 10px \\*/ ms-2.5margin-inline-start: 0.625rem; /\\* 10px \\*/ me-2.5margin-inline-end: 0.625rem; /\\* 10px \\*/ mt-2.5margin-top: 0.625rem; /\\* 10px \\*/ mr-2.5margin-right: 0.625rem; /\\* 10px \\*/ mb-2.5margin-bottom: 0.625rem; /\\* 10px \\*/ ml-2.5margin-left: 0.625rem; /\\* 10px \\*/ m-3margin: 0.75rem; /\\* 12px \\*/ mx-3margin-left: 0.75rem; /\\* 12px \\*/ margin-right: 0.75rem; /\\* 12px \\*/ my-3margin-top: 0.75rem; /\\* 12px \\*/ margin-bottom: 0.75rem; /\\* 12px \\*/ ms-3margin-inline-start: 0.75rem; /\\* 12px \\*/ me-3margin-inline-end: 0.75rem; /\\* 12px \\*/ mt-3margin-top: 0.75rem; /\\* 12px \\*/ mr-3margin-right: 0.75rem; /\\* 12px \\*/ mb-3margin-bottom: 0.75rem; /\\* 12px \\*/ ml-3margin-left: 0.75rem; /\\* 12px \\*/ m-3.5margin: 0.875rem; /\\* 14px \\*/ mx-3.5margin-left: 0.875rem; /\\* 14px \\*/ margin-right: 0.875rem; /\\* 14px \\*/ my-3.5margin-top: 0.875rem; /\\* 14px \\*/ margin-bottom: 0.875rem; /\\* 14px \\*/ ms-3.5margin-inline-start: 0.875rem; /\\* 14px \\*/ me-3.5margin-inline-end: 0.875rem; /\\* 14px \\*/ mt-3.5margin-top: 0.875rem; /\\* 14px \\*/ mr-3.5margin-right: 0.875rem; /\\* 14px \\*/ mb-3.5margin-bottom: 0.875rem; /\\* 14px \\*/ ml-3.5margin-left: 0.875rem; /\\* 14px \\*/ m-4margin: 1rem; /\\* 16px \\*/ mx-4margin-left: 1rem; /\\* 16px \\*/ margin-right: 1rem; /\\* 16px \\*/ my-4margin-top: 1rem; /\\* 16px \\*/ margin-bottom: 1rem; /\\* 16px \\*/ ms-4margin-inline-start: 1rem; /\\* 16px \\*/ me-4margin-inline-end: 1rem; /\\* 16px \\*/ mt-4margin-top: 1rem; /\\* 16px \\*/ mr-4margin-right: 1rem; /\\* 16px \\*/ mb-4margin-bottom: 1rem; /\\* 16px \\*/ ml-4margin-left: 1rem; /\\* 16px \\*/ m-5margin: 1.25rem; /\\* 20px \\*/ mx-5margin-left: 1.25rem; /\\* 20px \\*/ margin-right: 1.25rem; /\\* 20px \\*/ my-5margin-top: 1.25rem; /\\* 20px \\*/ margin-bottom: 1.25rem; /\\* 20px \\*/ ms-5margin-inline-start: 1.25rem; /\\* 20px \\*/ me-5margin-inline-end: 1.25rem; /\\* 20px \\*/ mt-5margin-top: 1.25rem; /\\* 20px \\*/ mr-5margin-right: 1.25rem; /\\* 20px \\*/ mb-5margin-bottom: 1.25rem; /\\* 20px \\*/ ml-5margin-left: 1.25rem; /\\* 20px \\*/ m-6margin: 1.5rem; /\\* 24px \\*/ mx-6margin-left: 1.5rem; /\\* 24px \\*/ margin-right: 1.5rem; /\\* 24px \\*/ my-6margin-top: 1.5rem; /\\* 24px \\*/ margin-bottom: 1.5rem; /\\* 24px \\*/ ms-6margin-inline-start: 1.5rem; /\\* 24px \\*/ me-6margin-inline-end: 1.5rem; /\\* 24px \\*/ mt-6margin-top: 1.5rem; /\\* 24px \\*/ mr-6margin-right: 1.5rem; /\\* 24px \\*/ mb-6margin-bottom: 1.5rem; /\\* 24px \\*/ ml-6margin-left: 1.5rem; /\\* 24px \\*/ m-7margin: 1.75rem; /\\* 28px \\*/ mx-7margin-left: 1.75rem; /\\* 28px \\*/ margin-right: 1.75rem; /\\* 28px \\*/ my-7margin-top: 1.75rem; /\\* 28px \\*/ margin-bottom: 1.75rem; /\\* 28px \\*/ ms-7margin-inline-start: 1.75rem; /\\* 28px \\*/ me-7margin-inline-end: 1.75rem; /\\* 28px \\*/ mt-7margin-top: 1.75rem; /\\* 28px \\*/ mr-7margin-right: 1.75rem; /\\* 28px \\*/ mb-7margin-bottom: 1.75rem; /\\* 28px \\*/ ml-7margin-left: 1.75rem; /\\* 28px \\*/ m-8margin: 2rem; /\\* 32px \\*/ mx-8margin-left: 2rem; /\\* 32px \\*/ margin-right: 2rem; /\\* 32px \\*/ my-8margin-top: 2rem; /\\* 32px \\*/ margin-bottom: 2rem; /\\* 32px \\*/ ms-8margin-inline-start: 2rem; /\\* 32px \\*/ me-8margin-inline-end: 2rem; /\\* 32px \\*/ mt-8margin-top: 2rem; /\\* 32px \\*/ mr-8margin-right: 2rem; /\\* 32px \\*/ mb-8margin-bottom: 2rem; /\\* 32px \\*/ ml-8margin-left: 2rem; /\\* 32px \\*/ m-9margin: 2.25rem; /\\* 36px \\*/ mx-9margin-left: 2.25rem; /\\* 36px \\*/ margin-right: 2.25rem; /\\* 36px \\*/ my-9margin-top: 2.25rem; /\\* 36px \\*/ margin-bottom: 2.25rem; /\\* 36px \\*/ ms-9margin-inline-start: 2.25rem; /\\* 36px \\*/ me-9margin-inline-end: 2.25rem; /\\* 36px \\*/ mt-9margin-top: 2.25rem; /\\* 36px \\*/ mr-9margin-right: 2.25rem; /\\* 36px \\*/ mb-9margin-bottom: 2.25rem; /\\* 36px \\*/ ml-9margin-left: 2.25rem; /\\* 36px \\*/ m-10margin: 2.5rem; /\\* 40px \\*/ mx-10margin-left: 2.5rem; /\\* 40px \\*/ margin-right: 2.5rem; /\\* 40px \\*/ my-10margin-top: 2.5rem; /\\* 40px \\*/ margin-bottom: 2.5rem; /\\* 40px \\*/ ms-10margin-inline-start: 2.5rem; /\\* 40px \\*/ me-10margin-inline-end: 2.5rem; /\\* 40px \\*/ mt-10margin-top: 2.5rem; /\\* 40px \\*/ mr-10margin-right: 2.5rem; /\\* 40px \\*/ mb-10margin-bottom: 2.5rem; /\\* 40px \\*/ ml-10margin-left: 2.5rem; /\\* 40px \\*/ m-11margin: 2.75rem; /\\* 44px \\*/ mx-11margin-left: 2.75rem; /\\* 44px \\*/ margin-right: 2.75rem; /\\* 44px \\*/ my-11margin-top: 2.75rem; /\\* 44px \\*/ margin-bottom: 2.75rem; /\\* 44px \\*/ ms-11margin-inline-start: 2.75rem; /\\* 44px \\*/ me-11margin-inline-end: 2.75rem; /\\* 44px \\*/ mt-11margin-top: 2.75rem; /\\* 44px \\*/ mr-11margin-right: 2.75rem; /\\* 44px \\*/ mb-11margin-bottom: 2.75rem; /\\* 44px \\*/ ml-11margin-left: 2.75rem; /\\* 44px \\*/ m-12margin: 3rem; /\\* 48px \\*/ mx-12margin-left: 3rem; /\\* 48px \\*/ margin-right: 3rem; /\\* 48px \\*/ my-12margin-top: 3rem; /\\* 48px \\*/ margin-bottom: 3rem; /\\* 48px \\*/ ms-12margin-inline-start: 3rem; /\\* 48px \\*/ me-12margin-inline-end: 3rem; /\\* 48px \\*/ mt-12margin-top: 3rem; /\\* 48px \\*/ mr-12margin-right: 3rem; /\\* 48px \\*/ mb-12margin-bottom: 3rem; /\\* 48px \\*/ ml-12margin-left: 3rem; /\\* 48px \\*/ m-14margin: 3.5rem; /\\* 56px \\*/ mx-14margin-left: 3.5rem; /\\* 56px \\*/ margin-right: 3.5rem; /\\* 56px \\*/ my-14margin-top: 3.5rem; /\\* 56px \\*/ margin-bottom: 3.5rem; /\\* 56px \\*/ ms-14margin-inline-start: 3.5rem; /\\* 56px \\*/ me-14margin-inline-end: 3.5rem; /\\* 56px \\*/ mt-14margin-top: 3.5rem; /\\* 56px \\*/ mr-14margin-right: 3.5rem; /\\* 56px \\*/ mb-14margin-bottom: 3.5rem; /\\* 56px \\*/ ml-14margin-left: 3.5rem; /\\* 56px \\*/ m-16margin: 4rem; /\\* 64px \\*/ mx-16margin-left: 4rem; /\\* 64px \\*/ margin-right: 4rem; /\\* 64px \\*/ my-16margin-top: 4rem; /\\* 64px \\*/ margin-bottom: 4rem; /\\* 64px \\*/ ms-16margin-inline-start: 4rem; /\\* 64px \\*/ me-16margin-inline-end: 4rem; /\\* 64px \\*/ mt-16margin-top: 4rem; /\\* 64px \\*/ mr-16margin-right: 4rem; /\\* 64px \\*/ mb-16margin-bottom: 4rem; /\\* 64px \\*/ ml-16margin-left: 4rem; /\\* 64px \\*/ m-20margin: 5rem; /\\* 80px \\*/ mx-20margin-left: 5rem; /\\* 80px \\*/ margin-right: 5rem; /\\* 80px \\*/ my-20margin-top: 5rem; /\\* 80px \\*/ margin-bottom: 5rem; /\\* 80px \\*/ ms-20margin-inline-start: 5rem; /\\* 80px \\*/ me-20margin-inline-end: 5rem; /\\* 80px \\*/ mt-20margin-top: 5rem; /\\* 80px \\*/ mr-20margin-right: 5rem; /\\* 80px \\*/ mb-20margin-bottom: 5rem; /\\* 80px \\*/ ml-20margin-left: 5rem; /\\* 80px \\*/ m-24margin: 6rem; /\\* 96px \\*/ mx-24margin-left: 6rem; /\\* 96px \\*/ margin-right: 6rem; /\\* 96px \\*/ my-24margin-top: 6rem; /\\* 96px \\*/ margin-bottom: 6rem; /\\* 96px \\*/ ms-24margin-inline-start: 6rem; /\\* 96px \\*/ me-24margin-inline-end: 6rem; /\\* 96px \\*/ mt-24margin-top: 6rem; /\\* 96px \\*/ mr-24margin-right: 6rem; /\\* 96px \\*/ mb-24margin-bottom: 6rem; /\\* 96px \\*/ ml-24margin-left: 6rem; /\\* 96px \\*/ m-28margin: 7rem; /\\* 112px \\*/ mx-28margin-left: 7rem; /\\* 112px \\*/ margin-right: 7rem; /\\* 112px \\*/ my-28margin-top: 7rem; /\\* 112px \\*/ margin-bottom: 7rem; /\\* 112px \\*/ ms-28margin-inline-start: 7rem; /\\* 112px \\*/ me-28margin-inline-end: 7rem; /\\* 112px \\*/ mt-28margin-top: 7rem; /\\* 112px \\*/ mr-28margin-right: 7rem; /\\* 112px \\*/ mb-28margin-bottom: 7rem; /\\* 112px \\*/ ml-28margin-left: 7rem; /\\* 112px \\*/ m-32margin: 8rem; /\\* 128px \\*/ mx-32margin-left: 8rem; /\\* 128px \\*/ margin-right: 8rem; /\\* 128px \\*/ my-32margin-top: 8rem; /\\* 128px \\*/ margin-bottom: 8rem; /\\* 128px \\*/ ms-32margin-inline-start: 8rem; /\\* 128px \\*/ me-32margin-inline-end: 8rem; /\\* 128px \\*/ mt-32margin-top: 8rem; /\\* 128px \\*/ mr-32margin-right: 8rem; /\\* 128px \\*/ mb-32margin-bottom: 8rem; /\\* 128px \\*/ ml-32margin-left: 8rem; /\\* 128px \\*/ m-36margin: 9rem; /\\* 144px \\*/ mx-36margin-left: 9rem; /\\* 144px \\*/ margin-right: 9rem; /\\* 144px \\*/ my-36margin-top: 9rem; /\\* 144px \\*/ margin-bottom: 9rem; /\\* 144px \\*/ ms-36margin-inline-start: 9rem; /\\* 144px \\*/ me-36margin-inline-end: 9rem; /\\* 144px \\*/ mt-36margin-top: 9rem; /\\* 144px \\*/ mr-36margin-right: 9rem; /\\* 144px \\*/ mb-36margin-bottom: 9rem; /\\* 144px \\*/ ml-36margin-left: 9rem; /\\* 144px \\*/ m-40margin: 10rem; /\\* 160px \\*/ mx-40margin-left: 10rem; /\\* 160px \\*/ margin-right: 10rem; /\\* 160px \\*/ my-40margin-top: 10rem; /\\* 160px \\*/ margin-bottom: 10rem; /\\* 160px \\*/ ms-40margin-inline-start: 10rem; /\\* 160px \\*/ me-40margin-inline-end: 10rem; /\\* 160px \\*/ mt-40margin-top: 10rem; /\\* 160px \\*/ mr-40margin-right: 10rem; /\\* 160px \\*/ mb-40margin-bottom: 10rem; /\\* 160px \\*/ ml-40margin-left: 10rem; /\\* 160px \\*/ m-44margin: 11rem; /\\* 176px \\*/ mx-44margin-left: 11rem; /\\* 176px \\*/ margin-right: 11rem; /\\* 176px \\*/ my-44margin-top: 11rem; /\\* 176px \\*/ margin-bottom: 11rem; /\\* 176px \\*/ ms-44margin-inline-start: 11rem; /\\* 176px \\*/ me-44margin-inline-end: 11rem; /\\* 176px \\*/ mt-44margin-top: 11rem; /\\* 176px \\*/ mr-44margin-right: 11rem; /\\* 176px \\*/ mb-44margin-bottom: 11rem; /\\* 176px \\*/ ml-44margin-left: 11rem; /\\* 176px \\*/ m-48margin: 12rem; /\\* 192px \\*/ mx-48margin-left: 12rem; /\\* 192px \\*/ margin-right: 12rem; /\\* 192px \\*/ my-48margin-top: 12rem; /\\* 192px \\*/ margin-bottom: 12rem; /\\* 192px \\*/ ms-48margin-inline-start: 12rem; /\\* 192px \\*/ me-48margin-inline-end: 12rem; /\\* 192px \\*/ mt-48margin-top: 12rem; /\\* 192px \\*/ mr-48margin-right: 12rem; /\\* 192px \\*/ mb-48margin-bottom: 12rem; /\\* 192px \\*/ ml-48margin-left: 12rem; /\\* 192px \\*/ m-52margin: 13rem; /\\* 208px \\*/ mx-52margin-left: 13rem; /\\* 208px \\*/ margin-right: 13rem; /\\* 208px \\*/ my-52margin-top: 13rem; /\\* 208px \\*/ margin-bottom: 13rem; /\\* 208px \\*/ ms-52margin-inline-start: 13rem; /\\* 208px \\*/ me-52margin-inline-end: 13rem; /\\* 208px \\*/ mt-52margin-top: 13rem; /\\* 208px \\*/ mr-52margin-right: 13rem; /\\* 208px \\*/ mb-52margin-bottom: 13rem; /\\* 208px \\*/ ml-52margin-left: 13rem; /\\* 208px \\*/ m-56margin: 14rem; /\\* 224px \\*/ mx-56margin-left: 14rem; /\\* 224px \\*/ margin-right: 14rem; /\\* 224px \\*/ my-56margin-top: 14rem; /\\* 224px \\*/ margin-bottom: 14rem; /\\* 224px \\*/ ms-56margin-inline-start: 14rem; /\\* 224px \\*/ me-56margin-inline-end: 14rem; /\\* 224px \\*/ mt-56margin-top: 14rem; /\\* 224px \\*/ mr-56margin-right: 14rem; /\\* 224px \\*/ mb-56margin-bottom: 14rem; /\\* 224px \\*/ ml-56margin-left: 14rem; /\\* 224px \\*/ m-60margin: 15rem; /\\* 240px \\*/ mx-60margin-left: 15rem; /\\* 240px \\*/ margin-right: 15rem; /\\* 240px \\*/ my-60margin-top: 15rem; /\\* 240px \\*/ margin-bottom: 15rem; /\\* 240px \\*/ ms-60margin-inline-start: 15rem; /\\* 240px \\*/ me-60margin-inline-end: 15rem; /\\* 240px \\*/ mt-60margin-top: 15rem; /\\* 240px \\*/ mr-60margin-right: 15rem; /\\* 240px \\*/ mb-60margin-bottom: 15rem; /\\* 240px \\*/ ml-60margin-left: 15rem; /\\* 240px \\*/ m-64margin: 16rem; /\\* 256px \\*/ mx-64margin-left: 16rem; /\\* 256px \\*/ margin-right: 16rem; /\\* 256px \\*/ my-64margin-top: 16rem; /\\* 256px \\*/ margin-bottom: 16rem; /\\* 256px \\*/ ms-64margin-inline-start: 16rem; /\\* 256px \\*/ me-64margin-inline-end: 16rem; /\\* 256px \\*/ mt-64margin-top: 16rem; /\\* 256px \\*/ mr-64margin-right: 16rem; /\\* 256px \\*/ mb-64margin-bottom: 16rem; /\\* 256px \\*/ ml-64margin-left: 16rem; /\\* 256px \\*/ m-72margin: 18rem; /\\* 288px \\*/ mx-72margin-left: 18rem; /\\* 288px \\*/ margin-right: 18rem; /\\* 288px \\*/ my-72margin-top: 18rem; /\\* 288px \\*/ margin-bottom: 18rem; /\\* 288px \\*/ ms-72margin-inline-start: 18rem; /\\* 288px \\*/ me-72margin-inline-end: 18rem; /\\* 288px \\*/ mt-72margin-top: 18rem; /\\* 288px \\*/ mr-72margin-right: 18rem; /\\* 288px \\*/ mb-72margin-bottom: 18rem; /\\* 288px \\*/ ml-72margin-left: 18rem; /\\* 288px \\*/ m-80margin: 20rem; /\\* 320px \\*/ mx-80margin-left: 20rem; /\\* 320px \\*/ margin-right: 20rem; /\\* 320px \\*/ my-80margin-top: 20rem; /\\* 320px \\*/ margin-bottom: 20rem; /\\* 320px \\*/ ms-80margin-inline-start: 20rem; /\\* 320px \\*/ me-80margin-inline-end: 20rem; /\\* 320px \\*/ mt-80margin-top: 20rem; /\\* 320px \\*/ mr-80margin-right: 20rem; /\\* 320px \\*/ mb-80margin-bottom: 20rem; /\\* 320px \\*/ ml-80margin-left: 20rem; /\\* 320px \\*/ m-96margin: 24rem; /\\* 384px \\*/ mx-96margin-left: 24rem; /\\* 384px \\*/ margin-right: 24rem; /\\* 384px \\*/ my-96margin-top: 24rem; /\\* 384px \\*/ margin-bottom: 24rem; /\\* 384px \\*/ ms-96margin-inline-start: 24rem; /\\* 384px \\*/ me-96margin-inline-end: 24rem; /\\* 384px \\*/ mt-96margin-top: 24rem; /\\* 384px \\*/ mr-96margin-right: 24rem; /\\* 384px \\*/ mb-96margin-bottom: 24rem; /\\* 384px \\*/ ml-96margin-left: 24rem; /\\* 384px \\*/ m-automargin: auto; mx-automargin-left: auto; margin-right: auto; my-automargin-top: auto; margin-bottom: auto; ms-automargin-inline-start: auto; me-automargin-inline-end: auto; mt-automargin-top: auto; mr-automargin-right: auto; mb-automargin-bottom: auto; ml-automargin-left: auto;",
    "title": "Margin - Tailwind CSS",
    "description": "Utilities for controlling an element's margin.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/theme",
    "markdown": "# Theme Configuration - Tailwind CSS\n\nThe `theme` section of your `tailwind.config.js` file is where you define your project’s color palette, type scale, fonts, breakpoints, border radius values, and more.\n\nWe provide a sensible [default theme](https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/config.full.js) with a very generous set of values to get you started, but don’t be afraid to change it or extend it; you’re encouraged to customize it as much as you need to fit the goals of your design.\n\n* * *\n\n## [​Theme structure](#theme-structure)\n\nThe `theme` object contains keys for `screens`, `colors`, and `spacing`, as well as a key for each customizable [core plugin](https://tailwindcss.com/docs/configuration#core-plugins).\n\nSee the [theme configuration reference](https://tailwindcss.com/docs/theme#configuration-reference) or the [default theme](https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/config.full.js#L7) for a complete list of theme options.\n\n### [​Screens](#screens)\n\nThe `screens` key allows you to customize the responsive breakpoints in your project.\n\nTo learn more, see the [breakpoint customization documentation](https://tailwindcss.com/docs/breakpoints).\n\n### [​Colors](#colors)\n\nThe `colors` key allows you to customize the global color palette for your project.\n\nBy default, these colors are inherited by all color-related core plugins, like `backgroundColor`, `borderColor`, `textColor`, and others.\n\nTo learn more, see the [color customization documentation](https://tailwindcss.com/docs/colors).\n\n### [​Spacing](#spacing)\n\nThe `spacing` key allows you to customize the global spacing and sizing scale for your project.\n\nBy default, these values are inherited by the `padding`, `margin`, `width`, `height`, `maxHeight`, `flex-basis`, `gap`, `inset`, `space`, `translate`, `scrollMargin`, `scrollPadding`, and `textIndent` core plugins.\n\nTo learn more, see the [spacing customization documentation](https://tailwindcss.com/docs/customizing-spacing).\n\n### [​Core plugins](#core-plugins)\n\nThe rest of the `theme` section is used to configure which values are available for each individual core plugin.\n\nFor example, the `borderRadius` key lets you customize which border radius utilities will be generated:\n\n```\nmodule.exports = {\n  theme: {\n    borderRadius: {\n      'none': '0',\n      'sm': '.125rem',\n      DEFAULT: '.25rem',\n      'lg': '.5rem',\n      'full': '9999px',\n    },\n  }\n}\n```\n\nThe keys determine the suffix for the generated classes, and the values determine the value of the actual CSS declaration.\n\nThe example `borderRadius` configuration above would generate the following CSS classes:\n\n```\n.rounded-none { border-radius: 0 }\n.rounded-sm   { border-radius: .125rem }\n.rounded      { border-radius: .25rem }\n.rounded-lg   { border-radius: .5rem }\n.rounded-full { border-radius: 9999px }\n```\n\nYou’ll notice that using a key of `DEFAULT` in the theme configuration created the class `rounded` with no suffix. This is a common convention in Tailwind and is supported by all core plugins.\n\nTo learn more about customizing a specific core plugin, visit the documentation for that plugin.\n\nFor a complete reference of available theme properties and their default values, [see the default theme configuration](https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/config.full.js).\n\n* * *\n\n## [​Customizing the default theme](#customizing-the-default-theme)\n\nOut of the box, your project will automatically inherit the values from [the default theme configuration](https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/config.full.js). If you would like to customize the default theme, you have a few different options depending on your goals.\n\n### [​Extending the default theme](#extending-the-default-theme)\n\nIf you’d like to preserve the default values for a theme option but also add new values, add your extensions under the `theme.extend` key in your configuration file. Values under this key are merged with existing `theme` values and automatically become available as new classes that you can use.\n\nAs an example, here we extend the `fontFamily` property to add the `font-display` class that can change the font used on an element:\n\nAfter adding this to your theme you can use it just like any other font family utility:\n\n```\n<h1 class=\"font-display\">\n  This uses the Oswald font\n</h1>\n```\n\nIn some cases, properties map to [variants](https://tailwindcss.com/docs/hover-focus-and-other-states) that can be placed in front of a utility to conditionally apply its styles. For example, to add a `3xl` screen size that works just like the existing responsive screens, add a property under the `screens` key:\n\nWith this addition, a new `3xl` screen size is made available alongside the existing responsive variants like `sm`, `md`, `lg`, etc. You can use this new variant by placing it before a utility class:\n\n```\n<blockquote class=\"text-base md:text-md 3xl:text-lg\">\n  Oh I gotta get on that internet, I'm late on everything!\n</blockquote>\n```\n\n### [​Overriding the default theme](#overriding-the-default-theme)\n\nTo override an option in the default theme, add your overrides directly under the `theme` section of your `tailwind.config.js`:\n\nThis will completely replace Tailwind’s default configuration for that key, so in the example above none of the default opacity utilities would be generated.\n\nAny keys you **do not** provide will be inherited from the default theme, so in the above example, the default theme configuration for things like colors, spacing, border-radius, background-position, etc. would be preserved.\n\nYou can of course both override some parts of the default theme and extend other parts of the default theme within the same configuration:\n\n### [​Referencing other values](#referencing-other-values)\n\nIf you need to reference another value in your theme, you can do so by providing a closure instead of a static value. The closure will receive an object that includes a `theme()` function that you can use to look up other values in your theme using dot notation.\n\nFor example, you could generate `background-size` utilities for every value in your spacing scale by referencing `theme('spacing')` in your `backgroundSize` configuration:\n\nThe `theme()` function attempts to find the value you are looking for from the fully merged theme object, so it can reference your own customizations as well as the default theme values. It also works recursively, so as long as there is a static value at the end of the chain it will be able to resolve the value you are looking for.\n\nNote that you can only use this kind of closure with top-level theme keys, not the keys inside of each section.\n\nYou can’t use functions for individual values\n\nUse functions for top-level theme keys\n\n### [​Referencing the default theme](#referencing-the-default-theme)\n\nIf you’d like to reference a value in the default theme for any reason, you can import it from `tailwindcss/defaultTheme`.\n\nOne example of where this is useful is if you’d like to add a font family to one of Tailwind’s default font stacks:\n\n### [​Disabling an entire core plugin](#disabling-an-entire-core-plugin)\n\nIf you don’t want to generate any classes for a certain core plugin, it’s better to set that plugin to false in your `corePlugins` configuration than to provide an empty object for that key in your `theme` configuration.\n\nDon’t assign an empty object in your theme configuration\n\nDo disable the plugin in your corePlugins configuration\n\nThe end result is the same, but since many core plugins expose no configuration they can only be disabled using `corePlugins` anyways, so it’s better to be consistent.\n\n* * *\n\n## [​Configuration reference](#configuration-reference)\n\nExcept for `screens`, `colors`, and `spacing`, all of the keys in the `theme` object map to one of Tailwind’s [core plugins](https://tailwindcss.com/docs/configuration#core-plugins). Since many plugins are responsible for CSS properties that only accept a static set of values (like `float` for example), note that not every plugin has a corresponding key in the `theme` object.\n\nAll of these keys are also available under the `theme.extend` key to enable [extending the default theme](https://tailwindcss.com/docs/theme#extending-the-default-theme).\n\n| Key | Description |\n| --- | --- |\n| `accentColor` | Values for the `accent-color` property |\n| `animation` | Values for the `animation` property |\n| `aria` | Values for the `aria` property |\n| `aspectRatio` | Values for the `aspect-ratio` property |\n| `backdropBlur` | Values for the `backdropBlur` plugin |\n| `backdropBrightness` | Values for the `backdropBrightness` plugin |\n| `backdropContrast` | Values for the `backdropContrast` plugin |\n| `backdropGrayscale` | Values for the `backdropGrayscale` plugin |\n| `backdropHueRotate` | Values for the `backdropHueRotate` plugin |\n| `backdropInvert` | Values for the `backdropInvert` plugin |\n| `backdropOpacity` | Values for the `backdropOpacity` plugin |\n| `backdropSaturate` | Values for the `backdropSaturate` plugin |\n| `backdropSepia` | Values for the `backdropSepia` plugin |\n| `backgroundColor` | Values for the `background-color` property |\n| `backgroundImage` | Values for the `background-image` property |\n| `backgroundOpacity` | Values for the `background-opacity` property |\n| `backgroundPosition` | Values for the `background-position` property |\n| `backgroundSize` | Values for the `background-size` property |\n| `blur` | Values for the `blur` plugin |\n| `borderColor` | Values for the `border-color` property |\n| `borderOpacity` | Values for the `borderOpacity` plugin |\n| `borderRadius` | Values for the `border-radius` property |\n| `borderSpacing` | Values for the `border-spacing` property |\n| `borderWidth` | Values for the `borderWidth` plugin |\n| `boxShadow` | Values for the `box-shadow` property |\n| `boxShadowColor` | Values for the `boxShadowColor` plugin |\n| `brightness` | Values for the `brightness` plugin |\n| `caretColor` | Values for the `caret-color` property |\n| `colors` | Your project's color palette |\n| `columns` | Values for the `columns` property |\n| `container` | Configuration for the `container` plugin |\n| `content` | Values for the `content` property |\n| `contrast` | Values for the `contrast` plugin |\n| `cursor` | Values for the `cursor` property |\n| `divideColor` | Values for the `divideColor` plugin |\n| `divideOpacity` | Values for the `divideOpacity` plugin |\n| `divideWidth` | Values for the `divideWidth` plugin |\n| `dropShadow` | Values for the `dropShadow` plugin |\n| `fill` | Values for the `fill` plugin |\n| `flex` | Values for the `flex` property |\n| `flexBasis` | Values for the `flex-basis` property |\n| `flexGrow` | Values for the `flex-grow` property |\n| `flexShrink` | Values for the `flex-shrink` property |\n| `fontFamily` | Values for the `font-family` property |\n| `fontSize` | Values for the `font-size` property |\n| `fontWeight` | Values for the `font-weight` property |\n| `gap` | Values for the `gap` property |\n| `gradientColorStops` | Values for the `gradientColorStops` plugin |\n| `gradientColorStopPositions` | Values for the `gradient-color-stop-positions` property |\n| `grayscale` | Values for the `grayscale` plugin |\n| `gridAutoColumns` | Values for the `grid-auto-columns` property |\n| `gridAutoRows` | Values for the `grid-auto-rows` property |\n| `gridColumn` | Values for the `grid-column` property |\n| `gridColumnEnd` | Values for the `grid-column-end` property |\n| `gridColumnStart` | Values for the `grid-column-start` property |\n| `gridRow` | Values for the `grid-row` property |\n| `gridRowEnd` | Values for the `grid-row-end` property |\n| `gridRowStart` | Values for the `grid-row-start` property |\n| `gridTemplateColumns` | Values for the `grid-template-columns` property |\n| `gridTemplateRows` | Values for the `grid-template-rows` property |\n| `height` | Values for the `height` property |\n| `hueRotate` | Values for the `hueRotate` plugin |\n| `inset` | Values for the `top`, `right`, `bottom`, and `left` properties |\n| `invert` | Values for the `invert` plugin |\n| `keyframes` | Keyframe values used in the `animation` plugin |\n| `letterSpacing` | Values for the `letter-spacing` property |\n| `lineHeight` | Values for the `line-height` property |\n| `listStyleType` | Values for the `list-style-type` property |\n| `listStyleImage` | Values for the `list-style-image` property |\n| `margin` | Values for the `margin` property |\n| `lineClamp` | Values for the `line-clamp` property |\n| `maxHeight` | Values for the `max-height` property |\n| `maxWidth` | Values for the `max-width` property |\n| `minHeight` | Values for the `min-height` property |\n| `minWidth` | Values for the `min-width` property |\n| `objectPosition` | Values for the `object-position` property |\n| `opacity` | Values for the `opacity` property |\n| `order` | Values for the `order` property |\n| `outlineColor` | Values for the `outline-color` property |\n| `outlineOffset` | Values for the `outline-offset` property |\n| `outlineWidth` | Values for the `outline-width` property |\n| `padding` | Values for the `padding` property |\n| `placeholderColor` | Values for the `placeholderColor` plugin |\n| `placeholderOpacity` | Values for the `placeholderOpacity` plugin |\n| `ringColor` | Values for the `ringColor` plugin |\n| `ringOffsetColor` | Values for the `ringOffsetColor` plugin |\n| `ringOffsetWidth` | Values for the `ringOffsetWidth` plugin |\n| `ringOpacity` | Values for the `ringOpacity` plugin |\n| `ringWidth` | Values for the `ringWidth` plugin |\n| `rotate` | Values for the `rotate` plugin |\n| `saturate` | Values for the `saturate` plugin |\n| `scale` | Values for the `scale` plugin |\n| `screens` | Your project's responsive breakpoints |\n| `scrollMargin` | Values for the `scroll-margin` property |\n| `scrollPadding` | Values for the `scroll-padding` property |\n| `sepia` | Values for the `sepia` plugin |\n| `skew` | Values for the `skew` plugin |\n| `space` | Values for the `space` plugin |\n| `spacing` | Your project's spacing scale |\n| `stroke` | Values for the `stroke` property |\n| `strokeWidth` | Values for the `stroke-width` property |\n| `supports` | Values for the `supports` property |\n| `data` | Values for the `data` property |\n| `textColor` | Values for the `text-color` property |\n| `textDecorationColor` | Values for the `text-decoration-color` property |\n| `textDecorationThickness` | Values for the `text-decoration-thickness` property |\n| `textIndent` | Values for the `text-indent` property |\n| `textOpacity` | Values for the `textOpacity` plugin |\n| `textUnderlineOffset` | Values for the `text-underline-offset` property |\n| `transformOrigin` | Values for the `transform-origin` property |\n| `transitionDelay` | Values for the `transition-delay` property |\n| `transitionDuration` | Values for the `transition-duration` property |\n| `transitionProperty` | Values for the `transition-property` property |\n| `transitionTimingFunction` | Values for the `transition-timing-function` property |\n| `translate` | Values for the `translate` plugin |\n| `size` | Values for the `size` property |\n| `width` | Values for the `width` property |\n| `willChange` | Values for the `will-change` property |\n| `zIndex` | Values for the `z-index` property |",
    "title": "Theme Configuration - Tailwind CSS",
    "description": "Customizing the default theme for your project.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/text-decoration-thickness",
    "markdown": "# Text Decoration Thickness - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the text decoration thickness](#setting-the-text-decoration-thickness)\n\nUse the `decoration-*` utilities to change the thickness of an element’s [text decoration](https://tailwindcss.com/docs/text-decoration).\n\n```\n<p class=\"underline decoration-1 ...\">The quick brown fox...</p>\n<p class=\"underline decoration-2 ...\">The quick brown fox...</p>\n<p class=\"underline decoration-4 ...\">The quick brown fox...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:decoration-4` to only apply the `decoration-4` utility on hover.\n\n```\n<p class=\"underline hover:decoration-4\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:decoration-4` to apply the `decoration-4` utility at only medium screen sizes and above.\n\n```\n<p class=\"underline md:decoration-4\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nYou can customize the `decoration-*` utilities by editing `theme.textDecorationThickness` or `theme.extend.textDecorationThickness` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `text-decoration-thickness` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<p class=\"decoration-[3px]\">\n  <!-- ... -->\n</p>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Text Decoration Thickness - Tailwind CSS",
    "description": "Utilities for controlling the thickness of text decorations.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/text-underline-offset",
    "markdown": "# Text Underline Offset - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the underline offset](#setting-the-underline-offset)\n\nUse the `underline-offset-*` utilities to change the offset of a text underline.\n\n```\n<p class=\"underline underline-offset-1 ...\">The quick brown fox...</p>\n<p class=\"underline underline-offset-2 ...\">The quick brown fox...</p>\n<p class=\"underline underline-offset-4 ...\">The quick brown fox...</p>\n<p class=\"underline underline-offset-8 ...\">The quick brown fox...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:underline-offset-4` to only apply the `underline-offset-4` utility on hover.\n\n```\n<p class=\"underline hover:underline-offset-4\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:underline-offset-4` to apply the `underline-offset-4` utility at only medium screen sizes and above.\n\n```\n<p class=\"underline md:underline-offset-4\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nYou can customize the `text-underline-offset` utilities by editing `theme.textUnderlineOffset` or `theme.extend.textUnderlineOffset` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `text-underline-offset` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<p class=\"underline-offset-[3px]\">\n  <!-- ... -->\n</p>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Text Underline Offset - Tailwind CSS",
    "description": "Utilities for controlling the offset of a text underline.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/space",
    "markdown": "# Space Between - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Add horizontal space between children](#add-horizontal-space-between-children)\n\nUse the `space-x-*` utilities to control the horizontal space between elements.\n\n```\n<div class=\"flex space-x-4 ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Add vertical space between children](#add-vertical-space-between-children)\n\nUse the `space-y-*` utilities to control the vertical space between elements.\n\n```\n<div class=\"flex flex-col space-y-4 ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Reversing children order](#reversing-children-order)\n\nIf your elements are in reverse order (using say `flex-row-reverse` or `flex-col-reverse`), use the `space-x-reverse` or `space-y-reverse` utilities to ensure the space is added to the correct side of each element.\n\n```\n<div class=\"flex flex-row-reverse space-x-4 space-x-reverse ...\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n### [​Using negative values](#using-negative-values)\n\nTo use a negative space value, prefix the class name with a dash to convert it to a negative value.\n\n```\n<div class=\"flex -space-x-4 ...\">\n  <!-- ... -->\n</div>\n```\n\n## [​Limitations](#limitations)\n\nThese utilities are really just a shortcut for adding margin to all-but-the-first-item in a group, and aren’t designed to handle complex cases like grids, layouts that wrap, or situations where the children are rendered in a complex custom order rather than their natural DOM order.\n\nFor those situations, it’s better to use the [gap utilities](https://tailwindcss.com/docs/gap) when possible, or add margin to every element with a matching negative margin on the parent:\n\n```\n<div class=\"flow-root\">\n  <div class=\"-m-2 flex flex-wrap\">\n    <div class=\"m-2 ...\"></div>\n    <div class=\"m-2 ...\"></div>\n    <div class=\"m-2 ...\"></div>\n  </div>\n</div>\n```\n\n### [​Cannot be paired with divide utilities](#cannot-be-paired-with-divide-utilities)\n\nThe `space-*` utilities are not designed to work together with the [divide utilities](https://tailwindcss.com/docs/divide-width). For those situations, consider adding margin/padding utilities to the children instead.\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:space-x-8` to only apply the `space-x-8` utility on hover.\n\n```\n<div class=\"flex space-x-2 hover:space-x-8\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:space-x-8` to apply the `space-x-8` utility at only medium screen sizes and above.\n\n```\n<div class=\"flex space-x-2 md:space-x-8\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind’s space scale uses the [default spacing scale](https://tailwindcss.com/docs/customizing-spacing). You can customize your spacing scale by editing `theme.spacing` or `theme.extend.spacing` in your `tailwind.config.js` file.\n\nAlternatively, you can customize just the space scale by editing `theme.space` or `theme.extend.space` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off space value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"space-y-[5px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Space Between - Tailwind CSS",
    "description": "Utilities for controlling the space between child elements.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/divide-color",
    "markdown": "# Divide Color - Tailwind CSS\n\ndivide-inherit \\> \\* + \\*border-color: inherit; divide-current \\> \\* + \\*border-color: currentColor; divide-transparent \\> \\* + \\*border-color: transparent; divide-black \\> \\* + \\*border-color: rgb(0 0 0); divide-white \\> \\* + \\*border-color: rgb(255 255 255); divide-slate-50 \\> \\* + \\*border-color: rgb(248 250 252); divide-slate-100 \\> \\* + \\*border-color: rgb(241 245 249); divide-slate-200 \\> \\* + \\*border-color: rgb(226 232 240); divide-slate-300 \\> \\* + \\*border-color: rgb(203 213 225); divide-slate-400 \\> \\* + \\*border-color: rgb(148 163 184); divide-slate-500 \\> \\* + \\*border-color: rgb(100 116 139); divide-slate-600 \\> \\* + \\*border-color: rgb(71 85 105); divide-slate-700 \\> \\* + \\*border-color: rgb(51 65 85); divide-slate-800 \\> \\* + \\*border-color: rgb(30 41 59); divide-slate-900 \\> \\* + \\*border-color: rgb(15 23 42); divide-slate-950 \\> \\* + \\*border-color: rgb(2 6 23); divide-gray-50 \\> \\* + \\*border-color: rgb(249 250 251); divide-gray-100 \\> \\* + \\*border-color: rgb(243 244 246); divide-gray-200 \\> \\* + \\*border-color: rgb(229 231 235); divide-gray-300 \\> \\* + \\*border-color: rgb(209 213 219); divide-gray-400 \\> \\* + \\*border-color: rgb(156 163 175); divide-gray-500 \\> \\* + \\*border-color: rgb(107 114 128); divide-gray-600 \\> \\* + \\*border-color: rgb(75 85 99); divide-gray-700 \\> \\* + \\*border-color: rgb(55 65 81); divide-gray-800 \\> \\* + \\*border-color: rgb(31 41 55); divide-gray-900 \\> \\* + \\*border-color: rgb(17 24 39); divide-gray-950 \\> \\* + \\*border-color: rgb(3 7 18); divide-zinc-50 \\> \\* + \\*border-color: rgb(250 250 250); divide-zinc-100 \\> \\* + \\*border-color: rgb(244 244 245); divide-zinc-200 \\> \\* + \\*border-color: rgb(228 228 231); divide-zinc-300 \\> \\* + \\*border-color: rgb(212 212 216); divide-zinc-400 \\> \\* + \\*border-color: rgb(161 161 170); divide-zinc-500 \\> \\* + \\*border-color: rgb(113 113 122); divide-zinc-600 \\> \\* + \\*border-color: rgb(82 82 91); divide-zinc-700 \\> \\* + \\*border-color: rgb(63 63 70); divide-zinc-800 \\> \\* + \\*border-color: rgb(39 39 42); divide-zinc-900 \\> \\* + \\*border-color: rgb(24 24 27); divide-zinc-950 \\> \\* + \\*border-color: rgb(9 9 11); divide-neutral-50 \\> \\* + \\*border-color: rgb(250 250 250); divide-neutral-100 \\> \\* + \\*border-color: rgb(245 245 245); divide-neutral-200 \\> \\* + \\*border-color: rgb(229 229 229); divide-neutral-300 \\> \\* + \\*border-color: rgb(212 212 212); divide-neutral-400 \\> \\* + \\*border-color: rgb(163 163 163); divide-neutral-500 \\> \\* + \\*border-color: rgb(115 115 115); divide-neutral-600 \\> \\* + \\*border-color: rgb(82 82 82); divide-neutral-700 \\> \\* + \\*border-color: rgb(64 64 64); divide-neutral-800 \\> \\* + \\*border-color: rgb(38 38 38); divide-neutral-900 \\> \\* + \\*border-color: rgb(23 23 23); divide-neutral-950 \\> \\* + \\*border-color: rgb(10 10 10); divide-stone-50 \\> \\* + \\*border-color: rgb(250 250 249); divide-stone-100 \\> \\* + \\*border-color: rgb(245 245 244); divide-stone-200 \\> \\* + \\*border-color: rgb(231 229 228); divide-stone-300 \\> \\* + \\*border-color: rgb(214 211 209); divide-stone-400 \\> \\* + \\*border-color: rgb(168 162 158); divide-stone-500 \\> \\* + \\*border-color: rgb(120 113 108); divide-stone-600 \\> \\* + \\*border-color: rgb(87 83 78); divide-stone-700 \\> \\* + \\*border-color: rgb(68 64 60); divide-stone-800 \\> \\* + \\*border-color: rgb(41 37 36); divide-stone-900 \\> \\* + \\*border-color: rgb(28 25 23); divide-stone-950 \\> \\* + \\*border-color: rgb(12 10 9); divide-red-50 \\> \\* + \\*border-color: rgb(254 242 242); divide-red-100 \\> \\* + \\*border-color: rgb(254 226 226); divide-red-200 \\> \\* + \\*border-color: rgb(254 202 202); divide-red-300 \\> \\* + \\*border-color: rgb(252 165 165); divide-red-400 \\> \\* + \\*border-color: rgb(248 113 113); divide-red-500 \\> \\* + \\*border-color: rgb(239 68 68); divide-red-600 \\> \\* + \\*border-color: rgb(220 38 38); divide-red-700 \\> \\* + \\*border-color: rgb(185 28 28); divide-red-800 \\> \\* + \\*border-color: rgb(153 27 27); divide-red-900 \\> \\* + \\*border-color: rgb(127 29 29); divide-red-950 \\> \\* + \\*border-color: rgb(69 10 10); divide-orange-50 \\> \\* + \\*border-color: rgb(255 247 237); divide-orange-100 \\> \\* + \\*border-color: rgb(255 237 213); divide-orange-200 \\> \\* + \\*border-color: rgb(254 215 170); divide-orange-300 \\> \\* + \\*border-color: rgb(253 186 116); divide-orange-400 \\> \\* + \\*border-color: rgb(251 146 60); divide-orange-500 \\> \\* + \\*border-color: rgb(249 115 22); divide-orange-600 \\> \\* + \\*border-color: rgb(234 88 12); divide-orange-700 \\> \\* + \\*border-color: rgb(194 65 12); divide-orange-800 \\> \\* + \\*border-color: rgb(154 52 18); divide-orange-900 \\> \\* + \\*border-color: rgb(124 45 18); divide-orange-950 \\> \\* + \\*border-color: rgb(67 20 7); divide-amber-50 \\> \\* + \\*border-color: rgb(255 251 235); divide-amber-100 \\> \\* + \\*border-color: rgb(254 243 199); divide-amber-200 \\> \\* + \\*border-color: rgb(253 230 138); divide-amber-300 \\> \\* + \\*border-color: rgb(252 211 77); divide-amber-400 \\> \\* + \\*border-color: rgb(251 191 36); divide-amber-500 \\> \\* + \\*border-color: rgb(245 158 11); divide-amber-600 \\> \\* + \\*border-color: rgb(217 119 6); divide-amber-700 \\> \\* + \\*border-color: rgb(180 83 9); divide-amber-800 \\> \\* + \\*border-color: rgb(146 64 14); divide-amber-900 \\> \\* + \\*border-color: rgb(120 53 15); divide-amber-950 \\> \\* + \\*border-color: rgb(69 26 3); divide-yellow-50 \\> \\* + \\*border-color: rgb(254 252 232); divide-yellow-100 \\> \\* + \\*border-color: rgb(254 249 195); divide-yellow-200 \\> \\* + \\*border-color: rgb(254 240 138); divide-yellow-300 \\> \\* + \\*border-color: rgb(253 224 71); divide-yellow-400 \\> \\* + \\*border-color: rgb(250 204 21); divide-yellow-500 \\> \\* + \\*border-color: rgb(234 179 8); divide-yellow-600 \\> \\* + \\*border-color: rgb(202 138 4); divide-yellow-700 \\> \\* + \\*border-color: rgb(161 98 7); divide-yellow-800 \\> \\* + \\*border-color: rgb(133 77 14); divide-yellow-900 \\> \\* + \\*border-color: rgb(113 63 18); divide-yellow-950 \\> \\* + \\*border-color: rgb(66 32 6); divide-lime-50 \\> \\* + \\*border-color: rgb(247 254 231); divide-lime-100 \\> \\* + \\*border-color: rgb(236 252 203); divide-lime-200 \\> \\* + \\*border-color: rgb(217 249 157); divide-lime-300 \\> \\* + \\*border-color: rgb(190 242 100); divide-lime-400 \\> \\* + \\*border-color: rgb(163 230 53); divide-lime-500 \\> \\* + \\*border-color: rgb(132 204 22); divide-lime-600 \\> \\* + \\*border-color: rgb(101 163 13); divide-lime-700 \\> \\* + \\*border-color: rgb(77 124 15); divide-lime-800 \\> \\* + \\*border-color: rgb(63 98 18); divide-lime-900 \\> \\* + \\*border-color: rgb(54 83 20); divide-lime-950 \\> \\* + \\*border-color: rgb(26 46 5); divide-green-50 \\> \\* + \\*border-color: rgb(240 253 244); divide-green-100 \\> \\* + \\*border-color: rgb(220 252 231); divide-green-200 \\> \\* + \\*border-color: rgb(187 247 208); divide-green-300 \\> \\* + \\*border-color: rgb(134 239 172); divide-green-400 \\> \\* + \\*border-color: rgb(74 222 128); divide-green-500 \\> \\* + \\*border-color: rgb(34 197 94); divide-green-600 \\> \\* + \\*border-color: rgb(22 163 74); divide-green-700 \\> \\* + \\*border-color: rgb(21 128 61); divide-green-800 \\> \\* + \\*border-color: rgb(22 101 52); divide-green-900 \\> \\* + \\*border-color: rgb(20 83 45); divide-green-950 \\> \\* + \\*border-color: rgb(5 46 22); divide-emerald-50 \\> \\* + \\*border-color: rgb(236 253 245); divide-emerald-100 \\> \\* + \\*border-color: rgb(209 250 229); divide-emerald-200 \\> \\* + \\*border-color: rgb(167 243 208); divide-emerald-300 \\> \\* + \\*border-color: rgb(110 231 183); divide-emerald-400 \\> \\* + \\*border-color: rgb(52 211 153); divide-emerald-500 \\> \\* + \\*border-color: rgb(16 185 129); divide-emerald-600 \\> \\* + \\*border-color: rgb(5 150 105); divide-emerald-700 \\> \\* + \\*border-color: rgb(4 120 87); divide-emerald-800 \\> \\* + \\*border-color: rgb(6 95 70); divide-emerald-900 \\> \\* + \\*border-color: rgb(6 78 59); divide-emerald-950 \\> \\* + \\*border-color: rgb(2 44 34); divide-teal-50 \\> \\* + \\*border-color: rgb(240 253 250); divide-teal-100 \\> \\* + \\*border-color: rgb(204 251 241); divide-teal-200 \\> \\* + \\*border-color: rgb(153 246 228); divide-teal-300 \\> \\* + \\*border-color: rgb(94 234 212); divide-teal-400 \\> \\* + \\*border-color: rgb(45 212 191); divide-teal-500 \\> \\* + \\*border-color: rgb(20 184 166); divide-teal-600 \\> \\* + \\*border-color: rgb(13 148 136); divide-teal-700 \\> \\* + \\*border-color: rgb(15 118 110); divide-teal-800 \\> \\* + \\*border-color: rgb(17 94 89); divide-teal-900 \\> \\* + \\*border-color: rgb(19 78 74); divide-teal-950 \\> \\* + \\*border-color: rgb(4 47 46); divide-cyan-50 \\> \\* + \\*border-color: rgb(236 254 255); divide-cyan-100 \\> \\* + \\*border-color: rgb(207 250 254); divide-cyan-200 \\> \\* + \\*border-color: rgb(165 243 252); divide-cyan-300 \\> \\* + \\*border-color: rgb(103 232 249); divide-cyan-400 \\> \\* + \\*border-color: rgb(34 211 238); divide-cyan-500 \\> \\* + \\*border-color: rgb(6 182 212); divide-cyan-600 \\> \\* + \\*border-color: rgb(8 145 178); divide-cyan-700 \\> \\* + \\*border-color: rgb(14 116 144); divide-cyan-800 \\> \\* + \\*border-color: rgb(21 94 117); divide-cyan-900 \\> \\* + \\*border-color: rgb(22 78 99); divide-cyan-950 \\> \\* + \\*border-color: rgb(8 51 68); divide-sky-50 \\> \\* + \\*border-color: rgb(240 249 255); divide-sky-100 \\> \\* + \\*border-color: rgb(224 242 254); divide-sky-200 \\> \\* + \\*border-color: rgb(186 230 253); divide-sky-300 \\> \\* + \\*border-color: rgb(125 211 252); divide-sky-400 \\> \\* + \\*border-color: rgb(56 189 248); divide-sky-500 \\> \\* + \\*border-color: rgb(14 165 233); divide-sky-600 \\> \\* + \\*border-color: rgb(2 132 199); divide-sky-700 \\> \\* + \\*border-color: rgb(3 105 161); divide-sky-800 \\> \\* + \\*border-color: rgb(7 89 133); divide-sky-900 \\> \\* + \\*border-color: rgb(12 74 110); divide-sky-950 \\> \\* + \\*border-color: rgb(8 47 73); divide-blue-50 \\> \\* + \\*border-color: rgb(239 246 255); divide-blue-100 \\> \\* + \\*border-color: rgb(219 234 254); divide-blue-200 \\> \\* + \\*border-color: rgb(191 219 254); divide-blue-300 \\> \\* + \\*border-color: rgb(147 197 253); divide-blue-400 \\> \\* + \\*border-color: rgb(96 165 250); divide-blue-500 \\> \\* + \\*border-color: rgb(59 130 246); divide-blue-600 \\> \\* + \\*border-color: rgb(37 99 235); divide-blue-700 \\> \\* + \\*border-color: rgb(29 78 216); divide-blue-800 \\> \\* + \\*border-color: rgb(30 64 175); divide-blue-900 \\> \\* + \\*border-color: rgb(30 58 138); divide-blue-950 \\> \\* + \\*border-color: rgb(23 37 84); divide-indigo-50 \\> \\* + \\*border-color: rgb(238 242 255); divide-indigo-100 \\> \\* + \\*border-color: rgb(224 231 255); divide-indigo-200 \\> \\* + \\*border-color: rgb(199 210 254); divide-indigo-300 \\> \\* + \\*border-color: rgb(165 180 252); divide-indigo-400 \\> \\* + \\*border-color: rgb(129 140 248); divide-indigo-500 \\> \\* + \\*border-color: rgb(99 102 241); divide-indigo-600 \\> \\* + \\*border-color: rgb(79 70 229); divide-indigo-700 \\> \\* + \\*border-color: rgb(67 56 202); divide-indigo-800 \\> \\* + \\*border-color: rgb(55 48 163); divide-indigo-900 \\> \\* + \\*border-color: rgb(49 46 129); divide-indigo-950 \\> \\* + \\*border-color: rgb(30 27 75); divide-violet-50 \\> \\* + \\*border-color: rgb(245 243 255); divide-violet-100 \\> \\* + \\*border-color: rgb(237 233 254); divide-violet-200 \\> \\* + \\*border-color: rgb(221 214 254); divide-violet-300 \\> \\* + \\*border-color: rgb(196 181 253); divide-violet-400 \\> \\* + \\*border-color: rgb(167 139 250); divide-violet-500 \\> \\* + \\*border-color: rgb(139 92 246); divide-violet-600 \\> \\* + \\*border-color: rgb(124 58 237); divide-violet-700 \\> \\* + \\*border-color: rgb(109 40 217); divide-violet-800 \\> \\* + \\*border-color: rgb(91 33 182); divide-violet-900 \\> \\* + \\*border-color: rgb(76 29 149); divide-violet-950 \\> \\* + \\*border-color: rgb(46 16 101); divide-purple-50 \\> \\* + \\*border-color: rgb(250 245 255); divide-purple-100 \\> \\* + \\*border-color: rgb(243 232 255); divide-purple-200 \\> \\* + \\*border-color: rgb(233 213 255); divide-purple-300 \\> \\* + \\*border-color: rgb(216 180 254); divide-purple-400 \\> \\* + \\*border-color: rgb(192 132 252); divide-purple-500 \\> \\* + \\*border-color: rgb(168 85 247); divide-purple-600 \\> \\* + \\*border-color: rgb(147 51 234); divide-purple-700 \\> \\* + \\*border-color: rgb(126 34 206); divide-purple-800 \\> \\* + \\*border-color: rgb(107 33 168); divide-purple-900 \\> \\* + \\*border-color: rgb(88 28 135); divide-purple-950 \\> \\* + \\*border-color: rgb(59 7 100); divide-fuchsia-50 \\> \\* + \\*border-color: rgb(253 244 255); divide-fuchsia-100 \\> \\* + \\*border-color: rgb(250 232 255); divide-fuchsia-200 \\> \\* + \\*border-color: rgb(245 208 254); divide-fuchsia-300 \\> \\* + \\*border-color: rgb(240 171 252); divide-fuchsia-400 \\> \\* + \\*border-color: rgb(232 121 249); divide-fuchsia-500 \\> \\* + \\*border-color: rgb(217 70 239); divide-fuchsia-600 \\> \\* + \\*border-color: rgb(192 38 211); divide-fuchsia-700 \\> \\* + \\*border-color: rgb(162 28 175); divide-fuchsia-800 \\> \\* + \\*border-color: rgb(134 25 143); divide-fuchsia-900 \\> \\* + \\*border-color: rgb(112 26 117); divide-fuchsia-950 \\> \\* + \\*border-color: rgb(74 4 78); divide-pink-50 \\> \\* + \\*border-color: rgb(253 242 248); divide-pink-100 \\> \\* + \\*border-color: rgb(252 231 243); divide-pink-200 \\> \\* + \\*border-color: rgb(251 207 232); divide-pink-300 \\> \\* + \\*border-color: rgb(249 168 212); divide-pink-400 \\> \\* + \\*border-color: rgb(244 114 182); divide-pink-500 \\> \\* + \\*border-color: rgb(236 72 153); divide-pink-600 \\> \\* + \\*border-color: rgb(219 39 119); divide-pink-700 \\> \\* + \\*border-color: rgb(190 24 93); divide-pink-800 \\> \\* + \\*border-color: rgb(157 23 77); divide-pink-900 \\> \\* + \\*border-color: rgb(131 24 67); divide-pink-950 \\> \\* + \\*border-color: rgb(80 7 36); divide-rose-50 \\> \\* + \\*border-color: rgb(255 241 242); divide-rose-100 \\> \\* + \\*border-color: rgb(255 228 230); divide-rose-200 \\> \\* + \\*border-color: rgb(254 205 211); divide-rose-300 \\> \\* + \\*border-color: rgb(253 164 175); divide-rose-400 \\> \\* + \\*border-color: rgb(251 113 133); divide-rose-500 \\> \\* + \\*border-color: rgb(244 63 94); divide-rose-600 \\> \\* + \\*border-color: rgb(225 29 72); divide-rose-700 \\> \\* + \\*border-color: rgb(190 18 60); divide-rose-800 \\> \\* + \\*border-color: rgb(159 18 57); divide-rose-900 \\> \\* + \\*border-color: rgb(136 19 55); divide-rose-950 \\> \\* + \\*border-color: rgb(76 5 25);",
    "title": "Divide Color - Tailwind CSS",
    "description": "Utilities for controlling the border color between elements.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/screens",
    "markdown": "# Customizing Screens - Tailwind CSS\n\n## [​Configuring custom screens](#configuring-custom-screens)\n\nYou define your project’s breakpoints in the `theme.screens` section of your `tailwind.config.js` file. The keys become your [responsive modifiers](https://tailwindcss.com/docs/responsive-design) (like `md:text-center`), and the values are the `min-width` where that breakpoint should start.\n\nThe default breakpoints are inspired by common device resolutions:\n\nFeel free to have as few or as many screens as you want, naming them in whatever way you’d prefer for your project.\n\n### [​Overriding the defaults](#overriding-the-defaults)\n\nTo completely replace the default breakpoints, add your custom `screens` configuration directly under the `theme` key:\n\nAny default screens you haven’t overridden (such as `xl` using the above example) will be removed and will not be available as screen modifiers.\n\n### [​Overriding a single screen](#overriding-a-single-screen)\n\nTo override a single screen size (like `lg`), add your custom `screens` value under the `theme.extend` key:\n\nThis will replace the default `screens` value with the same name, without changing the order of your breakpoints.\n\n### [​Adding larger breakpoints](#adding-larger-breakpoints)\n\nThe easiest way to add an additional larger breakpoint is using the `extend` key:\n\nThis will add your custom screen to the end of the default breakpoint list.\n\n### [​Adding smaller breakpoints](#adding-smaller-breakpoints)\n\nIf you want to add an additional small breakpoint, you can’t use `extend` because the small breakpoint would be added to the end of the breakpoint list, and breakpoints need to be sorted from smallest to largest in order to work as expected with a min-width breakpoint system.\n\nInstead, override the entire `screens` key, re-specifying the default breakpoints:\n\nWe expose the default theme at `tailwindcss/defaultTheme` so you don’t have to maintain the list of default breakpoints yourself.\n\n### [​Using custom screen names](#using-custom-screen-names)\n\nYou can name your custom screens whatever you like, and are not limited to following the `sm`/`md`/`lg`/`xl`/`2xl` convention that Tailwind uses by default.\n\nYour responsive modifiers will reflect these custom screen names, so using them in your HTML would now look like this:\n\n```\n<div class=\"grid grid-cols-1 tablet:grid-cols-2 laptop:grid-cols-3 desktop:grid-cols-4\">\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Advanced configuration](#advanced-configuration)\n\nBy default, breakpoints are min-width to encourage a [mobile-first](https://tailwindcss.com/docs/responsive-design#working-mobile-first) workflow. If you need more control over your media queries, you can also define them using an object syntax that lets you specify explicit min-width and max-width values.\n\n### [​Max-width breakpoints](#max-width-breakpoints)\n\nIf you want to work with max-width breakpoints instead of min-width, you can specify your screens as objects with a `max` key:\n\nMake sure to list max-width breakpoints in descending order so that they override each other as expected.\n\n### [​Fixed-range breakpoints](#fixed-range-breakpoints)\n\nIf you want your breakpoints to specify both a `min-width` and a `max-width`, use the `min` and `max` keys together:\n\nUnlike regular min-width or max-width breakpoints, breakpoints defined this way will only take effect when the viewport size is explicitly within the defined range.\n\n```\n<div class=\"md:text-center\">\n  This text will be centered on medium screens, but revert back\n  to the default (left-aligned) at all other screen sizes.\n</div>\n```\n\n### [​Multi-range breakpoints](#multi-range-breakpoints)\n\nSometimes it can be useful to have a single breakpoint definition apply in multiple ranges.\n\nFor example, say you have a sidebar and want your breakpoints to be based on the content-area width rather than the entire viewport. You can simulate this by having one of your breakpoints fall back to a smaller breakpoint when the sidebar becomes visible and shrinks the content area:\n\n### [​Custom media queries](#custom-media-queries)\n\nIf you want full control over the generated media query, use the `raw` key:\n\nMedia queries defined using the `raw` key will be output as-is, and the `min` and `max` keys will be ignored.",
    "title": "Customizing Screens - Tailwind CSS",
    "description": "Customizing the default breakpoints for your project.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/customizing-colors",
    "markdown": "# Customizing Colors - Tailwind CSS\n\n## [​Default color palette](#default-color-palette)\n\nTailwind includes an expertly-crafted default color palette out-of-the-box that is a great starting point if you don’t have your own specific branding in mind.\n\nBut when you do need to customize your palette, you can configure your colors under the `colors` key in the `theme` section of your `tailwind.config.js` file:\n\nWhen it comes to building a custom color palette, you can either [configure your own custom colors](https://tailwindcss.com/docs/customizing-colors#using-custom-colors) from scratch if you know exactly what you want, or [curate your colors](https://tailwindcss.com/docs/customizing-colors#using-the-default-colors) from our extensive included color palette if you want a head start.\n\n* * *\n\n## [​Using custom colors](#using-custom-colors)\n\nIf you’d like to completely replace the default color palette with your own custom colors, add your colors directly under the `theme.colors` section of your configuration file:\n\nBy default, these colors will be made available everywhere in the framework where you use colors, like the [text color](https://tailwindcss.com/docs/text-color) utilities, [border color](https://tailwindcss.com/docs/border-color) utilities, [background color](https://tailwindcss.com/docs/background-color) utilities, and more.\n\n```\n<div class=\"bg-midnight text-tahiti\">\n  <!-- ... -->\n</div>\n```\n\nDon’t forget to include values like `transparent` and `currentColor` if you want to use them in your project.\n\n### [​Color object syntax](#color-object-syntax)\n\nWhen your palette includes multiple shades of the same color, it can be convenient to group them together using our nested color object syntax:\n\nThe nested keys will be combined with the parent key to form class names like `bg-tahiti-400`.\n\nLike many other places in Tailwind, the special `DEFAULT` key can be used when you want to define a value with no suffix:\n\nThis will create classes like `bg-tahiti`, `bg-tahiti-light`, and `bg-tahiti-dark`.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need a one-off custom color in your project, consider using Tailwind’s arbitrary value notation to generate a class for that color on-demand instead of adding it to your theme:\n\n```\n<button class=\"bg-[#1da1f2] text-white ...\">\n  <svg><!-- ... --></svg>\n  Share on Twitter\n</button>\n```\n\nLearn more in the [using arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.\n\n### [​Generating colors](#generating-colors)\n\nIf you’re wondering how we automatically generated the 50–950 shades of each color, bad news — color is complicated and to get the absolute best results we picked all of Tailwind’s default colors by hand, meticulously balancing them by eye and testing them in real designs to make sure we were happy with them.\n\nIf you are creating your own custom color palette and don’t feel confident doing it by hand, [UI Colors](https://uicolors.app/) is a great tool that can give you a good starting point based on any custom color.\n\nTwo other useful tools we recommend for building your own palettes are [Palettte](https://palettte.app/) and [ColorBox](https://colorbox.io/) — they won’t do the work for you but their interfaces are well-designed for doing this sort of work.\n\n* * *\n\n## [​Using the default colors](#using-the-default-colors)\n\nIf you don’t have a set of completely custom colors in mind for your project, you can curate your colors from our default palette by importing `tailwindcss/colors` in your configuration file and choosing the colors you want to use:\n\nThis can be helpful if you want to deliberately limit your color palette and reduce the number of class names suggested by [IntelliSense](https://tailwindcss.com/docs/editor-setup#intelli-sense-for-vs-code).\n\n### [​Aliasing color names](#aliasing-color-names)\n\nYou can also alias the colors in our default palette to make the names simpler and easier to remember:\n\nThis is especially common for grays, as you usually only use one set in any given project and it’s nice to be able to type `bg-gray-300` instead of `bg-neutral-300` for example.\n\n### [​Adding additional colors](#adding-additional-colors)\n\nIf you’d like to add a brand new color to the default palette, add it in the `theme.extend.colors` section of your configuration file:\n\nYou can also use `theme.extend.colors` to add additional shades to an existing color if it’s needed for your design:\n\n### [​Disabling a default color](#disabling-a-default-color)\n\nIf you’d like to disable any of the default colors, the best approach is to override the default color palette and just include the colors you _do_ want:\n\n* * *\n\n## [​Naming your colors](#naming-your-colors)\n\nTailwind uses literal color names _(like red, green, etc.)_ and a numeric scale _(where 50 is light and 900 is dark)_ by default. We think this is the best choice for most projects, and have found it easier to maintain than using abstract names like `primary` or `danger`.\n\nThat said, you can name your colors in Tailwind whatever you like, and if you’re working on a project that needs to support multiple themes for example, it might make sense to use more abstract names:\n\nYou can configure those colors explicitly like we have above, or you can pull in colors from our default color palette and alias them:\n\nAgain, we recommend sticking to the default naming convention for most projects, and only using abstract names if you have a really good reason.\n\n* * *\n\n## [​Using CSS variables](#using-css-variables)\n\nIf you’d like to define your colors as CSS variables, you’ll need to define those variables as just the color _channels_ if you want them to work with the [opacity modifier syntax](https://tailwindcss.com/docs/text-color#changing-the-opacity):\n\nDefine your CSS variables as channels with no color space function\n\nDon’t include the color space function or opacity modifiers won’t work\n\nThen define your colors in your configuration file, being sure to include the color space you’re using, and the special `<alpha-value>` placeholder that Tailwind will use to inject the alpha value when using an opacity modifier:\n\nWhen defining your colors this way, make sure that the format of your CSS variables is correct for the color function you are using. You’ll want to use spaces if using the modern [space-separated syntax](https://css-tricks.com/the-expanding-gamut-of-color-on-the-web/#aa-a-tale-of-new-syntaxes), and commas if using legacy functions like `rgba` or `hsla`:",
    "title": "Customizing Colors - Tailwind CSS",
    "description": "Customizing the default color palette for your project.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/width",
    "markdown": "# Width - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Fixed widths](#fixed-widths)\n\nUse utilities like `w-px`, `w-1`, and `w-64` to set an element to a fixed width.\n\n```\n<div class=\"w-96 ...\">w-96</div>\n<div class=\"w-80 ...\">w-80</div>\n<div class=\"w-64 ...\">w-64</div>\n<div class=\"w-48 ...\">w-48</div>\n<div class=\"w-40 ...\">w-40</div>\n<div class=\"w-32 ...\">w-32</div>\n<div class=\"w-24 ...\">w-24</div>\n```\n\n### [​Percentage widths](#percentage-widths)\n\nUse utilities like `w-full`, `w-1/2`, and `w-2/5` to set an element to a percentage based width.\n\n```\n<div class=\"flex ...\">\n  <div class=\"w-1/2 ... \">w-1/2</div>\n  <div class=\"w-1/2 ... \">w-1/2</div>\n</div>\n<div class=\"flex ...\">\n  <div class=\"w-2/5 ...\">w-2/5</div>\n  <div class=\"w-3/5 ...\">w-3/5</div>\n</div>\n<div class=\"flex ...\">\n  <div class=\"w-1/3 ...\">w-1/3</div>\n  <div class=\"w-2/3 ...\">w-2/3</div>\n</div>\n<div class=\"flex ...\">\n  <div class=\"w-1/4 ...\">w-1/4</div>\n  <div class=\"w-3/4 ...\">w-3/4</div>\n</div>\n<div class=\"flex ...\">\n  <div class=\"w-1/5 ...\">w-1/5</div>\n  <div class=\"w-4/5 ...\">w-4/5</div>\n</div>\n<div class=\"flex ...\">\n  <div class=\"w-1/6 ...\">w-1/6</div>\n  <div class=\"w-5/6 ...\">w-5/6</div>\n</div>\n<div class=\"w-full ...\">w-full</div>\n```\n\n### [​Viewport width](#viewport-width)\n\nUse `w-screen` to make an element span the entire width of the viewport.\n\n```\n<div class=\"w-screen\">\n  <!-- ... -->\n</div>\n```\n\n### [​Resetting the width](#resetting-the-width)\n\nThe `w-auto` utility can be useful if you need to remove an element’s assigned width under a specific condition, like at a particular breakpoint:\n\n```\n<div class=\"w-full md:w-auto\">\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:w-full` to only apply the `w-full` utility on hover.\n\n```\n<div class=\"w-1/2 hover:w-full\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:w-full` to apply the `w-full` utility at only medium screen sizes and above.\n\n```\n<div class=\"w-1/2 md:w-full\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind’s width scale is a combination of the [default spacing scale](https://tailwindcss.com/docs/customizing-spacing#default-spacing-scale) as well as some additional values specific to widths.\n\nYou can customize your spacing scale by editing `theme.spacing` or `theme.extend.spacing` in your `tailwind.config.js` file.\n\nTo customize width separately, use the `theme.width` section of your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `width` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"w-[32rem]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Width - Tailwind CSS",
    "description": "Utilities for setting the width of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/text-transform",
    "markdown": "# Text Transform - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Transforming text](#transforming-text)\n\nThe `uppercase` and `lowercase` will uppercase and lowercase text respectively, whereas `capitalize` utility will convert text to title-case. The `normal-case` utility can be used to preserve the original casing — typically to reset capitalization at different breakpoints.\n\n```\n<p class=\"normal-case ...\">The quick brown fox ...</p>\n<p class=\"uppercase ...\">The quick brown fox ...</p>\n<p class=\"lowercase ...\">The quick brown fox ...</p>\n<p class=\"capitalize ...\">The quick brown fox ...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:uppercase` to only apply the `uppercase` utility on hover.\n\n```\n<p class=\"capitalize hover:uppercase\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:uppercase` to apply the `uppercase` utility at only medium screen sizes and above.\n\n```\n<p class=\"capitalize md:uppercase\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Text Transform - Tailwind CSS",
    "description": "Utilities for controlling the transformation of text.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/divide-style",
    "markdown": "# Divide Style - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Set the divide style](#set-the-divide-style)\n\nUse the `divide-*` utilities to control the border style between elements.\n\n```\n<div class=\"divide-y divide-dashed\">\n  <div>01</div>\n  <div>02</div>\n  <div>03</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:divide-solid` to only apply the `divide-solid` utility on hover.\n\n```\n<div class=\"divide-y divide-dashed hover:divide-solid\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:divide-solid` to apply the `divide-solid` utility at only medium screen sizes and above.\n\n```\n<div class=\"divide-y divide-dashed md:divide-solid\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Divide Style - Tailwind CSS",
    "description": "Utilities for controlling the border style between elements.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/text-overflow",
    "markdown": "# Text Overflow - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Truncate](#truncate)\n\nUse `truncate` to prevent text from wrapping and truncate overflowing text with an ellipsis (`…`) if needed.\n\n```\n<p class=\"truncate ...\">...</p>\n```\n\n### [​Ellipsis](#ellipsis)\n\nUse `text-ellipsis` to truncate overflowing text with an ellipsis (`…`) if needed.\n\n```\n<p class=\"text-ellipsis overflow-hidden ...\">...</p>\n```\n\n### [​Clip](#clip)\n\nUse `text-clip` to truncate the text at the limit of the content area.\n\n```\n<p class=\"text-clip overflow-hidden ...\">...</p>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:text-clip` to only apply the `text-clip` utility on hover.\n\n```\n<p class=\"truncate hover:text-clip\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:text-clip` to apply the `text-clip` utility at only medium screen sizes and above.\n\n```\n<p class=\"truncate md:text-clip\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Text Overflow - Tailwind CSS",
    "description": "Utilities for controlling text overflow in an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/customizing-spacing",
    "markdown": "# Customizing Spacing - Tailwind CSS\n\nUse the `spacing` key in the `theme` section of your `tailwind.config.js` file to customize Tailwind’s [default spacing/sizing scale](https://tailwindcss.com/docs/customizing-spacing#default-spacing-scale).\n\nBy default the spacing scale is inherited by the `padding`, `margin`, `width`, `minWidth`, `maxWidth`, `height`, `minHeight`, `maxHeight`, `gap`, `inset`, `space`, `translate`, `scrollMargin`, and `scrollPadding` core plugins.\n\n* * *\n\n## [​Extending the default spacing scale](#extending-the-default-spacing-scale)\n\nAs described in the [theme documentation](https://tailwindcss.com/docs/theme#extending-the-default-theme), if you’d like to extend the default spacing scale, you can do so using the `theme.extend.spacing` section of your `tailwind.config.js` file:\n\nThis will generate classes like `p-13`, `m-15`, and `h-128` in addition to all of Tailwind’s default spacing/sizing utilities.\n\n* * *\n\n## [​Overriding the default spacing scale](#overriding-the-default-spacing-scale)\n\nAs described in the [theme documentation](https://tailwindcss.com/docs/theme#overriding-the-default-theme), if you’d like to override the default spacing scale, you can do so using the `theme.spacing` section of your `tailwind.config.js` file:\n\nThis will disable Tailwind’s default spacing scale and generate classes like `p-sm`, `m-md`, `w-lg`, and `h-xl` instead.\n\n* * *\n\n## [​Default spacing scale](#default-spacing-scale)\n\nBy default, Tailwind includes a generous and comprehensive numeric spacing scale. The values are proportional, so `16` is twice as much spacing as `8` for example. One spacing unit is equal to `0.25rem`, which translates to `4px` by default in common browsers.\n\n| Name | Size | Pixels | Preview |\n| --- | --- | --- | --- |\n| 0   | 0px | 0px |     |\n| px  | 1px | 1px |     |\n| 0.5 | 0.125rem | 2px |     |\n| 1   | 0.25rem | 4px |     |\n| 1.5 | 0.375rem | 6px |     |\n| 2   | 0.5rem | 8px |     |\n| 2.5 | 0.625rem | 10px |     |\n| 3   | 0.75rem | 12px |     |\n| 3.5 | 0.875rem | 14px |     |\n| 4   | 1rem | 16px |     |\n| 5   | 1.25rem | 20px |     |\n| 6   | 1.5rem | 24px |     |\n| 7   | 1.75rem | 28px |     |\n| 8   | 2rem | 32px |     |\n| 9   | 2.25rem | 36px |     |\n| 10  | 2.5rem | 40px |     |\n| 11  | 2.75rem | 44px |     |\n| 12  | 3rem | 48px |     |\n| 14  | 3.5rem | 56px |     |\n| 16  | 4rem | 64px |     |\n| 20  | 5rem | 80px |     |\n| 24  | 6rem | 96px |     |\n| 28  | 7rem | 112px |     |\n| 32  | 8rem | 128px |     |\n| 36  | 9rem | 144px |     |\n| 40  | 10rem | 160px |     |\n| 44  | 11rem | 176px |     |\n| 48  | 12rem | 192px |     |\n| 52  | 13rem | 208px |     |\n| 56  | 14rem | 224px |     |\n| 60  | 15rem | 240px |     |\n| 64  | 16rem | 256px |     |\n| 72  | 18rem | 288px |     |\n| 80  | 20rem | 320px |     |\n| 96  | 24rem | 384px |     |",
    "title": "Customizing Spacing - Tailwind CSS",
    "description": "Customizing the default spacing and sizing scale for your project.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/min-width",
    "markdown": "# Min-Width - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the minimum width](#setting-the-minimum-width)\n\nSet the minimum width of an element using `min-w-*` utilities.\n\n```\n<div class=\"w-96 ...\">\n  <div class=\"min-w-80 ...\">min-w-80</div>\n  <div class=\"min-w-64 ...\">min-w-64</div>\n  <div class=\"min-w-48 ...\">min-w-48</div>\n  <div class=\"min-w-40 ...\">min-w-40</div>\n  <div class=\"min-w-32 ...\">min-w-32</div>\n  <div class=\"min-w-24 ...\">min-w-24</div>\n  <div class=\"min-w-full ...\">min-w-full</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:min-w-0` to only apply the `min-w-0` utility on hover.\n\n```\n<div class=\"w-24 min-w-full hover:min-w-0\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:min-w-0` to apply the `min-w-0` utility at only medium screen sizes and above.\n\n```\n<div class=\"w-24 min-w-full md:min-w-0\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind’s minimum width scale is a combination of the [default spacing scale](https://tailwindcss.com/docs/customizing-spacing#default-spacing-scale) as well as some additional values specific to widths.\n\nYou can customize your spacing scale by editing `theme.spacing` or `theme.extend.spacing` in your `tailwind.config.js` file.\n\nTo customize `min-width` separately, use the `theme.minWidth` section of your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `min-width` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"min-w-[220px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Min-Width - Tailwind CSS",
    "description": "Utilities for setting the minimum width of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/outline-width",
    "markdown": "# Outline Width - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the outline width](#setting-the-outline-width)\n\nUse the `outline-*` utilities to change the width of an element’s outline.\n\n```\n<button class=\"outline outline-offset-2 outline-1 ...\">Button A</button>\n<button class=\"outline outline-offset-2 outline-2 ...\">Button B</button>\n<button class=\"outline outline-offset-2 outline-4 ...\">Button C</button>\n```\n\nThe default outline width is `3px`.\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:outline-2` to only apply the `outline-2` utility on hover.\n\n```\n<div class=\"outline hover:outline-2\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:outline-2` to apply the `outline-2` utility at only medium screen sizes and above.\n\n```\n<div class=\"outline md:outline-2\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nYou can customize the `outline-*` utilities by editing `theme.outlineWidth` or `theme.extend.outlineWidth` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `outline-width` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"outline-[5px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Outline Width - Tailwind CSS",
    "description": "Utilities for controlling the width of an element's outline.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/outline-color",
    "markdown": "# Outline Color - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the outline color](#setting-the-outline-color)\n\nUse the `outline-*` utilities to change the color of an element’s outline.\n\n```\n<button class=\"outline outline-offset-2 outline-blue-500 ...\">Button A</button>\n<button class=\"outline outline-offset-2 outline-cyan-500 ...\">Button B</button>\n<button class=\"outline outline-offset-2 outline-pink-500 ...\">Button C</button>\n```\n\n### [​Changing the opacity](#changing-the-opacity)\n\nUse the color opacity modifier to control the opacity of an element’s outline color.\n\n```\n<button class=\"outline-2 outline-blue-500/50 ...\">Save Changes</button>\n```\n\nYou can use any value defined in your [opacity scale](https://tailwindcss.com/docs/opacity), or use arbitrary values if you need to deviate from your design tokens.\n\n```\n<button class=\"outline-4 outline-pink-400/[.55] ...\"></button>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:outline-blue-400` to only apply the `outline-blue-400` utility on hover.\n\n```\n<button class=\"outline hover:outline-blue-400\">\n  <!-- ... -->\n</button>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:outline-blue-400` to apply the `outline-blue-400` utility at only medium screen sizes and above.\n\n```\n<button class=\"outline md:outline-blue-400\">\n  <!-- ... -->\n</button>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind makes the entire [default color palette](https://tailwindcss.com/docs/customizing-colors#default-color-palette) available as outline colors. You can [customize your color palette](https://tailwindcss.com/docs/colors#customizing) by editing `theme.colors` or `theme.extend.colors` in your `tailwind.config.js` file.\n\nAlternatively, you can customize just your outline colors by editing `theme.outlineColor` or `theme.extend.outlineColor` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `outline-color` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<button class=\"outline-[#243c5a]\">\n  <!-- ... -->\n</button>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Outline Color - Tailwind CSS",
    "description": "Utilities for controlling the color of an element's outline.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/max-width",
    "markdown": "# Max-Width - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the maximum width](#setting-the-maximum-width)\n\nSet the maximum width of an element using the `max-w-*` utilities.\n\n```\n<div>\n  <div class=\"w-full max-w-96 ...\">max-w-96</div>\n  <div class=\"w-full max-w-80 ...\">max-w-80</div>\n  <div class=\"w-full max-w-64 ...\">max-w-64</div>\n  <div class=\"w-full max-w-48 ...\">max-w-48</div>\n  <div class=\"w-full max-w-40 ...\">max-w-40</div>\n  <div class=\"w-full max-w-32 ...\">max-w-32</div>\n  <div class=\"w-full max-w-24 ...\">max-w-24</div>\n</div>\n```\n\n### [​Sizing large elements](#sizing-large-elements)\n\nAbove `24rem`, the `max-w-*` utilities use a named scale instead of a numeric scale to make the values easier to guess.\n\n```\n<div class=\"max-w-md ...\">\n  <!-- ... -->\n</div>\n```\n\n### [​Reading width](#reading-width)\n\nThe `max-w-prose` utility gives an element a max-width optimized for readability and adapts based on the font size.\n\n```\n<div class=\"text-sm max-w-prose ...\">\n  <p>Oh yeah. It's the best part. It's crunchy, it's explosive, it's where the muffin breaks free of the pan and sort of does it's own thing. I'll tell you. That's a million dollar idea right there. Just sell the tops.</p>\n</div>\n\n<div class=\"text-base max-w-prose ...\">\n  <p>Oh yeah. It's the best part. It's crunchy, it's explosive, it's where the muffin breaks free of the pan and sort of does it's own thing. I'll tell you. That's a million dollar idea right there. Just sell the tops.</p>\n</div>\n\n<div class=\"text-xl max-w-prose ...\">\n  <p>Oh yeah. It's the best part. It's crunchy, it's explosive, it's where the muffin breaks free of the pan and sort of does it's own thing. I'll tell you. That's a million dollar idea right there. Just sell the tops.</p>\n</div>\n```\n\n### [​Constraining to your breakpoints](#constraining-to-your-breakpoints)\n\nThe `max-w-screen-*` classes can be used to give an element a max-width matching a specific breakpoint. These values are automatically derived from the [`theme.screens` section](https://tailwindcss.com/docs/theme#screens) of your `tailwind.config.js` file.\n\n```\n<div class=\"max-w-screen-2xl\">\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:max-w-lg` to only apply the `max-w-lg` utility on hover.\n\n```\n<div class=\"max-w-sm hover:max-w-lg\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:max-w-lg` to apply the `max-w-lg` utility at only medium screen sizes and above.\n\n```\n<div class=\"max-w-sm md:max-w-lg\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind’s maximum width scale is a combination of the [default spacing scale](https://tailwindcss.com/docs/customizing-spacing#default-spacing-scale) as well as an additional set of named sizes for [large elements](https://tailwindcss.com/docs/max-width##sizing-large-elements) exclusive to the `max-w-*` utilities.\n\nYou can customize values in the global spacing scale by editing `theme.spacing` or `theme.extend.spacing` in your `tailwind.config.js` file.\n\nTo customize values for just the `max-w-*` utilities, use the `theme.maxWidth` section of your `tailwind.config.js` file.\n\nNote that values defined in `theme.maxWidth` take precedence over values defined in `theme.spacing`, so adding a custom value to `theme.spacing` that matches one of the default named sizes (like `lg` or `xl`) will not affect the corresponding `max-w-*` utility.\n\nDon’t override named sizes under `theme.spacing`\n\nUse `theme.maxWidth` to override named sizes\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `max-width` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"max-w-[220px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Max-Width - Tailwind CSS",
    "description": "Utilities for setting the maximum width of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/text-wrap",
    "markdown": "# Text Wrap - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Wrap](#wrap)\n\nUse `text-wrap` to wrap overflowing text onto multiple lines at logical points in the text.\n\n```\n<article class=\"text-wrap ...\">\n  <h3>Beloved Manhattan soup stand closes</h3>\n  <p>New Yorkers are facing the winter chill...</p>\n</article>\n```\n\n### [​No Wrap](#no-wrap)\n\nUse `text-nowrap` to prevent text from wrapping, allowing it to overflow if necessary.\n\n```\n<article class=\"text-nowrap ...\">\n  <h3>Beloved Manhattan soup stand closes</h3>\n  <p>New Yorkers are facing the winter chill...</p>\n</article>\n```\n\n### [​Balance](#balance)\n\nUse `text-balance` to distribute the text evenly across each line.\n\n```\n<article>\n  <h3 class=\"text-balance ...\">Beloved Manhattan soup stand closes</h3>\n  <p>New Yorkers are facing the winter chill...</p>\n</article>\n```\n\nFor performance reasons browsers limit text balancing to blocks that are ~6 lines or less, making it best suited for headings.\n\n### [​Pretty](#pretty)\n\nUse `text-pretty` to prevent orphans (a single word on its own line) at the end of a text block.\n\n```\n<article class=\"text-pretty ...\">\n  <h3>Beloved Manhattan soup stand closes</h3>\n  <p>New Yorkers are facing the winter chill...</p>\n</article>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:text-balance` to only apply the `text-balance` utility on hover.\n\n```\n<h1 class=\"text-wrap hover:text-balance\">\n  <!-- ... -->\n</h1>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:text-balance` to apply the `text-balance` utility at only medium screen sizes and above.\n\n```\n<h1 class=\"text-wrap md:text-balance\">\n  <!-- ... -->\n</h1>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Text Wrap - Tailwind CSS",
    "description": "Utilities for controlling how text wraps within an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/text-indent",
    "markdown": "# Text Indent - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Adding a text indent](#adding-a-text-indent)\n\nUse the `indent-*` utilities to set the amount of empty space (indentation) that’s shown before text in a block.\n\n```\n<p class=\"indent-8\">\n  So I started to walk into the water. I won't lie to you boys, I was\n  terrified. But I pressed on, and as I made my way past the breakers\n  a strange calm came over me. I don't know if it was divine intervention\n  or the kinship of all living things but I tell you Jerry at that moment,\n  I <em>was</em> a marine biologist.\n</p>\n```\n\n### [​Using negative values](#using-negative-values)\n\nTo use a negative text indent value, prefix the class name with a dash to convert it to a negative value.\n\n```\n<div class=\"-indent-8\">\n  So I started to walk into the water. I won't lie to...\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:indent-8` to only apply the `indent-8` utility on hover.\n\n```\n<div class=\"indent-4 hover:indent-8\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:indent-8` to apply the `indent-8` utility at only medium screen sizes and above.\n\n```\n<div class=\"indent-4 md:indent-8\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nThe default text indent scale is based on the [default spacing scale](https://tailwindcss.com/docs/customizing-spacing#default-spacing-scale). You can customize your spacing scale by editing `theme.spacing` or `theme.extend.spacing` in your `tailwind.config.js` file.\n\nAlternatively, you can customize just the text indent scale by editing `theme.textIndent` or `theme.extend.textIndent` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `text-indent` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"indent-[50%]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Text Indent - Tailwind CSS",
    "description": "Utilities for controlling the amount of empty space shown before text in a block.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/plugins",
    "markdown": "# Plugins - Tailwind CSS\n\n## [​Overview](#overview)\n\nPlugins let you register new styles for Tailwind to inject into the user’s stylesheet using JavaScript instead of CSS.\n\nTo get started with your first plugin, import Tailwind’s `plugin` function from `tailwindcss/plugin`. Then inside your `plugins` array, call the imported `plugin` function with an anonymous function as the first argument.\n\nPlugin functions receive a single object argument that can be [destructured](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) into several helper functions:\n\n*   `addUtilities()`, for registering new static utility styles\n*   `matchUtilities()`, for registering new dynamic utility styles\n*   `addComponents()`, for registering new static component styles\n*   `matchComponents()`, for registering new dynamic component styles\n*   `addBase()`, for registering new base styles\n*   `addVariant()`, for registering custom static variants\n*   `matchVariant()`, for registering custom dynamic variants\n*   `theme()`, for looking up values in the user’s theme configuration\n*   `config()`, for looking up values in the user’s Tailwind configuration\n*   `corePlugins()`, for checking if a core plugin is enabled\n*   `e()`, for manually escaping strings meant to be used in class names\n\n* * *\n\n## [​Official plugins](#official-plugins)\n\nWe’ve developed a handful of official plugins for popular features that for one reason or another don’t belong in core yet.\n\nPlugins can be added to your project by installing them via npm, then adding them to your `tailwind.config.js` file:\n\n### [​Typography](#typography)\n\nThe `@tailwindcss/typography` plugin adds a set of `prose` classes that can be used to quickly add sensible typographic styles to content blocks that come from sources like markdown or a CMS database.\n\n```\n<article class=\"prose lg:prose-xl\">\n  <h1>Garlic bread with cheese: What the science tells us</h1>\n  <p>\n    For years parents have espoused the health benefits of eating garlic bread with cheese to their\n    children, with the food earning such an iconic status in our culture that kids will often dress\n    up as warm, cheesy loaf for Halloween.\n  </p>\n  <p>\n    But a recent study shows that the celebrated appetizer may be linked to a series of rabies cases\n    springing up around the country.\n  </p>\n  <!-- ... -->\n</article>\n```\n\n[Learn more about the typography plugin →](https://tailwindcss.com/docs/typography-plugin)\n\n### [​Forms](#forms)\n\nThe `@tailwindcss/forms` plugin adds an opinionated form reset layer that makes it easier to style form elements with utility classes.\n\n```\n<!-- You can actually customize padding on a select element: -->\n<select class=\"px-4 py-3 rounded-full\">\n  <!-- ... -->\n</select>\n\n<!-- Or change a checkbox color using text color utilities: -->\n<input type=\"checkbox\" class=\"rounded text-pink-500\" />\n```\n\n[Learn more about the forms plugin →](https://github.com/tailwindlabs/tailwindcss-forms)\n\n### [​Aspect ratio](#aspect-ratio)\n\nThe `@tailwindcss/aspect-ratio` plugin is an alternative to native `aspect-ratio` support that works in older browsers, and adds `aspect-w-*` and `aspect-h-*` classes that can be combined to give an element a fixed aspect ratio.\n\n```\n<div class=\"aspect-w-16 aspect-h-9\">\n  <iframe src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n```\n\n[Learn more about the aspect ratio plugin →](https://github.com/tailwindlabs/tailwindcss-aspect-ratio)\n\n### [​Container queries](#container-queries)\n\nThe `@tailwindcss/container-queries` plugin adds new `@{size}` variants like `@sm` and `@md` that let you style an element based on the dimensions of a parent marked with `@container` instead of the viewport.\n\n```\n<div class=\"@container\">\n  <div class=\"@lg:text-sky-400\">\n    <!-- ... -->\n  </div>\n</div>\n```\n\n[Learn more about the container queries plugin →](https://github.com/tailwindlabs/tailwindcss-container-queries)\n\n* * *\n\n## [​Adding utilities](#adding-utilities)\n\nThe `addUtilities` and `matchUtilities` functions allow you to register new styles in Tailwind’s `utilities` layer.\n\nLike with the utilities Tailwind includes by default, utilities added by a plugin will only be included in the generated CSS if they are actually being used in the project.\n\n### [​Static utilities](#static-utilities)\n\nUse the `addUtilities` function to register simple static utilities that don’t support user-provided values:\n\nLearn more about how to represent your styles in JavaScript in the [CSS-in-JS syntax](https://tailwindcss.com/docs/plugins#css-in-js-syntax) reference.\n\n### [​Dynamic utilities](#dynamic-utilities)\n\nUse the `matchUtilities` function to register utilities that map to values defined in the user’s `theme` configuration:\n\nUtilities defined this way also support [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values), which means you can use values not present in the theme using square bracket notation:\n\n```\n<div class=\"tab-[13]\">\n  <!-- ... -->\n</div>\n```\n\n### [​Prefix and important](#prefix-and-important)\n\nBy default, plugin utilities automatically respect the user’s [`prefix`](https://tailwindcss.com/docs/configuration#prefix) and [`important`](https://tailwindcss.com/docs/configuration#important) preferences.\n\nThat means that given this Tailwind configuration:\n\n…the example plugin above would generate the following CSS:\n\n```\n.tw-content-auto {\n  content-visibility: auto !important;\n}\n.tw-content-hidden {\n  content-visibility: hidden !important;\n}\n.tw-content-visible {\n  content-visibility: visible !important;\n}\n```\n\n### [​Using with modifiers](#using-with-modifiers)\n\nAny custom utilities added using `addUtilities` can automatically be used with modifiers:\n\n```\n<div class=\"content-auto lg:content-visible\">\n  <!-- ... -->\n</div>\n```\n\nLearn more in the [Hover, Focus, and Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Providing default values](#providing-default-values)\n\nUtility plugins can provide default values by including a configuration object as the second argument to the `plugin` function:\n\nThese values behave just like the values in the default configuration, and can be overridden or extended by the end user.\n\n* * *\n\n## [​Adding components](#adding-components)\n\nThe `addComponents` function allows you to register new styles in Tailwind’s `components` layer.\n\nUse it to add more opinionated, complex classes like buttons, form controls, alerts, etc; the sort of pre-built components you often see in other frameworks that you might need to override with utility classes.\n\nTo add new component styles from a plugin, call `addComponents`, passing in your styles using [CSS-in-JS syntax](https://tailwindcss.com/docs/plugins#css-in-js-syntax):\n\nLike with other component classes in Tailwind, component classes added by a plugin will only be included in the generated CSS if they are actually being used in the project.\n\n### [​Prefix and important](#prefix-and-important-1)\n\nBy default, component classes automatically respect the user’s `prefix` preference, but _they are not affected_ by the user’s `important` preference.\n\nThat means that given this Tailwind configuration:\n\n…the example plugin above would generate the following CSS:\n\n```\n.tw-btn {\n  padding: .5rem 1rem;\n  border-radius: .25rem;\n  font-weight: 600;\n}\n.tw-btn-blue {\n  background-color: #3490dc;\n  color: #fff;\n}\n.tw-btn-blue:hover {\n  background-color: #2779bd;\n}\n.tw-btn-red {\n  background-color: #e3342f;\n  color: #fff;\n}\n.tw-btn-red:hover {\n  background-color: #cc1f1a;\n}\n```\n\nAlthough there’s rarely a good reason to make component declarations important, if you really need to do it you can always add `!important` manually:\n\nAll classes in a selector will be prefixed by default, so if you add a more complex style like:\n\n…the following CSS would be generated:\n\n```\n.tw-navbar-inverse a.tw-nav-link {\n    color: #fff;\n}\n```\n\n### [​Using with modifiers](#using-with-modifiers-1)\n\nAny component classes added using `addComponents` can automatically be used with modifiers:\n\n```\n<div class=\"btn md:btn-lg\">\n  <!-- ... -->\n</div>\n```\n\nLearn more in the [Hover, Focus, and Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n* * *\n\n## [​Adding base styles](#adding-base-styles)\n\nThe `addBase` function allows you to register new styles in Tailwind’s `base` layer. Use it to add things like base typography styles, opinionated global resets, or `@font-face` rules.\n\nTo add new base styles from a plugin, call `addBase`, passing in your styles using [CSS-in-JS syntax](https://tailwindcss.com/docs/plugins#css-in-js-syntax):\n\nSince base styles are meant to target bare selectors like `div` or `h1`, they do not respect the user’s `prefix` or `important` configuration.\n\n* * *\n\n## [​Adding variants](#adding-variants)\n\nThe `addVariant` and `matchVariant` functions allow you to register your own custom [modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states) that can be used just like built-in variants like `hover`, `focus`, or `supports`.\n\n### [​Static variants](#static-variants)\n\nUse the `addVariant` function for simple custom variants, passing in the name of your custom variant, and a format string that represents how the selector should be modified.\n\nThe first argument is the modifier name that users will use in their HTML, so the above example would make it possible to write classes like these:\n\n```\n<form class=\"flex inverted-colors:outline ...\">\n  <input class=\"optional:border-gray-300 ...\" />\n  <button class=\"bg-blue-500 hocus:bg-blue-600\">...</button>\n</form>\n```\n\n### [​Dynamic variants](#dynamic-variants)\n\nUse the `matchVariant` function to register new parameterized variants like the built-in `supports-*`, `data-*`, and `aria-*` variants:\n\nVariants defined with `matchVariant` also support arbitrary values using square bracket notation:\n\n```\n<div class=\"nth-[3n+1]:bg-blue-500 ...\">\n  <!-- ... -->\n</div>\n```\n\nUse the `sort` option to control the source order of the generated CSS if needed to avoid precedence issues with other values that come from the same variant:\n\n```\nmatchVariant(\"min\", (value) => `@media (min-width: ${value})`, {\n  sort(a, z) {\n    return parseInt(a.value) - parseInt(z.value);\n  },\n});\n```\n\n### [​Parent and sibling states](#parent-and-sibling-states)\n\nYour custom modifiers won’t automatically work with Tailwind’s [parent](https://tailwindcss.com/docs/hover-focus-and-other-states#styling-based-on-parent-state) and [sibling](https://tailwindcss.com/docs/hover-focus-and-other-states#styling-based-on-sibling-state) state modifiers.\n\nTo support the `group-*` and `peer-*` versions of your own custom modifiers, register them as separate variants using the special `:merge` directive to ensure the `.group` and `.peer` classes only appear once in the final selector.\n\n* * *\n\n## [​Extending the configuration](#extending-the-configuration)\n\nPlugins can merge their own set of configuration values into the user’s `tailwind.config.js` configuration by providing an object as the second argument to the `plugin` function:\n\nThis can be useful for things like providing default `theme` values for the classes your plugin generates.\n\n* * *\n\n## [​Exposing options](#exposing-options)\n\nSometimes it makes sense for a plugin to be configurable in a way that doesn’t really belong under `theme`, like perhaps you want users to be able to customize the class name your plugin uses.\n\nFor cases like this, you can use `plugin.withOptions` to define a plugin that can be invoked with a configuration object. This API is similar to the regular `plugin` API, except each argument should be a function that receives the user’s `options` and returns the value that you would have normally passed in using the regular API:\n\nThe user would invoke your plugin passing along their options when registering it in their `plugins` configuration:\n\nThe user can also register plugins created this way normally without invoking them if they don’t need to pass in any custom options:\n\n* * *\n\n## [​CSS-in-JS syntax](#css-in-js-syntax)\n\nTailwind’s plugin system expects CSS rules written as JavaScript objects, using the same sort of syntax you might recognize from CSS-in-JS libraries like [Emotion](https://emotion.sh/docs/object-styles), powered by [postcss-js](https://github.com/postcss/postcss-js) under-the-hood.\n\nConsider this simple CSS rule:\n\n```\n.card {\n  background-color: #fff;\n  border-radius: .25rem;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n}\n```\n\nTranslating this to a CSS-in-JS object would look like this:\n\n```\naddComponents({\n  '.card': {\n    'background-color': '#fff',\n    'border-radius': '.25rem',\n    'box-shadow': '0 2px 4px rgba(0,0,0,0.2)',\n  }\n})\n```\n\nFor convenience, property names can also be written in camelCase and will be automatically translated to dash-case:\n\n```\naddComponents({\n  '.card': {\n    backgroundColor: '#fff',\n    borderRadius: '.25rem',\n    boxShadow: '0 2px 4px rgba(0,0,0,0.2)',\n  }\n})\n```\n\nNesting is also supported (powered by [postcss-nested](https://github.com/postcss/postcss-nested)), using the same syntax you might be familiar with from Sass or Less:\n\n```\naddComponents({\n  '.card': {\n    backgroundColor: '#fff',\n    borderRadius: '.25rem',\n    boxShadow: '0 2px 4px rgba(0,0,0,0.2)',\n    '&:hover': {\n      boxShadow: '0 10px 15px rgba(0,0,0,0.2)',\n    },\n    '@media (min-width: 500px)': {\n      borderRadius: '.5rem',\n    }\n  }\n})\n```\n\nMultiple rules can be defined in the same object:\n\n```\naddComponents({\n  '.btn': {\n    padding: '.5rem 1rem',\n    borderRadius: '.25rem',\n    fontWeight: '600',\n  },\n  '.btn-blue': {\n    backgroundColor: '#3490dc',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#2779bd'\n    },\n  },\n  '.btn-red': {\n    backgroundColor: '#e3342f',\n    color: '#fff',\n    '&:hover': {\n      backgroundColor: '#cc1f1a'\n    },\n  },\n})\n```\n\n…or as an array of objects in case you need to repeat the same key:\n\n```\naddComponents([\n  {\n    '@media (min-width: 500px)': {\n      // ...\n    }\n  },\n  {\n    '@media (min-width: 500px)': {\n      // ...\n    }\n  },\n  {\n    '@media (min-width: 500px)': {\n      // ...\n    }\n  },\n])\n```",
    "title": "Plugins - Tailwind CSS",
    "description": "Extending Tailwind with reusable third-party plugins.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/outline-style",
    "markdown": "# Outline Style - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the outline style](#setting-the-outline-style)\n\nUse the `outline-*` utilities to change the style of an element’s outline.\n\n```\n<button class=\"outline outline-2 outline-offset-2 ...\">Button A</button>\n<button class=\"outline-dashed outline-2 outline-offset-2 ...\">Button B</button>\n<button class=\"outline-dotted outline-2 outline-offset-2 ...\">Button C</button>\n<button class=\"outline-double outline-3 outline-offset-2 ...\">Button D</button>\n```\n\n### [​Removing outlines](#removing-outlines)\n\nUse `outline-none` to hide the default browser outline on focused elements.\n\nIt is highly recommended to apply your own focus styling for accessibility when using this utility.\n\nFocus the input to see the expected behaviour\n\n```\n<input type=\"text\"\n  placeholder=\"Default focus style\"\n  class=\"...\" />\n\n<input type=\"text\"\n  placeholder=\"Custom focus style\"\n  class=\"focus:outline-none focus:ring focus:border-blue-500 ...\" />\n```\n\nThe `outline-none` utility is implemented using a transparent outline under the hood to ensure elements are still visibly focused to [Windows high contrast mode](https://blogs.windows.com/msedgedev/2020/09/17/styling-for-windows-high-contrast-with-new-standards-for-forced-colors/) users.\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:outline-dashed` to only apply the `outline-dashed` utility on hover.\n\n```\n<div class=\"outline hover:outline-dashed\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:outline-dashed` to apply the `outline-dashed` utility at only medium screen sizes and above.\n\n```\n<div class=\"outline md:outline-dashed\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Outline Style - Tailwind CSS",
    "description": "Utilities for controlling the style of an element's outline.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/height",
    "markdown": "# Height - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Fixed heights](#fixed-heights)\n\nUse utilities like `h-px`, `h-1`, and `h-64` to set an element to a fixed height.\n\n```\n<div class=\"h-96 ...\">h-96</div>\n<div class=\"h-80 ...\">h-80</div>\n<div class=\"h-64 ...\">h-64</div>\n<div class=\"h-48 ...\">h-48</div>\n<div class=\"h-40 ...\">h-40</div>\n<div class=\"h-32 ...\">h-32</div>\n<div class=\"h-24 ...\">h-24</div>\n```\n\n### [​Full height](#full-height)\n\nUse `h-full` to set an element’s height to 100% of its parent, as long as the parent has a defined height.\n\n```\n<div class=\"h-48\">\n  <div class=\"h-full ...\">\n    <!-- This element will have a height of `12rem` (h-48) -->\n  </div>\n</div>\n```\n\n### [​Viewport height](#viewport-height)\n\nUse `h-screen` to make an element span the entire height of the viewport.\n\n```\n<div class=\"h-screen\">\n  <!-- ... -->\n</div>\n```\n\n### [​Dynamic viewport height](#dynamic-viewport-height)\n\nUse `h-dvh` to make an element span the entire height of the viewport, which changes as the browser UI expands or contracts.\n\nScroll up and down in the viewport to hide/show the browser UI\n\n```\n<div class=\"h-dvh\">\n  <!-- ... -->\n</div>\n```\n\n### [​Large viewport height](#large-viewport-height)\n\nUse `h-lvh` to set an element’s height to the largest possible height of the viewport. This behaves the same as `100vh`.\n\nScroll up and down in the viewport to hide/show the browser UI\n\n```\n<div class=\"h-lvh\">\n  <!-- ... -->\n</div>\n```\n\n### [​Small viewport height](#small-viewport-height)\n\nUse `h-svh` to set an element’s height to the smallest possible height of the viewport.\n\nScroll up and down in the viewport to hide/show the browser UI\n\n```\n<div class=\"h-svh\">\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:h-full` to only apply the `h-full` utility on hover.\n\n```\n<div class=\"h-8 hover:h-full\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:h-full` to apply the `h-full` utility at only medium screen sizes and above.\n\n```\n<div class=\"h-8 md:h-full\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind’s height scale is a combination of the [default spacing scale](https://tailwindcss.com/docs/customizing-spacing#default-spacing-scale) as well as some additional values specific to heights.\n\nYou can customize your spacing scale by editing `theme.spacing` or `theme.extend.spacing` in your `tailwind.config.js` file.\n\nTo customize height separately, use the `theme.height` section of your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `height` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"h-[32rem]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Height - Tailwind CSS",
    "description": "Utilities for setting the height of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/presets",
    "markdown": "# Presets - Tailwind CSS\n\nBy default, any configuration you add in your own `tailwind.config.js` file is intelligently merged with the [default configuration](https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/config.full.js), with your own configuration acting as a set of overrides and extensions.\n\nThe `presets` option lets you specify a _different_ configuration to use as your base, making it easy to package up a set of customizations that you’d like to reuse across projects.\n\nThis can be very useful for teams that manage multiple Tailwind projects for the same brand where they want a single source of truth for colors, fonts, and other common customizations.\n\n* * *\n\n## [​Creating a preset](#creating-a-preset)\n\nPresets are just regular Tailwind configuration objects, taking the exact same shape as the configuration you would add in your `tailwind.config.js` file.\n\nAs you can see, presets can contain all of the configuration options you’re used to, including theme overrides and extensions, adding plugins, configuring a prefix, and so on. Read about [how configurations are merged](https://tailwindcss.com/docs/presets#merging-logic-in-depth) for more details.\n\nAssuming this preset was saved at `./my-preset.js`, you would use it by adding it to the `tailwind.config.js` file in your actual project under the `presets` key:\n\nBy default, presets themselves extend Tailwind’s [default configuration](https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/config.full.js) just like your own configuration would. If you’d like to create a preset that completely replaces the default configuration, include an empty `presets` key in the preset itself:\n\n```\n// Example preset\nmodule.exports = {\n  presets: [],\n  theme: {\n    // ...\n  },\n  plugins: [\n    // ...\n  ],\n}\n```\n\nFor more information, read about [disabling the default configuration](https://tailwindcss.com/docs/presets#disabling-the-default-configuration).\n\n* * *\n\n## [​Merging logic in-depth](#merging-logic-in-depth)\n\nProject-specific configurations (those found in your `tailwind.config.js` file) are merged against presets the same way they are merged against the default configuration.\n\nThe following options in `tailwind.config.js` simply **replace** the same option if present in a preset:\n\n*   `content`\n*   `darkMode`\n*   `prefix`\n*   `important`\n*   `variantOrder`\n*   `separator`\n*   `safelist`\n\nThe remaining options are each carefully merged in the way that makes the most sense for that option, explained in more detail below.\n\n### [​Theme](#theme)\n\nThe `theme` object is merged shallowly, with top-level keys in `tailwind.config.js` replacing the same top-level keys in any presets. The exception to this is the `extend` key, which is collected across all configurations and applied on top of the rest of the theme configuration.\n\nLearn more about how the `theme` option works in the [theme configuration documentation](https://tailwindcss.com/docs/theme).\n\n### [​Presets](#presets)\n\nThe `presets` array is merged across configurations, allowing presets to include their own presets, which can also include their own presets.\n\n### [​Plugins](#plugins)\n\nThe `plugins` array is merged across configurations to make it possible for a preset to register plugins while also allowing you to add additional plugins at the project-level.\n\nThis means it’s not possible to disable a plugin that has been added by a preset. If you find yourself wanting to disable a plugin in a preset, it’s a sign that you should probably remove that plugin from the preset and include it on a project-by-project basis instead, or [split your preset into two presets](https://tailwindcss.com/docs/presets#extending-multiple-presets).\n\n### [​Core plugins](#core-plugins)\n\nThe `corePlugins` option behaves differently depending on whether you configure it as an object or as an array.\n\nIf you configure `corePlugins` as an object, it is merged across configurations.\n\nIf you configure `corePlugins` as an array, it replaces any `corePlugins` configuration provided by your configured preset(s).\n\n* * *\n\n## [​Extending multiple presets](#extending-multiple-presets)\n\nThe `presets` option is an array and can accept multiple presets. This is useful if you want to split your reusable customizations up into composable chunks that can be imported independently.\n\nWhen adding multiple presets, it’s important to note that if they overlap in any way, they are resolved the same way your own customizations are resolved against a preset, and the last configuration wins.\n\nFor example, if both of these configurations provided a custom color palette (and were not using `extend`), the color palette from `configuration-b` would be used:\n\n* * *\n\n## [​Disabling the default configuration](#disabling-the-default-configuration)\n\nIf you’d like to completely disable the default configuration and start with no base configuration at all, set `presets` to an empty array:\n\nThis will completely disable all of Tailwind’s defaults, so no colors, font families, font sizes, spacing values, etc. will be generated at all.\n\nYou can also do this from within a preset if you’d like your preset to provide a complete design system on its own that doesn’t extend Tailwind’s defaults:",
    "title": "Presets - Tailwind CSS",
    "description": "Creating your own reusable configuration presets.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/vertical-align",
    "markdown": "# Vertical Align - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Baseline](#baseline)\n\nUse `align-baseline` to align the baseline of an element with the baseline of its parent.\n\n```\n<span class=\"inline-block align-baseline ...\">...</span>\n```\n\n### [​Top](#top)\n\nUse `align-top` to align the top of an element and its descendants with the top of the entire line.\n\n```\n<span class=\"inline-block align-top ...\">...</span>\n```\n\n### [​Middle](#middle)\n\nUse `align-middle` to align the middle of an element with the baseline plus half the x-height of the parent.\n\n```\n<span class=\"inline-block align-middle ...\">...</span>\n```\n\n### [​Bottom](#bottom)\n\nUse `align-bottom` to align the bottom of an element and its descendants with the bottom of the entire line.\n\n```\n<span class=\"inline-block align-bottom ...\">...</span>\n```\n\n### [​Text Top](#text-top)\n\nUse `align-text-top` to align the top of an element with the top of the parent element’s font.\n\n```\n<span class=\"inline-block align-text-top ...\">...</span>\n```\n\n### [​Text Bottom](#text-bottom)\n\nUse `align-text-bottom` to align the bottom of an element with the bottom of the parent element’s font.\n\n```\n<span class=\"inline-block align-text-bottom ...\">...</span>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:align-top` to only apply the `align-top` utility on hover.\n\n```\n<p class=\"align-middle hover:align-top\">\n  <!-- ... -->\n</p>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:align-top` to apply the `align-top` utility at only medium screen sizes and above.\n\n```\n<p class=\"align-middle md:align-top\">\n  <!-- ... -->\n</p>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `vertical-align` value that isn't included in Tailwind by default, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"align-[4px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Vertical Align - Tailwind CSS",
    "description": "Utilities for controlling the vertical alignment of an inline or table-cell box.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/outline-offset",
    "markdown": "# Outline Offset - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the outline offset](#setting-the-outline-offset)\n\nUse the `outline-*` utilities to change the offset of an element’s outline.\n\n```\n<button class=\"outline outline-offset-0 ...\">Button A</button>\n<button class=\"outline outline-offset-2 ...\">Button B</button>\n<button class=\"outline outline-offset-4 ...\">Button C</button>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:outline-offset-2` to only apply the `outline-offset-2` utility on hover.\n\n```\n<button class=\"outline hover:outline-offset-2\">\n  <!-- ... -->\n</button>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:outline-offset-2` to apply the `outline-offset-2` utility at only medium screen sizes and above.\n\n```\n<button class=\"outline md:outline-offset-2\">\n  <!-- ... -->\n</button>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nYou can customize the `outline-offset-*` utilities by editing `theme.outlineOffset` or `theme.extend.outlineOffset` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `outline-offset` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<button class=\"outline-offset-[3px]\">\n  <!-- ... -->\n</button>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Outline Offset - Tailwind CSS",
    "description": "Utilities for controlling the offset of an element's outline.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/min-height",
    "markdown": "# Min-Height - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the minimum height](#setting-the-minimum-height)\n\nSet the minimum height of an element using `min-h-*` utilities.\n\n```\n<div class=\"h-96 ...\">\n  <div class=\"min-h-80 ...\">min-h-80</div>\n  <div class=\"min-h-64 ...\">min-h-64</div>\n  <div class=\"min-h-48 ...\">min-h-48</div>\n  <div class=\"min-h-40 ...\">min-h-40</div>\n  <div class=\"min-h-32 ...\">min-h-32</div>\n  <div class=\"min-h-24 ...\">min-h-24</div>\n  <div class=\"min-h-full ...\">min-h-full</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:min-h-full` to only apply the `min-h-full` utility on hover.\n\n```\n<div class=\"h-24 min-h-0 hover:min-h-full\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:min-h-full` to apply the `min-h-full` utility at only medium screen sizes and above.\n\n```\n<div class=\"h-24 min-h-0 md:min-h-full\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind’s minimum height scale is a combination of the [default spacing scale](https://tailwindcss.com/docs/customizing-spacing#default-spacing-scale) as well as some additional values specific to heights.\n\nYou can customize your spacing scale by editing `theme.spacing` or `theme.extend.spacing` in your `tailwind.config.js` file.\n\nTo customize `min-height` separately, use the `theme.minHeight` section of your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `min-height` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"min-h-[220px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Min-Height - Tailwind CSS",
    "description": "Utilities for setting the minimum height of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/ring-width",
    "markdown": "# Ring Width - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Adding a ring](#adding-a-ring)\n\nUse the `ring-*` utilities to apply solid box-shadow of a specific thickness to an element. Rings are a semi-transparent blue color by default, similar to the default focus ring style in many systems.\n\n```\n<button class=\"... ring-offset-2 ring-2\">Button A</button>\n<button class=\"... ring-offset-2 ring\">Button B</button>\n<button class=\"... ring-offset-2 ring-4\">Button C</button>\n```\n\nRing utilities compose gracefully with regular `shadow-*` utilities and can be combined on the same element.\n\nYou can also control the color, opacity, and offset of rings using the [ringColor](https://tailwindcss.com/docs/ring-color), [ringOpacity](https://tailwindcss.com/docs/ring-opacity), and [ringOffsetWidth](https://tailwindcss.com/docs/ring-offset-width) utilities.\n\n### [​Focus rings](#focus-rings)\n\nThe ring width utilities make it easy to use custom focus rings by adding `focus:` to the beginning of any `ring-*` utility.\n\nFocus this button to see the ring appear\n\n```\n<button class=\"... focus:ring-2\">Save Changes</button>\n```\n\nThe `focus` variant is enabled by default for the [ringColor](https://tailwindcss.com/docs/ring-color), [ringOpacity](https://tailwindcss.com/docs/ring-opacity), [ringOffsetWidth](https://tailwindcss.com/docs/ring-offset-width), and [ringOffsetColor](https://tailwindcss.com/docs/ring-offset-color) utilities as well.\n\n### [​Inset rings](#inset-rings)\n\nUse the `ring-inset` utility to force a ring to render on the inside of an element instead of the outside. This can be useful for elements at the edge of the screen where part of the ring wouldn’t be visible.\n\n```\n<button class=\"... ring-2 ring-pink-300 ring-inset\">\n  Save Changes\n</button>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:ring-4` to only apply the `ring-4` utility on hover.\n\n```\n<div class=\"ring-2 hover:ring-4\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:ring-4` to apply the `ring-4` utility at only medium screen sizes and above.\n\n```\n<div class=\"ring-2 md:ring-4\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind includes a handful of general purpose `ring-width` utilities. You can customize these values by editing `theme.ringWidth` or `theme.extend.ringWidth` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `ring` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"ring-[10px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Ring Width - Tailwind CSS",
    "description": "Utilities for creating outline rings with box-shadows.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/aspect-ratio",
    "markdown": "# Aspect Ratio - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the aspect ratio](#setting-the-aspect-ratio)\n\nUse the `aspect-*` utilities to set the desired aspect ratio of an element.\n\n```\n<iframe class=\"w-full aspect-video ...\" src=\"https://www.youtube.com/...\"></iframe>\n```\n\nTailwind doesn’t include a large set of aspect ratio values out of the box since it’s easier to just use arbitrary values. See the [arbitrary values](https://tailwindcss.com/docs/aspect-ratio#arbitrary-values) section for more information.\n\n### [​Browser support](#browser-support)\n\nThe `aspect-*` utilities use the native `aspect-ratio` CSS property, which was not supported in Safari until version 15. Until Safari 15 is popularized, Tailwind’s [aspect-ratio](https://github.com/tailwindlabs/tailwindcss-aspect-ratio) plugin is a good alternative.\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:aspect-square` to only apply the `aspect-square` utility on hover.\n\n```\n<iframe class=\"w-full aspect-video hover:aspect-square\" src=\"https://www.youtube.com/...\"></iframe>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:aspect-square` to apply the `aspect-square` utility at only medium screen sizes and above.\n\n```\n<iframe class=\"w-full aspect-video md:aspect-square\" src=\"https://www.youtube.com/...\"></iframe>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides a minimal set of `aspect-ratio` utilities. You can customize these values by editing `theme.aspectRatio` or `theme.extend.aspectRatio` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `aspect-ratio` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<iframe class=\"w-full aspect-[4/3]\" src=\"https://www.youtube.com/...\"></iframe>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Aspect Ratio - Tailwind CSS",
    "description": "Utilities for controlling the aspect ratio of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/max-height",
    "markdown": "# Max-Height - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the maximum height](#setting-the-maximum-height)\n\nSet the maximum height of an element using `max-h-*` utilities.\n\n```\n<div class=\"h-96 ...\">\n  <div class=\"h-full max-h-80 ...\">max-h-80</div>\n  <div class=\"h-full max-h-64 ...\">max-h-64</div>\n  <div class=\"h-full max-h-48 ...\">max-h-48</div>\n  <div class=\"h-full max-h-40 ...\">max-h-40</div>\n  <div class=\"h-full max-h-32 ...\">max-h-32</div>\n  <div class=\"h-full max-h-24 ...\">max-h-24</div>\n  <div class=\"h-full max-h-full ...\">max-h-full</div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:max-h-screen` to only apply the `max-h-screen` utility on hover.\n\n```\n<div class=\"h-48 max-h-full hover:max-h-screen\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:max-h-screen` to apply the `max-h-screen` utility at only medium screen sizes and above.\n\n```\n<div class=\"h-48 max-h-full md:max-h-screen\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind’s maximum height scale is a combination of the [default spacing scale](https://tailwindcss.com/docs/customizing-spacing#default-spacing-scale) as well as some additional values specific to heights.\n\nYou can customize your spacing scale by editing `theme.spacing` or `theme.extend.spacing` in your `tailwind.config.js` file.\n\nTo customize `max-height` separately, use the `theme.minHeight` section of your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `max-height` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"max-h-[220px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Max-Height - Tailwind CSS",
    "description": "Utilities for setting the maximum height of an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/container",
    "markdown": "# Container - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Using the container](#using-the-container)\n\nThe `container` class sets the `max-width` of an element to match the `min-width` of the current breakpoint. This is useful if you’d prefer to design for a fixed set of screen sizes instead of trying to accommodate a fully fluid viewport.\n\nNote that unlike containers you might have used in other frameworks, **Tailwind’s container does not center itself automatically and does not have any built-in horizontal padding.**\n\nTo center a container, use the `mx-auto` utility:\n\n```\n<div class=\"container mx-auto\">\n  <!-- ... -->\n</div>\n```\n\nTo add horizontal padding, use the `px-*` utilities:\n\n```\n<div class=\"container mx-auto px-4\">\n  <!-- ... -->\n</div>\n```\n\nIf you’d like to center your containers by default or include default horizontal padding, see the [customization options](https://tailwindcss.com/docs/container#customizing) below.\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Responsive variants](#responsive-variants)\n\nThe `container` class also includes responsive variants like `md:container` by default that allow you to make something behave like a container at only a certain breakpoint and up:\n\n```\n<!-- Full-width fluid until the `md` breakpoint, then lock to container -->\n<div class=\"md:container md:mx-auto\">\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Customizing](#customizing)\n\n### [​Centering by default](#centering-by-default)\n\nTo center containers by default, set the `center` option to `true` in the `theme.container` section of your config file:\n\n### [​Adding horizontal padding](#adding-horizontal-padding)\n\nTo add horizontal padding by default, specify the amount of padding you’d like using the `padding` option in the `theme.container` section of your config file:\n\nIf you want to specify a different padding amount for each breakpoint, use an object to provide a `default` value and any breakpoint-specific overrides:",
    "title": "Container - Tailwind CSS",
    "description": "A component for fixing an element's width to the current breakpoint.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/preflight",
    "markdown": "# Preflight - Tailwind CSS\n\n## [​Overview](#overview)\n\nBuilt on top of [modern-normalize](https://github.com/sindresorhus/modern-normalize), Preflight is a set of base styles for Tailwind projects that are designed to smooth over cross-browser inconsistencies and make it easier for you to work within the constraints of your design system.\n\nTailwind automatically injects these styles when you include `@tailwind base` in your CSS:\n\n```\n@tailwind base; /* Preflight will be injected here */\n\n@tailwind components;\n\n@tailwind utilities;\n```\n\nWhile most of the styles in Preflight are meant to go unnoticed — they simply make things behave more like you’d expect them to — some are more opinionated and can be surprising when you first encounter them.\n\nFor a complete reference of all the styles applied by Preflight, [see the stylesheet](https://unpkg.com/tailwindcss@%5E3/src/css/preflight.css).\n\n* * *\n\n## [​Default margins are removed](#default-margins-are-removed)\n\nPreflight removes all of the default margins from elements like headings, blockquotes, paragraphs, etc.\n\n```\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n```\n\nThis makes it harder to accidentally rely on margin values applied by the user-agent stylesheet that are not part of your spacing scale.\n\n* * *\n\n## [​Headings are unstyled](#headings-are-unstyled)\n\nAll heading elements are completely unstyled by default, and have the same font-size and font-weight as normal text.\n\n```\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n```\n\nThe reason for this is two-fold:\n\n*   **It helps you avoid accidentally deviating from your type scale**. By default, browsers assign sizes to headings that don’t exist in Tailwind’s default type scale, and aren’t guaranteed to exist in your own type scale.\n*   **In UI development, headings should often be visually de-emphasized**. Making headings unstyled by default means any styling you apply to headings happens consciously and deliberately.\n\nYou can always add default header styles to your project by [adding your own base styles](https://tailwindcss.com/docs/adding-custom-styles#adding-base-styles).\n\nIf you’d like to selectively introduce sensible default heading styles into article-style parts of a page, we recommend the [@tailwindcss/typography plugin](https://tailwindcss.com/docs/typography-plugin).\n\n* * *\n\n## [​Lists are unstyled](#lists-are-unstyled)\n\nOrdered and unordered lists are unstyled by default, with no bullets/numbers and no margin or padding.\n\n```\nol,\nul {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n```\n\nIf you’d like to style a list, you can do so using the [list-style-type](https://tailwindcss.com/docs/list-style-type) and [list-style-position](https://tailwindcss.com/docs/list-style-position) utilities:\n\n```\n<ul class=\"list-disc list-inside\">\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n</ul>\n```\n\nYou can always add default list styles to your project by [adding your own base styles](https://tailwindcss.com/docs/adding-custom-styles#adding-base-styles).\n\nIf you’d like to selectively introduce default list styles into article-style parts of a page, we recommend the [@tailwindcss/typography plugin](https://tailwindcss.com/docs/typography-plugin).\n\n### [​Accessibility considerations](#accessibility-considerations)\n\nUnstyled lists are [not announced as lists by VoiceOver](https://unfetteredthoughts.net/2017/09/26/voiceover-and-list-style-type-none/). If your content is truly a list but you would like to keep it unstyled, [add a “list” role](https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html) to the element:\n\n```\n<ul role=\"list\">\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n</ul>\n```\n\n* * *\n\n## [​Images are block-level](#images-are-block-level)\n\nImages and other replaced elements (like `svg`, `video`, `canvas`, and others) are `display: block` by default.\n\n```\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block;\n  vertical-align: middle;\n}\n```\n\nThis helps to avoid unexpected alignment issues that you often run into using the browser default of `display: inline`.\n\nIf you ever need to make one of these elements `inline` instead of `block`, simply use the `inline` utility:\n\n```\n<img class=\"inline\" src=\"...\" alt=\"...\">\n```\n\n* * *\n\n## [​Images are constrained to the parent width](#images-are-constrained-to-the-parent-width)\n\nImages and videos are constrained to the parent width in a way that preserves their intrinsic aspect ratio.\n\n```\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n```\n\nThis prevents them from overflowing their containers and makes them responsive by default. If you ever need to override this behavior, use the `max-w-none` utility:\n\n```\n<img class=\"max-w-none\" src=\"...\" alt=\"...\">\n```\n\n* * *\n\n## [​Border styles are reset globally](#border-styles-are-reset-globally)\n\nIn order to make it easy to add a border by simply adding the `border` class, Tailwind overrides the default border styles for all elements with the following rules:\n\n```\n*,\n::before,\n::after {\n  border-width: 0;\n  border-style: solid;\n  border-color: theme('borderColor.DEFAULT', currentColor);\n}\n```\n\nSince the `border` class only sets the `border-width` property, this reset ensures that adding that class always adds a solid 1px border using your configured default border color.\n\nThis can cause some unexpected results when integrating certain third-party libraries, like [Google maps](https://github.com/tailwindlabs/tailwindcss/issues/484) for example.\n\nWhen you run into situations like this, you can work around them by overriding the Preflight styles with your own custom CSS:\n\n```\n.google-map * {\n  border-style: none;\n}\n```\n\n* * *\n\n## [​Extending Preflight](#extending-preflight)\n\nIf you’d like to add your own base styles on top of Preflight, simply add them to your CSS using the `@layer base` directive:\n\n```\n@tailwind base;\n\n@layer base {\n  h1 {\n    @apply text-2xl;\n  }\n  h2 {\n    @apply text-xl;\n  }\n  h3 {\n    @apply text-lg;\n  }\n  a {\n    @apply text-blue-600 underline;\n  }\n}\n\n@tailwind components;\n\n@tailwind utilities;\n```\n\nLearn more in the [adding base styles documentation](https://tailwindcss.com/docs/adding-custom-styles#adding-base-styles).\n\n* * *\n\n## [​Disabling Preflight](#disabling-preflight)\n\nIf you’d like to completely disable Preflight — perhaps because you’re integrating Tailwind into an existing project or because you’d like to provide your own base styles — all you need to do is set `preflight` to `false` in the `corePlugins` section of your `tailwind.config.js` file:",
    "title": "Preflight - Tailwind CSS",
    "description": "An opinionated set of base styles for Tailwind projects.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/columns",
    "markdown": "# Columns - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Adding based on column count](#adding-based-on-column-count)\n\nUse utilities like `columns-2` and `columns-3` to set the number of columns that should be created for the content within an element. The column width will be automatically adjusted to accommodate that number.\n\n```\n<div class=\"columns-3 ...\">\n  <img class=\"w-full aspect-video ...\" src=\"...\" />\n  <img class=\"w-full aspect-square ...\" src=\"...\" />\n  <!-- ... -->\n</div>\n```\n\n### [​Adding based on column width](#adding-based-on-column-width)\n\nUse utilities like `columns-xs` and `columns-sm` to set the ideal column width for the content within an element, with the number of columns (the count) automatically adjusting to accommodate that value.\n\nThis “t-shirt” scale is the same as the [max-width](https://tailwindcss.com/docs/max-width) scale, with the addition of `2xs` and `3xs`, since smaller columns may be desirable.\n\n```\n<div class=\"columns-3xs ...\">\n  <img class=\"w-full aspect-video ...\" src=\"...\" />\n  <img class=\"w-full aspect-square ...\" src=\"...\" />\n  <!-- ... -->\n</div>\n```\n\n### [​Setting the column gap](#setting-the-column-gap)\n\nTo specify the width between columns, you can use the [gap-x](https://tailwindcss.com/docs/gap) utilities:\n\n```\n<div class=\"gap-8 columns-3 ...\">\n  <img class=\"w-full aspect-video ...\" src=\"...\" />\n  <img class=\"w-full aspect-square ...\" src=\"...\" />\n  <!-- ... -->\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:columns-3` to only apply the `columns-3` utility on hover.\n\n```\n<div class=\"columns-2 hover:columns-3\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:columns-3` to apply the `columns-3` utility at only medium screen sizes and above.\n\n```\n<div class=\"columns-2 md:columns-3\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides a column count scale from `1-12` as well as a column t-shirt scale from `3xs-7xl`. You can customize these values by editing `theme.columns` or `theme.extend.columns` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `columns` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"columns-[10rem]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Columns - Tailwind CSS",
    "description": "Utilities for controlling the number of columns within an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/scroll-snap-stop",
    "markdown": "# Scroll Snap Stop - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Forcing snap position stops](#forcing-snap-position-stops)\n\nUse the `snap-always` utility together with the `snap-mandatory` utility to force a snap container to always stop on an element before the user can continue scrolling to the next item.\n\nScroll in the grid of images to see the expected behaviour\n\n```\n<div class=\"snap-x snap-mandatory ...\">\n  <div class=\"snap-always snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-always snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-always snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-always snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-always snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-always snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1559333086-b0a56225a93c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n</div>\n```\n\n### [​Skipping snap position stops](#skipping-snap-position-stops)\n\nUse the `snap-normal` utility to allow a snap container to skip past possible scroll snap positions.\n\nScroll in the grid of images to see the expected behaviour\n\n```\n<div class=\"snap-x ...\">\n  <div class=\"snap-normal snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-normal snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-normal snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-normal snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-normal snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-normal snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1559333086-b0a56225a93c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:snap-normal` to only apply the `snap-normal` utility on hover.\n\n```\n<div class=\"snap-always hover:snap-normal\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:snap-normal` to apply the `snap-normal` utility at only medium screen sizes and above.\n\n```\n<div class=\"snap-always md:snap-normal\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Scroll Snap Stop - Tailwind CSS",
    "description": "Utilities for controlling whether you can skip past possible snap positions.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/backdrop-sepia",
    "markdown": "# Backdrop Sepia - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Adding backdrop sepia filters](#adding-backdrop-sepia-filters)\n\nUse the `backdrop-sepia` and `backdrop-sepia-0` utilities to control whether an element’s backdrop should be rendered as sepia or in full color.\n\n```\n<div class=\"backdrop-sepia-0 bg-white/30 ...\">\n  <!-- ... -->\n</div>\n<div class=\"backdrop-sepia bg-white/30 ...\">\n  <!-- ... -->\n</div>\n```\n\n### [​Removing backdrop filters](#removing-backdrop-filters)\n\nTo remove all of the backdrop filters on an element at once, use the `backdrop-filter-none` utility:\n\n```\n<div class=\"backdrop-blur-md backdrop-sepia md:backdrop-filter-none\">\n  <!-- ... -->\n</div>\n```\n\nThis can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint.\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:backdrop-sepia-0` to only apply the `backdrop-sepia-0` utility on hover.\n\n```\n<div class=\"backdrop-sepia hover:backdrop-sepia-0\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:backdrop-sepia-0` to apply the `backdrop-sepia-0` utility at only medium screen sizes and above.\n\n```\n<div class=\"backdrop-sepia md:backdrop-sepia-0\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind includes a handful of general purpose `backdrop-sepia` utilities. You can customize these values by editing `theme.backdropSepia` or `theme.extend.backdropSepia` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `backdrop-sepia` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"backdrop-sepia-[.25]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Backdrop Sepia - Tailwind CSS",
    "description": "Utilities for applying backdrop sepia filters to an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/border-collapse",
    "markdown": "# Border Collapse - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Collapse](#collapse)\n\nUse `border-collapse` to combine adjacent cell borders into a single border when possible. Note that this includes collapsing borders on the top-level `<table>` tag.\n\n```\n<table class=\"border-collapse border border-slate-400 ...\">\n  <thead>\n    <tr>\n      <th class=\"border border-slate-300 ...\">State</th>\n      <th class=\"border border-slate-300 ...\">City</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td class=\"border border-slate-300 ...\">Indiana</td>\n      <td class=\"border border-slate-300 ...\">Indianapolis</td>\n    </tr>\n    <tr>\n      <td class=\"border border-slate-300 ...\">Ohio</td>\n      <td class=\"border border-slate-300 ...\">Columbus</td>\n    </tr>\n    <tr>\n      <td class=\"border border-slate-300 ...\">Michigan</td>\n      <td class=\"border border-slate-300 ...\">Detroit</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n### [​Separate](#separate)\n\nUse `border-separate` to force each cell to display its own separate borders.\n\n```\n<table class=\"border-separate border border-slate-400 ...\">\n  <thead>\n    <tr>\n      <th class=\"border border-slate-300 ...\">State</th>\n      <th class=\"border border-slate-300 ...\">City</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td class=\"border border-slate-300 ...\">Indiana</td>\n      <td class=\"border border-slate-300 ...\">Indianapolis</td>\n    </tr>\n    <tr>\n      <td class=\"border border-slate-300 ...\">Ohio</td>\n      <td class=\"border border-slate-300 ...\">Columbus</td>\n    </tr>\n    <tr>\n      <td class=\"border border-slate-300 ...\">Michigan</td>\n      <td class=\"border border-slate-300 ...\">Detroit</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:border-collapse` to only apply the `border-collapse` utility on hover.\n\n```\n<table class=\"hover:border-collapse\">\n  <!-- ... -->\n</table>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:border-collapse` to apply the `border-collapse` utility at only medium screen sizes and above.\n\n```\n<table class=\"md:border-collapse\">\n  <!-- ... -->\n</table>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Border Collapse - Tailwind CSS",
    "description": "Utilities for controlling whether table borders should collapse or be separated.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/touch-action",
    "markdown": "# Touch Action - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the touch action](#setting-the-touch-action)\n\nUse the `touch-*` utilities to control how an element can be scrolled (panned) and zoomed (pinched) on touchscreens.\n\nTry panning these images on a touchscreen\n\n```\n<div class=\"w-full h-48 overflow-auto touch-auto ...\">\n  <img class=\"w-[150%] max-w-none h-auto\" src=\"...\" />\n</div>\n<div class=\"w-full h-48 overflow-auto touch-none ...\">\n  <img class=\"w-[150%] max-w-none h-auto\" src=\"...\" />\n</div>\n<div class=\"w-full h-48 overflow-auto touch-pan-x ...\">\n  <img class=\"w-[150%] max-w-none h-auto\" src=\"...\" />\n</div>\n<div class=\"w-full h-48 overflow-auto touch-pan-y ...\">\n  <img class=\"w-[150%] max-w-none h-auto\" src=\"...\" />\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `focus:touch-pan-x` to only apply the `touch-pan-x` utility on focus.\n\n```\n<div class=\"focus:touch-pan-x\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:touch-pan-x` to apply the `touch-pan-x` utility at only medium screen sizes and above.\n\n```\n<div class=\"md:touch-pan-x\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Touch Action - Tailwind CSS",
    "description": "Utilities for controlling how an element can be scrolled and zoomed on touchscreens.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/scroll-snap-type",
    "markdown": "# Scroll Snap Type - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Horizontal scroll snapping](#horizontal-scroll-snapping)\n\nUse the `snap-x` utility to enable horizontal scroll snapping within an element.\n\nFor scroll snapping to work, you need to also set the [scroll snap alignment](https://tailwindcss.com/docs/scroll-snap-align) on the children within the element.\n\nScroll in the grid of images to see the expected behaviour\n\n```\n<div class=\"snap-x ...\">\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1559333086-b0a56225a93c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n</div>\n```\n\n### [​Mandatory scroll snapping](#mandatory-scroll-snapping)\n\nUse the `snap-mandatory` utility to force a snap container to always come to rest on a snap point.\n\nScroll in the grid of images to see the expected behaviour\n\n```\n<div class=\"snap-mandatory snap-x ...\">\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1559333086-b0a56225a93c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n</div>\n```\n\n### [​Proximity scroll snapping](#proximity-scroll-snapping)\n\nUse the `snap-proximity` utility to make a snap container come to rest on snap points that are close in proximity. This is the browser default.\n\nScroll in the grid of images to see the expected behaviour\n\n```\n<div class=\"snap-proximity snap-x ...\">\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n  <div class=\"snap-center ...\">\n    <img src=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\" />\n  </div>\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:snap-x` to only apply the `snap-x` utility on hover.\n\n```\n<div class=\"hover:snap-x\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:snap-x` to apply the `snap-x` utility at only medium screen sizes and above.\n\n```\n<div class=\"md:snap-x\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Scroll Snap Type - Tailwind CSS",
    "description": "Utilities for controlling how strictly snap points are enforced in a snap container.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/user-select",
    "markdown": "# User Select - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Disabling text selection](#disabling-text-selection)\n\nUse `select-none` to prevent selecting text in an element and its children.\n\nTry selecting the text to see the expected behaviour\n\n```\n<div class=\"select-none ...\">\n  The quick brown fox jumps over the lazy dog.\n</div>\n```\n\n### [​Allowing text selection](#allowing-text-selection)\n\nUse `select-text` to allow selecting text in an element and its children.\n\nTry selecting the text to see the expected behaviour\n\n```\n<div class=\"select-text ...\">\n  The quick brown fox jumps over the lazy dog.\n</div>\n```\n\n### [​Selecting all text in one click](#selecting-all-text-in-one-click)\n\nUse `select-all` to automatically select all the text in an element when a user clicks.\n\nTry selecting the text to see the expected behaviour\n\n```\n<div class=\"select-all ...\">\n  The quick brown fox jumps over the lazy dog.\n</div>\n```\n\n### [​Using auto select behaviour](#using-auto-select-behaviour)\n\nUse `select-auto` to use the default browser behavior for selecting text. Useful for undoing other classes like `select-none` at different breakpoints.\n\nTry selecting the text to see the expected behaviour\n\n```\n<div class=\"select-auto ...\">\n  The quick brown fox jumps over the lazy dog.\n</div>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:select-all` to only apply the `select-all` utility on hover.\n\n```\n<div class=\"hover:select-all\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:select-all` to apply the `select-all` utility at only medium screen sizes and above.\n\n```\n<div class=\"md:select-all\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "User Select - Tailwind CSS",
    "description": "Utilities for controlling whether the user can select text in an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/will-change",
    "markdown": "# Will Change - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Optimizing with will change](#optimizing-with-will-change)\n\nUse `will-change-scroll`, `will-change-contents` and `will-change-transform` to optimize an element that’s expected to change in the near future by instructing the browser to prepare the necessary animation before it actually begins.\n\n```\n<div class=\"overflow-auto will-change-scroll\">\n  <!-- ... -->\n</div>\n```\n\nIt’s recommended that you apply these utilities just before an element changes, and then remove it shortly after it finishes using `will-change-auto`.\n\nThe will-change property is intended to be used as a last resort when dealing with **known performance problems**. Avoid using these utilities too much, or simply in anticipation of performance issues, as it could actually cause the page to be less performant.\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:will-change-scroll` to only apply the `will-change-scroll` utility on hover.\n\n```\n<div class=\"will-change-auto hover:will-change-scroll\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:will-change-scroll` to apply the `will-change-scroll` utility at only medium screen sizes and above.\n\n```\n<div class=\"will-change-auto md:will-change-scroll\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides four `will-change` utilities. You can customize these values by editing `theme.willChange` or `theme.extend.willChange` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `will-change` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"will-change-[top,left]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Will Change - Tailwind CSS",
    "description": "Utilities for optimizing upcoming animations of elements that are expected to change.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/border-spacing",
    "markdown": "# Border Spacing - Tailwind CSS\n\nborder-spacing-0border-spacing: 0px 0px; border-spacing-x-0border-spacing: 0px var(--tw-border-spacing-y); border-spacing-y-0border-spacing: var(--tw-border-spacing-x) 0px; border-spacing-pxborder-spacing: 1px 1px; border-spacing-x-pxborder-spacing: 1px var(--tw-border-spacing-y); border-spacing-y-pxborder-spacing: var(--tw-border-spacing-x) 1px; border-spacing-0.5border-spacing: 0.125rem 0.125rem; border-spacing-x-0.5border-spacing: 0.125rem var(--tw-border-spacing-y); border-spacing-y-0.5border-spacing: var(--tw-border-spacing-x) 0.125rem; border-spacing-1border-spacing: 0.25rem 0.25rem; border-spacing-x-1border-spacing: 0.25rem var(--tw-border-spacing-y); border-spacing-y-1border-spacing: var(--tw-border-spacing-x) 0.25rem; border-spacing-1.5border-spacing: 0.375rem 0.375rem; border-spacing-x-1.5border-spacing: 0.375rem var(--tw-border-spacing-y); border-spacing-y-1.5border-spacing: var(--tw-border-spacing-x) 0.375rem; border-spacing-2border-spacing: 0.5rem 0.5rem; border-spacing-x-2border-spacing: 0.5rem var(--tw-border-spacing-y); border-spacing-y-2border-spacing: var(--tw-border-spacing-x) 0.5rem; border-spacing-2.5border-spacing: 0.625rem 0.625rem; border-spacing-x-2.5border-spacing: 0.625rem var(--tw-border-spacing-y); border-spacing-y-2.5border-spacing: var(--tw-border-spacing-x) 0.625rem; border-spacing-3border-spacing: 0.75rem 0.75rem; border-spacing-x-3border-spacing: 0.75rem var(--tw-border-spacing-y); border-spacing-y-3border-spacing: var(--tw-border-spacing-x) 0.75rem; border-spacing-3.5border-spacing: 0.875rem 0.875rem; border-spacing-x-3.5border-spacing: 0.875rem var(--tw-border-spacing-y); border-spacing-y-3.5border-spacing: var(--tw-border-spacing-x) 0.875rem; border-spacing-4border-spacing: 1rem 1rem; border-spacing-x-4border-spacing: 1rem var(--tw-border-spacing-y); border-spacing-y-4border-spacing: var(--tw-border-spacing-x) 1rem; border-spacing-5border-spacing: 1.25rem 1.25rem; border-spacing-x-5border-spacing: 1.25rem var(--tw-border-spacing-y); border-spacing-y-5border-spacing: var(--tw-border-spacing-x) 1.25rem; border-spacing-6border-spacing: 1.5rem 1.5rem; border-spacing-x-6border-spacing: 1.5rem var(--tw-border-spacing-y); border-spacing-y-6border-spacing: var(--tw-border-spacing-x) 1.5rem; border-spacing-7border-spacing: 1.75rem 1.75rem; border-spacing-x-7border-spacing: 1.75rem var(--tw-border-spacing-y); border-spacing-y-7border-spacing: var(--tw-border-spacing-x) 1.75rem; border-spacing-8border-spacing: 2rem 2rem; border-spacing-x-8border-spacing: 2rem var(--tw-border-spacing-y); border-spacing-y-8border-spacing: var(--tw-border-spacing-x) 2rem; border-spacing-9border-spacing: 2.25rem 2.25rem; border-spacing-x-9border-spacing: 2.25rem var(--tw-border-spacing-y); border-spacing-y-9border-spacing: var(--tw-border-spacing-x) 2.25rem; border-spacing-10border-spacing: 2.5rem 2.5rem; border-spacing-x-10border-spacing: 2.5rem var(--tw-border-spacing-y); border-spacing-y-10border-spacing: var(--tw-border-spacing-x) 2.5rem; border-spacing-11border-spacing: 2.75rem 2.75rem; border-spacing-x-11border-spacing: 2.75rem var(--tw-border-spacing-y); border-spacing-y-11border-spacing: var(--tw-border-spacing-x) 2.75rem; border-spacing-12border-spacing: 3rem 3rem; border-spacing-x-12border-spacing: 3rem var(--tw-border-spacing-y); border-spacing-y-12border-spacing: var(--tw-border-spacing-x) 3rem; border-spacing-14border-spacing: 3.5rem 3.5rem; border-spacing-x-14border-spacing: 3.5rem var(--tw-border-spacing-y); border-spacing-y-14border-spacing: var(--tw-border-spacing-x) 3.5rem; border-spacing-16border-spacing: 4rem 4rem; border-spacing-x-16border-spacing: 4rem var(--tw-border-spacing-y); border-spacing-y-16border-spacing: var(--tw-border-spacing-x) 4rem; border-spacing-20border-spacing: 5rem 5rem; border-spacing-x-20border-spacing: 5rem var(--tw-border-spacing-y); border-spacing-y-20border-spacing: var(--tw-border-spacing-x) 5rem; border-spacing-24border-spacing: 6rem 6rem; border-spacing-x-24border-spacing: 6rem var(--tw-border-spacing-y); border-spacing-y-24border-spacing: var(--tw-border-spacing-x) 6rem; border-spacing-28border-spacing: 7rem 7rem; border-spacing-x-28border-spacing: 7rem var(--tw-border-spacing-y); border-spacing-y-28border-spacing: var(--tw-border-spacing-x) 7rem; border-spacing-32border-spacing: 8rem 8rem; border-spacing-x-32border-spacing: 8rem var(--tw-border-spacing-y); border-spacing-y-32border-spacing: var(--tw-border-spacing-x) 8rem; border-spacing-36border-spacing: 9rem 9rem; border-spacing-x-36border-spacing: 9rem var(--tw-border-spacing-y); border-spacing-y-36border-spacing: var(--tw-border-spacing-x) 9rem; border-spacing-40border-spacing: 10rem 10rem; border-spacing-x-40border-spacing: 10rem var(--tw-border-spacing-y); border-spacing-y-40border-spacing: var(--tw-border-spacing-x) 10rem; border-spacing-44border-spacing: 11rem 11rem; border-spacing-x-44border-spacing: 11rem var(--tw-border-spacing-y); border-spacing-y-44border-spacing: var(--tw-border-spacing-x) 11rem; border-spacing-48border-spacing: 12rem 12rem; border-spacing-x-48border-spacing: 12rem var(--tw-border-spacing-y); border-spacing-y-48border-spacing: var(--tw-border-spacing-x) 12rem; border-spacing-52border-spacing: 13rem 13rem; border-spacing-x-52border-spacing: 13rem var(--tw-border-spacing-y); border-spacing-y-52border-spacing: var(--tw-border-spacing-x) 13rem; border-spacing-56border-spacing: 14rem 14rem; border-spacing-x-56border-spacing: 14rem var(--tw-border-spacing-y); border-spacing-y-56border-spacing: var(--tw-border-spacing-x) 14rem; border-spacing-60border-spacing: 15rem 15rem; border-spacing-x-60border-spacing: 15rem var(--tw-border-spacing-y); border-spacing-y-60border-spacing: var(--tw-border-spacing-x) 15rem; border-spacing-64border-spacing: 16rem 16rem; border-spacing-x-64border-spacing: 16rem var(--tw-border-spacing-y); border-spacing-y-64border-spacing: var(--tw-border-spacing-x) 16rem; border-spacing-72border-spacing: 18rem 18rem; border-spacing-x-72border-spacing: 18rem var(--tw-border-spacing-y); border-spacing-y-72border-spacing: var(--tw-border-spacing-x) 18rem; border-spacing-80border-spacing: 20rem 20rem; border-spacing-x-80border-spacing: 20rem var(--tw-border-spacing-y); border-spacing-y-80border-spacing: var(--tw-border-spacing-x) 20rem; border-spacing-96border-spacing: 24rem 24rem; border-spacing-x-96border-spacing: 24rem var(--tw-border-spacing-y); border-spacing-y-96border-spacing: var(--tw-border-spacing-x) 24rem;",
    "title": "Border Spacing - Tailwind CSS",
    "description": "Utilities for controlling the spacing between table borders.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/fill",
    "markdown": "# Fill - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the fill color](#setting-the-fill-color)\n\nUse the `fill-*` utilities to change the fill color of an SVG.\n\n```\n<svg class=\"fill-blue-500 ...\">\n  <!-- ... -->\n</svg>\n```\n\nThis can be useful for styling icon sets like [Heroicons](https://heroicons.com/).\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:fill-cyan-700` to only apply the `fill-cyan-700` utility on hover.\n\n```\n<svg class=\"fill-cyan-500 hover:fill-cyan-700\">\n  <!-- ... -->\n</svg>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:fill-cyan-700` to apply the `fill-cyan-700` utility at only medium screen sizes and above.\n\n```\n<svg class=\"fill-cyan-500 md:fill-cyan-700\">\n  <!-- ... -->\n</svg>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind makes the entire [default color palette](https://tailwindcss.com/docs/customizing-colors#default-color-palette) available as fill colors. You can [customize your color palette](https://tailwindcss.com/docs/colors#customizing) by editing `theme.colors` or `theme.extend.colors` in your `tailwind.config.js` file.\n\nAlternatively, you can customize just your fill colors by editing `theme.fill` or `theme.extend.fill` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `fill` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<svg class=\"fill-[#243c5a]\">\n  <!-- ... -->\n</svg>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Fill - Tailwind CSS",
    "description": "Utilities for styling the fill of SVG elements.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/caption-side",
    "markdown": "# Caption Side - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Top](#top)\n\nUse `caption-top` to position a caption element at the top of a table.\n\n```\n<table>\n  <caption class=\"caption-top\">\n    Table 3.1: Professional wrestlers and their signature moves.\n  </caption>\n  <thead>\n    <tr>\n      <th>Wrestler</th>\n      <th>Signature Move(s)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\"Stone Cold\" Steve Austin</td>\n      <td>Stone Cold Stunner, Lou Thesz Press</td>\n    </tr>\n    <tr>\n      <td>Bret \"The Hitman\" Hart</td>\n      <td >The Sharpshooter</td>\n    </tr>\n    <tr>\n      <td>Razor Ramon</td>\n      <td>Razor's Edge, Fallaway Slam</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n### [​Bottom](#bottom)\n\nUse `caption-bottom` to position a caption element at the bottom of a table.\n\n```\n<table>\n  <caption class=\"caption-bottom\">\n    Table 3.1: Professional wrestlers and their signature moves.\n  </caption>\n  <thead>\n    <tr>\n      <th>Wrestler</th>\n      <th>Signature Move(s)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\"Stone Cold\" Steve Austin</td>\n      <td>Stone Cold Stunner, Lou Thesz Press</td>\n    </tr>\n    <tr>\n      <td>Bret \"The Hitman\" Hart</td>\n      <td >The Sharpshooter</td>\n    </tr>\n    <tr>\n      <td>Razor Ramon</td>\n      <td>Razor's Edge, Fallaway Slam</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:caption-bottom` to only apply the `caption-bottom` utility on hover.\n\n```\n<table class=\"caption-top hover:caption-bottom\">\n  <!-- ... -->\n</table>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:caption-bottom` to apply the `caption-bottom` utility at only medium screen sizes and above.\n\n```\n<table class=\"caption-top md:caption-bottom\">\n  <!-- ... -->\n</table>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Caption Side - Tailwind CSS",
    "description": "Utilities for controlling the alignment of a caption element inside of a table.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/stroke",
    "markdown": "# Stroke - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the stroke color](#setting-the-stroke-color)\n\nUse the `stroke-*` utilities to change the stroke color of an SVG.\n\n```\n<svg class=\"stroke-cyan-500 ...\">\n  <!-- ... -->\n</svg>\n```\n\nThis can be useful for styling icon sets like [Heroicons](https://heroicons.com/).\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:stroke-cyan-700` to only apply the `stroke-cyan-700` utility on hover.\n\n```\n<svg class=\"stroke-cyan-500 hover:stroke-cyan-700\">\n  <!-- ... -->\n</svg>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:stroke-cyan-700` to apply the `stroke-cyan-700` utility at only medium screen sizes and above.\n\n```\n<svg class=\"stroke-cyan-500 md:stroke-cyan-700\">\n  <!-- ... -->\n</svg>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind makes the entire [default color palette](https://tailwindcss.com/docs/customizing-colors#default-color-palette) available as stroke colors. You can [customize your color palette](https://tailwindcss.com/docs/colors#customizing) by editing `theme.colors` or `theme.extend.colors` in your `tailwind.config.js` file.\n\nAlternatively, you can customize just your stroke colors by editing `theme.stroke` or `theme.extend.stroke` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `stroke` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<svg class=\"stroke-[#243c5a]\">\n  <!-- ... -->\n</svg>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Stroke - Tailwind CSS",
    "description": "Utilities for styling the stroke of SVG elements.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/transition-duration",
    "markdown": "# Transition Duration - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Changing transition duration](#changing-transition-duration)\n\nUse the `duration-*` utilities to control an element’s transition-duration.\n\nHover each button to see the expected behaviour\n\n```\n<button class=\"transition duration-150 ease-in-out ...\">Button A</button>\n<button class=\"transition duration-300 ease-in-out ...\">Button B</button>\n<button class=\"transition duration-700 ease-in-out ...\">Button C</button>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:duration-150` to only apply the `duration-150` utility on hover.\n\n```\n<div class=\"transition duration-0 hover:duration-150\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:duration-150` to apply the `duration-150` utility at only medium screen sizes and above.\n\n```\n<div class=\"transition duration-0 md:duration-150\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides eight general purpose transition-duration utilities. You can customize these values by editing `theme.transitionDuration` or `theme.extend.transitionDuration` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `transition-duration` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"duration-[2000ms]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Transition Duration - Tailwind CSS",
    "description": "Utilities for controlling the duration of CSS transitions.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/transition-property",
    "markdown": "# Transition Property - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Controlling transitioned properties](#controlling-transitioned-properties)\n\nUse the `transition-*` utilities to specify which properties should transition when they change.\n\nHover the button to see the expected behaviour\n\n```\n<button class=\"transition ease-in-out delay-150 bg-blue-500 hover:-translate-y-1 hover:scale-110 hover:bg-indigo-500 duration-300 ...\">\n  Save Changes\n</button>\n```\n\n### [​Prefers-reduced-motion](#prefers-reduced-motion)\n\nFor situations where the user has specified that they prefer reduced motion, you can conditionally apply animations and transitions using the `motion-safe` and `motion-reduce` variants:\n\n```\n<button class=\"transition transform hover:-translate-y-1 motion-reduce:transition-none motion-reduce:hover:transform-none ...\">\n  Hover me\n</button>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:transition-all` to only apply the `transition-all` utility on hover.\n\n```\n<div class=\"hover:transition-all\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:transition-all` to apply the `transition-all` utility at only medium screen sizes and above.\n\n```\n<div class=\"md:transition-all\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides transition-property utilities for seven common property combinations. You can customize these values by editing `theme.transitionProperty` or `theme.extend.transitionProperty` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `transition-property` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"transition-[height]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Transition Property - Tailwind CSS",
    "description": "Utilities for controlling which CSS properties transition.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/screen-readers",
    "markdown": "# Screen Readers - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Screen-reader-only elements](#screen-reader-only-elements)\n\nUse `sr-only` to hide an element visually without hiding it from screen readers:\n\n```\n<a href=\"#\">\n  <svg><!-- ... --></svg>\n  <span class=\"sr-only\">Settings</span>\n</a>\n```\n\n### [​Undoing screen-reader-only elements](#undoing-screen-reader-only-elements)\n\nUse `not-sr-only` to undo `sr-only`, making an element visible to sighted users as well as screen readers. This can be useful when you want to visually hide something on small screens but show it on larger screens for example:\n\n```\n<a href=\"#\">\n  <svg><!-- ... --></svg>\n  <span class=\"sr-only sm:not-sr-only\">Settings</span>\n</a>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `focus:not-sr-only` to only apply the `not-sr-only` utility on focus.\n\n```\n<a href=\"#content\" class=\"sr-only focus:not-sr-only\">\n  Skip to content\n</a>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:not-sr-only` to apply the `not-sr-only` utility at only medium screen sizes and above.\n\n```\n<div class=\"sr-only md:not-sr-only\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Screen Readers - Tailwind CSS",
    "description": "Utilities for improving accessibility with screen readers.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/stroke-width",
    "markdown": "# Stroke Width - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the stroke width](#setting-the-stroke-width)\n\nUse the `stroke-*` utilities to set the stroke width of an SVG.\n\n```\n<svg class=\"stroke-1 ...\"></svg>\n<svg class=\"stroke-2 ...\"></svg>\n```\n\nThis can be useful for styling icon sets like [Heroicons](https://heroicons.com/).\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:stroke-2` to only apply the `stroke-2` utility on hover.\n\n```\n<svg class=\"stroke-1 hover:stroke-2\">\n  <!-- ... -->\n</svg>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:stroke-2` to apply the `stroke-2` utility at only medium screen sizes and above.\n\n```\n<svg class=\"stroke-1 md:stroke-2\">\n  <!-- ... -->\n</svg>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides three `stroke-width` utilities. You change, add, or remove these by editing the `theme.strokeWidth` section of your Tailwind config.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `stroke-width` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<svg class=\"stroke-[2px]\">\n  <!-- ... -->\n</svg>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Stroke Width - Tailwind CSS",
    "description": "Utilities for styling the stroke width of SVG elements.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/transition-timing-function",
    "markdown": "# Transition Timing Function - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Controlling the easing curve](#controlling-the-easing-curve)\n\nUse the `ease-*` utilities to control an element’s easing curve.\n\nHover each button to see the expected behaviour\n\n```\n<button class=\"ease-in duration-300 ...\">Button A</button>\n<button class=\"ease-out duration-300 ...\">Button B</button>\n<button class=\"ease-in-out duration-300 ...\">Button C</button>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:ease-in` to only apply the `ease-in` utility on hover.\n\n```\n<div class=\"transition duration-150 ease-out hover:ease-in\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:ease-in` to apply the `ease-in` utility at only medium screen sizes and above.\n\n```\n<div class=\"transition duration-150 ease-out md:ease-in\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides four general purpose transition-timing-function utilities. You can customize these values by editing `theme.transitionTimingFunction` or `theme.extend.transitionTimingFunction` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `transition-timing-function` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"ease-[cubic-bezier(0.95,0.05,0.795,0.035)]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Transition Timing Function - Tailwind CSS",
    "description": "Utilities for controlling the easing of CSS transitions.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/transition-delay",
    "markdown": "# Transition Delay - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Delaying transitions](#delaying-transitions)\n\nUse the `delay-*` utilities to control an element’s transition-delay.\n\nHover each button to see the expected behaviour\n\n```\n<button class=\"transition delay-150 duration-300 ease-in-out ...\">Button A</button>\n<button class=\"transition delay-300 duration-300 ease-in-out ...\">Button B</button>\n<button class=\"transition delay-700 duration-300 ease-in-out ...\">Button C</button>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:delay-300` to only apply the `delay-300` utility on hover.\n\n```\n<div class=\"transition duration-300 delay-150 hover:delay-300\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:delay-300` to apply the `delay-300` utility at only medium screen sizes and above.\n\n```\n<div class=\"transition duration-300 delay-150 md:delay-300\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides eight general purpose transition-delay utilities. You can customize these values by editing `theme.transitionDelay` or `theme.extend.transitionDelay` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `transition-delay` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"delay-[2000ms]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Transition Delay - Tailwind CSS",
    "description": "Utilities for controlling the delay of CSS transitions.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/forced-color-adjust",
    "markdown": "# Forced Color Adjust - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Opting out of forced colors](#opting-out-of-forced-colors)\n\nUse `forced-color-adjust-none` to opt an element out the colors enforced by [forced colors mode](https://tailwindcss.com/docs/hover-focus-and-other-states#forced-colors-mode). This is useful in situations where enforcing a limited color palette will degrade usability.\n\nTry emulating \\`forced-colors: active\\` in your developer tools to see the changes\n\n```\n<form>\n  <img src=\"...\" />\n  <div>\n    <h3>Basic Tee</h3>\n    <h3>$35</h3>\n    <fieldset>\n      <legend class=\"sr-only\">Choose a color</legend>\n      <div class=\"forced-color-adjust-none ...\">\n        <label >\n          <input class=\"sr-only\" type=\"radio\" name=\"color-choice\" value=\"White\" />\n          <span class=\"sr-only\">White</span>\n          <span class=\"size-6 rounded-full border border-black border-opacity-10 bg-white\"></span>\n        </label>\n        <!-- ... -->\n      </div>\n    </fieldset>\n</form>\n```\n\nYou can also use the [`forced-colors` modifier](https://tailwindcss.com/docs/hover-focus-and-other-states#forced-colors-mode) to conditionally add styles when the user has enabled a forced color mode.\n\n### [​Restoring forced colors](#restoring-forced-colors)\n\nUse `forced-color-adjust-auto` to undo `forced-color-adjust-none`, making an element adhere to colors enforced by forced colors mode.\n\nThis can be useful if you use a different control on a larger screen size for example:\n\n```\n<form>\n  <fieldset class=\"forced-color-adjust-none lg:forced-color-adjust-auto ...\">\n    <legend>Choose a color:</legend>\n    <select class=\"hidden lg:block\">\n      <option value=\"White\">White</option>\n      <option value=\"Gray\">Gray</option>\n      <option value=\"Black\">Black</option>\n    </select>\n    <div class=\"lg:hidden\">\n      <label>\n        <input class=\"sr-only\" type=\"radio\" name=\"color-choice\" value=\"White\" />\n        <!-- ... -->\n      </label>\n      <!-- ... -->\n    </div>\n  </fieldset>\n</form>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `focus:forced-color-adjust-none` to only apply the `forced-color-adjust-none` utility on focus.\n\n```\n<a href=\"#content\" class=\"forced-color-adjust-none focus:forced-color-adjust-auto\">\n  Skip to content\n</a>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:forced-color-adjust-auto` to apply the `forced-color-adjust-auto` utility at only medium screen sizes and above.\n\n```\n<div class=\"forced-color-adjust-none md:forced-color-adjust-auto\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Forced Color Adjust - Tailwind CSS",
    "description": "Utilities for opting in and out of forced colors.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/installation/using-postcss",
    "markdown": "# Install Tailwind CSS using PostCSS\n\n### Installing Tailwind CSS as a PostCSS plugin\n\nInstalling Tailwind CSS as a PostCSS plugin is the most seamless way to integrate it with build tools like webpack, Rollup, Vite, and Parcel.\n\n**Are you stuck?** Setting up Tailwind with PostCSS can be a bit different across different build tools. Check our framework guides to see if we have more specific instructions for your particular setup.[Explore our framework guides](https://tailwindcss.com/docs/installation/framework-guides)",
    "title": "Install Tailwind CSS using PostCSS - Tailwind CSS",
    "description": "Installing Tailwind CSS as a PostCSS plugin is the most seamless way to integrate it with build tools like webpack, Rollup, Vite, and Parcel.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/scale",
    "markdown": "# Scale - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Scaling an element](#scaling-an-element)\n\nUse the `scale-*`, `scale-x-*`, and `scale-y-*` utilities to scale an element.\n\n```\n<img class=\"scale-75 ...\">\n<img class=\"scale-100 ...\">\n<img class=\"scale-125 ...\">\n```\n\n### [​Using negative values](#using-negative-values)\n\nTo use a negative scale value, prefix the class name with a dash to convert it to a negative value.\n\n```\n<img class=\"-scale-50\">\n```\n\n### [​Removing transforms](#removing-transforms)\n\nTo remove all of the transforms on an element at once, use the `transform-none` utility:\n\n```\n<div class=\"scale-75 translate-x-4 skew-y-3 md:transform-none\">\n  <!-- ... -->\n</div>\n```\n\nThis can be useful when you want to remove transforms conditionally, such as on hover or at a particular breakpoint.\n\n### [​Hardware acceleration](#hardware-acceleration)\n\nIf your transition performs better when rendered by the GPU instead of the CPU, you can force hardware acceleration by adding the `transform-gpu` utility:\n\n```\n<div class=\"scale-150 transform-gpu\">\n  <!-- ... -->\n</div>\n```\n\nUse `transform-cpu` to force things back to the CPU if you need to undo this conditionally.\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:scale-125` to only apply the `scale-125` utility on hover.\n\n```\n<div class=\"hover:scale-125\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:scale-125` to apply the `scale-125` utility at only medium screen sizes and above.\n\n```\n<div class=\"md:scale-125\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind includes a handful of general purpose `scale` utilities. You can customize these values by editing `theme.scale` or `theme.extend.scale` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `scale` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"scale-[1.7]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Scale - Tailwind CSS",
    "description": "Utilities for scaling elements with transform.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/animation",
    "markdown": "# Animation - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Spin](#spin)\n\nAdd the `animate-spin` utility to add a linear spin animation to elements like loading indicators.\n\n```\n<button type=\"button\" class=\"bg-indigo-500 ...\" disabled>\n  <svg class=\"animate-spin h-5 w-5 mr-3 ...\" viewBox=\"0 0 24 24\">\n    <!-- ... -->\n  </svg>\n  Processing...\n</button>\n```\n\n### [​Ping](#ping)\n\nAdd the `animate-ping` utility to make an element scale and fade like a radar ping or ripple of water — useful for things like notification badges.\n\n```\n<span class=\"relative flex h-3 w-3\">\n  <span class=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-sky-400 opacity-75\"></span>\n  <span class=\"relative inline-flex rounded-full h-3 w-3 bg-sky-500\"></span>\n</span>\n```\n\n### [​Pulse](#pulse)\n\nAdd the `animate-pulse` utility to make an element gently fade in and out — useful for things like skeleton loaders.\n\n```\n<div class=\"border border-blue-300 shadow rounded-md p-4 max-w-sm w-full mx-auto\">\n  <div class=\"animate-pulse flex space-x-4\">\n    <div class=\"rounded-full bg-slate-200 h-10 w-10\"></div>\n    <div class=\"flex-1 space-y-6 py-1\">\n      <div class=\"h-2 bg-slate-200 rounded\"></div>\n      <div class=\"space-y-3\">\n        <div class=\"grid grid-cols-3 gap-4\">\n          <div class=\"h-2 bg-slate-200 rounded col-span-2\"></div>\n          <div class=\"h-2 bg-slate-200 rounded col-span-1\"></div>\n        </div>\n        <div class=\"h-2 bg-slate-200 rounded\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n### [​Bounce](#bounce)\n\nAdd the `animate-bounce` utility to make an element bounce up and down — useful for things like “scroll down” indicators.\n\n```\n<svg class=\"animate-bounce w-6 h-6 ...\">\n  <!-- ... -->\n</svg>\n```\n\n### [​Prefers-reduced-motion](#prefers-reduced-motion)\n\nFor situations where the user has specified that they prefer reduced motion, you can conditionally apply animations and transitions using the `motion-safe` and `motion-reduce` variants:\n\n```\n<button type=\"button\" class=\"bg-indigo-600 ...\" disabled>\n  <svg class=\"motion-safe:animate-spin h-5 w-5 mr-3 ...\" viewBox=\"0 0 24 24\">\n    <!-- ... -->\n  </svg>\n  Processing\n</button>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:animate-spin` to only apply the `animate-spin` utility on hover.\n\n```\n<div class=\"hover:animate-spin\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:animate-spin` to apply the `animate-spin` utility at only medium screen sizes and above.\n\n```\n<div class=\"md:animate-spin\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nAnimations by their very nature tend to be highly project-specific. **The animations we include by default are best thought of as helpful examples**, and you’re encouraged to customize your animations to better suit your needs.\n\nBy default, Tailwind provides utilities for four different example animations, as well as the `animate-none` utility. You can customize these values by editing `theme.animation` or `theme.extend.animation` in your `tailwind.config.js` file.\n\nTo add new animation `@keyframes`, use the `keyframes` section of your theme configuration:\n\nYou can then reference these keyframes by name in the `animation` section of your theme configuration:\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `animation` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"animate-[wiggle_1s_ease-in-out_infinite]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Animation - Tailwind CSS",
    "description": "Utilities for animating elements with CSS animations.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/installation/framework-guides",
    "markdown": "# Framework Guides - Tailwind CSS\n\n### Framework Guides\n\nFramework-specific guides that cover our recommended approach to installing Tailwind CSS in a number of popular environments.",
    "title": "Framework Guides - Tailwind CSS",
    "description": "Framework-specific guides that cover our recommended approach to installing Tailwind CSS in a number of popular environments.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/rotate",
    "markdown": "# Rotate - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Rotating an element](#rotating-an-element)\n\nUse the `rotate-*` utilities to rotate an element.\n\n```\n<img class=\"rotate-0 ...\">\n<img class=\"rotate-45 ...\">\n<img class=\"rotate-90 ...\">\n<img class=\"rotate-180 ...\">\n```\n\n### [​Using negative values](#using-negative-values)\n\nTo use a negative rotate value, prefix the class name with a dash to convert it to a negative value.\n\n```\n<img class=\"-rotate-45 ...\">\n```\n\n### [​Removing transforms](#removing-transforms)\n\nTo remove all of the transforms on an element at once, use the `transform-none` utility:\n\n```\n<div class=\"scale-75 translate-x-4 skew-y-3 md:transform-none\">\n  <!-- ... -->\n</div>\n```\n\nThis can be useful when you want to remove transforms conditionally, such as on hover or at a particular breakpoint.\n\n### [​Hardware acceleration](#hardware-acceleration)\n\nIf your transition performs better when rendered by the GPU instead of the CPU, you can force hardware acceleration by adding the `transform-gpu` utility:\n\n```\n<div class=\"rotate-45 transform-gpu\">\n  <!-- ... -->\n</div>\n```\n\nUse `transform-cpu` to force things back to the CPU if you need to undo this conditionally.\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:rotate-45` to only apply the `rotate-45` utility on hover.\n\n```\n<div class=\"hover:rotate-45\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:rotate-45` to apply the `rotate-45` utility at only medium screen sizes and above.\n\n```\n<div class=\"md:rotate-45\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind includes a handful of general purpose `rotate` utilities. You can customize these values by editing `theme.rotate` or `theme.extend.rotate` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `rotate` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"rotate-[17deg]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Rotate - Tailwind CSS",
    "description": "Utilities for rotating elements with transform.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/installation/play-cdn",
    "markdown": "# Try Tailwind CSS using the Play CDN\n\nInstallation\n\n## Get started with Tailwind CSS\n\nTailwind CSS works by scanning all of your HTML files, JavaScript components, and any other templates for class names, generating the corresponding styles and then writing them to a static CSS file.\n\nIt's fast, flexible, and reliable — with zero-runtime.\n\n### Play CDN\n\nUse the Play CDN to try Tailwind right in the browser without any build step. The Play CDN is designed for development purposes only, and is not the best choice for production.\n\n![](https://tailwindcss.com/_next/static/media/installation.50c59fdd.jpg)\n\n1.  #### Add the Play CDN script to your HTML\n    \n    Add the Play CDN script tag to the `<head>` of your HTML file, and start using Tailwind’s utility classes to style your content.\n    \n    ```\n    <!doctype html>\n    <html>\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <script src=\"https://cdn.tailwindcss.com\"></script>\n    </head>\n    <body>\n      <h1 class=\"text-3xl font-bold underline\">\n        Hello world!\n      </h1>\n    </body>\n    </html>\n    ```\n    \n2.  #### Try customizing your config\n    \n    ```\n    <!doctype html>\n    <html>\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <script src=\"https://cdn.tailwindcss.com\"></script>\n      <script>\n        tailwind.config = {\n          theme: {\n            extend: {\n              colors: {\n                clifford: '#da373d',\n              }\n            }\n          }\n        }\n      </script>\n    </head>\n    <body>\n      <h1 class=\"text-3xl font-bold underline text-clifford\">\n        Hello world!\n      </h1>\n    </body>\n    </html>\n    ```\n    \n3.  #### Try adding some custom CSS\n    \n    Use `type=\"text/tailwindcss\"` to add custom CSS that supports all of Tailwind's CSS features.\n    \n    ```\n    <!doctype html>\n    <html>\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <script src=\"https://cdn.tailwindcss.com\"></script>\n      <style type=\"text/tailwindcss\">\n        @layer utilities {\n          .content-auto {\n            content-visibility: auto;\n          }\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"lg:content-auto\">\n        <!-- ... -->\n      </div>\n    </body>\n    </html>\n    ```\n    \n4.  #### Try using a first-party plugin\n    \n    Enable first-party plugins, like forms and typography, using the `plugins` query parameter.\n    \n    ```\n    <!doctype html>\n    <html>\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <script src=\"https://cdn.tailwindcss.com?plugins=forms,typography,aspect-ratio,line-clamp,container-queries\"></script>\n    </head>\n    <body>\n      <div class=\"prose\">\n        <!-- ... -->\n      </div>\n    </body>\n    </html>\n    ```\n    \n\n## What to read next\n\nGet familiar with some of the core concepts that make Tailwind CSS different from writing traditional CSS.\n\n*   ### [Utility-First Fundamentals](https://tailwindcss.com/docs/utility-first)\n    \n    Using a utility-first workflow to build complex components from a constrained set of primitive utilities.\n    \n*   ### [Responsive Design](https://tailwindcss.com/docs/responsive-design)\n    \n    Build fully responsive user interfaces that adapt to any screen size using responsive modifiers.\n    \n\n*   ### [Dark Mode](https://tailwindcss.com/docs/dark-mode)\n    \n    Optimize your site for dark mode directly in your HTML using the dark mode modifier.\n    \n*   ### [Reusing Styles](https://tailwindcss.com/docs/reusing-styles)\n    \n    Manage duplication and keep your projects maintainable by creating reusable abstractions.",
    "title": "Try Tailwind CSS using the Play CDN - Tailwind CSS",
    "description": "Use the Play CDN to try Tailwind right in the browser without any build step.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/skew",
    "markdown": "# Skew - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Skewing an element](#skewing-an-element)\n\nUse the `skew-x-*` and `skew-y-*` utilities to skew an element.\n\n```\n<img class=\"skew-y-0 ...\">\n<img class=\"skew-y-3 ...\">\n<img class=\"skew-y-6 ...\">\n<img class=\"skew-y-12 ...\">\n```\n\n### [​Using negative values](#using-negative-values)\n\nTo use a negative skew value, prefix the class name with a dash to convert it to a negative value.\n\n```\n<img class=\"-skew-y-6 ...\">\n```\n\n### [​Removing transforms](#removing-transforms)\n\nTo remove all of the transforms on an element at once, use the `transform-none` utility:\n\n```\n<div class=\"scale-75 translate-x-4 skew-y-3 md:transform-none\">\n  <!-- ... -->\n</div>\n```\n\nThis can be useful when you want to remove transforms conditionally, such as on hover or at a particular breakpoint.\n\n### [​Hardware acceleration](#hardware-acceleration)\n\nIf your transition performs better when rendered by the GPU instead of the CPU, you can force hardware acceleration by adding the `transform-gpu` utility:\n\n```\n<div class=\"skew-y-6 transform-gpu\">\n  <!-- ... -->\n</div>\n```\n\nUse `transform-cpu` to force things back to the CPU if you need to undo this conditionally.\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:skew-y-12` to only apply the `skew-y-12` utility on hover.\n\n```\n<div class=\"hover:skew-y-12\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:skew-y-12` to apply the `skew-y-12` utility at only medium screen sizes and above.\n\n```\n<div class=\"md:skew-y-12\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind includes a handful of general purpose `skew` utilities. You can customize these values by editing `theme.skew` or `theme.extend.skew` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `skew` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"skew-y-[17deg]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Skew - Tailwind CSS",
    "description": "Utilities for skewing elements with transform.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/translate",
    "markdown": "# Translate - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Translating an element](#translating-an-element)\n\nUse the `translate-x-*` and `translate-y-*` utilities to translate an element.\n\n```\n<img class=\"translate-y-6 ...\">\n<img class=\"-translate-y-6 ...\">\n<img class=\"translate-x-6 ...\">\n```\n\n### [​Using negative values](#using-negative-values)\n\nTo use a negative translate value, prefix the class name with a dash to convert it to a negative value.\n\n```\n<img class=\"-translate-y-6 ...\">\n```\n\n### [​Removing transforms](#removing-transforms)\n\nTo remove all of the transforms on an element at once, use the `transform-none` utility:\n\n```\n<div class=\"scale-75 translate-x-4 skew-y-3 md:transform-none\">\n  <!-- ... -->\n</div>\n```\n\nThis can be useful when you want to remove transforms conditionally, such as on hover or at a particular breakpoint.\n\n### [​Hardware acceleration](#hardware-acceleration)\n\nIf your transition performs better when rendered by the GPU instead of the CPU, you can force hardware acceleration by adding the `transform-gpu` utility:\n\n```\n<div class=\"translate-y-6 transform-gpu\">\n  <!-- ... -->\n</div>\n```\n\nUse `transform-cpu` to force things back to the CPU if you need to undo this conditionally.\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:translate-y-12` to only apply the `translate-y-12` utility on hover.\n\n```\n<div class=\"hover:translate-y-12\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:translate-y-12` to apply the `translate-y-12` utility at only medium screen sizes and above.\n\n```\n<div class=\"md:translate-y-12\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides fixed value `translate` utilities that match the [default spacing scale](https://tailwindcss.com/docs/customizing-spacing), as well as 50% and 100% variations for translating relative to the element’s size. You can customize your spacing scale by editing `theme.spacing` or `theme.extend.spacing` in your `tailwind.config.js` file.\n\nAlternatively, you can customize just the translate scale by editing `theme.translate` or `theme.extend.translate` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off translate value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"translate-y-[17rem]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Translate - Tailwind CSS",
    "description": "Utilities for translating elements with transform.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/transform-origin",
    "markdown": "# Transform Origin - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Changing the transform origin](#changing-the-transform-origin)\n\nSpecify an element’s transform origin using the `origin-*` utilities.\n\n```\n<img class=\"origin-center rotate-45 ...\">\n<img class=\"origin-top-left rotate-12 ...\">\n<img class=\"origin-bottom -rotate-12 ...\">\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:origin-top` to only apply the `origin-top` utility on hover.\n\n```\n<div class=\"origin-center hover:origin-top\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:origin-top` to apply the `origin-top` utility at only medium screen sizes and above.\n\n```\n<div class=\"origin-center md:origin-top\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind provides `transform-origin` utilities for all of the built-in browser keyword options. You can customize these values by editing `theme.transformOrigin` or `theme.extend.transformOrigin` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `transform-origin` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"origin-[33%_75%]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Transform Origin - Tailwind CSS",
    "description": "Utilities for specifying the origin for an element's transformations.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/ring-color",
    "markdown": "# Ring Color - Tailwind CSS\n\nring-inherit--tw-ring-color: inherit; ring-current--tw-ring-color: currentColor; ring-transparent--tw-ring-color: transparent; ring-black--tw-ring-color: rgb(0 0 0); ring-white--tw-ring-color: rgb(255 255 255); ring-slate-50--tw-ring-color: rgb(248 250 252); ring-slate-100--tw-ring-color: rgb(241 245 249); ring-slate-200--tw-ring-color: rgb(226 232 240); ring-slate-300--tw-ring-color: rgb(203 213 225); ring-slate-400--tw-ring-color: rgb(148 163 184); ring-slate-500--tw-ring-color: rgb(100 116 139); ring-slate-600--tw-ring-color: rgb(71 85 105); ring-slate-700--tw-ring-color: rgb(51 65 85); ring-slate-800--tw-ring-color: rgb(30 41 59); ring-slate-900--tw-ring-color: rgb(15 23 42); ring-slate-950--tw-ring-color: rgb(2 6 23); ring-gray-50--tw-ring-color: rgb(249 250 251); ring-gray-100--tw-ring-color: rgb(243 244 246); ring-gray-200--tw-ring-color: rgb(229 231 235); ring-gray-300--tw-ring-color: rgb(209 213 219); ring-gray-400--tw-ring-color: rgb(156 163 175); ring-gray-500--tw-ring-color: rgb(107 114 128); ring-gray-600--tw-ring-color: rgb(75 85 99); ring-gray-700--tw-ring-color: rgb(55 65 81); ring-gray-800--tw-ring-color: rgb(31 41 55); ring-gray-900--tw-ring-color: rgb(17 24 39); ring-gray-950--tw-ring-color: rgb(3 7 18); ring-zinc-50--tw-ring-color: rgb(250 250 250); ring-zinc-100--tw-ring-color: rgb(244 244 245); ring-zinc-200--tw-ring-color: rgb(228 228 231); ring-zinc-300--tw-ring-color: rgb(212 212 216); ring-zinc-400--tw-ring-color: rgb(161 161 170); ring-zinc-500--tw-ring-color: rgb(113 113 122); ring-zinc-600--tw-ring-color: rgb(82 82 91); ring-zinc-700--tw-ring-color: rgb(63 63 70); ring-zinc-800--tw-ring-color: rgb(39 39 42); ring-zinc-900--tw-ring-color: rgb(24 24 27); ring-zinc-950--tw-ring-color: rgb(9 9 11); ring-neutral-50--tw-ring-color: rgb(250 250 250); ring-neutral-100--tw-ring-color: rgb(245 245 245); ring-neutral-200--tw-ring-color: rgb(229 229 229); ring-neutral-300--tw-ring-color: rgb(212 212 212); ring-neutral-400--tw-ring-color: rgb(163 163 163); ring-neutral-500--tw-ring-color: rgb(115 115 115); ring-neutral-600--tw-ring-color: rgb(82 82 82); ring-neutral-700--tw-ring-color: rgb(64 64 64); ring-neutral-800--tw-ring-color: rgb(38 38 38); ring-neutral-900--tw-ring-color: rgb(23 23 23); ring-neutral-950--tw-ring-color: rgb(10 10 10); ring-stone-50--tw-ring-color: rgb(250 250 249); ring-stone-100--tw-ring-color: rgb(245 245 244); ring-stone-200--tw-ring-color: rgb(231 229 228); ring-stone-300--tw-ring-color: rgb(214 211 209); ring-stone-400--tw-ring-color: rgb(168 162 158); ring-stone-500--tw-ring-color: rgb(120 113 108); ring-stone-600--tw-ring-color: rgb(87 83 78); ring-stone-700--tw-ring-color: rgb(68 64 60); ring-stone-800--tw-ring-color: rgb(41 37 36); ring-stone-900--tw-ring-color: rgb(28 25 23); ring-stone-950--tw-ring-color: rgb(12 10 9); ring-red-50--tw-ring-color: rgb(254 242 242); ring-red-100--tw-ring-color: rgb(254 226 226); ring-red-200--tw-ring-color: rgb(254 202 202); ring-red-300--tw-ring-color: rgb(252 165 165); ring-red-400--tw-ring-color: rgb(248 113 113); ring-red-500--tw-ring-color: rgb(239 68 68); ring-red-600--tw-ring-color: rgb(220 38 38); ring-red-700--tw-ring-color: rgb(185 28 28); ring-red-800--tw-ring-color: rgb(153 27 27); ring-red-900--tw-ring-color: rgb(127 29 29); ring-red-950--tw-ring-color: rgb(69 10 10); ring-orange-50--tw-ring-color: rgb(255 247 237); ring-orange-100--tw-ring-color: rgb(255 237 213); ring-orange-200--tw-ring-color: rgb(254 215 170); ring-orange-300--tw-ring-color: rgb(253 186 116); ring-orange-400--tw-ring-color: rgb(251 146 60); ring-orange-500--tw-ring-color: rgb(249 115 22); ring-orange-600--tw-ring-color: rgb(234 88 12); ring-orange-700--tw-ring-color: rgb(194 65 12); ring-orange-800--tw-ring-color: rgb(154 52 18); ring-orange-900--tw-ring-color: rgb(124 45 18); ring-orange-950--tw-ring-color: rgb(67 20 7); ring-amber-50--tw-ring-color: rgb(255 251 235); ring-amber-100--tw-ring-color: rgb(254 243 199); ring-amber-200--tw-ring-color: rgb(253 230 138); ring-amber-300--tw-ring-color: rgb(252 211 77); ring-amber-400--tw-ring-color: rgb(251 191 36); ring-amber-500--tw-ring-color: rgb(245 158 11); ring-amber-600--tw-ring-color: rgb(217 119 6); ring-amber-700--tw-ring-color: rgb(180 83 9); ring-amber-800--tw-ring-color: rgb(146 64 14); ring-amber-900--tw-ring-color: rgb(120 53 15); ring-amber-950--tw-ring-color: rgb(69 26 3); ring-yellow-50--tw-ring-color: rgb(254 252 232); ring-yellow-100--tw-ring-color: rgb(254 249 195); ring-yellow-200--tw-ring-color: rgb(254 240 138); ring-yellow-300--tw-ring-color: rgb(253 224 71); ring-yellow-400--tw-ring-color: rgb(250 204 21); ring-yellow-500--tw-ring-color: rgb(234 179 8); ring-yellow-600--tw-ring-color: rgb(202 138 4); ring-yellow-700--tw-ring-color: rgb(161 98 7); ring-yellow-800--tw-ring-color: rgb(133 77 14); ring-yellow-900--tw-ring-color: rgb(113 63 18); ring-yellow-950--tw-ring-color: rgb(66 32 6); ring-lime-50--tw-ring-color: rgb(247 254 231); ring-lime-100--tw-ring-color: rgb(236 252 203); ring-lime-200--tw-ring-color: rgb(217 249 157); ring-lime-300--tw-ring-color: rgb(190 242 100); ring-lime-400--tw-ring-color: rgb(163 230 53); ring-lime-500--tw-ring-color: rgb(132 204 22); ring-lime-600--tw-ring-color: rgb(101 163 13); ring-lime-700--tw-ring-color: rgb(77 124 15); ring-lime-800--tw-ring-color: rgb(63 98 18); ring-lime-900--tw-ring-color: rgb(54 83 20); ring-lime-950--tw-ring-color: rgb(26 46 5); ring-green-50--tw-ring-color: rgb(240 253 244); ring-green-100--tw-ring-color: rgb(220 252 231); ring-green-200--tw-ring-color: rgb(187 247 208); ring-green-300--tw-ring-color: rgb(134 239 172); ring-green-400--tw-ring-color: rgb(74 222 128); ring-green-500--tw-ring-color: rgb(34 197 94); ring-green-600--tw-ring-color: rgb(22 163 74); ring-green-700--tw-ring-color: rgb(21 128 61); ring-green-800--tw-ring-color: rgb(22 101 52); ring-green-900--tw-ring-color: rgb(20 83 45); ring-green-950--tw-ring-color: rgb(5 46 22); ring-emerald-50--tw-ring-color: rgb(236 253 245); ring-emerald-100--tw-ring-color: rgb(209 250 229); ring-emerald-200--tw-ring-color: rgb(167 243 208); ring-emerald-300--tw-ring-color: rgb(110 231 183); ring-emerald-400--tw-ring-color: rgb(52 211 153); ring-emerald-500--tw-ring-color: rgb(16 185 129); ring-emerald-600--tw-ring-color: rgb(5 150 105); ring-emerald-700--tw-ring-color: rgb(4 120 87); ring-emerald-800--tw-ring-color: rgb(6 95 70); ring-emerald-900--tw-ring-color: rgb(6 78 59); ring-emerald-950--tw-ring-color: rgb(2 44 34); ring-teal-50--tw-ring-color: rgb(240 253 250); ring-teal-100--tw-ring-color: rgb(204 251 241); ring-teal-200--tw-ring-color: rgb(153 246 228); ring-teal-300--tw-ring-color: rgb(94 234 212); ring-teal-400--tw-ring-color: rgb(45 212 191); ring-teal-500--tw-ring-color: rgb(20 184 166); ring-teal-600--tw-ring-color: rgb(13 148 136); ring-teal-700--tw-ring-color: rgb(15 118 110); ring-teal-800--tw-ring-color: rgb(17 94 89); ring-teal-900--tw-ring-color: rgb(19 78 74); ring-teal-950--tw-ring-color: rgb(4 47 46); ring-cyan-50--tw-ring-color: rgb(236 254 255); ring-cyan-100--tw-ring-color: rgb(207 250 254); ring-cyan-200--tw-ring-color: rgb(165 243 252); ring-cyan-300--tw-ring-color: rgb(103 232 249); ring-cyan-400--tw-ring-color: rgb(34 211 238); ring-cyan-500--tw-ring-color: rgb(6 182 212); ring-cyan-600--tw-ring-color: rgb(8 145 178); ring-cyan-700--tw-ring-color: rgb(14 116 144); ring-cyan-800--tw-ring-color: rgb(21 94 117); ring-cyan-900--tw-ring-color: rgb(22 78 99); ring-cyan-950--tw-ring-color: rgb(8 51 68); ring-sky-50--tw-ring-color: rgb(240 249 255); ring-sky-100--tw-ring-color: rgb(224 242 254); ring-sky-200--tw-ring-color: rgb(186 230 253); ring-sky-300--tw-ring-color: rgb(125 211 252); ring-sky-400--tw-ring-color: rgb(56 189 248); ring-sky-500--tw-ring-color: rgb(14 165 233); ring-sky-600--tw-ring-color: rgb(2 132 199); ring-sky-700--tw-ring-color: rgb(3 105 161); ring-sky-800--tw-ring-color: rgb(7 89 133); ring-sky-900--tw-ring-color: rgb(12 74 110); ring-sky-950--tw-ring-color: rgb(8 47 73); ring-blue-50--tw-ring-color: rgb(239 246 255); ring-blue-100--tw-ring-color: rgb(219 234 254); ring-blue-200--tw-ring-color: rgb(191 219 254); ring-blue-300--tw-ring-color: rgb(147 197 253); ring-blue-400--tw-ring-color: rgb(96 165 250); ring-blue-500--tw-ring-color: rgb(59 130 246); ring-blue-600--tw-ring-color: rgb(37 99 235); ring-blue-700--tw-ring-color: rgb(29 78 216); ring-blue-800--tw-ring-color: rgb(30 64 175); ring-blue-900--tw-ring-color: rgb(30 58 138); ring-blue-950--tw-ring-color: rgb(23 37 84); ring-indigo-50--tw-ring-color: rgb(238 242 255); ring-indigo-100--tw-ring-color: rgb(224 231 255); ring-indigo-200--tw-ring-color: rgb(199 210 254); ring-indigo-300--tw-ring-color: rgb(165 180 252); ring-indigo-400--tw-ring-color: rgb(129 140 248); ring-indigo-500--tw-ring-color: rgb(99 102 241); ring-indigo-600--tw-ring-color: rgb(79 70 229); ring-indigo-700--tw-ring-color: rgb(67 56 202); ring-indigo-800--tw-ring-color: rgb(55 48 163); ring-indigo-900--tw-ring-color: rgb(49 46 129); ring-indigo-950--tw-ring-color: rgb(30 27 75); ring-violet-50--tw-ring-color: rgb(245 243 255); ring-violet-100--tw-ring-color: rgb(237 233 254); ring-violet-200--tw-ring-color: rgb(221 214 254); ring-violet-300--tw-ring-color: rgb(196 181 253); ring-violet-400--tw-ring-color: rgb(167 139 250); ring-violet-500--tw-ring-color: rgb(139 92 246); ring-violet-600--tw-ring-color: rgb(124 58 237); ring-violet-700--tw-ring-color: rgb(109 40 217); ring-violet-800--tw-ring-color: rgb(91 33 182); ring-violet-900--tw-ring-color: rgb(76 29 149); ring-violet-950--tw-ring-color: rgb(46 16 101); ring-purple-50--tw-ring-color: rgb(250 245 255); ring-purple-100--tw-ring-color: rgb(243 232 255); ring-purple-200--tw-ring-color: rgb(233 213 255); ring-purple-300--tw-ring-color: rgb(216 180 254); ring-purple-400--tw-ring-color: rgb(192 132 252); ring-purple-500--tw-ring-color: rgb(168 85 247); ring-purple-600--tw-ring-color: rgb(147 51 234); ring-purple-700--tw-ring-color: rgb(126 34 206); ring-purple-800--tw-ring-color: rgb(107 33 168); ring-purple-900--tw-ring-color: rgb(88 28 135); ring-purple-950--tw-ring-color: rgb(59 7 100); ring-fuchsia-50--tw-ring-color: rgb(253 244 255); ring-fuchsia-100--tw-ring-color: rgb(250 232 255); ring-fuchsia-200--tw-ring-color: rgb(245 208 254); ring-fuchsia-300--tw-ring-color: rgb(240 171 252); ring-fuchsia-400--tw-ring-color: rgb(232 121 249); ring-fuchsia-500--tw-ring-color: rgb(217 70 239); ring-fuchsia-600--tw-ring-color: rgb(192 38 211); ring-fuchsia-700--tw-ring-color: rgb(162 28 175); ring-fuchsia-800--tw-ring-color: rgb(134 25 143); ring-fuchsia-900--tw-ring-color: rgb(112 26 117); ring-fuchsia-950--tw-ring-color: rgb(74 4 78); ring-pink-50--tw-ring-color: rgb(253 242 248); ring-pink-100--tw-ring-color: rgb(252 231 243); ring-pink-200--tw-ring-color: rgb(251 207 232); ring-pink-300--tw-ring-color: rgb(249 168 212); ring-pink-400--tw-ring-color: rgb(244 114 182); ring-pink-500--tw-ring-color: rgb(236 72 153); ring-pink-600--tw-ring-color: rgb(219 39 119); ring-pink-700--tw-ring-color: rgb(190 24 93); ring-pink-800--tw-ring-color: rgb(157 23 77); ring-pink-900--tw-ring-color: rgb(131 24 67); ring-pink-950--tw-ring-color: rgb(80 7 36); ring-rose-50--tw-ring-color: rgb(255 241 242); ring-rose-100--tw-ring-color: rgb(255 228 230); ring-rose-200--tw-ring-color: rgb(254 205 211); ring-rose-300--tw-ring-color: rgb(253 164 175); ring-rose-400--tw-ring-color: rgb(251 113 133); ring-rose-500--tw-ring-color: rgb(244 63 94); ring-rose-600--tw-ring-color: rgb(225 29 72); ring-rose-700--tw-ring-color: rgb(190 18 60); ring-rose-800--tw-ring-color: rgb(159 18 57); ring-rose-900--tw-ring-color: rgb(136 19 55); ring-rose-950--tw-ring-color: rgb(76 5 25);",
    "title": "Ring Color - Tailwind CSS",
    "description": "Utilities for setting the color of outline rings.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/accent-color",
    "markdown": "# Accent Color - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the accent color](#setting-the-accent-color)\n\nUse the `accent-*` utilities to change the accent color of an element. This is helpful for styling elements like checkboxes and radio groups by overriding the browser’s default color.\n\n```\n<label>\n  <input type=\"checkbox\" checked> Browser default\n</label>\n<label>\n  <input type=\"checkbox\" class=\"accent-pink-500\" checked> Customized\n</label>\n```\n\n### [​Changing the opacity](#changing-the-opacity)\n\nWhile it’s possible to control the opacity of the accent color using the color opacity modifier, the `rgba()` alpha value is only supported in Firefox at this time _(last tested November 2021)_.\n\n```\n<input type=\"checkbox\" class=\"accent-emerald-500/25\" checked> Emerald\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:accent-pink-500` to only apply the `accent-pink-500` utility on hover.\n\n```\n<input type=\"checkbox\" class=\"accent-pink-300 focus:accent-pink-500\" checked>\n```\n\nNote, while it’s possible to set an accent color using the `hover` and `active` modifiers, the resulting color will be slightly different than what you set, as browsers automatically adjust the brightness of the accent color for these two states.\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:accent-pink-500` to apply the `accent-pink-500` utility at only medium screen sizes and above.\n\n```\n<input type=\"checkbox\" class=\"accent-pink-300 md:accent-pink-500\" checked>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind makes the entire [default color palette](https://tailwindcss.com/docs/customizing-colors#default-color-palette) available as accent colors. You can [customize your color palette](https://tailwindcss.com/docs/colors#customizing) by editing `theme.colors` or `theme.extend.colors` in your `tailwind.config.js` file.\n\nAlternatively, you can customize just your accent colors by editing `theme.accentColor` or `theme.extend.accentColor` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `accent-color` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<input type=\"checkbox\" class=\"accent-[#50d71e]\" checked>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Accent Color - Tailwind CSS",
    "description": "Utilities for controlling the accented color of a form control.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/appearance",
    "markdown": "# Appearance - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Removing default element appearance](#removing-default-element-appearance)\n\nUse `appearance-none` to reset any browser specific styling on an element. This utility is often used when creating [custom form components](https://tailwindcss.com/docs/examples/forms).\n\n```\n<select>\n  <option>Yes</option>\n  <option>No</option>\n  <option>Maybe</option>\n</select>\n\n<div class=\"grid\">\n  <select class=\"appearance-none row-start-1 col-start-1 bg-slate-50 dark:bg-slate-800 ...\">\n    <option>Yes</option>\n    <option>No</option>\n    <option>Maybe</option>\n  </select>\n  <svg class=\"pointer-events-none row-start-1 col-start-1 ...\">\n    <!-- ... -->\n  </svg>\n</div>\n```\n\n### [​Restoring the default element appearance](#restoring-the-default-element-appearance)\n\nUse `appearance-auto` to restore the default browser specific styling on an element. This is useful for reverting to the standard browser controls in certain accessibility modes.\n\nTry emulating \\`forced-colors: active\\` in your developer tools to see the difference\n\n```\n<label>\n  <div>\n    <input type=\"checkbox\" class=\"appearance-none forced-colors:appearance-auto ...\" />\n    <svg class=\"invisible peer-checked:visible forced-colors:hidden ...\" >\n      <!-- ... -->\n    </svg>\n  </div>\n  Falls back to default appearance\n</label>\n\n<label>\n  <div>\n    <input type=\"checkbox\" class=\"appearance-none ...\" />\n    <svg class=\"invisible peer-checked:visible ...\">\n      <!-- ... -->\n    </svg>\n  </div>\n  Keeps custom appearance\n</label>\n```\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:appearance-none` to only apply the `appearance-none` utility on hover.\n\n```\n<div class=\"appearance-auto hover:appearance-none\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:appearance-none` to apply the `appearance-none` utility at only medium screen sizes and above.\n\n```\n<div class=\"appearance-auto md:appearance-none\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Appearance - Tailwind CSS",
    "description": "Utilities for suppressing native form control styling.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/cursor",
    "markdown": "# Cursor - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the cursor style](#setting-the-cursor-style)\n\nUse the `cursor-*` utilities to control which cursor is displayed when hovering over an element.\n\nHover over each button to see the cursor change\n\n```\n<button type=\"button\" class=\"cursor-pointer ...\">\n  Submit\n</button>\n<button type=\"button\" class=\"cursor-progress ...\">\n  Saving...\n</button>\n<button type=\"button\" disabled class=\"cursor-not-allowed ...\">\n  Confirm\n</button>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `focus:cursor-auto` to only apply the `cursor-auto` utility on focus.\n\n```\n<div class=\"cursor-not-allowed focus:cursor-auto\">\n  <!-- ... -->\n</div>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:cursor-auto` to apply the `cursor-auto` utility at only medium screen sizes and above.\n\n```\n<div class=\"cursor-not-allowed md:cursor-auto\">\n  <!-- ... -->\n</div>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nBy default, Tailwind includes `cursor` utilities for many built in options. You can customize these values by editing `theme.cursor` or `theme.extend.cursor` in your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `cursor` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"cursor-[url(hand.cur),_pointer]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Cursor - Tailwind CSS",
    "description": "Utilities for controlling the cursor style when hovering over an element.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/ring-offset-width",
    "markdown": "# Ring Offset Width - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Setting the ring offset width](#setting-the-ring-offset-width)\n\nUse utilities like `ring-offset-2` and `ring-offset-4` to simulate an offset by adding solid white box-shadow and increasing the thickness of the accompanying outline ring to accommodate the offset.\n\n```\n<button class=\"... ring ring-pink-500 ring-offset-0\">Button A</button>\n<button class=\"... ring ring-pink-500 ring-offset-2\">Button B</button>\n<button class=\"... ring ring-pink-500 ring-offset-4\">Button C</button>\n```\n\n### [​Changing the offset color](#changing-the-offset-color)\n\nYou can’t actually offset a box-shadow in CSS, so we have to fake it using a solid color shadow that matches the parent background color. We use white by default, but if you are adding a ring offset over a different background color, use the ring offset color utilities, like `ring-offset-slate-50`, to match the parent background color:\n\n```\n<button class=\"ring ring-pink-500 ring-offset-2 ring-offset-slate-50 dark:ring-offset-slate-900 ...\">\n  Save Changes\n</button>\n```\n\nFor more information, see the [ring offset color](https://tailwindcss.com/docs/ring-offset-color) documentation.\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:ring-offset-4` to only apply the `ring-offset-4` utility on hover.\n\n```\n<button class=\"ring-2 ring-offset-2 hover:ring-offset-4\">\n  <!-- ... -->\n</button>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:ring-offset-4` to apply the `ring-offset-4` utility at only medium screen sizes and above.\n\n```\n<button class=\"ring-2 ring-offset-2 md:ring-offset-4\">\n  <!-- ... -->\n</button>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).\n\n* * *\n\n## [​Using custom values](#using-custom-values)\n\n### [​Customizing your theme](#customizing-your-theme)\n\nTo customize which ring offset width utilities are generated, add your custom values under `ringOffsetWidth` key in the `theme` section of your `tailwind.config.js` file.\n\nLearn more about customizing the default theme in the [theme customization](https://tailwindcss.com/docs/theme#customizing-the-default-theme) documentation.\n\n### [​Arbitrary values](#arbitrary-values)\n\nIf you need to use a one-off `ring-offset` value that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value.\n\n```\n<div class=\"ring-offset-[3px]\">\n  <!-- ... -->\n</div>\n```\n\nLearn more about arbitrary value support in the [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values) documentation.",
    "title": "Ring Offset Width - Tailwind CSS",
    "description": "Utilities for simulating an offset when adding outline rings.",
    "languageCode": "en"
  },
  {
    "url": "https://tailwindcss.com/docs/table-layout",
    "markdown": "# Table Layout - Tailwind CSS\n\n## [​Basic usage](#basic-usage)\n\n### [​Auto](#auto)\n\nUse `table-auto` to allow the table to automatically size columns to fit the contents of the cell.\n\n```\n<table class=\"table-auto\">\n  <thead>\n    <tr>\n      <th>Song</th>\n      <th>Artist</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>The Sliding Mr. Bones (Next Stop, Pottersville)</td>\n      <td>Malcolm Lockyer</td>\n      <td>1961</td>\n    </tr>\n    <tr>\n      <td>Witchy Woman</td>\n      <td>The Eagles</td>\n      <td>1972</td>\n    </tr>\n    <tr>\n      <td>Shining Star</td>\n      <td>Earth, Wind, and Fire</td>\n      <td>1975</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n### [​Fixed](#fixed)\n\nUse `table-fixed` to allow the table to ignore the content and use fixed widths for columns. The width of the first row will set the column widths for the whole table.\n\nYou can manually set the widths for some columns and the rest of the available width will be divided evenly amongst the columns without explicit width.\n\n```\n<table class=\"table-fixed\">\n  <thead>\n    <tr>\n      <th>Song</th>\n      <th>Artist</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>The Sliding Mr. Bones (Next Stop, Pottersville)</td>\n      <td>Malcolm Lockyer</td>\n      <td>1961</td>\n    </tr>\n    <tr>\n      <td>Witchy Woman</td>\n      <td>The Eagles</td>\n      <td>1972</td>\n    </tr>\n    <tr>\n      <td>Shining Star</td>\n      <td>Earth, Wind, and Fire</td>\n      <td>1975</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n* * *\n\n## [​Applying conditionally](#applying-conditionally)\n\n### [​Hover, focus, and other states](#hover-focus-and-other-states)\n\nTailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use `hover:table-fixed` to only apply the `table-fixed` utility on hover.\n\n```\n<table class=\"hover:table-fixed\">\n  <!-- ... -->\n</table>\n```\n\nFor a complete list of all available state modifiers, check out the [Hover, Focus, & Other States](https://tailwindcss.com/docs/hover-focus-and-other-states) documentation.\n\n### [​Breakpoints and media queries](#breakpoints-and-media-queries)\n\nYou can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use `md:table-fixed` to apply the `table-fixed` utility at only medium screen sizes and above.\n\n```\n<table class=\"md:table-fixed\">\n  <!-- ... -->\n</table>\n```\n\nTo learn more, check out the documentation on [Responsive Design](https://tailwindcss.com/docs/responsive-design), [Dark Mode](https://tailwindcss.com/docs/dark-mode) and [other media query modifiers](https://tailwindcss.com/docs/hover-focus-and-other-states#media-and-feature-queries).",
    "title": "Table Layout - Tailwind CSS",
    "description": "Utilities for controlling the table layout algorithm.",
    "languageCode": "en"
  }
]