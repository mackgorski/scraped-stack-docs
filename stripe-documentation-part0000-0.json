[{
  "url": "https://docs.stripe.com/",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/52d6e32f24e1d2872960ba1d0cb8aac5.webp)\n\n## Documentation\n\nExplore our guides and examples to integrate Stripe.\n\n[\n\nGet started with payments\n\n\n\n](https://docs.stripe.com/payments?payments=popular)\n\n[\n\nExplore all products\n\n\n\n](#products)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F) or [create an account](https://dashboard.stripe.com/register) to load your test API keys.\n\n[\n\nTest cards\n\n\n\n](https://docs.stripe.com/testing#cards)\n\n## No-code\n\n*   [Sell and get paid online](https://docs.stripe.com/no-code/payment-links)\n*   [Invoice clients and customers](https://docs.stripe.com/no-code/invoices)\n*   [Set up recurring payments](https://docs.stripe.com/no-code/subscriptions)\n\n## Stripe hosted\n\n*   [Use a prebuilt checkout page](https://docs.stripe.com/payments/checkout)\n*   [Set up the customer portal](https://docs.stripe.com/no-code/customer-portal)\n*   [Create pricing table](https://docs.stripe.com/no-code/pricing-table)\n\n## For developers\n\n*   [API reference](https://docs.stripe.com/api)\n*   [Development quickstart](https://docs.stripe.com/get-started/development-environment)\n*   [Browse our sample projects](https://docs.stripe.com/samples)\n\n## Try it out\n\n[](https://docs.stripe.com/stripe-cli#install)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F) to edit real requests.\n\n[\n\nLearn more about Payment Intents\n\n\n\n](https://docs.stripe.com/payments/payment-intents)\n\n## Browse by product![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments\n\n[\n\nPaymentsOnline payments\n\n\n\n](https://docs.stripe.com/payments)[\n\nTerminalIn-person and omnichannel payments\n\n\n\n](https://docs.stripe.com/terminal)[\n\nConnectPayments for platforms\n\n\n\n](https://docs.stripe.com/connect)[\n\nRadarFraud and risk management\n\n\n\n](https://docs.stripe.com/radar)[\n\nClimateCarbon removal\n\n\n\n](https://docs.stripe.com/climate/faqs)[\n\nIdentityOnline identity verification\n\n\n\n](https://docs.stripe.com/identity)[\n\nFinancial ConnectionsConnect users' financial accounts\n\n\n\n](https://docs.stripe.com/financial-connections)\n\nFinance automation\n\n[\n\nBillingSubscriptions and recurring payments\n\n\n\n](https://docs.stripe.com/billing)[\n\nTaxSales tax and VAT automation\n\n\n\n](https://docs.stripe.com/tax)[\n\nRevenue RecognitionAccounting automation\n\n\n\n](https://docs.stripe.com/billing/revenue-recognition)[\n\nSigmaCustom reports\n\n\n\n](https://docs.stripe.com/stripe-data/access-data-in-dashboard)[\n\nData PipelineData warehouse sync\n\n\n\n](https://docs.stripe.com/stripe-data/access-data-in-warehouse)[\n\nAtlasStartup incorporation\n\n\n\n](https://docs.stripe.com/atlas)\n\nBanking as a service\n\n[\n\nIssuingCard creation\n\n\n\n](https://docs.stripe.com/issuing)[\n\nTreasuryBuilding blocks for financial services\n\n\n\n](https://docs.stripe.com/treasury)[\n\nCapitalBusiness financing\n\n\n\n](https://docs.stripe.com/capital/how-stripe-capital-works)\n\nPrebuilt components\n\n[\n\nPayment LinksNo-code payments\n\n\n\n](https://docs.stripe.com/payments/payment-links)[\n\nCheckoutPrebuilt, Stripe-hosted checkout page\n\n\n\n](https://docs.stripe.com/payments/checkout)[\n\nElementsSecure frontend UI components\n\n\n\n](https://docs.stripe.com/payments/elements)\n\nNeed help? [Contact Support](https://support.stripe.com/).\n\nJoin our [early access program](https://insiders.stripe.dev/).\n\nCheck out our [product changelog](https://stripe.com/blog/changelog).\n\nQuestions? [Contact Sales](https://stripe.com/contact/sales).\n\nPowered by [Markdoc](https://markdoc.dev/)\n\nSign up for developer updates:\n\nYou can unsubscribe at any time. Read our [privacy policy](https://stripe.com/privacy).",
  "title": "Stripe Documentation",
  "description": "Explore our guides and examples to integrate Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax",
  "markdown": "# Stripe Tax | Stripe DocumentationThe Stripe Docs logo\n\n## Automate sales tax, VAT, and GST compliance on all your transactions—low or no code integrations available.",
  "title": "Stripe Tax | Stripe Documentation",
  "description": "Automate sales tax, VAT, and GST compliance on all your transactions—low or no code integrations available.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\n## Billing\n\n## Create and manage subscriptions, track usage, and issue invoices.\n\nSign up for developer updates:",
  "title": "Billing | Stripe Documentation",
  "description": "Create and manage subscriptions, track usage, and issue invoices.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/revenue-recognition",
  "markdown": "# Revenue Recognition overview | Stripe DocumentationThe Stripe Docs logo\n\n## Automate your accrual accounting process with Stripe Revenue Recognition.\n\nRevenue recognition is a fundamental part of accrual accounting. Generally accepted accounting principles (GAAP) state that you recognize revenue when you realize and earn it, which might be earlier or later than when you actually receive cash. Correctly recognizing and deferring revenue enables you to have the most accurate insights into your business profitability and financial health.\n\n## Who needs revenue recognition ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRevenue recognition is critical for many types of businesses, especially:\n\n*   Public companies or large businesses with over 25 million USD in annual revenue—because they’re legally required to comply with ASC 606 and GAAP and IFRS accounting standards.\n*   Startups that need to follow accrual accounting to raise money from investors or get a loan from a bank.\n*   Subscription and service-based businesses.\n*   Businesses where customers pay up front before receiving a good or service.\n\nRevenue recognition can provide these businesses with a clear picture of their performance.\n\nRevenue recognition gets complicated quickly as businesses scale with larger product lines and increased payment volumes. For subscription businesses that need to manage changes, refunds, disputes, and prorations, revenue recognition can be especially complex. Such subscription updates can complicate the process of recognizing and deferring revenue accurately and compliantly.\n\n### New accounting standards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOn May 28, 2014, the Financial Accounting Standards Board (FASB) and International Accounting Standards Board (IASB) jointly issued [Accounting Standards Codification (ASC) 606](https://asc.fasb.org/606/tableOfContent), a new framework for businesses to recognize revenue from contracts with customers.\n\n## Stripe Revenue Recognition ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Revenue Recognition helps you simplify the process of recognizing revenue without the need for engineering involvement or lengthy configurations. Stripe Revenue Recognition offers you:\n\n*   Recognized and deferred [revenue summaries](https://docs.stripe.com/revenue-recognition/reports/monthly-summary)\n*   Downloadable accounting [reports and waterfall](https://docs.stripe.com/revenue-recognition/reports/waterfall) charts\n*   Interactive revenue numbers for full [audit](https://docs.stripe.com/revenue-recognition/reports/audit-numbers) transparency\n*   Configurable revenue recognition [rules](https://docs.stripe.com/revenue-recognition/rules) and accounting period controls\n\nRead more about Stripe’s revenue recognition [methodology](https://docs.stripe.com/revenue-recognition/methodology).",
  "title": "Revenue Recognition overview | Stripe Documentation",
  "description": "Automate your accrual accounting process with Stripe Revenue Recognition.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-data/access-data-in-dashboard",
  "markdown": "# Access data in Stripe with Sigma\n\n## Generate custom reports for charges, refunds, disputes, and more with Sigma.\n\n[Sigma](https://stripe.com/sigma) makes all your transactional data available within an interactive SQL environment in the Stripe Dashboard. Sigma lets you create fully customized reports using information about your payments, subscriptions, customers, payouts, and so on.\n\nWith Sigma, you can:\n\n*   Get the information you need that best reflects your business and Stripe integration.\n    \n*   Export in CSV format to import into your tools.\n    \n*   Fetch the data you need on a schedule of your choosing.\n    \n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBegin building custom reports using [templates](https://docs.stripe.com/stripe-data/write-queries#templates). Learn more about [writing queries and the broad range of reporting functions](https://docs.stripe.com/stripe-data/write-queries).\n\n## Financial reports in Sigma![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Financial Reports](https://docs.stripe.com/reports) give you the data you need to complete your accounting and reconciliation workflows. You can use Sigma to create customized versions of these reports tailored to your needs and find queries to generate Stripe’s financial reports in the templates section of the Sigma sidebar. Additionally, you can find the schema for the underlying tables that drive financial reports in the schema section of the sidebar.\n\nYou can recreate the following reports and their connected variants in Sigma:\n\n| Report group | Sigma template name | API report type |\n| --- | --- | --- |\n| **Balance Report** | Itemized balance change from activity | `balance_change_from_activity.itemized.3` |\n|     | Itemized payouts | `payouts.itemized.3` |\n| **Payout reconciliation report** | Itemized payout reconciliation | `payout_reconciliation.itemized.5` |\n|     | Itemized ending balance reconciliation | `ending_balance_reconciliation.itemized.4` |\n\nReports follow the same availability rules as the Stripe Dashboard. Payout Reconciliation reports are only available for users with the **Automatic payouts** setting enabled, and connect variants of reports are only available for users on [Stripe Connect](https://docs.stripe.com/connect).\n\n### Opening a Financial Report in Sigma![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo generate a Financial Report in Sigma, navigate to the [templates](https://docs.stripe.com/stripe-data/write-queries#templates) section of your Sigma Dashboard and search for the report you want to generate. Click the template, then click **Run** in the top right corner.\n\nBy default, these reports run on the last completed month that all data is available for. You can change the dates by making a copy of the template and editing the report date intervals.\n\nDescriptions of the columns produced by financial report queries are available in the [Financial Reporting documentation](https://docs.stripe.com/reports/select-a-report).\n\n### Considerations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Financial Reports you generate from your Sigma Dashboard might slightly differ from those you generate on the Stripe Dashboard.\n\n*   **Data availability:** For Financial Reports, you can find the most recent day of available data by selecting **month to date** or opening the date picker calendar. In Sigma, the `data_load_time` parameter provides the timestamp that data is available through.\n*   **Time zone:** Financial Reports in the Stripe Dashboard filter reports by the local time zone by default, but you can switch them to use the UTC time zone. Sigma filters templates by the UTC time zone.\n*   **Date range:** A selected date range for Stripe Dashboard financial reports, such as Jan. 13 to Jan. 14, filters reports from January 13 00:00:00 up to January 14 23:59:59. A chosen date range filter for Sigma templates for January 13 to January 14 filters reports from Jan 13 00:00:00 up to January 13 23:59:59.\n*   **Currency:** Financial Reports in the Stripe Dashboard always filter data to a single currency. By default, the Sigma report templates return all currencies. You can add a `WHERE` clause to your Sigma query to restrict your results to a single currency.\n*   **Metadata:** Financial reports allow you to include metadata. Sigma templates don’t include it. You can add metadata to your reports by following the `Metadata to column` Sigma template.\n\n## Unsubscribing from Sigma![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you currently have an active Sigma subscription and want to cancel it for any reason, unsubscribe from [Sigma in the settings page](https://dashboard.stripe.com/settings/sigma) of the Stripe Dashboard by clicking **Cancel Stripe Sigma subscription**. You can continue using Sigma until the end of the billing cycle, at which point the subscription ends.\n\n### See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Query transaction data](https://docs.stripe.com/stripe-data/query-transactions)\n*   [Query Billing data](https://docs.stripe.com/stripe-data/query-billing-data)\n*   [Sigma and Data Pipeline for Connect platforms](https://docs.stripe.com/stripe-data/query-connect-data)\n*   [Query Issuing data](https://docs.stripe.com/stripe-data/query-issuing-data)\n*   [Query Stripe fees data](https://docs.stripe.com/stripe-data/query-stripe-fees-data)\n*   [Schedule queries with Sigma](https://docs.stripe.com/stripe-data/schedule-queries)\n*   [Migrate queries onto the new Sigma version](https://docs.stripe.com/stripe-data/migrate-queries)",
  "title": "Access data in Stripe with Sigma | Stripe Documentation",
  "description": "Generate custom reports for charges, refunds, disputes, and more with Sigma.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-data/access-data-in-warehouse",
  "markdown": "# Access data in your data warehouse with Data Pipeline\n\n## Sync your Stripe account with Snowflake, Amazon Redshift, Google Cloud Storage, and other data storage services.\n\n[Data Pipeline](https://dashboard.stripe.com/settings/stripe-data-pipeline) is a no-code product that sends all your Stripe data to a variety of data storage destinations. This allows you to centralize your Stripe data with other business data to help close your books and get more detailed business insights.\n\nWith Data Pipeline, you can:\n\n*   Automatically export your complete Stripe data in a fast and reliable manner.\n*   Stop relying on third-party extract, transform, and load (ETL) pipelines or home-built API integrations.\n*   Combine data from all your Stripe accounts into one data warehouse.\n*   Integrate Stripe data with your other business data for more complete business insights.\n\n#### Caution\n\nBecause of data localization requirements, Stripe doesn’t offer Data Pipeline services to customers, businesses, or users in India.\n\n### Destination Support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Data Pipeline supports two variations of destinations.\n\n*   [Data warehouses](https://docs.stripe.com/stripe-data/access-data-in-warehouse/data-warehouses) (Snowflake, Amazon Redshift)\n    *   For data warehouse destinations, Stripe sends a data share to your data warehouse.\n    *   After you accept the data share, you can access your core Stripe data in Snowflake or Amazon Redshift within 12 hours.\n    *   After the initial load, your Stripe data [refreshes regularly](https://docs.stripe.com/stripe-data/available-data), delivering an incremental or full load of data every 3 hours.\n*   [Cloud storage](https://docs.stripe.com/stripe-data/access-data-in-warehouse/cloud-storage) (Google Cloud Storage, Azure Blob Storage)\n    *   For our cloud storage destinations, Stripe sends [Parquet](https://parquet.apache.org/) files directly to a cloud storage location you own.\n    *   After the initial load, your Stripe data [refreshes regularly](https://docs.stripe.com/stripe-data/available-data), delivering a new full load of your data every 6 hours.\n\n### Database schemas![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour warehouse data is split into two database schemas based on the API mode used to create the data.\n\n| Schema name | Description |\n| --- | --- |\n| `STRIPE` | Data populated from live mode |\n| `STRIPE_TESTMODE` | Data populated from [test mode](https://docs.stripe.com/test-mode \"test mode\") |\n\n### Multiple Stripe accounts with the same data warehouse![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you share data from multiple Stripe accounts with the same data warehouse, you can identify these separately. Every table has a `merchant_id` column, which allows you to filter the data by account.\n\n### Example use case![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn some cases, you might want to combine information from your proprietary data with Stripe data. The following schema shows an `orders` table that lists data about an order for a company:\n\n| date | order\\_no | stripe\\_txn\\_no | customer\\_name | price | items |\n| --- | --- | --- | --- | --- | --- |\n| 7/12/2024 | 1   | bt\\_xcVXgHcBfi83m94 | John Smith | 5   | 1 book |\n\nThe table above doesn’t contain data regarding transaction fees or [payouts](https://docs.stripe.com/payouts \"payout\") because that data exists solely within Stripe. In Stripe, the `balance_transactions` table contains the following information, but lacks proprietary data regarding customer names and items purchased:\n\n| id  | amount | available\\_on | fee | net | automatic\\_transfer\\_id |\n| --- | --- | --- | --- | --- | --- |\n| bt\\_xcVXgHcBfi83m94 | 500 | 7/12/2024 | 50  | 450 | po\\_rC4ocAkjGy8zl3j |\n\nTo access your proprietary data alongside your Stripe data, combine the `orders` table with Stripe’s `balance_transactions` table:\n\n`select   orders.date,   orders.order_no,   orders.stripe_txn_no,   bts.amount,   bts.fee,   bts.automatic_transfer_id from mycompany.orders join stripe.balance_transactions bts on orders.stripe_txn_no = bts.id;`\n\nAfter it completes, the following information is available:\n\n| date | order\\_no | Stripe\\_txn\\_no | amount | fee | automatic\\_transfer\\_id |\n| --- | --- | --- | --- | --- | --- |\n| 7/12/2024 | 1   | bt\\_xcVXgHcBfi83m94 | 500 | 50  | po\\_rC4ocAkjGy8zl3j |\n\n#### Datasets![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can see a list of available datasets under **Datasets** in the [schema documentation](https://dashboard.stripe.com/stripe-schema) page in the Dashboard. Available datasets might vary by region, subject to local product availability and regulations. Data Pipeline separately shares each dataset, which contains one or more warehouse tables, as data becomes available. Data Pipeline updates some tables on different schedules based on the availability of new data. See [data freshness](https://docs.stripe.com/stripe-data/available-data) for more information on available datasets and refresh schedules.\n\n### Email notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can also subscribe to email notifications for critical updates in the [Dashboard](https://dashboard.stripe.com/settings/stripe-data-pipeline).\n\n## Turn off Data Pipeline![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can turn off Data Pipeline in the Dashboard [settings page](https://dashboard.stripe.com/settings/stripe-data-pipeline) by clicking **Turn off**. After you disconnect, you lose access to your data share immediately.\n\n### See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Query transaction data](https://docs.stripe.com/stripe-data/query-transactions)\n*   [Query Billing data](https://docs.stripe.com/stripe-data/query-billing-data)\n*   [Sigma and Data Pipeline for Connect platforms](https://docs.stripe.com/stripe-data/query-connect-data)\n*   [Query Issuing data](https://docs.stripe.com/stripe-data/query-issuing-data)\n*   [Query Stripe fees data](https://docs.stripe.com/stripe-data/query-stripe-fees-data)",
  "title": "Access data in your data warehouse with Data Pipeline | Stripe Documentation",
  "description": "Sync your Stripe account with Snowflake, Amazon Redshift, Google Cloud Storage, and other data storage services.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/atlas",
  "markdown": "# Stripe Atlas | Stripe DocumentationThe Stripe Docs logo\n\n## Start a US company from anywhere in the world using Stripe Atlas.\n\nLaunch your startup with Stripe Atlas and we’ll generate the documents you need, form your company in Delaware, hire a registered agent, and get your US Tax ID. [Create an account](https://dashboard.stripe.com/register/atlas) to start your company with Stripe Atlas.\n\n#### Note\n\nStripe Atlas provides founders with legal information and access to self-service tools. We aren’t a law firm and don’t provide legal, tax, or accounting advice. Founders’ needs will vary. If you have unique considerations or are contributing highly valuable intellectual property to your company, please talk with your lawyer before proceeding.\n\n## Form your company![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Post-formation resources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Stripe Atlas | Stripe Documentation",
  "description": "Start a US company from anywhere in the world using Stripe Atlas.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Issuing\n\n## Learn how to use the Stripe Issuing API to create, manage, and distribute payment cards for your business.",
  "title": "Issuing | Stripe Documentation",
  "description": "Learn how to use the Stripe Issuing API to create, manage, and distribute payment cards for your business.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury",
  "markdown": "# Overview of Stripe Treasury | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the Stripe Treasury API.\n\n[Stripe Treasury](https://stripe.com/treasury) is a Banking as a Service (BaaS) API for [Connect](https://docs.stripe.com/connect \"Connect\") platforms that lets you embed financial services in your product. Stripe provides the infrastructure in partnership with trusted banks.\n\nWith Treasury, you can enable your connected accounts to hold funds, pay bills, earn yield, and manage their cash flow. Many platforms also use [Stripe Issuing](https://docs.stripe.com/issuing) to issue cards for accessing Treasury accounts.\n\nTo request access to Treasury test mode, fill out the [Treasury form](https://go.stripe.global/treasury-inquiry).\n\nBusinesses serving US-based commercial businesses are immediately granted access to test mode after completing the form. All other businesses require review by Stripe to verify whether we can support them. For more information on which businesses can use Treasury, see our [Treasury requirements guide](https://docs.stripe.com/treasury/requirements).\n\n## Building blocks for financial services![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Treasury provides modular components for building a full-featured, scalable financial product.\n\nSet up your connected accounts as Treasury customers, verify their identity, and provision Treasury financial accounts with one of our bank partners.\n\n*   ID verification\n*   [KYC](https://en.wikipedia.org/wiki/Know_your_customer \"know your customer\") checks\n*   Sanctions screening\n\n## Treasury use cases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following are examples of some common Stripe Treasury use cases:\n\n*   **Spend management**: Build a spend management product for your customers to store funds on your platform and manage spending with branded cards.\n*   **Store and spend account**: Create FDIC insurance-eligible accounts that allow businesses to store funds, earn yield, deposit checks, and pay contractors and vendors with ACH and wire transfers.\n*   **Programmatic money movement**: Facilitate money movement between your platform’s connected accounts and from connected accounts to third-party accounts.\n\n## Treasury account architecture![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith Stripe Connect, you onboard customers to your platform as connected accounts. You can create a Treasury account for each connected account to access your financial products. The following diagram illustrates an overview of a platform with Stripe Treasury integration.\n\n![Diagram of a platform integrated with Treasury, showing customers, platform, connected and financial accounts, external bank accounts, payment cards, and money movement.](https://b.stripecdn.com/docs-statics-srv/assets/architecture.59cac501261250e0ebe9785c6f9701ce.png)Treasury account architecture\n\n### Connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts are sellers or service providers that use a platform. For example, as a digital storefront platform owner, you provide an e-commerce framework that businesses can use to establish online stores and collect payments. Each business that uses the storefront platform is a connected account.\n\nTreasury only supports connected accounts that don’t use a Stripe-hosted dashboard and where your platform is responsible for requirements collection and loss liability, including Custom connected accounts. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Treasury.\n\nAs a platform with connected accounts, you’re responsible for maintaining a minimum API version, communicating terms of service updates to your connected accounts, handling information requests from them, and providing them with support. Because your platform is ultimately responsible for the losses your connected accounts incur, you’re also responsible for vetting them for fraud. To learn more, read the [Treasury fraud guide](https://docs.stripe.com/treasury/examples/fraud-guide).\n\n### Financial accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing Treasury endpoints of the [Stripe API](https://docs.stripe.com/api), you can create financial accounts and attach them to connected accounts in a one-to-one relationship (unless you’re enrolled in the [Multi FA beta](https://docs.stripe.com/treasury/account-management/financial-accounts#create-a-financialaccount)).\n\nYou can fund the financial accounts of your platform’s connected accounts and move money between them. Your connected accounts can also fund their Treasury financial accounts using a bank external to Stripe. If your platform uses Stripe Issuing, you can provide payment cards linked to the financial account balance of your connected accounts.\n\nTreasury financial accounts have routing numbers because they’re backed by US banking partners, and balances are eligible for FDIC pass-through insurance.\n\n## Sample integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow our two-part sample integration to see how Treasury works:\n\n1.  [Use Treasury to set up financial accounts and create cards with Issuing](https://docs.stripe.com/treasury/examples/financial-accounts).\n2.  [Use Treasury with SetupIntents and PaymentMethods to move money](https://docs.stripe.com/treasury/examples/moving-money).\n\nStripe Treasury is provided in the US by Stripe Payments Company, licensed money transmitter, with funds held at Stripe’s bank partners, Members FDIC. Card and other credit products are provided by Celtic Bank, Member FDIC and serviced by Stripe, Inc. and its affiliate Stripe Servicing, Inc.",
  "title": "Overview of Stripe Treasury | Stripe Documentation",
  "description": "Learn about the Stripe Treasury API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/capital/how-stripe-capital-works",
  "markdown": "# How Stripe Capital Works | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how Stripe Capital can help you grow your business.\n\nStripe Capital offers financing for eligible users processing payments through Stripe. Under the Stripe Capital program, loans don’t have late fees, early repayment fees, or origination fees. Instead, the total amount you owe is your loan amount plus a flat fee. Your payments are withheld directly from your sales on Stripe.\n\n## Review your offer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe uses a [combination of eligibility criteria](https://docs.stripe.com/capital/eligibility) (including overall processing volume and history on Stripe) to extend a financing offer. If your US business is eligible, and has at least 9 months of processing history, Stripe might send you an email and Dashboard notification to advise you of an available offer.\n\nYour offer is available for 30 days, after which, we re-evaluate your business to see if you’re eligible for an additional offer. Log into the [Capital tab](https://dashboard.stripe.com/capital) of your Dashboard to use a slider to customize the amount of your offer up to the maximum offer amount. The loan terms adjust based on the amount you choose. If you’re seeking financing at a later time, continue checking your email and the Capital tab of your Dashboard to make sure you’re reviewing your most current offer. We might even extend additional offers to you while you’re actively paying down your current loan.\n\nAfter you select an offer, we’ll review your application. If you’re approved, we transfer the funds to your Stripe account, typically in as few as 1-2 business days. To make sure funds successfully disburse from your Stripe account, you must set a valid bank account as your primary payout method.\n\n## No impact to your personal credit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApplying for financing through Stripe Capital doesn’t require a personal credit check and won’t affect your personal credit score. Additionally, Stripe Capital reports performance for US businesses to the Small Business Financial Exchange, who uses this information to build a financial profile for your business, which can help your business get access to credit with other providers.\n\n## Linked accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou always have control over the accounts that you share with Stripe and can [update or disconnect your linked accounts](https://docs.stripe.com/get-started/account/linked-external-accounts) at any time.\n\n## Repayment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe total cost of your financing is your loan amount plus a flat fee. Repayment of your loan occurs automatically by deducting a percentage of your Stripe sales, known as the _repayment rate_. This means you pay down more when your business has higher sales and less if business slows down. The single flat fee isn’t charged upfront— it’s paid over the length of the loan.\n\nEvery loan has a maximum term (for example, 18 months) which is listed on your loan agreement. There’s no prepayment penalty, and you can make additional payments or pay the total amount you owe in full at any point in the [Capital tab](https://dashboard.stripe.com/capital) of your Dashboard.\n\nStripe automatically evaluates you for a new offer as you pay down your loan, regardless of whether you make additional payments or pay it off early.\n\n## Minimum payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must repay a minimum amount toward your loan every payment period. Stripe automatically deducts a percentage of your sales at the repayment rate, which counts toward your minimum. If the total amount you repay through sales doesn’t meet the minimum, you must pay the remaining amount at the end of the period. If you haven’t met the minimum by the end of each payment period, Stripe automatically debits the balance needed to meet your minimum from your bank account or account balance. You can also make manual payments toward your minimum through your Dashboard.\n\nYou can view your minimum in the [Capital tab](https://dashboard.stripe.com/capital) of your Dashboard or in your loan agreement.\n\nIf you’re unable to meet your minimum for one or more periods, reach out to support and we’ll work with you to get back on track and meet your loan obligations. If you continue to miss your minimums, we might take additional action, as detailed in your loan agreement.\n\n#### Fixed payment loans\n\nIf your loan has a fixed monthly payment instead of a minimum payment, Stripe stops witholding from your Stripe sales when you meet the fixed payment amount. If your sales witholdings don’t meet the fixed payment by the end of the payment period, Stripe automatically debits the balance. You can also make manual payments at any time through your Dashboard using the **Make payment** option.\n\n### Examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following example scenarios demonstrate how the minimum payment process works.\n\n**Example 1: You successfully meet your minimum through daily sales deductions.**\n\n*   Your minimum amount is 2,000 USD for the 60-day period ending on March 1.\n*   In that period, you repaid 2,500 USD of your loan balance through Stripe deducting a fixed percentage of your sales volume (the repayment rate).\n*   You’ve successfully met your minimum plus an additional 500 USD toward your total balance for this payment period.\n*   In the next 60-day period, you still must meet the minimum of 2,000 USD.\n\n**Example 2: You don’t meet your minimum through daily sales deductions.**\n\n*   Your minimum is 2,000 USD for the 60-day period ending on March 1.\n*   In that period, you repaid 1,500 USD of your loan balance through Stripe deducting a fixed percentage of your sales volume (the repayment rate).\n*   On March 1, you still owe 500 USD toward your minimum (2,000 USD – 1,500 USD = 500 USD) and you must pay the remaining balance of your minimum.\n*   On March 1, Stripe automatically debits 500 USD from your bank account or account balance to meet your minimum.\n\n## Security interests![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe Capital loan agreement includes security interests taken as collateral for your loan. A UCC-1 financing statement might be filed in connection with your loan based on several factors, including the size of your loan, facts and circumstances about your business, and so on.\n\nAfter you finish paying off your loan, you can [contact us](mailto:capital@stripe.com) with a request to terminate a UCC-1 filing.\n\n#### Unknown secured party\n\nCreditors sometimes use a third party to file and maintain lien positions as the registered agent of the creditor. Wolters Kluwer is Stripe Capital’s third-party representative. If you’re unsure of what creditor the third party is acting on behalf of, we recommend that you contact the third party directly.\n\n## Taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTax reporting often depends on your specific situation, so we encourage you to talk with a tax advisor. In general, funds through Stripe Capital wouldn’t be considered taxable income at the time of receipt, and the amounts withheld to satisfy your obligations aren’t tax deductible.\n\nStripe Capital loans are issued by Celtic Bank, a Utah-Chartered Industrial Bank Member FDIC.",
  "title": "How Stripe Capital Works | Stripe Documentation",
  "description": "Learn how Stripe Capital can help you grow your business.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-links",
  "markdown": "# Payment Links | Stripe DocumentationThe Stripe Docs logo\n\n## Sell online without building a digital storefront.\n\nAccept a payment or sell subscriptions without building additional standalone websites or applications with Payment Links. Share the link as many times as you want on social media, in emails, or on your website.\n\nPayment Links supports [20+ payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support)—including credit and debit cards, Apple Pay, and Google Pay. The Payment Link automatically matches your customer’s preferred browser language for [30+ languages](https://support.stripe.com/questions/supported-languages-for-stripe-checkout-and-payment-links). If you don’t have a Stripe account, [sign up now](https://dashboard.stripe.com/register/payment_links).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/0bf124f94479ea72ead56c0aad4e7557.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/c63e01cc65f29058b5709a0b8bcabf8b.svg)\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Explore advanced options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Compare Invoicing and Payment Links ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInvoicing and Payment Links are two of the easiest ways to start accepting payments with Stripe without writing any code. Use the following table to compare the two products, and to understand which works best for your use case:\n\n| **Product** | **Invoicing** | **Payment Links** |\n| --- | --- | --- |\n| **Description** | Use [invoices](https://dashboard.stripe.com/invoices) to collect one-time or recurring payments from a specific customer. | Use [Payment Links](https://dashboard.stripe.com/payment-links) to sell a product, a subscription, or accept a donation. |\n| **Customer** | *   Specific individuals or businesses<br>*   You can’t reuse invoices, but you can duplicate them and edit the details for another customer. | *   Anyone with the link<br>*   Reuse multiple times with multiple customers, or limit the number of purchases. |\n| **Integration effort** | No coding | No coding |\n| **Stripe-hosted payment page** |     |     |\n| **Sharing options** | *   You can [email from the Dashboard](https://docs.stripe.com/invoicing/dashboard#create-invoice).<br>*   Copy the [invoice link](https://docs.stripe.com/invoicing/hosted-invoice-page#email-links) to share over email or SMS.<br>*   [Send a PDF](https://docs.stripe.com/invoicing/hosted-invoice-page).<br>*   [Auto-charge](https://docs.stripe.com/invoicing/automatic-charging?dashboard-or-api=dashboard) the payment method on file. | *   [Show a QR code](https://docs.stripe.com/payment-links/share#create-qr-code).<br>*   [Copy the link](https://docs.stripe.com/payment-links/share#share-online) to share it over email, SMS, or social media.<br>*   Add a [buy button](https://docs.stripe.com/payment-links/buy-button) to your website. |\n| **UI customization** | Editable template1 | Limited customization2 |\n| **Payment methods** | *   Choose from over 40 [payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#choose-how-to-add-payment-methods).<br>*   Manage your payment methods in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) without coding. | *   [Dynamically display](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) over 40 [payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#choose-how-to-add-payment-methods)3.<br>*   Manage your payment methods in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) without coding. |\n| **[Stripe Tax](https://docs.stripe.com/tax) support** |     |     |\n| **Preferred language support** | *   Over 30 languages<br>*   Set the Dashboard [language preference](https://docs.stripe.com/invoicing/customize#customer-language) for each customer. | *   Over 30 languages<br>*   Match the [browser language setting](https://support.stripe.com/questions/supported-languages-for-stripe-checkout-and-payment-links) for each customer, or set the language with a URL parameter. |\n| **Recurring payments** | Use Stripe Billing to send a subscription or recurring invoice. [No-code subscriptions](https://dashboard.stripe.com/subscriptions?create=subscription) are available | Create a payment link for a subscription. |\n| **Collection tools** | [Automatic collection](https://docs.stripe.com/invoicing/automatic-collection) features, including Smart Retries and reminder emails are available. | [Revenue recovery](https://docs.stripe.com/billing/revenue-recovery) features, including Smart Retries and reminder emails are available for subscription payment links. |\n| **Reconciliation** | Auto-reconciliation of bank payments | Simple reconciliation by using URL parameters |\n| **Customers can choose what to pay** |     |     |\n| **Collect partial payments or set up payment plans** |     |     |\n| **Customers can edit quantities** |     |     |\n| **Coupons or discounts** |     |     |\n| **Send a quote or estimate and convert it to an invoice once finalized** |     |     |\n| **Upsells and cross-sells** |     |     |\n| **PCI compliance handling** | 4   |     |\n\n1 Use the [editable template](https://docs.stripe.com/invoicing/customize) to incorporate your own icons, brand colors, payment terms, page sizes, as well as memo and footer fields.  \n2 With [limited customization](https://docs.stripe.com/payment-links/customize), you can access 20 preset fonts, three predefined border radiuses, and options for adjusting your logo, background, product images, and the color of your own button.  \n3 Dynamic payment methods filter for eligibility, displaying the most relevant payment methods to maximize conversion. Payment method availability [varies by product](https://docs.stripe.com/payments/payment-methods/integration-options#product-support).  \n4 See the best practices for [globally compliant invoices](https://docs.stripe.com/invoicing/global-invoicing).",
  "title": "Payment Links | Stripe Documentation",
  "description": "Accept a payment or sell subscriptions without building additional standalone websites or applications with Payment Links. Share the link as many times as you want on social media, in emails, or on your website.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/elements",
  "markdown": "# Stripe Web Elements | Stripe DocumentationThe Stripe Docs logo\n\n## Create your own checkout flows with prebuilt UI components.\n\n[Stripe Elements](https://stripe.com/payments/elements) is a set of prebuilt UI components for building your web checkout flow. It’s available as a feature of [Stripe.js](https://docs.stripe.com/js), our foundational JavaScript library for building payment flows. Stripe.js tokenizes sensitive payment details within an Element without ever having them touch your server.\n\nElements features include:\n\n*   Automatic input formatting as customers type\n*   Complete UI translations to match your customer’s preferred language\n*   Responsive design to fit seamlessly on any screen size\n*   Custom styling rules so you can match the look and feel of your site\n*   One-click checkout with [Link](https://stripe.com/link)\n\n[](https://docs.stripe.com/payments/payment-element \"Payment Element\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/payment-element.750bc8af6d17414b54dc09ae8acb8efb.svg)](https://docs.stripe.com/payments/payment-element \"Payment Element\")\n\nAccept a payment with one or multiple payment methods securely, including cards.\n\n[](https://docs.stripe.com/elements/express-checkout-element \"Express Checkout Element\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/wallet-element.c96ed64cf20f79da4cd61d96699a3ff3.svg)](https://docs.stripe.com/elements/express-checkout-element \"Express Checkout Element\")\n\nDisplay popular Wallets like Apple Pay, Google Pay, and PayPal.\n\n[](https://docs.stripe.com/payments/elements/link-authentication-element \"Link Authentication Element\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/link-element.9773d44cacda7df8846963ff92cdd4b6.svg)](https://docs.stripe.com/payments/elements/link-authentication-element \"Link Authentication Element\")\n\n[Link Authentication Element](https://docs.stripe.com/payments/elements/link-authentication-element \"Link Authentication Element\")\n\nLink auto-fills your customers’ payment and shipping details to reduce friction and deliver an easy and secure checkout experience.\n\n[](https://docs.stripe.com/elements/address-element \"Address Element\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/shipping-element.01362d4c55a5a5bfe5ce171e3cc6b953.svg)](https://docs.stripe.com/elements/address-element \"Address Element\")\n\nCollect address information and display Link saved addresses.\n\n#### Note\n\n### Customize the appearance of Elements\n\nPick from prebuilt themes, add your own color and size variables, or adjust individual components for more advanced use cases.\n\n[](https://docs.stripe.com/elements/appearance-api)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/customize@2x.e4101cdeb47e80bca9181a73da5581cf.png)",
  "title": "Stripe Web Elements | Stripe Documentation",
  "description": "Create your own checkout flows with prebuilt UI components.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started",
  "markdown": "# Get started | Stripe DocumentationThe Stripe Docs logo\n\n## Create an account and learn how to start using Stripe.\n\nStart using Stripe\n\nSet up a Stripe account, migrate your customer data, and learn how to immediately protect yourself from fraud.\n\nIf you’re ready to start developing, see our [Checkout quickstart](https://docs.stripe.com/checkout/quickstart).\n\n[](https://dashboard.stripe.com/register)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/get-started-hero.df33114d2906584b94ad36e4e2588d16.png)\n\n## Accept payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Plan your integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Set up Stripe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## For developers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Prevent fraud ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## More resources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Developer resources](https://docs.stripe.com/development)Sign up for the newsletter, follow Stripe on X, or chat with the community on the official Discord.\n*   [Support site](https://support.stripe.com/)Learn the answers to common account questions and get troubleshooting tips and tricks.",
  "title": "Get started | Stripe Documentation",
  "description": "Create an account and learn how to start using Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Payments\n\n## Find a guide to integrate Stripe's payments APIs.\n\n[](https://docs.stripe.com/checkout/quickstart \"Accept online payments\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/Integration-builder.c2d65ad9d3fff3b068d39e7d61c4dade.svg)](https://docs.stripe.com/checkout/quickstart \"Accept online payments\")\n\nBuild a payment form or use a prebuilt checkout page to accept online payments.\n\n[](https://docs.stripe.com/billing/quickstart \"Create a subscription\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/Subscriptions.ab795f59a7ed682b0ce5756527b7b915.svg)](https://docs.stripe.com/billing/quickstart \"Create a subscription\")\n\nSet up recurring billing for your SaaS or e-commerce business.\n\n## Multiparty payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild a platform, marketplace, or any two-sided business with Stripe [Connect](https://docs.stripe.com/connect \"Connect\").\n\n[](https://docs.stripe.com/connect/add-and-pay-out-guide \"Pay out money\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/Payouts-diagram.04991d9ccc606f94f299d80f983b7ad0.svg)](https://docs.stripe.com/connect/add-and-pay-out-guide \"Pay out money\")\n\nUse top-ups to add money and pay out your sellers or service providers.\n\n## Clone a sample project ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Add payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## More guides![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Payments | Stripe Documentation",
  "description": "Find a guide to integrate Stripe's payments APIs.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/finance-automation",
  "markdown": "# Revenue and finance automation | Stripe DocumentationThe Stripe Docs logo\n\n## Use Stripe to automate the revenue lifecycle of your business.\n\nAcquire customers, collect revenue, close your books, and automate sales taxes\n\nStripe’s tools integrate with your existing systems, automate your revenue and finance processes, and grow your business.\n\n[\n\nGet started with Stripe Billing\n\n\n\n](https://docs.stripe.com/billing)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/rfa-hero.6171909726b810b57f8af57da8a956b1.png)\n\n## Grow your business with billing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse Stripe Billing to accept recurring payments, retain revenue, and automate workflows for pricing models that include flat rate and usage-based.\n\n[](https://docs.stripe.com/subscriptions \"Subscriptions\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/Billing_Thumbnail.97b884a31a24d1e69dd87e798e1b54f9.svg)](https://docs.stripe.com/subscriptions \"Subscriptions\")\n\nIdeal for:Collecting recurring payments, billing customersHow it works:Create usage-based or sales-negotiated subscriptions to charge customers on a recurring schedule.\n\n[](https://docs.stripe.com/invoicing/dashboard \"Invoices\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/Recurring-invoice.4380e31c85c72f8c8048b042c6f5c504.svg)](https://docs.stripe.com/invoicing/dashboard \"Invoices\")\n\nIdeal for:Sending an invoice to specific customerHow it works:Stripe emails your customer an invoice and a link they can use to pay the invoice online.\n\n[](https://docs.stripe.com/payment-links \"Payment Links\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/Pay-link.4ba8b313406b2547ed3b720f81b58632.svg)](https://docs.stripe.com/payment-links \"Payment Links\")\n\nIdeal for:Selling products without a websiteHow it works:Create a subscription link in the Dashboard and share it with your customers.\n\n## Calculate, collect, and file sales tax and VAT automatically ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Tax enables compliance automatically by collecting tax and notifying you about locales where your business needs to register and pay tax. It also automatically generates the reports you need to file.\n\n[](https://docs.stripe.com/tax/set-up \"Set up Stripe Tax\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/setup.4467b3f3ee77c6af9e6e4683fe3c7629.png)](https://docs.stripe.com/tax/set-up \"Set up Stripe Tax\")\n\nConfigure your business and product information in the Dashboard to enable automatic tax calculation.\n\n[](https://docs.stripe.com/tax/monitoring \"Know where to register\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/threshold-monitoring.47b93a77c470acd8c7689e41bf60fd48.png)](https://docs.stripe.com/tax/monitoring \"Know where to register\")\n\nMonitor your tax obligations in the Dashboard, including where you’ve met the threshold to register and where you’re approaching it.\n\n[](https://docs.stripe.com/tax/reports \"Easy file reporting\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/us-local-reports.2feed5a0c813b40f5312ccba07ca8521.png)](https://docs.stripe.com/tax/reports \"Easy file reporting\")\n\nLearn about your reporting options on Stripe.\n\n## Close your books quickly and accurately ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReduce the cost and risk of manual financial processes with accurate, automated revenue accounting.\n\n[](https://docs.stripe.com/revenue-recognition \"Revenue recognition\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/revenue-recognition.b80ff778d613a23e11d4817f92ade748.png)](https://docs.stripe.com/revenue-recognition \"Revenue recognition\")\n\nAutomate your accrual accounting process to meet ASC 606 and IFRS 15 compliance.\n\n## All of your data in one place ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nGet real-time business insights that empower teams to make faster, reliable decisions.\n\n[](https://docs.stripe.com/stripe-data/access-data-in-dashboard \"Create custom reports\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/custom-reporting.91d56c42e608320509d8216df2c235b0.png)](https://docs.stripe.com/stripe-data/access-data-in-dashboard \"Create custom reports\")\n\nUse Sigma to generate reports from the Dashboard about charges, refunds, disputes, and other critical operational and finance metrics.\n\n## Launch your business ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReady to start a company? Launch your startup with Stripe Atlas and we’ll generate the documents you need, form your company in Delaware, hire a registered agent, and get your US Tax ID.",
  "title": "Revenue and finance automation | Stripe Documentation",
  "description": "Use Stripe's revenue and finance automation solutions to collect and manage your recurring revenue, subscriptions, invoicing, tax collection, reporting, and data management and analysis.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/financial-services",
  "markdown": "# Banking as a service | Stripe DocumentationThe Stripe Docs logo\n\nEmbed financial services in your platform that enable your customers to store funds, move money, and attach cards.",
  "title": "Banking as a service | Stripe Documentation",
  "description": "Use Stripe to move, control, and borrow money.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/development",
  "markdown": "# Developer tools | Stripe DocumentationThe Stripe Docs logo\n\n## Get up and running with SDKs, API keys, and integration tools.\n\nExplore libraries and tools for interacting with your Stripe integration\n\nFast-track local development with the essential tools needed for a Stripe integration.\n\n[](https://docs.stripe.com/libraries)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/stripe-cli.dfdd7710717be8cb82486c38d77d4572.png)\n\n## Security![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Extend Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Partners![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Developer tools | Stripe Documentation",
  "description": "Get up and running with SDKs, API keys, and integration tools.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/no-code",
  "markdown": "# No-code options for using Stripe\n\n## Get started quickly, without writing any code.\n\nUse Stripe without writing code\n\nLearn which Stripe features are best for your business, then read instructions for getting started. No code required.\n\n[](https://docs.stripe.com/no-code/get-started)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/no-code.83d695b276c7a0549aeae2c8d16e14c9.png)\n\n## Accept payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Host your customer experience on Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## More resources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Developer resources](https://docs.stripe.com/development)Sign up for the newsletter, follow Stripe on X, or chat with the community on the official Discord.\n*   [Support site](https://support.stripe.com/)Learn the answers to common account questions and get troubleshooting tips and tricks.",
  "title": "No-code options for using Stripe | Stripe Documentation",
  "description": "Get started quickly, without writing any code.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/no-code/payment-links",
  "markdown": "# Create Payment Links | Stripe DocumentationThe Stripe Docs logo\n\n## Quickly accept payments for goods, services, subscriptions, tips, or donations.\n\n[Payment Links](https://docs.stripe.com/payment-links) are a simple way for customers to pay you when you sell online. Create one link that you can share with everyone.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/0bf124f94479ea72ead56c0aad4e7557.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/c63e01cc65f29058b5709a0b8bcabf8b.svg)\n\n## Create a payment link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you begin, decide what pricing model works best for you:\n\n*   **Products or subscriptions**: Best for e-commerce or SaaS where you’re selling products for a fixed price.\n*   **Customers choose what to pay**: Best for donations, tipping, or pay-what-you-want. This pricing model currently doesn’t support recurring payments or recurring donations. Learn more about the requirements for [accepting tips or donations](https://support.stripe.com/questions/requirements-for-accepting-tips-or-donations).\n\nTo let your customers choose what to pay, create a payment link by completing the following steps:\n\n1.  In the Dashboard, open the [Payment Links](https://dashboard.stripe.com/payment-links/create/customer-chooses-pricing) page and click **New** (or click the plus sign () and select **Payment link**).\n2.  Fill out the payment details.\n3.  (Optional) Set a preset amount.\n4.  (Optional) Set minimum and maximum payment amounts. By default, the maximum payment amount is 10,000.00 USD. [Contact support](https://support.stripe.com/) to increase this limit.\n5.  Click **Create link**.\n\n## Payment Links on mobile ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re creating a product or subscription, use the [Stripe Dashboard iOS app](https://apps.apple.com/app/apple-store/id978516833?pt=91215812&ct=stripe-mobile-app-docs-plinks&mt=8) to create a payment link on your mobile device. In the app, go to **Payments** > **Payment Links** to create a payment link (or click the create icon () and select **Payment link**). The iOS app doesn’t currently support creating links where your customers choose how much to pay.\n\n## Configure payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), Stripe displays the most relevant and compatible payment methods to your customers, including Apple Pay and Google Pay. Stripe enables certain payment methods for you by default. We might also enable additional payment methods after notifying you. Use the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) to enable or disable payment methods at any time. Learn more about [supported payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) and [different types of payment methods](https://stripe.com/guides/payment-methods-guide).\n\nYou can review what payment methods your customers see in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods/review) by entering a transaction ID or setting an order amount and currency.",
  "title": "Create Payment Links | Stripe Documentation",
  "description": "If you want to start selling online, Payment Links offer a simple way for customers to pay you. Learn how to create one that you can share with everyone without writing code.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/no-code/invoices",
  "markdown": "# Use invoices | Stripe DocumentationThe Stripe Docs logo\n\nBy default, customers can pay invoices with any of the payment methods that you enable in your [invoice template](https://dashboard.stripe.com/settings/billing/invoice). If you’re a first-time user, Stripe automatically enables card, [Link](https://docs.stripe.com/payments/link), bank transfers, Cash App Pay, and WeChat Pay payment methods. To enable additional payment methods, you need to activate them in your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\nIn some situations, restrictions might prevent payment methods from being used for an invoice. For instance, a payment method might only operate in one currency, or have limitations on the amount that can be paid. Stripe doesn’t automatically select a payment method when these limitations prevent it from being used. To learn more, read about [supported payment methods](https://docs.stripe.com/invoicing/payment-methods#supported).\n\n![Choose additional payment methods](https://b.stripecdn.com/docs-statics-srv/assets/supported-payment-methods.194614192ca2c72656bc0587e8e21f46.png)\n\nChoose additional payment methods",
  "title": "Use invoices | Stripe Documentation",
  "description": "Send an invoice your customers can pay online.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/no-code/subscriptions",
  "markdown": "# Create subscriptions | Stripe DocumentationThe Stripe Docs logo\n\n## Set up recurring payments by offering subscriptions to your service.\n\nSubscriptions represent what your customer is paying for and how much and how often you’re charging them for the product. You can subscribe customers manually through the Dashboard. You can also let them sign up through your website or a [Payment Link](https://docs.stripe.com/payment-links/create?pricing-model=standard).\n\nThis page shows you how to manually create and edit a subscription in your Stripe Dashboard.\n\n## Create a subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create a subscription:\n\n1.  In the Stripe Dashboard, go to the [subscriptions](https://dashboard.stripe.com/test/subscriptions) page.\n    \n2.  Click **+Create subscription**.\n    \n3.  Find or add a customer.\n    \n4.  Enter the pricing and product information. You can add multiple products.\n    \n5.  Set the start and end date of the subscription.\n    \n6.  Set the starting date for the billing cycle. This defines when the next invoice is generated. Depending on your settings, the saved payment method on file might also be charged automatically on the billing cycle date. Learn more about the [billing cycle date](https://docs.stripe.com/billing/subscriptions/billing-cycle).\n    \n7.  (Optional) Add the default tax behavior, a coupon, a free trial, or metadata.\n    \n8.  (Optional) Maximize revenue for your business by enabling [revenue recovery](https://docs.stripe.com/billing/revenue-recovery) features in the Dashboard. You can automatically retry failed payments, build custom automations, configure customer emails, and more.\n    \n\n#### Note\n\nHere are two other ways to create subscriptions:\n\n*   Click **Create** > **Subscription** in the upper right hand corner of the Dashboard.\n*   Type `c` `s` anywhere in the Dashboard to open the subscription editor.\n\n### Advanced options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Edit a subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo edit a subscription:\n\n1.  Go to the [subscriptions](https://dashboard.stripe.com/test/subscriptions) page.\n    \n2.  Find the subscription you want to modify, click the overflow menu (), then click **Update subscription**. You can also click the next to the subscription name. From this menu, you can also:\n    \n    *   **Cancel the subscription**. In the modal that opens, select the date to cancel the subscription—immediately, at the end of the current period, or on a custom date. You can also select the option to refund the last payment for this subscription and create a [credit note](https://docs.stripe.com/invoicing/dashboard/credit-notes) for your records.\n        \n    *   **Pause payment collection**. In the modal that opens, select the duration of the pause—indefinite or ending on a custom date—and how invoices should behave during the pause.\n        \n    *   **Share payment update link**. In the modal that opens, you can share a link with the customer to update their payment details. For more information, see [Share payment update link](https://docs.stripe.com/billing/subscriptions/update-payment-method).\n        \n3.  Make your changes to the subscription.\n    \n4.  Click **Update subscription**.\n    \n\n## Delete a subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can’t delete a subscription. But you can cancel it or pause payment collection. See [editing a subscription](#edit-susbscription) for those details.",
  "title": "Create subscriptions | Stripe Documentation",
  "description": "Set up recurring payments by offering subscriptions to your service.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/development-environment",
  "markdown": "# Set up your development environment\n\nStripe’s server-side helper libraries (also known as server-side SDKs) and command-line interface (CLI) allow you to interact with Stripe’s REST APIs. Start with the Stripe CLI and make Stripe API calls without writing a line of code.\n\nUse the SDKs to avoid writing boilerplate code. To start sending requests from your environment, choose a language to follow a quickstart guide.\n\nIn this quickstart, you install the [Stripe CLI](https://docs.stripe.com/stripe-cli/overview)—an essential tool that gets you command line access to your Stripe integration. You also install the [Stripe Ruby server-side SDK](https://github.com/stripe/stripe-ruby) to get access to Stripe APIs from applications written in Ruby.\n\n## What you learn![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn this quickstart, you’ll learn:\n\n*   How to call Stripe APIs without writing a line of code\n*   How to manage third-party dependencies using a bundler with RubyGems\n*   How to install the Stripe Ruby SDK v12.0.0\n*   How to send your first SDK request\n\n[](#setup-cli)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\n### Install![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFrom the command-line, use an install script or download and extract a versioned archive file for your operating system to install the CLI.\n\nTo install the Stripe CLI with [homebrew](https://brew.sh/), run:\n\n`brew install stripe/stripe-cli/stripe`\n\n### Authenticate![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLogin and authenticate your Stripe user [Account](https://docs.stripe.com/get-started/account/activate) to generate a set of _restricted keys_. To learn more, see [Stripe CLI keys and permissions](https://docs.stripe.com/stripe-cli/keys).\n\nPress the **Enter** key on your keyboard to complete the authentication process in your browser.\n\n### Confirm setup![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNow that you’ve installed the CLI, you can make a single API request to [Create a product](https://docs.stripe.com/api/products/create).\n\n`stripe products create \\ --name=\"My First Product\" \\ --description=\"Created with the Stripe CLI\"`\n\nLook for the product identifier (in `id`) in the response object. Save it for the next step.\n\nIf everything worked, the command-line displays the following response.\n\n`{   \"id\":` \n\n`\"prod_LTenIrmp8Q67sa\"`\n\n`,   \"object\": \"product\",`\n\nNext, call [Create a price](https://docs.stripe.com/api/prices/create) to attach a price of 30 USD. Swap the placeholder in `product` with your product identifier (for example, `prod_LTenIrmp8Q67sa`).\n\n`stripe prices create \\   --unit-amount=3000 \\   --currency=usd \\   --product=`\n\n`{{PRODUCT_ID}}`\n\nIf everything worked, the command-line displays the following response.\n\n`{   \"id\":` \n\n`\"price_1KzlAMJJDeE9fu01WMJJr79o\"`\n\n`,   \"object\": \"price\",`\n\n[](#sdk-deps)\n\nWe recommend managing third-party dependencies using the [RubyGems](http://rubygems.org/) command-line tool, which allows you to add new libraries and include them in your Ruby projects. Check whether RubyGems is installed:\n\n### Install RubyGems![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you get `gem: command not found`, [download RubyGems](http://rubygems.org/pages/download) from their downloads page.\n\n[](#install-sdk)\n\nThe latest version of the Stripe Ruby server-side SDK is v12.0.0. It supports Ruby versions 2.3+.\n\nCheck your Ruby version:\n\n### Install the library![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Create a gem file](https://guides.rubygems.org/make-your-own-gem/) and install the generated gem using a bundler with [RubyGems](https://rubygems.org/).\n\nAdd the latest version of the [Stripe gem](https://rubygems.org/gems/stripe) to a project:\n\nInstall the required gems from your specified sources:\n\n### Installation alternatives![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](#test-install)\n\nNow that you have the Ruby SDK installed, you can create a subscription [Product](https://docs.stripe.com/api/products/create) and attach a [Price](https://docs.stripe.com/api/prices/create) with a couple API requests. We’re using the product identifier returned in the response to create the price in this example.\n\n#### Note\n\nThis sample uses your Stripe user [account](https://docs.stripe.com/get-started/account/activate)’s default keys for [test mode](https://docs.stripe.com/test-mode \"test mode\"). Only you can see these values.\n\n`require 'rubygems' require 'stripe' Stripe.api_key = \"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"  starter_subscription = Stripe::Product.create(   name: 'Starter Subscription',   description: '$12/Month subscription', )  starter_subscription_price = Stripe::Price.create(   currency: 'usd',   unit_amount: 1200,   recurring: {interval: 'month'},   product: starter_subscription['id'], )  puts \"Success! Here is your starter subscription product id: #{starter_subscription.id}\" puts \"Success! Here is your starter subscription price id: #{starter_subscription_price.id}\"`\n\nSave the file as `create_price.rb`. From the command line, `cd` to the directory containing the file you just saved and run:\n\nIf everything worked, the command line shows the following response. Save these identifiers so you can use them while building your integration.\n\n`Success! Here is your starter subscription product id: prod_0KxBDl589O8KAxCG1alJgiA6 Success! Here is your starter subscription price id: price_0KxBDm589O8KAxCGMgG7scjb`",
  "title": "Set up your development environment | Stripe Documentation",
  "description": "Get familiar with the Stripe CLI and our core SDKs.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api",
  "markdown": "# Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi)\n\nThe Stripe API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts [form-encoded](https://en.wikipedia.org/wiki/POST_(HTTP)#Use_for_submitting_web_forms) request bodies, returns [JSON-encoded](http://www.json.org/) responses, and uses standard HTTP response codes, authentication, and verbs.\n\nYou can use the Stripe API in test mode, which doesn’t affect your live data or interact with the banking networks. The API key you use to [authenticate](https://docs.stripe.com/api/authentication) the request determines whether the request is live mode or test mode.\n\nThe Stripe API doesn’t support bulk updates. You can work on only one object per request.\n\nThe Stripe API differs for every account as we release new [versions](https://docs.stripe.com/api/versioning) and tailor functionality. [Log in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi) to see docs with your test key and data.\n\n## Not a developer?\n\nUse Stripe’s [no-code options](https://docs.stripe.com/payments/no-code) or apps from [our partners](https://stripe.partners/) to get started with Stripe and to do more with your Stripe account—no code required.\n\nClient Libraries\n\nBy default, the Stripe API Docs demonstrate using curl to interact with the API over HTTP. Select one of our official [client libraries](https://docs.stripe.com/libraries) to see examples in code.\n\n## [Authentication](https://docs.stripe.com/api/authentication)\n\nThe Stripe API uses [API keys](https://docs.stripe.com/keys) to authenticate requests. You can view and manage your API keys in [the Stripe Dashboard](https://dashboard.stripe.com/login?redirect=/apikeys).\n\nTest mode secret keys have the prefix `sk_test_` and live mode secret keys have the prefix `sk_live_`. Alternatively, you can use [restricted API keys](https://docs.stripe.com/keys#limit-access) for granular permissions.\n\nYour API keys carry many privileges, so be sure to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, client-side code, and so forth.\n\nAll API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Calls made over plain HTTP will fail. API requests without authentication will also fail.\n\n```\ncurl https://api.stripe.com/v1/charges \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:# The colon prevents curl from asking for a password.\n```\n\nYour API Key\n\nA sample test API key is included in all the examples here, so you can test any example right away. Do not submit any personally identifiable information in requests made with this key.\n\nTo test requests using your account, replace the sample API key with your actual API key or [sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi).\n\n## [Connected Accounts](https://docs.stripe.com/api/connected-accounts)\n\nTo act as connected accounts, clients can issue requests using the `Stripe-Account` special header. Make sure that this header contains a Stripe account ID, which usually starts with the `acct_` prefix.\n\nThe value is set per-request as shown in the adjacent code sample. Methods on the returned object reuse the same account ID.\n\n*   Related guide: [Making API calls for connected accounts](https://docs.stripe.com/connect/authentication)\n\n```\ncurl https://api.stripe.com/v1/charges/ch_3LmjFA2eZvKYlo2C09TLIsrw \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -H \"Stripe-Account: acct_1032D82eZvKYlo2C\" \\  -G\n```\n\n## [Errors](https://docs.stripe.com/api/errors)\n\nStripe uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, a charge failed, etc.). Codes in the `5xx` range indicate an error with Stripe’s servers (these are rare).\n\nSome `4xx` errors that could be handled programmatically (e.g., a card is [declined](https://docs.stripe.com/declines)) include an [error code](https://docs.stripe.com/error-codes) that briefly explains the error reported.\n\n### Attributes\n\n*   The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `api_error` |\n    | `card_error` |\n    | `idempotency_error` |\n    | `invalid_request_error` |\n    \n*   For some errors that could be handled programmatically, a short string indicating the [error code](https://docs.stripe.com/error-codes) reported.\n    \n*   #### \n    \n    decline\\_codenullable string\n    \n*   A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n    \n*   If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.\n    \n*   #### \n    \n    payment\\_intentnullable object\n    \n\n### More\n\n*   #### \n    \n    payment\\_method\\_typenullable string\n    \n\n*   #### \n    \n    request\\_log\\_urlnullable string\n    \n*   #### \n    \n    setup\\_intentnullable object\n    \n\n*   #### \n    \n    payment\\_methodnullable object\n    \n\nHTTP Status Code Summary\n\n|     |     |     |\n| --- | --- | --- |\n| 200 | OK  | Everything worked as expected. |\n| 400 | Bad Request | The request was unacceptable, often due to missing a required parameter. |\n| 401 | Unauthorized | No valid API key provided. |\n| 402 | Request Failed | The parameters were valid but the request failed. |\n| 403 | Forbidden | The API key doesn’t have permissions to perform the request. |\n| 404 | Not Found | The requested resource doesn’t exist. |\n| 409 | Conflict | The request conflicts with another request (perhaps due to using the same idempotent key). |\n| 429 | Too Many Requests | Too many requests hit the API too quickly. We recommend an exponential backoff of your requests. |\n| 500, 502, 503, 504 | Server Errors | Something went wrong on Stripe’s end. (These are rare.) |\n\nError Types\n\n|     |     |\n| --- | --- |\n| `api_error` | API errors cover any other type of problem (e.g., a temporary problem with Stripe’s servers), and are extremely uncommon. |\n| `card_error` | Card errors are the most common type of error you should expect to handle. They result when the user enters a card that can’t be charged for some reason. |\n| `idempotency_error` | Idempotency errors occur when an `Idempotency-Key` is re-used on a request that does not match the first request’s API endpoint and parameters. |\n| `invalid_request_error` | Invalid request errors arise when your request has invalid parameters. |\n\n## [Handling errors](https://docs.stripe.com/api/errors/handling)\n\nOur Client libraries raise exceptions for many reasons, such as a failed charge, invalid parameters, authentication errors, and network unavailability. We recommend writing code that gracefully handles all possible API exceptions.\n\n*   Related guide: [Error Handling](https://docs.stripe.com/error-handling)\n\n```\n# Select a client library to see examples of# handling different kinds of errors.\n```",
  "title": "Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/samples",
  "markdown": "# Browse sample projects | Stripe DocumentationThe Stripe Docs logo\n\n## Explore the library of sample projects using Stripe.\n\nPlatformFrontendBackendProducts\n\n*   [\n    \n    Accept payments with Stripe Checkout\n    \n    Use Checkout to quickly collect one-time payments.\n    \n    ProductCheckout\n    \n    Platform\n    \n    Languages.NET, Go, Java, Node, PHP, Python, Ruby, HTML, React\n    \n    \n    \n    ](https://github.com/stripe-samples/checkout-one-time-payments)\n*   [\n    \n    Set up subscriptions with fixed price\n    \n    Create a subscription for an online service with fixed-price options, and work with Stripe Elements to host a payment form on your servers.\n    \n    ProductBilling\n    \n    Platform\n    \n    Languages.NET, Go, Java, Node, PHP, Python, Ruby, React, JavaScript\n    \n    \n    \n    ](https://github.com/stripe-samples/subscription-use-cases/tree/main/fixed-price-subscriptions)\n*   [\n    \n    Set up subscriptions with metered usage\n    \n    Create a subscription for an online service with metered usage options, and work with Stripe Elements to host a payment form on your servers.\n    \n    ProductBilling\n    \n    Platform\n    \n    Languages.NET, Go, Java, Node, PHP, Python, Ruby, HTML\n    \n    \n    \n    ](https://github.com/stripe-samples/subscription-use-cases/tree/main/usage-based-subscriptions)\n*   [\n    \n    Accept a payment with a payment element\n    \n    Accept payments with a secure, embeddable UI component.\n    \n    ProductElements\n    \n    Platform\n    \n    LanguagesNode, Ruby, PHP, Python, Java, Go, .NET, HTML, React, Vue.js\n    \n    \n    \n    ](https://github.com/stripe-samples/accept-a-payment/tree/main/payment-element)\n*   [\n    \n    Accept a payment with a custom form\n    \n    Build a custom payments integration by embedding UI components on your site using Stripe Elements.\n    \n    ProductElements\n    \n    Platform\n    \n    LanguagesNode, Ruby, PHP, Python, Java, Go, .NET, React, HTML, Kotlin, Swift\n    \n    \n    \n    ](https://github.com/stripe-samples/accept-a-payment/tree/main/custom-payment-flow)\n*   [\n    \n    Accept a payment with Stripe Checkout\n    \n    Redirect to a Stripe-hosted payment page using Stripe Checkout.\n    \n    ProductCheckout\n    \n    Platform\n    \n    LanguagesNode, Ruby, PHP, Python, Java, Go, .NET, React, HTML, Vue.js\n    \n    \n    \n    ](https://github.com/stripe-samples/accept-a-payment/tree/main/prebuilt-checkout-page)\n*   [\n    \n    Oasis Hubs Stripe Connect and Metered Billing Demo\n    \n    Sample application showing a Stripe Connect and Billing integration using ASP.NET Core.\n    \n    ProductConnect\n    \n    Platform\n    \n    Languages.NET, HTML\n    \n    \n    \n    ](https://github.com/stripe-samples/oasis-hubs-dotnet)\n*   [\n    \n    Apps on devices\n    \n    Deploy your Android apps on Stripe SmartPOS Android devices.\n    \n    ProductTerminal\n    \n    Platform\n    \n    LanguagesKotlin\n    \n    \n    \n    ](https://github.com/stripe-samples/terminal-apps-on-devices)\n*   [\n    \n    Tap to Pay with Stripe - Android demo\n    \n    Accept contactless payments on a compatible Android device with the Stripe Terminal SDK.\n    \n    ProductTerminal\n    \n    Platform\n    \n    LanguagesKotlin\n    \n    \n    \n    ](https://github.com/stripe-samples/tap-to-pay-android-demo)\n*   [\n    \n    Identity verification\n    \n    Securely collect and verify identity documents.\n    \n    ProductIdentity\n    \n    Platform\n    \n    LanguagesNode, Ruby, PHP, Python, Java, Go, .NET, HTML\n    \n    \n    \n    ](https://docs.stripe.com/samples/identity/modal)\n*   [\n    \n    Fully embedded Connect platform integration\n    \n    Integrate with Connect embedded Components to build a fully embedded Connect integration.\n    \n    ProductConnect\n    \n    Platform\n    \n    LanguagesNode, React\n    \n    \n    \n    ](https://github.com/stripe/stripe-connect-furever-demo)",
  "title": "Browse sample projects | Stripe Documentation",
  "description": "Browse the source code of sample Stripe integrations.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-intents",
  "markdown": "# The Payment Intents API | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use the Payment Intents API for Stripe payments.\n\nUse the [Payment Intents](https://docs.stripe.com/api/payment_intents) API to build an integration that can handle complex payment flows with a status that changes over the [PaymentIntent’s lifecycle](https://docs.stripe.com/payments/paymentintents/lifecycle). It tracks a payment from creation through checkout, and triggers additional authentication steps when required.\n\nSome of the advantages of using the [Payment Intents](https://docs.stripe.com/api/payment_intents) API include:\n\n*   Automatic authentication handling\n*   No double charges\n*   No [idempotency key](https://docs.stripe.com/api/idempotent_requests) issues\n*   Support for [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") (SCA) and similar regulatory changes\n\n## A complete set of APIs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [Payment Intents](https://docs.stripe.com/api/payment_intents) API together with the [Setup Intents](https://docs.stripe.com/api/setup_intents) and [Payment Methods](https://docs.stripe.com/api/payment_methods) APIs. These APIs help you handle dynamic payments (for example, additional authentication like [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\")) and prepare you for expansion to other countries while allowing you to support new regulations and regional payment methods.\n\nBuilding an integration with the Payment Intents API involves two actions: creating and [confirming](https://docs.stripe.com/api/payment_intents/confirm \"confirm\") a PaymentIntent. Each PaymentIntent typically correlates with a single shopping cart or customer session in your application. The PaymentIntent encapsulates details about the transaction, such as the supported payment methods, the amount to collect, and the desired currency.\n\n## Creating a PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo get started, see the [accept a payment guide](https://docs.stripe.com/payments/accept-a-payment?ui=elements). It describes how to create a PaymentIntent on the server and pass its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") to the client instead of passing the entire PaymentIntent object.\n\nWhen you [create the PaymentIntent](https://docs.stripe.com/api/payment_intents/create), you can specify options like the amount and currency:\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd`\n\n### Best practices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   We recommend creating a PaymentIntent as soon as you know the amount, such as when the customer begins the checkout process, to help track your [purchase funnel](https://en.wikipedia.org/wiki/Purchase_funnel). If the amount changes, you can [update](https://docs.stripe.com/api#update_payment_intent) its [amount](https://docs.stripe.com/api#payment_intent_object-amount). For example, if your customer backs out of the checkout process and adds new items to their cart, you may need to update the amount when they start the checkout process again.\n    \n*   If the checkout process is interrupted and resumes later, attempt to reuse the same PaymentIntent instead of creating a new one. Each PaymentIntent has a unique ID that you can use to [retrieve](https://docs.stripe.com/api#retrieve_payment_intent) it if you need it again. In the data model of your application, you can store the ID of the PaymentIntent on the customer’s shopping cart or session to facilitate retrieval. The benefit of reusing the PaymentIntent is that the [object state](https://docs.stripe.com/payments/paymentintents/lifecycle) helps track any failed payment attempts for a given cart or session.\n    \n*   Remember to provide an [idempotency key](https://docs.stripe.com/api/idempotent_requests) to prevent the creation of duplicate PaymentIntents for the same purchase. This key is typically based on the ID that you associate with the cart or customer session in your application.\n    \n\n## Passing the client secret to the client side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe PaymentIntent contains a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret), a key that’s unique to the individual PaymentIntent. On the client side of your application, Stripe.js uses the client secret as a parameter when invoking functions (such as [stripe.confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment) or [stripe.handleCardAction](https://docs.stripe.com/js#stripe-handle-card-action)) to complete the payment.\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the PaymentIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n#### Caution\n\nYou can use the client secret to complete the payment process with the amount specified on the PaymentIntent. Don’t log it, embed it in URLs, or expose it to anyone other than the customer. Make sure that you have [TLS](https://docs.stripe.com/security/guide#tls \"TLS\") on any page that includes the client secret.\n\n## After the payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter the client confirms the payment, it is a best practice for your server to [monitor webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to detect when the payment successfully completes or fails.\n\nA `PaymentIntent` might have more than one [Charge](https://docs.stripe.com/api/charges) object associated with it if there were multiple payment attempts, for examples retries. For each charge you can inspect the [outcome](https://docs.stripe.com/api/charges/object#charge_object-outcome) and [details of the payment method](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details) used.\n\n## Optimizing payment methods for future payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) parameter saves payment methods to use again in the future. For cards, it also optimizes authorization rates in compliance with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication). To determine which value to use, consider how you want to use this payment method in the future.\n\n| How you intend to use the payment method | setup\\_future\\_usage enum value to use |\n| --- | --- |\n| On-session payments only | `on_session` |\n| Off-session payments only | `off_session` |\n| Both on and off-session payments | `off_session` |\n\nYou can still accept off-session payments with a card set up for on-session payments, but the bank is more likely to reject the off-session payment and require authentication from the cardholder.\n\nThe following example shows how to create a PaymentIntent and specify `setup_future_usage`:\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d setup_future_usage=off_session`\n\n#### Caution\n\nSetups for off-session payments are more likely to incur additional friction. Use on-session setup if you don’t intend to accept off-session payments with the saved card.\n\n## Dynamic statement descriptor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, your Stripe account’s [statement descriptor](https://docs.stripe.com/get-started/account/activate#public-business-information) appears on customer statements whenever you charge their card. To provide a different description on a per-payment basis, include the `statement_descriptor` parameter.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d statement_descriptor=\"Custom descriptor\"`\n\nStatement descriptors are limited to 22 characters, can’t use the special characters `<`, `>`, `'`, `\"`, or `*`, and must not consist solely of numbers. When using dynamic statement descriptors, the dynamic text is appended to the [statement descriptor prefix](https://dashboard.stripe.com/settings/public) set in the Stripe Dashboard. An asterisk (`*`) and an empty space are also added to separate the default statement descriptor from the dynamic portion. These 2 characters count towards the 22 character limit.\n\nStripe supports adding [metadata](https://docs.stripe.com/api#metadata) to the most common requests you make, such as processing payments. Metadata isn’t shown to customers or factored into whether or not a payment is declined or blocked by our fraud prevention system.\n\nThrough metadata, you can associate information that’s meaningful to you with Stripe activity.\n\nAny metadata you include is viewable in the Dashboard (for example, when looking at the page for an individual payment), and is also available in common reports. As an example, you can attach the order ID for your store to the PaymentIntent for that order. Doing so allows you to easily reconcile payments in Stripe to orders in your system.\n\nIf you’re using [Radar for Fraud Teams](https://docs.stripe.com/radar \"Radar for Fraud Teams\"), consider passing additional customer information and order information as metadata. Then you can write [Radar rules using metadata attributes](https://docs.stripe.com/radar/rules/reference#metadata-attributes) and have more information available within the Dashboard, which can expedite your review process.\n\nWhen a PaymentIntent creates a charge, the PaymentIntent copies its metadata to the charge. Subsequent updates to the PaymentIntent’s metadata won’t modify the metadata of charges previously created by the PaymentIntent.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d \"metadata[order_id]\"=6735`\n\n#### Caution\n\nDon’t store any sensitive information (personally identifiable information, card details, and so on) as metadata or in the `description` parameter of the PaymentIntent.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Accept a payment online](https://docs.stripe.com/payments/accept-a-payment?platform=web)\n*   [Accept a payment in an iOS app](https://docs.stripe.com/payments/accept-a-payment?platform=ios)\n*   [Accept a payment in an Android app](https://docs.stripe.com/payments/accept-a-payment?platform=android)\n*   [Set up future payments](https://docs.stripe.com/payments/save-and-reuse)",
  "title": "The Payment Intents API | Stripe Documentation",
  "description": "Learn how to use the Payment Intents API for Stripe payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/terminal",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Terminal\n\n## Use Stripe Terminal to accept in-person payments and extend Stripe payments to your point of sale.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/terminal-hero.5758b3003f62903c82f1178adffb3aa6.png)\n\n## Learn about Terminal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Terminal is available in the following countries:\n\n### Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAustralia\n\nBelgium\n\nCanada\n\nDenmark\n\nFrance\n\nGermany\n\nIreland\n\nItaly\n\nNetherlands\n\nSingapore\n\nSpain\n\nSweden\n\nUnited Kingdom\n\nUnited States\n\n### Available in Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAustria\n\nCzech Republic\n\nFinland\n\nLuxembourg\n\nMalaysia\n\nNew Zealand\n\nNorway\n\nPortugal\n\nSwitzerland\n\nYou can only collect payments in your local currency with [supported card brands](https://docs.stripe.com/terminal/payments/collect-card-payment/supported-card-brands). Stripe Terminal offers pre-certified readers and Tap to Pay, which allows users to accept in-person contactless payments with a compatible [iPhone](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=ios) or [Android](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=android) device and the Stripe Terminal SDK. Hardware must be shipped to physical addresses (not PO boxes). If you’re outside the available countries, you can [request an invite](https://stripe.com/terminal#request-invite) to test Terminal.\n\n## Design your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/terminal-connect.5566b290bc3a8817733a41b2155512a9.png)\n\n## In-person fundamentals![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Terminal | Stripe Documentation",
  "description": "Use Stripe Terminal to accept in-person payments and extend Stripe payments to your point of sale.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/radar",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Radar\n\n## Use Stripe Radar to protect your business against fraud.\n\n[Stripe Radar](https://stripe.com/radar) provides real-time fraud protection and requires no additional development time.\n\n[Radar for Fraud Teams](https://stripe.com/radar/fraud-teams) adds customization capabilities and deeper insights and trend analysis for your business.\n\n## Design your integration with your fraud strategy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## View the Radar Dashboard to understand how fraud affects your business![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Customize your fraud interventions with Radar for Fraud Teams![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Radar | Stripe Documentation",
  "description": "Use Stripe Radar to protect your business against fraud.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect",
  "markdown": "# Stripe Connect | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to route payments between multiple parties.\n\n[\n\nConnect\n\n\n\n\n\n](https://docs.stripe.com/connect)\n\nGet started\n\nChoose how to onboard accounts, set up dashboards, accept payments, pay out, and more.\n\n[\n\nDesign your Connect integration\n\n\n\n](https://docs.stripe.com/connect/design-an-integration)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/connect_overview.330026f5b1463495ce7365a10f7f491b.png)\n\n### Availability\n\n## Example integrations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/connect/collect-then-transfer-guide?platform=no-code \"Collect and pay out\")\n\n[Collect and pay out](https://docs.stripe.com/connect/collect-then-transfer-guide?platform=no-code \"Collect and pay out\")\n\n[\n\nUse Payment Links to collect payments from customers and automatically pay out a portion to your sellers or service providers.\n\nNo code\n\n\n\n](https://docs.stripe.com/connect/collect-then-transfer-guide?platform=no-code \"Collect and pay out\")\n\n[](https://docs.stripe.com/connect/add-and-pay-out-guide?dashboard-or-api=dashboard \"Pay out money\")\n\n[Pay out money](https://docs.stripe.com/connect/add-and-pay-out-guide?dashboard-or-api=dashboard \"Pay out money\")\n\n[\n\nAdd money from your bank to pay out your sellers or service providers.\n\nNo code\n\n\n\n](https://docs.stripe.com/connect/add-and-pay-out-guide?dashboard-or-api=dashboard \"Pay out money\")\n\n[](https://docs.stripe.com/connect/enable-payment-acceptance-guide \"Enable other businesses to accept payments directly\")\n\n[Enable other businesses to accept payments directly](https://docs.stripe.com/connect/enable-payment-acceptance-guide \"Enable other businesses to accept payments directly\")\n\n[\n\nFacilitate direct payments between other businesses and their own customers.\n\n](https://docs.stripe.com/connect/enable-payment-acceptance-guide \"Enable other businesses to accept payments directly\")\n\n## Onboard accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Choose how to onboard accounts](https://docs.stripe.com/connect/onboarding) to begin using Connect.\n\n[](https://docs.stripe.com/connect/hosted-onboarding \"Stripe-hosted onboarding\")\n\n[Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding \"Stripe-hosted onboarding\")\n\n[\n\nOnboard accounts through a Stripe-hosted onboarding form.\n\n](https://docs.stripe.com/connect/hosted-onboarding \"Stripe-hosted onboarding\")\n\n[](https://docs.stripe.com/connect/embedded-onboarding \"Embedded onboarding\")\n\n[Embedded onboarding](https://docs.stripe.com/connect/embedded-onboarding \"Embedded onboarding\")\n\n[\n\nOnboard accounts using highly themeable components you embed in your website.\n\n](https://docs.stripe.com/connect/embedded-onboarding \"Embedded onboarding\")\n\n[](https://docs.stripe.com/connect/api-onboarding \"API onboarding\")\n\n[API onboarding](https://docs.stripe.com/connect/api-onboarding \"API onboarding\")\n\n[\n\nOnboard accounts using the Stripe API with full control over your own UI.\n\n](https://docs.stripe.com/connect/api-onboarding \"API onboarding\")\n\n[](https://docs.stripe.com/connect/onboarding/quickstart)\n\n[Onboarding quickstart](https://docs.stripe.com/connect/onboarding/quickstart)\n\n## Accept payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Choose a charge type](https://docs.stripe.com/connect/charges) to accept payments.\n\n[](https://docs.stripe.com/connect/direct-charges \"Create direct charges\")\n\n[Create direct charges](https://docs.stripe.com/connect/direct-charges \"Create direct charges\")\n\n[\n\nCustomers directly transact with your connected account.\n\n](https://docs.stripe.com/connect/direct-charges \"Create direct charges\")\n\n[](https://docs.stripe.com/connect/destination-charges \"Create destination charges\")\n\n[Create destination charges](https://docs.stripe.com/connect/destination-charges \"Create destination charges\")\n\n[\n\nCustomers transact with your platform for products or services provided by your connected account.\n\n](https://docs.stripe.com/connect/destination-charges \"Create destination charges\")\n\n[](https://docs.stripe.com/connect/separate-charges-and-transfers \"Create separate charges and transfers\")\n\n[Create separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers \"Create separate charges and transfers\")\n\n[\n\nTransactions involves multiple parties and a specific party isn’t known at the time of charge.\n\n](https://docs.stripe.com/connect/separate-charges-and-transfers \"Create separate charges and transfers\")\n\n[\n\nConnect\n\n\n\n\n\n](https://docs.stripe.com/connect)\n\nEmbed dashboard components in your website\n\nUse Connect embedded components to add connected account dashboard functionality to your website.\n\n[\n\nEmbedded components quickstart\n\n\n\n](https://docs.stripe.com/connect/connect-embedded-components/quickstart)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/embedded_components.42dbb2af91eacece27fe470bcd8befbd.png)\n\n## Connect fundamentals![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/connect/onboarding \"Onboarding\")\n\n[Onboarding](https://docs.stripe.com/connect/onboarding \"Onboarding\")\n\n[\n\nCreate a Stripe-hosted onboarding flow or create your own custom flow with the Stripe API.\n\n](https://docs.stripe.com/connect/onboarding \"Onboarding\")\n\n[](https://docs.stripe.com/connect/charges \"Charge types\")\n\n[Charge types](https://docs.stripe.com/connect/charges \"Charge types\")\n\n[\n\nLearn about the different charge types to split payments between your platform and your accounts.\n\n](https://docs.stripe.com/connect/charges \"Charge types\")\n\n[](https://docs.stripe.com/connect/payouts-connected-accounts \"Payouts\")\n\n[Payouts](https://docs.stripe.com/connect/payouts-connected-accounts \"Payouts\")\n\n[\n\nManage external accounts and pay out your users.\n\n](https://docs.stripe.com/connect/payouts-connected-accounts \"Payouts\")\n\n[](https://docs.stripe.com/connect/tax-reporting \"Tax reporting\")\n\n[Tax reporting](https://docs.stripe.com/connect/tax-reporting \"Tax reporting\")\n\n[\n\nLearn how to manage US tax reporting for your Connect platform.\n\n](https://docs.stripe.com/connect/tax-reporting \"Tax reporting\")\n\n## Enhance your Connect integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/tax/connect \"Use Stripe Tax with Connect\")\n\n[Use Stripe Tax with Connect](https://docs.stripe.com/tax/connect \"Use Stripe Tax with Connect\")\n\n[\n\nCalculate, collect, and report taxes for your platform or connected accounts.\n\n](https://docs.stripe.com/tax/connect \"Use Stripe Tax with Connect\")",
  "title": "Stripe Connect | Stripe Documentation",
  "description": "Learn how to route payments between multiple parties.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/climate/faqs",
  "markdown": "# Climate Commitments | Stripe DocumentationThe Stripe Docs logo\n\n## Direct a fraction of your revenue to help advance carbon removal.\n\nHelp emerging permanent carbon removal technologies scale by allocating a fraction of your revenue to Climate Commitments in the [Dashboard](https://dashboard.stripe.com/setup/climate/activate). Stripe puts these contributions toward projects that remove carbon dioxide (CO2) from the atmosphere to help those projects scale. We select [various projects with the help of scientific expert reviewers](https://stripe.com/climate) and use a [transparent application process](https://github.com/stripe/negative-emissions-source-materials). Following the common pattern of a portfolio approach, some projects might deliver results, and others might fail. To make carbon neutral or net zero claims, use [Climate Orders](https://docs.stripe.com/climate/orders).\n\n## Manage and understand your commitment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can manage your contribution percentage and monitor impact in the [Dashboard](https://dashboard.stripe.com/climate). Stripe Climate Commitments also sends you regular updates with details about your contribution.\n\n## Enable Climate Commitments for Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can enable Climate Commitments for your platform, without affecting accounts on your platform, in your [Dashboard](https://dashboard.stripe.com/climate). If you take an application fee from your connected accounts, you’ll see this reflected in your percentage-based contributions. For destination charges, we apply the percentage-based contribution to the charge minus the transferred amount. For separate charges and transfers, we apply the percentage-based contribution to the entire charge amount.\n\n**For Standard accounts**:\n\n*   You can allow new Standard account users to enable Climate contributions during onboarding with the [Climate setting in the Dashboard](https://dashboard.stripe.com/settings/connect/climate). This contributes a portion of their revenue towards carbon removal.\n\n![The Stripe Climate onboarding page for connected accounts](https://b.stripecdn.com/docs-statics-srv/assets/ClimateConnectOnboardingPreview.b8ec04318a01e28f3a24b6ffc0381911.png)\n\nOptional step shown during Standard account onboarding\n\n*   Existing Standard accounts can log into their Dashboard to independently enable Climate Commitments. Doing so won’t affect your platform. To inform your Standard connected accounts about Climate Commitments, you can share this direct link to the Climate section of their Dashboard: [https://dashboard.stripe.com/get-started/climate](https://dashboard.stripe.com/get-started/climate).\n\nYou can demonstrate and explain your commitment to users by doing the following:\n\n*   Use the Climate badge\n*   Use reference language from the [Stripe Climate](http://stripe.com/climate) page\n*   Direct them to our [initial carbon removal purchases](https://stripe.com/blog/first-negative-emissions-purchases) blog post\n*   Direct them to your Stripe-hosted custom [webpage](https://dashboard.stripe.com/climate)\n\nThe Climate badge is only available on [Stripe Checkout](https://docs.stripe.com/payments/checkout), [Invoices](https://docs.stripe.com/invoicing), or [Receipts](https://docs.stripe.com/receipts?payment-ui=payment-links). If you use a different product, you can download our badge asset kit to add the Climate logo to your site. The badge asset kit is available for download from your Climate page. However, all Climate Commitments users can publish a free, custom climate page in a few clicks. This is also available from the same Climate page.",
  "title": "Climate Commitments | Stripe Documentation",
  "description": "Direct a fraction of your revenue to help advance carbon removal.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/financial-connections",
  "markdown": "# Stripe Financial Connections | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to access permissioned data from your users' financial accounts.\n\nStripe Financial Connections allows users to securely share their financial data with your business. With one simple integration you can instantly verify bank accounts for ACH payments, reduce underwriting risk with [balances](https://docs.stripe.com/financial-connections/balances) data, mitigate fraud by verifying account [ownership](https://docs.stripe.com/financial-connections/ownership) details, and build new fintech products with [transactions](https://docs.stripe.com/financial-connections/transactions) data.\n\nFinancial Connections enables your users to connect their accounts in fewer steps with [Link](https://support.stripe.com/questions/link-for-financial-connections-support-for-businesses), allowing them to save and quickly reuse their bank account details across Stripe merchants.\n\n## Use cases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Supported data types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Learn more![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Stripe Financial Connections | Stripe Documentation",
  "description": "Learn how to access permissioned data from your users' financial accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/identity",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\n## Identity\n\n## Learn how to verify identities using Stripe Identity.\n\nSign up for developer updates:",
  "title": "Identity | Stripe Documentation",
  "description": "Learn how to verify identities using Stripe Identity.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-cli",
  "markdown": "# Get started with the Stripe CLI\n\n## Build, test, and manage your Stripe integration directly from the command line.\n\nThe Stripe CLI is a developer tool to help you build, test, and manage your integration with Stripe directly from the command line. It’s simple to install, works on macOS, Windows, and Linux, and offers a range of functionality to enhance your developer experience with Stripe. You can use the Stripe CLI to:\n\n*   Create, retrieve, update, or delete any of your Stripe resources in test mode (for example, create a product)\n*   Stream real-time API requests and events happening in your account\n*   Trigger events to test your webhooks integration\n\n[](#install)\n\nFrom the command-line, use an install script or download and extract a versioned archive file for your operating system to install the CLI.\n\nTo install the Stripe CLI with [homebrew](https://brew.sh/), run:\n\n`brew install stripe/stripe-cli/stripe`\n\n[](#login-account)\n\nLogin and authenticate your Stripe user [Account](https://docs.stripe.com/get-started/account/activate) to generate a set of _restricted keys_. To learn more, see [Stripe CLI keys and permissions](https://docs.stripe.com/stripe-cli/keys).\n\nPress the **Enter** key on your keyboard to complete the authentication process in your browser.\n\n1.  Optionally, if you don’t want to use a browser, use the `--interactive` flag to authenticate with an existing API secret key or restricted key. This can be helpful when authenticating to the CLI without a browser, such as in a CI/CD pipeline.\n\n`stripe login --interactive`\n\n1.  Optionally, use the `--api-key` flag to specify your API secret key inline each time you send a request.\n\n`stripe login --api-key` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n[](#get-started)\n\nWatch this video to learn different ways to use the Stripe CLI. It covers how to configure the CLI, download sample code, and work with Stripe objects.",
  "title": "Get started with the Stripe CLI | Stripe Documentation",
  "description": "Build, test, and manage your Stripe integration directly from the command line.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/subscription-schedules",
  "markdown": "# Subscription schedules | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about subscription schedules and how to use them.\n\nUse [subscription schedules](https://docs.stripe.com/api/subscription_schedules) to automate changes to subscriptions over time. You can [create](https://docs.stripe.com/api/subscription_schedules/create) subscriptions directly through a schedule or you can add a schedule to an existing subscription. Use the [phases](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-phases) attribute to define the changes you want to make to the subscription. After a schedule completes all of its phases, it completes based on its [end\\_behavior](https://docs.stripe.com/api/subscription_schedules/create#create_subscription_schedule-end_behavior).\n\nSome changes you might want to schedule include:\n\n*   Starting a subscription on a future date\n*   Backdating a subscription to a past date\n*   Upgrading or downgrading a subscription\n\nSubscription schedules are available in both the Stripe Billing Dashboard and the API. Here’s a quick video of how subscription schedules work in the Dashboard:\n\nSubscription schedules in the Dashboard\n\nThe rest of this document explains subscription schedules in more detail. To see a list of examples, see the [use cases](https://docs.stripe.com/billing/subscriptions/subscription-schedules/use-cases) page.\n\n## Phases ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen creating a subscription schedule, use the [phases](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-phases) attribute to define when changes occur and what properties of the subscription to change. For example, you might offer a coupon for 50% off for the first three months of a subscription. In this scenario, you’d create a subscription schedule where the first phase is three months long and contains the 50% off coupon. In the second phase, the subscription would be reverted to the normal cost and the coupon would be removed. Phases must be sequential, meaning only one phase can be active at a given time.\n\n### Set the length of a phase ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [interval](https://docs.stripe.com/api/prices/object#price_object-recurring-interval) of a price determines how often to bill for a subscription. For example, a monthly interval is billed every month. Phases have an [iterations](https://docs.stripe.com/api/subscription_schedules/create#create_subscription_schedule-phases-iterations) attribute that you use to specify how long a phase should last. Multiply this value by the interval to determine the length of the phase. If a subscription schedule uses a price with a monthly interval and you set `iterations=2`, the phase lasts for two months.\n\nThe `end_date` of one phase has to be the `start_date` for the next phase. Using `iterations` automatically sets the `start_date` and `end_date` properly. You can set these values manually, but Stripe recommends using `iterations` instead. Because manually setting the start and end dates is prone to errors, only use it for advanced use cases.\n\n### Transition to the next phase ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPhase transitions happen automatically after the `end_date` on a phase is reached. When a phase starts, Stripe updates the subscription based on the attributes of the next phase. You can optionally enable [proration](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-phases-proration_behavior) to credit the user for unused items or time on the plan.\n\n### Use trials ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can add trial periods by setting [trial end](https://docs.stripe.com/api/subscription_schedules/create#create_subscription_schedule-phases-trial_end) on a phase. If you want the entire phase to be a trial, set the value of `trial_end` to the same time as the `end_date` of the phase. You can also set `trial_end` to a time before the `end_date` if you want to make only part of the phase a trial. When scheduling updates, you must specify the new `trial_end` on each phase.\n\n### Complete a schedule ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSubscription schedules end after the last phase is complete. At this point, the subscription is left in place and is no longer associated with the schedule. If you want to cancel a subscription after the last phase of a schedule completes, you can set [end\\_behavior](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-end_behavior) to `cancel`.\n\n### Phase attribute inheritance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen a phase becomes active, all attributes set on the phase are also set on the subscription. After the phase ends, attributes remain the same unless the next phase modifies them, or if the schedule has no default setting. You can set some attributes on both schedules and phases. This includes:\n\nIf one of these attributes is defined on the schedule, it becomes the default for all phases. When the same property is defined on both the schedule and the phase, the phase attribute overrides the schedule attribute. This behavior is explained more below:\n\n| Schedule attribute present | Phase attribute present | Outcome |\n| --- | --- | --- |\n| No  | No  | Defaults to the customer or account settings |\n| Yes | No  | Schedule attribute set |\n| Yes | Yes | Phase attribute set |\n| No  | Yes | Phase attribute set |\n\n### Use phase metadata ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use subscription schedule phases to set metadata on the underlying subscription. This allows you to control the metadata on a subscription with scheduled updates.\n\nTo use phase metadata with the API, set [metadata](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-phases-metadata) on the phases of a subscription schedule. When the underlying subscription enters a phase:\n\n*   Metadata from the phase with non-empty values are _added_ to the metadata on the subscription if the keys _aren’t_ already present in the latter.\n*   Metadata from the phase with non-empty values are used to _update_ the metadata on the subscription if the keys _are_ already present in the latter.\n*   Metadata from the phase with _empty values_ are used to _unset_ the corresponding keys in the metadata on the subscription.\n\nTo unset all keys in the subscription’s metadata, update the subscription directly or unset every key individually from the phase’s metadata. Updating the underlying subscription’s metadata directly doesn’t affect the current phase’s metadata.\n\nThe following example illustrates a subscription schedule with two phases, where each phase has its own metadata:\n\n`{   ...   \"object\": \"subscription_schedule\",   \"phases\": [     { // Phase 1       ...       \"metadata\": {         \"channel\": \"self-serve\",         \"region\": \"apac\",         \"upsell-products\": \"alpha\"       },     },     { // Phase 2       ...       \"metadata\": {         \"channel\": \"sales\",         \"churn-risk\": \"high\",         \"upsell-products\": \"\"       },     }   ], }`\n\nWhen this schedule creates a new subscription and the subscription enters `Phase 1`, the three keys in `Phase 1` metadata are added to the subscription’s metadata. Hence, the subscription in `Phase 1` has the following metadata:\n\n`{   ...   \"object\": \"subscription\",   \"metadata\": {     \"channel\": \"self-serve\",     \"region\": \"apac\",     \"upsell-products\": \"alpha\"   }, }`\n\nWhen the subscription enters `Phase 2`, the subscription’s metadata is updated:\n\n*   The value of `channel` is updated because a value is specified on the phase’s metadata and the subscription already has metadata with that key.\n*   The value of `region` is unchanged because it’s not specified on the phase.\n*   `churn-risk` is added because this is a new key.\n*   `upsell-products` is unset because an empty value is specified on the phase.\n\nHence, the subscription in `Phase 2` has the following metadata:\n\n`{   ...   \"object\": \"subscription\",   \"metadata\": {     \"channel\": \"sales\",     \"region\": \"apac\",     \"churn-risk\": \"high\"   } }`\n\nLearn how to [copy subscription metadata onto subscription invoices](https://docs.stripe.com/billing/invoices/subscription#subscription-metadata).\n\n## Create subscription schedules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [use cases](https://docs.stripe.com/billing/subscriptions/subscription-schedules/use-cases) page has more thorough examples but below is a basic example of creating a subscription schedule using a customer. Creating a schedule this way automatically creates the subscription as well.\n\n#### Note\n\nUnlike when you create a subscription directly, the first invoice of a subscription schedule with `collection_method` set to `charge_automatically` behaves like a recurring invoice and _isn’t_ immediately finalized at the time the schedule’s subscription is created. The invoice begins in a `draft` status and is finalized by Stripe [about 1 hour after creation](https://docs.stripe.com/billing/subscriptions/webhooks#understand).\n\nThis means that, for example, creating a charge-automatically subscription schedule with `start_date=now` also creates a subscription and an invoice in the `draft` status. This gives you a 1-hour window to [make edits to the invoice](https://docs.stripe.com/api/invoices/update). Later, the invoice is auto-advanced into the `open` or `paid` status depending on the outcome of the asynchronous payment attempt at finalization time.\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_GBHHxuvBvO26Ea \\  -d start_date=now \\  -d end_behavior=release \\  -d \"phases[0][items][0][price]\"=price_1GqNdGAJVYItwOKqEHb \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][iterations]\"=12`\n\nThis schedule:\n\n*   Starts as soon as it’s created.\n*   Sets the subscription to one instance of the product at `price_1GqNdGAJVYItwOKqEHb`.\n*   Goes through 12 iterations and then releases the subscription from the schedule.\n\nYou can also create subscription schedules by passing a subscription ID:\n\n`curl https://api.stripe.com/v1/subscription_schedules \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d from_subscription=sub_GB98WOvaRAWPl6`\n\nCreating a schedule this way uses attributes on the subscription to set attributes on the schedule.\n\nSimilar to other Stripe APIs, you can retrieve and update [subscription schedules](https://docs.stripe.com/api/subscription_schedules). You can also cancel and release them. Cancelling a subscription schedule cancels the subscription as well. If you only want to remove a schedule from a subscription, use the [release](https://docs.stripe.com/api/subscription_schedules/release) call.\n\n### Create subscription schedules without code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create multi-phase subscription schedules without using code in the Stripe Billing subscription editor. To do so, follow these steps:\n\n1.  In the Dashboard, open the [subscription editor](https://dashboard.stripe.com/subscriptions?create=subscription).\n2.  Add a customer.\n3.  Add a price to the product selection dropdown.\n4.  Set a duration for the first phase of the subscription schedule.\n5.  Click **\\+ Add phase**.\n6.  Select your next phase duration, or just **forever** to keep the subscription going.\n7.  Make the required changes to your new phase. You can change the quantity, change the price, add or remove coupons, reset the billing cycle date, change proration behavior, or update metadata. If you change the metadata in a phase, it updates the subscription’s metadata when that phase activates.\n8.  Save the new phase.\n9.  Add any additional phases as needed.\n10.  Create a subscription.\n\n## Update subscription schedules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can only update the current and future phases on subscription schedules. You need to pass in all current and future phases when you update a subscription schedule. You also need to pass in any previously set parameters that you want to keep. Any parameters that were previously set are unset for the existing phase unless you pass those in the update request. You still receive information in the response about past phases.\n\nYou can include up to 10 current or future phases. Updating the active phase updates the underlying subscription as well. For example, this call maintains the existing start and end dates, but updates the `quantity` to two:\n\n`curl https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"phases[0][items][0][price]\"=  {{PRICE_ID}}   \\  -d \"phases[0][items][0][quantity]\"=2 \\  -d \"phases[0][start_date]\"=1577865600 \\  -d \"phases[0][end_date]\"=1580544000`\n\nYou can also end the current phase immediately and start a new phase. This moves the active phase to the past and immediately applies the new phase to the subscription. The example below ends the current phase and starts a new phase:\n\n`curl https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"phases[0][items][0][price]\"=  {{PRICE_ID}}   \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][start_date]\"=1577865600 \\  -d \"phases[0][end_date]\"=now \\  -d \"phases[1][items][0][price]\"=  {{PRICE_ID}}   \\  -d \"phases[1][items][0][quantity]\"=2 \\  -d \"phases[1][start_date]\"=now \\  -d \"phases[1][end_date]\"=1580544000`\n\nTo add additional phases to a subscription schedule, pass in the current phase, and then define your new phases:\n\n`curl https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"phases[0][items][0][price]\"=  {{PRICE_ID}}   \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][start_date]\"=1577865600 \\  -d \"phases[0][end_date]\"=1580544000 \\  -d \"phases[1][items][0][price]\"=  {{PRICE_ID}}   \\  -d \"phases[1][items][0][quantity]\"=2 \\  -d \"phases[1][iterations]\"=1`\n\n### Update subscription schedules without code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can update existing subscriptions to have future subscription schedule phases using the Stripe Billing subscription editor. To do so, follow these steps:\n\n1.  In the Dashboard, go to the [Subscriptions](https://dashboard.stripe.com/subscriptions) page, select an existing subscription, and click **Actions** > **Update subscription**.\n2.  Set a duration for the current phase of the subscription schedule by selecting an end date.\n3.  Click **+Add phase**.\n4.  Select your next phase duration, or just select **forever** to keep the subscription going.\n5.  Make the required changes to your new phase. You can change the quantity, change the price, add or remove coupons, reset the billing cycle date, change proration behavior, or update metadata. If you change the metadata in a phase, it updates the subscription’s metadata when that phase activates.\n6.  Save the new phase.\n7.  Add any additional phases as needed.\n8.  Create a subscription.\n\n## Preview an invoice![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [schedule](https://docs.stripe.com/api/invoices/upcoming#upcoming_invoice-schedule) parameter in the [upcoming invoice API](https://docs.stripe.com/api/invoices/upcoming) to preview the next invoice for a subscription schedule.\n\n`curl https://api.stripe.com/v1/invoices/create_preview \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d schedule=  {{SUBSCRIPTION_SCHEDULE_ID}}    `\n\n### Previewing schedule creation and updates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the parameters in [schedule\\_details](https://docs.stripe.com/api/invoices/upcoming#upcoming_invoice-schedule_details) to preview creating or updating a subscription schedule. Pass an existing [schedule](https://docs.stripe.com/api/invoices/upcoming#upcoming_invoice-schedule) to tell Stripe whether it’s a creation or an update.\n\nPass all of the current and future [phases](https://docs.stripe.com/api/invoices/upcoming#upcoming_invoice-schedule_details-phases) you’re previewing.\n\nFor example, the following code previews the first invoice for a subscription schedule with `1` phase that lasts for `12` billing periods.\n\n`curl https://api.stripe.com/v1/invoices/create_preview \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"customer_details[address][line1]\"=\"920 5th Ave\" \\  -d \"customer_details[address][city]\"=Seattle \\  -d \"customer_details[address][state]\"=WA \\  -d \"customer_details[address][postal_code]\"=98104 \\  -d \"customer_details[address][country]\"=US \\  -d \"schedule_details[phases][0][start_date]\"=now \\  -d \"schedule_details[phases][0][items][0][price]\"=  {{PRICE_ID}}   \\  -d \"schedule_details[phases][0][items][0][quantity]\"=1 \\  -d \"schedule_details[phases][0][iterations]\"=12`\n\n## Dashboard limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create and update subscription schedules without code in the [Dashboard](https://dashboard.stripe.com/test/subscriptions).\n\nIn the Dashboard, you can set the following settings globally across all phases, but not on a per phase basis:\n\n*   Billing thresholds\n*   Payment methods\n*   Invoice settings\n*   Subscription description\n*   Trial days (only works with the first phase)\n\nThe following parameters aren’t supported in the Dashboard:\n\n*   Subscription schedule metadata\n*   Phase item metadata\n*   Currency\n*   All Connect parameters",
  "title": "Subscription schedules | Stripe Documentation",
  "description": "Learn how to use subscription schedules to automate changes to subscriptions over time.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/build-subscriptions",
  "markdown": "# Build a subscriptions integration | Stripe DocumentationThe Stripe Docs logo\n\n## Create and manage subscriptions to accept recurring payments.\n\n![Checkout subscription page](https://b.stripecdn.com/docs-statics-srv/assets/checkout-subs-preview.d409ee79bf1f3280b9dfd3968b314c21.png)\n\n## What you’ll build ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis guide describes how to sell fixed-price monthly subscriptions using [Stripe Checkout](https://docs.stripe.com/payments/checkout).\n\nThis guide shows you how to:\n\n*   Model your business by building a product catalog\n*   Add a Checkout session to your site, including a button and success and cancellation pages\n*   Monitor subscription events and provision access to your service\n*   Set up the [customer portal](https://docs.stripe.com/customer-management)\n*   Add a customer portal session to your site, including a button and redirect\n*   Let customers manage their subscription through the portal\n\nAfter you complete the integration, you can extend it to:\n\n*   [Display taxes](https://docs.stripe.com/payments/checkout/taxes)\n*   [Apply discounts](https://docs.stripe.com/billing/subscriptions/coupons#using-coupons-in-checkout)\n*   [Offer customers a free trial period](https://docs.stripe.com/billing/subscriptions/trials)\n*   [Add more payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#low-code)\n*   [Integrate the hosted invoice page](https://docs.stripe.com/invoicing/hosted-invoice-page)\n*   [Use Checkout in setup mode](https://docs.stripe.com/payments/save-and-reuse)\n*   [Set up metered billing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing), [pricing tiers](https://docs.stripe.com/products-prices/pricing-models#tiered-pricing), and [usage-based pricing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing)\n*   [Manage prorations](https://docs.stripe.com/billing/subscriptions/prorations)\n*   [Allow customers to subscribe to multiple products](https://docs.stripe.com/billing/subscriptions/multiple-products)\n*   [Integrate entitlements to manage access to your product’s features](https://docs.stripe.com/billing/entitlements)\n\n[](#set-up-stripe)\n\nInstall the Stripe client of your choice:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\nInstall the Stripe CLI (optional). The CLI provides [webhook](https://docs.stripe.com/webhooks#test-webhook) testing, and you can run it to create your products and prices.\n\n`# Install Homebrew to run this command: [https://brew.sh/](https://brew.sh/) brew install stripe/stripe-cli/stripe  # Connect the CLI to your dashboard stripe login`\n\nFor additional install options, see [Get started with the Stripe CLI](https://docs.stripe.com/stripe-cli).\n\n[](#create-pricing-model)\n\nCreate your [products](https://docs.stripe.com/api/products \"subscription products\") and their [prices](https://docs.stripe.com/api/prices \"Prices\") in the Dashboard or with the Stripe CLI.\n\nThis example uses a fixed-price service with two different service-level options: Basic and Premium. For each service-level option, you need to create a product and a recurring price. (If you want to add a one-time charge for something like a setup fee, create a third product with a one-time price. To keep things simple, this example doesn’t include a one-time charge.)\n\nIn this example, each product bills at monthly intervals. The price for the Basic product is 5 USD. The price for the Premium product is 15 USD.\n\nGo to the [Add a product](https://dashboard.stripe.com/test/products/create) page and create two products. Add one price for each product, each with a monthly recurring billing period:\n\n*   Premium product: Premium service with extra features\n    \n    *   Price: Standard pricing | 15 USD\n*   Basic product: Basic service with minimum features\n    \n    *   Price: Standard pricing | 5 USD\n\nAfter you create the prices, record the price IDs so you can use them in other steps. Price IDs look like this: `price_G0FvDp6vZvdwRZ`.\n\nWhen you’re ready, use the **Copy to live mode** button at the top right of the page to clone your product from [test mode to live mode](https://docs.stripe.com/keys#test-live-modes).\n\nIf you offer multiple billing intervals, use Checkout to [upsell](https://docs.stripe.com/payments/checkout/upsells) customers on longer billing intervals and collect more revenue upfront.\n\nFor other pricing models, see [Billing examples](https://docs.stripe.com/products-prices/pricing-models).\n\n[](#create-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <!-- Note: If using PHP set the action to /create-checkout-session.php -->        <input type=\"hidden\" name=\"priceId\" value=\"price_G0FvDp6vZvdwRZ\" />       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nOn the backend of your application, define an endpoint that [creates the session](https://docs.stripe.com/api/checkout/sessions/create) for your frontend to call. You need these values:\n\n*   The price ID of the subscription the customer is signing up for—your frontend passes this value\n*   Your `success_url`, a page on your website that Checkout returns your customer to after they complete the payment\n\nYou can optionally provide `cancel_url`, a page on your website that Checkout returns your customer to if they cancel the payment process. You can also configure a [billing cycle anchor](https://docs.stripe.com/billing/subscriptions/billing-cycle) to your subscription in this call.\n\nIf you created a one-time price in [step 2](https://docs.stripe.com/billing/subscriptions/build-subscriptions#create-pricing-model), pass that price ID as well. After creating a Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n#### Note\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`# The price ID passed from the front end. #   price_id = params['priceId'] price_id = '{{PRICE_ID}}'  session = Stripe::Checkout::Session.create({   success_url: 'https://example.com/success.html?session_id={CHECKOUT_SESSION_ID}',   cancel_url: 'https://example.com/canceled.html',   mode: 'subscription',   line_items: [{     # For metered billing, do not pass quantity     quantity: 1,     price: price_id,   }], })  # Redirect to the URL returned on the session #   redirect session.url, 303`\n\nThis example customizes the `success_url` by appending the Session ID. For more information about this approach, see the documentation on how to [Customize your success page](https://docs.stripe.com/payments/checkout/custom-success-page).\n\nFrom your [Dashboard](https://dashboard.stripe.com/settings/payment_methods), enable the payment methods you want to accept from your customers. Checkout supports [several payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support).\n\n[\n\n## Provision and monitor subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#provision-and-monitor)\n\nAfter the subscription signup succeeds, the customer returns to your website at the `success_url`, which initiates a `checkout.session.completed` [webhooks](https://docs.stripe.com/webhooks \"webhook\"). When you receive a `checkout.session.completed` event, you can [provision the subscription](https://docs.stripe.com/billing/subscriptions/overview#provisioning). Continue to provision each month (if billing monthly) as you receive `invoice.paid` events. If you receive an `invoice.payment_failed` event, notify your customer and send them to the customer portal to update their payment method.\n\nTo determine the next step for your system’s logic, check the event type and parse the payload of each [event object](https://docs.stripe.com/api/events/object), such as `invoice.paid`. Store the `subscription.id` and `customer.id` event objects in your database for verification.\n\nFor testing purposes, you can monitor events in the [Dashboard](https://dashboard.stripe.com/events). For production, set up a webhook endpoint and subscribe to appropriate event types. If you don’t know your `STRIPE_WEBHOOK_SECRET` key, click the [webhook](https://dashboard.stripe.com/webhooks) in the Dashboard to view it.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/webhook' do   webhook_secret = '{{STRIPE_WEBHOOK_SECRET}}'    payload = request.body.read   if !webhook_secret.empty?     # Retrieve the event by verifying the signature using the raw body and secret if webhook signing is configured.     sig_header = request.env['HTTP_STRIPE_SIGNATURE']     event = nil      begin       event = Stripe::Webhook.construct_event(         payload, sig_header, webhook_secret       )     rescue JSON::ParserError => e       # Invalid payload       status 400       return     rescue Stripe::SignatureVerificationError => e       # Invalid signature       puts '⚠️  Webhook signature verification failed.'       status 400       return     end   else     data = JSON.parse(payload, symbolize_names: true)     event = Stripe::Event.construct_from(data)   end   # Get the type of webhook event sent   event_type = event['type']   data = event['data']   data_object = data['object']    case event_type   when 'checkout.session.completed'     # Payment is successful and the subscription is created.     # You should provision the subscription and save the customer ID to your database.   when 'invoice.paid'     # Continue to provision the subscription as payments continue to be made.     # Store the status in your database and check when a user accesses your service.     # This approach helps you avoid hitting rate limits.   when 'invoice.payment_failed'     # The payment failed or the customer does not have a valid payment method.     # The subscription becomes past_due. Notify your customer and send them to the     # customer portal to update their payment information.   else     puts \"Unhandled event type: \\#{event.type}\"   end    status 200 end`\n\nThe minimum event types to monitor:\n\n| Event name | Description |\n| --- | --- |\n| `checkout.session.completed` | Sent when a customer clicks the Pay or Subscribe button in Checkout, informing you of a new purchase. |\n| `invoice.paid` | Sent each billing interval when a payment succeeds. |\n| `invoice.payment_failed` | Sent each billing interval if there is an issue with your customer’s payment method. |\n\nFor even more events to monitor, see [Subscription webhooks](https://docs.stripe.com/billing/subscriptions/webhooks).\n\n[](#configure-portal)\n\nThe [customer portal](https://docs.stripe.com/customer-management) lets your customers directly manage their existing subscriptions and invoices.\n\nUse [the Dashboard](https://dashboard.stripe.com/test/settings/billing/portal) to configure the portal. At a minimum, make sure to configure it so that customers can update their payment methods. See [Integrating the customer portal](https://docs.stripe.com/customer-management) for information about other settings you can configure.\n\n[](#create-portal-session)\n\nDefine an endpoint that [creates the customer portal session](https://docs.stripe.com/api/customer_portal/sessions/create) for your frontend to call. Here `CUSTOMER_ID` refers to the customer ID created by a Checkout Session that you saved while processing the `checkout.session.completed` webhook. You can also set a default redirect link for the portal in the Dashboard.\n\nPass an optional `return_url` value for the page on your site to redirect your customer to after they finish managing their subscription:\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`# This is the URL to which users will be redirected after they are done # managing their billing. return_url = '{{DOMAIN_URL}}'  customer_id = '{{CUSTOMER_ID}}'  session = Stripe::BillingPortal::Session.create({   customer: customer_id,   return_url: return_url, })  # Redirect to the URL for the session #   redirect session.url, 303`\n\n[](#send-to-portal)\n\nOn your frontend, add a button to the page at the `success_url` that provides a link to the customer portal:\n\n`<html>   <head>     <title>Manage Billing</title>   </head>   <body>     <form action=\"/customer-portal\" method=\"POST\">       <!-- Note: If using PHP set the action to /customer-portal.php -->       <button type=\"submit\">Manage Billing</button>     </form>   </body> </html>`\n\nAfter exiting the customer portal, the Customer returns to your website at the `return_url`. Continue to [monitor webhooks](https://docs.stripe.com/billing/subscriptions/webhooks) to track the state of the Customer’s subscription.\n\nIf you configure the customer portal to allow actions such as canceling a subscription, see [Integrating the customer portal](https://docs.stripe.com/customer-management/integrate-customer-portal#webhooks) for additional events to monitor.\n\n[](#test)\n\n### Test payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following table to test different payment methods and scenarios.\n\n| Payment method | Scenario | How to test |\n| --- | --- | --- |\n| BECS Direct Debit | Your customer successfully pays with BECS Direct Debit. | Fill out the form using the account number `900123456` and BSB `000-000`. The confirmed PaymentIntent initially transitions to `processing`, then transitions to the `succeeded` status three minutes later. |\n| BECS Direct Debit | Your customer’s payment fails with an `account_closed` error code. | Fill out the form using the account number `111111113` and BSB `000-000`. |\n| Credit card | The card payment succeeds and does not require authentication. | Fill out the credit card form using the credit card number `4242 4242 4242 4242` with any expiration, CVC, and postal code. |\n| Credit card | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number `4000 0025 0000 3155` with any expiration, CVC, and postal code. |\n| Credit card | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number `4000 0000 0000 9995` with any expiration, CVC, and postal code. |\n| SEPA Direct Debit | Your customer successfully pays with SEPA Direct Debit. | Fill out the form using the account number `AT321904300235473204`. The confirmed PaymentIntent initially transitions to processing, then transitions to the succeeded status three minutes later. |\n| SEPA Direct Debit | Your customer’s payment intent status transition from `processing` to `requires_payment_method`. | Fill out the form using the account number `AT861904300235473202`. |\n\n### Monitoring events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet up webhooks to listen to subscription change events like upgrades and cancellations. Read the guide to learn more about [subscription webhooks](https://docs.stripe.com/billing/subscriptions/webhooks). You can view events in the [Dashboard](https://dashboard.stripe.com/test/events) or with the [Stripe CLI](https://docs.stripe.com/webhooks#test-webhook).\n\nFor more details about [testing your Billing integration](https://docs.stripe.com/billing/testing), read the guide.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Offer customers a free trial period](https://docs.stripe.com/billing/subscriptions/trials)\n*   [Apply discounts](https://docs.stripe.com/billing/subscriptions/coupons#using-coupons-in-checkout)\n*   [Manage prorations](https://docs.stripe.com/billing/subscriptions/prorations)\n*   [Integrate entitlements to manage access to your product’s features](https://docs.stripe.com/billing/entitlements)",
  "title": "Build a subscriptions integration | Stripe Documentation",
  "description": "Create and manage subscriptions to accept recurring payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/revenue-recovery",
  "markdown": "# Revenue recovery | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about automated recovery features that reduce and recover failed subscription payments.\n\nPrevent lost revenue and reduce churn with Stripe’s revenue recovery features. These automated tools make sure you don’t lose revenue to failed payments or missed trial conversions. None of the features require you to write code, so you can start recovering revenue today.\n\n## Revenue recovery features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides a full tool set to help you recover recurring revenue:\n\n## Recurring revenue recovery optimizations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe recommends including the following recurring revenue recovery optimizations in your integration. As you complete each item, check it off. Your browser’s cache stores the state of each checkbox so you can refer back to this page to see what you’ve completed so far.\n\n*   Set up failed payment retries\n    \n    Retrying failed payments is one of the most effective ways to recover revenue. It requires no manual intervention from you or the customer.\n    \n    You can set up Smart Retries and custom retry schedules in the Stripe Dashboard without writing any code. Smart Retries use data points to find the best time to retry the payment and are more effective than scheduled retries.\n    \n    *   [Automate payment retries](https://docs.stripe.com/billing/revenue-recovery/smart-retries)\n    \n*   Set up automatic customer emails\n    \n    Set up automated customer emails to notify customers of possible issues. You can enable these based on your business’s use cases. Many businesses use failed payment and 3D Secure emails to help customers immediately fix failing payments.\n    \n    *   [Automate customer emails](https://docs.stripe.com/billing/revenue-recovery/customer-emails).\n    \n*   You can set up more automations for custom logic and revenue recovery without writing code, including workflows like:\n    \n    *   [Custom dunning flow for annual subscribers](https://docs.stripe.com/billing/automation-recipes#custom-dunning-flow)\n    *   [Notify your team when high value invoices are overdue](https://docs.stripe.com/billing/automation-recipes#invoice-overdue-notifications)\n    *   [Email a confirmation when a subscription is canceled](https://docs.stripe.com/billing/automation-recipes#subscription-cancellation-confirmation)\n    \n    *   [Automation recipes](https://docs.stripe.com/billing/automation-recipes)\n    *   [Automations](https://docs.stripe.com/billing/automations)",
  "title": "Revenue recovery | Stripe Documentation",
  "description": "Learn about automated recovery features that reduce and recover failed subscription payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/invoicing/tax-ids",
  "markdown": "# Account and customer tax IDs with Invoicing\n\n## Learn about storing, validating, and rendering tax ID numbers for Invoicing.\n\nWith Stripe, you can manage tax IDs ​​for both yourself and your customers. Both the account and customer tax IDs display in the header of [invoice](https://docs.stripe.com/api/invoices \"invoices\") and credit note PDFs.\n\n## Account tax IDs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDisplaying your tax IDs on invoice documents is a common regulatory requirement.\n\nWith Stripe, you can add up to 25 tax IDs to your account. You can see your tax IDs in the header of invoice and credit note PDFs. You can:\n\n*   Select default tax IDs to appear on every invoice and credit note PDF.\n*   Define a list of tax IDs to appear on a specific invoice.\n\n#### Caution\n\nYou can’t add, change, or remove account tax IDs after an invoice is finalized.\n\n## Managing account tax IDs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can add and delete tax IDs using the [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) page in the Dashboard. After you add a tax ID in the Dashboard, you can set it as the default tax ID for every invoice and credit note PDF. Tax IDs are immutable—you can’t change the country and ID after you save the tax ID to your account.\n\nAdditionally, you can add and delete tax IDs with the [create](https://docs.stripe.com/api/tax_ids/create) and [delete](https://docs.stripe.com/api/tax_ids/delete) endpoints.\n\n### Adding and removing IDs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nVisit the [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) page. Click the **Tax** tab and add a new tax ID or remove an existing tax ID:\n\n![Manage tax IDs in the Stripe Dashboard.](https://b.stripecdn.com/docs-statics-srv/assets/manage-add.f10a7efcaf2ce75e42bc986ff3954c0b.png)\n\nManage account tax IDs in the Dashboard\n\n### Setting default tax IDs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn the [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) page, click the **Tax** tab and locate the tax ID you want to set as the default. Click the overflow menu (), select **Set as default**, and click **Save**.\n\n![Set default tax ID in the Stripe Dashboard.](https://b.stripecdn.com/docs-statics-srv/assets/manage-default.c36bf6e90db0825b107b5b6d375396cf.png)\n\nSet default account tax ID in the Dashboard\n\n​​After you set a tax ID as the default, you can see a label in the tax information box:\n\n![A default tax ID in the Stripe Dashboard.](https://b.stripecdn.com/docs-statics-srv/assets/manage-default-set.a1c4d9a7605eabbe0491fb64cf031397.png)\n\nA default account tax ID in the Dashboard\n\n## Displaying tax IDs on invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe automatically pulls your [default tax IDs](#default-tax-ids) during invoice finalization.\n\nTo override the default and display multiple tax IDs on invoices, you can set tax IDs in the Dashboard or by using the API. To learn more about taxes and invoices, see [Taxes](https://docs.stripe.com/invoicing/taxes).\n\nYou can set a list of tax IDs in the Dashboard using the Invoice Editor. ​​You can’t modify account tax IDs after an Invoice has been finalized.\n\nIn the Invoice Editor, scroll down to the **Advanced Options** section. Click the checkboxes to toggle which tax IDs ​​to display on that invoice. To remove tax IDs from the invoice, uncheck the boxes.\n\n![Tax ID invoice settings in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/invoice-editor.1e64187379099e87ac0eb00a4a1c0e15.png)\n\nAdvanced Options section in the Invoice Editor\n\n## Customer tax IDs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCollecting and displaying a customer’s tax ID on an invoice is a common requirement for B2B sales. With Stripe, you can add up to five tax IDs to a customer. You can see a customer’s tax IDs in the header of invoice and credit note PDFs. You can collect a tax ID with Stripe Checkout, or pass us a tax ID directly.\n\n#### Note\n\n## Supported tax ID types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCurrently, Stripe supports the following tax ID types in the following regions:\n\n| Country | Enum | Description | Example |\n| --- | --- | --- | --- |\n| Andorra | `ad_nrt` | Andorran NRT number | _A-123456-Z_ |\n| Argentina | `ar_cuit` | Argentinian tax ID number | _12-3456789-01_ |\n| Australia | `au_abn` | Australian Business Number (AU ABN) | _12345678912_ |\n| Australia | `au_arn` | Australian Taxation Office Reference Number | _123456789123_ |\n| Austria | `eu_vat` | European VAT number | _ATU12345678_ |\n| Bahrain | `bh_vat` | Bahraini VAT Number | _123456789012345_ |\n| Belgium | `eu_vat` | European VAT number | _BE0123456789_ |\n| Bolivia | `bo_tin` | Bolivian tax ID | _123456789_ |\n| Brazil | `br_cnpj` | Brazilian CNPJ number | _01.234.456/5432-10_ |\n| Brazil | `br_cpf` | Brazilian CPF number | _123.456.789-87_ |\n| Bulgaria | `bg_uic` | Bulgaria Unified Identification Code | _123456789_ |\n| Bulgaria | `eu_vat` | European VAT number | _BG0123456789_ |\n| Canada | `ca_bn` | Canadian BN | _123456789_ |\n| Canada | `ca_gst_hst` | Canadian GST/HST number | _123456789RT0002_ |\n| Canada | `ca_pst_bc` | Canadian PST number (British Columbia) | _PST-1234-5678_ |\n| Canada | `ca_pst_mb` | Canadian PST number (Manitoba) | _123456-7_ |\n| Canada | `ca_pst_sk` | Canadian PST number (Saskatchewan) | _1234567_ |\n| Canada | `ca_qst` | Canadian QST number (Québec) | _1234567890TQ1234_ |\n| Chile | `cl_tin` | Chilean TIN | _12.345.678-K_ |\n| China | `cn_tin` | Chinese tax ID | _123456789012345678_ |\n| Colombia | `co_nit` | Colombian NIT number | _123.456.789-0_ |\n| Costa Rica | `cr_tin` | Costa Rican tax ID | _1-234-567890_ |\n| Croatia | `eu_vat` | European VAT number | _HR12345678912_ |\n| Cyprus | `eu_vat` | European VAT number | _CY12345678Z_ |\n| Czech Republic | `eu_vat` | European VAT number | _CZ1234567890_ |\n| Denmark | `eu_vat` | European VAT number | _DK12345678_ |\n| Dominican Republic | `do_rcn` | Dominican RCN number | _123-4567890-1_ |\n| Ecuador | `ec_ruc` | Ecuadorian RUC number | _1234567890001_ |\n| Egypt | `eg_tin` | Egyptian Tax Identification Number | _123456789_ |\n| El Salvador | `sv_nit` | El Salvadorian NIT number | _1234-567890-123-4_ |\n| Estonia | `eu_vat` | European VAT number | _EE123456789_ |\n| EU  | `eu_oss_vat` | European One Stop Shop VAT number for non-Union scheme | _EU123456789_ |\n| Finland | `eu_vat` | European VAT number | _FI12345678_ |\n| France | `eu_vat` | European VAT number | _FRAB123456789_ |\n| Georgia | `ge_vat` | Georgian VAT | _123456789_ |\n| Germany | `de_stn` | German Tax Number (Steuernummer) | _1234567890_ |\n| Germany | `eu_vat` | European VAT number | _DE123456789_ |\n| Greece | `eu_vat` | European VAT number | _EL123456789_ |\n| Hong Kong | `hk_br` | Hong Kong BR number | _12345678_ |\n| Hungary | `eu_vat` | European VAT number | _HU12345678_ |\n| Hungary | `hu_tin` | Hungary tax number (adószám) | _12345678-1-23_ |\n| Iceland | `is_vat` | Icelandic VAT | _123456_ |\n| India | `in_gst` | Indian GST number | _12ABCDE3456FGZH_ |\n| Indonesia | `id_npwp` | Indonesian NPWP number | _12.345.678.9-012.345_ |\n| Ireland | `eu_vat` | European VAT number | _IE1234567AB_ |\n| Israel | `il_vat` | Israel VAT | _000012345_ |\n| Italy | `eu_vat` | European VAT number | _IT12345678912_ |\n| Japan | `jp_cn` | Japanese Corporate Number (\\*Hōjin Bangō\\*) | _1234567891234_ |\n| Japan | `jp_rn` | Japanese Registered Foreign Businesses' Registration Number (\\*Tōroku Kokugai Jigyōsha no Tōroku Bangō\\*) | _12345_ |\n| Japan | `jp_trn` | Japanese Tax Registration Number (\\*Tōroku Bangō\\*) | _T1234567891234_ |\n| Kazakhstan | `kz_bin` | Kazakhstani Business Identification Number | _123456789012_ |\n| Kenya | `ke_pin` | Kenya Revenue Authority Personal Identification Number | _P000111111A_ |\n| Latvia | `eu_vat` | European VAT number | _LV12345678912_ |\n| Liechtenstein | `li_uid` | Liechtensteinian UID number | _CHE123456789_ |\n| Lithuania | `eu_vat` | European VAT number | _LT123456789123_ |\n| Luxembourg | `eu_vat` | European VAT number | _LU12345678_ |\n| Malaysia | `my_frp` | Malaysian FRP number | _12345678_ |\n| Malaysia | `my_itn` | Malaysian ITN | _C 1234567890_ |\n| Malaysia | `my_sst` | Malaysian SST number | _A12-3456-78912345_ |\n| Malta | `eu_vat` | European VAT number | _MT12345678_ |\n| Mexico | `mx_rfc` | Mexican RFC number | _ABC010203AB9_ |\n| Netherlands | `eu_vat` | European VAT number | _NL123456789B12_ |\n| New Zealand | `nz_gst` | New Zealand GST number | _123456789_ |\n| Nigeria | `ng_tin` | Nigerian Tax Identification Number | _12345678-0001_ |\n| Norway | `no_vat` | Norwegian VAT number | _123456789MVA_ |\n| Norway | `no_voec` | Norwegian VAT on e-commerce number | _1234567_ |\n| Oman | `om_vat` | Omani VAT Number | _OM1234567890_ |\n| Peru | `pe_ruc` | Peruvian RUC number | _12345678901_ |\n| Philippines | `ph_tin` | Philippines Tax Identification Number | _123456789012_ |\n| Poland | `eu_vat` | European VAT number | _PL1234567890_ |\n| Portugal | `eu_vat` | European VAT number | _PT123456789_ |\n| Romania | `eu_vat` | European VAT number | _RO1234567891_ |\n| Romania | `ro_tin` | Romanian tax ID number | _1234567890123_ |\n| Russia | `ru_inn` | Russian INN | _1234567891_ |\n| Russia | `ru_kpp` | Russian KPP | _123456789_ |\n| Saudi Arabia | `sa_vat` | Saudi Arabia VAT | _123456789012345_ |\n| Serbia | `rs_pib` | Serbian PIB number | _123456789_ |\n| Singapore | `sg_gst` | Singaporean GST | _M12345678X_ |\n| Singapore | `sg_uen` | Singaporean UEN | _123456789F_ |\n| Slovakia | `eu_vat` | European VAT number | _SK1234567891_ |\n| Slovenia | `eu_vat` | European VAT number | _SI12345678_ |\n| Slovenia | `si_tin` | Slovenia tax number (davčna številka) | _12345678_ |\n| South Africa | `za_vat` | South African VAT number | _4123456789_ |\n| South Korea | `kr_brn` | Korean BRN | _123-45-67890_ |\n| Spain | `es_cif` | Spanish NIF number (previously Spanish CIF number) | _A12345678_ |\n| Spain | `eu_vat` | European VAT number | _ESA1234567Z_ |\n| Sweden | `eu_vat` | European VAT number | _SE123456789123_ |\n| Switzerland | `ch_uid` | Switzerland UID number | _CHE-123.456.789 HR_ |\n| Switzerland | `ch_vat` | Switzerland VAT number | _CHE-123.456.789 MWST_ |\n| Taiwan | `tw_vat` | Taiwanese VAT | _12345678_ |\n| Thailand | `th_vat` | Thai VAT | _1234567891234_ |\n| Turkey | `tr_tin` | Turkish Tax Identification Number | _0123456789_ |\n| Ukraine | `ua_vat` | Ukrainian VAT | _123456789_ |\n| United Arab Emirates | `ae_trn` | United Arab Emirates TRN | _123456789012345_ |\n| United Kingdom | `eu_vat` | Northern Ireland VAT number | _XI123456789_ |\n| United Kingdom | `gb_vat` | United Kingdom VAT number | _GB123456789_ |\n| United States | `us_ein` | United States EIN | _12-3456789_ |\n| Uruguay | `uy_ruc` | Uruguayan RUC number | _123456789012_ |\n| Venezuela | `ve_rif` | Venezuelan RIF number | _A-12345678-9_ |\n| Vietnam | `vn_tin` | Vietnamese tax ID number | _1234567890_ |\n\n## Validation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIt’s your responsibility to make sure customer information is accurate (including their tax ID). Stripe displays a customer tax ID on an invoice, whether or not it is valid.\n\nStripe checks the format of the tax ID against the expected format, and asynchronously validates the tax ID against the external tax authority system for the tax ID types below.\n\n### Australian Business Numbers (ABN)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe automatically validates all Australian Business Numbers (ABNs) with the [Australian Business Register (ABR)](https://abr.gov.au/).\n\n### European Value-Added-Tax (EU VAT) Numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe automatically validates all European Value-Added-Tax (EU VAT) numbers with the [European Commission’s VAT Information Exchange System (VIES)](http://ec.europa.eu/taxation_customs/vies/). This process only validates whether or not the tax ID is valid—you still need to verify the customer’s name and address to make sure it matches the registration information.\n\nVIES validation usually takes only a few seconds,but may take longer, depending on the availability of the external tax authority system. Stripe will automatically handle VIES downtime and attempt retries for you.\n\n### United Kingdom Value-Added-Tax (GB VAT) Numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe automatically validates all UK Value-Added-Tax (GB VAT) numbers with the [United Kingdom’s Revenue & Customs (HMRC)](https://www.gov.uk/). This process only verifies that the tax ID is valid—you still need to verify the customer’s name and address to make sure it matches the registration information.\n\nHMRC validation usually takes only a few seconds, but may take longer, depending on the availability. Stripe automatically handles HMRC downtime and attempts retries for you.\n\n### Validation webhooks and Dashboard display![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause this validation process happens asynchronously, the customer.tax\\_id.updated webhook notifies you of validation updates.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/ids_valid_vat_registered.8c8f0b149549b3f3dd82b62f4e97ebfa.png)\n\nThe Dashboard displays the results of the validation while displaying the customer details, including those returned from the government databases and the registered name and address.\n\nWhen automatic validation isn’t available, you need to manually verify these IDs.\n\n## Managing customer tax IDs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can manage tax IDs in the Customers page in the Dashboard, in the customer portal, or with the API.\n\nTo add a customer tax ID in the Dashboard, navigate to the Customers page, and click **Update details** in the top of the **Details** panel. The Update customer invoice details modal opens, with the tax ID section visible.\n\nClicking the **Add tax ID** link adds a row to the tax ID list, where you can select the ID type and value. Removing the row removes a tax ID from a customer.\n\n![A customer's tax IDs in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/ids_update_customer.4a68e5df884bdad0b0ce78264850b107.png)\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Activating Stripe Tax](https://docs.stripe.com/tax/set-up)\n*   [Checkout and tax IDs](https://docs.stripe.com/tax/checkout/tax-ids)\n*   [Understanding zero tax amounts](https://docs.stripe.com/tax/zero-tax)\n*   [Connected account tax IDs on invoices](https://docs.stripe.com/connect/invoices#account-tax-ids)",
  "title": "Account and customer tax IDs with Invoicing | Stripe Documentation",
  "description": "Learn about storing, validating, and rendering tax ID numbers for Invoicing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/get-started",
  "markdown": "# Recognize revenue with Stripe | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe for your revenue recognition.\n\nYou can import your transaction data, set up rules to automate your revenue recognition, generate and customize revenue reports, and test your transaction model before going live.\n\nAll Stripe Revenue Recognition features are available from the [Dashboard](https://dashboard.stripe.com/revenue-recognition).\n\n#### Try for free\n\nStripe offers a 30-day free trial for Revenue Recognition if you want to preview it. When you [sign up](https://dashboard.stripe.com/), turn on [test mode](https://docs.stripe.com/test-mode \"test mode\") to explore all the features for free.\n\n#### Beta\n\nIf you’re a Connect platform with destination charges, and want to use Stripe Revenue Recognition, [create a ticket](https://support.stripe.com/contact/email?topic=financial_reports) on our support page to join our destination charges beta.\n\n[](#generate-reports)\n\nBy default, the Dashboard displays all [Revenue Recognition reports and charts](https://docs.stripe.com/revenue-recognition/reports#dashboard) by accounting periods (which is defined as the start and end dates of a given month). It takes between 24 - 48 hours for reports to generate and become available for download.\n\n#### Note\n\nIf you’d like to recognize revenue based on custom accounting periods such as the 4-5-4 retail calendar, please [create a ticket](https://support.stripe.com/contact/email?topic=financial_reports) on our support page to join our beta.\n\nBelow is a short summary of the reports and charts you can view, download, or both.\n\n| Reports and charts | Description |\n| --- | --- |\n| **Revenue overview** | High-level bar graphs that show your revenue activity (that is, your net recognized revenue and your ending balance per month) over time. |\n| **Monthly summary** | Details of the accounting activities for the last month or a specified previous month. See [Monthly summary](https://docs.stripe.com/revenue-recognition/reports/monthly-summary) for more information. |\n| **Revenue waterfall** | Displays expected recognizable revenue over time. This is also referred to as a revenue schedule chart. See [Revenue waterfall](https://docs.stripe.com/revenue-recognition/reports/waterfall) for more information. |\n| **Income statement** | Details of the revenue and contra revenue by month. |\n| **Balance sheet** | Details of the balance sheet account by month. |\n| **Debits and credits** | Details of the monthly debit-credit journal entries for accounts with activity. |\n| **Accounts receivable aging** | Details of the monthly and MTD outstanding invoice amounts that affect the accounts receivable ledger account. |\n| **Corrections** | Details of the monthly debit-credit correction journal entries for accounts. |\n\nSometimes you’ll see mismatches between your accounting reports after you import the data and set up Stripe.\n\n[](#test)\n\nUse test mode in the Dashboard to generate test revenue reports based on your transactions.\n\nBefore going live, you can test the transaction model without your test transactions. Create rules to exclude transactions from specific customers, products, invoices, or payments.\n\nFor example, you can exclude all revenues produced by a test customer, named `test@example.com`. [Create a rule](https://dashboard.stripe.com/revenue-recognition/rules/create) that applies to this customer and choose **Exclude revenue 100%** as the revenue treatment.\n\n## Other considerations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou might need to handle other considerations like [tax revenue](#third-party-tax), [passthrough fees](#passthrough-fees), [amortization granularity](https://docs.stripe.com/revenue-recognition/revenue-controls#amortization-granularity), and [catch-up revenue](https://docs.stripe.com/revenue-recognition/revenue-controls#catch-up-revenue). You can further set up Revenue Recognition so Stripe can handle it for you.\n\n### Recognize tax revenue from third-party solutions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can set up rules for Revenue Recognition to automatically calculate your tax revenue if you’re not using Stripe Tax.\n\nFirst, set the tax amount to the [tax](https://docs.stripe.com/billing/taxes/tax-rates) parameter of an invoice or an invoice line item. Then, set up a rule to recognize the amount as tax. You can track the revenue from tax in the reports under **Tax liability**.\n\nAs an example, say you’re using Avalara AvaTax to calculate sales tax for your products. You want to treat the invoice line item for `AvaTax` as tax so you create this rule:\n\n| Name | Apply to | Treatment |\n| --- | --- | --- |\n| `Recognize tax revenue from AvaTax` | **Invoices**<br><br>*   **Line item description contains all of the following:** `AvaTax` | **Treat as tax**<br><br>*   **Allocation** `100%` |\n\n### Calculate passthrough fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can set up [rules](https://docs.stripe.com/revenue-recognition/rules) so Stripe can automatically calculate the passthrough fees and, separately, your revenue on [invoice line items](https://docs.stripe.com/api/invoices/line_item) or a portion of an invoice line item.\n\nFor example, say you have an invoice line item `Service A` that costs 100 USD. You want to recognize 10 USD as passthrough fees and recognize 90 USD as revenue, so you [create this rule](https://dashboard.stripe.com/revenue-recognition/rules/create):\n\n| **Name** | **Apply to** | **Treatment** |\n| --- | --- | --- |\n| `Service A includes passthrough fees` | **Invoices**<br><br>*   **Line item description contains all of the following:** `Service A` | **Defer upon event & amortize over line item service period**<br><br>*   **Allocation** `90%`<br>*   **Defer from finalized time and amortize over line item service period**<br><br>**Treatment as passthrough fees**<br><br>*   **Allocation** `10%` |\n\n### Adjust Revenue Recognition controls ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhile Stripe Revenue Recognition is designed to work out-of-the-box for many business types, we understand that each business might have unique needs. We offer advanced configurations on your revenue recognition reporting through our [Controls](https://docs.stripe.com/revenue-recognition/revenue-controls) page, where you can easily adjust for settings like revenue amortization granularity and catch-up revenue treatment.",
  "title": "Recognize revenue with Stripe | Stripe Documentation",
  "description": "Learn how to use Stripe for your revenue recognition.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports",
  "markdown": "# Basic financial reports | Stripe DocumentationThe Stripe Docs logo\n\n## Get the data you need to complete your critical accounting and reconciliation workflows.\n\n## Free reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s financial reports help you understand and reconcile the activity in your account. You can view summary reports in the Dashboard or download itemized transaction data as a CSV file.\n\nTo get advanced business insights and handle complex reconciliation tasks, use Stripe’s reporting products.\n\n## Looking for something else?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLearn how to configure, customize, or programmatically automate reports. You can also sync your Stripe data with other accounting tools you already use.\n\n### Configuring reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Learn about [filters and other settings](https://docs.stripe.com/reports/options) for finding the right data.\n*   Understand the different [categories and types](https://docs.stripe.com/reports/reporting-categories) of transactions you might encounter.\n*   Retrieve reports programmatically [with the API](https://docs.stripe.com/reports/api).\n*   Create custom reports using SQL with [Stripe Sigma](https://docs.stripe.com/stripe-data).\n\n### Connect an accounting tool![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAutomatically import your transactions into accounting software. Stripe supports integrations with [NetSuite](https://docs.stripe.com/connectors/netsuite/overview), [Xero](https://stripe.com/partners/xero), [Quickbooks Desktop](https://docs.stripe.com/reports/quickbooks), and [more partners](https://stripe.com/partners/apps-and-extensions/accounting).\n\nYou can also use [Accounting Stripe Apps](https://marketplace.stripe.com/categories/accounting) to automate your bookkeeping, keep your financial data updated, and eliminate the need for manual data entry.",
  "title": "Basic financial reports | Stripe Documentation",
  "description": "Get the data you need to complete your critical accounting and reconciliation workflows.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/view-metrics",
  "markdown": "# Subscription metrics | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Stripe Dashboard to view metrics about your recurring revenue.\n\nUse Stripe’s analytics and reports to keep track of subscription metrics, and to understand and manage your revenue. We provide the following subscription metrics:\n\n| Metric | Description |\n| --- | --- |\n| Monthly Recurring Revenue (MRR) | Tracks normalized monthly revenue from all active and past-due subscriptions. Read more about MRR on [Stripe Support](https://support.stripe.com/questions/calculating-monthly-recurring-revenue-(mrr)-in-billing). |\n| Active subscribers | The total count of your active and past-due subscribers (not including trials or subscribers on free plans). We count a subscriber with multiple subscriptions as one subscriber. We also provide a breakdown of active subscriber growth by the sub-components of new, reactivated, and churned subscribers. Read more about active subscribers on [Stripe Support](https://support.stripe.com/questions/understanding-active-subscribers). |\n| New subscribers | The total number of new, non-trial, paid subscribers. We don’t include free plans or existing subscribers who add additional subscriptions. Read more about new subscribers on [Stripe Support](https://support.stripe.com/questions/understanding-the-new-subscribers-metric). |\n| New trials | The total number of new subscriptions that start with a free trial period. Read more about new trials on [Stripe Support](https://support.stripe.com/questions/impact-of-subscription-trial-periods-on-monthly-recurring-revenue-%28mrr%29-in-billing). |\n| Trial conversion rate | Measures your success at converting trials to active subscriptions during a rolling 30-day period. Your trial conversion rate is the percentage that’s converted to an active subscription with a paid invoice during the last 30 days of your trials. Read more about trial conversion rates on [Stripe Support](https://support.stripe.com/questions/calculating-trial-conversion-rate-in-billing). |\n| Subscriber churn rate | Measures the portion of your subscribers who left during a rolling 30-day period. Your churn rate is the percentage of subscribers that churn during the 30-day period, including all active subscribers at the start of the period and any new subscribers in the period. Read more about subscriber churn rates on [Stripe Support](https://support.stripe.com/questions/calculating-subscriber-churn-rate-in-billing#:~:text=Billing-,Subscriber%20Churn%20Rate,-The%20churn%20rate). |\n| Churned revenue | The total MRR lost during a period due to downgrades or churn. We count voluntary and involuntary churn due to lack of payment. Read more about churned revenue on [Stripe Support](https://support.stripe.com/questions/calculating-subscriber-churn-rate-in-billing#:~:text=numerator%20and%20denominator.-,Churned%20Revenue,-The%20churned%20revenue). |\n| Retention by cohort | Shows the subscriber retention rate for each month following the month that the customer first subscribed, called “the cohort.” If a customer unsubscribes, then resubscribes, they remain part of their original cohort. Read more about retention by cohort on [Stripe Support](https://support.stripe.com/questions/subscriber-cohorts-and-cohort-retention-in-billing). |\n| Average revenue per user | Your average MRR per user. We calculate this by dividing your MRR by the total number of active subscribers. Read more about the average revenue per user on [Stripe Support](https://support.stripe.com/questions/calculating-average-revenue-per-user-in-billing). |\n| Subscriber lifetime value | An estimate of the total revenue you can expect to collect from your average subscriber before they churn. Read more about subscriber lifetime value on [Stripe Support](https://support.stripe.com/questions/calculating-subscriber-lifetime-value-in-billing). |\n\nHover over the metric charts on the [Billing page](https://dashboard.stripe.com/billing) for more details. Use this information to understand the performance of your past and expected revenue streams.\n\n## Metrics functionalities![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe features below allow you to customize how you measure recurring revenue and churn.\n\n### MRR chart details Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo examine what’s driving increases or decreases in MRR on a specific date, click the MRR chart and see the data broken down into a list of daily changes by customer. See how to calculate MRR in Billing [on Stripe Support](https://support.stripe.com/questions/calculating-monthly-recurring-revenue-(mrr)-in-billing).\n\n### Metrics export ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo build financial models and begin downstream reporting, download your billing metrics data in CSV format. The export includes the following reports:\n\n| Report | Description |\n| --- | --- |\n| MRR per subscriber per month | Adds the monthly-normalized amounts of all active subscriptions |\n| Subscription metrics summary | Includes MRR roll-forward, active subscriber roll-forward, churn, and lifetime value |\n| Customer MRR changes | Includes a log of every MRR change for each customer, including new subscribers, upgrades, downgrades, reactivations, and churn. |\n\n### Metrics calculation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConfigure how we calculate your MRR and churn metrics.\n\nClick **Configure** to specify whether to exclude recurring discounts, one-time discounts, or both from the numbers. You can also specify whether to consider canceled subscriptions as churn immediately or at the end of the billing period.\n\nChanges take effect 24-48 hours after you save the configuration.",
  "title": "Subscription metrics | Stripe Documentation",
  "description": "Use the Stripe Dashboard to view metrics about your recurring revenue.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reconciliation",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Reconciliation\n\n## Understand your money movement and automate your payment reconciliation process with Stripe.\n\nUse Stripe reconciliation to accurately capture your revenue from the activity on your Stripe account and reconcile it with your system of record and bank statement.\n\n![Overview diagram of reconciliation process on Stripe](https://b.stripecdn.com/docs-statics-srv/assets/reconciliation-overview.1200b3825ccb04aeac7508df80d9c180.png)\n\nHow reconciliation works in Stripe.\n\nStripe reconciliation offers you the capability to perform two types of reconciliations:\n\nUsing Stripe reconciliation, you can:\n\n*   Track your cash on a daily basis.\n*   Identify gaps in fund flows or data discrepancies to fix leakages faster.\n*   Gain visibility into the complete lifecycle of each transaction.\n*   Implement strong financial controls to protect your business.\n*   Set up scalable processes for your financial operations that can grow with your business.\n\nYou can also use [Accounting Stripe Apps](https://marketplace.stripe.com/categories/accounting) to automate your bookkeeping, keep your financial data updated, and eliminate the need for manual data entry.\n\n#### Note\n\nStripe’s reconciliation features aren’t a substitute for professional services or professional advice.",
  "title": "Reconciliation | Stripe Documentation",
  "description": "Understand your money movement and automate your payment reconciliation process with Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-data/import-external-data",
  "markdown": "# Import data into Stripe | Stripe DocumentationThe Stripe Docs logo\n\n## Automatically import and map external data from other sources with no-code connectors.\n\nImport external data into Stripe with Data Management. Use the Dashboard to automatically upload data from other sources into Stripe.\n\nWith Data Management, you can:\n\n*   Connect your Apple App Store data to import subscriber data. This data can enrich your Revenue Recognition reports.\n*   View the processing status of your Import Sets.\n*   Get detailed information on file processing after completion.\n*   Download and resolve Import Set errors.\n*   Beta Create data templates to automatically map your CSV files to common objects.\n\n## Currently supported scenarios![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe support the following data import scenarios.\n\n*   Apple App Store subscriber report to power Revenue Recognition [reports](https://dashboard.stripe.com/revenue-recognition)\n*   Google Play report to power Revenue Recognition [reports](https://dashboard.stripe.com/revenue-recognition)\n*   Beta CSV transactions to [Stripe Tax](https://docs.stripe.com/billing/taxes) to monitor your obligations\n*   BetaJSON import of bulk metered events to power [usage based billing](https://docs.stripe.com/billing/subscriptions/usage-based)\n*   Beta Data Management API or set up of recurring imports with a data connector, like Amazon S3\n*   Beta Manual upload of a file as a one-time import",
  "title": "Import data into Stripe | Stripe Documentation",
  "description": "Import and map external data into Stripe with the no-code data management tool. Upload CSV files through the API or the Dashboard.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/how-tax-works",
  "markdown": "# How Tax works | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how Stripe Tax helps you automate tax compliance.\n\nTo be tax compliant, you need to:\n\n1.  Understand which locations require you to collect tax\n2.  Register for tax in those locations\n3.  Calculate and collect tax\n4.  Report, file, and remit the tax you collected\n\n## Introduction to indirect taxes with Stripe Tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach country handles tax on sold products and services differently, often calling it by a different name. In the US, businesses deal with sales tax. Throughout Europe, it’s called value-added tax ([VAT](https://en.wikipedia.org/wiki/Value-added_tax \"VAT\")). Canada and most countries in the Asia Pacific region refer to it as goods and services tax ([GST](https://en.wikipedia.org/wiki/Value-added_tax \"GST\")).\n\nTaxability and tax rates vary by location and category of products you’re selling. For example, children’s footwear is zero rated in Ireland, but adult footwear isn’t. Digital services are usually taxed at the standard rate in most EU countries. However, e-books are subject to the reduced rate.\n\n[Stripe Tax](https://stripe.com/tax) uses your business address, tax registrations, product tax codes, customers’ locations, and customer status to determine the correct tax rates for products you sell, in all supported locations. Read more about [tax codes](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior) and [how we calculate](https://docs.stripe.com/tax/calculating) for different jurisdictions.\n\n## Monitor your obligations and register![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou need to identify the locations where you have sales tax, VAT, or GST obligations and need to register to collect tax. If you sell into multiple locations, you need to be familiar with the [tax laws in those locations](https://docs.stripe.com/tax/supported-countries) because the place where your transaction takes place determines where you’re required to collect tax. This can be the seller’s country, the buyer’s country, or another location.\n\nAs your business grows and you sell to more locations, you need to register to collect tax in more locations. Stripe Tax tracks your Stripe transactions and helps you monitor your tax obligations. [Read more about tax obligation monitoring](https://docs.stripe.com/tax/monitoring).\n\nYou must register with the tax authority in a location to collect taxes there. In some countries and states you have to register before your first transaction, while others have a registration threshold (such as the number of sales or sales volume). Take a look at the [locations Stripe Tax supports](https://docs.stripe.com/tax/supported-countries) along with the different tax thresholds that apply and links to the tax authority websites.\n\nStripe Tax tracks your registrations and uses them to calculate and collect taxes. [Read more about adding your registrations to Stripe](https://docs.stripe.com/tax/registering).\n\nAfter you have registered to collect tax with a tax authority add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the **Dashboard**. This turns on tax calculation and collection in Stripe for your transactions.\n\n## Calculate and collect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you [set up Stripe Tax in the Dashboard](https://docs.stripe.com/tax/set-up), Stripe automatically calculates and collects taxes on your transactions. Alternatively you can use [Stripe Tax API](https://docs.stripe.com/tax/custom) to calculate taxes on your own custom payment flows. In either case, to determine which taxes to collect, you or your customers have to provide customer location information. [Read more about how Stripe calculates tax](https://docs.stripe.com/tax/calculating).\n\nIf you sell to other businesses, your transactions might be subject to reverse charges. This means that the tax liability shifts to the customer and we don’t charge tax on the transaction. Stripe Tax uses customer tax identification numbers to determine whether a transaction is B2B. Adding a tax identification number to the customer might affect the tax calculation result. Stripe Tax doesn’t validate whether the provided tax identification number exists or is valid. [Read about supported tax ID formats](https://docs.stripe.com/tax/invoicing/tax-ids#supported-tax-ids).\n\nSome individuals or entities might be tax exempt. For example, some US states have a reseller exemption. You can set an exempt status on customers to reflect this. [Read more about reverse charges and exempt customers](https://docs.stripe.com/tax/zero-tax).\n\n## Report, file, and remit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re collecting taxes, you must report, file, and remit (transfer) the taxes collected in every location that you’re registered in. Make sure you understand and comply with obligations of each state or country and consult your tax advisor if you need help. Stripe Tax supports exporting your transactions in an itemized format to aid with tax reporting. [Read more about Stripe Tax reports](https://docs.stripe.com/tax/reports).\n\nStripe Tax doesn’t currently file or remit taxes on your behalf. Submitting tax returns is key to your tax compliance. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
  "title": "How Tax works | Stripe Documentation",
  "description": "Learn how Stripe Tax helps you automate tax compliance.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-data/query-transactions",
  "markdown": "# Query transactional data | Stripe DocumentationThe Stripe Docs logo\n\n## Create custom reports for charges, refunds, and more.\n\nUse the data in the tables within the [schema](https://docs.stripe.com/stripe-data/write-queries) for reporting on your account’s balance activity. The tables in the **Payment Tables** sections represent funds that flow between your customers and your Stripe account, such as charges or refunds. The **Transfer Tables** section has information about transfers of your Stripe account balance to your bank account ([payouts](https://docs.stripe.com/payouts \"payout\")).\n\nUse the `balance_transactions` table as a starting point for accounting purposes. Unlike using separate tables (such as `charges` or `refunds`), it provides a ledger-style record of every [type](https://docs.stripe.com/api#balance_transaction_object-type) of transaction that comes into or flows out of your Stripe account balance. Use balance transactions to generate frequently used reports and to simplify how you report on financial activity. Some common types of balance transactions include:\n\n*   `charges`\n*   `refunds`\n*   `transfers`\n*   `payouts`\n*   `adjustments`\n*   `application_fees`\n\nEach balance transaction row represents an individual [balance\\_transaction](https://docs.stripe.com/api#balance_transaction_object) object that doesn’t change after it’s created. For example, creating a charge also creates a corresponding balance transaction of type `charge`. Refunding this charge creates a separate balance transaction of type `refund`—but it doesn’t modify the original balance transaction. Similarly, receiving a payout in your bank account (represented as a transfer) creates a balance transaction.\n\nThe following example query uses this table to retrieve some information about the five most recent balance transactions.\n\n`select   date_format(created, '%m-%d-%Y') as day,   id,   amount,   currency,   source_id,   type from balance_transactions order by day desc limit 5`\n\n| day | id  | amount | currency | source\\_id | type |\n| --- | --- | --- | --- | --- | --- |\n| 7/12/2024 | txn\\_XnvAVDWrR2QnStI | \\-1,000 | usd | re\\_Qp35p62AXVIOwmD | refund |\n| 7/12/2024 | txn\\_zi9QnHjpfUKmz3w | 1,000 | usd | ch\\_l3G5dklXZkmDHWp | charge |\n| 7/12/2024 | txn\\_RgEj0s5JcfXxEh2 | 1,000 | usd | ch\\_4kr7ywLj1OZX8ue | charge |\n| 7/12/2024 | txn\\_q55SvvsrIjrUfOQ | 1,000 | eur | ch\\_kpqzJrWkXfduJi1 | charge |\n| 7/12/2024 | txn\\_azrVlE2utLEYRNT | \\-1,000 | usd | re\\_43ERewX4eHydOB6 | refund |\n\nYou can calculate the most common financial summaries by joining the `balance_transactions` table with other tables containing the appropriate information. Some of our query templates (such as the [daily balance](https://dashboard.stripe.com/sigma/queries/templates/Daily%20balance) and [monthly summary and balance](https://dashboard.stripe.com/sigma/queries/templates/Monthly%20summary%20and%20balance)) work by joining this table to others.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/balance-transactions.f272cb17ff065ae1c02b320a235f0b3e.png)\n\n## Balance transaction fee details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `balance_transaction_fee_details` table provides fee information about each individual balance transaction. Joining this table to `balance_transactions` in the manner below allows you to return fee information for each balance transaction.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/balance_transaction_fee_details.e8c6bba21d6e26ee77157a3fd6b797be.png)\n\nThe following query joins the `balance_transactions` and `balance_transaction_fee_details` tables together. Each balance transaction item returned includes the amount, fee, type of fee applied, and a description of the fee.\n\n`select   date_format(date_trunc('day', balance_transactions.created), '%m-%d-%Y') as day,   balance_transactions.id,   balance_transactions.amount,   balance_transactions.fee,   balance_transaction_fee_details.type from balance_transactions inner join balance_transaction_fee_details   on balance_transaction_fee_details.balance_transaction_id=balance_transactions.id order by day desc limit 5`\n\n| day | id  | amount | fee | type |\n| --- | --- | --- | --- | --- |\n| 7/12/2024 | txn\\_RsLHklWruNENpuf | 1,000 | 59  | stripe\\_fee |\n| 7/12/2024 | txn\\_2ZQ36EJgH2wjpAC | 1,000 | 59  | stripe\\_fee |\n| 7/12/2024 | txn\\_RgYVZ6LhEdGLtye | 1,000 | 59  | stripe\\_fee |\n| 7/12/2024 | txn\\_Iek8kFG1GASjstV | 1,000 | 59  | stripe\\_fee |\n| 7/12/2024 | txn\\_YhDTzASh2BeqXYJ | 1,000 | 59  | stripe\\_fee |\n\n## Charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `charges` table contains data about [Charge](https://docs.stripe.com/api#charge_object) objects. Use this table for queries that focus on charge-specific information rather than for accounting or reconciliatory purposes. It also supplements accounting reports with additional customer data. For example, the [payment card breakdown](https://dashboard.stripe.com/sigma/queries/templates/Payment%20card%20breakdown) template query uses the `charges` table to report on the different types of cards your customers have used.\n\nYou can join the `charges` table to a number of others to retrieve more information with your queries.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/charges.6bba866fbd70648f58b7af6bcf425c3e.png)\n\nThe following example uses the `charges` table to report on failed charges, returning the card brand and a failure code and message.\n\n`select   date_format(date_trunc('day', created), '%m-%d-%Y') as day,   id,   card_brand,   failure_code,   failure_message from charges   where status = 'failed' order by day desc limit 5`\n\n| day | id  | card\\_brand | failure\\_code | failure\\_message |\n| --- | --- | --- | --- | --- |\n| 7/12/2024 | ch\\_6PjSKvH2QwesIBy | Visa | card\\_declined | Your card was declined. |\n| 7/12/2024 | ch\\_zu2dA2JHrUKxONA | MasterCard | card\\_declined | Your card doesn’t support this type of purchase. |\n| 7/12/2024 | ch\\_kjwCZjq6RQdPnyC | Visa | card\\_declined | Your card has insufficient funds. |\n| 7/12/2024 | ch\\_t2dBHvlaK3n4B6f | Visa | card\\_declined | Your card was declined. |\n| 7/12/2024 | ch\\_f7ANz3bkUA7uZl3 | MasterCard | card\\_declined | Your card was declined. |\n\n## Customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `customers` table contains data about [Customer](https://docs.stripe.com/api#customers) objects (this table isn’t part of the **Payment Tables** group). Use it if you’re creating charges using customers (for example, with saved payment information). It’s also useful if you’re using [subscriptions](https://docs.stripe.com/stripe-data/query-billing-data).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/customers.44a1f795dc4ca7d4df666617f45855e9.png)\n\nThe following example retrieves a list of failed charges, with the ID and email address for each customer.\n\n`select   date_format(date_trunc('day', charges.created), '%m-%d-%Y') as day,   customers.id,   customers.email,   charges.id from charges inner join customers on customers.id=charges.customer_id where charges.status = 'failed' order by day desc limit 5`\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCharges and refunds are separate objects within the API. Refunding a charge creates a [Refund](https://docs.stripe.com/api#refund_object). This data is available in the `refunds` table and provides in-depth information about completed refunds. Similar to reporting on charges, a best practice is to start with information about balance transactions. If necessary, you can then gather additional details using the `refunds` table.\n\nYou can join the `refunds` table to the `balance_transactions` and `charges` tables to further explore refund data.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/refunds.aebf78debf4de6e9ee96a477b23fc198.png)\n\nThe following example joins the `balance_transactions` and `refunds` tables together using the `refunds.balance_transaction_id` and `balance_transactions.id` columns. Each balance transaction item returned is a refund, displaying the charge ID and amount. Only balance transactions created after a certain date are returned.\n\n`select   date_format(date_trunc('day', balance_transactions.created), '%m-%d-%Y') as day,   balance_transactions.source_id,   refunds.charge_id,   balance_transactions.amount from balance_transactions inner join refunds on refunds.balance_transaction_id=balance_transactions.id   where balance_transactions.type = 'refund' order by day desc limit 5`\n\n| day | source\\_id | charge\\_id | amount |\n| --- | --- | --- | --- |\n| 7/12/2024 | re\\_ZItnbkbAbPnFoR5 | ch\\_QQoF9jEW8sZnKvB | \\-1,000 |\n| 7/12/2024 | re\\_4zxBnGhoA3h61JP | ch\\_5yM4gQwYkx0VitC | \\-1,000 |\n| 7/12/2024 | re\\_63Yh5Mfykncib40 | ch\\_CW8CXxQSozjwrgU | \\-1,000 |\n| 7/12/2024 | re\\_6tju7zFExsg7zWP | ch\\_1RXJnWy6F260yyP | \\-1,000 |\n| 7/12/2024 | re\\_mpAjn88mveVg3wk | ch\\_BLogTJNRPHb17kO | \\-1,000 |\n\n## Partial capture refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing [auth and capture](https://docs.stripe.com/charges/placing-a-hold) and capturing only some of the authorized amount creates both a charge and a refund. An authorized charge creates a `charge` and an associated balance transaction for the full amount. After a partial capture is complete, the uncaptured amount is released and a `refund` is created with a `reason` field of `partial_capture` along with an associated balance transaction.\n\nFor example, authorizing a 10 USD charge but only capturing 7 USD creates a `charge` for 10 USD. This also creates a `refund` with the reason `partial_capture` for the remaining 3 USD.\n\nTake this into account if your business is performing auth and capture charges as you’re creating reports to review customer refund rates. Without consideration, auth and capture can misrepresent the number of refunds on your account. Use the refund’s `reason` field to filter out partial capture refunds when retrieving payment information.\n\n`select   balance_transactions.id,   balance_transactions.amount from balance_transactions inner join refunds on refunds.id=balance_transactions.source_id where reason != 'partial_capture' limit 5`\n\n## Transfers and payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `transfers` table contains data about [payouts](https://docs.stripe.com/payouts) made from your Stripe balance to your bank account. You can use this table to reconcile each payout with the specific charges, refunds, and adjustments that comprise it, as long as you’re using [automatic payouts](https://docs.stripe.com/payouts).\n\nFor [Connect](https://docs.stripe.com/connect \"Connect\") platforms, this table also includes data about transfers of funds to connected Stripe accounts.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/transfers.f4311836b58c92e30de891a4d124d402.png)\n\nIf you’re performing payouts manually, the amount in each payout to your bank account is arbitrary. As such, you can’t reconcile it to specific balance transactions and it only reflects the amount you requested to pay out to your bank account.\n\nThe following example joins the `balance_transactions` and `transfers` tables together. It returns a list of charges and refunds, the payout they relate to, and the date that the payout is scheduled to arrive into your bank account.\n\n`select   date_format(date_trunc('day', balance_transactions.created), '%m-%d-%Y') as bt_created,   balance_transactions.source_id,   balance_transactions.type,   balance_transactions.net as net_amount,   balance_transactions.automatic_transfer_id as transfer_id,   date_format(date_trunc('day', transfers.date), '%m-%d-%Y') as transfer_date from balance_transactions inner join transfers on balance_transactions.automatic_transfer_id=transfers.id where balance_transactions.type = 'charge' and balance_transactions.type != 'refund' order by bt_created desc limit 5`\n\n| day | source\\_id | type | net\\_amount | transfer\\_id | transfer\\_date |\n| --- | --- | --- | --- | --- | --- |\n| 05-22-2017 | ch\\_fN6oUMKfDgNHX7P | charge | 941 | po\\_dSeTyPQnRgcBZHQ | 05-24-2017 |\n| 05-22-2017 | ch\\_RcQm8eeG0SROW9x | charge | 941 | po\\_fzuaNNI3DvzQK8Y | 05-24-2017 |\n| 05-21-2017 | ch\\_UMY8jGIuU2j9TPH | charge | 941 | po\\_ljZpwsDlaPsRcAB | 05-23-2017 |\n| 05-21-2017 | ch\\_ylbIkpINiBu7YkW | charge | 941 | po\\_IWEzsIfWulej46B | 05-23-2017 |\n| 05-21-2017 | ch\\_YTOD4LxXoPj1KXA | charge | 941 | po\\_6KXV31k0fti2bdW | 05-23-2017 |\n\n#### Caution\n\nPayouts before 04-06-2017 have a TRANSFER\\_ID with a `tr_` prefix.\n\n## Transfer reversals![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can reverse a manually created payout (or transfer to a connected Stripe account) if it hasn’t been paid out yet by using funds returned to the available balance in your account. These are represented as [Transfer\\_reversal](https://docs.stripe.com/api#transfer_reversal_object) objects and reside in the `transfer_reversals` table.\n\nTransfer reversals only apply to payouts and transfers that have been created manually—you can’t reverse automatic payouts.",
  "title": "Query transactional data | Stripe Documentation",
  "description": "Create custom reports for charges, refunds, and more.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/set-up",
  "markdown": "# Set up Stripe Tax | Stripe DocumentationThe Stripe Docs logo\n\n## Enable Stripe Tax to automatically calculate and collect tax.\n\n#### Note\n\nIf you’re a platform that wants to set up Stripe Tax for your connected accounts that are responsible for collecting, filing, and reporting taxes, see [Tax for software platforms](https://docs.stripe.com/tax/tax-for-platforms).\n\nTo set up Stripe Tax you need to configure your tax settings within the Dashboard on the [tax settings page](https://dashboard.stripe.com/settings/tax) and, depending on your integration, [add one line of code](#integrate).\n\n1.  [Confirm your origin address](#origin-address). Review and confirm that your details are correct.\n2.  [Select a preset tax code](#preset-tax-code). We use it to apply the correct tax rate.\n3.  [Select whether prices include tax](#default-tax-behavior) to have a tax behavior on every price for products.\n4.  [Add tax registrations](#add-registrations). Add an active tax registration when you’ve exceeded a tax threshold.\n5.  [Enable Tax in your Stripe integration or use the Stripe Tax API](#integrate) to start collecting tax.\n\n#### Note\n\n[](#origin-address)\n\nThe origin address is where your business is located or, if you sell physical goods, the address where you’re shipping goods from. We use your Stripe business address here so you only need to review and confirm that your details are correct on the [tax settings page](https://dashboard.stripe.com/settings/tax).\n\n[](#preset-tax-code)\n\n*   **Preset product tax code:** A product tax code is a classification of your product or service for Stripe Tax. We use this to make sure that the correct tax rate is applied to your transactions.\n    \n    You must select the correct product tax code for your product or service. We use this if you don’t explicitly specify a [`tax_code`](https://docs.stripe.com/api/products/create#create_product-tax_code), which maps to tax codes, on your products or in [`product_data`](https://docs.stripe.com/api/prices/create#create_price-product_data) on your transactions. Learn about [products, prices, and tax codes](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior).\n    \n\n*   **Default shipping tax code:** A shipping tax code determines what type of tax treatment to apply when shipping (delivery) fees are added to the price that you charge. In some countries, the tax rate used to calculate the correct amount of tax on your product is the same rate that’s applied to the shipping fees. Some countries have a unique tax rate for shipping fees.\n    \n    If you’re selling digital goods or services, or if you’re located in the EU, you don’t need to select anything. Otherwise, select the most appropriate tax treatment for your business. We use this if you don’t explicitly specify a tax code on a shipping rate.\n    \n\n[](#default-tax-behavior)\n\nTo calculate tax, you need to know the tax behavior of a price. The default tax behavior dictates that all prices for products have a tax behavior, in case it isn’t defined on the price itself.\n\nYou have three options:\n\n*   Exclusive: Tax is excluded from the price and is added on top of the price defined on the product.\n*   Inclusive: Tax is included in the price and already included in the price defined on the product.\n*   Automatic: Use currency to determine if tax is included or excluded. Stripe uses the currency of the price to define whether the tax is added on top of the price (excluded) or included in the price. Tax is excluded in USD and CAD, but included in all other currencies.\n\nLearn about [tax behavior for products and prices](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-behavior).\n\n[](#add-registrations)\n\nWhen your business exceeds a tax threshold (the sales volume or number of transactions where you’re required to start collecting tax), you have to register with the local tax authority before you can add tax to your transactions. If you have existing transactions on Stripe, you’ll see our monitoring tool which helps you understand where you might be registered or need to register.\n\nAdd all your active tax registrations through the [registrations tab in the Dashboard](https://dashboard.stripe.com/tax/thresholds). You can either add a registration manually, or through the [Monitor tax thresholds section](https://dashboard.stripe.com/tax/registrations). You can schedule a registration to begin at a date in the future if you’re planning to register. Stripe Tax only calculates and collects tax on transactions in locations with active registrations.\n\nWe have more information on how to register in different markets. [Check our guide](https://docs.stripe.com/tax/supported-countries).\n\n[](#integrate)\n\nThe final step in setting up Stripe Tax is to enable automatic tax on your Stripe integration. Here’s how:\n\n*   **No-code:** Stripe Tax is enabled automatically on payments made in the Dashboard, but you can disable it in the [tax settings page](https://dashboard.stripe.com/settings/tax). Create an [invoice](https://dashboard.stripe.com/invoices/create), [subscription](https://dashboard.stripe.com/subscriptions/create), [quote](https://dashboard.stripe.com/quotes/create), or [payment link](https://dashboard.stripe.com/payment-links/create) to test the behavior.\n\n![Stripe dashboard with the automatic tax toggle set to true](https://b.stripecdn.com/docs-statics-srv/assets/dashboard_automatic_tax.2338adf39e3a07ad9acd79c036e7c637.png)\n\n*   **Low-code:** If you’re using any low-code products that are currently integrated with Stripe Tax, you need to add `automatic_tax[enabled]=true` to each integration. Read our guides for more information:\n    \n    *   [Invoicing](https://docs.stripe.com/tax/invoicing)\n    *   [Billing](https://docs.stripe.com/tax/subscriptions)\n    *   [Checkout](https://docs.stripe.com/tax/checkout)\n*   **Custom flows:** To use Tax with PaymentIntents, or to collect tax on payments received outside of Stripe, see our integration guide for [Custom Payment Flows](https://docs.stripe.com/tax/custom).\n    \n\nWe also have integration builders for [Checkout](https://docs.stripe.com/checkout/quickstart).",
  "title": "Set up Stripe Tax | Stripe Documentation",
  "description": "Enable Stripe Tax to automatically calculate and collect tax.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/dashboard",
  "markdown": "# Navigate the Stripe Tax Dashboard\n\n## Learn how to use the Tax Dashboard.\n\nThe Stripe Tax Dashboard consists of the following tabs:\n\n*   **Thresholds**\n*   **Registrations**\n\n#### Note\n\n## Thresholds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax provides insights about your potential tax registration obligations (called economic nexus in the US). We help you understand which state or country you might have such obligations in, even if your business doesn’t have a physical presence there.\n\nYou can monitor tax obligations in the following categories:\n\n*   `Threshold exceeded`: Where your estimated sales or transactions are over the location’s threshold and your business likely needs to register for tax.\n*   `To monitor`: Where you haven’t exceeded a threshold yet, but you do have buyers located in that market. We’ll provide a percent-to-threshold to help you determine when you might need to register.\n*   `Unattributed revenue`: When Stripe Tax isn’t able to determine the location for a transaction, we group its information under this category. Where possible, we break out globally unattributed revenue and US unattributed revenue.\n\n## Registrations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the **Registrations** tab to manage locations and access reports where you have a tax registration. Registrations enable you to calculate and collect tax with Stripe. Locations are either **Active**, **Scheduled**, or **Expired**.\n\n| Category | Definition |\n| --- | --- |\n| Active | A registration that is currently calculating and collecting tax. |\n| Scheduled | A registration that will start calculating tax based on your inputted start date (provided by the local tax authority). |\n| Expired | A registration that’s no longer calculating tax as it has passed the inputted end date (provided by the local tax authority) |\n\n### Add a registration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo start calculating and collecting tax for a location, you must add a registration in Stripe Tax. You need to identify each state, province, and country where you have tax obligations. You need to register with the local tax authority to collect tax for each tax obligation. Registration requirements vary by each location (often referred to as nexus in the US).\n\nTo add a registration in the Dashboard:\n\n1.  Click **+Add registration** and select the country and the applicable state or province.\n2.  Add the date to start tax collection as provided by your local tax authority.\n3.  Save your changes.\n\n### Edit a registration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo maintain your compliance, you might need to edit your registration. Your local tax authority will inform you of any updates to your information or dates.\n\nTo edit a registration:\n\n1.  Click the overflow menu () next to the applicable registration.\n2.  Click **Edit registration**.\n3.  Save your changes.\n\n### End a registration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo stop calculating and collecting tax for a location, you must end the tax obligation’s registration.\n\nTo end a registration:\n\n1.  Click the overflow menu () next to the applicable registration.\n2.  Add the date (provided by your local tax authority) to stop tax collection.\n3.  Save your changes.\n\n### Export transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can export your transaction data into either an itemized or summarized report at the line item, imposition, and jurisdiction level for all locations where you have Stripe Tax is enabled.\n\nTo export transaction data:\n\n1.  Click **Export transactions**.\n2.  Select either **Itemized export** or **Summarized export** as needed.\n3.  Click **Download**.\n\nAfter you download the report, click **View Report**.\n\n### US location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUS location reports aggregate your transaction data in the chosen location for a specific filing period based on the state filing requirements. You can create them for any US location where you have Stripe Tax enabled.\n\n### See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Set up Stripe Tax](https://docs.stripe.com/tax/set-up)\n*   [Monitor your tax obligations](https://docs.stripe.com/tax/monitoring)\n*   [Understand when you need to collect tax in each location](https://docs.stripe.com/tax/supported-countries)",
  "title": "Navigate the Stripe Tax Dashboard | Stripe Documentation",
  "description": "Learn how to use the Tax Dashboard.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/paymentlinks",
  "markdown": "# Automatically collect tax on Payment Links\n\n## Learn how to calculate and collect tax on a payment page without writing any code.\n\n#### Note\n\nYou can use Stripe Tax with [Payment Links](https://stripe.com/payments/payment-links) to automatically calculate and collect tax on a payment page and share a link to it with your customers, without writing any code.\n\n[](#get-started)\n\nThis short video demonstrates how you can quickly automate tax collection with no code by using Payment Links.\n\n[\n\n## Update your products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#product-and-price-setup)\n\nStripe Tax uses information stored on the [Products](https://docs.stripe.com/api/products \"Products\") and [Prices](https://docs.stripe.com/api/prices \"Prices\") APIs to determine the right rates and rules to apply when calculating tax. Update the products and prices you use to include:\n\n1.  [Tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-behavior): The tax behavior on a price can be either inclusive or exclusive. This determines how the buyer sees the tax. When you set tax behavior to exclusive, it adds tax onto the subtotal amount you specify on your price. This is common in US markets and for B2B sales. When set to inclusive, the amount your buyer pays never changes, even if the tax rate varies. This is common practice for B2C buyers in many markets outside the US.\n    \n    Setting the tax behavior explicitly on a price is optional, if you [set up the default tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#setting-tax-behavior-on-a-price-(optional)) in the [Stripe Tax settings](https://dashboard.stripe.com/login?redirect=%2Fsettings%2Ftax). You can override the default tax behavior setting by setting a tax behavior on a price.\n    \n2.  (Optional) [Tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior): A tax code is a classification of your product or service for Stripe Tax that makes sure we apply the correct tax rate to your transactions. Some examples include “Audio book,” “Gift card,” or “Software as a service.” If you don’t set the tax code, Stripe Tax uses the preset [tax settings](https://dashboard.stripe.com/login?redirect=%2Fsettings%2Ftax).\n    \n\n#### Caution\n\nYou can’t change `tax_behavior` after you set it to one of “exclusive” or “inclusive.” You can create a new price and archive the current one instead.\n\nLearn more about [Products, prices, tax codes, and tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior).\n\n[](#create-link)\n\nIn the Dashboard, open the [Payment Links](https://dashboard.stripe.com/payment-links) page and click **\\+ New**. Then:\n\n1.  Select **+Add a new product**.\n2.  Fill out the product details.\n3.  Click **Add product**.\n4.  Click **Next**.\n5.  Click **Create link**.\n\n[](#enable-stripe-tax)\n\nWe enable Stripe Tax automatically on all Payment Links unless you switch off the toggle at the bottom of the tax settings page. In the [Payment Link configuration page](https://dashboard.stripe.com/payment-links/create), under the **Advanced options** section, you’ll see that `Collect tax automatically` is already on.",
  "title": "Automatically collect tax on Payment Links | Stripe Documentation",
  "description": "Learn how to calculate and collect tax on a payment page without writing any code.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/settings-api",
  "markdown": "# Use the Settings API to configure Stripe Tax\n\n## Check if the connected account is ready to use Stripe Tax ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nComplete this check when the Standard account configures Stripe Tax through the Stripe Dashboard but your platform needs to assess if Stripe Tax can be enabled.\n\nUse our official libraries for access to the Stripe API from your application. To check the Stripe Tax settings on the connected account, [retrieve the `tax.settings` object](https://docs.stripe.com/api/tax/settings/retrieve) using the `Stripe-Account` header with a value of the connected account ID:\n\n`curl https://api.stripe.com/v1/tax/settings \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nYou can also listen to the [tax.settings.updated](https://docs.stripe.com/api/events/types#event_types-tax.settings.updated) webhook event which triggers when accounts update their tax settings or when new required tax settings are introduced. See [take webhooks live](https://docs.stripe.com/webhooks#register-webhook) to learn how to add a webhook endpoint, and make sure you select **Listen to events on Connected accounts** in the Dashboard.\n\nAn account is ready to use Stripe Tax if the response `tax.settings` object retrieved by the API or webhook event returns `\"active\"` for `status`. The `defaults.tax_code` and `defaults.tax_behavior` settings are only required if not provided in the product or price on each API call.\n\n`{   \"object\": \"tax.settings\",   \"defaults\": {     \"tax_code\": null,     \"tax_behavior\": null   },   \"head_office\": {     \"address\": {       \"country\": \"DE\"     }   },   \"livemode\": false,   \"status\": \"active\",   \"status_details\": {     \"active\": {}   } }`\n\nAn account isn’t ready to use Stripe Tax if the response `tax.settings` object returns `\"pending\"` for `status`. The [`status_details[pending][missing_fields]`](https://docs.stripe.com/api/tax/settings/object#tax_settings_object-status_details-pending-missing_fields) has a list of all required missing fields.\n\n`{   \"object\": \"tax.settings\",   \"defaults\": {     \"tax_code\": null,     \"tax_behavior\": null   },   \"head_office\": null,   \"livemode\": false,   \"status\": \"pending\",   \"status_details\": {     \"pending\": {       \"missing_fields\": [\"head_office\"]     }   } }`\n\n## Configure connected account settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nComplete this step when you manage all Stripe Tax configuration through an interface on your platform.\n\nYou can modify the connected account settings through an [update settings](https://docs.stripe.com/api/tax/settings/update) call. Perform a call providing the head office location, the preset tax code, and the tax behavior by using the `Stripe-Account` header with a value of the connected account ID.\n\n`curl https://api.stripe.com/v1/tax/settings \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"defaults[tax_code]\"=txcd_10000000 \\  -d \"defaults[tax_behavior]\"=inclusive \\  -d \"head_office[address][country]\"=DE`\n\nThe updated `tax.settings` object now has a head office, a preset tax code, and a default tax behavior, which allows you to enable Stripe Tax for this connected account.\n\n`{   \"object\": \"tax.settings\",   \"defaults\": {     \"tax_code\": \"txcd_10000000\",     \"tax_behavior\": \"inclusive\"   },   \"head_office\": {     \"address\": {       \"country\": \"DE\"     }   },   \"livemode\": false,   \"status\": \"active\",   \"status_details\": {     \"active\": {}   } }`\n\n### Validations and errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax codes must refer to [available tax codes](https://docs.stripe.com/tax/tax-codes) and the [tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-behavior) must be set as `inclusive`, `exclusive`, or `inferred_by_currency` (after being set, it can’t be set to null). The `head_office` must include a supported address.\n\nThe `head_office[address]` has the fields `line1`, `line2`, `city`, `state`, `postal_code`, and `country`. The tables below describe the supported address formats.\n\n| Example addresses | Explanation | Supported |\n| --- | --- | --- |\n| *   `line1`: 27 Fredrick Ave<br>*   `city`: Brothers<br>*   `state`: OR<br>*   `postal_code`: 97712<br>*   `country`: US | **Full address**<br><br>A full address includes at least a line1 (street address), city, state, postal code, and country.<br><br>The address is matched to the closest address or street in the US Postal Service address database. If a match isn’t found, we use the geographical center (average location of addresses) of the 5-digit postal code as a fallback. |     |\n| 9-digit postal code:<br><br>*   `postal_code`: 97712-4918<br>*   `country`: US<br><br>5-digit postal code:<br><br>*   `postal_code`: 97712<br>*   `country`: US | **Country and postal code**<br><br>If you provide a 5-digit or 9-digit postal code, our system only uses the initial 5 digits for tax calculations. The tax is calculated at the geographical center, which reflects the average location of addresses within the 5-digit postal code area. Check that this is [suitable for your business](https://docs.stripe.com/tax/customer-locations#us-postal-codes). |     |\n| *   `state`: OR<br>*   `country`: US | **Country and state**<br><br>We can’t calculate tax for US customers with only an ISO [country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) and [state code](https://en.wikipedia.org/wiki/ISO_3166-2). |     |\n| *   `country`: US | **Country**<br><br>We can’t calculate tax for US customers with only an [ISO country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). |     |\n\nUse one of the above address formats to make sure that we can consistently recognize your connected account’s head office location. The country field must always be a valid [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1).\n\n#### Note\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Use the Registrations API to manage tax registrations](https://docs.stripe.com/tax/registrations-api)\n*   [Use Stripe Tax with Connect](https://docs.stripe.com/tax/connect)",
  "title": "Use the Settings API to configure Stripe Tax | Stripe Documentation",
  "description": "Learn how to configure tax settings, and check whether an account is ready to perform tax calculations.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/checkout",
  "markdown": "# Automatically collect tax on Checkout sessions\n\n## Learn how to automatically calculate taxes in Checkout.\n\nStripe Tax automatically calculates the taxes on all purchases and [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") accumulated during a Checkout session. If you haven’t integrated with Checkout, you must complete the integration using the [Accept a Payment guide](https://docs.stripe.com/checkout/quickstart).\n\n#### Note\n\n[](#get-started)\n\nThis short video shows to how to enable automatic tax collection when using hosted integrations like Stripe Checkout.\n\n[\n\n## Update your products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#product-and-price-setup)\n\nStripe Tax uses information stored on the [Products](https://docs.stripe.com/api/products \"Products\") and [Prices](https://docs.stripe.com/api/prices \"Prices\") APIs to determine the right rates and rules to apply when calculating tax. Update the products and prices you use to include:\n\n1.  [Tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-behavior): The tax behavior on a price can be either inclusive or exclusive. This determines how the buyer sees the tax. When you set tax behavior to exclusive, it adds tax onto the subtotal amount you specify on your price. This is common in US markets and for B2B sales. When set to inclusive, the amount your buyer pays never changes, even if the tax rate varies. This is common practice for B2C buyers in many markets outside the US.\n    \n    Setting the tax behavior explicitly on a price is optional, if you [set up the default tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#setting-tax-behavior-on-a-price-(optional)) in the [Stripe Tax settings](https://dashboard.stripe.com/login?redirect=%2Fsettings%2Ftax). You can override the default tax behavior setting by setting a tax behavior on a price.\n    \n2.  (Optional) [Tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior): A tax code is a classification of your product or service for Stripe Tax that makes sure we apply the correct tax rate to your transactions. Some examples include “Audio book,” “Gift card,” or “Software as a service.” If you don’t set the tax code, Stripe Tax uses the preset [tax settings](https://dashboard.stripe.com/login?redirect=%2Fsettings%2Ftax).\n    \n\n#### Caution\n\nYou can’t change `tax_behavior` after you set it to one of “exclusive” or “inclusive.” You can create a new price and archive the current one instead.\n\nIf you don’t want to create your products and prices upfront, you can pass `price_data.tax_behavior` and `product_data.tax_code` when creating Checkout sessions.\n\nLearn more about [Products, prices, tax codes, and tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior).\n\n[](#create-session)\n\nAfter updating your products and prices, you’re ready to start calculating tax on your Checkout sessions. You can create sessions for one time and recurring purchases.\n\nA customer’s tax rates come from their location, which Checkout assesses from the customer’s address. The address that Checkout uses to calculate taxes depends on whether the customer is new or existing, and whether you collect shipping addresses during the Checkout Session:\n\n|     | New Customer | Existing Customer |\n| --- | --- | --- |\n| **Collect a billing address only** | Checkout calculates taxes based on the customer’s billing address entered into the Checkout Session | If the customer has a previously saved shipping address, Checkout calculates taxes based on that address. Otherwise, you can calculate taxes based on billing address entered during Checkout (by specifying [`customer_update[address]=auto`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer_update-address)) or the billing address saved to the customer (the default behavior). |\n| **Collect a shipping address** | Checkout calculates taxes based on the customer’s shipping address entered into the Checkout Session | Checkout calculates taxes based on the customer’s shipping address entered into the Checkout Session. _Existing addresses on the customer won’t apply in this case._ |\n\n#### Note\n\nIf you wish to ensure that Google Pay is offered as a payment method while using Stripe Tax in Checkout, you must require collecting a shipping address. Apple Pay with Stripe Tax displays only when the customer’s browser supports Apple Pay version 12.\n\n[](#new-customers)\n\nIf you don’t pass in an existing customer when creating a Checkout session, Checkout creates a new customer and automatically saves billing address and shipping information. For tax collection purposes, Checkout uses billing and shipping addresses to determine the customer’s location.\n\nCheckout uses the shipping address entered during the session to determine the customer’s location for calculating tax. If you don’t collect shipping information, Checkout uses the billing address.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=2 \\  -d \"automatic_tax[enabled]\"=true \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n[](#existing-customers)\n\nTo calculate tax on Checkout sessions created for existing customers, you can set the `automatic_tax[enabled]` parameter to `true` when creating the session. You can either base tax calculations on the customer’s existing addresses or new addresses collected during the session:\n\n### Use the existing addresses on the customer for taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’ve already collected the addresses of existing customers, you can base tax calculations on those addresses rather than the addresses collected during checkout:\n\n*   **The customer address that Checkout uses for taxes**: If available, Checkout uses the customer’s saved [shipping address](https://docs.stripe.com/api/customers/object#customer_object-shipping-address) to calculate taxes. Otherwise, Checkout uses the customer’s saved [billing address](https://docs.stripe.com/api/customers/object#customer_object-address) to calculate taxes.\n    \n*   **Customer address requirements**: When using existing addresses for taxes, the customer must either have a valid [shipping address](https://docs.stripe.com/api/customers/object#customer_object-shipping-address) or [billing address](https://docs.stripe.com/api/customers/object#customer_object-address) saved. You can see whether or not a customer’s saved addresses are valid by checking the customer’s [customer.tax.automatic\\_tax](https://docs.stripe.com/api/customers/object#customer_object-tax-automatic_tax) property. If the property is `supported` or `not_collecting`, it means the customer’s saved addresses are valid, and you can enable Stripe Tax on Checkout sessions for that customer.\n    \n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=2 \\  -d \"automatic_tax[enabled]\"=true \\  -d customer=  {{CUSTOMER_ID}}   \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n### Use the addresses collected during Checkout for taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can configure Checkout to save new billing or shipping addresses to a customer. In this case, Checkout calculates tax using the address entered during checkout.\n\n*   **The address that Checkout uses for taxes**: If you [collect shipping addresses](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-shipping_address_collection), Checkout uses the shipping address entered during the session to calculate taxes. Otherwise, Checkout uses the billing address entered during the session to calculate taxes.\n    \n*   **Where Checkout saves the addresses collected during checkout**: If you [collect shipping addresses](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-shipping_address_collection), Checkout saves the shipping address entered during the session to the customer’s [customer.shipping.address](https://docs.stripe.com/api/customers/object#customer_object-shipping-address) property. Otherwise, Checkout saves the billing address entered during the session to the customer’s [customer.address](https://docs.stripe.com/api/customers/object#customer_object-address) property. In both cases, the address used for taxes overrides any existing addresses.\n    \n\nIf you collect shipping addresses with Checkout, set the `customer_update[shipping]` property to `auto` so that you copy the shipping information from Checkout to the customer.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=2 \\  -d \"automatic_tax[enabled]\"=true \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"customer_update[shipping]\"=auto \\  -d \"shipping_address_collection[allowed_countries][0]\"=US \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\nIf you don’t collect shipping addresses with Checkout, and you want to use billing addresses entered during checkout for taxes, you must save the billing address to the customer. Set the `customer_update[address]` property to `auto` so that you copy the newly-entered address onto the provided customer.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=2 \\  -d \"automatic_tax[enabled]\"=true \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"customer_update[address]\"=auto \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n[](#check-the-response)\n\nTo inspect the results of the latest tax calculation, you can read the tax amount calculated by Checkout from the [`total_details.amount_tax`](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-total_details) on the Checkout Session resource. Additionally, the tax outcome for each payment is available when [viewing a payment](https://dashboard.stripe.com/test/payments) in the Dashboard.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Determining customer locations](https://docs.stripe.com/tax/customer-locations)\n*   [Checkout and tax IDs](https://docs.stripe.com/tax/checkout/tax-ids)\n*   [Reporting and filing](https://docs.stripe.com/tax/reports)\n*   [Use Stripe Tax with Connect](https://docs.stripe.com/tax/connect)\n*   [Calculate tax in your custom checkout flow](https://docs.stripe.com/tax/custom)",
  "title": "Automatically collect tax on Checkout sessions | Stripe Documentation",
  "description": "Learn how to automatically calculate taxes in Checkout.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/invoicing",
  "markdown": "# Automatically collect tax on invoices\n\n## Learn how to automatically calculate tax on your invoices.\n\nOn an [invoice](https://docs.stripe.com/api/invoices \"invoices\"), Stripe Tax calculates sales tax, VAT, and GST. To calculate these for each line item, Stripe uses:\n\n*   Your [tax settings](https://dashboard.stripe.com/settings/tax)\n*   The customer’s tax settings and location\n*   The product tax code and price tax behavior\n\n#### Note\n\n## Set up the customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe use the customer’s location to determine the relevant taxes to collect. Customers outside of the US need at least a country-level address, while customers in the US require a 5-digit postal code. For Canada, we need at least the province or postal code.\n\nYou can add customer location information in the **Customer details** page by clicking **Edit** next to **Details**. To add a customer’s location from the [Invoice Editor](https://dashboard.stripe.com/invoices/create), click the overflow menu () next to the customer. Select **Edit customer information**, click **Add additional details**, and scroll down to **Billing details**.\n\nAfter you update the location, click **Update customer**. Stripe applies the new location to all of your customer’s future invoices unless you update it. For more information, see [Determine customer locations](https://docs.stripe.com/tax/customer-locations).\n\n## Set up line items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo calculate tax on each line item on an invoice, you need to set a tax behavior and optionally a tax code.\n\n### Customize tax settings for one-off line items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomize line items in the Invoice Editor by selecting the tax behavior from the **Include tax in price** drop-down menu.\n\n![Customize tax settings for one-off line items](https://b.stripecdn.com/docs-statics-srv/assets/invoicing_price.faa90fb6b3cb833b900e06cb2187d339.png)\n\nCustomize tax settings for one-off line items\n\n### Customize tax settings for product-based line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use both the Dashboard and the API to customize tax settings for product-based line items.\n\nOn the [Products page](https://dashboard.stripe.com/products), you can select both the tax behavior for a particular price and the optional tax code for the product. The tax behavior is per price. You can’t change the tax behavior after you select it, but you can create new prices or archive old ones. To set up a tax behavior, click **Add a price** (or **Add another price** if you already have one) and select it from the **Tax behavior** drop-down menu.\n\nTo set up a tax code, select it from the **Tax code** drop-down menu when you create a new product or edit the details of an existing one.\n\n![Customize tax settings for one-off line items](https://b.stripecdn.com/docs-statics-srv/assets/invoicing_new_price.517f186f27925e52e501019b9aecc94b.png)\n\nCustomize tax settings for one-off line items\n\n## Enable automatic tax ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter specifying a tax behavior and tax code, you can add the price to the customer as an invoice item:\n\n`curl https://api.stripe.com/v1/invoiceitems \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_13729he8947269 \\  -d price=price_1K6mzG2eZvKYlo2CK7kcBICl`\n\nSet the toggle in the **Invoice Editor**. In the API, you need to pass the `automatic_tax` field to enable or disable automatic tax calculation. Both steps are required to start calculating tax automatically.\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"cus_13729he8947269\" \\   -d \"automatic_tax[enabled]\"=\"true\"`\n\nTo enable automatic tax calculation when you update an invoice, add the `invoice` parameter alongside `automatic_tax`:\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"invoice\"=\"inv_12345\" \\   -d \"automatic_tax[enabled]\"=\"true\"`\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Determine customer locations](https://docs.stripe.com/tax/customer-locations)\n*   [Understand zero tax amounts](https://docs.stripe.com/tax/zero-tax)\n*   [Reporting and filing](https://docs.stripe.com/tax/reports)\n*   [Use Stripe Tax with Connect](https://docs.stripe.com/tax/connect)\n*   [Calculate tax in your custom checkout flow](https://docs.stripe.com/tax/custom)",
  "title": "Automatically collect tax on invoices | Stripe Documentation",
  "description": "Learn how to automatically calculate tax on your invoices.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/subscriptions",
  "markdown": "# Collect taxes for recurring payments\n\n## Learn how to collect and report taxes for recurring payments.\n\nStripe Tax allows you to calculate the tax to collect on your recurring payments when using Stripe Billing. You can create new subscriptions or add Stripe Tax to existing subscriptions, and examine any potential impact to the amount on your customer’s upcoming invoice. Stripe Tax is natively integrated with Stripe Billing and automatically handles tax calculation with your pricing model (for example, sub-cent, package), prorations, discounts, trials, and more. This guide assumes you’re setting up Stripe Tax and Billing for the first time.\n\nTo update existing subscriptions, reference the [Update existing subscriptions](https://docs.stripe.com/tax/subscriptions/update) guide.\n\n#### Note\n\n[](#get-started)\n\nThis short video shows to how to enable tax collection for recurring payments using hosted integrations like Stripe Checkout.\n\n[\n\n## Update your products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#product-and-price-setup)\n\nStripe Tax uses information stored on the [Products](https://docs.stripe.com/api/products \"Products\") and [Prices](https://docs.stripe.com/api/prices \"Prices\") APIs to determine the right rates and rules to apply when calculating tax. Update the products and prices you use to include:\n\n1.  [Tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-behavior): The tax behavior on a price can be either inclusive or exclusive. This determines how the buyer sees the tax. When you set tax behavior to exclusive, it adds tax onto the subtotal amount you specify on your price. This is common in US markets and for B2B sales. When set to inclusive, the amount your buyer pays never changes, even if the tax rate varies. This is common practice for B2C buyers in many markets outside the US.\n    \n    Setting the tax behavior explicitly on a price is optional, if you [set up the default tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#setting-tax-behavior-on-a-price-(optional)) in the [Stripe Tax settings](https://dashboard.stripe.com/login?redirect=%2Fsettings%2Ftax). You can override the default tax behavior setting by setting a tax behavior on a price.\n    \n2.  (Optional) [Tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior): A tax code is a classification of your product or service for Stripe Tax that makes sure we apply the correct tax rate to your transactions. Some examples include “Audio book,” “Gift card,” or “Software as a service.” If you don’t set the tax code, Stripe Tax uses the preset [tax settings](https://dashboard.stripe.com/login?redirect=%2Fsettings%2Ftax).\n    \n\n#### Caution\n\nYou can’t change `tax_behavior` after you set it to one of “exclusive” or “inclusive.” You can create a new price and archive the current one instead.\n\nIf you don’t want to create your products and prices upfront, you can pass `price_data.tax_behavior` and `product_data.tax_code` when creating subscriptions.\n\nLearn more about [Products, prices, tax codes, and tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior).\n\nThis guide uses an e-magazine as an example of a product with a recurring payment.\n\nFirst, create a [Price](https://docs.stripe.com/api/prices) on your server with a monthly charge for a new [Product](https://docs.stripe.com/api/products) named “My Product”. For tax purposes you add two extra fields:\n\n*   `tax_behavior` on the Price object. Set to `inclusive` or `exclusive`. This is a required field if you’re using Stripe Tax with Subscriptions.\n*   `tax_code` on the Product object. A Stripe [tax code](https://docs.stripe.com/api/tax_codes), which maps to a product tax code. Consult our [list of tax codes](https://docs.stripe.com/tax/tax-codes) for more information.\n\n`curl https://api.stripe.com/v1/products \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"My Product\" \\  -d tax_code=  txcd_10000000    `\n\nRecord the product ID for the product. It looks like this:\n\n`{   \"id\": \"prod_H94k5odtwJXMtQ\",`\n\nUse the product ID to create a price.\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d unit_amount=1000 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d product=prod_H94k5odtwJXMtQ \\  -d tax_behavior=exclusive`\n\n#### Note\n\nWhen `price_data.tax_behavior` is set to `exclusive`, tax is added onto the subtotal amount you specify. This is common in US markets and for B2B sales. When set to `inclusive`, the amount your buyer pays will never change, even if the tax rate varies. This is common practice for B2C buyers in many markets outside the US.\n\nRecord the price ID so you can use it in subsequent steps. It looks like this:\n\n`{   \"id\": \"price_HGd7M3DV3IMXkC\",`\n\n[](#create-a-customer)\n\nWhen a user subscribes to your website, create a [Customer](https://docs.stripe.com/api/customers) on your server.\n\nWhen creating a customer, you can send us a description and the payment method only. However, the more information you send us, the better the tax calculation can identify the location of your customer and tax them accordingly. We recommend populating the `customer.address` field. To make sure the customer address is valid upon creation, pass `tax[validate_location]='immediately'`. You can also [expand](https://docs.stripe.com/api/expanding_objects) the `tax` field to confirm the location Stripe Tax has identified for your customer.\n\nYou can either add a country and a postal code:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d description=\"a new user\" \\   --data-urlencode email=\"franklin@example.com\" \\  -d payment_method=pm_1FU2bgBF6ERF9jhEQvwnA7sX \\  -d \"address[country]\"=US \\  -d \"address[postal_code]\"=94103 \\  -d \"tax[validate_location]\"=immediately \\  -d \"expand[]\"=tax`\n\nOr, ideally, add a complete billing address:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d description=\"a new user\" \\   --data-urlencode email=\"franklin@example.com\" \\  -d payment_method=pm_1FU2bgBF6ERF9jhEQvwnA7sX \\  -d \"address[line1]\"=\"510 Townsend St\" \\  -d \"address[city]\"=\"San Francisco\" \\  -d \"address[state]\"=CA \\  -d \"address[country]\"=US \\  -d \"address[postal_code]\"=94103 \\  -d \"tax[validate_location]\"=immediately \\  -d \"expand[]\"=tax`\n\nOr, only an IP address:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d description=\"a new user\" \\   --data-urlencode email=\"franklin@example.com\" \\  -d payment_method=pm_1FU2bgBF6ERF9jhEQvwnA7sX \\  -d \"tax[validate_location]\"=immediately \\  -d \"expand[]\"=tax`\n\nThe expanded `tax` field indicates the computed tax location (using the address first, falling back on the given IP address) and if the customer is compatible with automatic tax calculation:\n\n`{   \"id\": \"cus_13729he8947269\",   \"object\": \"customer\",   // ... other fields omitted   \"tax\": {     \"location\": {\"country\": \"US\", \"state\": \"CA\", \"source\": \"billing_address\"},     \"ip_address\": null,     \"automatic_tax\": \"supported\",   } }`\n\nThe value of `automatic_tax` has four possible states:\n\n| Status | Description | Possible Action |\n| --- | --- | --- |\n| `supported` | Automatic tax fully supported. | No further action needed. |\n| `unrecognized_location` | The address isn’t valid for determining a tax location. | Ask customer for an updated address and set `customer.address` to the new value. |\n| `not_collecting` | The address is resolvable to a location for which you haven’t set up a registration. | Depending on your tax obligations, you can either proceed and Stripe Tax won’t assess any taxes, or you might want to [add a new registration](https://docs.stripe.com/tax/registering) for the jurisdiction in which the customer is based. |\n| `failed` | An error occurred with Stripe’s servers. This is rare. | Try the request again, or contact Stripe support for additional assistance. |\n\n[](#create-a-subscription)\n\nNow that the Customer is set up for tax calculation, you can create a Subscription on your server with the customer and their selected plan. To enable automatic tax calculation on subscriptions, set the `automatic_tax[enabled]` parameter to `true`:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_13729he8947269 \\  -d \"items[0][price]\"=price_HGd7M3DV3IMXkC \\  -d \"items[0][quantity]\"=1 \\  -d \"automatic_tax[enabled]\"=true \\  -d payment_behavior=default_incomplete \\  -d \"expand[0]\"=latest_invoice`\n\nSetting this parameter causes all subsequent [Invoices](https://docs.stripe.com/api/invoices \"invoices\") to be created with automatic tax calculations activated.\n\nTo inspect the results of the latest tax calculation, retrieve the latest Invoice of a Subscription. You can do this by expanding the `latest_invoice` field on any Subscription request, as in the examples above. You can retrieve the tax amounts from the `tax` and `total_tax_amounts` fields on the latest invoice, and also from the per-line item `tax_amounts` fields.\n\nIf Stripe Tax does not have enough information to determine the customer’s location, a [customer\\_tax\\_location\\_invalid](https://docs.stripe.com/error-codes#customer-tax-location-invalid) error is returned.\n\n[](#collect-payment)\n\nTo complete payment of the first [invoice](https://docs.stripe.com/api/invoices \"invoices\") and activate the subscription, use `stripe.confirmCardPayment` when your customer submits the form.\n\n`const btn = document.querySelector('#submit-payment-btn'); btn.addEventListener('click', async (e) => {   e.preventDefault();   const nameInput = document.getElementById('name');    // Create payment method and confirm payment intent.   stripe.confirmCardPayment(clientSecret, {     payment_method: {       card: cardElement,       billing_details: {         name: nameInput.value,       },     }   }).then((result) => {     if(result.error) {       alert(result.error.message);     } else {       // Successful subscription payment     }   }); });`\n\nThe subscription automatically becomes `active` upon payment. See our [Subscriptions with Elements guide](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements#collect-payment) for more details on setting up your checkout page.\n\n[\n\n## Handling location validation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handling-location-validation)\n\nStripe Tax requires a [recognized customer location](https://docs.stripe.com/tax/customer-locations) to calculate tax.\n\nWe recommend validating a customer’s `automatic_tax` status before attempting to create or update a subscription or one-off draft [invoice](https://docs.stripe.com/api/invoices \"invoices\") with `automatic_tax[enabled]=true`.\n\nCreating or updating a subscription or invoice behaves the following way when the [customer location is unrecognized](https://docs.stripe.com/tax/customer-locations#handling-errors):\n\n*   Creating or updating a subscription that **causes an immediate** invoice and payment attempt errors with an HTTP status 400 response.\n*   Updating a subscription that **does not cause an immediate** invoice or payment attempt returns an HTTP status 200 response. However, the customer location validation happens later asynchronously when the invoice is finalized. If the customer location is invalid during invoice finalization, Stripe sends a `invoice.finalization_failed` webhook. If you don’t take any action, the invoice remains in a `draft` state, regardless of the value of `auto_advance`.\n*   Creating or updating a draft invoice (either within the short window after a subscription cycle, or for a one-off invoice) updates the invoice’s `automatic_tax.status` to `requires_location_inputs`. You can then either update the customer object to correct the address, and then update or finalize the invoice, or turn off automatic tax calculation. If you don’t take any action, the invoice remains in a `draft` state, regardless of the value of `auto_advance`.\n\nIf tax calculation fails due to an unrecognized customer location on a recurring Subscription Invoice, Stripe sends a `invoice.finalization_failed` webhook when attempting to finalize the invoice. Keep this in mind when updating the location details of your customer.\n\nWe recommend listening for Subscription-related events (for example, invoice finalization failures) with [webhooks](https://docs.stripe.com/billing/subscriptions/webhooks) because most activity happens asynchronously.\n\n[](#preview-price)\n\nStripe also provides an endpoint for previewing an upcoming [invoice](https://docs.stripe.com/api/invoices \"invoices\") for a subscription. You can use this endpoint to preview the initial invoice for a new subscription:\n\n`curl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_13729he8947269 \\  -d \"subscription_items[0][price]\"=price_HGd7M3DV3IMXkC \\  -d \"subscription_items[0][quantity]\"=1 \\  -d \"automatic_tax[enabled]\"=true`\n\nIf you haven’t created a Customer yet, but you’ve collected your customer’s billing information, you can use the `customer_details` parameter in the place of a Customer ID:\n\n`curl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"customer_details[address][line1]\"=\"510 Townsend St\" \\  -d \"customer_details[address][city]\"=\"San Francisco\" \\  -d \"customer_details[address][state]\"=CA \\  -d \"customer_details[address][country]\"=US \\  -d \"customer_details[address][postal_code]\"=94103 \\  -d \"subscription_items[0][price]\"=price_HGd7M3DV3IMXkC \\  -d \"subscription_items[0][quantity]\"=1 \\  -d \"automatic_tax[enabled]\"=true`\n\nWhen previewing the first invoice for a subscription, the subscription ID in the response won’t point to a valid subscription.\n\nYou can also use this endpoint if you have an ongoing subscription without taxes enabled and would like to preview what the upcoming invoice would look like if you were to enable automatic tax.\n\n`curl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_13729he8947269 \\  -d subscription=sub_1JebWO2eZvKYlo2C1WYmWFd3 \\  -d \"automatic_tax[enabled]\"=true`\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Update existing subscriptions](https://docs.stripe.com/tax/subscriptions/update)\n*   [Use Stripe Tax with Connect](https://docs.stripe.com/tax/connect)\n*   [Calculate tax in your custom checkout flow](https://docs.stripe.com/tax/custom)",
  "title": "Collect taxes for recurring payments | Stripe Documentation",
  "description": "Learn how to collect and report taxes for recurring payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/connect",
  "markdown": "# Use Stripe Tax with Connect\n\n## Understand how Stripe Tax can help your platform and your connected accounts comply with tax obligations.\n\nStripe Tax supports [Connect](https://docs.stripe.com/connect) by helping you calculate and collect taxes. It provides transactional reports to help with tax reporting and filing for your platform or your connected accounts.\n\nThe first step for using Stripe Tax with Connect requires you to **determine which entity has the obligation to collect and report taxes**. The entity that’s liable for tax might be you or your connected account, depending on your business model, regulations (for example, [marketplace laws in the US and EU](https://stripe.com/en-nl/guides/guide-to-sales-tax-and-vat-for-marketplace-sellers)), or the transaction details, such as the order amount or the type of goods being sold.\n\n## Use cases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax is designed to support different multi-party use cases:\n\n| Use case | Use when | Examples |\n| --- | --- | --- |\n| [Tax for software platforms](https://docs.stripe.com/tax/tax-for-platforms) | *   You’re a SaaS platform that enables other businesses with software services to reach their customers.<br>*   Your _connected accounts_ assume responsibility for collecting and remitting taxes. | *   An e-commerce platform like Shopify or Squarespace that enables businesses to build their own online stores to sell directly to customers. |\n| [Tax for marketplaces](https://docs.stripe.com/tax/tax-for-marketplaces) | *   You’re a marketplace that connects buyers and sellers on a single platform, typically through websites or apps where products are listed by various third-party vendors.<br>*   Your _platform_ assumes responsibility for collecting and remitting taxes. | *   An e-commerce marketplace like Etsy or Amazon that allows a single shopping cart for goods sold by multiple businesses. |\n\n[Stripe Connect’s distinction between SaaS platforms and marketplaces](https://docs.stripe.com/connect/overview#use-cases) doesn’t strictly correspond to the tax definition of marketplaces that are responsible for tax collection. Consult with a tax advisor who understands your business model to determine the tax obligations for both your platform and your connected accounts.",
  "title": "Use Stripe Tax with Connect | Stripe Documentation",
  "description": "Understand how Stripe Tax can help your platform and your connected accounts comply with tax obligations.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/custom",
  "markdown": "# Tax API for Sales Tax, GST, and VAT\n\nAfter creating a tax transaction to record a sale to your customer, you might need to record refunds. These are also represented as tax transactions, with `type=reversal`. Reversal transactions offset an earlier transaction by having amounts with opposite signs. For example, a transaction that recorded a sale for 50 USD might later have a full reversal of -50 USD.\n\nWhen you issue a refund (using Stripe or outside of Stripe) you need to create a reversal tax transaction with a unique `reference`. Common strategies include:\n\n*   Append a suffix to the original reference. For example, if the original transaction has reference `pi_123456789`, then create the reversal transaction with reference `pi_123456789-refund`.\n*   Use the ID of the [Stripe refund](https://docs.stripe.com/api/refunds/object) or a refund ID from your system. For example, `re_3MoslRBUZ691iUZ41bsYVkOg` or `myRefund_456`.\n\nChoose the approach that works best for how you reconcile your customer orders with your [tax exports](https://docs.stripe.com/tax/reports).\n\n### Fully refund a sale ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you fully refund a sale in your system, create a reversal transaction with `mode=full`.\n\nIn the example below, `tax_1MEFAAI6rIcR421eB1YOzACZ` is the tax transaction recording the sale to your customer:\n\n`curl https://api.stripe.com/v1/tax/transactions/create_reversal \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=full \\  -d original_transaction=tax_1MEFAAI6rIcR421eB1YOzACZ \\  -d reference=pi_123456789-cancel \\  -d \"expand[]\"=line_items`\n\nThis returns the full reversal transaction that’s created:\n\n`{   \"id\": \"tax_1MEFtXI6rIcR421e0KTGXvCK\",   \"object\": \"tax.transaction\",   \"created\": 1670866467,   \"currency\": \"eur\",   \"customer\": null,   \"customer_details\": {     \"address\": {       \"city\": null,       \"country\": \"IE\",`\n\nFully reversing a transaction doesn’t affect previous partial reversals. When you record a full reversal, make sure you [fully reverse](#reversals-void-refund) any previous partial reversals for the same transaction to avoid duplicate refunds.\n\n### Partially refund a sale ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter [issuing a refund](https://docs.stripe.com/api/refunds/create) to your customer, create a reversal tax transaction with `mode=partial`. This allows you to record a partial refund by providing the line item amounts refunded. You can create up to 30 partial reversals for each sale. Reversing more than the amount of tax you collected returns an error.\n\nThe example below records a refund of only the first line item in the original transaction:\n\n`curl https://api.stripe.com/v1/tax/transactions/create_reversal \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=partial \\  -d original_transaction=tax_1MEFAAI6rIcR421eB1YOzACZ \\  -d reference=pi_123456789-refund_1 \\  -d \"line_items[0][original_line_item]\"=tax_li_MyBXPByrSUwm6r \\  -d \"line_items[0][reference]\"=L1 \\  -d \"line_items[0][amount]\"=-4999 \\  -d \"line_items[0][amount_tax]\"=-1150 \\  -d \"metadata[refund]\"=  {{REFUND_ID}}   \\   --data-urlencode \"metadata[refund_reason]\"=\"Refunded line 1 of pi_123456789 (customer was unhappy)\" \\  -d \"expand[0]\"=line_items`\n\nThis returns the partial reversal transaction that’s created:\n\n`{   \"id\": \"tax_1MEFACI6rIcR421eHrjXCSmD\",   \"object\": \"tax.transaction\",   \"created\": 1670863656,   \"currency\": \"eur\",   ...   \"line_items\": {     \"object\": \"list\",     \"data\": [       {`\n\nFor each line item reversed you need to provide the `amount` and `amount_tax` reversed. The `amount` is tax-inclusive if the original calculation line item was tax-inclusive.\n\nHow `amount` and `amount_tax` are determined depends on your situation:\n\n*   If your transactions always have a single line item, use [full reversals](#reversals-full) instead.\n*   If you always refund entire line items, use the original transaction line item `amount` and `amount_tax`, but with negative signs.\n*   If you refund parts of line items, you need to calculate the amounts refunded. For example, for a sale transaction with `amount=5000` and `amount_tax=500`, after refunding half the line item you’d create a partial reversal with line item `amount=-2500` and `amount_tax=-250`.\n\n### Partially refund a sale by a flat amount ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAlternatively, you can create a reversal with `mode=partial` by specifying a flat after-tax amount to refund. The amount distributes across each line item and shipping cost proportionally, depending on the remaining amount left to refund on each.\n\nIn the example below, the transaction has two line items: one 10 USD item and one 20 USD item, both taxed at 10%. The total amount of the transaction is 33.00 USD. A refund for a flat 16.50 USD is recorded:\n\n`curl https://api.stripe.com/v1/tax/transactions/create_reversal \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=partial \\  -d original_transaction=tax_1NVcKqBUZ691iUZ4xMZtcGYt \\  -d reference=pi_234567890-refund_1 \\  -d flat_amount=-1650 \\  -d \"metadata[refund]\"=  {{REFUND_ID}}   \\   --data-urlencode \"metadata[refund_reason]\"=\"Refunded $16.50 of pi_234567890 (customer was unhappy)\" \\  -d \"expand[]\"=line_items`\n\nThis returns the partial reversal transaction that’s created:\n\n`{   \"id\": \"tax_1NVcQYBUZ691iUZ4SBPukGa6\",   \"object\": \"tax.transaction\",   \"created\": 1689780994,   \"currency\": \"usd\",   ...   \"line_items\": {     \"object\": \"list\",     \"data\": [       {`\n\nFor each line item and shipping cost in the original transaction, the refunded amounts and tax are calculated as follows:\n\n1.  First, we calculate the total remaining funds in the transaction available to refund. Because this transaction hasn’t had any other reversals recorded, the total amount is 33.00 USD.\n2.  Next, we calculate the total amount to refund for each line item. We base this calculation on the proportion of the item’s total available amount to refund versus the total remaining amount of the transaction. For example, the 10 USD item, which has 11.00 USD total remaining to refund, represents 33.33% of the transaction’s remaining total, so the total amount to refund is `-16.50 USD * 33.33% = -5.50 USD`.\n3.  Finally, the total amount to refund is divided between `amount` and `amount_tax`. We also do this proportionally, depending on how much tax is available to refund in the line item compared to the total funds left to refund. Using the 10 USD item example, tax (1.00 USD) represents 9.09% of the total remaining to refund (11.00 USD), so the `amount_tax` is `-5.50 USD * 9.09% = -0.50 USD`.\n\nThe flat amount distributes according to what’s _left_ to refund in the transaction, not what was originally recorded. Consider this example: instead of recording a refund for a flat 16.50 USD, you first record a partial reversal for the total amount of the 10 USD item:\n\n`curl https://api.stripe.com/v1/tax/transactions/create_reversal \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=partial \\  -d original_transaction=tax_1NVcKqBUZ691iUZ4xMZtcGYt \\  -d reference=pi_234567890-refund_1 \\  -d \"line_items[0][original_line_item]\"=tax_li_OICmRXkFuWr8Df \\  -d \"line_items[0][reference]\"=partial_refund_l1 \\  -d \"line_items[0][amount]\"=-1000 \\  -d \"line_items[0][amount_tax]\"=-100 \\  -d \"metadata[refund]\"=  {{REFUND_ID}}   \\   --data-urlencode \"metadata[refund_reason]\"=\"Refunded line 1 of pi_234567890 (customer was unhappy)\" \\  -d \"expand[0]\"=line_items`\n\nAfter this, you record a 16.50 USD flat amount reversal:\n\n`curl https://api.stripe.com/v1/tax/transactions/create_reversal \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=partial \\  -d original_transaction=tax_1NVcKqBUZ691iUZ4xMZtcGYt \\  -d reference=pi_234567890-refund_2 \\  -d flat_amount=-1650 \\  -d \"metadata[refund]\"=  {{REFUND_ID}}   \\   --data-urlencode \"metadata[refund_reason]\"=\"Refunded $16.50 of pi_234567890 (customer was still unhappy)\" \\  -d \"expand[]\"=line_items`\n\nThis returns the partial reversal transaction:\n\n`{   \"id\": \"tax_1NVxFIBUZ691iUZ4saOIloxB\",   \"object\": \"tax.transaction\",   \"created\": 1689861020,   \"currency\": \"usd\",   ...   \"line_items\": {     \"object\": \"list\",     \"data\": [       {`\n\nBecause the total amount remaining in the transaction is now 22.00 USD and the 10 USD item is completely refunded, the 16.50 USD distributes entirely to the 20 USD item. The 16.50 USD then distributes, using the logic from step 3, into `amount = -15.00 USD` and `amount_tax = -1.50 USD`. Meanwhile, the 10 USD item in the transaction records a refund of 0 USD.\n\n### Undo a partial refund ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTax transactions are immutable but you can cancel out a partial refund by creating a [full reversal](https://docs.stripe.com/api/tax/transactions/create_reversal#tax_transaction_create_reversal-mode) of it.\n\nYou might need to do this when:\n\n*   The payment [refund fails](https://docs.stripe.com/refunds#failed-refunds) and you haven’t provided the good or service to your customer\n*   The wrong order is refunded or the wrong amounts are refunded\n*   The original sale is fully refunded and the partial refunds are no longer valid\n\nIn the example below, `tax_1MEFACI6rIcR421eHrjXCSmD` is the transaction representing the partial refund:\n\n`curl https://api.stripe.com/v1/tax/transactions/create_reversal \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=full \\  -d original_transaction=tax_1MEFACI6rIcR421eHrjXCSmD \\  -d reference=pi_123456789-refund_1-cancel \\  -d \"metadata[refund_reason]\"=\"User called to cancel because they picked the wrong item\" \\  -d \"expand[]\"=line_items`\n\nThis returns the full reversal transaction that’s created:\n\n`{   \"id\": \"tax_1MEFADI6rIcR421e94fNTOCK\",   \"object\": \"tax.transaction\",   \"created\": 1670863657,   \"currency\": \"eur\",   ...   \"line_items\": {     \"object\": \"list\",     \"data\": [       {`",
  "title": "Tax API for Sales Tax, GST, and VAT | Stripe Documentation",
  "description": "Use Stripe Tax APIs to calculate sales tax, GST, and VAT with Stripe's payments APIs and non-Stripe payment processors",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/tax-for-platforms",
  "markdown": "# Tax for software platforms | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to enable Stripe Tax for your connected accounts, and collect tax when the connected account is liable for paying the tax.\n\nStripe Tax enables businesses to calculate, collect, and report indirect taxes in over 40 countries, across hundreds of product categories. As a platform, you can use Stripe tax to offer pre-integrated tax compliance to your connected accounts.\n\nUse this guide if your connected accounts are responsible for collecting, filing, and reporting taxes.\n\n1.  [Set up your connected accounts for tax](#check-set-up)\n2.  (Optional) [Assign tax codes to the product catalog](#assign-product-tax-codes)\n3.  [Integrate tax calculation and collection](#enable-tax-collection)\n4.  [Access Stripe Tax Reports](#access-reports)\n\n[](#set-up)\n\nAs a platform, you must make sure that a connected account has their [tax settings and registrations set up](https://docs.stripe.com/tax/set-up) before enabling tax calculations. This can be achieved by:\n\n### Connected account using the Stripe Dashboard\n\n### Creating a tax interface within your platform\n\n### Use Connect embedded components for tax compliance\n\nYour platform must then check whether connected accounts have configured Stripe Tax to enable tax calculations.\n\nOn the Dashboard, you can [filter the accounts that are ready to use Stripe Tax](https://dashboard.stripe.com/connect/accounts/overview?connected_merchant%5Btax_settings_status%5D=active). You can also export the accounts from the [connected account overview page](https://dashboard.stripe.com/connect/accounts/overview) with the following Stripe Tax-related columns:\n\n*   **Tax Settings Status**: the value `active` indicates that the account is ready to use Stripe Tax. The value `pending` indicates that some required fields are [missing](https://docs.stripe.com/api/tax/settings/object#tax_settings_object-status_details-pending-missing_fields).\n*   **Tax Threshold Status**: the value `exceeded` indicates that the account’s estimated sales or transactions are over the location’s threshold, and the business likely needs to register for tax. For more information, see [Monitor your obligations](https://docs.stripe.com/tax/monitoring).\n*   **Tax Registration Status**: the value `active` indicates that the account has at least one active [tax registration](https://docs.stripe.com/tax/registering).\n\nYou can also check whether an account has configured Stripe Tax by [using the Tax Settings API](https://docs.stripe.com/tax/settings-api#checking-settings).\n\n[](#assign-product-tax-codes)\n\nTo calculate taxes, Stripe Tax requires classifying products into their tax codes. One way to do this is to [supply a preset tax code for each connected account](https://docs.stripe.com/tax/settings-api#updating-settings), which is probably sufficient if your connected accounts typically sell a single category of items.\n\nHowever, you might offer your users more control by allowing them to map Tax Codes to each product. You can retrieve a list of supported Product Tax codes from the Stripe [Tax Code API](https://docs.stripe.com/api/tax_codes). You can also allow a subset of this list if your connected accounts only sell specific types of products.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dashboard_product.58429cc20faec07b5fce812d3838d85a.png)\n\n[](#access-reports)\n\nYour connected accounts can use [Stripe Tax reports](https://docs.stripe.com/tax/reports) to help them correctly file and remit tax.\n\n### Connected account use the Stripe Dashboard\n\n### Use the Stripe API",
  "title": "Tax for software platforms | Stripe Documentation",
  "description": "Learn how to enable Stripe Tax for your connected accounts, and collect tax when the connected account is liable for paying the tax.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/calculating",
  "markdown": "# Calculate tax | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to calculate tax with Stripe Tax.\n\nThe most common forms of indirect taxes for your business are sales tax, [VAT](https://en.wikipedia.org/wiki/Value-added_tax \"VAT\"), and [GST](https://en.wikipedia.org/wiki/Value-added_tax \"GST\"). These taxes apply on the sale of physical goods, digital goods, and services.\n\nStripe calculates tax on a transaction taking into account some or all of the following factors:\n\n*   The location of the seller\n*   The location of the customer\n*   The type of the product sold\n*   Whether the transaction involves a [reverse charge](https://docs.stripe.com/tax/zero-tax#reverse-charges)\n*   The status of the customer (for example, whether they’re a VAT-registered business, private person or an exempt organization)\n\n## How Stripe uses addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe uses a single address as the customer’s location, or transaction destination, when calculating taxes. For more information, see [which customer address we use](https://docs.stripe.com/tax/customer-locations#address-hierarchy).\n\nIn certain scenarios, it’s important to identify the origin of a transaction. Stripe generally uses the address where your business is located as the origin of a transaction. This address is defined as your origin address in the Dashboard or as `head_office` if using the tax settings object.\n\n### How to use ship-from addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add ship-from addresses that differ from your business address for tax calculation. To add them, use the `ship_from_address` transaction object. You can add ship-from locations only using the [Stripe Tax API](https://docs.stripe.com/tax/custom). They aren’t available in integrations of Stripe Tax with Payment Links, Checkout, or Billing and Invoicing. If you enter an unrecognized ship-from address, Stripe returns a `shipping_address_invalid` error.\n\nStripe Tax can designate only one address as the origin of a transaction even though in some countries the determination of origin can vary by product type. If you provide the ship-from address, Stripe Tax uses it to calculate tax for both services and physical goods. If you don’t provide a ship-from address, Stripe Tax assumes that the origin of the transaction is the address where your business is located. When selling a combination of products that require different origin locations, consider splitting the transaction accordingly.",
  "title": "Calculate tax | Stripe Documentation",
  "description": "Learn how to calculate tax with Stripe Tax.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/registering",
  "markdown": "# Register for sales tax, VAT, and GST\n\n## Learn more about your tax obligations and how to register with jurisdictions.\n\n#### Note\n\nAs a business, you have an obligation to identify the states, provinces, and countries where you have tax obligations. You must then register with the tax authorities in those respective jurisdictions and add your registrations to Stripe using the **Registrations** tab of the Tax Dashboard.\n\nRegistration requirements vary by jurisdiction, and you can trigger it in a few ways, including, but not limited to:\n\n*   Building offices\n*   Employee locations\n*   Inventory locations\n*   Products sold\n*   Buyer locations\n\nWhen you’ve met the requirements to start collecting tax in a local jurisdiction or foreign country, register with that jurisdiction before you begin collecting. Typically the registration process requires submitting general business and industry information (like your product catalog), and financial information (like total sales). The time it takes to complete a registration varies by jurisdiction. Additionally, some jurisdictions might require you to file returns even if you don’t have any collected tax to remit. Stripe recommends you consult with your tax advisor to determine your businesses tax obligations in regard to registering for indirect or consumption tax.\n\nLearn more about the [locations Stripe Tax supports](https://docs.stripe.com/tax/supported-countries) along with the different tax thresholds that apply and links to the tax authority websites.\n\n## Track your registrations in the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you register to collect tax in a jurisdiction, use the [Registrations](https://dashboard.stripe.com/tax/registrations) tab of the Dashboard to add the registration to Stripe. That’s necessary for Stripe to calculate and collect the taxes you owe and for you to manage calculations and view reports for each location in which you’re collecting tax.\n\n### Add a registration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo start calculating and collecting tax for a location, you must add a registration in Stripe. You need to identify each state, province, and country where you have tax obligations. You need to register with the local tax authority to collect tax for each tax obligation. Registration requirements vary by each location (often referred to as nexus in the US).\n\nTo add a registration in the [Dashboard](https://dashboard.stripe.com/tax/registrations):\n\n1.  Click **+Add registration** and select the country and the applicable state or province.\n2.  Add the date to start tax collection as provided by your local tax authority.\n3.  Save your changes.\n\n### Edit a registration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo maintain your compliance, you might need to edit your registration. Your local tax authority will inform you of any updates to your information or dates.\n\nTo edit a registration:\n\n1.  Click the overflow menu () next to the applicable registration.\n2.  Click **Edit end date**.\n3.  Save your changes.\n\n### End a registration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo stop calculating and collecting tax for a location, you must end the tax obligation’s registration.\n\nTo end a registration by setting an end date:\n\n1.  Click the overflow menu () next to the applicable registration.\n2.  Click **Edit end date**\n3.  Add the date (provided by your local tax authority) to stop tax collection.\n4.  Save your changes.\n\nTo end a registration immediately:\n\n1.  Click the overflow menu () next to the applicable registration.\n2.  Click **Edit immediately**.\n3.  Confirm your changes.\n\n### Registration status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can’t delete a registration. Every registration you add for a location in which you have a tax obligation appears on your Dashboard under one of the following categories:\n\n| Category | Definition |\n| --- | --- |\n| Active | A registration that’s currently calculating and collecting tax |\n| Scheduled | A registration that will start calculating tax based on your inputted start date (provided by the local tax authority) |\n| Expired | A registration that’s no longer calculating tax as it has passed the inputted end date (provided by the local tax authority) |\n\n## Registration types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Tax supports the registration types listed on this page. If you can’t locate the region where you desire to register or to add a registration to Stripe Tax, use a registration type under the [Other tab](https://docs.stripe.com/tax/registering?registrationTypeRegion=other#registration-types).\n\n#### Note\n\nTo navigate the registration process, follow [our US guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\n### State sales tax registration type![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**API value**: `state_sales_tax`\n\nThe state sales tax registration is for businesses that sell goods and services to customers in a state of the United States. State sales tax is usually a certain percentage of the sale price. The customer is responsible for paying it, but the seller usually collects it and remits it to the [state government](https://stripe.com/guides/how-to-file-sales-tax-us).\n\n### Lease Transaction tax registration type![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**API value**: `local_lease_tax`\n\nPersonal Property Lease Transaction Tax registration is for businesses that lease personal property. These businesses must calculate and remit taxes based on their property’s value. Many of our users apply this registration for their Software as a Service (SaaS) businesses as part of the Chicago Lease Tax. We only support the Chicago Lease Tax, which only applies to transactions in Illinois.\n\n### Communications Services tax registration type![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**API value**: `state_communications_tax`\n\nCommunications Service Tax registration is for businesses providing a variety of telecommunications and digital services. Typically, the tax is calculated based on gross receipts and paid to the state. This registration is applicable to the Communications Service Taxes in Kentucky and Florida.\n\n### Amusement tax registration type![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**API value**: `local_amusement_tax`\n\nAmusement Tax registration is required for businesses that earn revenue from entertainment sources, including both physical venues and digital platforms. Typically, the operator is tasked with collecting and remitting this tax to the local tax authority. In practice, this registration refers to the Chicago Amusement Tax and it also applies to digital services such as Software as a Service (SaaS).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Understand when you need to collect tax in each location](https://docs.stripe.com/tax/supported-countries)\n*   [Set up Stripe Tax](https://docs.stripe.com/tax/set-up)\n*   [Tax reporting](https://docs.stripe.com/tax/reports)\n*   [File and remit](https://docs.stripe.com/tax/filing)\n*   [Products, prices, tax codes, and tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior)",
  "title": "Register for sales tax, VAT, and GST | Stripe Documentation",
  "description": "Learn more about your tax obligations and how to register with jurisdictions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-data/write-queries",
  "markdown": "# Write queries | Stripe DocumentationThe Stripe Docs logo\n\n## Compose custom queries in standard ANSI SQL for use in a broad range of reporting functions.\n\nAnyone on your account with [permission to view reports](https://support.stripe.com/questions/can-i-invite-other-team-members-or-my-developer-to-use-my-stripe-account) can use the [Sigma query editor](https://dashboard.stripe.com/sigma/queries) to compose new or modify existing queries.\n\nOur large language model (LLM)-based query assistant can even help you generate the SQL you need from a natural language prompt.\n\n## Query resources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe navigator window to the left of the editor provides a set of tools to help you build your query. You can see:\n\n*   Your previously saved queries\n*   Queries saved by your team\n*   The table schema to search for data sources\n*   Stripe query templates\n\n### Saved queries and templates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe **Queries** tab shows the lists of queries previously saved by you and your team. The **Templates** tab provides a set of example queries representing the most common metrics and reports.\n\nSelecting any saved query or template loads it into the query editor, where you can click **Run** to regenerate and view the results.\n\nTo use any saved query or template as a starting point for your own custom report, either click its overflow menu () and choose **Make a copy** or load it into the editor and click **Make a copy**. This allows you to modify the content in the editor and [save](#saving-queries) your changes as a new query.\n\n## Compose a query![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you open the query editor, you can:\n\n*   Write standard ANSI SQL directly into the editor.\n*   Choose an existing query from your previously saved queries or Stripe’s templates and modify it in the editor to fine-tune the returned data.\n\nThe following query uses the `balance_transactions` table to get information about the five most recent balance transactions related to refunds.\n\n`select   date_format(created, '%Y-%m-%d') as day,   id,   amount,   currency,   source_id from balance_transactions where type = 'refund' order by day desc limit 5`\n\nClick **Run** to execute the query and view the results in a table below the editor. More complex queries might take a few moments longer to complete and display results. Attempting to run an invalid query generates an error message that contains the line number and position of the error.\n\nThe results of our sample query return 5 rows, where each row corresponds to a particular balance transaction item, along with the requested information about them.\n\n| day | id  | amount | currency | source\\_id |\n| --- | --- | --- | --- | --- |\n| 7/12/2024 | txn\\_f6tKUHhLdlQvRDW | \\-1,000 | usd | re\\_WBKrFCeiHBBz4LE |\n| 7/12/2024 | txn\\_Ql3UQeH5Qx4TWMg | \\-1,000 | usd | re\\_rNUsR8smal6WSKg |\n| 7/12/2024 | txn\\_hZylixrNgpy4LVq | \\-1,000 | usd | re\\_ZL0bqIxfkBdNILv |\n| 7/12/2024 | txn\\_Njz6DrDJdceqKas | \\-1,000 | eur | re\\_hyh5JkTUFm3TB2e |\n| 7/12/2024 | txn\\_fFlt4sjd1Sjcs7G | \\-1,000 | usd | re\\_OkLdsyU2Q6sz9qT |\n\n### Join tables![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can join columns of type _Primary key_ or _Foreign key_ to similar columns in other tables:\n\n*   **Primary key** represents the unique identifier (ID) for each record in a table\n*   **Foreign key** represents data that refers to the primary key of another table\n\nFor instance, you can join the `charge_id` column of the `disputes` table (a foreign key) to the `id` column of the `charges` table (a primary key).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/disputes.f293434123d316ff4fafe2524e9b2b0d.png)\n\nJoining tables allows you to return richer results in your datasets. For example, you can modify our balance transaction example to join with the `refunds` table to provide further information.\n\n`select   date_format(date_trunc('day', balance_transactions.created), '%Y-%m-%d') as day,   balance_transactions.amount,   balance_transactions.currency,   balance_transactions.source_id,   refunds.charge_id from   balance_transactions inner join refunds -- Joining these tables to retrieve additional information on balance_transactions.source_id=refunds.id where balance_transactions.type = 'refund' order by day desc limit 5`\n\nThis extended query now returns the original charge ID that the refund relates to.\n\n| day | amount | currency | source\\_id | charge.id |\n| --- | --- | --- | --- | --- |\n| 7/12/2024 | \\-1,000 | usd | re\\_njFXrZtcZrKi2IO | ch\\_x5oiIxh2rXwjBA4 |\n| 7/12/2024 | \\-1,000 | usd | re\\_LFHCsSVi3EbkuQw | ch\\_jw48j5ApJcmW3eI |\n| 7/12/2024 | \\-1,000 | usd | re\\_PbHhJBXUm8k3gBv | ch\\_3mwXXJLqy3f1ulQ |\n| 7/12/2024 | \\-1,000 | eur | re\\_2fM97xSPJx2WTKi | ch\\_QmzmFKSiZ9wmBLy |\n| 7/12/2024 | \\-1,000 | usd | re\\_inJsA9cDOizuviq | ch\\_9SGdVt1LGqe8uNH |\n\n## Use the assistant ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s query editor has a built-in LLM assistant that outputs standard ANSI SQL from a natural language prompt. The editor can perform the following modes:\n\n*   **Generate** uses the prompt question to write a new query, overwriting any SQL that’s already loaded in the editor window.\n*   **Edit** uses the prompt question to modify the SQL in the query editor.\n\n#### Check your mode\n\nFor the most accurate suggestion, make sure you select the right mode for your prompt. When the editor contains content, the mode automatically switches to **Edit**. If you then decide to prompt for a new query without changing the mode, the resulting suggestion might be unexpectedly constrained based on what’s already in the editor.\n\n### Prompt the assistant![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Open the [Sigma query editor](https://dashboard.stripe.com/sigma/queries) in the Dashboard.\n2.  Select the **Generate** mode and enter a question in the prompt field. The assistant:\n    *   Loads the query suggestion into the editor.\n    *   Displays a summary describing the suggestion.\n    *   Runs the suggested query and returns the results in a table below the editor.\n    *   Switches the mode to **Edit** so you can ask another question to fine-tune the query as needed.\n3.  Continue to prompt the assistant and view the resulting data until you get the information you want.\n\nThe screenshot below demonstrates how a prompt generated the same SQL as the example query shown at the beginning of this document.\n\n![Demonstrates prompting the assistant and the results.](https://b.stripecdn.com/docs-statics-srv/assets/sigma-assistant.93165f570965aee98631f9a48d399e15.png)\n\nAdditional questions to modify the suggestions might include:\n\n*   Sort these results by amount.\n*   Don’t include the automatic\\_transfer or reporting\\_category columns.\n*   Can I see the customer for each transaction?\n\n#### Explicitly request Connect data\n\nWhen asking for data about connected accounts, explicitly mention “connected accounts” in your query. For example: _How many new subscriptions did I have from connected accounts last month?_\n\n### View chat history![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSigma saves every interaction you have with the assistant in the chat history for that query. Click the button in the top-right of the editor to open the chat history slider.\n\nWithin the chat history, you can see each prompt given to the assistant for the life of the query (not just the current session) and the assistant’s response. Click **View SQL** to see the SQL suggestion associated with any prompt. When open, click **View in editor** to reload that suggestion into the main editor window.\n\n### Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The query editor assistant responds only to questions in English.\n*   The query editor assistant only answers questions relative to the Stripe schema. It can’t answer general questions, such as _What color is Stripe’s logo?_ or _What is the weather in San Francisco today?_\n\n### Feedback![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHelp us continue to improve the assistant by responding to the **Was this response helpful?** prompt between the editor and the results table:\n\n1.  Click **Yes** or **No**.\n2.  Enter specific details about how the assistant performed for you and what we can do to improve. We welcome all opinions, whether it’s about the accuracy of the suggestion, the UI, or any other aspect of your experience with the assistant.\n\n### Training data consent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy using Sigma Assistant you agree that Stripe may log and use your chat entries to train and improve the Sigma Assistant capabilities. If you don’t want to have your chat entries used for this purpose, you can opt-out in your [settings](https://dashboard.stripe.com/settings/sigma).\n\n## View and download query results![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nQuery results display in a table below the editor. You can:\n\n*   View a maximum of 1,000 results.\n*   Sort the results by clicking the column headers.\n*   Resize each column to make it easier to read the results.\n*   Adjust the height of the results output.\n\nAmounts express in the lowest available currency unit, such as cents for USD or yen for JPY. For example, an amount of `1,000` with a currency of `usd` equates to 10 USD.\n\nClick **Download CSV** to export your results for use in spreadsheet applications or other reporting tools. The downloaded CSV includes all query results, so you’re not limited to the 1,000 viewable results.\n\n## Save queries ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo save a query, click its title (labeled **New report** if it’s a new query) and enter your replacement. Then click **Save**.\n\nThe queries you save are added to the **All** section and made available to every team member on your account. Each saved query is given a unique URL you can share by clicking **Copy link**. You can use this link as a shortcut to a particular report you regularly use, or share it directly with other team members on the Stripe account.\n\nYou can only share queries with team members. Shared queries are read-only, so other team members can’t modify the queries you create. If a team member wants to make changes to your query, they can make a copy and edit it accordingly.",
  "title": "Write queries | Stripe Documentation",
  "description": "Compose custom queries in standard ANSI SQL for use in a broad range of reporting functions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/reports",
  "markdown": "# Tax reporting | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about different reporting available in Stripe Tax.\n\n#### Note\n\nStripe Tax provides reports of completed transactions. These reports include an itemized export showing completed transactions for all locations, an itemized export available by country or state, a summarized export showing an aggregated view of completed transactions by location, and a report showing an aggregated view of completed transactions for US locations. To access these reports, navigate to the Registrations tab of the [Dashboard](https://dashboard.stripe.com/tax/registrations).\n\n## Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo export tax transaction data, select a specific date range for completed transactions. These exports are available in CSV format and can be downloaded directly, scheduled, or have a link to the Dashboard sent through email. Typically, the data becomes available within one day of a completed transaction. Each day’s data includes transaction activity that occurs between 12:00am UTC and 11:59pm UTC.\n\nEach export includes breakdowns of individual tax amounts, attributes, reasons for each tax, and tax rates per jurisdiction level (country, state, county, city, district) for each line item in a transaction. This allows you to analyze tax information at different geographic levels and gain a comprehensive understanding of the tax breakdown within each transaction to aid in your tax filings and returns.\n\n### Itemized export ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Itemized transaction export contains the full list of line item level, imposition level, and jurisdiction level information for all of your completed transactions and refunds in CSV format. This export includes all transactions where you enable Stripe Tax. Itemized exports can help with filings that require more detail in the tax information reported. This export can be automated using the scheduling feature.\n\nThe Itemized export provides a comprehensive list that details tax breakdowns for each line item in a completed transaction where Stripe Tax is enabled. This export includes refunds and covers multiple jurisdictions. Depending on the specific location, there might be multiple rows per line item. Each row includes important details such as the transaction date and identifiers, jurisdiction location, amounts, tax rates, reasons for taxation, origin and destination addresses, amounts in the filing currency, and selected transaction metadata.\n\nThe export also includes transactions for tax situations that are non-taxable. This applies to transactions occurring where you’re not registered, transactions in jurisdictions not supported by Stripe Tax, or transactions where the jurisdiction doesn’t impose tax. You can filter these transactions from your report by selecting the **Exclude non-taxable transactions** option when exporting. The export still includes transactions for other non-taxable scenarios.\n\nUse this export for US states that require sub-state level reporting.\n\n[Download example CSV file](https://stripe.com/files/docs/tax/itemized-export.csv)\n\nIf you’ve registered for the One Stop Shop (OSS) within the European Union, an overview of all your EU transactions can be downloaded. This downloadable content can assist in preparing your VAT OSS return. But please be aware, the Itemized export does include non-taxable transactions (unless purposely excluded) and domestic transactions, both of which aren’t to be reported in an OSS return.\n\n### Summarized export ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Summarized export provides an overview of completed transaction line items, categorized by country, state, jurisdiction, and tax rate, when Stripe Tax is enabled. Each row provides information such as jurisdiction location, applied tax rate, amounts in the filing currency and the [presentment currency](https://docs.stripe.com/currencies#presentment-currencies \"presentment currency\"). In certain cases, there might be multiple rows for the same jurisdiction due to potential variations in tax rates. This export doesn’t include transactions that lack a registration or are classified under unsupported jurisdictions and product tax codes.\n\nUse this export for country-level filings and VAT OSS, as well as for simpler US states.\n\n[Download example CSV file](https://stripe.com/files/docs/tax/summarized-export-v2.csv)\n\n## Imports ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe’re holding a beta for a feature that allows you to import a CSV of transaction data from platforms like Amazon, Shopify, eBay, and so on directly into Stripe Tax. It will allow you to have a single, consolidated view of all your sales and tax obligations across platforms. See the signup form below if you’re interested in joining the beta.\n\nAfter you import a CSV that meets the format requirements, you can:\n\n*   See all your sales tax collection in one place.\n*   Determine how much sales tax you owe for the reporting period—which means you won’t need to perform manual calculations across platforms.\n*   Make sure you stay compliant by having the most accurate tax liability information.\n\nThis feature reinforces our goal to provide the most comprehensive sales tax management solution for Stripe Tax customers. We want to eliminate the need to manage your tax compliance across selling platforms so you can focus on other parts of your business.\n\nUse the following signup form if you want to participate in the beta. If you’re selected for the beta, we’ll contact you with more information about the next steps.\n\n## Location reports (US only) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Location reports provide a summary of transaction and refund data aggregated for specific US locations. Each report aligns with state filing and formatting requirements and corresponds to the specific filing periods of the online filing portal. You can select the frequency and period within the report, which the state determines.\n\nThese reports can only be viewed within the Dashboard and can’t be downloaded.\n\nStripe Tax currently doesn’t support use cases beyond your transaction data, such as credits, prepayments, discounts, and more. As a result, the final numbers for your business’s filing might vary.\n\n#### Note\n\nThe reports include transactions starting from January 1, 2023, and support fiscal annual periods beginning from 2024 onwards. You can access and view your transaction data from 2022 in the Itemized and Summarized exports.\n\nIn May 2024, we changed how some jurisdictions display in our Location reports, Itemized exports, and Summarized exports to more consistently and accurately represent how taxing jurisdictions appear across Stripe Tax. These changes include:\n\n*   Changing the names of certain jurisdictions\n*   Splitting some jurisdictions into multiple sub-jurisdictions As a result, the jurisdiction names used in the Location reports, Itemized exports, and Summarized exports might not be identical for reports and exports that include data from May 2024 onwards.\n\n### Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefunds associated with an original transaction period are reported in that same period, even if they occur later. This can affect the aggregated amounts in a report. Stripe currently doesn’t allow the reassigning of refunds to alternate periods.\n\n### Tax types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax only supports reporting on transactions that are classified as Sales or Use tax types.\n\nYou have the option to view within the [Itemized export](#itemized-exports) a detailed tax breakdown of each transaction for this report period including other tax types.\n\n### Location specific considerations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe locations listed below have additional report considerations:\n\n*   [Alaska](https://docs.stripe.com/tax/supported-countries/united-states/alaska#location-reports)\n*   [Arizona](https://docs.stripe.com/tax/supported-countries/united-states/arizona#location-reports)\n*   [Florida](https://docs.stripe.com/tax/supported-countries/united-states/florida#location-reports)\n*   [Hawaii](https://docs.stripe.com/tax/supported-countries/united-states/hawaii#location-reports)\n*   [Illinois](https://docs.stripe.com/tax/supported-countries/united-states/illinois#location-reports)\n*   [Kentucky](https://docs.stripe.com/tax/supported-countries/united-states/kentucky#location-reports)\n*   [Tennessee](https://docs.stripe.com/tax/supported-countries/united-states/tennessee#location-reports)\n*   [Washington](https://docs.stripe.com/tax/supported-countries/united-states/washington#location-reports)\n\n## Access data using exports and reports ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo download or view your Stripe Tax data, navigate to the **Registrations** tab of the [Dashboard](https://dashboard.stripe.com/tax/registrations).\n\n### Exports ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can export your transaction data into either an itemized or summarized report. These exports contain detailed information at the line item, imposition, and jurisdiction levels. Reports are accessible for all locations where you enable Stripe Tax.\n\nTo export transaction data in CSV format:\n\n1.  Click **Export transactions**.\n2.  Specify the date range.\n3.  Select either **Itemized export** or **Summarized export**.\n4.  Click **Export** to generate and download the file.\n\n#### Itemized export by location ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo export itemized transactions for a jurisdiction in CSV format:\n\n1.  Navigate to the **Registration details** page for a location.\n2.  Click **Export transactions**.\n3.  Specify the date range.\n4.  Click **Export** to generate and download the file.\n\n### Location reports ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo view a US location specific report:\n\n1.  Navigate to the **Registration details** page for a location.\n2.  Select **View Report**.\n3.  To build the report for a state, select the **Frequency**, then the **Period**.\n\n## Tax calculations recorded in reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax exports include transactions committed with the [Stripe Tax API](https://docs.stripe.com/tax/custom) and operations on Stripe objects with `automatic_tax[enabled]=true`.\n\n#### Note\n\nThe recorded transactions are considered effective on the date that they finalize and tax amounts aren’t recalculated.\n\nStripe Tax exports record the following operations, which _increase_ the balance of total tax collected:\n\n*   Customer completes a payment in a Checkout Session. This also applies to Checkout Sessions created through [Payment Links](https://docs.stripe.com/api/payment_links/payment_links).\n*   Finalizing an Invoice. This applies to one-off Invoices and Subscription renewal Invoices. [Invoice finalization](https://docs.stripe.com/invoicing/integration/workflow-transitions) happens when the Invoice’s state transitions from `draft` to `open` state. This transition happens _before_ the Invoice is paid.\n*   Transitioning an Invoice’s state from `uncollectible` to `paid` through the [Pay Invoices API](https://docs.stripe.com/api/invoices/pay).\n*   [Voiding](https://docs.stripe.com/api/credit_notes/void) a Credit Note.\n*   [Creating](https://docs.stripe.com/api/tax/transactions/create_from_calculation) a tax transaction with the Stripe Tax API.\n\nStripe Tax exports record the following operations, which _decrease_ the balance of total tax collected:\n\n*   [Voiding](https://docs.stripe.com/api/invoices/void) an Invoice.\n*   Marking an Invoice as [uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible).\n*   [Creating](https://docs.stripe.com/api/credit_notes/create) a Credit Note.\n*   A [Refund](https://docs.stripe.com/api/refunds) of a Charge associated with an Invoice or a Checkout Session.\n*   Creating a [reversal](https://docs.stripe.com/api/tax/transactions/create_reversal) (refund) tax transaction with the Stripe Tax API.\n\nStripe Tax doesn’t record the following operation in Tax exports:\n\n*   [Disputes](https://docs.stripe.com/disputes) that are upheld by the cardholder’s bank. Stripe Tax doesn’t decrease the balance of the collected total tax.\n*   Refunds of [uncaptured amounts](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-amount_to_capture) of a payment. This can happen when performing a [partial capture](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-amount_to_capture) for payments of Checkout sessions using [`capture_method=manual`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-capture_method). When the capture amount is lower than the original amount, Stripe Tax doesn’t reduce the total balance of the collected tax.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Set up Stripe Tax](https://docs.stripe.com/tax/set-up)\n*   [Products, prices, tax codes, and tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior)\n*   [Registering for tax](https://docs.stripe.com/tax/registering)\n*   [Tax filing and remittance](https://docs.stripe.com/tax/filing)",
  "title": "Tax reporting | Stripe Documentation",
  "description": "Learn about different reporting available in Stripe Tax.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/monitoring",
  "markdown": "# Monitor your obligations | Stripe DocumentationThe Stripe Docs logo\n\n## Use our tool to see where you need to pay tax based on past transactions.\n\nStripe Tax provides insights about your potential tax registration obligations (called economic nexus in the US). We help you understand where you might have to register, collect, and remit tax based on your sales into a state or country, even if you don’t have physical presence there.\n\n#### Note\n\nTax provides threshold monitoring primarily for payments processed by Stripe. The only out of band payments we currently include are invoices processed off of Stripe and transactions created using the Stripe Tax APIs.\n\n## How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTax uses your preset tax code and [location attribution](https://docs.stripe.com/tax/monitoring#location-attribution) for each Stripe-processed sale minus refunds to see how your total sales within a given [time window](https://docs.stripe.com/tax/monitoring#time-window) compare to tax thresholds in different jurisdictions. Tax uses time windows defined by local tax rules and assumes all sales are B2C unless you have included a VAT ID for your customer. Your obligations might differ if you only sell nontaxable items or make B2B sales. Learn more about [when you need to register to collect tax in each location](https://docs.stripe.com/tax/supported-countries).\n\n### Exceptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   We provide insight into the places where you don’t have a physical presence so obligations aren’t monitored for your home US state or country.\n*   Obligations are only monitored in live mode.\n*   Connect platforms can only access transactions associated with their platform. Transactions linked to your platform’s connected accounts don’t count toward your platform’s tax registration thresholds. They only count toward the connected accounts’ tax thresholds.\n*   Application fees that Connect platforms charge don’t count toward the platform’s tax registration thresholds.\n*   We monitor locations that Stripe Tax supports. [Learn more](https://docs.stripe.com/tax/supported-countries) about those locations.\n*   We treat obligations for tangible product sales and services the same.\n*   We can’t differentiate between retail and wholesale sales.\n\n### Location attribution ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLocation attribution is an important part of monitoring tax thresholds. To correctly determine your tax obligations, Stripe Tax attributes a location to each processed transaction once per day, adding new resulting transactions to your monitoring threshold in a 24-hour cycle. Location attribution happens even if tax isn’t calculated for the transactions, and it’s a different process from the [address validation](https://docs.stripe.com/tax/customer-locations) that we perform to calculate tax. You might not need specific tax rates and precise address information for threshold monitoring purposes, unlike when Stripe calculates and collects tax for transactions.\n\nTo attribute a location, Stripe Tax uses available information for that transaction and prefers some information sources to others—some examples are the current customer address, country of the card issuer, and the customer’s IP address.\n\nStripe Tax uses information in the following order:\n\n1.  **Stripe Tax validated address:** if we calculated tax for the transaction, Stripe Tax already validated the address. We use the same address when calculating the tax threshold.\n2.  **Customer address:** property in the [Customer](https://docs.stripe.com/api/customers/object) object responsible for the transaction. Stripe Tax uses the country, state, and postal code fields to determine a jurisdiction.\n3.  **Address Verification (AVS) postal code:** [AVS](https://docs.stripe.com/disputes/prevention/verification#avs-check) is a service that verifies the authenticity of a transaction by checking if the provided address matches the cardholder’s billing address. If the transaction is successful, Stripe Tax converts a US or Canadian postal code into a state and determines the jurisdiction.\n4.  **Country of the card issuer:** Stripe Tax uses the credit card issuer’s bank country to determine a jurisdiction for the transaction. For transactions in the US and Canada, we might also need state information.\n5.  **Payment method:** Stripe Tax uses country-specific payment methods to determine the location of a payment. We assume that a transaction through [iDeal](https://docs.stripe.com/payments/ideal \"iDeal\") is from the Netherlands and that a transaction through Giropay is from Germany, for example.\n6.  **Customer’s IP address:** as a last resort, we use the customers IP address to determine a jurisdiction.\n\nWhen Stripe Tax can’t determine the location for a transaction, we group its information under `Unattributed revenue`. Where possible, we break out globally unattributed revenue and US unattributed revenue. For example, if we’re able to determine the customer is in the US (perhaps by using an IP address) but don’t have enough information to make a granular determination, we categorize that as US unattributed revenue.\n\n![Unattributed revenue in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/unattributed-revenue.ff34b48ec1ba3683ad460f1306aa3551.png)\n\n#### Handling unattributed revenue![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe table below explains what information is needed for different countries.\n\n| Example addresses | Explanation | Attributed |\n| --- | --- | --- |\n| *   `country`: US<br>*   `state`: NY | **Country and state**<br><br>You need to provide country and state information to calculate tax thresholds in the US. |     |\n| *   `country`: US<br>*   `postal_code`: 10038 | **Country and postal code**<br><br>We match the 5 or 9-digit postal code with its corresponding state. |     |\n| *   `country`: US | **Country**<br><br>In the US, each state defines it’s rules for when to establish economic nexus. Therefore, country-only information isn’t enough to attribute locations to transactions. Transactions without state information appear under US unattributed revenue. |     |\n\n## Using the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOn the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds), you can see insights about your potential tax registration obligations.\n\nYou can monitor tax obligations in the following categories:\n\n*   **Exceeded:** Where your estimated sales or transactions are over the location’s threshold and your business likely needs to register for tax.\n*   **Monitoring:** Where you haven’t exceeded a threshold yet, but you do have buyers located in that market. We’ll provide a percent-to-threshold to help you determine when you might need to register.\n*   **Unattributed:** When Stripe Tax isn’t able to determine the location for a transaction, we group its information under this category. Where possible, we break out globally unattributed revenue and US unattributed revenue.\n\nTo learn more about an individual state or country comparison, click the overflow menu (), then **View details**. This page contains information about the threshold itself and your latest sales.\n\nIf you have questions about your latest sales in a location, send an email to: [stripe-tax@stripe.com](mailto:stripe-tax@stripe.com).\n\n### Time windows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAs noted above, each jurisdiction might have a different time window for calculating nexus obligations. For example, some only look at the past calendar month or quarter whereas others use a rolling basis. You can see how each individual jurisdiction calculates economic nexus as part of the Review flow, but in general, Stripe Tax supports the following calculation windows and methodology:\n\n*   **Previous or current year:** Stripe Tax uses the previous or current calendar year to calculate the count and amount of transactions.\n*   **Previous year:** Stripe Tax uses the previous calendar year to calculate the count and amount of transactions.\n*   **Rolling year by quarter:** Stripe Tax uses the last four full quarters to calculate the count and amount of transactions.\n*   **Rolling 12 months:** Stripe Tax uses the last 12 months to calculate the count and amount of transactions.\n\n### Stripe Tax API transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, Stripe Tax monitors all [Stripe Tax API](https://docs.stripe.com/tax/custom) transactions. You can choose to exclude your Stripe Tax API transactions by adjusting the **API transactions** setting in your [Tax Settings](https://dashboard.stripe.com/settings/tax).\n\n## Tax threshold notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax notifies you about potential tax obligations (known as economic nexus in the US). We send notifications after you hit a threshold in any location. Stripe sends tax threshold notifications by email, and displays them in the Dashboard to the account owner.\n\n### Email notification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe send email notifications from `support+updates@stripe.com` to the account owner’s email. The email notification includes your account name and links to the monitoring tool and other resources that provide additional information.\n\n![Preview of tax threshold notification](https://b.stripecdn.com/docs-statics-srv/assets/tax-threshold-email-preview.ae31e2cbfc04dfdf56b3bffa5b3c1295.png)\n\n### Dashboard notification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you log into the Dashboard as the account owner, you can see notifications. Click the bell icon in the navigation bar to show all of your Dashboard notifications.\n\n#### Note\n\nClick **Review tax thresholds** inside of the notification to go to the tax monitoring tool.\n\nYou can exceed a tax threshold in a single location.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/tax-threshold-single-location.c59b7a897eb7c29de32a97c959277b67.png)\n\n### Tax threshold notification preconditions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe only notifies you when you have exceeded a tax threshold based on Stripe’s calculations. To receive tax threshold notifications, you must meet the following requirements:\n\n*   You must have opted into [Stripe Tax](https://dashboard.stripe.com/tax).\n*   You must not have disabled [Stripe Tax notifications](https://dashboard.stripe.com/settings/user).\n*   You must not have an active live mode tax registration for the location.\n*   You must not have received any tax threshold notification within the past 7 days.\n\n### Tax threshold notification frequency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you cross a threshold, Stripe sends you a notification within 1 or 2 days. If Stripe sent you a notification in the past 7 days, you receive batched notifications for new threshold status changes a week after the last notification.\n\n1.  **March 15**: You exceed a threshold in Germany.\n2.  **March 16**: Stripe notifies you about exceeding a tax threshold in Germany.\n3.  **March 25**: You exceed a threshold in the Netherlands.\n4.  **March 26**: Stripe notifies you about exceeding a tax threshold in the Netherlands.\n\n### Disable tax threshold notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re the account owner, you can disable tax threshold notifications by going to your [profile settings](https://dashboard.stripe.com/settings/user).\n\n![Tax threshold notifications setting in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/tax-threshold-email-preferences.2ef87036a22c844c6550a348e155c1bf.png)\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Checkout and Tax](https://docs.stripe.com/tax/checkout)\n*   [Billing and Tax](https://docs.stripe.com/billing/taxes/collect-taxes)\n*   [Products, prices, tax codes, and tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior)",
  "title": "Monitor your obligations | Stripe Documentation",
  "description": "Use our tool to see where you need to pay tax based on past transactions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/tax-for-marketplaces",
  "markdown": "# Tax for marketplaces | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about tax requirements for platforms and marketplaces, and how to enable Stripe Tax to collect tax on transactions when the Connect platform is liable.\n\n## Tax requirements for platforms and marketplaces![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMany countries and US states require marketplace operators to collect sales tax and VAT on their facilitated sales. The US refers to these businesses as marketplace facilitators, while other regions, such as Europe, might refer to them deemed sellers.\n\nAs a marketplace operator, your tax collection requirements differ depending on the country or state. However, if your electronic interface enables transactions between buyers and sellers and you directly or indirectly collect customer payments, you might need to fulfill tax collection responsibilities.\n\nIf your businesses operates a marketplace or platform, you must first determine whether they qualify as a marketplace facilitator or a deemed seller, then make sure that they maintain tax compliance. If you’re unsure about your business’s tax requirements, consult a tax advisor.\n\nIf your business operates a marketplace and wants to collect tax on sales facilitated through this marketplace, refer to details below to enable Stripe Tax for marketplaces.\n\n## Enable Stripe Tax for marketplaces![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax enables businesses to calculate, collect, and file indirect taxes in over 40 countries, across hundreds of product categories.\n\nUse this guide if your platform is responsible for collecting, filing, and reporting taxes.\n\n#### Note\n\nWe use the platform’s head office location, preset tax code, and tax registrations to calculate taxes. However, we don’t use the connected account information for tax purposes.\n\n1.  [Configure your platform account for tax collection](#set-up)\n2.  (Optional) [Assign tax codes to product catalog](#assign-product-tax-codes)\n3.  [Integrate tax calculation and collection](#enable-tax-collection)\n4.  [Withhold the collected tax amount](#tax-withholding)\n5.  [Access Stripe Tax reports](#access-reports)\n\n[](#set-up)\n\nTo collect taxes, you need the platform account’s tax settings and registrations.\n\n### Use the Stripe Dashboard\n\n### Use the Stripe API\n\n[](#assign-product-tax-codes)\n\nTo calculate taxes, Stripe Tax requires that you classify products into tax codes. You can do so by supplying [a preset tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#preset-tax-codes) for the platform account, which might be sufficient if you typically sell a single category of items or services.\n\nAdditionally, you can [map tax codes to each product](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to give you more control over tax categorization. You might have to map each product that a seller sets up on your marketplace. You can find a list of supported tax codes from [available tax codes](https://docs.stripe.com/tax/tax-codes) or retrieve it from the Stripe [Tax Code API](https://docs.stripe.com/api/tax_codes).\n\n[](#access-reports)\n\n### Use the Stripe Dashboard\n\n### Use the Stripe API",
  "title": "Tax for marketplaces | Stripe Documentation",
  "description": "Learn about tax requirements for platforms and marketplaces, and how to enable Stripe Tax to collect tax on transactions when the Connect platform is liable.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/filing",
  "markdown": "# File and remit | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about filing and remitting tax you have collected.\n\nIf you’re a business collecting tax, you must file and remit the tax collected in every location that you’re [registered in](https://docs.stripe.com/tax/registering).\n\nThe tax authority in each location determines the rules for reporting and filing taxes. For example, some states in the US want businesses to report at the city, county, or other level when filing, whereas others only need information at a more consolidated or state level. Additionally, each location mandates their own method and timing of remittance, and can vary depending on your volume of sales into that location.\n\nStripe Tax users can leverage transaction exports and location reports to prepare, file, and remit the tax that was automatically calculated and collected. Stripe Tax doesn’t currently file or remit taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance needs:\n\n*   For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).\n*   For Europe and APAC, find more information browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.\n\nIf you don’t use Stripe Tax but use manual [Tax Rates](https://docs.stripe.com/billing/taxes/tax-rates) to define and maintain rates on your own, there are specific exports available depending on your integration and use case. You can leverage up to four different reports depending on your integration.\n\n## Downloading data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFrom the [Tax Rates](https://docs.stripe.com/billing/taxes/tax-rates) list in the Dashboard, you can export the data files required for tax reporting calculations.\n\nTax Rates might provide up to four different levels of tax report export files depending on your integration:\n\n*   Invoice line item tax export—A lower-level export, this includes details down to the line item level, including per-line-item tax rates, inclusive or exclusive, amounts, and so on.\n*   Invoice totals export—Shows the aggregate tax collected on the invoice as a whole, including adjustments for any refunds.\n*   Checkout payment mode line item tax export—A lower-level export, this includes details down to the line item level, including per-line-item tax rates, whether it’s inclusive or exclusive, amounts, and so on.\n*   Checkout payment mode totals export—Shows the aggregate tax collected on the invoice as a whole, including adjustments for any refunds.\n\nTo get your gross sales, use the Invoice or Checkout line item level export. To factor in refunds, use the Invoice total export.\n\n## Filing frequency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe local tax authority specifies the tax filing frequency during the tax collection registration process. Depending on your specific requirements, you might need to remit tax on a monthly, annual, or other designated frequency. Filing frequencies can vary based on factors such as annual revenue and other considerations. Contact your local tax authority to confirm your filing frequency if you’re uncertain.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nExports and reports include refunds. If a refund of tax is issued because of a return of goods, local tax authorities might require an amendment to the original tax return to process the refund. To claim the refund on your tax return, reach out to your local tax authority.",
  "title": "File and remit | Stripe Documentation",
  "description": "Learn about filing and remitting tax you have collected.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/taxes/tax-rates",
  "markdown": "# Tax rates | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to collect and report taxes with tax rate objects.\n\nStripe allows you to define any number of tax rates and apply them to [invoices](https://docs.stripe.com/api/invoices \"invoices\"), [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), and one time payments when using Checkout. However, we won’t automatically set them on your behalf.\n\nIf you’re looking for automated tax calculation where you don’t need to define the rates, use [Stripe Tax](https://docs.stripe.com/tax).\n\nWhen applying tax rates, Stripe calculates the [total tax amount](https://docs.stripe.com/billing/taxes/tax-rates#tax-amounts) per tax rate, and summarizes it in a table that you can export into tax summary reports.\n\n## Creating tax rates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re working with a small number of tax rates, you can manage and create them in the [Dashboard](https://dashboard.stripe.com/test/tax-rates). After creating tax rates, you can apply them to [invoices](https://docs.stripe.com/invoicing/taxes/tax-rates), [subscriptions](https://docs.stripe.com/billing/taxes), and [one-time payments](https://docs.stripe.com/payments/checkout/taxes) or [subscriptions](https://docs.stripe.com/billing/taxes/collect-taxes?tax-calculation=tax-rates#adding-tax-rates-to-checkout) created through Stripe Checkout.\n\nCreate a catalog of tax rates that meet the requirements for the jurisdictions that you do business in. For example, if you operate in Europe, you might want to create a catalog of tax rates for OSS VAT.\n\n#### Creating tax rates through the API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following example demonstrates how you can create a tax rate through the API.\n\n`curl https://api.stripe.com/v1/tax_rates \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d display_name=\"Sales Tax\" \\  -d inclusive=false \\  -d percentage=\"7.25\" \\  -d country=US \\  -d state=CA \\  -d jurisdiction=\"US - CA\" \\  -d description=\"CA Sales Tax\"`\n\nRequired properties:\n\n*   The `display_name` appears on your customer’s invoice, and is usually a short name that describes the specific type of tax, such as `Sales`, `VAT`, or `GST`.\n*   The `inclusive` property determines whether the tax `percentage` is added to, or included in, the overall amount.\n*   The `percentage` is a number (up to 4 decimal places) that represents the tax percentage to be collected.\n\nOptional properties:\n\n*   The optional `country` property is a valid [two-letter ISO country code](https://www.nationsonline.org/oneworld/country_code_list.htm). Some countries (for example, United States) require an additional two-letter `state` property. Use these properties to apply dynamic tax rates based on your customer’s billing or shipping address in Checkout Sessions.\n*   The optional `jurisdiction` property represents the tax jurisdiction of the tax rate and can be used to differentiate between tax rates of the same percentage. `jurisdiction` appears on your customer’s invoice. In the Dashboard, jurisdiction appears as the _Region_ label for the tax rate.\n*   You can also store additional details in the `description`. Your customers won’t see this property.\n\nYou can’t change the percentage, country, or state properties after you set them, and you can only set them when you create the tax rate. This ensures that existing subscriptions and invoices using tax rates aren’t affected. If you need to update these properties, create a new tax rate and archive the old object.\n\n## Inclusive versus exclusive tax ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTax rates can either be exclusive or inclusive. An _exclusive_ tax is not included in the invoice subtotal, whereas an _inclusive_ tax is.\n\nThe following table illustrates a 25% tax rate modifying the total amount due, depending on whether it’s exclusive or inclusive.\n\n| Tax | Subtotal | Tax due | Total |\n| --- | --- | --- | --- |\n| 25% Exclusive | $5.00 | $1.25 | **$6.25** ($5.00 + $1.25) |\n| 25% Inclusive | $5.00 | $1.00 (already included in the total) | **$5.00** ($4.00 + $1.00) |\n\n## Tax exempt and reverse charge![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can set the exemption status for a [Customer](https://docs.stripe.com/api/customers \"Customers\") to either exempt or reverse.\n\nIn both cases, no tax is calculated on the invoice.\n\nIn the case where the customer is liable for the tax (that is, under the reverse-charge procedure within EU VAT), set the exemption status to `reverse`. The invoice and receipt PDF includes the text **“Reverse charge”**.\n\n[Download example reverse-charge invoice PDF](https://stripe.com/files/docs/billing/taxes/example-reverse-charge.pdf)\n\nIf a one time payment is performed using Checkout, the exemption status is captured as [customer\\_details](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-customer_details) in the Checkout Session object.\n\nIf the customer is either exempt or reverse, for invoices with _inclusive_ tax rates, the buyer pays the `unit_amount` price _minus_ the tax that would’ve been paid had the user not been exempt or reverse. In other words, manual tax rates effectively calculate taxes as if the user weren’t exempt and then “backs out” the taxes.\n\nThe following table illustrates a 10% tax rate modifying the total amount due for an exempt or reverse customer. The first row is an example of “backed out” taxes.\n\n| Tax | Amount | Tax due | Total |\n| --- | --- | --- | --- |\n| 10% inclusive | 100 | $0  | $90.91 (inclusive tax of $9.09 is subtracted from the price) |\n| 10% exclusive | 100 | $0  | $100 |\n\n## Using multiple tax rates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can apply Tax rates to line items or set them as a default for all line items in an invoice. You can set up to five tax rates per line item. When you set tax rates on both a line item and the invoice, the rates for that invoice don’t apply to that line item.\n\nFor example, this invoice has two overall tax rates of 9.975% and 5%:\n\n| Invoice | Item tax rate | Overall invoice tax rate | Item tax rate (Effective) |\n| --- | --- | --- | --- |\n| Line item 1 | (none) | 9.975% and 5% | 9.975% and 5% |\n| Line item 2 | 10% | 9.975% and 5% | 10% |\n| Line item 3 | 1% and 2% | 9.975% and 5% | 1% and 2% |\n\n## Tax amounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you apply tax rates to an invoice, they’re aggregated into the [total\\_tax\\_amounts](https://docs.stripe.com/api/invoices/object#invoice_object-total_tax_amounts) attribute. This attribute represents the sum of all tax amounts, per tax rate, over the entire invoice.\n\nFor example, here’s an invoice where two line items have two different rates:\n\n| Invoice | Amount | Tax Rate | Tax Amount | Totals |\n| --- | --- | --- | --- | --- |\n| Line item 1 | $5.00 | 5% (excl) | $0.25 | —   |\n| Line item 2 | $10.00 | 10% (excl) | $1.00 | —   |\n| **Total Tax Amount** | —   | —   | $1.25 | —   |\n| **Total** | $15.00 | —   | —   | $16.25 |\n\n[Download example invoice PDF](https://stripe.com/files/docs/billing/taxes/example-tax-amounts.pdf)\n\n## Rounding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen determining tax amounts, you can do either of the following:\n\n*   Round at the invoice line item level to the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) before summing individual tax amounts across the entire invoice. We refer to this as “line item level”.\n*   Sum up all individual taxable amounts unrounded per tax rate. Combine them to a subtotal, apply the tax rate on the subtotal, and then round. We refer to this as “invoice level”.\n\nSelect this configuration on the [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) page in the Dashboard. The rounding configuration is only available for invoices with manual tax rates. Invoices with automatic Stripe tax always sum up the tax amounts first and then round.\n\n| Name | Amount | Inclusive Tax Rate | Taxable Amount (before rounding) | Tax Amount (before rounding) | Tax Amount (after rounding) |\n| --- | --- | --- | --- | --- | --- |\n| Line Item 1 | $1000.00 | 10% | $909.0909 | $90.9091 | $90.91 |\n| Line Item 2 | $50.00 | 10% | $45.4545 | $4.5455 | $4.55 |\n| Subtotal | $1,050.00 | —   | —   | —   | —   |\n| Total Tax Amounts | —   | —   | —   | —   | $95.46 |\n| Total rounded | $1,050.00 | —   | $954.54 | —   | $95.46 |\n\n[Download example line item level rounding invoice PDF](https://stripe.com/files/docs/billing/taxes/example-line-item-level-rounding.pdf)\n\n## Discounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDiscounts are usually applied before tax, but this isn’t always the case.\n\nReading each line left-to-right, noting the formula applied (in the table header), you can trace the values as they’re applied to the final, total amount.\n\n### Exclusive tax discount example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe always applies discounts before exclusive tax.\n\nThis example shows how we apply discounts to an exclusive tax rate.\n\n| Invoice Item | Amount | Discount % | Discount $ | Post Discount | Tax Rate | Tax $ | **Total** |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| **Formula** | —   | —   | `Amount * Discount` | `Amount - Discount$` | —   | `PostDiscount * TaxRate` | `PostDiscount + Tax$` |\n| Line item 1 | $5.00 | 10% | $0.50 | $4.50 | 5% exl. | $0.23 | **$4.73** |\n| Line item 2 | $10.00 | 10% | $1.00 | $9.00 | 5% exl. | $0.45 | **$9.45** |\n| **Total** | **$15.00** |     | **$1.50** | **$13.50** |     | **$0.68 (@ 5% exl.)** | **$14.18** |\n\n[Download example discounts invoice PDF](https://stripe.com/files/docs/billing/taxes/example-exclusive-tax-with-discount.pdf)\n\n### Inclusive tax discount example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen tax rates are inclusive, Stripe Tax applies discounts to the original amount first. Then, we recalculate taxes based on the remaining amount. This reduction has the side effect of reducing the tax amount due.\n\n| Invoice Item | Amount | Discount % | Discount $ | Post Discount | Tax Rate | Tax $ (Included) | **Total** |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| **Formula** | —   | —   | `Amount * Discount%` | `Amount - Discount$` | —   | `PostDiscount - PostDiscount / (1 + TaxRate)` | `PostDiscount` |\n| Line item 1 | $5.00 | 10% | $0.50 | $4.50 | 5% incl. | $0.21 | **$4.50** |\n| Line item 2 | $10.00 | 10% | $1.00 | $9.00 | 5% incl. | $0.43 | **$9.00** |\n| **Total** | **$15.00** | **—** | **$1.50** | **$13.50** | **—** | **$0.64 (@ 5% incl.)** | **$13.50** |\n\n[Download example invoice PDF](https://stripe.com/files/docs/billing/taxes/example-inclusive-tax-with-discount.pdf)\n\n### Both inclusive and exclusive tax with discount example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn the case where you have both inclusive and exclusive tax, the two rules apply together in the following steps for every line item:\n\n1.  We calculate the inclusive tax amount based on the post-discounted amount by multiplying by the inclusive tax rate.\n2.  We calculate the exclusive tax amount by multiplying the exclusive tax rate by the post-discounted amount, less the inclusive tax amount.\n3.  We calculate the total amount due by summing the post-discounted amount and the exclusive tax amount (calculated in step 2).\n\n| Invoice Item | Amount | Discount % | Discount $ | Post Discount | Inclusive Tax Rate | Inclusive Tax $ | Post Discount, Less Incl. Tax | Exclusive Tax Rate | Exclusive Tax $ | **Total** |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| **Formula** | —   | —   | `Amount * Discount%` | `Amount - Discount$` | —   | `PostDiscount - PostDiscount / (1 + TaxRate)` | `PostDiscount - InclusiveTax$` | —   | `PostDiscLessIncTax * TaxRate` | `PostDiscount + ExclTax$` |\n| Line item 1 | $5.00 | 10% | $0.50 | $4.50 | 5% incl. | $0.21 | $4.29 | 7% excl. | $0.30 | **$4.80** |\n| Line item 2 | $10.00 | 10% | $1.00 | $9.00 | 5% incl. | $0.43 | $8.57 | 7% excl. | $0.60 | **$9.60** |\n| **Total** | **$15.00** | **—** | **$1.50** | **$13.50** | **—** | **$0.64 (@ 5% incl.)** | **$12.86** | **—** | **$0.90 (@ 7% excl.)** | **$14.40** |\n\n[Download example invoice PDF](https://stripe.com/files/docs/billing/taxes/example-inclusive-and-exclusive-tax-with-discount.pdf)\n\n## Tax reporting and remittance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAny business collecting taxes ultimately needs to remit tax to the appropriate government.\n\nSee [Tax reporting and filing](https://docs.stripe.com/tax/reports) to learn more.\n\n### Data exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFrom the Dashboard’s [Tax Rates list](https://dashboard.stripe.com/test/tax-rates/) page, you can export data files required for tax reporting calculations.\n\nStripe Billing provides two different levels of tax report export files:\n\n*   **Invoice line item tax export** — A lower-level export, this includes details down to the line item level, including per-line-item tax rates, inclusive/exclusive, amounts, and so on.\n*   **Invoice totals export** — Shows the aggregate tax collected on the invoice as a whole, including adjustments for any refunds.\n\nFor remittance reporting, use the line-item tax export to sum all amounts paid for all tax rates used. To factor in any refunds you will also need to pivot against the Invoice totals export.\n\n## Migrate to tax rates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re using the deprecated `tax_percent`, `tax_info`, `tax_info_verification`, and `business_vat_id` fields, review the following options to migrate to tax rates and [Customer Tax IDs](https://docs.stripe.com/billing/customer/tax-ids) for better tax collection and reporting (remittance) tools.\n\n### Existing tax percent use cases have been migrated to tax rates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nExisting `tax_percent` uses have been automatically converted into [tax rates](https://docs.stripe.com/api/tax_rates), and your invoices and subscriptions have been updated to reference the new objects through [default\\_tax\\_rates](https://docs.stripe.com/api/invoices/create#create_invoice-default_tax_rates).\n\nThis means that if you had previously been setting a `tax_percent` of `15%` on your invoices, Stripe has created a new `15%` tax rate object for you (although it lacks details such as a customer facing display name or a jurisdiction). If you continue to set the `tax_percent` to `15%`, Stripe dynamically creates a 15% tax rate for you to aid your migration. This works exactly as it had before.\n\nYou can manage your full list of tax rates in the Dashboard’s [tax rates](https://dashboard.stripe.com/tax-rates) page.\n\n### Migration options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor new invoices or subscriptions, we recommend performing the [full](#full) update to use tax rates.\n\n#### No action ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you take no action, your integration continues to work as it does today. As mentioned above, existing uses of `tax_percent` are made to look as if they used tax rates.\n\nAs your tax rates lack a [display\\_name](https://docs.stripe.com/api/tax_rates/object#tax_rate_object-display_name) and [jurisdiction](https://docs.stripe.com/api/tax_rates/object#tax_rate_object-jurisdiction), tax reporting might not be very useful. Invoices and receipts render a generic name for these rates—“Tax”.\n\n#### Minimal update with medium benefits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the Dashboard to edit pre-existing tax rates so taxes work for pre-existing invoices.\n\n1.  For tax rates that have been migrated for you, edit the [display\\_name](https://docs.stripe.com/api/tax_rates/object#tax_rate_object-display_name) to have a useful user-facing name. Display names are displayed to your customers on generated invoices and receipts (for example, “UST” for German VAT and “HST” for Ontario’s Harmonized Sales Tax).\n2.  Set the [jurisdiction](https://docs.stripe.com/api/tax_rates/object#tax_rate_object-jurisdiction) to store an associated tax jurisdiction (for example, “DE” for Germany or “NL Amsterdam” for the city of Amsterdam).\n\nInvoices and receipts show the `display_name` of tax rates. When determining how much tax to remit, you can group by jurisdiction.\n\n#### Full update and benefits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe no longer recommend using the `tax_percent` field for new invoices, and to use tax rates instead. Apply tax rates to [invoices](https://docs.stripe.com/invoicing/taxes/tax-rates) and [subscriptions](https://docs.stripe.com/billing/taxes). This allows you to add multiple tax rates per line item and invoice, display the correct name for tax rates and summaries on generated invoices and receipts, and improved tax reporting.\n\n### Customer Tax IDs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Customer’s `tax_info`, `tax_info_verification`, and `business_vat_id` fields are deprecated in favor of [Customer Tax IDs](https://docs.stripe.com/api/customers/object#customer_object-tax_ids). The [Tax ID](https://docs.stripe.com/api/customer_tax_ids) object provides:\n\n*   Multiple tax IDs on a Customer.\n*   Support for more tax ID types, such as EU VAT, NZ GST, and AU ABN.\n*   Automatic validation of EU VAT numbers against the [European Commission’s VAT Information Exchange System (VIES)](http://ec.europa.eu/taxation_customs/vies/) database.\n*   Automatic validation of Australian Business Numbers (ABNs) against the [Australian Business Register (ABR)](https://abr.gov.au/).\n*   Associate a country with a tax ID (for example, a German EU VAT number).\n\nSee [Customer Tax IDs](https://docs.stripe.com/billing/customer/tax-ids) for more information.",
  "title": "Tax rates | Stripe Documentation",
  "description": "Learn how to collect and report taxes with tax rate objects.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/file-tax-forms",
  "markdown": "# File your 1099 tax forms\n\n## Learn how to file 1099 forms with the appropriate revenue authorities, such as the IRS and state tax authorities.\n\nBefore you can file your 1099 tax forms, you must ensure they’re complete and accurate.\n\n#### Getting your 1099 Forms\n\nIf you work for or use a platform that pays you through Stripe and want to learn about your 1099 forms and how to retrieve them, see [1099 tax forms](https://support.stripe.com/express/topics/1099-tax-forms).\n\n## Obtain “Ready” status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe categorizes your tax forms as follows:\n\n*   [Will not file](https://docs.stripe.com/connect/get-started-tax-reporting#understand-tax-form-status)\n*   [Needs attention](https://docs.stripe.com/connect/get-started-tax-reporting#understand-tax-form-status)\n*   [Ready](https://docs.stripe.com/connect/get-started-tax-reporting#understand-tax-form-status)\n\nStripe automatically identifies forms if they exceed the IRS or state filing thresholds as `Ready` **or** `Needs attention`:\n\nYou must obtain a `Ready` status before you can file your tax forms.\n\nForms in `Needs attention` status might be missing the name, taxpayer identification number (TIN), or part of the address. You can provide missing information by [updating the connected account](https://dashboard.stripe.com/connect/accounts/overview) or [updating the tax form](https://docs.stripe.com/connect/modify-tax-forms).\n\nForms with federal filing status or state filing status of `Will not file` are below either the IRS or State thresholds. When a form doesn’t meet the threshold set at the federal or state level it’s not filed with that respective tax authority. You can file tax forms that are below the threshold or are incomplete by specifying [filing requirements](https://docs.stripe.com/connect/modify-tax-forms?method=csv#tax-form-status) in a CSV import. You can also use filing requirements to omit a tax form from filing.\n\n## “Ready” or “Needs Attention” forms that appear to be below threshold ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome forms with totals that might seem below the [federal threshold](https://docs.stripe.com/connect/tax-reporting#1099-nec) can also show up as `Ready` or `Needs Attention` for two reasons:\n\n*   Grouped TIN\n*   The state threshold is lower than the IRS threshold\n\n### Grouped TIN![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPer IRS regulations, when multiple forms share the same Tax Identification Number (TIN), Stripe calculates each form’s filing eligibility based on the aggregate total of all those forms. As a result, an individual form that appears to be below the IRS threshold can still require filing because the total amount of all forms sharing its TIN exceeds the threshold.\n\nWhen Stripe calculates the aggregate total of forms that share the same TIN, it includes a maximum of 100 forms. If you have more than 100 forms that share the same TIN, manually verify their filing eligibility.\n\nStripe files each form separately, regardless of whether it shares a TIN with other forms.\n\nIf an account is grouped, you will see this in the Dashboard:\n\n![Tooltip showing a message about aggregating forms that use the same TIN](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-tin-aggregation.071bd2d810202ff9fc51490a8e9cd95e.png)\n\nTo determine which forms share the same TIN, enter the ID of the form in the **Forms grouped with** filter and apply the filter.\n\n### The state threshold is lower than the IRS threshold![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAnother reason why a form might appear as `Ready` or `Needs attention` for the IRS is that the form needs to be filed to a state that is part of the Combined Federal and State Filing (CFSF) program. For CFSF states, forms filed to the IRS are automatically forwarded to the appropriate state, eliminating the need to file separately to the state. Check the [1099 form requirements by state](https://docs.stripe.com/connect/tax-forms-state-requirements#check-1099-form-requirements-by-state) section to determine which states are part of the CFSF program and have lower state filing thresholds than the IRS.\n\n## Confirm tax form settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConfirm the accuracy of your payer information and [tax form settings](https://docs.stripe.com/connect/tax-form-settings) before filing. You’ll reconfirm some tax form settings in the filing process, but you should also confirm the tax form settings before filing.\n\n## File your tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you’re ready to file, perform one final check of the forms that are in a `Ready` state. Clicking the **File** button automatically pulls forms in a `Ready` state (or `Ready!` If you applied filing requirements) into the filing process.\n\nIf needed, you can complete the filing process more than once and file forms in batches as they become `Ready`. The forms for the IRS and the States will be filed at the same time. Currently, there’s no option to file forms with the IRS and States separately.\n\n#### Caution\n\nFrom the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) view in the Dashboard, click the **File** button to begin the filing process.\n\nConfirm your payer information. To change any payer information, close the filing process and go to your tax form settings. If you file forms with incorrect payer information, the IRS requires you to mail a letter with the corrections.\n\n![Confirm payer information](https://b.stripecdn.com/docs-statics-srv/assets/file_confirm_payer_information_2022.19cfdfa5e374ca6b01578335169fd11a.png)\n\nNext, confirm the settings for specific tax form types. To change the settings, close the filing process and go to your tax form settings.\n\n![Confirm settings for tax form types](https://b.stripecdn.com/docs-statics-srv/assets/file_confirm_filing_details_2022.df239dbc219060ae9b125c98c8da27ce.png)\n\nFinally, accept a standard IRS penalty of perjury statement. Click the **File tax forms** button to queue your tax forms for automatic filing with the IRS.\n\nIf you aren’t filing any 1099 tax form corrections, you can disregard delivery preferences for form corrections. Choose either **Mail** or **None** and proceed with filing your forms. Tax forms will be delivered according to your [delivery settings](https://dashboard.stripe.com/settings/connect/tax_forms).\n\n![Accept an IRS penalty of perjury statement](https://b.stripecdn.com/docs-statics-srv/assets/review_and_file_corrections.ee91133e774d4310dcd1593071260f21.png)\n\nAccept an IRS penalty of perjury statement\n\nAfter you click **File tax forms**, a **Success** message displays.\n\n![Accept an IRS penalty of perjury statement](https://b.stripecdn.com/docs-statics-srv/assets/file_success_2022.ff8bfe09b578986397dcd9b3a6cbd690.png)\n\n## After filing your 1099 tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you submit your filing request, Stripe collects and transmits your forms to the IRS and applicable state reporting agencies, and delivers forms to your connected accounts based on your delivery settings.\n\nIf you’ve enabled e-delivery, Stripe immediately emails your connected accounts so they can access forms in the Stripe Express Dashboard. For postal delivery, USPS first class mail can take up to 10 business days.\n\nIf you need to file a form with both the IRS and the state, the form is sent only one time to the connected account user. For more information, see [Deliver tax forms](https://docs.stripe.com/connect/deliver-tax-forms).\n\n## Understand tax form status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo help you determine if you need to take action on any forms, the status of filed tax forms updates automatically.\n\n### Federal Filing Status:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe IRS typically gets back to us within 5 business days. At that point, you should expect to see the **Federal Filing Status** change from `Filed` to either `Accepted` or `Rejected`.\n\n### State filing Status:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStates have varied timelines for submission results. In most cases, state filings take about 7-14 days for **State filing status** to move from `Filed` to `Accepted` or `Rejected`.\n\n#### Note\n\nThe `Rejected` status implies that the form was either rejected by the State after submission, or that the State refused to accept the information during submission.\n\n### Delivery status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor electronic delivery, the delivery status changes to `Delivered` a few minutes after the email is delivered.\n\nFor postal mail, the delivery status changes to `Delivered` after Stripe’s postal delivery partner confirms that the mailing is delivered. That can take several days.\n\nA delivery status of `Failed` means that an issue prevented the mailing from being completed. This typically occurs when the mailing address on file contains errors.",
  "title": "File your 1099 tax forms | Stripe Documentation",
  "description": "Learn how to file 1099 forms with the appropriate revenue authorities, such as the IRS and state tax authorities.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/customer-locations",
  "markdown": "# Collect customer addresses | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about collecting customer address information to calculate tax.\n\nStripe Tax requires your customer’s location to automatically calculate tax. This requirement applies even if you don’t [register to collect taxes](https://docs.stripe.com/tax/registering). This guide helps you decide what address information to collect from your customer and how to handle regional differences.\n\n## Supported address formats ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach billing and shipping address has the fields `line1`, `line2`, `city`, `state`, `postal_code`, and `country`. The tables below describe the address formats supported when calculating tax.\n\n| Example addresses | Explanation | Supported |\n| --- | --- | --- |\n| *   `line1`: 27 Fredrick Ave<br>*   `city`: Brothers<br>*   `state`: OR<br>*   `postal_code`: 97712<br>*   `country`: US | **Full address**<br><br>A full address includes at least a line1 (street address), city, state, postal code, and country.<br><br>The address is matched to the closest address or street in the US Postal Service address database. If a match isn’t found, we use the geographical center (average location of addresses) of the 5-digit postal code as a fallback. |     |\n| 9-digit postal code:<br><br>*   `postal_code`: 97712-4918<br>*   `country`: US<br><br>5-digit postal code:<br><br>*   `postal_code`: 97712<br>*   `country`: US | **Country and postal code**<br><br>If you provide a 5-digit or 9-digit postal code, our system only uses the initial 5 digits for tax calculations. The tax is calculated at the geographical center, which reflects the average location of addresses within the 5-digit postal code area. Check that this is [suitable for your business](https://docs.stripe.com/tax/customer-locations#us-postal-codes). |     |\n| *   `state`: OR<br>*   `country`: US | **Country and state**<br><br>We can’t calculate tax for US customers with only an ISO [country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) and [state code](https://en.wikipedia.org/wiki/ISO_3166-2). |     |\n| *   `country`: US | **Country**<br><br>We can’t calculate tax for US customers with only an [ISO country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). |     |\n\nUse one of the above address formats to ensure that we can consistently recognize your customer addresses. The country field must always be a valid [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1).\n\n## Which customer address we use ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Tax uses a single address as your customer’s location when calculating tax. We choose the same address whether you’re selling a digital product, a service, or a shipped good.\n\nWe use the first viable item in the list below to determine your customer’s location:\n\n*   We use your customer’s [shipping address](https://docs.stripe.com/api/customers/object#customer_object-shipping) if it’s non-empty. Using an address that isn’t precise enough to calculate tax returns a status of `requires_location_inputs`.\n*   We use your customer’s [billing address](https://docs.stripe.com/api/customers/object#customer_object-address) if it’s non-empty. Using an address that isn’t precise enough to calculate tax returns a status of `requires_location_inputs`.\n*   If the transaction is tied to a payment method with full [billing details](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details) we use that billing address.\n*   If the billing details associated with the payment method are incomplete or missing, we assemble a billing address using the information provided, combined with details of the payment method itself (for example, using the country code of the credit card issuer to determine the country if the customer doesn’t provide it).\n*   Otherwise, we geolocate the Customer [IP address](https://docs.stripe.com/api/customers/object#customer_object-tax-ip_address) and use that location as your customer’s location. We store this geolocation result and reuse it for future transactions involving the same customer.\n\nThe payment method tied to the transaction is the first one that’s set in this list:\n\n*   The [Invoice](https://docs.stripe.com/api/invoices \"invoices\") [default payment method](https://docs.stripe.com/api/invoices/object#invoice_object-default_payment_method)\n*   The Subscription [default payment method](https://docs.stripe.com/api/subscriptions/object#subscription_object-default_payment_method)\n*   The Customer [default payment method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method)\n\n## Handling unrecognized locations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAn unrecognized location refers to a customer’s address that Stripe Tax can’t use for tax calculation purposes. This can occur because of missing or incomplete address details. See [supported address formats](#supported-formats) to make sure the address is complete.\n\nInvoice finalization fails and payment isn’t attempted for invoices with `automatic_tax[enabled]=true` if the customer location is unrecognized. When finalization happens during an API request, such as [creating a subscription](https://docs.stripe.com/api/subscriptions/create#create_subscription-automatic_tax-enabled) or [sending an invoice](https://docs.stripe.com/api/invoices/send), Stripe returns a [`customer_tax_location_invalid`](https://docs.stripe.com/error-codes#customer-tax-location-invalid) error. When finalization happens asynchronously, for example when a subscription renews, Stripe sends an [`invoice.finalization_failed`](https://docs.stripe.com/api/events/types#event_types-invoice.finalization_failed) webhook and the invoice remains in the draft state.\n\n### Finalizing invoices with finalization failures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHow you correct `customer_tax_location_invalid` errors depends on whether you collect a recognized customer location. If you do, keep Stripe Tax enabled. If you don’t, disable Stripe Tax for the affected invoices and subscriptions.\n\nTo collect a recognized customer location:\n\n1.  [Update the address](https://docs.stripe.com/api/customers/update#update_customer-address) of the affected customer. Provide enough location details for your customer. For example, a country and state code alone aren’t enough to calculate tax in the US.\n2.  Confirm that the customer location is recognized by ensuring the value of [`customer.tax.automatic_tax`](https://docs.stripe.com/api/customers/object#customer_object-tax-automatic_tax) is `supported` or `not_collecting`.\n3.  [Finalize](https://docs.stripe.com/api/invoices/finalize) the affected invoice.\n\nAlternatively, to progress without a recognized customer location:\n\n1.  [Update the affected invoice](https://docs.stripe.com/api/invoices/update#update_invoice-automatic_tax) so `automatic_tax[enabled]=false`.\n2.  [Update the affected subscription](https://docs.stripe.com/api/subscriptions/update#update_subscription-automatic_tax-enabled) so `automatic_tax[enabled]=false`.\n3.  [Finalize](https://docs.stripe.com/api/invoices/finalize) the affected invoice.\n\n### Detecting asynchronous invoice finalization failures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen an invoice can’t be finalized due to an unrecognized customer location, Stripe sends an `invoice.finalization_failed` webhook with `automatic_tax[status] = 'requires_location_inputs'`. When using subscriptions, we recommend listening for subscription and invoice related [events](https://docs.stripe.com/billing/subscriptions/webhooks) because most activity happens asynchronously.\n\n### Preventing invoice finalization failures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo prevent invoices failing finalization due to an unrecognized customer location:\n\n*   Before [updating an existing subscription](https://docs.stripe.com/api/subscriptions/update#update_subscription-automatic_tax-enabled) from `automatic_tax[enabled]=false` to `automatic_tax[enabled]=true`, verify that the [customer has a recognized location](https://docs.stripe.com/tax/subscriptions/update#customer-locations). If the customer’s location is unrecognized, update and verify it before enabling Stripe Tax on the subscription.\n*   After [updating a customer](https://docs.stripe.com/api/customers/update) that has a subscription with `automatic_tax[enabled]=true`, verify that the value of `customer.tax.automatic_tax` is `supported` or `not_collecting`.\n\n#### Note\n\nWe recommend collecting a full address from your customers for the most accurate tax calculation result, and to minimize how often you can’t collect tax.\n\n## Region-specific considerations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe complexity of taxes vary widely by region. Most countries have a single set of tax rules for the entire country. In the United States, sales tax rules and rates vary by state, with some states having hundreds of districts setting their own rates. In Canada, the type of tax and tax rate vary by province.\n\n### United States (US)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Resolving an address to tax jurisdictions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA tax jurisdiction is a specific area, governed by authorities (such as a city, county, or state) that can impose taxes. A single location, such as a residence or business, can be part of multiple tax jurisdictions.\n\nStripe Tax maintains boundaries for combinations of tax jurisdictions. Addresses provided in [supported formats](#supported-formats) are converted into geographical coordinates, consisting of latitude and longitude. We use these coordinates to determine the appropriate jurisdiction combination for an address to ensure accurate tax calculation.\n\n#### Postal codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Tax supports calculating sales tax with only a basic 5-digit US postal code. The country field must be the [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) “US”. We use the point at the geographical center of the postal code area, which represents the average location of addresses within the postal code area, as your customer’s location. The tax rate at this point might differ from the tax rate at your customer’s full address. Whether a postal code alone is sufficient to identify the correct tax rates to impose varies by state.\n\nWe recommend against relying on a postal code alone in the following states: Arizona, Colorado, Oklahoma, Alabama, Missouri, Texas, Illinois, Washington, Kansas, New Mexico, Louisiana, Arkansas, California, Alaska, South Dakota, North Dakota, Utah, Nebraska, and West Virginia.\n\n#### Note\n\nWe recommend collecting a full address in states where you’re registered to collect local sales taxes.\n\n#### IP addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause the location of an IP address could be some distance from the actual location of your customer, don’t use an IP address alone for determining how much tax to collect. Instead, use the [upcoming invoice](https://docs.stripe.com/api/invoices/upcoming#upcoming_invoice-customer_details-tax-ip_address) endpoint to show them an estimate of the tax they’ll pay before collecting a billing or shipping address.\n\n### Europe and the European Union (EU)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Excluded territories ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn Europe, tax authorities in each country impose tax, not state or local authorities. The tax rate for the country doesn’t apply in a small number of areas, even though they’re physically located in a country that imposes tax. For example, the Italian postal code “00120” identifies Vatican City, where Italian VAT doesn’t apply.\n\nCollect your customer’s postal code or state to enable Stripe Tax to determine when your customer is located in an excluded territory.\n\nSee the [list of excluded territories](https://docs.stripe.com/tax/zero-tax#excluded-territories) supported by Stripe Tax.\n\n### Canada![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn order for Stripe Tax to determine the applicable tax rate and collect tax in Canada, you need to collect the customer’s province or postal code.",
  "title": "Collect customer addresses | Stripe Documentation",
  "description": "Learn about collecting customer address information to calculate tax.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/quotes",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Quotes\n\n## Provide pricing estimates to customers before starting a subscription or invoice.\n\nYou can use quotes to combine recurring and one-off line items so you can provide your customers with a price estimate, including any discounts or taxes. ​​You can convert the quote into a recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") or a one-time [invoice](https://docs.stripe.com/api/invoices \"invoices\") after the customer accepts the quote.\n\n![Quote PDF](https://b.stripecdn.com/docs-statics-srv/assets/quote-pdf.fbd3abb09a59b6be9f1c692ab402691c.png)\n\nThe generated quote PDF\n\n## How it works ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith quotes, you can provide estimates and initiate invoices or subscriptions without adding additional custom logic in your integration. See the [integration guide](https://docs.stripe.com/quotes/overview) or view the [API reference](https://docs.stripe.com/api/quotes) for more details.",
  "title": "Quotes | Stripe Documentation",
  "description": "Provide pricing estimates to customers before starting a subscription or invoice.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/faq",
  "markdown": "# Stripe Tax FAQ | Stripe DocumentationThe Stripe Docs logo\n\n### Where does Stripe Tax support full “rooftop-accurate” address lookup?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax supports full rooftop-accurate address lookup for US customer addresses.\n\nRooftop-accurate address lookup means that you can attribute your customer’s location to a specific house or building. This provides greater accuracy in the US, where two houses located side-by-side on the same street might be subject to different tax rates, due to complex jurisdiction boundaries.\n\nOutside the US, we use the country, state, and postal code fields as necessary but we don’t compare the addresses against an address database. See [“Special jurisdictions and excluded territories”](https://docs.stripe.com/tax/customer-locations#europe-excluded-territories) for more about when the state and postal code are used.\n\n### Do you support PO Box addresses?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYes, Stripe Tax supports PO Box addresses in the US. If we can’t find the address for a PO Box or other address in the address database, we approximate the location using the rest of the address details, such as the postal code (for example, ZIP5).\n\n### How do I know which address was used as my Customer’s tax location?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you enable automatic tax calculation on an [invoice](https://docs.stripe.com/api/invoices \"invoices\") or Checkout session, the Dashboard shows an **Automatic tax** section. This section shows where your customer was located for tax purposes and which address we used as the source of this location. This is also returned in the [Customer API](https://docs.stripe.com/api/customers/object#customer_object-tax-location-source) if you expand the [tax](https://docs.stripe.com/api/customers/object#customer_object-tax) field.\n\n### How do I check how precisely my customer’s location was determined?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you enable automatic tax calculation on an invoice or Checkout session, the Dashboard shows an **Automatic tax** section. This section shows how precisely we determined your customer’s location. [Customer API](https://docs.stripe.com/api/customers/object#customer_object-tax) also provides relevant location resolution information if you expand the [tax](https://docs.stripe.com/api/customers/object#customer_object-tax) field.\n\nThe table below lists the supported precisions and whether tax can be calculated:\n\n| Precision | Tax calculated | Description |\n| --- | --- | --- |\n| Address | Everywhere | The address placed the customer at a known physical address. |\n| Street | Everywhere | The address placed the customer on a known street but didn’t identify a specific physical address. |\n| Postal code | Everywhere | The address placed the customer within a postal code area (for example, a ZIP5 or ZIP+4), but didn’t identify a particular street or address. |\n| City | Outside the US | The address placed the customer within a particular city, but didn’t identify a postal code area (for example, a ZIP5) or street. |\n| State | Outside the US | The address had a valid ISO 3166-1 country code and ISO 3166-2 state code. |\n| Country | Outside the US | The address had a valid ISO 3166-1 country code. |\n\n### How reliable and accurate is using an IP address to determine my customer’s location?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn most cases, we can resolve an IP address to a physical area, but its precision varies and might not reflect the customer’s actual location. For a given transaction, if we can’t resolve the address to within a postal code, the transaction fails.\n\nIn regions that impose local taxes, such as the US, we don’t recommend relying on a customer’s IP address to determine their address. In regions that don’t impose local taxes, such as the EU, an IP address is more likely to resolve to an accurate address.\n\n### How does Stripe Tax calculate tax for US Military and Diplomatic Overseas addresses?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax calculates no tax for US military and diplomatic mail going overseas. Overseas military and diplomatic addresses are assigned an APO, FPO, or DPO zip code, and the USPS treats it as domestic mail before transferring it to the military. Because sales to these special zip codes are sent out of the country, their sales taxes don’t apply.\n\n### When are tax calculations recorded in the Stripe Tax exports?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax calculates taxes and maintains a record of the total tax collected. You can access the record of total tax collected through [Stripe Tax exports](https://docs.stripe.com/tax/reports).\n\nStripe Tax exports include transactions committed with the [Stripe Tax API](https://docs.stripe.com/tax/custom) and operations on Stripe objects with `automatic_tax[enabled]=true`.\n\n#### Note\n\nThe recorded transactions are considered effective on the date that they finalize and tax amounts aren’t recalculated.\n\nStripe Tax exports record the following operations, which _increase_ the balance of total tax collected:\n\n*   Customer completes a payment in a Checkout Session. This also applies to Checkout Sessions created through [Payment Links](https://docs.stripe.com/api/payment_links/payment_links).\n*   Finalizing an Invoice. This applies to one-off Invoices and Subscription renewal Invoices. [Invoice finalization](https://docs.stripe.com/invoicing/integration/workflow-transitions) happens when the Invoice’s state transitions from `draft` to `open` state. This transition happens _before_ the Invoice is paid.\n*   Transitioning an Invoice’s state from `uncollectible` to `paid` through the [Pay Invoices API](https://docs.stripe.com/api/invoices/pay).\n*   [Voiding](https://docs.stripe.com/api/credit_notes/void) a Credit Note.\n*   [Creating](https://docs.stripe.com/api/tax/transactions/create_from_calculation) a tax transaction with the Stripe Tax API.\n\nStripe Tax exports record the following operations, which _decrease_ the balance of total tax collected:\n\n*   [Voiding](https://docs.stripe.com/api/invoices/void) an Invoice.\n*   Marking an Invoice as [uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible).\n*   [Creating](https://docs.stripe.com/api/credit_notes/create) a Credit Note.\n*   A [Refund](https://docs.stripe.com/api/refunds) of a Charge associated with an Invoice or a Checkout Session.\n*   Creating a [reversal](https://docs.stripe.com/api/tax/transactions/create_reversal) (refund) tax transaction with the Stripe Tax API.\n\nStripe Tax doesn’t record the following operation in Tax exports:\n\n*   [Disputes](https://docs.stripe.com/disputes) that are upheld by the cardholder’s bank. Stripe Tax doesn’t decrease the balance of the collected total tax.\n*   Refunds of [uncaptured amounts](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-amount_to_capture) of a payment. This can happen when performing a [partial capture](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-amount_to_capture) for payments of Checkout sessions using [`capture_method=manual`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-capture_method). When the capture amount is lower than the original amount, Stripe Tax doesn’t reduce the total balance of the collected tax.\n\n### If I create a draft invoice today, but it’s set to finalize in the future, and the tax rates change in between, which tax rate is used?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the tax at the published rate on the date that an invoice is finalized. For example, if an invoice draft is initialized on December 20th and set to finalize on January 15th but a new tax rate is introduced on January 1st, the tax on the invoice will be calculated at the new rate.\n\n*   December 1st: Tax Rate: 6%\n*   December 20th: Invoice draft initialized set to finalize January 15th\n*   January 1st: Tax Rate 5%\n*   January 15th: Invoice finalized with a tax rate of 5%\n\n### How do chargebacks work?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA chargeback **doesn’t** reduce the balance of total tax collected.\n\nStripe Tax calculates taxes and maintains a record of the total tax collected. You can access the record of total tax collected through [Stripe Tax exports](https://docs.stripe.com/tax/reports).\n\nFor example, for a transaction with an amount of 100 USD and exclusive tax of 10 USD, the total tax collected is 10 USD. In the event of a chargeback, we won’t reduce Stripe Tax reporting total tax collected from 10 USD to 0 USD.\n\n### How do you handle credit notes? ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA credit note **reduces** the balance of total tax collected.\n\nStripe Tax calculates taxes and maintains a record of the total tax collected. You can access the record of total tax collected through [Stripe Tax exports](https://docs.stripe.com/tax/reports).\n\nFor example, for an invoice with an amount of 100 USD and exclusive tax of 10 USD, the total tax collected is 10 USD. Issuing a credit note that fully refunds the invoice shows as a negative amount in your Stripe Tax reporting, reducing your liability from 10 USD to 0 USD.\n\n### How is tax liability calculated when using credit notes?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApplying credit notes reduces the tax liability of a transaction proportionately across all the items in a basket.\n\nFor example, applying a credit note of 33 USD to an order of 2 items costing 66 USD and 33 USD with a 10% tax rate (total 108.90 USD) reduces tax liability by 2.20 USD and 1.10 USD respectively.\n\n### How is tax liability determined in the case of partial refunds?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf an order’s total amount is > 0 after a refund, then the remaining amount will keep at least 0.01 USD in tax liability. This is because it uses a cumulative remainder approach to deal with rounding.\n\n### How do you handle discounts?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe apply discounts before tax.\n\nFor example, for an exclusive price of 100 USD, a tax rate of 10%, and a discount of 10 USD, the resulting values are:\n\n*   Amount: 100 USD\n*   Discount: 10 USD\n*   Post discount amount: 90 USD\n*   Tax: 9 USD\n*   Total: 99 USD (90 USD + 9 USD)\n\nFor example, for a inclusive price of 100 USD, a tax rate of 10%, and a discount of 10 USD the resulting values are:\n\n*   Amount: 100 USD\n*   Discount: 10 USD\n*   Post discount amount: 90 USD\n*   Tax: 8.18 USD\n*   Total: 90 USD\n\n### Do you mandate two pieces of non conflicting evidence for B2C transactions in Europe?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNo, we don’t mandate two pieces of non conflicting evidence for business to consumer transactions in the EU. However, we do store and retain the evidence used on the [Customer](https://docs.stripe.com/api/customers \"Customers\") object that you can review before requesting additional information from a customer after the transaction.\n\n### Are Apple Pay and Google Pay available to use with Stripe Tax?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax supports Apple Pay and Google Pay if your customer enters their shipping or billing address during the payment process.\n\nIf you enable Apple Pay or Google Pay on your account and enable Stripe Tax on your integration, Stripe:\n\n*   Automatically calculates the tax of the customer’s subtotal before they submit payment.\n*   Enables Apple Pay as a payment option if the user’s browser supports Apple Pay version 12 and above.\n*   Enables Google Pay as a payment option to customers only when the user collects the customer’s shipping address information.\n\n### Where does Stripe get its tax rates from?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe have a team of tax researchers focused on monitoring tax laws and tax authority publications for changes. We make the updates directly to Stripe Tax when the change is effective.\n\n### In which currency are tax calculations recorded?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTax calculation amounts are recorded in the [presentment currency](https://docs.stripe.com/currencies#presentment-currencies \"presentment currency\"), which can differ from both the settlement currency and the tax authority’s local filing currency.\n\nYou have the option to view amounts in both the presentment and filing currencies through [Stripe Tax exports](https://docs.stripe.com/tax/reports).\n\n### When do conversions to other currencies occur?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe converts tax amounts from the presentment currency to the tax authority’s local filing currency when we record the tax calculations.",
  "title": "Stripe Tax FAQ | Stripe Documentation",
  "description": "Read the frequently asked questions about Stripe Tax.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/supported-countries",
  "markdown": "# Countries supported by Stripe Tax\n\n## See a list of countries and jurisdictions where you can use Stripe Tax.\n\nStripe can calculate tax on sales in the locations listed in the table below. Select a location to learn more about:\n\n*   When to register for tax collection on your sales\n*   How to register to collect tax and links to the relevant tax authority\n*   How Stripe calculates tax\n*   How to report and file your taxes\n\nYou can also learn about tax calculation and collection in each region:\n\n*   [Asia Pacific](https://docs.stripe.com/tax/supported-countries/asia-pacific)\n*   [Canada](https://docs.stripe.com/tax/supported-countries/canada)\n*   [European Union](https://docs.stripe.com/tax/supported-countries/european-union)\n*   [Europe, Middle East and Africa](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa)\n*   [Latin America](https://docs.stripe.com/tax/supported-countries/latin-america)\n*   [United States](https://docs.stripe.com/tax/supported-countries/united-states)\n\n## Supported countries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe supports tax calculation on different types of goods and service, and different types of sales depending on the location. Your business must be based in one of the locations labeled `all sales` in order to use Stripe Tax.\n\nThe table below lists each location’s support. Select the country name to learn more about collecting tax in that country.\n\nThe table references the following terms:\n\n*   **All PTCs**: You can use any supported [product tax codes (PTCs)](https://docs.stripe.com/tax/tax-codes) in this location.\n*   **Digital products**: We only support [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in this location and don’t calculate tax for any product not using a digital product tax code.\n*   **Remote sales**: We support sales into locations where you don’t have a physical presence (like a store or warehouse).\n*   **All sales**: We support tax codes for domestic and cross-border sales in this location.\n\n#### Note",
  "title": "Countries supported by Stripe Tax | Stripe Documentation",
  "description": "See a list of countries and jurisdictions where you can use Stripe Tax.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/customize",
  "markdown": "# Customize invoices | Stripe DocumentationThe Stripe Docs logo\n\n## Customize the content and branding of your invoices.\n\nYou can use [Invoice settings](https://dashboard.stripe.com/settings/billing/invoice) or the [API](https://docs.stripe.com/api/customers/create#create_customer-invoice_settings-custom_fields) to customize ​​the content of an [invoice](https://docs.stripe.com/api/invoices \"invoices\"). You can also set a customer preferred language and include public information in your [account details](https://dashboard.stripe.com/settings/account/?support_details=true). Because you know more about your customers and your business than Stripe does, make sure your invoices include all of the required information. Your invoices must be accurate, charge the appropriate tax, and comply with all applicable laws and regulations in your region.\n\n![Invoice settings](https://b.stripecdn.com/docs-statics-srv/assets/invoice-settings-screenshot.6174ac7fd03e2bbe688cddf0a22d6ee2.png)\n\nInvoice settings\n\n[\n\n## Branding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#brand-customization)\n\nStripe allows you to customize (as well as preview) email receipts, hosted invoices, invoice PDFs, and so on, in your [Branding settings](https://dashboard.stripe.com/account/branding).\n\nIcons and logos must be in JPG or PNG format, less than 512kb in size, and equal to or greater than 128px by 128px.\n\n*   **Icon**—A square, digital-friendly icon or logo.\n*   **Logo**—A non-square logo to override some uses of the icon.\n*   **Brand color**—Used on receipts, invoices, and the customer portal.\n*   **Accent color**—Used as a background on emails and pages.\n\n### Apply brand settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBrand settings apply to your whole account and take effect in many places.\n\n| Setting | Emails | Checkout & Payment Links | Customer portal | Hosted Invoice Page | Invoice PDFs |\n| --- | --- | --- | --- | --- | --- |\n| **Icon** | Yes | Yes | Yes | Yes | Yes |\n| **Logo** | No  | Yes | No  | No  | Yes |\n| **Brand color** | Yes | No  | Yes | Yes | Yes |\n| **Accent color** | Yes (background color) | Yes | Yes | Yes | No  |\n\n[](#invoice-numbering-schemes)\n\nStripe automatically generates invoice numbers to help track and reconcile invoices. Invoice numbers have a prefix and suffix, such as `586A2E-0139` or `MYSHOP-1203`. (​​The full invoice number is always unique across your account in both schemes.) ​​Stripe supports two invoice numbering schemes:\n\n*   ​​**Sequentially for each customer (customer-level)**—Uses a unique prefix for each customer and assigns invoice numbers sequentially for a given customer.\n*   ​​**Sequentially across your account (account-level)**—Uses the same prefix for every customer and assigns invoice numbers sequentially across your entire account.\n\nStripe chooses a default behavior based on the country your Stripe account is based in. [European Union](https://ec.europa.eu/taxation_customs/business/vat/eu-vat-rules-topic/vat-invoicing-rules_en) member countries and the [United Kingdom](https://www.gov.uk/invoicing-and-taking-payment-from-customers/invoices-what-they-must-include) typically require account level sequencing. All other countries default to customer level sequencing because it doesn’t expose the total number of invoices. When switching between schemes or updating prefixes, only future invoices use the new settings. This doesn’t impact existing invoices.\n\n#### Caution\n\nInvoice requirements vary by jurisdiction. Consult with a professional for guidance on your specific use case. You’re responsible for verifying that the invoices you issue meet local tax requirements.\n\n### Customer level prefixes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you configure an invoice to use customer-level numbering, each invoice number begins with the customer’s unique invoice prefix.\n\nFor example, if one of your customers is a business named Typographic, you might set the prefix to `TYPGRA`. The first invoice number for Typographic would be `TYPGRA-0001`, the second would be `TYPGRA-0002` and so on.\n\n​​You can override prefixes so that you can trace invoices back to your customers. You can set prefixes on the [Customers page](https://dashboard.stripe.com/customers) in the Dashboard or with the API by using the [invoice\\_prefix](https://docs.stripe.com/api/customers/create#create_customer-invoice_prefix) parameter. Prefixes have to be between 3 and 12 characters and they can’t match any other customer prefix, including prefixes that are no longer in use.\n\n### Account level prefixes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you configure an invoice to use account-level numbering, each invoice number starts with a common prefix and has a sequential number.\n\nFor example, if your business is named Rocket Rides, you might set the prefix to `RKTRIDE`. Your first invoice would be `RKTRIDE-0001`, a second invoice to a different customer would be `RKTRIDE-0002`, another invoice to the first customer would be `RKTRIDE-0003`, and so on.\n\nStripe automatically assigns the account-wide prefix, but you can override it to make it clearer that these invoices come from you. If you want to modify the prefix for your account, you can change it in [Invoice settings](https://dashboard.stripe.com/settings/billing/invoice). This requires that your account’s default API version is at least [2020-03-02](https://docs.stripe.com/upgrades#2020-03-02). Prefixes have to be between 3 and 12 characters and they can’t match any customer prefix, including prefixes that are no longer in use.\n\n#### Caution\n\n​​You can’t use a customer prefix as an account prefix. This includes prefixes that are no longer in use.\n\n### Connect account prefixes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor connected accounts that aren’t currently managed with the `on_behalf_of` parameter, sequential invoice numbering—at the customer and merchant level—will begin at `0001` if the parameter is used in the future.\n\n### Set the next invoice number ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, invoice numbers start at `0001`. If you’d like to use a different starting invoice number, however, you can change it. For example, some users—when migrating existing customers to Stripe Invoicing—want their invoice numbers to continue where their old system left off. If the user left off at invoice number `123` in their old system, Stripe allows them to resume the invoice number at `124`.\n\n​​Set the number on the **Customer details** page or with the API by using the [next\\_invoice\\_sequence](https://docs.stripe.com/api/customers/create#create_customer-next_invoice_sequence) parameter. If you’re using account-level prefixes, set the next invoice number in the **Next invoice sequence** field in [Invoice settings](https://dashboard.stripe.com/settings/billing/invoice).\n\nYou can only set the next invoice number to numbers greater than any numbers used on an invoice. The maximum allowed invoice number is 1,000,000,000 regardless of how you set it. Use the lowest value possible so that you don’t reach this limit.\n\n[](#invoice-fields)\n\nLearn more about the different Invoice fields, including memo, footer, and custom fields.\n\n### Default memo ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA memo is included in invoice PDFs, invoice emails, and the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page). Memos are commonly used as a notes section, thanking the invoiced customer for their business, or giving more context around the invoice (such as a note from the salesperson who talked to the customer).\n\nYou can set a default memo field for your account in [Invoice settings](https://dashboard.stripe.com/settings/billing/invoice). ​​Any new invoices use this value. You can adjust the default memo on a per-invoice basis in the Dashboard or by using the [API](https://docs.stripe.com/api/invoices/update#update_invoice-description).\n\n​​Invoice PDFs can include an optional footer text block. The footer field is often used for contractual or legally required text. A common use case is displaying legally required company registration information, such as a UK Companies House registration number.\n\nLike the memo field, you can set the default value for the footer in [Invoice settings](https://dashboard.stripe.com/settings/billing/invoice). ​​Any new invoices use this value. You can adjust the footer on a per-invoice basis through the Dashboard or [API](https://docs.stripe.com/api/invoices/update#update_invoice-footer). If the invoice has been [finalized](https://docs.stripe.com/invoicing/integration/workflow-transitions#finalized), you can’t update the footer field.\n\n### Default item prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can issue invoices with line item prices that exclude inclusive tax. Tax-exclusive prices are only shown in the invoice PDF. That means, when using inclusive tax, the Hosted Invoice Page and invoice emails show tax-inclusive prices. You can define the settings for net prices in the Dashboard or API.\n\n*   **Include inclusive tax**—The invoice PDF displays line item prices including the inclusive tax. (This is the default.)\n*   **Exclude tax**—The invoice PDF displays line item prices excluding tax.\n\n#### Order precedence\n\nIf you set a default for line item prices at the customer level, it takes precedence over account-level settings.\n\n### Custom fields ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAdd custom fields to enhance your invoice PDF documents and help you comply with your business practice and tax reporting obligations. Custom fields allow you to provide up to four key-value pairs ​​that display in the invoice header. You can set up to four custom field key-value pairs in the [Invoice Editor](https://dashboard.stripe.com/invoices/create) or with the [Invoices API](https://docs.stripe.com/api/invoices/create#create_invoice-custom_fields).\n\nSome common uses for custom fields are:\n\n*   Purchase Order (PO) numbers\n*   Contractor numbers\n*   Tax compliance\n\n#### Custom field inheritance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can set custom invoice fields on the [Customer](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-custom_fields) object. Any custom fields you set at the customer level apply to all of the draft invoices you generate for that customer. You can always modify these inherited custom fields while the invoice is still a draft. After the invoice finalizes, you can’t update the custom fields.\n\n[](#pdf-page-size)\n\nYou can set the page size for your invoice PDF, including finalized invoices, to A4 (8.27 x 11.69 inches) or Letter (8.5 x 11 inches).\n\nTo set the page size using the Dashboard, go to the [Invoice Editor](https://dashboard.stripe.com/invoices/create), and find the **Advanced options** section. Then, in the **PDF page size** sub-section, select **A4** or **Letter**.\n\n![Advanced options on the Invoice Editor](https://b.stripecdn.com/docs-statics-srv/assets/invoice-page-size.3a72380d4dc6061ea9b86ef8e59a97d6.png)\n\n**Advanced options** on the Invoice Editor\n\n[](#group-line-items)\n\nTo help your customers better understand your invoices (including PDFs, Hosted Invoice Page, and invoice emails), categorize, and display invoice line items under different groups. You can also hide groups of line items. If some line items are excessively detailed, you can configure it so that only their group-level subtotal is visible to your customers.\n\n[](#default-payment-terms)\n\nUnder **Default payment terms** in [Invoice settings](https://dashboard.stripe.com/settings/billing/invoice), you can select when the payment is due after you send the invoice. You can also choose whether to include a Stripe-hosted link to an invoice payment page in the invoice email. Customers can visit this link to pay, download, and see the status of their invoice. Lastly, you can manage your accepted payment methods in this section.\n\n[](#customer-language)\n\nWhen you create a customer, use the **Language** dropdown to add their preferred language. (You can also add or edit a customer’s preferred language in the **Customer details** page or when creating an invoice.) Stripe uses the chosen language to localize invoice emails and PDFs, receipt emails and PDFs, as well as credit note PDFs. To update the language through the API, use the [preferred\\_locales](https://docs.stripe.com/api/customers/object#customer_object-preferred_locales) field.\n\nStripe Invoicing supports the following languages:\n\n*   Bulgarian\n*   Chinese (Hong Kong)\n*   Chinese (Simplified)\n*   Chinese (Taiwan)\n*   Croatian\n*   Czech\n*   Danish\n*   Dutch\n*   English (United Kingdom)\n*   English (United States)\n*   Estonian\n*   Filipino\n*   Finnish\n*   French (Canada)\n*   French (France)\n*   German\n*   Greek\n*   Hungarian\n*   Indonesian\n*   Italian\n*   Japanese\n*   Korean\n*   Latvian\n*   Lithuanian\n*   Malay (Malaysia)\n*   Maltese\n*   Norwegian\n*   Polish\n*   Portuguese (Brazil)\n*   Portuguese (Portugal)\n*   Romanian\n*   Russian\n*   Slovak\n*   Slovenian\n*   Spanish (Latin America)\n*   Spanish (Spain)\n*   Swedish\n*   Thai\n*   Turkish\n*   Vietnamese\n\n[](#billing-shipping-addresses)\n\nStripe uses a customer’s [address](https://docs.stripe.com/api/customers/object#customer_object-address) as the billing address on the invoice PDF. You can add or edit a customer’s address on the **Customer details** page. If you don’t set the `address` field, Stripe renders the shipping address as the billing address on the PDF.\n\nTo render shipping details on the Invoice PDF, set the [shipping\\_details](https://docs.stripe.com/api/invoices/create#create_invoice-shipping_details) field. If you don’t set the `shipping_details` field, Stripe renders the shipping address from the customer’s [shipping](https://docs.stripe.com/api/customers/object#customer_object-shipping) field on the PDF.\n\n[](#public-support-info)\n\nInvoices include any public information that you specified under [Public business information](https://dashboard.stripe.com/settings/public), such as your support email address or business website. Using these settings, you can also choose to include a support phone number in customer-facing documents—like invoice PDFs and emails—or default to your business address.",
  "title": "Customize invoices | Stripe Documentation",
  "description": "Customize the content and branding of your invoices.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/tax/tax-codes",
  "markdown": "# Product tax codes | Stripe DocumentationThe Stripe Docs logo\n\n`txcd_99999999`General - Tangible GoodsA physical good that can be moved or touched. Also known as tangible personal property.Physical goods`txcd_20030000`General - ServicesGeneral category for services. It should be used only when there is no more specific services category. In the European Union, the default rule for business-to-consumer sales (B2C) is the location of the seller, whereas for business-to-business sales (B2B) - the location of the buyer.Services`txcd_10000000`General - Electronically Supplied ServicesA digital service provided mainly through the internet with minimal human involvement, relying on information technology. Consider more specific categories like software, digital goods, cloud services, or website services for your product (especially if you sell in the US). If you stay with this category, taxes will be similar to those for a generic digital item like downloaded music.Digital products`txcd_00000000`NontaxableAny nontaxable good or service which can be used to ensure no tax is applied, even for jurisdictions that impose a tax.Physical goods`txcd_10010001`Infrastructure as a service (IaaS) - personal useCloud service offering infrastructure resources (specifically server storage, RAM, and CPU usage) over the internet. This offering is intended for personal use, rather than for use by a commercial enterprise. Note: The distinction between business use and personal use for this product tax category is relevant only if you have sales in the US.Digital products`txcd_10101000`Infrastructure as a service (IaaS) - business useCloud service offering infrastructure resources (specifically server storage, RAM, and CPU usage) over the internet. This offering is intended for use by a commercial enterprise. Note: The distinction between business use and personal use for this product tax category is relevant only if you have sales in the US.Digital products`txcd_10102000`Platform as a service (PaaS) - business useCloud service providing a platform for users to develop, run, and manage applications. This offering is intended for use by a commercial enterprise. Note: The distinction between business use and personal use for this product tax category is relevant only if you have sales in the US.Digital products`txcd_10102001`Platform as a Service (PaaS) - personal useCloud service providing a platform for users to develop, run, and manage applications. This offering is intended for personal use, rather than for use by a commercial enterprise. Note: The distinction between business use and personal use for this product tax category is relevant only if you have sales in the US.Digital products`txcd_10103000`Software as a service (SaaS) - personal useCloud services software delivered over the internet. The software isn't customized for a specific buyer and they don't download anything. The software is intended for personal use, rather than for use by a commercial enterprise. Note: The distinction between business use and personal use for this product tax category is relevant only if you have sales in the US.Digital products`txcd_10103001`Software as a service (SaaS) - business useCloud services software delivered over the internet. The software isn't customized for a specific buyer and they don't download anything. The software is intended for use by a commercial enterprise. Note: The distinction between business use and personal use for this product tax category is relevant only if you have sales in the US.Digital products`txcd_10103100`Software as a service (SaaS) - electronic download - personal useCloud services software delivered over the internet. The software isn't customized for a specific buyer and this model assumes an electronic transfer to the buyer, such as an app download. The software is intended for personal use, rather than for use by a commercial enterprise. Note: The distinction between business use and personal use for this product tax category is relevant only if you have sales in the US.Digital products`txcd_10103101`Software as a service (SaaS) - electronic download - business useCloud services software delivered over the internet. The software isn't customized for a specific buyer and this model assumes an electronic transfer to the buyer, such as an app download. The software is intended for use by a commercial enterprise. Note: The distinction between business use and personal use for this product tax category is relevant only if you have sales in the US.Digital products`txcd_10104001`Cloud-based business process as a serviceCloud service providing business process outsourcing services over the internet.Digital products`txcd_10201000`Video Games - downloaded - non subscription - with permanent rightsVideo or electronic games in the common sense that are transferred electronically. These goods are downloaded to a device with permanent access granted. This does not include games that are considered betting, gambling, lottery, etc.Digital products`txcd_10201001`Video Games - downloaded - non subscription - with limited rightsVideo or electronic games in the common sense that are transferred electronically. These goods are downloaded to a device with access that expires after a stated period of time. This does not include games that are considered betting, gambling, lottery, etc.Digital products`txcd_10201002`Video Games - downloaded - subscription - with conditional rightsVideo or electronic games in the common sense that are transferred electronically. These goods are downloaded to a device with access that is conditioned upon continued subscription payment. This does not include games that are considered betting, gambling, lottery, etc.Digital products`txcd_10201003`Video Games - streamed - non subscription - with limited rightsVideo or electronic games in the common sense that are transferred electronically. These goods are streamed to a device with access that expires after a stated period of time. This does not include games that are considered betting, gambling, lottery, etc.Digital products`txcd_10201004`Video Games - streamed - subscription - with conditional rightsVideo or electronic games in the common sense that are transferred electronically. These goods are streamed to a device with access that is conditioned upon continued subscription payment. This does not include games that are considered betting, gambling, lottery, etc.Digital products`txcd_10202000`Downloadable Software - personal usePrewritten (\"canned\") software that the buyer downloads. The software is intended for personal use, rather than for use by a commercial enterprise. Note: The distinction between business use and personal use for this product tax category is relevant only if you have sales in the US.Digital products`txcd_10202001`Downloadable Software - non-recreational - personal usePrewritten (\"canned\") software that the buyer downloads used for non-recreational purposes, such as antivirus, database, educational, financial, word processing, etc. The software is intended for personal use, rather than for consumption in a commercial enterprise. Note: The distinction between business use and personal use for this tax code is relevant only if you are transacting business in the US.Digital products`txcd_10202003`Downloadable Software - business usePrewritten (\"canned\") software that the buyer downloads. The software is intended for use by a commercial enterprise. Note: The distinction between business use and personal use for this product tax category is relevant only if you have sales in the US.Digital products`txcd_10203000`Downloadable Software - custom - personal useCustom software that the buyer downloads. The software is intended for personal use, rather than for use by a commercial enterprise. Note: The distinction between business use and personal use for this product tax category is relevant only if you have sales in the US.Digital products`txcd_10203001`Downloadable Software - custom - business useCustom software that the buyer downloads. The software is intended for use by a commercial enterprise. Note: The distinction between business use and personal use for this product tax category is relevant only if you have sales in the US.Digital products`txcd_10301000`AudiobookThe recording of a book read aloud and sold with unlimited usage (e.g., a downloaded audio copy of The High Growth Handbook).Digital products`txcd_10302000`Digital Books - downloaded - non subscription - with permanent rightsWorks that are generally recognized in the ordinary and usual sense as books and are transferred electronically. These goods are downloaded to a device with permanent access granted. These goods include novels, autobiographies, encyclopedias, dictionaries, repair manuals, phone directories, business directories, zip code directories, cookbooks, etc.Digital products`txcd_10302001`Digital Books - downloaded - non subscription - with limited rightsWorks that are generally recognized in the ordinary and usual sense as books and are transferred electronically. These goods are downloaded to a device with access that expires after a stated period of time. These goods include novels, autobiographies, encyclopedias, dictionaries, repair manuals, phone directories, business directories, zip code directories, cookbooks, etc.Digital products`txcd_10302002`Digital Books - downloaded - subscription - with conditional rightsWorks that are generally recognized in the ordinary and usual sense as books and are transferred electronically. These goods are downloaded to a device with access that is conditioned upon continued subscription payment. These goods include novels, autobiographies, encyclopedias, dictionaries, repair manuals, phone directories, business directories, zip code directories, cookbooks, etc.Digital products`txcd_10302003`Digital Books - viewable only - subscription - with conditional rightsWorks that are generally recognized in the ordinary and usual sense as books and are transferred electronically. These goods are viewable (but not downloadable) on a device with access that is conditioned upon continued subscription payment. These goods include novels, autobiographies, encyclopedias, dictionaries, repair manuals, phone directories, business directories, zip code directories, cookbooks, etc.Digital products`txcd_10303000`Digital Magazines/Periodicals - downloadable - subscription - with conditional rightsA digital version of a traditional periodical published at regular intervals with the entire publication or individual articles downloaded to a device with access that is conditioned upon continued subscription payment.Digital products`txcd_10303001`Digital Magazines/Periodicals - subscription tangible and digitalA digital version of a traditional magazine published at regular intervals. The publication is accessed via a subscription which also entitles the purchaser to physical copies of the media.Digital products`txcd_10303002`Digital Magazines/Periodicals - viewable only - subscription - with conditional rightsA digital version of a traditional periodical published at regular intervals with the entire publication or individual articles viewable (but not downloadable) on a device with access that is conditioned upon continued subscription payment.Digital products`txcd_10303100`Digital Magazines/Periodicals - downloadable - non subscription - with permanent rightsA digital version of a traditional periodical published at regular intervals with the entire publication or individual articles downloaded to a device with permanent access granted. The publication is accessed without a subscription.Digital products`txcd_10303101`Digital Magazines/Periodicals - viewable only - non subscription - with limited rightsA digital version of a traditional periodical published at regular intervals with the entire publication or individual articles viewable (but not downloadable) on a device with access that expires after a stated period of time. The publication is accessed without a subscription.Digital products`txcd_10303102`Digital Magazines/Periodicals - viewable only - non subscription - with permanent rightsA digital version of a traditional periodical published at regular intervals with the entire publication or individual articles viewable (but not downloadable) on a device with permanent access granted. The publication is accessed without a subscription.Digital products`txcd_10303104`Digital Magazines/Periodicals - downloadable - non subscription - with limited rightsA digital version of a traditional periodical published at regular intervals with the entire publication or individual articles downloaded to a device with access that expires after a stated period of time. The publication is accessed without a subscription.Digital products`txcd_10304000`Digital Newspapers - downloadable - non subscription - with permanent rightsA digital version of a traditional newspaper published at regular intervals with the entire publication or individual articles downloaded to a device with permanent access granted. The publication is accessed without a subscription.Digital products`txcd_10304001`Digital Newspapers - viewable only - non subscription - with limited rightsA digital version of a traditional newspaper published at regular intervals with the entire publication or individual articles viewable (but not downloadable) on a device with access that expires after a stated period of time. The publication is accessed without a subscription.Digital products`txcd_10304002`Digital Newspapers - viewable only - non subscription - with permanent rightsA digital version of a traditional newspaper published at regular intervals with the entire publication or individual articles viewable (but not downloadable) on a device with permanent access granted. The publication is accessed without a subscription.Digital products`txcd_10304003`Digital Newspapers - downloadable - non subscription - with limited rightsA digital version of a traditional newspaper published at regular intervals with the entire publication or individual articles downloaded to a device with access that expires after a stated period of time. The publication is accessed without a subscription.Digital products`txcd_10304100`Digital Newspapers - downloadable - subscription - with conditional rightsA digital version of a traditional newspaper published at regular intervals with the entire publication or individual articles downloaded to a device with access that is conditioned upon continued subscription payment.Digital products`txcd_10304101`Digital Newspapers - subscription tangible and digitalA digital version of a traditional newspaper published at regular intervals. The publication is accessed via a subscription which also entitles the purchaser to physical copies of the media.Digital products`txcd_10304102`Digital Newspapers - viewable only - subscription - with conditional rightsA digital version of a traditional newspaper published at regular intervals with the entire publication or individual articles viewable (but not downloadable) on a device with access that is conditioned upon continued subscription payment.Digital products`txcd_10305000`Digital School Textbooks - downloaded - non subscription - with limited rightsWorks that are required as part of a formal academic education program and are transferred electronically. These goods are downloaded to a device with access that expires after a stated period of time.Digital products`txcd_10305001`Digital School Textbooks - downloaded - non subscription - with permanent rightsWorks that are required as part of a formal academic education program and are transferred electronically. These goods are downloaded to a device with permanent access granted.Digital products`txcd_10401000`Digital Audio Works - streamed - non subscription - with limited rightsWorks that result from the fixation of a series of musical, spoken, or other sounds that are transferred electronically. These goods are streamed to a device with access that expires after a stated period of time. These goods include prerecorded or live music, prerecorded or live readings of books or other written materials, prerecorded or live speeches, ringtones, or other sound recordings, but not including audio greeting cards.Digital products`txcd_10401001`Digital Audio Works - downloaded - non subscription - with limited rightsWorks that result from the fixation of a series of musical, spoken, or other sounds that are transferred electronically. These goods are downloaded to a device with access that expires after a stated period of time. These goods include prerecorded or live music, prerecorded or live readings of books or other written materials, prerecorded or live speeches, ringtones, or other sound recordings, but not including audio greeting cards. Note the presence of PTC 10301000 (Audiobook), a more granular option for downloaded audiobooks.Digital products`txcd_10401100`Digital Audio Works - downloaded - non subscription - with permanent rightsWorks that result from the fixation of a series of musical, spoken, or other sounds that are transferred electronically. These goods are downloaded to a device with permanent access granted. These goods include prerecorded or live music, prerecorded or live readings of books or other written materials, prerecorded or live speeches, ringtones, or other sound recordings, but not including audio greeting cards. Note the presence of PTC 10301000 (Audiobook), a more granular option for downloaded audiobooks.Digital products`txcd_10401200`Digital Audio Works - streamed - subscription - with conditional rightsWorks that result from the fixation of a series of musical, spoken, or other sounds that are transferred electronically. These goods are streamed to a device with access that is conditioned upon continued subscription payment. These goods include prerecorded or live music, prerecorded or live readings of books or other written materials, prerecorded or live speeches, ringtones, or other sound recordings, but not including audio greeting cards.Digital products`txcd_10402000`Digital Audio Visual Works - streamed - non subscription - with limited rightsA series of related images which, when shown in succession, impart an impression of motion, together with accompanying sounds, if any. These goods are streamed to a device with access that expires after a stated period of time. These goods include motion pictures, music videos, animations, news and entertainment programs, and live events, but do not include video greeting cards or video or electronic games.Digital products`txcd_10402100`Digital Audio Visual Works - downloaded - non subscription - with permanent rightsA series of related images which, when shown in succession, impart an impression of motion, together with accompanying sounds, if any. These goods are downloaded to a device with permanent access granted. These goods include motion pictures, music videos, animations, news and entertainment programs, and live events, but do not include video greeting cards or video or electronic games.Digital products`txcd_10402110`Digital Audio Visual Works - downloaded - non subscription - with limited rightsA series of related images which, when shown in succession, impart an impression of motion, together with accompanying sounds, if any. These goods are downloaded to a device with access that expires after a stated period of time. These goods include motion pictures, music videos, animations, news and entertainment programs, and live events, but do not include video greeting cards or video or electronic games.Digital products`txcd_10402200`Digital Audio Visual Works - streamed - subscription - with conditional rightsA series of related images which, when shown in succession, impart an impression of motion, together with accompanying sounds, if any. These goods are streamed to a device with access that is conditioned upon continued subscription payment. These goods include motion pictures, music videos, animations, news and entertainment programs, and live events, but do not include video greeting cards or video or electronic games.Digital products`txcd_10402300`Digital Video Streaming - live events - limited useAn audio visual work of a live performance streamed over the internet that you can only access for a limited time during the performance (e.g., a live concert stream).Digital products`txcd_10501000`Digital Photographs/Images - downloaded - non subscription - with permanent rightsDigital images that are downloaded to a device with permanent access granted.Digital products`txcd_10502000`Gift CardGift card or gift certificate that you purchase and receive electronically and assumed to be multi-purpose.Digital products`txcd_10503000`Digital other news or documents - downloadable - non subscription - with permanent rightsIndividual digital news articles, newsletters, and other stand-alone documents. These goods are downloaded to a device with permanent access granted. These publications are accessed without a subscription.Digital products`txcd_10503001`Digital other news or documents - downloadable - non subscription - with limited rightsIndividual digital news articles, newsletters, and other stand-alone documents. These goods are downloaded to a device with access that expires after a stated period of time.Digital products`txcd_10503002`Digital other news or documents - downloadable - subscription - with conditional rightsIndividual digital news articles, newsletters, and other stand-alone documents. These goods are downloaded to a device with access that is conditioned upon continued subscription payment.Digital products`txcd_10503003`Digital other news or documents - viewable only - non subscription - with limited rightsIndividual digital news articles, newsletters, and other stand-alone documents. These goods are viewable (but not downloadable) on a device with access that expires after a stated period of time.Digital products`txcd_10503004`Digital other news or documents - viewable only - non subscription - with permanent rightsIndividual digital news articles, newsletters, and other stand-alone documents. These goods are viewable (but not downloadable) on a device with permanent access granted.Digital products`txcd_10503005`Digital other news or documents - viewable only - subscription - with conditional rightsIndividual digital news articles, newsletters, and other stand-alone documents. These goods are viewable (but not downloadable) on a device with access that is conditioned upon continued subscription payment.Digital products`txcd_10504000`Electronic software documentation or user manuals - Custom, electronic deliveryElectronic software documentation or user manuals - For custom software & delivered electronically.Digital products`txcd_10504003`Electronic software documentation or user manuals - Prewritten, electronic deliveryElectronic software documentation or user manuals - For prewritten software & delivered electronically.Digital products`txcd_10505000`Digital Finished Artwork - downloaded - non subscription - with limited rightsThe final art used for actual reproduction by photomechanical or other processes or for display purposes, but does not include website or home page design, and that is transferred electronically. These goods are downloaded to a device with access that expires after a stated period of time. These goods include drawings, paintings, designs, photographs, lettering, paste-ups, mechanicals, assemblies, charts, graphs, illustrative materials, etc.Digital products`txcd_10505001`Digital Finished Artwork - downloaded - non subscription - with permanent rightsThe final art used for actual reproduction by photomechanical or other processes or for display purposes, but does not include website or home page design, and that is transferred electronically. These goods are downloaded to a device with permanent access granted. These goods include drawings, paintings, designs, photographs, lettering, paste-ups, mechanicals, assemblies, charts, graphs, illustrative materials, etc.Digital products`txcd_10505002`Digital Finished Artwork - downloaded - subscription - with conditional rightsThe final art used for actual reproduction by photomechanical or other processes or for display purposes, but does not include website or home page design, and that is transferred electronically. These goods are downloaded to a device with access that is conditioned upon continued subscription payment. These goods include drawings, paintings, designs, photographs, lettering, paste-ups, mechanicals, assemblies, charts, graphs, illustrative materials, etc.Digital products`txcd_10506000`Digital Greeting Cards - Audio OnlyAn electronic greeting \"card\" typically sent via email that contains an audio only message.Digital products`txcd_10506001`Digital Greeting Cards - Audio VisualAn electronic greeting \"card\" typically sent via email that contains a series of related images which, when shown in succession, impart an impression of motion, together with accompanying sounds, if any.Digital products`txcd_10506002`Digital Greeting Cards - Static text and/or images onlyAn electronic greeting \"card\" typically sent via email that contains only static images or text, rather than an audio visual or audio only experience.Digital products`txcd_10701000`Website AdvertisingOnline advertising services such as creating and uploading advertisements on the internet. This is a standalone service that doesn't involve the sale of tangible personal property.Digital products`txcd_10701100`Website HostingA service to enable a customer's website to be accessible on the internet.Digital products`txcd_10701200`Website DesignA service to design a website or webpage.Services`txcd_10701300`Website Data ProcessingAn online service that allows a customer to create, transform, process or access data electronically.Digital products`txcd_10701400`Website Information ServicesAn online service furnishing information to customers, including online search and data comparison.Digital products`txcd_10702000`Online Dating ServicesA subscription service for membership to an online dating platform.Digital products`txcd_10804001`Digital Audio Visual Works - bundle - downloaded with permanent rights and streamed - subscription - with conditional rightsA series of related images which, when shown in succession, impart an impression of motion, together with accompanying sounds, if any. These goods are streamed and/or downloaded to a device with access that is conditioned upon continued subscription payment. Any downloads received while under subscription remain the permanent property of the subscriber. These goods include motion pictures, music videos, animations, news and entertainment programs, and live events, but do not include video greeting cards or video or electronic games. These goods further include self-study web based training services that impart content via audio visual goods described here.Digital products`txcd_10804002`Digital Audio Visual Works - bundle - downloaded with limited rights and streamed - non subscriptionA series of related images which, when shown in succession, impart an impression of motion, together with accompanying sounds, if any. These goods can be streamed and/or downloaded to a device with access that expires after a stated period of time. These goods include motion pictures, music videos, animations, news and entertainment programs, and live events, but do not include video greeting cards or video or electronic games.Digital products`txcd_10804003`Digital Audio Visual Works - bundle - downloaded with permanent rights and streamed - non subscriptionA series of related images which, when shown in succession, impart an impression of motion, together with accompanying sounds, if any. These goods can be streamed and/or downloaded to a device with permanent access granted. These goods include motion pictures, music videos, animations, news and entertainment programs, and live events, but do not include video greeting cards or video or electronic games.Digital products`txcd_10804010`Digital Audio Works - bundle - downloaded with permanent rights and streamed - subscription - with conditional rightsWorks that result from the fixation of a series of musical, spoken, or other sounds that are transferred electronically. These goods are streamed and/or downloaded to a device with access that is conditioned upon continued subscription payment. Any downloads received while under subscription remain the permanent property of the subscriber. These goods include prerecorded or live music, prerecorded or live readings of books or other written materials, prerecorded or live speeches, ringtones, or other sound recordings, but not including audio greeting cards. These goods further include self-study web based training services that impart content via audio goods described here. Note the presence of PTC 10301000 (Audiobook), a more granular option for downloaded audiobooks.Digital products`txcd_20010001`Car WashingA charge to clean, wash or wax a motor vehicle, other than a self-service coin (or credit card) operated washing station. This a labor charge, with any non-separately stated property transferred in performing the service considered inconsequential.Services`txcd_20010003`Cleaning of Tangible Personal PropertyA charge for the cleaning of tangible personal property, other than motor vehicles or clothing.Services`txcd_20010004`Commercial Cleaning ServicesA charge for janitorial services to commercial buildings, including the cleaning of floors, carpets, walls, windows, fixtures, exterior cleaning, etc.Services`txcd_20010006`Residential Cleaning ServicesA charge for custodial services to residential structures, including the cleaning of floors, carpets, walls, windows, appliances, furniture, fixtures, exterior cleaning, etc. No Tangible Personal Property is transferred.Services`txcd_20010007`Gutter Cleaning ServicesA charge for the service to maintain the proper operation of home or building gutters through cleaning out debris that could otherwise affect the proper water flow through the gutter system.Services`txcd_20020009`Installation of Hardware - NonpermanentA labor charge to install hardware where the installed property isn't considered permanently attached to the real property.Services`txcd_20020010`Installation of Hardware - PermanentA labor charge to install hardware where the installed property is permanently attached to the real property.Services`txcd_20020018`Installation of Tangible Personal PropertyA charge separately stated from any sale of the product itself for the installation of tangible personal property. This is a labor charge, with any non-separately stated property transferred in performing the service considered inconsequential.Services`txcd_20030002`Pet BoardingServices provided by a facility for overnight care of an animal not related to veterinary care.Services`txcd_20030003`Pet GroomingGrooming services for an animal such as haircuts, bathing, nail trimming, and flea dips.Services`txcd_20030004`Parking ServicesA charge for providing usage of a parking space.Services`txcd_20030005`Pet Services - Obedience TrainingService to train an animal to obey certain commands.Services`txcd_20040001`Hairdressing ServicesServices provided by beauty shops and barber shops, including but not limited to haircutting, hair coloring, shampooing, blow drying, permanents, hair extensions, hair straightening, and hair restorations.Services`txcd_20040002`Personal Care ServicesA charge for personal care services. Please select a more granular product tax category where appropriate.Services`txcd_20040003`Body PiercingA charge for the puncturing or penetration of the skin of a person and the insertion of jewelry or other adornment into the opening.Services`txcd_20040004`Childcare Services / AdultcareServices that provide non-medical care and supervision for infant to school-age children or senior citizens.Services`txcd_20040005`Dating ServicesA service that arranges introductions, for a fee, for strangers seeking romantic partners or friends. This excludes online dating services.Services`txcd_20040006`Employment ServicesServices provided by employment agencies to match employees to employers and employers to employees.Services`txcd_20040007`Manicure ServicesA charge for the cosmetic beauty treatment for the fingernails and toenails, including filing, cutting, shaping and the application of polish.Services`txcd_20040008`Massage ServicesServices where the use of structured touch, include holding, applying pressure, positioning, and mobilizing soft tissue of the body by manual technique. Note: This does not include medical massage prescribed by a physician.Services`txcd_20040009`Spa ServicesPersonal services typically with the purpose of improving health, beauty and relaxation through treatments such as hair, massages and facials.Services`txcd_20040010`Tanning ServicesServices for artificial tanning and skin beautification.Services`txcd_20040011`Tattooing ServicesA charge for the process that uses needles and colored ink to permanently put a mark or design on a person’s skin. Also applying permanent make-up, such as eyelining and other permanent colors to enhance the skin of the face, lips, eyelids, and eyebrows.Services`txcd_20060000`Professional ServicesA charge for a service performed by providers considered professionals due to the extensive initial and continuing education and/or training requirements, and the likelihood of state or federal licensing requirements. Choose this product tax code for any professional service offering in which a more detailed code is not available.Services`txcd_20060001`Accounting ServicesThe measurement, processing and communication of financial information about economic entities including, but is not limited to, financial accounting, management accounting, auditing, cost containment and auditing services, taxation and accounting information systems; excluding general bookkeeping service.Services`txcd_20060002`Advertising ServicesServices rendered for advertising which do not include the exchange of tangible personal property.Services`txcd_20060008`Credit Reporting ServicesServices rendered for the compiling and relating of information regarding the history of financial transactions of a person or entity.Services`txcd_20060009`Data ProcessingA service that allows data to be created, transformed, where the service is not performed online. Select \"Website data processing\" if the service is performed online and data is accessed by the customer electronically.Services`txcd_20060010`Debt Collection ServicesServices performed to collect or adjust past-due debt from borrowers.Services`txcd_20060013`Engineering ServicesServices provided by a professional trained to apply physical laws and principles of engineering in the design, development, and utilization of machines, materials, instruments, structures, processes, and systems. The services involve any of the following activities: provision of advice, preparation of feasibility studies, preparation of preliminary and final plans and designs, provision of technical services during the construction or installation phase, inspection and evaluation of engineering projects, and related services.Services`txcd_20060017`Technical Support ServicesCharges for installing, configuring, debugging, modifying, testing, or troubleshooting computer hardware, networks, programs or software. Labor only charge.Services`txcd_20060021`Insurance ServicesCharges associated loss or damage appraisals, inspections, actuarial services, claims adjustment or processing. Investigations as excluded from this definition.Services`txcd_20060022`Interior DecoratingPlanning and design of interior spaces, including preparation of layout drawings, furniture arranging, design planning and purchasing of furniture, fixtures, and cabinetry, staging, lighting and sound design.Services`txcd_20060026`Lobbying ServicesServices relating to advocating for the passage or defeat of legislation to members or staff of the government.Services`txcd_20060027`Medical Professional ServicesServices provided by a licensed or registered professional in the medical field. Examples: Doctor, dentist, nurse, optometrist, etc.Services`txcd_20060029`Payroll ServicesServices to process employee payroll, including wages, withholding taxes, benefits. etc.Services`txcd_20060030`Private Investigator ServicesServices providing a systematic inquiry, examination, or analysis of people, events or documents through surveillance, background checks, computer searches, fingerprinting, lie detector services, interviews, etc.Services`txcd_20060035`Secretarial/Editing ServicesServices which include, but are not limited to, editing, letter writing, proofreading, resume writing, typing or word processing. Doesn't include court reporting and stenographic services.Services`txcd_20060040`Electronic Filing ServiceCharges to electronically file a tax return on behalf of the taxpayer. This does not include manual preparation of tax returns.Digital products`txcd_20060042`Temporary Help ServicesServices relating to providing personnel, on a temporary basis, to perform work or labor under the supervision or control of another.Services`txcd_20060044`TrainingA charge for training sessions which provide instruction to the buyer. This includes education sessions or workshops but excludes physical exercise or workouts.Services`txcd_20060045`Training Services - Live VirtualLive web based training. This does not include video replays of the instruction or course. This service allows for a level of participation that is substantially similar to an in-person training on the same subject matter.Services`txcd_20060047`Architectural ServicesServices related to the art and science of designing and building structures for human habitation or use and includes planning, providing preliminary studies, designs, specifications, working drawings and providing for general administration of construction contracts.Services`txcd_20060048`Consulting ServicesThe provision of expertise or strategic advice that is presented for consideration and decision-making.Services`txcd_20060049`Cosmetic Medical ProcedureMedical procedure performed on an individual that is directed at improving the individual's appearance and that does not meaningfully promote the proper function of the body or prevent or treat illness or disease.Services`txcd_20060050`Credit Monitoring ServicesServices to track one's credit reports and provide notifications of activity with the intent of avoiding fraud.Digital products`txcd_20060051`Credit Card Processing ServicesA service that allows merchants to accept credit cards as well as send credit card payment details to the credit card network. It then forwards the payment authorization back to the acquiring bank.Digital products`txcd_20060052`Educational ServicesAcademic classes provided by traditional private education establishments and organizations.Services`txcd_20060053`Home Inspection ServicesA charge for an objective visual examination of a house’s systems and physical structure. The charge includes a report of the inspector's findings including pictures, analysis, and recommendations.Services`txcd_20060054`Legal ServicesServices relating to or concerned with the law. Such services include, but are not limited to, representation by an attorney (or other person, when permitted) in an administrative or legal proceeding, legal drafting, paralegal services, legal research services, arbitration, mediation, and court reporting services.Services`txcd_20060055`Marketing ServicesServices for consumer research and testing in connection with the development of particular products or services that the client sells to consumers in the regular course of business.Services`txcd_20060056`Public RelationsServices to provide outreach designed to influence the general public or other groups by promoting the interests of a service recipient.Services`txcd_20060057`Stenographic ServicesServices that include typing, taking shorthand, and taking and transcribing dictation for others for a consideration.Services`txcd_20060058`Training Services - Self-study Web-basedSelf Study web based training, not instructor led. This does not include downloads or streaming of video replays.Digital products`txcd_20060059`TutoringPersonal or small group teaching, designed to help people who need extra help with their studies.Services`txcd_20070001`Security - Alarm ServicesA charge for monitoring an electronically controlled alarm system for residential or commercial properties to minimize or prevent loss or damage to life, limb, or property.Services`txcd_20070006`Extermination ServicesA charge for services related to the eradication of insects, rodents, and other pests.Services`txcd_20070007`LandscapingA charge for services related to the maintenance of grounds.Services`txcd_20070008`Lawn Maintenance ServicesA charge for services of general lawn and grounds maintenance, including lawn cutting, weeding, yard clean-up, shrub and tree trimming, periodic seeding or aeration, etc. This a labor charge, with any non-separately stated property transferred in performing the service considered inconsequential.Services`txcd_20070010`Painting & Wallpapering ServicesA charge for services related to the painting of surfaces or the application of wallpaper.Services`txcd_20070013`Security - Guard ServicesServices related to protecting persons or their property, preventing the theft of goods, merchandise, or money. Responding to alarm signal device, burglar alarm, television camera, still camera, or a mechanical or electronic device installed or used to prevent or detect burglary, theft, shoplifting, pilferage, losses, or other security measures. Providing management and control of crowds for safety and protection.Services`txcd_20070016`Property Surveying ServicesServices mapping, detecting or establishing the relative position of points at, above, or below the surface of the earth. These services may include surveying and mapping of areas above or below the surface of the earth, such as the creation of view easements or segregating rights in parcels of land by creating underground utility easements.Services`txcd_20080003`Motor Vehicle RepairA charge to repair or restore to operating condition a motor vehicle that was broken, worn, damaged, defective, or malfunctioning. This a labor charge, with any non-separately stated property transferred in performing the service considered inconsequential.Services`txcd_20080004`Shoe RepairA charge to repair or restore footwear was broken, worn, damaged, defective, or malfunctioning. This a labor charge, with any non-separately stated property transferred in performing the service considered inconsequential.Services`txcd_20080005`Repair of Tangible Personal PropertyA charge to repair or restore tangible personal property that was broken, worn, damaged, defective, or malfunctioning. This a labor charge, with any non-separately stated property transferred in performing the service considered inconsequential.Services`txcd_20080007`Repairs to Real PropertyA charge to repair or maintain real property including repairs to HVAC, electrical, flooring, etc.Services`txcd_20080008`Aircraft RepairA charge to repair or restore to operating condition an aircraft that was broken, worn, damaged, defective, or malfunctioning. This a labor charge, with any non-separately stated property transferred in performing the service considered inconsequential. Commercial aircraft is excluded.Services`txcd_20080009`Appliance RepairA charge to repair or restore to operating condition an appliance (dishwasher, washing machine, refrigerator, etc.) that was broken, worn, damaged, defective, or malfunctioning. This a labor charge, with any non-separately stated property transferred in performing the service considered inconsequential.Services`txcd_20080010`Computer RepairA charge to repair or restore to operating condition computer hardware that was broken, worn, damaged, defective, or malfunctioning. This a labor charge, with any non-separately stated property transferred in performing the service considered inconsequential.Services`txcd_20080011`Furniture ReupholsteringA separately stated labor charge to cover a piece of furniture previously owned by the customer with new fabric coverings. Any materials transferred as part of the service are separately stated.Services`txcd_20080012`Jewelry RepairA charge to repair or restore jewelry that was broken, worn, damaged, defective, or malfunctioning. This a labor charge, with any non-separately stated property transferred in performing the service considered inconsequential.Services`txcd_20080013`Machine RepairA charge to repair or restore to operating condition a machine that was broken, worn, damaged, defective, or malfunctioning. This a labor charge, with any non-separately stated property transferred in performing the service considered inconsequential.Services`txcd_20090001`Garment Alterations - in conjunction with purchase of garmentA charge to perform an alteration on a item of clothing by the vendor of the article. The alteration is separately stated from the clothing, but contracted for at the time of the clothing purchase. Alterations could include hemming of a dress, shortening of pants, adjusting the waistline of a garment, etc.Services`txcd_20090002`Garment Alterations - separate from purchase of garmentA charge to perform an alteration on a item of clothing by a service provider other than vendor of the article. The alteration is not linked to the clothing purchase. Alterations could include hemming of a dress, shortening of pants, adjusting the waistline of a garment, etc.Services`txcd_20090003`Shredding ServiceA charge to have files or documents shredded either onsite or offsite.Services`txcd_20090004`Dry CleaningA charge to a non-commercial customer for the cleaning or renovating clothing by immersion and agitation, spraying, vaporization, or immersion only, in a volatile, commercially moisture-free solvent or by the use of a volatile or inflammable product. This does not include the use of a self-service coin (or credit card) operated cleaning machine.Services`txcd_20090006`FabricationA charge to create a finished good from materials supplied by the customer. This is a labor only charge to transform a customer's existing property.Services`txcd_20090010`Gift Wrapping - in conjunction with purchase of articleA charge for the wrapping of articles in a box or bag with paper and other decorative additions. The charge is separately stated from the article. This is not relevant for non-US countries where packaging is added to the price of the product.Services`txcd_20090012`Linen Services - Laundry onlyA charge to provide laundry services to clothing. The business customer is the owner of the items being cleaned.Services`txcd_20090015`Warranty - MandatoryA charge separately stated from the sale of the product itself that entitles the purchaser to future repair and labor services to return the defective item of tangible personal property to its original state. The warranty contract is mandatory and is required to be purchased on conjunction with the purchased tangible personal property. Motor vehicle warranties are excluded.Services`txcd_20090018`Warranty - OptionalA charge separately stated from the sale of the product itself that entitles the purchaser to future repair and labor services to return the defective item of tangible personal property to its original state. The warranty contract is optional to the purchaser. Motor vehicle warranties are excluded.Services`txcd_20090022`Assembly - in conjunction with final purchase of articleA charge separately stated from the sale of the product itself to bring the article to its finished state and in the condition specified by the buyer.Services`txcd_20090023`Assembly - prior to final purchase of articleA charge to assemble goods for a purchaser who will later sell the assembled goods to end consumers.Services`txcd_20090024`Dry Cleaning - other than clothingA charge to a non-commercial customer for the cleaning or renovating items other than clothing by immersion and agitation, spraying, vaporization, or immersion only, in a volatile, commercially moisture-free solvent or by the use of a volatile or inflammable product. This does not include the use of a self-service coin (or credit card) operated cleaning machine.Services`txcd_20090025`Gift Wrapping - separate from purchase of articleA charge for the wrapping of articles in a box or bag with paper and other decorative additions. The wrapping not linked the purchased of the article(s) and is performed by a party other vendor of the article(s).Services`txcd_20090026`Linen Services - Laundry only - other than clothingA charge to provide laundry services to linens and the like. This charge is not for clothing items. The business customer is the owner of the items being cleaned.Services`txcd_20090027`Meat ProcessingA charge to make customer provided meat suitable for human consumption, typically referred to a butcher or slaughter services.Services`txcd_20090028`PrintingA charge for the printing, imprinting, lithographing, mimeographing, photocopying, and similar reproductions of various articles including mailers, catalogs, letterhead, envelopes, business cards, presentation folders, forms, signage, etc. The end result is the transfer of tangible personal property to the customer.Physical goods`txcd_20090029`Printing - customer supplied articlesA charge for the printing, imprinting, or lithographing on any article supplied by the customer. The customer owns the article throughout the process. This a labor charge, with any non-separately stated property transferred in performing the service considered inconsequential.Services`txcd_20090030`Taxidermy ServicesA charge to preserve an animal's body via mounting or stuffing, for the purpose of display or study. The customer provide the animal. This a labor charge, with any non-separately stated property transferred in performing the service considered inconsequential.Services`txcd_20090031`Engraving Services - separate from purchase of articleA charge for engraving services performed on goods owned by the purchaser. This is a standalone service not done in conjunction with the sale of the goods.Services`txcd_20090032`Engraving Services - in conjunction with purchase of articleA charge for engraving a good, such as jewelry, in conjunction with the retail purchase of that item. The charge for the engraving services is separately stated from the charge for the good being engraved.Services`txcd_20091000`Optional Extended Warranty Contract on Motor VehicleAn agreement between a service contract provider and a customer where the service provider agrees to repair or replace certain parts on a motor vehicle that has had a failure after the original manufacturer’s warranty has expired. Commonly referred to as extended warranty or protection plan. Contract covers both parts and labor, and is made at the same time as Motor Vehicle purchase but is separately stated.Services`txcd_20091001`Optional Maintenance Contract on Motor VehicleAn agreement between a service contract provider and a customer for prepaid routine maintenance (e.g. oil changes, tire rotations, air filter, spark plugs, transmission and transfer case fluid changes) for a motor vehicle. Contract covers both parts and labor and is made at the same time as Motor Vehicle purchase but is separately stated.Services`txcd_20091002`Optional Extended Warranty Contract on Leased Motor VehicleAn agreement between a service contract provider and a customer for prepaid routine maintenance (e.g. oil changes, tire rotations, air filter, spark plugs, transmission and transfer case fluid changes) of a leased motor vehicle. Contract covers both parts and labor.Services`txcd_20091003`Optional Maintenance Contract on Leased Motor VehicleAn agreement between a service contract provider and a customer where the service provider agrees to repair or replace certain parts on a leased motor vehicle that has had a failure after the original manufacturer’s warranty has expired. Commonly referred to as extended warranty or protection plan. Contract covers both parts and labor.Services`txcd_20091004`Optional Extended Warranty Contract on Motor Vehicle - After MarketAn agreement between a service contract provider and a customer where the service provider agrees to repair or replace certain parts on a motor vehicle that has had a failure after the original manufacturer’s warranty has expired. Commonly referred to as extended warranty or protection plan. Contract covers both parts and labor and is made after the motor vehicle purchase.Services`txcd_20091005`Optional Maintenance Contract on Motor Vehicle - After MarketAn agreement between a service contract provider and a customer for prepaid routine maintenance (e.g. oil changes, tire rotations, air filter, spark plugs, transmission and transfer case fluid changes) of a motor vehicle. Contract covers both parts and labor and is made after the motor vehicle purchase.Services`txcd_20100001`Armored Car ServicesServices under armed private security guard to transport from one place to another any currency, jewels, stocks, bonds, paintings, or other valuables of any kind in a specially equipped motor vehicle that offers a high degree of security. It is assumed that the transport takes place within one country.Services`txcd_30011000`Clothing & FootwearApparel and footwear for people made for general use.Physical goods`txcd_30011002`Belt BuckleThe clasp used to fasten a belt, sold separately from the belt.Physical goods`txcd_30011003`Belts or SuspendersA belt is band of flexible material worn around a person's waist for supporting clothing. Suspenders are a pair of straps that pass over the shoulders and fasten to the waistband of a pair of trousers or a skirt at the front and back to hold it up.Physical goods`txcd_30011015`Neck GaiterA closed tube of fabric worn about the neck for warmth. It can be pulled over mouth and nose to protect against wind, dust, or other particles.Physical goods`txcd_30011020`School UniformsA set of standardized clothes worn primarily during attendnce at an educational institution.Physical goods`txcd_30011028`Fur Clothing - SyntheticClothing or footwear, such as coats, hats, ear muffs, gloves, etc. worn on the human body made of imitation fur materials.Physical goods`txcd_30011034`ScarvesA broad strip of cloth that covers the shoulders, neck, or head for warmth or appearance.Physical goods`txcd_30011045`NecktiesA necktie, or simply a tie, is a piece of cloth worn by men and women for decorative purposes around the neck, resting under the shirt collar and knotted at the throat, and often draped down the chest.Physical goods`txcd_30011100`Formal or Special Occasion WearClothing designed for, and not normally worn except while attending, a formal function, including tuxedos, bridal gowns, and evening gowns.Physical goods`txcd_30011200`Children's clothing and footwearChildren's clothing and footwear including general purpose articles intended to be worn by a person based on certain size or age requirements.Physical goods`txcd_30011201`Fur ClothingClothing or footwear, such as coats, hats, ear muffs, gloves, etc. worn on the human body made of the real pelt of an animal.Physical goods`txcd_30021000`Athletic Activity ClothingClothing, footwear, and accessories worn on a person's body while participating in recreational or sporting activities, and which are not typical for everyday usage. Please select a more granular product tax category where appropriate.Physical goods`txcd_30021001`Sweat BandsA band of absorbent material worn around the head or wrist to soak up sweat, especially by participants in physical activity.Physical goods`txcd_30021200`SwimsuitsBathing suits, swim trunks, or bathing costumes meant to be worn in or near water.Physical goods`txcd_30030001`Occupational UniformsClothing worn while performing an employment role, such as paramedic uniforms, firefighter uniforms, military uniforms, medical attire, law enforcement attire, etc.Physical goods`txcd_30031004`Cleanroom ApparelClothing and related covering material that is worn within cleanrooms, which require controlled low levels of environmental contaminants such as dusts, microbes, vapors, and aerosol particles.Physical goods`txcd_30031041`Reflective ApparelHigh-visibility warning clothing to signal the presence of the user in places and situations which may cause potential threats to their health and safety.Physical goods`txcd_30031404`Protective/Safety ClothingClothing for human wear and designed as protection of the wearer against injury or disease or as protections against damage or injury of other persons or property but not suitable for general use.Physical goods`txcd_30031405`Protective/Safety Clothing - Occupational UseClothing worn by an employee during the course of employment for protection against injury or disease or as protection against damage or injury of other persons or property. Such clothing items are not suitable for general use.Physical goods`txcd_30031406`Protective/Safety FootwearFootwear for human wear and designed as protection of the wearer against injury or disease or as protections against damage or injury of other persons or property but not suitable for general use.Physical goods`txcd_30031407`Protective/Safety Footwear - Occupational UseFootwear worn by an employee during the course of employment for protection against injury or disease or as protection against damage or injury of other persons or property. Such clothing items are not suitable for general use.Physical goods`txcd_30031408`Protective/Safety EquipmentEquipment type accessories (such as helmets, eyeshields, facemasks, pads, etc) for human wear and designed as protection of the wearer against injury or disease or as protections against damage or injury of other persons or property but not suitable for general use.Physical goods`txcd_30031409`Protective/Safety Equipment - Occupational UseEquipment type accessories (such as helmets, eyeshields, facemasks, pads, etc) worn by an employee during the course of employment for protection against injury or disease or as protection against damage or injury of other persons or property. Such clothing items are not suitable for general use.Physical goods`txcd_30040003`Cloth Face MasksA reusable mask made of common fabrics worn over the mouth and nose to act as personal protection from airborne particles or pathogens.Physical goods`txcd_30040005`Costume Masks and AccessoriesMasks and accessories sold separately to be worn for costume purposes for seasonal or cultural holidays or celebrations.Physical goods`txcd_30040006`CostumesApparel worn by a person for seasonal or cultural holidays or celebrations, rather than for everday wear.Physical goods`txcd_30051302`Gloves (general use)Gloves for general use (e.g. leather), but not gloves used for sporting (e.g., baseball, football gloves).Physical goods`txcd_30060001`Purses and HandbagsBags including handbags, purses, coin purses, fanny packs / bum bags, and diaper / nappy bags.Physical goods`txcd_30060004`HandkerchiefsA small usually square piece of cloth used for usually personal purposes (such as blowing the nose) or as a clothing accessory.Physical goods`txcd_30060005`Hair AccessoriesHair notions such as headbands, barrettes, bows, clips, and pins.Physical goods`txcd_30060006`HatsA shaped covering for the head worn for warmth, as a fashion item, or as part of a uniform.Physical goods`txcd_30060007`JewelryJewelry such as necklaces, earrings, rings, and more.Physical goods`txcd_30060010`Non-Clothing AccessoriesArticles, although worn on the body, which are not considered clothing or footwear. Examples include armbands, pocket protectors, shoulder boards, sleep masks, etc. Please select a more granular product tax category where appropriate.Physical goods`txcd_30060011`Shower CapsA plastic cap worn in the shower to keep the hair dry.Physical goods`txcd_30060013`UmbrellasUmbrellas.Physical goods`txcd_30060014`Wigs, Hairpieces, Hair extensionsWigs, Hairpieces, Hair extensions.Physical goods`txcd_30060015`LuggageSuitcases and baggage typically used for transporting travellers' belongings.Physical goods`txcd_30060016`WatchesA small timepiece worn typically on a strap on one's wrist.Physical goods`txcd_30060017`Sunglasses - Non-prescriptionSunglasses with a lens containing no lens powers to correct vision problems.Physical goods`txcd_30060018`Watches - SmartA digital wristwatch that provides many other features besides timekeeping. Like a smartphone, a smartwatch has a touchscreen display, which allows you to perform actions by tapping or swiping on the screen. Smartwatches include allow access to apps, similar to apps for smartphones and tablets.Physical goods`txcd_30060019`BriefcasesA flat, rectangular case with a handle, often of leather, for carrying books, papers, etc.Physical goods`txcd_30060020`ApronsA piece of clothing, such as a kitchen apron, that you wear over the front of other clothes to keep the clothes clean.Physical goods`txcd_30060021`BandannasA triangular or square piece of cloth tied around the head, face or neck for protective or decorative purposes.Physical goods`txcd_30060101`WalletsA small folding case for carrying paper money, credit cards and other flat objects.Physical goods`txcd_30070001`Bicycle Helmets - AdultA bicycle helmet that is NOT marketed and labeled as being intended for youth.Physical goods`txcd_30070002`Bicycle Helmets - YouthA bicycle helmet marketed and labeled as being intended for youth.Physical goods`txcd_30070003`Ballet or Tap ShoesFootwear worn exclusively while participating in ballet or tap dancing.Physical goods`txcd_30070004`Baseball Batting GlovesGloves worn by baseball/softball participants while hitting.Physical goods`txcd_30070005`Bowling GlovesGloves worn while rolling a bowling ball to the support the muscles in the hand and wrist, and to provide extra padding or grip.Physical goods`txcd_30070006`Bowling ShoesFootwear uniquely designed to be worn while bowling, having a slick smooth sole meant for gliding.Physical goods`txcd_30070007`Boxing GlovesA heavily padded mitten worn in boxing.Physical goods`txcd_30070008`Cleated or Spiked ShoesAthletic footwear having cleats or spikes to improve traction on various playing field surfaces.Physical goods`txcd_30070009`Football Receiver GlovesThin, lightweight gloves designed mainly for wide receivers in football to help with grip while catching.Physical goods`txcd_30070010`Golf GlovesA glove worn by golfers to give a firm grip on the handle of the golf club.Physical goods`txcd_30070011`Golf ShoesFootwear designed for golf course play, usually spiked (featuring actual cleats on the outsole) or spikeless (featuring a flat outsole with rubber studs or dimples in place of spikes).Physical goods`txcd_30070012`Ice SkatesIce Skates.Physical goods`txcd_30070013`Life VestsA inflatable sleeveless jacket worn to keep a person afloat when in danger of drowning.Physical goods`txcd_30070014`Martial Arts AttireClothing apparel/uniforms that are specific to the training and competition of various martial arts.Physical goods`txcd_30070015`Motorcycle HelmetsA helmet designed for used when opertating a motorcycle, atv, snowmobile, etc.Physical goods`txcd_30070017`Mouth GuardsA protective device for the mouth that covers the teeth and gums to prevent and reduce injury to the teeth, arches, lips and gums.Physical goods`txcd_30070018`Roller Skates or Roller BladesRoller Skates or Roller Blades.Physical goods`txcd_30070019`Shin GuardsA stiff pad worn typically worn under socks to protect the shins when playing soccer, hockey, and other sports.Physical goods`txcd_30070020`Shoulder Pads for SportsA hard protective pad for the shoulders used in certain sports, such as ice hockey and football.Physical goods`txcd_30070021`Ski BootsA rigid padded shoe that extends above the ankle, is secured to the foot, and is locked into position in a ski binding.Physical goods`txcd_30070022`Sport UniformsAthletic uniforms not containing protective padding or gear.Physical goods`txcd_30070023`Swim FinsFlippers on the foot or leg and made from rubber or plastic, to aid movement through the water in water sports.Physical goods`txcd_30070024`Swim GogglesGoggles to protect the eyes from material in the water, while swimming.Physical goods`txcd_30070025`WetsuitA close-fitting garment covering most of the body worn for warmth in water sports or diving.Physical goods`txcd_30070026`Athletic SupporterAn elastic support for the male genitals, worn especially in athletic or other strenuous activity.Physical goods`txcd_30070028`Hunting VestsVests designed primarily for wear while hunting, but which are also adaptable to everyday use.Physical goods`txcd_30070029`Hunting Activity ClothingClothing, footwear, and accessories for wear while hunting, but that are not adaptable to everyday use.Physical goods`txcd_30071000`Sports Activities EquipmentProtective gear worn about the human body while participating in athletic, recreational, or sporting activities, and which are not typical for everyday usage. Please select a more granular product tax category where appropriate.Physical goods`txcd_30080001`Button CoversButton covers are clothing accessories that slip over simple buttons for stylistic adornment.Physical goods`txcd_30080002`Component Clothing ItemsItems items used to make or repair clothing, including buttons, clasps, fabric, thread, yarn, snaps, hooks, zippers, sequins, fabric dye, and the like.Physical goods`txcd_30090005`OvershoesRubber boots worn over regular footwear to prevent them from wet or soiled.Physical goods`txcd_30090009`Shoe InsertsOver the counter inserts or insoles for in-shoe foot comfort.Physical goods`txcd_30090010`ShoelacesShoelaces.Physical goods`txcd_31020001`BibsA piece of cloth or plastic fastened around a baby's neck to keep their clothes clean while eating.Physical goods`txcd_31020002`Infant SwaddlesBlankets made to stretch to tightly around babies, and may have features like velcro or specially designed shapes or flaps to facilitate swaddle wrapping.Physical goods`txcd_31020003`Infant Receiving BlanketsA small lightweight blanket used to wrap an infant, eg. after bathing.Physical goods`txcd_31030001`Diaper CreamA skin cream forming a protective barrier to help heal and soothe diaper rash discomfort. These products contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_31030003`Baby WipesNon medicated disposable moistened cleansing wipes. These products do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_31031202`Infant DiapersDisposable diapers for infants.Physical goods`txcd_31031203`Disposable Toddler Training PantsAbsorbent single use underpants worn by children during potty training as a transition between diapers and cloth underwear.Physical goods`txcd_31031204`Diaper Liners - Single UseOne time use diaper liners for capturing solid waste for ease of disposal.Physical goods`txcd_31031205`Cloth DiapersInfant washable/reusable cloth diapers.Physical goods`txcd_31040001`Baby Feeding Bottles/NipplesA bottle with a teat or nipple made for babies to drink from.Physical goods`txcd_31040002`Breast PumpsA mechanical device that lactating women use to extract milk from their breasts.Physical goods`txcd_31070001`Infant/Child Car SeatA portable seat that can be installed and removed from motor vehicles designed to protect infants and children through a certain age or weight (includes booster seats).Physical goods`txcd_32010001`Blood Glucose Monitoring DevicesDevices used by diabetic individuals to monitor sugar levels in the blood, sold without prescription order of a licensed professional (e.g., blood sugar meters, glucose meters or glucometers). This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32010002`Diabetic Testing SuppliesSingle use supplies utilized by diabetics to monitor blood sugar or urine, including skin puncture lancets, test strips for blood glucose monitors, visual read test strips, and urine test strips, sold without prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32010003`Blood Glucose Monitoring Devices with PrescriptionDevices used by diabetic individuals to monitor sugar levels in the blood, sold under prescription order of a licensed professional (e.g., blood sugar meters, glucose meters or glucometers). This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32010004`Diabetic Testing Supplies with PrescriptionSingle use supplies utilized by diabetics to monitor blood sugar or urine, including skin puncture lancets, test strips for blood glucose monitors, visual read test strips, and urine test strips, sold under prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32020001`Prescription DrugsA substance that can only be obtained via a prescription of a licensed professional. A drug is a compound, substance, or preparation, and any component thereof, not including food or food ingredients, dietary supplements, or alcoholic beverages, that is: recognized in the official United States pharmacopoeia, official homeopathic pharmacopoeia of the United States, or official national formulary, and supplement to any of them; intended for use in the diagnosis, cure, mitigation, treatment, or prevention of disease; or intended to affect the structure or any function of the body. A drug can be intended for internal (ingestible, implant, injectable) or external (topical) application to the human body. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32020002`Drugs - Over the CounterThe term drug refers to a compound, substance or preparation intended for use in the diagnosis, cure, mitigation, treatment, or prevention of disease. An over-the-counter drug is a substance that contains a label identifying it as a drug and including a \"drug facts\" panel or a statement of active ingredients, that can be obtained without a prescription. A drug can be intended for internal (ingestible, implant, injectable) or external (topical) application to the human body.Physical goods`txcd_32020003`Over-the-Counter Drugs with PrescriptionThe term drug refers to a compound, substance or preparation intended for use in the diagnosis, cure, mitigation, treatment, or prevention of disease. An over-the-counter drug with prescrption is a substance that contains a label identifying it as a drug and including a \"drug facts\" panel or a statement of active ingredients, that can be obtained without a prescription, but is sold under prescription order of a licensed professional. A drug can be intended for internal (ingestible, implant, injectable) or external (topical) application to the human body. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32020004`Insulin with PrescriptionSynthetic or animal-based insulin used as an injectible drug for diabetes patients, sold under prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32020005`InsulinSynthetic or animal-based insulin used as an injectible drug for diabetes patients, sold without prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32020006`Medical Oxygen with PrescriptionMedical grade oxygen sold under prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32020011`Medical OxygenMedical grade oxygen sold without prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32030001`CondomsMale or female condoms used to prevent pregnancy or exposure to sexually transmitted diseases.Physical goods`txcd_32030002`Condoms with PrescriptionMale or female condoms and vaginal sponges used to prevent pregnancy and/or exposure to STDs, sold under prescription order of a licensed professional.Physical goods`txcd_32030003`Condoms with SpermicideMale or female condoms used to prevent pregnancy or exposure to STDs, containing a spermicidal lubricant as indicated by a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32030004`Condoms with Spermicide with PrescriptionMale or female condoms and vaginal sponges used to prevent pregnancy and/or exposure to STDs, containing a spermicidal lubricant as indicated by a \"drug facts\" panel or a statement of active ingredients, sold under prescription order of a licensed professional.Physical goods`txcd_32030005`Contraceptive OintmentsA topical preparation containing a spermicidal lubricant to prevent pregnancy as indicated by a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32030006`Birth Control - Over-the-Counter Oral ContraceptivesOver-the-Counter emergency contraceptive pills act to prevent pregnancy after intercourse. The contraceptive contains a hormone that prevents ovulation, fertilization, or implantation of an embryo.Physical goods`txcd_32030007`Birth Control - Over-the-Counter Oral Contraceptives with PrescriptionOver-the-Counter emergency contraceptive pills act to prevent pregnancy after intercourse, sold under prescription order of a licensed professional. The contraceptive contains a hormone that prevents ovulation, fertilization, or implantation of an embryo.Physical goods`txcd_32030008`Birth Control - Prescription non-Oral Contraceptives - BarriersBarrier based prescription only birth control methods, including the diaphragm and cervical cap that prevent the joining of the sperm and egg, available only under prescription order of a licensed professional.Physical goods`txcd_32030009`Birth Control - Prescription non-Oral Contraceptives - HormonalHormonal based birth control methods other than the oral pill, including intrauterine devices, injections, skin implants, transdermal patches, and vaginal rings that release a continuous dose of hormones to eliminate ovulation and prevent pregnancy, available only under prescription order of a licensed professional.Physical goods`txcd_32030010`Birth Control - Prescription Oral ContraceptivesAn oral medication containing hormones effective in altering the menstrual cycle to eliminate ovulation and prevent pregnancy, available only under prescription order of a licensed professional. Other than preventing pregnancy, hormonal birth control can also be used to treat various conditions, such as Polycystic Ovary Syndrome, Endometriosis, Primary Ovarian Insufficiency, etc.Physical goods`txcd_32040002`Feminine Cleansing SolutionsVaginal cleaning products include douches and wipes.Physical goods`txcd_32040003`Feminine Cleansing Solutions - MedicatedVaginal cleaning products include douches and wipes with medication such as an antiseptic, containing a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32040004`Feminine Yeast TreatmentsOver-the-counter antifungal creams, ointments or suppositories to treat yeast infections, containing a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32040005`Tampons/Pads/Sanitary Napkins/LinersFeminine hygiene product designed to absorb the menstrual flow.Physical goods`txcd_32050001`Adult Disposable DiapersAdult Disposable Diapers.Physical goods`txcd_32050005`Disposable Face MasksMasks designed for one-time use to protect the wearer from contamination of breathable particles. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32050006`Grooming and Hygiene ProductsSoaps, cleaning solutions, shampoo, toothpaste, mouthwash, antiperspirants, suntan lotions, etc. Please select a more granular category as appropriate.Physical goods`txcd_32050007`Grooming and Hygiene Products - MedicatedSoaps, cleaning solutions, shampoo, toothpaste, mouthwash, antiperspirants, suntan lotions, and sunscreens that contain medicinal ingredients as described on the product's label. Please select a more granular category as appropriate.Physical goods`txcd_32050009`Hand SanitizersA liquid, gel, foam, or wipe generally used to decrease infectious agents on the hands. Alcohol-based versions typically contain some combination of isopropyl alcohol, ethanol (ethyl alcohol), or n-propanol. Alcohol-free products are generally based on disinfectants, or on antimicrobial agents. These products contain a \"drug facts\" panel or a statement of active ingredients. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32050012`Medicated Acne TreatmentsTopical medicated solutions for treating skin acne. These products contain a \"drug facts\" panel or a statement of active ingredients. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32050013`Skin Care ProductsLotions, moisturizers, creams, powders, sprays, etc that promote optimal skin health that do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050014`Skin Care Products - MedicatedLotions, moisturizers, creams, powders, sprays, etc that promote optimal skin health and contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050015`Smoking Cessation ProductsOver-the-counter nicotine replacement products, including patches, gum, lozenges, sprays and inhalers that contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050017`Toilet TissueToilet tissue or paper primarily used for the removal of feces.Physical goods`txcd_32050018`ToothbrushA small brush with a long handle, used for cleaning the teeth.Physical goods`txcd_32050019`ToothpasteA thick, soft, moist substance used on a brush for cleaning one's teeth.Physical goods`txcd_32050020`Baby OilBaby oil is an inert (typically mineral) oil for the purpose of keeping skin soft and supple. These products do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050021`Baby PowderBaby powder is an astringent powder used for preventing diaper rash, as a spray, and for other cosmetic uses. It may be composed of talcum (in which case it is also called talcum powder) or corn starch. These products do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050022`Breath Spray/Dissolvable StripsBreath spray is a product sprayed into the mouth and breath strips dissolve in the mouth for the purpose of eliminating halitosis. These products do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050023`Bubble Bath/Bath Salts,Oils,CrystalsVarious surfactant preparations to improve cleaning, enhance the enjoyment of bathing, and serve as a vehicle for cosmetic agents. These products do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050024`Conditioner - HairA hair care product typically applied and rinsed after shampooing that is used to improve the feel, appearance and manageability of hair. These products do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050025`Cosmetics - BeautifyingArticles intended to be rubbed, poured, sprinkled, or sprayed on, introduced into, or otherwise applied to the human body or any part thereof for beautifying, promoting attractiveness, or altering the appearance. This category supports only the following items: Acrylic fingernail glue, Acrylic fingernails, Artificial eyelashes, Blush, Bronzer, Body glitter, Concealer, Eyelash glue, Finger/toenail decorations, Finger/toenail polish, Nail polish remover, Hair coloring, Hair mousse/gel, Hair oil, Hair spray, Hair relaxer, Hair wave treatment, Hair wax, Lip gloss, Lip liner, Lipstick, Liquid foundation, Makeup, Mascara, Nail polish remover, Powder foundation, Cologne, Perfume.Physical goods`txcd_32050026`Dental Floss/PicksA soft, strong, waxed or unwaxed thread for drawing between the teeth to remove food particles and prevent the buildup of plaque.Physical goods`txcd_32050027`Denture Creams/AdhesivesDenture adhesives are pastes, powders or adhesive pads that may be placed in/on dentures to help them stay in place. These products do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050028`Deodorant - Natural or No Active IngredientsPersonal under-arm deodorants/antiperspirants containing natural ingredients and/or ingredients that are not considered drugs. These products do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050029`Deodorant/AntiperspirantPersonal under-arm deodorants/antiperspirants. These products do contain a \"drug facts\" panel or a statement of active ingredients, typically aluminum.Physical goods`txcd_32050030`Hair Loss ProductsTopical foams, creams, gels, etc. that prevent hair loss and promote hair regrowth. These products contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050031`Hair Removal ProductsDepilatories are cosmetic preparations used to remove hair from the skin. Chemical depilatories are available in gel, cream, lotion, aerosol, roll-on, and powder forms. These products do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050032`Lip BalmA skin protectorant for the lips. These products do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050033`Lip Balm - MedicatedA medicated skin protectorant for the lips. These products contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050034`Mouthwash - CosmeticCosmetic mouthwash may temporarily control bad breath and leave behind a pleasant taste, but has no chemical or biological application beyond their temporary benefit. These products do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050035`Mouthwash - TherapeuticTherapeutic mouthwash, having active ingredients (such as antiseptic, or flouride) intended to help control or reduce conditions like bad breath, gingivitis, plaque, and tooth decay. These products contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050036`ShampooA hair care product for cleansing the hair/scalp. These products do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050037`Shampoo - MedicatedA hair care product for cleansing the hair/scalp, with anti-dandruff active ingredients. These products contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050038`Shaving CreamsA cosmetic foam or gel used for shaving preparation. The purpose of shaving cream is to soften the hair by providing lubrication. These products do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050039`Soaps - AntibacterialSoaps, body washes, shower gels for personal hygiene containing antibacterial. These products contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32050040`SunscreenA lotion, spray, gel, foam, stick or other topical product that absorbs or reflects some of the sun's ultraviolet (UV) radiation and thus helps protect against sunburn. Sunscreen contains a \"drug facts\" label or statement of active ingredients.Physical goods`txcd_32050041`Teeth Whitening KitsTeeth whitening gels, rinse, strips, trays, etc containing bleaching agents. These products do not contain a \"drug facts\" panel or a statement of active ingredients.Physical goods`txcd_32060001`Durable Medical Equipment for Home UseWhen sold without prescription order of a licensed professional, equipment that: can withstand repeated use; is primarily and customarily used to serve a medical purpose; generally is not useful to a person in the absence of illness or injury; and is not worn in or on the body. Home use means the equipment is sold to an individual for use at home, regardless of where the individual resides. Examples include hospital beds, commode chairs, bed pans, IV poles, etc.Physical goods`txcd_32060002`Durable Medical Equipment for Home Use with PrescriptionWhen sold under prescription order of a licensed professional, equipment that: can withstand repeated use; is primarily and customarily used to serve a medical purpose; generally is not useful to a person in the absence of illness or injury; and is not worn in or on the body. Home use means the equipment is sold to an individual for use at home, regardless of where the individual resides. Examples include hospital beds, commode chairs, bed pans, IV poles, etc.Physical goods`txcd_32060007`Enteral Feeding Equipment for Home Use with PrescriptionWhen sold under prescription order of a licensed professional, nutritional tube feeding equipment including button-style feeding tubes, standard G-tubes, NG-tubes, extension sets, adapters, feeding pumps, feeding pump delivery sets.Physical goods`txcd_32060012`Kidney Dialysis Equipment for Home Use with PrescriptionWhen sold under prescription order of a licensed professional, a machine used that filters a patient's blood to remove excess water and waste products when the kidneys are damaged, dysfunctional, or missing. The kidney dialysis machine is an artificial part which augments the natural functioning of the kidneys.Physical goods`txcd_32060017`Kidney Dialysis Equipment for Home UseWhen sold without prescription order of a licensed professional, a machine used that filters a patient's blood to remove excess water and waste products when the kidneys are damaged, dysfunctional, or missing. The kidney dialysis machine is an artificial part which augments the natural functioning of the kidneys.Physical goods`txcd_32060018`Oxygen Delivery Equipment for Home Use with PrescriptionWhen sold under prescription order of a licensed professional, equipment used to administer oxygen directly into the lungs of the patient for the relief of conditions in which the human body experiences an abnormal deficiency or inadequate supply of oxygen. Oxygen equipment means oxygen cylinders, cylinder transport devices, including sheaths and carts, cylinder studs and support devices, regulators, flowmeters, tank wrenches, oxygen concentrators, liquid oxygen base dispensers, liquid oxygen portable dispensers, oxygen tubing, nasal cannulas, face masks, oxygen humidifiers, and oxygen fittings and accessories.Physical goods`txcd_32060023`Oxygen Delivery Equipment for Home UseWhen sold without prescription order of a licensed professional, equipment used to administer oxygen directly into the lungs of the patient for the relief of conditions in which the human body experiences an abnormal deficiency or inadequate supply of oxygen. Oxygen equipment means oxygen cylinders, cylinder transport devices, including sheaths and carts, cylinder studs and support devices, regulators, flowmeters, tank wrenches, oxygen concentrators, liquid oxygen base dispensers, liquid oxygen portable dispensers, oxygen tubing, nasal cannulas, face masks, oxygen humidifiers, and oxygen fittings and accessories.Physical goods`txcd_32060024`Heating PadsA heating pad is a pad used for warming of parts of the body in order to manage pain. Types of heating pads include electrical, chemical and hot water bottles. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32060025`Cold or Hot Therapy Packs - ReusableA reusable pain management supply that includes artificial ice packs, gel packs, heat wraps, etc used for pain relief. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32060026`Enteral Feeding Equipment for Home UseWhen sold without prescription order of a licensed professional, nutritional tube feeding equipment including button-style feeding tubes, standard G-tubes, NG-tubes, extension sets, adapters, feeding pumps, feeding pump delivery sets.Physical goods`txcd_32070003`Wound Care Supplies - Bandages, Dressings, GauzeAn item that is applied directly to or inside a wound to absorb wound drainage, protect healing tissue, maintain a moist or dry wound environment (as appropriate), or prevent bacterial contamination. Examples include bandages, dressings, gauze, medical tape. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32070004`Wound Care Supplies - Bandages, Dressings, Gauze - MedicatedA wound care supply is defined as an item that is applied directly to or inside a wound to absorb wound drainage, protect healing tissue, maintain a moist or dry wound environment (as appropriate), or prevent bacterial contamination. These supplies contain medication such as an antibiotic ointment. They are a labeled with a \"drug facts\" panel or a statement of active ingredients.Examples include bandages, dressings, gauze, medical tape. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32070018`First Aid KitsA collection of mixed supplies and equipment that is used to give medical treatment, often housed in durable plastic boxes, fabric pouches or in wall mounted cabinets. Qualifying medicinal items (eg. OTC drugs) make up 51% or more of the value of the kit. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32070019`Gloves - Disposable (non medical use)Single use disposable gloves (latex, nitrile, vinyl, etc) not used for medical purposes.Physical goods`txcd_32070020`Gloves - Disposable (medical use)Single use disposable gloves (latex, nitrile, vinyl, etc) that have an application in a first aid or medical setting. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32070028`Medical Supplies - ConsumableItems for use in cure, treatment or diagnosis of injury, illness, disease or incapacity, and which is consumed during the use. Please select a more granular category as appropriate.Physical goods`txcd_32070029`First Aid Kits - 50% or Less Medicinal ItemsA collection of mixed supplies and equipment that is used to give medical treatment, often housed in durable plastic boxes, fabric pouches or in wall mounted cabinets. Qualifying medicinal items (eg. OTC drugs) make up 50% or less of the value of the kit. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32070030`Contact Lens Disinfecting SolutionsLiquid solution for cleaning and disinfecting contact lenses.Physical goods`txcd_32070031`Contact Lens Lubricating SolutionsLiquid solution for lubricating/rewetting, but not disinfecting, contact lenses. This solution is applied directly to the eye.Physical goods`txcd_32070032`Cotton Balls/Swabs - SterileSingle use cotton balls or swabs for application of antiseptics and medications and to cleanse scratches, cuts or minor wounds. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32070033`Cotton Balls/Swabs - UnsterileSingle use cotton balls or swabs for multi-purpose use other than applying medicines and cleaning wounds, due to not being sterile. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32070034`Cold or Hot Therapy Packs - DisposableA single use pain management supply that includes artificial ice packs, gel packs, heat wraps, etc used for pain relief. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32070035`Cold or Hot Therapy Packs - Disposable - MedicatedA single use pain management supply that includes artificial ice packs, gel packs, heat wraps, etc used for pain relief. These products contain a \"drug facts\" panel or a statement of active ingredients. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32070036`Nasal Breathing StripsFlexible adhesive strips that attach over the bridge of the nose to lift the sides of the nose, opening the nasal passages to provide relief for congestion and snoring. The products are drug free and contain no active drug ingredients.Physical goods`txcd_32070037`Hypodermic Needles/Syringes with Prescription - InsulinSingle use hollow needle commonly used with a syringe to inject insulin into the body by diabetic individuals, sold under prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32070038`Hypodermic Needles/Syringes - InsulinSingle use hollow needle commonly used with a syringe to inject insulin into the body by diabetic individuals, sold without prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32070039`Hydrogen PeroxideHydrogen peroxide is a mild antiseptic used on the skin to prevent infection of minor cuts, scrapes, and burns. It may also be used as a mouth rinse to help remove mucus or to relieve minor mouth irritation (e.g., due to canker/cold sores, gingivitis). These products contain a \"drug facts\" panel or a statement of active ingredients. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32070040`Petroleum JellyA multi-purpose skin protectorant and topical ointment. These products contain a \"drug facts\" panel or a statement of active ingredients. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32070041`Ear Drops - MedicatedLiquid drops to be placed inside the ear canal to reduce the symptoms of an ear ache, or to act as an ear drying aid, or to loosen, cleanse, and aid in the removal of ear wax. These products contain a \"drug facts\" panel or a statement of active ingredients. Examples include Ear Ache, Swimmers' Ears, and Ear Wax removal drops. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32070042`Isopropyl (Rubbing) AlcoholA liquid solution typically used as a topical antiseptic. The products contain a \"drug facts\" panel or a statement of active ingredients. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32080001`Bath AidsAids that can increase, improve, or assist mobility in the bathroom such as raised toilet seat, tub & shower stool, handrails, grab bars, etc.Physical goods`txcd_32080003`Mobility Enhancing EquipmentEquipment which is primarily and customarily used to provide or increase the ability to move from one place to another, sold without a prescription, and which is appropriate for use either in a home or a motor vehicle; Is not generally used by persons with normal mobility; and does not include any motor vehicle or equipment on a motor vehicle normally provided by a motor vehicle manufacturer. Examples include wheelchairs, crutches, canes, walkers, chair lifts, etc.Physical goods`txcd_32080004`Repair & Replacement Parts for Mobility Enhancing EquipmentParts for items such as crutch pads, walker tips, cane tips, crutch tips, etc.Physical goods`txcd_32080005`Mobility Enhancing Equipment with PrescriptionEquipment which is primarily and customarily used to provide or increase the ability to move from one place to another, sold under a prescription, and which is appropriate for use either in a home or a motor vehicle; Is not generally used by persons with normal mobility; and does not include any motor vehicle or equipment on a motor vehicle normally provided by a motor vehicle manufacturer. Examples include wheelchairs, crutches, canes, walkers, chair lifts, etc.Physical goods`txcd_32090003`Corrective LensesCorrective lenses, including eyeglasses and contact lenses, sold without a prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32090005`Hearing Aid BatteriesBatteries specifically labeled and designed to operate hearing aid devices, sold without prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32090006`Hearing AidsArtificial devices to correct or alleviate hearing deficiencies, sold without prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32090007`Prosthetic DeviceWhen sold without prescription order of a licensed professional, a replacement, corrective, or supportive device, worn on or in the body to: Artificially replace a missing portion of the body; Prevent or correct physical deformity or malfunction; or Support a weak or deformed portion of the body. Worn in or on the body means that the item is implanted or attached so that it becomes part of the body, or is carried by the body and does not hinder the mobility of the individual. Examples include artificial limbs, pacemakers, orthotics, orthopedics, ostomy/colostomy devices, catheters, etc.Physical goods`txcd_32090008`Prosthetic Devices with PrescriptionWhen sold under prescription order of a licensed professional, a replacement, corrective, or supportive device, worn on or in the body to: Artificially replace a missing portion of the body; Prevent or correct physical deformity or malfunction; or Support a weak or deformed portion of the body. Worn in or on the body means that the item is implanted or attached so that it becomes part of the body, or is carried by the body and does not hinder the mobility of the individual. Examples include artificial limbs, pacemakers, orthotics, orthopedics, ostomy/colostomy devices, catheters, etc.Physical goods`txcd_32090013`Corrective Lenses with PrescriptionCorrective lenses, eyeglasses, sold under prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32090014`Contact Lenses with PrescriptionContact lenses, sold under prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32090015`Dental Prosthetics with PrescriptionWhen sold under prescription order of a licensed professional, a replacement, corrective, or supportive device, worn in the mouth, including dentures, orthodontics, crowns, bridges, etc.Physical goods`txcd_32090016`Dental ProstheticsWhen sold without prescription order of a licensed professional, a replacement, corrective, or supportive device, worn in the mouth, including dentures, orthodontics, crowns, bridges, etc.Physical goods`txcd_32090017`Hearing Aids with PrescriptionArtificial devices to correct or alleviate hearing deficiencies, sold under prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32090018`Hearing Aid Batteries with PrescriptionBatteries specifically labeled and designed to operate hearing aid devices, sold under prescription order of a licensed professional. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32100001`Pregenacy Testing KitsAt home urine-based tests used to detect pregancy hormone levels.Physical goods`txcd_32100002`Ovulation Testing KitsAt home urine-based tests used to detect impending ovulation to assist in pregnancy planning.Physical goods`txcd_32100003`Infectious Disease TestAn at-home infectious disease test kit that can be sold without a prescription.Physical goods`txcd_32100004`Infectious Disease Test - Prescription onlyAn at-home infectious disease test kit that can only be sold with a prescription.Physical goods`txcd_32100005`DNA Testing KitsAt home saliva, cheeek swab or blood drop based tests used to detect various genetic markers in an individual.Physical goods`txcd_32100006`Medical Thermometers - DisposableOne-time use medical thermometers for oral, temporal/forehead, or rectal body temperature diagnostics. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32100007`Medical Thermometers - ReusableMultiple use medical thermometers for oral, temporal/forehead, or rectal body temperature diagnostics. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32100008`Energy Star ProductsProducts carrying an Energy Star rating (e.g., light bulbs, appliances, etc.). Please select a more granular product tax category where appropriate.Physical goods`txcd_32100010`Blood Pressure Testing DevicesAt home digital or manual (aneroid) sphygmomanometers, also known as a blood pressure meter, blood pressure monitor, or blood pressure gauge, are devices used to measure blood pressure, composed of an inflatable cuff to collapse and then release the artery under the cuff in a controlled manner. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32100011`Pulse OximeterAn electronic device that clips onto a patient's finger to measure heart rate and oxygen saturation in his or her red blood cells. This code is intended for sales directly to end consumers that are NOT healthcare providers.Physical goods`txcd_32100012`Drug Testing KitsAt home urine-based tests used to detect the presense of various drug substances in an individual.Physical goods`txcd_32100013`Cholesterol Testing KitsAt home blood-prick based tests used to monitor cholesterol levels in an individual.Physical goods`txcd_33020001`Ceiling Fans - Energy StarCeiling Fans carrying an Energy Star rating.Physical goods`txcd_33020002`Air conditioners - Energy StarDomestic air conditioning (central or room) systems carrying Energy Star rating.Physical goods`txcd_33020003`Furnaces - Energy StarDomestic gas or oil furnaces carrying an Energy Star rating.Physical goods`txcd_33020004`Heat Pumps - Energy StarDomestic air source heat pumps carrying Energy Star rating.Physical goods`txcd_33020005`Water Heater - Energy StarDomestic water heater carrying Energy Star rating.Physical goods`txcd_33020006`Dehumidifier - Energy StarDomestic appliance carrying an Energy Star Rating which reduces and maintains the level of humidity in the air.Physical goods`txcd_33020007`Boilers - Energy StarDomestic gas or oil boilers for space or water heating carrying an Energy Star rating.Physical goods`txcd_33020008`Programmable Wall Thermostat - Energy StarAn in home programmable thermostat, such as a WiFi enabled smart thermostat, carrying an Energy Star rating.Physical goods`txcd_33020009`Refrigerators - Energy StarDomestic standard size refrigerators carrying Energy Star rating.Physical goods`txcd_33020010`Dishwashers - Energy StarDomestic dish washing appliances carrying Energy Star rating.Physical goods`txcd_33020011`Freezers- Energy StarDomestic freezers carrying Energy Star rating.Physical goods`txcd_33020012`Clothes Washing Machine - Energy StarDomestic clothes washing appliances carrying Energy Star rating.Physical goods`txcd_33020013`Clothes Drying Machine - Energy StarDomestic clothes drying appliances carrying Energy Star rating.Physical goods`txcd_33020014`Can Opener - ManualNon-electric can opener.Physical goods`txcd_33020200`Water conserving productsWater conserving products are for conserving or retaining groundwater; recharging water tables; or decreasing ambient air temperature, and so limiting water evaporation. Examples include soil sufactants, a soaker or drip-irrigation hose, a moisture control for a sprinkler or irrigation system, a rain barrel or an alternative rain and moisture collection system, a permeable ground cover surface that allows water to reach underground basins, aquifers or water collection points.Physical goods`txcd_33030001`Alkaline BatteriesSingle or multi-pack AA, AAA, c, D, 6-volt or 9-volt batteries, excluding automobile or boat batteries.Physical goods`txcd_33031001`Mobile Phone BatteriesMobile phone batteries.Physical goods`txcd_33080201`Disinfectant WipesWipes used in the process of eliminating or reducing harmful microorganisms from inanimate objects and surfaces.Physical goods`txcd_33080202`Disposable Household Paper ProductsPaper based items for household use designed to be disposed of after single use, including the the following...Facial tissue; Paper bags; Paper freezer wrap; Paper place mats; Paper plates and cups; Paper napkins; Paper straws; Paper tablecloths; Paper towels.Physical goods`txcd_33080300`Household Linens/Bedding Towels Shower CurtainsIncludes blankets, pillows, bed linens/sheets, comforters, towels, wash cloths, shower curtains and bath mats. Please select a more granular category where appropriate.Physical goods`txcd_33080301`BeddingBedclothes items including sheets, pillow cases, bedspreads, comforters, blankets, throws, duvet covers, pillow shams, bed skirts, mattress pad, mattress toppers, and pillows.Physical goods`txcd_33080302`Bath Mats/RugsA small mat/rug used to cover portion of bathroom floor.Physical goods`txcd_33080303`Bath TowelsTowels used for individual drying of persons, including bath towels, beach towels, wash cloths, hand towels, facetowels, sport towels, etc.Physical goods`txcd_33080304`Shower Curtain or LinerShower curtain/liner used to keep water from escaping a showering area.Physical goods`txcd_33080305`Crib Bumpers/LinersA bumper/liner that borders the interior walls/slats of the crib to help protect the baby.Physical goods`txcd_33080306`Dish TowelsDish towels used for kitchenware drying.Physical goods`txcd_33080400`Yarn - Non-clothingYarn for use other than fabricating/repairing clothing.Physical goods`txcd_33100001`Landscape Soil, Mulch, Compost - ResidentialLandscape soil, mulch, compost - residential.Physical goods`txcd_33100101`Agricultural Chemicals - Non-commercial gardeningProducts for use in non-commercial food producing gardens to control insects, weeds, and fungus.Physical goods`txcd_33100200`Agricultural Fertilizer - Non-commercial gardeningProducts for use in non-commercial food producing gardens to enhance plant growth.Physical goods`txcd_33110001`Incandescent Light Bulbs - Energy StarStandard incandescent light bulbs carrying an Energy Star rating.Physical goods`txcd_33110002`Compact Fluorescent Light Bulbs - Energy StarCompact Fluorescent light (CFL) bulbs carrying an Energy Star rating.Physical goods`txcd_33110003`LED Bulbs - Energy StarLight emitting diode (LED) bulbs carrying an Energy Star rating.Physical goods`txcd_33110004`Portable Light SourcesPortable self-powered or battery powered light sources, including flashlights, lanterns, emergency glow sticks or light sticks.Physical goods`txcd_33110005`CandlesCandles to be used as a light source.Physical goods`txcd_33120000`Storm Preparedness ItemsQualifying items for purposes of certain sales tax holidays such as cell phone batteries, cell phone chargers, and two-way radios.Physical goods`txcd_33120001`Portable RadiosPortable self-powered or battery powered radio, two-way radio, weatherband radio.Physical goods`txcd_33120002`Food Storage CoolerNon-electric food or beverage cooler.Physical goods`txcd_33120003`Smoke DetectorsSmoke Detectors.Physical goods`txcd_33120004`Carbon Monoxide DetectorsCarbon Monoxide Detectors.Physical goods`txcd_33120005`Fire ExtinguishersFire Extinguishers.Physical goods`txcd_33120006`Portable Fuel ContainerPortable fuel container.Physical goods`txcd_33120007`Water Storage ContainerNon-electric water container to store water for emergency usage.Physical goods`txcd_33120008`Artificial IceArtificial ice, blue ice, ice packs, reusable ice.Physical goods`txcd_33120009`Tarpaulins and Weatherproof SheetingTarps, plastic sheeting, plastic drop cloths, waterproof sheeting.Physical goods`txcd_33120010`Portable GeneratorPortable generator used to provide light or communications or power appliances during a power outage.Physical goods`txcd_33120011`Power CordsPower cords used to connect electrical equipment and devices to power sockets.Physical goods`txcd_33120012`Axes/HatchetsAn hand held tool with a bladed head on a handle used for hewing, cleaving, chopping, etc.Physical goods`txcd_33120013`Garden ChainsawGas-powered chainsaw.Physical goods`txcd_33120014`Chainsaw AccessoriesChainsaw accessories include chains, lubricants, motor oil, chain sharpeners, bars, wrenches, carrying cases, repair parts, safety apparel.Physical goods`txcd_33120015`Storm Shutters/Window Protection DevicesPlywood, window film, storm shutters, hurricane shutters or other materials specifically designed to protect windows.Physical goods`txcd_33120016`Emergency/Rescue LadderLadder used for home emergency evacuation.Physical goods`txcd_33120017`Ropes and CordsRopes and Cords and similar fastening products.Physical goods`txcd_33120018`Ground Anchor Systems and Tie-down KitsGround anchor systems and tie down kits for securing property against severe weather.Physical goods`txcd_33120019`Duct TapeDuct Tape.Physical goods`txcd_33150001`Toilets - WaterSenseWaterSense labeled toilets.Physical goods`txcd_33150002`Urinals - WaterSenseWaterSense labeled urinals.Physical goods`txcd_33150003`Bathroom Faucets - WaterSenseWaterSense labeled bathroom sink faucets and accessories.Physical goods`txcd_33150004`Spray Water Sprinkler Bodies - WaterSenseWaterSense labeled sprinkler body is the exterior shell that connects to the irrigation system piping and houses the spray nozzle that applies water on the landscape.Physical goods`txcd_33150005`Irrigation Controls - WaterSenseWaterSense labeled irrigation controllers, which act like a thermostat for your sprinkler system telling it when to turn on and off, use local weather and landscape conditions to tailor watering schedules to actual conditions on the site.Physical goods`txcd_33150006`Showerheads - WaterSenseWaterSense labeled showerheads.Physical goods`txcd_34010001`Audio TurntablesA type of consumer electronic device used to play vinyl recordings.Physical goods`txcd_34010002`Digital Music PlayersPortable audio equipment that plays audio files encoded in MP3 and other audio formats.Physical goods`txcd_34010003`Video CamerasA camera that captures moving images and sound and converts them into electronic signals so that they can be saved on a storage device, such as videotape or a hard drive, or viewed on a monitor.Physical goods`txcd_34020001`Digital CamerasA camera that captures photographs in digital memory.Physical goods`txcd_34020002`Digital Picture FramesA framed display designed to display preloaded digital images (jpeg or any digital image format). Has slots for flash memory cards and/or an interface for digital photo camera connection.Physical goods`txcd_34020003`E-Book ReadersA portable electronic device for reading digital books and periodicals.Physical goods`txcd_34020004`Headphones/EarbudsWired and bluetooth headphones and earbuds for audio listening.Physical goods`txcd_34020005`Consumer Electronics Peripherals/AccessoriesConsumer electronics peripherals and accessories. Please select a more granular product tax category where appropriate.Physical goods`txcd_34020006`TelevisionsTelevisions.Physical goods`txcd_34020027`Consumer ElectronicsElectronic devices bought for personal rather than commercial use. Please select a more granular product tax category where appropriate.Physical goods`txcd_34021000`Mobile PhonesA portable device for connecting to a telecommunications network in order to transmit and receive voice, video, or other data.Physical goods`txcd_34021001`Mobile Phone Charging Device/cordA device for recharging the battery of a mobile phone, especially one consisting of a cable connected to an adaptor which plugs into an electrical socket or usb port.Physical goods`txcd_34022000`Video Gaming Console - FixedA specialized computer system designed for interactive video gameplay that typically connects to a television or other monitor.Physical goods`txcd_34022001`Video Gaming Console - PortableA handheld portable electronic device used for playing video games that has its own screen, speakers and controls in one unit.Physical goods`txcd_34040001`Computer BatteriesTypically a lithium-ion remote power source for laptop computers.Physical goods`txcd_34040002`Computer CablesCables with industry standard connection and termination configurations used to connect various peripherals and equipment to computers.Physical goods`txcd_34040003`Computer DrivesStorage drives, hard drives, Zip drives, etc.Physical goods`txcd_34040004`Computer KeyboardsComputer Keyboards.Physical goods`txcd_34040005`Computer MicrophonesComputer Microphones.Physical goods`txcd_34040006`Computer Monitor/DisplaysComputer Monitor/Displays.Physical goods`txcd_34040007`Computer Mouse/Pointing DevicesComputer Mouse/Pointing Devices.Physical goods`txcd_34040008`Computer PrinterComputer Printer.Physical goods`txcd_34040009`Computer SpeakersComputer Speakers.Physical goods`txcd_34040010`Docking StationsA docking station is a hardware frame and set of electrical connection interfaces that enable a notebook computer to effectively serve as a desktop computer.Physical goods`txcd_34040011`ModemsA device that makes possible the transmission of data to or from a computer via telephone or other communication lines.Physical goods`txcd_34040012`MotherboardsA motherboard is the physical component in a computer that contains the computer's basic circuitry and other components.Physical goods`txcd_34040013`Port ReplicatorsA port replicator is an attachment for a notebook computer that allows a number of devices such as a printer, large monitor, and keyboard to be simultaneously connected.Physical goods`txcd_34040014`RoutersA device that connects computer networks to each other, and sends information between networks. The router, as commonly used in the home, is the hardware that allows communication between your personal computers and other connected device and the internet.Physical goods`txcd_34040015`ScannersA device that scans documents and images and converts them into digital data for use on a computer.Physical goods`txcd_34040016`Sound CardsA sound card is an expansion component used in computers to receive and send audio.Physical goods`txcd_34040017`Video/Graphics CardAn expansion card that allows the computer to send graphical information to a video display device such as a monitor, TV, or projector. Video cards are often used by gamers in place of integrated graphics due to their extra processing power and video ram.Physical goods`txcd_34040018`Web CameraA webcam is a video camera that feeds or streams an image or video in real time to or through a computer to a computer network, such as the Internet. Webcams are typically small cameras that sit on a desk, attach to a user's monitor, or are built into the hardware.Physical goods`txcd_35010000`BooksBooks or booklets consisting of text or illustrations bound in a stiffer cover than the pages.Physical goods`txcd_35010001`Books for ChildrenChildren's books including picture books, painting, drawing, and activity books.Physical goods`txcd_35010400`Religious BooksPrinted religious books and manuals.Physical goods`txcd_35010410`BiblesThe sacred writings of a religion.Physical goods`txcd_35010500`Audiobook (Physical Copy)Recognized in the ordinary and usual sense as a \"book\", except that the product is audio and delivered electronically or on a CD/DVD instead of in a printed format.Physical goods`txcd_35020100`NewspapersPublications distributed to the public at regular intervals that contains news of general interest.Physical goods`txcd_35020200`PeriodicalsPublications, including magazines, distributed on a periodic basis.Physical goods`txcd_35020220`Magazine by SubscriptionPeriodicals, printed, sold by subscription.Physical goods`txcd_36010001`Flea & Tick ProductsFlea and tick products for animal use including soaps, cleaning solutions, and shampoos (e.g., flea collars, flea powder, tick and flea soap, and tick sprays).Physical goods`txcd_36010002`Over-the-Counter Drugs for Animal Use Without a PrescriptionDrugs or substance for treating animals and intended for use in the diagnosis, cure, mitigation, treatment, or prevention of disease.Physical goods`txcd_36010003`Over-the-Counter Medical Supplies for PetsMedical supplies available without a prescription and used in the treatment of companion animals (e.g., first aid items such as bandages and gauze).Physical goods`txcd_36010004`Pet FoodFood for household pets that is consumed for nutritional value. This code is not intended for food related to working farm animals or animals raised for meat or milk production.Physical goods`txcd_36010005`Pet VitaminsPet food products offering additional nutrients or functional ingredients.Physical goods`txcd_37010000`Personal ComputersPersonal computers, including laptops, tablets, desktops.Physical goods`txcd_37010003`Computer Storage MediaRemovable storage media such as compact disks, flash drives, thumb drives, flash memory cards.Physical goods`txcd_37010036`Printer InkInk cartridges for printers.Physical goods`txcd_37030002`Globes - StudentA globe that could be used by a student in a course of study as a reference and to learn the subject being taught.Physical goods`txcd_37030003`Maps - StudentA map that could be used by a student in a course of study as a reference and to learn the subject being taught.Physical goods`txcd_37040001`Printer PaperPaper suitable for printers.Physical goods`txcd_37050001`School TextbooksBooks that are required or approved for use in conjunction with a curriculum provided by an educational institution.Physical goods`txcd_37060001`Bookbags/Backpacks - StudentBags designed to carry students' books during the school day. This category does not include backpacks for traveling, hiking, camping, etc.Physical goods`txcd_37060002`CalculatorsTypically a small electronic device with a keyboard and visual display used for making used for making mathematical calculations.Physical goods`txcd_37060003`Daily PlannersA calendar based notebook to aid in outlining one's daily appointments, classes, activities, etc.Physical goods`txcd_37060008`Padlocks - StudentPortable locks used by students in a school setting to prevent use, theft, vandalism or harm.Physical goods`txcd_37060009`School Art SuppliesAn item commonly used by a student in a course of study for artwork. This category is limited to the following items...clay and glazes, paints, paintbrushes for artwork, sketch and drawing pads, watercolors.Physical goods`txcd_37060010`Dictionaries/ThesaurusesReference printed material commonly used by a student in a course of study as a reference and to learn the subject being taught.Physical goods`txcd_37060011`Sheet music - StudentSheet music used by a student in conjunciton with school activities.Physical goods`txcd_37060012`School SuppliesAn item commonly used by a student in a course of study. This category is limited to the following items...binders, blackboard chalk, cellophane tape, compasses, composition books, crayons, erasers, folders, glue/paste/glue sticks, highlighters, index cards, index card boxes, legal pads, lunch boxes, markers, notebooks, paper (copy, graph, tracing, manila, colored, construction, notebook), pencils, pencil boxes, pencil sharpeners, pens, posterboard, protractors, rulers, scissors, writing tablets.Physical goods`txcd_37060013`Staplers/StaplesA device that joins pages of paper or similar material by fastening a thin metal staple through the sheets and folding the ends underneath.Physical goods`txcd_37060035`Push pins/tacksPins/tacks to secure papers, pictures, calendars, etc. to bulletin boards, walls, etc.Physical goods`txcd_37060045`Graphing CalculatorsA handheld computer that is capable of plotting graphs, solving simultaneous equations, and performing other tasks with variables.Physical goods`txcd_37060046`Musical instruments - StudentA musical instrument used by a student in conjunciton with school activities.Physical goods`txcd_37070001`Canned Software - Tangible MediumPrewritten (\"canned\") software delivered on tangible media.Physical goods`txcd_37070002`Canned Software - Tangible Medium - Non-recreationalPrewritten (\"canned\") software on tangible media used for non-recreational purposes, such as antivirus, database, educational, financial, word processing, etc. The software is intended for personal use, rather than for consumption in a commercial enterprise. Note: The distinction between business use and personal use for this tax code is relevant only if you are transacting business in the US.Physical goods`txcd_37071001`Software Maintenance Agreement - Optional, Prewritten, Electronic Delivery, Updates OnlyA charge, apart from the charge for the software, for an agreement that is not required to be purchased in order to obtain the software. The agreement entitles the software user to obtain periodic canned software updates, upgrades, and error corrections in electronic form.Digital products`txcd_37071002`Software Maintenance Agreement - Optional, Prewritten, Electronic Delivery, Updates and ServicesA charge, apart from the charge for the software, for an agreement that is not required to be purchased in order to obtain the software. The agreement entitles the software user to obtain periodic canned software updates, upgrades, and error corrections in electronic form, as well as non-separately stated support sevices, such as consulation or phone support.Digital products`txcd_37071003`Software Maintenance Agreement - Optional, Prewritten, Services OnlyA charge, apart from the charge for the software, for an agreement that is not required to be purchased in order to obtain the software. The agreement entitles the software user to only support sevices, such as consulation or phone support. The agreements does not include periodic canned software updates, upgrades, or error corrections in any form.Services`txcd_37071006`Software Maintenance Agreement - Optional, Prewritten, Tangible Delivery, Updates OnlyA charge, apart from the charge for the software, for an agreement that is not required to be purchased in order to obtain the software. The agreement entitles the software user to obtain periodic canned software updates, upgrades, and error corrections in tangible form.Physical goods`txcd_37071007`Software Maintenance Agreement - Optional, Prewritten, Tangible Delivery, Updates and ServicesA charge, apart from the charge for the software, for an agreement that is not required to be purchased in order to obtain the software. The agreement entitles the software user to obtain periodic canned software updates, upgrades, and error corrections in tangible form, as well as non-separately stated support sevices, such as consulation or phone support.Physical goods`txcd_37071009`Software Maintenance Agreement - Optional, Custom, Electronic Delivery, Updates OnlyA charge, apart from the charge for the software, for an agreement that is not required to be purchased in order to obtain the software. The agreement entitles the software user to obtain, from the original seller of the software, periodic custom software updates, upgrades, and error corrections in electronic form.Digital products`txcd_37071010`Software Maintenance Agreement - Optional, Custom, Electronic Delivery, Updates and ServicesA charge, apart from the charge for the software, for an agreement that is not required to be purchased in order to obtain the software. The agreement entitles the software user to obtain, from the original seller of the software, periodic custom software updates, upgrades, and error corrections in electronic form, as well as non-separately stated support sevices, such as consulation or phone support.Digital products`txcd_37071011`Software Maintenance Agreement - Optional, Custom, Services OnlyA charge, apart from the charge for the software, for an agreement that is not required to be purchased in order to obtain the software. The agreement entitles the software user to only support sevices, such as consulation or phone support. The agreements does not include periodic custom software updates, upgrades, or error corrections in any form.Services`txcd_37071014`Software Maintenance Agreement - Optional, Custom, Tangible Delivery, Updates OnlyA charge, apart from the charge for the software, for an agreement that is not required to be purchased in order to obtain the software. The agreement entitles the software user to obtain, from the original seller of the software, periodic custom software updates, upgrades, and error corrections in tangible form.Services`txcd_37071015`Software Maintenance Agreement - Optional, Custom, Tangible Delivery, Updates and ServicesA charge, apart from the charge for the software, for an agreement that is not required to be purchased in order to obtain the software. The agreement entitles the software user to obtain, from the original seller of the software, periodic custom software updates, upgrades, and error corrections in tangible form, as well as non-separately stated support sevices, such as consulation or phone support.Services`txcd_37071101`Software Maintenance Agreement - Mandatory, Prewritten, Electronic DeliveryA charge, apart from the charge for the software, for an agreement that is required to be purchased in order to obtain the software. The agreement entitles the software user to obtain periodic canned software updates, upgrades, and error corrections in electronic form. The agreement may or may not also include non-separately stated support sevices, such as consulation or phone support.Digital products`txcd_37071103`Software Maintenance Agreement - Mandatory, Prewritten, Tangible DeliveryA charge, apart from the charge for the software, for an agreement that is required to be purchased in order to obtain the software. The agreement entitles the software user to obtain periodic canned software updates, upgrades, and error corrections in tangible form. The agreement may or may not also include non-separately stated support sevices, such as consulation or phone support.Physical goods`txcd_37071104`Software Maintenance Agreement - Mandatory, Custom, Electronic DeliveryA charge, apart from the charge for the software, for an agreement that is required to be purchased in order to obtain the software. The agreement entitles the software user to obtain periodic custom software updates, upgrades, and error corrections in electronic form. The agreement may or may not also include non-separately stated support sevices, such as consulation or phone support.Digital products`txcd_37071106`Software Maintenance Agreement - Mandatory, Custom, Tangible DeliveryA charge, apart from the charge for the software, for an agreement that is required to be purchased in order to obtain the software. The agreement entitles the software user to obtain periodic custom software updates, upgrades, and error corrections in tangible form. The agreement may or may not also include non-separately stated support sevices, such as consulation or phone support.Services`txcd_40010000`Cereal GrainsGrain, as an important staple food, is the harvested seed of grasses such as wheat, oats, rice, corn, orghum, millet, rye, and barley.Physical goods`txcd_40010001`PastaA dough of flour, eggs, and water made in different shapes and dried or used fresh.Physical goods`txcd_40010002`RiceThe starchy grain of ceral grass used as a staple food.Physical goods`txcd_40020002`Edible OilsCooking oils such as olive oil, vegetable oil, corn oil, etc.Physical goods`txcd_40020004`Sugar and Sugar SubstitutesA sweet substance especially from the plants sugar cane and sugar beet, used to make food and drinks sweet. This category also supports artifical sugars such as saccharine, aspartame, sucralose, etc.Physical goods`txcd_40020005`FlourFlour is a white or brown powder that is made by grinding grain, used chielfy in baking.Physical goods`txcd_40020006`HerbsA type of plant whose leaves are used in cooking to give flavor to particular dishes, such as basil, oregano, and cilantro, etc.Physical goods`txcd_40020007`SeasoningsSeasonings such as salt, pepper, paprika, chili powder, etc.Physical goods`txcd_40020008`Food ColoringAny edible dye, pigment, or substance that imparts color when it is added to food or drink.Physical goods`txcd_40040000`Food for Non-Immediate ConsumptionFood and beverage products sold at retail grocery-type establishments that are intended for consumption off the premises of the vendor.Physical goods`txcd_40040003`Cocoa MixA dark brown powder made from cocoa beans, used to add a chocolate flavor to beverages, as in hot chocolate.Physical goods`txcd_40040004`Baby FoodFoods and formulas meant for feeding babies and infants.Physical goods`txcd_40040009`Baking CocoaA dark brown powder made from cocoa beans, used to make chocolate and add a chocolate flavor to the baking process.Physical goods`txcd_40040010`Ice CubesIce for human consumption.Physical goods`txcd_40040013`Meat and Meat ProductsThe flesh (muscle tissue) of an animal consumed as food.Physical goods`txcd_40040016`Nuts and SeedsNuts and seeds in unroasted, unsalted, unflavored form.Physical goods`txcd_40040017`Nuts and Seeds, ProcessedNuts and seeds that have been salted, spiced, smoked, or roasted.Physical goods`txcd_40040019`VegetablesVegetables are parts of plants that are consumed as food.Physical goods`txcd_40040020`Cracker BreadCracker bread is a thin and crispy flat bread that is often used as an accompaniment to meals in many different cultures, most notably Turkish, Indian, and Mediterranean cuisine.Physical goods`txcd_40040021`Plain BreadsPlain Breads include items ordinary loaves, such as sourdough, multigrain, and rye loaves.Physical goods`txcd_40040022`Speciality BreadsSpecialty Breads are artisan breads, including cheese bread, olive loaves, date and walnut bread, etc.Physical goods`txcd_40050003`Food/TPP Bundle - with Food between 50% and 75%Food bundle or basket containing food staples combined with tangible personal property, with the food comprising between 50% and 75% of the overall value of the bundle.Physical goods`txcd_40050004`Food/TPP Bundle with Food 50% to 90%Food bundle or basket containing food staples combined with tangible personal property, with the food comprising between 50% and 90% of the overall value of the bundle.Physical goods`txcd_40050005`Food/TPP Bundle with Food 90% or moreFood bundle or basket containing food staples combined with tangible personal property, with the food comprising 90% or more of the overall value of the bundle.Physical goods`txcd_40050006`Food/TPP Bundle with Food less than 50%Food bundle or basket containing food staples combined with tangible personal property, with the food comprising less than 50% of the overall value of the bundle.Physical goods`txcd_40050007`Food/TPP Bundle - with Food 90% or more - Food is all CandyFood bundle or basket containing food staples combined with tangible personal property, with the food comprising 90% or more of the overall value of the bundle, where all food consists of candy (not containing flour).Physical goods`txcd_40050008`Food/TPP Bundle - with Food between 50% and 75% - Food is all CandyFood bundle or basket containing food staples combined with tangible personal property, with the food comprising between 50% and 75% of the overall value of the bundle, where all food consists of candy (not containing flour).Physical goods`txcd_40050009`Food/TPP Bundle - with Food between 76% and 89%Food bundle or basket containing food staples combined with tangible personal property, with the food comprising between 76% and 89% of the overall value of the bundle.Physical goods`txcd_40050010`Food/TPP Bundle - with Food between 76% and 89% - Food is all CandyFood bundle or basket containing food staples combined with tangible personal property, with the food comprising between 76% and 89% of the overall value of the bundle, where all food consists of candy (not containing flour).Physical goods`txcd_40051001`Food/Candy Bundle - with Candy 10% or lessFood bundle or basket containing food staples combined with candy, with the candy comprising 10% or less of the overall value of the bundle (food comprises 90% or more). Note that any candy containing flour should be considered as food (and not candy) when determining bundle percentages.Physical goods`txcd_40051002`Food/Candy Bundle - with Candy 11% to 24%Food bundle or basket containing food staples combined with candy, with the candy comprising between 11% and 24% of the overall value of the bundle (food comprises 76% to 89%). Note that any candy containing flour should be considered as food (and not candy) when determining bundle percentages.Physical goods`txcd_40051003`Food/Candy Bundle - with Candy 25% to 49%Food bundle or basket containing food staples combined with candy, with the candy comprising between 25% and 49% of the overall value of the bundle (food comprises 51 to 75%). Note that any candy containing flour should be considered as food (and not candy) when determining bundle percentages.Physical goods`txcd_40051004`Food/Candy Bundle - with Candy 50% or moreFood bundle or basket containing food staples combined with candy, with the candy comprising 50% or more of the overall value of the bundle (food comprises 50% or less). Note that any candy containing flour should be considered as food (and not candy) when determining bundle percentages.Physical goods`txcd_40060003`Food for Immediate ConsumptionFood and beverage products in a form suited for consumption on the premises of the vendor, described as prepared foods, ready-to-eat foods, or meals. Always utilize this PTC for heated foods, heated beverages, dispensed beverages, and foods sold with eating utensils.Physical goods`txcd_40070001`Granola Bars, Cereal Bars, Energy Bars, Protein Bars Containing FlourGranola Bars, Cereal Bars, Energy Bars, Protein Bars containing flour.Physical goods`txcd_40070002`Granola Bars, Cereal Bars, Energy Bars, Protein Bars Containing No FlourGranola Bars, Cereal Bars, Energy Bars, Protein Bars containing no flour.Physical goods`txcd_40070005`Snack FoodsSnack foods including chips, crisps, puffs, curls or sticks, popped corn, brittle pretzels, salted nuts and salted seeds, granola products and snack mixes. This category does not include items such as crackers, cookies, snack cakes or breakfast cereal.Physical goods`txcd_40070006`Biscuits/Cookies - PlainA biscuit is a typically hard, small baked product that would be called a \"cookie\" In the US.Physical goods`txcd_40070007`Biscuits/Cookies - Chocolate CoatedA biscuit is a typically hard, small baked product that would be called a \"cookie\" In the US. This cookie is covered or coated in chocolate.Physical goods`txcd_40090001`Dietary SupplementsTablet, capsule, powder, softgel, gelcap, or liquid intended that contain a vitamin, mineral, herb, other botanical, or amino acid and is labeled as a dietary supplement identifiable by the \"supplement facts\" box found on the label.Physical goods`txcd_40090002`Protein PowderNutritional supplement in powder form, dairy based or plant based, focused on increasing ones intake of protein for various benefits.Physical goods`txcd_40090005`Infant FormulaA food which intended to be or is represented for special dietary use solely as a food for infants by reason of its simulation of human milk or its suitability as a complete or partial substitute for human milk.Physical goods`txcd_40090008`Nutritional SupplementsProducts in various forms that are intended for ingestion and represented as a conventional food and labeled as a nutritional supplement and identifiable by the \"Nutrition Facts\" box found on the label.Physical goods`txcd_40100001`CandyA preparation of natural or artificial sweeteners in combination with chocolate, fruits, nuts, or other ingredients or flavorings in the form of bars, drops, or pieces.Physical goods`txcd_40100002`Candy (Contains Flour)A preparation of natural or artificial sweeteners in combination with chocolate, fruits, nuts, or other ingredients or flavorings in the form of bars, drops, or pieces and that contains flour as an ingredient.Physical goods`txcd_40100003`Ice Cream, Packaged - One Pint or GreaterIce cream, frozen yogurt, or similar, packaged in a container that is one pint or larger. The default behavior of this category assumes off-premises consumption.Physical goods`txcd_40100004`Ice Cream, Packaged - Less Than One Pint ContainerIce cream, frozen yogurt, or similar, packaged in a container that is less than one pint. The default behavior of this category assumes off-premises consumption.Physical goods`txcd_40100010`Chewing GumA soft, cohesive substance designed to be chewed without being swallowed.Physical goods`txcd_40100011`Breath MintsA mint -flavored candy intended to freshen the breath.Physical goods`txcd_40400005`Dried Fruit - UnsweetenedDried fruit is fruit from which the majority of the original water content has been removed either naturally, through sun drying, or through the use of specialized dryers or dehydrators. Common dried fruits are dried fruits sold are raisins, dates, prunes, and figs.Physical goods`txcd_41020001`Alcoholic Beverages - Beer/Malt BeverageBeer is an alcoholic drink that is flavored with hops and consists of yeast-fermented malt. Malt beverage is a type of alcoholic drink in which the grain, or seed, of the barley plant is the main ingredient. This code represents packaged beverages for non-immediate consumption.Physical goods`txcd_41020002`Alcoholic Beverages - SpiritsAlcoholic beverages created in a distillation process, and are known by the common names of vodka, gin, whiskey, rum, tequila, brandy, etc. This code represents packaged beverages for non-immediate consumption.Physical goods`txcd_41020003`Alcoholic Beverages - WineAn alcoholic beverage created through fermentation of grapes of various varieties. This code represents packaged beverages for non-immediate consumption.Physical goods`txcd_41030001`Bottled WaterRegular, unsweetened, non carbonated water sold in containers. Includes waters containing only natural flavors or essences. Does not include distilled water.Physical goods`txcd_41030002`Bottled Water - Carbonated ArtificiallyBottled Water for human consumption, unsweetened, carbonated artifically. Includes carbonated waters containing only natural flavors or essences.Physical goods`txcd_41030003`Bottled Water - Carbonated NaturallyBottled Water for human consumption, unsweetened, carbonated naturally. Includes carbonated waters containing only natural flavors or essences.Physical goods`txcd_41040002`Carbonated Soft Drinks - 0% Fruit or Vegetable juiceCarbonated non-alcoholic beverages that contain natural or artificial sweeteners, and zero natural fruit or vegetable juice, not including carbonated water. Includes energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040003`Bottled Tea - Non-Carbonated - SweetenedReady to drink non-carbonated beverage containing tea with natural or artificial sweeteners.Physical goods`txcd_41040004`Bottled water - SweetenedBottled water for human consumption, containing natural or artificial sweeteners, non-carbonated. Waters containing zero calorie natural flavoring should be associated with the 'Bottled Water' PTC.Physical goods`txcd_41040005`Bottled water - Carbonated - SweetenedBottled water for human consumption, containing natural or artificial sweeteners, carbonated. Carbonated waters containing zero calorie natural flavoring should be associated with either the the 'Bottled Water - Carbonated Artificially' PTC or the 'Bottled Water - Carbonated Naturally' PTC.Physical goods`txcd_41040008`Non-Carbonated Soft Drinks - 0% Fruit or Vegetable juiceNon-carbonated, non-alcoholic beverages that contain sweeteners, and zero natural fruit or vegetable juice, such as sweetened cocktail mixes that can be combined with alcohol, but doesn't include flavored water.Physical goods`txcd_41040009`Soft Drinks - Carbonated - 1 -9% Vegetable juiceCarbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 1 - 9% natural vegetable juice. This does not include flavored carbonated water. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040010`Soft Drinks - Carbonated - 1-9% Fruit juiceCarbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 1 - 9% natural fruit juice. This does not include flavored carbonated water. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040011`Soft Drinks - Carbonated - 10-24% Fruit juiceCarbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 10 - 24% natural fruit juice. This does not include flavored carbonated water. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040012`Soft Drinks - Carbonated - 10-24% Vegetable juiceCarbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 10 - 24% natural vegetable juice. This does not include flavored carbonated water. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040013`Soft Drinks - Carbonated - 100% Fruit or Vegetable juiceCarbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 100% natural fruit or vegetable juice. This does not include flavored carbonated water. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040014`Soft Drinks - Carbonated - 25-50% Fruit juiceCarbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 25 - 50% natural fruit juice. This does not include flavored carbonated water. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040015`Soft Drinks - Carbonated - 25-50% Vegetable juiceCarbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 25 - 50% natural vegetable juice. This does not flavored carbonated water. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040016`Soft Drinks - Carbonated - 51-69% Fruit juiceCarbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 51 - 69% natural fruit juice. This does not include flavored carbonated water. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040017`Soft Drinks - Carbonated - 51-69% Vegetable juiceCarbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 51 - 69% natural vegetable juice. This does not include flavored carbonated water. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040018`Soft Drinks - Carbonated - 70-99% Fruit juiceCarbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 70 - 99% natural fruit juice. This does not include flavored carbonated water. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040019`Soft Drinks - Carbonated - 70-99% Vegetable juiceCarbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 70 - 99% natural vegetable juice. This does not include flavored carbonated water. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040020`Soft Drinks - Non-Carbonated - 1 -9% Vegetable juiceNon-carbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 1 - 9% natural vegetable juice. This does not include flavored water. This does include sweetened cocktail mixes that can be combined with alcohol. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040021`Soft Drinks - Non-Carbonated - 1-9% Fruit juiceNon-carbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 1 - 9% natural fruit juice. This does not include flavored water. This does include sweetened cocktail mixes that can be combined with alcohol. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040022`Soft Drinks - Non-Carbonated - 10-24% Fruit juiceNon-carbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 10 - 24% natural fruit juice. This does not include flavored water. This does include sweetened cocktail mixes that can be combined with alcohol. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040023`Soft Drinks - Non-Carbonated - 10-24% Vegetable juiceNon-carbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 10 - 24% natural vegetable juice. This does not include flavored water. This does include sweetened cocktail mixes that can be combined with alcohol. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040024`Soft Drinks - Non-Carbonated - 100% Fruit or Vegetable juiceNon-carbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 100% natural fruit or vegetable juice. This does not include flavored water. This does include sweetened cocktail mixes that can be combined with alcohol. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040025`Soft Drinks - Non-Carbonated - 25-50% Fruit juiceNon-carbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 25 - 50% natural fruit juice. This does not include flavored water. This does include sweetened cocktail mixes that can be combined with alcohol. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040026`Soft Drinks - Non-Carbonated - 25-50% Vegetable juiceNon-carbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 25 - 50% natural vegetable juice. This does not include flavored water. This does include sweetened cocktail mixes that can be combined with alcohol. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040027`Soft Drinks - Non-Carbonated - 51-69% Fruit juiceNon-carbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 51 - 69% natural fruit juice. This does not include flavored water. This does include sweetened cocktail mixes that can be combined with alcohol. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040028`Soft Drinks - Non-Carbonated - 51-69% Vegetable juiceNon-carbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 51 - 69% natural vegetable juice. This does not include flavored water. This does include sweetened cocktail mixes that can be combined with alcohol. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040029`Soft Drinks - Non-Carbonated - 70-99% Fruit juiceNon-carbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 70 - 99% natural fruit juice. This does not include flavored water. This does include sweetened cocktail mixes that can be combined with alcohol. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41040030`Soft Drinks - Non-Carbonated - 70-99% Vegetable juiceNon-carbonated nonalcoholic beverages that contain natural or artificial sweeteners, and 70 - 99% natural vegetable juice. This does not include flavored water. This does include sweetened cocktail mixes that can be combined with alcohol. This does include beverages marketed as energy drinks that carry a Nutrition Facts label and contain a blend of energy enhancing ingredients.Physical goods`txcd_41050001`Bottled coffee - Containing Milk or Milk SubstituteReady to drink coffee based beverage containing milk or milk substitute.Physical goods`txcd_41050002`Bottled Coffee - No Milk - SweetenedReady to drink coffee based beverage not containing milk, containing natural or artificial sweetener.Physical goods`txcd_41050003`Bottled Coffee - No Milk - UnsweetenedReady to drink coffee based beverage containing neither milk nor natural or artificial sweeteners.Physical goods`txcd_41050004`Bottled Tea - Carbonated - UnsweetenedReady to drink carbonated beverage containing tea and without any natural or artificial sweeteners.Physical goods`txcd_41050005`Bottled Tea - Non-Carbonated - UnsweetenedReady to drink non-carbonated beverage containing tea without natural or artificial sweeteners.Physical goods`txcd_41050006`Coffee Beans or Ground CoffeeCoffee beans or ground coffee.Physical goods`txcd_41050007`Bottled Tea - Carbonated - SweetenedReady to drink carbonated beverage containing tea with natural or artificial sweeteners.Physical goods`txcd_41050008`Tea Leaves or Tea BagsTea leaves and tea bags.Physical goods`txcd_41051001`Energy Beverages - Carbonated - with Supplement Facts LabelCarbonated beverages marketed as energy drinks, carrying a Supplement Facts Label, that contain a blend of energy enhancing vitamins, minerals, herbals, stimulants, etc.Physical goods`txcd_41051002`Energy Beverages - Non-Carbonated - with Supplement Facts LabelNon-carbonated beverages marketed as energy drinks, carrying a Supplement Facts Label, that contain a blend of energy enhancing vitamins, minerals, herbals, stimulants, etc.Physical goods`txcd_41052001`Food and Beverage - Non-Alcoholic Beer/ WineNon-alcoholic beer is beer with little or no alcohol content. In the United States, beverages containing less than 0.5% alcohol by volume (ABV) fall under this term.Physical goods`txcd_41053001`Nutritional Supplement, Protein Drinks, Shakes - Contains MilkReady to drink beverages, containing milk, formulated and labeled for their nutritional value, such as increased caloric or protein intake.Physical goods`txcd_41053002`Nutritional Supplement, Protein Drink, Shakes - Contains No MilkReady to drink beverages, not containing milk, formulated and labeled for their nutritional value, such as increased caloric or protein intake and containing natural or artificial sweeteners.Physical goods`txcd_41054001`Powdered Drink Mixes - To Be Mixed with MilkPowdered mixes to be reconstituted into a drinkable beverage using milk or a milk substitute.Physical goods`txcd_41054002`Powdered Drink Mixes - To Be Mixed with WaterPowdered mixes to be reconstituted into a drinkable beverage using water.Physical goods`txcd_41060003`Milk SubstitutesMilk type beverages from non-animal sources, such as soy, rice, almond, coconut, peanut, and hemp.Physical goods`txcd_41060006`Milk Coffee Tea Cocoa BeveragesMilk or milk substitutes, or drinks with bases of milk, coffee, unsweetened tea or cocoa.Physical goods`txcd_50021001`Fitness Centers - Dues and Membership FeesCharges associated with recurring membership dues allowing access or use of health clubs and fitness clubs. Outside of the United States, these charges are not applicable for services provided by non-profit sports organizations.Services`txcd_50021002`Fitness Centers - Initiation FeesInitiation fees are an upfront one-time charge occurring at the time a new member joins a health club or fitness center. Outside of the United States, these charges are not applicable for services provided by non-profit sports organizations.Services`txcd_50021003`Fee for Personal Training/Fitness ClassesCharges associated with the service of providing in-person personal fitness training or group excercise classes. Outside of the United States, these charges are not applicable for services provided by non-profit sports organizations.Services`txcd_50021101`Fitness Centers - Single Use Access FeesCharges associated with one-time access for use of health clubs and fitness clubs. Outside of the United States, these charges are not applicable for services provided by non-profit sports organizations.Services`txcd_50021103`Fee For Sport Instruction ClassesCharges associated with the service of providing in-person instruction in an athletic pursuit, eg. golf, tennis, skiing, etc. Outside of the United States, these charges are not applicable for services provided by non-profit sports organizations.Services`txcd_90000001`Cash DonationA monetary donation for a cause, in which the donee receives nothing in return.Physical goods`txcd_90020001`Optional GratuityGratuity, otherwise known as a tip, is money that a customer leaves for an employee or employees that is in addition to and separate from the amount due for the goods or services rendered.Services`txcd_92010001`ShippingA shipping charge for the delivery of physical goods in conjunction with the sale of these goods. This tax category is not appropriate for stand alone transportation charges that are not associated with the sale of the goods being delivered.Physical goods",
  "title": "Product tax codes | Stripe Documentation",
  "description": "Stripe Tax uses product tax codes to determine a product's tax rate.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/products-prices/pricing-models",
  "markdown": "# Recurring pricing models | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about common pricing models and how to create them.\n\n[Pricing models](https://docs.stripe.com/products-prices/pricing-models \"pricing model\") are patterns that represent your business on Stripe. With [Product](https://docs.stripe.com/api/products) and [Price](https://docs.stripe.com/api/prices) objects, you can model what you sell and how you charge for it.\n\n[](#flat-rate)\n\nMany SaaS businesses offer their customers a choice of escalating service options. This flat-rate pricing model is called _good-better-best_. Customers choose a service tier (good, better, or best) and pay a flat rate for it.\n\nImagine a business called Togethere that sells a collaboration platform. They offer three different service levels: basic, starter, and enterprise. For each service level, they offer a monthly and yearly price. Togethere operates in several countries, so they have prices in multiple currencies.\n\nIn this example, Togethere has three products: `Basic`, `Starter`, `Enterprise`. Each product has several different prices. The basic level has prices for 10 USD per month and 100 USD per year. Both prices are for the same `Basic` product, so they share the same product description on the customer’s receipt and invoice.\n\nHere’s what that model looks like on Stripe:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/pricing_model-flat-rate.4f63dae2c4f7078ae10f30324539b0cc.png)\n\nFlat rate: Good-better-best pricing model\n\n### Model good-better-best on Stripe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create a good-better-best model on Stripe through the Dashboard follow the steps below.\n\nFirst, create the `Basic` product. To learn about all the options for creating a product, see the [prices guide](https://docs.stripe.com/products-prices/manage-prices#create-product).\n\n1.  Go to [Product catalog](https://dashboard.stripe.com/products).\n2.  Click **\\+ Add product**.\n3.  Enter the `Name` of your product.\n4.  _(Optional)_ Add a **Description**. The description appears at checkout, on the [customer portal](https://docs.stripe.com/customer-management), and in [quotes](https://docs.stripe.com/quotes).\n\nNext, create the monthly price for the `Basic` product:\n\n1.  Click **Advanced pricing options**.\n2.  Select **Recurring** and choose **Flat rate** for the pricing model.\n3.  Enter the price amount-in this case, `10.00`.\n4.  Select **Monthly** for the **Billing period**.\n5.  Click **Next** to save the price.\n\nThen, create the yearly price for the `Basic` product:\n\n1.  Click **\\+ Add another price**.\n2.  Select **Recurring** and choose **Flat rate** for the pricing model.\n3.  Enter the price amount-in this case, `100.00`.\n4.  Select **Yearly** for the **Billing period**.\n5.  Click **Add product** to save the product and price. You can edit the product and price later.\n\nThe subscription integration guide explains how to fit pricing models into a full integration.\n\n*   If you’re using Stripe Checkout, the next step is to [create a Checkout session](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=stripe-hosted#create-session) for your site. Make sure to set up Stripe.\n*   If you’re using Stripe Elements, the next step is to [create a Customer](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements#create-customer). Make sure you set up Stripe and the sample application.\n\n[](#per-seat)\n\nTogethere, our example collaboration platform company, also wants to offer a per-seat plan. Per-seat pricing is another common offering for SaaS businesses. Togethere’s customers pick how many seats they’ll use, and Togethere charges based on that amount.\n\nTo model this scenario, Togethere creates a product and price structure where each unit represents a user. When Togethere creates a subscription for a customer, the customer specifies the number of users for that subscription.\n\nHere’s what that model looks like on Stripe:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/pricing_model-per-seat.2654fb6a0293449309538e05de16034f.png)\n\nPer-seat pricing model\n\nSee the [advanced](https://docs.stripe.com/billing/subscriptions/usage-based/pricing-models) pricing model section for examples of other models. [Flat rate and per-seat](#adding-flat-fees) pricing, where you charge a customer a flat monthly fee in addition to a per-seat rate, is another common model for SaaS businesses.\n\n### Model per-seat pricing on Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a per-seat model on Stripe through the Dashboard follow the steps below.\n\nFirst, create the `Per-seat` product. To learn about all the options for creating a product, see the [prices guide](https://docs.stripe.com/products-prices/manage-prices#create-product).\n\n1.  Go to [Product catalog](https://dashboard.stripe.com/products).\n2.  Click **+Add product**.\n3.  Enter the **Name** of the product: `Per-seat`, in this case.\n4.  _(Optional)_ Add a **Description**. The description appears at checkout, on the [customer portal](https://docs.stripe.com/customer-management), and in [quotes](https://docs.stripe.com/quotes).\n\nNext, create the monthly price for the `Per-seat` product:\n\n1.  Select **Recurring**.\n2.  Enter the price amount-in this case, `80.00`.\n3.  Select **Monthly** for the **Billing period**.\n4.  Click **Add product** to save the product and price. You can edit the product and price later.\n\nTo create a subscription using that price:\n\n1.  Go to the **Payments** > **Subscriptions** page.\n2.  Click **\\+ Create subscription**.\n3.  Find or add a customer.\n4.  Search for the `Per-seat` product you created and select the price you want to use.\n5.  _(Optional)_ Select **Collect tax automatically** to use Stripe Tax.\n6.  Click **Start subscription** to start it immmediately or **Schedule subscription** to start it on another schedule.\n\nThe subscription integration guide explains how to fit pricing models into a full integration.\n\n*   If you’re using Stripe Checkout, the next step is to [create a Checkout session](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=stripe-hosted#create-session) for your site. Make sure you set up Stripe.\n*   If you’re using Stripe Elements, the next step is to [create a Customer](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements#create-customer). Make sure you set up Stripe and the sample application.\n\nFor other versions of per-seat pricing, see the [advanced](#advanced) models section.\n\n[](#usage-based-pricing)\n\nUsage-based pricing is a common pricing model for SaaS businesses that enables you to charge based on a customer’s usage of your product or service. As a business, you provide access to your service and bill your customer based on their usage. To see what an end-to-end integration based on the usage-based pricing model looks like, read the [usage-based pricing models](https://docs.stripe.com/billing/subscriptions/usage-based/pricing-models) guide.\n\n[](#tiered-pricing)\n\nPrices can represent tiers, allowing the unit cost to change with quantity or usage. Togethere might, for example, want to offer lower rates for customers who use more projects per month. The following examples show two different ways to adjust pricing as usage increases: volume-based pricing and graduated pricing. To demonstrate these approaches to tiered pricing, we’ll use the following tiers:\n\n| Number of projects | Price per tier |\n| --- | --- |\n| 1-5 | 7 USD |\n| 6-10 | 6.50 USD |\n| 11+ | 6 USD |\n\nUse `tiers` if you need non-linear pricing when `quantity` or [usage](https://docs.stripe.com/api/billing/meter-event) changes. You can also combine tiered pricing with base fees to create more [complex pricing models](https://docs.stripe.com/billing/subscriptions/usage-based/pricing-models).\n\nWhen you [create a price](https://docs.stripe.com/api#create_price) with `billing_scheme=per_unit`, the `unit_amount` is the same regardless of how many units a customer buys. Stripe multiplies this amount by the `quantity` to determine the total cost. For example, a `unit_amount` of 5 USD creates this billing structure:\n\n| Quantity/Usage at end of period | Total cost |\n| --- | --- |\n| 1   | 5 USD |\n| 5   | 25 USD |\n| 6   | 30 USD |\n| 20  | 100 USD |\n| 25  | 125 USD |\n\nWhen you create a price with `billing_scheme=tiered`, the unit cost varies depending on how many units your customer buys. Here’s an example tier structure:\n\n| Tier | Amount (unit cost) |\n| --- | --- |\n| 1-5 (`up_to=5`) | 5 USD (`unit_amount=500`) |\n| 6-10 (`up_to=10`) | 4 USD (`unit_amount=400`) |\n| 10-15 (`up_to=15`) | 3 USD (`unit_amount=300`) |\n| 15-20 (`up_to=20`) | 2 USD (`unit_amount=200`) |\n| 20+ (`up_to=inf`) | 1 USD (`unit_amount=100`) |\n\nMultiplication happens:\n\n*   At the start of the billing period if the `Price` objects have `recurring.usage_type = licensed`.\n*   At the end of the billing period if the `Price` objects have `recurring.usage_type = metered`.\n\nWith tiered billing, you:\n\n*   Set the `tiers_mode` to either `volume` or `graduated`.\n*   Create a `tiers` array to represent the tiers structure.\n\nSee also the [volume-based](https://docs.stripe.com/products-prices/pricing-models#volume-based-pricing) and [graduated](https://docs.stripe.com/products-prices/pricing-models#graduated-pricing) pricing examples.\n\n### Volume-based pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith volume-based pricing, the subscription item is billed at the tier corresponding to the amount of usage at the end of the period. To implement volume-based billing tiers, set `volume` as the value of `tiers_mode`:\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d nickname=\"Project Volume Pricing\" \\  -d \"tiers[0][unit_amount]\"=700 \\  -d \"tiers[0][up_to]\"=5 \\  -d \"tiers[1][unit_amount]\"=650 \\  -d \"tiers[1][up_to]\"=10 \\  -d \"tiers[2][unit_amount]\"=600 \\  -d \"tiers[2][up_to]\"=inf \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d \"recurring[usage_type]\"=metered \\  -d product=  {{PRODUCT_ID}}   \\  -d tiers_mode=volume \\  -d billing_scheme=tiered \\  -d \"expand[0]\"=tiers`\n\nUnder volume-based pricing, a customer with 5 projects is charged 35 USD at the end of the period: 7 USD for each of the 5 projects. However, if they accumulate 6 projects the following month, then all projects are billed at the `6-10` rate. That month, they’re charged 39 USD (6.50 × 6).\n\nWith `tiers_mode=volume`, the entire `quantity` is multiplied by the unit cost of the tier.\n\n| Quantity/Usage at end of period | Total for volume tiered pricing |\n| --- | --- |\n| 1   | 5 USD |\n| 5   | 25 USD |\n| 6   | 24 USD |\n| 20  | 40 USD |\n| 25  | 25 USD |\n\nBecause the tier price applies to the entire `quantity` or `usage`, the total can decrease when calculating the final cost.\n\n### Graduated pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhile similar to volume pricing, graduated pricing charges for the usage in each tier instead of applying a single price to all usage. To use graduated tiers, set the value of `tiers_mode` to `graduated`:\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d nickname=\"Per-minute pricing\" \\  -d \"tiers[0][unit_amount]\"=500 \\  -d \"tiers[0][up_to]\"=5 \\  -d \"tiers[1][unit_amount]\"=400 \\  -d \"tiers[1][up_to]\"=10 \\  -d \"tiers[2][unit_amount]\"=100 \\  -d \"tiers[2][up_to]\"=inf \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d \"recurring[usage_type]\"=metered \\  -d product=  {{PRODUCT_ID}}   \\  -d tiers_mode=graduated \\  -d billing_scheme=tiered \\  -d \"expand[0]\"=tiers`\n\nWith graduated pricing, 5 projects result in the same charge as volume-based pricing—35 USD total at 7 USD per project. This changes as usage breaks out of the first tier. A customer with more than 5 projects is charged 7 USD per project for the first 5 projects, then 6.50 USD for projects 6 through 10, and finally 6 USD per project thereafter. A customer with 6 projects would be charged 41.50 USD, 35 USD for the first 5 projects and 6.50 USD for the 6th project.\n\nWith `tiers_mode=graduated`, the `quantity` is multiplied by the amount that falls into that tier. Then, the total is summed. For example, the total cost for an amount of 6 is 29 USD: 25 USD for the 5 `quantity` that falls into the 1–5 tier, plus 4 USD for the single `quantity` that falls into the 6–10 tier.\n\n| Quantity and usage at end of the period | Total for graduated tiered pricing |\n| --- | --- |\n| 1   | 5 USD |\n| 5   | 25 USD |\n| 6   | 29 USD |\n| 20  | 70 USD |\n| 25  | 75 USD |\n\n### Adding flat fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can specify a flat fee (`flat_amount`) to add to the [invoice](https://docs.stripe.com/api/invoices \"invoices\"). This works for both `tiers_mode=volume` and `tiers_mode=graduated`. For example, you can have a flat fee that increases when certain usage thresholds are met:\n\n| Tier | Amount (unit cost) | Flat fee |\n| --- | --- | --- |\n| 1-5 (`up_to=5`) | 5 USD (`unit_amount=500`) | 10 USD (`flat_amount=1000`) |\n| 6-10 (`up_to=10`) | 4 USD (`unit_amount=400`) | 20 USD (`flat_amount=2000`) |\n| 10-15 (`up_to=15`) | 3 USD (`unit_amount=300`) | 30 USD (`flat_amount=3000`) |\n| 15-20 (`up_to=20`) | 2 USD (`unit_amount=200`) | 40 USD (`flat_amount=4000`) |\n| 20+ (`up_to=inf`) | 1 USD (`unit_amount=100`) | 50 USD (`flat_amount=5000`) |\n\nIn this example, if `quantity` is `12` and `tiers_mode=volume`, the total amount to be billed is `12 * 3 USD + 30 USD = 66 USD`.\n\nIf `quantity` is `12` and `tiers_mode=graduated`, the total amount is `5 * 5 USD + 10 USD + 5 * 4 USD + 20 USD + 2 * 3 USD + 30 USD = 111 USD`. A tier can have either a `unit_amount` or a `flat_amount`, or both, but it must have at least one of the two.\n\nIf `quantity` is `0`, the total amount is `10 USD` regardless of `tiers_mode`. We always bill the first flat fee tier when `quantity=0`. To bill `0` when there’s no usage, set up an `up_to=1` tier with an `unit_amount` equal to the flat fee and omit the `flat_amount`.\n\n[](#variable-pricing)\n\nThere are two types of variable pricing models:\n\n*   **Inline pricing**: You define the price for your customer when you create a subscription, invoice, or Checkout Session.\n*   **Pay-what-you-want pricing**: The customer fills in the price they pay, like with a tip or donation. This type of variable pricing isn’t supported for recurring payments. See [Let customers decide what to pay](https://docs.stripe.com/payments/checkout/pay-what-you-want) for information about using this type of pricing for single payments.\n\n### Inline pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn some cases, you might want to use a custom price that hasn’t been preconfigured. For example, you might want to use inline prices when you manage your product catalog outside of Stripe.\n\n#### Note\n\nYou can only create inline prices through the API. Inline prices aren’t compatible with [Payment Links](https://docs.stripe.com/payment-links/api).\n\nTo create an inline price use case, pass in [price\\_data](https://docs.stripe.com/api/subscriptions/create#create_subscription-items-price_data) instead of a [price.id](https://docs.stripe.com/api/subscriptions/object#subscription_object-items-data-price-id) when you create a subscription. For example, to subscribe a customer to a monthly subscription with an inline price:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price_data][unit_amount]\"=5000 \\  -d \"items[0][price_data][currency]\"=usd \\  -d \"items[0][price_data][product]\"=  {{PRODUCT_ID}}   \\  -d \"items[0][price_data][recurring][interval]\"=month`\n\nThis creates a monthly recurring price of 50 USD for the basic service offering. By default, prices created with `price_data` are effectively archived (they’re marked as `active=false`) so that they you can’t reuse them for other customers or subscriptions. You can’t update or reuse inline prices after you create them. You can also use `price_data` with these APIs:\n\n*   [Checkout](https://docs.stripe.com/api/checkout/sessions)\n*   [Invoice Items](https://docs.stripe.com/api/invoiceitems)\n*   [Subscription Schedules](https://docs.stripe.com/api/subscription_schedules)\n\n[](#multicurrency)\n\nA single [Price](https://docs.stripe.com/api/prices \"Prices\") can support multiple currencies. This helps you manage localized pricing when selling internationally.\n\n### Create multi-currency Prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create multi-currency Prices in the [API](https://docs.stripe.com/api/prices/create) or the Dashboard.\n\nFrom the **Product details** page for a product in your [Dashboard](https://dashboard.stripe.com/test/products), click on **\\+ Add another price** to create a new price. The first currency on your Price will be the default currency. Make sure all your Prices have the same default currency. After selecting the default currency, click on **\\+ Add more currencies** to add currency options to your Price.\n\nYou can search and select from supported currencies. Stripe suggests an exchange rate based on currency values at 12:00 PM EST, but you can pick your own. For currencies that are subject to larger fluctuations, we recommend adding more of a buffer.\n\nAfter you’re done filling in the details, click **Add price** to save it.\n\n[Coupons](https://docs.stripe.com/billing/subscriptions/coupons#coupons), [Promotion Codes](https://docs.stripe.com/billing/subscriptions/coupons#promotion-codes), and [Shipping Rates](https://docs.stripe.com/payments/during-payment/charge-shipping) also support multi-currency in a similar way to Prices.\n\n### Render multi-currency Prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo show your customer the price in their currency, you can retrieve the multi-currency Price and view its [currency\\_options.<currency>.unit\\_amount](https://docs.stripe.com/api/prices/object#price_object-currency_options-unit_amount) field. The API response won’t include `currency_options` by default. To include it in the response, [expand](https://docs.stripe.com/api/expanding_objects) the `currency_options` field:\n\n`curl -G https://api.stripe.com/v1/prices/{{PRICE_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=currency_options`\n\n#### Note\n\nTo improve latency and avoid problems with rate-limiting, cache the Price instead of re-fetching it every time a customer visits your site.\n\n### Use multi-currency Prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach purchase uses one of the multi-currency Price’s supported currencies, depending on how you use the Price in your integration.\n\nCheckout automatically determines the customer’s local currency from their IP address, as long as the Price supports that currency. If the customer’s local currency isn’t supported, Checkout uses the Price’s default currency.\n\nIf a Checkout Session uses multiple Prices, Coupons, Promotion Codes, or Shipping Rates, then they must all support the customer’s local currency, or else Checkout uses the default currency. They must all have the same default currency, or else Stripe returns an error when you create the Checkout Session.\n\nAlternatively, you can use the [currency](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-currency) parameter to explicitly tell Checkout which currency to use.\n\nLearn more about defining [manual currency prices](https://docs.stripe.com/payments/checkout/manual-currency-prices) in Checkout.\n\n### Migrate from single-currency Prices to multi-currency ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you have an existing single-currency Price, you can retroactively add multiple currencies to it in the Dashboard.\n\n#### Note\n\nOnly the Stripe Dashboard can retroactively add multiple currencies to an existing Price. The Stripe API doesn’t support retroactively adding multiple currencies. If you’re using the API, create a new multi-currency Price from scratch.\n\nAfter you add a new currency to a Price, the only way to change it is to archive the existing Price and create a new one. Learn more about [managing existing prices](https://docs.stripe.com/products-prices/how-products-and-prices-work#manage-existing-products-and-prices).\n\nIf you use Checkout or Payment Links, then multi-currency Prices take effect automatically. If Stripe detects that the customer’s local currency is supported by the Price, then it automatically uses that currency. If you use multiple Prices, Coupons, Promotion Codes, or Shipping Rates in a single purchase, then they must all support the customer’s local currency, and they must all have the same default currency.\n\nIf you’re creating Subscriptions directly, the multi-currency Price(s) won’t take effect until you start passing the `currency` parameter. If you don’t pass the `currency` parameter, the Subscription always uses the Price(s)’ default currency.\n\n[](#multiple-prices)\n\nProducts can use multiple prices to define different pricing options. The product description is shared between prices and appears the same on the customer’s receipt and invoice—only the pricing differs.\n\nAs Togethere’s product matures, they begin offering the same product at different price points. Specifically, certain customers are willing to pay for discounted up-front quarterly and yearly subscriptions. Togethere creates a quarterly 57 USD option:\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d nickname=\"Standard Quarterly\" \\  -d product={{PRODUCT_ID}} \\   -d unit_amount=5700 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d \"recurring[interval_count]\"=3 \\  -d \"recurring[usage_type]\"=licensed`\n\nAnd a yearly 220 USD option:\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d nickname=\"Standard Yearly\" \\  -d product={{PRODUCT_ID}} \\   -d unit_amount=22000 \\  -d currency=usd \\  -d \"recurring[interval]\"=year \\  -d \"recurring[usage_type]\"=licensed`\n\n[](#pricing-table)\n\nAfter creating your pricing structures, you can embed a [pricing table](https://docs.stripe.com/payments/checkout/pricing-table) on your website to display pricing information to your customers. When customers choose a subscription option, they’re taken directly to checkout. Configure, customize, and update directly in the [Dashboard](https://dashboard.stripe.com/test/pricing-tables) without writing any code.",
  "title": "Recurring pricing models | Stripe Documentation",
  "description": "Learn about common pricing models and how to create them.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/send-email",
  "markdown": "# Send customer emails | Stripe DocumentationThe Stripe Docs logo\n\n## Configure and send invoicing emails to your customers.\n\nSet up Stripe to send important email notifications and reminders to your customers. Certain email notifications contain a link to a Stripe-hosted page that customers can use to confirm or update their payment details.\n\nIn your [Email settings](https://dashboard.stripe.com/settings/emails), you can opt out of sending your customers emails for successful payments. If you’re [automatically charging](https://docs.stripe.com/invoicing/automatic-charging) a customer and you’ve turned off emails for successful payments, they won’t receive an [email receipt](https://docs.stripe.com/invoicing/dashboard#invoice-receipts). To learn how to send automatic email receipts, see [Email receipts and paid invoices](https://docs.stripe.com/receipts#automatically-send-receipts).\n\nTo turn on automatic reminders, navigate to your [Invoicing settings](https://dashboard.stripe.com/test/settings/billing/invoice) and scroll down to **Manage advanced invoicing features** > **Send reminders if a one-off invoice hasn’t been paid**. Select if you want Stripe to send the reminder before, when, or after the invoice is due. You can choose from a set of predefined options.\n\nIf you’ve set up and verified a [custom email domain](https://docs.stripe.com/get-started/account/email-domain), we send invoicing emails from that domain.\n\n## Customer emails ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can configure Stripe to send email notifications or reminders to your customer:\n\n*   Upon failed payment attempts.\n*   After Stripe [finalizes](https://docs.stripe.com/invoicing/integration/workflow-transitions#finalized) an invoice.\n*   With [receipts](https://dashboard.stripe.com/settings/emails) after invoices are paid.\n*   When a payment requires [3D Secure](https://docs.stripe.com/payments/3d-secure).\n*   When a card on file is about to expire.\n*   If a one-off invoice hasn’t been paid. Invoicing Plus\n*   When a credit note is created.\n*   When refund is issued.\n*   When a subscription trial is ending.\n*   Upon cancellation of subscription.\n\nBefore you start sending email notifications and reminders, you can customize your [branding](https://dashboard.stripe.com/account/branding).\n\n![Update card information](https://b.stripecdn.com/docs-statics-srv/assets/update-card-information.da9d6be4f5bad9e7eb686cc2ba205af6.png)\n\nRemind your customers to update their card information\n\n### Email reminders ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can send one-off invoice email reminders to your customers using the Dashboard or API. If you’d like to send an email reminder about an expiring card, go to [Prevent failed payments](https://dashboard.stripe.com/settings/billing/automatic).\n\nTo send a one-off invoice email reminder, go to the [Invoices page](https://dashboard.stripe.com/test/invoices). Click on the customer’s invoice, followed by **Send invoice**. Before you resend an invoice, Stripe shows you a preview of the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page). You can download the associated invoice PDF by clicking **Invoice PDF** on the **Invoice details** page.\n\n![Hosted Invoice Page](https://b.stripecdn.com/docs-statics-srv/assets/hosted-invoice-page-guide.df3cc5a1e4180c338269aacdfa792180.png)\n\nHosted Invoice Page\n\n![Invoice PDF](https://b.stripecdn.com/docs-statics-srv/assets/invoice-pdf-guide.d79c407ca08ee4b14dc0519fb3772309.png)\n\nInvoice PDF\n\n### Email notifications ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can send email notifications to your customers by configuring your Dashboard settings:\n\n*   To send an email notification when a card payment fails, go to [Manage failed payments](https://dashboard.stripe.com/settings/billing/automatic).\n*   To email finalized invoices, navigate to [Manage invoices sent to customers](https://dashboard.stripe.com/settings/billing/automatic).\n*   If you’d like to send an email notification with a receipt after a successful payment, go to your **Email settings**.\n\n#### 3D Secure payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf charging a customer’s card on file requires them to complete 3D Secure authentication and you’ve enabled **Send a Stripe-hosted link for cardholders to authenticate when required** in your [3D Secure settings](https://dashboard.stripe.com/settings/billing/automatic), Stripe sends an email. The email links to a Stripe-hosted page where they can confirm the payment.\n\n## Additional email recipients![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can provide additional recipients to your customer’s Billing emails (including receipts sent after successful payments) using the Dashboard.\n\n#### Note\n\nThe Stripe API doesn’t currently support adding recipients to Billing emails.\n\n1.  Go to the [Customers page](https://dashboard.stripe.com/test/customers) in your Dashboard.\n2.  Click the customer you want to add email recipients for to open the customer’s detail page.\n3.  Click the **Edit** link in the **Details** section of the left pane to open the **Update customer** dialog.\n    \n    ![Details section with Edit link highlighted.](https://b.stripecdn.com/docs-statics-srv/assets/edit-emails.18a5f678dc05901c6d1e5ade713afdc1.png)\n    \n4.  In the **Billing information** section of the **Update customer** dialog, unselect the **Same as account email** checkbox.\n    \n    ![Billing section with same as account checkbox unselected.](https://b.stripecdn.com/docs-statics-srv/assets/additional-emails.df018f8ddec164bb58653a0ede84d1a8.png)\n    \n5.  _(Optional)_ Set the value of the displayed field to a comma-separated list of emails that should be in the “To” line of Billing emails. If you leave this field blank, Stripe continues to use the account email.\n6.  Click the **Add more recipients** link to access the **Emails to CC** field. Set the value of the field to a comma-separated list of email addresses that you want in the CC line of Billing (Invoice and Subscription) emails.\n\nIf you add recipients to the Customer using the previous steps, Stripe automatically pre-populates these emails to invoices you send through the Dashboard.\n\n## Change the Stripe invoice template ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create your own custom email template to replace the Stripe prebuilt email by [configuring the invoice template](https://dashboard.stripe.com/settings/billing/invoice). Stripe applies your custom template to all new invoices.\n\n## Disable Stripe invoice emails and send your own ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe can use [webhooks](https://docs.stripe.com/webhooks \"webhook\") to notify you of changes to your invoices—when they’re finalized, paid, marked uncollectible, and so on. For each event that you receive, you can construct and deliver your own emails. If you disable finalized invoice emails, Stripe continues to send webhooks as a reminder for your own email solution. To learn more, see [Webhooks and invoices](https://docs.stripe.com/billing/subscriptions/webhooks#understand).\n\n## Email PDF attachments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen Stripe emails an invoice, we automatically include a PDF attachment of the same invoice to assist your customer with record keeping. If you turn on emails for successful payments—and an invoice is set to charge automatically—the receipt email includes a PDF attachment of both the original invoice and the invoice receipt. Visit the [Invoice settings](https://dashboard.stripe.com/settings/billing/invoice) to disable this behavior.\n\n## Email logs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor the customer emails sent within the last 30 days, their logs are available to view within the [customer](https://dashboard.stripe.com/customers) page.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Use the Dashboard](https://docs.stripe.com/invoicing/dashboard)\n*   [Customize invoices](https://docs.stripe.com/invoicing/customize)\n*   [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page)\n*   [Automate customer emails](https://docs.stripe.com/billing/revenue-recovery/customer-emails)",
  "title": "Send customer emails | Stripe Documentation",
  "description": "Configure and send invoicing emails to your customers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/quotes/create",
  "markdown": "# Create and send a quote\n\nA quote is a way to show prospective or existing customers the costs for a set of products and services. Quotes show the cost of either a one-off [invoice](https://docs.stripe.com/api/invoices \"invoices\") or [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). When a customer accepts the quote, ​​Stripe automatically creates all relevant invoices and subscriptions. ​​Many sales workflows use this common tool.\n\n[](#create-quote-dashboard)\n\nTo create a quote in the Stripe Dashboard:\n\n1.  Go to the [Billing tab](https://dashboard.stripe.com/billing).\n2.  Click **Quick actions** > **Create quote** (or go directly to the [quote editor](https://dashboard.stripe.com/test/quotes/create)).\n3.  Select **\\+ Add new customer**. At a minimum, enter your customer’s **Name** and **Account email**. Click **Add customer**.\n4.  Under **Items**, add or select a product. (You can also add a coupon.)\n5.  Choose an expiration date.\n6.  Optional Write a memo, and add a custom header and footer. You can set the future default text for the header and footer in the [quote template](https://dashboard.stripe.com/settings/billing/quote).\n7.  To preview the quote PDF (which shows the generated quote number) click **Download preview**.\n8.  Click **Finalize quote**.\n\n![Quote editor](https://b.stripecdn.com/docs-statics-srv/assets/create-quote-editor.b0567a67946f35c4844e0979f2bc7019.png)\n\nQuote editor\n\nAfter you finalize the quote, send it to your customer:\n\n1.  To download the quote, go to **Quotes details page** > **Quote PDF**.\n2.  Use an external email address to send the PDF to your customer for review.\n\n[](#accept-quote-dashboard)\n\nAfter your customer accepts the quote, bill them by converting the quote into an invoice or subscription.\n\nYou can only create one-off invoices if a quote _only_ has one-time prices.\n\nIf a quote has at least one recurring price, you can only convert it to a subscription.\n\n### Convert a quote to an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  To mark a quote as accepted and create a draft invoice, go to **Convert to invoice** > **Quotes details**.\n    \n2.  Use the [invoice editor](https://dashboard.stripe.com/test/invoices/create) to modify the draft invoice as needed.\n    \n3.  Email the invoice or automatically charge the customer.\n    \n\n### Convert a quote to a subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  In the quote editor, choose a customer and create or select a product with a recurring price.\n    \n2.  Enter the quote details and choose to either **Start the subscription immediately** or **Schedule a subscription start date**.\n    \n3.  Finalize the quote. This marks the quote as **Accepted**.\n    \n4.  Go to **Convert to subscription** > **Quotes details**.\n    \n5.  Enter or modify the subscription details, then click **Create subscription**.\n    \n\nIf you schedule the subscription to start immediately, Stripe creates an active subscription along with a draft invoice for the initial payment. Stripe finalizes the draft invoice automatically in one hour. Otherwise, the subscription begins on the scheduled start date. Depending on the subscription’s payment terms, Stripe collects payment by either charging the customer’s payment method on file or sending them an invoice.",
  "title": "Create and send a quote | Stripe Documentation",
  "description": "Learn how to create, send, and accept a quote.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Invoicing\n\n## Create and manage invoices for one-time payments with Stripe Invoicing.\n\nCreate and manage invoices\n\nCreate, customize, and send a Stripe-hosted [invoice](https://docs.stripe.com/api/invoices \"invoices\") in minutes—all from the Dashboard with no code required. Or, use the Invoicing API and advanced features to automate how you collect and reconcile payments.\n\n[](https://docs.stripe.com/invoicing/quickstart-guide)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/invoicing-hero.096c89608f5466609f9ce07529a4d502.png)\n\n## No-code invoicing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Accounts receivable automation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Integrate with the Invoicing API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Compare Invoicing and Payment Links ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInvoicing and Payment Links are two of the easiest ways to start accepting payments with Stripe without writing any code. Use the following table to compare the two products, and to understand which works best for your use case:\n\n| **Product** | **Invoicing** | **Payment Links** |\n| --- | --- | --- |\n| **Description** | Use [invoices](https://dashboard.stripe.com/invoices) to collect one-time or recurring payments from a specific customer. | Use [Payment Links](https://dashboard.stripe.com/payment-links) to sell a product, a subscription, or accept a donation. |\n| **Customer** | *   Specific individuals or businesses<br>*   You can’t reuse invoices, but you can duplicate them and edit the details for another customer. | *   Anyone with the link<br>*   Reuse multiple times with multiple customers, or limit the number of purchases. |\n| **Integration effort** | No coding | No coding |\n| **Stripe-hosted payment page** |     |     |\n| **Sharing options** | *   You can [email from the Dashboard](https://docs.stripe.com/invoicing/dashboard#create-invoice).<br>*   Copy the [invoice link](https://docs.stripe.com/invoicing/hosted-invoice-page#email-links) to share over email or SMS.<br>*   [Send a PDF](https://docs.stripe.com/invoicing/hosted-invoice-page).<br>*   [Auto-charge](https://docs.stripe.com/invoicing/automatic-charging?dashboard-or-api=dashboard) the payment method on file. | *   [Show a QR code](https://docs.stripe.com/payment-links/share#create-qr-code).<br>*   [Copy the link](https://docs.stripe.com/payment-links/share#share-online) to share it over email, SMS, or social media.<br>*   Add a [buy button](https://docs.stripe.com/payment-links/buy-button) to your website. |\n| **UI customization** | Editable template1 | Limited customization2 |\n| **Payment methods** | *   Choose from over 40 [payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#choose-how-to-add-payment-methods).<br>*   Manage your payment methods in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) without coding. | *   [Dynamically display](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) over 40 [payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#choose-how-to-add-payment-methods)3.<br>*   Manage your payment methods in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) without coding. |\n| **[Stripe Tax](https://docs.stripe.com/tax) support** |     |     |\n| **Preferred language support** | *   Over 30 languages<br>*   Set the Dashboard [language preference](https://docs.stripe.com/invoicing/customize#customer-language) for each customer. | *   Over 30 languages<br>*   Match the [browser language setting](https://support.stripe.com/questions/supported-languages-for-stripe-checkout-and-payment-links) for each customer, or set the language with a URL parameter. |\n| **Recurring payments** | Use Stripe Billing to send a subscription or recurring invoice. [No-code subscriptions](https://dashboard.stripe.com/subscriptions?create=subscription) are available | Create a payment link for a subscription. |\n| **Collection tools** | [Automatic collection](https://docs.stripe.com/invoicing/automatic-collection) features, including Smart Retries and reminder emails are available. | [Revenue recovery](https://docs.stripe.com/billing/revenue-recovery) features, including Smart Retries and reminder emails are available for subscription payment links. |\n| **Reconciliation** | Auto-reconciliation of bank payments | Simple reconciliation by using URL parameters |\n| **Customers can choose what to pay** |     |     |\n| **Collect partial payments or set up payment plans** |     |     |\n| **Customers can edit quantities** |     |     |\n| **Coupons or discounts** |     |     |\n| **Send a quote or estimate and convert it to an invoice once finalized** |     |     |\n| **Upsells and cross-sells** |     |     |\n| **PCI compliance handling** | 4   |     |\n\n1 Use the [editable template](https://docs.stripe.com/invoicing/customize) to incorporate your own icons, brand colors, payment terms, page sizes, as well as memo and footer fields.  \n2 With [limited customization](https://docs.stripe.com/payment-links/customize), you can access 20 preset fonts, three predefined border radiuses, and options for adjusting your logo, background, product images, and the color of your own button.  \n3 Dynamic payment methods filter for eligibility, displaying the most relevant payment methods to maximize conversion. Payment method availability [varies by product](https://docs.stripe.com/payments/payment-methods/integration-options#product-support).  \n4 See the best practices for [globally compliant invoices](https://docs.stripe.com/invoicing/global-invoicing).",
  "title": "Invoicing | Stripe Documentation",
  "description": "Create and manage invoices for one-time payments with Stripe Invoicing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/quotes/clone",
  "markdown": "# Renegotiate a quote | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to renegotiate a quote.\n\n#### Note\n\nYou can use quotes in test mode. To finalize, download, or accept quotes in live mode for one-time invoices through the API or Dashboard, you must upgrade to [Invoicing Plus](https://stripe.com/invoicing/pricing). See which plan [is right for you](https://support.stripe.com/questions/how-to-access-quotes).\n\nAfter you finalize and send a quote to your customer, you might need to make additional changes. For example, you want to apply a discount or fee. Stripe lets you duplicate a finalized quote, which creates a new draft quote with the same details as the original. You can update the new draft quote until ​​you’re ready to finalize and send it to your customer. If the quote is an open state, you can duplicate or revise it.\n\n## Revise a quote ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can revise an open quote using the Dashboard or [API](https://docs.stripe.com/api/quotes).\n\nTo revise an open quote in the Dashboard:\n\n1.  Go to the **Quotes details page**, and click the overflow menu ().\n    \n2.  Click **Revise quote**.\n    \n\n## Duplicate a quote ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can duplicate a draft, open, or accepted quote using the Dashboard or API.\n\nTo duplicate a quote using the Dashboard:\n\n1.  Go to the **Quotes details page**, and click the overflow menu ().\n    \n2.  Click **Duplicate quote**.\n    \n\nYou can also click the overflow menu in the [Quotes page](https://dashboard.stripe.com/test/quotes) to duplicate a quote.",
  "title": "Renegotiate a quote | Stripe Documentation",
  "description": "Learn how to renegotiate a quote.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/billing-apis",
  "markdown": "# About the Billing APIs | Stripe DocumentationThe Stripe Docs logo\n\n## Understand how the Billing API objects work together.\n\n[Subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") automatically create [Invoices](https://docs.stripe.com/api/invoices \"invoices\") and [Payment Intents](https://docs.stripe.com/payments/payment-intents \"PaymentIntent\") for you. They have the following parts:\n\n*   A [Product](https://docs.stripe.com/api/products \"Products\") to model what is being sold.\n*   A [Price](https://docs.stripe.com/api/prices \"Prices\") to determine the interval and amount to charge.\n*   A [Customer](https://docs.stripe.com/api/customers \"Customers\") to store the [Payment Methods](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") used to make each recurring payment.\n\n## API object definitions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Resource | Definition |\n| --- | --- |\n| [Customer](https://docs.stripe.com/api/customers) | Represents a customer who purchases a subscription. Use the Customer object associated with a subscription to make and track recurring charges and to manage the products that they subscribe to. |\n| [Entitlement](https://docs.stripe.com/api/entitlements/active-entitlement) | Represents a customer’s access to a feature included in a service product that they subscribe to. When you create a subscription for a customer’s recurring purchase of a product, an active entitlement is automatically created for each feature associated with that product. When a customer accesses your services, use their active entitlements to enable the features included in their subscription. |\n| [Feature](https://docs.stripe.com/api/entitlements/feature) | Represents a function or ability that your customers can access when they subscribe to a service product. You can include features in a product by creating ProductFeatures. |\n| [Invoice](https://docs.stripe.com/api/invoices) | A statement of amounts a customer owes that tracks payment statuses from draft through paid or otherwise finalized. Subscriptions automatically generate invoices. |\n| [PaymentIntent](https://docs.stripe.com/api/payment_intents) | A way to build dynamic payment flows. A PaymentIntent tracks the lifecycle of a customer checkout flow and triggers additional authentication steps when required by regulatory mandates, custom Radar fraud rules, or redirect-based payment methods. Invoices automatically create PaymentIntents. |\n| [PaymentMethod](https://docs.stripe.com/api/payment_methods) | A customer’s payment instruments that they use to pay for your products. For example, you can store a credit card on a Customer object and use it to make recurring payments for that customer. Typically used with the Payment Intents or Setup Intents APIs. |\n| [Price](https://docs.stripe.com/api/prices) | Defines the unit price, currency, and billing cycle for a product. |\n| [Product](https://docs.stripe.com/api/products) | A good or service that your business sells. A service product can include one or more features. |\n| [ProductFeature](https://docs.stripe.com/api/product-feature) | Represents a single feature’s inclusion in a single product. Each product is associated with a ProductFeature for each feature that it includes, and each feature is associated with a ProductFeature for each product that includes it. |\n| [Subscription](https://docs.stripe.com/api/subscriptions) | Represents a customer’s scheduled recurring purchase of a product. Use a subscription to collect payments and provide repeated delivery of or continuous access to a product. |\n\nHere’s an example of how products, features, and entitlements work together. Imagine that you want to set up a subscription service that offers two tiers: a standard product with basic functionality, and an advanced product that adds extended functionality.\n\n1.  You create two features: `basic_features` and `extended_features`.\n2.  You create two products: `standard_product` and `advanced_product`.\n3.  For the standard product, you create one ProductFeature that associates `basic_features` with `standard_product`.\n4.  For the advanced product, you create two ProductFeatures: one that associates `basic_features` with `advanced_product` and one that associates `extended_features` with `advanced_product`.\n\nA customer, `first_customer`, subscribes to the standard product. When you create the subscription, Stripe automatically creates an Entitlement that associates `first_customer` with `basic_features`.\n\nAnother customer, `second_customer`, subscribes to the advanced product. When you create the Subscription, Stripe automatically creates two Entitlements: one that associates `second_customer` with `basic_features`, and one that associates `second_customer` with `extended_features`.\n\nYou can determine which features to provision for a customer by [retrieving their active entitlements or listening to the Active Entitlement Summary webhook](https://docs.stripe.com/billing/entitlements#entitlements). You don’t have to retrieve their subscriptions, products, and features.",
  "title": "About the Billing APIs | Stripe Documentation",
  "description": "Understand how the Billing API objects work together.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/quotes/overview",
  "markdown": "# How quotes work | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the quotes workflow.\n\n#### Note\n\nYou can use quotes in test mode. To finalize, download, or accept quotes in live mode for one-time invoices through the API or Dashboard, you must upgrade to [Invoicing Plus](https://stripe.com/invoicing/pricing). See which plan [is right for you](https://support.stripe.com/questions/how-to-access-quotes).\n\n​​Quotes allow you to deliver estimated pricing for requested goods or services and can help facilitate negotiation before beginning a subscription or [invoice](https://docs.stripe.com/api/invoices \"invoices\").\n\n​​We designed the quote statuses to mirror a typical quoting flow that a sales agent follows, where they create a quote with line items that specify the items for purchase. This includes applying any discounts or taxes, sending the quote to a prospective customer, and provisioning the corresponding services upon their acceptance.\n\n| Status | Description | Possible actions |\n| --- | --- | --- |\n| `draft` | ​​Starting status for all quotes—at this point, you can still edit the quote. | [Finalize](#finalize) the quote into `open` or [cancel](#cancel) the quote. |\n| `open` | The quote is finalized and is now awaiting action from the customer. ​​You can only edit the expiration date now. | Mark the quote as `accepted` or [cancel](#cancel) the quote. |\n| `accepted` | ​​The customer accepted the quote. The quote generates an invoice, subscription or subscription schedule. | N/A |\n| `canceled` | ​​The quote expired or was canceled. You can no longer accept it. | N/A |\n\n### Canceled quotes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen a customer rejects a quote or you no longer want it to be valid, you can cancel it. You can no longer accept canceled quotes. Quotes that are in a `draft` or `open` state automatically cancel when they reach the expiration date. Stripe generates a `quote.canceled` webhook.\n\n### Accepted quotes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n​​After the customer agrees to your quote, you can mark it as accepted. Accepted quotes generate an invoice, subscription, or subscription schedule ​​automatically, depending on whether or not there are recurring prices on the quote or if the effective date of the quote is in the future.\n\n## Workflow transitions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nQuotes can transition between these statuses:\n\n### Finalize draft quotes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nQuotes are initially created as a `draft`. In this status, you can edit the quote and make any required changes. ​​You can finalize a quote as soon as you’re ready to send it to the customer, which moves it to the `open​` status while you await action from them.\n\nFinalizing a quote also assigns a `number` to it. This number consists of four parts: the prefix `QT`, the customer’s invoice prefix, the quote sequence, and the revision sequence. For example, `QT-68BB114-0001-1` is the first quote for a customer, and the quote is on the first revision. Quote number `QT-68BB114-0001-2`is the same quote but on the second revision. `QT-68BB114-0002-1` would be the second quote for the customer.\n\nYou can finalize a quote through the API as shown in the following example.\n\n`curl -X POST https://api.stripe.com/v1/quotes/qt_1HDGlYClCIKljWvsIGaAA06B/finalize \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n### Accept a quote ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can mark a quote as accepted only if it’s in the `open` status. Doing so transitions the quote to the `accepted` status and creates the invoice, subscription or subscription schedule.\n\nIf the quote doesn’t have a recurring price on any of its line items, a `draft` invoice is created from the quote with `auto_advance` set to `false`. You can make modifications to the invoice before finalizing and sending it to your customer for payment.\n\nIf the quote has at least one recurring price on a line item, then a subscription or subscription schedule is created. A subscription schedule is created if the effective date on the quote is in the future, otherwise a subscription is created. The first invoice on the subscription is in `draft` status with `auto_advance` set to `true`.\n\nIn the Dashboard, you can mark a quote as accepted through the **Convert to invoice** and **Convert to subscription** buttons on the quote detail page. You can mark a quote as accepted through the API as shown in the following example.\n\n`curl -X POST https://api.stripe.com/v1/quotes/qt_1HDGlYClCIKljWvsIGaAA06B/accept \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n### Cancel a quote ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can cancel a quote if its status is `draft` or `open`. Cancel a quote through the Dashboard on the quote detail page, or using the API as shown in the following example.\n\n`curl -X POST https://api.stripe.com/v1/quotes/qt_1HDGlYClCIKljWvsIGaAA06B/cancel \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n### Download a quote’s PDF ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe PDF method functions differently from the majority of the SDK methods you might be accustomed to that typically return data in JSON format. Instead, the PDF method has a unique output.\n\nIt directly returns a stream of data that represents the byte sequences of the incoming data.\n\nIn effect, instead of waiting for the entire data set to load before it becomes available, the byte stream can be read in ‘chunks’ or segments as the data streams in.\n\nThis method is especially useful for handling large data or real-time data processing, where you can start processing incoming data before the entire data load is complete.\n\n`curl https://files.stripe.com/v1/quotes/qt_0J1EnX589O8KAxCGEdmhZY3r/pdf \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`",
  "title": "How quotes work | Stripe Documentation",
  "description": "Learn about the quotes workflow.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/subscriptions",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\n## Subscriptions\n\n## Create and manage subscriptions with the Stripe Billing APIs.\n\nSign up for developer updates:",
  "title": "Subscriptions | Stripe Documentation",
  "description": "Create and manage subscriptions with the Stripe Billing APIs.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/multi-entity-business",
  "markdown": "# Billing for a multi-entity business\n\n## Integrate Stripe Billing for a business with more than one legal entity.\n\nStripe requires you to have a separate account for each legal entity. Businesses might need to create different legal entities to accommodate international operations, set up financial isolation for different business units, or handle acquisitions. Use this guide to learn how to set up multiple Stripe accounts for a business that has multiple legal entities.\n\n## Multiple entities architecture![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo manage multiple legal entities in a scalable way, we recommend using Stripe Connect with a [Standard account](https://docs.stripe.com/connect/standard-accounts), where you have a platform account that serves as a single entry point, and multiple connected accounts for each line of business.\n\n![Organization with multiple accounts setup using Connect](https://b.stripecdn.com/docs-statics-srv/assets/structure_4_before.e35e09f6d8127fb01f240a30834b99b7.png)\n\nA platform account and multiple connected accounts, each representing different business lines.\n\nWith this account configuration, each account can maintain its own customers, subscriptions, and product catalog. The platform account provides a single integration point and a single, shared API key that you can use to manage multiple connected Stripe accounts.\n\nYou create a service on your app to route customers to the right account when they check out. On the backend, your integration passes in the correct account ID to make a direct charge for the relevant Standard account, which settles funds to that entity’s bank account.\n\n[](#monitor)\n\nTo get a consolidated view of metrics for multiple Stripe accounts, use the Stripe Data Pipeline to [sync your Stripe account with an external system](https://docs.stripe.com/stripe-data/access-data-in-warehouse). You can export the data for all your accounts to your data warehouse, where you can apply analytic tools to get business insights.\n\n[](#accounting)\n\nUse [Revenue Recognition](https://docs.stripe.com/revenue-recognition) to export and consolidate accounting reports. You can also import data into a single account and get a comprehensive view that way.\n\n[](#product-catalog)\n\nYour product catalog can be part of the platform account or each connected Standard account. Where you maintain your catalog depends on your business needs. For example, a company that operates in the US and in the EU likely wants to keep the catalog with the connected accounts to help them maintain local prices. A company with a global website that serves customers in multiple currencies likely wants to keep the catalog with the platform account and use multi-currency prices.\n\n### Lookup keys![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo efficiently manage product catalogs for connected accounts, use [lookup keys](https://docs.stripe.com/products-prices/manage-prices?dashboard-or-api=api#lookup-keys). Product IDs and lookup key names only need to be unique for each account.\n\n[](#entitlements)\n\nTo correctly associate a customer with a Stripe account, store the customer ID and Stripe account ID in your database so that when you check the statuses of invoices and subscriptions for entitlements, you know you’re referencing the correct Stripe account.\n\n[](#tax)\n\nIf you want to report taxes as a single entity for two Stripe accounts, you can merge the tax reports of those accounts. Export the data then combine the reports in a spreadsheet or with a partner such as TaxJar or Avalara.\n\n[](#rev-recovery)\n\nTo enable [revenue recovery](https://docs.stripe.com/billing/revenue-recovery), configure invoice templates, subscription lifecycles, and dunning emails for each individual Stripe account.\n\n[](#payment-methods)\n\nTo correctly associate a customer with a Stripe account, store the customer ID and Stripe account ID in your database. Doing so means that when you check the statuses of invoices and subscriptions for entitlements, you know you’re referencing the correct Stripe account.\n\nTo transition to multiple Stripe accounts, we recommend setting up a platform account and a connected account when you first get started.\n\n### Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayment method cloning currently has the following limitations:\n\n*   You can only clone payment methods that have the [type](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type) set to `card` or `us_bank_account`.\n*   You can’t clone payment methods from one connected account to another connected account.\n*   You can’t clone payment methods from a connected account to a platform account.",
  "title": "Billing for a multi-entity business | Stripe Documentation",
  "description": "Integrate Stripe Billing for a business with more than one legal entity.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/taxes",
  "markdown": "# Subscriptions and Tax | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to collect and report taxes with Stripe Billing and Stripe Tax.\n\nAutomatically collect tax on recurring payments with Stripe Tax\n\n[](https://docs.stripe.com/billing/taxes/collect-taxes)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/billing-tax-hero.f53de0f36325b5ddc87dfe9a2ed3fbb6.png)\n\n## Use Stripe Tax with recurring payments Recommended![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Use tax rates with recurring payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Subscriptions and Tax | Stripe Documentation",
  "description": "Learn how to collect and report taxes with Stripe Billing and Stripe Tax.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/usage-based",
  "markdown": "# Usage-based billing | Stripe DocumentationThe Stripe Docs logo\n\n## Charge customers based on how much they use your product or service.\n\n#### Note\n\nUsage-based billing (also known as metered billing or consumption billing) is a common [pricing model](https://docs.stripe.com/products-prices/pricing-models \"pricing model\") for SaaS businesses that enables you to charge based on a customer’s usage of your product or service. As a business, you provide access to your service and bill your customer based on their usage. With Stripe Billing, you can set up and integrate different types of usage-based pricing models with your SaaS product.\n\n[\n\nSet up usage-based billing\n\n\n\n](https://docs.stripe.com/billing/subscriptions/usage-based/implementation-guide#what-you-will-build)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/usage-based-billing.7815fc3949e9351fd5e39cb2b02e4eca.svg)\n\n## Getting started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nUBB data is accessible only in Stripe Subscriptions and Invoices. We’re striving for full interoperability of UBB data across our product suite.",
  "title": "Usage-based billing | Stripe Documentation",
  "description": "SaaS usage-based billing made easy with Stripe Billing",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/automations",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Automations\n\n## Learn how to customize subscription and invoice workflows with automations.\n\nStripe Billing automations are a no-code way to build custom, automated workflows to streamline your business processes, enhance customer communication, and improve revenue recovery efforts.\n\nTailor automated workflows to fit your specific use case, for example:\n\n*   [Custom dunning flow for annual subscribers](https://docs.stripe.com/billing/automation-recipes#custom-dunning-flow)\n*   [Notify your team when high value invoices are overdue](https://docs.stripe.com/billing/automation-recipes#invoice-overdue-notifications)\n*   [Email a confirmation when a subscription is canceled](https://docs.stripe.com/billing/automation-recipes#subscription-cancellation-confirmation)\n*   [Give new users a 10 USD spend credit at signup](https://docs.stripe.com/billing/automation-recipes#signup-spend-credit) Beta\n\nWorkflows consist of triggers, filter conditions, and actions. This guide describes how to use those to build and configure your own custom automation. Follow an [automation recipe](https://docs.stripe.com/billing/automation-recipes) to get started with common use cases.\n\n## Set up automations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo get started with automations, follow these steps:\n\n1.  In the Stripe Dashboard, go to the [Automations tab](https://dashboard.stripe.com/test/revenue_recovery/automations) in Billing.\n2.  Click **New automation** or press the **n** key.\n3.  Name the automation.\n4.  Select the event that you want to trigger the automation.\n5.  (Optional) Add [filter conditions](https://docs.stripe.com/billing/automations#choose-filter-conditions) so that your automation only runs when the specified conditions are met.\n6.  Add a sequence of actions and delays.\n7.  (Optional) If the selected trigger applies to other automations, drag the new automation to the desired position in the priority order, then click **Save**.\n\n#### Warning\n\nWhen using automations, the [next\\_payment\\_attempt](https://docs.stripe.com/api/invoices/object#invoice_object-next_payment_attempt) is no longer set in `invoice.payment_failed` webhooks but is set in `invoice.updated` webhooks.\n\n## Choose a trigger![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can choose from five triggers:\n\n| Trigger | Description | Example use case |\n| --- | --- | --- |\n| Invoice due date upcoming | Actions are executed relative to the due date of the invoice. The automation terminates when the invoice is paid or voided. This trigger is only for invoices with `collection_method` set to `send_invoice`. | Manage customer communication by scheduling `invoice.will_be_due` webhooks at custom intervals. |\n| Invoice is finalized | Triggered when an invoice is finalized. The automation terminates when the invoice is paid, voided, or marked uncollectible. | Mark invoices for certain customer segments as uncollectible (write-off) after a period of time. |\n| Invoice is overdue | Triggered when an invoice becomes overdue. The automation terminates when the invoice is paid or voided. This trigger is only for invoices of type `send`. | Manage customer communication by scheduling `invoice.overdue` webhooks at custom intervals. Manage collections by scheduling emails to the collections team. |\n| Subscription is canceled | Trigger when a subscription is canceled. | Email a cancellation confirmation to the customer. Optionally include a cancellation reason survey. |\n| Subscription payment fails | Triggered when a subscription invoice payment fails its first attempt. The automation terminates when the invoice is paid or voided. | *   Custom retry behavior for a subset of customers<br>*   Notify your collections team of high-value payment failures. |\n\n## Choose filter conditions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter selecting a trigger, you can add one or more filter conditions. These conditions need to be met for your automation to run. For example, if you filter for customers on annual subscriptions, the automation only runs if there are annual subscriptions.\n\nDepending on the trigger, the following filter conditions are available:\n\n| Condition | Description |\n| --- | --- |\n| Customer metadata | A key-value pair to match on customer [metadata](https://docs.stripe.com/api/metadata). |\n| Invoice metadata | A key-value pair to match on invoice [metadata](https://docs.stripe.com/api/metadata). |\n| Invoice amount | A minimum or maximum amount per invoice defined in your default currency. Invoices not denominated in your default currency are evaluated against their conversion. |\n| Subscription interval | Limit to yearly or monthly subscriptions. |\n| Product | Limit to invoices or subscriptions that contain at least one of the products specified. |\n\nYou can use the [Metadata API field](https://docs.stripe.com/api/metadata) to directly apply metadata for customers and invoices.\n\n## Choose actions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following table describes the available actions for the various triggers:\n\n| Action | Description | Supported triggers |\n| --- | --- | --- |\n| Set retry policy | A retry policy defines how failed charges are retried. This action allows you to create a custom policy and attach it to an invoice. | Subscription payment fails |\n| Mark subscription unpaid | The subscription continues to generate invoices each billing cycle, which remain in `draft` state. | Subscription payment fails |\n| Cancel subscription | Canceling subscriptions disables creating new invoices for the subscription and stops automatic collection of all invoices from the subscription by setting `auto_advance` to `false`. _When you cancel a subscription, the Automation immediately stops running._ | Subscription payment fails |\n| Mark invoice uncollectible | The customer is unlikely to pay this invoice and you want to treat it as bad debt in your accounting process. | *   Subscription payment fails<br>*   Invoice finalized<br>*   Invoice overdue |\n| Send team email | Email a custom memo, along with details about the trigger to a team member or internal email address. | All triggers |\n| Send subscription cancellation email | Email a cancellation confirmation to your customers. You also have the option to include a survey link to collection cancellation reasons. | Subscription is canceled |\n| Send `invoice.will_be_due` webhook | You can schedule this webhook to be triggered with custom delays to get reminders about an invoice that’s about to be due. | Invoice due date is set |\n| Create subscription Beta | Creates a subscription for the newly created customer with a single product and price. | Customer is created |\n| Credit customer balance Beta | Makes a positive adjustment to the customer credit balance in the amount you choose. | Customer is created |\n\n## Manage and edit your automations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis section describes how to priority order and pause or stop automations. These actions help make sure your automations run as expected.\n\n### Priority ordering![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can configure multiple automations for the same trigger, but each event only triggers one automation. When an event occurs that applies to multiple automations, Stripe checks their filter conditions in priority order and runs the first one that matches. All other automations are ignored.\n\nIf an automation executes, it ignores your global settings.\n\n*   **Scenario A**: You create an automation for the `Subscription payment fails` event with no conditions applied. In this scenario, the automation runs every time a subscription payment fails. Your default settings for subscription payment failure won’t run.\n    \n*   **Scenario B**: You create an automation for the `Subscription payment fails` event with the condition that the invoice must be greater than 100 USD. In this scenario, the automation runs if the subscription payment fails and the invoice is over 100 USD. If a subscription payment fails and the invoice is less than 100 USD, your default settings for subscription payment failure run instead.\n    \n\nTo change a trigger’s priority order, open the list of automations, click the overflow menu () for any of that trigger’s automations, and select **Update priority**. You can also select it from the **Actions** menu on the automation details page. In the **Set priority** panel, drag each automation to the desired position and then click **Save**.\n\n### Pausing or stopping automations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo switch off or pause an automation, go to the [Automations tab](https://dashboard.stripe.com/test/revenue_recovery/automations) on the Revenue recovery page and turn off that automation’s toggle. If any executions are in progress for that automation, you can let them finish or immediately cancel all of them.\n\nYou can turn the automation on again at any time.",
  "title": "Automations | Stripe Documentation",
  "description": "This docs article explains core concepts of automations in Stripe and provides steps to set up and manage automations with examples of automation recipes like custom dunning flows, overdue invoice notifications, subscription cancellation confirmation, and creating signup credits.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/methodology/subscriptions-and-invoicing",
  "markdown": "# Revenue Recognition with subscriptions and invoicing\n\n## Learn how Revenue Recognition works with subscriptions and invoices.\n\nBecause of the detailed information available on subscriptions and [invoices](https://docs.stripe.com/api/invoices \"invoices\"), Revenue Recognition can accurately defer and recognize revenue for these resources. Revenue Recognition treats each invoice line item and subscription item as its own performance obligation.\n\nRevenue Recognition amortizes revenue by the millisecond, but our example uses a daily interval.\n\n## Licensed subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLicensed subscriptions are subscriptions that generate invoices for a service offered in an upcoming subscription interval. At the end of the interval, the subscription cycles and generates a new invoice for the next interval.\n\nEach subscription item corresponds to a single line item on the invoice, and automatically populates the period for that line item with the period start and end for the subscription item.\n\n* * *\n\nLet’s take a look at an example and timeline for a simple monthly subscription.\n\n*   On January 15, a customer starts a monthly subscription that costs 31 USD, which generates an invoice that gets finalized.\n\nIn this case, the period of service is from January 15 to February 14. The 31 USD is therefore recognized over 17 days in January and 14 days in February. If you inspected the account balances at the end of January, you’d see that 17 USD of revenue was recognized, and 14 USD of revenue remains deferred (to be recognized in February).\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +17.00 |\n| DeferredRevenue | +14.00 |\n\n## Metered subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile licensed subscriptions items bill in advance, metered subscription items bill in arrears—at the point of invoice, all service has already been provided and all revenue recognized.\n\nMetered subscriptions allow businesses to submit usage information as service is provided, prior to generating an invoice. Because service is provided, the revenue must be recognized prior to the point of invoice.\n\nThis example introduces the concept of unbilled accounts receivable, which represents the amount of cash a business can expect to receive based on the service that they’ve already provided, but not yet invoiced.\n\nThis next example is for a metered subscription item where usage is submitted over time.\n\n*   On January 15, a customer subscribes to a monthly metered subscription at 1 USD per unit, and with `aggregate_usage=sum`.\n*   On January 25th, they use 15 units.\n*   On February 4th, they use another 17 units.\n*   On February 14th, the subscription generates an invoice of 32 USD.\n*   The invoice is finalized for 32 USD, but isn’t paid yet.\n\nIn this case, the period of service is from January 15 to February 14, but you don’t generate an invoice until February 14. However, the revenue from the 15 units of usage still needs to be recognized in January, for an amount of 15 USD. If you inspected the account balances at the end of January, you’d see that 15 USD of revenue was recognized, but instead of debiting accounts receivable, unbilled accounts receivable was debited.\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +15.00 |\n| UnbilledAccountsReceivable | +15.00 |\n\nIf you later inspected the account balances at the end of February, you’d observe the following:\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| Revenue | +15.00 | +17.00 |\n| UnbilledAccountsReceivable | +15.00 | \\-15.00 |\n| AccountsReceivable |     | +32.00 |\n\n## Upgrades and downgrades![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSubscriptions can be upgraded and downgraded mid-month, and revenue needs to be recognized accordingly. If an invoice is cut mid-month to handle the prorated charges, the revenue schedule is also adjusted accordingly.\n\nThis next example is for a subscription that’s upgraded mid-month.\n\n*   On April 1, a customer starts a monthly subscription for 90 USD, which generates and finalizes an invoice.\n*   On April 21, the customer upgrades the subscription to cost 120 USD instead, which generates an invoice that accounts for the remaining 10 days of the month.\n\nIn this example, the customer receives 20 days of service with the 90 USD monthly subscription (60 USD in value) and 10 days of service with the 120 USD monthly subscription (40 USD in value). Therefore, in April, the recognized revenue is 100 USD.\n\n## Standalone invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe algorithm for recognizing revenue for standalone invoices is the same as that of a licensed subscription—the main difference is that line item periods aren’t automatically populated.\n\nTo recognize revenue correctly, remember to set the period for each invoice line item. If you don’t set a period on an invoice line item, the amount on that invoice line item is recognized immediately when the invoice finalizes. If you need to override or add a new service period, use the [Data Import feature](https://docs.stripe.com/revenue-recognition/data-import) to configure your invoice data, or set [rules](https://docs.stripe.com/revenue-recognition/rules) to customize revenue treatments on different invoices.\n\nIn this example, an invoice has two line items, one with a period set, and one without.\n\n*   On January 15, you create an invoice and finalize it with\n    *   A line item for 31 USD with a period from January 15 to February 14.\n    *   A line item for 5 USD with no period set.\n\nIn this case, the invoice is for a total of 36 USD. The 31 USD is recognized over 17 days in January and 14 days in February, but the 5 USD is immediately recognized on January 15. If you inspected the account balances at the end of January, you’d see that 22 USD (17 + 5) of revenue was recognized, and 14 USD of revenue remains deferred (to be recognized in February).\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +22.00 |\n| DeferredRevenue | +14.00 |\n\n## Uncollectible invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen an invoice is marked as uncollectible, we clear the accounts receivable account since we no longer expect payment.\n\nParts of the revenue for the invoice might have already been recognized. Upon marking it uncollectible, the recognized revenue is offset by contra revenue in the bad debt account.\n\nParts of the revenue for the invoice might still be deferred. Upon marking it uncollectible, the remaining deferred revenue is cleared.\n\nIn this example the invoice for a subscription finalizes and is later marked uncollectible.\n\n*   On January 15, a customer starts a monthly subscription for 31 USD. The invoice for 31 USD gets created and finalized.\n*   On February 1, the invoice is marked as uncollectible.\n\nIn this case, the customer received 17 days of service, but didn’t pay. The 17 USD that’s recognized at that point would be considered bad debt. The 14 USD in deferred revenue for a service that has yet to be provided is zeroed out. If you inspected the account balances on February 1, you’d see the following:\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| AccountsReceivable | +31.00 | \\-31.00 |\n| Revenue | +17.00 |     |\n| DeferredRevenue | +14.00 | \\-14.00 |\n| BadDebt |     | +17.00 |\n\nAn uncollectible invoice might still be paid. When the invoice is paid, the bad debt account is cleared out using a part of the received cash amount. The remaining cash amount goes to the recoverables account.\n\n## Voided invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you void an invoice, the invoice has reached a terminal state. We therefore clear the accounts receivable account since the invoice can no longer be paid.\n\nYou might have already recognized parts of the revenue for the invoice. Upon voiding, the recognized revenue is offset by contra revenue in the voids account.\n\nParts of the revenue for the invoice might still be deferred. Upon voiding, the remaining deferred revenue is cleared.\n\nIn this example, the invoice for a subscription is finalized and later voided.\n\n*   On January 15, a customer starts a monthly subscription for 31 USD. The invoice for 31 USD gets created and finalized.\n*   On February 1, the invoice is voided.\n\nIn this case, the customer received 17 days of service, but didn’t pay. The 17 USD that’s recognized at that point would be voided. The 14 USD in deferred revenue for service that has yet to be provided, is zeroed out. If you inspected the account balances on February 1, you’d see the following:\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| AccountsReceivable | +31.00 | \\-31.00 |\n| Revenue | +17.00 |     |\n| DeferredRevenue | +14.00 | \\-14.00 |\n| Voids |     | +17.00 |\n\n## Credit notes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCredit notes allow the amount due on an invoice to be reduced after it finalizes. Since the expected payment is reduced, accounts receivable are reduced by the amount of the credit note.\n\nIf the credit note has no line items, the credit note is divided proportionally among all line items, based on the line item amounts. If the credit note has a specified line items, the credit note only applies to that line item.\n\nYou might’ve already recognized parts of the revenue for the invoice. When a credit note is issued, recognized revenue is proportionally offset by contra revenue in the credit notes account, based on the proportion of revenue that you recognized.\n\nParts of the revenue for the invoice might still be deferred. When a credit note is issued, deferred revenue is reduced, based on the proportion of revenue that’s still deferred.\n\nIn this example, the invoice for a subscription finalizes and a credit note is issued later.\n\n*   On January 1, a customer starts a three month subscription for 90 USD. The invoice for 90 USD gets created and finalized.\n*   On February 1, a credit note of 45 USD is issued.\n\nAt the end of March, the account balances would resemble the following:\n\n| Account | Jan | Feb | Mar |\n| --- | --- | --- | --- |\n| AccountsReceivable | +90.00 | \\-45.00 |     |\n| Revenue | +31.00 | +14.00 | +15.50 |\n| DeferredRevenue | +59.00 | \\-43.50 | \\-15.50 |\n| CreditNotes |     | +15.50 |     |\n\n## Tax liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo accurately handle your tax liability on invoices and subscriptions, use the `default_tax_rates` and `tax_rates` attribute on those resources to assign tax rates. If tax is modeled as a regular item, Revenue Recognition doesn’t automatically differentiate between revenue and tax unless you configure a [custom rule](https://docs.stripe.com/revenue-recognition/rules).\n\nIt’s worth noting that taxes aren’t recognizable as revenue. For example, an invoice for 50 USD with an exclusive tax of 5 USD has 50 USD in recognizable revenue and 5 USD of tax liability. The invoice and accounts receivable totals are both 55 USD.\n\nIn this example the invoice has an exclusive tax rate.\n\n*   On January 1, a customer starts a monthly subscription for 31 USD with an exclusive tax rate of 10%. The total due amount on the generated invoice is 34.10 USD.\n*   The invoice is paid immediately.\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +31.00 |\n| Cash | +34.10 |\n| TaxLiability | +3.10 |\n\nSimilarly, let’s take a look at an example for an invoice with an inclusive tax rate.\n\n*   On January 1, a customer starts a monthly subscription for 31 USD with an inclusive tax rate of 10%. The total due amount on the generated invoice is 31 USD.\n*   The invoice is paid immediately.\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +27.90 |\n| Cash | +31.00 |\n| TaxLiability | +3.10 |\n\n## Customer credit balance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer credit balance is a balance on a customer that gets applied to future invoices automatically. Because the customer credit balance is treated as an additional payment (rather than a discount, for example), applying it to an invoice doesn’t reduce the tax liability for that invoice.\n\nHandling the customer credit balance involves what we call the customer balance account, which tracks the interactions between customer credit balance and invoices.\n\nIn this example, an invoice is created for a customer that maintains a customer credit balance.\n\n*   On January 15, an invoice for 31 USD is created and finalized. None of the line items have a service period, so revenue is immediately recognized.\n*   The customer has -11 USD in their customer credit balance. Stripe automatically applies -11 USD to the invoice and adjusts the customer credit balance to 0 USD.\n*   The customer pays 20 USD.\n\nIn this case, the resulting account balances would look like\n\n| Account | Jan |\n| --- | --- |\n| Cash | +20.00 |\n| Revenue | +31.00 |\n| CustomerBalance | \\-11.00 |",
  "title": "Revenue Recognition with subscriptions and invoicing | Stripe Documentation",
  "description": "Learn how Revenue Recognition works with subscriptions and invoices.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/customer-management",
  "markdown": "# Customer self-service with a customer portal\n\n## Allow your customers to manage their own accounts and subscriptions.\n\nProvide self-service functions to your customers by setting up a customer portal. You can configure it entirely in the Dashboard, or implement more powerful features, such as multiple configurations for different customers or for [connected accounts](https://docs.stripe.com/connect \"connected account\"), using the API.\n\nYou can fully automate many of your customer interactions by combining a customer portal with customer communications controlled by [Stripe Billing automations](https://docs.stripe.com/billing/automations). You create and manage automations in the Dashboard.\n\n## Get started with the customer portal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/customer-management/activate-no-code-customer-portal \"Set up a customer portal\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/No-code.3f0b11f68b584b5471c4f0922566ae29.svg)](https://docs.stripe.com/customer-management/activate-no-code-customer-portal \"Set up a customer portal\")\n\nCreate and configure a customer portal using the Dashboard.\n\n## Customer portal features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA customer portal allows your customers to self-manage their payment details, invoices, and subscriptions in one place.\n\n|     |     |\n| --- | --- |\n| See what your customers can do in the customer portal | **Key customer portal features**<br><br>*   Download invoices<br>*   Update payment methods<br>*   Cancel a subscription<br>*   Update customer information<br>*   Upgrade and downgrade subscriptions<br><br>[View demo](https://billing.stripe.com/customer-portal-demo) |\n\n| Feature | Description |\n| --- | --- |\n| Customer management | Offer your customers a self-serve method to:<br><br>*   Update billing information, including their tax IDs<br>*   Update payment methods<br>*   Update subscriptions<br>*   Cancel, pause, resume, and view subscriptions<br>*   Pay, download, and view current and past invoices |\n| Cancellation deflection | Reduce churn by offering your customers a coupon when they try to cancel their subscription. Customers who cancel anyway can share why. You can collect those reasons through webhooks or Stripe Sigma. |\n| Interoperability | Use the portal with other Stripe products:<br><br>*   [Checkout](https://docs.stripe.com/payments/checkout)<br>*   [Payment Links](https://docs.stripe.com/payment-links)<br>*   [Connect](https://docs.stripe.com/connect)<br>*   [Invoices](https://docs.stripe.com/invoicing)<br>*   [Billing](https://docs.stripe.com/billing)<br>*   [Stripe Tax](https://docs.stripe.com/tax) |\n| Localization support | Automatically localize the portal based on your customers’ preferred language. To view a localized version of the portal, set your browser’s default language to the language you want to preview. See the full list of supported languages in the table below. |\n| Customized branding | Configure the portal to match your branding, including your icon, logo, colors, and business information. |\n| Payment methods | Manage payment methods to make it convenient for your customers to pay you. See the full list of [supported payment methods](#supported-payment-methods). Read the [payment methods](https://docs.stripe.com/payments/payment-methods/integration-options) guide to learn more. |\n| Invoice-only support | Yes. You don’t need to use subscriptions for the customer portal to be useful for your business and your customers. To preview invoicing management in the portal, complete the following step<br><br>1.  Turn on test mode in the Dashboard (nothing you do in test mode affects your live setup).<br>2.  Go to the [Customers page](https://dashboard.stripe.com/customers), and select a customer.<br>3.  Create a new invoice for the customer.<br>4.  Click **Actions**, then **Open customer portal**. For security reasons, the quick view option isn’t available for live mode customers. |\n| Language support | **Languages supported by the customer portal**<br><br>*   Bulgarian (bg)<br>*   Chinese Simplified (zh)<br>*   Chinese Traditional—Hong Kong (zh-Hant-HK)<br>*   Chinese Traditional—Taiwan (zh-Hant-TW)<br>*   Croatian (hr)<br>*   Czech (cs)<br>*   Danish (da)<br>*   Dutch (nl)<br>*   English, US (en)<br>*   English, UK (en-GB)<br>*   Estonian (et)<br>*   Filipino (fil)<br>*   Finnish (fi)<br>*   French, France (fr)<br>*   French, Canada (fr-CA)<br>*   German (de)<br>*   Greek (el)<br>*   Hungarian (hu)<br>*   Indonesian (id)<br>*   Italian (it)<br>*   Japanese (ja)<br>*   Korean (ko)<br>*   Latvian (lv)<br>*   Lithuanian (lt)<br>*   Malay (ms)<br>*   Maltese (mt)<br>*   Norwegian Bokmål (nb-NO)<br>*   Polish (pl)<br>*   Portuguese, Portugal (pt)<br>*   Portuguese, Brazil (pt-BR)<br>*   Romanian (ro)<br>*   Russian (ru)<br>*   Slovak (sk)<br>*   Slovenian (sl)<br>*   Spanish, Spain (es)<br>*   Spanish, Latin America (es-419)<br>*   Swedish (sv)<br>*   Thai (th)<br>*   Turkish (tr)<br>*   Vietnamese (vi) |\n| Stripe Connect compatibility | The customer portal works with Stripe Connect. If you’re using the customer portal with Stripe Connect, make sure you configure the customer portal for the platform instead of a connected account. |\n| Ephemeral sessions | Portal sessions are temporary. New portal sessions expire after a 5 minute period. If a customer uses it within that time period, the session expires within 1 hour of the most recent activity. |\n\n### Customer portal limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe customer portal has the following limitations:\n\n*   If subscriptions use any of the following, customers can only _cancel_ them in the portal (they can’t _update_ such subscriptions):\n    \n    *   [Multiple products](https://docs.stripe.com/billing/subscriptions/multiple-products)\n    *   [Usage-based billing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing)\n    *   Sending invoices for collection. Read more about the `collection_method` [parameter](https://docs.stripe.com/api/subscriptions/object#subscription_object-collection_method). If you use the Dashboard to create the subscription, you make this selection in the **Payment method** section.\n    *   Unsupported payment methods\n*   Customers can’t update or cancel subscriptions that currently have an update scheduled with a [subscription schedule](https://docs.stripe.com/billing/subscriptions/subscription-schedules).\n    \n*   Customers can only modify subscriptions if the new price has the same [tax behavior](https://docs.stripe.com/api/prices/create#create_price-tax_behavior) as the initial price. Additionally, no modifications are allowed if the tax behavior is `unspecified`, even if the tax behavior of the new price is `unspecified`. Learn more about the `tax_behavior` parameter and how it [relates to subscriptions](https://docs.stripe.com/billing/taxes/collect-taxes?tax-calculation=stripe-tax#product-and-price-setup).\n    \n*   The portal doesn’t display the payment method section if the portal doesn’t support the customer’s default payment method.\n    \n*   Customers can’t define multiple [Prices](https://docs.stripe.com/api/prices) with the same `product` and `recurring.interval` values. For example, to offer a magazine for 4.00 USD per month regular price and 3.00 USD per month for students, create a separate student magazine [Product](https://docs.stripe.com/api/product) version.\n    \n*   Customer modifications to a `trialing` subscription will end the free trial and create an invoice for immediate payment.\n    \n*   When you [allow customers to switch plans](https://docs.stripe.com/customer-management/configure-portal#configure-subscription-management), you can specify a maximum of 10 products for them to choose from.\n    \n\n## Supported payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| [Payment method](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type) | Description | Currencies | Merchant Country | Limitations |\n| --- | --- | --- | --- | --- |\n| ACH Direct Debit (`us_bank_account`) | Stripe users can receive bank transfers directly from customers. | USD | US  | None |\n| AU BECS Debit (`au_becs_debit`) | Bulk Electronic Clearing System (BECS) Direct Debit payments from customers with an Australian bank account. | AUD | AUS | None |\n| Boleto (`boleto`) | Boleto is a popular payment method in Brazil where customers pay by using a Boleto voucher with a generated number. | BRL | BR  | You must have a Brazilian Stripe account to accept Boleto from your customers. |\n| Cards (`card`) | Cards are one of the most popular ways to pay online, with broad global reach. There are different types of cards and several steps in the process. | Most currencies | Most locations | None |\n| Cash App Pay (`cashapp`) | Cash App is a popular consumer app in the US that allows customers to bank, invest, send, and receive money using their digital wallet. | USD | US  | None |\n| Link (`link`) | Link saves and autofills payment and shipping information for your customers so they don’t need to enter payment details manually. | Most currencies | Most locations | None |\n| PayPal (`paypal`) | PayPal is a payment method that enables customers in any country to pay using their PayPal account. | Most currencies | Europe | [Requires approval](https://docs.stripe.com/payments/paypal/set-up-future-payments#enable-recurring-payments-support-from-stripe-dashboard) |\n| Pre-authorized debits (`acss_debit`) | PADs are a low-cost, high volume batch processing network for financial transactions in Canada. | CAD, USD | CA, US | None |\n| SEPA direct debit (`sepa_debit`) | The Single Euro Payments Area (SEPA) is an initiative of the European Union to simplify payments within and across member countries. | EUR | AU, CA, Europe, HK, JP, MX, NZ, SG, US | None |\n| UK BACS Debit (`uk_bacs_debit`) | Bacs Direct Debit is a reusable, delayed notification payment method available to bank account holders from the United Kingdom. | GBP | UK  | You must have a UK Stripe account and a UK bank account to accept UK BACS Debit from your customers. |\n\n## Other hosted resources to use with the customer portal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe offers multiple prebuilt resources so you can bill your customers quickly and maximize revenue retention and recovery.\n\n[](https://docs.stripe.com/payment-links \"Payment links\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/link.f0b2a66175b477e86a89e39eba75fb6c.svg)](https://docs.stripe.com/payment-links \"Payment links\")\n\nShare a link with your customers to get them signed up for your service through a payment page hosted by Stripe.\n\n[](https://docs.stripe.com/payments/checkout \"Checkout\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4abfc4af6b46ecac81ce96bc8ff0213e.svg)](https://docs.stripe.com/payments/checkout \"Checkout\")\n\nLet your customers sign up through a prebuilt payment form. You can embed it in your site or redirect your users to a page hosted by Stripe.\n\n[](https://docs.stripe.com/payments/checkout/pricing-table \"Pricing table\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/pricing-table.f5d39b6bee7ac0aa8441b103ac986988.png)](https://docs.stripe.com/payments/checkout/pricing-table \"Pricing table\")\n\nCreate a pricing table in the Stripe Dashboard and embed the table in your site. Your customers select a plan then pay through Stripe Checkout.",
  "title": "Customer self-service with a customer portal | Stripe Documentation",
  "description": "Allow your customers to manage their own accounts and subscriptions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/dashboard",
  "markdown": "# Use the Dashboard | Stripe DocumentationThe Stripe Docs logo\n\n## Create, send, and modify invoices from the Stripe Dashboard.\n\nLearn how to create, send, and modify an [invoice](https://docs.stripe.com/api/invoices \"invoices\") from the [Dashboard](https://dashboard.stripe.com/invoices). Invoices provide an itemized list of goods and services rendered, which includes the cost, quantity, and taxes. You can also use them as a tool to collect payment. To send invoices automatically, [integrate with the Invoicing API](https://docs.stripe.com/invoicing/integration).\n\n## Create an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create and send an invoice, complete the following steps:\n\n1.  In the Dashboard, go to the [Invoices overview page](https://dashboard.stripe.com/invoices) and click **Create Invoice** to open the [invoice editor](https://dashboard.stripe.com/invoices/create). Whenever you exit the invoice editor, Stripe saves a draft. (To delete a draft invoice, click the overflow menu () next to an invoice on the [Invoices page](https://dashboard.stripe.com/invoices).)\n    \n2.  Select an existing customer or click **Add new customer**. For new customers, you have to enter a name. You can optionally add an email address or other details.\n    \n3.  Optional Click the overflow menu () in the **Items** section to open the **Items Options** dialog. Choose the desired currency and tax rendering option for the invoice.\n    \n4.  Select **Add one-time item** to create a single, one-time item. To save a product for future use, select **Create new product**.\n    \n5.  Enter the **Quantity** and **Price** for your new item or product.\n    \n6.  Optional Click the **Item options** under each item to add a tax rate, coupon, or supply date.\n    \n    #### Note\n    \n7.  Optional Use the **Memo** box to provide more information to your customer. You can edit the memo on an invoice by clicking **Edit memo** on its details page.\n    \n8.  Select one of the following invoice delivery options:\n    \n    *   **Automatically charge a payment method on file**—Immediately charges the invoice amount to your customer’s payment method that you have on file.\n        \n    *   **Send invoice or payment page link manually**—Provides a payment link for you to send to customers after you confirm the invoice.\n        \n    *   **Email invoice with link**—Enables Stripe to send an email with a payment page and an invoice PDF.\n        \n    *   **Email invoice without link**—Enables Stripe to send an invoice PDF only.\n        \n9.  Optional Expand **Advanced options**, and add [custom fields](https://docs.stripe.com/invoicing/customize#custom-fields). To learn more, see [Net prices and taxes](https://docs.stripe.com/invoicing/taxes#net-price-taxes). Expand **Advanced options**, and add [custom fields](https://docs.stripe.com/invoicing/customize#custom-fields).\n    \n10.  Click **Review invoice** and decide whether you want to include additional emails or continue editing. Send the invoice.\n    \n\nCreate an invoice with the Dashboard\n\n## Modify an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the Dashboard, you can duplicate an invoice and modify the new copy. When you duplicate an invoice, Stripe copies all of the information on the original invoice except for credit notes, deleted (or archived) products, prices, coupons, discounts, and tax rates. If you made a mistake on an invoice you already created, duplicate it, make your corrections, and then send the new invoice. Remember to [void](https://docs.stripe.com/invoicing/overview#void) the incorrect invoice as well.\n\n#### Note\n\nYou can change the status of an [open](https://docs.stripe.com/invoicing/overview#open) invoice in the Dashboard by going to its details page and choosing **More** > **Change Invoice Status**.\n\nTo duplicate an invoice, [view your invoices](https://dashboard.stripe.com/invoices) and click the overflow menu () for the invoice you want to duplicate. Click **Duplicate invoice** to create, edit, and then send the new invoice.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/invoice-duplication.7f22a89383b54d5e45693f642942afa1.png)\n\nDuplicate an invoice from the Dashboard\n\n## Customize an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can [customize invoices](https://docs.stripe.com/invoicing/customize) in several ways. These options allow you to add your own [branding](https://docs.stripe.com/invoicing/customize#brand-customization) and modify your invoices so that they comply in the jurisdictions ​​where you operate.\n\n## Invoice receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe creates receipts when a customer pays an invoice, or makes any [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") payment. We itemize the receipts for subscription and invoice payments to include line items, discounts, and taxes for the payment. To automatically send receipts, make sure that you enable the **Successful payments** option in your [Email settings](https://dashboard.stripe.com/settings/emails) and that you also add the customer’s email.\n\nAfter payment, the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page) includes a link to a receipt that a customer can download for their own records. You can also manually send a receipt by clicking the **Send receipt** button on the **Invoice details** page. To email yourself a test receipt, go to your [Branding settings](https://dashboard.stripe.com/settings/branding) and hover over the email receipt to see the **Send test receipt** button. To learn more about email receipts, see [Email receipts](https://docs.stripe.com/receipts).",
  "title": "Use the Dashboard | Stripe Documentation",
  "description": "Create, send, and modify invoices from the Stripe Dashboard.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/overview",
  "markdown": "# How invoicing works | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about the basics of Stripe Invoicing.\n\nInvoices provide an itemized list of goods and services rendered, which includes the cost, quantity, and taxes. You can send invoices to customers to collect payment or you can create an invoice and automatically charge a customer’s saved payment method. [Subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") automatically generate invoices for each billing cycle. Learn more about the [invoice lifecycle for subscriptions](https://docs.stripe.com/billing/subscriptions/overview#invoice-lifecycle).\n\nWhen you create an invoice, you can select an existing [customer](https://docs.stripe.com/invoicing/customer) and [product](https://docs.stripe.com/invoicing/products-prices) or create and save new ones. You can also create one-time products that only exist on the current invoice.\n\nYou can use both the [Dashboard](https://docs.stripe.com/invoicing/dashboard) and the [API](https://docs.stripe.com/api/invoices) to create, edit, and manage invoices.\n\n## Invoice lifecycle ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter they’re created manually or as part of a subscription, invoices move through a series of statuses as they’re created and processed. Stripe calls this the automatic collection workflow.\n\nThe basic lifecycle for invoices looks like this:\n\n1.  A newly created invoice has `draft` status.\n2.  Stripe [finalizes an invoice](https://docs.stripe.com/invoicing/integration/workflow-transitions#finalized) when it’s ready to be paid by changing its status to `open`. You can no longer change most details of a finalized invoice.\n3.  Stripe can wait for the customer to pay the invoice or automatically attempt to pay it using the customer’s default payment method.\n    *   If payment succeeds, Stripe updates the invoice status to `paid`.\n    *   If payment fails, the invoice remains `open`.\n4.  Optionally, you can change the status of an unpaid invoice to `void` or `uncollectible`.\n\nYou can [configure Stripe to send customer emails](https://docs.stripe.com/invoicing/send-email) at different stages of the invoice lifecycle, such as when it finalizes an invoice or when automatic payment fails.\n\n## Invoice statuses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInvoices can have one of five statuses. The actions you can take on an invoice depend on its status.\n\n| Status | Description | Possible Actions |\n| --- | --- | --- |\n| [draft](#draft) | The invoice isn’t ready to use. All invoices start in `draft` status. | *   Edit any part of the invoice.<br>*   When the invoice is ready to use, finalize it by changing its status to `open`.<br>*   If the invoice isn’t associated with a subscription, [delete](#deleted) it. |\n| [open](#open) | The invoice is finalized and awaiting payment. | *   Send the invoice to a customer for payment.<br>*   Change [only some elements of the invoice](https://docs.stripe.com/invoicing/invoice-edits). To make more substantive changes, create a new invoice and void the old one.<br>*   Change the invoice’s status to `paid`, `void`, or `uncollectible`. |\n| [paid](#paid) | This invoice is paid. | *   No further actions. |\n| [void](#void) | This invoice is canceled. | *   No further actions. |\n| [uncollectible](#uncollectible) | The customer is unlikely to pay the invoice. Normally, you treat it as bad debt in your accounting process. | *   Change the invoice’s status to `void` or `paid`. |\n\n### Draft invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can update almost any details of a `draft` invoice. You can also delete it, unless it’s associated with a subscription. When a `draft` invoice is ready to send for payment, you finalize it by changing its status to `open`.\n\nYou can delete a `draft` invoice. You can’t recover a deleted invoice.\n\n1.  Go to the [Invoices page](https://dashboard.stripe.com/test/invoices).\n    \n2.  Click the overflow menu () next to the invoice.\n    \n3.  Click **Delete draft**.\n    \n\n### Open invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe invoice has been finalized and is awaiting customer payment. If its amount due is less than the [minimum chargeable amount](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), it automatically transitions to `paid` status and Stripe debits the amount from the [customer’s credit balance](https://docs.stripe.com/billing/customer/balance).\n\nIn the Dashboard, invoices in `open` status can display a different badge, such as `Past due` or `Retrying`. In some scenarios, you can hover over the badge to view an explanatory tooltip.\n\nIf an open non-subscription invoice is waiting for a payment that’s initiated but still pending, it shows the `Pending` badge in the list of invoices. However, its details page shows the `Open` badge.\n\nYou can update only a few elements of an open invoice, such as the memo or metadata. To make more substantive changes, you must [revise the invoice](https://docs.stripe.com/invoicing/invoice-edits) by replacing it with a new one.\n\nYou can’t delete a finalized invoice. To cancel it, change its status to `void`.\n\n### Paid invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe customer has paid the invoice. This status is terminal, which means that the invoice’s status can never change.\n\nTo attempt a payment through the Dashboard, open the [Invoice details page](https://docs.stripe.com/invoicing/dashboard/manage-invoices#invoice-details-page) and click **Charge customer**.\n\n#### Out of band invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a customer pays an invoice out of band (outside of Stripe), you can manually change the [status](#invoice-statuses) to `paid` through the Dashboard or API.\n\nTo manually mark an open invoice as paid in the Dashboard, go to the **Invoice details** page, click **More** and select **Change invoice status**. In the resulting dialog, select the **Paid** option.\n\n### Void invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nVoiding an invoice is conceptually similar to deleting or canceling it. However, voiding an invoice maintains a paper trail, which allows you to look up the invoice by number. Voided invoices are treated as zero-value for reporting purposes, and aren’t payable. This status is terminal, which means that the invoice’s status can never change.\n\nAfter you void an invoice, the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page) is still accessible, and displays a message indicating that the invoice has been voided. You can only void an invoice in `open` or `uncollectible` status.\n\n#### Note\n\nConsult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to [issue another invoice](https://docs.stripe.com/invoicing/integration#create-invoice-code) or [credit note](https://docs.stripe.com/invoicing/integration/programmatic-credit-notes) instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.\n\nTo void an invoice from the Dashboard:\n\n1.  Go to the **Invoice details** page.\n    \n2.  Click **More** and select **Change invoice status**.\n    \n3.  In the resulting dialog, select **Void**.\n    \n\n### Uncollectible invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSometimes your customers can’t pay their outstanding bills. For example, assume that you provide 1,000 USD worth of services to your customer, but they’ve since declared bankruptcy and have no assets to pay the invoice.\n\nAs a result, you decide to write off the invoice as unlikely to be paid. In this case, you can update the status of the invoice to be `uncollectible`. This allows you to track the amount owed for reporting purposes as part of your bad debt accounting process.\n\nYou can mark an open invoice as uncollectible through the **Invoice details** page by clicking **Change invoice status**.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Use the Dashboard](https://docs.stripe.com/invoicing/dashboard)\n*   [Integrate with the API](https://docs.stripe.com/invoicing/integration)\n*   [Status transitions and finalization](https://docs.stripe.com/invoicing/integration/workflow-transitions)",
  "title": "How invoicing works | Stripe Documentation",
  "description": "Learn more about the basics of Stripe Invoicing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition",
  "markdown": "# Revenue Recognition overview | Stripe DocumentationThe Stripe Docs logo\n\n## Automate your accrual accounting process with Stripe Revenue Recognition.\n\nRevenue recognition is a fundamental part of accrual accounting. Generally accepted accounting principles (GAAP) state that you recognize revenue when you realize and earn it, which might be earlier or later than when you actually receive cash. Correctly recognizing and deferring revenue enables you to have the most accurate insights into your business profitability and financial health.\n\n## Who needs revenue recognition ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRevenue recognition is critical for many types of businesses, especially:\n\n*   Public companies or large businesses with over 25 million USD in annual revenue—because they’re legally required to comply with ASC 606 and GAAP and IFRS accounting standards.\n*   Startups that need to follow accrual accounting to raise money from investors or get a loan from a bank.\n*   Subscription and service-based businesses.\n*   Businesses where customers pay up front before receiving a good or service.\n\nRevenue recognition can provide these businesses with a clear picture of their performance.\n\nRevenue recognition gets complicated quickly as businesses scale with larger product lines and increased payment volumes. For subscription businesses that need to manage changes, refunds, disputes, and prorations, revenue recognition can be especially complex. Such subscription updates can complicate the process of recognizing and deferring revenue accurately and compliantly.\n\n### New accounting standards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOn May 28, 2014, the Financial Accounting Standards Board (FASB) and International Accounting Standards Board (IASB) jointly issued [Accounting Standards Codification (ASC) 606](https://asc.fasb.org/606/tableOfContent), a new framework for businesses to recognize revenue from contracts with customers.\n\n## Stripe Revenue Recognition ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Revenue Recognition helps you simplify the process of recognizing revenue without the need for engineering involvement or lengthy configurations. Stripe Revenue Recognition offers you:\n\n*   Recognized and deferred [revenue summaries](https://docs.stripe.com/revenue-recognition/reports/monthly-summary)\n*   Downloadable accounting [reports and waterfall](https://docs.stripe.com/revenue-recognition/reports/waterfall) charts\n*   Interactive revenue numbers for full [audit](https://docs.stripe.com/revenue-recognition/reports/audit-numbers) transparency\n*   Configurable revenue recognition [rules](https://docs.stripe.com/revenue-recognition/rules) and accounting period controls\n\nRead more about Stripe’s revenue recognition [methodology](https://docs.stripe.com/revenue-recognition/methodology).",
  "title": "Revenue Recognition overview | Stripe Documentation",
  "description": "Automate your accrual accounting process with Stripe Revenue Recognition.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-reports",
  "markdown": "# Stripe reporting | Stripe DocumentationThe Stripe Docs logo\n\n## Get insights to run, grow, and understand your business.\n\nGet financial reports\n\nUse preconfigured reports to understand basic activity on your account—like payments, payouts, fees, and balance changes. View in the Dashboard or download a CSV to complete accounting tasks.\n\n[\n\nFind free reports\n\n\n\n](https://docs.stripe.com/reports)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/reporting-hero.b986b9ddc9f8a36d8e544570a2550ba4.png)\n\n## Automated business insights![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/revenue-recognition \"Revenue recognition\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/revenue-recognition.b80ff778d613a23e11d4817f92ade748.png)](https://docs.stripe.com/revenue-recognition \"Revenue recognition\")\n\n[Revenue recognition](https://docs.stripe.com/revenue-recognition \"Revenue recognition\")\n\nAutomate your accrual accounting process to meet ASC 606 and IFRS 15 compliance.\n\n[](https://docs.stripe.com/reconciliation \"Reconciliation automation\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/reconciliation.1660e9fca394f7c7fdd7032b0f051967.png)](https://docs.stripe.com/reconciliation \"Reconciliation automation\")\n\n[Reconciliation automation](https://docs.stripe.com/reconciliation \"Reconciliation automation\")\n\n[Beta](https://docs.stripe.com/reconciliation \"Reconciliation automation\")\n\nAutomate the process of comparing financial records to close your books.\n\nBilling\n\n*   [Pricing models](https://docs.stripe.com/products-prices/pricing-models)\n*   [Acquire new customers](https://docs.stripe.com/quotes)\n*   [Bill and collect payments](https://docs.stripe.com/billing/subscriptions/build-subscriptions)\n*   [Recover and retain revenue](https://docs.stripe.com/billing/revenue-recovery)\n*   [Subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules)\n\nTax\n\n*   [Calculate and collect tax](https://docs.stripe.com/tax/set-up)\n*   [Monitor your tax thresholds](https://docs.stripe.com/tax/monitoring)\n*   [Locations Stripe calculates tax](https://docs.stripe.com/tax/supported-countries)\n*   [Validate Tax IDs](https://docs.stripe.com/tax/invoicing/tax-ids)\n*   [Report and file tax](https://docs.stripe.com/tax/filing)\n\nReporting\n\n*   [Recognize revenue](https://docs.stripe.com/revenue-recognition/get-started)\n*   [Prebuilt financial reports](https://docs.stripe.com/reports)\n*   [Automated reconciliation](https://docs.stripe.com/reconciliation)\n*   [Growth and churn metrics](https://docs.stripe.com/billing/subscriptions/view-metrics)\n\nData\n\n*   [Sync to a data warehouse](https://docs.stripe.com/stripe-data/access-data-in-warehouse)\n*   [Save frequently-used queries](https://docs.stripe.com/stripe-data/write-queries#saving-queries)\n*   [Import external data](https://docs.stripe.com/stripe-data/import-external-data)\n*   [Prebuilt query templates](https://docs.stripe.com/stripe-data/query-transactions)\n*   [Write custom reports](https://docs.stripe.com/stripe-data/write-queries)",
  "title": "Stripe reporting | Stripe Documentation",
  "description": "Along with a suite of reporting tools, Stripe offers several different prebuilt reports to help analyze your business.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports/multiple-accounts",
  "markdown": "# Reports for multiple accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Reports for multiple accountsInvite only\n\n## Download consolidated reports for multiple accounts that belong to your organization.\n\nIf you manage multiple Stripe accounts within your [organization](https://docs.stripe.com/get-started/account/orgs), you can download a consolidated report that includes data from all the accounts, instead of individually accessing and downloading reports from each account separately.\n\n## Download consolidated reports ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo download a consolidated report, you must have a [role](https://docs.stripe.com/get-started/account/teams/roles) with permission to download the given reports in each of the accounts, such as Analyst. You can download consolidated [Balance](https://docs.stripe.com/reports/balance) and [Reconcilliation](https://docs.stripe.com/reports/payout-reconciliation) reports.\n\nTo download a consolidated report for multiple accounts in your organization:\n\n1.  Navigate to any account in the Dashboard, then click **More** > **Reports**.\n2.  Select a downloadable report.\n3.  Click **Download**.\n4.  In the Accounts section, select the additional accounts that you want to include in the consolidated report. We add a new Account ID column to the report.\n5.  Select a download format:\n\n*   Select **Single report** to combine the rows from each individual report into a single CSV file.\n*   Select **Separate report for each account** to generate a .zip folder that contains each individual report as a separate CSV file.\n\n## File size limits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you download reports, there’s a 10 GB limit for each individual account report and a 15 GB limit for consolidated reports with multiple accounts. If you exceed the file download limit, reduce the size of a report by configuring [filters](https://docs.stripe.com/reports/options), such as **Date** and **Currency**.",
  "title": "Reports for multiple accounts | Stripe Documentation",
  "description": "Download consolidated reports for multiple accounts that belong to your organization.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/methodology",
  "markdown": "# Revenue Recognition methodology | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how Revenue Recognition works out of the box within Stripe.\n\nRevenue Recognition is integrated with other Stripe objects to provide intelligent default settings for how revenue should be recognized.\n\nRevenue Recognition automatically calculates all transactions that happen within Stripe down to the millisecond, including subscriptions, invoices, one-time payments, refunds, disputes, and so on.\n\n#### Note\n\nRevenue recognition requirements vary based on a number of factors and the parameters listed above may or may not fit your business. You need to ensure that you understand and comply with the requirements applicable to your business, and that you model your business accordingly.\n\n## Chart of accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRevenue recognition is built on top of a double-entry accounting ledger that tracks debits and credits resulting from your business activity.\n\nTo get the most out of Revenue Recognition, it helps to understand the default chart of accounts and the debits and credits that impact those accounts.\n\n| Account | Debit/Credit type | Description |\n| --- | --- | --- |\n| Revenue | Revenue (credit) | Recognizable portion of finalized invoices, prorated invoice items, and metered billing that count towards revenue during the month. For example, if an invoice line item is for 90 USD with 10 USD in taxes, the total invoice is 100 USD, but the recognizable portion is only 90 USD. |\n| Refunds | Contra Revenue (debit) | Portion of the refunded amount previously recognized. For example, if you issue a 120 USD refund on an annual subscription during the second month, 20 USD for the first 2 months is contra revenue. The remaining 100 USD is adjusted and reflected in your deferred revenue balance in the balance sheet. |\n| Disputes | Contra Revenue (debit) | Portion of the disputed amount previously recognized. For example, if there’s a 120 USD dispute on an annual subscription during the second month, 20 USD for the first 2 months is contra revenue. The remaining 100 USD is adjusted and reflected in your deferred revenue balance in the balance sheet. |\n| CreditNotes | Contra Revenue (debit) | Portion of the credit note amount previously recognized. For example, if there’s a 120 USD credit note on an annual subscription during the second month, 20 USD for the first 2 months is contra revenue. The remaining 100 USD is adjusted and reflected in your deferred revenue balance in the balance sheet. |\n| BadDebt | Contra Revenue (debit) | Previously recognized revenue from invoices that have been marked as uncollectible. |\n| Voids | Contra Revenue (debit) | Previously recognized revenue from invoices that have been voided. |\n| UnbilledVoids | Contra Revenue (debit) | Previously recognized revenue from prorated invoice items that have been deleted. These items are sometimes deleted when they generate unbilled accounts receivable and revenue. |\n| Transfer | Contra Revenue (debit) | Previously recognized revenue from separate transfers. |\n| Discounts | Contra Revenue (debit) | Recognized revenue from invoices that received discounts. Revenue Recognition discount as contra revenue support is currently in private beta. |\n| CustomerBalanceAdjustments | Expense (debit) | Expenses incurred due to manual adjustments to a customer credit balance or exclusion associated with post-paid credit notes on customer balance. |\n| ExternalCustomerBalanceAdjustments | Expense (debit) | Expenses incurred due to exclusion associated with post-paid credit notes on external customer balance. |\n| Underpayments | Expense (debit) | Expenses incurred due to transfers that underpay an invoice, as used by the [customer credit balance](https://docs.stripe.com/invoicing/bank-transfer#underpayments) payment method or [Sources](https://docs.stripe.com/sources/customers). |\n| Fees | Expenses (debit) | Expenses incurred due to Stripe fees. Revenue Recognition Stripe fees support is currently in private beta. |\n| Recoverables | Gains (credit) | Recovered funds that aren’t attributable to revenue. For example, if you have a 120 USD dispute on an annual subscription during the second month, 20 USD for the first 2 months is contra revenue and the remaining 100 USD is adjusted from the deferred revenue balance. If you win the dispute and 120 USD is returned to you, 20 USD is reflected as revenue and the remaining 100 USD is reflected as recoverables. |\n| Exclusion | Gains (credit) | Excluded funds that aren’t attributable to revenue. To exclude transactions, set up [exclusion rules](https://docs.stripe.com/revenue-recognition/rules/create-a-rule#treatments) or use [exclusion import](https://docs.stripe.com/revenue-recognition/data-import#exclusion-import). |\n| FxLoss | Loss (debit) | Total loss due to foreign currency exchange rates. |\n| ConnectTransferLoss | Loss (debit) | Total loss due to destination charge refund, and the transfer reversal will reverse the ConnectTransferLoss account. |\n\n## Data modeling for Revenue Recognition![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can better understand Revenue Recognition by understanding the data modeling—see the following descriptions of how Revenue Recognition handles common Stripe resources.\n\n### Subscriptions and Invoicing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSubscriptions and Invoices are higher level resources that contain detailed information about each transaction.\n\nSubscriptions create invoices on each cycle, with each subscription item corresponding to an invoice line item. The period of each line item is automatically populated with the period of the subscription item.\n\nRevenue recognition treats each invoice line item as its own performance obligation. When the invoice finalizes, the total recognizable amount is deferred and subsequently amortized evenly over the period of each invoice line item.\n\nIf a period isn’t set on an invoice line item, the amount on that invoice line item is recognized entirely when the invoice is finalized. Use the [Data Import feature](https://docs.stripe.com/revenue-recognition/data-import) to configure your invoice data, or set [rules](https://docs.stripe.com/revenue-recognition/rules) to customize when and how invoice line items are recognized.\n\nFor more details and examples regarding how Revenue Recognition handles subscriptions and invoices with specific scenarios involving upgrades, downgrades, discounts, taxes, and so on, review the [Subscriptions and Invoicing](https://docs.stripe.com/revenue-recognition/methodology/subscriptions-and-invoicing) page.\n\n### One-time payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne-time payments created in the Dashboard or through the [Charges](https://docs.stripe.com/api/charges) and [PaymentIntents](https://docs.stripe.com/api/payment_intents) APIs don’t contain as much information as invoices.\n\nBecause no service period or fulfillment information exists for them, by default, one-time payments are recognized immediately when the payment occurs.\n\n[Import data](https://docs.stripe.com/revenue-recognition/data-import) to add a service period or split a payment into different revenue recognition schedules. This allows you to customize revenue treatment behavior and configure rules such as payment amount, description, and customer email.\n\nFor more details and examples on how Revenue Recognition handles one-time payments, review the [One-time payments](https://docs.stripe.com/revenue-recognition/methodology/one-time-payments) page.\n\n### Refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRevenue Recognition handles refunds and disputes by generating contra revenue to offset already recognized revenue.\n\nFor transactions with both already-recognized and deferred revenue, the recognized portion is added to either the refunds or disputes contra revenue account, which cancels out the deferred revenue.\n\nFor more details and examples on how Revenue Recognition handles refunds and disputes, review the [Refunds and Disputes](https://docs.stripe.com/revenue-recognition/methodology/refunds-and-disputes) page.\n\n### External transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can track revenue collected outside of Stripe using invoices. Configure the invoice as you would any other, and then mark the invoice as paid either directly in the Dashboard, or through the `paid_out_of_band` option in the API.\n\nInvoices marked as paid outside of Stripe contribute not to the cash account, but rather to the external asset account.\n\n#### Caution\n\nIf you’d like to consolidate your financial data from outside Stripe onto Revenue Recognition, review the [Data import](https://docs.stripe.com/revenue-recognition/data-import) page.\n\n### Multi-currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your business handles transactions in multiple currencies, accurately recognizing revenue can be complicated.\n\nRevenue Recognition processes transactions and generates journal entries based on your account’s settlement currencies. Transactions with presentment currencies that aren’t supported as settlement currencies are automatically converted to your account’s default settlement currency.\n\nFor payments and paid invoices, we use the exchange rate for the actual money movement (that is, reflected on the balance transaction). If you incur a time delay between issuing a bill (for example, an invoice) and it getting paid, the difference in amounts because of changing exchange rates between the two times is added to the FxLoss account.\n\nFor more details and examples on how Revenue Recognition handles multiple currencies, review the [Multi-currency](https://docs.stripe.com/revenue-recognition/methodology/multi-currency) page.\n\n### Data availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRevenue Recognition computes your data twice daily, at 0:00am UTC and at 12:00pm UTC.\n\nThe data processed at 0:00am UTC encompasses account activity from the prior day’s 12:00pm to that day’s 11:59pm UTC. The 12:00pm UTC update covers activity from 0:00am to 11:59am UTC of the same day.\n\nIt can take 16-72 hours to process the data. Users in time zones far from UTC might notice slight delays in reports because late-day activity in PST corresponds to early hours of the following day in UTC.\n\nAs an example, you might have account activity occurring on August 1, 2023, from 0:00 am to 11:59 am UTC. You can expect to see this activity reflected in the Revenue Recognition reports by August 4, 2023, at 12:00 pm UTC. Similarly, you can access reports for activity from 12:00 pm to 11:59 pm UTC on August 1, 2023 by August 5, 2023, at 0:00 am UTC.\n\n## Journal entries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery billing activity in Stripe generates a set of journal entries. A journal entry is a record of a transaction. Each journal entry consists of a debit and a credit account. For example, an entry which finalizes an invoice would debit AccountsReceivable and credit DeferredRevenue. Paying an invoice would debit Cash and credit AccountsReceivable.\n\nThese entries may occur in asset, liability, equity, expense, or revenue accounts. You can learn more about the definitions of each account that will appear in a journal entry under our [Chart of accounts](https://docs.stripe.com/revenue-recognition/methodology#chart-of-accounts) section.\n\nThe table below shows the applicable billing activities for common journal entries. You can export journal entries to CSV using the debits and credits report, which you can find in the [Reports tab in the Dashboard](https://dashboard.stripe.com/revenue-recognition). In addition, there are options to download debits and credits reports by the event type, which provide a brief description of the recorded event, making it easier to understand the nature of each journal entry.\n\n#### Caution\n\nThe following table isn’t the complete set of entries. We’ll be periodically updating the entries. If there’s a specific entry that you require assistance with, please [create a ticket](https://support.stripe.com/contact/email?topic=financial_reports) on our support page.\n\n| Debit | Credit | Definition |\n| --- | --- | --- |\n| AccountsReceivable | DeferredRevenue | Invoice being finalized |\n|     | UnbilledAccountsReceivable | Unbilled invoice item being invoiced |\n|     | PassthroughFees | Finalize an invoice with passthrough fees |\n|     | TaxLiability | Finalize an invoice with tax |\n| BadDebt | AccountsReceivable | Mark an invoice as uncollectible |\n|     | PendingCash | Mark an invoice with a pending ACH as uncollectible |\n|     | Recoverables | Mark an invoice which is partially paid with customer balance as uncollectible |\n| Cash | AccountsReceivable | Invoice is paid |\n|     | CustomerBalance | Paying for a negative customer balance |\n|     | Exclusion | Cash is excluded |\n|     | PendingCash | ACH paying invoice is confirmed |\n|     | Recoverables | Winning a dispute for amounts that were previously adjusted from deferred revenue balance |\n| ConnectTransferLoss | Cash | Loss from a transfer |\n| CreditNotes | AccountsReceivable | Prepaid credit note is issued on an unpaid invoice |\n|     | CustomerBalance | Post paid credit note credits customer balance |\n|     | ExternalCustomerBalance | Post paid credit note credits external customer balance |\n| CustomerBalance | CustomerBalanceAdjustments | Reduce the amount owned by the customer |\n| CustomerBalanceAdjustments | CustomerBalance | Increase the amount owned by the customer |\n| DeferredRevenue | Cash | Caused by Refunds and Disputes |\n|     | Revenue | Revenue is recognized |\n| ExternalAsset | AccountsReceivable | Mark an invoice as paid outside of Stripe |\n| Refunds | Cash | Refund |\n| TaxLiability | CustomerBalance | Credit note on an invoice with tax, and it credits customer balance |\n|     | ExternalCustomerBalance | Credit note on an invoice with tax, and it credits external customer balance |\n| UnbilledAccountsReceivable | Revenue | Revenue recognized on unbilled invoice item |\n| UnbilledVoids | UnbilledAccountsReceivable | Unbilled invoice item is deleted |\n| Voids | AccountsReceivable | Void an invoice |\n|     | BadDebt | Void an uncollectible invoice |\n|     | CustomerBalance | Void an invoice partially paid with customer balance |\n\nThe activities above are all based on positive amounts. It is important to note that these billing activities can be reversed. These reverse activities occur when activities are triggered on negative invoice line item amounts.\n\n## Negative Line Item![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA negative line item occurs when the value of the line item becomes higher than the amount it is paid for. This occurs typically during a subscription downgrade or upgrade when the product tier changes.\n\nHere is an example of journal entries which contains a negative line item caused by a downgrade:\n\n*   On April 1, the invoice is generated for a monthly subscription worth $90 USD and the customer pays for it.\n*   On April 21, the customer requests a downgrade of their service to a $30 USD subscription. This results in 2 unbilled line items for the remaining time of the subscription.\n    *   il\\_1 is for the remaining time on new plan worth $10\n    *   il\\_2 is for the remaining time of old plan worth $-30\n*   On May 1, the invoice is generated containing the line items generated by the downgrade as well for the new line item, il\\_3, representing the month of May. The customer pays for the invoice on the same day.\n*   On May 4, the customer requests a full refund on the invoice for May, resulting in full refunds on the line item created by the downgrade as well as the new line item for May. We process the refund.\n\n| Date | Debit | Credit | Amount | Line Item |\n| --- | --- | --- | --- | --- |\n| 2022-04-21 | UnbilledAccountsReceivable | Revenue | $10 | il\\_1 |\n|     | Revenue | UnbilledAccountsReceivable | $30 | il\\_2 |\n| 2022-05-01 | AccountsReceivable | DeferredRevenue | $30 | il\\_3 |\n|     | Cash | AccountsReceivable | $30 | il\\_3 |\n|     | DeferredRevenue | Revenue | $30 | il\\_3 |\n|     | AccountsReceivable | UnbilledAccountsReceivable | $10 | il\\_1 |\n|     | Cash | AccountsReceivable | $10 | il\\_1 |\n|     | UnbilledAccountsReceivable | AccountsReceivable | $30 | il\\_2 |\n|     | AccountsReceivable | Cash | $30 | il\\_2 |\n| 2022-05-04 | Refunds | Cash | $10 | il\\_1 |\n|     | Cash | Refunds | $30 | il\\_2 |\n|     | Revenue | Cash | $30 | il\\_3 |",
  "title": "Revenue Recognition methodology | Stripe Documentation",
  "description": "Learn how Revenue Recognition works out of the box within Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/pricing",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Pricing\n\n## Learn about fees and pricing tiers for Revenue Recognition.\n\nStripe charges a fee for every payment that we process. To see what fees we charged, read the [fees report](https://dashboard.stripe.com/balance?type=stripe_fee), which Stripe updates daily. Some fees for line items might take a few days to appear in the report.\n\nThe following table explains Revenue Recognition fees.\n\n| Situation | Revenue Recognition fees charged |\n| --- | --- |\n| **Successful transactions** | Stripe applies the fee only when a payment succeeds (for example, when an invoice is paid or when a one-time payment is made). |\n| **Transactions processed by Stripe** | Stripe calculates the fee based on the volume processed, rather than the volume recognized. If a user paid 120 USD for an annual subscription on December 1, Stripe calculates the fee based on the 120 USD volume in December, rather than the 10 USD recognized in December. |\n| **Refunded transactions** | If you refund the corresponding payment, Stripe won’t refund the Revenue Recognition fee. |\n| **Excluded transactions** | Stripe charges a fee for all transactions we process, which means you incur a fee even if you exclude a transaction from Revenue Recognition using [custom rules](https://docs.stripe.com/revenue-recognition/rules). The transaction still counts toward your volume because Stripe successfully processed the transaction. |\n| **Voided transactions** | If you void an invoice, it won’t appear in your monthly volume and Stripe won’t charge the Revenue Recognition fee. |\n\n## Fees for multiple settlement currencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach currency has an [equivalent threshold](https://stripe.com/revenue-recognition#pricing). If you have multiple settlement currencies, the combined percentage of thresholds met determines the final fee tier. For each currency, Stripe computes the percentage of volume to the currency’s volume threshold. We call this _percentage-to-threshold volume_. If the total percentage-to-threshold-volume is more than 100, you qualify for a lower-priced tier.\n\nTo demonstrate, see the following two example scenarios.\n\n#### Scenario 1![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe total percentage-to-threshold-volume is 82%, which means you don’t qualify for the discount.\n\n| Currency | Merchant volume | Threshold volume | Percentage-to-threshold volume |\n| --- | --- | --- | --- |\n| USD | 80,000 | 100,000 | 80% |\n| GBP | 1,000 | 50,000 | 2%  |\n\n#### Scenario 2![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe total percentage-to-threshold-volume is 120%, which means you qualify for the discount.\n\n| Currency | Merchant volume | Threshold volume | Percentage-to-threshold volume |\n| --- | --- | --- | --- |\n| USD | 80,000 | 100,000 | 80% |\n| GBP | 20,000 | 50,000 | 40% |\n\n## Features without fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe doesn’t charge fees for:\n\n*   [Rules](https://docs.stripe.com/revenue-recognition/rules)\n*   [Reports](https://docs.stripe.com/revenue-recognition/reports)\n*   [Accounting period controls](https://docs.stripe.com/revenue-recognition/accounting-period-control)\n*   [Data export](https://docs.stripe.com/revenue-recognition/api)",
  "title": "Pricing | Stripe Documentation",
  "description": "Learn about fees and pricing tiers for Revenue Recognition.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/connect",
  "markdown": "# Revenue Recognition for Connect platforms\n\n## Revenue Recognition for Connect platformsBeta\n\n## Learn how Revenue Recognition works with Connect platforms.\n\nYou can collect application fees in three ways: [destination charges](https://docs.stripe.com/connect/destination-charges), [direct charges](https://docs.stripe.com/connect/direct-charges), and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers).\n\nCreate destination charges on your platform account to take fees, then transfer remaining funds to your connected accounts. Revenue Recognition recognizes the revenue from the application fees.\n\nCreate direct charges to make charges directly on the connected account and take fees in the process. Revenue Recognition recognizes the revenue from the application fees.\n\nCreate separate charges and transfers to make charges on your platform account on behalf of connected accounts, perform transfers separately, and retain funds in the process. Revenue Recognition recognizes the revenue from the retained funds.\n\nDestination charges are available to all users. If you’re interested in using Revenue Recognition for direct charges or separate charges and transfers, please [create a ticket](https://support.stripe.com/contact/email?topic=financial_reports) on our support page.",
  "title": "Revenue Recognition for Connect platforms | Stripe Documentation",
  "description": "Learn how Revenue Recognition works with Connect platforms.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/methodology/multi-currency",
  "markdown": "# Revenue Recognition with multiple currencies\n\n## Learn how Revenue Recognition works with multiple currencies.\n\nTwo types of currencies are important for the purpose of revenue recognition—presentment currencies and settlement currencies. Presentment currencies are the currencies that your customers use to pay, settlement currencies are the currencies that you receive payment in.\n\nFor all transactions with presentment currencies matching one of your settlement currencies, Revenue Recognition processes journal entries in that currency directly. In this case, no currency conversion takes place because you can receive payment in that currency directly. Transactions with presentment currencies that aren’t supported as a settlement currency are automatically converted to the default settlement currency for your Stripe account.\n\nPayments and paid [invoices](https://docs.stripe.com/api/invoices \"invoices\") use the exchange rate for the actual money movement (that is, what’s reflected on the balance transaction) for revenue recognition. For example, if you collected 10 EUR from a customer that settled in your account as 12 USD, Revenue Recognition uses 12 USD as the transaction amount.\n\nOne-time payments and invoices that are paid immediately when they finalize don’t incur exposure to fluctuating exchange rates or foreign exchange gains or losses.\n\n## FX loss![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHowever, sometimes an invoice is finalized first, and paid later. In this case, the exchange rate may have changed between finalization and payment, creating a need to track gains and losses because of foreign exchange.\n\nFor revenue recognition purposes (for example, calculating accounts receivable), any activity that gets booked before an invoice is paid uses an estimated exchange rate at the time the invoice finalizes. The difference between the estimated exchange rate and the actual exchange rate, if any, is added to the FxLoss account.\n\nIn this example, the exchange rate changes between when the invoice finalizes and when it’s paid—and assumes your account settles in USD, but the customer is paying in EUR.\n\n*   On January 1, an invoice finalizes for 30 EUR. The EUR to USD exchange rate is 1.20\n*   On February 1, the customer pays the invoice for 30 EUR. The EUR to USD exchange rate is 1.10\n\nBecause of the change in exchange rate, we expected to receive 36 USD at the time the invoice finalized, but we only received 33 USD when it was paid, resulting in a net FX loss of 3 USD.\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| AccountsReceivables | +36.00 | \\-36.00 |\n| Revenue | +36.00 |     |\n| Cash |     | +33.00 |\n| FxLoss |     | +3.00 |\n\n## FX Loss from refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFxLoss can occur whenever you have a time delay between two operations, which could happen when a payment gets refunded later.\n\nIn this example, the exchange rate changes between a one time payment and when it gets refunded—and assume your account settles in USD, and the customer is paying in EUR.\n\n*   On January 1, the customer makes a one time payment for 30 EUR. The EUR to USD exchange rate is 1.20.\n*   On February 1, they receive a refund for 30 EUR. The EUR to USD exchange rate is 1.10\n\nBecause of the change in exchange rate, you received 36 USD, but refunded only 33 USD, resulting in a net FX gain of 3 USD.\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| Revenue | +36.00 |     |\n| Cash | +36.00 | \\-36.00 |\n| Refunds |     | +33.00 |\n| FxLoss |     | \\-3.00 |",
  "title": "Revenue Recognition with multiple currencies | Stripe Documentation",
  "description": "Learn how Revenue Recognition works with multiple currencies.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/reports",
  "markdown": "# Revenue Recognition reports | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Revenue Recognition reports.\n\nRevenue Recognition automatically generates reports that you can view in the Stripe Dashboard and export as CSV files. These reports include key information like revenue and deferred revenue. They’re available in both aggregate views for high-level analysis, and detailed views so you can validate data.\n\n## Integration requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRevenue Recognition assumes that you’ve properly modeled your business. This includes:\n\n*   Modeling subscriptions using [products and prices](https://docs.stripe.com/products-prices/overview), and [customers](https://docs.stripe.com/billing/customer).\n*   Setting taxes using the [default\\_tax\\_rates](https://docs.stripe.com/api/subscriptions/object#subscription_object-default_tax_rates) attribute, not as line items.\n*   Setting discounts using the [discount](https://docs.stripe.com/api/subscriptions/object#subscription_object-discount) object, not as [invoice](https://docs.stripe.com/api/invoices \"invoices\") items.\n\n#### Caution\n\nRevenue recognition requirements vary based on a number of factors, including the location of your business and the goods and services that you sell. You need to make sure that you understand and comply with the requirements applicable to your business, and that you model your business accordingly.\n\n## Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Revenue Recognition section of your Dashboard provides high-level information regarding the operations and financial health of your business. It includes [graphs for recognized revenue and deferred revenue](https://dashboard.stripe.com/revenue-recognition), a [monthly summary](https://dashboard.stripe.com/revenue-recognition), and a [revenue waterfall report](https://dashboard.stripe.com/revenue-recognition/accounting-reports).\n\nThe Revenue Recognition section is also where you can manage your Stripe integration, such as [uploading your revenue data](https://dashboard.stripe.com/revenue-recognition/data-import), [defining custom rules](https://dashboard.stripe.com/revenue-recognition/rules) on how to treat your revenue, and [mapping to the chart of accounts](https://docs.stripe.com/revenue-recognition/chart-of-accounts) that you use in your general ledger.\n\nYou can download any accounting report or statement you’re viewing by clicking **Download**. Below is a list of the different report formats available to you for download as a CSV file:\n\n| Report format | Description |\n| --- | --- |\n| **Summary** | This report provides a summary of revenue recognition on your account for the selected period. |\n| **Product** | This report provides a detailed view of revenue recognition on your account over the selected period, organized by product. |\n| **Price** | This report provides a detailed view of revenue recognition on your account over the selected period, organized by price. It can include information such as pricing metadata and pricing intervals. |\n| **Customer** | This report provides a detailed view of revenue recognition on your account over the selected period, organized by customer. It can include information such as customer name, email, and address. |\n| **Invoice** | This report provides a detailed view of revenue recognition on your account over the selected period, organized by invoice. It can include information such as charges, refunds, and dispute IDs. |\n| **Line item** | This report provides a detailed view of revenue recognition on your account over the selected period, organized by line item. It can include information at the granularity of a line item (such as charges, refunds, and dispute IDs). |\n| **Metadata** | This report provides a customized summary of revenue recognition on your account for the selected period, grouped by the user selected metadata object type and key. This report supports grouping by charge, customer, invoice, invoice item, product, or subscription metadata. Learn more about metadata [here](https://docs.stripe.com/api/metadata). |\n| **Event type** | This report is available in the debits and credits reports. It provides a detailed view of revenue recognition on your account over the selected period, organized by event type. The event type provides a brief description of the recorded event, making it easier to understand the nature of each journal entry. |\n| **Invoice event type** | This report is available in the debits and credits reports. It provides a detailed view of revenue recognition on your account over the selected period, organized by invoice and event type. It can include information such as charges, refunds, and dispute IDs. |\n| **Line item event type** | This report is available in the debits and credits reports. It provides a detailed view of revenue recognition on your account over the selected period, organized by line item and event type. It can include information at the granularity of a line item (such as charges, refunds, and dispute IDs). |\n\n#### Caution\n\nRevenue Recognition generates reports from transactions processed by Stripe. Expect a 72 hour delay before the data displays in the Dashboard.\n\nAlso, all report information is accessible only after you [import the data](https://docs.stripe.com/revenue-recognition/data-import).\n\n### Revenue graphs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe revenue graphs in the Dashboard provide a high-level view of your business by displaying revenue activity over time. The recognized revenue graph shows your net recognized revenue and the deferred revenue graph shows your ending balance per month.\n\nThe monthly and daily charts differentiate between open and closed accounting periods using colors. The figures continue to change until the accounting period closes. Toggling to the daily view provides a day-by-day snapshot of recognized and deferred revenue for the selected month. Revenue from metered billing is recognized in full when invoices finalize, or when the accounting period closes.\n\n### AR aging graphs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe accounts receivable (AR) aging graphs in the Dashboard provide a high-level view of your accounts receivable activity over time. Use this information to understand the financial health of your customers. The balance graph shows the outstanding invoice amounts for the specified periods. The summary table shows unpaid invoice amounts and categorizes them by how long the invoices have been outstanding for the specified period.\n\n### Monthly summary ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [monthly summary](https://docs.stripe.com/revenue-recognition/reports/monthly-summary) provides a detailed breakdown of activity for the last complete month. Use this information to understand how your activity affected revenue and to book journal entries. You can also see activity that contributed to your net revenue. For example, you can see the portions of new billings that you recognized, and contra revenue items. This section also lists changes to deferred revenue based on your activity, like portions of new billings that you haven’t recognized and contra revenue items.\n\nThe monthly summary only shows details if you had activity. For example, if you don’t have any contra revenue, the monthly summary doesn’t include it.\n\n### Revenue waterfall ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [revenue waterfall](https://docs.stripe.com/revenue-recognition/reports/waterfall), sometimes called a revenue schedule chart, displays expected recognizable revenue over time. Use this to understand how activity from each period affects revenue in future periods.\n\nThis report shows expected revenue amounts based on historical billings. It doesn’t model future billings and it doesn’t predict future revenue from those potential billings. The expected future revenue amounts change as you add future billings.\n\n### CSV reports ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can download reports as a CSV file at any time. To do this:\n\n1.  Click **Download** next to the report.\n2.  If applicable, select the report format.\n3.  Choose the columns you want to include in the report.\n4.  Click **Download**.\n\nThe reports you can download include:\n\n| Report | Description |\n| --- | --- |\n| **[Income statement](https://docs.stripe.com/revenue-recognition/reports/income-statement)** | Detailed revenue and contra revenue breakdown by month |\n| **Balance sheet** | Detailed balance sheet account breakdown by month |\n| **Debits and credits** | Monthly debit and credit journal entries shown at these levels: summary, product, price, customer, invoice, line item, metadata, event type, invoice event type, and line item event type |\n| **Accounts receivable aging** | Outstanding invoice amounts grouped into age buckets shown at these levels: summary, product, price, customer, invoice, line item, and metadata |\n| **Corrections** | Monthly correction entries shown at these levels: summary, product, price, customer, invoice, line item, and metadata |\n\nThe [income statement](https://docs.stripe.com/revenue-recognition/reports/income-statement) report shows revenue, contra revenue, expenses, gains, and losses. Contra revenue adjustments are deductions from gross revenue. Applying the contra revenue to your gross revenue results in your net income. Use this report to better understand your net revenue and determine how you want to track contra revenue items.\n\nThe balance sheet report shows the beginning and ending balances for accounts like deferred revenue, accounts receivable, cash, and so on. You can use this report to understand overall inflows and outflows to these accounts, as well as how revenue activity ties to cash.\n\nThe accounts receivable aging report consolidates outstanding invoice amounts and groups them into age ranges: not yet due, 1-30 days, 31-60 days, 61-90 days, 91-120 days, and over 120 days. The report rounds up the ranges (for example, an invoice overdue by 30.5 days falls into the 31-60 days range). You can use this report to understand your collections performance and identify customers with outstanding invoices that are potentially collectible.\n\nThe corrections report displays corrected ledger entries, ensuring the accuracy and transparency of your accounting data. Corrections occur when changes are made to ledger entries in closed accounting periods. These changes are due to:\n\n*   [Data import](https://docs.stripe.com/revenue-recognition/data-import) for past transactions\n*   Adding, updating, and deleting [chart of accounts mappings](https://docs.stripe.com/revenue-recognition/chart-of-accounts) or [rules](https://docs.stripe.com/revenue-recognition/rules)\n*   Modifying [revenue controls](https://docs.stripe.com/revenue-recognition/revenue-controls)\n*   Bug fixes introduced by Revenue Recognition system upgrades\n\nTo allow corrections to backdate to their original periods, reopen the closed accounting periods with [accounting period control](https://docs.stripe.com/revenue-recognition/accounting-period-control).",
  "title": "Revenue Recognition reports | Stripe Documentation",
  "description": "Learn about Revenue Recognition reports.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/revenue-contracts",
  "markdown": "# Revenue Recognition contracts | Stripe DocumentationThe Stripe Docs logo\n\n## Revenue Recognition contractsBeta\n\n## Learn how to configure revenue contracts and model enterprise B2B sales contracts in Stripe Revenue Recognition.\n\nThe revenue contracts feature facilitates the representation of enterprise sales-led contracts in [Revenue Recognition](https://dashboard.stripe.com/revenue-recognition). It allows you to customize revenue schedules using custom performance obligations that are decoupled from billing periods. Additionally, you can track key metrics at a contract level and improve your financial insights.\n\n## Customize revenue schedules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRevenue contracts enables the creation of custom contract items that dictate how revenue is recognized instead of invoice line items. It allows you to attach billing models (for example, invoices, subscriptions, payments) to the contract used as payment collection containers.\n\n### Example ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nGiven a 2-year B2B contract with monthly billing, you can create a contract item for the 2-year period:\n\n| Contract Item |     |\n| --- | --- |\n| Amount | 10000 |\n| [Price](https://docs.stripe.com/api/prices) | price\\_1 |\n| Period | Jan 1, 2022 - Jan 1, 2024 |\n\nYou can then attach a transaction/billing model to the contract to be used for payment allocation:\n\nGiven this contract setup, Revenue Recognition can augment reports by incorporating non-GAAP accounts like contract assets and deferred revenue. In turn, this enables us to elevate our metrics as the contract undergoes monthly billing.\n\n## Track contract-level metrics ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you open up a revenue contract in Revenue Recognition, you can track high-level metrics across a group of contract items and transactions such as:\n\n*   Total contract value\n*   Annual contract value\n*   Billing to date\n*   Revenue to date\n*   Future schedule billings\n*   Unbilled deferred revenue\n\n## Integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Salesforce CPQ Connector ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can import all your orders and contracts generated in Salesforce using the [Stripe Billing Connector for Salesforce CPQ](https://docs.stripe.com/connectors/salesforce-cpq/overview). When this connection is set up, you can manage Stripe Billing subscriptions and revenue contracts associated with your Salesforce orders.\n\n### API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe’re working on a direct API solution for the creation and management of revenue contracts.",
  "title": "Revenue Recognition contracts | Stripe Documentation",
  "description": "Learn how to configure revenue contracts and model enterprise B2B sales contracts in Stripe Revenue Recognition.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/overrides",
  "markdown": "# Revenue Recognition transaction overrides | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to make manual corrections to your Revenue Recognition reports.\n\n#### Warning\n\nStripe will soon deprecate the transaction override feature. Use the [data import feature](https://docs.stripe.com/revenue-recognition/data-import) instead.\n\nIt’s possible for the information on a transaction to become inaccurate for revenue recognition purposes. This can happen for a number of reasons, such as human error or evolving terms of a sale. The transaction override feature allows you to make corrections, regardless of when you created the transaction.\n\n## Creating a transaction override ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can find the transaction overrides section at the bottom of the Revenue Recognition page.\n\n![Add transaction override modal](https://b.stripecdn.com/docs-statics-srv/assets/transaction-override-add-modal.8d198b30d4dc9c1a53fa374d4d647550.png)\n\n[](#model)\n\nTo get started, enter the `id` of the transaction to override. Stripe supports overrides on the following transaction models:\n\nYou can find the `id` of a transaction in the Dashboard or using the API. If the transaction occurred in a previous month, you can also find it in the following report downloads when formatted by [invoice](https://docs.stripe.com/api/invoices \"invoices\"):\n\n*   Invoice Statement\n*   Debits and credits\n*   Corrections\n\n[](#override)\n\nThe following override types are available:\n\n| Override Type | Description |\n| --- | --- |\n| Recognition period start and end dates | The start date and end dates correspond to when the service started and ended. The revenue of this transaction is recognized within this period. Start and end dates can have the same value, in which case revenue is recognized all at once. Read more about [how transaction overrides work](https://docs.stripe.com/revenue-recognition/overrides#how-transaction-overrides-work) below. |\n| Transaction exclusion | Excluding a transaction removes all records of it from revenue recognition. This only works for invoices that are either [voided](https://docs.stripe.com/invoicing/overview#void) or [manually marked as paid](https://docs.stripe.com/invoicing/overview#paid), and have no customer balance applied to them. |\n\n## How transaction overrides work ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create transaction overrides for transactions that occurred in both past accounting periods and in the current accounting period. If the transaction occurred in a past accounting period, corrections are implemented prospectively at the end of the current accounting period. You can view these corrections in the reports for the current period after it closes.\n\nIf the overridden transaction occurred in the current accounting period, it’s not reflected as a correction in the current period. Instead, it’s recognized using the new attributes from the override.\n\nCreating a transaction override doesn’t alter the attributes of the transaction model being overridden.\n\nYou can make changes to a transaction override by deleting the override and creating a new one. If you delete an override that impacts transactions in closed [accounting periods](https://docs.stripe.com/revenue-recognition/accounting-period-control), the first open accounting period will reflect the effect of the deletion. If the deleted override impacts transactions in open accounting periods, the effect applies directly to those accounting periods.\n\n#### Note\n\nIf you have any feedback on how we can improve transaction overrides to better suit your accounting needs, visit https://support.stripe.com/.",
  "title": "Revenue Recognition transaction overrides | Stripe Documentation",
  "description": "Learn how to make manual corrections to your Revenue Recognition reports.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/reports/audit-numbers",
  "markdown": "# Audit your numbers | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Stripe Dashboard to examine the details of your revenue numbers.\n\nYou can get a detailed view of accounting numbers from the Dashboard either by customers or by transactions for:\n\n*   Each number in the [monthly summary report](https://docs.stripe.com/revenue-recognition/reports/monthly-summary)\n*   Each number in the [revenue waterfall report](https://docs.stripe.com/revenue-recognition/reports/waterfall)\n*   Each number in the AR aging summary report\n*   A customer\n*   An invoice\n\n## Monthly summary report ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nChoose a month in [the summary section](https://dashboard.stripe.com/revenue-recognition) to get a report of the activity that occurred during that time.\n\nClick an amount in the report to see the details of this number broken down into a list of customers and their total amount for the month.\n\nIn the customer list, click a customer name to see all their transactions for the month.\n\n## Revenue waterfall report ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSelect a range of dates in [the waterfall section](https://dashboard.stripe.com/revenue-recognition/accounting-reports) (by month-year) to see the distribution of revenue across one or more accounting periods.\n\nClick an amount in the report to see the details of this number broken down into a list of customers and their total.\n\nIn the customer list, click a customer name to see all their transactions for the specified dates.\n\n## AR aging summary report ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSpecify a time period in [the AR aging summary section](https://dashboard.stripe.com/revenue-recognition) to see unpaid invoice balances along with the length of time the invoices have been outstanding (age).\n\nClick an amount in the table to see the details of this number broken down into a list of customers or invoices. From the customer list, select a customer to see all their invoices for the specified time period and age. From the invoice list, select an invoice to see its invoice details.\n\n## Customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSelect a customer from the [Customers view](https://dashboard.stripe.com/customers) in the Dashboard.\n\nIn the **Invoices** section, click **View revenue recognition** to see the customer’s accounting details, which include:\n\n*   The total balance for each account\n*   The details on each account across the accounting periods\n\n## Invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSelect an invoice from the [Invoices view](https://dashboard.stripe.com/invoices) in the Dashboard.\n\nChoose **More** > **View revenue recognition** to see the invoice’s accounting details, which include:\n\n*   The total balance for each account\n*   The details on each account across the accounting periods",
  "title": "Audit your numbers | Stripe Documentation",
  "description": "Use the Stripe Dashboard to examine the details of your revenue numbers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/rules",
  "markdown": "# Revenue Recognition rules | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Revenue Recognition rules.\n\nConfigure [Revenue Recognition rules](https://dashboard.stripe.com/revenue-recognition/rules) to define revenue treatments specific to your business.\n\nStripe Revenue Recognition allows you to configure custom rules to handle revenue treatments specific to your business needs. For example, you can configure a rule to:\n\n*   **Categorize** an [invoice](https://docs.stripe.com/api/invoices \"invoices\") line item as a tax or fee\n*   **Book** a transaction amount or invoice line item as a passthrough fee\n*   **Exclude** transactions from specific customers or test invoices\n*   **Amortize** revenue over a specified time period relative to payment or invoice finalization date\n*   **Recognize** revenue after a specific time period to model a future fulfillment schedule\n*   **Allocate** multiple revenue treatments to a single transaction amount\n\nRules are typically applied to reports 24-48 hours after setting them. Rules that you apply to a report have an `active` status. Rules that you haven’t applied to a report remain in a `processing` status.\n\n## Default rules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Revenue Recognition provides a set of default rules to model the [methodology](https://docs.stripe.com/revenue-recognition/methodology) for handling common Stripe resources.\n\n*   For invoice line items with service periods, the line item amount amortizes evenly over its service period. If a period isn’t set on an invoice line item, the amount is recognized entirely when the invoice finalizes.\n*   Other payments not made through an invoice are recognized immediately upon payment if no service period or fulfillment information exists, or by the [imported](https://docs.stripe.com/revenue-recognition/data-import) service period or fulfillment data.\n\n![Default rules](https://b.stripecdn.com/docs-statics-srv/assets/default-rules.1cdaa035a358fec4294971ba23bddaa1.png)\n\n## Custom rules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustom rules override Stripe’s default revenue treatment behaviors where applicable and you can add or modify them on the Stripe Dashboard.\n\nYou can apply rules to:\n\n*   [Products](https://docs.stripe.com/api/products \"Products\")\n*   [Customers](https://docs.stripe.com/api/customers \"Customers\")\n*   [Invoice line items](https://docs.stripe.com/api/invoices/line_item)\n*   [Other payments](https://docs.stripe.com/api/charges) (that is, payments that aren’t associated with invoices)\n\nSee how to [create a rule and define revenue treatments](https://docs.stripe.com/revenue-recognition/rules/create-a-rule). You can also explore sample rules on tax treatment, pass-through fees, exclusion, and custom time periods.\n\n## Rule ordering and hierarchy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach transaction can only have one rule applied to it when processing revenue reports. In situations where a single transaction fits the “Apply-to” criteria for multiple rules, rule hierarchy determines which rule to apply to the transaction. The higher a rule is ranked on the list, the higher the priority it’s assigned.\n\nYou can rearrange the order of the rules by clicking **Change rule order** as shown below:\n\n![Rules](https://b.stripecdn.com/docs-statics-srv/assets/rules.076bd00821d7a78ec4d541afe8c9b669.png)\n\nAfter clicking **Change rule order**, you can reorder the rules to adjust their priorities.\n\n![Rule order](https://b.stripecdn.com/docs-statics-srv/assets/rule-order.6232b5130188f7e9b253d7f9d197e3f0.png)\n\n## Best practices for effectively maintaining your rules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs your business grows, it’s important to make sure you regularly maintain your rules to ensure the accuracy of your revenue reports. The following are some best practices to keep rules correct for your Revenue Recognition reports.\n\n**Know when to create a rule**\n\nWhen applied correctly, Stripe’s default rules and revenue treatment methodology for handling [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") events accurately recognize and defer revenue for businesses who require more control over their unique use.\n\n**Regularly monitor rules to ensure they’re up-to-date**\n\nBilling models, customer types and edge cases can regularly change, and you should evolve your rules accordingly. To make sure that revenue treatments remain predictable, periodically check your rules so they’re up-to-date in terms of hierarchy and effective period.\n\n**Check if your accounting period is open or closed when new rules are applied**\n\nIf the effective period for a new rule overlaps with a closed accounting period, it generates corrections if the rules are retroactively applied to transactions from past (closed) accounting periods. If you want to avoid this, reopen your books by opening your accounting period prior to adding the rule.",
  "title": "Revenue Recognition rules | Stripe Documentation",
  "description": "Learn about Revenue Recognition rules.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/accounting-period-control",
  "markdown": "# Revenue Recognition accounting period control\n\n## Learn how to configure accounting periods for your Revenue Recognition.\n\nAccounting period control allows you to configure how to close accounting periods. You can either manually close the books with all checks and adjustments finished each month, or you can let Stripe automate closing the books.\n\nYou can also reopen past accounting periods using accounting period control. This is useful when you first start using Revenue Recognition because it allows you to make adjustments to past data without creating corrections in the current period. For example, when you apply [rules](https://docs.stripe.com/revenue-recognition/rules) to fit Revenue Recognition with your own business model, it’s likely to change the history of closed accounting periods. You can decide on whether to reopen the closed accounting periods or make adjustments in the current accounting period.\n\n## Setting accounting periods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can find the accounting periods section on [the Revenue Recognition controls page](https://dashboard.stripe.com/revenue-recognition/controls).\n\n![Accounting periods controls](https://b.stripecdn.com/docs-statics-srv/assets/accounting_period_controls.fb8cf9f3b14df4f18c32afcf8c697779.png)\n\n[](#accounting-period-mode)\n\nTo get started, select the `mode` for your accounting periods. The default is `automatic`.\n\n| Mode | Descriptions |\n| --- | --- |\n| Automatic | Accounting periods automatically close at the end of each month. |\n| Manual | You control when to close the accounting periods. |\n\n[](#latest-closed-accounting-period)\n\nWhen you set `latest closed accounting period`, you close the selected accounting period along with all previous accounting periods, and you open all following periods. You can choose one of the periods in the past 24 months, and you can also choose `no closed accounting periods`. For example, when you choose the `latest closed accounting period` to be February 2021 in `manual` mode, the accounting periods looks like the following example:\n\n|     |     |\n| --- | --- | --- | --- | --- | --- | --- |\n| Before Jan 2021 | Jan 2021 | Feb 2021 | Mar 2021 | Apr 2021 | May 2021 | Jun 2021 |\n| Closed | Closed | Closed | Open | Open | Open | Open |\n\n## How accounting period control works ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Controlling closing process for your accounting period cycle**\n\nAccounting period control allows you to configure the closing process with your own workflow for the accounting period cycle. You can choose the `manual` mode, and check all terms and fix the human errors before closing the accounting periods manually, or you can automate closing your Revenue Recognition book using the `automatic` mode.\n\n**Getting started with Revenue Recognition**\n\nIf you’re new to Revenue Recognition, use accounting period control to get started. For example, when you apply [rules](https://docs.stripe.com/revenue-recognition/rules) to fit Revenue Recognition with your own business model, you can set `manual` mode with `no closed accounting periods`. In this way, all the changes go into the original accounting periods, which can help you understand your books.\n\nYou can open accounting periods after setting [revenue recognition rules](https://docs.stripe.com/revenue-recognition/rules), unless you need to issue corrections. In that case, you must close the accounting period before setting any rules.\n\nAdjustments for accounting periods take 48-72 hours to complete. When completed, you can see the setting in monthly summary charts and CSV-only reports in the Dashboard. For example, when you choose the `latest closed accounting period` to be February 2021 in `manual` mode, the charts and reports look like the following example:\n\n![Revenue chart with manual mode and latest closed accounting period as February 2021](https://b.stripecdn.com/docs-statics-srv/assets/accounting-period-control-revenue-chart.d6ab06169fb7d15f27f2e7cfe5a2282e.png)\n\n![Income statement report with manual mode and latest closed accounting period as February 2021](https://b.stripecdn.com/docs-statics-srv/assets/accounting-period-control-income-statement-report.da2f6a5fb6491e4e4da58c115c7089f7.png)",
  "title": "Revenue Recognition accounting period control | Stripe Documentation",
  "description": "Learn how to configure accounting periods for your Revenue Recognition.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/examples",
  "markdown": "# Revenue Recognition examples | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Revenue Recognition using some common examples.\n\nAfter reading the Revenue Recognition [overview](https://docs.stripe.com/revenue-recognition) and [methodology](https://docs.stripe.com/revenue-recognition/methodology) pages, use what you learned to review the examples below. Unless stated otherwise, the examples assume that revenue recognition takes place on a per-day basis. Stripe’s tooling recognizes revenue every millisecond but using a daily increment simplifies the calculations.\n\n## Monthly subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On January 15, at 00:00:00 UTC, a customer starts a monthly subscription that costs 31 USD.\n*   The subscription generates an [invoice](https://docs.stripe.com/api/invoices \"invoices\").\n*   The invoice finalizes and the customer pays 31 USD.\n\nIn this example, the invoice and revenue periods are from January 15, 2019 to February 14, 2019. The 31 USD is recognized across 17 days in January and 14 days in February. If you looked at the summary after January ends, you might see something like:\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +17.00 |\n| DeferredRevenue | +14.00 |\n\nThis means that recognized revenue increased by 17 USD for the days in January, and deferred revenue increased by 14 USD for revenue you expect to recognize in February.\n\n## Annual subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On January 1, at 00:00:00 UTC, a customer starts an annual subscription that costs 365 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes and the customer pays 365 USD.\n\nIn this example, the invoice and revenue periods are from 1/1/2019 to 12/31/2019. The 365 USD is recognized daily throughout the year. If you looked at the summary after March ends, you might see something like:\n\n| Account | Jan 2019 | Feb 2019 | Mar 2019 |\n| --- | --- | --- | --- |\n| Revenue | +31.00 | +28.00 | +31.00 |\n| DeferredRevenue | +334.00 | \\-28.00 | \\-31.00 |\n\n## Monthly metered subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThere are four types of [aggregate\\_usage](https://docs.stripe.com/api/prices/create#create_price-recurring-aggregate_usage), each of which has a different implication on how revenue is recognized.\n\n### Sum![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis example uses the following assumptions:\n\n*   On January 15, a customer subscribes to a monthly [metered](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing) subscription at 1 USD per unit, and with `aggregate_usage=sum`.\n*   On January 25, they use 15 units.\n*   On February 4, they use another 17 units.\n*   On February 14, the subscription generates an invoice of 32 USD.\n*   The invoice finalizes for 32 USD, but isn’t paid yet.\n\nIn this example, the invoice and revenue periods are from January 15, 2019 to February 14, 2019. Although the invoice isn’t generated until February 14, the 15 USD from January 25 still has to be recognized when the usage was reported. If you looked at the summary after January ends, you might see something like:\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +15.00 |\n| UnbilledAccountsReceivable | +15.00 |\n\nIf you looked at the summary after February ends and the invoice is yet to be paid, you might see something like:\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| Revenue | +15.00 | +17.00 |\n| UnbilledAccountsReceivable | +15.00 | \\-15.00 |\n| AccountsReceivable |     | +32.00 |\n\n### Max![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis example uses the following assumptions:\n\n*   On January 15, a customer subscribes to a monthly [metered](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing) subscription at 1 USD per unit, and with `aggregate_usage=max`.\n*   On January 25, they use 17 units.\n*   On February 4, they use another 15 units.\n*   On February 14, the subscription generates an invoice of 17 USD.\n\nIn this example, the invoice and revenue periods are from January 15, 2019 to February 14, 2019. If you looked at the summary after January ends, you might see something like:\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +17.00 |\n| UnbilledAccountsReceivable | +17.00 |\n\nIf you looked at the summary after February ends and the invoice is yet to be paid, you might see something like:\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| Revenue | +17.00 |     |\n| UnbilledAccountsReceivable | +17.00 | \\-17.00 |\n| AccountsReceivable |     | +17.00 |\n\nThe 15 units recorded on February 4 don’t impact revenue recognition because they’re not the max usage record.\n\n### Last during period![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis example uses the following assumptions:\n\n*   On January 15, a customer subscribes to a monthly [metered](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing) subscription at 1 USD per unit, and with `aggregate_usage=last_during_period`.\n*   On January 25, they use 17 units.\n*   On January 27, they use 10 units.\n*   On February 4, they use another 15 units.\n*   On February 14, the subscription generates an invoice of 15 USD.\n\nIn this example, the invoice and revenue periods are from January 15, 2019 to February 14, 2019. If you looked at the summary after January ends, you might see something like:\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +10.00 |\n| UnbilledAccountsReceivable | +10.00 |\n\nThe 17 units recorded on January 25 doesn’t have any impact on revenue recognition because it’s not the last usage record during the period at the end of Jan.\n\nIf you looked at the summary after February ends and the invoice is yet to be paid, you might see something like:\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| Revenue | +10.00 | +5.00 (-10.00 + 15.00) |\n| UnbilledAccountsReceivable | +10.00 | \\-10.00 |\n| AccountsReceivable |     | +15.00 |\n\nThe 17 units recorded on January 25 and 10 units recorded on January 27 don’t have any impact on revenue recognition because they aren’t the last usage during the period.\n\n### Last ever![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis example uses the following assumptions:\n\n*   On January 15, a customer subscribes to a monthly [metered](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing) subscription at 1 USD per unit, and with `aggregate_usage=last_ever`.\n*   On January 25, they use 17 units.\n*   On January 27, they use 10 units.\n*   On February 4, they use another 15 units.\n*   On February 8, they use another 18 units.\n*   On February 14, the subscription generates an invoice of 18 USD.\n*   On March 14, the subscription generates another invoice of 18 USD.\n\nIn this example, the invoice and revenue periods are from January 15, 2019 to February 14, 2019. If you looked at the summary after January ends, you might see something like:\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +10.00 |\n| UnbilledAccountsReceivable | +10.00 |\n\nThe 10 units recorded on January 25 doesn’t have any impact on revenue recognition because it’s not the last usage record at the end of Jan.\n\nIf you looked at the summary after February ends, you might see something like:\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| Revenue | +10.00 | +8.00 (-10.00 + 18.00) |\n| UnbilledAccountsReceivable | +10.00 | \\-10.00 |\n| AccountsReceivable |     | +18.00 |\n\nNow in the period of February 14 to March 14, because there’s no usage record within the period, we recognize 18 USD when the invoice happens. If you looked at the summary after March ends, you might see something like:\n\n| Account | Jan | Feb | Mar |\n| --- | --- | --- | --- |\n| Revenue | +10.00 | +8.00 (-10.00 + 18.00) | +18.00 |\n| UnbilledAccountsReceivable | +10.00 | \\-10.00 |\n| AccountsReceivable |     | +18.00 | +18.00 |\n\n## Upgrade ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On April 1, at 00:00 UTC, a customer starts a monthly subscription that costs 90 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes on April 1 and the customer pays 90 USD.\n*   On April 21 at 00:00 UTC, they upgrade to a monthly subscription that costs 120 USD.\n    *   Two unbilled invoice items are created to represent (1) -30 USD for the unused time of the previous plan and (2) 40 USD for the remaining time of the new plan.\n*   The next invoice includes the two unbilled invoice items and is finalized on May 1, at 00:00:00 UTC with 3 line items:\n    *   \\-30 USD for the unused time of the previous plan with the service period from April 21 at 00:00 UTC to May 1 at 00:00 UTC.\n    *   40 USD for the remaining time of the new plan with the service period from April 21 at 00:00 UTC to May 1 at 00:00 UTC.\n    *   120 USD for the service in May with the service period from May 1 at 00:00 UTC to June 1 at 00:00 UTC.\n\nIf you looked at the summary after May ends, you might see something like:\n\n| Account | Apr | May |\n| --- | --- | --- |\n| Revenue | +100.00 | +120.00 |\n| AccountsReceivable | +90.00 | +130.00 |\n| UnbilledAccountsReceivable | +10.00 | \\-10.00 |\n\n## Downgrade ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On April 1, at 00:00 UTC, a customer starts a monthly subscription that costs 90 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes on April 1 and the customer pays 90 USD.\n*   On April 21 at 00:00 UTC, they downgrade to a monthly subscription that costs 30 USD.\n    *   Two unbilled invoice items are created to represent (1) -30 USD for the unused time of the previous plan and (2) 10 USD for the remaining time of the new plan.\n*   The next invoice includes the two unbilled invoice items and is finalized on May 1, at 00:00:00 UTC with 3 line items:\n    *   \\-30 USD for the unused time of the previous plan with the service period from April 21 at 00:00 UTC to May 1 at 00:00 UTC.\n    *   10 USD for the remaining time of the new plan with the service period from April 21 at 00:00 UTC to May 1 at 00:00 UTC.\n    *   30 USD for the service in May with the service period from May 1 at 00:00 UTC to June 1 at 00:00 UTC.\n\nIf you looked at the summary after May ends, you might see something like:\n\n| Account | Apr | May |\n| --- | --- | --- |\n| Revenue | +70.00 | +30.00 |\n| AccountsReceivable | +90.00 | +10.00 |\n| UnbilledAccountsReceivable | \\-20.00 | +20.00 |\n\n## Customer credit balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On January 15, at 00:00:00 UTC, a customer starts a monthly subscription that costs 31 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes on January 15, at 00:00:00 UTC.\n*   The customer has -11 USD in its customer credit balance. Stripe automatically applies -11 USD to the invoice and adjusts the customer credit balance to 0 USD.\n*   The customer pays 20 USD on February 9.\n\nIn this example, the invoice and revenue periods are from 1/15/2019 to 2/14/2019. The 31 USD is recognized across 17 days in January and 14 days in February. If you looked at the summary after January ends, you might see something like:\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| AccountsReceivable | +20.00 | \\-20.00 |\n| Cash |     | +20.00 |\n| CustomerBalance | \\-11.00 |     |\n| Revenue | +17.00 | +14.00 |\n| DeferredRevenue | +14.00 | \\-14.00 |\n\nIn this scenario, the customer has an existing customer credit balance that’s used to pay the invoice. It’s also possible for a negative amount on an invoice to credit the customer credit balance, which is then used to pay the invoice. This often happens when a customer downgrades to a cheaper subscription. For example, assume that:\n\n*   A -31 USD invoice with one invoice line item finalizes on January 15, at 00:00:00 UTC.\n*   The service period for the -31 USD invoice line item is from January 15 00:00:00 UTC to February 15 00:00:00 UTC.\n*   Stripe automatically credits 31 USD to the customer credit balance and closes the invoice.\n\nThe -31 USD line item books a journal entry that debits DeferredRevenue and credits AccountsReceivable. When Stripe credits the customer credit balance, it books another journal entry that debits AccountsReceivable and credits CustomerBalance. In the summary at the end of January, you might see something like:\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| AccountsReceivable |     |     |\n| Cash |     |     |\n| CustomerBalance | +31.00 |     |\n| Revenue | \\-17.00 | \\-14.00 |\n| DeferredRevenue | \\-14.00 | +14.00 |\n\nNotice that eventually the net revenue is -31 USD.\n\n## Refund ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On January 1, at 00:00:00 UTC, a customer starts a three month subscription that costs 90 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes and the customer pays 90 USD.\n*   On February 1, they receive a full refund.\n\nWhen you make a full refund:\n\n*   The customer receives cash.\n*   Recognized revenue is offset by contra revenue in the refunds account.\n*   Deferred revenue from the subscription that hasn’t been recognized is cleared.\n\nIn this example, the customer received one month of service, so they receive a 31 USD refund. The refund also decreases the cash balance in your Stripe account by 90 USD. At the time of the refund, there was 59 USD remaining in deferred revenue, so this is also cleared. If you viewed the summary after March ends, it might look something like this:\n\n| Account | Jan 2019 | Feb 2019 | Mar 2019 |\n| --- | --- | --- | --- |\n| Revenue | +31.00 |     |     |\n| DeferredRevenue | +59.00 | \\-59.00 |     |\n| Cash | +90.00 | \\-90.00 |     |\n| Refunds |     | +31.00 |     |\n\n## Partial refund ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On January 1, at 00:00:00 UTC, a customer starts a three month subscription that costs 90 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes and the customer pays 90 USD.\n*   On February 1, they receive a partial refund of 9 USD.\n\nWhen the partial refund is made:\n\n*   The customer receives 9 USD.\n*   Recognized revenue is proportionally offset by contra revenue in the refunds account.\n*   Deferred revenue from the subscription that hasn’t been recognized is also proportionally reduced.\n\nIn this example, the customer received one month of service, so 31 USD has been recognized. There is 59 USD remaining in deferred revenue. The partial refund of 9 USD is 10% of 90 USD. Therefore, the refunds account (part of contra revenue) is increased by 3.10 USD (10% of 31 USD), and deferred revenue is decreased by 5.90 USD (10% of 59 USD). If you viewed the summary after March ends, it might look something like this:\n\n| Account | Jan 2019 | Feb 2019 | March 2019 |\n| --- | --- | --- | --- |\n| Revenue | +31.00 | +25.20 | +27.90 |\n| DeferredRevenue | +59.00 | \\-31.10 (= -25.20 + -5.90) | \\-27.90 |\n| Cash | +90.00 | \\-9.00 |     |\n| Refunds |     | +3.10 |     |\n\n## Void ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On January 1, at 00:00:00 UTC, a customer starts a three month subscription that costs 90 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes, but the customer hasn’t paid yet.\n*   On February 1, you void the invoice.\n\nWhen you void the invoice:\n\n*   The accounts receivable account is cleared because we don’t expect to get paid.\n*   Recognized revenue is offset by contra revenue in the voids account.\n*   Deferred revenue from the subscription that hasn’t been recognized is cleared.\n\nIn this example, the customer received one month of service, so 31 USD in recognized revenue is voided. At the time of the invoice being voided, there was 59 USD remaining in deferred revenue, so this is also cleared. If you viewed the summary after March ends, it might look something like this:\n\n| Account | Jan 2019 | Feb 2019 | Mar 2019 |\n| --- | --- | --- | --- |\n| AccountsReceivable | +90.00 | \\-90.00 |     |\n| Revenue | +31.00 |     |     |\n| DeferredRevenue | +59.00 | \\-59.00 |     |\n| Voids |     | +31.00 |     |\n\n## Uncollectible ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On January 1, at 00:00:00 UTC, a customer starts a three month subscription that costs 90 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes, but the customer hasn’t paid yet.\n*   On February 1, the invoice is marked as uncollectible.\n\nWhen the invoice is marked as uncollectible:\n\n*   The accounts receivable account is cleared because we don’t expect to get paid.\n*   Recognized revenue is offset by contra revenue in the bad debt account.\n*   Deferred revenue from the subscription that hasn’t been recognized is cleared.\n\nIn this example, the customer received one month of service, so 31 USD in recognized revenue becomes bad debt. At the time of the invoice being marked as uncollectible, there was 59 USD remaining in deferred revenue, so this is also cleared. If you viewed the summary after March ends, it might look something like this:\n\n| Account | Jan 2019 | Feb 2019 | Mar 2019 |\n| --- | --- | --- | --- |\n| AccountsReceivable | +90.00 | \\-90.00 |     |\n| Revenue | +31.00 |     |     |\n| DeferredRevenue | +59.00 | \\-59.00 |     |\n| BadDebt |     | +31.00 |     |\n\nAn uncollectible invoice might still be paid. When the invoice is paid, the bad debt account is cleared out using a part of the received cash amount. The remaining cash amount goes to the recoverables account. If the invoice is paid in April, the summary might look something like this:\n\n| Account | Jan 2019 | Feb 2019 | Mar 2019 | Apr 2019 |\n| --- | --- | --- | --- | --- |\n| AccountsReceivable | +90.00 | \\-90.00 |     |     |\n| Revenue | +31.00 |     |     |     |\n| DeferredRevenue | +59.00 | \\-59.00 |     |     |\n| BadDebt |     | +31.00 |     | \\-31.00 |\n| Cash |     |     |     | +90.00 |\n| Recoverables |     |     |     | +59.00 |\n\nAn uncollectible invoice might still be voided. When the invoice is voided, the bad debt account is cleared out and the contents are moved into the void account. If the invoice is voided in April, the summary might look something like this:\n\n| Account | Jan 2019 | Feb 2019 | Mar 2019 | Apr 2019 |\n| --- | --- | --- | --- | --- |\n| AccountsReceivable | +90.00 | \\-90.00 |     |     |\n| Revenue | +31.00 |     |     |     |\n| DeferredRevenue | +59.00 | \\-59.00 |     |     |\n| BadDebt |     | +31.00 |     | \\-31.00 |\n| Void |     |     |     | +31.00 |\n\n## Uncollectible invoice with applied customer credit balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On January 15 at 00:00:00 UTC, a customer starts a monthly subscription that costs 31 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes on January 15 at 00:00:00 UTC.\n*   The customer’s credit balance is -11 USD. Stripe automatically applies -11 USD to the invoice and adjusts the credit balance accordingly.\n*   On February 15, the invoice is marked as uncollectible.\n\nIn this example, the invoice and revenue periods are from January 15, 2019 to February 14, 2019. Stripe recognizes the 31 USD across 17 days in January and 14 days in February.\n\nStripe automatically offsets recognized revenue with the bad debt account if an invoice is set as uncollectible. With the customer’s 11 USD credit balance, Stripe considers 6 USD (11 x 17 / 31) as recognized revenue and 5 USD (11 x 14 / 31) as deferred revenue. The portion of paid deferred revenue is considered as a gain and booked in the recoverables account.\n\nThe summary after February end might look something like:\n\n| Account | Starting | Jan | Feb | Ending |\n| --- | --- | --- | --- | --- |\n| AccountsReceivable | 0.00 | +20.00 | \\-20.00 | 0.00 |\n| BadDebt | 0.00 |     | +11.00 | 11.00 |\n| CustomerBalance | 11.00 | \\-11.00 |     | 0.00 |\n| Recoverables | 0.00 |     | +5.00 | 5.00 |\n| Revenue | 0.00 | +17.00 |     | 17.00 |\n| DeferredRevenue | 0.00 | +14.00 | \\-14.00 | 0.00 |\n\nAs another example, you can increase the customer’s invoice due amount when there’s an outstanding balance (that is, they owe some amount to you). Consider the following:\n\n*   A 31 USD invoice with one invoice line item finalizes on January 15 at 00:00:00 UTC.\n*   The service period for the 31 USD invoice line item is from January 15 00:00:00 UTC to February 15 00:00:00 UTC.\n*   There is a customer credit balance of 10 USD. Because of this, Stripe adds that amount to the invoice making the outstanding balance be 0 USD.\n    *   This debits AccountsReceivable and credits CustomerBalance for 10 USD.\n*   Stripe marks the invoice as uncollectible on February 15.\n\nFor an uncollectible invoice, the portion of due customer credit balance isn’t collected. Because of this, it’s considered a negative gain and booked as a negative amount to the recoverables account.\n\nThe summary after February end might look something like:\n\n| Account | Starting | Jan | Feb | Ending |\n| --- | --- | --- | --- | --- |\n| AccountsReceivable | 0.00 | +41.00 | \\-41.00 | 0.00 |\n| BadDebt | 0.00 |     | +17.00 | 17.00 |\n| CustomerBalance | \\-10.00 | +10.00 |     | 0.00 |\n| Recoverables | 0.00 |     | \\-10.00 | \\-10.00 |\n| Revenue | 0.00 | +17.00 |     | 17.00 |\n| DeferredRevenue | 0.00 | +14.00 | \\-14.00 | 0.00 |\n\n## Uncollectible and disputed or refunded ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAn uncollectible invoice can be paid, then later disputed or refunded.\n\nThis example uses the following assumptions:\n\n*   On January 1, at 00:00:00 UTC, a customer starts a three month subscription that costs 90 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes, but the customer hasn’t paid yet.\n*   On February 1, the invoice is marked as uncollectible.\n*   On April 1, the invoice is paid.\n*   On May 1, the corresponding charge is disputed.\n\nAs shown in the Uncollectible example, when the invoice is marked as uncollectible and later paid:\n\n*   The bad debt account is cleared out.\n*   The remainder is booked as recoverables.\n\nIn this example, the customer later decides to dispute the charge. When a dispute occurs, the summary might look something like:\n\n| Account | Jan 2019 | Feb 2019 | Mar 2019 | Apr 2019 | May 2019 |\n| --- | --- | --- | --- | --- | --- |\n| AccountsReceivable | +90.00 | \\-90.00 |     |     |     |\n| Revenue | +31.00 |     |     |     |     |\n| DeferredRevenue | +59.00 | \\-59.00 |     |     |     |\n| BadDebt |     | +31.00 |     | \\-31.00 |     |\n| Cash |     |     |     | +90.00 | \\-90.00 |\n| Disputes |     |     |     |     | +31.00 |\n| Recoverables |     |     |     | +59.00 | \\-59.00 |\n\nAn invoice marked as uncollectible, paid, and later refunded works in a similar manner except that it uses the refunds account instead of the disputes account.\n\n## Dispute ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn case of a dispute, Revenue Recognition works similarly to how a refund works except that it uses the disputes account instead. This example also shows what happens if you win a dispute. It uses the following assumptions:\n\n*   On January 1, at 00:00:00 UTC, a customer starts a three month subscription that costs 90 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes and the customer pays 90 USD.\n*   On February 1, they dispute the payment.\n*   On April 1, you win the dispute because the bank rules in your favor.\n\nWhen the customer makes the dispute:\n\n*   Cash is returned to the customer.\n*   Recognized revenue is offset by contra revenue in the disputes account.\n*   Deferred revenue from the subscription that hasn’t been recognized is cleared.\n\nWhen you win the dispute:\n\n*   Cash is returned to you.\n*   Recognized revenue and deferred revenue don’t change.\n*   Cash is offset by an increase in the recoverables account.\n\nIn this example, the customer received one month of service, so 31 USD in recognized revenue is disputed. The dispute also decreases the cash balance in your Stripe account by 90 USD. At the time of the dispute, there was 59 USD remaining in deferred revenue, so this is also cleared. Later in time, in April, the bank rules in your favor, so the cash is returned to you.\n\nIf you viewed the summary after April ends, it might look something like this:\n\n| Account | Jan 2019 | Feb 2019 | Mar 2019 | Apr 2019 |\n| --- | --- | --- | --- | --- |\n| Revenue | +31.00 |     |     |     |\n| DeferredRevenue | +59.00 | \\-59.00 |     |     |\n| Cash | +90.00 | \\-90.00 |     | +90.00 |\n| Disputes |     | +31.00 |     |     |\n| Recoverables |     |     |     | +90.00 |\n\n## Credit note after a payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use a refund, a customer credit, or an out-of-band credit to issue a credit note to a customer after they’ve made a payment.\n\nFor example, say a customer starts a subscription for a 3 month period on January 1 at 00:00:00 UTC that costs 90 USD. The subscription generates an invoice and the customer pays it immediately. On February 1, you issue a credit note of 45 USD where you: refund 15 USD; credit 10 USD to the customer balance; and credit 20 USD to an external customer balance (an out-of-band credit). Your summary for March would like something like this:\n\n| Account | Jan 2021 | Feb 2021 | Mar 2021 |\n| --- | --- | --- | --- |\n| Cash | +90.00 | \\-15.00 |     |\n| Revenue | +31.00 | +14.00 | +15.50 |\n| DeferredRevenue | +59.00 | \\-43.50 | \\-15.50 |\n| Refunds |     | +5.10 |     |\n| CreditNotes |     | +10.40 |     |\n| CustomerBalance |     | +10.00 |     |\n| ExternalCustomerBalance |     | +20.00 |     |\n\n## Credit note without line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On January 1 at 00:00:00 UTC, a customer starts a 6 month subscription that costs 181 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes, but the customer hasn’t paid yet.\n*   On February 1, you issue a credit note of 90.50 USD.\n\nWhen the credit note is issued:\n\n*   The accounts receivable account is reduced according to the credit note’s amount.\n*   Recognized revenue is offset by contra revenue proportionally in the credit notes account.\n*   Deferred revenue from the subscription that hasn’t been recognized is reduced proportionally to the credit note’s amount.\n\nIf you viewed the summary after March ends, it might look something like this:\n\n| Account | Starting | Jan 2019 | Feb 2019 | Mar 2019 | Ending Mar 2019 |\n| --- | --- | --- | --- | --- | --- |\n| AccountsReceivable | 0.00 | +181.00 | \\-90.50 |     | 90.50 |\n| Revenue | 0.00 | +31.00 | +14.00 | +15.50 | 60.50 |\n| DeferredRevenue | 0.00 | +150.00 | \\-89.00 | \\-15.50 | 0.00 |\n| CreditNotes | 0.00 |     | +15.50 |     | 15.50 |\n\nWhen the credit note is voided on May 3rd:\n\n*   Reverses the credit notes account.\n*   Increases accounts receivable back to the original invoice due amount.\n*   Recognizes the reduced revenue in May instead of February, March, and April.\n*   Reinstates the reduced deferred revenue in May.\n\nThe summary after June end might look something like:\n\n| Account | Starting | Jan 2019 | Feb 2019 | Mar 2019 | Apr 2019 | May 2019 | Jun 2019 | Ending |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| AccountsReceivable | 0.00 | +181.00 | \\-90.50 |     |     | +90.50 |     | 181.00 |\n| Revenue | 0.00 | +31.00 | +14.00 | +15.50 | +15.00 | +75.50 | +30.00 | 181.00 |\n| DeferredRevenue | 0.00 | +150.00 | \\-89.00 | \\-15.50 | \\-15.00 | \\-0.50 | \\-30.00 | 0.00 |\n| CreditNotes | 0.00 |     | +15.50 |     |     | \\-15.50 |     | 15.50 |\n\nBe aware that a credit note without line items doesn’t match with a specific invoice line item. Rather, the amount of the credit note is divided proportionally among the invoice line items.\n\n## Credit note with line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA credit note with line items would work in a similar way that a credit note without line items does except that a credit note line item is used for adjusting the revenue and other accounts for a corresponding invoice line item.\n\n## Credit note with negative line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAdjustments to accounts for a credit note with negative line items are the reverse of those for a credit note with positive line items.\n\nLearn how to [credit negative invoice line items in the Dashboard](https://docs.stripe.com/invoicing/dashboard/credit-notes#negative-line-items) or [programmatically with the API](https://docs.stripe.com/invoicing/integration/programmatic-credit-notes#negative-line-items).\n\n## External asset ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you manually mark invoices as paid outside of Stripe, the external asset account increases. All other accounts operate as if the invoice is paid, but the cash account doesn’t change. You can import third party transaction data and consolidate all your revenue sources into your Stripe reporting by using the [Data Import feature](https://docs.stripe.com/revenue-recognition/data-import).\n\nBelow is an example involving the external asset account with the following assumptions:\n\n*   On January 1, at 00:00:00 UTC, a customer starts a monthly subscription that costs 31 USD.\n*   The subscription generates an invoice, and the invoice finalizes on the same day.\n*   The invoice is manually marked as paid outside of Stripe on February 5.\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| AccountsReceivable | +31.00 | \\-31.00 |\n| Revenue | +31.00 |     |\n| Cash |     |     |\n| ExternalAsset |     | +31.00 |\n\n## Tax exempt ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour [customers](https://docs.stripe.com/api/customers) can have a [tax exemption status](https://docs.stripe.com/billing/taxes/tax-rates#tax-exempt-and-reverse-charge) of either `exempt` or `reverse`. No tax is calculated on the invoice in either case.\n\nFor example, say a customer with a tax exemption status of `reverse` starts a monthly subscription on January 1 at 00:00:00 UTC. It costs 31 USD per month and has a tax-inclusive rate of 10%. Because the customer is tax exempt, the total amount due is 27.90 USD. The subscription generates an invoice, the invoice finalizes, and the customer pays the invoice on the same day. Your journal entry would look like this:\n\n| Account | Debit | Credit |\n| --- | --- | --- |\n| Revenue |     | +27.90 |\n| Cash | +27.90 |     |\n\n## Tax-inclusive rate on invoice items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAn invoice item can include a tax-inclusive rate. When you add an invoice item to an invoice, it can use the same accounting period or a different accounting period from its creation date.\n\n### Same accounting period ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor example, say a customer starts a service for a period of 1 month on January 1 at 00:00:00 UTC. The total amount due is 34.10 USD and has a tax-inclusive rate of 10%. You add the invoice item to an invoice on January 1, the invoice finalizes, and the customer pays the invoice on the same day. Your journal entry would look like this:\n\n| Account | Debit | Credit |\n| --- | --- | --- |\n| Revenue |     | +31.00 |\n| Cash | +34.10 |     |\n| TaxLiability |     | +3.10 |\n\n### Different accounting period ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor example, say a customer starts a service for a 3 month period on January 1 at 00:00:00 UTC. The total amount due is 100.00 USD and has a tax-inclusive rate of 10%. You add the invoice item to an invoice on March 1, the invoice finalizes, and the customer pays the invoice on the same day. Your journal entry would look like this:\n\n| Account | Jan | Feb | Mar |\n| --- | --- | --- | --- |\n| Revenue | \\-34.10 | \\-30.80 | \\-31.00 |\n| Cash |     |     | +100.00 |\n| TaxLiability |     |     | \\-10.00 |\n| UnbilledAccountsReceivable | +34.10 | +30.80 | \\-64.90 |\n| UnbilledVoids |     |     | +5.90 |\n\n## Tax liability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInvoices and invoice line items can be [assigned tax rates](https://docs.stripe.com/invoicing/taxes/tax-rates). When tax rates are assigned, the Revenue Recognition reports can compute tax liability.\n\nBelow is an example using an exclusive tax rate with the following assumptions:\n\n*   On January 1, at 00:00:00 UTC, a customer starts a monthly subscription that costs 31 USD with an exclusive tax rate of 10%. The total due amount is 34.10 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes and is paid on the same day.\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +31.00 |\n| Cash | +34.10 |\n| TaxLiability | +3.10 |\n\nBelow is an example using an inclusive tax rate with the following assumptions:\n\n*   On January 1, at 00:00:00 UTC, a customer starts a monthly subscription that costs 31 USD with an inclusive tax rate of 10%. The total due amount is 31 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes and is paid on the same day.\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +27.90 |\n| Cash | +31.00 |\n| TaxLiability | +3.10 |\n\n## Multi-currency ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On January 1, at 00:00:00 UTC, an invoice finalizes and the customer immediately pays 30 EUR.\n*   Your account’s settlement currency is USD.\n*   The EUR to USD exchange rate is 1.20 at the time of finalization and payment.\n\nIn this example, you receive 36 USD. Because the invoice finalizes and is paid immediately, you have no exposure to fluctuating exchange rates and therefore no foreign exchange (FX) gains or losses.\n\n| Account | Jan |\n| --- | --- |\n| Revenue | +36.00 |\n| Cash | +36.00 |\n\n## FX loss ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On January 1, at 00:00:00 UTC, an invoice finalizes for 30 EUR.\n*   On February 1, at 00:00:00 UTC, the customer pays the invoice for 30 EUR.\n*   Your account’s settlement currency is USD.\n*   The EUR to USD exchange rate is 1.20 at the time of finalization.\n*   The EUR to USD exchange rate is 1.10 at the time of payment.\n\nIn this example, the exchange rate changed between invoice finalization and payment, so you receive 33 USD instead of 36.\n\n| Account | Jan | Feb |\n| --- | --- | --- |\n| AccountsReceivable | +36.00 | \\-36.00 |\n| Revenue | +36.00 |     |\n| Cash |     | +33.00 |\n| FxLoss |     | +3.00 |\n\n## FX loss from a refund or dispute ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   On January 1, at 00:00:00 UTC, an invoice finalizes for 30 EUR.\n*   On February 1, at 00:00:00 UTC, the customer pays the invoice for 30 EUR.\n*   On March 1, at 00:00:00 UTC, a refund is issued for 30 EUR.\n*   Your account’s settlement currency is USD.\n*   The EUR to USD exchange rate is 1.20 at the time of finalization.\n*   The EUR to USD exchange rate is 1.20 at the time of payment.\n*   The EUR to USD exchange rate is 1.30 at the time of refund.\n\nIn this example, the exchange rate changed between invoice payment and refund, so you receive 36 USD but you later refund 39 USD. Therefore, you incur 3 USD for FxLoss.\n\n| Account | Jan | Feb | Mar |\n| --- | --- | --- | --- |\n| AccountsReceivable | +36.00 | \\-36.00 |     |\n| Revenue | +36.00 |     |     |\n| Refunds |     |     | +36.00 |\n| Cash |     | +36.00 | \\-39.00 |\n| FxLoss |     |     | +3.00 |\n\nA dispute works in the same way as a refund, except that it books the disputes account instead of the refunds account.\n\n## Multiple settlement currencies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses the following assumptions:\n\n*   Your account settles in USD by default but EUR is also a supported settlement currency.\n*   On January 1, at 00:00:00 UTC, two invoices finalize for separate customers-one is for 30 EUR, and the other is for 400 NOK.\n*   The NOK to USD conversion rate is 0.10 at the time of finalization and payment.\n*   Both invoices are paid immediately.\n\nIn this example, you receive 40 USD from the NOK transaction and 30 EUR from the EUR transaction. Because EUR is a supported settlement currency, no exchange rate is applied.\n\n| Account | Currency | Jan |\n| --- | --- | --- |\n| Revenue | USD | +40.00 |\n| Revenue | EUR | +30.00 |\n| Cash | USD | +40.00 |\n| Cash | EUR | +30.00 |\n\n## Fees Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Beta\n\nRevenue Recognition Stripe fees support is currently in private beta. If you’re interested in getting early access, please [create a ticket](https://support.stripe.com/contact/email?topic=financial_reports) on our support page.\n\nThis example uses the following assumptions:\n\n*   On January 1, at 00:00:00 UTC, a customer starts a three month subscription that costs 90 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes and the customer pays 90 USD.\n*   This payment has a Stripe processing fee of 0.02 USD.\n\nIf you view the summary after March ends, you’ll see something like this:\n\n| Account | Jan | Feb | Mar |\n| --- | --- | --- | --- |\n| Revenue | +31.00 | +28.00 | +31.00 |\n| DeferredRevenue | +59.00 | \\-28.00 | \\-31.00 |\n| Cash | +89.98 |     |     |\n| Fees | +0.02 |     |     |\n\nNotice fees are booked on a cash-basis.\n\n## Exclude transactions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTransactions behave differently when excluded, depending on whether they have been paid or not. If a transaction is paid in cash, we debit the cash account and credit the exclusion account after exclusion. If it’s paid by CustomerBalance, we debit the customer balance account and credit the customer balance adjustments account after exclusion. We don’t generate journal entries for unpaid transactions; they behave as if the transaction never occurred.\n\nIf you exclude transactions in a closed accounting period, it incurs corrections for transactions that have already been paid. Learn more about [corrections](https://docs.stripe.com/revenue-recognition/reports).\n\n### Exclude paid transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis example uses the following assumptions:\n\n*   On January 5, 2022, at 09:00:00 UTC, you create a one-time payment of 10 USD using either the Dashboard, the Charges APIs, or the Payment Intents APIs.\n*   By default, Revenue Recognition immediately recognizes the revenue from this one-time payment.\n*   On February 5, 2022, you exclude the payment.\n*   The accounting periods for January 2022 are either closed or open.\n\nAfter you exclude the payment:\n\n*   The revenue account clears to 0 USD because the payment doesn’t generate revenue.\n*   The cash account remains at 10 USD, acknowledging the received payment.\n*   An amount of 10 USD is added to the exclusion account.\n\nAt the end of February, your summary might reflect the following:\n\n| Account | January | February |\n| --- | --- | --- |\n| Cash | +10.00 |     |\n| Revenue | +10.00 | \\-10.00 |\n| Exclusion |     | +10.00 |\n\n### Exclude unpaid transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis example uses the following assumptions:\n\n*   On January 1, 2022, at 00:00:00 UTC, a customer initiates a one-month subscription (from January 1 to Jan 31) that costs 31 USD.\n*   The subscription generates an invoice.\n*   The invoice finalizes, but the customer doesn’t make a payment.\n*   On February 1, 2022, you exclude the payment.\n*   The accounting periods are open for January 2022.\n\nIf you exclude a finalized invoice during an open accounting period, it leaves no trace of activity related to the invoice. We remove all of the account activities, excluding the cash and customer balance account that isn’t involved in this case, and don’t generate journal entries from the finalization and exclusion of the invoice.",
  "title": "Revenue Recognition examples | Stripe Documentation",
  "description": "Learn about Revenue Recognition using some common examples.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/revenue-controls",
  "markdown": "# Revenue Recognition controls | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to adjust the behavior of Revenue Recognition with controls.\n\nConfigure [Revenue Recognition controls](https://dashboard.stripe.com/revenue-recognition/controls) to customize how revenue is recognized specifically for your business. Adjustments to controls take 48-72 hours to complete. When completed, the settings are reflected across all Revenue Recognition charts and reports.\n\n## Amortization granularity ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, Revenue Recognition recognizes revenue by the millisecond. We also support recognizing revenue by the month, with two different treatment options for handling the first and last months of the service period.\n\n| Amortization | Descriptions |\n| --- | --- |\n| By millisecond (default) | Recognize revenue down to the millisecond. |\n| By month evenly | Recognize revenue down to the month. Cut off the last month. |\n| By month evenly, first and last month prorated | Recognize revenue down to the month. Prorate the amounts in the first and last months by millisecond. |\n\nAdjusting this configuration affects all of your journal entries within Revenue Recognition. If you want to avoid creating corrections in the current period, we recommend that you [open all accounting periods](https://docs.stripe.com/revenue-recognition/accounting-period-control) prior to the adjustment.\n\n## Catch-up revenue ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRevenue Recognition primarily recognizes revenue based on the service period attached to transactions. However, when the service period begins before the booked date (that is, the finalization date for an invoice, the creation date or imported booked date for a standalone charge), the revenue from the prior periods are instead recognized entirely in the month of the booked date to avoid making changes to the past. We refer to this type of revenue as _catch-up_ revenue.\n\nYou can disable or enable this behavior by toggling the **Apply catch-up revenue** switch.\n\nToggling this configuration affects any applicable journal entries you have within Revenue Recognition. If you want to avoid creating corrections in the current period, we recommend that you [open all accounting periods](https://docs.stripe.com/revenue-recognition/accounting-period-control) prior to the adjustment.",
  "title": "Revenue Recognition controls | Stripe Documentation",
  "description": "Learn how to adjust the behavior of Revenue Recognition with controls.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/chart-of-accounts",
  "markdown": "# Map to your chart of accounts\n\n## Map transactions from the Stripe default accounts to the chart of accounts in your general ledger.\n\nYou can customize Stripe Revenue Recognition reporting to use your General Ledger (GL) chart of accounts instead of using the default [Stripe accounts](https://docs.stripe.com/revenue-recognition/methodology). You can configure a rule to map transactions by product, shipping region, or invoice metadata to your GL account. Stripe applies your custom mappings to the [CSV reports](https://docs.stripe.com/revenue-recognition/reports#csv-reports) you download and also when you [audit your revenue numbers](https://docs.stripe.com/revenue-recognition/reports/audit-numbers). A mapping rule consists of the following:\n\n| Mapping rule attribute | Description |\n| --- | --- |\n| Stripe account | The [Stripe default account](https://docs.stripe.com/revenue-recognition/methodology#chart-of-accounts) that you want to override. |\n| GL account | The name of the GL account you want to override the Stripe account with. |\n| GL account number | The number corresponding to the GL account. |\n| Effective period | The time period the mapping applies to.<br><br>An [invoice line item](https://docs.stripe.com/api/invoices/line_item) fulfills the effective period requirement if the finalization time of the invoice is within the specified effective period.<br><br>A [charge](https://docs.stripe.com/api/charges) fulfills the effective period requirement if the balance transaction it corresponds to has a creation time that’s within the specified effective period. |\n| Condition | An optional criteria to map transactions by product, shipping region, or invoice metadata. If not specified, all transactions involving the configured Stripe account are mapped to the GL account. |\n| Status | **Active**: The mapping rule is active and all transactions are mapped as per the rule.<br><br>**Processing**: The rule is processing. On completion, the rule is active and transactions are mapped accordingly. |\n\n## Configuring a mapping rule![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMapping rule configuration is a 4-step process—click the add mapping button on the accounts mapping page to begin.\n\n1.  **Select Stripe account**: Select the default Stripe account from the dropdown for which you want to create the rule.\n2.  **Select GL account**: You can select your GL account from the dropdown or add one if you can’t find it in the dropdown. When setting up the rules for the first time, you have to add these accounts by specifying the GL account name and number. You have to specify at least a name or a number to add the account.\n3.  **Specify effective period**: The effective period is the time frame in which the mapping rule is applicable. Select a start and end date from the dropdown to configure the effective period. If you specify an effective period that overlaps with closed accounting periods, you’ll see corrections in your report in the current open accounting period. You can reopen the past accounting periods corresponding to the effective period to avoid corrections.\n4.  **Specify mapping condition (optional)\\***: You can optionally specify a mapping condition on any of the following attributes:\n    *   **Product**: If you have product specific accounts in your GL, you can classify your transactions based on the products that you have configured in the Stripe Dashboard.\n    *   **Shipping region**: Similar to products, you can specify the shipping region to map transactions to the relevant GL account. Only ISO-compliant country and state codes are supported.\n    *   **Invoice metadata**: You can configure a custom rule using invoice metadata if your GL accounts don’t track transactions by product or shipping region. Create a rule by selecting a key and adding a value. The keys are from metadata you created in past invoices.\\*\\*\n\nClick **Map accounts** to create the mapping rule and for Stripe to [process the data](https://docs.stripe.com/revenue-recognition/methodology#data-availability). The rule’s status changes to active when the data processing is complete, and you can then download reports with the mapped GL accounts.\n\n## Mapping rule configuration example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following example involves 3 different products:\n\n*   Product A: Annual subscription cost of 1,200 USD\n*   Product B: Annual subscription cost of 2,400 USD\n*   Product C: Annual subscription cost of 3,600 USD\n\nIf you sell 1 subscription each for A, B, and C in January, your journal entry at the end of the month appears as follows without account mapping:\n\n| Account | January |\n| --- | --- |\n| Revenue | +600 USD |\n| Deferred Revenue | +6600 USD |\n\nHowever, the user has 3 separate revenue accounts in its GL, say revenue\\_A, revenue\\_B, and revenue\\_C for tracking revenue corresponding to these 3 products. The user has to do manual work to identify revenue in these accounts before posting to its GL.\n\nIf you have product-specific accounts in your General Ledger that you want to map to, you can create 3 mapping rules:\n\n| Stripe account | GL account number | GL account | Condition | Effective period |\n| --- | --- | --- | --- | --- |\n| Revenue | 10001 | revenue\\_A | Product A | Jan 2023 - Indefinite |\n| Revenue | 10002 | revenue\\_B | Product B | Jan 2023 - Indefinite |\n| Revenue | 10003 | revenue\\_C | Product C | Jan 2023 - Indefinite |\n\nAfter you set up these rules, your journal entries will contain three line items reflecting the revenue distribution for each product. This can help you streamline the process of posting to your GL.\n\n| GL account number | Account | January |\n| --- | --- | --- |\n| 1001 | revenue\\_A | +100 USD |\n| 1002 | revenue\\_B | +200 USD |\n| 1003 | revenue\\_C | +300 USD |\n| \\-  | Deferred Revenue | +6600 USD |\n\n\\* For a default Stripe account, you can only pick one attribute to create a rule. Please [create a ticket](https://support.stripe.com/contact/email?topic=financial_reports) on our support page if you have any questions.  \n\\*\\* Don’t import any personally identifiable information and/or protected health information.",
  "title": "Map to your chart of accounts | Stripe Documentation",
  "description": "Map transactions from the Stripe default accounts to the chart of accounts in your general ledger.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/data-import",
  "markdown": "# Revenue Recognition data import | Stripe DocumentationThe Stripe Docs logo\n\n## Revenue Recognition data importBeta\n\n## Import data from other sources to manage all of your revenue recognition in Stripe.\n\nPerform revenue recognition on non-Stripe transactions and adjust the recognition schedules of existing Stripe transactions, or exclude the existing Stripe transactions from the revenue.\n\nData import is categorized by general import or exclusion import.\n\n**General import** allows you to upload revenue data with CSV files. You can import transactions processed completely outside of Stripe and customize the recognition terms of existing Stripe transactions to fit your business model. For example, you can import data to:\n\n*   **Add** a service period to a Stripe payment.\n*   **Override** the service period of a line item in a Stripe [invoice](https://docs.stripe.com/api/invoices \"invoices\").\n*   **Split** a payment into multiple different revenue schedules.\n*   **Import** an external payment processor’s data with a service period, amount, and currency.\n\n**Exclusion import** allows you to exclude transactions from your revenue by uploading the IDs of the transactions to exclude. You can exclude the following types of transactions: invoice, invoice item, invoice line item, standalone payment.\n\n#### Caution\n\nWhen you import data related to India, make sure you’re in compliance with India data locality requirements.\n\n## General import![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can import data into Revenue Recognition reports and view all the data you’ve imported from the [Data import page](https://dashboard.stripe.com/revenue-recognition/data-import). Click **Download CSV template** and select **General import CSV** to see the required format for the data import feature. You can then click **Import CSV** and select **General import** to upload your completed template. See the following descriptions of the CSV format:\n\n**Source**\n\nThe provider of the original transaction. Examples:\n\n*   `Stripe` (case-insensitive) for transactions processed by Stripe\n*   Any value such as `Checks` or `App Store`, an arbitrary identifier that helps you group the source of a set of transactions\n\n**Transaction ID**\n\nThe ID of a transaction. Examples:\n\n*   An ID such as `ch_123456` or `py_1234` for Stripe payments\n*   An ID such as `in_12345` for Stripe invoices\n*   Any value such as `my_internal_id` or `Check Number 1234`, an arbitrary identifier that helps you track a single transaction\n\n**Split transaction ID**\n\nIf you’re not overriding an invoice line item service period or splitting a transaction, you can leave this blank.\n\nWhen overriding an invoice line item service period, this is the invoice line item ID. Examples:\n\n*   An ID such as `il_1234`, that you can find from your Revenue Recognition reports at the invoice line item level\n\nIf you’re splitting a transaction, this is an arbitrary identifier that differentiates between different parts of the same transaction. Examples:\n\n*   `bike`\n*   `my_internal_id`\n\n**Booked date**\n\nThis is the date that you recorded the transaction in `YYYY-MM-DD` format in the UTC timezone.\n\n**Recognition start date**\n\nThis is the date that you want to start recognizing revenue in `YYYY-MM-DD` format in the UTC timezone.\n\n**Recognition end date**\n\nThis is the date that you want to stop recognizing revenue in `YYYY-MM-DD` format in the UTC timezone.\n\n**Amount**\n\nThis is the numeric amount of the transaction without any currency symbols. For example, for 10.95 USD, you would specify `10.95`.\n\n**Currency**\n\nThis is the three-letter [ISO 4217 currency code](https://en.wikipedia.org/wiki/ISO_4217) for the currency of the recognized revenue of the transaction. For example, for 10.95 USD, you would specify `usd`. Your Stripe account must be set up to support the specified currency.\n\n**Description**\n\nThis can be any arbitrary description. You can use these in combination with [Revenue Recognition rules](https://docs.stripe.com/revenue-recognition/rules) to further customize your recognized revenue.\n\n### Additional verifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   All rows must have a transaction ID.\n*   All of the split parts of a transaction must have an amount that adds up to the original transaction.\n*   External transactions must provide a booked date, revenue recognition start and end date, amount, and currency.\n*   We ignore overrides on payments attached to Stripe invoices, so if you want to override such a payment, use the invoice itself as the transaction.\n\n## Exclusion import![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can exclude transactions from revenue and view the excluded transactions that you imported from the [Data import page](https://dashboard.stripe.com/revenue-recognition/data-import). Click **Download CSV template** and select **Exclusion import CSV** to see the required format for the exclusion data import feature. You can then click **Import CSV** and select **Exclusion import** to upload your completed template.\n\n**Transaction ID**\n\nTransaction ID examples include:\n\n*   `ch_123456` or `py_1234` – An ID for a standalone Stripe payment. If a payment or charge is linked with an invoice, don’t use the charge or payment ID. Use the invoice ID for exclusion instead.\n*   `in_12345` – An ID for Stripe invoices.\n*   `ii_12345` – An ID for Stripe invoice items.\n*   `il_12345` – An ID for Stripe invoice line items.\n\n## Opening accounting periods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApplying a transaction to a closed accounting period generates corrections. If you want to apply past transactions directly to a past accounting period, make sure that the past accounting period is open. If you forgot to do this, you don’t need to re-import data, you can [open the relevant accounting period](https://docs.stripe.com/revenue-recognition/accounting-period-control) and wait for the reports to be recalculated.",
  "title": "Revenue Recognition data import | Stripe Documentation",
  "description": "Import data from other sources to manage all of your revenue recognition in Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/api",
  "markdown": "# Revenue Recognition API | Stripe DocumentationThe Stripe Docs logo\n\n## Revenue Recognition APIBeta\n\n## Access Stripe Revenue Recognition reports programmatically to automate your accrual accounting.\n\nFor accrual accounting, Stripe Revenue Recognition provides [downloadable reports](https://docs.stripe.com/revenue-recognition/reports), such as a [monthly summary](https://docs.stripe.com/revenue-recognition/reports/monthly-summary) and a [revenue waterfall](https://docs.stripe.com/revenue-recognition/reports/waterfall). You can download these reports in CSV format through the [Dashboard](https://dashboard.stripe.com/revenue-recognition) or you can programmatically access them through the API.\n\nRevenue Recognition has six supported report types:\n\n*   `revenue_recognition.debit_credit_summary.1`\n*   `revenue_recognition.debit_credit_by_price.1`\n*   `revenue_recognition.debit_credit_by_product.1`\n*   `revenue_recognition.debit_credit_by_customer.1`\n*   `revenue_recognition.debit_credit_by_invoice.1`\n*   `revenue_recognition.debit_credit_by_invoice_line_item.1`\n\n#### Caution\n\nBecause this feature is in beta, the data fields might change.\n\n## Download a report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following example downloads the debits and credits by summary for May 2021.\n\nFirst, create a report run using [Create a Report Run](https://docs.stripe.com/api/reporting/report_run/create).\n\nTo get a report for May 2023, set `parameters[interval_start]` to 1 May 2023 and `parameters[interval_end]` to 1 Jun 2023.\n\n`curl https://api.stripe.com/v1/reporting/report_runs \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d report_type=\"revenue_recognition.debit_credit_summary.1\" \\  -d \"parameters[interval_start]\"=1682899200 \\  -d \"parameters[interval_end]\"=1685577600`\n\nNext, check whether the [Report Run](https://docs.stripe.com/api/reporting/report_run/object) object succeeds by fetching the report run object:\n\nThe report run object ID starts with `frr_`.\n\n`curl https://api.stripe.com/v1/reporting/report_runs/{{REPORT_RUN_OBJECT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nWhen the object’s `status` is `succeeded`, you can download the CSV using its `result.id` value, as in the following example:\n\nThe report run result ID starts with `file_`.\n\n`curl https://files.stripe.com/v1/files/{{REPORT_RUN_RESULT_ID}}/contents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\n## Report Run Parameters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Report Type | Required Run Parameters | Optional Run Parameters |\n| --- | --- | --- |\n| revenue\\_recognition.debit\\_credit\\_summary.1 | *   `interval_start`<br>*   `interval_end` | *   `decimal_format` |\n| revenue\\_recognition.debit\\_credit\\_by\\_price.1 | *   `interval_start`<br>*   `interval_end` | *   `customer`<br>*   `decimal_format` |\n| revenue\\_recognition.debit\\_credit\\_by\\_product.1 | *   `interval_start`<br>*   `interval_end` | *   `customer`<br>*   `decimal_format` |\n| revenue\\_recognition.debit\\_credit\\_by\\_customer.1 | *   `interval_start`<br>*   `interval_end` | *   `decimal_format` |\n| revenue\\_recognition.debit\\_credit\\_by\\_invoice.1 | *   `interval_start`<br>*   `interval_end` | *   `customer`<br>*   `invoice`<br>*   `invoice_line_item`<br>*   `decimal_format` |\n| revenue\\_recognition.debit\\_credit\\_by\\_invoice\\_line\\_item.1 | *   `interval_start`<br>*   `interval_end` | *   `customer`<br>*   `invoice`<br>*   `invoice_line_item`<br>*   `decimal_format` |\n\n## Report Run Columns![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, reports are run with the default set of columns. You can customize the selection and ordering of columns in the output by including the optional columns parameter with a [list of column names](https://docs.stripe.com/reports/api#report-runs). You can find the supported columns for each report type below.\n\n### Summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `revenue_recognition.debit_credit_summary.1`\n\n| Column Name | Default | Description |\n| --- | --- | --- |\n| accounting\\_period |     | The accounting period |\n| open\\_accounting\\_period |     | The open accounting period; entries in open periods are subject to change |\n| currency |     | Three-letter [ISO code for the currency](https://docs.stripe.com/currencies) of the amount. |\n| debit |     | The debited account |\n| credit |     | The credited account |\n| amount |     | Amount change, expressed in major units of the currency (for example, dollars for USD, or pesos for MXN). |\n| credit\\_gl\\_code |     | The credited general ledger code |\n| debit\\_gl\\_code |     | The debited general ledger code |\n\n### By Price![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `revenue_recognition.debit_credit_by_price.1`\n\n| Column Name | Default | Description |\n| --- | --- | --- |\n| accounting\\_period |     | The accounting period |\n| open\\_accounting\\_period |     | The open accounting period; entries in open periods are subject to change |\n| currency |     | Three-letter [ISO code for the currency](https://docs.stripe.com/currencies) of the amount. |\n| price\\_id |     | The price associated with this change. |\n| debit |     | The debited account |\n| credit |     | The credited account |\n| amount |     | Amount change, expressed in major units of the currency (for example, dollars for USD, or pesos for MXN). |\n| credit\\_gl\\_code |     | The credited general ledger code |\n| debit\\_gl\\_code |     | The debited general ledger code |\n\n### By Product![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `revenue_recognition.debit_credit_by_product.1`\n\n| Column Name | Default | Description |\n| --- | --- | --- |\n| accounting\\_period |     | The accounting period |\n| open\\_accounting\\_period |     | The open accounting period; entries in open periods are subject to change |\n| currency |     | Three-letter [ISO code for the currency](https://docs.stripe.com/currencies) of the amount. |\n| product\\_id |     | The product associated with this change. |\n| debit |     | The debited account |\n| credit |     | The credited account |\n| amount |     | Amount change, expressed in major units of the currency (for example, dollars for USD, or pesos for MXN). |\n| credit\\_gl\\_code |     | The credited general ledger code |\n| debit\\_gl\\_code |     | The debited general ledger code |\n\n### By Customer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `revenue_recognition.debit_credit_by_customer.1`\n\n| Column Name | Default | Description |\n| --- | --- | --- |\n| accounting\\_period |     | The accounting period |\n| open\\_accounting\\_period |     | The open accounting period; entries in open periods are subject to change |\n| currency |     | Three-letter [ISO code for the currency](https://docs.stripe.com/currencies) of the amount. |\n| customer\\_id |     | The customer associated with this change. |\n| debit |     | The debited account |\n| credit |     | The credited account |\n| amount |     | Amount change, expressed in major units of the currency (for example, dollars for USD, or pesos for MXN). |\n| credit\\_gl\\_code |     | The credited general ledger code |\n| debit\\_gl\\_code |     | The debited general ledger code |\n\n### By Invoice![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `revenue_recognition.debit_credit_by_invoice.1`\n\n| Column Name | Default | Description |\n| --- | --- | --- |\n| accounting\\_period |     | The accounting period |\n| open\\_accounting\\_period |     | The open accounting period; entries in open periods are subject to change |\n| currency |     | Three-letter [ISO code for the currency](https://docs.stripe.com/currencies) of the amount. |\n| transaction\\_model\\_id |     | The model in Stripe associated with this change - either an invoice line item, invoice, invoiceitem, charge, or etc. |\n| debit |     | The debited account |\n| credit |     | The credited account |\n| booked\\_date |     | The date that the ledger entry is added to the books. |\n| amount |     | Amount change, expressed in major units of the currency (for example, dollars for USD, or pesos for MXN). |\n| debit\\_gl\\_code |     | The debited general ledger code |\n| credit\\_gl\\_code |     | The credited general ledger code |\n| invoice\\_id |     | The invoice associated with this change. Standalone charges or invoice items not associated with an invoice are `null`. |\n| invoice\\_line\\_item\\_id |     | The ID of the invoice line\\_item. |\n| invoice\\_item\\_id |     | The ID of the invoice item |\n| subscription\\_item\\_id |     | The ID of the subscription\\_item. |\n| price\\_id |     | The price associated with this change. Standalone charges or invoice items not associated with a price are `null`. |\n| product\\_id |     | The product associated with this price. |\n| customer\\_id |     | The customer associated with this change. |\n| subscription\\_id |     | The subscription associated with this change. |\n| charge\\_id |     | The charge associated with this change. |\n| refund\\_id |     | The refund associated with this change. |\n| dispute\\_id |     | The dispute associated with this change. |\n| presentment\\_currency |     | The presentment (customer facing) currency of the transaction. |\n| presentment\\_amount |     | The presentment (customer facing) amount. |\n\n### By Invoice Line Item![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAPI report type: `revenue_recognition.debit_credit_by_invoice_line_item.1`\n\n| Column Name | Default | Description |\n| --- | --- | --- |\n| accounting\\_period |     | The accounting period |\n| open\\_accounting\\_period |     | The open accounting period; entries in open periods are subject to change |\n| currency |     | Three-letter [ISO code for the currency](https://docs.stripe.com/currencies) of the amount. |\n| transaction\\_model\\_id |     | The model in Stripe associated with this change—an invoice line item, invoice, invoice item, charge, and so on. |\n| debit |     | The debited account |\n| credit |     | The credited account |\n| booked\\_date |     | The date that the ledger entry is added to the books. |\n| amount |     | Amount change, expressed in major units of the currency (for example, dollars for USD, or pesos for MXN). |\n| debit\\_gl\\_code |     | The debited general ledger code |\n| credit\\_gl\\_code |     | The credited general ledger code |\n| invoice\\_id |     | The invoice associated with this change. Standalone charges or invoice items not associated with an invoice are `null`. |\n| invoice\\_line\\_item\\_id |     | The ID of the invoice line\\_item. |\n| invoice\\_item\\_id |     | The ID of the invoice item |\n| subscription\\_item\\_id |     | The ID of the subscription\\_item. |\n| price\\_id |     | The price associated with this change. Standalone charges or invoice items not associated with a price are `null`. |\n| product\\_id |     | The product associated with this price. |\n| customer\\_id |     | The customer associated with this change. |\n| subscription\\_id |     | The subscription associated with this change. |\n| charge\\_id |     | The charge associated with this change. |\n| refund\\_id |     | The refund associated with this change. |\n| dispute\\_id |     | The dispute associated with this change. |\n| presentment\\_currency |     | The presentment (customer facing) currency of the transaction. |\n| presentment\\_amount |     | The presentment (customer facing) amount. |\n\nIf you encounter any issues, you can contact [revenue-recognition-api-beta@stripe.com](mailto:revenue-recognition-api-beta@stripe.com).",
  "title": "Revenue Recognition API | Stripe Documentation",
  "description": "Access Stripe Revenue Recognition reports programmatically to automate your accrual accounting.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/reports/monthly-summary",
  "markdown": "# Monthly summary | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the monthly summary report.\n\nThe [monthly summary](https://dashboard.stripe.com/revenue-recognition/) provides a detailed breakdown of activity for the previous month. You can use this information to understand how your billing activity affected your revenue and to book journal entries.\n\n![Monthly summary for July 2020](https://b.stripecdn.com/docs-statics-srv/assets/monthly-summary-v2.ba474e8e2a801fedb0674c40bae653ad.png)\n\nYou can see that the net recognized revenue is 171,601 USD and the ending balance of deferred revenue at the end of July is 310,000 USD.\n\n## Recognized revenue ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nItems can be broken down into two categories: revenue and contra revenue. The following table explains each item under recognized revenue:\n\n| Item | Category | Description |\n| --- | --- | --- |\n| Revenue from billings this month | Revenue | The recognized revenue portion from finalized invoice line items and standalone payments occurring this month. The revenue of a standalone payment is recognized when the payment occurs. |\n| Recognized revenue previously deferred | Revenue | The recognized revenue portion from invoice line items finalized in previous months. |\n| Revenue from metered subscriptions this month | Revenue | The revenue from metered subscriptions. |\n| Revenue from unbilled services | Revenue | The revenue from unbilled invoice items. |\n| Revenue from platform fees | Revenue | The revenue from platform fees. [Learn how a platform fee impacts revenue](https://docs.stripe.com/revenue-recognition/connect/destination-charges#revenue-collected-with-application_fee_amount). |\n| Less canceled unbilled invoice items | Contra revenue | The contra revenue originated from the deleted unbilled invoice items. |\n| Less refunds | Contra revenue | The contra revenue originated from refunds. This contra revenue offsets previously recognized revenue. [Learn how a refund impacts revenue.](https://docs.stripe.com/revenue-recognition/examples#refund) |\n| Less disputes | Contra revenue | The contra revenue originated from disputes. This contra revenue offsets previously recognized revenue. [Learn how a dispute impacts revenue.](https://docs.stripe.com/revenue-recognition/examples#dispute) |\n| Less voided billings | Contra revenue | The contra revenue originated from voids. This contra revenue offsets previously recognized revenue. [Learn how voiding impacts revenue.](https://docs.stripe.com/revenue-recognition/examples#void) |\n| Less bad debt | Contra revenue | The contra revenue originated from marking invoices as uncollectible. This contra revenue offsets previously recognized revenue. [Learn how marking an invoice as uncollectible impacts revenue.](https://docs.stripe.com/revenue-recognition/examples#uncollectible) |\n| Less credit notes | Contra revenue | The contra revenue originated from credit notes. This contra revenue offsets previously recognized revenue. |\n| Less refunds from platform fees | Contra revenue | The contra revenue originated from refunding platform fees. [Learn how a platform fee refund impacts revenue](https://docs.stripe.com/revenue-recognition/connect/destination-charges#loss-and-contra-revenue-with-issuing-refunds). |\n| Less transfer | Contra revenue | The contra revenue originated from separate transfers. [Learn how a separate transfer impacts revenue](https://docs.stripe.com/revenue-recognition/connect/charges-transfers). |\n| Net revenue |     | The recognized revenue less the contra revenue. |\n\n## Deferred revenue ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe deferred revenue section gives the breakdown of what changed in the deferred revenue balance. The following table lists the items under this section:\n\n| Item | Description |\n| --- | --- |\n| Starting balance | The ending balance of the deferred revenue from the previous month. |\n| Deferred change from new billings this month | The deferred revenue from finalized invoice line items and standalone payments occurring this month. With the exception of unbilled revenue that was recognized in previous months (that is, included in “Revenue from unbilled services” in previous months), every invoice line item and standalone payment books its deferred revenue regardless of their revenue recognition schedule. |\n| Less recognized revenue | The portion of deferred revenue that was recognized this month. |\n| Less credits issued | The remaining deferred revenue erased due to refunds, disputes, voids, uncollectible invoices, and credit notes. [Learn how a refund impacts the remaining deferred revenue.](https://docs.stripe.com/revenue-recognition/examples#refund) |\n| Ending balance | The ending balance of the deferred revenue from this month. |\n\n## Finalized invoice example ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example includes only one [invoice](https://docs.stripe.com/api/invoices \"invoices\") with the following assumptions:\n\n*   The invoice finalizes on July 10, 2020.\n*   The invoice has only one line item whose service period is from July 20, 2020 to September 17, 2020.\n*   The amount for the invoice line item is 60 USD, out of which 12 USD is recognized in July and 48 USD is deferred.\n\nThe monthly summary for July 2020 would look like this:\n\n|     |     |\n| --- | --- |\n| **Recognized revenue** |     |\n| Revenue from billings this month | 12 USD |\n| **Net revenue** | 12 USD |\n| **Deferred revenue** |     |\n| Starting balance Jul 1 UTC | 0 USD |\n| Deferred change from new billings this month | 60 USD |\n| Less recognized revenue | \\-12 USD |\n| **Ending balance Jul 31 UTC** | 48 USD |\n| **Future scheduled billings** |     |\n| Starting balance Jul 1 UTC | 0 USD |\n| **Ending balance Jul 31 UTC** | 0 USD |\n\nContinuing on this example, if the invoice is refunded on August 15, 2020, the monthly summary for August 2020 would look like this:\n\n|     |     |\n| --- | --- |\n| **Recognized revenue** |     |\n| Less refunds | \\-12 USD |\n| **Net revenue** | \\-12 USD |\n| **Deferred revenue** |     |\n| Starting balance Aug 1 UTC | 48 USD |\n| Less credits issued | \\-48 USD |\n| **Ending balance Aug 31 UTC** | 0 USD |\n| **Future scheduled billings** |     |\n| Starting balance Aug 1 UTC | 0 USD |\n| **Ending balance Aug 31 UTC** | 0 USD |\n\n## Standalone payment example ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe revenue of a standalone payment is recognized when the payment occurs. This example has only one charge with the following assumptions:\n\n*   The charge occurs on July 15, 2020.\n*   The charge’s amount is 17 USD.\n\nThe monthly summary for July 2020 would look like this:\n\n|     |     |\n| --- | --- |\n| **Recognized revenue** |     |\n| Revenue from billings this month | 17 USD |\n| **Net revenue** | 17 USD |\n| **Deferred revenue** |     |\n| Starting balance Jul 1 UTC | 0 USD |\n| Deferred change from new billings this month | 17 USD |\n| Less recognized revenue | 17 USD |\n| **Ending balance Jul 31 UTC** | 0 USD |\n| **Future scheduled billings** |     |\n| Starting balance Jul 1 UTC | 0 USD |\n| **Ending balance Jul 31 UTC** | 0 USD |",
  "title": "Monthly summary | Stripe Documentation",
  "description": "Learn about the monthly summary report.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/reports/waterfall",
  "markdown": "# Revenue waterfall | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the revenue waterfall report.\n\nThe [waterfall report](https://dashboard.stripe.com/revenue-recognition/accounting-reports) displays information about your monthly revenue. You can select a range to view, and you can specify a month to show recognized revenue up to.\n\nFor example, the waterfall below shows the revenue that was billed from April 2020 to May 2020 and monthly recognized revenue up to the end of June 2020:\n\n![Revenue waterfall](https://b.stripecdn.com/docs-statics-srv/assets/waterfall-v7.cbcf5791e6a75f6673319f1e31ca33fc.png)\n\nYou can see that 2,000,000 USD in net revenue was booked on April 2020. Out of 2,000,000 USD, 400,000 USD was recognized in May 2020. At the end of June, 1,100,000 USD was recognized, and 900,000 USD wasn’t recognized yet.\n\n## Booked revenue ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe **Booked** column in the waterfall report shows the revenue booked by month. The booked revenue of a month is the amount of revenue and deferred revenue booked by [invoice](https://docs.stripe.com/api/invoices \"invoices\") line items, invoice items, standalone payments, refunds, disputes, and metered billing usage.\n\n### Simple invoice![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis example is based on the following assumptions:\n\n*   The invoice and invoice line item finalize on July 14, 2020.\n*   The amount of the invoice line item is 31 USD, and its service period is from July 21, 2020 to Aug 20, 2020.\n\nThe revenue waterfall would look like this:\n\n|     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| **Booked** |     | **Recognized** |     |     |     | **As of Sep 2020** |     |\n| **Month** | **Total** | **Jun 2020** | **Jul 2020** | **Aug 2020** | **Sep 2020** | **Recognized** | **Remaining** |\n| Jul 2020 | 31 USD |     | 11 USD | 20 USD |     | 31 USD | 0 USD |\n\n### Negative recognized revenue![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn the revenue waterfall, the recognized revenue can be negative due to refunds, disputes, invoices marked as uncollectible, and voided invoices.\n\nThis example is based on the following assumptions:\n\n*   The invoice and invoice line item finalize on July 14, 2020.\n*   The amount of the invoice line item is 31 USD, and its service period is from July 21, 2020 to Aug 20, 2020.\n*   The invoice is voided on September 12, 2020.\n\nThe booked revenue for July 2020 would net at 31 USD, and the booked revenue for Sep 2020 would be net -31 USD, as shown in the following revenue waterfall:\n\n|     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| **Booked** |     | **Recognized** |     |     |     | **As of Sep 2020** |     |\n| **Month** | **Total** | **Jun 2020** | **Jul 2020** | **Aug 2020** | **Sep 2020** | **Recognized** | **Remaining** |\n| Jul 2020 | 31 USD |     | 11 USD | 20 USD |     | 0 USD | 0 USD |\n| Aug 2020 | 0 USD |     |     |     |     | 0 USD | 0 USD |\n| Sep 2020 | \\-31 USD |     |     |     | \\-31 USD | 0 USD | 0 USD |\n\n### Revenue does not include taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe total amount of the invoice doesn’t necessarily equal the booked revenue because of taxes.\n\nThis example is based on the following assumptions:\n\n*   The invoice and invoice line item finalize on July 14, 2020\n*   The invoice line item’s amount is 35 USD, and its service period is from July 21, 2020 to Aug 20, 2020\n*   The invoice line item’s tax is 4 USD (inclusively)\n\nEven though the invoice’s total amount is 35 USD, the billed revenue would be 31 USD because the tax is 4 USD, as shown in the following revenue waterfall:\n\n|     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| **Booked** |     | **Recognized** |     |     |     | **As of Sep 2020** |     |\n| **Month** | **Total** | **June 2020** | **July 2020** | **Aug 2020** | **Sep 2020** | **Recognized** | **Remaining** |\n| Jul 2020 | 31 USD |     | 11 USD | 20 USD |     | 31 USD | 0 USD |\n\n### The invoice’s due amount is not revenue![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe amount due for the invoice doesn’t necessarily equal the revenue because an invoice can be paid with the customer balance.\n\nThis example is based on the following assumptions:\n\n*   The invoice and invoice line item finalize on July 14, 2020.\n*   The amount of the invoice line item is 31 USD, and its service period is from July 21, 2020 to Aug 20, 2020.\n*   The invoice is partially paid by customer balance for 10 USD.\n\nEven though the amount due for the invoice is 21 USD, the revenue would still be 31 USD, as shown in the following revenue waterfall:\n\n|     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| **Booked** |     | **Recognized** |     |     |     | **As of Sep 2020** |     |\n| **Month** | **Total** | **Jun 2020** | **Jul 2020** | **Aug 2020** | **Sep 2020** | **Recognized** | **Remaining** |\n| Jul 2020 | 31 USD |     | 11 USD | 20 USD |     | 31 USD | 0 USD |\n\n### Invoice item![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInvoice items are created automatically during upgrade and downgrade to represent the unused time of the previous plan and the remaining time of the new plan. You can also create invoice items manually.\n\nBooked revenue includes the revenue of an invoice item in the month that the invoice item first appears.\n\nThis example is based on the following assumptions:\n\n*   The invoice item is created on May 14, 2020.\n*   The amount of the invoice item is 31 USD, and its service period is from May 14, 2020 to June 13, 2020.\n\n|     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| **Booked** |     | **Recognized** |     |     |     | **As of Sep 2020** |     |\n| **Month** | **Total** | **Apr 2020** | **May 2020** | **Jun 2020** | **Jul 2020** | **Recognized** | **Remaining** |\n| May 2020 | 31 USD |     | 18 USD | 13 USD |     | 31 USD | 0 USD |\n\nTo continue with this example, say you create an invoice on Jun 19, 2020, roll the above invoice item to the invoice, and create one more line item with the following assumptions:\n\n*   The amount of the invoice line item is 62 USD.\n*   The service period for the invoice line item is from Jun 21, 2020 to Jul 20, 2020.\n\nThe invoice contains two invoice line items. One is the invoice item created in May. The other is the invoice line item created on June 19, 2020. The total amount of the invoice is 93 USD.\n\nThe revenue waterfall would look like this:\n\n|     |     |     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| **Booked** |     | **Recognized** |     |     |     | **As of Sep 2020** |     |\n| **Month** | **Total** | **Apr 2020** | **May 2020** | **Jun 2020** | **Jul 2020** | **Recognized** | **Remaining** |\n| May 2020 | 31 USD |     | 18 USD | 13 USD |     | 31 USD | 0 USD |\n| Jun 2020 | 62 USD |     |     | 22 USD | 40 USD | 62 USD | 0 USD |\n\n### Metered billing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis example uses the following assumptions:\n\n*   1 unit costs 10 USD.\n*   3 units are recorded in June 2020.\n*   2 units are recorded in July 2020.\n*   An invoice finalizes on July 15, 2020, to invoice 5 units.\n\nThe revenue waterfall would look like this:\n\n|     |     |     |     |     |     |\n| --- | --- | --- | --- | --- | --- |\n| **Booked** |     | **Recognized** |     | **As of Sep 2020** |     |\n| **Month** | **Total** | **Jun 2020** | **Jul 2020** | **Recognized** | **Remaining** |\n| Jun 2020 | 30 USD | 30 USD |     | 30 USD | 0 USD |\n| Jul 2020 | 20 USD |     | 20 USD | 20 USD | 0 USD |\n\n## Replication in Sigma ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo replicate the revenue waterfall report in [Sigma](https://docs.stripe.com/stripe-data/access-data-in-dashboard), use the `revenue_recognition_debits_and_credits` table.\n\nThis query generates waterfall numbers for revenue booked from Nov 2022 to Nov 2023, and recognized up to Nov 2024. Feel free to adjust the dates to your desired time frame.\n\n#### Note\n\nIf you’re using our [chart of accounts](https://docs.stripe.com/revenue-recognition/chart-of-accounts) beta feature, be sure to update the `unbilled_ar_accounts` mapping in the query below to reflect the accounts in your general ledger.\n\n`select \"billing_period\", \"currency\", \"total\", \"2022-11-01\", \"2022-12-01\", \"2023-01-01\", \"2023-02-01\", \"2023-03-01\", \"2023-04-01\", \"2023-05-01\", \"2023-06-01\", \"2023-07-01\", \"2023-08-01\", \"2023-09-01\", \"2023-10-01\", \"2023-11-01\", \"2023-12-01\", \"2024-01-01\", \"2024-02-01\", \"2024-03-01\", \"2024-04-01\", \"2024-05-01\", \"2024-06-01\", \"2024-07-01\", \"2024-08-01\", \"2024-09-01\", \"2024-10-01\", \"2024-11-01\", \"deferred\", \"future_billings\" from (   with unbilled_ar_accounts as (     values 'UnbilledAccountsReceivable'   )    , formatted_changes as (     select       booked_date,       date_format(accounting_period_date, '%Y-%m-%d') as accounting_period,       debit,       credit,     \tdebit_account_type,     \tcredit_account_type,       currency,       if(lower(currency) in ('bif', 'clp', 'djf', 'gnf', 'jpy', 'kmf', 'krw', 'mga', 'pyg', 'rwf', 'vnd', 'vuv', 'xaf', 'xof', 'xpf'), cast(amount as decimal(18, 0)), cast(0.01 * amount as decimal(18, 2))) as decimalized_settlement_amount,       case when debit in (select * from unbilled_ar_accounts) OR credit in (select * from unbilled_ar_accounts) then true else false end AS is_unbilled     from revenue_recognition_debits_and_credits   )    , raw_net_changes as (     select       debit as account,       debit_account_type as account_type,       decimalized_settlement_amount as raw_net_change,       *     from formatted_changes     union all     select       credit as account,       credit_account_type as account_type,       -decimalized_settlement_amount as raw_net_change,       *     from formatted_changes   )    , net_changes as (     select       (case when account_type in ('Assets', 'ContraRevenue', 'Expenses', 'Losses')       \tthen raw_net_change else -raw_net_change end) as net_change,       *     from raw_net_changes   )    , waterfall_entries as (     select       account,       currency,       date_trunc('month', booked_date) as billing_period,       accounting_period,       is_unbilled,       (net_change * (case when account_type = 'Revenue' then 1 else -1 end)) as net_change     from net_changes     where account_type in ('Revenue', 'ContraRevenue')   )    select     currency,     billing_period,     sum(net_change) as total,       nullif(sum(case when accounting_period = '2022-11-01' then net_change else 0 end), 0) as \"2022-11-01\",       nullif(sum(case when accounting_period = '2022-12-01' then net_change else 0 end), 0) as \"2022-12-01\",       nullif(sum(case when accounting_period = '2023-01-01' then net_change else 0 end), 0) as \"2023-01-01\",       nullif(sum(case when accounting_period = '2023-02-01' then net_change else 0 end), 0) as \"2023-02-01\",       nullif(sum(case when accounting_period = '2023-03-01' then net_change else 0 end), 0) as \"2023-03-01\",       nullif(sum(case when accounting_period = '2023-04-01' then net_change else 0 end), 0) as \"2023-04-01\",       nullif(sum(case when accounting_period = '2023-05-01' then net_change else 0 end), 0) as \"2023-05-01\",       nullif(sum(case when accounting_period = '2023-06-01' then net_change else 0 end), 0) as \"2023-06-01\",       nullif(sum(case when accounting_period = '2023-07-01' then net_change else 0 end), 0) as \"2023-07-01\",       nullif(sum(case when accounting_period = '2023-08-01' then net_change else 0 end), 0) as \"2023-08-01\",       nullif(sum(case when accounting_period = '2023-09-01' then net_change else 0 end), 0) as \"2023-09-01\",       nullif(sum(case when accounting_period = '2023-10-01' then net_change else 0 end), 0) as \"2023-10-01\",       nullif(sum(case when accounting_period = '2023-11-01' then net_change else 0 end), 0) as \"2023-11-01\",       nullif(sum(case when accounting_period = '2023-12-01' then net_change else 0 end), 0) as \"2023-12-01\",       nullif(sum(case when accounting_period = '2024-01-01' then net_change else 0 end), 0) as \"2024-01-01\",       nullif(sum(case when accounting_period = '2024-02-01' then net_change else 0 end), 0) as \"2024-02-01\",       nullif(sum(case when accounting_period = '2024-03-01' then net_change else 0 end), 0) as \"2024-03-01\",       nullif(sum(case when accounting_period = '2024-04-01' then net_change else 0 end), 0) as \"2024-04-01\",       nullif(sum(case when accounting_period = '2024-05-01' then net_change else 0 end), 0) as \"2024-05-01\",       nullif(sum(case when accounting_period = '2024-06-01' then net_change else 0 end), 0) as \"2024-06-01\",       nullif(sum(case when accounting_period = '2024-07-01' then net_change else 0 end), 0) as \"2024-07-01\",       nullif(sum(case when accounting_period = '2024-08-01' then net_change else 0 end), 0) as \"2024-08-01\",       nullif(sum(case when accounting_period = '2024-09-01' then net_change else 0 end), 0) as \"2024-09-01\",       nullif(sum(case when accounting_period = '2024-10-01' then net_change else 0 end), 0) as \"2024-10-01\",       nullif(sum(case when accounting_period = '2024-11-01' then net_change else 0 end), 0) as \"2024-11-01\",     sum(case when accounting_period >= '2024-12-01' and is_unbilled = false then net_change else 0 end) as deferred,     sum(case when accounting_period >= '2024-12-01' and is_unbilled = true then net_change else 0 end) as future_billings    from waterfall_entries   where     net_change != 0     and billing_period >= timestamp '2022-11-01 00:00:00'     and billing_period < timestamp '2023-12-01 00:00:00'   group by currency, billing_period   order by currency asc, billing_period asc )`",
  "title": "Revenue waterfall | Stripe Documentation",
  "description": "Learn about the revenue waterfall report.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-data",
  "markdown": "# Stripe data | Stripe DocumentationThe Stripe Docs logo\n\n[](https://docs.stripe.com/stripe-data/access-data-in-dashboard \"Create custom reports\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/custom-reporting-purple.a483f4be74b9776cb08a355af7d3dc38.png)](https://docs.stripe.com/stripe-data/access-data-in-dashboard \"Create custom reports\")\n\nUse Sigma to generate reports from the Dashboard about charges, refunds, disputes, and other critical operational and finance metrics.",
  "title": "Stripe data | Stripe Documentation",
  "description": "Use Stripe data to answer critical questions about the performance of your business. Write queries and run reports directly in the Stripe Dashboard with Sigma. Sync Stripe data with your own data warehouse, like Amazon Redshift or Snowlflake. Or import external data into Stripe and integrate with the Data Management API or set up recurring CSV imports with a data connector, like Amazon S3.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/testing",
  "markdown": "# Testing Issuing | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to test your integration and simulate purchases.\n\nYou can issue cards and simulate purchases using your own Stripe integration in test mode. This allows you to test your integration before you go live without having to make real purchases. You can only use these cards for testing within your Stripe account and not for external purchases.\n\n#### Caution\n\nWhen testing your [authorization endpoint](https://docs.stripe.com/issuing/purchases/authorizations), make sure that you have set the endpoint for test mode in your [Issuing settings](https://dashboard.stripe.com/account/issuing). Toggle **View test data** to switch between test and live mode data and settings.\n\n## Fund your test mode Issuing balance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you create test mode transactions, you must add test mode funds to the Issuing balance on your account. These aren’t real funds, and you can only use them for simulating purchases in test mode.\n\n### Issuing users in the US![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIssuing users in the US use “pull” funding, and use _Top-ups_ to fund their Issuing balance. You can create test mode top-ups in the Dashboard, or with the [Top-ups API](https://docs.stripe.com/api/topups/create). Learn more about funding Issuing balances for [US users](https://docs.stripe.com/issuing/funding/balance?push-pull-preference=pull).\n\n### Issuing users in the UK and euro area![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo top up their balance, Issuing users in the UK and Europe “push” funds using _Funding Instructions_. You can do this in the test mode Dashboard, or with the [Funding Instructions API](https://docs.stripe.com/api/funding_instructions). Learn more about funding Issuing balances for [UK and euro area users](https://docs.stripe.com/issuing/funding/balance?push-pull-preference=push).\n\nYou can simulate a card purchase by specifying authorization details in the Dashboard.\n\n[](#without-code-create-card)\n\nUse the [API](https://docs.stripe.com/issuing/cards) or the [Dashboard](https://dashboard.stripe.com/issuing/cards) to create a cardholder and card in test mode.\n\n[](#without-code-create-test-purchase)\n\nNavigate to the [Issuing Cards page](https://dashboard.stripe.com/issuing/cards) in test mode, find your newly-created card, then click **Create test purchase**.\n\nYou can select to create either an [Authorization](https://docs.stripe.com/api/issuing/authorizations/object) or [Transaction](https://docs.stripe.com/api/issuing/transactions/object) by force capture.\n\nDepending on your selection, you can provide a number of properties, such as amount, business data, and so on.\n\nClick **Submit** to create the purchase. If you selected authorization and have configured your [synchronous webhook](https://docs.stripe.com/issuing/controls/real-time-authorizations), you can use it to approve or decline the authorization. The browser redirects to the page for the newly-created authorization.\n\n[](#without-code-create-test-capture)\n\nTo create a test capture with an authorization in the Dashboard, enter test mode and complete the following steps:\n\n1.  Navigate to the [Authorizations](https://dashboard.stripe.com/issuing/authorizations) page under **Issued Cards**.\n2.  Click the authorization you want to capture, then click **Capture**.\n\nYou can capture an authorization for an amount that’s lesser, greater, or equivalent to the authorized total. You can also [capture multiple times](https://docs.stripe.com/issuing/purchases/transactions?issuing-capture-type=multi_capture) regardless of the authorization’s current state.\n\nEnter the amount you want to capture, then click **Submit** to create the capture. The browser redirects you to the Transactions page and selects the newly created transaction.",
  "title": "Testing Issuing | Stripe Documentation",
  "description": "Learn how to test your integration and simulate purchases.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/customize-your-program",
  "markdown": "# Customize your program | Stripe DocumentationThe Stripe Docs logo\n\n## Card benefits and rewards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Card benefits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll cards issued through Stripe have a roster of available cardholder benefits. By default, your cardholders receive automatically-included benefits that vary depending on the card product type of your program. You can also enroll your program in optional benefits that fit the needs of your use case and can help drive cardholder transactions in the categories you aim to incentivize spend for. [Optional benefits](https://docs.stripe.com/issuing/customize-your-program#optional-benefits) are available for a fee.\n\nBy default, cardholders get the following benefits with each card product:\n\n|     |     |\n| --- | --- |\n| **Card product type** | **Included benefits** |\n| [Visa Business](https://usa.visa.com/support/small-business/card-benefits.html#1) | *   Auto Rental Collision Damage Waiver<br>*   Travel and Emergency Assistance Services<br>*   Purchase Security/Extended Protection<br>*   Roadside Dispatch®<br>*   [Visa SavingsEdge](https://www.visasavingsedge.com/e/members/registration.php?sid=92XXdKrlo92#step1)<br>*   Dovly Uplift™ Smart Credit Engine<br>*   ID Navigator Powered by NortonLifeLock |\n| [Visa Business Signature](https://usa.visa.com/support/small-business/card-benefits.html#2) | *   Auto Rental Collision Damage Waiver<br>*   Travel and Emergency Assistance Services<br>*   Purchase Security/Extended Protection<br>*   Roadside Dispatch®<br>*   [Visa SavingsEdge](https://www.visasavingsedge.com/e/members/registration.php?sid=92XXdKrlo92#step1)<br>*   Dovly Uplift™ Smart Credit Engine<br>*   ID Navigator Powered by NortonLifeLock<br>*   Lost Luggage Reimbursement<br>*   Travel Accident Insurance<br>*   Visa Luxury Hotel Collection access<br>*   Visa Concierge |\n| [Commercial](https://usa.visa.com/run-your-business/commercial-solutions/enterprise-government-cards/commercial-card-enterprise-government.html#2) Corporate<br><br>[Commercial](https://usa.visa.com/run-your-business/commercial-solutions/enterprise-government-cards/commercial-card-enterprise-government.html#2) Purchasing<br><br>[Commercial](https://usa.visa.com/run-your-business/commercial-solutions/enterprise-government-cards/commercial-card-enterprise-government.html#2) Fleet | *   Auto Rental Collision Damage Waiver<br>*   Travel and Emergency Assistance Services<br>*   Roadside Dispatch®<br>*   Liability waiver |\n\n#### Note\n\nThis table refers to Visa benefits only. For information about MasterCard benefits, please contact [support](https://support.stripe.com/) or your account manager.\n\nAll programs require the following services be provided to cardholders. You can offer the service to your cardholders yourself, or use the card network’s offering for a usage-based fee.\n\n*   Cardholder inquiry service\n*   Lost or stolen card reporting\n*   Emergency card replacement and emergency cash disbursement\n\n### Optional benefits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen setting up your program, you can also choose to provide one or more additional, non-standard benefits from the list below. These benefits will incur a per active card fee when utilized that Stripe passes on to you. After you select the benefits you’re interested in or want your cards enrolled in, your Stripe account or support partner will work with you to provide additional details and make sure they’re set up properly.\n\nOptional benefits are available to you through a third-party Stripe network partner. Enrollment isn’t effective until you receive confirmation from Stripe or our benefits partner. Certain terms, conditions and exclusions apply.\n\n|     |     |\n| --- | --- |\n| **Card product type** | **Optional benefits** |\n| [Visa Business](https://usa.visa.com/support/small-business/card-benefits.html#1) | *   Baggage delay reimbursement<br>*   Cellular telephone protection<br>*   RideShare protection (not available in all states)<br>*   Emergency evacuation and transportation/repatriation of remains coverage<br>*   Emergency medical/dental benefit<br>*   Event ticket protection<br>*   Hotel theft protection (1,000 USD or 1,500 USD)<br>*   Lost luggage reimbursement (1,250 USD, 3,000 USD, or 5,000 USD)<br>*   Price protection (250 USD, 500 USD, or 1,000 USD)<br>*   Return protection<br>*   Travel accident insurance (options between 100,000 USD - 1,000,000 USD)<br>*   Trip cancellation/trip interruption (2,000 USD or 5,000 USD)<br>*   Trip delay reimbursement |\n| [Visa Business Signature](https://usa.visa.com/support/small-business/card-benefits.html#2) | *   Baggage delay reimbursement<br>*   Cellular telephone protection<br>*   RideShare protection (not available in all states)<br>*   Emergency evacuation and transportation/repatriation of remains coverage<br>*   Emergency medical/dental benefit<br>*   Event ticket protection<br>*   Hotel theft protection (1,000 USD or 1,500 USD)<br>*   Price protection (250 USD, 500 USD, or 1,000 USD)<br>*   Return protection<br>*   Trip cancellation/trip interruption (2,000 USD or 5,000 USD)<br>*   Trip delay reimbursement |\n| [Commercial](https://usa.visa.com/run-your-business/commercial-solutions/enterprise-government-cards/commercial-card-enterprise-government.html#2) Corporate<br><br>[Commercial](https://usa.visa.com/run-your-business/commercial-solutions/enterprise-government-cards/commercial-card-enterprise-government.html#2) Purchasing<br><br>[Commercial](https://usa.visa.com/run-your-business/commercial-solutions/enterprise-government-cards/commercial-card-enterprise-government.html#2) Fleet | *   Baggage delay reimbursement<br>*   RideShare protection (not available in all states)<br>*   Emergency evacuation and transportation/repatriation of remains coverage<br>*   Emergency medical/dental benefit<br>*   Event ticket protection<br>*   Hotel theft protection (1,000 USD or 1,500 USD)<br>*   Lost luggage reimbursement (1,250 USD, 3,000 USD, or 5,000 USD)<br>*   Price protection (250 USD, 500 USD, or 1,000 USD)<br>*   Return protection<br>*   Travel accident insurance (options between 100,000 USD - 1,000,000 USD)<br>*   Trip cancellation/trip interruption (2,000 USD or 5,000 USD)<br>*   Trip delay reimbursement |\n\n### Marketing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCommunicating benefit details to cardholders is critical to ensuring they find value in benefits and use them. Our card network provider must review and approve all marketing materials or cardholder-facing terms before publishing. We work with you during the approval process by supplying you with sample, pre-approved messaging if you don’t draft your own. This is a required step to launching a benefits program. The review process can take 5-7 business days.\n\n### Rewards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlthough Stripe doesn’t provide rewards on any of its issued cards, you can set up your own rewards program on any of the cards you issue through us. Of the card product types Stripe offers, rewards are only a requirement for Visa Business Signature. The only requirement before going live is to make sure that our card network partner has reviewed and signed off on the reward terms and promotion details.",
  "title": "Customize your program | Stripe Documentation",
  "description": "Learn how to customize Stripe Issuing to the unique needs of your business.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/categories",
  "markdown": "# Issuing merchant categories | Stripe DocumentationThe Stripe Docs logo\n\nA/C, Refrigeration Repair  \n`ac_refrigeration_repair`7623Accounting/Bookkeeping Services  \n`accounting_bookkeeping_services`8931Advertising Services  \n`advertising_services`7311Agricultural Cooperative  \n`agricultural_cooperative`0763Airlines, Air Carriers  \n`airlines_air_carriers`4511Airports, Flying Fields  \n`airports_flying_fields`4582Ambulance Services  \n`ambulance_services`4119Amusement Parks/Carnivals  \n`amusement_parks_carnivals`7996Antique Reproductions  \n`antique_reproductions`5937Antique Shops  \n`antique_shops`5932Aquariums  \n`aquariums`7998Architectural/Surveying Services  \n`architectural_surveying_services`8911Art Dealers and Galleries  \n`art_dealers_and_galleries`5971Artists Supply and Craft Shops  \n`artists_supply_and_craft_shops`5970Auto Body Repair Shops  \n`auto_body_repair_shops`7531Auto Paint Shops  \n`auto_paint_shops`7535Auto Service Shops  \n`auto_service_shops`7538Auto and Home Supply Stores  \n`auto_and_home_supply_stores`5531Automated Cash Disburse  \n`automated_cash_disburse`6011Automated Fuel Dispensers  \n`automated_fuel_dispensers`5542Automobile Associations  \n`automobile_associations`8675Automotive Parts and Accessories Stores  \n`automotive_parts_and_accessories_stores`5533Automotive Tire Stores  \n`automotive_tire_stores`5532Bail and Bond Payments (payment to the surety for the bond, not the actual bond paid to the government agency)  \n`bail_and_bond_payments`9223Bakeries  \n`bakeries`5462Bands, Orchestras  \n`bands_orchestras`7929Barber and Beauty Shops  \n`barber_and_beauty_shops`7230Betting/Casino Gambling  \n`betting_casino_gambling`7995Bicycle Shops  \n`bicycle_shops`5940Billiard/Pool Establishments  \n`billiard_pool_establishments`7932Boat Dealers  \n`boat_dealers`5551Boat Rentals and Leases  \n`boat_rentals_and_leases`4457Book Stores  \n`book_stores`5942Books, Periodicals, and Newspapers  \n`books_periodicals_and_newspapers`5192Bowling Alleys  \n`bowling_alleys`7933Bus Lines  \n`bus_lines`4131Business/Secretarial Schools  \n`business_secretarial_schools`8244Buying/Shopping Services  \n`buying_shopping_services`7278Cable, Satellite, and Other Pay Television and Radio  \n`cable_satellite_and_other_pay_television_and_radio`4899Camera and Photographic Supply Stores  \n`camera_and_photographic_supply_stores`5946Candy, Nut, and Confectionery Stores  \n`candy_nut_and_confectionery_stores`5441Car Rental Agencies  \n`car_rental_agencies`7512Car Washes  \n`car_washes`7542Car and Truck Dealers (New & Used) Sales, Service, Repairs Parts and Leasing  \n`car_and_truck_dealers_new_used`5511Car and Truck Dealers (Used Only) Sales, Service, Repairs Parts and Leasing  \n`car_and_truck_dealers_used_only`5521Carpentry Services  \n`carpentry_services`1750Carpet/Upholstery Cleaning  \n`carpet_upholstery_cleaning`7217Caterers  \n`caterers`5811Charitable and Social Service Organizations - Fundraising  \n`charitable_and_social_service_organizations_fundraising`8398Chemicals and Allied Products (Not Elsewhere Classified)  \n`chemicals_and_allied_products`5169Child Care Services  \n`child_care_services`8351Childrens and Infants Wear Stores  \n`childrens_and_infants_wear_stores`5641Chiropodists, Podiatrists  \n`chiropodists_podiatrists`8049Chiropractors  \n`chiropractors`8041Cigar Stores and Stands  \n`cigar_stores_and_stands`5993Civic, Social, Fraternal Associations  \n`civic_social_fraternal_associations`8641Cleaning and Maintenance  \n`cleaning_and_maintenance`7349Clothing Rental  \n`clothing_rental`7296Colleges, Universities  \n`colleges_universities`8220Commercial Equipment (Not Elsewhere Classified)  \n`commercial_equipment`5046Commercial Footwear  \n`commercial_footwear`5139Commercial Photography, Art and Graphics  \n`commercial_photography_art_and_graphics`7333Commuter Transport, Ferries  \n`commuter_transport_and_ferries`4111Computer Network Services  \n`computer_network_services`4816Computer Programming  \n`computer_programming`7372Computer Repair  \n`computer_repair`7379Computer Software Stores  \n`computer_software_stores`5734Computers, Peripherals, and Software  \n`computers_peripherals_and_software`5045Concrete Work Services  \n`concrete_work_services`1771Construction Materials (Not Elsewhere Classified)  \n`construction_materials`5039Consulting, Public Relations  \n`consulting_public_relations`7392Correspondence Schools  \n`correspondence_schools`8241Cosmetic Stores  \n`cosmetic_stores`5977Counseling Services  \n`counseling_services`7277Country Clubs  \n`country_clubs`7997Courier Services  \n`courier_services`4215Court Costs, Including Alimony and Child Support - Courts of Law  \n`court_costs`9211Credit Reporting Agencies  \n`credit_reporting_agencies`7321Cruise Lines  \n`cruise_lines`4411Dairy Products Stores  \n`dairy_products_stores`5451Dance Hall, Studios, Schools  \n`dance_hall_studios_schools`7911Dating/Escort Services  \n`dating_escort_services`7273Dentists, Orthodontists  \n`dentists_orthodontists`8021Department Stores  \n`department_stores`5311Detective Agencies  \n`detective_agencies`7393Digital Goods Media – Books, Movies, Music  \n`digital_goods_media`5815Digital Goods – Applications (Excludes Games)  \n`digital_goods_applications`5817Digital Goods – Games  \n`digital_goods_games`5816Digital Goods – Large Digital Goods Merchant  \n`digital_goods_large_volume`5818Direct Marketing - Catalog Merchant  \n`direct_marketing_catalog_merchant`5964Direct Marketing - Combination Catalog and Retail Merchant  \n`direct_marketing_combination_catalog_and_retail_merchant`5965Direct Marketing - Inbound Telemarketing  \n`direct_marketing_inbound_telemarketing`5967Direct Marketing - Insurance Services  \n`direct_marketing_insurance_services`5960Direct Marketing - Other  \n`direct_marketing_other`5969Direct Marketing - Outbound Telemarketing  \n`direct_marketing_outbound_telemarketing`5966Direct Marketing - Subscription  \n`direct_marketing_subscription`5968Direct Marketing - Travel  \n`direct_marketing_travel`5962Discount Stores  \n`discount_stores`5310Doctors  \n`doctors`8011Door-To-Door Sales  \n`door_to_door_sales`5963Drapery, Window Covering, and Upholstery Stores  \n`drapery_window_covering_and_upholstery_stores`5714Drinking Places  \n`drinking_places`5813Drug Stores and Pharmacies  \n`drug_stores_and_pharmacies`5912Drugs, Drug Proprietaries, and Druggist Sundries  \n`drugs_drug_proprietaries_and_druggist_sundries`5122Dry Cleaners  \n`dry_cleaners`7216Durable Goods (Not Elsewhere Classified)  \n`durable_goods`5099Duty Free Stores  \n`duty_free_stores`5309Eating Places, Restaurants  \n`eating_places_restaurants`5812Educational Services  \n`educational_services`8299Electric Razor Stores  \n`electric_razor_stores`5997Electric Vehicle Charging  \n`electric_vehicle_charging`5552Electrical Parts and Equipment  \n`electrical_parts_and_equipment`5065Electrical Services  \n`electrical_services`1731Electronics Repair Shops  \n`electronics_repair_shops`7622Electronics Stores  \n`electronics_stores`5732Elementary, Secondary Schools  \n`elementary_secondary_schools`8211Emergency Services (GCAS) (Visa use only)  \n`emergency_services_gcas_visa_use_only`9702Employment/Temp Agencies  \n`employment_temp_agencies`7361Equipment Rental  \n`equipment_rental`7394Exterminating Services  \n`exterminating_services`7342Family Clothing Stores  \n`family_clothing_stores`5651Fast Food Restaurants  \n`fast_food_restaurants`5814Financial Institutions  \n`financial_institutions`6012Fines - Government Administrative Entities  \n`fines_government_administrative_entities`9222Fireplace, Fireplace Screens, and Accessories Stores  \n`fireplace_fireplace_screens_and_accessories_stores`5718Floor Covering Stores  \n`floor_covering_stores`5713Florists  \n`florists`5992Florists Supplies, Nursery Stock, and Flowers  \n`florists_supplies_nursery_stock_and_flowers`5193Freezer and Locker Meat Provisioners  \n`freezer_and_locker_meat_provisioners`5422Fuel Dealers (Non Automotive)  \n`fuel_dealers_non_automotive`5983Funeral Services, Crematories  \n`funeral_services_crematories`7261Furniture Repair, Refinishing  \n`furniture_repair_refinishing`7641Furniture, Home Furnishings, and Equipment Stores, Except Appliances  \n`furniture_home_furnishings_and_equipment_stores_except_appliances`5712Furriers and Fur Shops  \n`furriers_and_fur_shops`5681General Services  \n`general_services`1520Gift, Card, Novelty, and Souvenir Shops  \n`gift_card_novelty_and_souvenir_shops`5947Glass, Paint, and Wallpaper Stores  \n`glass_paint_and_wallpaper_stores`5231Glassware, Crystal Stores  \n`glassware_crystal_stores`5950Golf Courses - Public  \n`golf_courses_public`7992Government Licensed On-line Casinos (On-Line Gambling)(US Region only)  \n`government_licensed_online_casions_online_gambling_us_region_only`7801Government Services (Not Elsewhere Classified)  \n`government_services`9399Government-Licensed Horse/Dog Racing (US Region only)  \n`government_licensed_horse_dog_racing_us_region_only`7802Government-Owned Lotteries (Non-US region)  \n`government_owned_lotteries_non_us_region`9406Government-Owned Lotteries (US Region only)  \n`government_owned_lotteries_us_region_only`7800Grocery Stores, Supermarkets  \n`grocery_stores_supermarkets`5411Hardware Stores  \n`hardware_stores`5251Hardware, Equipment, and Supplies  \n`hardware_equipment_and_supplies`5072Health and Beauty Spas  \n`health_and_beauty_spas`7298Hearing Aids Sales and Supplies  \n`hearing_aids_sales_and_supplies`5975Heating, Plumbing, A/C  \n`heating_plumbing_a_c`1711Hobby, Toy, and Game Shops  \n`hobby_toy_and_game_shops`5945Home Supply Warehouse Stores  \n`home_supply_warehouse_stores`5200Hospitals  \n`hospitals`8062Hotels, Motels, and Resorts  \n`hotels_motels_and_resorts`7011Household Appliance Stores  \n`household_appliance_stores`5722Industrial Supplies (Not Elsewhere Classified)  \n`industrial_supplies`5085Information Retrieval Services  \n`information_retrieval_services`7375Insurance - Default  \n`insurance_default`6399Insurance Underwriting, Premiums  \n`insurance_underwriting_premiums`6300Intra-Company Purchases  \n`intra_company_purchases`9950Jewelry Stores, Watches, Clocks, and Silverware Stores  \n`jewelry_stores_watches_clocks_and_silverware_stores`5944Landscaping Services  \n`landscaping_services`0780Laundries  \n`laundries`7211Laundry, Cleaning Services  \n`laundry_cleaning_services`7210Legal Services, Attorneys  \n`legal_services_attorneys`8111Luggage and Leather Goods Stores  \n`luggage_and_leather_goods_stores`5948Lumber, Building Materials Stores  \n`lumber_building_materials_stores`5211Manual Cash Disburse  \n`manual_cash_disburse`6010Marinas, Service and Supplies  \n`marinas_service_and_supplies`4468Marketplaces  \n`marketplaces`5262Masonry, Stonework, and Plaster  \n`masonry_stonework_and_plaster`1740Massage Parlors  \n`massage_parlors`7297Medical Services  \n`medical_services`8099Medical and Dental Labs  \n`medical_and_dental_labs`8071Medical, Dental, Ophthalmic, and Hospital Equipment and Supplies  \n`medical_dental_ophthalmic_and_hospital_equipment_and_supplies`5047Membership Organizations  \n`membership_organizations`8699Mens and Boys Clothing and Accessories Stores  \n`mens_and_boys_clothing_and_accessories_stores`5611Mens, Womens Clothing Stores  \n`mens_womens_clothing_stores`5691Metal Service Centers  \n`metal_service_centers`5051Miscellaneous Apparel and Accessory Shops  \n`miscellaneous_apparel_and_accessory_shops`5699Miscellaneous Auto Dealers  \n`miscellaneous_auto_dealers`5599Miscellaneous Business Services  \n`miscellaneous_business_services`7399Miscellaneous Food Stores - Convenience Stores and Specialty Markets  \n`miscellaneous_food_stores`5499Miscellaneous General Merchandise  \n`miscellaneous_general_merchandise`5399Miscellaneous General Services  \n`miscellaneous_general_services`7299Miscellaneous Home Furnishing Specialty Stores  \n`miscellaneous_home_furnishing_specialty_stores`5719Miscellaneous Publishing and Printing  \n`miscellaneous_publishing_and_printing`2741Miscellaneous Recreation Services  \n`miscellaneous_recreation_services`7999Miscellaneous Repair Shops  \n`miscellaneous_repair_shops`7699Miscellaneous Specialty Retail  \n`miscellaneous_specialty_retail`5999Mobile Home Dealers  \n`mobile_home_dealers`5271Motion Picture Theaters  \n`motion_picture_theaters`7832Motor Freight Carriers and Trucking - Local and Long Distance, Moving and Storage Companies, and Local Delivery Services  \n`motor_freight_carriers_and_trucking`4214Motor Homes Dealers  \n`motor_homes_dealers`5592Motor Vehicle Supplies and New Parts  \n`motor_vehicle_supplies_and_new_parts`5013Motorcycle Shops and Dealers  \n`motorcycle_shops_and_dealers`5571Motorcycle Shops, Dealers  \n`motorcycle_shops_dealers`5561Music Stores-Musical Instruments, Pianos, and Sheet Music  \n`music_stores_musical_instruments_pianos_and_sheet_music`5733News Dealers and Newsstands  \n`news_dealers_and_newsstands`5994Non-FI, Money Orders  \n`non_fi_money_orders`6051Non-FI, Stored Value Card Purchase/Load  \n`non_fi_stored_value_card_purchase_load`6540Nondurable Goods (Not Elsewhere Classified)  \n`nondurable_goods`5199Nurseries, Lawn and Garden Supply Stores  \n`nurseries_lawn_and_garden_supply_stores`5261Nursing/Personal Care  \n`nursing_personal_care`8050Office and Commercial Furniture  \n`office_and_commercial_furniture`5021Opticians, Eyeglasses  \n`opticians_eyeglasses`8043Optometrists, Ophthalmologist  \n`optometrists_ophthalmologist`8042Orthopedic Goods - Prosthetic Devices  \n`orthopedic_goods_prosthetic_devices`5976Osteopaths  \n`osteopaths`8031Package Stores-Beer, Wine, and Liquor  \n`package_stores_beer_wine_and_liquor`5921Paints, Varnishes, and Supplies  \n`paints_varnishes_and_supplies`5198Parking Lots, Garages  \n`parking_lots_garages`7523Passenger Railways  \n`passenger_railways`4112Pawn Shops  \n`pawn_shops`5933Pet Shops, Pet Food, and Supplies  \n`pet_shops_pet_food_and_supplies`5995Petroleum and Petroleum Products  \n`petroleum_and_petroleum_products`5172Photo Developing  \n`photo_developing`7395Photographic Studios  \n`photographic_studios`7221Photographic, Photocopy, Microfilm Equipment, and Supplies  \n`photographic_photocopy_microfilm_equipment_and_supplies`5044Picture/Video Production  \n`picture_video_production`7829Piece Goods, Notions, and Other Dry Goods  \n`piece_goods_notions_and_other_dry_goods`5131Plumbing, Heating Equipment, and Supplies  \n`plumbing_heating_equipment_and_supplies`5074Political Organizations  \n`political_organizations`8651Postal Services - Government Only  \n`postal_services_government_only`9402Precious Stones and Metals, Watches and Jewelry  \n`precious_stones_and_metals_watches_and_jewelry`5094Professional Services  \n`professional_services`8999Public Warehousing and Storage - Farm Products, Refrigerated Goods, Household Goods, and Storage  \n`public_warehousing_and_storage`4225Quick Copy, Repro, and Blueprint  \n`quick_copy_repro_and_blueprint`7338Railroads  \n`railroads`4011Real Estate Agents and Managers - Rentals  \n`real_estate_agents_and_managers_rentals`6513Record Stores  \n`record_stores`5735Recreational Vehicle Rentals  \n`recreational_vehicle_rentals`7519Religious Goods Stores  \n`religious_goods_stores`5973Religious Organizations  \n`religious_organizations`8661Roofing/Siding, Sheet Metal  \n`roofing_siding_sheet_metal`1761Secretarial Support Services  \n`secretarial_support_services`7339Security Brokers/Dealers  \n`security_brokers_dealers`6211Service Stations  \n`service_stations`5541Sewing, Needlework, Fabric, and Piece Goods Stores  \n`sewing_needlework_fabric_and_piece_goods_stores`5949Shoe Repair/Hat Cleaning  \n`shoe_repair_hat_cleaning`7251Shoe Stores  \n`shoe_stores`5661Small Appliance Repair  \n`small_appliance_repair`7629Snowmobile Dealers  \n`snowmobile_dealers`5598Special Trade Services  \n`special_trade_services`1799Specialty Cleaning  \n`specialty_cleaning`2842Sporting Goods Stores  \n`sporting_goods_stores`5941Sporting/Recreation Camps  \n`sporting_recreation_camps`7032Sports Clubs/Fields  \n`sports_clubs_fields`7941Sports and Riding Apparel Stores  \n`sports_and_riding_apparel_stores`5655Stamp and Coin Stores  \n`stamp_and_coin_stores`5972Stationary, Office Supplies, Printing and Writing Paper  \n`stationary_office_supplies_printing_and_writing_paper`5111Stationery Stores, Office, and School Supply Stores  \n`stationery_stores_office_and_school_supply_stores`5943Swimming Pools Sales  \n`swimming_pools_sales`5996TUI Travel - Germany  \n`t_ui_travel_germany`4723Tailors, Alterations  \n`tailors_alterations`5697Tax Payments - Government Agencies  \n`tax_payments_government_agencies`9311Tax Preparation Services  \n`tax_preparation_services`7276Taxicabs/Limousines  \n`taxicabs_limousines`4121Telecommunication Equipment and Telephone Sales  \n`telecommunication_equipment_and_telephone_sales`4812Telecommunication Services  \n`telecommunication_services`4814Telegraph Services  \n`telegraph_services`4821Tent and Awning Shops  \n`tent_and_awning_shops`5998Testing Laboratories  \n`testing_laboratories`8734Theatrical Ticket Agencies  \n`theatrical_ticket_agencies`7922Timeshares  \n`timeshares`7012Tire Retreading and Repair  \n`tire_retreading_and_repair`7534Tolls/Bridge Fees  \n`tolls_bridge_fees`4784Tourist Attractions and Exhibits  \n`tourist_attractions_and_exhibits`7991Towing Services  \n`towing_services`7549Trailer Parks, Campgrounds  \n`trailer_parks_campgrounds`7033Transportation Services (Not Elsewhere Classified)  \n`transportation_services`4789Travel Agencies, Tour Operators  \n`travel_agencies_tour_operators`4722Truck Stops  \n`truck_stop_iteration`7511Truck/Utility Trailer Rentals  \n`truck_utility_trailer_rentals`7513Typesetting, Plate Making, and Related Services  \n`typesetting_plate_making_and_related_services`2791Typewriter Stores  \n`typewriter_stores`5978U.S. Federal Government Agencies or Departments  \n`u_s_federal_government_agencies_or_departments`9405Uniforms, Commercial Clothing  \n`uniforms_commercial_clothing`5137Used Merchandise and Secondhand Stores  \n`used_merchandise_and_secondhand_stores`5931Utilities  \n`utilities`4900Variety Stores  \n`variety_stores`5331Veterinary Services  \n`veterinary_services`0742Video Amusement Game Supplies  \n`video_amusement_game_supplies`7993Video Game Arcades  \n`video_game_arcades`7994Video Tape Rental Stores  \n`video_tape_rental_stores`7841Vocational/Trade Schools  \n`vocational_trade_schools`8249Watch/Jewelry Repair  \n`watch_jewelry_repair`7631Welding Repair  \n`welding_repair`7692Wholesale Clubs  \n`wholesale_clubs`5300Wig and Toupee Stores  \n`wig_and_toupee_stores`5698Wires, Money Orders  \n`wires_money_orders`4829Womens Accessory and Specialty Shops  \n`womens_accessory_and_specialty_shops`5631Womens Ready-To-Wear Stores  \n`womens_ready_to_wear_stores`5621Wrecking and Salvage Yards  \n`wrecking_and_salvage_yards`5935",
  "title": "Issuing merchant categories | Stripe Documentation",
  "description": "Learn about the available categories that businesses are grouped in.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/adding-funds-to-your-card-program",
  "markdown": "# Add funds to your card program\n\n## Learn about your options to fund card spend.\n\nIn order to power card spend, Stripe Issuing users must fund an Issuing Balance. Your default funding option is using an external bank account. Depending on your integration and region, you have the option to pull funds or to push funds from an external bank account to your Issuing balance. If you use Stripe Payments, you can fund your Issuing balance from your Stripe acquiring balance and/or from your external bank account. This page provides information to help you decide which mechanism works better for your integration.\n\n## Funding your card program![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDetermining how to fund your card program is a core part of your Stripe Issuing integration. In order to avoid insufficient funds declines when making purchases on issued cards, your account needs to have sufficient funds in the Issuing Balance. As a best practice you should:\n\n1.  Add funds to cover planned spending.\n2.  Create alerts that tell you when your Issuing balance is low.\n3.  Review funding options to efficiently move money into your Issuing balance.\n\nFor businesses on Stripe Issuing, the default way to fund your card spend is a top-up from an external bank account. Specifically, in the US, the default is a pull-funded top-up, and in the UK and Euro zone the default is a push-funded top-up.\n\n|     |     |     |     |     |\n| --- | --- | --- | --- | --- |\n| ### Funding option![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) | **Pull-funded top-ups**<br><br>_Default method in the US. Sufficient as sole funding method._ | **Push-funded top-ups**<br><br>_Default method in the UK and Euro area; optional in the US. Sufficient as sole funding method._ | **Stripe balance transfers**<br><br>_Requires Stripe Payments. Optional in the US, UK and Euro area._ | **Connect balance transfers**<br><br>_Requires Stripe Connect. Optional in the US, UK and Euro area._ |\n| ### How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) | Pull-funded top-ups fund your Issuing balance from an external bank account.<br><br>Users with a direct or Connect integration can initiate pull-funded top-ups via the [create top-up](https://docs.stripe.com/api/topups/create) endpoint or in the Dashboard. A platform’s connected accounts can initiate pull-funded top-ups via the API only. | Push-funded top-ups also fund your Issuing balance from an external bank account. However, unlike pull-funded top-ups, you don’t need to add your external bank account to Stripe.<br><br>Instead, push-funded top-ups use an account or routing number to push funds to your Issuing balance via: Same-day wire or ACH credit transfer (US) BACS / FPS (UK) Sepa Credit Transfer (Euro area)<br><br>Routing information can be found via the [Dashboard](https://docs.stripe.com/issuing/funding/balance?issuing-currency=usd#access-account-information-for-push-funding-in-the-dashboard) or by making a `create` or `list` call to the [Funding Instruction](https://docs.stripe.com/api/issuing/funding_instructions) endpoint. However, connected accounts can only view routing information by calling [List Funding Instructions](https://docs.stripe.com/api/issuing/funding_instructions/list). | Balance transfers move funds to your Issuing balance from your Stripe balance, which contains your payments proceeds.<br><br>Users with a direct or Connect integration can initiate Stripe balance transfers via the balance transfer API endpoint or in the Dashboard. A platform’s connected accounts can only initiate Stripe balance transfers to Issuing balance via the API.<br><br>If you need to pay out excess funds in the Issuing balance, you can initiate a [Payout](https://docs.stripe.com/api/payouts/create). | Transfers funds to or from the Issuing balance of a connected account from the platform’s Issuing balance. |\n| ### Fund origination![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) | External bank account | External bank account | Stripe balance (Payments) | Platform Issuing balance (Connect) |\n| ### Settlement time![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) | Funds can take up to 5 business days to become available. Expedited top-ups may be available. | Funding speed depends on the rails that the funds are pushed over. There may be additional delays for your first few top-ups. | Funds settle instantly in the US and within one business day in the UK and Euro area. | Funds settle instantly in all available regions. |\n| ### Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) | Available in the US on Direct and Connect integrations.<br><br>See documentation for pull-funded top-ups for [Connect](https://docs.stripe.com/issuing/connect/funding?issuing-funding-type=us-pull-funding) and [Direct](https://docs.stripe.com/issuing/funding/balance?push-pull-preference=pull) integrations.<br><br>Not currently available in the UK or Euro area. | Available in the US in the APIbeta and Dashboard. See documentation for push-funded top-ups for [Connect](https://docs.stripe.com/issuing/connect/funding?issuing-funding-type=us-push-funding) or [Direct](https://docs.stripe.com/issuing/funding/balance?push-pull-preference=push) integrations.<br><br>Available in the UK and Euro area. See the documentation for push-funded top-ups for Connect ([UK](https://docs.stripe.com/issuing/connect/funding?issuing-funding-type=uk-push-funding), [Euro area](https://docs.stripe.com/issuing/connect/funding?issuing-funding-type=euro-push-funding)) and [Direct](https://docs.stripe.com/issuing/funding/balance?push-pull-preference=push) integrations. | Available in the USbeta, UKbeta, and Euro areabeta. See documentation for [Connect](https://docs.stripe.com/issuing/connect/funding?issuing-funding-type=us-pull-funding) and [Direct](https://docs.stripe.com/issuing/funding/balance?push-pull-preference) integrations. | Available in the USbeta, UKbeta, and Euro areabeta. See documentation for [Connect](https://docs.stripe.com/issuing/connect/funding?issuing-funding-type=us-pull-funding) integrations. |\n| ### Best for![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) | Pull-funded top-ups are best for users who want to build their own logic around when they want to top up. For example, you can build a flow to use the Balances API to view your current balances and automatically trigger a pull-funded top-up if your Issuing balance goes below a certain threshold.<br><br>For US users, this is the easiest funding method to start with, especially when using the Dashboard. | Push-funded top-ups are best for users focused on capital efficiency, since this funding method allows platforms to fund their Issuing balance on the same day. Platforms can then hold more funds in an interest-bearing account outside of Stripe and quickly move those funds into their Issuing balance as needed.<br><br>Push-funded top-ups are also good for users who have originating banks with APIs that support automated integrations. Some users also prefer not to connect an external bank account to their Issuing balance. | Balance transfers are best for users that also use Stripe to process their payments since it allows the user to use their acquiring balance to fund their Issuing balance. | Platform Issuing balance transfers are best for users that have a Connect integration and plan to programmatically fund connected accounts, since this funding mechanism allows the platform to instantly pre-fund any connected account’s Issuing balance to the right level to avoid transaction declines. |\n\n## Using funding methods in practice![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBusinesses on Stripe Issuing can operate a card program with the default funding method and nothing more. But if your business is integrated with additional Stripe products such as Connect or Payments, you can benefit by using multiple methods.\n\nFor example, suppose you are an e-commerce platform providing an expense management card to each of the online shops on your platform. In this case, build a [Connect integration](https://docs.stripe.com/issuing/connect) where each shop on your platform represents a connected account. Shops on your platform can accept payments and fund cards by transferring balances, all on Stripe. If your merchants also collect funds from users outside of Stripe, they can use push-funded top-ups from an external bank account. When you’re ready, allocate collected funds by transferring funds from your platform Issuing balance to the Issuing balance of specific connected accounts.\n\nTaking a US platform as an example, your funding setup could look like this:\n\nYou could also enable your shops, represented as connected accounts, to directly accept payments and move funds into their account to pay for their expenses.",
  "title": "Add funds to your card program | Stripe Documentation",
  "description": "Learn about your options to fund card spend.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/purchases/atm-usage",
  "markdown": "# Use cards at automated teller machines (ATMs)\n\n## Learn how you can use your Stripe Issuing cards at ATMs.\n\nStripe allows you to use your cards at ATMs for cash withdrawals if you enable the feature for your account, and if you’ve set up valid PINs for them.\n\n## Enable ATM withdrawals![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nATM withdrawals aren’t enabled by default, so you need to request approval for your use case [through support](https://support.stripe.com/?contact=true). In addition, make sure all your relevant cards have PINs set up by following our [PIN management guide](https://docs.stripe.com/issuing/cards/pin-management).\n\n## Treatment of ATM transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Issuing treats ATM withdrawals as standard transactions, but a few characteristics of the authorization signal that it’s an ATM withdrawal:\n\n*   The [merchant category code](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-merchant_data-category_code) is set to 6011—`Automated Cash Disburse`.\n*   An ATM [fee value](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-amount_details-atm_fee) might be present.\n*   The [PIN check](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-verification_data-pin_check) is a `match`.\n\nYou can approve or decline them using the same [webhook integration](https://docs.stripe.com/issuing/controls/real-time-authorizations) as other authorizations.\n\n## Restrictions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Limits**: ATM withdrawals are subject to a daily maximum limit. Your support representative can share your limit with you and work to increase it if it’s not sufficient for your use case.\n*   **Cash Deposits**: Stripe-issued cards aren’t enrolled in any ATM cash deposit programs and don’t have the ability to accept cash deposits. Cash deposit-enabled ATMs won’t trigger prompts for deposits when a Stripe-issued card is used.\n\n## Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsers in the US can [contact support](https://support.stripe.com/?contact=true) to request ATM cash withdrawals on issued cards. Withdrawals are not yet available in the UK or EU, but users can [contact support](https://support.stripe.com/?contact=true) for more information about future availability in these regions.\n\n## Fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe does not assess any fees of its own for ATM withdrawals, but ATM operators often do. These fees are generally:\n\n*   **ATM use surcharge**: Added to the total transaction amount (this is the [atm fee](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-amount_details-atm_fee) amount a cardholder sees at the ATM.)\n    \n*   **Dynamic Currency Conversion (DCC)**: When the cardholder is given the option between a local currency and the card’s default currency (for example, using a US issued card in the EU), ATMs generally apply a markup on conversion rates when a cardholder picks the card’s default currency. While this isn’t an explicit fee, the conversion rates functionally behave as a tax on ATM transactions.\n    \n\nNeither the ATM provider nor Stripe apply any cash advance fees or annual percentage rate (APR) to an ATM withdrawal.\n\nDifferent markets have different ATM rules and fee structures that influence the frequency and intensity of the fees charged, but the way we describe the fees above generally applies regardless of the country. If an ATM charges a fee to a cardholder, we’ll pass it on as part of the amount for a given authorization. Otherwise, cardholders and issuing users won’t see any impact.",
  "title": "Use cards at automated teller machines (ATMs) | Stripe Documentation",
  "description": "Learn how you can use your Stripe Issuing cards at ATMs.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/manage-fraud",
  "markdown": "# Manage fraud with Stripe Issuing controls and tools\n\n## Understand how fraud can impact your issuing program and the steps you can take to combat it.\n\nAs a payment facilitation product, Issuing inherently incurs potential fraud risks and liabilities for both businesses and issuers. Because of this, you need to understand your responsibility for losses and how to best manage this risk as part of using our platform. This document provides guidance on the types of fraud, identifies who’s liable when fraud occurs, and outlines the resources available from Stripe to assist you in monitoring for and preventing fraud.\n\n## Fraud in Issuing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments has three primary types of fraud:\n\n*   **Transaction fraud**: The unauthorized use of a payment card to fraudulently obtain money or property\n*   **Business fraud**: A person creates a fraudulent account (often with a stolen identity) to commit fraud.\n*   **Account takeover (ATO) fraud**: A legitimate account owner’s login is compromised by an unauthorized third party who takes actions on their account.\n\nWhile business fraud and ATO fraud can occur in Issuing, transaction fraud often poses a greater risk. This guide focuses on transaction fraud and the tools available to help you combat it.\n\n## Transaction fraud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOn Stripe Issuing, we see transaction fraud in the form of unauthorized charges on a Stripe-issued card. Transaction fraud can occur at any point in a cardholder’s lifecycle. Purchases at legitimate businesses are also subject to transaction fraud. An issued card can be compromised by:\n\n*   Physical theft\n*   Being lost by the cardholder\n*   Compromised credentials through tactics such as:\n    *   Phishing\n    *   Spyware\n    *   Non-secure checkouts\n    *   External breaches\n\n### Loss liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLoss liability stems from an issue with a transaction that results in a financial loss for one party. Liability usually arises from either transaction fraud or a business not fulfilling its obligations on a purchase.\n\nLoss liability is assigned to either the merchant (the provider of the service or goods being purchased), you as the Stripe Issuing user, or (in rare cases) the cardholder. This means that when loss liability is allocated to the “issuer,” you’re accountable unless an exception applies.\n\nStripe Issuing allows you to design your fraud monitoring system, and make your own business logic and transaction decisions. Although Stripe might offer assistance with transaction fraud prevention, you’re still responsible for all losses where the Issuer is deemed liable. So you need to build sufficient controls to monitor, manage, and prevent fraud.\n\n### Liability assignment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn many cases, the business owns liability for fraudulent transactions. There are, however, a few _factors that might result in the liability shifting to you_, the Stripe Issuing user.\n\n*   **Card-present Transactions** If the card or a mobile wallet such as Apple Pay and Google Pay is present for the transaction, the issuer is generally liable for fraud, with a few exceptions:\n    \n*   Cards and wallets need to be electronically read wherever available, that is, by using the contact or contactless chip interface or swiping the magnetic stripe. For manually entered card numbers, such as with mail order or telephone orders, _liability is with the business_.\n    \n*   If a chip-enabled card is used at a terminal that only supports magnetic stripe payments, liability shifts to the merchant.\n    \n    *   However, if the terminal used by the merchant generally supports chip transactions, but the magnetic stripe is used for a given transaction, _liability remains with you, as the issuing user_.\n*   **Card-not-present transactions** If the card is _not_ present for the transaction (that is, online commerce), _liability is determined primarily by 3DS_.\n    \n\n#### Note\n\n**_3DS_** [3DS](https://docs.stripe.com/issuing/3d-secure) is an additional layer of authentication that a merchant can request on authorizations it believes to be high risk (and thus likely to result in the issuer being responsible for fraud liability in the event of a dispute). This additional layer of verification (usually through a form of multi-factor authentication such as a one-time passcode) triggers a “liability shift” where fraud liability shifts from the merchant to the issuer, regardless of the circumstance.\n\nWhen 3DS is requested by a business for a specific card authorization, the cardholder might need to complete additional authentication to complete the transaction. However, whether the authentication is triggered depends on whether you’ve enrolled the card in 3DS and whether there are any exemptions or “frictionless” flows, which automatically bypass any configured 3DS requests. 3DS enrollment isn’t required in the US and is turned off by default; accordingly, US issuers don’t consistently enroll their cards because they don’t want any unnecessary friction for their cardholders. In the context of Stripe Issuing, when a merchant triggers 3DS, fraud liability usually automatically shifts to you, as the Stripe Issuing user, regardless of whether you have 3DS enabled on your cards. Accordingly, having 3DS enabled helps you reduce the risk of financial liability for fraudulent transactions. To learn more, you can [read about 3DS for Stripe Issuing](https://docs.stripe.com/issuing/3d-secure).\n\n### Digital Wallet Usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegardless of 3DS considerations, the use of a Stripe Issuing card in an Apple Pay or Google Pay wallet for a card-not-present transaction also _shifts liability to the issuer_.\n\nGiven the risk that liability transaction fraud can create, you need to take proactive measures to monitor for and prevent it. The following are controls and tools that you can add to your Stripe Issuing program. We recommend using as many controls and tools as possible to limit your program’s transaction fraud risk.\n\n| Control/tool | Benefits | Drawbacks |\n| --- | --- | --- |\n| [3D Secure](https://docs.stripe.com/issuing/3d-secure) (3DS) | Reduces loss liability on certain transactions by introducing an additional layer of cardholder verification. | Cardholders experience an additional verification step for some transactions. |\n| [Spending controls](https://docs.stripe.com/issuing/controls/spending-controls) | Sets rules on cards and cardholders to control spending. | Limited capability to apply a complex set of rules. |\n| [Real-time webhook](https://docs.stripe.com/issuing/controls/real-time-authorizations) | Approves or rejects an authorization decision in real-time based on all data available at the point of sale. | Requires integration into the Stripe webhook. |\n| Stripe Defense Layer beta | Automatically blocks high-risk transactions based on Stripe’s own risk modeling | Some legitimate transactions might be declined. |\n| [Verification Data](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-verification_data) | Declines authorizations when the CVV or expiration date don’t match on the authorization. | Custom configuration isn’t available. |\n| [Token Management](https://docs.stripe.com/issuing/controls/token-management) | Allows you to suspend or deactivate digital wallet tokens associated with fraudulent activity. | Requires integration into the Tokens API. |\n| [Card management](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-status) | Allows you to suspend or deactivate physical or virtual cards associated with fraudulent activity. | None. |\n| [Disputes](https://docs.stripe.com/issuing/purchases/disputes) | Disputes can help you recover funds lost from unauthorized activity. | Disputes aren’t guaranteed to result in funds recovery and may take time to resolve. |\n\n### Proactive fraud protection controls![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### KYC/KYB![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nKnow Your Customer (KYC) or Know Your Business (KYB) is the mandatory process of collecting and verifying information about the company or individual who will be using the cards. Information includes the legal entity and personal information about the representative of the business, as well as those who own or control the business.\n\nThe easiest way to manage KYC/KYB is to integrate [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding), which lets Stripe take care of the complexity around the basic obligations.\n\n#### Spending controls![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSpending controls allow you to block specific countries or merchant categories (for example, casinos), and set spending limits per authorization (such as 100 USD) or per month (such as 3000 USD per month). You can apply these controls to either individual cards or cardholders. They’re most effective when the expected spending pattern is known.\n\nWe recommend implementing a combination of spending limits and merchant category controls to help limit your exposure in case of unauthorized use. For more information, see [Spending controls](https://docs.stripe.com/issuing/controls/spending-controls).\n\n#### 3D Secure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n3D Secure (3DS) is an additional layer of authentication used by merchants to make sure an online purchase is from a legitimate cardholder. 3DS is used for online transactions and only works if the merchant requests it and you have it enabled for your Issuing program. The additional 3DS step occurs at checkout where the cardholder is shown an authentication page and is prompted to enter a verification code sent to their phone or email.\n\nWe recommend enabling 3DS to reduce fraud loss exposure for online transactions. Learn more about [3DS and how to enable it](https://docs.stripe.com/issuing/3d-secure).\n\n### Real-time fraud protection controls![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Real-time webhook![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can approve or decline authorization requests in real-time based on the data available to you at the point of authorization. This gives you control over authorization outcomes and enables you to implement your own fraud-prevention logic. Use Stripe’s real-time webhook to target a specific fraud pattern while minimizing the impact on other spending behaviors. For example, you can use authorization data on the location of the authorization to block specific geographies, currencies, and merchants. Learn more about the [real-time webhook and how it works](https://docs.stripe.com/issuing/controls/real-time-authorizations).\n\n#### Stripe Defense Layer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, Stripe offers several automatic controls to help reduce your fraud exposure without changing loss liability. Among other considerations, Stripe attempts to block authorizations that:\n\n*   Appear to be card testing.\n*   We estimate to be extremely high risk based on our own risk modeling.\n\nThese defenses usually impact a very small subset (less than 0.5%) of authorizations, are purely additive, and shouldn’t be considered a substitute for your own risk management program. Ultimately, you need to identify the ideal balance between user experience and risk management that works best for your program’s specific characteristics. The Stripe Defense Layer doesn’t affect liability.\n\n#### Fraud challenges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFraud Challenges provide an additional layer of verification for users to confirm purchases via SMS. This helps minimize accidental blocks of legitimate purchases that may initially appear high-risk. After confirming the purchase, the cardholder can retry the transaction. For more information, see [Fraud challenges](https://docs.stripe.com/issuing/controls/fraud-challenges).\n\nAuthorization Signals allow you to make real-time decisions to reject or approve an authorization, based on:\n\n*   [Verification Data](https://docs.stripe.com/issuing/controls/advanced-fraud-tools/authorization-signals#verification-data): Whether card values provided at checkout match with the ones on file\n*   [Fraud Disputability Assessment](https://docs.stripe.com/issuing/controls/advanced-fraud-tools/authorization-signals#fraud-disputability-assessment): The likelihood of whether an authorization can be disputed in the event of fraud\n*   [High-Risk Merchant Alerts](https://docs.stripe.com/issuing/controls/advanced-fraud-tools/authorization-signals#high-risk-merchant-alerts): The risk level of a merchant based on dispute activity\n*   Card testing risk: The likelihood of a card testing attack\n\nTo learn more, see [authorization signals](https://docs.stripe.com/issuing/controls/advanced-fraud-tools/authorization-signals).\n\n### Post-fraud transaction tools![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Token management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nManage digital wallet tokens through the API to quickly shut down digital wallet cards that have been associated with fraudulent activity. Read more about [enabling token management and the API](https://docs.stripe.com/issuing/controls/token-management).\n\n#### Card management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you or your cardholder suspect unauthorized activity, you can temporarily deactivate a card with the Dashboard or API to block further unauthorized use while you investigate. If the activity was authorized, you can preserve the card’s credentials and reactivate it. Whenever you confirm unauthorized use, immediately cancel the card. Read additional details on [card management and how to use the API](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-status).\n\n#### Disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen fraudulent transactions occur, you can file disputes with Visa or Mastercard through the Dashboard or API for those transactions with the reason ‘Fraudulent’. In some cases, depending on what verification is conducted at the point of sale, the merchant might be liable for the fraudulent transaction. Read more about [handling disputes](https://docs.stripe.com/issuing/purchases/disputes).\n\n## User-facing controls & education![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can adjust various aspects of Stripe’s fraud controls, and educate your cardholders to reduce how often they are needed.\n\n### User configurations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDepending on your use case and workflow, you can request adjustments to Stripe’s default controls, such as:\n\n*   Relaxing 3DS requirements\n*   Increasing transaction amount caps\n\nWhile Stripe can accommodate these requests on a case-by-case basis, you’re ultimately responsible for any increased risk or loss liability that results from such requests.\n\n### Educate your cardholders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEducate your cardholders about how to keep their card information safe. Teach them to pay close attention to the activity on their accounts to increase the likelihood of them—and you—catching fraudulent activity early. Make your cardholders aware of the following preventative measures:\n\n*   **Check for card skimmers in physical stores:** Verify no cameras or skimming equipment are present on the payment terminal. Check for anything inserted in, or attached to, the card reader, ports, display, or keypad.\n*   **Transact at trustworthy businesses:** Only provide your card information to merchants that you’re familiar with and trust.\n*   **Cancel a card as soon as it’s lost or stolen:** Take immediate action to prevent unauthorized use before a fraudulent actor can obtain your card credentials. To continue spending, create a new card after canceling the lost or stolen one.\n\n## Monitor metrics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following are metrics we recommend monitoring to help identify and measure fraud on your Issuing-enabled accounts.\n\n### Leading metrics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLeading metrics are metrics that can help you identify potential fraud in its early stages.\n\n*   Authorization declines due to incorrect verification data (CVC2, expiry date), over time.\n*   Authorization rate, over time.\n*   Authorizations outside of geographic footprint, over time.\n*   Authorizations by acquiring merchant country, over time.\n*   Authorizations by merchant category code, over time.\n*   [Force captures](https://docs.stripe.com/issuing/purchases/transactions?issuing-capture-type=force_capture), over time.\n\n### Lagging metrics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLagging metrics are metrics that can help you assess how much fraudulent activity has impacted your Issuing program:\n\n*   Percentage of total spend that has been disputed for fraud, over time.\n*   Dispute win-loss rate, over time.\n*   Absolute dispute losses, over time.\n*   Acquiring merchants with the highest percentage of transactions disputed.\n\n## Managing fraud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe potential for fraud in Issuing necessitates thorough monitoring and proactive fraud management. By understanding your roles and responsibilities and effectively leveraging Stripe’s resources, you can reduce these risks to levels that you deem appropriate for your business.\n\nKeep the following in mind as you decide on your approach to fraud management:\n\n**How much fraud you should expect to see**: The average volume of monthly fraud varies significantly based on industry, geography, business model, and so on. Most users file fraud disputes on 0.1% or less of their transaction volume, but it can vary greatly, depending on your issuing activity. It’s unusual to have no fraud whatsoever, except in rare business models or if you have low volumes.\n\n**Definition of a dispute**: A dispute occurs when an account holder challenges a charge on their card statement with their card issuer. The reason for the dispute varies—the account holder might not recognize the charge, perceive it as fraudulent, or feel dissatisfied with the goods or services they purchased. Disputes can help issuers recover funds in the event of fraudulent activity.\n\n**Additional Stripe fraud signals and controls**: Stripe Issuing currently offers an Enhanced Risk Suite beta for API-centric users that are interested in using advanced signals to help identify and prevent transaction fraud. If you’d like to learn more, please [contact support](mailto:issuing-beta-feedback@stripe.com).",
  "title": "Manage fraud with Stripe Issuing controls and tools | Stripe Documentation",
  "description": "Understand how fraud can impact your issuing program and the steps you can take to combat it.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/connect",
  "markdown": "# Set up an Issuing and Connect integration\n\n## Learn how to issue cards on connected accounts.\n\n[Stripe Connect](https://docs.stripe.com/connect \"Connect\") provides Stripe Issuing platforms with foundational infrastructure to manage funds flows and compliance requirements. In a Connect integration, the platform account makes API calls on behalf of the connected accounts.\n\n[](#when-to-use-connect)\n\nIf you need to issue cards for users that aren’t directly employed by your business, set up Stripe Connect for your Issuing integration. For example, a business building a new expense management product for small businesses can integrate with Connect. Each small business that uses the expense management product is set up as a connected account.\n\nAfter you set up and onboard connected accounts, your customers can support their card spend by funding their Issuing balance from their external bank account (or, in certain cases, your customers’ spend can be supported by your platform Issuing balance). Your customers can also create cardholders and cards and set up spending controls.\n\n[](#create-connected-accounts-with-issuing-capabilities)\n\nTo issue cards, each business entity must use a connected account. Issuing only supports connected accounts that don’t use a Stripe-hosted Dashboard, and where your platform is responsible for requirements collection and loss liability, also known as a Custom connected account. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Issuing. All accounts must request the `card_issuing` and `transfers` [account capabilities](https://docs.stripe.com/connect/account-capabilities).\n\n#### Beta\n\n#### Create an account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate a new connected account [through the Dashboard](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#creating-accounts) or using the API with [create Account](https://docs.stripe.com/api/accounts/create).\n\n#### Start with test mode accounts\n\nTest mode connected accounts can’t receive or spend real money and can’t be used in live mode, but they’re identical in configuration and functionality.\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d country=US \\  -d \"capabilities[transfers][requested]\"=true \\  -d \"capabilities[card_issuing][requested]\"=true \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application`\n\n#### Enable Issuing on existing connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your platform already has a Connect integration with connected accounts, you can request Issuing on those accounts [through the Dashboard](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#updating-capabilities) or through the API.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"capabilities[card_issuing][requested]\"=true`\n\n#### Issuing and Treasury accounts\n\nIf your platform already has [connected accounts](https://docs.stripe.com/connect/accounts), make sure they have a supported configuration for Issuing or Treasury. Issuing only supports connected accounts that don’t use a Stripe-hosted Dashboard, and where your platform is responsible for requirements collection and loss liability, also known as a Custom connected account. If this isn’t the case, you must create new accounts to use Issuing or Treasury. You can see your existing account’s configuration on the [Connect accounts](https://dashboard.stripe.com/connect/accounts/overview) page in your Dashboard.\n\nYou can also use the API to retrieve the account information and verify that the `capabilities` property has the issuing capability active:\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\": \"acct_1234\",       \"object\": \"account\",     ...       \"capabilities\": {         \"card_issuing\": \"active\",         \"transfers\": \"active\",       },     ...       \"controller\": {         \"stripe_dashboard\": {           \"type\": \"none\"         },         \"fees\": {           \"payer\": \"application\"         },         \"losses\": {           \"payments\": \"application\"         },         \"is_controller\": true,         \"type\": \"application\",         \"requirement_collection\": \"application\"       },     },   ...   ] }`\n\n[](#onboard-connected-accounts)\n\nAfter you create a connected account, you need to provide more information about the account holder. The [capability object](https://docs.stripe.com/api/capabilities/object) has a `requirements` hash that contains `currently_due` [identity verification requirements](https://docs.stripe.com/connect/handling-api-verification). The user must provide the details itemized in the `requirements` hash to enable Issuing capabilities.\n\nIf you create an Account object in test mode and want to bypass onboarding requirements to test functionality, use the [Accounts update API](https://docs.stripe.com/api/accounts/update) to provide [test values](https://docs.stripe.com/connect/testing-verification) that fulfill all the requirements.\n\nDepending on the [business type](https://docs.stripe.com/connect/identity-verification#business-type), the user provides details about the individual, company, non-profit organization, or government entity (Stripe Treasury doesn’t support government entities).\n\nChoose one of the following onboarding options:\n\n[Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding) is a web form hosted by Stripe with your brand’s name, color, and icon. Stripe-hosted onboarding uses the [Accounts API](https://docs.stripe.com/api/accounts) to read the requirements and generate an onboarding form with robust data validation and is localized for all Stripe-supported countries.\n\nBefore using Connect Onboarding, you must provide the name, color, and icon of your brand in the Branding section of your [Connect settings page](https://dashboard.stripe.com/test/settings/connect).\n\nYou can use hosted onboarding to allow connected accounts to link an `external_account` (which is required for payouts) by enabling it through your [Connect Onboarding settings](https://dashboard.stripe.com/settings/connect).\n\nTo create an onboarding link for the connected account, use the [Account Links API](https://docs.stripe.com/api/account_links/create).\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account={{CONNECTED_ACCOUNT_ID}} \\   --data-urlencode refresh_url=\"https://example.com/reauth\" \\   --data-urlencode return_url=\"https://example.com/return\" \\   -d type=account_onboarding`\n\n#### Caution\n\nFor security reasons, don’t email, text, or send account link URLs directly to your connected account. We recommend that you distribute the account link URL from within your platform’s application, where their account is authenticated.\n\nThe response you receive includes the `url` parameter containing the link for your connected account to onboard to your platform.\n\n## Collect and verify required information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you create a connected account and request capabilities, the response returns a list of all required information. To see the requirements specific to a capability, [retrieve the account capability](https://docs.stripe.com/api/capabilities/retrieve) and look at `requirements.past_due`.\n\n#### Note\n\nHere are the requirements to activate the `card_issuing` capability:\n\n| FIELD | PARAMETER | ADDITIONAL NOTES |\n| --- | --- | --- |\n| Legal name | `company.name` |     |\n| Business address | `company.address.*` | The address can’t be a P.O. box, a Highway Contract (HC) box, or a private mailbox. It must be in the US for US-based accounts, UK for UK-based accounts, or a European country for Europe-based accounts. |\n| Business type | `business_type` | The business type can be company, individual, or non-profit. |\n| Company tax ID | `company.tax_id` |     |\n| Phone | `company.phone` |     |\n| Merchant category code | `business_profile.mcc` |     |\n| URL | `business_profile.url` | If the user doesn’t have a URL, you can provide the `business_profile.product_description` instead. |\n| Estimated worker count | `business_profile.estimated_worker_count` | An estimated upper bound of your workers (employees, contractors, vendors, and so on) currently working for the business. |\n| Annual revenue | `business_profile.annual_revenue` | The user’s gross annual revenue for its preceding fiscal year. |\n| Terms of service | `settings.card_issuing.tos_acceptance.ip` `settings.card_issuing.tos_acceptance.date` | Record the connected accounts [accepting the Issuing terms of service](https://docs.stripe.com/issuing/connect/tos_acceptance). |\n\n#### Representatives and beneficial owners![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCompanies and non-profit organizations require additional onboarding information for representatives (that is, directors \\[`relationship.director`\\] and executives \\[`relationship.executive`\\]), and any beneficial owner that owns more than 25% of the company (`relationship.owner`). Each connected account must have at least one representative, who’s usually an executive or director, depending on where the account is located. They must be able to certify that the information provided is correct. Beneficial owners aren’t required.\n\nLearn more about [beneficial owners, representatives, and directors](https://support.stripe.com/questions/beneficial-owner-and-director-definitions).\n\n| FIELD | PARAMETER | ADDITIONAL NOTES |\n| --- | --- | --- |\n| Legal name | `first_name`, `last_name` |     |\n| Date of birth | `dob.day`, `dob.month`, `dob.year` |     |\n| Residential address | `address.*` | The address can’t be a P.O. box, a Highway Contract (HC) box, or a private mailbox. It must be in the US for US-based accounts. |\n| Email | `email` |     |\n| Title | `title` | Examples for the title include CEO or Director. |\n| Phone | `phone` |     |\n| US Tax ID or last 4 digits of SSN | `id_number` | Accounts of US-based platforms must provide a social security number, and non-US tax ID numbers or ID documents aren’t accepted as a substitute. You can provide either the full nine-digit social security number (`id_number`) or the last four digits (`ssn_last_4`) initially. If verification with the last four digits is unsuccessful, then the full nine-digit number is required. |\n| ID document scan | `verification.document` | Provide an identity document if the full nine-digit social security number can’t be verified. See the [acceptable verification documents by country](https://docs.stripe.com/connect/handling-api-verification#acceptable-verification-documents). |\n\n[\n\n## Handle new requirements coming due and changes to the capability status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-new-requirements-changes)\n\nSometimes after providing all required information, an account might need to provide additional details or documents. These new requirements appear in the [requirements.eventually\\_due](https://docs.stripe.com/api/accounts/object#account_object-requirements-eventually_due) array or in [requirements.currently\\_due](https://docs.stripe.com/api/accounts/object#account_object-requirements-currently_due). Set up your integration to listen for changes to account requirements by [using webhooks](https://docs.stripe.com/connect/handling-api-verification#verification-process).\n\nIf the capability is already `active` and the account doesn’t satisfy new requirements due on that capability before the [current deadline](https://docs.stripe.com/api/accounts/object#account_object-requirements-current_deadline), the capability becomes `inactive` until the requirements are satisfied.\n\n### Document uploads![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf an account’s information can’t be verified, Stripe might require a document to verify the identity of a person (for example, a Passport) or to verify information about the legal entity (for example, a letter from the tax authority). To satisfy document requirements, platforms can send the user to Connect Onboarding (where they’ll be [prompted to upload the document](https://docs.stripe.com/connect/custom/hosted-onboarding#new-reqs-due)), or collect the document from the account in another interface and [upload it through the API](https://docs.stripe.com/connect/handling-api-verification#upload-a-file).\n\n### Failure to verify identity within 29 days of the initial application ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter an account submits all the [required information](https://docs.stripe.com/issuing/connect#required-verification-information) for Issuing and accepts the Issuing terms of service, Stripe considers the application complete. If we can’t verify an account’s information, the capability remains `inactive` until the account provides additional information or uploads a document.\n\nIf the account remains `inactive` 29 days after completing the application, you must send an email notice to the account informing them that we couldn’t verify their identity ([see the template](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices?issuing-notices-sender=stripe#spend-card-application-rejected-for-failure-to-verify-identity)).\n\nStripe monitors for completed applications with unverified identities, and takes the following action after 29 days in live mode and after 1 hour in [test mode](https://docs.stripe.com/connect/testing):\n\n*   [Generates an account notice](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices?issuing-notices-sender=stripe#events-that-require-a-customer-notice)\n*   Clears the [Issuing terms of service acceptance hash](https://docs.stripe.com/api/accounts/object#account_object-settings-card_issuing-tos_acceptance) so terms acceptance becomes a `currently_due` requirement\n\nYou can submit a new application at any time by updating the business information and recording a new acceptance of Issuing’s terms.\n\nStripe recommends that you present the terms of service as the last step of onboarding, which allows you to track the timing of application completion by referring to the term’s [acceptance date](https://docs.stripe.com/api/accounts/object#account_object-settings-card_issuing-tos_acceptance-date).\n\n### Terms of service violations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf Stripe identifies a connect account that has violated Stripe’s terms of service, Stripe sets the Issuing capability on the account to `inactive`, deactivates any cards, and notifies the account (see [the email template](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices?issuing-notices-sender=stripe#account-closed-by-stripe-for-terms-of-service-violation)). This might happen when an account’s cards are used in relation to [prohibited or restricted businesses](https://stripe.com/legal/restricted-businesses), such as illegal activities, gambling, firearms, adult content, or cryptocurrencies, or in relation to [prohibited activities for Issuing](https://stripe.com/legal/restricted-businesses#additional-product-specific-prohibitions) , such as consumer spending, primarily international use, lending, or other abusive or noncompliant use.\n\n### Accounts inactive for more than 395 days![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe disables issuing on accounts that haven’t completed any card transactions in the past 13 months (395 days). For accounts with additional capabilities, Stripe only disables Issuing if there have also been no payments or Treasury transactions in the prior 395 days, and the Treasury balance is 9.99 USD or less. When Issuing is disabled for inactivity, the Connect account’s card\\_issuing capability status changes to `inactive` and the capability requirements show a [disabled\\_reason](https://docs.stripe.com/api/capabilities/object#capability_object-requirements-disabled_reason) of `rejected.inactivity`. Learn more about [managing inactive accounts](https://support.stripe.com/questions/issuing-managing-inactive-connect-accounts) with Issuing.\n\n[\n\n## Create cardholders and cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-cardholders-and-cards)\n\nA Cardholder object represents an individual or business entity that you can issue cards to. Each cardholder needs to be associated with a connected account to be issued a virtual or physical card. One connected account can have many cardholders.\n\nLearn more about [Cardholders and cards](https://docs.stripe.com/issuing/connect/cardholders-and-cards).\n\n[](#Add-funds)\n\nThe Issuing balance is separate from the connected account’s main balance. When issued cards are used for transactions, they draw from the Issuing balance.\n\nBefore an issued card can be used for transactions, you must first allocate funds to the connected account’s [Issuing balance](https://docs.stripe.com/issuing/funding/balance) associated with the card. An Issuing Balance holds funds reserved for the card and is safely separated from earnings, [payouts](https://docs.stripe.com/payouts), and funds from other Stripe products. Learn how to [fund connected accounts](https://docs.stripe.com/issuing/connect/funding) for Issuing.\n\n[](#using-dashboard-issuing)\n\nView the connected accounts on your platform and create new accounts from the [Connect page](https://dashboard.stripe.com/connect/accounts/overview) in the Dashboard. An account might appear as `restricted` in the Dashboard if requirements are `past_due` for any of the requested capabilities (including `transfers`). You can ignore this if `card_issuing` is active.\n\nYou can also do the following from the dashboard:\n\n*   View account activity for a selected account.\n*   Edit business and personal details for a selected account.\n*   Create cardholders, cards, or test authorizations on the account. To do so, click the overflow menu (), select **View Dashboard as (account name)**, and then navigate to **Card issuing**.\n*   View program details for a selected account. Follow the above steps to **View Dashboard as (account name)**, then navigate to **Settings**, the **Issuing** section, and click [Card programs](https://dashboard.stripe.com/settings/issuing/card-programs).\n\nYou can also access the Issuing page for a connected account directly by navigating to this URL and replacing `{{CONNECT_ACCOUNT_ID}}` with the appropriate value: `https://dashboard.stripe.com/{{CONNECT_ACCOUNT_ID}}/issuing/overview`\n\nAs the platform, only you can view the Dashboard on behalf of your connected accounts. Your connected accounts won’t have a Stripe username or password, or access to the Dashboard.",
  "title": "Set up an Issuing and Connect integration | Stripe Documentation",
  "description": "Learn how to issue cards on connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/connect/tos_acceptance",
  "markdown": "# Update the Issuing terms of service acceptance\n\n## Learn how to present accurate business information for your connected accounts and accept the Issuing terms of service.\n\nPlatforms must present the account representative with the business information on file for confirmation prior to submission to Stripe Issuing. Make sure that the account representatives update any information that’s no longer accurate:\n\n*   Business Information (including the Tax Identification Number if applicable)\n*   Name, date of birth, address, and SSN of account representative and beneficial owners\n\n### Referencing the terms and disclosures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPresent the account representative with a disclosure stating that Celtic Bank, a member of FDIC, issues the cards. Additionally, provide them with all relevant links to the Issuing program’s [terms and disclosures](https://docs.stripe.com/issuing/compliance-us#issuing-terms). The representative must accept the terms to complete their application.",
  "title": "Update the Issuing terms of service acceptance | Stripe Documentation",
  "description": "Learn how to present accurate business information for your connected accounts and accept the Issuing terms of service.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/cards/virtual",
  "markdown": "# Virtual cards with Issuing | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about virtual cards created with Issuing.\n\nYou can retrieve or display virtual card details through the Dashboard, the API, or by using [Issuing Elements](https://docs.stripe.com/issuing/elements). [PCI-DSS](https://stripe.com/guides/pci-compliance) rules protect cardholder data, and not all methods of card information retrieval are PCI-DSS compliant.\n\n## Display virtual card details to cardholders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use [Issuing Elements](https://docs.stripe.com/issuing/elements) to display virtual card details to your cardholders without this information passing through your servers. This method is fully PCI-DSS compliant, and we recommend it for most Issuing users. Stripe offers Issuing Elements as a part of [Stripe.js](https://docs.stripe.com/js).\n\n## Retrieve virtual card details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor PCI-DSS compliance, we recommend limiting retrieval of virtual card information to the Dashboard or Issuing Elements. If you use the API to retrieve card information, or if you export virtual card information from the Dashboard, store it in a password manager or otherwise encrypt it.\n\nYou can retrieve both the full unredacted card number and CVC from the API. For security reasons, you can only use these fields with virtual cards in live mode, and we omit them unless you explicitly request them with the [expand](https://docs.stripe.com/api/expanding_objects) property. You can only retrieve these fields for physical cards in [test mode](https://docs.stripe.com/keys#test-live-modes). Additionally, you can only access them through the [Retrieve a card](https://docs.stripe.com/api/issuing/cards/retrieve) endpoint.\n\n`curl -G https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=number \\  -d \"expand[]\"=cvc`\n\n## Details about PCI-DSS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you are generating virtual cards for your own use, you are not required to attain PCI-DSS compliance for Issuing activity. If you are generating virtual cards for use by your users, you may be considered a Service Provider under PCI-DSS rules. Service Providers must be PCI-DSS compliant.\n\nIf you accept payments through Stripe, read more about your [PCI-DSS obligations](https://stripe.com/guides/pci-compliance). These obligations are in addition to requirements noted above.",
  "title": "Virtual cards with Issuing | Stripe Documentation",
  "description": "Learn about virtual cards created with Issuing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/cards/physical",
  "markdown": "# Physical cards | Stripe DocumentationThe Stripe Docs logo\n\n## Understand the difference between standard and customized physical cards.\n\nStripe offers two types of physical cards. This document provides an overview of the card types and the different options you have for creating them.\n\n| Card type | Description | Timeline | Recommended use cases |\n| --- | --- | --- | --- |\n| **Standard cards** | Select a card with a black or white background and add your business logo on the front to customize it. [Learn how to create standard cards](https://docs.stripe.com/issuing/cards/physical/standard). | Available immediately for all users. | Ideal if you’re looking to go to market fast, for a pilot launch, or if you’re thinking of issuing a smaller quantity of cards (less than a thousand). |\n| **Custom cards** | Fully customize your cards with your artwork and design choices on the front and back. You can also design custom carriers (the paper your card is attached to for shipping). [Learn more about custom cards](https://docs.stripe.com/issuing/cards/physical/custom). | Custom cards, carriers, and envelopes can be fully customized for your brand. The design process typically takes a few weeks, followed by a manufacturing lead time of several months. Once custom items are manufactured and tested, a custom bundle will be set up by Stripe for you to use these new items. | Custom cards are useful if physical cards are a core part of your business and you’re planning on issuing a large amount of cards. Custom cards let you feature your brand goals in your customers’ wallets. |\n\n## Getting started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re just getting started with Stripe Issuing, we recommend using Standard cards. If your use case requires it, and after you’re comfortable issuing Standard cards, you can get started with Custom cards. See [Standard cards](https://docs.stripe.com/issuing/cards/physical/standard) and [Custom cards](https://docs.stripe.com/issuing/cards/physical/custom) to learn more.",
  "title": "Physical cards | Stripe Documentation",
  "description": "Understand the difference between standard and customized physical cards.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/connect/funding",
  "markdown": "# Funding Issuing balances with Connect\n\n## Learn how to fund connected accounts for Issuing.\n\nBefore an issued card can be used for transactions, you must first allocate funds to the connected account’s [Issuing balance](https://docs.stripe.com/issuing/funding/balance) associated with the card. An Issuing balance holds funds reserved for the card and is safely separated from earnings, [payouts](https://docs.stripe.com/payouts), and funds from other Stripe products.\n\n[](#fund-from-bank-account)\n\nYou have two options for funding an Issuing balance from an external account that each have different setups: pull funding and push funding.\n\n*   **Pull funding** is the default funding option in the US and isn’t available in the EU or the UK. You need to verify external bank accounts, which usually causes a delay in transferring funds (up to 5 business days). This option allows you to control and identify which bank your top-up originates from.\n*   **Push funding** is available in the UK and EU and as a beta in the US. This options allows you to originate the funds from your own bank account to Stripe. You might be able to receive funds the same day with push funding, which depends on the process you use (for example, ACH or wire transfer).\n\nBefore you can top-up a connected account from your user’s bank account, you must first collect and verify their account information. Stripe provides the option of collection through [Stripe.js](https://docs.stripe.com/payments/elements) with verification using microdeposits.\n\n### Collecting your users’ information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo debit the user’s bank account for funding, you will need to collect their bank account information and submit evidence of their authorization to debit their account. This is known as a [mandate](https://docs.stripe.com/api/sources/create#create_source-mandate), and ensures both you and Stripe remain compliant with ACH network rules, as well as provide you with access to evidence to ease in any dispute resolution.\n\nCreate a form that captures:\n\n*   Name\n*   Routing number\n*   Account number\n\nAs your customers submit the mandate, you should record:\n\n*   IP address\n*   User agent\n*   Date\n\nIf instead you prefer to collect mandates from your users _offline_ (such as via phone or a paper agreement), you won’t upload evidence of acceptance to Stripe. You should maintain your own record of the acceptance and provide us a contact email in case the evidence is requested.\n\n### Creating the token and source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate a token using the [Bank Account Token API](https://docs.stripe.com/api/tokens/create_bank_account), and then use it to create a source. Create both the bank account token and `source` on the connected account you want to fund.\n\n#### Caution\n\nStore these `Source` tokens in your own system where your integration can retrieve them. Stripe currently doesn’t provide a way to programmatically retrieve or list the tokens after they’re created.\n\n`curl https://api.stripe.com/v1/tokens \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"bank_account[country]\"=US \\  -d \"bank_account[currency]\"=usd \\  -d \"bank_account[account_holder_name]\"=\"Jenny Rosen\" \\  -d \"bank_account[account_holder_type]\"=individual \\  -d \"bank_account[routing_number]\"=110000000 \\  -d \"bank_account[account_number]\"=000000000009`\n\nCreate a `source` using the token you obtained:\n\n`curl https://api.stripe.com/v1/sources \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d type=ach_debit \\  -d currency=usd \\  -d token={{TOKEN_ID}} \\   -d \"owner[address][line1]\"=\"510 Townsend Street\" \\  -d \"owner[address][city]\"=\"San Francisco\" \\  -d \"owner[address][state]\"=California \\  -d \"owner[address][country]\"=US \\   --data-urlencode \"owner[email]\"=\"jenny.rosen@example.com\" \\  -d \"owner[name]\"=\"Jenny Rosen\" \\  -d \"owner[phone]\"=5554443333`\n\n### Verifying sources with microdeposits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTwo small deposits with the statement description **ACCTVERIFY** are sent to the bank account within 1-2 days. You should collect these two amounts from your user to verify the bank account.\n\n`curl https://api.stripe.com/v1/sources/{{SOURCE_ID}}/verify \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"values[]\"=32 \\  -d \"values[]\"=45`\n\n### Top-up a connected account’s Issuing balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFund the Issuing balance on your connected account with top-ups by passing in the `source` that was made and setting the `destination_balance` to `issuing`.\n\n`curl https://api.stripe.com/v1/topups \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\" \\   -d \"amount\"=2000 \\   -d \"currency\"=\"usd\" \\   -d \"description\"=\"Top-up for week of May 31\" \\   -d \"destination_balance\"=\"issuing\" \\   -d \"statement_descriptor\"=\"Top-up\" \\   -d \"source\"=\"{{SOURCE_ID}}\"`\n\n[](#fund-from-connected-account-balance)\n\nYou must [sign up for the Balance Transfer API private beta](#request-early-access) to transfer funds from your Stripe balance into your Issuing balance.\n\n`curl https://api.stripe.com/v1/balance_transfers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\" \\   -d amount=1000 \\   -d currency=usd \\   -d \"source_balance[type]\"=payments \\   -d \"destination_balance[type]\"=issuing`\n\nTransfers from your connected account’s Stripe balance are instant and available 24x7 in the US, or take one business day in the UK and euro area countries. This allows you to quickly and easily utilize earned funds from Stripe Payments for spend with Stripe Issuing.\n\nYou can only move an amount up to the available Stripe balance. Funds won’t be available in the Issuing balance while the transfer is pending.\n\nUse the [retrieve balance](https://docs.stripe.com/api/balance/balance_retrieve) endpoint to get your available Stripe balance amounts broken down by [`source_type`](https://docs.stripe.com/api/balance/balance_object#balance_object-available-source_types).\n\n### Request early access ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAccess to the Balance Transfer API is currently limited to beta users. You must be an Issuing customer to join the beta. To request access to the beta, log in to your Stripe account and refresh the page. [Contact Stripe](https://stripe.com/contact/sales) for more information.\n\n[](#retrieve-an-issuing-balance)\n\nTo check the current Issuing balance of a connected account, call the [Balance API](https://docs.stripe.com/api/balance/balance_retrieve) GET endpoint and pass the connected account ID into the header.\n\n`curl https://api.stripe.com/v1/balance \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nThe`balance` object is returned with a corresponding `issuing` object that includes the current available balance:\n\n`{   \"object\": \"balance\", ...     \"issuing\": {     \"available\": [       {         \"amount\": 100,         \"currency\": \"usd\"       }     ]   },   \"livemode\": false }`\n\n[](#pay-out-an-issuing-balance)\n\nThe funds in an Issuing balance can also be paid out to a connected account’s [external bank account](https://docs.stripe.com/api/external_accounts) using the [Payouts API](https://docs.stripe.com/api/payouts/create) POST endpoint and specifying the `source_balance` of the payout as `issuing.`\n\n`curl https://api.stripe.com/v1/payouts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d source_balance=issuing \\  -d amount=100 \\  -d currency=usd`",
  "title": "Funding Issuing balances with Connect | Stripe Documentation",
  "description": "Learn how to fund connected accounts for Issuing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/cards/digital-wallets",
  "markdown": "# Use digital wallets with Issuing\n\nWhen the user taps the `PKAddPassButton`, create and present a `PKAddPaymentPassViewController`, which contains Apple’s UI for the push provisioning flow.\n\n#### Note\n\n`PKAddPaymentPassViewController` can use the `primaryAccountIdentifier` from the previous step to determine if a card has already been provisioned on a specific device. For example, if the card has already been added to an iPhone, Apple’s UI offers to add it to a paired Apple Watch.\n\n`import Stripe  class MyViewController: UIViewController {   // ...   func beginPushProvisioning() {     let config = STPPushProvisioningContext.requestConfiguration(       withName: \"Jenny Rosen\", // the cardholder's name       description: \"RocketRides Card\", // optional; a description of your card       last4: \"4242\", // optional; the last 4 digits of the card       brand: .visa, // optional; the brand of the card       primaryAccountIdentifier: self.primaryAccountIdentifier // the primary_account_identifier value from the previous step     )     let controller = PKAddPaymentPassViewController(requestConfiguration: config, delegate: self)     self.present(controller!, animated: true, completion: nil)   } }`\n\nFor more context, see how the [sample app](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/ios/Code/ViewController.swift#L280-L288) uses a `PKAddPaymentPassViewController`.\n\nThe `PKAddPaymentPassViewController`’s initializer takes a delegate that you need to implement – typically this can just be the view controller from which you’re presenting it. We provide a class called `STPPushProvisioningContext` to help you implement these methods.\n\n``class MyViewController: UIViewController {   var pushProvisioningContext: STPPushProvisioningContext? = nil   // ... }  extension MyViewController: PKAddPaymentPassViewControllerDelegate {   func addPaymentPassViewController(_ controller: PKAddPaymentPassViewController, generateRequestWithCertificateChain certificates: [Data], nonce: Data, nonceSignature: Data, completionHandler handler: @escaping (PKAddPaymentPassRequest) -> Void) {     self.pushProvisioningContext = STPPushProvisioningContext(keyProvider: self)     // STPPushProvisioningContext implements this delegate method for you, by retrieving encrypted card details from the Stripe API.     self.pushProvisioningContext?.addPaymentPassViewController(controller, generateRequestWithCertificateChain: certificates, nonce: nonce, nonceSignature: nonceSignature, completionHandler: handler);   }    func addPaymentPassViewController(_ controller: PKAddPaymentPassViewController, didFinishAdding pass: PKPaymentPass?, error: Error?) {     // Depending on if `error` is present, show a success or failure screen.     self.dismiss(animated: true, completion: nil)   } }``\n\nFor more context, see how the [sample app](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/ios/Code/ViewController.swift#L293-L349) implements `PKAddPaymentPassViewControllerDelegate`.\n\nYou can see that the `STPPushProvisioningContext`’s initializer expects a `keyProvider`. This is an instance of a class that implements the `STPIssuingCardEphemeralKeyProvider` protocol.\n\nThis protocol defines a single required method, `createIssuingCardKeyWithAPIVersion:completion`. To implement this method, make an API call to your backend. Your backend creates an Ephemeral Key object using the Stripe API, and returns it to your app. Your app then calls the provided completion handler with your backend’s API response.\n\n`extension MyViewController: STPIssuingCardEphemeralKeyProvider {     func createIssuingCardKey(withAPIVersion apiVersion: String, completion: @escaping STPJSONResponseCompletionBlock) {         // This example uses Alamofire for brevity, but you can make the request however you want         AF.request(\"[https://myapi.com/ephemeral_keys](https://myapi.com/ephemeral_keys)\",                    method: .post,                    parameters: [\"api_version\": apiVersion])         .responseJSON { response in             switch response.result {             case .success:                 if let data = response.data {                     do {                         let obj = try JSONSerialization.jsonObject(with: data, options: []) as! [AnyHashable: Any]                         completion(obj, nil)                     } catch {                         completion(nil, error)                     }                 }             case .failure(let error):                 completion(nil, error)             }         }     } }`\n\nFor more context, see how the [sample app](https://github.com/stripe-samples/push-provisioning-samples/blob/main/client/ios/Code/ViewController.swift#L379-L394) implements `STPIssuingCardEphemeralKeyProvider`.",
  "title": "Use digital wallets with Issuing | Stripe Documentation",
  "description": "Learn how to use Issuing to add cards to digital wallets.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/connect/cardholders-and-cards",
  "markdown": "# Connected accounts, cardholders, and cards\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\": \"ic_1234a\",       \"object\": \"issuing.card\",       \"brand\": \"Visa\",       \"cancellation_reason\": null,       \"cardholder\": {         \"id\": \"ich_1234a\",         \"object\": \"issuing.cardholder\",         \"billing\": {           \"address\": {             \"city\": \"San Francisco\",             \"country\": \"US\",             \"line1\": \"510 Townsend Street\",             \"line2\": null,             \"postal_code\": \"94111\",             \"state\": \"CA\"           }         },         \"company\": null,         \"created\": 1656537695,         \"email\": \"jenny.rosen@example.com\",         \"individual\": null,         \"livemode\": false,         \"metadata\": {},         \"name\": \"Jenny Rosen\",         \"phone_number\": \"+18008675309\",         \"requirements\": {           \"disabled_reason\": null,           \"past_due\": []         },         \"spending_controls\": {           \"allowed_categories\": [],           \"blocked_categories\": [],           \"spending_limits\": [],           \"spending_limits_currency\": null         },         \"status\": \"active\",         \"type\": \"individual\"       },       \"created\": 1656537950,       \"currency\": \"usd\",       \"exp_month\": 5,       \"exp_year\": 2025,       \"last4\": \"0021\",       \"livemode\": false,       \"metadata\": {},       \"pin\": null,       \"replaced_by\": null,       \"replacement_for\": null,       \"replacement_reason\": null,       \"shipping\": null,       \"spending_controls\": {         \"allowed_categories\": [           \"car_rental_agencies\"         ],         \"blocked_categories\": null,         \"spending_limits\": [           {             \"amount\": 8000,             \"categories\": [],             \"interval\": \"per_authorization\"           }         ],         \"spending_limits_currency\": \"usd\"       },       \"status\": \"active\",       \"type\": \"virtual\",       \"wallets\": {         \"apple_pay\": {           \"eligible\": true,           \"ineligible_reason\": null         },         \"google_pay\": {           \"eligible\": true,           \"ineligible_reason\": null         },         \"primary_account_identifier\": null       }     },     {       \"id\": \"ic_1234b\",       \"object\": \"issuing.card\",       \"brand\": \"Visa\",       \"cancellation_reason\": null,       \"cardholder\": {         \"id\": \"ich_1234a\",         \"object\": \"issuing.cardholder\",         \"billing\": {           \"address\": {             \"city\": \"San Francisco\",             \"country\": \"US\",             \"line1\": \"510 Townsend Street\",             \"line2\": null,             \"postal_code\": \"94111\",             \"state\": \"CA\"           }         },         \"company\": null,         \"created\": 1656537695,         \"email\": \"jenny.rosen@example.com\",         \"individual\": null,         \"livemode\": false,         \"metadata\": {},         \"name\": \"Jenny Rosen\",         \"phone_number\": \"+18008675309\",         \"requirements\": {           \"disabled_reason\": null,           \"past_due\": []         },         \"spending_controls\": {           \"allowed_categories\": [],           \"blocked_categories\": [],           \"spending_limits\": [],           \"spending_limits_currency\": null         },         \"status\": \"active\",         \"type\": \"individual\"       },       \"created\": 1656537947,       \"currency\": \"usd\",       \"exp_month\": 5,       \"exp_year\": 2025,       \"last4\": \"0013\",       \"livemode\": false,       \"metadata\": {},       \"pin\": null,       \"replaced_by\": null,       \"replacement_for\": null,       \"replacement_reason\": null,       \"shipping\": null,       \"spending_controls\": {         \"allowed_categories\": null,         \"blocked_categories\": null,         \"spending_limits\": [           {             \"amount\": 50000,             \"categories\": [],             \"interval\": \"daily\"           }         ],         \"spending_limits_currency\": \"usd\"       },       \"status\": \"active\",       \"type\": \"virtual\",       \"wallets\": {         \"apple_pay\": {           \"eligible\": true,           \"ineligible_reason\": null         },         \"google_pay\": {           \"eligible\": true,           \"ineligible_reason\": null         },         \"primary_account_identifier\": null       }     }   ],   \"has_more\": false,   \"url\": \"/v1/issuing/cards\" }`",
  "title": "Connected accounts, cardholders, and cards | Stripe Documentation",
  "description": "Learn how to create and manage cardholders and cards with Stripe Connect.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/cards/replacements",
  "markdown": "# Replacement cards | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to replace cards that are expired, damaged, lost, or stolen.\n\nYou can replace cards that are expired, damaged, lost, or stolen. The process differs slightly for each kind of card replacement.\n\n*   **Card expired**: The card has reached its expiration date and is no longer valid.\n*   **Card damaged**: The cardholder requests a new card for a reason other than lost or stolen (for example, a physical card’s chip no longer reads properly).\n*   **Card lost/stolen**: The card is reported lost or stolen and a new card number, expiry, security code are issued.\n\nDepending on the scenario, the replacement card might have a different card number, expiry, or security code from the original:\n\n| Scenario | New card number | New security code | New expiry |\n| --- | --- | --- | --- |\n| **Card expired** | No  | Yes | Yes |\n| **Card damaged** | No  | Yes | Yes |\n| **Card lost/stolen** | Yes | Yes | Yes |\n\n## Replacements for expired or damaged cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPhysical cards can get damaged, and both physical cards and virtual cards expire, but you can create replacement cards that have the same card number. The cardholder can continue to use the original card before the replacement card is activated, as long as the card isn’t too damaged or already expired. Activating the replacement card cancels the original card if it isn’t already canceled.\n\nTo create a replacement card for an expired or damaged card, create a [Card](https://docs.stripe.com/api#issuing_card_object) with `replacement_for` using the expired or damaged `Card` ID and `replacement_reason` set to `expired` or `damaged`.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d cardholder=ich_1Cm3pZIyNTgGDVfzI83rasFP \\  -d currency=usd \\  -d type=virtual \\  -d replacement_for=ic_1LL8wgLUVt6Jcs5dgLLfwcAE \\  -d replacement_reason=expired`\n\n## Replacements for lost or stolen cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLost or stolen cards get new card numbers for security reasons. We need to cancel the original cards before we can create the replacement card.\n\nTo create a replacement card for a lost or stolen card:\n\n1.  Cancel the lost or stolen card by using the [update card](https://docs.stripe.com/api#update_issuing_card) endpoint to set its `status` to `canceled` and its `cancellation_reason` to `lost` or `stolen`.\n    \n2.  Create a [Card](https://docs.stripe.com/api#issuing_card_object) with `replacement_for` using the lost or stolen `Card` ID and `replacement_reason` set to `lost` or `stolen`.\n    \n\n`curl https://api.stripe.com/v1/issuing/cards/ic_1CoYuRKEl2ztzE5GIEDjQiUI \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d status=canceled \\  -d cancellation_reason=lost`\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d cardholder=ich_1Cm3pZIyNTgGDVfzI83rasFP \\  -d currency=usd \\  -d type=virtual \\  -d replacement_for=ic_1CoYuRKEl2ztzE5GIEDjQiUI \\  -d replacement_reason=lost`\n\n## All replacements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll replacement cards have renewed expiration dates and new security codes. Authorizations made on the original cards are migrated to the replacements, but might still clear on the original cards. Like the originals, replacement cards must be activated before use.\n\n## Card-on-file updating![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor many of our card programs, Stripe automatically updates the card details on file with acquiring merchants, even when a card is completely reissued. This feature offers several benefits, including saving your cardholders the hassle of manually re-entering card details when their cards expire.\n\n### Card expired![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUpdating the payment details for a card that has been replaced due to expiration ensures that recurring payments and stored payment details continue to function smoothly. This provides cardholders with a seamless experience even when their cards expire.\n\n### Card lost or stolen![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, Stripe updates merchants with the new card number, expiry, and security code of a replacement card, even when the card is lost or stolen.\n\nIf you prefer not to provide these details to acquiring merchants, cancel the lost or stolen card and issue a new one without specifying the `replacement_for` card. This prevents the replacement card from being explicitly tied to the card that’s been lost or stolen.",
  "title": "Replacement cards | Stripe Documentation",
  "description": "Learn how to replace cards that are expired, damaged, lost, or stolen.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/connect/embedded-components",
  "markdown": "# Embed Issuing card management into your website\n\n## Use prebuilt UI components to embed Issuing card management into your website.\n\n#### Beta\n\nGive your connected accounts access to Issuing card management functionality on your website by using [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components). Connect embedded components allow you to create complex integrations with Stripe products that require minimal coding and configuration out of the box.\n\nStripe offers two different components for Issuing card management:\n\n*   Issuing Card component\n*   Issuing Cards List component\n\n#### Security tip\n\nThese components are for **admin users** of connected accounts, who can access sensitive card and cardholder data of the entire connected account. These components shouldn’t be used to render UI for individual cardholders in any circumstance.\n\n## Quickstart![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIssuing Connect embedded components requires access to [Issuing and Connect](https://docs.stripe.com/issuing/connect).\n\nTo learn how embedded components work, see the [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components) guide. The corresponding [embedded components quickstart](https://docs.stripe.com/connect/connect-embedded-components/quickstart) can help you set up your environment.\n\nTo embed Issuing card management into your website:\n\n1.  Follow the steps to [create a connected account with Issuing capabilities](https://docs.stripe.com/issuing/connect#create-connected-accounts-with-issuing-capabilities).\n2.  [Create a cardholder and cards](https://docs.stripe.com/issuing/connect/cardholders-and-cards) for that connected account.\n3.  [Create an AccountSession](https://docs.stripe.com/connect/connect-embedded-components/quickstart#server-endpoint) with `issuing_card: {enabled: true}` or `issuing_cards_list: {enabled: true}`.\n4.  [Add the `issuing-card` or `issuing-cards-list` component to the DOM](https://docs.stripe.com/connect/connect-embedded-components/quickstart#embedded-component).\n\n[](#issuing-card-component)\n\nThe Issuing Card component allows an admin to view individual card details. From this view, they can activate, deactivate (freeze), or cancel cards. If you implement [sensitive data display](#sensitive-data-display), they can also view card numbers (PANs) and CVVs or CVCs for virtual cards.\n\n### Issuing Card configuration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis embedded component supports the following parameter:\n\n| Method | Type | Description |\n| --- | --- | --- |\n| `setDefaultCard` | `string` | Sets the Issuing [Card](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) ID to display upon initial load. |\n| `setCardSwitching` | `boolean` | Sets whether or not to render the card dropdown selector. Sets to `true` by default. |\n| `setFetchEphemeralKey` | `Function` | Sets the callback that fetches the ephemeral key for the card. See [sensitive data display](#sensitive-data-display). |\n\n[](#issuing-cards-list-component)\n\nThe Issuing Cards List component allows an admin to view all the cards on a connected account. They can filter cards by cardholder, creation date, and card type.\n\nWhen the admin clicks on a row in the table, they see a view of the selected card where they can activate, deactivate (freeze), or cancel the card. If you implement [sensitive data display](#sensitive-data-display), they can also view card numbers (PANs) and CVC or CVVs for virtual cards.\n\n### Issuing Cards List configuration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis embedded component supports the following parameters:\n\n| Method | Type | Description |\n| --- | --- | --- |\n| `setFetchEphemeralKey` | `Function` | Sets the callback that fetches the ephemeral key for the currently selected card. See [sensitive data display](#sensitive-data-display). |\n\n[](#sensitive-data-display)\n\nIssuing Connect embedded components integrate with [Issuing Elements](https://docs.stripe.com/issuing/elements) to provide a PCI-compliant way for you to allow your admins to view card numbers (PANs) and CVV or CVCs for virtual cards. The sensitive data renders inside Stripe-hosted iframes and never touches your servers.\n\nThe components can use an ephemeral key to securely retrieve card information from the Stripe API without publicly exposing your secret keys.\n\nTo enable this functionality you must:\n\n1.  Set up an ephemeral key exchange on your server.\n2.  Pass an asynchronous callback to the components.\n\nStripe generates a `nonce` from the [Card ID](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) in the Issuing Card or Issuing Cards List component when a card is selected or loaded. Stripe then calls your callback function which returns an ephemeral key, and then renders a `Show numbers` button if the ephemeral key is valid.\n\n### Ephemeral key exchange![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour server-side endpoint needs to accept a [Card ID](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) and a `nonce`. It can then create an ephemeral key using Stripe.\n\nHere’s how you might implement an ephemeral key creation endpoint in web application frameworks across various languages:\n\n`// This example sets up an endpoint using the Express framework. // Watch this video to get started: [https://youtu.be/rPR2aJ6XnAc](https://youtu.be/rPR2aJ6XnAc)  const express = require('express'); const bodyParser = require('body-parser'); const app = express();  app.use(bodyParser.urlencoded({ extended: true }));  const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  app.post('/ephemeral-keys', async (request, response) => {   const { card_id, nonce } = request.body;    const ephemeralKey = await stripe.ephemeralKeys.create({     nonce: nonce,     issuing_card: card_id,   }, {     apiVersion: '2024-06-20',     stripeAccount: '{{CONNECTED_ACCOUNT_ID}}',   });    response.json({     ephemeralKeySecret: ephemeralKey.secret,     nonce: nonce,     issuingCard: card_id,   }); });`\n\n### Asynchronous callback![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must define an asynchronous function that accepts a named argument with property `issuingCard` which is a [Card](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) ID and additionally, a `nonce` property. This function must return an `Object` with properties `issuingCard`, `nonce`, and `ephemeralKeySecret` which are retrieved from the endpoint you set up in the previous step.\n\nHere’s how you might implement this callback:\n\n`const issuingCard = stripeConnectInstance.create('issuing-card'); const fetchEphemeralKey = async (fetchParams) =>  {   const { issuingCard, nonce } = fetchParams;    // This may vary greatly based on your implementation   const response = await myServer.getEphemeralKey({issuingCard, nonce})    return {     issuingCard: response.issuingCard,     nonce: response.nonce,     ephemeralKeySecret: response.ephemeralKeySecret   } }  issuingCard.setFetchEphemeralKey(fetchEphemeralKey); document.body.appendChild(issuingCard);`\n\n[](#additional-configuration)\n\nYou can customize and configure your Connect embedded components to match your website’s look and feel. You can set this configuration when you initialize the `StripeConnectInstance`. See [customize the look of Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components#customize-the-look-of-connect-embedded-components) for more details.",
  "title": "Embed Issuing card management into your website | Stripe Documentation",
  "description": "Use prebuilt UI components to embed Issuing card management into your website.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/cards/physical/address-validation",
  "markdown": "# Physical cards address validation | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to enable and manage address validation features for physical cards.\n\nStripe Issuing needs accurate and properly formatted shipping addresses to ensure successful delivery of physical cards to their intended recipient. Cards sent to invalid addresses get returned to Stripe, but the delivery attempt and the eventual return can take over 2 weeks to complete. Returned cards can create an operational burden, increase your overall costs, and delay your cardholders’ receipt of your physical cards.\n\nTo maximize your delivery success, Stripe’s Cards API has built-in address normalization and validation. Stripe compares the shipping address you provide to a third-party address database and identifies or fixes any issues with the address.\n\n## Address normalization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNormalization ensures that your addresses adhere to the standards of the shipment’s country while also correcting any easy-to-fix errors in your addresses.\n\nExamples of normalization include:\n\n#### Address standardization to ensure proper formatting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`// Before \"shipping\": {   \"address\": {     \"line1\": \"354 Oyster Point Blvd South San Francisco, CA 94080\", // incorrectly formatted line1     \"city\": \"South San Francisco\",     \"postal_code\": \"94080\",     \"state\": \"CA\",     \"country\": \"US\"   } }  // After \"shipping\": {   \"address\": {     \"line1\": \"354 OYSTER POINT BLVD\",     \"city\": \"SOUTH SAN FRANCISCO\",     \"postal_code\": \"94080\",     \"state\": \"CA\",     \"country\": \"US\"   } }`\n\n#### Address correction to apply corrections found from matching with an existing validated address ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`// Before \"shipping\": {   \"address\": {     \"line1\": \"354 Oyster Point\",     \"city\": \"South San Francisco\",     \"postal_code\": \"94080\",     \"state\": \"NM\", // incorrect state with an available correction     \"country\": \"US\"   } }  // After \"shipping\": {   \"address\": {     \"line1\": \"354 OYSTER POINT BLVD\", // added BLVD suffix     \"city\": \"SOUTH SAN FRANCISCO\",     \"postal_code\": \"94080\",     \"state\": \"CA\", // corrected state     \"country\": \"US\"   } }`\n\nThe normalized address is included in the [address validation](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-shipping-address_validation) hash that is returned after successfully creating a physical card or updating a card’s shipping address with address normalization enabled.\n\n#### ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`\"shipping\": {   // address supplied during card creation   \"address\": {     \"line1\": \"354 Oyster Point Blvd South San Francisco, TX 94080\",     \"city\": \"South San Francisco\",     \"postal_code\": \"94080\",     \"state\": \"TX\",     \"country\": \"US\"   },   // address validation hash   \"address_validation\": {     // the normalized address     \"normalized_address\": {       \"line1\": \"354 OYSTER POINT BLVD\",       \"city\": \"SOUTH SAN FRANCISCO\",       \"state\": \"CA\",       \"postal_code\": \"94080\",       \"country\": \"US\"     },     \"mode\": \"validation_and_normalization\",     \"result\": \"likely_deliverable\"   } }`\n\n## Address validation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nValidation determines whether your address is deliverable by attempting to match to an existing, validated address and is done after applying normalization.\n\nThe result of this validation is included in the address validation hash. Depending on the [address validation mode](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-shipping-address_validation-mode) used this might result in an API error.\n\n| Result | Description |\n| --- | --- |\n| `likely_deliverable` | If a partially matching or fully matching address is found in our third party database, your address is considered likely deliverable. |\n| `likely_undeliverable` | If no matching or partially matching address is found in our third party database, your address is considered likely undeliverable. |\n| `indeterminate` | The deliverability of the address couldn’t be determined. |\n\nFor example, the previous example showed the validation result of `likely_deliverable`.\n\n`\"address_validation\": {   // the normalized address   \"normalized_address\": {     \"line1\": \"354 OYSTER POINT BLVD\",     \"city\": \"SOUTH SAN FRANCISCO\",     \"state\": \"CA\",     \"postal_code\": \"94080\",     \"country\": \"US\"   },   \"mode\": \"validation_and_normalization\",   // the result showing that address was validated to be likely deliverable   \"result\": \"likely_deliverable\" }`\n\n## Managing address validation features with address validation modes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Cards API supports three address validation modes, which can optionally be specified in the [address\\_validation](https://docs.stripe.com/api/issuing/cards/create#create_issuing_card-shipping-address_validation) parameter when creating a physical card or updating a card’s shipment.\n\n| Mode | Description |\n| --- | --- |\n| `validation_and_normalization` | Validates and normalizes your card’s shipping address before submitting it for fulfillment. Stripe attempts to automatically apply any appropriate corrections and formatting to your address before determining deliverability. If the card’s shipping address is likely undeliverable, you get an API request error. |\n| `normalization_only` | Normalizes your card’s shipping address before submitting it for fulfillment, and applies any appropriate corrections and formatting to your address. Address deliverability isn’t enforced, and you don’t get an API request error. |\n| `disabled` | Ships your card using the address provided as-is, without applying any normalization or validating its deliverability. This is only recommended when an address is known to be correct or otherwise validated. |\n\nUse `validation_and_normalization` for the address validation mode. We also provide alternate modes depending on your scenario:\n\n*   `disabled`: If you believe a card is incorrectly blocked.\n*   `normalization only`: If you want to minimize API errors but still gain the benefits of normalization. The default is `normalization_only` if not specified.\n\n### Validation and normalization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour card is shipped with the validated, normalized address. Address deliverability is enforced, and the API errors if the address is likely undeliverable. Stripe strongly recommends using this mode to ensure deliverability for the address.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d cardholder=ich_1Cm3pZIyNTgGDVfzI83rasFP \\  -d type=physical \\  -d currency=usd \\  -d \"shipping[name]\"=\"Jenny Rosen\" \\  -d \"shipping[address][line1]\"=\"1234 Fake St\" \\  -d \"shipping[address][city]\"=\"Fake City\" \\  -d \"shipping[address][state]\"=NY \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[address][postal_code]\"=94111 \\  -d \"shipping[address_validation][mode]\"=validation_and_normalization`\n\n`\"error\": {   \"message\": {     \"The address is undeliverable based on given inputs. Please ensure that the address was inputted correctly and can be delivered to.\"   } }`\n\n### Normalization only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour card will be shipped with the normalized address. Address deliverability isn’t enforced, and you don’t get an API request error if the address is likely undeliverable.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d cardholder=ich_1Cm3pZIyNTgGDVfzI83rasFP \\  -d type=physical \\  -d currency=usd \\  -d \"shipping[name]\"=\"Jenny Rosen\" \\  -d \"shipping[address][line1]\"=\"1234 Fake St\" \\  -d \"shipping[address][city]\"=\"Fake City\" \\  -d \"shipping[address][state]\"=NY \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[address][postal_code]\"=94111 \\  -d \"shipping[address_validation][mode]\"=normalization_only`\n\n`# Example response {   \"id\":  \"ic_test1CDR9auHsQKan42gGK34\",   \"object\": \"issuing.card\",   \"shipping\": {     // address supplied during card creation     \"address\": {       \"line1\": \"1234 Fake Street\",       \"city\": \"Fake city\",       \"postal_code\": \"94111\",       \"state\": \"NY\",       \"country\": \"US\"     },     // address validation information     \"address_validation\": {       // the card will be shipped with this address       \"normalized_address\": {         \"line1\": \"1234 FAKE ST\",         \"city\": \"FAKE CITY\",         \"state\": \"NY\",         \"postal_code\": \"94111\",         \"country\": \"US\"       },       \"mode\": \"normalization_only\",       \"result\": \"likely_undeliverable\"     },     // other fields...   },   // other fields... }`\n\n### Disabled![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis mode ships your card using the address provided as-is, without applying normalization or validating its deliverability. A normalized address and validation result will not be returned. This is recommended only when an address is known to be correct or otherwise validated.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d cardholder=ich_1Cm3pZIyNTgGDVfzI83rasFP \\  -d type=physical \\  -d currency=usd \\  -d \"shipping[name]\"=\"Jenny Rosen\" \\  -d \"shipping[address][line1]\"=\"1234 Fake St\" \\  -d \"shipping[address][city]\"=\"Fake City\" \\  -d \"shipping[address][state]\"=NY \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[address][postal_code]\"=94111 \\  -d \"shipping[address_validation][mode]\"=disabled`\n\n`// Example response {   \"id\":  \"ic_test1CDR9auHsQKan42gGK34\",   \"object\": \"issuing.card\",   \"shipping\": {     // address supplied during card creation     \"address\": {       \"line1\": \"1234 Fake Street\",       \"city\": \"Fake city\",       \"postal_code\": \"94111\",       \"state\": \"NY\",       \"country\": \"US\"     },     // address validation information     \"address_validation\": {       \"mode\": \"disabled\"     },     // other fields...   },   // other fields... }`\n\n## Integrating address validation into your card creation flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe provide several examples on how to integrate your flow with address validation features below. These examples are not exhaustive, and are only meant to serve as ideas to help you with your integration.\n\n### Strict address validation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe best way to increase deliverability is to never bypass address validation, requiring your customers to always submit deliverable addresses.\n\n### Address suggestions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPrompting a user to select between a suggested address and the one they provided is a common flow that you can build yourself using our address validation features.\n\n### Relaxed address validation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can gracefully handle undeliverable address errors by requiring the user to confirm the address they submitted. By leveraging the `disabled` address validation mode, you can make sure that your customers are able to order cards without much friction if their address is known to be correct.\n\n## Testing address validation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can supply a magic value for `line1` to trigger certain validation conditions in test mode. You must pass in legitimate values for the `city`, `state`, and `postal_code` arguments.\n\n| Value | Type |\n| --- | --- |\n| `address_valid` | Send a test mode request using a deliverable shipping address. |\n| `address_invalid` | Send a test mode request using an undeliverable shipping address. |\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d cardholder=ich_1Cm3pZIyNTgGDVfzI83rasFP \\  -d type=physical \\  -d currency=usd \\  -d \"shipping[name]\"=\"Jenny Rosen\" \\  -d \"shipping[address][line1]\"=address_invalid \\  -d \"shipping[address][city]\"=\"San Francisco\" \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[address][postal_code]\"=94111 \\  -d \"shipping[address_validation][mode]\"=validation_and_normalization`",
  "title": "Physical cards address validation | Stripe Documentation",
  "description": "Learn how to enable and manage address validation features for physical cards.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/other/choose-cardholder",
  "markdown": "# Choose a cardholder type | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to select the best cardholder type for your use case.\n\nWhen creating a [Cardholder object](https://docs.stripe.com/api/#issuing_cardholder_object), you can specify a type: either `individual` or `company`—you can’t change the type after you create the cardholder. Setting a type is optional and defaults to individual if none is specified.\n\nYou might have to collect additional information, depending on the cardholder type you choose. For individual cardholders, you must provide first name and last name, and proof of acceptance of [Authorized User Terms](https://docs.stripe.com/issuing/cards#accept-authorized-user-terms). This data isn’t required for company cardholders.\n\n## Find your use case![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nChoosing a cardholder type depends on your use case. View your use case and other program details from the [Card programs](https://dashboard.stripe.com/settings/issuing/card-programs) page in the Dashboard.\n\n### Individual cardholders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate _individual cardholders_ if you’re issuing the card to an employee or contractor of your business or to an owner, employee, or contractor of one of your connected accounts.\n\nThis is the default and most common type.\n\nSome example use cases for individual cardholders include:\n\n*   Building a new expense management product for small businesses where the platform issues cards to employees or contractors of those small businesses\n*   Giving cards to your own employees to make purchases for your company\n*   Building a fleet card product that issues cards to drivers\n*   Running a platform that enables businesses to give cards to their employees for disbursing employee benefits or perks\n\n### Company cardholders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate _company cardholders_ if you’re issuing the card directly to an entity.\n\nThis type is less common, and may not be available depending on the use-case you provided at onboarding. If you’re restricted, Stripe returns the `Cardholder type must be individual` error.\n\nHere are some example use cases for company cardholders:\n\n*   A platform that creates virtual cards to use programmatically for online purchases with company funds and for its benefit. For example, purchasing inventory for resale or paying for cloud services. The cards are _not_ given to individual employees for individual expenses (for example, expensing a business lunch).\n*   A platform that creates cards assigned to a vehicle (like a rental car or semi-truck). The cards stay with the vehicle at all times. Alternating drivers use the card to refuel the vehicle. The card does not belong to any one individual.\n\n#### Caution\n\nIn some cases, you may not be able to create company cardholders, depending on Stripe’s review of your use case at onboarding. If this restriction applies to you, Stripe notifies you. You receive an error message if you try to create a company cardholder and your account has this restriction.\n\n## Changing cardholder type![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter a cardholder has been created, you can’t change its type.\n\nIf you have linked a card to the cardholder, you can’t change who the cardholder is.\n\nIf you haven’t linked any cards to the cardholder, you can create a new cardholder with the correct type. In most cases, you don’t need to delete the existing cardholder. But make sure that you assign the appropriate type to new cardholders to avoid any potential disruption in service.",
  "title": "Choose a cardholder type | Stripe Documentation",
  "description": "Learn how to select the best cardholder type for your use case.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/customer-support",
  "markdown": "# Customer support for Issuing and Treasury\n\nOrdering and replacing cards Lost or stolen cards[Make an API call](https://docs.stripe.com/issuing/cards/replacements#replacements-for-lost-or-stolen-cards) to immediately cancel and replace any physical or virtual cards reported as compromised.\n\nIf any authorizations were approved on a compromised card, you might [dispute the transaction(s)](https://docs.stripe.com/issuing/purchases/disputes) as fraud.\n\nExpired or damaged physical cards[Make an API call](https://docs.stripe.com/issuing/cards/replacements) to replace physical cards that are expired or damaged.Delayed physical cardsDelays in card manufacturing can occur if there is a pending [cardholder watchlist screening](https://support.stripe.com/questions/issuing-watchlist-reviews). Ensure that the cardholder is active and has fulfilled all necessary requirements. If you have chosen the Standard shipping method, which does not provide tracking, and the cardholder has not received the card within 10 business days, we recommend canceling and ordering a replacement (Stripe will credit the creation and shipment cost back to you).\n\nAlternatively, if you have selected Express or Priority shipping methods, which include tracking, you can retrieve the tracking number from the Dashboard or [via the API](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-shipping-tracking_number).\n\nCardholder experience Authorization declined[Make an API call](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-request_history-reason) to retrieve the authorization and review the request\\_history.reason.Cancel pending authorizationInform the cardholder that it is not possible to cancel pending authorizations. Only the acquiring merchant can void an authorization.\n\nAdvise customers that the authorization will automatically expire 7 days after creation (31 days if hotels, airlines, and car rental companies) and the held funds will be released at that time.\n\nMissing refund[Make an API call](https://docs.stripe.com/api/issuing/transactions/list#list_issuing_transactions-type) to retrieve a list of transactions associated with the card where the type is `refund`.\n\nStripe attempts to link refunds to original transactions. If this does not happen, you can review the amount and merchant data across all results to identify a match.\n\nDisputing a transactionEnsure that the cardholder has exhausted other means of resolving the issue, and obtain documentation of these attempts to use as evidence when filing the dispute.\n\nMake an API call to [create](https://docs.stripe.com/issuing/purchases/disputes?dashboard-or-api=api) and [submit](https://docs.stripe.com/issuing/purchases/disputes?dashboard-or-api=api#submission) a dispute on behalf of the cardholder.\n\nDispute loss reasonIf you are interested in the ability to retrieve a dispute loss reason via API, apply for the beta by [submitting your interest](https://docs.stripe.com/issuing/purchases/disputes) while logged into your platform account. If you do not have access to the beta, [contact support](https://support.stripe.com/) for more information that you can relay to the cardholder regarding why a dispute was lost.Excessive PIN retriesIf a card’s PIN is entered incorrectly three consecutive times, the PIN becomes blocked and the card becomes inactive. In most countries, cardholders can [unblock a card’s PIN at an ATM](https://docs.stripe.com/issuing/cards/pin-management#changing-a-cards-pin-at-an-atm).\n\nUsers who are gated into the encrypted PIN management feature might also [change the PIN](https://docs.stripe.com/issuing/cards/pin-management#changing-a-pin-with-the-cards-api) for an issued card using the Card Update API. However, depending on the region the card is used in, the new PIN might not be immediately usable.\n\nOnce the pin is unblocked, you will need to [make an API call](https://docs.stripe.com/api/issuing/cards/update#update_issuing_card-status) to update the card status to active. If you would like to request access to encrypted PIN management, [contact support](https://support.stripe.com/).\n\nCardholder inactive[Make an API call](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-requirements) to retrieve the cardholder requirements array so that you can review the disabled\\_reason and confirm whether any information is past\\_due.Cannot add card to digital walletEnsure you have already [configured digital wallets](https://docs.stripe.com/issuing/cards/digital-wallets). If configured, request screenshots from the cardholder of the error message being surfaced. [Contact support](https://support.stripe.com/) for in-depth troubleshooting assistance once you have obtained documentation from the cardholder.Fraud management Turning on 3DSConfirm your customer understands that 3DS can only be turned on at the connected account level, meaning they will not be able to toggle the feature on or off for individual cardholders.\n\nAfter the feature is enabled, acquiring merchants might immediately start challenging card-not-present authorization requests for any users that have linked a phone number or email address to the card or cardholder.\n\nOnce you’re ready, [contact support](https://support.stripe.com/) to request 3DS be enabled and provide the Stripe ID of the connected account.\n\nUpdate spending controlsMake an API call to update the spending controls on the [cardholder object](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-spending_controls) or the [card object](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-spending_controls) itself.Enabling fraud challenges betaIf you are providing cardholders with notice of suspected fraud and the ability to override this warning, [apply for enrollment in the beta](https://docs.stripe.com/issuing/controls/fraud-challenges) by submitting your interest while logged into your platform account.Issuing balance Top-ups from external bank account[Make an API call](https://docs.stripe.com/issuing/connect/funding) to add funds to a connected account’s Issuing balance. Set appropriate expectations with cardholders for settlement timing based on your region. If top-ups are reportedly delayed, you can [make an API call](https://docs.stripe.com/api/topups/retrieve) to retrieve a list of top-ups associated with the connected account.Balance transfer (to fund from Stripe balance)You must sign up for the [Balance Transfer API private beta](https://docs.stripe.com/issuing/connect/funding#request-early-access) to transfer funds from a connected account’s Stripe balance into their Issuing balance.Payouts[Make an API call](https://docs.stripe.com/issuing/connect/funding#pay-out-an-issuing-balance) to pay out funds from a connected account’s issuing balance to their external bank account.Complaints Operational complaintsStripe expects you to acknowledge all operational complaints within 5 business days and resolve them within 15 business days from complaint submission date.\n\nIn addition, you must [report an aggregated list of complaints](https://docs.stripe.com/treasury/handling-complaints) to Stripe on a monthly basis.\n\nExecutive complaintsPromptly notify Stripe within 1 business day of complaint submission date. Executive complaints include any threats of litigation and complaints received from regulators and complaints that allege Unfair or Deceptive Acts and Practices (UDAP), discrimination, consumer harm or legal concerns.\n\nUpon receipt of an Executive Complaint, refrain from further interaction with the customer until Stripe reviews the complaint. Stripe works closely with you to resolve all Executive Complaints. In addition, you must [report an aggregated list of complaints](https://docs.stripe.com/treasury/handling-complaints) to Stripe on a monthly basis.",
  "title": "Customer support for Issuing and Treasury | Stripe Documentation",
  "description": "Resolve common Issuing and Treasury questions and issues.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/cards/physical/personalization-designs",
  "markdown": "# Manage personalization designs | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to prepare and use personalization designs for creating physical cards.\n\n## Personalization designs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA [personalization design](https://docs.stripe.com/api/issuing/cards/physical/personalization_designs) is a logical grouping of all the design attributes required to personalize and ship a card. It includes both a physical bundle and any other elements needed to complete personalization on a card:\n\n*   A [physical bundle](https://docs.stripe.com/api/issuing/cards/physical/physical_bundles) is a set of physical goods in inventory that are personalized and shipped when you issue a card. See [Standard cards](https://docs.stripe.com/issuing/cards/physical/standard) or [Custom cards](https://docs.stripe.com/issuing/cards/physical/custom) to learn more. You can also [view all of your physical bundles](https://docs.stripe.com/api/issuing/physical_bundles/list)\n*   Some bundles support or require other design attributes, such as card logos and carrier text.\n\nA card logo is an image printed onto the card, which you provide to Stripe as a file upload. Stripe only prints card logos in one color, so for the highest quality print we require that card logo images are purely binary containing a black logo on a white background with no grayscale. To upload a logo, use the [File API](https://docs.stripe.com/api/files/create) with `purpose` set to `issuing_logo`.\n\n`curl https://files.stripe.com/v1/files \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -F \"file\"=\"@/path/to/a/file.jpg\" \\   -F \"purpose\"=\"issuing_logo\"`\n\nCarrier text is a set of content, which you provide as separate pieces of text, printed onto a carrier letter template. When creating a personalization design, you need to specify both the physical bundle to use, as well as a card logo and carrier text if the bundle requires it.\n\n`curl https://api.stripe.com/v1/issuing/personalization_designs \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d physical_bundle=ics_Kc3MX9PPsUFFMp \\  -d card_logo=  {{FILE_ID}}   \\  -d \"carrrier_text[header_title]\"=Hello`\n\nStripe must review and approve your design (and the underlying physical bundle) before fulfilling any cards made with that design. See [Personalization design review](https://docs.stripe.com/issuing/cards/physical/personalization-designs#personalization-design-review) to learn more.\n\nThere is no limit to the number of personalization designs you can create. This gives you the flexibility to express any number of combinations of a physical bundle, card logo, and carrier text to best suit your use case.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d cardholder=  {{CARDHOLDER_ID}}   \\  -d currency=usd \\  -d type=physical \\  -d personalization_design=ipcd_OhggKRta0zu2Te`\n\n## Personalization design review![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your personalization design includes a logo or carrier text, Stripe must review it to make sure they comply with the guidelines set by our partner networks. A design’s `status` field indicates whether it’s under review, active, or rejected. Cards created with personalization designs in review wait for fulfillment until the personalization design clears review. A personalization design can’t leave the review state if its physical bundle hasn’t been approved yet.\n\nAfter approval, the personalization design status advances to active. After becoming active, any cards with fulfillment waiting on the personalization design may be fulfilled. Any cards created with a personalization design that is already active may be fulfilled immediately. Note that other reviews, such as cardholder watchlist screening, may also prevent a card from being fulfilled immediately.\n\nYou can only set/update the `physical_bundle`, `card_logo`, and `carrier_text` attributes when first creating the personalization design, or after the personalization design has been rejected.\n\n### Handle design rejection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a personalization design is rejected, you’re notified with a webhook if configured. The personalization design object identifies which part of the design violated design guidelines and reason(s) for the rejection in the `rejection_reasons` attribute.\n\n| Rejection reason | Explanation |\n| --- | --- |\n| non\\_binary\\_image | The image isn’t binary - it contains colors, including grayscale, other than black and white. You can use image manipulation software to threshold the image into binary form. |\n| network\\_name | The image or text improperly uses the name of a credit card network. |\n| other\\_entity | The image or text improperly uses the name of another entity. |\n| geographic\\_location | The image or text contains the name of a geographic location. |\n| non\\_fiat\\_currency | The image or text contains a reference to non-fiat currency. |\n| promotional\\_material | The image or text contains advertising, promotional material, or a tagline. |\n| inappropriate | The image or text contains inappropriate content. |\n| other | The image or text was flagged for some other reason. See Stripe Support to contact us about how to remediate the rejection. |\n\nYou can [update the relevant design attributes](https://docs.stripe.com/api/issuing/personalization_designs/update) to address the rejection. Any updates returns the personalization design to the review state, which prevents any further updates to those attributes.\n\n### Handle status changes programmatically![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides webhook events for personalization design updates to help you integrate personalization design management into your own platform.\n\n| Webhook event | Trigger |\n| --- | --- |\n| issuing\\_personalization\\_design.updated | Occurs whenever you or Stripe updates a personalization design. |\n| issuing\\_personalization\\_design.activated | Occurs whenever Stripe activates the bundle for a personalization design and design review approves the design. |\n| issuing\\_personalization\\_design.rejected | Occurs whenever a personalization design rejects a personalization design. |\n| issuing\\_personalization\\_design.deactivated | Occurs whenever Stripe deactivates the bundle for a personalization design. |\n\nSee [webhooks](https://docs.stripe.com/webhooks) to learn more.\n\n### Test status changes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe drives all status changes to a personalization design. However, we provide several test mode helpers so you can test your integration by triggering status changes yourself in test mode:\n\n*   [Activate a test mode design](https://docs.stripe.com/api/issuing/personalization_designs/activate_testmode)\n*   [Deactivate a test mode design](https://docs.stripe.com/api/issuing/personalization_designs/deactivate_testmode)\n*   [Reject a test mode design](https://docs.stripe.com/api/issuing/personalization_designs/reject_testmode)\n\n## Set a default personalization design![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo help streamline your integration, you can set a default personalization design so that you don’t need to explicitly specify a personalization design for every card you create.\n\nWhen creating or updating a personalization design, set the `is_default` preference to `true`. The `is_default` preference for the previous default design is automatically set to `false`, as there can only be one default.\n\n`curl https://api.stripe.com/v1/issuing/personalization_designs/ipcd_OhggKRta0zu2Te \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"preferences[is_default]\"=true`\n\nAfter you have a default set, any cards you create without specifying a personalization design automatically use the default. Trying to create a card without specifying a personalization design when you don’t have any defaults set results in an error.\n\nYou can always override the default personalization design when creating a card by specifying the `personalization_design` parameter.\n\n## Change personalization designs without deploying code using lookup keys![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome businesses built on Stripe Issuing offer multiple card products to their cardholders. The personalization design representing the card product can change over time. If you hardcode your personalization designs and you want to change them, the process often requires you to deploy new code. You can use [lookup keys](https://docs.stripe.com/api/issuing/personalization_designs/create#create_issuing_personalization_design-lookup_key) to remove the need to deploy new code when you want to change personalization designs.\n\nTo use lookup keys with personalization designs, you can assign a unique lookup key by passing the `lookup_key` parameter when creating or updating a personalization design. Instead of hardcoding a personalization design ID, you hardcode the lookup key value and query for the matching personalization design using the [personalization design list endpoint](https://docs.stripe.com/api/issuing/personalization_designs/list#list_issuing_personalization_designs-lookup_keys).\n\nTo improve performance, you might want to cache and/or only reload the personalization design occasionally. When it’s time to change the personalization design for a card product, you can create or update a new personalization design using the existing value for `lookup_key` while setting `transfer_lookup_key` to `true`.\n\n`curl https://api.stripe.com/v1/issuing/personalization_designs \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d physical_bundle=ics_Kc3MX9PPsUFFMp \\  -d card_logo=  {{FILE_ID}}   \\  -d \"carrrier_text[header_title]\"=Hello \\  -d lookup_key=\"My lookup key\" \\  -d transfer_lookup_key=true`\n\n## Manage personalization designs using Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen using Connect, personalization designs can be managed at both the platform and connected account levels, just as described above. However, Connect also grants you some ways to streamline your integration even further, by giving connected accounts access to resources at the platform level.\n\n### Personalization designs and physical bundles![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach of your connected accounts can access personalization designs and physical bundles created at the platform level. This means that you can:\n\n*   Issue cards from a connected account with a personalization design created on the platform.\n*   Create a personalization design on a connected account using a physical bundle available within the platform’s account. This allows you to create these resources on your platform account, and share them across all of your connected accounts. We recommend managing as much as possible at the platform level, unless there are any items that should explicitly be hidden from a connected account, or will only ever be used for specific connected accounts.\n\n### Default personalization designs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach of your connected accounts can set their own default personalization design. You can also [set a default personalization design](https://docs.stripe.com/api/issuing/personalization_designs/create#create_issuing_personalization_design-preferences-is_default) at the platform level. If set, the platform default is used when you issue a card for a connected account without specifying a design, and that connected account doesn’t have a default.\n\nIf you want issued cards to use the platform default, you can unset the default personalization design for the connected account.",
  "title": "Manage personalization designs | Stripe Documentation",
  "description": "Learn how to prepare and use personalization designs for creating physical cards.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/cards",
  "markdown": "# Create cards with the API\n\n## Learn how to create cardholders and issue cards.\n\nYou can create virtual and physical cards on Mastercard or Visa (or both) with the [Cards API](https://docs.stripe.com/api/issuing/cards). Cardholders can use [virtual cards](https://docs.stripe.com/issuing/cards/virtual) instantly after you create them. Stripe sends you [physical cards](https://docs.stripe.com/issuing/cards/physical) in the mail.\n\nYou can also create virtual and physical cards with the [Dashboard](https://dashboard.stripe.com/issuing/cards).\n\n[](#create-cardholder)\n\nThe [Cardholder](https://docs.stripe.com/api/#issuing_cardholder_object) object represents an individual or business entity that you can issue cards to. Create a `Cardholder` with a [name](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-name) to display on cards and the [billing](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-billing) address, which is often requested when the cardholder makes online purchases, and is usually the business address of the connected account or your platform.\n\nWhen you create a cardholder or update it later, you can include additional information such as a `phone_number` or `email`, which are required for some features like [digital wallets](https://docs.stripe.com/issuing/cards/digital-wallets). You can also specify [`preferred_locales`](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-preferred_locales) to customize the cardholder’s language for features such as [3D Secure](https://docs.stripe.com/issuing/3d-secure).\n\n`curl https://api.stripe.com/v1/issuing/cardholders \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"name\"=\"Jenny Rosen\" \\   -d \"email\"=\"jenny.rosen@example.com\" \\   -d \"phone_number\"=\"+18008675309\" \\   -d \"status\"=\"active\" \\   -d \"type\"=\"individual\" \\   -d \"individual[first_name]\"=\"Jenny\" \\   -d \"individual[last_name]\"=\"Rosen\" \\   -d \"individual[dob][day]\"=1 \\   -d \"individual[dob][month]\"=11 \\   -d \"individual[dob][year]\"=1981 \\   -d \"billing[address][line1]\"=\"123 Main Street\" \\   -d \"billing[address][city]\"=\"San Francisco\" \\   -d \"billing[address][state]\"=\"CA\" \\   -d \"billing[address][postal_code]\"=\"94111\" \\   -d \"billing[address][country]\"=\"US\"`\n\nStripe returns a `Cardholder` object that contains the information you provided and sends the `issuing_cardholder.created` [webhook](https://docs.stripe.com/webhooks) event.\n\n### Individual type cardholder requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe cardholder [type](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-type) defaults to `individual`, but you can [set the type](https://docs.stripe.com/issuing/other/choose-cardholder) to `company` if you choose.\n\nYou must provide values for the first and [last names](https://docs.stripe.com/api/issuing/cardholders/create#create_issuing_cardholder-individual-last_name) of individual cardholders, which Stripe screens in accordance with regulatory guidelines. Consider also providing [date of birth](https://docs.stripe.com/api/issuing/cardholders/create#create_issuing_cardholder-individual-dob), which might help reduce [watchlist reviews](https://support.stripe.com/questions/issuing-watchlist-reviews).\n\nIf you’re issuing cards to individuals for programs backed by Celtic Bank (not required for `company` type cardholders), you must record acceptance of the [Celtic Bank Authorized User Terms](https://stripe.com/legal/issuing/celtic-authorized-user-terms) before [activating](#activate-card) a card for that cardholder. See the [Required Agreements for Issuing and Treasury](https://docs.stripe.com/issuing/compliance-us) for more information about which agreements you’re required to present to accountholders and cardholders.\n\nIf applicable, Stripe alerts you to this requirement in the `requirements` property of the `Cardholder` object:\n\n`{   \"id\": \"ich_1MGlTC2eZvKYlo2CJnowP9Z5\",   \"name\": \"Jenny Rosen\",   ...   \"requirements\": {     \"disabled_reason\": \"requirements.past_due\",     \"past_due\": [       \"individual.card_issuing.user_terms_acceptance.date\",       \"individual.card_issuing.user_terms_acceptance.ip\",     ],   },   ... }`\n\nYou can accept the terms on behalf of the `Cardholder` by passing in the Unix timestamp of when the cardholder accepted their terms and also their IP address.\n\n`curl https://api.stripe.com/v1/issuing/cardholders/ich_1MGlTC2eZvKYlo2CJnowP9Z5 \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"individual[card_issuing][user_terms_acceptance][date]\"=1470266163 \\  -d \"individual[card_issuing][user_terms_acceptance][ip]\"=\"91.121.146.224\"`\n\nWhen you’ve met the requirements for card activation (such as first and last names, plus proof of user terms acceptance) you can activate cards for them.\n\n[](#create-card)\n\nCreate a [Card](https://docs.stripe.com/api#issuing_card_object) and assign it to the cardholder. This request contains the ID of the `Cardholder` object, `currency`, and `type` (either `virtual` or `physical`) of the card.\n\nCreating a physical card requires a shipping address, and you can provide [additional arguments](https://docs.stripe.com/issuing/cards/physical/standard#shipping-your-cards) to specify shipment packaging and delivery service.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d cardholder=ich_1MGlTC2eZvKYlo2CJnowP9Z5 \\  -d currency=usd \\  -d type=virtual`\n\nStripe returns a `Card` object upon creation, and sends the `issuing_card.created` [webhook](https://docs.stripe.com/webhooks) event.\n\n[](#activate-card)\n\nFor [authorizations](https://docs.stripe.com/issuing/purchases/authorizations) to be approved on a card, its `status` must be set to `active`. [Past-due requirements](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-requirements-past_due) block card activation.\n\n### Activate on creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can activate the card when creating it using the Dashboard or the API. In the Dashboard, when creating a card, click **Activate card**. Using the API, set `status` to `active` when using the [create card](https://docs.stripe.com/api/#create_issuing_card) endpoint.\n\n### Activate after creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlternatively, after creating an inactive card, you can activate it using the Dashboard or the API. To activate it using the Dashboard, select the card you want to activate, then click **Activate card**. To activate it using the API, use the [update card](https://docs.stripe.com/api#update_issuing_card) endpoint to set its `status` to `active`.\n\n`curl https://api.stripe.com/v1/issuing/cards/ic_1Cm3paIyNTgGDVfzBqq1uqxR \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d status=active`\n\n### Re-activate after blocking![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn some cases, multiple incorrect PIN attempts on a transaction deactivates a card, preventing further authorizations. To reactivate the card, use the Dashboard or the [update card](https://docs.stripe.com/api#update_issuing_card) API to set the card’s `status` to `active`.",
  "title": "Create cards with the API | Stripe Documentation",
  "description": "Learn how to create cardholders and issue cards.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/cards/get-support",
  "markdown": "# Get support for self-service cards\n\n## Learn who to contact for support with self-service cards.\n\nBecause of the different logos displayed on the back of our Issuing cards, it can often be unclear who users should contact for support issues (for example Stripe, Visa, or their platform).\n\n![Card with branded logo](https://b.stripecdn.com/docs-statics-srv/assets/card_design_stripe_logo.dea346f5e114ab1b898b765ba94d9e9b.png)\n\nA branded card design\n\nBelow we’ve outlined who your point of contact should be with Issuing cards depending on your use case.\n\n### End-user![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’ve been provisioned a card by an entity, reach out directly to them for support issues—Stripe can’t assist end users directly.\n\n### Platform user![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re receiving questions from users of your provisioned cards, you can [request support](https://support.stripe.com/contact/login) from Stripe. Make sure to inform your cardholders that they need to reach out to you for support issues.",
  "title": "Get support for self-service cards | Stripe Documentation",
  "description": "Learn who to contact for support with self-service cards.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/marketing-guidance-europe-uk",
  "markdown": "# Stripe Issuing marketing guidelines | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about marketing guidelines for Issuing programs in the United Kingdom and Europe.\n\n#### Note\n\nRequirements as of 1 June 2022\n\n## Scope of application![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese marketing guidelines only apply when you’re marketing Stripe’s Issuing product and services. If you’re only using Stripe Issuing for your own business expenses (and not to facilitate or provide services to your customers) then we wouldn’t expect you to carry out any marketing of Stripe’s products and services (so these marketing guidelines wouldn’t apply).\n\n## Basic Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo offer and promote Stripe’s Issuing products in the United Kingdom and countries within Europe, your user interfaces and advertising must adhere to the guidelines outlined in this document. We’re providing these guidelines to help you navigate the financial regulations that govern the messaging you can use to describe our Issuing product. Deviation from these guidelines can result in poor user experiences and potential regulatory consequences for both you and Stripe. As such, consult both your in-house Legal team and Stripe’s compliance team ([platform-compliance@stripe.com](mailto:platform-compliance@stripe.com)), if it’s unclear how to apply these guidelines to your user interfaces or advertising.\n\nWe’ve organized the relevant information for you in the following components:\n\n*   Messaging guidelines\n*   Pre-approved messages\n*   Language\n*   Prohibited types of marketing\n*   User agreements\n*   Required legal disclosures\n*   Record keeping and monitoring\n\n## Messaging Guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn the context of marketing, financial regulations require user interfaces and advertising to be fair, clear, and not misleading (taking into account how the advertising is communicated and whom it is directed to).\n\nAll statements must be factual and no important facts can be omitted.\n\n*   A misleading statement or omission is “important” if it’s likely to affect the choice of a product or the attitude towards it.\n    *   Price and cost are considered important and should therefore be revealed in the main message.\n    *   Advertising must not emphasize any potential benefits of the product without also giving a fair and prominent indication of any relevant risks:\n*   Statements must be factual and verifiable\n*   Disclaimers may not contradict factual statements, they may only explain or modify them.\n*   Advertising shouldn’t describe a feature of a product or service as “guaranteed,” “protected,” or “secure,” or use a similar term unless (1) those phrases constitute a fair, clear, and not misleading description of the feature of product and (2) the advertising communicates all of the necessary information, and presents that information with sufficient clarity and prominence, and uses the terms fair, clear, and not misleading.\n*   Advertising relating to a currency transfer service is likely to be misleading if it presents an exchange rate in a way that’s likely to give the impression that the rate is available to a person or a class of persons but in reality that rate is unlikely to be obtained by that person or class of persons with respect to a typical transaction.\n\nAll materials must clearly, prominently, and correctly state important terms, including:\n\n*   Costs, benefits, and other fundamental points of the products or services offered\n*   Related products or services offered as an option or requirement to obtain certain terms\n*   Important limitations or conditions on the terms or availability of products and services, such as time limitations for favorable rates, promotional features, expiration dates, prerequisites for obtaining specific products or services, or conditions for canceling services\n*   Certain “trigger” words that might require additional legal statements (for example, “free,” “until,” “pre-approved,” “fixed”)\n*   If advertising compares a product or service with that offered by another provider, the provider must make sure that the comparison is meaningful and presented in a fair and balanced way.\n\nYou must draw the user’s attention to fundamental terms, such as limitations and conditions, which are important for the user to make an informed decision.\n\n*   Consider the four **location principles** for providing information: prominence, presentation of information (text size, formatting, on-screen readability), placement of qualifying information, and proximity of all information relevant to the evaluated messages.\n*   Consider the “big impression” and whether you’re conveying important information or possibly ignoring it.\n\nAvoid images that imply affiliation with, or endorsement of, celebrities, or government entities.\n\nEvaluating marketing materials from a “common user” point of view.\n\n*   To determine whether an act or practice is misleading, consider whether your user’s interpretation or reaction to a statement, omission, act, or practice is reasonable in the given circumstances. In other words, whether an act or practice can be unfair or deceptive depends on how a member of the expected audience (its customers) would interpret the statement.\n\nProof of the claim\n\n*   Advertised claims must be substantiated, whether explicit or implicit. “Evidence” means that there must be a reasonable basis for each claim.\n    *   You must disclose limitations necessary to make sure that the claim isn’t false, fraudulent, or misleading.\n    *   You must distinguish “exaggerations,” which don’t need to be substantiated, from allegations. Exaggerations are subjective and generally can’t be proved whether they’re true or false.\n    *   Be careful with using “absolute” terms in the claim like “all,” “only,” or “always” without qualification, these words suggest that there can be no exceptions to the claim.\n\nYou must refrain from terms that could imply that this product can be used for consumer purposes.\n\n*   Don’t refer to contractor earnings as “wages.”\n*   Don’t use terms like “Personal Account” or “Consumer Account” to describe the product.\n*   Don’t use marketing phrases that promote consumer use cases (for example, “Spend funds to buy the things you love!”).\n*   Don’t describe the card as a “credit card.” This is a commercial prepaid program.\n*   Don’t market “transferring money” or “sending money” without approved language from Stripe.\n*   Don’t use words like “bank account,” “deposit account,” “checking account” or similar terms that connote a traditional bank account product.\n*   Don’t market through advertising mediums which are exclusively dedicated to consumers.\n\nDisparaging remarks about other financial products\n\n*   Don’t disparage debit, credit, bank accounts, banks, or other financial products used or issued by financial institutions.\n\nUse of “Registered” or ® markings\n\n*   Generally, the brand requirements are that the brand name use the required registration marks. However, after you mention the brand name once, you can stop using it—this is for the same document or material only (for example, your card carrier). We recommend that you use “superscript” in all ® representations.\n\nMarketing of other products and services\n\n*   If you advertise products or services other than those provided by Stripe, you must make it clear that those products or services aren’t provided by Stripe.\n*   If those products or services are regulated financial products, you must not advertise them unless you have the requisite regulatory authorization.\n\nInternational Marketing\n\n*   Although you can ship cards to international addresses for locally domiciled cardholders, you must not engage in marketing the Issuing Program to persons located outside of your relevant jurisdiction (either the UK or Europe as appropriate). This includes advertising or promoting Issuing through marketing channels such as social media, email, and paid search results. As with all other aspects of the Issuing program, you must comply with Card Network rules in connection with marketing activities.\n\n## Summary checklist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour marketing team should be familiar with these guidelines as they design advertising campaigns and web pages that market your Stripe Issuing program. Here are some additional considerations for your content:\n\nIf mentioning specific product details like, terms, costs, fees, dollar benefits, or any ‘numbers’, make sure they’re accurate:\n\n*   Ask: Is it true? How do you know it’s true? Can you prove it with stored data or a reputable source, if asked?\n*   Ask: Can most users achieve any promised results, and can you prove it, if asked?\n*   Ask: Do those figures require additional information so users know how they’re achievable? If so, have you disclosed that additional information?\n*   Ask: Are the product details explained fully?\n\nHere are claims that end up requiring a lot of documentation, and are therefore often avoided:\n\n*   Hard to prove claims like: “free”—if you’d like to use this claim contact [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com)\n*   Absolute claims: “best,” “#1 or number 1,” “every,” “only,” “all,” “always,” “will get”, or “you’ll get”\n*   Credit-related statements: “pre-approved,” “fixed,” “earn interest”\n*   Don’t leave out key details users should know before signing up\n\nAlways prohibited\n\n*   Fake testimonials or quotes about the services\n\n## Language![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen marketing services and products offered by Stripe, you must use either (a) English or (b) one of the official or commonly used languages of the country where your customer resides.\n\n## Prohibited types of marketing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUnless approved by Stripe in writing, you must not market Stripe’s products and services through any of the following types of marketing channels:\n\n*   Telemarketing\n\n## User agreements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must present user agreements to your prospective customers before they submit their application. This allows businesses to fully understand the terms and conditions of the product before entering into a contract to use Stripe Issuing services. There are a few user agreements that prospective customers need access to depending on their geographic location, including:\n\n*   [Stripe Services Agreement - UK](https://stripe.com/gb/legal/ssa)\n*   [Stripe Services Agreement - EU](https://stripe.com/ie/legal/ssa)\n*   Your platform’s terms and conditions\n\nYour platform’s terms and conditions must clearly outline any fees or credits that you plan to offer your customers and any activities or qualifications that they need to meet for the fee or credit to be applied.\n\nAdditionally, your customers’ cardholders should be prompted to accept the [Authorized User Terms](https://stripe.com/en-gb/issuing/authorized-users) before activating their cards.\n\n## Pre-approved messages![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause marketing regulations can be cumbersome, we provide pre-approved messaging for communicating the key points of the Stripe Issuing program in your user-facing materials.\n\nWe allow non-substantive changes to these messages as long as the key information remains the same. Any substantive changes require approval from Stripe’s compliance team. Approvals can take up to 10 business days to process.\n\n| Category | Suggested Messaging |\n| --- | --- |\n| Limitations on card program use | Cardholders can only use the Card Program for commercial purposes (which means the payment of business expenses), and not for personal, family, or household purposes. |\n| Currency | All Card Program cards are GBP or EUR denominated. |\n| Where cards can be accepted for payment | Card Program cards can be used anywhere that accepts Visa cards. |\n| Where cards can be issued | Card Program cards can only be issued to cardholders who are UK or European incorporated companies or sole traders residing in the United Kingdom or Europe and who have a verifiable physical UK European street address (no P.O. Boxes). |\n| Speed of virtual card issuance | Instantly access your own virtual card |\n| Speed of physical card issuance | Receive your physical card in a matter of days |\n\n## Required Legal Disclosures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor legal reasons, we require that all marketing, including user interfaces and advertisements, include this disclosure:\n\nFor UK users:\n\n> Cards are issued by Stripe Payments UK Limited, which is an electronic money institution authorized by the Financial Conduct Authority (firm reference number: 900461) for the issuing of electronic money. Cards are issued under the Visa card scheme pursuant to a license from Visa Europe Limited.\n\nFor European users:\n\n> Cards are issued by Stripe Technology Europe Limited, an electronic money institution authorized by the Central Bank of Ireland (firm reference number: C187865). Cards are issued under the Visa card scheme pursuant to a license from Visa Europe Limited.\n\nIncluding this disclosure is an essential element of managing your Stripe Issuing program. It gives your users the information they need to validate the legitimacy of the program and escalate complaints to our regulators, if needed.\n\nThe disclosure may be placed on your marketing in an area of your choosing, as long as the location follows the location principles described in the [“Messaging Guidelines”](#messaging-guidelines) above. Typically our customers opt to place the disclosures towards the end of their webpage, social media, or email marketing.\n\n## Space constrained advertisements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re planning to market through a medium with character limitations which prohibits the full disclosure as set out above (such as in a social media advertisement), include a shortened version of the required legal disclosure, and a link within the advertisement that redirects a user to a webpage with the full legal disclosure.\n\n> “Cards issued by Stripe”\n\n## Record keeping and monitoring![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo demonstrate your adherence to the requirements listed above, we ask that you keep thorough records of all marketing materials, customer data, account information, and other disclosures you make to customers for at least 5 years.\n\nStripe might occasionally ask you for copies of your marketing materials to make sure they adhere to these guidelines. You must provide copies of these materials within 10 business days of receiving a review request and agree to make any changes that Stripe requests as a result of the review.",
  "title": "Stripe Issuing marketing guidelines | Stripe Documentation",
  "description": "Learn about marketing guidelines for Issuing programs in the United Kingdom and Europe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/cards/physical/testing",
  "markdown": "# Testing physical card shipment | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to test physical card fulfilment and simulate the shipping process.\n\nA physical card starts off with its shipping status as `pending` by default. As it progresses through fulfillment, subsequent possible values include: `shipped`, `delivered`, `returned`, `failure`, and `canceled`.\n\nRefer to the following diagram to see how the status transitions for physical card shipping:\n\nIn test mode, you can update a card’s shipping state yourself to test out the different values. You can only use cards created in test mode for testing within your Stripe account and not for external purchases. No cards are actually shipped in test mode.\n\nYou can simulate shipping a card by updating its shipping status in the Dashboard.\n\n[](#without-code-create-card)\n\nUse the [Dashboard](https://dashboard.stripe.com/issuing/cards) to create a cardholder and **physical card** in test mode.\n\n[](#without-code-ship-card)\n\n1.  In the Dashboard, first make sure you’re viewing test data.\n2.  Go to the [Issuing Cards page](https://dashboard.stripe.com/issuing/cards) and find your newly-created card.\n3.  Scroll to the **Card details** section.\n4.  Click **Update shipping status** and select the shipping action you want to simulate (for example, `Ship`).\n5.  Click **Submit** to apply your update and refresh the page.",
  "title": "Testing physical card shipment | Stripe Documentation",
  "description": "Learn how to test physical card fulfilment and simulate the shipping process.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/controls/spending-controls",
  "markdown": "# Issuing spending controls | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Issuing to set rules on cards and cardholders to control spending.\n\nYou can use spending controls to block [merchant categories](https://docs.stripe.com/issuing/categories) (for example, bakeries), [countries](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-merchant_data-country), or [merchant IDs](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-merchant_data-network_id), and to set spending limits such as 100 USD per authorization or 3000 USD per month. You can apply them to both [Cards](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-spending_controls) and [Cardholders](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-spending_controls) either by setting their `spending_controls` fields when you create them or by updating them later.\n\nThe `spending_controls` object has the following structure:\n\n| Field |     | Type | Description |\n| --- | --- | --- |\n| `allowed_categories` |     | array | List of [categories](https://docs.stripe.com/issuing/categories) of authorizations to allow. All other categories will be blocked. |\n| `blocked_categories` |     | array | List of [categories](https://docs.stripe.com/issuing/categories) of authorizations to decline. All other categories will be allowed. |\n| `spending_limits` |     | array | List of [objects](https://docs.stripe.com/issuing/controls/spending-controls#spending-limits) that specify amount-based rules. |\n| `allowed_merchant_countries` |     | array | List of merchant [countries](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-merchant_data-country) to allow authorizations from. Authorizations from all other countries are blocked. |\n| `blocked_merchant_countries` |     | array | List of merchant [countries](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-merchant_data-country) to block authorizations from. Authorizations from all other countries are allowed. |\n\nSpending controls run before [real-time authorizations](https://docs.stripe.com/issuing/controls/real-time-authorizations) and can decline a purchase before the `issuing_authorization.request` is sent, resulting in a declined `issuing_authorization.created` event.\n\n#### Note\n\nMerchant ID spend controls are currently limited to beta users. You must be an Issuing customer to join the beta. To request access to the beta, Contact Stripe for more information.\n\n## Spending limits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSpending limit rules limit the total amount of spending for categories over intervals of time.\n\nThe `spending_limits` field within `spending_controls` is a list of objects that have the following structure:\n\n| Field | Type | Description |\n| --- | --- | --- |\n| `amount` | integer | Maximum spend, in the currency of the card. Amounts in other currencies are converted to the card’s currency when evaluating this control. This amount is in the card’s currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal). |\n| `interval` | enum | Time interval that the amount applies to. See the [Card spending\\_controls](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-spending_controls-spending_limits-interval) for the possible values. All date-based intervals start at midnight UTC. |\n| `categories` | array (optional) | List of [categories](https://docs.stripe.com/issuing/categories) this limit applies to. Omitting this field will apply the limit to all categories. |\n\n#### Note\n\nIf you don’t set `spending_limits`, a default spending limit is applied to the newly created card in the amount of 500 USD per day. [Contact Support](https://support.stripe.com/contact/login) to disable this behavior.\n\n#### Note\n\nIn addition to the `spending_limits` configured on card, a default spending limit in the amount of 10000 USD is also applied to each authorization. This isn’t configurable. [Contact Support](https://support.stripe.com/contact/login) to disable this behavior.\n\nA card’s spending limits apply across any cards it replaces (that is, its [replacement\\_for](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-replacement_for) card and _that_ card’s [replacement\\_for](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-replacement_for) card, up the chain). A cardholder’s spending limits apply across all of their cards.\n\nEach spending limit only applies to its own categories. Spending limits alone do not block categories and should be used with either `allowed_categories` or `blocked_categories` to restrict spending to specific business types.\n\nIf a cardholder has overlapping spending limits (for example, 100 USD per authorization and 50 USD per authorization for their card), the most restrictive spending control applies.\n\nAdditional tips and fees can be [posted at a later time](https://docs.stripe.com/issuing/purchases/transactions?issuing-capture-type=over_capture), causing a spending limit to be exceeded.\n\n## Examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following examples demonstrate different uses of spending controls for cards and cardholders.",
  "title": "Issuing spending controls | Stripe Documentation",
  "description": "Learn how to use Issuing to set rules on cards and cardholders to control spending.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/compliance-us",
  "markdown": "# Treasury and Issuing product marketing, design, and compliance guidelines\n\n## Learn how to keep your Treasury or Issuing program and marketing campaigns compliant.\n\n#### Legal Disclaimer\n\nDon’t consider any of the information in this guide as legal advice. If you use Stripe Treasury and Stripe Issuing, consult your own legal counsel for advice about product branding and using Stripe products to offer financial services.\n\nTo offer and promote Stripe Treasury and Issuing products to your customers and connected accounts, your marketing and user interfaces must adhere to the guidelines that we outline here. These guidelines help you navigate the financial regulations that apply to Stripe products. We’ve organized them into the following sections:\n\n*   [Account management](#account-management)\n*   [Required agreements and disclosures for Issuing](#issuing-terms)\n*   [Required agreements and disclosures for Treasury](#treasury-terms)\n*   [Required agreements and disclosures for fees, credits, and rewards programs](#fees-credits-rewards-terms)\n*   [Customer communications and documents](#customer-communications-and-documents)\n*   [Going live and marketing](#going-live)\n*   [Recordkeeping](#recordkeeping)\n\nThe following table outlines the steps you must complete before onboarding your first connected accounts. If you need help, contact the Stripe Compliance team at [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com).\n\nIf you make changes to any items in the table at a later date, you must submit a request to the Stripe Compliance team using the [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835).\n\n| Topic | Checklist | Product applicability |\n| --- | --- | --- |\n| Application flow | Your application flow:<br><br>*   Includes bank disclosures<br>*   Includes required agreements<br>*   Required KYC fields<br>*   Approved by Stripe Compliance | Treasury and Issuing |\n| Fees and credits | You’ve [submitted your planned fees and credits to Stripe](https://docs.stripe.com/treasury/compliance#fees-credits-rewards-terms) | Treasury and Issuing |\n| Marketing and user interfaces | Your marketing materials, including your website landing pages, dashboards, and support pages:<br><br>*   Are approved by Stripe Compliance (or align with messaging guidelines)<br>*   Include bank disclosures | Treasury and Issuing |\n| Customer service channels | Your customers can access your customer service channels and they can:<br><br>*   Submit complaints<br>*   Submit disputes | Treasury and Issuing |\n| Account statements (optional) | If you choose to send account statements, they must:<br><br>*   Be approved by Stripe Compliance<br>*   Include Bank disclosures and relevant contact information | Treasury |\n| Receipts | You have a mechanism to send your customers Stripe-generated money transmission receipts | Treasury and Issuing |\n| Regulated customer notices | You send regulated customer notices to applicants and accountholders, and they’re either:<br><br>*   Sent by Stripe on your behalf<br>*   Sent by your platform with templates approved by Stripe Compliance | Issuing Spend Card and Charge Card |\n| Recordkeeping | You have a mechanism to retain copies of:<br><br>*   Customer consent to open accounts<br>*   Marketing materials and user interfaces<br>*   Customer communications, such as support emails<br>*   Account statements, if applicable | Treasury and Issuing |\n\n## Account management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou need the proper internal compliance controls before launching Stripe Treasury or Stripe Issuing. You also need to build the processes described in this section into your various workflows, customer service, and product channels.\n\n### Complaints program guidance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nComplaints are any expression of dissatisfaction with a product, service, policy, or employee related to Stripe Treasury or Stripe Issuing, except those expressions made by employees of your company. Properly handling complaints is mandatory when offering financial services products. See the [Handling complaints](https://docs.stripe.com/treasury/handling-complaints) guide for detailed complaint management requirements.\n\n### Disputes and charge errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs part of providing customer support, you might be notified of suspected disputed charges, charge errors, or both. The two most common types of disputes or errors are:\n\n*   You or your customer believe a charge is unauthorized\n*   You or your customer see an error on an account statement\n\nIf these errors occur, submit the dispute through the Stripe Dashboard. Select the relevant transactions and choose **Dispute**. Be prepared to provide Stripe with specific information to investigate the dispute, such as:\n\n*   Details about the authorized user\n*   Details about the disputed charge amount\n*   The transaction date\n*   An explanation of why the disputed charge is an error or unauthorized\n\nYou must report any disputed charge or error immediately upon notification of it. Failure to do so might impact your financial liability. To avoid a sustained reduction to your available balance, you can pay the disputed charge while we determine the validity of the dispute. If Stripe deems the dispute valid, we credit the disputed charge amount back to the appropriate account.\n\n### Application flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour platform must provide for three main compliance requirement workflows:\n\n*   Collection of required KYC information\n*   Presentation of the required bank disclosure\n*   Ensuring that your applicant reads and accepts the required legal agreements\n\n## Required agreements and disclosures for Issuing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re a platform and you’re not using Stripe-hosted onboarding, you must present the following program-specific agreements and disclosures for your connected accounts to accept during their account opening process. You must also provide them with ongoing access to these agreements.\n\n### Spend card users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n_Connected Account Agreements and Disclosures._\n\nYou must provide the following agreements to your connected accounts before they can start using the Stripe Issuing Spend Card Program:\n\n*   [Stripe Connected Account Agreement](https://stripe.com/legal/connect-account)\n*   [Stripe Issuing Accountholder Terms](https://stripe.com/legal/issuing-accountholder)\n*   **Issuing Bank Terms**\n    *   _Celtic Bank Users only:_ [Issuing Bank Terms - Spend Card (Celtic Bank)](https://stripe.com/legal/celtic-spend-card)\n    *   _Cross River Bank Users only:_ [Issuing Bank Terms - Spend Card (Cross River Bank)](https://stripe.com/legal/issuing/crb-spend-card)\n*   **Apple Pay Terms** (if enabled for your program)\n    *   [Apple Pay Accountholder Terms](https://stripe.com/issuing/celtic/apple-payment-platform-program-manager-customer-terms-and-conditions/legal#exhibit-c-pass-through-provisions)\n\nIn addition to the above agreements, you must provide the following disclosures to your connected accounts before they can start using the Stripe Issuing Spend Card Program:\n\n*   **Electronic Signature Consent**: You must include text near the “Issuing Bank Terms” link that states: “By clicking “submit application,” you agree to the Issuing Bank Terms, Stripe Connected Account Agreement, and Stripe Issuing Accountholder Terms, and you consent to electronic signatures as set forth in the Issuing Bank Terms.”\n*   **Commercial Financing Disclosure**: For Connected Accounts with a business address in CA, NY, or UT, you must present one of the following disclosures:\n    *   For platforms that don’t charge fees:\n        *   _Celtic Bank Users only:_ [Commercial Financing Disclosure (Celtic Bank) (no fee)](https://stripe.com/legal/issuing-offer-document)\n        *   _Cross River Bank Users only:_ [Commercial Financing Disclosure (Cross River Bank) (no fee)](https://stripe.com/legal/crb-issuing-offer-document)\n    *   For platforms that charge a $0.10 fee when creating cards for users:\n        *   _Celtic Bank Users only:_ [Commercial Financing Disclosure (Celtic Bank) (fee included)](https://stripe.com/legal/issuing-offer-document-fees)\n        *   _Cross River Bank Users only:_ [Commercial Financing Disclosure (Cross River Bank) (fee included)](https://stripe.com/legal/crb-issuing-offer-document-fees)\n    *   For platforms that charge fees other than a $0.10 fee when creating cards for users:\n        *   If you charge fees beyond Stripe’s fee of 0.10 USD, you might be required to create your own commercial financing disclosure to present to your connected accounts for creating virtual cards. You must report custom fees through Stripe’s [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835), and you must submit custom commercial financing disclosures to [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com). Both the custom fee and custom disclosure are subject to Stripe’s review and approval. To assess the applicability of commercial financing disclosures to your program, contact [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com).\n\n_Authorized User Agreements and Disclosures._\n\nIf you or your connected accounts create an `individual` type [Cardholder](https://docs.stripe.com/api/issuing/cardholders/object), also known as an “authorized user,” you must present to cardholders—typically during the card activation process—the following agreements:\n\n*   [Stripe E-Sign Disclosure](https://stripe.com/issuing/e-sign-disclosure/legal)\n*   Authorized User Terms\n    *   _Celtic Bank Users only:_ [Authorized User Terms (Celtic Bank)](https://stripe.com/legal/issuing/celtic-authorized-user-terms)\n    *   _Cross River Bank Users only:_ [Authorized User Terms (Cross River Bank)](https://stripe.com/legal/issuing/crb-authorized-user-terms)\n\n### Charge card users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n_Connected Account Agreements and Disclosures._\n\nYou must provide the following agreements to your connected accounts before they can start using the Stripe Issuing Charge Card Program:\n\n*   [Stripe Connected Account Agreement](https://stripe.com/legal/connect-account)\n*   [Stripe Issuing Accountholder Terms](https://stripe.com/legal/issuing-accountholder) or Custom Platform Accountholder Terms\n*   **Issuing Bank Terms**\n    *   _Celtic Bank Users only:_ [Issuing Bank Terms - Charge Card (Celtic Bank)](https://stripe.com/legal/celtic-charge-card)\n    *   _Cross River Bank Users only:_ [Issuing Bank Terms - Charge Card (Cross River Bank)](https://stripe.com/legal/issuing/crb-charge-card)\n*   **Apple Pay Terms** (if enabled for your program)\n    *   [Apple Pay Accountholder Terms](https://stripe.com/issuing/celtic/apple-payment-platform-program-manager-customer-terms-and-conditions/legal#exhibit-c-pass-through-provisions)\n*   **Card Program Terms**: These are your bespoke program terms that supplement the Issuing Bank Terms. At a minimum, consider including the following items in your terms. Consult your legal counsel about which items to define within your own Card Program Terms.\n    *   Repayment methods, including automatic withdrawal consents\n    *   Billing cycles, including due dates\n    *   Fees\n    *   Rewards\n    *   Credit limits\n    *   Account closure requirements\n\nIn addition to the above agreements, you must provide the following disclosures to your connected accounts before they can start using the Stripe Issuing Spend Card Program:\n\n*   **Electronic Signature Consent**: You must include text near the **Issuing Bank Terms** link stating that signing the Issuing Bank Terms signifies consent to electronic signatures and communications. For example, your message might read: “By clicking the submit application button, you agree to the Issuing Bank Terms, Stripe Connected Account Agreement, and Stripe Issuing Accountholder Terms; and you consent to electronic signatures as set forth in the Issuing Bank Terms.”\n*   **Commercial Financing Disclosure**: For connected accounts with a business address in CA, NY, or UT, you must present your own custom commercial financing disclosure. You must report custom fees through Stripe’s [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835), and you must submit custom commercial financing disclosures to [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com). Both the custom fee and custom disclosure are subject to Stripe’s review and approval. Contact [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com) to assess the commercial financing disclosure requirements of your program.\n\n**Authorized User Agreements and Disclosures.**\n\nIf you or your connected accounts create an `individual` type [Cardholder](https://docs.stripe.com/api/issuing/cardholders/object), also known as an “authorized user,” you must present to cardholders—typically during the card activation process—the following agreements:\n\n*   [Stripe E-Sign Disclosure](https://stripe.com/issuing/e-sign-disclosure/legal)\n*   Authorized User Terms\n    *   _Celtic Bank Users only:_ [Authorized User Terms (Celtic Bank)](https://stripe.com/legal/issuing/celtic-authorized-user-terms)\n    *   _Cross River Bank Users only:_ [Authorized User Terms (Cross River Bank)](https://stripe.com/legal/issuing/crb-authorized-user-terms)\n\n### Commercial prepaid debit users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must provide the following agreements to your connected accounts before they can start using the Stripe Issuing Commercial Prepaid Debit Card Program:\n\n*   [Stripe Connected Account Agreement](https://stripe.com/legal/connect-account)\n*   [Stripe Issuing Accountholder Terms](https://stripe.com/legal/issuing-accountholder)\n*   [Issuing Bank Terms (Sutton Bank)](https://stripe.com/legal/issuing/commercial-prepaid-sutton-terms)\n\n**Authorized User Agreements and Disclosures.**\n\nIf you or your connected accounts create an `individual` type [Cardholder](https://docs.stripe.com/api/issuing/cardholders/object), also known as an “authorized user,” you must present to cardholders—typically during the card activation process—the following agreements:\n\n*   [Stripe E-Sign Disclosure](https://stripe.com/issuing/e-sign-disclosure/legal)\n*   [Sutton Bank Authorized User Terms](https://stripe.com/legal/issuing/sutton-authorized-user-terms)\n\n## Required agreements and disclosures for Treasury ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou must provide the following terms of service to your connected accounts and record their agreement before they can start using the Stripe Treasury Program:\n\n*   [Stripe Services Agreement](https://stripe.com/legal/ssa)\n*   [Stripe Treasury Terms - Connected Accounts](https://stripe.com/legal/ssa#services-terms)\n\n## Required agreements and disclosures for fees, credits, and rewards programs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn addition to the previous agreements, your terms of service and fee schedule must clearly outline the fees and terms that you implement as part of your Treasury or Issuing program.\n\nYou must report to Stripe the details of any fees, credits, and rewards programs that you plan to offer. That helps make sure your user interfaces and marketing materials are compliant with financial regulations regarding fees or offer credits, especially in the form of rewards programs. Use the [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835).\n\n## Customer communications and documents![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo comply with applicable laws and regulations, you must send certain communications to both your applicants and accountholders upon certain trigger events.\n\nTo learn about customer communication requirements when using Issuing and Treasury together, see [Issuing regulated customer notices](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices).\n\n### Statements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nProviding statements, while optional, is a best practice that allows your Treasury or Issuing customers to periodically check their transaction history. If you send statements, make sure they contain the following information:\n\n*   \\[Company\\] name and address.\n*   Your company’s customer support contact number and website\n*   Customer account number\n*   Customer name and address\n*   Required disclosures\n*   Transaction history (including opening and closing balances for the statement period)\n*   Fees and credits.\n*   Information about how you resolve errors and complaints\n\n### Receipts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne of the most important ongoing obligations you have in overseeing your Treasury or Issuing program is providing your customers with money transmissions receipts. Every regulated transaction your customers initiate generates a compliant money transmission receipt URL that you must share with your customer. You can provide these URL receipts in a few different ways, such as emailing them or making them available in your customer’s Dashboard. See the [Regulatory receipts guide](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) for more information on how to access hosted receipts. If you plan to charge your connected account owners any fees, whether they’re transactional or monthly recurring, include a description of the fee on the receipt so that they can reconcile it to corresponding transactions or monthly statements.\n\n## Going live and marketing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following information pertains to marketing and releasing your Stripe Treasury or Issuing programs to the public.\n\n### General requirements for marketing your account offerings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAny message or communication you provide to the public for financial products or services they don’t currently use must be truthful and fair, and in the interest of your potential customers.\n\n### UDAP and correct messaging![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFederal regulation prohibits unfair and deceptive acts or practices (UDAP). To avoid UDAP violations, you must think of the end user first when developing and deploying any marketing materials.\n\nMake sure that marketing materials use clear messaging that fully explains product features, costs, benefits, and limitations. Don’t leave out key terms or fees, and don’t advertise product uses or features that aren’t true.\n\n| Do  | Don’t |\n| --- | --- |\n| Only use statements about products that are true, accurate, and aligned with how users engage with the products. | Don’t leave out key information from marketing content. If the information is likely to affect whether someone uses the product, then it’s “key.\" |\n| If you make claims that require additional data to support them, or if an end user needs to know more details to know how a certain claim is true, you must:<br><br>*   Provide documented evidence<br>*   Disclose that information | Make exaggerated claims that are hard to prove. Don’t make absolute statements that are disproved by a single exception. For example, “number 1,\" “every,\" “only,\" “all,\" “never,\" “always.\" |\n| Clearly explain all qualifying limitations and requirements needed by end users to get the product or features that you’ve advertised. | Don’t advertise features or programs that only a few applicants actually qualify for. |\n| All disclosures must meet a “clear and conspicuous” standard:<br><br>*   Font size must be large enough to read.<br>*   Font color must visibly contrast with the background.<br>*   Dynamic or video ads must have the disclosure on screen long enough to be read. | Don’t make disclosures hard to read. |\n| Disclosures used to explain or modify a claim must be tied to the claim they’re explaining.<br><br>*   Use a hyperlink directly linking to the disclosure (or include the disclosure next to the claim in the copy itself)<br>*   Use reference text or symbols (an asterisk, for example) directly after the claim and before the disclosure language. | Don’t bury disclosures in other non-key disclosures or footnotes. |\n| Disclose all account fees, costs, benefits, and terms as part of onboarding before your end users take out a product. | Don’t advertise products as “free” if you’re charging fees. |\n| Make sure all images used are properly licensed and that you can document this fact. | Don’t use images, formatting, or copy that implies products are endorsed by, or affiliated with, government entities or celebrities. |\n\n### Messaging guidelines![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following suggested messaging guidelines to convey key aspects of Stripe Issuing, Stripe Treasury, or both programs. Stripe or our banking partners have validated (proven as true) this content, so you can confidently use this messaging in user-facing materials.\n\n*   [Issuing](#issuing-messaging-guidelines)\n*   [Treasury](#treasury-messaging-guidelines)\n\nThe following tables include validated content you can provide in your marketing campaigns. You can make non-substantive changes (for example, changing the design or infusing your brand’s voice) to the suggested messaging as long as the key information remains the same. Any substantive deviations from these guidelines require you to submit marketing materials and get approval from Stripe and our bank partners. Approvals might take up to 10 business days to process.\n\nYou’re responsible for training employees on these requirements if they engage in marketing or sales activities for your Treasury or Issuing program.\n\n#### Issuing messaging guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following table provides guidelines for you to follow when developing messaging around your Issuing program.\n\n| Topic category | Do  | Don’t |\n| --- | --- | --- |\n| Logo and name usage | Your card program name and your brand name must have equal status, as with plain text: Widget balance® + Stripe. When referencing registered brand products, you must adhere to their separate brand guidelines. You only need to use the ®, ™, SM, mark once per asset. | Don’t maintain unequal status between the card program name and your brand name:<br><br>**Widget balance®** + Stripe |\n| Comparison value propositions | Use language promoting the benefits of the card:<br><br>*   Better than cash<br>*   Safer than carrying cash<br>*   Manage your money hassle free<br>*   Spend only what you load<br>*   Spend only what you have on your card | Don’t make disparaging remarks about other financial products or institutions: this includes debit, credit, bank accounts, banks, or other financial products used or issued by financial institutions. Don’t allude to prepaid card programs as superior to other card products with terms like:<br><br>*   Better than credit<br>*   Better than a bank account<br>*   No interest<br>*   No security deposit<br>*   No debt |\n| Currency and using the funds | Use phrases like:<br><br>*   Access your contractor earnings<br>*   All \\[card program\\] cards are USD denominated<br>*   \\[Card program\\] cards can be used anywhere that accepts Visa cards | Don’t use phrases like:<br><br>*   Access your wages<br>*   Get funds in any format you want<br>*   Can spend money across the world |\n| What you can use the card for and limitations | Use phrases like:<br><br>*   Use \\[card program\\] for business needs<br>*   Get \\[card program\\] for your commercial needs<br>*   \\[Card program\\] can only be used for commercial purposes, and can’t be used for personal, family, or household purposes<br>*   Spend only what you load<br>*   Spend only what you have on your card | Don’t use phrases like:<br><br>*   Use \\[card program\\] for anything you want<br>*   Spend funds to buy the things you love<br>*   Personal cards<br>*   Use these cards like a payday loan, title loan, or pawn shop loan |\n| Where to spend funds | Use phrases like:<br><br>*   \\[Card program\\] can only be used for commercial purposes, and can’t be used for personal, family, or household purposes<br>*   Spend funds easily on your business | Don’t use phrases like:<br><br>*   Can be used just like a personal account<br>*   Get consumer cards<br>*   Spend funds to buy the things you love |\n\n#### Issuing messaging specifics per product![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following table provides guidelines for you to follow when developing messaging for specific cards in your Issuing program.\n\n| Card | Do  | Don’t |\n| --- | --- | --- |\n| Spend card only | Use phrases like:<br><br>*   …is a commercial credit program<br>*   A business credit card | Don’t use phrases like:<br><br>*   Debit card<br>*   Prepaid card<br>*   Better than a debit card |\n| Payout account only (Treasury account connected) | Money management account | Don’t use phrases like:<br><br>*   Bank account<br>*   Deposit account<br>*   Checking account<br>*   Savings account<br>*   Similar terms to the previous ones that connote a traditional bank account product |\n\n#### Treasury messaging guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDon’t use words like “bank account,” “deposit account,\" “checking account,” “savings account,” or similar terms that imply a traditional bank account product because Stripe isn’t a bank. Pre-approved terms include the following:\n\n*   Business account\n*   Cash management account\n*   Financial account\n*   Money transfer account\n\nSee [Marketing Treasury-based services](https://docs.stripe.com/treasury/marketing-treasury) for a full list of terms you can and can’t use to describe your accounts. Inaccurately referring to Treasury accounts as “bank accounts” could result in regulatory action, including fines.\n\n| Category | Do  | Don’t |\n| --- | --- | --- |\n| Logo and name usage | When referencing registered/® brand products, you must adhere to their separate brand guidelines. You only need to reference the ®, ™, SM mark once per asset. | Don’t apply unequal status between the card program name and your brand name:<br><br>**Widget balance®** + Stripe |\n| Description of account value propositions | Use the following terms:<br><br>*   Business account<br>*   Cash management account<br>*   Financial account<br>*   Money transfer account | Don’t use the following terms:<br><br>*   “Bank account”<br>*   “Deposit account”<br>*   “Checking account”<br>*   “Savings account”<br>*   Similar terms to the previous ones that imply a traditional bank account product, because Stripe isn’t a bank |\n| FDIC insurance | Use the following terms that incorporate the term “eligible”:<br><br>*   “Eligible for FDIC insurance”<br>*   “FDIC insurance-eligible accounts”<br>*   “Eligible for FDIC pass-through insurance”<br>*   “Eligible for FDIC insurance up to the standard maximum deposit insurance per depositor in the same capacity\"<br>*   “Eligible for FDIC insurance up to $250K” | Don’t use the following terms:<br><br>*   “FDIC insured”<br>*   “FDIC insured accounts”<br>*   “FDIC pass-through insurance guaranteed” |\n\n### CAN-SPAM![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe CAN-SPAM Act regulates marketing activity conducted by email. An email is deemed a commercial message, subject to the CAN-SPAM act, if the primary purpose of the email is to convey a commercial advertisement, or to promote a product or service. A transactional email is an email sent to a customer that has a primary purpose relating to a particular transaction or relationship between you and the customer, such as a payment reminder. The CAN-SPAM Act imposes more rigorous requirements on commercial email messages, as compared with transactional messages. Transactional messages aren’t subject to most of the requirements of the CAN-SPAM Act. If a message contains both transactional content and commercial content, the CAN-SPAM Act commercial email requirements might apply, if the primary purpose of the message can be considered commercial.\n\nTo facilitate compliance with the CAN-SPAM Act, any employee or staff using or having access to your email systems and resources for marketing must adhere to the following guidelines:\n\n*   Misleading header information. Any email message, whether commercial or transactional, must not contain:\n    *   False or misleading header information.\n    *   A “from” line that doesn’t accurately identify any person (individual or business) who initiated the message.\n    *   Inaccurate or misleading identification of a protected computer used to initiate the message for purposes of disguising its origin.\n*   Deceptive subject headings. Any commercial email message must not contain deceptive subject headings. For example, a deceptive subject heading is one that likely misleads the recipient about a material fact regarding the message’s contents or subject matter.\n*   Opt-out mechanism. You must provide your customers with the ability to opt-out of receiving future commercial messages, and you must honor customer requests to opt-out within 10 days. You can’t require a user to pay a fee or provide information other than an email address to opt-out.\n*   Advertisement identification. Any commercial email message must contain clear and conspicuous identification that the message is an advertisement or solicitation.\n*   Physical address disclosure. Any commercial email message must disclose a valid physical address of the sender.\n\nFailure to comply with CAN-SPAM could result in large fines for each violation.\n\n### Testimonials![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re using testimonials or endorsements in advertising Stripe products to your users, consider the following:\n\n*   The person giving a testimonial must be a real person and a true, bona fide user of the service or product they’re talking about.\n*   You must obtain and keep their permission in writing to use their quote. You must update that permission every 24 months.\n*   Product benefits, costs, or features in any quotes must be verifiable and true to what most users can expect to get.\n*   If you paid someone for their quote, or gave them anything of value, you must put a disclaimer near the quote stating this fact. This includes paid actors, if their scripting makes it sound like they’re giving a testimonial.\n\n### Prohibited advertising![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can’t advertise Stripe Issuing or Treasury, in print, radio, TV, on the internet, or any other digital format that promotes any unlawful activity or causes reputation concerns for Stripe or our bank partners.\n\n### Prohibition on international marketing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTreasury isn’t available to users or merchants located outside the US, so limit all marketing for Treasury to US domestic audiences.\n\nFor Issuing, although you can ship cards to international addresses for US-domiciled cardholders, you must not market the Issuing program internationally or to persons outside of the United States. That includes advertising or promoting Issuing through marketing channels such as social media, email, and paid search results. As with all other aspects of the Issuing program, your marketing activities must comply with card network rules.\n\n### Required marketing disclosures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour users must understand the role that Stripe’s bank partners play in offering and operating certain financial products—and in many cases, that they’re entering into a contractual relationship with these banks. Your users must also understand the material costs and fees associated with their use of each financial product. We require you to build the following disclosures into your marketing materials:\n\n#### Disclosures when marketing Issuing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you offer Issuing products, you must include the following information in an easily discoverable and accessible area on all marketing materials, account opening flows, and product interfaces:\n\n*   The name for your card program (for example, Rocket Rides Corporate Card).\n*   The relevant statement from the following table identifying the issuing bank. It can be in the footers section of your materials; however, the font must be a legible size and a contrasting color to the background.\n\n| Statement for Celtic Bank users | Statement for Sutton Bank users | Statement for Cross River Bank users |\n| --- | --- | --- |\n| \\[Card Program Name\\] Visa® Commercial Credit cards are powered by Stripe and issued by Celtic Bank. | \\[Card Program Name\\] Visa® Prepaid Cards are issued by Sutton Bank®, Member FDIC, pursuant to a license from Visa USA Inc. | \\[Card Program Name\\] Charge Cards are issued by Cross River Bank, Member FDIC. |\n\n#### Disclosures when marketing Treasury![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you offer Treasury products, you must include the following information in an easily discoverable and accessible area on all marketing materials, account opening flows, and product interfaces:\n\n*   A statement that you’re neither a bank nor a money transmitter.\n*   Statement of partnership with Stripe.\n*   “Stripe Payments Company” must be hyperlinked and point to `https://stripe.com`.\n\n| Statement for Evolve bank users | Statement for Goldman bank users |\n| --- | --- |\n| \\[Company Name\\] partners with [Stripe Payments Company](https://stripe.com/) for money transmission services and account services with funds held at Evolve Bank & Trust, Member FDIC. | \\[Company Name\\] partners with [Stripe Payments Company](https://stripe.com/) for money transmission services and account services with funds held at Goldman Sachs Bank USA, Member FDIC. |\n\n#### Disclosures when marketing both Treasury and Issuing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you offer both Treasury and Issuing products, you must include the following information in an easily discoverable and accessible area on all marketing materials, account opening flows, and product interfaces:\n\n*   A name for your card program (for example, Rocket Rides Corporate Card).\n*   A combined statement identifying the issuing bank and saying that you’re neither a bank nor a money transmitter.\n\n| Example combined statement (Payout Card) |\n| --- |\n| \\[Company Name\\] partners with [Stripe Payments Company](https://stripe.com/) for money transmission services and account services with funds held at Evolve Bank & Trust, Member FDIC. \\[Card Program Name\\] Visa® Prepaid Cards are issued by Sutton Bank®, Member FDIC, pursuant to a license from Visa USA Inc. |\n\n### Materials submission![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSubmit copies of your marketing materials and user interface mockups through our [Review Intake Form](https://docs.google.com/forms/d/e/1FAIpQLSfI67WWnEC-bPdzXllK7fq9hlwK6pY3qZpEnpOBwz8UZ_R-Xg/viewform) for review before you launch. If you make any changes to marketing materials, application flows, or user communications, Stripe’s compliance team must perform a review before going live. Our team of compliance specialists reviews them with our bank partners and responds within 10 business days.\n\nWhen submitting your materials:\n\n*   Provide full screenshots of product pages that include headings and footers.\n*   The preferable format for materials is PDF, however any format where all text is legible is acceptable.\n*   Describe the types of marketing material you’re submitting (for example, web banners, emails, search engine marketing, and whether it’s only text or images and text).\n*   You can send up to 5 attachments per submission.\n\nSend any additional questions to our team at [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com).\n\nWe might request that you change your marketing materials to comply with regulatory requirements. If we request a change, it’s your responsibility to update the materials and provide evidence of the change to Stripe. Failure to update materials at our request might result in Stripe disabling your Treasury or Issuing capabilities.\n\n## Recordkeeping![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must demonstrate your adherence to the requirements listed in this guide. Keep thorough records of all marketing materials, customer data, account information, and other disclosures you make to customers for at least 5 years. The following is a list of all records to keep, with examples of record types.\n\n| Record type | Example form of records |\n| --- | --- |\n| Product user experience | Screenshots of all deployed versions of the product user experience and their deployment dates. Include application flow, customer dashboard, support pages, and so on. |\n| Marketing | Inventory of all marketing copy deployed, email distribution lists used, and email solicitation opt-out lists, including timestamps of user opt-outs. |\n| Customer communications and complaints | Email interactions and documentation developed in the course of resolving complaints. |\n| Receipts | Receipts provided by Stripe and evidence that they’re uploaded to the customer’s Dashboard. |\n| Customer statements | Historical statements generated and made available to customers for download. |",
  "title": "Treasury and Issuing product marketing, design, and compliance guidelines | Stripe Documentation",
  "description": "Learn how to keep your Treasury or Issuing program and marketing campaigns compliant.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/controls/advanced-fraud-tools",
  "markdown": "# Advanced fraud tools | Stripe DocumentationThe Stripe Docs logo\n\n## Advanced fraud toolsBeta\n\n## Reduce fraud with Issuing’s advanced tooling.\n\nStripe Issuing’s advanced fraud tools help you identify and prevent transaction fraud. Use our real-time webhook functionality to approve or reject authorizations with the API. This guide helps you understand how to use these signals and features to drive down transaction fraud while minimizing impact on legitimate transactions.\n\n## Fraud controls ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe provides access to fraud-adjacent features such as spending controls, dispute filing, token management, and card management tools. To get started, review and enable the following controls that align with your business needs. While these settings might not be customized to your business model, geography, or cardholder behavior, you can use them as a source of directional guidance when using Stripe’s tools. Contact us for support in adjusting these thresholds.\n\n|     |     |\n| --- | --- |\n| [3D Secure (3DS)](#three-d-secure) | Verify cardholders for online purchases. |\n| [Stripe Defense Layer](#stripe-defense-layer) | Automatically block high-risk transactions based on Stripe’s risk modeling. |\n| [Fraud challenges](#fraud-challenges) | Trigger SMS-based verification of authorizations. Use this to verify users or to let users verify Stripe. |\n| [Authorization signals](#authorization-signals) | *   Verification data<br>*   Fraud disputability likelihood<br>*   High risk merchant alerts<br>*   Card testing risk |\n| [Stripe’s risk score](#stripe-risk-score) | Incorporate Stripe’s risk assessment when deciding whether to approve or reject an authorization. |\n| [Compromised card alerting](#compromised-card-alerting) | Stripe assesses whether a card has been compromised in a card testing attack. |\n\n## 3D Secure (3DS) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n3DS uses multi-factor authentication to reduce fraud for online transactions where a card isn’t physically present. It’s triggered by businesses in online checkout flows, and requires multi-factor authentication (usually through SMS or email-based one-time passcode that Stripe sends) to complete.\n\n### Protection against online fraud with 3DS verification and SCA compliance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn most cases, merchants are responsible for online fraud losses in card-not-present transactions. To protect themselves, businesses can trigger 3DS verification to reduce the chances of accepting a fraudulent transaction. If a merchant triggers 3DS verification, the cardholder needs to complete the verification step if your Stripe cards are enrolled in 3DS. In the UK and EU, 3DS is the standard for implementing the regulatory requirements of Strong Customer Authentication (SCA).\n\n### Request enrollment of your cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must request enrollment of your Issuing account through Support to use 3DS. After enrollment, your cards are set up to trigger additional verification on authorizations in which a merchant requests 3DS.\n\nLearn more about [Cardholder authentication using 3D Secure](https://docs.stripe.com/issuing/3d-secure).\n\n## Stripe Defense Layer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s proprietary monitoring can help identify transactions that are high risk and decline them before they can impact your bottom line. The Stripe Defense Layer is enabled for all Stripe Issuing users, and provides several automatic controls to help reduce your fraud exposure without changing loss liability. Among other considerations, Stripe blocks authorizations that:\n\n*   Appear to be card testing\n*   Seem high risk based on our fraud risk modeling\n\nThese defenses typically impact a very small subset (less than 0.5%) of authorizations.\n\n## Fraud challenges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFraud challenges provide you with the ability to request additional, SMS-based verification in situations where you prefer not to outright decline potentially risky authorizations.\n\nFalse positive declines can occur in fraud protection. To allow cardholders to override potential false-positive declines, and limit disruption for them, you can trigger SMS-based verification.\n\nSMS verification works as an override option to a decline. For cardholders, the process looks like this:\n\n1.  Attempt a transaction, but receive a fraud-related decline.\n2.  Successfully complete a fraud challenge by replying to an SMS, sent to the cardholder’s phone number on file with Stripe.\n3.  Try the transaction again and receive approval.\n\nYou can can let Stripe manage fraud challenges for you, send them yourself, or use a mixture of both:\n\n### Stripe-managed fraud challenges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you enable fraud challenges, Stripe automatically triggers SMS verification for authorizations that we consider to be high risk.\n\nIf the cardholder successfully completes the verification within 60 minutes, the merchant is allow-listed on that card for 7 days. Subsequent authorizations during that time won’t encounter fraud-related declines.\n\nWe recommend using this option if you’re an Issuing user who’s comfortable with Stripe’s risk thresholds and would prefer if Stripe managed the process of reconciling post-verification authorizations after the challenge has been completed.\n\n### User-managed fraud challenges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can respond to an `issuing_authorization.request` webhook to decline a transaction, and send a fraud challenge at the same time.\n\nIn these scenarios, you can define your own logic to trigger fraud challenges. We recommend using this option if you’re an Issuing user who prefers to own the logic that triggers SMS prompts.\n\n| Optimize for approval rate | Balance approval rate and risk prevention | Optimize for risk prevention |\n| --- | --- | --- |\n| Enabled by default, trigger this through a webhook | Optional | Optional |\n\nLearn more about the [Fraud challenge flow](https://docs.stripe.com/issuing/controls/fraud-challenges) and how to [define your own logic](https://docs.stripe.com/issuing/controls/fraud-challenges#define-your-own-logic).\n\nDuring authorization, we provide a comprehensive set of signals that you can use to make informed approve or decline decisions in real-time webhook responses.\n\nLearn more about [Authorization signals](https://docs.stripe.com/issuing/controls/advanced-fraud-tools/authorization-signals).\n\n## Stripe’s risk score ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe uses a variety of risk signals to assess the risk level of an authorization then makes this assessment available to you through the API. You can incorporate Stripe’s assessment into your decision logic when determining whether to approve or decline an authorization.\n\n| Optimize for approval rate | Balance approval rate and risk prevention | Optimize for risk prevention |\n| --- | --- | --- |\n| Block authorizations with score above 75 | Block authorizations with score above 50 | Block authorizations with score above 25 |\n\nLearn more about [Stripe’s risk score](https://docs.stripe.com/issuing/controls/advanced-fraud-tools/stripes-risk-score).\n\n## Compromised card alerting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe notifies you through the API when we believe a card might have been compromised. This helps you know when to cancel and reissue a card, file disputes, or notify a cardholder.\n\n### Prevent subsequent abuse and initiate cardholder communications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCanceling a card suspected to be compromised can help you prevent future fraudulent use of PANs that have been compromised. You can use these indicators to initiate communications and a reissuance workflow for cardholders. If Stripe observes that a card has been successfully used in a card testing attack, we flag the card as compromised.\n\n### Mitigate risk and take action![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe observes a successful authorization during a severe card testing attack (defined as a `risk_assessment.card_testing_risk.risk_level` of `elevated` or `highest`), the card’s `fraud_warning.type` field will have a value of `card_testing_exposure`. The `started_at` value corresponds to the date that the successful authorization in card testing attack took place. This value won’t update if the card is compromised again in a later attack.\n\nAfter Stripe sets the `type` field to `card_testing_exposure`, we recommend contacting the cardholder, canceling the card, and issuing a new one. This mitigates the risk of subsequent authorizations on what a fraudulent actor likely assumes is a valid PAN that they can use.\n\nIssuing advanced fraud tools are currently limited to beta users. You must be an Issuing customer to join the beta. To request access to the beta, log in to your Stripe account and refresh the page. [Contact Stripe](https://stripe.com/contact/sales) for more information.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Real-time authorizations quickstart](https://docs.stripe.com/issuing/controls/real-time-authorizations/quickstart)\n*   [Manage fraud with Stripe Issuing controls and tools](https://docs.stripe.com/issuing/manage-fraud)",
  "title": "Advanced fraud tools | Stripe Documentation",
  "description": "Reduce fraud with Issuing’s advanced tooling.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/cards/pin-management",
  "markdown": "# PIN management | Stripe DocumentationThe Stripe Docs logo\n\n## Let your cardholders manage their personal identification numbers.\n\nSome Point-of-Sale and ATM card terminals require cardholders to enter their card’s PIN to authenticate transactions. Cardholders also need to use their PINs with physical cards in many regions of the world. You can use the Stripe API and [Stripe Elements](https://docs.stripe.com/payments/elements \"Stripe Elements\") to manage and view PINs on your issued cards.\n\nBoth [physical card](https://docs.stripe.com/issuing/cards/physical) and [virtual card](https://docs.stripe.com/issuing/cards/virtual) PINs are set to a random value at creation. Cards created as a [replacement for](https://docs.stripe.com/api/issuing/cards/create#create_issuing_card-replacement_for) other cards won’t inherit the old card’s PIN. In [test mode](https://docs.stripe.com/test-mode \"test mode\"), all PINs are set to 0000 by default.\n\n## Set a card’s initial PIN at creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen issuing a new card through the API, you can provide a desired PIN to be pre-set on the card. This is optional, and if you don’t provide an initial PIN, we randomly generate one for you. You can always [view a card’s PIN](#viewing-a-cards-pin).\n\nTo pre-set a PIN when issuing a new card, pass it in encrypted form as the `pin.encrypted_number` parameter to the Create Card API method:\n\n`curl https://api.stripe.com/v1/issuing/cards \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"cardholder\"=\"ich_1D4b3fdsa\" \\   -d \"pin[encrypted_number]\"=\"eyJhbGciOiJSU0...\"   -d \"type\"=\"virtual\" \\   -d \"currency\"=\"usd\"`\n\nSee [Encrypting PINs](#encrypting-pins) for more information about how to encrypt a PIN before passing it to the Stripe API or your own servers.\n\n#### Note\n\nWhen setting a card’s initial PIN in a request to the Create Card API method, the response to the creation request won’t return the PIN (in either encrypted or plain-text form).\n\n## View a card’s PIN ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Issuing Elements](https://docs.stripe.com/issuing/elements) to retrieve a card’s PIN in a [PCI-DSS](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\")\\-compliant way.\n\n### Use Issuing Elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides a browser-side JavaScript library that allows you to display the sensitive data (including PINs) of your Issuing cards in a PCI-compliant manner. The PIN renders inside of a Stripe-hosted `iframe` and never touches your servers. Stripe offers this library as a part of [Stripe.js](https://docs.stripe.com/js).\n\nAll Issuing users, whether they’re PCI-compliant or not, can use Issuing Elements to retrieve PINs.\n\nTo retrieve a card’s PIN using Issuing Elements, first [create an Issuing Elements integration](https://docs.stripe.com/issuing/elements), and then use it to display the `issuingCardPinDisplay` Element:\n\n`const stripe = Stripe(`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n`);  const cardId = 'ic_abc123'; // ID of the issued Card you want to retrieve the PIN for const ephemeralKeyNonce = ...; const ephemeralKey = ...;  // create the PIN Element with Stripe.js const pinElement = stripe.elements().create('issuingCardPinDisplay', {   issuingCard: cardId,   nonce: ephemeralKeyNonce,   ephemeralKeySecret: ephemeralKey.secret, });  // Mount the PIN element onto DOM elements on your web page pinElement.mount('#card-pin');`\n\n## Change a card’s PIN![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Change a card’s PIN at an ATM ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCardholders can change the PIN for their Stripe Issuing card at most ATMs. The cardholder must know the card’s current PIN to change it at an ATM. You can [retrieve a card’s PIN](#viewing-a-cards-pin) before changing it. Some countries, such as France, don’t provide PIN management features at ATMs.\n\n## Unblock a card’s PIN ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you incorrectly enter a card’s PIN three consecutive times, the PIN becomes blocked. No further PIN-authenticated payments can be made through the card until the PIN is unblocked. Additionally, when a card’s online PIN is blocked, the card’s status is set to `inactive`, and no payments of any kind can be made until the card is reactivated.\n\nTo unblock a card’s online PIN, and reactivate the card, use the Cards API to set its [status](https://docs.stripe.com/api/issuing/cards/update#update_issuing_card-status) to `active`. You can also reactivate a card in your Stripe Dashboard.\n\nIn most countries, cardholders can unblock a card’s offline PIN at an ATM.\n\n## Encrypting PINs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo enable you to set a card’s PIN in a way that doesn’t require it to pass through your servers in plain text, the Stripe API expects you to provide PINs in an encrypted form.\n\nEncrypt the desired PIN (for example, `\"0123\"`) in JWE (JSON Web Encryption) format using [Stripe’s RSA public key](https://issuing-key.stripe.com/v1/keys). When encrypting, use the `RSA-OAEP` algorithm for key wrapping and `A128CBC-HS256` for content encryption.\n\nStripe provides its public key for PIN encryption in both PKCS#8 and JWK format. Depending on your client environment and the library used, one might be easier to use than the other.\n\n### PIN encryption best practices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Don’t cache, store, or reuse encrypted PINs for longer than necessary to call the Stripe API.\n*   Don’t encrypt PINs on your servers. Instead, perform encryption as soon as your user provides the PIN (for example, in your mobile application or in your web application’s frontend) and pass the encrypted form to your servers, and then on to the Stripe API.\n*   Don’t cache Stripe’s Issuing public key: we can change it or rotate it without notice. Instead, fetch it for every PIN operation you perform on the Stripe API.\n*   Don’t roll your own cryptography. JWE libraries are available for most common languages and platforms.\n\n### PIN encryption examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n``import fetch from 'node-fetch'; import { importJWK, CompactEncrypt } from 'jose'  async function encryptPin(myNewPin) {   // Fetch Stripe's RSA public key   const keyData = await fetch('[https://issuing-key.stripe.com/v1/keys](https://issuing-key.stripe.com/v1/keys)')     .then(r => r.json());    // Import the public key. Here, we choose to import the JWK-formatted key,   // but it will also be available in PKCS#8 format as `keyData.pkcs8`   const publicKey = await importJWK(keyData.jwk, 'RSA');    // Encrypt the new PIN with the given public key, using the RSA-OAEP   // algorithm to wrap the key, and A128CBC-HS256 to produce the ciphertext   const jwe = await new CompactEncrypt(new TextEncoder().encode(myNewPin))     .setProtectedHeader({ alg: 'RSA-OAEP', enc: 'A128CBC-HS256', kid: keyData.key_id })     .encrypt(publicKey);    // Return our JWE (JWEs are base64url-encoded)   return jwe; }  await encryptPin(\"0123\"); // => eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkExMjhDQkMtSFMyNTYiLCJraWQiOiJz...``\n\nThe example above encrypts a PIN (0123) using JSON Object Signing and Encryption libraries for various languages. Equivalent libraries exist for other languages:",
  "title": "PIN management | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/controls/real-time-authorizations",
  "markdown": "# Issuing real-time authorizations | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about real-time authorizations.\n\nUsing the synchronous webhook, you can approve or decline authorization requests in real time.\n\nYour webhook endpoint can be configured in your [settings](https://dashboard.stripe.com/account/issuing). When a card is used to make a purchase, Stripe creates an `issuing_authorization.request` and sends it to your configured endpoint for your approval.\n\nGet started with our [interactive guide to real-time authorizations](https://docs.stripe.com/issuing/controls/real-time-authorizations/quickstart).\n\nYou can respond to authorization requests by responding directly to the webhook event.\n\n### Respond directly![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRespond to the `issuing_authorization.request` webhook event directly to either approve or decline an authorization after it’s received.\n\n#### Webhook response![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOur webhook accepts `JSON` responses with the following parameters:\n\n**Status code:** Return `200` to indicate success.\n\n**Header:**\n\n| field name | required or optional | description |\n| --- | --- | --- |\n| **Stripe-Version** | required | Version in `YYYY-dd-mm` format. |\n| **Content-Type** | optional | The only content type accepted for Authorization webhook responses is `application/json`. |\n\n**Body:**\n\n| field name | required or optional | type | description |\n| --- | --- | --- | --- |\n| **approved** | required | Boolean | Set `true` to approve an authorization and `false` to decline. |\n| **amount** | optional | Integer | If the authorization’s `pending_request.is_amount_controllable` property is `true`, you can provide this value to control how much to hold for the authorization. It must be positive. |\n| **metadata** | optional | Set of [key-value pairs](https://docs.stripe.com/api/metadata) | This can be useful for storing additional information about the object in a structured format. |\n| **send\\_fraud\\_challenges** Beta | optional | Array of strings | You can send a fraud challenge for this authorization only through SMS. Leave it blank if you don’t want to send a challenge. |\n\n`# Using Sinatra. require 'sinatra' require 'stripe'  set :port, 4242  # Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`# Replace with a real secret. You can find your endpoint's secret in your webhook settings. webhook_secret = 'whsec_...'  post '/webhook' do   payload = request.body.read   sig_header = request.env['HTTP_STRIPE_SIGNATURE']    event = nil    # Verify webhook signature and extract the event.   begin     event = Stripe::Webhook.construct_event(       payload, sig_header, webhook_secret     )   rescue JSON::ParserError => e     # Invalid payload.     status 400     return   rescue Stripe::SignatureVerificationError => e     # Invalid signature.     status 400     return   end    if event['type'] == 'issuing_authorization.request'     auth = event['data']['object']     # ... custom business logic      status 200     header 'Stripe-Version' => '2022-08-01', 'Content-Type' => 'application/json'     data = { 'approved' => true }     body data.to_json   end   # ...handle other cases end`\n\n### Make an API call Deprecated![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis documentation is maintained for existing users. If you’re a new user, respond directly to the webhook. If you’re an existing user, plan to migrate to the direct webhook response. You can follow [our direct webhook migration guide](https://docs.stripe.com/issuing/controls/real-time-authorizations/direct-webhook-migration).\n\nMake an API call to either [approve](https://docs.stripe.com/api/issuing/authorizations/approve) or [decline](https://docs.stripe.com/api/issuing/authorizations/decline) the request and include the [Authorization](https://docs.stripe.com/api/issuing/authorizations/object) ID. If you use this method, your webhook must approve or decline each authorization before responding to the incoming webhook request.\n\n`# Using Sinatra. require 'sinatra' require 'stripe'  set :port, 4242  # Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`# Uncomment and replace with a real secret. You can find your endpoint's # secret in your webhook settings. # webhook_secret = 'whsec_...'  post '/webhook' do   payload = request.body.read   sig_header = request.env['HTTP_STRIPE_SIGNATURE']    event = nil    # Verify webhook signature and extract the event.   begin     event = Stripe::Webhook.construct_event(       payload, sig_header, webhook_secret     )   rescue JSON::ParserError => e     # Invalid payload.     status 400     return   rescue Stripe::SignatureVerificationError => e     # Invalid signature.     status 400     return   end    if event['type'] == 'issuing_authorization.request'     auth = event['data']['object']     handle_authorization(auth)   end    status 200 end  def handle_authorization(auth)   # Authorize the transaction   authorization = Stripe::Issuing::Authorization.approve(auth[\"id\"]) end`\n\nWe recommend that you only use one of these two methods to respond to authorization requests. For users migrating from one method to another, both methods are supported during a migration. In the event both methods are used on the same authorization, the API call takes precedence over the direct response. For migrations, we recommend only using one method on a given request at a time.\n\nIf Stripe doesn’t receive your approve or decline response or request within 2 seconds, the `Authorization` is automatically approved or declined based on your [timeout settings](https://dashboard.stripe.com/account/issuing).\n\n#### Note\n\nIf your Issuing balance has insufficient funds for the incoming authorization, the authorization will be denied and your webhook endpoint will not receive the `issuing_authorization.request` event. To learn more about funding your Issuing balance, [read here](https://docs.stripe.com/issuing/funding/balance).\n\n## Authorization requests![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen an authorization request is sent to your webhook, the `amount` requested is stored in `pending_request`.\n\n`{   \"id\": \"iauth_1CmMk2IyNTgGDVfzFKlCm0gU\",   \"object\": \"issuing_authorization\",   \"approved\": false,   \"amount\": 0,   \"currency\": \"usd\",   \"status\": \"pending\",   ...   \"pending_request\": {     \"amount\": 400,     \"currency\": \"usd\",     \"merchant_amount\": 360,     \"merchant_currency\": \"gbp\"   } }`\n\nThe top-level `amount` in the request is set to 0 and `approved` is false. Once you respond to the request, the top-level `amount` reflects the total amount approved or declined, the `approved` field is updated, and `pending_request` is set to null.\n\n### Testing webhooks locally![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo test webhooks locally, you can use [Stripe CLI](https://docs.stripe.com/stripe-cli). Once you have it installed, you can forward events to your server:\n\n`stripe listen --forward-to localhost:4242/webhook Ready! Your webhook signing secret is '{{WEBHOOK_SIGNING_SECRET}}' (^C to quit)`\n\nIn another terminal, you can then manually trigger `issuing_authorization.request` events from the CLI for more streamlined testing.\n\n`stripe trigger issuing_authorization.request`\n\nLearn more about [setting up webhooks](https://docs.stripe.com/webhooks).\n\n## Autopilot Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAutopilot is a set of fallback options that allow you to continue making real-time authorization decisions in the event your systems are down or don’t respond to an authorization request within the allotted time window.\n\nFor users with their own dedicated Bank Identification Numbers (BIN), we also offer Autopilot in the event that Stripe can’t communicate with the network to prevent any continuity issues that might result.\n\nIn both cases, we make an authorization decision on your behalf based on a predefined set of rules. We create authorization objects for transmission, so that reconciliation can take place for the Autopilot transactions. When an authorization is approved or declined through Autopilot while you’re down, the `request_history.reason` field within the `issuing_authorization.created` webhook changes to `webhook_timeout`. When an authorization is approved or declined through Autopilot while Stripe is down, the `request_history.reason` field within the `issuing_authorization.created` webhook changes to `network_stip`.\n\nAccess to Autopilot is currently limited to US beta users. You must be an Issuing customer to join the beta. To request access to the beta, log in to your Stripe account and refresh the page. [Contact Stripe](https://stripe.com/contact/sales) for more information.\n\n## Fraud challenges Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Fraud challenges](https://docs.stripe.com/issuing/controls/fraud-challenges) allow your cardholders to retry non-fraudulent transactions that would have otherwise been blocked.\n\nTo manage the rules that dictate when a fraud challenge is sent, adjust your response to the `issuing_authorization.request` webhook. You can trigger fraud challenges in scenarios where you detect spending that appears suspicious and want additional verification (for example, a cardholder using their card out of the country).\n\nTo do so, decline the `issuing_authorization.request` webhook and include the `send_fraud_challenges` field with the `[\"sms\"]` value.\n\nFraud challenges are currently limited to beta users. You must be an Issuing customer to join the beta. To request access to the beta, log in to your Stripe account and refresh the page. [Contact Stripe](https://stripe.com/contact/sales) for more information.",
  "title": "Issuing real-time authorizations | Stripe Documentation",
  "description": "Learn about real-time authorizations.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/elements",
  "markdown": "# Using Issuing Elements | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to display card details in your web application in a PCI-compliant way.\n\n[Stripe.js](https://docs.stripe.com/js) includes a browser-side JavaScript library you can use to display the sensitive data of your Issuing cards on the web in compliance with PCI requirements. The sensitive data renders inside Stripe-hosted iframes and never touches your servers.\n\n#### Note\n\nStripe.js collects extra data to protect our users. Learn more about how Stripe collects data for [advanced fraud detection](https://docs.stripe.com/disputes/prevention/advanced-fraud-detection).\n\n## Ephemeral key authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe.js uses ephemeral keys to securely retrieve Card information from the Stripe API without publicly exposing your secret keys. You need to do some of the ephemeral key exchange on the server-side to set this up.\n\nThe ephemeral key creation process begins in the browser, by creating a **nonce** using Stripe.js. A nonce is a single-use token that creates an **ephemeral key**. This nonce is sent to your server, where you exchange it for an ephemeral key by calling the Stripe API (using your secret key).\n\nAfter creating an ephemeral key server-side, pass it back to the browser for Stripe.js to use.\n\n[](#create-secure-endpoint)\n\nThe first step to integrating with Issuing Elements is to create a secure, server-side endpoint to generate ephemeral keys for the card you want to show. Your Issuing Elements web integration calls this endpoint.\n\nHere’s how you might implement an ephemeral key creation endpoint in web applications framework across various languages:\n\n`// This example sets up an endpoint using the Express framework. // Watch this video to get started: [https://youtu.be/rPR2aJ6XnAc](https://youtu.be/rPR2aJ6XnAc)  const express = require('express'); const bodyParser = require('body-parser'); const app = express();  app.use(bodyParser.urlencoded({ extended: true }));  const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  app.post('/ephemeral-keys', async (request, response) => {   const { card_id, nonce } = request.body;    const ephemeralKey = await stripe.ephemeralKeys.create({     nonce: nonce,     issuing_card: card_id,   }, {     apiVersion: '2024-06-20',   });    response.json({     ephemeralKeySecret: ephemeralKey.secret,   }); });`\n\n#### Note\n\nYou must specify the API version when creating ephemeral keys. Currently, the required version is `2020-03-02`. You must also pass in an ephemeral key nonce, which you can create in your web integration.\n\n[](#web-api-integration)\n\nFirst, include Stripe.js on your page. For more information on how to set up Stripe.js, refer to [including Stripe.js.](https://docs.stripe.com/js/including)\n\nCreate a `Stripe` instance and an ephemeral key nonce for the card you want to retrieve using [stripe.createEphemeralKeyNonce](https://docs.stripe.com/js/issuing/create_ephemeral_key_nonce). Use the nonce to retrieve the ephemeral key by calling the [server-side endpoint](#create-secure-endpoint) that you created:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  // Initialize Elements which you'll need later const elements = stripe.elements();  // Use Stripe.js to create a nonce const cardId = 'ic_1ITi6XKYfU8ZP6raDAXem8ql'; const nonceResult = await stripe.createEphemeralKeyNonce({   issuingCard: cardId, }); const nonce = nonceResult.nonce;  // Call your ephemeral key creation endpoint to fetch the ephemeral key const ephemeralKeyResult = await fetch('/ephemeral-keys', {   method: 'POST',   headers: { 'Content-Type': 'application/json' },   body: JSON.stringify({     card_id: cardId,     nonce: nonce,   }) });  const ephemeralKeyResponse = await ephemeralKeyResult.json(); const ephemeralKeySecret = ephemeralKeyResponse.ephemeralKeySecret;`\n\nNow that you have an ephemeral key, you’re ready to show sensitive card details. You can do so using any of the following Elements, and you can re-use the same nonce and ephemeral key pair for multiple Elements on the same page:\n\n| Element | Name | Availability |\n| --- | --- | --- |\n| Number (PAN) | `issuingCardNumberDisplay` | Virtual cards only |\n| CVC | `issuingCardCvcDisplay` | Virtual cards only |\n| Expiry date | `issuingCardExpiryDisplay` | Virtual cards only |\n| PIN | `issuingCardPinDisplay` | Physical cards only |\n\nEach Element takes the following configuration:\n\n| Name | Type | Usage |\n| --- | --- | --- |\n| `style` | [Style object](https://docs.stripe.com/js/appendix/style) | Keep in mind that some variants, pseudo-classes, and properties are for input Elements and won’t apply to these Elements. An example of an input-only pseudo-class is `::placeholder`. |\n| `issuingCard` | `string` | The ID of your issued card (for example, `ic_abc123`) |\n| `nonce` | `string` | Your ephemeral key nonce |\n| `ephemeralKeySecret` | `string` | The `secret` component of your ephemeral key |\n\n#### Note\n\nIf you decide to use `issuingCardPinDisplay`, then you must implement appropriate methods to ensure that access is limited to your authorized users. In particular, you must apply two-factor authentication (2FA) before providing access to a page using `issuingCardPinDisplay`. If Stripe decides that you don’t have sufficient security measures in place, we might suspend your access to this Element.\n\nThe following is an example of how to display one of these Elements, using the nonce and ephemeral key pair created in the example above:\n\n`const number = elements.create('issuingCardNumberDisplay', {   issuingCard: cardId,   nonce: nonce,   ephemeralKeySecret: ephemeralKeySecret,   style: {     base: {       color: '#fff',       fontSize: '16px'     },   }, });  number.mount('#card-number');`\n\n## Adding a copy button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the “card data display elements” that we’ve already described, we also provide an `issuingCardCopyButton` element. This takes a `toCopy` argument and renders a transparent “copy to clipboard” button that takes up the space of its parent `<div>`. This allows it to intercept all click events with a click handler that takes the corresponding card data specified at initialization and copies it to the clipboard.\n\nWith this, you can display “copy to clipboard” buttons next to the card number, expiry, and cvc, which prevents your cardholders from manually copying card data. We restrict the copy functionality to Stripe’s PCI-compliant `<iframe>`.\n\nThe `issuingCardCopyButton` element takes the following configuration:\n\n| Name | Type | Usage |\n| --- | --- | --- |\n| style | [Style object](https://docs.stripe.com/js/appendix/style) | Keep in mind that some variants, pseudo-classes, and properties are for input Elements and won’t apply to these Elements. An example of an input-only pseudo-class is `::placeholder`. |\n| toCopy | `'expiry'` or `'cvc'` or `'number'` or `'pin'` |     |\n\nAn example of how to use this component is below:\n\n`const cardNumber = elements.create('issuingCardNumberDisplay', {   issuingCard: cardId,   nonce: nonce,   ephemeralKeySecret: ephemeralKeySecret, });  cardNumber.mount('#card-number');  const cardNumberCopy = elements.create('issuingCardCopyButton', {   toCopy: 'number',   style: {     base: {       fontSize: '12px',       lineHeight: '24px',     },   }, });  cardNumberCopy.mount('#card-number-copy');`\n\nIf you’re having trouble with your button responding to clicks, be sure to line up the iframe to your button correctly. You can customize your image and containing `<div>` in your stylesheets however you want.\n\n`#card-number-copy {   height: 24px;   width: 24px;   position: relative;   background-repeat: no-repeat;   background-position: center;   background-size: contain;   background-image: url('data:image/svg+xml;base64,...'); }`\n\nAs a last step, provide an “after click feedback” option to your users. To do so, use the `issuingCardCopyButton` Element’s [on click event](https://docs.stripe.com/js/element/events/on_click). This could be temporarily showing a new icon as shown below.\n\n`#card-number-copy-success {   display: none;   height: 24px;   width: 24px;   background-image: url('data:image/svg+xml;base64,...');   background-size: 100%; }`\n\n`// Example of hiding, replacing, and re-showing icons upon click const timeout = (ms) => {   return new Promise((resolve) => setTimeout(resolve, ms)); }; const hideAndShowSuccess = (iconElementId, successIconElementId) => {   const el = document.getElementById(iconElementId);   el.style.display = 'none';   const elSuccess = document.getElementById(successIconElementId);   elSuccess.style.display = 'block';   timeout(2000).then(() => {     elSuccess.style.display = 'none';     el.style.display = 'block';   }); };  cardNumberCopy.on('click', () => {   hideAndShowSuccess('card-number-copy', 'card-number-copy-success'); });`\n\n## Additional details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe returned card object has PCI fields (such as the number) fully removed from the `result.issuingCard` payload.\n\nIn addition to `.mount()` in the example above, the Elements also support the following methods:\n\n*   `.destroy()`\n*   `.unmount()`\n*   `.update({style})`\n\n## Issuing Elements and native applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIssuing Elements does not directly support native application platforms such as iOS, Android, or React Native.\n\nTo display sensitive card details with Issuing Elements in your native app, use a web view. Build a web integration on your servers following this guide, and then point a web view’s URL to that integration. To learn about implementing web views for native apps, see these external resources:\n\n*   iOS and iPadOS: [WKWebView](https://developer.apple.com/documentation/webkit/wkwebview)\n*   Android: [WebView](https://developer.android.com/reference/android/webkit/WebView)\n*   React Native: [react-native-webview](https://github.com/react-native-webview/react-native-webview)\n*   Flutter: [webview-flutter](https://pub.dev/packages/webview_flutter)",
  "title": "Using Issuing Elements | Stripe Documentation",
  "description": "Learn how to display card details in your web application in a PCI-compliant way.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/funding/balance",
  "markdown": "# Issuing balance | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to make funds available to your cards.\n\nTo spend money using cards, add funds to the Issuing balance on your account. This balance represents funds reserved for Issuing and is safely separated from your earnings, payouts, and funds from other Stripe products.\n\nUsing the Stripe Dashboard or API, you can access the bank account and routing information you need to push funds from your from external bank account. When that account receives funds, they’re immediately available as a [top-up](https://docs.stripe.com/api/topups) to your Stripe account’s Issuing balance.\n\nFor a given currency, the provided bank account information will be unique and able to receive funds any number of times. Funds always arrive in your Issuing balance in the specified currency. In some cases, your bank might perform currency conversion.\n\n| Region | Payment Scheme | Currency Supported | Speed | Maximum amount accepted |\n| --- | --- | --- | --- | --- |\n| United States<br><br>Beta | Wire Transfer from US banks only | USD | A few minutes to 1 business day | Varies by bank, usually many millions |\n| ACH Credit Transfer | USD | Several hours to several business days | Varies by bank, usually less than $25k |\n| Euro area | SEPA Credit Transfer | EUR | About a day | €999,999,999.99 |\n| United Kingdom | FPS | GBP | About 2 hours during a bank’s business hours, or at the start of the next banking day. | £1 million |\n| BACS | GBP | 2-3 business days | £20 million |\n\nSelect region:\n\n## Access account information for push funding in the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo access account information for push funding:\n\n1.  Navigate to the [Balances page](https://dashboard.stripe.com/balance/overview) in the Dashboard.\n2.  Scroll down to the **Issuing balance** heading and click **Add to balance**.\n3.  Choose your **Issuing balance** and specify how much to add. Click **Next**.\n4.  Select **Wire transfer** from the dropdown, and expand **Show instructions** to see the information you need to send a wire.\n\nTo send a wire from your bank, use the routing and account number, along with the beneficiary information.\n\nWires from banks outside the US aren’t allowed. Funds received from an international wire are returned to the sender’s bank account, which can take up to 3 business days.\n\n### Request early access ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAccess to US push funding is currently limited to US beta users. You must be an Issuing customer to join the beta. To request access to the beta, log in to your Stripe account and refresh the page. [Contact Stripe](https://stripe.com/contact/sales) for more information.\n\n## Enable notifications about your balance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can enable email notifications to help monitor your Issuing balance from your settings. To configure these notifications:\n\n1.  Visit your Balance notifications [settings](https://dashboard.stripe.com/settings/issuing/balance-notifications) page.\n2.  Choose from two types of alerting thresholds:\n    *   Fixed amount: Receive an alert whenever your Issuing balance falls below this amount.\n    *   Ratio of balance to rolling spend: Receive an alert whenever the ratio of your Issuing balance to your spend over the previous 24 hours falls below the threshold. For example, if you set your threshold to 80% and your spend over the past day is 100 USD, you receive an alert whenever your balance falls below 80 USD.",
  "title": "Issuing balance | Stripe Documentation",
  "description": "Learn how to make funds available to your cards.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/purchases/authorizations",
  "markdown": "# Issuing authorizations | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Issuing to handle authorization requests.\n\nWhen a card is used to make a purchase, it generates an authorization request, which is approved or declined based on the following steps:\n\n1.  Stripe checks that the [balance used for Issuing](https://docs.stripe.com/issuing/funding/balance) has sufficient funds, that the card is active, and that your [spending controls](https://docs.stripe.com/issuing/controls/spending-controls) allow the authorization. Sometimes, Stripe [immediately approves or declines the authorization request](#scenarios-without-a-real-time-authorization-request) at this stage.\n    \n2.  Stripe sends an `issuing_authorization.request` event. If you don’t have a real-time authorization webhook, we approve the authorization without sending the `issuing_authorization.request`.\n    \n    #### Listen for Stripe events\n    \n3.  You can [approve or decline](https://docs.stripe.com/issuing/controls/real-time-authorizations) the authorization by responding directly to the webhook event. If you don’t approve or decline the `issuing_authorization.request` within 2 seconds, Stripe uses your [webhook timeout settings](https://dashboard.stripe.com/settings/issuing) to approve or decline the authorization.\n    \n4.  Stripe sends an `issuing_authorization.created` event, notifying you of the [Authorization](https://docs.stripe.com/api#issuing_authorization_object) creation and decision.\n    \n\nSometimes, Stripe receives an authorization request from the card network and approves or declines it without sending you an `issuing_authorization.request` event:\n\n*   If Stripe decides that the authorization request can’t be approved (for example, because the card is inactive or your [spending controls](https://docs.stripe.com/issuing/controls/spending-controls) don’t allow it), we’ll decline it.\n*   If you don’t have a [real-time authorization webhook](https://docs.stripe.com/issuing/controls/real-time-authorizations) configured, and we don’t have a reason to decline the authorization request, we’ll approve it.\n\nWhen this occurs, Stripe still sends an `issuing_authorization.created` event, notifying you of the [Authorization’s](https://docs.stripe.com/api#issuing_authorization_object) creation.\n\n## Authorization updates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe receives an authorization request, we send an `issuing_authorization.created` [webhook](https://docs.stripe.com/webhooks) event. If you approve the authorization, we deduct the `amount` from your Issuing balance and hold it in reserve until the authorization is either captured, voided, or expired without capture. If you decline the authorization, the status is set to `closed` and we don’t place any holds.\n\nWhen the authorization is captured, a [transaction](https://docs.stripe.com/issuing/purchases/transactions) is created and the `status` of the authorization is set to `closed`.\n\nIf the authorization request is voided, we send an `issuing_authorization.updated` [webhook](https://docs.stripe.com/webhooks) event with its `status` set to `reversed` and the `amount` as `0`. We add the voided amount back to your Issuing balance, essentially undoing the balance impact of the original authorization.\n\nIf the authorization request is expired without capture, we send an `issuing_authorization.updated` [webhook](https://docs.stripe.com/webhooks) event with its `status` set to `reversed` and the `amount` representing any remaining amount authorized for possible late captures. We add the expired amount back to your Issuing balance, essentially undoing the balance impact of the original authorization.\n\n## Purchases in different currencies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCards can be used for purchases in any currency that the card network supports. Stripe automatically converts the currency of the purchase into the card’s currency when holding funds, using the card network’s daily rate.\n\nThe `merchant_amount` represents the cost of the purchase in the local currency. The `amount` field represents the expected amount of the `Transaction` in the card’s currency and is not final until the `Authorization` has been captured.\n\n## Handling other authorizations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to regular authorizations, there are a few other cases that you should be ready to handle.\n\nSome authorizations are partially authorized to limit spending. This allows you to authorize a specific lower amount and is useful when there are not sufficient funds to cover the full purchase.\n\nFueling stations in the US are a special example of this. Learn more about [fuel dispenser transactions](https://docs.stripe.com/issuing/purchases/authorizations#fuel-dispenser-transactions).\n\nWhen an authorization is partially authorized, the `is_amount_controllable` field on the authorization request is set to `true`. You can specify the amount you want to approve by setting the `amount` in the webhook response body or the [approve](https://docs.stripe.com/api/issuing/authorizations/approve) call.\n\nIf you partially approve a cashback authorization, you must approve the full cashback amount. You can’t set the approved `amount` lower than the `cashback_amount`.\n\n### Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo simulate the creation of a new partial authorization, you can use the [Authorization Create API](https://docs.stripe.com/api/issuing/authorizations/test_mode_create) in the Issuing test helpers.\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d card=  {{CARD_ID}}   \\  -d amount=100 \\  -d \"merchant_data[category]\"=automated_fuel_dispensers \\  -d is_amount_controllable=true`\n\n## Fuel dispenser transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a cardholder attempts a purchase at a fuel dispenser ([MCC 5542](https://docs.stripe.com/issuing/categories)), an `issuing_authorization.request` for 1 USD is sent (called a “status check”). The default amount held is 100 USD to cover the unknown purchase amount. When the cardholder finishes pumping fuel, an `issuing_authorization.updated` event is sent to reflect the amount of the purchase.\n\nWhen the fuel dispenser allows a [partial authorization](https://docs.stripe.com/issuing/purchases/authorizations?issuing-authorization-type=partial_authorization#handling-other-authorizations) by setting the field `is_amount_controllable` to `true`, you can respond with a lesser approved amount (for example, 50 USD). However, when a fuel dispenser doesn’t allow partial authorizations, you must either approve the network default amount (Stripe ignores any amount you specify), or decline the entire authorization.\n\nFor [Commercial Fleet programs](https://docs.stripe.com/issuing/customize-your-program#card-product-type), Stripe receives some information in the Issuing Authorization [fleet](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-fleet) and [fuel](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-fuel) hashes after the fuel has been dispensed. As a result, some of these fields won’t be populated during the `issuing_authorization.request` webhook and will be sent later in the `issuing_authorization.updated` webhook.\n\n## Using with Stripe Treasury![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAuthorizations on cards that use funds stored in Treasury [FinancialAccounts](https://docs.stripe.com/api/treasury/financial_accounts) have a [`treasury` field](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-treasury) with references to Treasury resources: Treasury [Transaction](https://docs.stripe.com/api/treasury/transactions), [ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits), and [ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits).\n\n## Scenarios with no record of declined authorizations in the Dashboard or API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn some cases, an authorization made with an Issuing Card might be declined and neither you or your connected accounts will receive a webhook event or an authorization record (`iauth_`).\n\nIn these cases, make sure that you collect as much information as possible about the declined authorization before reaching out to Stripe support for assistance.\n\nWe recommend including the following information:\n\n*   The time of the decline\n*   The cardholder (`ich_`) who made the purchase\n*   The card (`ic_`) used for the authorization\n*   The merchant involved in the authorization\n*   Any other circumstances surrounding the authorization\n\nIt’s possible that the authorization is declined before any related information is transmitted to Stripe. In these cases, the cardholder involved must directly contact the business to determine the cause of the decline because Stripe hasn’t received a record of the authorization request.\n\nYou might encounter additional instances of declines without an associated webhook event or authorization object that Stripe can assist with. To determine the classification of the decline, contact Stripe support with the information provided above. We can help to determine the most appropriate steps to investigate the decline(s).",
  "title": "Issuing authorizations | Stripe Documentation",
  "description": "Learn how to use Issuing to handle authorization requests.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/controls/token-management",
  "markdown": "# Token Management | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Issuing to manage network tokens on your cards.\n\n## About tokens![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTokens are virtual representations of issued cards that are created when a cardholder:\n\n*   Adds a card to a digital wallet like Apple Pay or Google Pay\n    \n*   Saves a payment method for their account at an online storefront or intermediary payment method\n    \n\nCustomers can use tokens for payment, and they don’t expose sensitive card information every time they use them. As such, they function as substitutes for card details including the number, expiration date, and verification code, reducing the risk of stolen card information because of a transaction or a fraudulent actor. Because they don’t expose sensitive card information, tokens are generally considered a more secure form of payment than physical cards, or the manual entry of card details into a checkout form.\n\nTokens are most relevant for users that:\n\n*   Allow their cardholders to spend using Apple Pay, Google Pay, or Samsung Pay\n*   Have significant issuing volume on Card Not Present transactions (like online purchases)\n*   Want to incorporate token behavior into their business logic\n\n## Token management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Issuing allows you to view and manage details associated with all tokens issued through your program with the [Tokens API](https://docs.stripe.com/api/issuing/tokens). We provide these details to help you better understand the characteristics of your tokens and how they’re being used. For example, you can find details on the following key characteristics:\n\n*   **The originator of a token:** Whether a [digital wallet provider or business](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-wallet_provider) is requesting the token.\n*   **The predicted riskiness of a token:** The card network’s assessment of [risk](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data-visa-token_risk_score) and its [recommendation](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data-wallet_provider-suggested_decision) for a given token.\n*   **The device associated with a token:** Whether a watch, phone, or other [device](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data-device-type) is requesting the token, and the [assessed risk](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data-wallet_provider-device_trust_score) of that device.\n*   **The cardholder characteristics of the token originator:** Whether the cardholder values such as the [name](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data-wallet_provider-cardholder_name) and [address](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data-wallet_provider-cardholder_address) match those of the cardholder in Stripe for additional verification.\n\nIn addition to visibility into token characteristics, the Tokens API allows you to activate, suspend, or deactivate tokens based on your desired workflows. For example, you might opt to do so to:\n\n*   Verify which existing tokens migrate to a new card when your program replaces a card.\n*   Deactivate tokens suspected of fraudulent activity without impacting the underlying card.\n\nThe `issuing.authorization` object also has a [token field](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-token) that populates if it uses a token.\n\n## Risk controls![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe receives a tokenization request, we assess a variety of variables to determine whether or not we should approve the request. As a result of this assessment, we choose one of the following:\n\n*   Approve the tokenization request, creating the token and adding it to a digital wallet.\n*   Require additional authentication, triggering a one-time passcode flow through the digital wallet provider. After the authentication successfully completes, we create the token and add it to the corresponding digital wallet. In these scenarios, the [status field](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-status) is populated as `requested` until the additional authentication completes.\n*   Reject the tokenization request, preventing the token from being created.\n\nUsers also have the ability to put their own additional risk controls in place on top of Stripe’s. The Tokens API doesn’t allow for the outright rejection of a tokenization request at the point of creation, but users can deactivate or suspend tokens shortly after creation.\n\n## How tokens work![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUnderstand how tokens work to give yourself a picture of token creation and the token lifecycle.\n\n### Create a token![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nToken creation, or tokenization, is a multi-step process involving cardholders, users, a digital wallet provider, Stripe, and a card network. The example scenario below shows the steps the cardholder must complete and the processes involved when using the Tokens API as part of your program.\n\n#### Example scenario![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA cardholder on your Issuing program wants to add their Stripe-issued card to a digital wallet, such as Apple Pay. To do so, they open their digital wallet app and complete prompts to enter their cardholder information (such as name and billing address), and card information (such as card number and expiration date).\n\nThis information is then submitted to the wallet provider, (in this case, Apple Pay) which is registered with the card’s underlying network (for example, Visa or Mastercard) as a ‘token requestor’ within the network. Next, the card network conducts a series of validations against this data, combines it with their own data into a tokenization request, and forwards it to Stripe to decide. Stripe conducts its own additional validation to determine how to proceed with the request. As noted earlier on this page, this validation step can result in three outcomes:\n\n*   Stripe approves the tokenization, which activates the token in the wallet, making it ready to use. Stripe sends out the `issuing_token.created` event to any listening webhook endpoints.\n*   Stripe requires additional verification, which prompts an authentication challenge to the cardholder. Stripe sends out the `issuing_token.created` event to any listening webhook endpoints. The token becomes active when the cardholder successfully completes this step. Stripe sends out the `issuing_token.updated` event to any listening webhook endpoints as soon as the token becomes activated.\n*   Stripe declines the tokenization request, which prevents the token from being added to the wallet. Stripe doesn’t send out the `issuing_token.created` event to any listening webhook endpoints.\n\nThe wallet provider or the card network can halt a tokenization request from proceeding further at any step in the tokenization process—Stripe doesn’t always receive notification when this happens.\n\nThe sequence diagram below helps to further illustrate the tokenization process.\n\n### Token lifecycle![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter a token is created, it can exist in four distinct states in the digital wallet:\n\n*   **Inactive**: The token request is outstanding, and the token can’t be used for authorizations yet. An inactive token in the Tokens API has a status of `requested`.\n*   **Suspended**: The token is temporarily unavailable to use in the wallet. A cardholder or a Stripe user using the Tokens API can trigger a token suspension. Cardholders can’t undo suspensions by a Stripe user (that is, through a digital wallet app). Users can only reactivate suspended cards directly through the Tokens API.\n*   **Active**: The token is available for use in the wallet it’s been added to.\n*   **Deleted**: The token has been removed from the wallet and you can no longer use it. You can’t modify tokens in this state.\n\nThe below state diagram helps show the different states, how they’re reflected in the API, and how you can use our APIs to modify them.\n\nStripe automatically synchronizes token status with the cardholder states and card states when they change. Stripe also migrates tokens between card replacements if the original card isn’t canceled first. To see which tokens are associated with which card, use the [List API](https://docs.stripe.com/api/issuing/tokens/list).\n\n### Merchant tokens![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBusinesses can also create tokens when saving a payment method for future use at a retailer (for example, a cardholder saving their card details for checkout at Amazon). In these scenarios, the business originates the token creation, and the Tokens API won’t have the [wallet\\_provider field](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-wallet_provider). To assess the underlying business that originated the token, we recommend examining the [business details](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-merchant_data) associated with authorizations conducted using the token. If you issue cards from MasterCard, tokens that originate from them might populate a readable name in the [network\\_data.mastercard.token\\_requestor\\_name field](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data-mastercard-token_requestor_name).\n\nMerchant tokens are tied to the specific business (token requestor in the card network) that originates them and can’t be used at other businesses.\n\n### Identify when a token was used for a transaction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAuthorizations or Transactions that used a token have an expandable reference to the Token object in the `token` attribute. This field is null for Authorizations or Transactions that didn’t use a token. Combine this with the `wallet` attribute on the Authorization or Transaction object, or the [`wallet_provider`](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-wallet_provider) attribute on the Token object, to determine whether a digital wallet token was used.\n\nSee the [Authorizations](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-token) and [Transactions](https://docs.stripe.com/api/issuing/transactions/object#issuing_transaction_object-token) API documentation for more details.\n\n## Network data restrictions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Issuing token object contains an optional, [expandable field](https://docs.stripe.com/api/expanding_objects) called [network\\_data](https://docs.stripe.com/api/issuing/tokens/object#issuing_token_object-network_data). It contains additional, sensitive card network details about your tokens, primarily related to the token creation process. Because this data is highly sensitive, you must have a [restricted access key](https://docs.stripe.com/keys#create-restricted-api-secret-key) with the necessary permissions to access the data, and can only view the data on a token within the first 24 hours after token creation (based on the **created** value). This data is only available in the API to [retrieve a token](https://docs.stripe.com/api/issuing/tokens/retrieve) and the API to [update a token status](https://docs.stripe.com/api/issuing/tokens/update).\n\nTo access this data, configure your restricted access keys with the following permissions:\n\n*   Issuing tokens read access for Retrieve and List methods\n*   Issuing tokens write access for the Update Status method\n*   Issuing token network data read access for accessing **network\\_data** within the 24 hour time limit\n\nIf you need access to **network\\_data** beyond the initial 24-hour period that it’s available for, you must [limit the IP addresses](https://docs.stripe.com/keys#limit-api-secret-keys-ip-address) from which your restricted access keys will use.\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn Issuer’s cardholder can create tokens for free at storefronts or in digital wallets. We recommend creating one in a digital wallet of your choice to understand the webhook events, API fields, and effects of updating a token. To do so, follow the [Digital Wallets guide](https://docs.stripe.com/issuing/cards/digital-wallets) for manual provisioning first.\n\nIf you prefer to test Tokens API in test mode, you can create a test mode authorization with the [wallet field](https://docs.stripe.com/api/issuing/authorizations/test_mode_create#test_mode_create_authorization-wallet) set to one of the available choices. The **token** field is set on the resulting authorization. You can then use the API methods on this token as normal. In these scenarios, not all fields are set, including **network\\_data**, and this token isn’t used for subsequent test authorizations.\n\n## The Tokens API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nToken data is only accessible through the Tokens API. Below are a few examples applications.\n\n### Verify a successful manual provisioning example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   In this example, you subscribe to the `issuing_token.created` and `issuing_token.updated` events.\n*   When you receive an `issuing_token.created` event, use the Retrieve API and expand **network\\_data** to look at provisioning details. Here’s an example:\n\n`{   \"id\": \"evt_1NxBn3FUQNp5XJkna0rkKU2r\",   \"object\": \"event\",   \"api_version\": \"2024-06-20\",   \"created\": 1691100189,   \"data\": {     \"object\": {       \"id\": \"intok_1NuMIZFUQNp5XJknPmDzEz0t\",       \"object\": \"issuing.token\",       \"card\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",       \"created\": 1691100179,       \"device_fingerprint\": \"intd_1JDmgz2OpvKigH2CxnEEs\",       \"last4\": \"9203\",       \"livemode\": true,       \"network\": \"mastercard\",       \"network_updated_at\": 1691100170,       \"status\": \"requested\",       \"wallet_provider\": \"apple_pay\"     }   },   \"livemode\": true,   \"pending_webhooks\": 0,   \"request\": {     \"id\": \"req_ARTvFhTufhHna9\",     \"idempotency_key\": \"49a40678-8f45-4c91-9d6f-98a5bd569f9d\"   },   \"type\": \"issuing_token.created\" }`\n\n*   Check that the **wallet\\_provider** field is populated, which tells you that it originates from a digital wallet, and take note of the object’s **id**. Use that in the Retrieve API call:\n\n`curl https://api.stripe.com/v1/issuing/tokens/intok_1NuMIZFUQNp5XJknPmDzEz0t \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d \"expand[]\"=network_data \\  -G`\n\nThis yields the following response:\n\n`{   \"id\": \"intok_1NuMIZFUQNp5XJknPmDzEz0t\",   \"object\": \"issuing.token\",   \"card\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",   \"created\": 1691100159,   \"device_fingerprint\": \"intd_1JDmgz2OpvKigH2CxnEEs\",   \"last4\": \"9203\",   \"livemode\": true,   \"network\": \"mastercard\",   \"network_data\": {     \"device\": {       \"device_fingerprint\": \"intd_1JDmgz2OpvKigH2CxnEEs\",       \"ip_address\": null,       \"location\": \"+30.22/-89.10\",       \"name\": \"AB's phone\",       \"phone_number\": null,       \"type\": \"phone\"     },     \"mastercard\": {       \"card_reference_id\": \"...\",       \"token_reference_id\": \"...\",       \"token_requestor_id\": \"...\",       \"token_requestor_name\": \"APPLE PAY\"     },     \"type\": \"mastercard\",     \"wallet_provider\": {       \"account_id\": null,       \"account_trust_score\": null,       \"card_number_source\": \"manual\",       \"cardholder_address\": null,       \"cardholder_name\": null,       \"device_trust_score\": null,       \"hashed_account_email_address\": null,       \"reason_codes\": [],       \"suggested_decision\": null,       \"suggested_decision_version\": null     }   },   \"network_updated_at\": 1691100170,   \"status\": \"requested\",   \"wallet_provider\": \"apple_pay\" }`\n\n*   In the example, **card\\_number\\_source** is `manual`, token **status** is `requested`, and it’s an Apple Pay wallet. This means the cardholder had the card details with them when they put the card in their Apple Wallet, and they need to complete additional verification before they can use the card in the wallet.\n*   A few seconds later, you can see an `issuing_token.updated` event for the same token. The token status is now in the `active` state. This means the cardholder successfully completed the verification and can use their card for Apple Pay.\n\n### Delete a suspicious merchant token example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   In this example, you subscribe to the `issuing_token.created` event.\n*   The webhook receives an `issuing_token.created` event.\n\n`{   \"object\": {     \"id\": \"intok_1NuMIZuTQ2hhXJooNmDzEz0t\",     \"object\": \"issuing.token\",     \"card\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",     \"created\": 1691100179,     \"device_fingerprint\": null,     \"last4\": \"9203\",     \"livemode\": true,     \"network\": \"visa\",     \"network_updated_at\": 1691100170,     \"status\": \"active\"   } }`\n\n*   The token has no **wallet\\_provider** field, so it’s a merchant token. Use the Retrieve API and expand **network\\_data** to look at provisioning details.\n\n`curl https://api.stripe.com/v1/issuing/tokens/intok_1NuMIZFUQNp5XJknPmDzEz0t \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d \"expand[]\"=network_data \\  -G`\n\nThis yields the response:\n\n`{   \"id\": \"intok_1NuMIZFUQNp5XJknPmDzEz0t\",   \"object\": \"issuing.token\",   \"card\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",   \"created\": 1691100186,   \"device_fingerprint\": null,   \"last4\": \"4674\",   \"livemode\": true,   \"network\": \"visa\",   \"network_data\": {     \"visa\": {       // ...other fields     },     \"type\": \"visa\",     \"wallet_provider\": {       \"card_number_source\": \"manual\",       \"cardholder_address\": null,       \"cardholder_name\": \"abc\",       // ...other fields     }   },   \"network_updated_at\": 1691100170,   \"status\": \"active\", }`\n\n*   You can see that the cardholder name is an invalid value that doesn’t match the expected cardholder name.\n*   To avoid any fraudulent activity, use the Update Status API to delete the token before it can be used. Then follow up with the cardholder to see if the token was actually requested by them. If they didn’t request it, cancel and replace the card if the number was stolen, or the account compromised.\n\n`curl https://api.stripe.com/v1/issuing/tokens/intok_1NuMIZFUQNp5XJknPmDzEz0t \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d status=deleted`\n\n### Device monitoring example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs with the previous examples, subscribe to the token events, and perform a Retrieve API request on the ID when you receive an event. In this case, you see that a **device\\_fingerprint** is populated, and check the **network\\_data.device.location** field. You see that the device was provisioned in a different country using the location coordinates. You see that you received prior notice that this cardholder was traveling abroad, and that it matches the country that they specified they were traveling to.",
  "title": "Token Management | Stripe Documentation",
  "description": "Learn how to use Issuing to manage network tokens on your cards.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/purchases/transactions",
  "markdown": "# Issuing transactions | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Issuing to handle transactions.\n\nAfter an [authorization](https://docs.stripe.com/issuing/purchases/authorizations) is approved and is captured, the `status` on the authorization is set to `closed` and a [Transaction](https://docs.stripe.com/api#issuing_transaction_object) object is created. This normally happens within 24 hours; however hotels, airlines, and car rental companies are able to capture up to 31 days after authorization.\n\nWhen an authorization is captured, two things happen.\n\n*   The `status` on the authorization is set to `closed`, releasing the purchase amount held by that authorization. A [balance transaction](https://docs.stripe.com/reports/balance-transaction-types) of type `issuing_authorization_release` is created to represent this.\n*   A new transaction object of type `capture` is created. The purchase amount is deducted from the [balance you’re using for Issuing](https://docs.stripe.com/issuing/funding/balance).\n\n[Spending controls](https://docs.stripe.com/issuing/controls/spending-controls), [real time authorization controls](https://docs.stripe.com/issuing/controls/real-time-authorizations), and card status (whether a card is active or not) don’t apply for capture. They can be used to determine whether authorizations are approved, but captures for approved authorizations always succeed.\n\n## Handling other transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to regular transactions, there are a few other cases that you should be ready to handle.\n\nRefunds are transactions with `type` of `refund`.\n\nWhen we create a transaction representing a refund or credit, we try to link it to the original payment authorization. Refunds aren’t necessarily tied to the original payment transaction or authorization, so linking them is an inexact science. As a result, we might link to an unrelated authorization or be unable to link to an authorization at all (for example, if the card is credited rather than refunded). In these cases, the `authorization` field of the transaction is set to `null`, and the transaction won’t be linked to the authorization. We process all refunds and credits the same way, regardless of their linkage to a payment authorization.\n\n`{   \"id\": \"ipi_1GTG10EEsyYlpYZ9VJn2xV3B\",   \"object\": \"issuing.transaction\",   \"amount\": 100,   \"authorization\": \"iauth_1GBZQyEEsyYlpYZ9255L8GQC\",   \"balance_transaction\": null,   \"card\": \"ic_1GBZQJEEsyYlpYZ99v6rq38S\",   \"cardholder\": null,   \"created\": 1585783834,   \"currency\": \"usd\",   \"livemode\": false,   \"merchant_amount\": 100,   \"merchant_currency\": \"usd\",   \"merchant_data\": {     \"category\": \"taxicabs_limousines\",     \"city\": \"San Francisco\",     \"country\": \"US\",     \"name\": \"Rocket Rides\",     \"network_id\": \"1234567890\",     \"postal_code\": \"94111\",     \"state\": \"CA\",     \"url\": null   },   \"metadata\": {},   \"type\": \"refund\", }`\n\n### Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo simulate the creation of a refund transaction, you can use the [Transaction Refund API](https://docs.stripe.com/api/issuing/transactions/test_mode_refund) in the Issuing test helpers.\n\n`curl -X POST https://api.stripe.com/v1/test_helpers/issuing/transactions/`\n\n`{{TRANSACTION_ID}}`\n\n`/refund \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nTo create a refund transaction that doesn’t link to an authorization, use the [Create Unlinked Refund API](https://docs.stripe.com/api/issuing/transactions/test_mode_create_unlinked_refund) in the Issuing test helpers.\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/transactions/create_unlinked_refund \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d card=  {{CARD_ID}}   \\  -d amount=1000`",
  "title": "Issuing transactions | Stripe Documentation",
  "description": "Learn how to use Issuing to handle transactions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/purchases/disputes",
  "markdown": "# Issuing disputes | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Issuing to dispute transactions.\n\nThe purpose of a dispute is to recover funds for captured transactions. Disputes are often used to correct fraudulent transactions or problems with the quality or delivery of the product.\n\nStripe offers a guided Dashboard process and an API to submit disputes and monitor them through to resolution. This process typically takes between 30 and 90 days. If you only manage occasional disputes, we recommend using the Dashboard. If you manage a high volume of disputes, we recommend programmatically managing disputes using the API.\n\nIf you think a card has been compromised, [cancel and replace it](https://docs.stripe.com/issuing/cards/physical/standard#cancelling-cards) using the Dashboard or the API before continuing with the dispute process.\n\n## Considerations before initiating a dispute![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCheck the transaction’s dispute eligibility.\n\n*   The transaction must be a [capture](https://docs.stripe.com/issuing/purchases/transactions) and not a refund.\n    \n*   The transaction isn’t a mobile push payment transaction.\n    \n*   Fewer than 110 days have passed since the business captured the transaction.\n    \n    *   However, if you plan to file an Authorization dispute, this deadline is shorter:\n        *   For Visa, the transaction was captured fewer than 65 days ago.\n        *   For Mastercard, the transaction was captured fewer than 80 days ago.\n*   If you plan to file a fraud dispute, ensure that:\n    \n    *   **For Visa card-not-present fraud:** Fewer than 35 fraud disputes have been filed on the card in the last 120 days.\n    *   **For any type of Mastercard fraud:** Fewer than 35 fraud disputes have been filed over the card’s lifespan.\n\nStripe attempts to block disputes on ineligible transactions. In the Dashboard, the **Dispute transaction** button is only enabled for eligible transactions. In the API, attempting to dispute an ineligible transaction results in an error.\n\nNext, ensure that the cardholder has exhausted other means of resolving the issue. They must attempt to return any products they received, cancel any ongoing services, and seek a refund directly from the business. Collect documentation of these attempts to use as evidence when filing the dispute.\n\n## Lifecycle![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Merchant terminology\n\nIn the above diagram, _merchant_ refers to the _acquiring merchant_, the business receiving the payment.\n\nNewly-created disputes begin in an `unsubmitted` status. At this point, you can update their evidence and metadata. After you’ve added all the required evidence, you can then submit the dispute. If you don’t submit a dispute within 110 days of the transaction clearing, its status becomes `expired`.\n\nStripe and card networks process disputes that have a status of `submitted`. As such, you can’t update dispute evidence, but you can still update their `metadata`. Submitted disputes enter into a multi-step process defined by card networks and participating banks. After a dispute is resolved, Stripe transitions it to either the terminal `won` or `lost` status.\n\n## Creation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFill out the **Dispute Amount** field to indicate the disputed amount (full or partial). The field’s initial value is the transaction amount. Submissions that have empty **Dispute Amount** fields create disputes with the full transaction amount.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dashboard-issuing-partial-disputes-amount.4e5e241c2c73428c07e60cf2e2c133bc.png)\n\nDispute Amount field on the Issuing dispute creation page\n\nClick **Dispute transaction** when viewing an eligible transaction. You’ll be redirected to a form which requests different information based on the dispute reason and product type (merchandise, services or digital goods). A dispute is created the first time you click **Save**. If you click **Submit** without saving, we create a dispute before submitting it.\n\nOnce you submit a dispute, you can’t modify the information or resubmit the dispute.\n\n## Update ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the **Unsubmitted** tab to access disputes that are in progress. The **Submit before** date indicates when the dispute expires.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dispute-unsubmitted-tab-usd.a6674be2254ad9d5fafde47eba475552.png)\n\nFrom the individual dispute page, click **Edit submission** to access the form where you can update the evidence.\n\n## Submission ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe **Submit** button on the evidence form is enabled when all required evidence is present.\n\n#### Caution\n\nReview the evidence thoroughly before you submit, because you can’t modify dispute information after submitting the dispute.\n\n## Resolution ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe updates a dispute’s status when we hear back from the card network.\n\nIf you win the dispute, its status changes to `won` and we credit your Issuing balance in the form of an `issuing_dispute` [balance transaction](https://docs.stripe.com/reports/balance-transaction-types#issuing_related). This balance transaction is accessible in the Dashboard under [All transactions](https://dashboard.stripe.com/balance) and on the bottom of the dispute detail page.\n\n#### Note\n\nIf you make a transaction in a currency other than your account’s default currency (for example, a GBP transaction that your USD card pays), Stripe refunds the won dispute in the transaction’s original currency.\n\nIf you lose the dispute, the dispute’s status changes to `lost` and we don’t credit any amount to your Issuing balance.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dispute-balance-transactions-panel-usd.a4e6e46b8e975afd9ff3ffd67fbcb840.png)\n\nViewing a dispute’s balance transactions in the Dashboard.\n\nStripe processes disputes according to card network rules. These rules are updated twice a year. You can review the latest rules on each network’s website:\n\n*   **Visa**: [Visa Core Rules and Visa Product and Service Rules](https://usa.visa.com/dam/VCOM/download/about-visa/visa-rules-public.pdf)\n*   **Mastercard**: [Mastercard Rules](https://www.mastercard.us/en-us/business/overview/support/rules.html)\n    *   The Mastercard Chargeback Guide is especially useful for understanding Mastercard’s dispute rules.\n\n## Testing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s test mode allows you to test dispute logic without any live mode effects. For example, we send webhook events, create [balance transactions](https://docs.stripe.com/reports/balance-transaction-types), and update your test mode Issuing balance without moving any funds or changing any balances in live mode.\n\nSimilar to live mode, a test mode dispute transitions to `expired` 110 days after the transaction is captured.\n\nWhen submitting a test mode dispute through the Dashboard, you can choose the dispute’s outcome. Selecting **Won** automatically changes the dispute’s `explanation` field to `winning_evidence`, and selecting **Lost** automatically changes the dispute’s **explanation** field to `losing_evidence`.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/issuing-dispute-testmode-outcome.4ecf905762fae3b734c479c7b838686c.png)\n\n## Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo be notified of changes to your disputes, you can listen for Issuing dispute [webhook events](https://docs.stripe.com/webhooks). All Issuing dispute events contain the updated [Dispute](https://docs.stripe.com/api/#issuing_dispute_object) object.\n\n| Webhook events | Trigger |\n| --- | --- |\n| `issuing_dispute.created` | Dispute created. |\n| `issuing_dispute.updated` | Dispute updated. |\n| `issuing_dispute.submitted` | Dispute submitted. |\n| `issuing_dispute.funds_reinstated` | Funds transferred to your Issuing balance (usually associated with `won` dispute status). |\n| `issuing_dispute.closed` | Dispute transitioned into a `won`, `lost`, or `expired` status. |\n\n## Dispute reasons and evidence![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must submit supporting documentation with a dispute. The quality of this documentation directly influences your chances of winning and the strongest disputes have clear, descriptive documentation.\n\nThe type of documentation required depends on the reason for the dispute. Because of this, it’s important to choose the correct reason.\n\nDisputes can be submitted with one of these reasons:\n\n*   **Canceled**: Cardholder canceled or returned merchandise or canceled services, and the merchant didn’t process a credit or void a transaction receipt.\n*   **Duplicate**: Covers processing error dispute types, including duplicate transaction, incorrect amount, paid by other means, and so on.\n*   **Fraudulent**: The cardholder’s details were compromised and the transaction wasn’t authorized by them.\n*   **Merchandise not as described**: Cardholder received the merchandise, but it didn’t match what was presented at time of purchase, or it was damaged or defective.\n*   **Not received**: Cardholder participated in the transaction but didn’t receive the merchandise or service.\n*   **No valid authorization**: (API only) The merchant processed a transaction without a valid authorization.\n*   **Service not as described**: Cardholder received the service, but it didn’t match what was presented at time of purchase.\n*   **Other**: A dispute scenario that doesn’t clearly qualify as any other dispute reason. Authorization disputes might have this reason (for example, if filed through the Dashboard).\n\nIn the Dashboard, “Merchandise not as described” and “Service not as described” are consolidated under “Not as described”.\n\nEach reason requires a different set of evidence:\n\n| Evidence | Description |\n| --- | --- |\n| Explanation | A description of the transaction and why the cardholder is disputing it. You can also use this field to provide an additional explanation that’s not captured anywhere else. It’s important for the cardholder to verify that they didn’t participate in the transaction, and that the transaction wasn’t made by someone known to the cardholder. |\n| Additional documentation | Relevant documents such as card statements or return shipping tracking. The files must be in PDF or JPEG format. Before submitting the dispute, ensure that all text and images are clear and large enough to be legible in a black-and-white fax transmission. Encouraging cardholders to keep their billing address up to date is a key component in the assessment of fraudulent disputes. |\n\n### Fraud disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can dispute a transaction for fraud if the cardholder’s card details were compromised and they didn’t authorize the transaction.\n\nBefore filing a dispute:\n\n1.  Confirm with the cardholder that they didn’t make the transaction in error, and that it wasn’t made by someone known to them. Transactions made by a friend or family member, for example, don’t constitute fraud for dispute purposes.\n2.  Cancel the affected card.\n\nIn certain situations, you can lose fraud dispute rights for a transaction:\n\n*   **For card-present transactions**: A card network might automatically reject a fraud dispute because liability defaults to the issuer.\n*   **For card-not-present transactions**: A card network might automatically reject a fraud dispute if the cardholder was authenticated during the transaction. That often happens when [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") was requested or a secured payment method like Apple Pay was used.\n\n### Authorization disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach time an acquiring merchant processes a transaction, they must first request an authorization from the issuer. If a merchant captures a payment without a valid authorization, you can dispute the transaction. The reason you should choose depends on the surface used to submit the dispute:\n\n*   **Filing dispute via API**: File the dispute under the `no_valid_authorization` reason.\n*   **Filing dispute via Dashboard**: File the dispute under the `other` reason and specify in the `explanation` field that the merchant didn’t get a valid authorization.\n\nAuthorization disputes are distinct from fraud disputes:\n\n*   File a fraud dispute when the cardholder didn’t participate in the transaction. For example, a thief stole their card and used it.\n*   File an authorization dispute when the merchant didn’t have a valid authorization for the transaction. For example, they captured a payment two days after its authorization expired.\n\nA common reason for an authorization dispute is an overcapture. An overcapture occurs when the captured amount exceeds the authorized amount. When you submit an authorization dispute for an overcapture, you must adjust the dispute amount to include only the amount that exceeded the authorization.\n\n#### Note\n\nSome Merchant Category Codes (MCCs) allow overcaptures of certain amounts or disallow authorization disputes. For details, refer to the current card network rules for your region.\n\nA card network can reject an authorization dispute if the transaction had a valid authorization. In the case of an overcapture, it can reject the dispute if the disputed amount doesn’t take into account the allowed overcapture amount for the associated MCC.\n\n## Withdrawing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe can only withdraw a dispute within one day of its submission to the card network. If you want to withdraw a dispute, contact [Stripe Support](https://support.stripe.com/contact) immediately.\n\n## Liability for fraud (platforms in the USA)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost aspects of Regulation Z don’t apply to business-purpose cards, but Regulation Z does protect users of business-purpose cards from fraud and other types of “unauthorized card use,\" which means the use of a charge card by a person who doesn’t have the authority to use it. In most cases, an accountholder can’t be held responsible for unauthorized use of cards linked to their account unless a reasonable investigation into the fraud is conducted. However, if the account holder has 10 or more employee authorized users, they might not qualify for this protection.\n\nWhen one of your users disputes a transaction because the user believes it was unauthorized, Stripe sends the dispute to the card network for adjudication (as with any other type of disputed transaction). Stripe or the card network determines who must pay for the fraud: you or the merchant.\n\nIf Stripe or the card network determines the merchant is liable for the fraud, then neither you nor your user are responsible for the disputed transactions.\n\nIf Stripe or the card network determines that you’re liable for the fraud, then you might be required to pay for the disputed transaction. Stripe performs a reasonable investigation into the dispute to determine whether fraud actually occurred or whether the user doesn’t qualify for protection under Regulation Z. If the investigation uncovers that unauthorized card use actually occurred and that the user qualifies for protection, then you remain liable for the unauthorized transactions. Alternatively, if the investigation uncovers that unauthorized card use didn’t occur or that the user doesn’t qualify for protection, then we hold the accountholder responsible for the disputed charges.\n\n## Emailing connect accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIssuing platforms must send regulated notice emails to connected accounts when a dispute is submitted, and again when a dispute is won or lost. [Learn more about regulated notices](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices).\n\n## Use with Stripe Treasury![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDisputes of `ReceivedDebits` on `FinancialAccounts` have a corresponding [DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals) once the dispute is submitted.",
  "title": "Issuing disputes | Stripe Documentation",
  "description": "Learn how to use Issuing to dispute transactions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/access",
  "markdown": "# Get started with API access to Treasury and Issuing\n\n## Immediately access test mode to experiment before going live.\n\nYou can use Stripe Treasury and Issuing in test mode to see what functionality you want to enable in your live integration.\n\n## Get test mode access to Treasury and Issuing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEnable your Stripe account to request `issuing` and `treasury` capabilities on connected accounts.\n\n[Activate Test Mode in the Dashboard](https://dashboard.stripe.com/setup/treasury/activate?a=1)\n\nClick **Activate Test Mode in the Dashboard**. Then, from the Dashboard, click **Get started** > **Enable Test mode**.\n\n## Start with test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are a few ways to start testing the Issuing and Treasury APIs.\n\n### Test with the Issuing and Treasury sample application![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Issuing and Treasury sample application](https://docs.stripe.com/treasury/examples/sample-app) to onboard your first test mode connected account, create a financial account and card, and make test transactions.\n\n### Test from the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must use the API or sample app to create financial accounts and cards linked to financial accounts. After you create a financial account, you can use the Dashboard to view activity, copy routing and account numbers, and move funds from your platform Treasury balance into the financial account. After you create a card, you can use the Dashboard to make test authorizations. See [Use the Dashboard for Issuing with connect](https://docs.stripe.com/issuing/connect#using-dashboard-issuing).\n\n### Test Treasury only (without Issuing)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo test Treasury without Issuing, request the `treasury` capability on a connected account and don’t request `card_issuing`. When you activate test mode through the link above, it gives your platform the ability to request both capabilities independently.\n\n### Confirm test mode is enabled![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo confirm you’ve enabled Treasury and Issuing in test mode, click **Treasury** in the Dashboard to access the [Financial Accounts page](https://dashboard.stripe.com/test/connect/financial-accounts). If you can’t access Financial Accounts then you haven’t enabled access.\n\n## Configure your account to go live![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEnabling Treasury and Issuing through the link above lets you try out basic functionality in test mode. However, this is a temporary state, and after you’re approved for a [supported business use case](https://support.stripe.com/questions/supported-business-use-cases-for-stripe-issuing), your account loses access to any test mode objects you created in this mode, such as test financial accounts, cardholders and cards.\n\n[Speak to sales](https://go.stripe.global/treasury-inquiry) to get approved for a supported business use case, and configure your account for live mode and ongoing test mode access.\n\n#### Caution\n\nSpeak to sales before building a full API integration, because some functionality could change.",
  "title": "Get started with API access to Treasury and Issuing | Stripe Documentation",
  "description": "Immediately access test mode to experiment before going live.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/requirements",
  "markdown": "# Treasury requirements | Stripe DocumentationThe Stripe Docs logo\n\n## Understand the requirements for using Stripe Treasury.\n\nTreasury has compliance requirements and restrictions in addition to those needed for [Stripe Payments](https://docs.stripe.com/payments). They apply to both the platform and its connected accounts. Offer your Treasury-based financial services only to businesses that meet the requirements.\n\n## Supported countries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Treasury is available only to platforms and connected accounts located in the United States.\n\n## Business use cases only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Treasury is available only to platforms with B2B use cases. Stripe doesn’t offer financial accounts to consumers or provide Treasury features for consumer purposes.\n\n## Connected account types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTreasury only supports connected accounts that don’t use a Stripe-hosted dashboard and where your platform is responsible for requirements collection and loss liability, including Custom connected accounts. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Treasury.\n\nAs a platform with connected accounts, you’re responsible for maintaining a minimum API version, communicating terms of service updates to your connected accounts, handling information requests from them, and providing them with support. Because your platform is ultimately responsible for the losses your connected accounts incur, you’re also responsible for vetting them for fraud. To learn more, read the [Treasury fraud guide](https://docs.stripe.com/treasury/examples/fraud-guide).\n\n## Supported countries of residence![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Treasury currently supports businesses in the US only, but the business owners and authorized persons of those businesses can reside in over 150 countries. Some countries of residence, however, can require a more detailed review before you can onboard them to your platform.\n\nStripe prohibits using Treasury for any dealings, engagement, or sale of goods or services linked directly or indirectly with jurisdictions Stripe has deemed high risk, such as Cuba, Iran, North Korea, Crimea region, and Syria.\n\n### Standard review countries of residence![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTreasury supports business owners, beneficial owners, and authorized persons that have a primary address in one of the following countries, typically without an enhanced review:\n\n### Enhanced review countries of residence![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTreasury supports Business owners, beneficial owners, and authorized persons that have a primary address in one of the following countries, but they’re subject to an enhanced review:\n\n*   St Vincent and the Grenadines\n    \n\n## Prohibited and restricted business types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe businesses and business practices in the following categories are either restricted or prohibited from using Stripe Treasury. Financial network rules or the requirements of our financial services providers determine whether Stripe can provide financial services. In some cases, a business in one of these categories can use Treasury after getting explicit approval from Stripe.\n\n#### Warning\n\nBusinesses that offer illegal products or services are never eligible to use Stripe Treasury.\n\nFor more information about businesses restricted by Stripe Payments, and by extension Treasury, see [Prohibited and Restricted Businesses](https://stripe.com/restricted-businesses).\n\n### Prohibited business types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe businesses and business practices in the following categories are classified as prohibited and are therefore not eligible to use Treasury:\n\n*   Adult industry, escort, or dating services\n*   Arms trading—retail or manufacturing\n*   Casinos or gaming\n*   Cryptocurrency\n*   Marijuana, tobacco, or illegal drug products and services\n*   Money services and currency exchange\n*   Unfair, predatory, or deceptive practices, including multi-level marketing and pyramid schemes\n*   Payday lending and tax anticipation programs\n*   Stock promotion\n*   Tattoo and massage parlors\n*   Waste or hazardous material management\n\n### Restricted business types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following categories of businesses and business practices are classified as restricted and are subject to enhanced review:\n\n#### Regulated industries, such as:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Virtual currencies and cryptocurrencies, non-fungible tokens (NFTs), and mining services\n*   Investment and brokerage services\n*   Insurance services\n*   Debt collection, debt relief, and credit restoration agencies\n*   Bail bonds\n*   Lending and cash advance services\n*   Student loan assistance companies\n*   Unregistered charities\n\n#### Businesses that can pose elevated financial risk, such as:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Art dealers, antique dealers, or auction houses\n*   Import, export, and freight transport of physical commodities\n*   Jewelry, gems, precious metals—dealers or wholesalers\n*   Games of skill and chance, including lotteries, fantasy sports, and sweepstakes\n*   Direct marketing businesses, including telemarketing, “As Seen on TV”, and door-to-door sales\n*   Telecommunication or surveillance equipment providers\n*   Talent and model agencies\n*   Vehicle sales\n*   Secondhand shops and pawnshops\n*   Warranties and lifetime guarantees\n*   Travel agencies, including tour operators, hotel reservation services, and resort promotions\n*   Pharmaceutical, vitamin, and supplement sales\n\n## Politically exposed persons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe screens applications to identify any connected account user that is a politically exposed person (PEP). All PEPs are subject to enhanced review.",
  "title": "Treasury requirements | Stripe Documentation",
  "description": "Understand the requirements for using Stripe Treasury.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/compliance",
  "markdown": "# Treasury and Issuing product marketing, design, and compliance guidelines\n\n## Learn how to keep your Treasury or Issuing program and marketing campaigns compliant.\n\n#### Legal Disclaimer\n\nDon’t consider any of the information in this guide as legal advice. If you use Stripe Treasury and Stripe Issuing, consult your own legal counsel for advice about product branding and using Stripe products to offer financial services.\n\nTo offer and promote Stripe Treasury and Issuing products to your customers and connected accounts, your marketing and user interfaces must adhere to the guidelines that we outline here. These guidelines help you navigate the financial regulations that apply to Stripe products. We’ve organized them into the following sections:\n\n*   [Account management](#account-management)\n*   [Required agreements and disclosures for Issuing](#issuing-terms)\n*   [Required agreements and disclosures for Treasury](#treasury-terms)\n*   [Required agreements and disclosures for fees, credits, and rewards programs](#fees-credits-rewards-terms)\n*   [Customer communications and documents](#customer-communications-and-documents)\n*   [Going live and marketing](#going-live)\n*   [Recordkeeping](#recordkeeping)\n\nThe following table outlines the steps you must complete before onboarding your first connected accounts. If you need help, contact the Stripe Compliance team at [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com).\n\nIf you make changes to any items in the table at a later date, you must submit a request to the Stripe Compliance team using the [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835).\n\n| Topic | Checklist | Product applicability |\n| --- | --- | --- |\n| Application flow | Your application flow:<br><br>*   Includes bank disclosures<br>*   Includes required agreements<br>*   Required KYC fields<br>*   Approved by Stripe Compliance | Treasury and Issuing |\n| Fees and credits | You’ve [submitted your planned fees and credits to Stripe](https://docs.stripe.com/treasury/compliance#fees-credits-rewards-terms) | Treasury and Issuing |\n| Marketing and user interfaces | Your marketing materials, including your website landing pages, dashboards, and support pages:<br><br>*   Are approved by Stripe Compliance (or align with messaging guidelines)<br>*   Include bank disclosures | Treasury and Issuing |\n| Customer service channels | Your customers can access your customer service channels and they can:<br><br>*   Submit complaints<br>*   Submit disputes | Treasury and Issuing |\n| Account statements (optional) | If you choose to send account statements, they must:<br><br>*   Be approved by Stripe Compliance<br>*   Include Bank disclosures and relevant contact information | Treasury |\n| Receipts | You have a mechanism to send your customers Stripe-generated money transmission receipts | Treasury and Issuing |\n| Regulated customer notices | You send regulated customer notices to applicants and accountholders, and they’re either:<br><br>*   Sent by Stripe on your behalf<br>*   Sent by your platform with templates approved by Stripe Compliance | Issuing Spend Card and Charge Card |\n| Recordkeeping | You have a mechanism to retain copies of:<br><br>*   Customer consent to open accounts<br>*   Marketing materials and user interfaces<br>*   Customer communications, such as support emails<br>*   Account statements, if applicable | Treasury and Issuing |\n\n## Account management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou need the proper internal compliance controls before launching Stripe Treasury or Stripe Issuing. You also need to build the processes described in this section into your various workflows, customer service, and product channels.\n\n### Complaints program guidance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nComplaints are any expression of dissatisfaction with a product, service, policy, or employee related to Stripe Treasury or Stripe Issuing, except those expressions made by employees of your company. Properly handling complaints is mandatory when offering financial services products. See the [Handling complaints](https://docs.stripe.com/treasury/handling-complaints) guide for detailed complaint management requirements.\n\n### Disputes and charge errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs part of providing customer support, you might be notified of suspected disputed charges, charge errors, or both. The two most common types of disputes or errors are:\n\n*   You or your customer believe a charge is unauthorized\n*   You or your customer see an error on an account statement\n\nIf these errors occur, submit the dispute through the Stripe Dashboard. Select the relevant transactions and choose **Dispute**. Be prepared to provide Stripe with specific information to investigate the dispute, such as:\n\n*   Details about the authorized user\n*   Details about the disputed charge amount\n*   The transaction date\n*   An explanation of why the disputed charge is an error or unauthorized\n\nYou must report any disputed charge or error immediately upon notification of it. Failure to do so might impact your financial liability. To avoid a sustained reduction to your available balance, you can pay the disputed charge while we determine the validity of the dispute. If Stripe deems the dispute valid, we credit the disputed charge amount back to the appropriate account.\n\n### Application flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour platform must provide for three main compliance requirement workflows:\n\n*   Collection of required KYC information\n*   Presentation of the required bank disclosure\n*   Ensuring that your applicant reads and accepts the required legal agreements\n\n## Required agreements and disclosures for Issuing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re a platform and you’re not using Stripe-hosted onboarding, you must present the following program-specific agreements and disclosures for your connected accounts to accept during their account opening process. You must also provide them with ongoing access to these agreements.\n\n### Spend card users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n_Connected Account Agreements and Disclosures._\n\nYou must provide the following agreements to your connected accounts before they can start using the Stripe Issuing Spend Card Program:\n\n*   [Stripe Connected Account Agreement](https://stripe.com/legal/connect-account)\n*   [Stripe Issuing Accountholder Terms](https://stripe.com/legal/issuing-accountholder)\n*   **Issuing Bank Terms**\n    *   _Celtic Bank Users only:_ [Issuing Bank Terms - Spend Card (Celtic Bank)](https://stripe.com/legal/celtic-spend-card)\n    *   _Cross River Bank Users only:_ [Issuing Bank Terms - Spend Card (Cross River Bank)](https://stripe.com/legal/issuing/crb-spend-card)\n*   **Apple Pay Terms** (if enabled for your program)\n    *   [Apple Pay Accountholder Terms](https://stripe.com/issuing/celtic/apple-payment-platform-program-manager-customer-terms-and-conditions/legal#exhibit-c-pass-through-provisions)\n\nIn addition to the above agreements, you must provide the following disclosures to your connected accounts before they can start using the Stripe Issuing Spend Card Program:\n\n*   **Electronic Signature Consent**: You must include text near the “Issuing Bank Terms” link that states: “By clicking “submit application,” you agree to the Issuing Bank Terms, Stripe Connected Account Agreement, and Stripe Issuing Accountholder Terms, and you consent to electronic signatures as set forth in the Issuing Bank Terms.”\n*   **Commercial Financing Disclosure**: For Connected Accounts with a business address in CA, NY, or UT, you must present one of the following disclosures:\n    *   For platforms that don’t charge fees:\n        *   _Celtic Bank Users only:_ [Commercial Financing Disclosure (Celtic Bank) (no fee)](https://stripe.com/legal/issuing-offer-document)\n        *   _Cross River Bank Users only:_ [Commercial Financing Disclosure (Cross River Bank) (no fee)](https://stripe.com/legal/crb-issuing-offer-document)\n    *   For platforms that charge a $0.10 fee when creating cards for users:\n        *   _Celtic Bank Users only:_ [Commercial Financing Disclosure (Celtic Bank) (fee included)](https://stripe.com/legal/issuing-offer-document-fees)\n        *   _Cross River Bank Users only:_ [Commercial Financing Disclosure (Cross River Bank) (fee included)](https://stripe.com/legal/crb-issuing-offer-document-fees)\n    *   For platforms that charge fees other than a $0.10 fee when creating cards for users:\n        *   If you charge fees beyond Stripe’s fee of 0.10 USD, you might be required to create your own commercial financing disclosure to present to your connected accounts for creating virtual cards. You must report custom fees through Stripe’s [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835), and you must submit custom commercial financing disclosures to [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com). Both the custom fee and custom disclosure are subject to Stripe’s review and approval. To assess the applicability of commercial financing disclosures to your program, contact [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com).\n\n_Authorized User Agreements and Disclosures._\n\nIf you or your connected accounts create an `individual` type [Cardholder](https://docs.stripe.com/api/issuing/cardholders/object), also known as an “authorized user,” you must present to cardholders—typically during the card activation process—the following agreements:\n\n*   [Stripe E-Sign Disclosure](https://stripe.com/issuing/e-sign-disclosure/legal)\n*   Authorized User Terms\n    *   _Celtic Bank Users only:_ [Authorized User Terms (Celtic Bank)](https://stripe.com/legal/issuing/celtic-authorized-user-terms)\n    *   _Cross River Bank Users only:_ [Authorized User Terms (Cross River Bank)](https://stripe.com/legal/issuing/crb-authorized-user-terms)\n\n### Charge card users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n_Connected Account Agreements and Disclosures._\n\nYou must provide the following agreements to your connected accounts before they can start using the Stripe Issuing Charge Card Program:\n\n*   [Stripe Connected Account Agreement](https://stripe.com/legal/connect-account)\n*   [Stripe Issuing Accountholder Terms](https://stripe.com/legal/issuing-accountholder) or Custom Platform Accountholder Terms\n*   **Issuing Bank Terms**\n    *   _Celtic Bank Users only:_ [Issuing Bank Terms - Charge Card (Celtic Bank)](https://stripe.com/legal/celtic-charge-card)\n    *   _Cross River Bank Users only:_ [Issuing Bank Terms - Charge Card (Cross River Bank)](https://stripe.com/legal/issuing/crb-charge-card)\n*   **Apple Pay Terms** (if enabled for your program)\n    *   [Apple Pay Accountholder Terms](https://stripe.com/issuing/celtic/apple-payment-platform-program-manager-customer-terms-and-conditions/legal#exhibit-c-pass-through-provisions)\n*   **Card Program Terms**: These are your bespoke program terms that supplement the Issuing Bank Terms. At a minimum, consider including the following items in your terms. Consult your legal counsel about which items to define within your own Card Program Terms.\n    *   Repayment methods, including automatic withdrawal consents\n    *   Billing cycles, including due dates\n    *   Fees\n    *   Rewards\n    *   Credit limits\n    *   Account closure requirements\n\nIn addition to the above agreements, you must provide the following disclosures to your connected accounts before they can start using the Stripe Issuing Spend Card Program:\n\n*   **Electronic Signature Consent**: You must include text near the **Issuing Bank Terms** link stating that signing the Issuing Bank Terms signifies consent to electronic signatures and communications. For example, your message might read: “By clicking the submit application button, you agree to the Issuing Bank Terms, Stripe Connected Account Agreement, and Stripe Issuing Accountholder Terms; and you consent to electronic signatures as set forth in the Issuing Bank Terms.”\n*   **Commercial Financing Disclosure**: For connected accounts with a business address in CA, NY, or UT, you must present your own custom commercial financing disclosure. You must report custom fees through Stripe’s [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835), and you must submit custom commercial financing disclosures to [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com). Both the custom fee and custom disclosure are subject to Stripe’s review and approval. Contact [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com) to assess the commercial financing disclosure requirements of your program.\n\n**Authorized User Agreements and Disclosures.**\n\nIf you or your connected accounts create an `individual` type [Cardholder](https://docs.stripe.com/api/issuing/cardholders/object), also known as an “authorized user,” you must present to cardholders—typically during the card activation process—the following agreements:\n\n*   [Stripe E-Sign Disclosure](https://stripe.com/issuing/e-sign-disclosure/legal)\n*   Authorized User Terms\n    *   _Celtic Bank Users only:_ [Authorized User Terms (Celtic Bank)](https://stripe.com/legal/issuing/celtic-authorized-user-terms)\n    *   _Cross River Bank Users only:_ [Authorized User Terms (Cross River Bank)](https://stripe.com/legal/issuing/crb-authorized-user-terms)\n\n### Commercial prepaid debit users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must provide the following agreements to your connected accounts before they can start using the Stripe Issuing Commercial Prepaid Debit Card Program:\n\n*   [Stripe Connected Account Agreement](https://stripe.com/legal/connect-account)\n*   [Stripe Issuing Accountholder Terms](https://stripe.com/legal/issuing-accountholder)\n*   [Issuing Bank Terms (Sutton Bank)](https://stripe.com/legal/issuing/commercial-prepaid-sutton-terms)\n\n**Authorized User Agreements and Disclosures.**\n\nIf you or your connected accounts create an `individual` type [Cardholder](https://docs.stripe.com/api/issuing/cardholders/object), also known as an “authorized user,” you must present to cardholders—typically during the card activation process—the following agreements:\n\n*   [Stripe E-Sign Disclosure](https://stripe.com/issuing/e-sign-disclosure/legal)\n*   [Sutton Bank Authorized User Terms](https://stripe.com/legal/issuing/sutton-authorized-user-terms)\n\n## Required agreements and disclosures for Treasury ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou must provide the following terms of service to your connected accounts and record their agreement before they can start using the Stripe Treasury Program:\n\n*   [Stripe Services Agreement](https://stripe.com/legal/ssa)\n*   [Stripe Treasury Terms - Connected Accounts](https://stripe.com/legal/ssa#services-terms)\n\n## Required agreements and disclosures for fees, credits, and rewards programs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn addition to the previous agreements, your terms of service and fee schedule must clearly outline the fees and terms that you implement as part of your Treasury or Issuing program.\n\nYou must report to Stripe the details of any fees, credits, and rewards programs that you plan to offer. That helps make sure your user interfaces and marketing materials are compliant with financial regulations regarding fees or offer credits, especially in the form of rewards programs. Use the [Change Request Form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835).\n\n## Customer communications and documents![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo comply with applicable laws and regulations, you must send certain communications to both your applicants and accountholders upon certain trigger events.\n\nTo learn about customer communication requirements when using Issuing and Treasury together, see [Issuing regulated customer notices](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices).\n\n### Statements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nProviding statements, while optional, is a best practice that allows your Treasury or Issuing customers to periodically check their transaction history. If you send statements, make sure they contain the following information:\n\n*   \\[Company\\] name and address.\n*   Your company’s customer support contact number and website\n*   Customer account number\n*   Customer name and address\n*   Required disclosures\n*   Transaction history (including opening and closing balances for the statement period)\n*   Fees and credits.\n*   Information about how you resolve errors and complaints\n\n### Receipts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne of the most important ongoing obligations you have in overseeing your Treasury or Issuing program is providing your customers with money transmissions receipts. Every regulated transaction your customers initiate generates a compliant money transmission receipt URL that you must share with your customer. You can provide these URL receipts in a few different ways, such as emailing them or making them available in your customer’s Dashboard. See the [Regulatory receipts guide](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) for more information on how to access hosted receipts. If you plan to charge your connected account owners any fees, whether they’re transactional or monthly recurring, include a description of the fee on the receipt so that they can reconcile it to corresponding transactions or monthly statements.\n\n## Going live and marketing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following information pertains to marketing and releasing your Stripe Treasury or Issuing programs to the public.\n\n### General requirements for marketing your account offerings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAny message or communication you provide to the public for financial products or services they don’t currently use must be truthful and fair, and in the interest of your potential customers.\n\n### UDAP and correct messaging![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFederal regulation prohibits unfair and deceptive acts or practices (UDAP). To avoid UDAP violations, you must think of the end user first when developing and deploying any marketing materials.\n\nMake sure that marketing materials use clear messaging that fully explains product features, costs, benefits, and limitations. Don’t leave out key terms or fees, and don’t advertise product uses or features that aren’t true.\n\n| Do  | Don’t |\n| --- | --- |\n| Only use statements about products that are true, accurate, and aligned with how users engage with the products. | Don’t leave out key information from marketing content. If the information is likely to affect whether someone uses the product, then it’s “key.\" |\n| If you make claims that require additional data to support them, or if an end user needs to know more details to know how a certain claim is true, you must:<br><br>*   Provide documented evidence<br>*   Disclose that information | Make exaggerated claims that are hard to prove. Don’t make absolute statements that are disproved by a single exception. For example, “number 1,\" “every,\" “only,\" “all,\" “never,\" “always.\" |\n| Clearly explain all qualifying limitations and requirements needed by end users to get the product or features that you’ve advertised. | Don’t advertise features or programs that only a few applicants actually qualify for. |\n| All disclosures must meet a “clear and conspicuous” standard:<br><br>*   Font size must be large enough to read.<br>*   Font color must visibly contrast with the background.<br>*   Dynamic or video ads must have the disclosure on screen long enough to be read. | Don’t make disclosures hard to read. |\n| Disclosures used to explain or modify a claim must be tied to the claim they’re explaining.<br><br>*   Use a hyperlink directly linking to the disclosure (or include the disclosure next to the claim in the copy itself)<br>*   Use reference text or symbols (an asterisk, for example) directly after the claim and before the disclosure language. | Don’t bury disclosures in other non-key disclosures or footnotes. |\n| Disclose all account fees, costs, benefits, and terms as part of onboarding before your end users take out a product. | Don’t advertise products as “free” if you’re charging fees. |\n| Make sure all images used are properly licensed and that you can document this fact. | Don’t use images, formatting, or copy that implies products are endorsed by, or affiliated with, government entities or celebrities. |\n\n### Messaging guidelines![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following suggested messaging guidelines to convey key aspects of Stripe Issuing, Stripe Treasury, or both programs. Stripe or our banking partners have validated (proven as true) this content, so you can confidently use this messaging in user-facing materials.\n\n*   [Issuing](#issuing-messaging-guidelines)\n*   [Treasury](#treasury-messaging-guidelines)\n\nThe following tables include validated content you can provide in your marketing campaigns. You can make non-substantive changes (for example, changing the design or infusing your brand’s voice) to the suggested messaging as long as the key information remains the same. Any substantive deviations from these guidelines require you to submit marketing materials and get approval from Stripe and our bank partners. Approvals might take up to 10 business days to process.\n\nYou’re responsible for training employees on these requirements if they engage in marketing or sales activities for your Treasury or Issuing program.\n\n#### Issuing messaging guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following table provides guidelines for you to follow when developing messaging around your Issuing program.\n\n| Topic category | Do  | Don’t |\n| --- | --- | --- |\n| Logo and name usage | Your card program name and your brand name must have equal status, as with plain text: Widget balance® + Stripe. When referencing registered brand products, you must adhere to their separate brand guidelines. You only need to use the ®, ™, SM, mark once per asset. | Don’t maintain unequal status between the card program name and your brand name:<br><br>**Widget balance®** + Stripe |\n| Comparison value propositions | Use language promoting the benefits of the card:<br><br>*   Better than cash<br>*   Safer than carrying cash<br>*   Manage your money hassle free<br>*   Spend only what you load<br>*   Spend only what you have on your card | Don’t make disparaging remarks about other financial products or institutions: this includes debit, credit, bank accounts, banks, or other financial products used or issued by financial institutions. Don’t allude to prepaid card programs as superior to other card products with terms like:<br><br>*   Better than credit<br>*   Better than a bank account<br>*   No interest<br>*   No security deposit<br>*   No debt |\n| Currency and using the funds | Use phrases like:<br><br>*   Access your contractor earnings<br>*   All \\[card program\\] cards are USD denominated<br>*   \\[Card program\\] cards can be used anywhere that accepts Visa cards | Don’t use phrases like:<br><br>*   Access your wages<br>*   Get funds in any format you want<br>*   Can spend money across the world |\n| What you can use the card for and limitations | Use phrases like:<br><br>*   Use \\[card program\\] for business needs<br>*   Get \\[card program\\] for your commercial needs<br>*   \\[Card program\\] can only be used for commercial purposes, and can’t be used for personal, family, or household purposes<br>*   Spend only what you load<br>*   Spend only what you have on your card | Don’t use phrases like:<br><br>*   Use \\[card program\\] for anything you want<br>*   Spend funds to buy the things you love<br>*   Personal cards<br>*   Use these cards like a payday loan, title loan, or pawn shop loan |\n| Where to spend funds | Use phrases like:<br><br>*   \\[Card program\\] can only be used for commercial purposes, and can’t be used for personal, family, or household purposes<br>*   Spend funds easily on your business | Don’t use phrases like:<br><br>*   Can be used just like a personal account<br>*   Get consumer cards<br>*   Spend funds to buy the things you love |\n\n#### Issuing messaging specifics per product![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following table provides guidelines for you to follow when developing messaging for specific cards in your Issuing program.\n\n| Card | Do  | Don’t |\n| --- | --- | --- |\n| Spend card only | Use phrases like:<br><br>*   …is a commercial credit program<br>*   A business credit card | Don’t use phrases like:<br><br>*   Debit card<br>*   Prepaid card<br>*   Better than a debit card |\n| Payout account only (Treasury account connected) | Money management account | Don’t use phrases like:<br><br>*   Bank account<br>*   Deposit account<br>*   Checking account<br>*   Savings account<br>*   Similar terms to the previous ones that connote a traditional bank account product |\n\n#### Treasury messaging guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDon’t use words like “bank account,” “deposit account,\" “checking account,” “savings account,” or similar terms that imply a traditional bank account product because Stripe isn’t a bank. Pre-approved terms include the following:\n\n*   Business account\n*   Cash management account\n*   Financial account\n*   Money transfer account\n\nSee [Marketing Treasury-based services](https://docs.stripe.com/treasury/marketing-treasury) for a full list of terms you can and can’t use to describe your accounts. Inaccurately referring to Treasury accounts as “bank accounts” could result in regulatory action, including fines.\n\n| Category | Do  | Don’t |\n| --- | --- | --- |\n| Logo and name usage | When referencing registered/® brand products, you must adhere to their separate brand guidelines. You only need to reference the ®, ™, SM mark once per asset. | Don’t apply unequal status between the card program name and your brand name:<br><br>**Widget balance®** + Stripe |\n| Description of account value propositions | Use the following terms:<br><br>*   Business account<br>*   Cash management account<br>*   Financial account<br>*   Money transfer account | Don’t use the following terms:<br><br>*   “Bank account”<br>*   “Deposit account”<br>*   “Checking account”<br>*   “Savings account”<br>*   Similar terms to the previous ones that imply a traditional bank account product, because Stripe isn’t a bank |\n| FDIC insurance | Use the following terms that incorporate the term “eligible”:<br><br>*   “Eligible for FDIC insurance”<br>*   “FDIC insurance-eligible accounts”<br>*   “Eligible for FDIC pass-through insurance”<br>*   “Eligible for FDIC insurance up to the standard maximum deposit insurance per depositor in the same capacity\"<br>*   “Eligible for FDIC insurance up to $250K” | Don’t use the following terms:<br><br>*   “FDIC insured”<br>*   “FDIC insured accounts”<br>*   “FDIC pass-through insurance guaranteed” |\n\n### CAN-SPAM![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe CAN-SPAM Act regulates marketing activity conducted by email. An email is deemed a commercial message, subject to the CAN-SPAM act, if the primary purpose of the email is to convey a commercial advertisement, or to promote a product or service. A transactional email is an email sent to a customer that has a primary purpose relating to a particular transaction or relationship between you and the customer, such as a payment reminder. The CAN-SPAM Act imposes more rigorous requirements on commercial email messages, as compared with transactional messages. Transactional messages aren’t subject to most of the requirements of the CAN-SPAM Act. If a message contains both transactional content and commercial content, the CAN-SPAM Act commercial email requirements might apply, if the primary purpose of the message can be considered commercial.\n\nTo facilitate compliance with the CAN-SPAM Act, any employee or staff using or having access to your email systems and resources for marketing must adhere to the following guidelines:\n\n*   Misleading header information. Any email message, whether commercial or transactional, must not contain:\n    *   False or misleading header information.\n    *   A “from” line that doesn’t accurately identify any person (individual or business) who initiated the message.\n    *   Inaccurate or misleading identification of a protected computer used to initiate the message for purposes of disguising its origin.\n*   Deceptive subject headings. Any commercial email message must not contain deceptive subject headings. For example, a deceptive subject heading is one that likely misleads the recipient about a material fact regarding the message’s contents or subject matter.\n*   Opt-out mechanism. You must provide your customers with the ability to opt-out of receiving future commercial messages, and you must honor customer requests to opt-out within 10 days. You can’t require a user to pay a fee or provide information other than an email address to opt-out.\n*   Advertisement identification. Any commercial email message must contain clear and conspicuous identification that the message is an advertisement or solicitation.\n*   Physical address disclosure. Any commercial email message must disclose a valid physical address of the sender.\n\nFailure to comply with CAN-SPAM could result in large fines for each violation.\n\n### Testimonials![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re using testimonials or endorsements in advertising Stripe products to your users, consider the following:\n\n*   The person giving a testimonial must be a real person and a true, bona fide user of the service or product they’re talking about.\n*   You must obtain and keep their permission in writing to use their quote. You must update that permission every 24 months.\n*   Product benefits, costs, or features in any quotes must be verifiable and true to what most users can expect to get.\n*   If you paid someone for their quote, or gave them anything of value, you must put a disclaimer near the quote stating this fact. This includes paid actors, if their scripting makes it sound like they’re giving a testimonial.\n\n### Prohibited advertising![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can’t advertise Stripe Issuing or Treasury, in print, radio, TV, on the internet, or any other digital format that promotes any unlawful activity or causes reputation concerns for Stripe or our bank partners.\n\n### Prohibition on international marketing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTreasury isn’t available to users or merchants located outside the US, so limit all marketing for Treasury to US domestic audiences.\n\nFor Issuing, although you can ship cards to international addresses for US-domiciled cardholders, you must not market the Issuing program internationally or to persons outside of the United States. That includes advertising or promoting Issuing through marketing channels such as social media, email, and paid search results. As with all other aspects of the Issuing program, your marketing activities must comply with card network rules.\n\n### Required marketing disclosures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour users must understand the role that Stripe’s bank partners play in offering and operating certain financial products—and in many cases, that they’re entering into a contractual relationship with these banks. Your users must also understand the material costs and fees associated with their use of each financial product. We require you to build the following disclosures into your marketing materials:\n\n#### Disclosures when marketing Issuing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you offer Issuing products, you must include the following information in an easily discoverable and accessible area on all marketing materials, account opening flows, and product interfaces:\n\n*   The name for your card program (for example, Rocket Rides Corporate Card).\n*   The relevant statement from the following table identifying the issuing bank. It can be in the footers section of your materials; however, the font must be a legible size and a contrasting color to the background.\n\n| Statement for Celtic Bank users | Statement for Sutton Bank users | Statement for Cross River Bank users |\n| --- | --- | --- |\n| \\[Card Program Name\\] Visa® Commercial Credit cards are powered by Stripe and issued by Celtic Bank. | \\[Card Program Name\\] Visa® Prepaid Cards are issued by Sutton Bank®, Member FDIC, pursuant to a license from Visa USA Inc. | \\[Card Program Name\\] Charge Cards are issued by Cross River Bank, Member FDIC. |\n\n#### Disclosures when marketing Treasury![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you offer Treasury products, you must include the following information in an easily discoverable and accessible area on all marketing materials, account opening flows, and product interfaces:\n\n*   A statement that you’re neither a bank nor a money transmitter.\n*   Statement of partnership with Stripe.\n*   “Stripe Payments Company” must be hyperlinked and point to `https://stripe.com`.\n\n| Statement for Evolve bank users | Statement for Goldman bank users |\n| --- | --- |\n| \\[Company Name\\] partners with [Stripe Payments Company](https://stripe.com/) for money transmission services and account services with funds held at Evolve Bank & Trust, Member FDIC. | \\[Company Name\\] partners with [Stripe Payments Company](https://stripe.com/) for money transmission services and account services with funds held at Goldman Sachs Bank USA, Member FDIC. |\n\n#### Disclosures when marketing both Treasury and Issuing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you offer both Treasury and Issuing products, you must include the following information in an easily discoverable and accessible area on all marketing materials, account opening flows, and product interfaces:\n\n*   A name for your card program (for example, Rocket Rides Corporate Card).\n*   A combined statement identifying the issuing bank and saying that you’re neither a bank nor a money transmitter.\n\n| Example combined statement (Payout Card) |\n| --- |\n| \\[Company Name\\] partners with [Stripe Payments Company](https://stripe.com/) for money transmission services and account services with funds held at Evolve Bank & Trust, Member FDIC. \\[Card Program Name\\] Visa® Prepaid Cards are issued by Sutton Bank®, Member FDIC, pursuant to a license from Visa USA Inc. |\n\n### Materials submission![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSubmit copies of your marketing materials and user interface mockups through our [Review Intake Form](https://docs.google.com/forms/d/e/1FAIpQLSfI67WWnEC-bPdzXllK7fq9hlwK6pY3qZpEnpOBwz8UZ_R-Xg/viewform) for review before you launch. If you make any changes to marketing materials, application flows, or user communications, Stripe’s compliance team must perform a review before going live. Our team of compliance specialists reviews them with our bank partners and responds within 10 business days.\n\nWhen submitting your materials:\n\n*   Provide full screenshots of product pages that include headings and footers.\n*   The preferable format for materials is PDF, however any format where all text is legible is acceptable.\n*   Describe the types of marketing material you’re submitting (for example, web banners, emails, search engine marketing, and whether it’s only text or images and text).\n*   You can send up to 5 attachments per submission.\n\nSend any additional questions to our team at [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com).\n\nWe might request that you change your marketing materials to comply with regulatory requirements. If we request a change, it’s your responsibility to update the materials and provide evidence of the change to Stripe. Failure to update materials at our request might result in Stripe disabling your Treasury or Issuing capabilities.\n\n## Recordkeeping![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must demonstrate your adherence to the requirements listed in this guide. Keep thorough records of all marketing materials, customer data, account information, and other disclosures you make to customers for at least 5 years. The following is a list of all records to keep, with examples of record types.\n\n| Record type | Example form of records |\n| --- | --- |\n| Product user experience | Screenshots of all deployed versions of the product user experience and their deployment dates. Include application flow, customer dashboard, support pages, and so on. |\n| Marketing | Inventory of all marketing copy deployed, email distribution lists used, and email solicitation opt-out lists, including timestamps of user opt-outs. |\n| Customer communications and complaints | Email interactions and documentation developed in the course of resolving complaints. |\n| Receipts | Receipts provided by Stripe and evidence that they’re uploaded to the customer’s Dashboard. |\n| Customer statements | Historical statements generated and made available to customers for download. |",
  "title": "Treasury and Issuing product marketing, design, and compliance guidelines | Stripe Documentation",
  "description": "Learn how to keep your Treasury or Issuing program and marketing campaigns compliant.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/examples/financial-accounts",
  "markdown": "# Use Treasury and Issuing to set up financial accounts and cards\n\n## Follow a sample Treasury and Issuing integration that sets up a financial account and creates cards.\n\nHomebox is a fictitious vertical SaaS that builds software for home-services companies like HVAC technicians, cleaners, and plumbers. Homebox begins its Treasury integration by setting up a Treasury financial account and creating payment cards. To see how Homebox moves money to and from external bank accounts, see the [Using Treasury to move money](https://docs.stripe.com/treasury/examples/moving-money) example integration.\n\n## Platform onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHomebox is already a Stripe platform with [Payments](https://docs.stripe.com/payments) and [Connect](https://docs.stripe.com/connect) enabled. Homebox uses [Custom connected accounts](https://docs.stripe.com/connect/accounts), and those connected accounts already have the `card_payments` capability enabled.\n\n## Add capabilities![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo use Treasury and Issuing services, Homebox needs to request the additional `treasury` and `card_issuing` capabilities for the platform’s connected accounts. Each connected account must then onboard before Stripe can create a Treasury financial account for it.\n\nTo use ACH transfers with Treasury, Homebox also needs to request the `us_bank_account_ach_payments` capability.\n\nTo request the `treasury`, `card_issuing`, and `us_bank_account_ach_payments` capabilities, Homebox makes a request to the [Accounts API](https://docs.stripe.com/api/accounts).\n\n`curl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"capabilities[treasury][requested]\"=true \\  -d \"capabilities[card_issuing][requested]\"=true \\  -d \"capabilities[us_bank_account_ach_payments][requested]\"=true`\n\nTo use Hosted Onboarding, Homebox makes a call to [Account Links](https://docs.stripe.com/api/account_links) to retrieve a URL that their connected account can use to submit onboarding information for the Treasury financial account.\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\   --data-urlencode refresh_url=\"[https://example.com/reauth](https://example.com/reauth)\" \\   --data-urlencode return_url=\"[https://example.com/return](https://example.com/return)\" \\  -d type=account_onboarding`\n\nThe response includes a URL the connected account uses to access the application, which must be done before the link expires.\n\nHomebox listens for the `account.updated` webhook to confirm the following fields and capabilities on the connected account:\n\n``{   \"object\": {     \"id\": \"{{CONNECTED_ACCOUNT_ID}}\",     \"object\": \"account\",     \"capabilities\": {       \"card_payments\": \"active\",       \"treasury\": \"active\",       \"card_issuing\": \"active\", // Only appears if requesting the `card_issuing` capability.       \"us_bank_account_ach_payments\": \"active\", // Only appears if requesting the `us_bank_account_ach_payments` capability.     },     ...   } }``\n\n## Create a FinancialAccount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter Stripe adds the `treasury` capability to an account, Homebox can create the `FinancialAccount` object for the account. To do so, Homebox calls `FinancialAccounts` and requests the `Features` the company wants to provide.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"supported_currencies[]\"=usd \\  -d \"features[card_issuing][requested]\"=true \\  -d \"features[deposit_insurance][requested]\"=true \\  -d \"features[financial_addresses][aba][requested]\"=true \\  -d \"features[inbound_transfers][ach][requested]\"=true \\  -d \"features[intra_stripe_flows][requested]\"=true \\  -d \"features[outbound_payments][ach][requested]\"=true \\  -d \"features[outbound_payments][us_domestic_wire][requested]\"=true \\  -d \"features[outbound_transfers][ach][requested]\"=true \\  -d \"features[outbound_transfers][us_domestic_wire][requested]\"=true`\n\nThe response confirms the account is processing. After processing completes and all relevant features are active, Homebox gets a confirmation from their `treasury.financial_account.features_status_updated` webhook listener.\n\n``{   \"object\": \"treasury.financial_account\",   \"created\": 1612927106,   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"country\": \"US\",   \"supported_currencies\": [\"usd\"],   \"financial_addresses\": [ // This field is empty until the \"financial_addresses.aba\" feature becomes active     {       \"type\": \"aba\",       \"supported_networks\": [\"ach\", \"us_domestic_wire\"],       \"aba\": {         \"account_number_last4\": \"7890\",         // Use the expand[] parameter to view the `account_number` field hidden by default         \"account_number\": \"1234567890\",         \"routing_number\": \"000000001\",         \"bank_name\": \"Bank of Earth\"       }     }   ],   \"livemode\": true,    // State machine:   // open - the account is ready to be used   // closed - the account is closed   \"status\": \"open\",   \"status_details\": {     // `closed` is null if financial account is not closed     \"closed\": {       // List of one or more reasons why the FinancialAccount was closed:       // - account_rejected       // - closed_by_platform       // - other       \"reasons\": [],     }   },    active_features: [\"card_issuing\"],   pending_features: [\"deposit_insurance\", \"financial_addresses.aba\", \"outbound_payments.ach\", \"us_domestic_wire\", \"inbound_transfers.ach\", \"outbound_transfers.ach\", \"outbound_transfers.us_domestic_wire\"],   restricted_features: [],    \"features\": {     \"object\": \"treasury.financial_account_features\",     \"card_issuing\": {       \"status\": \"active\",       \"status_details\": [],       \"access\": \"active\",     },     \"deposit_insurance\": {         \"requested\": true,         \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up         \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],     },     \"financial_addresses\": {         \"aba\": {             \"requested\": true,             \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up             \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],         },     },     \"outbound_payments\": {         \"ach\": {             \"requested\": true,             \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up             \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],         },     },     \"us_domestic_wire\": {         \"requested\": true,         \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up         \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],     },     \"inbound_transfers\": {         \"ach\": {             \"requested\": true,             \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up             \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],         },     },     \"outbound_transfers\": {         \"ach\": {             \"requested\": true,             \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up             \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],         },     },     \"outbound_payments\": {         \"ach\": {             \"requested\": true,             \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up             \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],         },     },     \"outbound_transfers\": {         \"us_domestic_wire\": {             \"requested\": true,             \"status\": \"pending\", // Becomes \"active\" once the Treasury financial account is set up             \"status_details\": [{\"code\": \"activating\", \"resolution\": nil}],         },     },   \"platform_restrictions\": {     \"inbound_flows\": \"unrestricted\",     \"outbound_flows\": \"unrestricted\"   },  \"metadata\": {},   ... }``\n\n## Create a payment cardholder![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore Homebox can create cards for Treasury financial accounts, it needs to create cardholders. The cardholders in this example are plumbers who use Homebox services and own the connected accounts on the platform.\n\n`curl https://api.stripe.com/v1/issuing/cardholders \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d name=\"Jenny Bath Remodeling\" \\  -d type=company \\   --data-urlencode email=\"jenny@example.com\" \\   --data-urlencode phone_number=\"+18008675309\" \\  -d status=active \\  -d \"billing[address][line1]\"=\"1234 Main Street\" \\  -d \"billing[address][city]\"=\"San Francisco\" \\  -d \"billing[address][state]\"=CA \\  -d \"billing[address][postal_code]\"=94111 \\  -d \"billing[address][country]\"=US`\n\nThe response confirms the cardholder is created.\n\n`{     \"id\": \"{{CARDHOLDER_ID}}\",     \"object\": \"issuing.cardholder\",     \"billing\": {         \"address\": {             \"city\": \"\\\"San Francisco\\\"\",             \"country\": \"US\",             \"line1\": \"\\\"1234 Main Street\\\"\",             \"postal_code\": \"94111\",             \"state\": \"CA\"         }     },     \"created\": 1623803705,     \"email\": \"jenny@example.com\",     \"livemode\": false,     \"metadata\": {},     \"name\": \"Jenny Bath Remodeling\",     \"phone_number\": \"+18008675309\",     \"requirements\": {         \"disabled_reason\": \"under_review\",         \"past_due\": []     },     \"spending_controls\": {         \"allowed_categories\": [],         \"blocked_categories\": [],         \"spending_limits\": [],     },     \"status\": \"active\",     \"type\": \"company\" }`\n\n## Create payment cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNow that the connected account has a `FinancialAccount` object associated with it and an available cardholder, Homebox can create a payment card using the `FinancialAccount` balance as the card’s available balance.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d currency=usd \\  -d type=virtual \\  -d cardholder=  {{CARDHOLDER_ID}}   \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}    `\n\nThe response confirms the card is issued.\n\n`{   \"id\": \"{{CARD_ID}}\",   \"object\": \"issuing.card\",   \"cardholder\": {     \"id\": \"{{CARDHOLDER_ID}}\",     \"object\": \"issuing.cardholder\",     \"billing\": {       \"address\": {         \"city\": \"San Francisco\",         \"country\": \"US\",         \"line1\": \"123 Main Street\",         \"line2\": null,         \"postal_code\": \"94111\",         \"state\": \"CA\"       }     },     ...   },   \"created\": 1643293629,   \"currency\": \"usd\",   \"exp_month\": 12,   \"exp_year\": 2024,   \"last4\": \"0930\",   \"livemode\": false,   ... }`",
  "title": "Use Treasury and Issuing to set up financial accounts and cards | Stripe Documentation",
  "description": "Follow a sample Treasury and Issuing integration that sets up a financial account and creates cards.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/examples/onboarding-guide",
  "markdown": "# Treasury connected account onboarding guide\n\n## Learn how to reduce friction while onboarding your connected accounts.\n\nWhen a Connect platform uses Stripe Treasury to offer financial services to its connected accounts, the account onboarding process must consider fraud prevention and regulatory compliance. For example, financial services providers must employ Know Your Customer (KYC) and Know Your Business (KYB) client data collection and verification procedures. Use this guide to implement a Treasury onboarding process for your connected accounts.\n\n## KYC and KYB onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you launch your embedded finance capabilities, implement an onboarding flow that collects the [necessary KYC and KYB information from your connected accounts](https://docs.stripe.com/connect/identity-verification). The [US Treasury Financial Crimes Enforcement Network](https://www.fincen.gov/resources/statutes-and-regulations/cdd-final-rule) (FinCEN) sets and enforces the legal requirements for customer due diligence, which each financial institution or partner can supplement with additional requirements.\n\n#### Note\n\nWhen onboarding connected accounts that use Treasury features, you must collect their requirements up front. Don’t use incremental onboarding.\n\nWhen onboarding connected accounts to Treasury, Stripe only presents your platform with the core business compliance requirements. Your platform is responsible for collecting the required KYC and KYB information during onboarding and passing it to Stripe. The specific process depends on [the type of onboarding flow you implement](https://docs.stripe.com/connect/onboarding). Stripe then performs checks to determine if the connected accounts meet KYC and KYB requirements and to flag potential risks of money laundering or fraud. Those checks include:\n\n*   Verifying ID documents using public and private databases\n*   Checking application information against databases of known fraudulent actors and criminals (such as known terrorists and money launderers)\n*   Validating addresses\n*   Verifying that an application is from a registered business with the appropriate licenses\n\n### Required information from your connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo open a Treasury financial account for a connected account, you must collect information including, but not limited to:\n\n*   Business name\n*   Legal entity type\n*   Tax ID number\n*   Merchant category code (MCC)\n*   Company name\n*   Company address\n*   Information about company owners, including:\n    *   SSN\n    *   Date of birth\n    *   Title\n    *   Ownership percentage\n\nTo review the full requirements for opening a financial account associated with a connected account, see [Required verification information](https://docs.stripe.com/connect/required-verification-information#US-full-company--card_payments%7Ctransfers%7Cus_bank_account_ach_payments).\n\n## Ways to onboard connected accounts to Treasury![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can onboard your connected accounts onto Connect and Treasury using the Stripe-hosted onboarding flow or using the Stripe API to pass verification information to Stripe.\n\nBenefits of Stripe-hosted onboarding include:\n\n*   With [Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding), you don’t need to design or build a custom onboarding UI. Stripe provides a customizable web form that collects the required identity information from your connected accounts.\n*   Hosted onboarding dynamically adjusts input fields depending on account capabilities, product usage, country, and business type.\n*   You can use hosted onboarding if you need support for mobile browsers, accessibility, and localization.\n*   Hosted onboarding allows you to automatically collect all currently required information up front or incrementally, depending on what’s needed (see [onboarding flows](https://docs.stripe.com/connect/identity-verification#onboarding-flows)). To use Stripe Treasury products, connected accounts must provide all information to satisfy KYC requirements up front.\n\nBenefits of API onboarding include:\n\n*   [API onboarding (custom onboarding)](https://docs.stripe.com/connect/api-onboarding) gives you full control over the onboarding UI and process.\n*   You don’t need to redirect connected account holders to an external Stripe-hosted page.\n*   You can design the information collection flow for your connected accounts.\n\n## Keep up with changing requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nChanging requirements can necessitate gathering additional information from connected accounts. While hosted onboarding dynamically updates to reflect new requirements, platforms using API onboarding need to make sure they update their UI and collect this information. If a connected account has already onboarded using hosted onboarding and the requirements change, you can forward them the hosted onboarding link. Clicking it prompts them to provide the new required information. You can obtain new requirements for accounts using the methods detailed in the [Required verification information](https://docs.stripe.com/connect/required-verification-information) guide.\n\nYou can also use a mixture of hosted and API onboarding. If you use hosted onboarding but have already collected some information from a different source, you can pass that information to Stripe through the [identity verification process](https://docs.stripe.com/connect/identity-verification) and prefill the hosted onboarding page with the provided information. In that case, the connected account can modify or verify the information within the Stripe-hosted UI.\n\n## Tips for onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo make sure onboarding is successful and boost conversion for your Treasury product, keep the following tips in mind:\n\n*   Consider onboarding connected accounts to the `treasury` capability to start, even if you don’t plan to create a Treasury financial account until later. If you decide to perform Treasury onboarding later, prevent friction by setting clear expectations during onboarding that additional information might be required to use all aspects of the product.\n    \n*   If you already have a Connect integration, or have otherwise collected identifying information from your connected accounts, you can use the API to pass data you already have. Doing so reduces the amount of information a connected account needs to provide through hosted onboarding.\n    \n*   For issued cards, provide the card use case to help cardholders understand how it works.\n    \n*   If a connected account has recently incorporated their business, they might not have their TIN entered in the IRS database yet. In that case, their TIN might come back as unverified until the IRS database updates. The account is still usable, and Stripe periodically attempts to reverify the TIN.\n    \n*   Hosted onboarding allows you to test out your integration. If you want more customization, you can switch to custom onboarding.\n    \n*   Only onboard connected accounts that are supportable on Stripe and Treasury. Review the [Treasury requirements](https://docs.stripe.com/treasury/requirements) for supportability, and follow the guidelines on [marketing Treasury to users](https://docs.stripe.com/treasury/compliance).\n    \n*   Offering incentives to onboard, such as a free subscription period or incentive funds, can help boost activation and engagement.\n    \n\n### See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Connect integration guide](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct)\n*   [Treasury documentation on opening connected accounts](https://docs.stripe.com/treasury/account-management/connected-accounts#requirements)\n*   [Documentation on opening Treasury financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts)",
  "title": "Treasury connected account onboarding guide | Stripe Documentation",
  "description": "Learn how to reduce friction while onboarding your connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/examples/fraud-guide",
  "markdown": "# Treasury fraud guide | Stripe DocumentationThe Stripe Docs logo\n\n## Learn best practices for managing fraud as a Treasury platform.\n\nStripe Treasury is a banking-as-a-service API that enables you to embed financial services into your platform’s product. With Stripe Treasury (through our partnerships with US domestic banks), you can offer your connected accounts a simple stored-value account that’s directly integrated into your application. It lets them perform financial actions such as sending and receiving funds (through ACH wires), earning yield, and spending money through a card.\n\nStripe Treasury uses the same workflows as Stripe Connect to get connected accounts up and running, including various [KYC](https://en.wikipedia.org/wiki/Know_your_customer \"know your customer\") and compliance requirements. You can use our API to customize how you manage fraud risk and reduce friction for your connected accounts.\n\nSee the following high-level guidance about how to monitor and minimize fraud when using Stripe Treasury, because you’re liable for fraud losses and disputes from your connected accounts. This guide breaks fraud down into three main categories:\n\n*   **Business fraud**: A person creates a fraudulent connected account (often with a stolen identity) to commit fraud\n*   **Transaction fraud**: A legitimate connected account has their card or financial account information stolen or compromised resulting in unauthorized activity\n*   **Account takeover fraud**: A legitimate connected account owner’s login is compromised by a third party and unauthorized actions are taken on their account\n\n## Business fraud examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe most well known types of business fraud in the financial services industry are first party fraud, third party fraud, and force capture or overcapture fraud.\n\n**First party fraud example (ACH debit)**\n\n1.  A bad actor uses a compromised or synthetic identity to open a financial account (Financial Institution A).\n2.  The bad actor logs into the Financial Institution A and initiates a 10,000 USD ACH debit to pull funds from another financial account they also have ownership over (Financial Institution B). In this case, Financial Institution A is the originator of the debit (ODFI) and Financial Institution B is the receiver of the debit (RDFI).\n3.  When the debited funds become available in Financial Institution A, the bad actor immediately spends or transfers the funds out.\n4.  The bad actor then goes to Financial Institution B and claims the ACH debit initiated by Financial Institution A wasn’t authorized.\n5.  Financial Institution B initiates an ACH return, citing the debit wasn’t authorized and pulls back the full amount of the debit.\n6.  Financial Institution A is left with a negative balance.\n\n**Third party fraud example (ACH debit)**\n\n1.  A bad actor uses a compromised or synthetic identity to open a financial account (Financial Institution A).\n2.  The bad actor logs into Financial Institution A and initiates a 10,000 USD ACH to pull funds from another financial account they don’t have ownership over but have account and routing number information for at Financial Institution B. In this case, Financial Institution A is the originator of the debit (ODFI) and Financial Institution B is the receiver of the debit (RDFI).\n3.  When the debited funds become available in Financial Institution A, the bad actor immediately spends or transfers the funds out.\n4.  The accountholder of Financial Institution B then notices the erroneous debit to their account and reports it to their financial institution that the debit initiated by Financial Institution A wasn’t authorized.\n5.  Financial Institution B initiates an ACH return, citing that the debit wasn’t authorized and pulls back the full amount of the debit.\n6.  Financial Institution A is left with a negative balance.\n\n**Third party fraud example (ACH or wire credit)**\n\n1.  A bad actor uses a compromised or synthetic identity to open a financial account (Financial Institution A).\n2.  The bad actor uses either compromised financial account login credentials or other means to initiate an ACH or wire credit transfer from another financial account into Financial Institution A.\n3.  When the credited funds become available in Financial Institution A, the bad actor immediately spends or transfers the funds out.\n4.  Financial Institution A might not be in a loss position here because only the originating financial institution can recall the incoming credit transfer or wire under limited circumstances. That said, Financial Institution A has enabled fraudulent activity through their account, which has compliance and reputation implications for Stripe and our financial partners.\n\n**Force capture or overcapture fraud example**\n\n1.  A bad actor uses a compromised or synthetic identity to open a financial account with a card attached (Financial Institution A).\n2.  The bad actor creates a separate account, or compromises one in good standing on another acquirer (using account takeover, or ATO).\n3.  The bad actor uses the account to create authorizations on the card issued by Financial Institution A that don’t have issuer dispute rights—for example, card-present transactions on a chip card or card not present transactions that attempt [3D Secure (3DS)](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") or Visa Secure.\n4.  The bad actor then force captures or overcaptures on previous authorizations.\n5.  The bad actor then gets paid out from the business account by the acquirer.\n6.  The bad actor then files fraud disputes on the card issued by Financial Institution A, but Financial Institution A can’t file disputes against the acquirer due to lack of dispute rights and loses the disputes.\n7.  The financial account is left with a negative balance in the amount of the overcaptured or force captured funds.\n\nThe best way to protect yourself from fraud on Treasury, including the previous scenarios, is to make sure the connected accounts signing up for access to the Treasury product are legitimate. It’s a good practice to assess a new account’s risk profile holistically. Generally, the better you understand your customers and their business, the better you can assess and manage your risk exposure.\n\n### Fraud risk mitigation strategies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following risk mitigation strategies to protect yourself at the various stages of business.\n\n#### At onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Monitor signup volume:** Unexpected upticks in signup volume can indicate that your platform is being discovered and exploited by bad actors. It’s also common to see an influx of fraud after making a marketing announcement. Pay special attention to signups in these cases.\n*   **Limit access to faster payouts:** If your connected accounts are also using Stripe for payments, we recommend limiting which ones have access to [faster payouts](https://docs.stripe.com/treasury/moving-money/payouts#payouts) to their Treasury accounts. Limit faster payouts to trusted connected accounts. You might also consider implementing criteria through which your connected accounts can demonstrate good intent and earn faster payouts (for example, a certain number of months of activity with no issues, or a set dollar amount of processed volume).\n*   **ACH debit controls:** ACH debits present an elevated risk of fraud due to their **pull** payment method nature. Given this elevated risk, it’s important to treat the funding method with the appropriate level of fraud protections and controls, including restricting this feature to trusted accounts.\n*   **Additional identity verification:** Although the Treasury product includes standard Connect KYC on your connected accounts, this process focuses on identity validation (whether the information provided at signup is valid) rather than identity verification (whether the person or business providing the information at signup is who they claim to be). You can optionally use [Stripe Identity](https://docs.stripe.com/identity), an identity verification product that programmatically confirms the identity of customers so you can greatly reduce attacks from bad actors while minimizing friction for legitimate customers.\n*   **Collect industry relevant information at signup:**\n    *   If your connected accounts are small businesses, consider collecting URL and relevant social media information such as Linkedin, Facebook, and Twitter.\n    *   If your connected accounts are contractors or creators, consider collecting relevant social media information such as Facebook, Twitter, TikTok, YouTube, or Instagram.\n    *   If your connected accounts are businesses in an industry that requires a license, consider collecting that license at signup.\n*   **Domain verification:** Confirm a connected account owner’s email address if it’s linked to their business domain (for example, send an email to an address at that domain and require a response from it).\n*   **Duplicate detection:** Conduct checks for duplicate account information associated with previously fraudulent connected accounts, such as financial account information, name with DOB, and tax information. You might also consider weak links between accounts such as multiple accounts spun up from the same IP, device, and so on.\n\n#### Throughout an Account’s lifecycle![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Holistic fraud review:** Perform a manual review for fraud at a certain point in each new connected account’s lifecycle. Depending on the number of connected accounts you have, your business model, and your risk appetite, it might make sense to do that at signup, at a certain dollar amount in inflows, a certain dollar amount in outflows, or similar conditions.\n*   **Flag anomalous activity:** Flag businesses showing anomalous behavior for manual review. That can include, but isn’t limited to, a business with more than a certain number of transactions where there’s no authorization (force capture) or a capture greater than the authorization amount (overcapture), a large credit transfer or wire into an account, a large international wire out of an account, card transactions outside of the country, or a return for an ACH debit into the account. It’s also critical to encourage your users to do the same, as they are often in the best position to recognize anomalous activity and report it to you.\n\nIf you suspect the business might be fraudulent, set the `outbound_flows` [feature](https://docs.stripe.com/treasury/account-management/financial-account-features#restricted-features) to `restricted` until you’re able to review the account and make a determination. Examples of information you might want to request from your connected account when performing this manual review depend on your industry, but can include social media profiles, business documentation, photos of inventory, tracking numbers for shipments, business licenses, and so on.\n\nIf you’re confident a business is fraudulent, set the `outbound_flows` and `inbound_flows` features to `restricted`. If the account has a zero balance, close the account. If the account balance isn’t zero, you can’t close the account but you can disable the listed features.\n\n## Transaction fraud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTransaction fraud is the unauthorized use of a credit card or financial account to fraudulently obtain money or property. On Stripe, transaction fraud manifests as unauthorized charges on a Stripe issued card or unauthorized debits to a Stripe issued financial account. Cards can be compromised either through physical theft or a lost card, or through credentials compromised through phishing, spyware, non-secure checkouts, external breaches, and so on. Financial accounts can be compromised if a bad actor gains knowledge of your financial account’s account and routing numbers.\n\nUnlike the fraud outlined above, transaction fraud occurs for good customers and can occur at any point in a customer’s lifecycle. A connected account on your platform can operate on the Treasury product for months or years with no problem before having their card or financial account compromised.\n\nCurrently, Issuing has [fraud protection](https://docs.stripe.com/issuing/manage-fraud) that extends to the card attach products within Treasury, but you still need to monitor for transaction fraud. The most effective ways to combat transaction fraud are to empower your connected accounts to be diligent about keeping their card and financial account information safe. Have them pay close attention to the activity on their Treasury account. Text message or email notifications of account activity can help increase visibility. Quick identification of fraudulent transactions gives your connected accounts the best chance of being eligible to file disputes.\n\nFor card disputes, a transaction is only eligible for a dispute if fewer than 110 days have passed since capture of the transaction. Disputes are handled through the Dashboard or the API. Read the [Issuing disputes](https://docs.stripe.com/issuing/purchases/disputes) guide for more information on filing Issuing disputes.\n\nFor ACH debit disputes (returns), a transaction is only eligible for a dispute if you notify Stripe of any return request at least 24 hours before the settlement date of the transaction. ACH Debit disputes are currently handled manually through email. Read more about [filing ACH Debit disputes](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/debit-reversals).\n\nIf your connected account’s card or financial account number is compromised, resulting in unauthorized transactions, you can take multiple actions. In addition to disputing eligible transactions, consider closing and reissuing the card and opening a [new connect and financial account](https://docs.stripe.com/treasury/account-management/financial-accounts#close-a-financialaccount) to prevent future instances of fraud.\n\nYou can also take proactive measures to manage transaction fraud on your platform. The following examples are some controls you can put in place:\n\n#### Card transaction fraud mitigation strategies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Enroll in 3DS:** 3DS is an additional layer of authentication used by businesses to make sure a purchase is from a legitimate cardholder. The additional 3DS step at checkout typically involves showing the cardholder an authentication page on their financial institution’s website that has a prompt to enter a verification code sent to their phone or email. 3DS is used for online transactions only, and works only if the business and the issuer support it. If a business has 3DS enabled, liability automatically shifts to the issuer for fraudulent disputes, regardless of whether the issuer enables 3DS. We recommend that you [enable 3DS](https://docs.stripe.com/issuing/3d-secure).\n*   **Spending controls:** Set spending controls to block merchant categories (for example, bakeries), or to set spending limits such as 100 USD per authorization or 3,000 USD per month. You can apply them to both cards and cardholders by either setting their `spending_controls` fields when you create them or by updating them later. Setting spending controls is particularly effective when a card or cardholder has an expected spending pattern and it’s likely that anomalous spending is unauthorized. Read more on [spending controls and how to configure them](https://docs.stripe.com/issuing/controls/spending-controls).\n*   **VAA score:** Stripe has certain fraud protections on Issuing transactions, which includes automatically blocking authorizations that look suspicious using Visa’s Advanced Authorization (VAA) score in some cases. If you want us to expose this score to you through the API, contact [treasury-support@stripe.com](mailto:treasury-support@stripe.com).\n*   **Flag high risk transactions for cardholder review:** In some situations you might want to flag card transactions that appear to be high risk to your connected accounts and request that they confirm whether the transaction is authorized. Some ideas of what to look out for include:\n    *   Transactions that are for large or rounded amounts\n    *   Transactions that significantly exceed the average charge size for the cardholder\n    *   Transactions at retailers where gift cards are commonly sold (grocery stores, for example)\n    *   [Force captures](https://docs.stripe.com/issuing/purchases/transactions#handling-other-transactions)\n    *   [Overcaptures](https://docs.stripe.com/issuing/purchases/transactions#handling-other-transactions)\n    *   Transactions on businesses based outside of the country where the cardholder resides\n\n#### ACH debit transaction fraud mitigation strategies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Flag high risk transactions for accountholder review:** In some situations you may want to flag ACH debit transactions that appear to be high risk to your connected accounts and request that they confirm whether the transaction is authorized. Some types of debits to monitor include:\n    *   Debits that are for large amounts or for an amount close to enforced limits\n    *   Debits associated with a new originating party\n    *   Debits attempted when there aren’t sufficient funds in the account to cover\n\nThis step is particularly critical if you have reason to believe the account details of one of your accountholders may be compromised, as it can leave them susceptible to ACH debit transaction fraud.\n\nIf a received ACH is suspected to be unauthorized activity, we recommend processing a [DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals) immediately. Debit reversals allow you to reverse the transaction, but must be completed within two business days of the transaction being received. This short time window underscores the importance of vigilance of ACH debit activity. More on DebitReversals and how to use them effectively can be found in [Moving money with Treasury using DebitReversal objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/debit-reversals).\n\nTo further mitigate this risk, you may consider automatically processing reversals in scenarios you consider high risk. You should also encourage your users to leverage “push” funding methods like [OutboundTransfers](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-transfers).\n\n## Account takeover (ATO) fraud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAccount takeover fraud occurs when a third party gains access to your connected account. Typically, the attacker takes unauthorized actions on the account motivated by financial gain. The most common actions taken by the attacker on a Treasury account are wiring or transferring funds to an external financial account and issuing a new card or viewing raw PAN data of an existing card and making unauthorized transactions on the card.\n\nProtecting against account takeovers depends on whether your platform or Stripe owns the login steps and verification for your connected accounts.\n\nThe following are some examples of controls that you can put in place to protect against account takeovers:\n\n*   [Implement 2FA](https://support.stripe.com/topics/2fa) on all connected accounts.\n*   Educate connected accounts on phishing and not sharing their 2FA codes.\n*   Enforce unique password policies.\n*   Collect device and IP address information to trace whether high risk actions (such as password updates, 2FA method updates, creating a new card, sending funds to a new external financial account) are performed from aged devices or IP addresses.\n*   Monitor IP activity for logins from previously unseen locations or hosting providers.\n*   Implement challenges for high-risk actions, for example, requiring a 2FA code to send a wire to a new account.\n*   Monitor connected accounts for anomalous activity. Examples include a transfer or wire that zeros out the entire treasury balance or international card spending.\n\nIf you suspect an account has been taken over, set the `outbound_flows` and `inbound_flows` [features](https://docs.stripe.com/treasury/account-management/financial-account-features#restricted-features) to `restricted`, expire existing login sessions, and disable login. After you restrict the account, work with the original account owner to verify their identity and restore access to the account. Remediation is typically executed by calling the phone number associated with the customer (pre takeover) and verifying various pieces of personally identifiable information (PII) with the customer. After you confirm the customer’s identity, you can assist them with resetting their password or 2FA device (if changed during the takeover), re-enabling login, and re-enabling treasury capabilities previously set to restricted. Financial reimbursement for any funds lost during the takeover is dependent on your internal policies.\n\n## Other risk mitigation considerations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to those already described, take the following risk mitigation considerations into account also.\n\n### Faster payout controls![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOffering [faster payouts](https://docs.stripe.com/treasury/moving-money/payouts#automatic-payouts) to new businesses presents a risk, so approach it cautiously. To mitigate that risk, we recommend that you implement controls to turn off faster payouts availability if you see an influx of fraud.\n\nOffer faster payouts availability to connected accounts only after they meet a defined trust level, for example:\n\n*   More than 60 days of processing\n*   Greater than 2,000 USD lifetime total volume\n*   Less than 3% chargeback or return rate\n*   Offer T+1 faster payouts to connected accounts before graduating them to T+0 faster payouts\n*   While limiting faster payouts availability to trusted connected accounts helps mitigate fraud at signup, it doesn’t remove the possibility of fraud on account takeovers (ATO) or good-merchant-gone-bad (GMGB) accounts. It’s important to have alerts in place to trigger on businesses who display anomalous charge patterns usually indicative of ATO or GMGB (a spike in processing volume or a shift in average transaction size, sometimes affiliated with change in bank account or login).\n\n### ACH debit controls![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOriginating ACH debits through Treasury [InboundTransfers](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/inbound-transfers) presents an elevated risk of fraud because they’re _pull_ payments. That means that Treasury account holders input customer details and pull funds from the customer’s account, rather than the customer pushing funds from their own account. Because of the elevated risk profile, we suggest a number of risk mitigation efforts for originated ACH debit:\n\n*   Make sure that the business in question has permission to debit funds from a bank account and that the account is verified. Read more about [ACH Debit authorization and verification](https://docs.stripe.com/payments/ach-debit).\n*   For ACH debit, funds can be returned for a number of reasons, ranging from fraud to insufficient funds. Most failures (for example, insufficient funds or an invalid account) occur within 4 business days of their post date, so it’s important to make sure that connected accounts that haven’t built trust yet aren’t paid out funds prior to this initial settlement period passing.\n*   Given the elevated risk profile of ACH debit, you need to either restrict access to trusted connected accounts or place strict limits and monitor use to identify fraudulent actors. For example, new accounts might have their ACH debit limited to a transaction size of 2,000 USD and a weekly limit of 5,000 USD to start out. As more trust builds with connected accounts, you can increase these limits alongside their business growth.\n\nWhen you suspect fraud, taking the appropriate actions to minimize financial loss and further fraudulent activity is extremely important. You can think of fraud remediation as two main steps:\n\n1.  Stop the immediate damage.\n2.  Build long term solutions to mitigate future abuse. Some important steps you can take when you identify fraud include the following:\n    *   Make sure all funds flows and money movement are blocked for the account in question. For example, set the `outbound_flows` and `inbound_flows` [features](https://docs.stripe.com/treasury/account-management/financial-account-features#restricted-features) to `restricted`.\n    *   Determine why the account in question wasn’t identified by fraud and risk controls and make sure that additional controls are put in place. When fraudsters identify a gap in risk systems, they continue to try to exploit this gap until it’s successfully fixed.\n    *   Identify any other accounts attempting similar fraudulent behavior. As mentioned previously, fraudulent actors will continue to exploit gaps as long as they exist, and will try to do so at scale to maximize their return. When you identify one case of fraud, it’s important to make sure that the same type of fraud isn’t occurring on other accounts, and that the perpetrator doesn’t simply create a new account and repeat the same actions. Doing so allows you to potentially get ahead of lagging signals, such as disputes, and disincentivize fraudulent actors from returning by minimizing their gains.\n\n## Suggested metrics monitoring![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following are some metrics we recommend monitoring to help guide identification and measurement of fraud on your Treasury-enabled customers. The following metrics assume your connected accounts are using both our Treasury and Payments products. If this isn’t the case, you can modify them accordingly.\n\n### Lagging metrics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Rejection rate on Treasury-enabled accounts versus other accounts, over time\n*   Absolute acquiring losses on Treasury-enabled accounts\n*   Percentage of lossy accounts that are Treasury-enabled\n*   Absolute loss per account on Treasury-enabled accounts versus other accounts\n*   Time to acquiring loss on Treasury-enabled accounts versus other accounts\n\n### Leading metrics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Signup rate over time for Treasury-enabled accounts versus other accounts\n*   Transfer amount anomalies: New connected accounts with high volume of `ReceivedTransfers` (not including acquiring payouts) in the first 30 days\n*   Transfer amount anomalies: Low acquiring processing volume with high volume `ReceivedTransfers` (not including acquiring payouts)\n*   List of accounts with material `ReceivedTransfers` followed by `OutboundTransfers` bringing the Treasury balance to zero\n*   List of accounts who exceed certain total amounts in international card spending or `OutboundTransfers`",
  "title": "Treasury fraud guide | Stripe Documentation",
  "description": "Learn best practices for managing fraud as a Treasury platform.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/examples/sample-app",
  "markdown": "# Issuing and Treasury sample app\n\n## Use the Stripe Next.js sample app to start your own Issuing and Treasury integration.\n\nIn addition to a full suite of documentation and SDKs for Stripe Issuing and Treasury, we offer a Next.js sample app.\n\nSee a demo of our sample app at [baas.stripe.dev](https://baas.stripe.dev/), or check out the [GitHub repository](https://github.com/stripe-samples/issuing-treasury).\n\n## Accessing code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe sample app is a Next.js app that leverages TypeScript, React, and Material UI. You can fork the project from the [Stripe samples GitHub repository](https://github.com/stripe-samples/issuing-treasury) and use the included components as a starting point for your own app.\n\n## App features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe app provides many how-to examples, including:\n\n*   Leverage Stripe Connect Onboarding to collect Know Your Customer (KYC) information for onboarding connected accounts compliantly\n*   Display account information and balance\n*   Display transactions on the Treasury Financial Account\n*   Simulate sending funds to an external account using ACH or wire\n*   Simulate receiving an ACH credit\n*   Visualize the volume of inbound and outbound money flows using [ApexCharts](https://github.com/apexcharts/apexcharts.js)\n*   Create cardholders compliantly\n*   Create cards using the Treasury Financial Account as an issuable balance\n*   Show sensitive card numbers in a PCI-compliant way\n*   Simulate card authorizations\n*   Get paid through a payment link, then transfer funds from your Stripe payments balance to the Financial Account\n*   Use test helpers to simulate actions impacting the account\n\n## Component breakdown![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following sections provide an overview of how each component in the sample app works.\n\nYou can learn more about [Issuing APIs and features](https://docs.stripe.com/issuing) or [Treasury APIs](https://docs.stripe.com/api/treasury/financial_accounts) and [features](https://docs.stripe.com/treasury).\n\n### Account creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe account creation flow consists of four steps:\n\n1.  Create a [connected account](https://docs.stripe.com/treasury/account-management/connected-accounts) with the following capabilities: `transfers`, `card_issuing`, and `treasury`.\n\n`const account = await stripe.accounts.create({   country: 'US',   email: email,   capabilities: {     transfers: {requested: true},     treasury: {requested: true},     card_issuing: {requested: true},   },   controller: {     dashboard: {type: \"none\"},     losses: {payments: \"application\"},     requirement_collection: \"application\",     fees: {payer: \"application\"}   }, });`\n\n1.  Create a Stripe Treasury [Financial Account](https://docs.stripe.com/treasury/account-management/financial-accounts).\n\n`const financialAccount = await stripe.treasury.financialAccounts.create(   {     supported_currencies: ['usd'],     features: {       card_issuing: {requested: true},       deposit_insurance: {requested: true},       financial_addresses: {aba: {requested: true}},       inbound_transfers: {ach: {requested: true}},       intra_stripe_flows: {requested: true},       outbound_payments: {         ach: {requested: true},         us_domestic_wire: {requested: true},       },       outbound_transfers: {         ach: {requested: true},         us_domestic_wire: {requested: true},       },     },   },   {stripeAccount: account.id}, );`\n\n1.  Create a Connect Onboarding link and use it to redirect new connected accounts to collect the necessary profile information for the requested capabilities.\n\n`const { url } = await stripe.accountLinks.create({   type: 'account_onboarding',   account: accountId,   refresh_url: host + '/onboard',   return_url: host + '/onboard',   collect: 'eventually_due', });`\n\n### Account balance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe account balance card uses only the `stripe.treasury.financialAccounts.list` API.\n\n`const financialAccounts = await stripe.treasury.financialAccounts.list({   stripeAccount: StripeAccountID, }); const financialAccount = financialAccounts.data[0];`\n\nThe payload of the above command contains a balance object consisting of the current [balance](https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions) (cash) and outbound funds.\n\n`{   \"id\": \"fa_...\",  ...   \"balance\": {     \"cash\": { \"usd\": 534214 },     \"inbound_pending\": { \"usd\": 0 },     \"outbound_pending\": { \"usd\": 2200 }   },  ...   \"supported_currencies\": [ \"usd\" ] }`\n\n### Funds in and funds out chart![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe funds movement chart uses only the `stripe.treasury.transactions.list` API.\n\n`const fa_transactions = await stripe.treasury.transactions.list(   {     financial_account: financialAccount.id,     order_by: 'created',     limit: 100,   },   {stripeAccount: StripeAccountID}, );`\n\nThe responses are grouped by positive or negative balances and creation date. The data is then ported into [ApexCharts](https://github.com/apexcharts/apexcharts.js) to create a dynamic display of the funds flow.\n\n`{   \"id\": \"{{TRANSACTION_ID}}\",   \"object\": \"treasury.transaction\",   \"created\": \"{{T}}\",   ...   \"flow\": \"{{OUTBOUND_PAYMENT_ID}}\",   \"flow_type\": \"outbound_payment\",   \"status\": \"open\",   \"amount\": -1000,   \"currency\": \"usd\",   \"balance_impact\": {     \"cash\": -1000,     \"inbound_pending\": 0,     \"outbound_pending\": 1000,   },   \"entries\": {     \"data\": [       {         \"id\": \"{{TRANSACTION_ENTRY_ID}}\",         \"object\": \"treasury.transaction_entry\",         ...         \"created\": \"{{T}}\",         \"effective_at\": \"{{T}}\",         \"currency\": \"usd\",         \"balance_impact\": {           \"cash\": -1000,           \"inbound_pending\": 0,           \"outbound_pending\": 1000,         }       }     ],     \"has_more\": false,     \"object\": \"list\",     \"url\": \"/v1/treasury/transaction_entries?financial_account={{FINANCIAL_ACCOUNT_ID}}&transaction={{TRANSACTION_ID}}\"   } }`\n\n### Transaction list![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe transaction list uses the `stripe.treasury.transactions.list` API.\n\n`const fa_transactions = await stripe.treasury.transactions.list(   {     financial_account: financialAccount.id,     order_by: 'created',     limit: 100,   },   {stripeAccount: StripeAccountID}, );`\n\nThe columns in the transactions table are parsed from the `transaction` object using the following mapping:\n\n*   `created` → Date\n*   `amount` → Amount / Currency\n*   `flow_type` → Type\n*   `status` → Status\n*   `description` → Description\n\n### Send money interface![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe money sending feature in the sample app uses the Stripe Treasury `OutboundPayment` feature. You can use [OutboundPayments](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments) to send money to a third party’s external account.\n\n`const outboundPayment = await stripe.treasury.outboundPayments.create(   {     financial_account: financialAccount.id,     amount: amount,     currency: 'usd',     statement_descriptor: req.descriptor,     destination_payment_method_data: {       type: 'us_bank_account',       us_bank_account: {         account_holder_type: 'individual',         routing_number: '110000000',         account_number: '000000000009',       }     }   },   {     stripeAccount: StripeAccountId   }, );`\n\n### Issuing cardholder creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must create a `Cardholder` before you can issue a card using Stripe Issuing to spend funds from the Treasury Financial Account. Use the `stripe.issuing.cardholders.create` API to create cardholders.\n\n`const cardholder = await stripe.issuing.cardholders.create(   {     type: 'individual',     name: firstName + ' ' + lastName,     email: email,     individual: {       first_name: firstName,       last_name: lastName,       dob: {day: day, month: month, year: year}     },     billing: {       address: {         city: city,         line1: address1,         state: state,         postal_code: postalCode,         country: country,       },     },   },   {     stripeAccount: StripeAccountId,   } );`\n\n### Issuing cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you create a `Cardholder`, you can issue a card to the `Cardholder` using the `stripe.issuing.cards.create` API.\n\n`const card = await stripe.issuing.cards.create(   {     cardholder: req.body.cardholderid,     financial_account: financialAccount.id,     currency: 'usd',     type: 'virtual',     status: 'active',   },   {stripeAccount: StripeAccountId}, );`\n\n### Cards list![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe cards list renders using data from the `stripe.issuing.cards.list` API.\n\n`const cards = await stripe.issuing.cards.list(   {limit: 10},   {stripeAccount: StripeAccountID}, );`\n\nUse the `stripe.issuing.authorizations.list` API to retrieve authorizations for a specific card. The following example limits the list to the 10 most recent authorizations.\n\n`const card_authorizations = await stripe.issuing.authorizations.list(   {     card: cardId,     limit: 10,   },   {stripeAccount: StripeAccountID}, );`\n\nThe columns in the authorization table are parsed from the response object using the following mapping:\n\n*   `created` → Date\n*   `amount` → Amount / Amount Currency\n*   `card.cardholder.name` → Name on Card\n*   `card.last4` → Last 4\n*   `approved` → Approved\n*   `status` → Status\n*   `merchant_data.name` → Merchant\n*   `merchant_data.category` → Merchant Category\n\n## Test mode helpers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe sample app features test mode helpers that enable you to perform certain actions, such as funding your account, creating a payment link to collect funds in a connected account, and paying out funds to the Financial Account. You can access most of the test helpers by clicking the **Generate Test Data** button or clicking **Test Data**.\n\n### Received Credit test helper![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn test mode, you can add funds to a Treasury Financial Account using the [ReceivedCredit Test Helpers](https://docs.stripe.com/api/treasury/received_credits/test_mode_create). This test helper simulates receiving a transfer from an external bank account into your Financial Account.\n\n`const receivedCredit = await stripe.testHelpers.treasury.receivedCredits.create(   {     amount: 50000,     currency: 'usd',     financial_account: financialAccount.id,     network: 'ach',   },   {stripeAccount: StripeAccountId}, );`\n\n### Payment links and payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use payment links to add funds to the connected account that’s associated with a Financial Account:\n\n1.  Create a `Price` that determines the amount deposited into the connected account after completion of payment.\n\n`const prices = await stripe.prices.list(   {     limit: 1,     active: true,     type: 'one_time',   },   {stripeAccount: StripeAccountId,}, );  let price;  if (prices.data.length < 1) {   price = await stripe.prices.create(     {       unit_amount: 1000,       currency: 'usd',       product_data:         {           name: 'Unit',       },     },     {stripeAccount: StripeAccountId,},   ); } else {   price = prices.data[0]; }`\n\n1.  After obtaining the price, Stripe creates a `PaymentLink`, and you redirect the customer to complete the payment. Use the `Price` `id` from the previous step to set the value for the `price` parameter. Alternatively, you can exclude the parameter to use a default value instead.\n\n`const paymentLink = await stripe.paymentLinks.create(   {     line_items: [       {         price: price.id,         quantity: 1,         adjustable_quantity: {enabled: true},       },     ],   },   {stripeAccount: StripeAccountId,}, );`\n\n### Payout from the connected account payments balance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Payouts](https://docs.stripe.com/treasury/moving-money/payouts#payouts) can send funds from a connected account’s payments balance to their Treasury Financial Account. Do the following to execute a payout:\n\n1.  Check if there’s an external account configured for the connected account. To do so, use the [accounts.retrieve](https://docs.stripe.com/api/accounts/retrieve) API to obtain the [account object](https://docs.stripe.com/api/accounts/object) and verify if the `external_account` property is populated.\n\n`const responseAccount = await stripe.accounts.retrieve(StripeAccountID); const accountExternalAccount = responseAccount.external_accounts.data[0];  let hasExternalAccount = false;  if (accountExternalAccount) {   hasExternalAccount = true; }`\n\n1.  If the connected account doesn’t have an external account, they can set up the Treasury Financial Account as their external account.\n\n`const financialAccounts = await stripe.treasury.financialAccounts.list(   {expand: ['data.financial_addresses.aba.account_number']},   {     stripeAccount: StripeAccountId,   }, );  const financialAccount = financialAccounts.data[0];  await stripe.accounts.createExternalAccount(StripeAccountId, {   external_account: {     object: 'bank_account',     country: 'US',     currency: 'usd',     account_number:       financialAccount.financial_addresses[0].aba.account_number,     routing_number:       financialAccount.financial_addresses[0].aba.routing_number,   }, });`\n\n1.  Initiate a payout to the connected account’s external account. In this case, the external account is the Treasury Financial Account.\n\n`const balance = await stripe.balance.retrieve({   stripeAccount: StripeAccountId, });  const payout = await stripe.payouts.create(   {     amount: balance.available[0].amount,     currency: 'usd',   },   {stripeAccount: StripeAccountId}, );`",
  "title": "Issuing and Treasury sample app | Stripe Documentation",
  "description": "Use the Stripe Next.js sample app to start your own Issuing and Treasury integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/examples/webhooks",
  "markdown": "# Webhooks for Stripe Issuing and Stripe Treasury\n\ntreasury.credit\\_reversal.createdOccurs whenever a CreditReversal is created.treasury.credit\\_reversal.postedOccurs whenever a CreditReversal post is posted.treasury.debit\\_reversal.completedOccurs whenever a DebitReversal is completed.treasury.debit\\_reversal.createdOccurs whenever a DebitReversal is created.treasury.debit\\_reversal.initial\\_credit\\_grantedOccurs whenever an initial credit is granted on a DebitReversal.treasury.financial\\_account.closedOccurs whenever the status of the FinancialAccount becomes closed.treasury.financial\\_account.createdOccurs whenever a new FinancialAccount is created.treasury.financial\\_account.features\\_status\\_updatedOccurs whenever the statuses of any features within an existing FinancialAccount are updated.treasury.inbound\\_transfer.canceledOccurs whenever an InboundTransfer is canceled.treasury.inbound\\_transfer.createdOccurs whenever an InboundTransfer is created.treasury.inbound\\_transfer.failedOccurs whenever an InboundTransfer has failed.treasury.inbound\\_transfer.succeededOccurs whenever an InboundTransfer has succeeded.treasury.outbound\\_payment.canceledOccurs whenever an OutboundPayment is canceled.treasury.outbound\\_payment.createdOccurs whenever a new OutboundPayment is successfully created.treasury.outbound\\_payment.expected\\_arrival\\_date\\_updatedOccurs whenever the arrival date on an OutboundPayment updates.treasury.outbound\\_payment.failedOccurs whenever an OutboundPayment fails.treasury.outbound\\_payment.postedOccurs whenever an OutboundPayment posts.treasury.outbound\\_payment.returnedOccurs whenever an OutboundPayment is returned.treasury.outbound\\_transfer.canceledOccurs whenever an OutboundTransfer is canceled.treasury.outbound\\_transfer.createdOccurs whenever an OutboundTransfer is created.treasury.outbound\\_transfer.expected\\_arrival\\_date\\_updatedOccurs whenever the arrival date on an OutboundTransfer updates.treasury.outbound\\_transfer.failedOccurs whenever an OutboundTransfer has failed.treasury.outbound\\_transfer.postedOccurs whenever an OutboundTransfer is posted.treasury.outbound\\_transfer.returnedOccurs whenever an OutboundTransfer is returned.treasury.received\\_credit.createdOccurs whenever a received\\_credit is created as a result of funds being pushed by another account.treasury.received\\_credit.failedOccurs whenever a received\\_credit transitions to a failed state. Only applicable for check deposits.treasury.received\\_credit.succeededOccurs whenever a received\\_credit transitions to a succeeded state. Only applicable for check deposits.treasury.received\\_debit.createdOccurs whenever a received\\_debit is created as a result of funds being pulled by another account.",
  "title": "Webhooks for Stripe Issuing and Stripe Treasury | Stripe Documentation",
  "description": "Learn about webhook events for Stripe Issuing and Stripe Treasury and why they occur.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/account-management/treasury-accounts-structure",
  "markdown": "# Stripe Treasury accounts structure | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how the account components of Treasury fit together and interact.\n\nUnderstanding the technical components of Stripe Treasury is important for you to develop an optimized financial service for the sellers and service providers on your platform. A crucial first step in that understanding is to learn the different account types involved with a Treasury integration.\n\n## Account types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour platform must have Stripe [Connect](https://docs.stripe.com/connect \"Connect\") to use Treasury. In its most basic form, a Connect integration includes a platform account with many connected accounts, each owned by a seller or service provider that uses the platform. Both the platform account and its connected accounts are [`Account`](https://docs.stripe.com/api/accounts) objects in the Stripe API.\n\nTreasury only supports connected accounts that don’t use a Stripe-hosted dashboard and where your platform is responsible for requirements collection and loss liability, including Custom connected accounts. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Treasury.\n\nAs a platform with connected accounts, you’re responsible for maintaining a minimum API version, communicating terms of service updates to your connected accounts, handling information requests from them, and providing them with support. Because your platform is ultimately responsible for the losses your connected accounts incur, you’re also responsible for vetting them for fraud. To learn more, read the [Treasury fraud guide](https://docs.stripe.com/treasury/examples/fraud-guide).\n\n![Flow chart with lines connecting a platform with three different connected accounts.](https://b.stripecdn.com/docs-statics-srv/assets/connected-accounts.7443ee88f52a49904439afc21ded676e.png)\n\nA Connect platform with connected accounts\n\nStripe Treasury introduces another type of account to the Stripe ecosystem: financial accounts. When you onboard your platform to Treasury, Stripe automatically creates and assigns a `FinancialAccount` object to your platform account. As the platform, you request the `treasury` capability when requesting the capabilities you need for your connected accounts. After you request it, Stripe updates the connected account’s `Account` object to include additional requirements in its [`requirements` hash](https://docs.stripe.com/api/accounts/object#account_object-requirements). You can create financial accounts for your connected accounts, but until you gather the requirements from your connected account owners, the financial accounts aren’t accessible. For more information on using Treasury financial accounts, see the [Working with financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts) guide.\n\n## Account balances![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach account in Stripe Connect (both platform and connected accounts) has an [account balance](https://docs.stripe.com/connect/account-balances) that tracks pending and available funds for that account. With Stripe Treasury, each of these accounts can also have a financial account, which has a balance of its own. Treasury provides you the tools to transfer funds between the platform account and financial account, but their respective balances always remain separate. However, funds can’t be transferred from a platform end-user’s financial account to their connected account. For more information on platform and connected account balances, see the [Understanding Connect account balances](https://docs.stripe.com/connect/account-balances) guide. For more information on financial account balances, see the [Working with balances and transactions](https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions) guide.\n\n![Flow chart with a line connecting a platform account with a connected account. For each account, two lines connect both a payments account balance and a financial account balance. A double arrow with a dollar sign shows funds flow between each accounts balances and a one direction arrow with a dollar sign flow from the platform financial account balance to the connected account financial account balance.](https://b.stripecdn.com/docs-statics-srv/assets/fund-flow.6fb714d66e6c95a45f14066001c290bc.png)\n\nFlow of funds between accounts\n\n## Flow of funds between accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlthough the payments balance and financial account balances are separate, Treasury supports the flow of funds between the two. Treasury also enables you to transfer funds from your platform financial account to the financial accounts attached to your platform’s connected accounts. You can use [Payouts](https://docs.stripe.com/api/payouts) to send funds from your payment balance to your financial account or to the financial accounts attached to your platform’s connected accounts. To move money between two financial accounts, Treasury introduces [OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments) objects to facilitate this movement.\n\nTransfers affect funds on the Stripe Account Balance, so if you want to move funds between two financial accounts, you must use OutboundPayments.",
  "title": "Stripe Treasury accounts structure | Stripe Documentation",
  "description": "Learn how the account components of Treasury fit together and interact.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/examples/moving-money",
  "markdown": "# Using Treasury to move money\n\n## Learn how to use SetupIntents, PaymentMethods, and verify bank accounts with Stripe Treasury.\n\nHomebox is a fictitious vertical SaaS that builds software for home services companies like HVAC, cleaners, and plumbers. This integration walks through some basic money movement using the Treasury endpoints of the [Stripe API](https://docs.stripe.com/api). To see how the company set up a Treasury financial account and issued payment cards, see [Using Treasury to set up financial accounts and cards](https://docs.stripe.com/treasury/examples/financial-accounts).\n\n## Using external bank accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Treasury provides platforms with a suite of account creation and money movement API endpoints to help store, manage, and move connected accounts’ funds. Platforms can fund a financial account, and move money between Treasury financial accounts and external bank accounts.\n\nThe Stripe API offers `InboundTransfer` and `OutboundTransfer` to facilitate moving money between connected accounts’ external bank accounts and their Treasury financial accounts. The Stripe API also offers `OutboundPayment` to facilitate moving money from connected accounts’ Treasury financial accounts to third-parties’ external bank accounts. All of these objects can leverage `PaymentMethods` to store external bank account details such as routing numbers and account numbers.\n\n## PaymentMethods explained![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWithin the Stripe API, you can save payment method information using a `PaymentMethod` object. For example, Homebox might save their vendors’ accounts as `PaymentMethods` to send money without having to re-enter and collect their information.\n\nYou can attach `PaymentMethods` that contain external bank account information to a customer (for sending money to a third party) or to a Stripe account (for pulling money from or sending money to an external bank account belonging to the Stripe accountholder). The “customer” refers to the `Customer` object in the Stripe API, which defines any third party. In Treasury usage, the customer is generally a vendor receiving payments from the Stripe accountholder rather than making payments to the Stripe accountholder. Use the `SetupIntent` object to set up both customer-attached and account-attached `PaymentMethod` objects.\n\nThe relevant API objects that you can use with a `PaymentMethod` depend on how they’re attached:\n\n*   Customer-attached: Use `OutboundPayments`.\n*   Account-attached: Use `InboundTransfers` and `OutboundTransfers`.\n\n![Flowchart with external bank account on left and flow moving to SetupIntent then PaymentMethod and attaching to customer or account.](https://b.stripecdn.com/docs-statics-srv/assets/paymentmethods.f429ec4e87b87636c0e2b34c26a69c83.png)\n\nPaymentMethod flow\n\n## InboundTransfers and OutboundTransfers overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can pull funds from a Stripe account’s external bank account using an `InboundTransfer` and push funds to their external bank account using an `OutboundTransfer`.\n\nTo successfully pull funds into a Treasury financial account with an `InboundTransfer`, external bank accounts must be verified by the Stripe accountholder. Bank accounts that are used to send funds out of a financial account with an `OutboundTransfer` don’t need to be verified.\n\nWhen an external bank account is used for either `InboundTransfers` or `OutboundTransfers`, you need to attach the corresponding `PaymentMethod` to the Stripe account rather than to a customer. You do this by using the `attach_to_self=true` parameter rather than the `customer` parameter when creating the `PaymentMethod` using `SetupIntent`.\n\n![Flow chart with external bank on the left and flow pointing to SetupIntent to PaymentMethod and attaching to Stripe account.](https://b.stripecdn.com/docs-statics-srv/assets/iot.38c049d39deca401a3341b34d72189fe.png)\n\n`InboundTransfers` and `OutboundTransfers` flow.\n\n## OutboundPayments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms use the `OutboundPayment` API to send funds from a Treasury financial account to an external bank account owned by a third party.\n\nYou must attach `PaymentMethods` to a customer to use them with `OutboundPayments`. Bank accounts used for `OutboundPayments` don’t need to be verified.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/iot-customer.5476c499693c606ead280fbae61ebe4a.png)\n\n`OutboundPayments` flow\n\n## Adding an external bank account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHomebox wants to link their customers’ own external bank accounts to their Treasury financial accounts. Homebox’s connected accounts want to keep all of their business capital in their financial accounts and use inbound transfers to pull money from their external account into their Treasury financial account. To enable their connected accounts to transfer money to and from their external accounts, Homebox creates a `SetupIntent` with the required parameters and attaches it to an account-attached `PaymentMethod`:\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d attach_to_self=true \\  -d \"flow_directions[]\"=inbound \\  -d \"flow_directions[]\"=outbound \\  -d \"payment_method_types[]\"=us_bank_account \\  -d \"payment_method_data[type]\"=us_bank_account \\  -d \"payment_method_data[us_bank_account][routing_number]\"=110000000 \\  -d \"payment_method_data[us_bank_account][account_number]\"=000123456789 \\  -d \"payment_method_data[us_bank_account][account_holder_type]\"=company \\  -d \"payment_method_data[billing_details][name]\"=\"Company Corp\" \\  -d confirm=true \\  -d \"mandate_data[customer_acceptance][type]\"=online \\  -d \"mandate_data[customer_acceptance][online][ip_address]\"=\"123.123.123.123\" \\   --data-urlencode \"mandate_data[customer_acceptance][online][user_agent]\"=\"curl/1.2.3\"`\n\nTo send and receive money through `OutboundTransfers` or `InboundTransfers`, Homebox must specify an external bank account with the `payment_method_data[us_bank_account]` parameter. Before creating the live external bank account link, Homebox tests the flow using the [test account numbers](https://docs.stripe.com/payments/ach-debit/set-up-payment?platform=web&payment-ui=stripe-hosted#test-account-numbers) Stripe provides.\n\nAs shown in the preceding example, Homebox has defined the external bank account (`payment_method_data[us_bank_account]`) and set `attach_to_self` as `true`, which enables the bank account information to be associated with the Stripe accountholder (rather than a third party). When the platform sends the request, the Treasury API responds with a `SetupIntent`:\n\n`{   \"id\": \"{{SETUP_INTENT_ID}}\",   \"object\": \"setup_intent\",   \"application\": \"{{APPLICATION_ID}}\",   \"attach_to_self\": true,   \"cancellation_reason\": null,   \"client_secret\": \"{{SETUP_INTENT_SECRET}}\",   \"created\": 1642520861,   \"customer\": null,   \"description\": null,   \"flow_directions\": [     \"inbound\",     \"outbound\"   ],   \"last_setup_error\": null,   \"latest_attempt\": \"{{ATTEMPT_ID}}\",   \"livemode\": false,   \"mandate\": \"{{MANDATE_ID}}\",   \"metadata\": {   },   \"next_action\": {     \"type\": \"verify_with_microdeposits\",     \"verify_with_microdeposits\": {       \"arrival_date\": 1642579200,       \"hosted_verification_url\": \"[https://payments.stripe.com/microdeposit/sacs_test_xxx](https://payments.stripe.com/microdeposit/sacs_test_xxx)\",       \"microdeposit_type\": \"amounts\"     }   },   \"on_behalf_of\": null,   \"payment_method\": \"{{PAYMENT_METHOD_ID}}\",   \"payment_method_options\": {     \"us_bank_account\": {       \"verification_method\": \"automatic\"     }   },   \"payment_method_types\": [     \"us_bank_account\"   ],   \"single_use_mandate\": null,   \"status\": \"requires_confirmation\",   \"usage\": \"off_session\" }`\n\n## Verifying an external bank account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHomebox linked an external bank account in the previous section. The bank account must be verified, though, before Homebox can use it for `InboundTransfers`. Bank account verification enables the account owner to confirm ownership of the external bank account. To verify, Homebox can use [Stripe Financial Connections](#connections) for instant verification, or [microdeposits](#microdeposits) (which take more time).\n\n### Stripe Financial Connections ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe offers [Financial Connections](https://docs.stripe.com/financial-connections) to instantly verify an owned bank account. Financial Connections is a Stripe hosted flow integrated on the application’s client- and server-side.\n\nThere are three steps necessary for Homebox to collect and verify bank account information with Financial Connections:\n\n1.  Create a `SetupIntent` with the property `attach_to_self` (replacing the `customer_id` property), and the value `instant` for the `verification_method` property.\n    \n2.  Provide the `client_secret` to the frontend application to use `stripe.collectBankAccountForSetup` to collect bank account details, create a `PaymentMethod`, and attach that `PaymentMethod` to the `SetupIntent`.\n    \n    #### Note\n    \n    The account holder’s name in the `billing_details` parameter is required to create a US bank account `PaymentMethod`.\n    \n3.  Display the mandate terms to collect the authorization for the `PaymentMethod` usage.\n    \n\nFor step 1, Homebox develops the following code to create a `SetupIntent` server-side and pass the information to a handlebars.js template. This code assumes that an application has a user logged in to Stripe and that it passes the Stripe Account ID as part of the [`Session` object](https://docs.stripe.com/api/financial_connections/sessions/object) (`req.session.accountId`).\n\n`const stripe = require(\"stripe\")(process.env.STRIPE_SECRET_KEY); router.get('/add_bank_account', async (req, res) => {   const account = await stripe.accounts.retrieve(req.session.accountId);   const setupIntent = await stripe.setupIntents.create({     attach_to_self: true,     flow_directions: ['inbound', 'outbound'],     payment_method_types: ['us_bank_account'],     payment_method_options: {us_bank_account: {verification_method: \"automatic\"}}   },{     stripeAccount: account.id,   });   let client_secret= setupIntent.client_secret;   res.render('add_bank_account', { account: account, client_secret: client_secret, stripe_pk: process.env.STRIPE_PUBLISHABLE_KEY }); });`\n\nStep 2 begins when Homebox passes the following data to the render function:\n\n*   The Stripe account ID.\n*   The client secret obtained from the `SetupIntent` that’s used as the identifier.\n*   The platform’s publishable API key.\n\nIn this example, the client-side page renders with a button for the user to validate their bank account through Financial Connections.\n\n![Screenshot of a modal titled Add a bank account with a button labeled Save Payment Details](https://b.stripecdn.com/docs-statics-srv/assets/add-bank-account-modal.0b727f65d3c6691f3bef211c1a45cb83.png)\n\nModal to add a bank account\n\nHomebox creates the following code to drive the logic behind the preceding button.\n\n`const getBankAccount = async e => {   paymentMethodButton.setAttribute(\"disabled\", \"disabled\");   // Calling this method triggers the Financial Connections modal to display.   const response = await stripe.collectBankAccountForSetup(\"{{ client_secret }}\", {     billing_details: {       name: \"John Doe\",       email: \"test@test.com\",     },   });   if (response.error)   {     console.error(response.error);   }   if (response.status == \"requires_confirmation\")   {     //Show confirmation modal     AcceptBankAccountModal.classList.remove(\"hidden\");   } };`\n\nIn this code example, the script calls the `collectUsBankAccountForSetup` method and passes the `client_secret` from the `SetupIntent`. An application dialog walks the user through linking their bank account.\n\n![Screenshot of a modal going through the workflow of adding a bank account. First state of modal shows the authorize step with an Agree button and the next state shows the highlighted account with a Link Account button.](https://b.stripecdn.com/docs-statics-srv/assets/add-account-flow.cfd2209695ca186cd617f682319e564c.png)\n\nWorkflow for adding a bank account\n\nStep 3 begins with the successful completion of the preceding workflow, as the `SetupIntent` status changes to `requires_confirmation` and a modal displays an [authorization message](https://docs.stripe.com/payments/ach-debit/set-up-payment?platform=web#web-collect-mandate-and-submit) for the user to confirm.\n\n![Screenshot of a modal displaying the authorization confirmation language with an Accept button at the bottom and an x in the top left to cancel.](https://b.stripecdn.com/docs-statics-srv/assets/accept-modal.6db14c686b9ec87ff471a18d2f9d2abf.png)\n\nAuthorization message\n\nAfter the user clicks **Accept**, the code calls the `confirmUsBankAccountSetup` method and the bank account is stored as verified. The bank account can now be used for `InboundTransfers`.\n\n`const acceptBankAccount = async e => {   acceptButton.setAttribute(\"disabled\", \"disabled\");   const response = await stripe.confirmUsBankAccountSetup(\"{{ client_secret }}\");   if (response.setupIntent.status == \"requires_payment_method\") {     // Confirmation failed. Attempt again with a different payment method.     console.log(\"Requires payment method\")   } else if (response.setupIntent.status == \"succeeded\") {     // Confirmation succeeded! The account is now saved.     // Display a message to customer.     AcceptBankAccountModal.classList.add(\"hidden\");     console.log(\"Account added\");   } else if (response.setupIntent.next_action?.type == \"verify_with_microdeposits\") {     // The account needs to be verified via microdeposits.     // Display a message to consumer with next steps (consumer waits for     // microdeposits, then enters an amount on a page sent to them via email).     console.log(\"The account needs to be verified with microdeposits\")   } };`\n\n### Microdeposits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMicrodeposits are small sums of money, typically a fraction of a US dollar, that Stripe deposits into an external bank account. Owners of the account can verify ownership of the account by confirming the exact amount of those deposits.\n\nThe `SetupIntent` object that Homebox created in the previous section includes a `PaymentMethod` ID.\n\n`{   \"id\": \"{{SETUP_INTENT_ID}}\",   …   \"on_behalf_of\": null,   \"payment_method\": \"{{PAYMENT_METHOD_ID}}\",   \"payment_method_options\": { …  } }`\n\nThe `SetupIntent` also includes a `next_action` object with a URL defined in the `hosted_verification_url` value.\n\nHomebox provides the URL to the connected account owner to complete verification. The owner must follow the URL to verify receipt by entering the associated descriptor code of the microdeposit (in [test mode](https://docs.stripe.com/test-mode \"test mode\"), use the value `SM11AA`).\n\n![Microdeposit verification dialog showing one cent deposited into an account with a prompt to enter descriptor code and a verify button.](https://b.stripecdn.com/docs-statics-srv/assets/microdeposits.0b67c00bb4028265c9ed9dbe300f5b81.png)\n\nMicrodeposit verification\n\n## Using PaymentMethods with InboundTransfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHomebox can begin creating `InboundTransfers` using a bank account verified with one of the previously described methods.\n\nThe following request transfers 200 USD using an account-attached payment method into the financial account with the provided ID. The `Stripe-Account` header value identifies the Stripe account that owns both the financial account and the payment method.\n\n`curl https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d origin_payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d amount=20000 \\  -d currency=usd \\  -d description=\"Funds for repair\" \\  -d statement_descriptor=\"Invoice 12\"`\n\nIf successful, the response provides the `InboundTransfer` object. The object includes a `hosted_regulatory_receipt_url` that provides access to details of the transaction for the account holder on the Homebox platform.\n\n`{     \"id\": \"{{INBOUND_TRANSFER_ID}}\",     \"object\": \"inbound_transfer\",     \"amount\": 20000,     \"created\": 1648071297,     \"currency\": \"usd\",     \"description\": \"Funds for repair\",     \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",     \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/{{IBT_URL}}\",     \"linked_flows\": null,     \"livemode\": false,     \"metadata\": {},     \"origin_payment_method\": \"{{PAYMENT_METHOD_ID}}\",     ...     \"statement_descriptor\": \"Invoice 12\",     \"status\": \"processing\",     ... }`\n\n## Using PaymentMethods with OutboundPayments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can also use a `PaymentMethod` to send funds to an external bank account owned by a third party using `OutboundPayment` objects.\n\nHomebox wants to send funds to one of its connected account’s vendors on a recurring basis to pay for supplies. To do so, the platform needs to first get the customer ID using the `Customers` endpoint.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d description=\"Test Customer\"`\n\nThe response provides the customers for the associated connected account. Homebox identifies the correct customer and records their ID.\n\n`{   \"id\": \"{{CUSTOMER_ID}}\",   \"object\": \"customer\",   \"address\": null,   \"balance\": 0,   \"created\": 1642523420,   \"currency\": null,   \"default_source\": null,   \"delinquent\": false,   \"description\": \"Test Customer\",   \"discount\": null,   \"email\": null,   \"invoice_prefix\": \"96A50A92\",   \"invoice_settings\": {     \"custom_fields\": null,     \"default_payment_method\": null,     \"footer\": null   },   \"livemode\": false,   \"metadata\": {   },   \"name\": null,   \"next_invoice_sequence\": 1,   \"phone\": null,   \"preferred_locales\": [    ],   \"shipping\": null,   \"tax_exempt\": \"none\" }`\n\nHomebox then creates a `SetupIntent` using the ID. Because `OutboundPayments` are used for outbound money flows to third parties, Homebox makes sure to set `flow_directions` to `outbound` and doesn’t use `attach_to_self`, instead specifying a `customer`.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"flow_directions[]\"=outbound \\  -d \"payment_method_types[]\"=us_bank_account \\  -d \"payment_method_data[type]\"=us_bank_account \\  -d \"payment_method_data[us_bank_account][routing_number]\"=110000000 \\  -d \"payment_method_data[us_bank_account][account_number]\"=000123456789 \\  -d \"payment_method_data[us_bank_account][account_holder_type]\"=individual \\  -d \"payment_method_data[billing_details][name]\"=\"John doe\" \\  -d confirm=true`\n\nA successful call returns the following object to indicate the `PaymentMethod` is successfully attached to the customer.\n\n`{   \"id\": \"{{SETUP_INTENT_ID}}\",   \"object\": \"setup_intent\",   \"application\": \"{{APPLICATION_ID}}\",   \"cancellation_reason\": null,   \"client_secret\": \"{{SETUP_INTENT_SECRET}}\",   \"created\": 1642528487,   \"customer\": \"{{CUSTOMER_ID}}\",   \"description\": null,   \"flow_directions\": [     \"outbound\"   ],   \"last_setup_error\": null,   \"latest_attempt\": null,   \"livemode\": false,   \"mandate\": null,   \"metadata\": {   },   \"next_action\": null,   \"on_behalf_of\": null,   \"payment_method\": \"{{PAYMENT_METHOD_ID}}\",   \"payment_method_options\": {   },   \"payment_method_types\": [     \"us_bank_account\"   ],   \"single_use_mandate\": null,   \"status\": \"succeeded\",   \"usage\": \"off_session\" }`\n\n## Creating an OutboundPayment without a PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`PaymentMethods` aren’t required when sending or using `OutboundPayments` if you don’t have a need to store the recipient’s bank account, as in the case of one-off payments.\n\nHomebox needed to pay a vendor 50 USD to cover the cost of supplies. To pay the vendor, the platform calls `OutboundPayments` with the external bank account information.\n\n`curl https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"destination_payment_method_data[type]\"=us_bank_account \\  -d \"destination_payment_method_data[us_bank_account][routing_number]\"=110000000 \\  -d \"destination_payment_method_data[us_bank_account][account_number]\"=000123456789 \\  -d \"destination_payment_method_data[us_bank_account][account_holder_type]\"=individual \\  -d \"destination_payment_method_data[billing_details][name]\"=\"John Doe\" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d statement_descriptor=payment_1 \\  -d amount=5000 \\  -d currency=usd`\n\nThe successful call returns the following object:\n\n`{   \"id\": \"{{OUTBOUNDPAYMENT_ID}}\",   \"object\": \"treasury.outbound_payment\",   \"amount\": 5000,   \"cancelable\": true,   \"created\": 1643033124,   \"currency\": \"usd\",   \"customer\": null,   \"description\": null,   \"destination_payment_method\": null,   \"destination_payment_method_details\": {     \"billing_details\": {       \"address\": {         \"city\": null,         \"country\": null,         \"line1\": null,         \"line2\": null,         \"postal_code\": null,         \"state\": null       },       \"email\": null,       \"name\": \"John Doe\",       \"phone\": null     },     \"type\": \"us_bank_account\",     \"us_bank_account\": {       \"account_holder_type\": \"individual\",       \"bank_name\": \"STRIPE TEST BANK\",       \"fingerprint\": \"SzrMIps1gg91aVKG\",       \"last4\": \"6789\",       \"network\": \"ach\",       \"routing_number\": \"110000000\"     }   },   \"end_user_details\": {     \"present\": false,     \"ip_address\": null   },   \"expected_arrival_date\": 1643068800,   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/bot_test_xxx\",   \"livemode\": false,   \"metadata\": {   },   \"statement_descriptor\": \"payment_1\",   \"status\": \"processing\",   \"status_transitions\": {     \"canceled_at\": null,     \"failed_at\": null,     \"posted_at\": null,     \"processing_at\": 1643033124,     \"returned_at\": null   },   \"transaction\": \"{{TRANSACTION_ID}}\" }`",
  "title": "Using Treasury to move money | Stripe Documentation",
  "description": "Learn how to use SetupIntents, PaymentMethods, and verify bank accounts with Stripe Treasury.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/account-management/issuing-cards",
  "markdown": "# Working with Stripe Issuing cards\n\nAfter the `card_issuing` capability is active, the sellers and service providers that own your platform’s connected accounts can create cardholders and cards. You can issue cards only through the API.\n\nA [Cardholder object](https://docs.stripe.com/api/#issuing_cardholder_object) represents an individual or business entity that you can issue cards to. You can begin by creating a `Cardholder` with name, billing information, and whether they’re an `individual` or `company`.\n\n`curl https://api.stripe.com/v1/issuing/cardholders \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d name=\"Jenny Rosen\" \\   --data-urlencode email=\"jenny.rosen@example.com\" \\   --data-urlencode phone_number=\"+18008675309\" \\  -d status=active \\  -d type=individual \\  -d \"individual[first_name]\"=Jenny \\  -d \"individual[last_name]\"=Rosen \\  -d \"individual[dob][day]\"=1 \\  -d \"individual[dob][month]\"=11 \\  -d \"individual[dob][year]\"=1981 \\  -d \"billing[address][line1]\"=\"1234 Main Street\" \\  -d \"billing[address][city]\"=\"San Francisco\" \\  -d \"billing[address][state]\"=CA \\  -d \"billing[address][postal_code]\"=94111 \\  -d \"billing[address][country]\"=US`\n\nIf successful, the response returns the newly created `Cardholder` object.\n\nCreate a [Card](https://docs.stripe.com/api/#issuing_card_object) and assign it to both the `Cardholder` you just created and a financial account. To assign the cardholder and financial account, specify the cardholder ID in the `cardholder` parameter and the financial account ID in the `financial_account` parameter of the `/v1/issuing/cards` request.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d cardholder={{CARDHOLDER_ID}} \\   -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d currency=usd \\  -d type=virtual \\  -d status=active`\n\nIf successful, the response returns the newly created `Card` object.",
  "title": "Working with Stripe Issuing cards | Stripe Documentation",
  "description": "Learn how to integrate Stripe Issuing with Treasury.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/account-management/platform-financial-account",
  "markdown": "# Platform financial accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the financial account for your platform.\n\nAfter you’ve [gained API access](https://docs.stripe.com/treasury/access) to Stripe Treasury, we automatically provision your platform with two financial accounts, one for test mode and one for live mode.\n\nThe test mode platform financial account enables you to set up and test your integration without actually affecting either your platform account balance or the balance of your live mode platform financial account.\n\nThe live mode platform financial account is where you store your own funds as working capital for your Treasury program. The live mode platform financial account has its own routing number and account number and supports most of the same types of money movement as the financial accounts attached to your platform’s connected accounts.\n\n## Platform financial account differences![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe financial accounts (live mode and test mode) for your platform are essentially the same as the financial accounts attached to your platform’s connected accounts. You use the same API requests regardless of which financial account is involved; however, you don’t include a [Stripe-Account header](https://docs.stripe.com/connect/authentication#stripe-account-header) when making API calls against your platform financial account. The `Stripe-Account` header signals that a request is for the associated connected account’s financial account rather than your platform’s.\n\nThe following list itemizes the differences between platform financial accounts and financial accounts attached to connected accounts:\n\n*   You can’t attach Stripe Issuing cards to platform financial accounts.\n    *   You can attach Stripe Issuing cards to the financial accounts attached to connected accounts.\n*   You can’t transfer funds from your platform financial account balance directly to the account balance of a connected account.\n    *   You can transfer funds from your platform financial account balance directly to the balance of a financial account attached to a connected account.\n*   You can’t use the Stripe API to close a platform financial account.\n    *   Beta You can use `POST /v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}/close` to [close financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts#close-a-financialaccount) attached to connected accounts if you have access to the beta Closure API methods. The Closure API methods don’t provide the ability to close the platform financial account.\n*   You must use the Stripe Dashboard (rather than the API) to set the platform financial account as a `BankAccount` object that you can use for payouts from or top-ups to the platform payments balance.\n    *   See the [Payouts and top-ups](https://docs.stripe.com/treasury/moving-money/payouts#financial-accounts-as-external-accounts) guide for more information.\n*   You can’t accelerate payouts from the platform account balance to the platform financial account balance.\n\n## Retrieving platform financial account details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can find your platform financial account routing number, account number, and balance in the **Treasury balance** section under the **Balances** tab of your Stripe [Dashboard](https://dashboard.stripe.com/test/treasury). Use the API to view the other details of your platform financial account.\n\n![Treasury balance section of the Dashboard showing account number, routing number, and total amount of balance.](https://b.stripecdn.com/docs-statics-srv/assets/treasury-balance.1647f7e2fdd3492e4bdab81cfced4b8b.png)\n\nTreasury balance\n\nUse `GET /v1/treasury/financial_accounts` to list all the details of your platform financial accounts through the API. A `Stripe-Account` header isn’t included, signaling this request is for the platform financial account.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nIf successful, the response includes your platform financial account `id`. You can use the financial account ID to directly retrieve your platform financial account details using `GET /v1/treasury/financial_accounts/{{FINANCIALACCOUNT_ID}}`.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nThe `FinancialAccount` object displays the data that defines your financial account, including your balance and the balance of any pending transactions.\n\n`{   \"object\": \"treasury.financial_account\",   \"created\": 1612927106,   \"id\": \"fa_123\",   \"country\": \"US\",   \"supported_currencies\": [\"usd\"],   // Arrays of active, pending and restricted features summarize the status of all requested features   \"active_features\": [\"financial_addresses.aba\", \"deposit_insurance\"],   \"pending_features\": [\"inbound_transfers.ach\"],   \"restricted_features\": [\"intra_stripe_flows\", \"outbound_payments.ach\", \"outbound_payments.us_domestic_wire\"],`\n\n## Retrieving platform financial account features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `GET /v1/treasury/financial_accounts/{{FINANCIALACCOUNT_ID}}/features` to retrieve your platform’s financial account feature information.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n`/features \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nIf successful, the response itemizes the features assigned to your platform financial account.\n\n`{   \"object\": \"treasury.financial_account_features\",   \"card_issuing\": {     \"requested\": true,     \"status\": \"active\",     \"status_details\": []   },   \"deposit_insurance\": {     \"requested\": true,     \"status\": \"active\",`\n\n## Moving money between the Treasury financial accounts of the platform and its connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `OutboundPayments` over the `stripe` network to instantly move funds between a platform Treasury financial account and the Treasury financial accounts of connected accounts associated with the same platform. See [Creating an OutboundPayment to a financial account](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments#create-obp-for-fa) for more information.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Treasury account structure](https://docs.stripe.com/treasury/account-management/treasury-accounts-structure)\n*   [Working with connected accounts](https://docs.stripe.com/treasury/account-management/connected-accounts)\n*   [Working with financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts)\n*   [Working with Stripe Issuing cards](https://docs.stripe.com/treasury/account-management/issuing-cards)\n*   [Working with balances](https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions)\n*   [Moving money into Treasury financial accounts](https://docs.stripe.com/treasury/moving-money/moving-money-into-financial-accounts)\n*   [Moving money out of Treasury financial accounts](https://docs.stripe.com/treasury/moving-money/moving-money-out-of-financial-accounts)",
  "title": "Platform financial accounts | Stripe Documentation",
  "description": "Learn about the financial account for your platform.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/account-management/financial-accounts",
  "markdown": "# Working with Treasury financial accounts\n\n## Learn how to work with financial accounts in Treasury.\n\nWhen you enable Stripe Treasury on your platform, you can add `FinancialAccount` objects to your [platform architecture](https://docs.stripe.com/treasury/account-management/treasury-accounts-structure) to enable the efficient storing, sending, and receiving of funds. After you [gain API access to Treasury](https://docs.stripe.com/treasury/access), Stripe attaches a financial account to your platform account and enables you to provision financial accounts for eligible connected accounts on your platform.\n\nEach financial account has its own distinct [balance of funds](https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions), separate from the balance of the account it’s linked to. For example, the owner of a connected account on your platform might have a 100 USD connected account balance and a 200 USD financial account balance. In this scenario, the connected account owner has a sum of 300 USD spread between their financial account and connected account balances. These two balances remain separate, but the API provides the ability to move money from the connected account balance to the financial account balance.\n\nIn the Stripe API, `FinancialAccount` objects serve as the source and destination of money movement API requests. You request `Features` through the API to assign to `FinancialAccounts` that provide additional functionality for the financial accounts on your platform. For example, to enable payment card features on a specific financial account, you send an API request with the `FinancialAccount` ID for the `card_issuing` feature. See [Financial account features](https://docs.stripe.com/treasury/account-management/financial-account-features) for more information on `Feature` objects. See the [Available features](https://docs.stripe.com/treasury/account-management/financial-account-features#available-features) section within that guide to check required connected account capabilities for each `Feature`.\n\nBefore you create financial accounts in live mode for your Treasury integration, we recommend you first create test financial accounts in [test mode](https://docs.stripe.com/test-mode \"test mode\"). Test mode financial accounts can’t receive or send real money, can’t be used in live mode, and don’t generate a live account with real routing and account information, but are otherwise identical in configuration and functionality.\n\n## Create a FinancialAccount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `POST /v1/treasury/financial_accounts` to create `FinancialAccounts`. Include the connected account ID as the value of the `Stripe-Account` header of the call to associate the `FinancialAccount` with a connected account.\n\nConnected accounts can have multiple financial accounts associated with them through providing the same connected account ID as the value of the `Stripe-Account` header. By default, you can associate a maximum of two financial accounts with a single connected account (closed financial accounts don’t contribute to the limit). If you need a higher account threshold, contact [treasury-support@stripe.com](mailto:treasury-support@stripe.com).\n\nThe following JSON defines the `FinancialAccount` object structure:\n\n``{   \"object\": \"treasury.financial_account\",   \"created\": 1612927106,   \"id\": \"fa_123\",   \"country\": \"US\",   \"supported_currencies\": [\"usd\"],   // Arrays of active, pending and restricted features summarize the status of all requested features   \"active_features\": [\"financial_addresses.aba\", \"deposit_insurance\"],   \"pending_features\": [\"inbound_transfers.ach\"],   \"restricted_features\": [\"intra_stripe_flows\", \"outbound_payments.ach\", \"outbound_payments.us_domestic_wire\"],   \"balance\": {     \"cash\": {\"usd\": 9000},     \"inbound_pending\": {\"usd\": 0},     \"outbound_pending\": {\"usd\": 1000}   },   // The FinancialAccount gains a FinancialAddress once the `financial_addresses.aba` feature is active. For more information, see \"Activating features\"   \"financial_addresses\": [     {       \"type\": \"aba\",       \"supported_networks\": [\"ach\", \"domestic_wire_us\"],       \"aba\": {         \"account_number_last4\": \"7890\",         // Use the expand[] parameter to view the `account_number` field hidden by default         \"account_number\": \"1234567890\",         \"routing_number\": \"000000001\",         \"bank_name\": \"Goldman Sachs\"       }     }   ],   \"livemode\": true,   // Financial accounts begin in the \"open\" state, but can be closed   // `status_details.closed` is populated once a financial account is closed   \"status\": \"open\",   \"status_details\": {     \"closed\": {       // List of one or more reasons why the FinancialAccount was closed:       // - account_rejected       // - closed_by_platform       // - other       \"reasons\": [],     }   },   // User-defined metadata   \"metadata\": {},   \"nickname\": {},   // Restrictions that the platform can apply to the FinancialAccount   \"platform_restrictions\": {     \"inbound_flows\": \"unrestricted\",     \"outbound_flows\": \"restricted\"   }, }``\n\nTypically, you also request [financial account features](https://docs.stripe.com/treasury/account-management/financial-account-features) when you make the API request to create the account. Regardless of the `Features` you request, the connected account must have the `treasury` capability enabled. If you’re unsure if the connected account has the capability, use `GET /v1/accounts/{{CONNECTED_ACCOUNT_ID}}` to check. The account’s `capabilities` hash must have a `treasury` value of `active`.\n\n`…   \"capabilities\": {     \"card_issuing\": \"active\",     \"card_payments\": \"active\",     \"transfers\": \"active\",     \"treasury\": \"active\",     \"us_bank_account_ach_payments\": \"active\"   }, …`\n\nIf you want to issue cards attached to the financial account balance, your platform’s connected accounts must also have the Issuing (`card_issuing`) capability enabled. The connected account must have this capability before you can request the `card_issuing` feature for its financial account. If the connected account doesn’t have the capability, attempting to create a `FinancialAccount` with a request for the `card_issuing` feature results in an error.\n\nYou can set the `nickname` field of a `FinancialAccount` object to designate the financial account with a custom name. You can use nicknames to create unique identifiers, which you can use when working with multiple financial accounts under a single connected account. For nicknames to be valid, they must:\n\n*   Be unique for each financial account under a given connected account\n*   Be a non-blank string\n*   Contain less than 250 characters\n\nIf you don’t provide a nickname upon account creation, the nickname field will be empty and will return `null`. You can [update](https://docs.stripe.com/treasury/account-management/financial-accounts#update-a-financialaccount) nicknames after creating a `FinancialAccount`.\n\nThe following request creates a financial account assigned to the connected account with the ID assigned in the `Stripe-Account` header.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"supported_currencies[]\"=usd \\  -d nickname={{OPTIONAL_NICKNAME}} \\   -d \"features[card_issuing][requested]\"=true \\  -d \"features[deposit_insurance][requested]\"=true \\  -d \"features[financial_addresses][aba][requested]\"=true \\  -d \"features[inbound_transfers][ach][requested]\"=true \\  -d \"features[intra_stripe_flows][requested]\"=true \\  -d \"features[outbound_payments][ach][requested]\"=true \\  -d \"features[outbound_payments][us_domestic_wire][requested]\"=true \\  -d \"features[outbound_transfers][ach][requested]\"=true \\  -d \"features[outbound_transfers][us_domestic_wire][requested]\"=true`\n\nThe response is a `FinancialAccount` object to confirm financial account creation.\n\n`{   \"object\": \"treasury.financial_account\",   \"created\": 1612927106,   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"country\": \"US\",   \"supported_currencies\": [\"usd\"],   \"active_features\": [     \"card_issuing\",   ],   // Features that require activation enter a pending state before activating`\n\n## Update a FinancialAccount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `POST /v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}` to update the `FinancialAccount` with the associated ID. Include the connected account ID as the `Stripe-Account` header value. The following example updates the [metadata](https://docs.stripe.com/api/metadata) of the FinancialAccount.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"metadata[key]\"=value`\n\n## Retrieve a FinancialAccount and account number![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `GET /v1/treasury/financial_accounts/{{FINANCIALACCOUNT_ID}}` to retrieve the `FinancialAccount` with the associated ID. Include the connected account ID as the `Stripe-Account` header value.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nBy default, the account number for a financial account isn’t included in the response. To retrieve the account number, include the `financial_addresses.aba.account_number` field in the `expand` array.\n\n`curl -G https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"expand[]\"=\"financial_addresses.aba.account_number\"`\n\nIf successful, the response returns the `FinancialAccount` object with or without the account number depending on the inclusion of the `expand` array.\n\n`{   \"id\": {{FINANCIAL_ACCOUNT_ID}},   ...   \"financial_addresses\": [     {       \"aba\": {         \"account_holder_name\": \"jenny\",         \"account_number\": \"4242424242420239\",         \"account_number_last4\": \"0239\",         \"bank_name\": \"Stripe Test Bank\",         \"routing_number\": \"000000001\"       },       ...     }   ],   ... }`\n\nFor more information on the `expand` parameter, see [expanding responses](https://docs.stripe.com/expand).\n\n### Feature summary![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `FinancialAccount` object contains a summary of the state of all its `Features` in three arrays - `active_features`, `pending_features`, and `restricted_features`.\n\n`{   \"object\": \"treasury.financial_account\",   \"id\": \"fa_987\",   \"status\": \"open\",   ...   \"active_features\": [\"card_issuing\"],   \"pending_features\": [\"financial_addresses.aba\"],   \"restricted_features\": [\"outbound_transfers.ach\"], }`\n\nThese arrays provide a convenient way to see:\n\n*   Inactive features (included in `pending_features` or `restricted_features`)\n*   Active features (included in `active_features`)\n*   Restricted features that require action (included in `restricted_features`)\n\nSee [Financial account features](https://docs.stripe.com/treasury/account-management/financial-account-features) for more information.\n\n## Close a FinancialAccount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can permanently close a financial account if it meets the following conditions:\n\n*   Has a zero balance.\n*   There are no pending inbound transfers.\n*   All attached Issuing cards are canceled.\n\n#### Warning\n\nYou can’t reopen financial accounts after you’ve closed them.\n\nTo close a financial account, contact [treasury-support@stripe.com](mailto:treasury-support@stripe.com) and provide the `FinancialAccount` ID you want to close and the reason for the closure. You must provide your users with account closure notices, as detailed in the Treasury compliance guidelines.\n\nClosing a financial account has no impact on data retention for associated objects, such as `Transactions`.\n\n## FinancialAccount closure using the API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use `POST/v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}/close` to close the financial account with the associated ID. Include the associated connected account ID as a header value.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}/close \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\" \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\"`\n\nThe response is the `FinancialAccount` object with a `status` of `closed` to confirm the action.\n\n`{   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"object\": \"treasury.financial_account\",   \"status\": \"closed\",   \"status_details\": {     \"closed\": {       \"reasons\": [\"closed_by_platform\"]     }   },   \"active_features\": [],   \"pending_features\": [],   \"restricted_features\": [\"financial_addresses.aba\"],   ... }`\n\n### Handling transactions on closed accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn rare circumstances, financial accounts might receive credits or debits on closed accounts that Stripe can’t return automatically. As a platform owner, you’re responsible for negative balances incurred after account closure. Stripe support works with you to return any remaining funds owed to the seller or service provider and to remediate closed accounts with a negative balance.\n\n## Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create financial accounts before fulfilling onboarding requirements. In this case, the financial account opens asynchronously and then triggers a `treasury.financial_account.features_status_updated` [webhook](https://docs.stripe.com/webhooks) with an updated view on any features still restricted due to outstanding onboarding requirements.\n\n*   `account.updated`\n    *   When requesting new Features, the platform might get an `account.updated` webhook prompting that the requirements hash has changed and some new fields are now in `pending_verification`.\n*   `treasury.financial_account.created`\n    *   Triggered whenever a new FinancialAccount is created.\n*   `treasury.financial_account.closed`\n    *   Notifies when the status of the top-level FinancialAccount changes to closed.\n*   `treasury.financial_account.features_status_updated`\n    *   Indicates that one or more Features have changed status. This is reflected in changes to the `active_features, pending_features` or `restricted_features` arrays.",
  "title": "Working with Treasury financial accounts | Stripe Documentation",
  "description": "Learn how to work with financial accounts in Treasury.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/account-management/financial-account-features",
  "markdown": "# Financial account features | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the features available for financial accounts.\n\nYou add features to [financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts) to provide the functionality that enables you to move money between accounts, attach payment cards, and more. You typically assign the `Feature` objects you want when creating `FinancialAccount` objects, but you can add or remove them at any time. Some `Features` require that the connected account associated with the financial account have particular capabilities active. For example, a connected account must have the `card_issuing` capability active before you can request the `card_issuing` feature on the financial account attached to that connected account.\n\n## Available features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following table lists the available `Features` for a `FinancialAccount` and the capabilities the associated connected account must have active to add them.\n\n#### Note\n\nYou must request or have the following capabilities active before you can request the `treasury` capability for connected accounts:\n\n*   `transfers`\n*   `card_payments`\n\n| Feature | Description | Required capabilities |\n| --- | --- | --- |\n| `card_issuing` | Allows the creation of a [Card object](https://docs.stripe.com/api/#issuing_card_object) associated with this financial account. | `card_issuing` |\n| `deposit_insurance` | Requests FDIC insurance eligibility for the financial account. | `treasury` |\n| `financial_addresses.aba` | Triggers the creation of a `FinancialAddress` object of type ABA associated with this financial account. When this feature is active, the address can receive money over ACH or wire, and external bank accounts can debit it. | `treasury` |\n| `inbound_transfers.ach` | Allows creation of `InboundTransfer` objects to fund the financial account by debiting an external US bank account. | `treasury`, `us_bank_account_ach_payments` |\n| `intra_stripe_flows` | Enables this financial account to send money to or receive money from other financial accounts over the `stripe` network. Both financial accounts (originator and recipient) need this feature enabled for `stripe` network outbound payments to work. | `treasury` |\n| `outbound_payments.ach` | Allows this financial account to send ACH transfers using the `OutboundPayment` objects of the Stripe API. | `treasury`, `us_bank_account_ach_payments` |\n| `outbound_payments.us_domestic_wire` | Allows this financial account to send US domestic wire transfers using `OutboundPayment` objects of the Stripe API. | `treasury` |\n| `outbound_transfers.ach` | Allows this financial account to send ACH transfers using `OutboundTransfer` objects of the Stripe API. | `treasury`, `us_bank_account_ach_payments` |\n| `outbound_transfers.us_domestic_wire` | Allows this financial account to send US domestic wire transfers using `OutboundTransfer` objects of the Stripe API. | `treasury` |\n\n### Same-day ACH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Beta\n\nSame-day ACH is currently in beta with limited availability, subject to Stripe review and approval. To request access, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com).\n\nIf you don’t have access, API calls that include same-day ACH features or parameters return an error.\n\nThe following features enable financial accounts to use same-day ACH functionality. You must request the corresponding `*.ach` feature on a financial account to use it. For example, to enable a financial account to send a same-day [OutboundPayment](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments), you must request `outbound_payments.ach` and `outbound_payments.ach.same_day` on that financial account:\n\n|     |     |     |\n| --- | --- | --- |\n| Feature | Description | Required capabilities |\n| `outbound_payments.ach.same_day` | Allows this financial account to send ACH transfers using `OutboundPayment` objects that arrive in the destination account within the same business day. | `treasury`, `us_bank_account_ach_payments` |\n| `outbound_transfers.ach.same_day` | Allows this financial account to send ACH transfers using `OutboundTransfer` objects that arrive in the destination account within the same business day. | `treasury`, `us_bank_account_ach_payments` |\n| `inbound_payments.ach.same_day` | Allows creation of `InboundTransfer` objects to fund the financial account within the same business day. | `treasury`, `us_bank_account_ach_payments` |\n\n## Requesting features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTypically, you request features on your Treasury financial account when you [create the financial account](https://docs.stripe.com/treasury/account-management/financial-accounts#create-a-financialaccount). The following request creates a financial account and requests features in the same call.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"supported_currencies[]\"=usd \\  -d \"features[card_issuing][requested]\"=true \\  -d \"features[financial_addresses][aba][requested]\"=true`\n\nIf you’re working with existing financial accounts, use `POST /v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}/features` to request additional features.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n`/features \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"card_issuing[requested]\"=true \\  -d \"deposit_insurance[requested]\"=true \\  -d \"financial_addresses[aba][requested]\"=true \\  -d \"inbound_transfers[ach][requested]\"=true \\  -d \"intra_stripe_flows[requested]\"=true \\  -d \"outbound_payments[ach][requested]\"=true \\  -d \"outbound_payments[us_domestic_wire][requested]\"=true \\  -d \"outbound_transfers[ach][requested]\"=true \\  -d \"outbound_transfers[us_domestic_wire][requested]\"=true`\n\n### Feature activation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you request a feature and satisfy all verification requirements to onboard the connected account to your platform, the feature activates. For some features, activation can be instantaneous (for example, `card_issuing`). Other features, like `financial_addresses.aba`, [activate asynchronously](#webhooks). The following API call creates a financial account and requests the ‘financial\\_addresses.aba’ and ‘card\\_issuing’ features.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"supported_currencies[]\"=usd \\  -d \"features[financial_addresses][aba][requested]\"=true \\  -d \"features[card_issuing][requested]\"=true`\n\nWhen you request features on financial account creation, the response indicates their status in the `active_features`, `pending_features`, and `restricted_features` properties. For more information, see the [Retrieving features](#retrieving-features) section.\n\n`{   \"object\": \"treasury.financial_account\",   \"created\": 1612927106,   \"id\": \"fa_123\",   \"country\": \"US\",   \"supported_currencies\": [\"usd\"],   \"active_features\": [\"card_issuing\"],   \"pending_features\": [\"financial_addresses.aba\"],   \"restricted_features\": [],   // No FinancialAddress added as the financial_addresses.aba feature is not yet active   \"financial_addresses\": [],   \"livemode\": true,   \"status\": \"open\",   ... }`\n\nYou can use `GET /v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}/features` to retrieve the features for the financial account created in the previous example.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n`/features \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nThe response shows `financial_addresses.aba` with a `status` of `pending` and `status_details` with a `code` of `activating`.\n\n`{   \"object\": \"treasury.financial_account_features\",   \"financial_addresses\": {     \"aba\": {       \"requested\": true,       \"status\": \"pending\",       \"status_details\": [         {           \"code\": \"activating\"         }       ]     }   },   \"card_issuing\": {     \"requested\": true,     \"status\": \"active\",     \"status_details\": []   },   ... }`\n\nA feature can remain in this state for up to 30 minutes while Stripe communicates with external systems. When the `financial_addresses.aba` feature activates, the financial account receives a `FinancialAddress` object and triggers a `treasury.financial_account.features_status_updated` [webhook](https://docs.stripe.com/webhooks).\n\nThe following request retrieves the `FinancialAccount` details with the `financial_addresses.aba` details expanded.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"expand[]\"=\"financial_addresses.aba.account_number\" \\  -d \"supported_currencies[]\"=usd`\n\nThe response provides the account details, including the complete financial address information.\n\n`{   \"object\": \"treasury.financial_account\",   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"country\": \"US\",   \"supported_currencies\": [\"usd\"],   \"active_features\": [\"card_issuing\", \"financial_addresses.aba\"],   \"pending_features\": [],   \"restricted_features\": [],   \"financial_addresses\": [     {       \"type\": \"aba\",       \"supported_networks\": [\"ach\", \"domestic_wire_us\"],       \"aba\": {         \"account_number_last4\": \"7890\",         \"account_number\": \"1234567890\",         \"routing_number\": \"000000001\",         \"bank_name\": \"Goldman Sachs\"       }     }   ],   \"livemode\": true,   ... }`\n\nThe financial account can now receive credits or debits to this ABA financial address.\n\n## Removing features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo remove a feature, use `POST /v1/treasury/financial_accounts/{{FINANCIALACCOUNT_ID}}/features` and set the value of the feature to `false`.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n`/features \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"card_issuing[requested]\"=false`\n\nIf successful, you receive the [`Features` object](https://docs.stripe.com/api/treasury/financial_account_features) as a response with the feature you removed absent from the object.\n\n## Retrieving features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo retrieve the features of a financial account, use `GET /v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}/features`.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n`/features \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nThe JSON response provides the feature details defined by three properties:\n\n*   `requested`: Indicates whether the feature has been requested.\n*   `status`: Describes the current state of the feature: `active`, `pending`, or `restricted`.\n*   `status_details`: Array of hashes containing a code and resolution.\n\n`{   \"card_issuing\": {     \"requested\": true,     \"status\": \"active\",     \"status_details\": []   },   \"deposit_insurance\": {     \"requested\": true,     \"status\": \"restricted\",     \"status_details\": [       {         \"code\": \"requirements_past_due\",         \"resolution\": \"provide_information\"       }     ]   } }`\n\nThe following table identifies the possible combinations of `status` and `status_details`.\n\n| Status | Status details code | Status details resolution | Description |\n| --- | --- | --- | --- |\n| `pending` | `activating` |     | Stripe is currently activating the feature. |\n| `pending` | `requirements_pending_verification` |     | The requirements for the associated capability on the connected account have been submitted but haven’t completed verification. |\n| `restricted` | `requirements_past_due` | `provide_information` | The connected account has requirements that must be fulfilled before this feature can be enabled. |\n| `restricted` | `rejected_unsupported_business` | `contact_stripe` | The account is rejected because this type of business isn’t currently supported. For more information, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com). |\n| `restricted` | `rejected_other` | `contact_stripe` | The account is rejected for other reasons. For more information, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com). |\n| `restricted` | `restricted_by_platform` | `remove_restriction` | The platform has restricted this feature using the [`platform_restrictions`](https://docs.stripe.com/api/treasury/financial_accounts/object#financial_account_object-platform_restrictions) hash. |\n| `restricted` | `financial_account_closed` |     | This feature is unavailable because the financial account is closed. |\n| `restricted` | `restricted_other` | `contact_stripe` | This feature is restricted for other reasons. For more information, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com). |\n\n## Restricted features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can restrict money movement in financial accounts on your platform to not allow inbound flows (`inbound_flows`), outbound flows (`outbound_flows`), or both types of flows. To do so, use the [`platform_restrictions`](https://docs.stripe.com/api/treasury/financial_accounts/object#financial_account_object-platform_restrictions) hash. Restricting a flow impacts the financial account’s features that rely completely or partially on that flow. For example, to prevent money from moving out of a financial account, call `POST /v1/treasury/financial_accounts/{{FINANCIALACCOUNT_ID}}`.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"platform_restrictions[outbound_flows]\"=restricted`\n\nIf successful, the response returns the financial account object with the appropriate flow set as `restricted`.\n\n`{   \"object\": \"treasury.financial_account\",   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"status\": \"open\",   ...   \"platform_restrictions\": {     \"inbound_flows\": \"unrestricted\",     \"outbound_flows\": \"restricted\"   },   \"active_features\": [\"card_issuing\", \"deposit_insurance\", \"inbound_transfers.ach\"],   \"pending_features\": [],   \"restricted_features\": [\"financial_addresses.aba\", \"intra_stripe_flows\", \"outbound_payments.ach\", \"outbound_payments.us_domestic_wire\", \"outbound_transfers.ach\", \"outbound_transfers.us_domestic_wire\"] }`\n\nAs the previous response shows, restricting `outbound_flows` on the FinancialAccount adds `financial_addresses.aba`, `intra_stripe_flows`, and `inbound_transfers.ach` to the `restricted_features` array.\n\nFeatures in the `restricted_features` array can be fully or partially restricted. For example, `financial_addresses.aba` is part of the `restricted_features` array in the preceding response because restricting `outbound_flows` prevents debits to the financial address. However, that financial address can still receive ACH or wire transfers, because `inbound_flows` aren’t restricted.\n\nSimilarly, the `intra_stripe_flows` feature is restricted because the `outbound_flows` restriction prevents using this financial account as the source of an outbound payment to another financial account. However, the financial account can still be the destination of an outbound payment, so the feature isn’t completely restricted.\n\nThe following request retrieves feature details for a financial account with restricted flows.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n`/features \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nThe response provides the `Feature` object that includes `status_details` with a code of `restricted_by_platform`. The `restriction` property provides a reference to the `platform_restriction` applied.\n\n`{   \"object\": \"treasury.financial_account_features\",   \"financial_addresses\": {     \"aba\": {       \"requested\": true,       \"status\": \"restricted\",       \"status_details\": [         {           \"code\": \"restricted_by_platform\",           \"resolution\": \"remove_restriction\",           \"restriction\": \"inbound_flows\"         }       ]     }   },   ... }`\n\nThe following table outlines the impacts to features by `platform_restrictions`.\n\n#### Note\n\nRestricting inbound flows for the `financial_addresses.aba` feature doesn’t block inbound wires.\n\n| Feature | Impact of inbound\\_flows restriction | Impact of outbound\\_flows restriction |\n| --- | --- | --- |\n| `card_issuing` | N/A | N/A |\n| `deposit_insurance` | N/A | N/A |\n| `financial_addresses.aba` | Prevents the ABA financial address from receiving credits over ACH. | Prevents debits from the ABA financial address. |\n| `inbound_transfers.ach` | Disables the feature. | N/A |\n| `intra_stripe_flows` | Prevents the financial account from receiving outbound payments from other financial accounts. | Outbound payments can’t be made from this financial account to other financial accounts. |\n| `outbound_payments.ach` | N/A | Disables the feature. |\n| `outbound_payments.us_domestic_wire` | N/A | Disables the feature. |\n| `outbound_transfers.ach` | N/A | Disables the feature. |\n| `outbound_transfers.us_domestic_wire` | N/A | Disables the feature. |\n\n## Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo perform an action with [webhooks](https://docs.stripe.com/webhooks) when one or more features have transitioned to a certain status, compare your local state with the latest state of the feature. While the `previous_attributes` property of the `treasury.financial_account.features_status_updated` webhook also indicates which features have changed from one status to another, events can be duplicated or received out of order. For more information, see the [webhooks best practices](https://docs.stripe.com/webhooks#best-practices).\n\n*   `account.updated`\n    *   When requesting new features, the platform might get an `account.updated` webhook indicating that the `requirements` hash has changed with fields added to `pending_verification`.\n*   `treasury.financial_account.features_status_updated`\n    *   Indicates that one or more features have changed status, reflected in changes to the `active_features`, `pending_features` or `restricted_features` arrays.",
  "title": "Financial account features | Stripe Documentation",
  "description": "Learn about the features available for financial accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/moving-money/payouts",
  "markdown": "# Payouts and top-ups from Stripe Payments\n\n## Learn how to move money between Payments account balances and Treasury financial account balances.\n\nYou can move money from Stripe Payments to Stripe Treasury with [payouts](https://docs.stripe.com/treasury/moving-money/payouts#payouts), and from Stripe Treasury back to Stripe Payments with [top-ups](https://docs.stripe.com/treasury/moving-money/payouts#top-ups).\n\n## Financial accounts as external accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBefore you can send payouts to a Treasury financial account or receive top-ups from a Treasury financial account, you must set the financial account as an external account (BankAccount object) connected to the relevant Stripe account.\n\n*   Connected accounts: Use [POST /v1/accounts/{{CONNECTED\\_ACCOUNT\\_ID}}/external\\_accounts](https://docs.stripe.com/api/external_account_bank_accounts/create) with the financial account `routing_number` and `account_number` to create a `BankAccount` object you can use for payouts from a connected account\n*   Platform accounts: Use the Stripe Dashboard to create a `BankAccount` object you can use for payouts from, or top-ups to, your platform account\n\nIf there isn’t a default external account set for the `usd` currency, the financial account becomes the account’s default payout destination. If there is one, you can make the financial account the default for a connected account by setting [default\\_for\\_currency](https://docs.stripe.com/api/external_account_bank_accounts/create?lang=node#account_create_bank_account-default_for_currency) to true, as in the following example. If you have an automatic payout schedule enabled, that changes the target of the payouts to the financial account.\n\n`curl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}}/external_accounts \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"external_account[object]\"=\"bank_account\" \\   -d \"external_account[routing_number]\"=\"{{FINANCIAL_ACCOUNT_ROUTING_NUMBER}}\" \\   -d \"external_account[account_number]\"=\"{{FINANCIAL_ACCOUNT_ACCOUNT_NUMBER}}\" \\   -d \"external_account[country]\"=\"US\" \\   -d \"external_account[currency]\"=\"usd\" \\   -d \"default_for_currency\"=\"true\"`\n\nIf successful, the response returns the newly created `BankAccount` object.\n\n`{   \"id\": \"{{BANK_ACCOUNT_ID}}\",   \"object\": \"bank_account\",   \"account\": \"{{CONNECTED_ACCOUNT_ID}}\",   \"account_holder_name\": null,   \"account_holder_type\": null,   \"available_payout_methods\": [     \"standard\",     \"instant\"   ],   ...   \"default_for_currency\": true,   ... }`\n\n## Payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery Stripe platform account and connected account has an account balance (also called a payments balance or acquiring balance) that stores their money. Those funds aren’t directly accessible for use outside Stripe. Payouts move funds from an account balance to an externally accessible Treasury financial account balance or external bank account.\n\nYou can fund a Treasury financial account using automatic or manual payouts. For more information about Treasury accounts, see the [Stripe Treasury accounts structure guide](https://docs.stripe.com/treasury/account-management/treasury-accounts-structure).\n\nTo learn more about how payouts work with Connect, see the [Pay out money guide](https://docs.stripe.com/connect/add-and-pay-out-guide).\n\n## Automatic payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have connected accounts on your platform with an automatic payout schedule, you can change the target of direct payouts from their external bank accounts to their financial accounts. It requires the Treasury financial account to be set up as a `BankAccount` object; see the [Financial accounts as external accounts](#financial-accounts-as-external-accounts) section for more information.\n\n## Automatic payout speeds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, when using automatic payouts, funds from incoming card payments become available in the financial account balance two business days after the payment is received (T+2 schedule). Other payment types, such as ACH payments take longer.\n\nAfter a platform-level credit approval, you can enable T+1 faster payouts on a per-account basis for connected accounts. You can set the `interval` and `delay_days` parameters with `POST /v1/accounts` to accelerate payout schedules automatically (or you can manually trigger faster payouts as described below). Contact [treasury-support@stripe.com](mailto:treasury-support@stripe.com) if you want to request access to faster payouts (manual, automated, or both) for the connected accounts on your platform.\n\nT+1 faster payout schedules apply to all payment types, including card payments and ACH payments.\n\n### T+1 automatic payout schedule![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo have incoming payments automatically available in the financial account on the next business day, send a request with `interval` set to `daily` and `delay_days` set to `1`.\n\nUse [POST /v1/accounts/{{CONNECTED\\_ACCOUNT\\_ID}}](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-schedule) to update the payout schedule.\n\n`curl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"settings[payouts][schedule][interval]\"=daily \\  -d \"settings[payouts][schedule][delay_days]\"=1`\n\nThe response confirms the updated settings.\n\n`{   ...   \"settings\": {     \"payouts\": {       \"schedule\": {         \"interval\": \"daily\",         \"delay_days\": 1,       },     },     ...   }   ... }`\n\n## Manual payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use manual payouts to send specific portions of an account balance to that account’s Treasury financial account.\n\nUse [POST /v1/payouts](https://docs.stripe.com/api/payouts/create) with the bank account `id` associated with your financial account specified as the `destination` parameter value. If you don’t have a `BankAccount` object associated with your Treasury financial account yet, see the [Financial accounts as external accounts](#financial-accounts-as-external-accounts) section for more information.\n\n`curl https://api.stripe.com/v1/payouts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d method=standard \\  -d amount=1000 \\  -d currency=usd \\  -d destination={{BANK_ACCOUNT_ID}}`\n\nIf successful, the response returns the newly created [Payout object](https://docs.stripe.com/api/payouts/object).\n\n`{   \"id\": \"{{PAYOUT_ID}}\",   \"object\": \"payout\",   \"amount\": 1000,   ...   \"currency\": \"usd\",   \"destination\": \"{{BANK_ACCOUNT_ID}}\",   ...   \"method\": \"standard\",   ... }`\n\n## Manual payout speeds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTwo speed methods are available for manual payouts - `standard` and `instant`.\n\nManual payouts using `standard` speed can only draw on the `available` balance, and funds will generally arrive in the financial account in one business day (T+1 schedule).\n\nIf your platform is enabled for faster payouts, you can use `instant` manual payouts to move funds to a connected account’s financial account within an hour. You can request instant manual payouts at any time, including weekends and holidays, and instant manual payouts can draw on the `instant_available` balance of a Stripe account. If your platform is not enabled for faster payouts and you’re interested in adding the ability, contact [treasury-support@stripe.com](mailto:treasury-support@stripe.com) to request the feature.\n\nTo request an instant manual payout rather than a standard manual payout, change the `method` parameter in the payout request from `standard` to `instant`.\n\n## Testing payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can simulate a payout to a connected account financial account using test mode API keys.\n\nYou can only simulate a payout to a platform financial account using the Dashboard. While in test mode, click the **Add money** button in the upper right of the [**Balances**](https://dashboard.stripe.com/test/treasury) view of your Dashboard to open the **Add Money** dialog. Follow the prompts to simulate sending money from your platform account balance to your financial account balance.\n\n![Stripe Dashboard open to the Treasury balance page in test mode with the Add money button highlighted.](https://b.stripecdn.com/docs-statics-srv/assets/test-payout.31e4405710a6d92e3592f570ac86f0be.png)\n\nAdd money button\n\n## Top-ups![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs the owner of a [Connect](https://docs.stripe.com/connect \"Connect\") platform, you can use your Treasury financial account balance to top-up your platform account balance instead of using an external bank account. To top-up a platform account balance, you must set the platform’s Treasury financial account as the platform’s default external `BankAccount` using the Stripe Dashboard as described in the [Adding funds to your platform balance](https://docs.stripe.com/connect/top-ups) guide.\n\nUnlike true external bank accounts, new `BankAccount` objects with Treasury financial account details are automatically verified upon creation so they don’t require verification with microdeposits.\n\nAfter you set the Treasury financial account as your platform’s default external bank account, use `POST /v1/topups` to create the top-up.\n\n`curl https://api.stripe.com/v1/topups \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2000 \\  -d currency=usd \\  -d description=Top-up \\  -d statement_descriptor=Top-up`\n\nIf successful, the response returns the `Top-Up` object.\n\n`{   \"id\": \"{{TOP_UP_ID}}\",   \"object\": \"topup\",   \"amount\": 2000,   \"currency\": \"usd\",   \"description\": \"Top-up\",   ... }`\n\nLearn more about [adding funds to your platform account balance](https://docs.stripe.com/connect/top-ups) with Stripe Connect.",
  "title": "Payouts and top-ups from Stripe Payments | Stripe Documentation",
  "description": "Learn how to move money between Payments account balances and Treasury financial account balances.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/moving-money/working-with-bankaccount-objects",
  "markdown": "# Working with SetupIntents, PaymentMethods, and BankAccounts\n\n## Learn how to set up money movements in Treasury.\n\nYou can use [PaymentMethod](https://docs.stripe.com/payments/payment-methods#payment-method-object) objects to save account credentials for a US-based bank account for future use. After creating the `PaymentMethod`, you can use the same object repeatedly to move funds into and out of a financial account. Depending on your use case, you can attach the `PaymentMethod` to either a [Customer](https://docs.stripe.com/api/customers) object or the Stripe account.\n\n*   Attach the `PaymentMethod` to a `Customer` object if you intend to use the payment method for an outbound payment to a third party.\n*   Attach the `PaymentMethod` to a connected account or platform account if you intend to use the payment method for an inbound transfer or outbound transfer between an external account that belongs to the same business as the Stripe account.\n\n#### Note\n\nThe `Customer` object defines a third-party entity that represents the owner of an external bank account.\n\nIf you previously collected customer payment details with Stripe using the [BankAccounts](https://docs.stripe.com/ach-deprecated) object, you can substitute the `BankAccount` for a `PaymentMethod` in those requests. For `InboundTransfers`, the `BankAccount` `status` value in this case must be `verified`. We recommend using `PaymentMethods` where possible to get the full suite of features.\n\nIn some cases, banks on the receiving end of ACH money movements notify Stripe that account information (such as account number or routing number) has changed. If we receive such a notification for an account associated with a `PaymentMethod` or `BankAccount` object, we automatically update the object. See the [ACH Notification of Change handling](https://docs.stripe.com/treasury/moving-money/notification-of-change) guide for more information.\n\n## Create a SetupIntent to save `us_bank_account` details ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[SetupIntents](https://docs.stripe.com/payments/setup-intents) enable you to set up a payment method to use with money movement endpoints of the Stripe API. Use `SetupIntents` to save customer or account credentials as a payment method and optimize them for the objects you intend to use it with. For example, when setting up a US bank account, it’s necessary to verify the bank account if you intend to debit that external account with an inbound transfer. Stripe updates the `SetupIntent` object throughout the setup process.\n\nThe following example demonstrates using a `SetupIntent` with a bank account that allows for bidirectional fund transfers. For complete details on how to set up a payment method for creating payments and bank account verification, see the [Save details for future payments with ACH Direct Debit](https://docs.stripe.com/payments/ach-debit/set-up-payment) guide. When setting up payment methods for managing financial account funds with `SetupIntents`, the following fields are the most relevant:\n\n*   [flow\\_directions](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-flow_directions): this array defines the directionality of the flows for a payment method. Its possible values are `inbound` and `outbound`, denoting whether the payment method can move funds into, out of, or both into and out of a financial account. You can also configure an existing payment method to become bidirectional.\n*   [attach\\_to\\_self](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-attach_to_self): a Boolean flag to indicate whether you want to attach this payment method to the in-context `Account` object. Set this value to true to create an account-attached payment method for managing this account’s own money movement flows such as inbound transfers and outbound transfers.\n*   [customer](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-confirm): ID of the `Customer` object the payment method is attached to on successful setup. You can use `Customer`\\-attached payment methods with outbound payments to send money to third parties and customers. You can also use them with Stripe Payments `PaymentIntents` to receive money. You must set the `attach_to_self` attribute to false or leave it blank when creating a customer-attached payment method.\n\n### Permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo use a payment method for ‘inbound’ flow directions (such as `InboundTransfers`), you need [permission from the account holder](https://docs.stripe.com/payments/setup-intents#mandates). Creating this agreement (`Mandate` object) up front and associating it with the payment method allows you to charge the payment method later.\n\nAdd terms to your website or app that state how you plan to debit funds from external accounts, and let connected accounts opt in. At a minimum, make sure that your terms cover the following:\n\n*   Connected account permission for you to initiate a debit or a series of debits on their behalf\n*   The anticipated frequency of debits (one-time or recurring)\n*   How the debit amount is determined\n\nWhile you need a mandate to debit an external bank account in the US with inbound transfers, you don’t need it to send money to a bank account with outbound transfers or outbound payments.\n\n### Creating a SetupIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a `SetupIntent`, you must either use an existing payment method with the `payment_method` parameter, or provide new credentials using the inline `payment_method_data` parameter.\n\nUse `POST /v1/setup_intents` to create a `SetupIntent`.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d payment_method=  {{PAYMENT_METHOD_ID}}    `\n\nIf successful, the response returns the newly created `SetupIntent` object.\n\n`{   // ID of the Customer to attach the resulting PaymentMethod to   \"customer\": \"{{CUSTOMER_ID}}\",   \"attach_to_self\": false,   // Configure what direction of funds flows this PaymentMethod will support.   \"flow_directions\": [\"inbound\", \"outbound\"],  // US Bank Account credentials   \"payment_method_types\": [\"us_bank_account\"],   \"payment_method_data\": {     \"type\": \"us_bank_account\",`\n\nThe `SetupIntent` has one of the following statuses:\n\n| STATUS | DESCRIPTION | NEXT STEPS |\n| --- | --- | --- |\n| `succeeded` | The bank account has been instantly verified or verification isn’t necessary. | No action needed. |\n| `requires_action` | Further action needed to complete bank account verification. | See `next_action` for further setup steps. |\n\nAfter successfully confirming the `SetupIntent`, Stripe sends an email confirmation of the mandate and collected bank account details to your connected account. The default email references Stripe Payments, so if you use Stripe Treasury without Stripe Payments, you might want to turn off Stripe emails and send [custom messages](https://docs.stripe.com/payments/ach-debit#mandate-and-microdeposit-emails) instead.",
  "title": "Working with SetupIntents, PaymentMethods, and BankAccounts | Stripe Documentation",
  "description": "Learn how to set up money movements in Treasury.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions",
  "markdown": "# Working with balances and transactions\n\n## Learn about Treasury account balances and the effect transactions have on them.\n\n[Financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts) have their own balance separate from the balance of the account they’re attached to (platform account or connected account). `Balance` objects record the amount of funds in a financial account and their state of availability. `Transaction` and `TransactionEntry` objects debit or credit the funds in that balance.\n\n## Balances![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA financial account has a balance of funds. The sum total of the balance isn’t always available for spending, however, as it might include pending transactions into or out of the financial account. The financial account balance contains three properties that define the availability of its funds:\n\n*   `cash`—funds the user can spend right now.\n*   `inbound_pending`—funds not spendable yet, but that will become available at a later time. The `inbound_pending` property is reserved for future functionality and always has a value of 0.\n*   `outbound_pending`—funds in the account, but not spendable because they’re being held for pending outbound flows.\n\nUse `GET /v1/treasury/financial_accounts/{{FINANCIAL_ACCOUNT_ID}}` to retrieve the balance details of a financial account with the associated ID. Provide the `Stripe-Account` header if the financial account is attached to one of your connected accounts. If the financial account is attached to your platform account, don’t include the `Stripe-Account` header.\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response is a [`FinancialAccount`](https://docs.stripe.com/api/treasury/financial_accounts) object with a `balance` hash that details the funds and their availability.\n\n`{   \"object\": \"treasury.financial_account\",   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   ...   \"balance\": {     // $90 is currently available for use,     // with an additional $10 held in the outbound_pending sub-balance     \"cash\": {\"usd\": 9000},     \"inbound_pending\": {\"usd\": 0},     \"outbound_pending\": {\"usd\": 1000}   } }`\n\n### Negative balances and overdrafts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAs stated in our [custodial account agreement](https://stripe.com/treasury-connect-account/legal), Stripe doesn’t yet offer an overdraft feature on financial accounts. If your balance is insufficient to cover a transaction, Stripe rejects the transaction where possible. Otherwise, the account moves to a negative balance, which you then need to remediate.\n\nFor example, if your financial account balance is less than 100 USD, a 100 USD issuing authorization fails due to insufficient funds because Stripe recognizes the attempted overcharge. However, if your account balance is 50 USD and you pay for a 50 USD meal, then add a 15 USD tip after the initial authorization, the issuing authorization succeeds. Stripe authorizes the charge because the overcharge amount isn’t known. As a result, the 65 USD issuing [over capture](https://docs.stripe.com/issuing/purchases/transactions?issuing-capture-type=over_capture) succeeds and results in a negative 15 USD available balance. You must then add funds to your financial account to avoid subsequent transactions being denied with insufficient funds.\n\nIf a connected account on your platform has a financial account with a negative balance and doesn’t add funds to it, you’re responsible for covering the negative amount.\n\nStripe emails you a monthly reminder if your platform has any associated financial accounts that have had negative balances for more than 15 days. However, you need to regularly monitor account balances and take remediation steps as soon as possible when a balance goes negative. Don’t wait for the reminder email to address a negative balance.\n\n#### Note\n\nYou can have Treasury financial accounts cover negative payment balances for connected accounts using automatic debits. For more information, see the [Negative balances on accounts section](https://docs.stripe.com/connect/risk-management/best-practices#negative-balances-on-accounts) of the risk management best practices.\n\n## Transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll changes to a balance have a corresponding [Transaction](https://docs.stripe.com/api/treasury/transactions) object that details money movements. Transactions affect only one balance and are in only one currency (currently, Stripe Treasury supports only USD).\n\nEach transaction points to the balance-affecting money movement object, such as an [OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers), [ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits), or [ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits).\n\n### Transaction state machine![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Status | State applied | Description | Transitions to |\n| --- | --- | --- | --- |\n| `open` | initial | This is the initial state for all transactions. The transaction results in updates to the sub-balance amounts, but the current balance isn’t affected until the transaction posts. | `posted` or `void` |\n| `posted` | terminal | Funds have successfully entered or left the account. The current balance was affected. | N/A |\n| `void` | terminal | The transaction never impacted the balance. For example, a transaction enters this state if an outbound payment was initiated but then canceled before the funds left the account. | N/A |\n\nThe available `Transaction` endpoints enable you to retrieve specific transactions and list or filter transactions affecting a financial account. There are no webhooks available for transactions, but webhooks are available for the associated money movement objects (for example, `OutboundPayments`).\n\n## Retrieve a transaction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `GET/v1/treasury/transactions/{{TRANSACTION_ID}}` to retrieve the transaction with the associated ID.\n\n`curl https://api.stripe.com/v1/treasury/transactions/txn_123 \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response returns the `Transaction` object.\n\n`{   \"id\": \"{{TRANSACTION_ID}}\",   \"object\": \"treasury.transaction\",   \"created\": \"{{Timestamp}}\",   \"livemode\": false,   // The FinancialAccount this Transaction impacts   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // The flow responsible for this Transaction. Each Transaction is created   // synchronously (that is, in the same API request for initiated objects) with   // its flow.`\n\n### List Transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `GET /v1/treasury/transactions` to list transactions for a financial account. Set the required `financial_account` parameter in the body to the value of the financial account ID to retrieve transactions for. Include additional parameters to filter the results returned.\n\nIn addition to the [standard set of list parameters](https://docs.stripe.com/api/pagination), you can filter transactions by the following.\n\n*   `status`\n*   `flow`\n*   Either `created` or `posted_at`, but not both\n\n``{   // Standard list parameters   limit, starting_after, ending_before,   // Filter by FinancialAccount, required   financial_account: \"{{FINANCIAL_ACCOUNT_ID}}\"   // Filter by status   status: \"open\" | \"posted\" | \"void\",   // Filter by flow   flow: \"{{FLOW_OBJECT_ID}}\",   // Order the results by the created or posted_at timestamps, default is `created`.   // For order_by=posted_at, setting status='posted' is required   order_by: \"created\" | \"posted_at\",   // created can only be specified with order_by = 'created'   created: {gt, gte, lt, lte},   status_transitions: {     // status_transitions.posted_at can only be specified with order_by = 'posted_at' and status = 'posted'     posted_at: {gt, gte, lt, lte}   } }``\n\nThe following request retrieves the three most recent transactions created on the financial account that have a `status` of `posted`.\n\n`curl -G https://api.stripe.com/v1/treasury/transactions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d limit=3 \\  -d status=posted \\  -d order_by=created`\n\n### Webhooks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThere are no webhooks for transactions because the various money movements that initiate a transaction have their own webhooks.\n\n## Transaction entries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[TransactionEntry](https://docs.stripe.com/api/treasury/transaction_entries) objects are the most granular view of money movements that affect a financial account balance. A single flow of money comprises multiple individual money movements, each represented by a transaction. Transactions, in turn, are an aggregation of transaction entries. For example, when initiating an outbound payment of 10 USD at time T, funds are moved from the `cash` sub-balance to the `outbound_pending` sub-balance. The following `Transaction` object response demonstrates this initial event.\n\n`{   \"id\": \"{{TRANSACTION_ID}}\",   \"object\": \"treasury.transaction\",   \"created\": \"{{T}}\",   ...   \"flow\": \"{{OUTBOUND_PAYMENT_ID}}\",   \"flow_type\": \"outbound_payment\",   \"status\": \"open\",   \"amount\": -1000,   \"currency\": \"usd\",`\n\nAfter the outbound payment posts at time T+1, the funds are deducted from `outbound_pending` and a new transaction entry is added to the transaction. The following `Transaction` response demonstrates this progression.\n\n`{   \"id\": \"{{TRANSACTION_ID}}\",   \"object\": \"treasury.transaction\",   \"created\": \"{{T}}\",   ...   \"flow\": \"{{OUTBOUND_PAYMENT_ID}}\",   \"flow_type\": \"outbound_payment\",   \"status\": \"posted\",   \"amount\": -1000,   \"currency\": \"usd\",`\n\nAs the preceding responses show, a transaction can contain multiple transaction entries. The available `TransactionEntry` endpoints enable you to retrieve specific transaction entries and list or filter them for a particular transaction.\n\nA `Transaction` in the `void` status won’t have any new transaction entries added to it. A `Transaction` in the `posted` status where all `balance_impact` is to the `cash` sub-balance won’t have any new transaction entries added to it, either.\n\n### Retrieve transaction entries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `GET /v1/treasury/transaction_entries/{{TRANSACTIONENTRY_ID}}` to retrieve details for the transaction entry with the associated ID.\n\n`curl https://api.stripe.com/v1/treasury/transaction_entries/{{TRANSACTION_ENTRY_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response returns a `TransactionEntry` object with the following form.\n\n`{   \"id\": \"{{TRANSACTION_ENTRY_ID}}\",   \"object\": \"treasury.transaction_entry\",   \"created\": \"{{Timestamp}}\",   \"livemode\": false,   // The FinancialAccount this transaction entry impacts.   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // The transaction that this transaction entry belongs to.   \"transaction\": \"{{TRANSACTION_ID}}\",   // The flow responsible for this transaction entry.`\n\n### List TransactionEntries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `GET /v1/treasury/transaction_entries` to list the transaction entries for a financial account. Set the required `financial_account` parameter in the body to the value of the financial account ID to retrieve transaction entries for. Include additional parameters if you want to filter the list.\n\nIn addition to the [standard set of list parameters](https://docs.stripe.com/api/pagination), you can filter transaction entries by:\n\n*   `transaction`\n*   Either `created` or `effective_at`, but not both\n\n``{   // Standard list parameters   limit, starting_after, ending_before,   // Filter by FinancialAccount, required   financial_account: \"fa_123\"   // Filter by transaction   transaction: 'trxn_123',   // Order the results by the created or effective_at timestamps, default is `created`.   order_by: \"created\" | \"effective_at\",   // created can only be specified with order_by = 'created'   created: {gt, gte, lt, lte},   // effective_at can only be specified with order_by = 'effective_at'   effective_at: {gt, gte, lt, lte}, }``\n\nThe following request retrieves the transaction entries created before `{{Timestamp}}` and orders them by `created` date.\n\n`curl -G https://api.stripe.com/v1/treasury/transaction_entries \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d order_by=created \\  -d \"created[lt]\"=1234567890`\n\n### Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are no webhooks for transaction entries because the various money movements that initiate a transaction entry have their own webhooks.",
  "title": "Working with balances and transactions | Stripe Documentation",
  "description": "Learn about Treasury account balances and the effect transactions have on them.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/moving-money/moving-money-out-of-financial-accounts",
  "markdown": "# Moving money out of Treasury financial accounts\n\n## Learn the requests available to move money out of financial accounts.\n\nYou can use a number of methods to move funds from a Treasury financial account to another account (either an external account or another Treasury financial account):\n\n*   Originate an `OutboundPayment` to move money to a third party’s external account or financial account through ACH, wire transfer, or the Stripe network.\n*   Originate an `OutboundTransfer` to move money to an external account belonging to the same connected account through ACH or wire transfer.\n*   Initiate a card transaction through Stripe Issuing to send money using card networks.\n*   Receive a `ReceivedDebit` (initiated by the owner of an external account) to pull money from the financial account through ACH.\n\n### Money movement with PaymentMethods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWithin Stripe, you can save payment method information using a [PaymentMethod](https://docs.stripe.com/api/payment_methods) object. You might use `PaymentMethods` to save your vendors’ account data so you don’t have to re-enter and collect their information for every payment you make to them.\n\nYou can attach `PaymentMethods` containing bank account information to a customer (for sending money to a third party) or to a Stripe account (for sending money to a company’s own external bank account). In both cases, you create the `PaymentMethod` using [SetupIntent](https://docs.stripe.com/payments/setup-intents) endpoints.\n\nThe type of Treasury requests you make with a `PaymentMethod` depends on how they’re attached:\n\n*   For customer-attached, use `PaymentIntent` and `OutboundPayment` requests.\n*   For account-attached, use `InboundTransfer` and `OutboundTransfer` requests.\n\nSee [Working with SetupIntents, PaymentMethods, and BankAccounts](https://docs.stripe.com/treasury/moving-money/working-with-bankaccount-objects) for more information.\n\n## Handling returned funds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe destination for `OutboundTransfers` and `OutboundPayments` can reject the relative flow. For example, the destination address might not exist and the `OutboundTransfer` or `OutboundPayment` fails. This can occur over the `ach` and `us_domestic_wire` networks. `CreditReversals` can also return `OutboundPayments` over the `stripe` network. In the case of returned funds, the `OutboundTransfer` or `OutboundPayment` transitions to the `returned` status and Stripe creates a transaction to return the funds to the source financial account. Stripe also triggers a `treasury.outbound_transfer.returned` or `treasury.outbound_payment.returned` webhook.\n\n## Tracking outbound funds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou might need to track the status of an outbound transaction initiated from a financial account for several reasons. Examples of such situations include a payment that has been sent but not yet received, or a payment that appears to be arriving late. To help you in tracking `OutboundTransfers` and `OutboundPayments`, we provide network-specific tracking IDs for you to work with banks to track their status.\n\n### Tracking an ACH transaction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re sending funds over ACH rails, we recommend allowing up to three business days for the transaction to process as per the standard timeline. Anytime after the transaction is submitted to our partner bank, you can use the ACH trace ID to track the payment status, found in the `tracking_details[ach][trace_id]` field of the `OutboundTransfer` or `OutboundPayment` object. You can share this trace ID with the receiving bank to help identify potential issues.\n\n### Tracking a wire transaction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor domestic wire transfers, you can find the IMAD and OMAD fields in the `tracking_details[us_domestic_wire][imad]` and `tracking_details[us_domestic_wire][omad]` fields, respectively. You can share these IDs with the receiving bank for help tracking the status of a wire transfer.\n\nThe `tracking_details` field can populate anytime after the transaction is submitted to our partner bank and is no longer cancelable. Stripe also fires the `treasury.outbound_payment.tracking_details_updated` or `treasury.outbound_transfers.tracking_details_updated` webhook when there’s an update to the `tracking_details` field.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Moving money with Treasury using OutboundPayment objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments)\n*   [Moving money with Treasury using OutboundTransfer objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-transfers)\n*   [Moving money with Treasury using ReceivedDebit objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/received-debits)\n*   [Moving money with Treasury using DebitReversal objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/debit-reversals)\n*   [Working with Stripe Issuing cards](https://docs.stripe.com/treasury/account-management/issuing-cards)",
  "title": "Moving money out of Treasury financial accounts | Stripe Documentation",
  "description": "Learn the requests available to move money out of financial accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/money-movement/timelines",
  "markdown": "# Money movement timelines | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the timelines for various types of money movement in Treasury.\n\nStripe Treasury integrates with banking partners and payment networks, which have varying processing and cutoff times.\n\n## OutboundPayment and OutboundTransfer transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Network | Behavior |\n| --- | --- |\n| `ach` | `OutboundPayment` and `OutboundTransfer` requests processed before the cutoff time are submitted to our banking partner on the same day. These transfers are expected to arrive at the receiving bank within the next one to two business days. Same-day ACH transactions arrive at the receiving bank the same business day if the request is received before the cutoff time. |\n| `us_domestic_wire` | `OutboundPayment` and `OutboundTransfer` requests processed before the cutoff are expected to arrive at the receiving bank on the same business day. |\n| `stripe` | `OutboundPayment` requests using the `stripe` network post immediately and arrive at the receiving financial account within minutes, both during and outside of business hours. `OutboundTransfer` requests aren’t supported for `stripe` network transactions. |\n\n### Evolve Bank & Trust ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   `ach` cutoff:\n    *   Default Speed: 6pm central time (CST/CDT)\n    *   Same Day speed: 11am central time (CST/CDT)\n*   `us_domestic_wire` cutoff: 3pm central time (CST/CDT)\n\n| Submission date | Arrival date (by end of business day) |     |\n| --- | --- | --- |\n|     | ACH | Wire |\n| Monday | Tuesday | Monday |\n| Tuesday | Wednesday | Tuesday |\n| Wednesday | Thursday | Wednesday |\n| Thursday | Friday | Thursday |\n| Friday | Monday | Friday |\n| Saturday | Tuesday | Monday |\n| Sunday | Tuesday | Monday |\n\nYou can programmatically access the `expected_arrival_date` attribute on [OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/object#outbound_payment_object-expected_arrival_date) or [OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/object#outbound_transfer_object-expected_arrival_date) to reference when Stripe expects the funds to arrive at their destination.\n\nRequests, including default speed requests, that are received after the cutoff time are processed the following business day. Same-day ACH requests received after the cutoff time arrive by the end of the following business day.\n\n## InboundTransfer transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Network | Behavior |\n| --- | --- |\n| `ach` | `InboundTransfer` If using the default speed, `InboundTransfer` requests processed before the cutoff time are submitted to our banking partner on the same business day. Otherwise, they’re submitted on the following business day. Transfers are expected to arrive in the Treasury financial account on the morning of the fourth business day after submission to the banking partner, if no returns are received during that time. |\n\n### Evolve Bank & Trust ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Submission date, before 6pm central time (CST/CDT) | Available at approximately 10am central time (CST/CDT) |\n| --- | --- |\n| Monday | Friday |\n| Tuesday | Monday |\n| Wednesday | Tuesday |\n| Thursday | Wednesday |\n| Friday | Thursday |\n| Saturday | Friday |\n| Sunday | Friday |\n\n## ReceivedCredit and ReceivedDebit transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCredits and debits initiated from outside Stripe and received on a financial account are processed as soon as Stripe receives notification of the transfer. The time it takes to complete the transfer depends on the originating institution.\n\n| Network | Behavior |\n| --- | --- |\n| `ach` | Available same day or next business day, depending on originating institution. |\n| `us_domestic_wire` | Depends on originating institution. |\n| `stripe` | Transfers using the `stripe` network post immediately and are expected to arrive at the receiving financial account within minutes. |\n| `card` | Card transactions are typically captured within 24 hours of authorization approval; however, some companies can capture funds up to 30 days after authorization. See [Issuing transactions](https://docs.stripe.com/issuing/purchases/transactions). |\n\n## Automatic payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll platforms using Treasury have access to standard automatic payouts, which move money from Stripe Payments to a Treasury financial account on a T+2 or slower schedule from the time of transaction (T+2 for card payments, slower for ACH).\n\nYou can request a platform risk review to access faster payouts; upon approval, your platform can use T+1 and T+0 automatic payouts for connected accounts. T+1 and T+0 faster payout schedules apply to all payment types, including both card payments and ACH payments, and the timelines start when the transaction occurs (faster payouts eliminate the need to wait for standard payments fund settlement times).\n\nTo request access to faster payouts for your platform, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com).\n\nFor more details, see the [Automatic payouts guide](https://docs.stripe.com/treasury/moving-money/payouts#automatic-payouts).\n\n## Manual payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms using Treasury also have access to standard manual payouts, which move funds in one business day (T+1 schedule) but can only draw on an account’s `available` payments balance. In other words, you must wait for funds from a payment to settle in the payments balance before initiating a standard manual payout to a Treasury financial account.\n\nPlatforms granted access to faster payouts also have access to instant manual payouts. Instant manual payouts move funds to a connected account’s financial account within an hour (T+0 schedule) and are available any time, including nights, weekends, and holidays. Instant manual payouts are drawn on a connected account’s `instant_available` balance rather than being limited to the `available` balance.\n\nFor more details, see the [Manual payouts guide](https://docs.stripe.com/treasury/moving-money/payouts#manual-payouts).\n\n## Top-ups![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe [Connect](https://docs.stripe.com/connect \"Connect\") platform users can top up their existing Stripe platform account balance using a Stripe Treasury financial account by verifying the routing and account numbers. These funds settle to your account balance according to [Top-ups settlement timing](https://docs.stripe.com/connect/top-ups#settlement-timing).\n\nFor more details, see [Adding funds to your platform balance](https://docs.stripe.com/connect/top-ups).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Moving money out of financial accounts](https://docs.stripe.com/treasury/moving-money/moving-money-out-of-financial-accounts)\n*   [Moving money into financial accounts](https://docs.stripe.com/treasury/moving-money/moving-money-into-financial-accounts)\n*   [Payouts](https://docs.stripe.com/treasury/moving-money/payouts)\n\n## Same-day ACH regulations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nACH transactions are regulated by [Nacha](https://www.nacha.org/content/how-ach-rules-are-made). Consider the following when using same-day ACH:\n\n*   Individual same-day ACH transactions [can’t exceed 1,000,000 USD](https://www.nacha.org/million). If you submit a larger single transaction for same-day processing, Stripe remits the funds for processing on the following day.\n*   The 1,000,000 USD limit applies only to single transactions. You can submit multiple smaller transactions that total more than 1,000,000 USD for same-day processing.\n\n#### Note\n\nACH operators monitor for attempts to evade the limit, such as by splitting a single large transaction into multiple smaller transactions. If they suspect an evasion attempt, they process those transactions for next-day settlement in the next available processing window.",
  "title": "Money movement timelines | Stripe Documentation",
  "description": "Learn about the timelines for various types of money movement in Treasury.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/moving-money/moving-money-into-financial-accounts",
  "markdown": "# Moving money into financial accounts\n\n## Learn the requests available to move money into financial accounts.\n\nYou can add money to your financial account using `InboundTransfer` and `ReceivedCredit` objects. In some scenarios, you can reverse `ReceivedCredits`, which creates a [CreditReversal object](https://docs.stripe.com/api/treasury/credit_reversals/object). For more information, see the [Moving money with Treasury using CreditReversal objects guide](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/credit-reversals).\n\nStripe Treasury also provides test mode objects to facilitate testing money flows into financial accounts. The test mode endpoint for creating a `ReceivedCredit`, for example, enables you to add money to your test mode financial account balance to begin experimenting with other money movement capabilities. The test mode endpoints for `InboundTransfers`, on the other hand, enable you to test effects of your other business logic when an `InboundTransfer` object transitions to a particular state.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Moving money with Treasury using InboundTransfer objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/inbound-transfers)\n*   [Moving money with Treasury using ReceivedCredit objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/received-credits)\n*   [Moving money with Treasury using CreditReversal objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/credit-reversals)",
  "title": "Moving money into financial accounts | Stripe Documentation",
  "description": "Learn the requests available to move money into financial accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/capital/eligibility",
  "markdown": "# Stripe Capital eligibility | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about our offer eligibility criteria.\n\nStripe determines your eligibility for a loan offer based on a variety of factors related to your Stripe account, including your processing volume and the size of your customer base.\n\nWe automatically review your business for loan offer eligibility on a daily basis. If you become eligible, you’ll receive an email and you can view your offer in the Dashboard under the [Capital tab](https://dashboard.stripe.com/capital).\n\nYou might see a banner in the Stripe Dashboard that indicates that you’re on track for a future offer. This isn’t a guarantee of a future offer or of specific terms and doesn’t reflect a credit decision or evaluation.\n\n## Minimum eligibility requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo qualify for a loan through Stripe Capital, your business must:\n\n*   **Be based in the US.** Stripe Capital only supports businesses located or incorporated in the US. Funding might not be available in certain states due to local rules and regulations.\n*   **Have processed payments on Stripe for 9 months or more.**\n*   **Have a processing volume of 5,000 USD minimum per year.**\n*   **Be in good standing with Stripe Capital.** If your business previously applied for a Capital loan and was rejected, you’re not eligible to receive a new loan offer for 30 days.\n*   **Certain geographic limitations may apply.**\n\n#### Note\n\nMeeting the minimum eligibility requirements doesn’t guarantee that your business qualifies for a Stripe Capital offer.\n\n## Important factors we consider![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the minimum requirements, our underwriting model evaluates many other characteristics of your business to determine eligibility. We’ve highlighted some key considerations:\n\n*   **A growing business.** How much you process through Stripe influences the size of your financing offer. Businesses with positive growth trajectories are more likely to be eligible for an offer.\n*   **A steady processing record.** A consistent, steady processing record with limited periods of low or zero volume shows stability in your business and increases your likelihood of qualifying for an offer.\n*   **A large customer base.** Businesses with more customers are more likely to be eligible for an offer.\n*   **A low dispute rate.** Businesses with low rates of unresolved chargebacks are more likely to qualify for funding.\n\n## Additional steps you can take![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe more information we can see about the health of your business, the better we can evaluate your eligibility for a Stripe loan.\n\n*   **Connect your business bank account.** Securely [linking your bank account](https://docs.stripe.com/get-started/account/linked-external-accounts) lets Stripe view your bank balances and transactions to better determine your eligibility for an offer.\n*   **Bring more processing volume onto Stripe.** Our underwriting model is based on the payment volume that you process on Stripe. Shifting transaction volume from other payment sources onto Stripe increases your overall Stripe processing volume and improves your likelihood of receiving an offer.",
  "title": "Stripe Capital eligibility | Stripe Documentation",
  "description": "Learn more about our offer eligibility criteria.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account/linked-external-accounts",
  "markdown": "# Linked external accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Manage your linked external accounts.\n\nWhen you first set up your Stripe account, we ask you to connect your bank account so that you can receive payouts. If you want Stripe to access additional account information, you can link a financial account. This allows Stripe to better serve your business needs and provide necessary information for credit and risk reviews. Linking your account also reduces the need for us to collect additional financial information in the future, potentially reducing the frequency of credit and other risk reviews.\n\nStripe might use your financial account information to:\n\n*   Link your financial account for [payouts](https://docs.stripe.com/payouts \"payout\").\n*   Evaluate eligibility for loans or other Stripe products.\n*   Enable additional Stripe product features.\n*   Re-evaluate reserve balances during risk reviews.\n\n## Financial account data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith your consent, we can access your linked account to retrieve the following information:\n\n*   **Account details**: Account type, account number, current balance, and historical balances.\n*   **Contact information**: Your name, email address, phone number, physical address, and other details held by your financial account.\n*   **Account transactions**: Each transaction’s amount, date, and description.\n\nHere are a few Stripe products and services that rely on your financial account information:\n\n*   **Payouts**: Stripe uses your financial account information (specifically, the account number and routing number) to verify your account to enable [payouts](https://docs.stripe.com/payouts). You can link this account during onboarding, or at a later time by using your **Linked external accounts** settings in the Stripe Dashboard.\n*   **Risk**: We analyze your financial account information to ascertain if a [reserve](https://support.stripe.com/topics/reserves) is required, and decide the appropriate amount for that reserve. Linking your financial account allows Stripe to continually reassess your risk profile, which could help reduce or eliminate the need for a reserve.\n*   **Corporate Card**: We use your financial account information during the underwriting process to determine your [Corporate Card](https://docs.stripe.com/issuing) credit limit. This limit can vary based on changes in your financial account information. If you unlink a financial account, it might affect your ability to use your Corporate Card.\n*   **Capital**: [Stripe Capital](https://docs.stripe.com/capital/eligibility) uses your financial account information to evaluate your loan eligibility and the details of your loan offer.\n\nThe type of data available to Stripe might vary based on your financial account or our technology partner. Go to your [Linked external accounts settings](https://dashboard.stripe.com/settings/linked-accounts) to see the accounts you’ve linked to Stripe and what information you’ve shared with different Stripe products.\n\n#### Note\n\nWe have organizational, technical, and administrative measures in place to protect your financial account data from unauthorized access, destruction, loss, alteration, or misuse within our organization. Should you believe that your interaction with us is no longer secure (for instance, if you feel that the security of your account has been compromised), please [contact us](https://support.stripe.com/contact) immediately.\n\n## Link a financial account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your Dashboard prompts you to **Link your bank account to Stripe**, follow these steps:\n\n1.  Click **Link bank account** in the **Link your bank account to Stripe** banner in your Dashboard.\n2.  Click **Link your account**.\n3.  Choose your bank account provider and enter your bank account login details.\n4.  Select all accounts or specific accounts (such as checking or savings accounts) and click **Link accounts**.\n5.  To add multiple bank accounts, click **Link another account**. If not, click **Done**.\n6.  You can verify the successful linking of bank accounts on the [Linked external accounts settings](https://dashboard.stripe.com/settings/linked-accounts).\n\nYou can also link your financial accounts directly from the Dashboard by following these steps:\n\n1.  Visit the [Linked external accounts settings](https://dashboard.stripe.com/settings/linked-accounts) in your Dashboard.\n2.  Click **\\+ Add account**.\n3.  Choose your bank account provider and enter your bank account login credentials.\n4.  Select all or specific accounts (such as checking or savings accounts) and click **Link Accounts**.\n5.  To add multiple bank accounts, click **Link another account**. If not, click **Done**.\n6.  Check the **Linked external accounts** page to verify that the bank accounts were successfully linked.\n\n## Data management ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can control which Stripe products use your account data. By default, when you link your financial accounts, this account data is shared with Stripe products as shown on the [Link external accounts settings](https://dashboard.stripe.com/settings/linked-accounts). From this page, you can control which Stripe products receive and use your data. You also have the option to opt out of sharing your financial account data, which might affect your ability to use certain products and features.\n\n### Data retrieval frequency ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nHow often Stripe accesses your data depends on the products you use. For instance, when assessing a risk reserve on your account, we might access your financial account information as often as daily because understanding your business’s risk profile requires this information.\n\nFor the Corporate Card, we might monitor your financial account data daily to assess if a change in your credit limit is necessary. For other products, such as Capital, we might get your financial account data once a week or once a month.\n\n### Data retention duration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe retain your financial account information for as long as we’re providing services to you. We also keep this information to comply with our tax, accounting, and financial reporting obligations, to meet our contractual commitments to our financial partners, and where data retention is mandated by the payment methods we support. Even if you close your Stripe account, we might still need to retain your financial account information for a certain period following any limitation periods and record-keeping requirements imposed by applicable law.\n\n### Data sharing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe use your financial account information as outlined in the [Stripe Privacy Policy](https://stripe.com/privacy). We only use your data for internal purposes, such as offering additional products, services, or features. Stripe doesn’t sell or rent your financial account information to marketers or unaffiliated third parties. We might share your data with trusted entities (like service providers, business partners, third parties authorized by you to access this information, and for compliance purposes) as stated in our privacy policy.\n\n### Revoke consent ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAt any time, you can revoke your consent by visiting your [Link external accounts settings](https://dashboard.stripe.com/settings/linked-accounts) and clicking **Remove account** on any account you want to unlink. After you revoke your consent, we stop obtaining your account data. You can learn more about what happens when you [disconnect an account](https://support.stripe.com/questions/what-happens-when-i-disconnect-a-linked-financial-account).\n\nChoosing not to link a financial account, or unlinking one, might make you ineligible to access or receive offers for additional products or services, enhancements to current products, or services. In some cases, we might request alternative information, such as financial statements.\n\n## Trusted entity identification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you link a financial account with Stripe, we become the primary recipient of your account data. Depending on the purpose for linking your account, we may also share this data with certain financial institutions or service providers involved in offering Stripe Capital and other financial services. For example, if you obtain a loan through Stripe Capital, we might share your account data with service providers that help manage your loan. Stripe only shares your data as set out in the [Stripe Privacy Policy](https://stripe.com/privacy).\n\n## Stripe’s technology partners ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe work with third-party data aggregators, namely Finicity and MX, to obtain the data you’ve agreed to share with us and other reliable entities. When you enter your login credentials in the credential dialog, you might be sharing this information with Finicity and MX, or otherwise allowing these third-party data aggregators access to your accounts. Finicity and MX use your login details or your authorization to continually access your account data and provide this data to Stripe and other trusted entities authorized by you to receive it.",
  "title": "Linked external accounts | Stripe Documentation",
  "description": "Manage your linked external accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct",
  "markdown": "# Connect integration guide | Stripe DocumentationThe Stripe Docs logo\n\n## Build your integration based on choices for onboarding, dashboards, and charges types.\n\nUse this guide to explore different Connect integrations, make choices, and access a personalized integration guide. Before starting your integration in test mode, you must:\n\n*   Create a Stripe Account\n*   Begin filling out your platform profile\n\n## Select properties![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Create and onboard accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe enables you to create accounts on behalf of users, called connected accounts. When using Connect, you create connected accounts for each user that receives money on your platform.\n\nBuild out each aspect of the onboarding flow by calling the corresponding Stripe APIs. You need to build custom logic in your integration to satisfy all required verification information.\n\nBest for when you want to have full control over the onboarding flow:\n\n*   Build and maintain all onboarding flow logic yourself. Can be resource intensive and expensive to build.\n*   You manage risk with full responsibility for negative balance liabilities on connected accounts.\n*   You must keep your flows up to date as verification requirements change, and also build additional flows to communicate and collect such requirements from your users. Review and update onboarding requirements at least every six months to make sure you build the latest requirements into your flow.\n*   You must build a custom form to collect bank accounts or debit cards so that connected accounts can be set up with a payout account.\n\n### Set up dashboard flows![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts need access to a dashboard to manage their account. Provide connected accounts with access to the Stripe Dashboard, the Express Dashboard, or a dashboard built using the Stripe API and embedded components.\n\nCreate a dashboard using Stripe APIs or embedded components to enable connected accounts to manage their account.\n\nConnected accounts won’t have access to the Stripe Dashboard or Express Dashboard. It’s up to you to provide access to these workflows by building your user’s dashboard, refunds, disputes workflows and reporting functionality. Your users might not realize that they have a Stripe account through your platform.\n\nWe recommend integrating [embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components) to add dashboard functionality to your platform application with a low integration effort. Embedded components are highly themable and can support connected accounts with:\n\n*   Payments workflows such as viewing payments and payouts, managing refunds and responding to disputes\n*   Payout workflows such as managing payout schedules, creating manual payouts or updating payout accounts\n*   Reporting workflows to download and export payments and payouts\n*   Account management workflows such as updating business information\n\n### Accept a payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou create a charge to accept a payment from a customer on behalf of your connected account. The type of charge you create:\n\n*   Determines how payment funds are split among all parties involved\n*   Impacts how the charge appears on the customer’s bank or billing statement (with your platform’s information or your user’s)\n*   Determines which account Stripe debits for refunds and chargebacks\n\nA direct charge is a customer payment made directly to a connected account. Customers directly transact with your connected account, often unaware of your platform’s existence.\n\nThis charge type is best suited for platforms providing software as a service. For example, Shopify provides tools for building online storefronts, and Thinkific enables educators to sell online courses.\n\n### Stripe fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe collects Stripe fees from your platform account, inclusive of processing fees. You control the processing fee amounts you bill connected accounts. Use the application fee parameter to collect processing fees from your connected accounts.\n\n### Pay out users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen the funds from the payment settle and your user’s connected account has a positive Stripe balance, you can pay out those funds to their external account.\n\nIf you onboard users in your own flow using the Stripe API, you must also collect bank accounts or debit cards to set up your connected accounts with a payout account. When you’ve collected the user’s information for the payout account, attach it as an external account. Payouts are blocked if your connected account doesn’t have a verified external account.\n\nBy default, Stripe pays out funds that have settled in your connected accounts’ balances on a daily rolling basis. If you prefer, you can configure different automatic payout schedules, trigger payouts manually instead of automatically, or pay out instantly.\n\n### Responsibility for negative balances![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNegative balance liability:\n\nYour platform is liable for losses incurred by negative balances on your connected accounts. Your platform is responsible for reviewing new connected accounts during onboarding and determining the risk profile of your users.\n\nRecommended for marketplaces that collect payments from buyers to payout sellers, or for advanced platforms that want full control over how risk and negative liabilities are managed on connected accounts:\n\n*   Your platform must monitor connected accounts for ongoing risk of loss.\n*   Your platform has to build flows to communicate and remediate connected accounts when you detect fraud or risk.\n*   You have both the operational team and the engineering resources to establish processes for managing ongoing risk of loss and preventing fraud.\n\nBefore creating accounts with this setup, carefully consider and acknowledge your platform responsibilities for negative balance liabilities.\n\n## Your personalized guide![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis list of steps is customized based on your choices above. Use it to get started building your integration.\n\n*   Create connected accounts and collect requirements using the Stripe API. [Learn more](https://docs.stripe.com/connect/api-onboarding)\n    \n\n*   Create direct charges. Your platform will pay Stripe fees and can collect revenue using application fees. [Learn more](https://docs.stripe.com/connect/charges)\n    \n\n*   Build a dashboard yourself using the Stripe API or use embedded components. [Learn more](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n    \n\n*   Build tools and processes to manage negative balance liabilities on your connected accounts. [Learn more](https://docs.stripe.com/connect/risk-management)\n    \n\n*   Handle ongoing changes in requirements for your connected accounts using the Stripe API. [Learn more](https://docs.stripe.com/connect/required-verification-information)\n    \n\n*   Manage bank accounts and debit cards using Stripe Financial Connections or the Stripe API, then pay out your connected accounts.\n    \n\nOnboarding\n\nDashboard access\n\nCharge type\n\nWho pays Stripe fees\n\nNegative balance liability",
  "title": "Connect integration guide | Stripe Documentation",
  "description": "Build your integration based on choices for onboarding, dashboards, and charges types.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payment-links",
  "markdown": "# Payment Links | Stripe DocumentationThe Stripe Docs logo\n\n## Sell online without building a digital storefront.\n\nAccept a payment or sell subscriptions without building additional standalone websites or applications with Payment Links. Share the link as many times as you want on social media, in emails, or on your website.\n\nPayment Links supports [20+ payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support)—including credit and debit cards, Apple Pay, and Google Pay. The Payment Link automatically matches your customer’s preferred browser language for [30+ languages](https://support.stripe.com/questions/supported-languages-for-stripe-checkout-and-payment-links). If you don’t have a Stripe account, [sign up now](https://dashboard.stripe.com/register/payment_links).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/0bf124f94479ea72ead56c0aad4e7557.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/c63e01cc65f29058b5709a0b8bcabf8b.svg)\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Explore advanced options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Compare Invoicing and Payment Links ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInvoicing and Payment Links are two of the easiest ways to start accepting payments with Stripe without writing any code. Use the following table to compare the two products, and to understand which works best for your use case:\n\n| **Product** | **Invoicing** | **Payment Links** |\n| --- | --- | --- |\n| **Description** | Use [invoices](https://dashboard.stripe.com/invoices) to collect one-time or recurring payments from a specific customer. | Use [Payment Links](https://dashboard.stripe.com/payment-links) to sell a product, a subscription, or accept a donation. |\n| **Customer** | *   Specific individuals or businesses<br>*   You can’t reuse invoices, but you can duplicate them and edit the details for another customer. | *   Anyone with the link<br>*   Reuse multiple times with multiple customers, or limit the number of purchases. |\n| **Integration effort** | No coding | No coding |\n| **Stripe-hosted payment page** |     |     |\n| **Sharing options** | *   You can [email from the Dashboard](https://docs.stripe.com/invoicing/dashboard#create-invoice).<br>*   Copy the [invoice link](https://docs.stripe.com/invoicing/hosted-invoice-page#email-links) to share over email or SMS.<br>*   [Send a PDF](https://docs.stripe.com/invoicing/hosted-invoice-page).<br>*   [Auto-charge](https://docs.stripe.com/invoicing/automatic-charging?dashboard-or-api=dashboard) the payment method on file. | *   [Show a QR code](https://docs.stripe.com/payment-links/share#create-qr-code).<br>*   [Copy the link](https://docs.stripe.com/payment-links/share#share-online) to share it over email, SMS, or social media.<br>*   Add a [buy button](https://docs.stripe.com/payment-links/buy-button) to your website. |\n| **UI customization** | Editable template1 | Limited customization2 |\n| **Payment methods** | *   Choose from over 40 [payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#choose-how-to-add-payment-methods).<br>*   Manage your payment methods in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) without coding. | *   [Dynamically display](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) over 40 [payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#choose-how-to-add-payment-methods)3.<br>*   Manage your payment methods in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) without coding. |\n| **[Stripe Tax](https://docs.stripe.com/tax) support** |     |     |\n| **Preferred language support** | *   Over 30 languages<br>*   Set the Dashboard [language preference](https://docs.stripe.com/invoicing/customize#customer-language) for each customer. | *   Over 30 languages<br>*   Match the [browser language setting](https://support.stripe.com/questions/supported-languages-for-stripe-checkout-and-payment-links) for each customer, or set the language with a URL parameter. |\n| **Recurring payments** | Use Stripe Billing to send a subscription or recurring invoice. [No-code subscriptions](https://dashboard.stripe.com/subscriptions?create=subscription) are available | Create a payment link for a subscription. |\n| **Collection tools** | [Automatic collection](https://docs.stripe.com/invoicing/automatic-collection) features, including Smart Retries and reminder emails are available. | [Revenue recovery](https://docs.stripe.com/billing/revenue-recovery) features, including Smart Retries and reminder emails are available for subscription payment links. |\n| **Reconciliation** | Auto-reconciliation of bank payments | Simple reconciliation by using URL parameters |\n| **Customers can choose what to pay** |     |     |\n| **Collect partial payments or set up payment plans** |     |     |\n| **Customers can edit quantities** |     |     |\n| **Coupons or discounts** |     |     |\n| **Send a quote or estimate and convert it to an invoice once finalized** |     |     |\n| **Upsells and cross-sells** |     |     |\n| **PCI compliance handling** | 4   |     |\n\n1 Use the [editable template](https://docs.stripe.com/invoicing/customize) to incorporate your own icons, brand colors, payment terms, page sizes, as well as memo and footer fields.  \n2 With [limited customization](https://docs.stripe.com/payment-links/customize), you can access 20 preset fonts, three predefined border radiuses, and options for adjusting your logo, background, product images, and the color of your own button.  \n3 Dynamic payment methods filter for eligibility, displaying the most relevant payment methods to maximize conversion. Payment method availability [varies by product](https://docs.stripe.com/payments/payment-methods/integration-options#product-support).  \n4 See the best practices for [globally compliant invoices](https://docs.stripe.com/invoicing/global-invoicing).",
  "title": "Payment Links | Stripe Documentation",
  "description": "Accept a payment or sell subscriptions without building additional standalone websites or applications with Payment Links. Share the link as many times as you want on social media, in emails, or on your website.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/upgrades",
  "markdown": "# Upgrade your integration | Stripe DocumentationThe Stripe Docs logo\n\n## Increase conversion and get access to new features by upgrading your integration.\n\nDiscover the recommended options for upgrading both your entire payments integration, and individual features. For a comprehensive list of changes to the API, see [API upgrades](https://docs.stripe.com/upgrades).\n\n## Payment integration upgrades![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTake advantage of new features by upgrading your existing integration.\n\n| Legacy integration | Recommended integration | Why you should upgrade | Upgrade path |\n| --- | --- | --- | --- |\n| [Card Element](https://docs.stripe.com/payments/payment-card-element-comparison) | [Payment Element](https://docs.stripe.com/payments/payment-element) | *   Use a single UI component to present over 100 payment methods and build a customizable checkout.<br>*   Access the latest compatible features.<br>*   Have Stripe handle the presentment logic using various factors, such as location, currency, and success metrics.<br>*   Customize payment method preferences in the Dashboard. | [Migrate to the Payment Element](https://docs.stripe.com/payments/payment-element/migration) |\n| Legacy Checkout | *   [Checkout](https://docs.stripe.com/payments/checkout/how-checkout-works)<br>*   [Payment Links](https://docs.stripe.com/payment-links) | *   Checkout:<br>    <br>    *   Checkout offers a prebuilt payment form to securely accept online payments.<br>    *   Embed Checkout on your site or redirect to a Stripe-hosted Checkout page.<br>    *   Checkout gives you access to additional features, such as [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) and [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing).<br>*   Payment Links:<br>    <br>    *   Accept a payment or sell subscriptions without building additional standalone websites or applications.<br>    *   Share a link as many times as you want on social media, in emails, or on your website.<br>    *   Access [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) from the Dashboard. | [Migrate to Checkout](https://docs.stripe.com/payments/checkout/migration) |\n| [Client-only Checkout](https://docs.stripe.com/payments/checkout/client) | *   [Create a payment link](https://docs.stripe.com/payment-links/create)<br>*   [Create an embeddable buy button](https://docs.stripe.com/payment-links/buy-button)<br>*   [Embed a pricing table](https://docs.stripe.com/payments/checkout/pricing-table) | *   Start accepting payments without writing any code.<br>*   Replace your existing integration by adding a buy button or pricing table onto your website with a simple script tag, or use payment links that you can present to your customers. | [Migrate to a no-code solution](https://docs.stripe.com/no-code/get-started#get-retain-subscribers) |\n| [Payment request button](https://docs.stripe.com/stripe-js/elements/payment-request-button) | [Express checkout element](https://docs.stripe.com/elements/express-checkout-element) | *   Accept additional payment method options, such as [Apple pay](https://docs.stripe.com/apple-pay), [Amazon Pay](https://docs.stripe.com/payments/amazon-pay), [Google Pay](https://docs.stripe.com/google-pay), [Link](https://docs.stripe.com/payments/link), and [PayPal](https://docs.stripe.com/payments/paypal).<br>*   Display multiple payment method buttons at the same time.<br>*   For more details, see the [Express Checkout Element comparison guide](https://docs.stripe.com/elements/express-checkout-element/comparison). | [Migrate to the Express Checkout Element](https://docs.stripe.com/elements/express-checkout-element/migration) |\n\n## Feature upgrades![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe recommend upgrading these features to enhance your checkout process.",
  "title": "Upgrade your integration | Stripe Documentation",
  "description": "Increase conversion and get access to new features by upgrading your integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/account-management/connected-accounts",
  "markdown": "# Working with connected accounts in Treasury\n\n## Learn how to work with connected accounts in Treasury.\n\nTo use Stripe Treasury, your platform must have a Stripe [Connect](https://docs.stripe.com/connect \"Connect\") integration. Stripe Connect enables a platform to provide connected accounts to sellers and service providers. For an overview of how connected accounts fit into the Stripe Treasury account structure, see the [Stripe Treasury accounts structure](https://docs.stripe.com/treasury/account-management/treasury-accounts-structure) guide.\n\nTreasury only supports connected accounts that don’t use a Stripe-hosted dashboard and where your platform is responsible for requirements collection and loss liability, including Custom connected accounts. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Treasury.\n\nAs a platform with connected accounts, you’re responsible for maintaining a minimum API version, communicating terms of service updates to your connected accounts, handling information requests from them, and providing them with support. Because your platform is ultimately responsible for the losses your connected accounts incur, you’re also responsible for vetting them for fraud. To learn more, read the [Treasury fraud guide](https://docs.stripe.com/treasury/examples/fraud-guide).\n\nConnected accounts require specific capabilities enabled on the account to use features of Treasury. Different features require different capabilities, which might require additional information about your connected account owners. The `treasury` capability, for example, is a requirement on connected accounts for Treasury access. When you request `treasury` for an account, additional fields become required for that connected account before the account can use Treasury.\n\nBefore you create connected accounts in live mode for your Treasury integration, we recommend you first create test connected accounts in [test mode](https://docs.stripe.com/test-mode \"test mode\"). Test mode connected accounts can’t receive or send real money and can’t be used in live mode, but are otherwise identical in configuration and functionality.\n\n## Checking current connected account types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your platform already has a Connect integration with connected accounts but are unsure of their type, you can use the Dashboard or API to retrieve this information.\n\nNavigate to the [Connected accounts page](https://dashboard.stripe.com/test/connect/accounts/overview) in the Dashboard. We list your connected accounts in a table format.\n\n![Table of connected accounts](https://b.stripecdn.com/docs-statics-srv/assets/account-dashboard.f7c91e5c9e06a1ca68102ed2cbaaa8ce.png)\n\nConnected accounts\n\nTo find the account features, select an account in the table to open the detailed view, then click **Profile** > **Account information**.\n\n![Account details section of the dashboard displaying one account of type Custom.](https://b.stripecdn.com/docs-statics-srv/assets/account-information.22a76ce6f2d50771ebd78a0f21020fb3.png)\n\nAccount information\n\n## Create a new connected account with the `treasury` capability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nThis guide demonstrates how to create a new connected account using the Stripe API for Treasury and isn’t exhaustive. For complete documentation on creating a connected account, including through hosted onboarding, see the [Connect integration guide](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct).\n\nUse `POST /v1/accounts` to create a new connected account. Request the following capabilities for the account, which are required to use Stripe Treasury:\n\n*   `transfers` (required for all connected accounts)\n*   `treasury`\n\n#### Note\n\nYou can update the account later to request these capabilities if you don’t do so when creating the account.\n\nIf you want to issue cards with Stripe Issuing to your connected account, you must request the `card_issuing` capability, as well. See the [Working with Stripe Issuing cards](https://docs.stripe.com/treasury/account-management/issuing-cards) guide for more information.\n\nIf you want to use ACH to transfer funds to or from an external account, you must also request the `us_bank_account_ach_payments` capability.\n\nWith all the previous options included, the request resembles the following:\n\n`const account = await stripe.accounts.create({   country: 'US',   email: email,   capabilities: {     transfers: {requested: true},     treasury: {requested: true},     card_issuing: {requested: true},   },   controller: {     dashboard: {type: \"none\"},     losses: {payments: \"application\"},     requirement_collection: \"application\",     fees: {payer: \"application\"}   }, });`\n\nIf successful, the response you receive confirms the connected account and requested `capabilities`.\n\n`{   \"id\": \"acct_1234\",   \"object\": \"account\",   \"capabilities\": {     \"card_issuing\": \"inactive\", // Should be requested only for Stripe Issuing users.     \"treasury\": \"inactive\",     \"us_bank_account_ach_payments\": \"inactive\"   },   ... }`\n\nTo learn more about connected account capabilities, see the [Account capabilities](https://docs.stripe.com/connect/account-capabilities) guide for Connect.\n\n## Update a connected account to include the `treasury` capability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you already have a connected account with `card_payments` enabled, use `POST /v1/accounts/{{CONNECTED_ACCOUNT_ID}}` to update the account with the associated ID with a request for the `treasury` capability. The following request updates a connected account with a request for the `treasury` capability, and includes the optional capabilities of `card_issuing` and `us_bank_account_ach_payments`:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"capabilities[treasury][requested]\"=true \\  -d \"capabilities[card_issuing][requested]\"=true \\  -d \"capabilities[us_bank_account_ach_payments][requested]\"=true`\n\nUse `POST /v1/accounts/{{CONNECTED_ACCOUNT_ID}}` to update connected account capabilities for connected accounts that already have a `FinancialAccount` assigned. See [Working with financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts) or the [FinancialAccount object](https://docs.stripe.com/api/treasury/financial_accounts/object) API documentation for more information.\n\n## Onboard the connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you create an account, you must onboard the seller or service provider to the account for ownership. The [Account](https://docs.stripe.com/api/accounts/object#account_object-requirements-currently_due) object that represents the connected account has a `requirements` hash that contains `currently_due` [identity verification](https://docs.stripe.com/connect/handling-api-verification) requirements. The seller or service provider on your platform must provide the details itemized in the `requirements` hash to enable charges and [payouts](https://docs.stripe.com/payouts) on their connected account and enable all requested features of their financial account.\n\nYou have two options for onboarding connected account owners to Treasury: [hosted onboarding](https://docs.stripe.com/treasury/account-management/connected-accounts#using-hosted-onboarding) and [custom onboarding](https://docs.stripe.com/treasury/account-management/connected-accounts#using-custom-onboarding). We recommend hosted onboarding.\n\nIf you create an `Account` object in test mode and want to bypass onboarding requirements to test functionality, use `POST /v1/accounts/{{CONNECTED_ACCOUNT_ID}}` to [provide test values](https://docs.stripe.com/connect/testing-verification) that fulfill all the requirements. The following request uses a previously created connected account to apply the required account details.\n\n`curl https://api.stripe.com/v1/accounts/{{CONNECTED_ACCOUNT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"tos_acceptance[date]\"=1547923073 \\  -d \"tos_acceptance[ip]\"=\"172.18.80.19\" \\  -d \"business_profile[mcc]\"=5045 \\   --data-urlencode \"business_profile[url]\"=\"[https://bestcookieco.com](https://bestcookieco.com/)\" \\  -d \"company[address][city]\"=Schenectady \\  -d \"company[address][line1]\"=\"123 State St\" \\  -d \"company[address][postal_code]\"=12345 \\  -d \"company[address][state]\"=NY \\  -d \"company[tax_id]\"=000000000 \\  -d \"company[name]\"=\"The Best Cookie Co\" \\  -d \"company[phone]\"=8888675309 \\  -d \"individual[first_name]\"=Jenny \\  -d \"individual[last_name]\"=Rosen`\n\n### Using hosted onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse Connect Onboarding to efficiently collect required information. That offloads the verification complexity from your platform to Stripe and collects the terms of the service agreement. Alternatively, you can write your own API requests for initial integration, but must monitor for changes to compliance requirements to keep your onboarding workflow current. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Treasury.\n\nBefore you can use Connect Onboarding, you must provide the name, color, and icon of your brand in the **Branding** section of your [Connect settings page](https://dashboard.stripe.com/test/settings/connect). Doing so customizes the visual appearance of the form that sellers and service providers interact with when onboarding to your platform.\n\nTo take advantage of Connect Onboarding, use `POST /v1/account_links` to create an `AccountLink` to provide to the seller or service provider who’s going to take ownership of the connected account:\n\n#### Warning\n\nFor security, don’t email, text, or otherwise send account link URLs directly to your user. Instead, redirect the authenticated user to the account link URL from within your platform’s application.\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\   --data-urlencode refresh_url=\"[https://example.com/reauth](https://example.com/reauth)\" \\   --data-urlencode return_url=\"[https://example.com/return](https://example.com/return)\" \\  -d type=account_onboarding`\n\nThe response you receive includes the URL to provide to your user.\n\n### Using custom onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you prefer to build custom onboarding for your users, use `POST /v1/accounts/{{CONNECTED_ACCOUNT_ID}}` and `POST /v1/accounts/{{CONNECTED_ACCOUNT_ID}}/persons/{{PERSON_ID}}` to update the relevant `Account` and `Person` objects with the required information.\n\nYou must also confirm that the connected account owner has read and agreed to the [Stripe Treasury Agreement](https://stripe.com/treasury-connect-account/legal). See [Handling verification with the API](https://docs.stripe.com/connect/handling-api-verification) for additional details on fulfilling onboarding requirements.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"company[name]\"=Homebox \\  -d \"company[address][line1]\"=\"123 Market St.\" \\  -d \"company[address][city]\"=\"San Francisco\" \\  -d \"company[address][state]\"=CA \\  -d \"company[address][postal_code]\"=94107 \\  -d \"company[address][country]\"=US`\n\n### Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe fields in the following table are required for Treasury users.\n\n| Entity type | At onboarding |\n| --- | --- |\n| Individual, Sole proprietorship | Entity details:<br><br>*   Business names (customer facing and legal)<br>*   Legal entity type<br>*   Business address<br>*   Business phone number<br>*   Product or service description<br>*   Industry or Merchant category code<br>*   Tax ID Number (SSN, ITIN, or EIN)<br>*   Treasury TOS acceptance<br>*   Stripe TOS acceptance<br><br>Owner details:<br><br>*   Legal name<br>*   Date of birth<br>*   Email address<br>*   Residential address<br>*   Full SSN, or ID document scan for non-US persons or if SSN can’t be verified<br>*   Title<br>*   Phone number |\n| Companies (LLCs, corporations, non-profits, partnerships, and so on) | Entity details:<br><br>*   Business names (customer facing and legal)<br>*   Legal entity type<br>*   Business address<br>*   Business phone number<br>*   Product or service description<br>*   Industry or Merchant category code<br>*   Tax ID Number (EIN)<br>*   Treasury TOS acceptance<br>*   Stripe TOS acceptance<br><br>Owner/representative details:<br><br>*   Legal name<br>*   Date of birth<br>*   Email address<br>*   Residential address<br>*   Phone number<br>*   Title<br>*   Percent ownership of company<br>*   Full SSN, or ID document scan for non-US persons or if SSN can’t be verified |\n\n### Completion![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe connected account onboarding process is complete when you receive an `account.updated` [webhook](https://docs.stripe.com/webhooks) confirming the following fields on your connected account:\n\n``{   \"object\": {     \"object\": \"account\",     \"id\": \"acct_1234\",     \"capabilities\": {       \"treasury\": \"active\",       \"card_issuing\": \"active\", // Only appears if requesting the `card_issuing` capability.       \"us_bank_account_ach_payments\": \"active\", // Only appears if requesting the `us_bank_account_ach_payments` capability.     },     ...   } }``\n\nAccount onboarding latency when your platform’s bank partner is Evolve Bank & Trust is less than 5 minutes.\n\n### Updates to requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo adapt to changes in financial regulations, Stripe must occasionally update information collection requirements for Treasury. The `requirements.eventually_due` array on the `Account` object captures the updated information required by these regulation changes. Learn more about the [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) hash.",
  "title": "Working with connected accounts in Treasury | Stripe Documentation",
  "description": "Learn how to work with connected accounts in Treasury.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payment-links/create",
  "markdown": "# Create a payment link | Stripe DocumentationThe Stripe Docs logo\n\n## Create a custom payment page without code.\n\nUse the [Stripe Dashboard](https://dashboard.stripe.com/payment-links/create) to create a payment link that you can [share](https://docs.stripe.com/payment-links/share) with your customers. Stripe redirects customers who open this link to a Stripe-hosted payment page.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/0bf124f94479ea72ead56c0aad4e7557.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/c63e01cc65f29058b5709a0b8bcabf8b.svg)\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBefore you begin, decide what pricing model works best for you:\n\n*   **Products or subscriptions**: Best for e-commerce or SaaS where you’re selling products for a fixed price.\n*   **Customers choose what to pay**: Best for donations, tipping, or pay-what-you-want. This pricing model currently doesn’t support recurring payments or recurring donations. Learn more about the requirements for [accepting tips or donations](https://support.stripe.com/questions/requirements-for-accepting-tips-or-donations).\n\nTo let your customers choose what to pay, create a payment link by completing the following steps:\n\n1.  In the Dashboard, open the [Payment Links](https://dashboard.stripe.com/payment-links/create/customer-chooses-pricing) page and click **New** (or click the plus sign () and select **Payment link**).\n2.  Fill out the payment details.\n3.  (Optional) Set a preset amount.\n4.  (Optional) Set minimum and maximum payment amounts. By default, the maximum payment amount is 10,000.00 USD. [Contact support](https://support.stripe.com/) to increase this limit.\n5.  Click **Create link**.\n\n## Payment Links on mobile ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re creating a product or subscription, use the [Stripe Dashboard iOS app](https://apps.apple.com/app/apple-store/id978516833?pt=91215812&ct=stripe-mobile-app-docs-plinks&mt=8) to create a payment link on your mobile device. In the app, go to **Payments** > **Payment Links** to create a payment link (or click the create icon () and select **Payment link**). The iOS app doesn’t currently support creating links where your customers choose how much to pay.\n\n## Configure payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), Stripe displays the most relevant and compatible payment methods to your customers, including Apple Pay and Google Pay. Stripe enables certain payment methods for you by default. We might also enable additional payment methods after notifying you. Use the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) to enable or disable payment methods at any time. Learn more about [supported payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) and [different types of payment methods](https://stripe.com/guides/payment-methods-guide).\n\nYou can review what payment methods your customers see in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods/review) by entering a transaction ID or setting an order amount and currency.",
  "title": "Create a payment link | Stripe Documentation",
  "description": "Create a custom payment page without code.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payment-links/share",
  "markdown": "# Share a payment link | Stripe DocumentationThe Stripe Docs logo\n\n## Share payment links across social media, emails, or your website.\n\nAfter you create a [payment link](https://docs.stripe.com/payment-links), share it with your customers to accept payments without a digital storefront.\n\nUse the Dashboard to copy your payment link, and share it online. Click the copy icon next to an existing link on the [Payment Links](https://dashboard.stripe.com/payment-links) page, or go to the payment link’s details page. You can share your payment link multiple times and anywhere online, including:\n\n*   Emails\n*   Text messages\n*   Social media platforms\n\n## Generate a QR code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create a QR code for a payment link in the Dashboard. Choose an existing link from the **Payment Links** page, or [create a new link](https://dashboard.stripe.com/payment-links/create) and then click **QR code**. Copy or download a PNG image of the QR code.\n\nThe QR code doesn’t expire. If you deactivate the underlying payment link, the QR code redirects to an expiration page.\n\n## Embed a button on your site ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTurn your payment link into an embeddable buy button to sell a product or subscription from your website. Select an existing link from the **Payment Links** page or create a new link and then click **Buy button**. Copy the code and paste it into your website. To learn more on how to embed and customize a button, see [Create a buy button](https://docs.stripe.com/payment-links/buy-button).\n\n## Deactivate a link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the Dashboard to deactivate a payment link. Click the overflow menu () to the right of the desired payment link, and then **Deactivate**. After you deactivate a link, customers are no longer able to make a purchase using it. You can choose to reactivate the payment link at any time. You can also use the [API](https://docs.stripe.com/payment-links/api#deactivate-link) to deactivate a payment link.",
  "title": "Share a payment link | Stripe Documentation",
  "description": "Share payment links across social media, emails, or your website.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payment-links/url-parameters",
  "markdown": "# Track a payment link | Stripe DocumentationThe Stripe Docs logo\n\n## Use URL parameters and UTM codes to track a payment link.\n\nModify your payment link with URL parameters and [Urchin Tracking Module (UTM)](https://en.wikipedia.org/wiki/UTM_parameters) codes to get insight into customer behaviors and your marketing strategy’s effectiveness. These tools help identify the source of your traffic and the marketing campaigns leading to the most conversions.\n\n## Track campaigns with UTM codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse UTM codes to track how customers find your site when they pay using your payment link. You can add the following UTM codes as parameters in the query string of your URL: `utm_source`, `utm_content`, `utm_medium`, `utm_term`, and `utm_campaign`.\n\n| Parameter | Description |\n| --- | --- |\n| `utm_source` | Identifies where the traffic originated (for example, a website name, social media, or a search engine). |\n| `utm_content` | Identifies what content your customer chooses. Use this parameter to distinguish between links that point to the same payment page. |\n| `utm_medium` | Identifies the marketing medium that accesses your payment link (for example, email, cost per click (cpc), or other methods). |\n| `utm_term` | Identifies specific search terms and keywords in your paid search ads. |\n| `utm_campaign` | Identifies your marketing campaigns using the payment link URL. |\n\nTo add UTM codes, specify `redirect` as your [confirmation behavior](https://docs.stripe.com/payment-links/post-payment#change-confirmation-behavior). When customers complete a payment, your redirect URL contains the UTM code parameters specified in your payment link URL. Here’s what a payment link looks like with an appended UTM codes: `https://buy.stripe.com/test_eVa5nPg1j1wmfXq5kr?utm_medium=earned_email&utm_source=marketo&utm_campaign=campaign_a`\n\n#### Caution\n\nConstruct UTM codes using alphanumeric characters, dashes, or underscores, ensuring they don’t exceed a 150-character limit. Invalid values are discreetly discarded, guaranteeing your payment links performance remains unaffected.\n\n## Simplify reconciliation with a URL parameter ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can simplify reconciliation with the `client_reference_id` URL parameter. Use URL parameters in the query string of your payment link URL. To configure URL parameters directly in the Dashboard [Payment Links](https://dashboard.stripe.com/payment-links) page:\n\n1.  Click the payment link you want to modify.\n2.  Click the down arrow of the **Copy** button and select **URL parameters**.\n3.  In the dialog, use the drop-down menu to select **Client reference ID**.\n4.  Enter a value that meets the requirements described in the following table to append the reference to your URL.\n5.  Copy the amended URL for use in your integration.\n\n| Parameter | Description | Syntax |\n| --- | --- | --- |\n| `client_reference_id` | Use `client_reference_id` to attach a unique string of your choice to the Checkout Session. This can be a customer ID or a cart ID (or similar), and you can use it to reconcile the Session with your internal systems. If you add this parameter to your payment link, it’s sent in the [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) [webhook](https://docs.stripe.com/webhooks \"webhook\") after payment completion. | `client_reference_id` can be composed of alphanumeric characters, dashes, or underscores, and be any value up to 200 characters. Invalid values are silently dropped, but your payment page continues to work as expected. |",
  "title": "Track a payment link | Stripe Documentation",
  "description": "Use URL parameters and UTM codes to track a payment link.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payment-links/customize",
  "markdown": "# Customize checkout for Payment Links\n\n## Collect additional information, taxes, or update your branding.\n\nWhen you create a payment link, you can customize the look and feel of a checkout session for your user. You can also choose what type of customer information to collect and save for later.\n\nSee [After a payment link payment](https://docs.stripe.com/payment-links/post-payment) for more information about customizing a session post-payment, such as redirecting the customer to a branded confirmation page or emailing a receipt.\n\n[](#limit-payments)\n\nYou can limit the amount of times a payment link is paid for. This is helpful, for example, if you have limited inventory, or only want the links to be used once. When the payment link reaches the limit, it automatically deactivates and customers can’t use it to make a purchase. If a customer tries to open the link after the limit has been reached, they’re shown the default message for deactivated links or [a message that you can customize](#custom-deactivated-link-message).\n\nA payment link is considered “paid for” when a checkout session is complete. You can see the payments for completed checkout sessions in two different ways, depending on the type of payment link:\n\n*   For payment links that include subscriptions (that is, any link that has a [recurring price](https://docs.stripe.com/products-prices/pricing-models)), go to **Billing** > **Subscriptions**.\n*   For all other payment links, go to the payment link’s details page, then **Payments and analytics** > **Recent payments**.\n\nTo limit the number of payments using the Dashboard:\n\n1.  [Create](https://dashboard.stripe.com/payment-links/create) or edit a payment link.\n2.  Select **Limit the number of payments** and enter the number of payments you want to allow before the link deactivates.\n\n[](#custom-deactivated-link-message)\n\nIf customers try to open a deactivated payment link, they’re shown a default message. You can customize this message in the Dashboard or with the API.\n\nYou can customize the message for a deactivated link in the Dashboard in two ways:\n\n*   When you [create](https://dashboard.stripe.com/payment-links/create) or edit a payment link, select **Limit the number of payments**. Then select **Change deactivation message** and add your custom message.\n*   When you attempt to deactivate a payment link, a modal with a prompt to change the default deactivation message appears. Use that to update the message.\n\n[\n\n## Collect customer addresses and phone numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#collect-addresses-and-phone-numbers)\n\nYou can collect addresses and phone numbers with payment links by adding those fields to the checkout session.\n\n### Collect an address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo collect addresses from your customers:\n\n1.  [Create](https://dashboard.stripe.com/payment-links/create) or edit a payment link.\n    \n    To edit a payment link go to its details page and click the overflow menu ().\n    \n2.  Select **Collect customers’ addresses** in the **Options** section.\n    \n3.  You can collect **Billing addresses only** or you can collect **Billing and shipping addresses**. Choosing either makes these fields required for customers.\n    \n4.  If you collect shipping addresses:\n    \n    *   You need to select the countries you ship to. These countries appear in the **Country** dropdown in the **Shipping Address form** in the checkout session.\n    *   You can optionally add shipping rates. Learn how to [create shipping rates in the Dashboard](https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=payment-links).\n\n### Collect a phone number![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you need to collect phone numbers to complete the transaction:\n\n1.  [Create](https://dashboard.stripe.com/payment-links/create) or edit a payment link.\n2.  Select **Require customers to provide a phone number**.\n\nYou can configure Payment Links to always collect a billing address, or always collect both a billing and a shipping address. When you collect shipping addresses, you can define the allowed values for shipping countries, and create one or more shipping rates to include in your link. Learn more about how to [charge for shipping](https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=payment-links).\n\nYou can configure Payment Links to collect a phone number for shipping or invoicing. Only collect phone numbers if you need them for the transaction. When choosing this option, the payment page shows a required field to capture your customer’s phone number.\n\n[](#collect-taxes)\n\nPayment Links work with [Stripe Tax](https://stripe.com/tax) to calculate and collect tax on your payments. Stripe Tax is a paid product that automatically calculates the tax on your transactions without the need to define the rates and rules.\n\nFees only apply after you’ve added at least one location where you’re registered to calculate and remit tax.\n\nTo get started, [activate Stripe Tax](https://dashboard.stripe.com/setup/tax/activate) in the Dashboard. Learn how to use [products, prices, tax codes, and tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior) to automatically calculate tax.\n\n[](#collect-agreement-to-terms-of-services)\n\nYou can require that your customers accept your terms of service before completing their purchase. When your terms of service URL is set in your account’s [Public details](https://dashboard.stripe.com/settings/public), you have the option to require a terms of service agreement when you create a payment link in the Dashboard. Enabling this setting requires that your customers click a checkbox to accept your terms in their checkout page. The checkout page also links to your Privacy policy when a URL to your Privacy policy is set your [public details](https://dashboard.stripe.com/settings/public).\n\n[](#add-custom-fields)\n\n#### Caution\n\nDon’t use custom fields to collect personal, protected, or sensitive data, or information restricted by law.\n\nYou can add custom fields on the payment form to collect additional information from your customers. The information is available after the payment is complete and is useful for fulfilling the purchase. You can add the following types of fields.\n\n| Type | Description |\n| --- | --- |\n| Text | Collects freeform text up to 255 characters. |\n| Numbers only | Collects only numerical values up to 255 digits. |\n| Dropdown | Presents your customers with a list of options to select from. Payment links created through the Dashboard support up to 10 options. You can add up to 200 options after you create a link through the API. |\n\n1.  Click **Add custom fields** in the **Options** section.\n2.  Select a type of field to add.\n3.  Enter a label for the field.\n4.  _(Optional)_ Mark your field as required.\n\nLabels for custom fields aren’t translated, but you can use the `locale` [URL parameter](https://docs.stripe.com/payment-links/customize#customize-checkout-with-url-parameters) to set the language of your payment link to match the same language as your labels.\n\nAfter your customer completes the payment, you can view the fields on the payment details page in the Dashboard.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment.56e708902bb56215b40e523371418a6e.png)\n\nThe custom fields are also sent in the [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) [webhook](https://docs.stripe.com/webhooks \"webhook\") upon payment completion.\n\n[](#convert-to-local-currency)\n\nEnable [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing) in the [Stripe Dashboard](https://dashboard.stripe.com/settings/automatic_currency_conversion) in either test or live mode to let prices automatically convert to an international customer’s local currency depending on their location.\n\nAlternatively, you can set pricing manually for each currency using [manual currency prices](https://docs.stripe.com/payments/checkout/manual-currency-prices).\n\n[](#save-payment-details-for-future-use)\n\n#### Caution\n\nConsult with your legal counsel or compliance team regarding saving and using payment details. For example, the European Data Protection Board issued [guidance](https://edpb.europa.eu/system/files/2021-05/recommendations022021_on_storage_of_credit_card_data_en_1.pdf) regarding the saving of payment details for faster future checkouts.\n\nIf you want to save the payment method information to provide returning customers an optional 1-click payment experience in the future, we recommend using [Link](https://docs.stripe.com/payments/checkout/customization#link).\n\nTo save payment details for a customer, select **Save payment details for future use** in the **Advanced options** section when you create a payment link. You can use the payment details to charge the customer again.\n\n[\n\n## Use your own domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#custom-domains)\n\nIf you have your own custom domain, you can add it in the Stripe Dashboard. Instead of Stripe-branded payment links (`buy.stripe.com/`), you can create links using your own subdomain (`pay.example.com`)\n\n#### Note\n\n[](#set-store-policies-and-contact-information)\n\nYou can display your return, refund, and legal policies on the payment page in addition to your support contact information.\n\nGo to the [Checkout and Payment Links settings](https://dashboard.stripe.com/settings/checkout) to configure the information you want to display.\n\nPresenting this information can increase buyer confidence and minimize [cart abandonment](https://docs.stripe.com/payments/checkout/abandoned-carts).\n\n[](#customize-checkout-with-url-parameters)\n\nURL parameters allow you to add additional context to your payment page and streamline checkout. Specify the language that appears during checkout, prefill an email address or promotional code for your customers, track campaigns, and streamline reconciliation.\n\nYou can configure URL parameters directly from the Stripe Dashboard, and use them in the query string of your payment link URL. From the [payment links page](https://dashboard.stripe.com/payment-links), click a specific payment link, then click the dropdown menu on the **Copy** button to add URL parameters.\n\nHere’s an example link with prefilled email, promotional code, and locale parameters.\n\n`https://buy.stripe.com/test_eVa3do41l4Ye6KkcMN?prefilled_email=jenny%40example.com&prefilled_promo_code=20off&locale=de`\n\n| Parameter | Description | Syntax |\n| --- | --- | --- |\n| `prefilled_email` | Use `prefilled_email` to enter an email address on the payment page automatically. Your end customer can still edit this field, so the email you pass in for `prefilled_email` might not be the same email that your customer uses to complete the payment. | `prefilled_email` must be a valid email address. Invalid values are silently dropped and your payment page continues to work as expected.<br><br>We recommend [encoding](https://en.wikipedia.org/wiki/Percent-encoding) email addresses that you attach as URL parameters to reduce the risk of them not being passed through to your payment page. |\n| `prefilled_promo_code` | Use `prefilled_promo_code` to enter a [promotion code](https://docs.stripe.com/api/promotion_codes) on the payment page automatically. Your customer can still edit this field, so the promotion code you pass in for `prefilled_promo_code` might not be the same promotion code that your customer uses to complete the payment.<br><br>You must also [enable promotion codes](https://docs.stripe.com/payment-links/promotions) on your payment link, or this parameter has no effect. | `prefilled_promo_code` must be composed of alphanumeric characters and can’t use any special characters. Promotion codes are case insensitive. Invalid values are silently dropped, and your payment page continues to work as expected. |\n| `locale` | Use `locale` to display your payment link in a specific language for your customers regardless of their location. | View the complete list of all [supported languages](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-locale). |\n\nYou can also use URL parameters to [track payment links and related campaigns](https://docs.stripe.com/payment-links/url-parameters).\n\n[](#trials-without-payment-method)\n\nFor Payment Links that you create with a product that includes a free trial, you can allow customers to sign up for a subscription without providing their payment method details.\n\nTo configure trials without payment methods for Payment Links in the Dashboard:\n\n*   When you [create](https://dashboard.stripe.com/payment-links/create) or edit a payment link with a subscription product, select **Include a free trial**. Then select **Let customers start trial without payment method**.\n*   Set [subscription email reminders](https://docs.stripe.com/payments/checkout/free-trials#collect-payment) to make sure that Stripe prompts your customer to add their payment information before the trial ends. Otherwise, Stripe pauses the trial.",
  "title": "Customize checkout for Payment Links | Stripe Documentation",
  "description": "Collect additional information, taxes, or update your branding.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payment-links/buy-button",
  "markdown": "# Create an embeddable buy button\n\n## Use Payment Links to create an embeddable buy button for your website.\n\nCreate an embeddable buy button to sell a product, subscription, or accept a payment on your website. Start by selecting an existing link from the [Payment Links list view](https://dashboard.stripe.com/payment-links) or by [creating a new link](https://dashboard.stripe.com/payment-links/create) where you can decide which products to sell and customize the checkout UI. After you create your link, click **Buy button** to configure the buy button design and generate the code that you can copy and paste into your website.\n\n## Customize the button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, your buy button uses the same branding and call to action configured for your payment link. You can:\n\n*   Choose between a simple button and a card widget.\n*   Set brand colors, shapes, and fonts to match your website.\n*   Set the language of the button and payment page to match your website’s language.\n*   Customize your button’s call to action.\n\n![Customize the buy button](https://b.stripecdn.com/docs-statics-srv/assets/buy-button-card-layout.4003c3e9ffe3ce4378092dbdcd456ed9.png)\n\nCustomize the buy button\n\n## Embed the button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides an embed code composed of a `<script>` tag and a `<stripe-buy-button>` web component. Click **Copy code** to copy the code and paste it into your website.\n\nIf you’re using HTML, paste the embed code into the HTML. If you’re using React, include the `script` tag in your `index.html` page to mount the `<stripe-buy-button>` component.\n\n#### Caution\n\nThe buy button uses your account’s [publishable API key](https://docs.stripe.com/keys#obtain-api-keys). If you revoke the API key, you need to update the embed code with your new publishable API key.\n\n`<body>   <h1>Purchase your new kit</h1>   <!-- Paste your embed code script here. -->   <script     async     src=\"[https://js.stripe.com/v3/buy-button.js](https://js.stripe.com/v3/buy-button.js)\">   </script>   <stripe-buy-button     buy-button-id=`\n\n`'{{BUY_BUTTON_ID}}'`\n\n    `publishable-key=  \"pk_test_TYooMQauvdEDq54NiTphI7jx\"    >   </stripe-buy-button> </body>`\n\n## Attributes to customize checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Parameter | Description | Syntax |\n| --- | --- | --- |\n| `client-reference-id` | Use `client-reference-id` to attach a unique string of your choice to the Checkout Session. The string can be a customer ID or a cart ID (or similar) that you use to reconcile the Session with your internal systems. If you pass this parameter to your `<stripe-buy-button>`, it’s sent in the [checkout.session.completed webhook](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) upon payment completion. | `client-reference-id` can be composed of alphanumeric characters, dashes, or underscores, and be any value up to 200 characters. Invalid values are silently dropped, but your payment page continues to work as expected. |\n| `customer-email` | Use `customer-email` to prefill the email address on the payment page. When the property is set, the buy button passes it to the Checkout Session’s `customer_email` attribute. The customer can’t edit the email address on the payment page. | `customer-email` must be a valid email. Invalid values are silently dropped, but your payment pages continues to work as expected.<br><br>* * *<br><br>*   `customer-session-client-secret`<br>*   You can provide an existing [Customer object](https://docs.stripe.com/api/customers) to Checkout Sessions created from the buy button. Create a customer session for a user you’ve already authenticated server-side, and return the [`client_secret`](https://docs.stripe.com/api/customer_sessions/object#customer_session_object-client_secret) to the client. Set the `customer-session-client-secret` attribute on the `<stripe-buy-button>` web component to be the `client_secret` from the Customer Session.<br>*   The `customer-session-client-secret` value must be generated from the [`client_secret`](https://docs.stripe.com/api/customer_sessions/object#customer_session_object-client_secret).<br><br>* * * |\n\n## Pass an existing customer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can provide an existing [Customer object](https://docs.stripe.com/api/customers) to Checkout Sessions created from the buy button. Create a customer session for a user you’ve already authenticated server-side, and return the [`client_secret`](https://docs.stripe.com/api/customer_sessions/object#customer_session_object-client_secret) to the client.\n\n`curl https://api.stripe.com/v1/customer_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"components[buy_button][enabled]\"=true`\n\nSet the `customer-session-client-secret` attribute on the `<stripe-buy-button>` web component to the [`client_secret`](https://docs.stripe.com/api/customer_sessions/object#customer_session_object-client_secret) from the Customer Session.\n\n#### Note\n\nYou must provide the [`client_secret`](https://docs.stripe.com/api/customer_sessions/object#customer_session_object-client_secret) within 30 minutes. After providing the client secret, you have an additional 30 minutes until the customer session expires. Any resulting Checkout Sessions created from the buy button will fail. Don’t cache the client secret, instead generate a new one every time you render each buy button.\n\n`<body>   <script     async     src=\"[https://js.stripe.com/v3/buy-button.js](https://js.stripe.com/v3/buy-button.js)\">   </script>   <stripe-buy-button     buy-button-id=`\n\n`'{{BUY_BUTTON_ID}}'`\n\n    `publishable-key=  \"pk_test_TYooMQauvdEDq54NiTphI7jx\"      customer-session-client-secret=\"{{CLIENT_SECRET}}\"   >   </stripe-buy-button> </body>`\n\n## Content Security Policy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’ve deployed a [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP), the policy directives that the buy button requires are:\n\n*   frame-src, https://js.stripe.com\n*   script-src, https://js.stripe.com\n\n## Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRendering the buy button requires a website domain. To test the buy button locally, run a local HTTP server to host your website’s `index.html` file over the localhost domain. To run a local HTTP server, use Python’s [SimpleHTTPServer](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server#running_a_simple_local_http_server) or the [http-server](https://www.npmjs.com/package/http-server) npm module.\n\n## Track payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter your customer makes a payment using a payment link, you can see it in the [payments overview](https://dashboard.stripe.com/payments) in the Dashboard.\n\nIf you’re new to Stripe, you’ll receive an email after your first payment. To receive emails for all successful payments, update your notification preferences in your [profile settings](https://dashboard.stripe.com/settings/user).\n\nStripe creates a new [guest customer](https://docs.stripe.com/payments/checkout/guest-customers) for one-time payments and a new [Customer](https://docs.stripe.com/api/customers) when selling a subscription or [saving a payment method for future use](https://docs.stripe.com/payment-links/customize#save-payment-details-for-future-use).\n\nLearn more about handling [payment links post-payment](https://docs.stripe.com/payment-links/post-payment), like how to configure post-payment behavior for a buy button or payment link.",
  "title": "Create an embeddable buy button | Stripe Documentation",
  "description": "Use Payment Links to create an embeddable buy button for your website.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payment-links/promotions",
  "markdown": "# Promotion codes, upsells and cross-sells\n\n## Work with promotion codes, upsells and cross-sells.\n\nPayment Links lets you offer discounts using promotion codes, motivate long-term commitments with subscription upsells, and market related items during checkout through cross-sells.\n\n[](#promotion-codes)\n\nWhen you [create a payment link](https://dashboard.stripe.com/payment-links/create) in the Stripe Dashboard, you have the option of adding promotion codes. Customers can enter these codes on their payment page to apply discounts on their purchases.\n\nCreate a promotion code in the [Dashboard](https://dashboard.stripe.com/coupons/create) by creating a coupon and then turning it into a customer-facing promotion code. Use the `prefilled_promo_code` [URL parameter](https://docs.stripe.com/payment-links/customize#customize-checkout-with-url-parameters) to prefill a promotion code when sharing a payment link. Learn more about how to generate [promotion codes for Checkout](https://docs.stripe.com/payments/checkout/discounts#promotion-codes).\n\n#### Note\n\nBy default, payment links create [guest customers](https://support.stripe.com/questions/guest-customer-faq) for one-time payments. As a result, promotion codes that are only eligible for first-time orders won’t work as expected.\n\n[](#subscription-upsells)\n\n[Subscription upsells](https://docs.stripe.com/payments/checkout/upsells) give customers the option to upgrade to a longer-term plan during checkout, such as progressing from monthly to yearly. This strategy might enhance your average order value and improve your cash flow.\n\nYou can configure a subscription upsell in the Dashboard on the **Price detail** page. You can view the details for a price by clicking on one you’ve added to a product. You’ll see a list of eligible upsell prices in the dropdown menu. After you select an upsell, it immediately applies to eligible payment links that use that price.\n\nTo set up a subscription upsell:\n\n1.  Choose a subscription under [Subscriptions](https://dashboard.stripe.com/subscriptions), navigate down to **Pricing**.\n2.  Use the overflow menu to select **View price details**.\n3.  Navigate down to Upsells, and in the **Upsells to** dropdown menu, select or add a price.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/upsell-preview.2a43c1a8acb9f167178b7fda6a2b0796.gif)\n\n[](#cross-sells)\n\nUse [cross-sells](https://docs.stripe.com/payments/checkout/cross-sells) to give your customers the option to purchase related products through payment links.\n\nTo configure a cross-sell:\n\n1.  Click the desired product in [Products](https://dashboard.stripe.com/test/products), then navigate down to **Cross-sells**.\n2.  From the dropdown menu, pick the product you wish to cross-sell.\n\nOnce configured, any fitting payment link and checkout page will cross-sell the designated product from the dropdown menu.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/cross-sell-preview.cc9b1a4716015a18004f62de760cf29a.gif)",
  "title": "Promotion codes, upsells and cross-sells | Stripe Documentation",
  "description": "Work with promotion codes, upsells and cross-sells.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payment-links/post-payment",
  "markdown": "# After a payment link payment\n\n## Learn what you can do after receiving a payment link payment.\n\nAfter you receive a payment through a payment link, you can track payments, manage fulfillment automatically, view payment link metrics, and more.\n\n[](#track-payments)\n\nAfter your customer makes a payment using a payment link, you can see it in the payments overview in the [Dashboard](https://dashboard.stripe.com/payments). If you’re new to Stripe, you receive an email after your first payment. To receive emails for all successful payments, update your notification preferences in your [profile settings](https://dashboard.stripe.com/settings/user).\n\nStripe creates a new [guest customer](https://docs.stripe.com/payments/checkout/guest-customers) for one-time payments and a new [Customer](https://docs.stripe.com/api/customers) when selling a subscription or [saving a payment method for future use](https://docs.stripe.com/payment-links/customize#save-payment-details-for-future-use).\n\n[\n\n## Automatically handle fulfillment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#automatically-handle-fulfillment)\n\nYou can automatically handle fulfillment through a Stripe partner or programmatically with the Stripe API:\n\n*   **Automation with a Stripe partner:** To automate post-purchase activities like order fulfillment, emailing customers, and recording data to a spreadsheet, you can use a Stripe partner, like [Zapier](https://help.zapier.com/hc/articles/10821467221133), to connect Stripe data to other applications.\n    \n*   **Handle fulfillment programmatically:** If you’re interested in handling fulfillment programmatically using the Stripe API and [webhooks](https://docs.stripe.com/webhooks \"webhook\"), learn how to [fulfill orders after a customer pays](https://docs.stripe.com/checkout/fulfillment).\n    \n\n[](#change-confirmation-behavior)\n\nAfter a successful payment, your customer sees a localized confirmation message thanking them for their purchase. You can customize the confirmation message or redirect to a URL of your choice. To change the confirmation behavior on a payment link, click **After the payment** when [creating](https://dashboard.stripe.com/payment-links/create) or editing a payment link. Under **Confirmation page**, you can choose to replace the default message with a custom one.\n\nYou can also choose to redirect your customers to your website instead of providing a confirmation page. If you redirect your customers to your own confirmation page, you can include `{CHECKOUT_SESSION_ID}` in the redirect URL to dynamically pass the customer’s current Checkout Session ID. This is helpful if you want to tailor the success message on your website based on the information in the Checkout Session. You can also add [UTM codes](https://docs.stripe.com/payment-links/url-parameters#track-campaigns-with-utm-codes) as parameters in the query string of the payment link URL. The UTM codes are automatically added to your redirect URL when your customer completes a payment.\n\n[](#split-payment-with-a-connected-account)\n\nWith Stripe Connect, you can split a payment with a connected account. When [creating a new payment link](https://dashboard.stripe.com/payment-links/create), on the **After payment** tab, select the checkbox that says **Split the payment with a connected account**. Selecting this checkbox allows a connected account to automatically get paid when a customer buys the product through this payment link. Learn how to [use payment links with connected accounts](https://docs.stripe.com/connect/collect-then-transfer-guide?platform=no-code).\n\n[](#let-customers-manage-their-subscriptions)\n\nCreate a link that you can send to customers, letting them log in and manage their subscriptions using the [customer portal](https://docs.stripe.com/billing/subscriptions/customer-portal \"customer portal\").\n\n[](#view-payment-link-metrics)\n\nYou can see metrics such as views, sales, and revenue from a given payment link by clicking the **Payments and analytics** tab after selecting a payment link from the [list view](https://dashboard.stripe.com/payment-links). Note that Stripe can delay data for up to 18 hours, and isn’t available in test mode. Analytics aren’t supported for links that include recurring prices.\n\nYou can use this data to better understand how your link is performing and what its conversion rate is:\n\n*   **Views**: The number of times your payment link was opened.\n*   **Sales**: The number of times the payment link was used to complete a purchase.\n*   **Revenue**: The gross sales volume that the link generated and is always in your default currency regardless of the presentment currency. Stripe converts the amounts using the exchange rate on the day the payment occurs.",
  "title": "After a payment link payment | Stripe Documentation",
  "description": "Learn what you can do after receiving a payment link payment.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payment-links/api",
  "markdown": "# Use the API to create and manage payment links\n\n## Create and manage payment links with the API.\n\nYou can use the [Payment Links API](https://docs.stripe.com/api/payment_links/payment_links) to create a payment link that you can share with your customers. Stripe redirects customers who open this link to a Stripe-hosted payment page.\n\n[](#product-catalog)\n\nPayment Links use [Products](https://docs.stripe.com/api/products \"Products\") and [Prices](https://docs.stripe.com/api/prices \"Prices\") to model what your business is selling. To get started with Payment Links, [create a product](https://docs.stripe.com/api/products/create), then use that product to [create a price](https://docs.stripe.com/api/prices/create).\n\nPayment Links only supports _Standard pricing_ (charging the same price for each unit—either one time or recurring) and _Customer chooses price_ (letting your customer specify the price). It doesn’t support advanced options like package pricing, graduated pricing, or volume pricing. Additionally, _Customer choose prices_ currently doesn’t support recurring payments or donations.\n\nUse _Standard pricing_ to create a product or subscription with a fixed amount.\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d currency=usd \\  -d unit_amount=1000 \\  -d product=  {{PRODUCT_ID}}    `\n\n[](#create-link)\n\nTo create a payment link, pass in [line\\_items](https://docs.stripe.com/api/payment_links/payment_links/create#create_payment_link-line_items). Each line item contains a [price](https://docs.stripe.com/api/payment_links/payment_links/create#create_payment_link-line_items-price) and [quantity](https://docs.stripe.com/api/payment_links/payment_links/create#create_payment_link-line_items-quantity). Payment links can contain up to 20 line items when using Standard pricing and 1 line item when using _Customer chooses price_.\n\n`curl https://api.stripe.com/v1/payment_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1`\n\n[](#share-link)\n\nEach payment link contains a [url](https://docs.stripe.com/api/payment_links/payment_links/object#payment_link_object-url) that you can share with your customers through email, on social media, with a website link, in an app, or through other channels.\n\n[](#tracking-payments)\n\nWhen customers use a payment link to complete a payment, Stripe sends a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) webhook that you can use for fulfillment and reconciliation.\n\nMake sure to listen to additional webhooks in case you’ve enabled payment methods like bank debits or vouchers, which can take 2-14 days to confirm the payment. For more information, see our guide on [fulfilling orders after a customer pays](https://docs.stripe.com/checkout/fulfillment).\n\nAfter a customer completes a purchase, you can redirect them to a URL or display a custom message by setting [after\\_completion](https://docs.stripe.com/api/payment_links/payment_links/create#create_payment_link-after_completion) on the payment link.\n\n`curl https://api.stripe.com/v1/payment_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d \"after_completion[type]\"=redirect \\   --data-urlencode \"after_completion[redirect][url]\"=\"[https://example.com](https://example.com/)\"`\n\n[](#deactivate-link)\n\nAfter you’ve created a payment link, you can’t delete it. What you can do is deactivate a payment link by setting the [active](https://docs.stripe.com/api/payment_links/payment_links/update#update_payment_link-active) attribute to `false`.\n\nAfter you deactivate a link, customers can’t finalize purchases using the link anymore and are redirected to an expiration page. If you want to reuse a deactivated payment link, turn it back on by setting the [`active`](https://docs.stripe.com/api/payment_links/payment_links/update#update_payment_link-active) attribute to `true`.",
  "title": "Use the API to create and manage payment links | Stripe Documentation",
  "description": "Create and manage payment links with the API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods",
  "markdown": "# Dynamic payment methods | Stripe DocumentationThe Stripe Docs logo\n\n## Simplify your payment methods code by dynamically ordering and displaying payment methods.\n\nDynamic payment methods is part of the [default Stripe integration](https://stripe.com/blog/dynamic-payment-methods) and enables you to configure payment methods settings from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods)—no code required. When you use dynamic payment methods in a [Payment Element](https://docs.stripe.com/payments/payment-element) or [Checkout](https://docs.stripe.com/payments/checkout) integration, Stripe handles the logic for dynamically displaying the most relevant eligible payment methods to each customer to maximize conversion. Dynamic payment methods also unlocks [customization features](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods#customization-features) to help you customize and experiment with payment methods.\n\nUse dynamic payment methods to:\n\n*   Turn on and manage most payment methods in the Dashboard\n*   Eliminate the need to specify eligibility requirements for individual payment methods\n*   Dynamically order eligible payment methods to maximize conversion based on factors such as customer device, location, and local currency\n*   Set rules when payment methods are shown to buyers\n*   Run A/B Tests for new payment methods before rolling them out to buyers\n\n## Integration options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse [Checkout](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted) or [Payment Element](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements) with dynamic payment methods to have Stripe handle the logic for displaying eligible payment methods in your frontend for each transaction. If you have a platform account, follow our [Connect integration](https://docs.stripe.com/connect/dynamic-payment-methods).\n\n### Migrate to dynamic payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Dashboard-based customization features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAccess the following features with dynamic payment methods to control how and when payment methods render.\n\n| Feature | Description |\n| --- | --- |\n| [Payment method rules](https://docs.stripe.com/payments/payment-method-rules) | Customize how you display payment methods by setting targeting parameters based on amount or the buyer’s location. |\n| [A/B test payment methods](https://docs.stripe.com/payments/a-b-testing) | Turn on payment methods for a percentage of traffic, run an experiment, and see the resulting impact on conversion rate, average order value, and shift in volume from other payment methods. |\n| [Payment method configurations](https://docs.stripe.com/payments/payment-method-configurations) | Create different sets of payment methods for different checkout scenarios using complex logic, such as only showing specific payment methods for one-time purchases and another set for recurring purchases. |\n| [Embed the Payment methods settings component](https://docs.stripe.com/connect/embed-payment-method-settings) | Embed a payment method settings page directly into your website to allow your users to manage their payment methods. |",
  "title": "Dynamic payment methods | Stripe Documentation",
  "description": "Simplify your payment methods code by dynamically ordering and displaying payment methods.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/automatic-charging?dashboard-or-api=dashboard",
  "markdown": "# Automatic charging | Stripe DocumentationThe Stripe Docs logo\n\n## Have Stripe automatically charge a customer's stored payment method.\n\nStripe can automatically attempt to pay an [invoice](https://docs.stripe.com/api/invoices \"invoices\") if the customer has a payment method on file. You can automatically charge a customer when you’re [creating an invoice](https://dashboard.stripe.com/invoices/create) or through the [API](https://docs.stripe.com/api/invoices). When you automatically charge a payment method on file, Stripe doesn’t notify the customer about the invoice. However, if you want to send an email receipt, make sure that you enable the **Successful payments** option in your [Email settings](https://dashboard.stripe.com/settings/emails) and that you’ve added your customer’s email address.\n\n## Add a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo add a payment method, go to the [Customers page](https://dashboard.stripe.com/customers) and select a customer. Select **Add** in the **Payment methods** section to add a card or an ACH debit bank account. You can also add a payment method during invoice creation. If your customer uses multiple payment methods, click the overflow menu () next to the card to make it the default.",
  "title": "Automatic charging | Stripe Documentation",
  "description": "Have Stripe automatically charge a customer's stored payment method.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/hosted-invoice-page",
  "markdown": "# Hosted Invoice Page | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Hosted Invoice Page to securely collect payment from your customers.\n\nThe Hosted Invoice Page provides a secure, private URL where your customers can:\n\n*   View the details, amounts, and status of the invoice.\n*   Pay the invoice using any of the enabled payment methods.\n*   Download PDF copies of the invoice and receipt.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/hosted-invoice-page.3f79f6d4ded5d51047ae2b16270c2c42.png)\n\nA sample Hosted Invoice Page\n\nStripe assigns all invoices a unique URL that you can send to your customer. We host these invoices, which means you can securely collect payments without any extra implementation code.\n\n## Invoice URLs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you create and send an invoice, Stripe generates a unique URL for the Hosted Invoice Page. The URL includes a secure, long, and random identifier, resembling the following example:\n\n`https://invoice.stripe.com/i/acct_abcdefghijklmno/test_YWNjdF8xRGZ3UzJDbENJS2xqV3ZzLF9MNGJvMDBzY0xFQ2c1cG1QZzZ6Wk5jV0RXR2lOS1V6LDM0Mjk3NjEz0200wpYOWgBE?s=em`\n\nInvoice URLs expire 30 days after the due date. If the invoice doesn’t have a due date, the invoice expires 30 days after it finalizes. In all cases, the expiration window is never longer than 120 days.\n\n#### Note\n\nEven after expiration, any URLs that the Dashboard displays or a user retrieves through the API are guaranteed to be valid for at least 10 days.\n\nWhen a URL expires, it no longer loads the intended resource. Instead, Stripe redirects invoiced customers to a page that states that the URL has expired and to contact the merchant. This page also provides the merchant’s contact information.\n\n#### Note\n\nIf you sent an invoice through the Dashboard or API, any email recipients are automatically associated with that invoice. In this case, Stripe redirects the user to a recovery page where they can enter their email address to receive a new copy of the original email with non-expired links.\n\n## Invoice email links ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can configure the invoice email to include a link to the Hosted Invoice Page. When enabled, the Hosted Invoice Page URL appears in:\n\n*   Invoice emails as a payment link.\n*   The footer of invoice PDFs.\n*   The Invoice API response as [hosted\\_invoice\\_url](https://docs.stripe.com/api/invoices/object#invoice_object-hosted_invoice_url).\n\nTo enable the Hosted Invoice Page for all newly created invoices, select the checkbox for **Include a Stripe-hosted link to an invoice payment page in the invoice email** in the [Invoice template](https://dashboard.stripe.com/account/billing/invoice).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/hosted-invoice-page-default.c99683dc71960790d621bc6e8ba3e064.png)\n\nEnable the Hosted Invoice Page by default\n\nTo enable the Hosted Invoice Page on any individual invoice, click the gear icon and select **Email invoice with link** in the **Payment** section when you’re editing an invoice. Once selected, **Email invoice to customer with link to payment page** appears next to the radio button.\n\nYou can also generate a link to the Hosted Invoice Page by clicking the gear icon and selecting **Send invoice or link manually**. (We don’t send an email to your customer when you select this option). After you complete the invoice go to the **Details** section in your invoice’s details page. Next to **Payment page**, copy the link and send it manually.\n\n## Page customization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Hosted Invoice Page is customizable with your:\n\n*   Brand color\n*   Logo\n*   Icon\n\nYou can customize these [branding settings](https://dashboard.stripe.com/account/branding) in the Dashboard.\n\n## Set allowed payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFrom the Hosted Invoice Page, you can configure invoices to allow payment with one or more of the [supported payment methods](https://docs.stripe.com/invoicing/payment-methods). You can set defaults to apply to all of the newly created invoices from the [Invoice template](https://dashboard.stripe.com/account/billing/invoice). You can also select the payment method on a per-invoice basis when you’re [creating an invoice](https://dashboard.stripe.com/invoices/create) through the Dashboard.\n\nWith the Hosted Invoice Page, you can display the allowed payment method list to the customer. This gives them the option to choose a payment method that suits them best. Additionally, enabling the Hosted Invoice Page gives the customer the benefit of having Stripe handle complex payment and authentication flows (without any extra implementation effort from you).\n\n#### Note\n\nFor example, the [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") (SCA) regulation in Europe requires customers to confirm their payment with [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") (3DS). In this case, the Hosted Invoice Page displays the payment confirmation modal to your customer.\n\n## Payment method persistence ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCards, Bacs Direct Debit and BECS Direct Debit details that you enter on the Hosted Invoice Page are stored on the customer for use in subsequent payments. We don’t store single-use payment methods like iDEAL, Bancontact, Sofort, and giropay for reuse.\n\n## Public support information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInvoices include any public information that you specified under [Public business information](https://dashboard.stripe.com/settings/public), such as your support email address or business website. Using these settings, you can also choose to include a support phone number in customer-facing documents—like invoice PDFs and emails—or default to your business address.",
  "title": "Hosted Invoice Page | Stripe Documentation",
  "description": "Use the Hosted Invoice Page to securely collect payment from your customers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-methods/integration-options",
  "markdown": "# Payment method integration options | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the different ways to integrate payment methods.\n\nThe [payment methods](#payment-method-availability) you can offer depend on the currency, country, and Stripe products you integrate with. Use this guide to make sure your chosen payment methods work for your business and to determine how you want to add payment methods.\n\n## Choose your integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo decide which integration works best for you, consider:\n\n*   The Stripe products and checkout options you want to use or are currently using.\n*   The payment methods you want to enable.\n\n### No-code integrations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe offer several ways to get started with your integration using the Stripe Dashboard that don’t require any code:\n\n*   [Payment Links](https://docs.stripe.com/payment-links): Redirect your customers to a Stripe-hosted payment page. This page dynamically displays the payment methods most relevant to the currency and customer’s location based on the payment methods you enabled in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods).\n    \n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide): Allows you to automatically charge your customer’s payment method on file, or email them the invoice with or without a link to a payment page. You can also [create basic subscriptions](https://dashboard.stripe.com/subscriptions/create) from the Dashboard. To configure payment methods for invoices and subscriptions, see the [Invoice template](https://dashboard.stripe.com/settings/billing/invoice).\n    \n\n### Low-code integrations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re looking for more control over your payments integration, Stripe offers several unique low-code offerings:\n\n*   [Checkout](https://docs.stripe.com/payments/checkout): Lets you add an embeddable payment form to your site or redirect users to a Stripe-hosted checkout page. You can configure Checkout programmatically through the API or configure it in the Dashboard. Stripe selects enabled payment methods from your Dashboard by default. If you’re using the API, you can manually list payment methods using [payment method types](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_method_types).\n    \n*   [Payment Element](https://docs.stripe.com/payments/payment-element): A UI component that you embed into your website or app. When customers are ready to complete a purchase, you create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") or a [SetupIntent](https://docs.stripe.com/api/setup_intents \"Setup Intents API\") and configure how you want to display payment methods. For the Payment Element, you can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n    \n\nWith Checkout and the Payment Element, you can also use [subscriptions or recurring charges](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=stripe-hosted). To manage customer subscriptions and payment methods for invoices and subscriptions, see [Customer management](https://docs.stripe.com/customer-management). You can also list payment methods manually with [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n\n## Payment method support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayment methods only support certain currencies, countries, and products. Make sure your chosen payment methods work for your scenario. Depending on your payments flows, some [additional API options](#additional-api-supportability) might restrict the payment methods you can offer.\n\nIf you’re seeing that a specific payment method isn’t appearing for a customer, use the [Payment Methods review](https://dashboard.stripe.com/settings/payment_methods/review) page in the Dashboard. This tool lets you troubleshoot the issue using an existing PaymentIntent ID or custom field.\n\nAll payment methods have specific requirements for their use and may contain additional restrictions that you must comply with, such as marketing guidelines, additional prohibited and restricted businesses, and information about handling disputes and refunds. These usage requirements and restrictions are described in the [documentation](https://docs.stripe.com/payments/payment-methods/overview) for that payment method or in the applicable [payment terms](https://stripe.com/payment-terms/legal).\n\n### Country and currency support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRefer to the following table to see where each [payment method](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type) is supported and what presentment currencies it accepts. This table contains all of the supported currencies and countries for a given payment method. In some cases, not all of the countries listed can accept payments in all of the listed presentment currencies. For more details on exactly what currencies are accepted, see the individual payment method’s page.\n\n### Payment method availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Product support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRefer to the following tables to determine which payment methods are supported by each Stripe product:\n\n#### Checkout modes\n\nThere are three Checkout modes: [payment](https://docs.stripe.com/payments/accept-a-payment?platform=web), [subscription](https://docs.stripe.com/billing/subscriptions/build-subscriptions?platform=web&ui=stripe-hosted), and [setup](https://docs.stripe.com/payments/save-and-reuse?platform=web). Unless specified otherwise, the payment method is available in all modes or any that remain.\n\n### Bank debits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Bank redirects![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Bank transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Buy now, pay later![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Real-time payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Vouchers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Wallets![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Additional API support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following tables detail additional payment method API support:\n\n### Bank debits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Bank redirects![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Bank transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Buy now, pay later![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Real-time payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Vouchers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Wallets![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Add payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour customers see the available payment methods during the checkout process. You can either manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) or list payment methods manually in code. See the [Accept a payment](https://docs.stripe.com/payments/accept-a-payment) guide for detailed steps.\n\n### Use dynamic payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe dynamically displays the most relevant payment methods to your customers based on the payment method preferences you set in the Dashboard and eligibility factors such as transaction amount, currency, and payment flow. To enable and manage your payment method preferences, go to the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe enables certain payment methods for you by default and might enable additional payment methods after notifying you.\n\nUnless you have to list payment methods manually, we recommend using dynamic payment methods. Dynamic payment methods automatically determines whether to display payment methods according to set rules.\n\nSee [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) to learn more.\n\n### Manually list payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nListing payment methods manually requires some coding. Every payment method you want your PaymentIntent to accept must be added to `payment_method_types`. Unless your integration requires that you list payment methods manually, we recommend that you manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc: \\   -d success_url=\"https://example.com/success\" \\   -d cancel_url=\"https://example.com/cancel\" \\   -d \"line_items[0][price]\"=price_H5ggYwtDq4fbrJ \\   -d \"line_items[0][quantity]\"=2 \\   -d “payment_method_types[]”=bancontact\\   -d “payment_method_types[]”=card\\   -d “payment_method_types[]”=eps\\   -d “payment_method_types[]”=giropay\\   -d “payment_method_types[]”=ideal\\   -d “payment_method_types[]”=p24\\   -d “payment_method_types[]”=sepa_debit\\   ...   -d mode=payment`\n\nIf multiple payment methods are passed, Checkout dynamically reorders them to prioritize the most relevant payment methods based on the customer’s location and other characteristics. The payments acceptance page prioritizes showing payment methods known to increase conversion for your customer’s location while lower priority payment methods are hidden in an overflow menu.",
  "title": "Payment method integration options | Stripe Documentation",
  "description": "Learn about the different ways to integrate payment methods.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/automatic-collection",
  "markdown": "# Automatic collection | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Stripe's automatic recovery features for Invoicing.\n\nStripe provides a number of automated revenue recovery features for one-off invoices to help collect payments that might have failed otherwise. These include automatically updating your users’ saved cards, sending emails when a failed payment occurs, and retrying cards at strategic times.\n\n## Smart Retries ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsing machine learning, Smart Retries chooses the best times to retry failed payment attempts to increase the chance of successfully paying an invoice. The machine learning system behind Smart Retries uses time-dependent, dynamic signals, such as:\n\n*   The number of different devices that have presented a given payment method in the last _N_ hours.\n*   The best time to pay (payments made for debit cards in certain countries might be slightly more successful at 12:01 AM in local time zones).\n\nBased on a combination of these factors, Stripe intelligently assesses when to retry payments. We continuously learn from new purchaser behaviors and transactions, which provide for a more targeted approach over traditional rules-based payment retry logic. Any invoice with the [auto\\_advance](https://docs.stripe.com/api/invoices/create#create_invoice-auto_advance) attribute set to `true` goes through the Smart Retries flow (if enabled), regardless of the selected payment method.\n\nSmart Retries reattempts the charge according to your specifications for the number of retries and the maximum duration. You can also use [automations](https://docs.stripe.com/billing/automations) to create different retry policies for different customer segments.\n\nYou can override this behavior by [disabling Smart Retries](https://dashboard.stripe.com/revenue_recovery/retries) and defining your own custom retry rules. When you enable dunning, the [next\\_payment\\_attempt](https://docs.stripe.com/api/invoices/object#invoice_object-next_payment_attempt) attribute on the `invoice.payment_failed` [webhook](https://docs.stripe.com/webhooks \"webhook\") indicates when Stripe attempts the next collection.\n\n## Failed payment notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn the [Subscriptions and emails tab of your billing settings](https://dashboard.stripe.com/settings/billing/automatic), scroll to the **Manage failed payments for subscriptions** section. The setting **Send emails when card payments fail** turns on automatic customer emails for failed payments.\n\nIf a payment failure occurs on a one-off invoice and **Link to a Stripe-hosted page** is selected, Stripe sends a link to the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page) to the customer.\n\nYou can customize the color, icon, and logo of your customer emails and Stripe-hosted page in the [Branding settings](https://dashboard.stripe.com/settings/branding).\n\n### Customize the email message Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor failed payment emails, you can write your own email message to your customers instead of using the default email message. You’ll also need to use a verified [custom domain](https://docs.stripe.com/get-started/account/email-domain) to send emails from.\n\n1.  Click the **customize** link in the sentence below the **Send emails to customers to update failed card payment methods** option.\n    \n2.  Choose the **Use your own custom email** option.\n    \n3.  Read the email policy guidelines. By law, you can’t add promotional content without explicit consent from the customer.\n    \n4.  Fill out the contents of the email. As you enter information, you can see a preview of the email.\n    \n\n## Manage invoices sent to customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn the [Subscriptions and emails tab of your billing settings](https://dashboard.stripe.com/settings/billing/automatic), scroll to the **Manage invoices sent to customers** section to:\n\n*   **Email finalized invoices to customers**—You can turn this option on to always email your customers a finalized invoice. This setting only affects invoices where the [collection\\_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method) is set to `send_invoice`.\n*   **Change a past due invoice’s status**—You can mark an invoice as uncollectible if it’s past due by 30, 60, or 90 days. You can also leave the invoice past-due.\n*   **Automatically reconcile partial payments that meet a minimum**—You can instruct Stripe to mark an invoice as paid if ​​it’s partially paid within the set amount. For example, if the payment received from your customer is within 20 USD or less of the total (or at whatever amount you configure), then this setting applies a credit to the invoice for the outstanding amount. It then marks the invoice as paid.\n\n### Automatic reminders for one-off invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo turn on automatic reminders for unpaid, one-off invoices, navigate to the [Invoices tab of your billing settings](https://dashboard.stripe.com/settings/billing/invoice), scroll to the **Manage advanced invoicing features** section, and turn on **Send reminders if a one-off invoice hasn’t been paid**. For each reminder you want to send, click **Add reminder** and select a schedule from the dropdown list. You can schedule reminders for before, on, or after the invoice due date.",
  "title": "Automatic collection | Stripe Documentation",
  "description": "Learn about Stripe's automatic recovery features for Invoicing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/global-invoicing",
  "markdown": "# Global invoicing | Stripe DocumentationThe Stripe Docs logo\n\n## Set up invoices globally following best practices.\n\nThe invoice compliance process varies across different countries. Stripe provides best practices guides for full invoices in different countries around the world.",
  "title": "Global invoicing | Stripe Documentation",
  "description": "The invoice compliance process varies across different countries. Stripe provides best practices guides for full invoices in different countries around the world.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/elements/address-element",
  "markdown": "# Address Element | Stripe DocumentationThe Stripe Docs logo\n\nThe Address Element is an embeddable UI component for accepting complete addresses. Use it to collect shipping addresses, or when you need a complete billing address, such as for tax purposes.\n\n## Start with examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo see the Address Element in action, start with one of these examples:\n\n## Create an Address Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you create an Address Element, specify whether to use it in shipping or billing mode.\n\nIn shipping mode, the element does two things:\n\n*   Collect a shipping address.\n*   Offer the customer the option to use it as a billing address too.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = { /* appearance */ }; const options = { mode: 'shipping' }; const elements = stripe.elements({ clientSecret, appearance }); const addressElement = elements.create('address', options); addressElement.mount('#address-element');`\n\n### Use Address Element with other elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere can only be one Address Element per Elements group. If you need to collect both shipping and billing addresses, use the Address Element in Shipping mode and use the [Payment Element](https://docs.stripe.com/payments/payment-element) to collect only the necessary billing address details.\n\nWhen you use the Address Element with other elements, you can expect some automatic behavior when confirming the PaymentIntent or SetupIntent. The Address Element validates completeness upon confirming the PaymentIntent or SetupIntent and then displays errors for each field if there are any validation errors.\n\n## Use an address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Address Element automatically works with the [Payment](https://docs.stripe.com/payments/payment-element) or Express Checkout Element. When a customer provides an address and a payment method, Stripe combines them into a single [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") with the address in the correct field.\n\n### Automatic behavior![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe element’s default behavior depends on its mode.\n\nIn shipping mode, the address is stored in these fields:\n\n*   It appears in the [shipping](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-shipping) field.\n*   If the customer indicates it is also the billing address, it also appears in the [billing\\_details](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-payment_method_data-billing_details) field.\n\nTo enable combining information, create all elements from the same `Elements` object, as in this example:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = { /* appearance */ }; const options = { mode: 'shipping' }; const elements = stripe.elements({ clientSecret }); const addressElement = elements.create('address', options); const paymentElement = elements.create('payment'); addressElement.mount('#address-element'); paymentElement.mount('#payment-element');`\n\n### Custom behavior![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNormally, the Address Element’s default behavior is enough. But in a complex payment flow, you might need to write custom responses to the customer’s input. For information, see [Listen for address input](https://docs.stripe.com/elements/address-element/collect-addresses).\n\n## Autocomplete![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Address Element can autocomplete addresses for 25 countries. If your customer selects a supported country for their address, then they see the autocomplete options. These are the supported countries for autocomplete:\n\nAustralia\n\nBelgium\n\nBrazil\n\nCanada\n\nFrance\n\nGermany\n\nIndia\n\nIreland\n\nItaly\n\nJapan\n\nMalaysia\n\nMexico\n\nNetherlands\n\nNorway\n\nPhilippines\n\nPoland\n\nRussia\n\nSingapore\n\nSouth Africa\n\nSpain\n\nSweden\n\nSwitzerland\n\nTurkey\n\nUnited Kingdom\n\nUnited States\n\nIf you use the Address Element and the Payment Element together, Stripe enables autocomplete with no configuration required.\n\nIf you use the Address Element alone, you must use your own [Google Maps API Places Library key](https://developers.google.com/maps/documentation/javascript/places), which is managed separately from your Stripe account. Pass the key in the [autocomplete.apiKey](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options-autocomplete-apiKey) option.\n\n## Autofill with Link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Link](https://docs.stripe.com/payments/link) saves and autofills payment and shipping information. When a returning Link customer authenticates, Stripe autofills their shipping information in the Address element.\n\n![Create a payment form using multiple Elements](https://b.stripecdn.com/docs-statics-srv/assets/link-with-elements.f60af275f69b6e6e73c766d1f9928457.png)\n\nCreate a payment form using multiple Elements\n\nTo enable autofill, create all elements from the same `Elements` object, as in this example:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = { /* appearance */ }; const options = { mode: 'shipping' }; const elements = stripe.elements({ clientSecret }); const linkAuthElement = elements.create('linkAuthentication'); const addressElement = elements.create('address', options); const paymentElement = elements.create('payment'); linkAuthElement.mount('#link-auth-element'); addressElement.mount('#address-element'); paymentElement.mount('#payment-element');`\n\n## Appearance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the Appearance API to control the style of all elements. Choose a theme or update specific details.\n\n![Examples of light and dark modes for the address element.](https://b.stripecdn.com/docs-statics-srv/assets/address_appearance_example.c7884ea763b05e5881d65ed2b2afadbc.png)\n\nFor instance, choose the “flat” theme and override the primary text color.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = {   theme: 'flat',   variables: { colorPrimaryText: '#262626' } };`\n\nSee the [Appearance API](https://docs.stripe.com/elements/appearance-api) documentation for a full list of themes and variables.",
  "title": "Address Element | Stripe Documentation",
  "description": "Use the Address Element to collect complete billing and shipping addresses.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/elements/express-checkout-element",
  "markdown": "# Express Checkout Element | Stripe DocumentationThe Stripe Docs logo\n\n## Show multiple one-click payment buttons with a single component.\n\n![Add Link to the Express Checkout Element](https://b.stripecdn.com/docs-statics-srv/assets/link-in-express-checkout-element.67be6745e5a37c1c09074b0f43763cff.png)\n\nThe Express Checkout Element gives you a single integration for accepting payments through one-click payment buttons. Supported payment methods include [Link](https://docs.stripe.com/payments/link/what-is-link), [Apple Pay](https://docs.stripe.com/apple-pay), [Google Pay](https://docs.stripe.com/google-pay), [PayPal](https://docs.stripe.com/payments/paypal), and [Amazon Pay](https://docs.stripe.com/payments/amazon-pay).\n\nWith this integration, you can:\n\n*   Dynamically sort payment buttons based on a customer’s location.\n*   Add payment buttons without any frontend changes.\n*   Integrate Elements seamlessly by reusing an existing Elements instance to save time.\n\n[](#try-demo)\n\nIn the following demo, you can toggle some of the prebuilt options to change the background color, layout, size, and shipping address collection of the payment interface. The demo displays Google Pay and Apple Pay only on their available platforms. Payment Method buttons are only shown in their supported countries.\n\nIf you don’t see the demo, try viewing this page in a [supported browser](#supported-browsers).\n\n## Create an Express Checkout Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis code [creates](https://docs.stripe.com/js/element/express_checkout_element) an elements group with an Express Checkout Element and [mounts](https://docs.stripe.com/js/element/mount) it to the DOM.\n\n`const appearance = { /* appearance */ } const options = { /* options */ } const elements = stripe.elements({   mode: 'payment',   amount: 1099,   currency: 'usd',   appearance, }) const expressCheckoutElement = elements.create('expressCheckout', options) expressCheckoutElement.mount('#express-checkout-element')`\n\nMake sure the `#express-checkout-element` container has enough space to display the payment buttons by setting its width to at least `150px`.\n\n## Payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Express Checkout Element presents one-click payment methods that are active, supported, and set up.\n\n*   Some payment methods [require activation in the Dashboard](https://dashboard.stripe.com/settings/connect/payment_methods).\n*   Payment methods are only available when the customer uses a supported browser and pays in a supported currency.\n*   Some payment methods require setup actions from the customer. For example, a customer won’t see a Google Pay button if they don’t have Google Pay set up.\n\nThe element sorts payment methods by relevance to your customer.\n\nTo control these behaviors, you can [customize the payment methods](#customize-payment-methods).\n\n## Supported browsers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCertain payment methods work with specific browsers.\n\n|     | Apple Pay | Google Pay | Link | PayPal | Amazon Pay |\n| --- | --- | --- | --- | --- | --- |\n| Chrome1 |     |     |     |     |     |\n| Edge |     |     |     |     |     |\n| Firefox |     |     |     |     |     |\n| Opera |     |     |     |     |     |\n| Safari | 2   |     |     |     |     |\n| Chrome on iOS 16+ |     |     |     |     |     |\n| Firefox on iOS 16+ |     |     |     |     |     |\n| Edge on iOS 16+ |     |     |     |     |     |\n\n## Layout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, when the Express Checkout Element displays multiple buttons, it arranges the buttons in a grid based on available space, and shows an overflow menu if necessary.\n\nYou can override this default and specify a grid layout yourself with the [layout](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-layout) option.\n\n## Text![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can control a button’s text by selecting a [buttonType](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-buttonType). Each wallet offers its own types.\n\nLink only offers one button type, with the “Pay faster” call to action.\n\nWe attempt to detect your customer’s locale and use it to localize the button text. You can also specify a [locale](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-locale).\n\nThis example code includes the call to action “Buy” or “Buy now” for buttons that support it. Then, it specifies the locale `de` to get their German equivalents.\n\n`const expressCheckoutOptions = {   buttonType: {     applePay: 'buy',     googlePay: 'buy',     paypal: 'buynow'   } } const elements = stripe.elements({   locale: 'de',   mode: 'payment',`\n\n## Appearance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can’t fully customize the appearance of Express Checkout Element buttons because each payment method sets its own logo and brand colors. You can customize the following options:\n\n*   [Button height](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-buttonHeight)\n*   Border radius using variables with the [Appearance](https://docs.stripe.com/elements/appearance-api) API\n*   [Button themes](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-buttonTheme)\n\nThis example code sets up an elements group with a light theme and 36px border radius, makes buttons 50px tall, and overrides the theme to use the white-outline version of the Apple Pay button.\n\n`const appearance = {   theme: 'stripe',   variables: {     borderRadius: '36px',   } } const expressCheckoutOptions = {   buttonHeight: '50',   buttonTheme: {`\n\nWe support the following themes:\n\nLink has a single button theme, which is readable on either a light or a dark background.\n\n## Customize payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can’t specify which payment methods to display. For example, you can’t force a Google Pay button to appear if your customer’s device doesn’t support Google Pay.\n\nBut you can customize payment method behavior in various ways, such as:\n\n*   You can activate or deactivate payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods).\n*   You can override Stripe’s default logic of sorting payment methods by relevance. Use the [paymentMethodOrder](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-paymentMethodOrder) option to set your preferred order.\n*   If there is too little room in the layout, low-relevance payment methods might appear in an overflow menu. Customize when the menu appears using the [layout](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-layout) option.\n*   To prevent Apple Pay or Google Pay from appearing, set [paymentMethods.applePay](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-paymentMethods-applePay) or [paymentMethods.googlePay](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-paymentMethods-applePay) to `never`.\n*   To allow Apple Pay or Google Pay to appear when they’re not set up, set [paymentMethods.applePay](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-paymentMethods-applePay) or [paymentMethods.googlePay](https://docs.stripe.com/js/elements_object/create_express_checkout_element#express_checkout_element_create-options-paymentMethods-applePay) to `always`. This still won’t force them to appear on unsupported platforms, or when the payment is in an unsupported currency.\n\nRegulations in [Finland](https://support.stripe.com/questions/payment-method-legislation-in-finland) and [Sweden](https://support.stripe.com/questions/payment-method-legislation-in-sweden) require you to present debit payment methods first before showing credit payment methods at checkout in these countries.",
  "title": "Express Checkout Element | Stripe Documentation",
  "description": "Show multiple one-click payment buttons with a single component.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-element",
  "markdown": "# Stripe Payment Element | Stripe DocumentationThe Stripe Docs logo\n\n## Accept payment methods from around the globe with a secure, embeddable UI component.\n\n#### Interested in using Stripe Tax, discounts, shipping, or currency conversion?\n\nWe’re developing a Payment Element integration that manages tax, discounts, shipping, and currency conversion. Read the [Build a checkout page](https://docs.stripe.com/checkout/custom-checkout) guide to learn more.\n\nThe Payment Element is a UI component for the web that accepts 40+ payment methods, validates input, and handles errors. Use it alone or with other elements in your web app’s frontend.\n\nThis demo only displays Google Pay or Apple Pay if you have an active card with either wallet.\n\nTo try the Payment Element for yourself, start with one of these examples:\n\n## Create a Payment Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis code [creates](https://docs.stripe.com/js/elements_object/create_payment_element) a Payment Element and [mounts](https://docs.stripe.com/js/element/mount) it to the DOM:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = { /* appearance */ }; const options = { /* options */ }; const elements = stripe.elements({ clientSecret, appearance }); const paymentElement = elements.create('payment', options); paymentElement.mount('#payment-element');`\n\nAccepting payments with the Payment Element requires additional backend code. See the [quickstart](https://docs.stripe.com/payments/quickstart) or [sample app](https://github.com/stripe-samples/accept-a-payment/tree/main/payment-element) to learn how this works.\n\n## Combine elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element interoperates with other elements. For instance, this form uses one additional element to [autofill checkout details](https://docs.stripe.com/payments/link), and another to [collect the shipping address](https://docs.stripe.com/elements/address-element).\n\n![A form with contact info, shipping address, and payment fields. The contact info is labeled Link Authentication Element, the shipping address is labeled Address Element, and the payment fields are labeled Payment Element](https://b.stripecdn.com/docs-statics-srv/assets/link-with-elements.f60af275f69b6e6e73c766d1f9928457.png)\n\nFor the complete code for this Link example, see [Add Link to an Elements integration](https://docs.stripe.com/payments/link/add-link-elements-integration).\n\n## Payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe enables certain payment methods for you by default. We might also enable additional payment methods after notifying you. Use the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) to enable or disable payment methods at any time. With the Payment Element, you can use [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) to:\n\n*   Manage payment methods in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods) without coding\n*   Dynamically display the most relevant payment options based on factors such as location, currency, and transaction amount\n\nFor instance, if a customer in Germany is paying in EUR, they see all the active payment methods that accept EUR, starting with ones that are widely used in Germany.\n\n![A variety of payment methods.](https://b.stripecdn.com/docs-statics-srv/assets/payment-element-methods.26cae03aff199d6f02b0d92bd324c219.png)\n\nShow payment methods in order of relevance to your customer\n\nTo further customize how payment methods render, such as by filtering card brands that you don’t want to support, see [Customize payment methods](https://docs.stripe.com/payments/customize-payment-methods). To add payment methods integrated outside of Stripe, see [External payment methods](https://docs.stripe.com/payments/external-payment-methods).\n\nIf your integration requires you to list payment methods manually, see [Manually list payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#listing-payment-methods-manually).\n\n## Layout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can customize the Payment Element’s layout to fit your checkout flow. The following image is the same Payment Element rendered using different layout configurations.\n\n![Examples of the three checkout forms. The image shows the tab option, where customers pick from payment methods shown as tabs or the two accordion options, where payment methods are vertically listed. You can choose to either display radio buttons or not in the accordion view. ](https://b.stripecdn.com/docs-statics-srv/assets/pe_layout_example.525f78bcb99b95e49be92e5dd34df439.png)\n\nPayment Element with different layouts.\n\nThe tabs layout displays payment methods horizontally using tabs. To use this layout, set the value for [layout.type](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-layout-type) to `tabs`. You can also specify other properties, such as [layout.defaultCollapsed](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-layout-defaultCollapsed).\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = { /* appearance */ }; const options = {   layout: {     type: 'tabs',     defaultCollapsed: false,   } };`\n\n## Appearance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Appearance API to control the style of all elements. Choose a theme or update specific details.\n\n![Examples of light and dark modes for the payment element checkout form.](https://b.stripecdn.com/docs-statics-srv/assets/appearance_example.e076cc750983bf552baf26c305e7fc90.png)\n\nFor instance, choose the “flat” theme and override the primary text color.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = {   theme: 'flat',   variables: { colorPrimaryText: '#262626' } };`\n\nSee the [Appearance API](https://docs.stripe.com/elements/appearance-api) documentation for a full list of themes and variables.\n\n## Options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe elements support more options than these. For instance, display your business name using the [business](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-business) option.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = { /* appearance */}; const options = {   business: \"RocketRides\" };`\n\nThe Payment Element supports the following options. See each options’s reference entry for more information.\n\n|     |     |\n| --- | --- |\n| [layout](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-layout) | Layout for the Payment Element. |\n| [defaultValues](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-defaultValues) | Initial customer information to display in the Payment Element. |\n| [business](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-business) | Information about your business to display in the Payment Element. |\n| [paymentMethodOrder](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-business) | Order to list payment methods in. |\n| [fields](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-business) | Whether to display certain fields. |\n| [readOnly](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-readOnly) | Whether payment details can be changed. |\n| [terms](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-terms) | Whether mandates or other legal agreements are displayed in the Payment Element. The default behavior is to show them only when necessary. |\n| [wallets](https://docs.stripe.com/js/elements_object/create_payment_element) | Whether to show wallets like Apple Pay or Google Pay. The default is to show them when possible. |",
  "title": "Stripe Payment Element | Stripe Documentation",
  "description": "Accept payment methods from around the globe with a secure, embeddable UI component.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-method-messaging",
  "markdown": "# Payment Method Messaging Element | Stripe DocumentationThe Stripe Docs logo\n\n## Automatically explain buy now, pay later payment options.\n\nThe Payment Method Messaging Element is a UI component for informing a customer about available buy-now-pay-later plans. It automatically determines the available plans and conditions, generates a localized description, and displays it in your form’s theme.\n\n![Prince of Persia book](https://b.stripecdn.com/docs-statics-srv/assets/c2815bda1cf26cedf5b8603b4667acae.png)\n\nThe Making of Prince of Persia: Journals 1985-1993\n\nJordan Mechner\n\n## Create and mount the Payment Method Messaging Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse Stripe Elements to include the [Payment Method Messaging](https://docs.stripe.com/js/elements_object/create_element?type=paymentMethodMessaging) Element on your site.\n\n1.  Add the Stripe.js script on your page by adding it to the `head` of your HTML file:\n    \n2.  Create a placeholder element in your page where you want to mount the Payment Method Messaging Element:\n    \n    `<div id=\"payment-method-messaging-element\"></div>`\n    \n3.  On your product, cart, and payment pages, include the following code to create an instance of Stripe.js ([with locale](https://docs.stripe.com/js/appendix/supported_locales)) and mount the Payment Method Messaging Element:\n    \n    `// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n    \n    `'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n    \n    `); const elements = stripe.elements(); const options = {   amount: 9900, // $99.00 USD   currency: 'USD',   // the country that the end-buyer is in   countryCode: 'US', }; const PaymentMessageElement =   elements.create('paymentMethodMessaging', options); PaymentMessageElement.mount('#payment-method-messaging-element');`\n    \n\n#### Caution\n\nIf your integration requires you to list payment methods manually, see [Customize payment methods](#customize-payment-methods).\n\n## Dynamic display![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe element dynamically displays payment plans that the customer is eligible for. These depend on the customer’s location and currency. They also depend on the amount of the payment, as in this example:\n\nWhen available, the interest-bearing loan payment plans are shown on a separate line from the pay-in-x plans, which might increase the space needed for the element.\n\n## Customize Payment Methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you use [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), the Payment Method Messaging Element automatically pulls your payment method preferences from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) to dynamically show the most relevant payment methods to your customers. Alternatively, you can list payment methods manually using `paymentMethodTypes`. The Payment Method Messaging Element still only displays plans that the customer is eligible for based on their location, the currency, and the amount of the payment.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const elements = stripe.elements(); const options = {   amount: 9900, // $99.00 USD   currency: 'USD',   paymentMethodTypes: ['klarna', 'afterpay_clearpay', 'affirm'],   // the country that the end-buyer is in   countryCode: 'US', }; const PaymentMessageElement =   elements.create('paymentMethodMessaging', options); PaymentMessageElement.mount('#payment-method-messaging-element');`\n\n## Info modal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen the customer selects the info icon (ⓘ), the Payment Method Messaging Element displays a modal with details about buy now, pay later payment plans.\n\n![The info modal](https://b.stripecdn.com/docs-statics-srv/assets/pmme-learn-more.eb5802e4d0caeb5469ee11fcfbc26c09.png)\n\nA preview of the info modal\n\nThe modal includes:\n\n*   A step-by-step overview of how to use a buy now, pay later payment method\n*   A summary of terms for each available payment plan\n*   A link to the full terms for each available payment plan\n\n## Supported plans![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Method Messaging Element supports these payment methods and payment plans:\n\n| Klarna | Afterpay | Affirm |\n| --- | --- | --- |\n| *   Pay in 3<br>*   Pay in 4<br>*   Pay in 30 days<br>*   Pay in 60 days<br>*   Financing<br>*   Pay now | *   Pay in 4<br>*   Interest-bearing loan installments | *   Pay in 4<br>*   0% interest loan installments<br>*   Interest-bearing loan installments |\n\nIt supports these values for `countryCode`: `AT, AU, BE, CA, CZ, DE, DK, ES, FI, FR, GB, GR, IE, IT, NL, NO, NZ, PL, PT, RO, SE, US`.\n\nIt supports these values for `currency`: `AUD, CAD, CZN, DKK, EUR, GBP, NOK, NZD, PLN, RON, SEK, USD`.\n\n#### Caution\n\nMessaging does not render if the `countryCode` and `currency` combination passed has no eligible payment plans.\n\n## Appearance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Appearance API](https://docs.stripe.com/elements/appearance-api) to customize the font and logo of your messaging. You can select a [theme](https://docs.stripe.com/elements/appearance-api?platform=web#theme) as in the example below.\n\nUse [variables](https://docs.stripe.com/elements/appearance-api#variables) for additional customization.\n\n`const appearance = {   variables: {     colorText: 'rgb(84, 51, 255)',     colorTextSecondary: 'rgb(28, 198, 255)', // info icon color     fontSizeBase: '16px',     spacingUnit: '10px',     fontWeightMedium: 'bolder',     fontFamily: 'Ideal Sans, system-ui, sans-serif',   },   rules: {     '.PaymentMethodMessaging': {         textAlign: 'right',     }   } };`\n\n[](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).\n\nThe Payment Method Messaging Element is a tool that allows you to message various buy now, pay later payment options to your customers. You’re responsible for compliance with applicable laws, rules, and regulations regarding the promotion of buy now, pay later payment options.",
  "title": "Payment Method Messaging Element | Stripe Documentation",
  "description": "Automatically explain buy now, pay later payment options.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/elements/appearance-api",
  "markdown": "# Elements Appearance API | Stripe DocumentationThe Stripe Docs logo\n\n`-moz-osx-font-smoothing``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``-webkit-font-smoothing``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``-webkit-text-fill-color``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``backgroundColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `BlockDivider`, `Button`, `CheckboxInput`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `InputDivider`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `Switch`, `Tab``border``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottom``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomLeftRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomRightRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderBottomWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderLeft``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderLeftColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderLeftStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderLeftWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `InputCloseIcon`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TermsLink`, `TermsText`, `Text``borderRight``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderRightColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderRightStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderRightWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTop``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopColor``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopLeftRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopRightRadius``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopStyle``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderTopWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``borderWidth``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Switch`, `SwitchControl`, `Tab`, `TermsText`, `Text``boxShadow``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `InputCloseIcon`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TermsLink``color``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabIcon`, `TabLabel`, `TermsLink`, `TermsText`, `Text``fill``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `SwitchControl`, `Tab`, `TabIcon``fontFamily``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``fontSize``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Switch`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``fontVariant``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``fontWeight``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``letterSpacing``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``lineHeight``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``margin``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``marginBottom``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``marginLeft``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``marginRight``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``marginTop``Action`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `MenuAction`, `PickerAction`, `PickerItem`, `Tab``opacity``Label``outline``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `InputCloseIcon`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TermsLink``outlineOffset``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Input`, `InputCloseIcon`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TermsLink``padding``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``paddingBottom``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``paddingLeft``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``paddingRight``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``paddingTop``AccordionItem`, `Action`, `Block`, `BlockAction`, `Button`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Menu`, `MenuAction`, `MenuIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `Tab`, `TabIcon`, `TabLabel`, `TermsText`, `Text``textDecoration``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``textShadow``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``textTransform``AccordionItem`, `Action`, `BlockAction`, `Button`, `Checkbox`, `CheckboxLabel`, `CodeInput`, `DropdownItem`, `Error`, `Input`, `Label`, `Link`, `MenuAction`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Tab`, `TabLabel`, `TermsLink`, `TermsText`, `Text``transition``Action`, `Block`, `BlockAction`, `Button`, `CheckboxInput`, `CheckboxLabel`, `CodeInput`, `Dropdown`, `DropdownItem`, `Error`, `Icon`, `Input`, `InputCloseIcon`, `Label`, `Link`, `MenuAction`, `MenuIcon`, `PasscodeCloseIcon`, `PasscodeShowIcon`, `PickerAction`, `PickerItem`, `RedirectText`, `SecondaryLink`, `Switch`, `SwitchControl`, `Tab`, `TabIcon`, `TabLabel`, `TermsLink`, `TermsText`, `Text`",
  "title": "Elements Appearance API | Stripe Documentation",
  "description": "Customize the look and feel of Elements to match the design of your site.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/quickstart",
  "markdown": "# Custom payment flow | Stripe DocumentationThe Stripe Docs logo\n\nSearch the docs or ask a question",
  "title": "Custom payment flow | Stripe Documentation",
  "description": "Learn how to embed a custom Stripe payment form in your website or application. Build a checkout form with Elements to complete a payment using various payment methods.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-card-element-comparison",
  "markdown": "# Payment Element and Card Element comparison\n\n## Learn more about the Payment Element and Card Element so you can decide which to use in your integration.\n\nPreviously, each payment method (cards, iDEAL, etc.) required integrating a separate Element. Now, you can use the Payment Element to accept payments from one or multiple payment methods. Since this also includes cards, you have the option to integrate the Card Element or the Payment Element to accept card payments.\n\nFor most users, the Payment Element is the best option to process cards. The integration effort is the same as the Card Element and it supports all the common payment flows. It also gives you instant access to additional payment methods, including Google Pay and Apple Pay. Accepting more [payment methods](https://docs.stripe.com/payments/payment-methods/overview) can help your business expand its global reach and improve checkout conversion.\n\nIf you’re already using the [Card Element](https://docs.stripe.com/js/element/other_element?type=card) and want to migrate to the [Payment Element](https://docs.stripe.com/js/element/payment_element), follow our [migration guide](https://docs.stripe.com/payments/payment-element/migration).\n\n#### Note\n\nYou can have a single line [Card Element](https://docs.stripe.com/js/element/other_element?type=card) or use split Elements, such as [Card Number](https://docs.stripe.com/js/element/other_element?type=cardNumber), [Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry), and [CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc). When referring to the Card Element, the information below applies to both styles.\n\n| Features | Payment Element | Card Element |\n| --- | --- | --- |\n| Accepts card payments |     |     |\n| Accepts card payments using Wallets (e.g., Apple Pay, Google Pay) |     |     |\n| Accepts payments with other payment methods |     |     |\n| Enables faster checkout with [Link](https://docs.stripe.com/payments/link) |     |     |\n| Customizable look and feel |     |     |\n| Handles all [Stripe supported card brands](https://docs.stripe.com/payments/cards#supported-card-brands) |     |     |\n| Handles [3D Secure authentication](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") |     |     |\n| Input style\\* | Split | Split and single-line |\n\n_\\* Using split input fields is more accessible than using a single line input_\n\n## Advanced scenarios![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want to use the Card Element, see our guide on [accepting a payment](https://docs.stripe.com/payments/card-element).",
  "title": "Payment Element and Card Element comparison | Stripe Documentation",
  "description": "Learn more about the Payment Element and Card Element so you can decide which to use in your integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/products",
  "markdown": "# Explore all products | Stripe DocumentationThe Stripe Docs logo\n\n## Browse our guides and examples by product area.\n\nPayments\n\n[\n\nPaymentsOnline payments\n\n\n\n](https://docs.stripe.com/payments)[\n\nTerminalIn-person and omnichannel payments\n\n\n\n](https://docs.stripe.com/terminal)[\n\nConnectPayments for platforms\n\n\n\n](https://docs.stripe.com/connect)[\n\nRadarFraud and risk management\n\n\n\n](https://docs.stripe.com/radar)[\n\nClimateCarbon removal\n\n\n\n](https://docs.stripe.com/climate/faqs)[\n\nIdentityOnline identity verification\n\n\n\n](https://docs.stripe.com/identity)[\n\nFinancial ConnectionsConnect users' financial accounts\n\n\n\n](https://docs.stripe.com/financial-connections)\n\nFinance automation\n\n[\n\nBillingSubscriptions and recurring payments\n\n\n\n](https://docs.stripe.com/billing)[\n\nTaxSales tax and VAT automation\n\n\n\n](https://docs.stripe.com/tax)[\n\nRevenue RecognitionAccounting automation\n\n\n\n](https://docs.stripe.com/billing/revenue-recognition)[\n\nSigmaCustom reports\n\n\n\n](https://docs.stripe.com/stripe-data/access-data-in-dashboard)[\n\nData PipelineData warehouse sync\n\n\n\n](https://docs.stripe.com/stripe-data/access-data-in-warehouse)[\n\nAtlasStartup incorporation\n\n\n\n](https://docs.stripe.com/atlas)\n\nBanking as a service\n\n[\n\nIssuingCard creation\n\n\n\n](https://docs.stripe.com/issuing)[\n\nTreasuryBuilding blocks for financial services\n\n\n\n](https://docs.stripe.com/treasury)[\n\nCapitalBusiness financing\n\n\n\n](https://docs.stripe.com/capital/how-stripe-capital-works)\n\nPrebuilt components\n\n[\n\nPayment LinksNo-code payments\n\n\n\n](https://docs.stripe.com/payments/payment-links)[\n\nCheckoutPrebuilt, Stripe-hosted checkout page\n\n\n\n](https://docs.stripe.com/payments/checkout)[\n\nElementsSecure frontend UI components\n\n\n\n](https://docs.stripe.com/payments/elements)\n\nNeed help? [Contact Support](https://support.stripe.com/).\n\nJoin our [early access program](https://insiders.stripe.dev/).\n\nCheck out our [product changelog](https://stripe.com/blog/changelog).\n\nQuestions? [Contact Sales](https://stripe.com/contact/sales).\n\nPowered by [Markdoc](https://markdoc.dev/)\n\nSign up for developer updates:\n\nYou can unsubscribe at any time. Read our [privacy policy](https://stripe.com/privacy).",
  "title": "Explore all products | Stripe Documentation",
  "description": "Browse our guides and examples by product area.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/element/other_element",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/get-started/subscription-migrations",
  "markdown": "# Migrate your subscriptions to Stripe\n\n## Successfully migrate your existing subscriptions to Stripe\n\nYou can import existing [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") from third-party billing systems (such as Zuora, Recurly, Chargify, or Chargebee) into Stripe Billing. You can also migrate subscriptions from an in-house billing system or from a different Stripe account.\n\nTo begin migration, see [Migrate subscriptions to Stripe Billing](https://docs.stripe.com/billing/subscriptions/migrate-subscriptions).",
  "title": "Migrate your subscriptions to Stripe | Stripe Documentation",
  "description": "Successfully migrate your existing subscriptions to Stripe",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/dashboard/mobile",
  "markdown": "# Stripe Dashboard mobile app | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use the mobile app version of the Stripe Dashboard.\n\nStripe offers a mobile application to access the Dashboard for both iOS and Android devices. Use the app to view business metrics, track and manage payments and customers, and initiate payouts. You can also accept in-person payments (such as Tap to Pay), create payment links, basic invoices, and subscriptions.\n\n## Download the mobile app![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  If you haven’t already, [create a Stripe account](https://dashboard.stripe.com/register). You must have an active Stripe account to use the app.\n2.  Enable [two-factor authentication](https://support.stripe.com/questions/update-the-phone-number-for-two-step-authentication), and [verify your phone number](https://dashboard.stripe.com/settings/user) in the Dashboard.\n3.  Download the app based on your device:\n    *   [iOS on App Store](https://apps.apple.com/app/apple-store/id978516833?pt=91215812&ct=stripe-docs-mobile&mt=8)\n    *   [Android on Google Play](https://play.google.com/store/apps/details?id=com.stripe.android.dashboard&pli=1)\n\n## App capabilities![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe app is available in 14 languages, and automatically defaults to the device language set in your system preferences. If you manage a [Connect](https://docs.stripe.com/connect) business, the app is also available to connected accounts that have full access to the Stripe Dashboard.\n\n|     |     |\n| --- | --- |\n| [Monitor your business](https://docs.stripe.com/dashboard/mobile#monitor-business-metrics) | *   Dashboard charts<br>*   Payment and customer list, and detail screens<br>*   Push notifications for new payments, alerts, and daily summary<br>*   Search across your entire business<br>*   iOS lock screen widgets<br>*   Android home screen widgets |\n| [Accept online or in-person payments](https://docs.stripe.com/dashboard/mobile#accept-payments-on-mobile) | *   Tap to pay<br>*   Payment links (iOS only)<br>*   Invoices (basic creation only)<br>*   Subscriptions (iOS only)<br>*   Manual card entry |\n| [Manage payments](https://docs.stripe.com/dashboard/mobile#manage-payments) | *   Issue refunds<br>*   Activate, deactivate, or share payment links (iOS only)<br>*   Cancel a subscription (iOS only)<br>*   Send and view receipts |\n| [Create payouts](https://docs.stripe.com/dashboard/mobile#create-and-manage-payouts) | *   View balances<br>*   Initiate an instant or standard payout<br>*   Track the status of bank transfers |\n| [Create and manage customers](https://docs.stripe.com/dashboard/mobile#create-and-manage-customers) | *   Create or edit a customer<br>*   Add a card on file (iOS only)<br>*   Send an email |\n\n### Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe app only displays live mode transactions, and mobile app users can’t use test mode or view test data. Stripe users with the **View only** role can’t create payments, refunds, or payouts in the app. Inactive Stripe accounts and users with the **Support specialist** role can’t log in to the app. For more information, see [User roles](https://docs.stripe.com/get-started/account/teams/roles).\n\n## Monitor business metrics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe app’s home page has various charts providing account information. You can customize this page to stay informed about your financial data.\n\nThe Dashboard displays data in your default currency. If you receive payments in multiple currencies, Stripe home charts convert these to your default currency using sample exchange rates. These conversions are estimates and won’t exactly match with settled amounts because of fluctuating exchange rates.\n\n![Stripe home charts for business metrics.](https://b.stripecdn.com/docs-statics-srv/assets/mobile-app-metrics.8a84e7d07defcdf19b3074011cdfcf59.png)\n\nMobile app metrics\n\nTo explore and manage available charts for iOS:\n\n1.  Tap **Edit** next to the **Reports overview** title.\n2.  Add, remove, or reorder charts as needed.\n\nTo explore and manage available charts for Android:\n\n1.  On the **Home** tab, scroll down to the bottom, and click **Add or edit charts**.\n2.  Add, remove, or reorder charts as needed.\n\n### Push notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPush notifications are messages sent directly to a user’s device from a mobile app. To [enable push notifications from the app](https://support.stripe.com/questions/enabling-notifications-on-the-stripe-dashboard-mobile-app), you must allow notifications from Stripe in the settings of your phone.\n\nTypes of notifications include:\n\n*   Daily summary\n*   New payments\n*   New customers\n*   Disputed payments\n*   Deposited transfers\n\n### Widgets![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWidgets are available on [iOS](https://support.apple.com/guide/iphone/add-edit-and-remove-widgets-iphb8f1bf206/17.0/ios/17.0) and [Android](https://developer.android.com/develop/ui/views/appwidgets/overview) to provide a faster way to manage your business metrics.\n\nTo add widgets to your iOS lock screen:\n\n1.  Touch and hold the **Lock Screen** until **Customize** button appears at the bottom of the screen\n2.  Tap **Customize**, then tap **Lock Screen**.\n3.  Select any of the 17+ metrics, and set the time range and account you want.\n4.  Tap **Add** or **Done**.\n\n| Widget type | iOS | Android |\n| --- | --- | --- |\n| Home |     | 4 metric widgets, such as:<br><br>*   Daily gross volume<br>*   Daily new payments<br>*   Daily new customers<br>*   Daily net volume |\n| Lock screen | 17 metric widgets, such as:<br><br>*   Monthly recurring revenue<br>*   Net volume from new sales<br>*   High risk payments<br>*   Dispute activity |     |\n\n## Accept payments on mobile![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can accept and manage in-person or online payments from the Stripe Dashboard mobile app, such as:\n\n| Payment capability | Description | iOS | Android |\n| --- | --- | --- | --- |\n| [Tap to pay](https://docs.stripe.com/no-code/tap-to-pay) | Accept in-person payments through a contactless card without needing a hardware reader |     |     |\n| [Manual card entry](https://support.stripe.com/questions/b7bd8ea6-d20c-40f8-a273-4d6c4902957a) | A transaction where you enter a customer’s card details and process it in the Stripe Dashboard |     |     |\n| [Invoices](https://docs.stripe.com/no-code/invoices) | Use invoices to collect one-time or recurring payments from a specific customer. |     |     |\n| [Payment links](https://docs.stripe.com/no-code/payment-links) (including QR codes) | Reusable links that take your customers to a prebuilt checkout page |     |     |\n| [Subscriptions](https://docs.stripe.com/no-code/subscriptions) | Recurring payments for your products or services |     |     |\n\nTo accept payments on mobile:\n\n1.  Verify if your [user role](https://docs.stripe.com/get-started/account/teams/roles) can accept payments. Users with the **Support specialist** and **View-only** roles can’t accept payments.\n2.  Confirm if your country [accepts in-person payment features](https://docs.stripe.com/terminal/overview#availability).\n3.  If you haven’t already, enable [2FA](https://support.stripe.com/questions/update-the-phone-number-for-two-step-authentication), and [verify your phone number](https://dashboard.stripe.com/settings/user).\n4.  Open the Stripe Dashboard mobile app, and tap the plus symbol ().\n5.  Select either:\n    *   **Charge a card or send an invoice**: To accept **[Tap to pay](https://docs.stripe.com/no-code/tap-to-pay)**, **Hosted Invoice**, or **Manually Charge Card**.\n    *   **Create a payment link**: To share a link or a QR code to a customer\n\n#### Note\n\nIf you want to accept a subscription: Navigate to the **Customers** tab, select a customer, and then tap the **create icon (+)** icon in the subscription row. Alternatively, tap the overflow menu (), and select **Create subscription**. You can only select existing products with a recurring price.\n\n## Manage payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can manage payments from your app:\n\n### Issue a refund![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Tap the **Payments** tab.\n2.  Select a successful payment.\n3.  Navigate to the action bar at the bottom, and tap **Refund**.\n4.  Enter the amount you want to refund, and select if you want to make a partial refund.\n\n### Send and view receipts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Tap the **Payments** tab.\n2.  Select a successful payment.\n3.  Navigate to the action bar at the bottom, tap the overflow menu (), and select **View receipt** or **Send receipt**. You can also send a receipt directly after accepting a Tap to Pay payment from the success screen. After you complete the payment, tap **Send receipt**.\n\n1.  Tap the **Payments** tab.\n2.  Tap **Payment Links**, and select the active payment link you want to change.\n3.  You can copy the link, generate a QR code, or open the payment link in the web Dashboard. If you deactivate a payment link, it immediately deactivates without a confirmation prompt. If you deactivate a payment link by accident, reactivate it by tapping **Activate** in the action bar at the bottom of the screen.\n\n### Cancel a subscription (iOS only)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Tap the **Payments** tab.\n2.  Tap **Subscriptions**, and select an active subscription.\n3.  Navigate to the action bar at the bottom, and tap **Cancel subscription**.\n4.  Confirm if you want to cancel the subscription immediately or at the end of the billing period.\n\n## Create and manage payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Verify you have a [debit card or external account linked to your Stripe account](https://docs.stripe.com/get-started/account/linked-external-accounts#link-financial-account).\n    *   Currently, you can only link these accounts through the [web version](https://dashboard.stripe.com/settings/payouts) of the Stripe Dashboard.\n    *   If you want to use instant payouts, use a debit card or bank account that [supports instant payouts](https://docs.stripe.com/payouts/instant-payouts-banks).\n2.  Open the Stripe Dashboard mobile app on your device and log in.\n3.  Go to the **Balances** tab at the bottom of the screen. Alternatively, you can tap the plus symbol () at the top right of any tab and select **Pay out funds**.\n4.  Check your balance:\n    *   **Standard payouts**: If you have a positive balance, you can start the payout process by entering the amount you want to pay out. For more information, see [Receive payouts](https://docs.stripe.com/payouts).\n    *   **Instant payouts**: Funds acquired from card payments are available as soon as the charge is complete. ACH or bank debits are only available after the payment has settled in the Stripe account. For more information, see [Instant payouts for Stripe Dashboard users](https://docs.stripe.com/payouts/instant-payouts).\n5.  Complete your payout. The time it takes for funds to settle in the bank account depends on several factors, including whether you select a standard or instant payout:\n    *   **Standard payouts**: The time it takes for funds to appear in your account depends on your industry, country, and whether it’s your first payout. It takes around 7 days for funds to settle in the applicable bank account for your first payout.\n    *   **Instant payouts**: After Stripe verifies your account is eligible to send instant payouts, funds typically settle in the applicable bank account within 30 minutes.\n\n## Create and manage customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a new customer:\n\n1.  Tap the plus icon () at the top right of any tab, and select **Create a customer**.\n2.  Enter the customer’s name, email address, and a description.\n\nTo manage existing customers:\n\n1.  Tap the **Customer** icon () from the app’s navigation bar, and select a customer. You can view their past payments, subscriptions, invoices, and payment cards saved on file.\n2.  Navigate to the action bar at the bottom to:\n    *   Add a card on file\n    *   Send customers an email\n    *   Edit their details, or open the customer details in the web Dashboard",
  "title": "Stripe Dashboard mobile app | Stripe Documentation",
  "description": "Learn how to use the mobile app version of the Stripe Dashboard.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/data-migrations",
  "markdown": "# Migrate your customer data to Stripe\n\n## Successfully migrate your customers' data to Stripe.\n\nMigrating your customer data to Stripe is a multi-step process. After you read through this guide, you’ll:\n\n*   Understand the Stripe migration process.\n*   Be able to scope the timeline for your migration.\n*   Know the integration elements required for a successful migration.\n*   Understand how to migrate payment details with minimal disruption to your users.\n\nIf you run into issues while trying to migrate customer data, contact [Stripe support](https://support.stripe.com/contact/login?email=true&subject=Migration+to+Stripe).\n\n## Build your integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   Develop your data migration plan, starting with new customers. Your end goal is to migrate 100% of new customers, then migrate existing customers.\n*   Design a process for customers to update their card information.\n\n## Learn about the migration process ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   Review Stripe’s [migration documentation](https://docs.stripe.com/get-started/data-migrations/pan-import).\n*   Contact your previous processor to understand their migrations process.\n\n## Plan a migration and connect with an existing processor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   Identify which payment details you want to migrate.\n*   Identify which payment methods you want to migrate.\n*   Find out how many customer records you want to migrate.\n*   Plan a migration timeline that considers your previous processor, your customer count, and any upcoming deadlines.\n*   Send the Stripe Migrations team details about your previous processor, Stripe account number, number of records to be migrated, and types of payment methods that you plan to import.\n\n## The Stripe Migrations team ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   Introduce your existing processor to Stripe’s Migrations team.\n*   Complete any action items or provide any additional information requested by Stripe or your existing processor’s migrations team.\n\n## Migrate and update ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   Follow communication between Stripe and your previous processor to ensure your team is prepared.\n*   Respond to any issues identified during migration.\n*   Look for an email from the Stripe Migration team with the JSON mapping file.\n*   Parse JSON mapping file and update your database accordingly.\n*   Implement a process for customers to update their card information.\n*   Design your remapping plan, and include [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") remapping where applicable.\n*   Begin charging existing customers on Stripe.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [The Customer object](https://docs.stripe.com/api/customers/object)\n*   [The Subscription object](https://docs.stripe.com/api/subscriptions/object)\n*   [Default payment source](https://docs.stripe.com/api/customers/object#customer_object-default_source)\n*   [Products and prices](https://docs.stripe.com/products-prices/overview)\n*   [Billing cycle anchor](https://docs.stripe.com/api/subscriptions/create#create_subscription-billing_cycle_anchor)",
  "title": "Migrate your customer data to Stripe | Stripe Documentation",
  "description": "Successfully migrate your customers' data to Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/elements/link-authentication-element",
  "markdown": "# Link Authentication Element | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Link Authentication Element to integrate Link.\n\n[Link](https://stripe.com/payments/link) saves and autofills customer payment and shipping information. Customers can use different funding sources to pay with Link, including credit cards, debit cards, and US bank accounts. Learn more at [link.com](https://www.link.com/).\n\nUse the [Link Authentication Element](https://docs.stripe.com/js/element/link_authentication_element) to create a single email input field for both email collection and Link authentication.\n\nThis demo only displays Google Pay or Apple Pay if you have an active card with either wallet. To see how Link works, type in any email address into the email input.\n\n## Start with examples ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo see the Link Authentication Element in action, start with one of these examples:\n\n## Create the Link Authentication Element ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following code [creates](https://docs.stripe.com/js/elements_object/create_link_authentication_element) an instance of the Link Authentication Element and [mounts](https://docs.stripe.com/js/element/mount) it to the DOM:\n\n`// Enable the skeleton loader UI for the optimal loading experience. const loader = 'auto';  // Create an elements group from the Stripe instance passing in the clientSecret and enabling the loader UI. const elements = stripe.elements({clientSecret, loader});  // Create an instance of the Link Authentication Element. const linkAuthenticationElement = elements.create(\"linkAuthentication\");  // Mount the Elements to their corresponding DOM node linkAuthenticationElement.mount(\"#link-authentication-element\"); paymentElement.mount(\"#payment-element\");`\n\n## Retrieving email address ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can retrieve the email address details using the `onChange` prop on the `linkAuthenticationElement` component. The `onChange` handler fires whenever the user updates the email field, or when a saved customer email is autofilled.\n\n`linkAuthenticationElement.on('change', (event) => {   const email = event.value.email; });`\n\n## Prefill customer data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Link Authentication Element accepts an email address. Providing a customer’s email address starts the Link authentication flow as soon as the customer lands on the payment page using the [defaultValues](https://docs.stripe.com/js/elements_object/create_link_authentication_element#link_authentication_element_create-options-defaultValues) option:\n\n`// Create the Link Authentication Element with the defaultValues option const linkAuthenticationElement = elements.create(\"linkAuthentication\", {defaultValues: {email: \"foo@bar.com\"}});  // Mount the Link Authentication Element to its corresponding DOM node linkAuthenticationElement.mount(\"#link-authentication-element\");`\n\nIf you want to prefill additional customer data, add the [defaultValues.billingDetails](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-defaultValues-billingDetails) object to the [Payment Element](https://docs.stripe.com/payments/payment-element). This prefills a customer’s name, phone number, and shipping addresses. By prefilling as much of your customer’s information as possible, you simplify Link account creation and reuse.\n\nThe following code shows a Payment Element with all of its values prefilled:\n\n`<PaymentElement   options={{     defaultValues: {       billingDetails: {         name: 'John Doe',         phone: '888-888-8888',         address: {           postal_code: '10001',           country: 'US',         }       },     },   }} />;`\n\n## Combine Elements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Link Authentication Element interoperates with other elements. For instance, the following example uses the Link Authentication Element with the Address Element and Payment Element:\n\n![A checkout page that includes the Link Authentication Element, Address Element, and Payment Element.](https://b.stripecdn.com/docs-statics-srv/assets/lae-with-ae-pe.b70e0386757f6061d9b27c7211794173.png)\n\nUse the Link Authentication Element with other Elements to compose your checkout page\n\n## Appearance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use the [Appearance API](https://docs.stripe.com/elements/appearance-api) to control the style of all elements. Choose a theme or update specific details.\n\n![Examples of light and dark modes for the payment element checkout form.](https://b.stripecdn.com/docs-statics-srv/assets/appearance_example.e076cc750983bf552baf26c305e7fc90.png)\n\nUse the Appearance API to change the look and style of your Elements\n\nIn the following example, the “flat” theme overrides the default text color used for Elements:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = {   theme: 'flat'   variables: { colorPrimaryText: '#262626' } };`",
  "title": "Link Authentication Element | Stripe Documentation",
  "description": "Use the Link Authentication Element to integrate Link.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/add-and-pay-out-guide",
  "markdown": "# Pay out money | Stripe DocumentationThe Stripe Docs logo\n\nUse this guide to learn how to add funds to your account balance and transfer the funds into your users’ bank accounts, without processing payments through Stripe. This guide uses an example of a Q&A product that pays its writers a portion of the advertising revenue that their answers generate. The platform and connected accounts are both in the US.\n\n#### Note\n\nWhen adding funds to your balance, best practice is to use a manual [payout](https://docs.stripe.com/payouts \"payout\") schedule. If you enable automatic payouts, you can’t control whether the system uses added funds for payouts. You can configure your schedule in your [payout settings](https://dashboard.stripe.com/settings/payouts).\n\n## Prerequisites ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  [Register your platform](https://dashboard.stripe.com/connect/tasklist).\n2.  Add business details to [activate your account](https://dashboard.stripe.com/account/onboarding).\n3.  [Complete your platform profile](https://dashboard.stripe.com/connect/settings/profile).\n4.  [Customize your brand settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding). Add a business name, icon, and brand color.\n\n[](#with-code-setup)\n\nInstall Stripe’s official libraries so you can access the API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#with-code-create-connected-account)\n\nWhen a user (seller or service provider) signs up on your platform, create a user [Account](https://docs.stripe.com/api/accounts) (referred to as a _connected account_) so you can accept payments and move funds to their bank account. Connected accounts represent your users in Stripe’s API and facilitate the collection of information requirements so Stripe can verify the user’s identity. For a Q&A product that pays for answers, the connected account represents the writer.\n\n#### Note\n\nThis guide uses connected accounts that use the Express Dashboard, which have certain [restrictions](https://docs.stripe.com/connect/express-accounts#prerequisites-for-using-express). You can evaluate [Custom accounts](https://docs.stripe.com/connect/custom-accounts) as an alternative.\n\n### 1\\. Customize your signup form ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn your [platform settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding), customize your Express signup form by changing the color and logos that users see when they click your [Connect](https://docs.stripe.com/connect \"Connect\") link.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/oauth-form.4b13fc5edc56abd16004b4ccdff27fb6.png)\n\nDefault Express signup form\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/branding-settings-payouts.20c99c810389a4e7f5c55238e80a9fc8.png)\n\nBranding settings\n\n### 2\\. Create a connected account and prefill information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the `/v1/accounts` API to [create](https://docs.stripe.com/api/accounts/create) a connected account by specifying the [connected account properties](https://docs.stripe.com/connect/migrate-to-controller-properties), or by specifying the account type.\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[stripe_dashboard][type]\"=express`\n\nIf you’ve already collected information for your connected accounts, you can prefill that information on the account object. You can prefill any account information, including personal and business information, external account information, and so on.\n\nConnect Onboarding doesn’t ask for the prefilled information. However, it does ask the account holder to confirm the prefilled information before accepting the [Connect service agreement](https://docs.stripe.com/connect/service-agreement-types).\n\nWhen testing your integration, prefill account information using [test data](https://docs.stripe.com/connect/testing).\n\n### 3\\. Create an account link ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate an [Account Link](https://docs.stripe.com/api/account_links) with the following arguments:\n\n*   `account`\n*   `refresh_url`\n*   `return_url`\n*   `type` = `account_onboarding`\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\   --data-urlencode refresh_url=\"[https://example.com/reauth](https://example.com/reauth)\" \\   --data-urlencode return_url=\"[https://example.com/return](https://example.com/return)\" \\  -d type=account_onboarding`\n\n### 4\\. Redirect your user to the account link ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe response to your [Account Links](https://docs.stripe.com/api/account_links) request includes a value for the key `url`. Redirect your user to this link. URLs from the [Account Links](https://docs.stripe.com/api/account_links) API are temporary and can be used only once because they grant access to the account holder’s personal information. Authenticate the user in your application before redirecting them to this URL. If you want to prefill information, you must do so before generating the account link. After you create the account link, you won’t be able to read or write information for the connected account.\n\n#### Security tip\n\nDon’t email, text, or otherwise send account link URLs outside of your platform application. Instead, provide them to the authenticated account holder within your application.\n\n### 5\\. Handle the user returning to your platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConnect Onboarding requires you to pass both a `return_url` and `refresh_url` to handle all cases where the user is redirected to your platform. It’s important that you implement these correctly to provide the best experience for your user.\n\n#### Note\n\nYou can use HTTP for your `return_url` and `refresh_url` while in test mode (for example, to test with localhost), but live mode only accepts HTTPS. Be sure to update testing URLs to HTTPS URLs before going live.\n\n#### return\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe issues a redirect to this URL when the user completes the Connect Onboarding flow. This doesn’t mean that all information has been collected or that there are no outstanding requirements on the account. This only means the flow was entered and exited properly.\n\nNo state is passed through this URL. After a user is redirected to your `return_url`, check the state of the `details_submitted` parameter on their account by doing either of the following:\n\n*   Listening to `account.updated` events.\n*   Calling the [Accounts](https://docs.stripe.com/api/accounts) API and inspecting the returned object.\n\n#### refresh\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour user is redirected to the `refresh_url` when:\n\n*   The link has expired (a few minutes have passed since the link was created).\n*   The link was already visited (the user refreshed the page or clicked back or forward in their browser).\n*   The link was shared in a third-party application such as a messaging client that attempts to access the URL to preview it. Many clients automatically visit links which cause them to become expired.\n*   Your platform is no longer able to access the account.\n*   The account has been rejected.\n\nThe `refresh_url` should call [Account Links](https://docs.stripe.com/api/account_links) again on your server with the same parameters and redirect the user to the Connect Onboarding flow to create a seamless experience.\n\n### 6\\. Handle users that haven’t completed onboarding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA user that’s redirected to your `return_url` might not have completed the onboarding process. Use the `/v1/accounts` endpoint to retrieve the user’s account and check for `charges_enabled`. If the account is not fully onboarded, provide UI prompts to allow the user to continue onboarding later. The user can complete their account activation through a new account link (generated by your integration). You can check the state of the `details_submitted` parameter on their account to see if they’ve completed the onboarding process.\n\n[](#with-code-add-funds)\n\nTo add funds, go to the [Balance](https://dashboard.stripe.com/test/balance/overview) section in the Dashboard. Click **Add to balance** and select why you are adding funds to your account.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/add_funds_modal_with_issuing.f3dc58497698fb2a62b6461b7ed4fba6.png)\n\nSelect **Pay out connected accounts** to add funds to pay out to your connected accounts. If you are adding funds to your balance to cover future refunds and disputes, or to repay your platform’s negative balance, select **Cover negative balances** and see [adding funds to your Stripe balance](https://docs.stripe.com/get-started/account/add-funds).\n\n### Verify your bank account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nGo through the verification process in the Dashboard when you first attempt to add funds from an unverified bank account. If your bank account is unverified, you’ll need to confirm two microdeposits from Stripe. These deposits appear in your online banking statement within 1-2 business days. You’ll see `ACCTVERIFY` as the statement description.\n\nStripe notifies you in the Dashboard and through email when the microdeposits have arrived in your account. To complete the verification process, click the Dashboard notification in the [Balance](https://dashboard.stripe.com/balance/overview) section, enter the two microdeposit amounts, and click **Verify account**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/top-ups4.85d1f2d8440f525714d0f2d20775e2d1.png)\n\n### Create a top-up ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOnce verified, create a [top-up](https://docs.stripe.com/api#topups) to add funds to your account balance.\n\n`curl https://api.stripe.com/v1/topups \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2000 \\  -d currency=usd \\  -d description=\"Top-up for week of May 31\" \\  -d statement_descriptor=\"Weekly top-up\"`\n\nWhen you transfer funds, a statement descriptor appears on your banking statement for the transaction. The default statement descriptor is **Top-up**. You can customize the statement descriptor and internal description for the top-up.\n\n### View funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nView your funds in the Dashboard on [Top-ups](https://dashboard.stripe.com/test/topups) tab under the [Balance](https://dashboard.stripe.com/balance/overview) page. Each time you add funds, a top-up object is made that has a unique ID in the format **tu\\_XXXXXX**, which you can see on the detailed view for the top-up.\n\n### Settlement timing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUS platforms add funds via ACH debit and can take 5-6 business days to become available in your Stripe balance. You can request a review of your account for faster settlement timing by contacting [Stripe Support](https://support.stripe.com/contact).\n\nAs we learn more about your account, Stripe might be able to decrease your settlement timing automatically.\n\nAdding funds for future refunds and disputes or to repay a negative balance can happen through [bank or wire transfers](https://docs.stripe.com/get-started/account/add-funds) and are available in 1-2 business days.\n\n[](#with-code-pay-out-to-user)\n\nYou can transfer available funds to a connected account using the [API](https://docs.stripe.com/api/transfers). For example, make the following call to transfer 10 USD to an account:\n\n`curl https://api.stripe.com/v1/transfers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=1000 \\   -d currency=\"usd\" \\   -d destination=\"{{CONNECTED_STRIPE_ACCOUNT_ID}}\"`\n\nBy default, any funds that you transfer to a connected account accumulates in the connected account’s [Stripe balance](https://docs.stripe.com/connect/account-balances) and is paid out on a daily rolling basis. You can change the [payout schedule](https://docs.stripe.com/connect/manage-payout-schedule) as needed.\n\n[](#with-code-testing)\n\nFrom your [account Dashboard](https://dashboard.stripe.com/test/connect/accounts/overview), you can view an account and its balance.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dashboard-account-payout.94e15f1be4a11a54d18fc305433e50f4.png)\n\nUse the [test bank tokens](https://docs.stripe.com/connect/testing#testing-top-ups) to simulate flows for accounts and onboarding, payouts, and adding funds.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Collect payments then pay out](https://docs.stripe.com/connect/collect-then-transfer-guide)\n*   [Manage connected accounts in the Dashboard](https://docs.stripe.com/connect/dashboard)\n*   [Debit a connected account](https://docs.stripe.com/connect/account-debits)\n*   [Integrate with the Express Dashboard](https://docs.stripe.com/connect/express-dashboard)\n*   [Collect information required for US taxes](https://docs.stripe.com/connect/account-capabilities#tax-reporting)",
  "title": "Pay out money | Stripe Documentation",
  "description": "Add money to your Stripe balance and pay out your sellers or service providers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/a-b-testing",
  "markdown": "# A/B testing a payment method\n\n## Understand your experiment results![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter your experiment begins, view its progress in the Stripe Dashboard.\n\n![A page with experiment results](https://b.stripecdn.com/docs-statics-srv/assets/experiment-report.4327bdbe4685ba68d9f90f3d024d6f84.png)\n\nA/B testing considers an experiment complete when two conditions have been met:\n\n*   Average revenue per session is [statistically significant](https://en.wikipedia.org/wiki/Statistical_significance). We consider results to be statistically significant when there’s less than a 5% probability that the result is due to a random chance. See [Experiment methodology](https://docs.stripe.com/payments/a-b-testing#experiment-methodology).\n*   The experiment has accrued enough sessions. This is a dynamic number based on the treatment versus control percentage you set during experiment creation.\n\nExperiment result metrics include:\n\n*   **Average revenue per session**: Average revenue per session is the total revenue divided by the total number of sessions. It shows the difference in revenue per session between your treatment and control groups, and is a summary of the overall results of your experiment. The total number of sessions includes both sessions that resulted in a purchase and sessions that didn’t result in a purchase. Due to the significant variations in conversion rates and average order values by payment method, we recommend using the Average revenue per session metric as a guiding metric when determining the overall success of the experiment.\n*   **Revenue at 100% of sessions**: Projected total revenue if the treatment group payment methods were offered to 100% of traffic across treatment and control.\n*   **Gross revenue**: Actual revenue (full purchase amount). This amount is influenced mainly by your treatment/control percentage selection.\n*   **Conversion rate**: Conversion rate is the number of sessions with a purchase divided by the total number of eligible sessions. Eligible sessions is defined as:\n    *   One or more treatment payment methods was eligible (for example, the buyer was in a country where the payment method is accepted)\n    *   The payment interface (Payment Element) was rendered to the buyer\n*   **Average order value**: Average order value is the average purchase amount for sessions where the buyer made a purchase.\n\n### Statistical significance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the indicators on the overview tables to understand statistical significance. The metrics display a green or yellow difference when the experiment has reached at least 80% of estimated required sessions.\n\nThere are three types of indicators:\n\n*   Gray indicators mean your experiment hasn’t accrued enough sessions to reliably determine statistical significance.\n*   Green indicators demonstrate a statistically significant increase between the treatment and control groups.\n*   Yellow indicators demonstrate a statistically significant decrease between the treatment and control groups.\n\n![A gray badge indicating there isn't statistical significance.](https://b.stripecdn.com/docs-statics-srv/assets/gray-indicator.5480d1fb0eab4d6a046c1bd10b5de350.png)\n\nBefore reaching statistical significance\n\n![A green badge indicating statistical significance.](https://b.stripecdn.com/docs-statics-srv/assets/green-indicator.2c1094ab3416c65174f86d0c24b27089.png)\n\nAfter reaching statistical significance\n\n### Conduct additional analysis ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can download raw data from the reporting page to further analyze your experiment results.\n\n#### Note\n\nWe recommend grouping by `experiment_session_id` to avoid double counting sessions for instances such as a page refresh. This is consistent with how the A/B test report calculates average revenue per session, conversion rate, and average order value.\n\n| Dimension | Description |\n| --- | --- |\n| occurred\\_at\\_day | The day (‘yyyyMMdd’) of the session. |\n| experiment\\_session\\_id | A unique, Stripe-generated ID for each experiment session. A session is based on the UserAgent, IP address, and date. |\n| is\\_treatment | A Boolean indicating whether outcome was assigned as treatment (1) or control (0). |\n| converted | A Boolean indicating whether this session converted (1) or not (0). |\n| payment\\_method | The actual payment method used for the purchase. |\n| converted\\_transaction\\_count | The number of individual transaction-level conversions in the user session. Usually this value is either 1 or 0, however, multiple conversions can occur within the same session if the same buyer makes multiple purchases within the same day. |\n| rendered\\_transaction\\_count | The number of individual transaction-level renders in the user session. This can be a number >1 if a buyer visits the purchase page multiple times (for example, reloads or comes back later in the day). |\n| amount\\_capturable | The total transaction amount. |\n| currency | The currency type used in this transaction (for example, USD, GBP, EUR). |\n| is\\_eligible\\_session | A Boolean indicating whether this session was eligible (1) or ineligible (0) for A/B testing. If this field returns a 0 (for example, no treatment payment methods were eligible), then this session isn’t included in any reported metrics like Average Order Value or Conversion Rate. |\n| buyer\\_countries | The country/countries associated with the user session. In most cases this is a single country, but there could be multiple if the buyer is traveling or changes their browser’s location settings. |\n| control\\_payment\\_method\\_types | The list of control payment methods that were eligible to be shown in this session. |\n| treatment\\_payment\\_method\\_types | The list of treatment payment methods that were eligible to be shown in this session. |\n| rendered\\_payment\\_methods | The list of payment methods that were available in the user session, including those hidden behind an overflow ‘show more’ selector. |\n| visible\\_payment\\_methods | The list of payment methods that were visible in the user session (not hidden behind an overflow, such as ‘show more’). |\n\n### Experiment methodology ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA/B testing measures the [average treatment effect](https://en.wikipedia.org/wiki/Average_treatment_effect) (ATE) by comparing treatment and control outcomes. We consider an experiment statistically significant when there’s less than a 5% probability that the result is due to a random chance. In statistical terms, we use a [z-test](https://en.wikipedia.org/wiki/Z-test) to calculate differences between the treatment and control group at the 5% level, which is mechanically the same as checking whether the 95% confidence interval for the difference includes 0. To determine how many sessions are required to detect an impact, we run a power calculation based on your selected treatment and control percentage split. This power calculation returns the number of sessions required to have 80% power to detect a 1% difference between treatment and control at a 5% significance level.",
  "title": "A/B testing a payment method | Stripe Documentation",
  "description": "Launch an A/B test for a new payment method in Dashboard—no code required.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/docs/payments/payment-methods/overview",
  "markdown": "# Learn about payment methods | Stripe DocumentationThe Stripe Docs logo\n\n## Accepting more payment methods helps your business expand its global reach and improve checkout conversion.\n\nWe categorize payment methods into eight families:\n\n*   [Cards](#cards)\n*   [Bank debits](#bank-debits)\n*   [Bank redirects](#bank-redirects)\n*   [Bank transfers](#bank-transfers)\n*   [Buy now, pay later](#buy-now-pay-later)\n*   [Real-time payments](#real-time-payments)\n*   [Vouchers](#vouchers)\n*   [Wallets](#wallets)\n\nEach family has similar features, a single integration, and common checkout experiences. After you’ve integrated one payment method, you can add another within the same family with minimal changes to your integration.\n\nTo learn more about which payment methods are right for your business, see our [payment method guide](https://stripe.com/payments/payment-methods-guide).\n\n## Cards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCards are a common way for consumers and businesses to pay online or in person. Stripe supports global and local card networks. See the [card brands](https://docs.stripe.com/payments/cards#supported-card-brands) that Stripe supports.\n\n## Bank debits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBank debits are commonly used for business-to-business and high-value consumer payments. Your business debits the customer’s bank account directly, with their permission. See [bank debits](https://docs.stripe.com/payments/bank-debits) to learn more.\n\n## Bank redirects ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBank redirects let customers pay online using their bank account, using a secure, intuitive checkout flow. They’re popular among European and Asian consumers and can improve conversion and reduce fraud. See [bank redirects](https://docs.stripe.com/payments/bank-redirects) to learn more.\n\nTo request access to one of our invite only payment methods, [contact us](https://support.stripe.com/contact).\n\n## Bank transfers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers or other businesses can use bank transfers to send money directly to your bank account and are common for accepting large payments from other businesses. In some countries, bank transfers are popular for consumer payments as well. See [bank transfers](https://docs.stripe.com/payments/bank-transfers) to learn more.\n\n[Contact us](https://support.stripe.com/contact) to request to join one of our invite only payment methods.\n\n## Buy now, pay later ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBuy now, pay later payment methods help retailers reach customers that want to pay in installments. Your business is paid immediately and in full, and your customer pays nothing or a portion of the total cost at checkout. See [buy now, pay later](https://docs.stripe.com/payments/buy-now-pay-later) to learn more.\n\n[Contact us](https://support.stripe.com/contact) to request to join one of our invite only payment methods.\n\n## Real-time payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReal-time payments let customers send money directly from their bank account or other funding source using an intermediary to authenticate, such as a phone number or other account. They’re a common payment type in Asia and Latin America. See [real-time payments](https://docs.stripe.com/payments/real-time) to learn more.\n\n## Vouchers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nVouchers are a popular way for customers in Asia and Latin America to complete online purchases in-person. At checkout, customers receive a digital voucher with pending transaction details and then complete the payment at local stores. See [vouchers](https://docs.stripe.com/payments/vouchers) to learn more.\n\n[Contact us](https://support.stripe.com/contact) to request to join one of our invite only payment methods.\n\n## Wallets ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWallets provide a fast and secure way for consumers to pay with a saved card or a stored balance. Wallets improve conversion and reduce fraud, especially on mobile. See [wallets](https://docs.stripe.com/payments/wallets) to learn more.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Guide to Payment Methods](https://stripe.com/payments/payment-methods-guide)\n*   [Supported card brands](https://docs.stripe.com/payments/cards#supported-card-brands)\n*   [Faster checkout with Link](https://docs.stripe.com/payments/link)\n*   [Wallets](https://docs.stripe.com/payments/wallets)\n*   [Vouchers](https://docs.stripe.com/payments/vouchers)",
  "title": "Learn about payment methods | Stripe Documentation",
  "description": "Accepting more payment methods helps your business expand its global reach and improve checkout conversion.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/accept-a-payment",
  "markdown": "# Accept a payment | Stripe DocumentationThe Stripe Docs logo\n\nBuild a payment form or use a prebuilt checkout page to start accepting online payments.\n\nRedirect to a Stripe-hosted payment page using [Stripe Checkout](https://docs.stripe.com/payments/checkout). See how this integration [compares to Stripe’s other integration types](https://docs.stripe.com/payments/accept-a-payment/web/compare-integrations).\n\n[![Checkout preview](https://b.stripecdn.com/docs-statics-srv/assets/b2c79a23390b89a7b589d29387f3e2b2.png)](https://checkout.stripe.dev/)\n\n### Integration effort\n\n### Integration type\n\nRedirect to Stripe-hosted payment page\n\n### UI customization\n\n[Try it out](https://checkout.stripe.dev/)\n\n[](#set-up-stripe)\n\nFirst, [register](https://dashboard.stripe.com/register) for a Stripe account.\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#redirect-customers)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a [Checkout Session](https://docs.stripe.com/api/checkout/sessions/create).\n\n`<html>   <head>     <title>Buy cool new product</title>   </head>   <body>     <!-- Use action=\"/create-checkout-session.php\" if your server is PHP based. -->     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nA Checkout Session is the programmatic representation of what your customer sees when they’re redirected to the payment form. You can configure it with options such as:\n\n*   [Line items](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items) to charge\n*   Currencies to use\n\nYou must populate `success_url` with the URL value of a page on your website that Checkout returns your customer to after they complete the payment. You can optionally also provide a `cancel_url` value of a page on your website that Checkout returns your customer to if they terminate the payment process before completion.\n\n#### Note\n\nCheckout Sessions expire 24 hours after creation.\n\nAfter creating a Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n`# This example sets up an endpoint using the Sinatra framework. # Watch this video to get started: [https://youtu.be/8aA9Enb8NVc.](https://youtu.be/8aA9Enb8NVc)  require 'json' require 'sinatra' require 'stripe'  # Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/create-checkout-session' do   session = Stripe::Checkout::Session.create({     line_items: [{       price_data: {         currency: 'usd',         product_data: {           name: 'T-shirt',         },         unit_amount: 2000,       },       quantity: 1,     }],     mode: 'payment',     # These placeholder URLs will be replaced in a following step.     success_url: '[https://example.com/success](https://example.com/success)',     cancel_url: '[https://example.com/cancel](https://example.com/cancel)',   })    redirect session.url, 303 end`\n\n#### Note\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers. You can turn payment methods on or off in the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe evaluates the currency, payment method restrictions, then dynamically shows the set of supported payment methods in Checkout.\n\nConfirm your endpoint is accessible by starting your web server (for example, `localhost:4242`) and running the following command:\n\n`curl -X POST -is \"http://localhost:4242/create-checkout-session\" -d \"\"`\n\nYou should see a response in your terminal that looks like this:\n\n### Testing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou should now have a working checkout button that redirects your customer to Stripe Checkout.\n\n1.  Click the checkout button.\n2.  You’re redirected to the Stripe Checkout payment form.\n\nIf your integration isn’t working:\n\n1.  Open the Network tab in your browser’s developer tools.\n2.  Click the checkout button and confirm it sent an XHR request to your server-side endpoint (`POST /create-checkout-session`).\n3.  Verify the request is returning a 200 status.\n4.  Use `console.log(session)` inside your button click listener to confirm the correct data returned.\n\nTo see how your payment methods appear to customers, enter a transaction ID or set an order amount and currency in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods/review).\n\n[](#success-page)\n\nIt’s important for your customer to see a success page after they successfully submit the payment form. Host this success page on your site.\n\nCreate a minimal success page:\n\n`<html>   <head><title>Thanks for your order!</title></head>   <body>     <h1>Thanks for your order!</h1>     <p>       We appreciate your business!       If you have any questions, please email       <a href=\"mailto:orders@example.com\">orders@example.com</a>.     </p>   </body> </html>`\n\nNext, update the Checkout Session creation endpoint to use this new page:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][unit_amount]\"=2000 \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\   --data-urlencode success_url=\"[http://localhost:4242/success.html](http://localhost:4242/success.html)\" \\   --data-urlencode cancel_url=\"[http://localhost:4242/cancel.html](http://localhost:4242/cancel.html)\"`\n\n### Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Click your checkout button.\n2.  Fill out the payment details with the test card information:\n    *   Enter `4242 4242 4242 4242` as the card number.\n    *   Enter any future date for card expiry.\n    *   Enter any 3-digit number for CVC.\n    *   Enter any billing postal code.\n3.  Click **Pay**.\n4.  You’re redirected to your new success page.\n\nNext, find the new payment in the Stripe Dashboard. Successful payments appear in the Dashboard’s [list of payments](https://dashboard.stripe.com/payments). When you click a payment, it takes you to the payment details page. The **Checkout summary** section contains billing information and the list of items purchased, which you can use to manually fulfill the order.\n\n[](#additional-testing-resources)\n\nTo test your Stripe-hosted payment form integration:\n\n1.  Create a Checkout Session.\n2.  Fill out the payment details with a method from the following table.\n    *   Enter any future date for card expiry.\n    *   Enter any 3-digit number for CVC.\n    *   Enter any billing postal code.\n3.  Click **Pay**. You’re redirected to your `success_url`.\n4.  Go to the Dashboard and look for the payment on the [Payments page](https://dashboard.stripe.com/test/payments?status%5B0%5D=successful). If your payment succeeded, you’ll see it in that list.\n5.  Click your payment to see more details, like a Checkout summary with billing information and the list of purchased items. You can use this information to fulfill the order.\n\nLearn more about [testing your integration](https://docs.stripe.com/testing).\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.\n\n### Test cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Number | Description |\n| --- | --- |\n|     | Succeeds and immediately processes the payment. |\n|     | Requires 3D Secure 2 authentication for a successful payment. |\n|     | Always fails with a decline code of `insufficient_funds`. |\n\n### Apple Pay and Google Pay ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can enable Apple Pay and Google Pay in your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods). Apple Pay is enabled by default.\n\nCheckout’s Stripe-hosted pages don’t need integration changes to enable Apple Pay or Google Pay. Stripe handles these payments the same way as other card payments.\n\nNow that you have your basic integration working, learn how to [programmatically get a notification](https://docs.stripe.com/checkout/fulfillment) whenever a customer pays.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Add discounts](https://docs.stripe.com/payments/checkout/discounts)\n*   [Collect taxes](https://docs.stripe.com/payments/checkout/taxes)\n*   [Collect tax IDs](https://docs.stripe.com/tax/checkout/tax-ids)\n*   [Add shipping](https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout)\n*   [Customize your branding](https://docs.stripe.com/payments/checkout/customization)\n*   [Customize your success page](https://docs.stripe.com/payments/checkout/custom-success-page)",
  "title": "Accept a payment | Stripe Documentation",
  "description": "Securely accept payments online.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/bank-debits",
  "markdown": "# Bank Debits | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept bank debits with Stripe.\n\nWith bank debits, you can pull funds directly from your customer’s bank account for both one-time and recurring purchases. Bank debits are often used by:\n\n*   Businesses collecting recurring payments from other businesses.\n*   Retail and services businesses that want a low-cost alternative to cards for large consumer payments, like rent or tuition.\n\nBank debits might not be a good fit for your business if:\n\n*   You deliver goods immediately after checkout because payment confirmation takes 3-7 days.\n*   Your business is sensitive to disputes—consider other payment methods because some bank debit methods favor the customer during disputes.\n\n## Payment experience![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo initiate a bank debit, a customer enters their bank account details during checkout and gives you permission to debit the account. This permission is called a mandate.\n\n![Flow chart of the three step process the customer experiences. First, they select bank debit at checkout. Next the customer provides banking details and authorizes mandate. Finally, the customer gets notification that the payment is complete.](https://b.stripecdn.com/docs-statics-srv/assets/payment_flow.e4fcc05342cae882b39c41b497e5a24d.svg)\n\nTo reduce fraud with some bank debits, verify the bank account before the payment by confirming microdeposits or bank login. Verifying bank login can improve the user experience because customers pay by logging into their bank rather than entering bank account details.\n\n## Product support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use a single integration for all bank debits that works across Stripe products. With [Stripe Checkout](https://docs.stripe.com/payments/checkout), [Payment Element](https://docs.stripe.com/payments/payment-element), and [Payment Links](https://docs.stripe.com/payment-links), you can enable bank debits right from the Dashboard with no integration work.\n\n1 Subscription mode isn’t supported.\n\n[Contact us](https://support.stripe.com/contact) to request a new bank debit method.\n\n## Migrating from the Sources, Tokens, or Charges APIs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your current bank debit integration uses the Sources, Tokens, or Bank Accounts API, we recommend following the appropriate migration guide to transition to [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"):\n\n*   [ACH migration guide](https://docs.stripe.com/payments/ach-debit/migrating-from-charges)\n*   For all other bank debit payment methods, follow the general [migration guide](https://docs.stripe.com/payments/payment-intents/migration)",
  "title": "Bank Debits | Stripe Documentation",
  "description": "Learn how to accept bank debits with Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/bank-redirects",
  "markdown": "# Bank redirects | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about bank redirects with Stripe.\n\nBank redirects let customers pay online using their bank account. They drive more than half of online commerce in Germany, the Netherlands, and Malaysia. Bank redirects are often used by:\n\n*   Retailers that want to improve conversion and reduce fraud with consumers in Europe and Asia Pacific.\n*   Software or service businesses collecting one-time payments from other businesses.\n\nBank redirects might not be a good fit for your business if you sell [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). Some bank redirects don’t support recurring payments.\n\n## Payment experience![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAt checkout, the customer is redirected to their online banking portal, logs in with their bank credentials, approves the transaction, and then returns to your site. Some bank redirects verify the user through SMS or other two-factor authentication for additional security.\n\n![Supported](https://b.stripecdn.com/docs-statics-srv/assets/payment_flow.d6b9be158ecbb4b70a85d2497da2e405.svg)\n\n## Product support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve created a single integration for all bank redirects that works across Stripe products. With Stripe Checkout, you can add any bank redirect by changing one line of code.\n\n| Payment method | Customer country | PaymentIntents | Checkout | Connect | Invoicing | Subscriptions | Payment Element | Payment Links | Mobile Payment Element |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| [Bancontact](https://docs.stripe.com/payments/bancontact) | Belgium |     |     |     | Invite only |     |     |     |     |\n| [BLIK](https://docs.stripe.com/payments/blik) | Poland |     |     |     |     |     |     |     |     |\n| [EPS](https://docs.stripe.com/payments/eps) | Austria |     |     |     | Invite only |     |     |     |     |\n| [FPX](https://docs.stripe.com/payments/fpx) | Malaysia |     |     |     |     |     |     |     |     |\n| [giropay](https://docs.stripe.com/payments/giropay) | Germany |     |     |     |     |     |     |     |     |\n| [iDEAL](https://docs.stripe.com/payments/ideal) | Netherlands |     |     |     |     |     |     |     |     |\n| [P24](https://docs.stripe.com/payments/p24) | Poland |     |     |     | Invite only |     |     |     |     |\n| [Sofort](https://docs.stripe.com/payments/sofort) | Austria, Belgium, Germany, Italy, Netherlands, Spain, Switzerland |     |     |     | Invite only |     |     |     |     |\n| [TWINT](https://docs.stripe.com/payments/twint) | Switzerland |     |     |     |     |     |     |     |     |\n\n\\* Invoices and Subscriptions with PayNow only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).\n\n[Contact us](https://support.stripe.com/contact) to request a new bank redirect payment method.\n\n## Migrating from the Sources or Tokens APIs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you currently use the Sources or Tokens API, see [migrating to PaymentIntents](https://docs.stripe.com/payments/payment-intents/migration) to use the latest integrations.",
  "title": "Bank redirects | Stripe Documentation",
  "description": "Learn about bank redirects with Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/bank-transfers",
  "markdown": "# Bank transfer payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about bank transfers and managing payments with the customer balance.\n\nBank transfers provide a safe way for customers to send money over bank rails. When accepting bank transfers with Stripe, you provide customers with a virtual bank account number that they can push money to from their own online bank interface or in-person bank branch. Stripe uses this virtual account number to automate reconciliation and prevent exposing your real account details to customers.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Bank Transfers and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Bank Transfers. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Bank Transfers from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf you prefer to manually list payment methods, or want to learn more about how bank transfers work with invoicing and subscriptions, see the following guides:\n\n*   [Accept a bank transfer payment](https://docs.stripe.com/payments/bank-transfers/accept-a-payment)\n*   [Send an invoice with bank transfer instructions](https://docs.stripe.com/invoicing/bank-transfer)\n*   [Set up a subscription with bank transfers as a payment method](https://docs.stripe.com/billing/subscriptions/bank-transfer)\n\n## Customer balance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUnlike most payment methods, bank transfers don’t allow you to control the amount a customer sends to you, which means that customers might send too much or too little money by accident. To manage common overpayment and underpayment issues, Stripe holds your customer’s bank transfers in a [customer balance](https://docs.stripe.com/payments/customer-balance) that you can reconcile payments from. This allows you to track how much your customers owe, regardless of how much or how often they send funds. If funds are held in the customer balance for more than 75 days, Stripe automatically attempts to return the funds to the customer’s bank account. For further information on what happens when funds remain unreconciled, see the [reconciliation documentation](https://docs.stripe.com/payments/customer-balance/reconciliation#cash-unreconciled-funds).\n\n## International payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBank transfers users in the United States can accept international wire transfers (SWIFT). International wire transfers may incur fees on the way to Stripe, which can result in an amount received that’s less than what the customer originally sent. Stripe-incurred fees appear on the balances page in the Dashboard, alongside other relevant Stripe fees. The amount shown in the cash balance is the amount that Stripe received from the customer.\n\nInternational transfers can take a longer period of time to settle into the customer balance.\n\nStripe doesn’t support refunds for international wires. You’re responsible for executing any refunds related to these payments.\n\n#### Note on currencies\n\nThe accounts that support international payments only support their own currency. For example, US accounts support SWIFT transfers in USD only.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund customer balance payments:\n\n*   Directly to the customer’s bank account\n*   Back to the customer’s cash balance, where the refund can be used towards another customer balance payment\n\nTo refund to the customer’s bank account, Stripe requires the customer’s bank account details. In some cases, Stripe receives these details when the customer transfers funds. When these details aren’t available, Stripe sends an email to the customer to collect bank account details and initiate a transfer when we receive those details.\n\nIf your customer has excess funds in their customer balance, you can initiate a return of funds through the Dashboard or the API. For more information, see [Refund bank transfer payments](https://docs.stripe.com/payments/customer-balance/refunding).\n\n## Funding instructions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you need to show bank account details to your customer before they make their first payment (for example, when they create their account), you can use the [Funding Instructions API](https://docs.stripe.com/payments/customer-balance/funding-instructions).\n\n## Sender information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can determine the sender details of an incoming bank transfer through either the Dashboard or the API. Those details can include the name of the sender, the reference, and the network through which the transfer arrived.\n\n1.  In the [Dashboard](https://dashboard.stripe.com/customers), navigate to the customer’s page.\n2.  Under **Payment Methods**, expand the cash balance tab.\n3.  Open the Cash Balance page by clicking **View balance details**.\n\n![Payment methods section](https://b.stripecdn.com/docs-statics-srv/assets/payment-methods-section.98d98636d90fbf8ea6e5834dcdde1133.png)\n\nPayment methods section\n\nOn the cash balance page, the **Transactions** section displays a list of the customer’s incoming and outgoing cash balance transactions.\n\n![List of all customer cash balance transactions](https://b.stripecdn.com/docs-statics-srv/assets/transactions-list.f8e2bee93047bd6c85021cfb3db52348.png)\n\nList of all customer cash balance transactions\n\nIncoming transfers have type **Funding**. Find the transfer you’re interested in and open its details page by clicking its description.\n\n![Funding details sender information](https://b.stripecdn.com/docs-statics-srv/assets/funding-details-sender-info.b78a278b7f04e003480c0d4308af206b.png)\n\nFunding details sender information\n\n## Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Stripe Connect](https://docs.stripe.com/connect/overview) can be used with bank transfers to process payments on behalf of connected accounts. [Connect](https://docs.stripe.com/connect \"Connect\") platforms can use bank transfers with [any type of charges](https://docs.stripe.com/connect/charges#types).\n\nThe [on\\_behalf\\_of attribute](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) isn’t supported.\n\n### Accepting bank transfer payments as the connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Direct charges](https://docs.stripe.com/connect/direct-charges) require the connected account itself (not the platform) to have activated the bank transfers payment method—Connect platforms can use the [relevant bank transfers capability](https://docs.stripe.com/connect/account-capabilities#payment-methods) to determine whether this is the case for a connected account. [Standard Connect accounts](https://docs.stripe.com/connect/standard-accounts) can request the relevant capability from their Stripe Dashboard.\n\n### Activation process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe process varies by country, but in general for bank transfer payments, the [required information](https://docs.stripe.com/connect/required-verification-information) is the same as what’s necessary to activate a Stripe account for payments. If the account doesn’t fulfill all the required information, the capability remains `inactive` with any issues highlighted on the [capability object](https://docs.stripe.com/api/capabilities/object) in the `requirements.currently_due` and `requirements.disabled_reason` fields until these issues have been addressed. After all the highlighted issues are resolved, the capability’s `status` changes to `active`, unless there are issues activating the account in general, in which case Stripe sends the Connect platform owner an email.\n\n## Unsupported businesses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe can’t accept payments for certain types of businesses. In addition to the [Restricted Business list](https://stripe.com/restricted-businesses), Stripe doesn’t support bank transfers if your business falls into any of the following categories:\n\n*   Automated Cash Disburse\n*   Manual Cash Disburse\n*   Miscellaneous and Specialty Retail Stores\n\n## Unsupported products and features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBank transfers don’t support Payment Links.",
  "title": "Bank transfer payments | Stripe Documentation",
  "description": "Learn about bank transfers and managing payments with the customer balance.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/buy-now-pay-later",
  "markdown": "# Buy now, pay later | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about buy now, pay later methods with Stripe.\n\nBuy now, pay later methods let customers pay in installments over time. You’re paid immediately and in full and your customers pay nothing or a portion of the total at purchase time. Buy now, pay later methods are often used by:\n\n*   Retailers selling high value goods and services like luxury items or travel fares that want to boost conversion.\n*   Retailers selling low value goods and services that want to increase average cart size and reach new customers who might not have credit cards.\n*   Regional banks that allow consumers to split credit card payments over multiple billing cycles.\n\nBuy now, pay later methods might **not** be a good fit for your business if:\n\n*   Your customers are businesses. Buy now, pay later methods offered on Stripe are only supported for consumers.\n*   Your business relies on subscriptions or recurring purchases. Buy now, pay later methods don’t currently support [Invoicing](https://docs.stripe.com/invoicing) or [Subscriptions](https://docs.stripe.com/billing).\n\nRead our [Buy Now, Pay Later Guide](https://stripe.com/guides/buy-now-pay-later) for more information.\n\n## Payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAt checkout, the customer chooses to pay with a buy now, pay later service. Then the customer creates or logs into an account with the buy now, pay later provider. Next, the customer accepts or declines the terms of the repayment plan, and then returns to the business’ site.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment_flow.09ed159dfe639622d54b186cc7973db6.svg)\n\n## Product support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Payment method | Customer country | Repayment options | Transaction limit | Payment Intents | Checkout | Connect | Payment Element | Payment Links | Mobile Payment Element | Invoicing | Subscriptions |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| [Affirm](https://docs.stripe.com/payments/affirm) | Canada, United States | *   Pay in 4 interest-free installments<br>*   Monthly payments for up to 36 months | 50 USD minimum; 30,000 USD maximum or local equivalent\\* |     |     |     |     |     |     |     |     |\n| [Afterpay/Clearpay](https://docs.stripe.com/payments/afterpay-clearpay) | Australia, Canada, New Zealand, United Kingdom, United States | *   Pay in 4 interest-free installments<br>*   Monthly USD payments for up to 12 months | 1 USD minimum; 4,000 USD maximum or local equivalent |     |     |     |     |     |     |     |     |\n| [Klarna](https://docs.stripe.com/payments/klarna) | Australia, Austria, Belgium, Canada, Czechia, Denmark, Finland, France, Germany, Greece, Ireland, Italy, Netherlands, New Zealand, Norway, Poland, Portugal, Spain, Sweden, Switzerland, United Kingdom, United States | *   Pay in 3 or 4 interest-free installments<br>*   Pay in 30 days<br>*   Pay now with stored payment details<br>*   Monthly payments for up to 36 months | 10 USD minimum or local equivalent. (5,000 USD+ for financing possible; maximum varies by customer) |     |     |     |     |     |     |     | [Beta](#) |\n| [Meses sin intereses](https://docs.stripe.com/payments/mx-installments) | Mexico | Extend payments over 3 to 24 months of billing cycles | [Minimum transaction](https://docs.stripe.com/payments/mx-installments#fees) amount of 100 MXN per month of extension |     |     |     |     |     |     |     |     |\n| [Zip](https://docs.stripe.com/payments/zip) | Australia, United States (Invite Only) | *   Zip Pay: Pay using a 1,000 AUD credit, repay in your own time<br>*   Zip Money: Pay in a minimum of 3 monthly interest-free installments<br>*   Pay in 4 installments | 0.01 AUD minimum. 50,000 AUD maximum for Australia or 35 USD minimum and 1,500 USD maximum for United States\\*\\* |     |     |     |     |     |     |     |     |\n\n## Adding on site messaging to your website![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLet your customers know you accept one or more of these payment methods by including the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) on your product and cart pages.",
  "title": "Buy now, pay later | Stripe Documentation",
  "description": "Learn about buy now, pay later methods with Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/strong-customer-authentication",
  "markdown": "# Strong Customer Authentication readiness | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how the Strong Customer Authentication regulation affects your business and how to update your integration to support it.\n\n[Strong Customer Authentication (SCA)](https://stripe.com/guides/strong-customer-authentication), a rule in effect as of September 14, 2019, as part of PSD2 regulation in Europe, requires changes to how your European customers authenticate online payments. Card payments require a different user experience, namely [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\"), in order to meet SCA requirements. Transactions that don’t follow the new authentication guidelines may be declined by your customers’ banks.\n\nTo support SCA, you should:\n\n1.  Determine if your business is impacted\n2.  Decide which one of the SCA-ready products is right for your business\n3.  Make changes now to avoid declined payments\n\n#### Caution\n\nIf you use a third-party plugin, platform, or extension partner from the [Partners gallery](https://stripe.partners/), contact your Stripe partner to see what (if any) work you need to do to support SCA. Please [reach out](https://support.stripe.com/contact) if you have any questions. You can also see the [frequently asked questions](https://docs.stripe.com/strong-customer-authentication/sca-enforcement) for information on SCA enforcement.\n\n## Impacted businesses and payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUpdate your Stripe integration for SCA if all of the following apply:\n\n*   Your business is based in the [European Economic Area](https://en.wikipedia.org/wiki/European_Economic_Area \"European Economic Area\") or you [create payments on behalf of connected accounts based in the EEA](https://docs.stripe.com/strong-customer-authentication/connect-platforms)\n*   You serve customers in the EEA\n*   You accept cards (credit or debit)\n\nWhile some low-risk transactions (based on the volume of fraud rates associated with the payment provider or bank) do not require authentication, banks can choose to not honor these exemptions and request that the customer complete authentication. Even if you’re primarily processing low-risk transactions, update your integration so your customers can complete authentication when requested by the bank. Stripe’s [new products and APIs](#preparing) help you claim these exemptions and maximize conversion by only requesting authentication when absolutely necessary. Learn more about [SCA exemptions](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication \"SCA exemptions\").\n\n## SCA-ready products and APIs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe provides prebuilt and customizable solutions to help you meet SCA requirements. Integrations that aren’t SCA-ready, like those using the legacy [Charges API](https://docs.stripe.com/payments/charges-api), will see high rates of declines as banks begin enforcing SCA.\n\nWhether you collect one-time payments or save cards for later reuse, Stripe has SCA-ready products that let us update your integration for future regulations, with minimal changes required by you.\n\n### One-time payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAccept card payments with the [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") and Stripe’s new version of Checkout—a prebuilt, Stripe-hosted checkout flow that automatically handles SCA requirements for you. Checkout is customizable and lets you accept payments for one-time purchases and [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") on your website.\n\n*   [Use a prebuilt checkout page](https://docs.stripe.com/payments/accept-a-payment?integration=checkout)\n*   [Build a custom payment flow](https://docs.stripe.com/payments/accept-a-payment?integration=elements)\n\n### Reusing cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSave a card for later reuse with Stripe’s new Payment Intents and [Setup Intents APIs](https://docs.stripe.com/api/setup_intents \"Setup Intents API\"). You can also use Checkout—a prebuilt, Stripe-hosted checkout flow—to automatically handle SCA requirements, or use Stripe Billing to handle SCA for subscription models.\n\n*   [Use a prebuilt checkout page](https://docs.stripe.com/payments/save-and-reuse?platform=checkout)\n*   [Build a custom flow to save card details](https://docs.stripe.com/payments/save-and-reuse)\n*   [Use Billing for subscription models](https://docs.stripe.com/billing/migration/strong-customer-authentication)\n\n## SCA Migration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRead the [SCA migration](https://docs.stripe.com/strong-customer-authentication/migration) guide to learn more about which products are best suited for you. For specific product recommendations based on common business scenarios, check out the [SCA payment flows](https://stripe.com/guides/sca-payment-flows) guide.",
  "title": "Strong Customer Authentication readiness | Stripe Documentation",
  "description": "Learn how the Strong Customer Authentication regulation affects your business and how to update your integration to support it.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/wallets",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Wallets\n\n## Learn about wallet payments with Stripe.\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") can use wallets to pay online with a saved card or a digital wallet balance. Retailers often use wallets to:\n\n*   Reduce fraud and increase conversion on mobile\n*   Reach buyers in China, where wallets are the most popular way to pay\n\nWallets might not be a good fit for your business if you sell [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). Some wallets don’t support recurring payments.\n\n## Payment experience![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers confirm the transaction by authenticating their wallet credentials at checkout. If using mobile, they can authenticate with fingerprint or face recognition, their mobile passcode, or by logging into their wallet app. On the web, they can also scan a QR code with their mobile phone to complete the transaction.\n\n### Customer-facing mobile flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mobile-select-wallet.ae8fc72d300f1439a3a7a71fb2bf5044.svg)\n\nSelects wallet at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mobile-authenticate.153e1ddb6c375274e7c82ee4bd2aeaf8.svg)\n\nEnters wallet credentials\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mobile-success.162cdd6fd7119df7cb8f7329741e1e4d.svg)\n\nGets notification that payment is complete\n\n### Customer-facing web flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nSelects wallet at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mobile-redirect.043807104eb6fd382652e3ea987daf95.svg)\n\nUses mobile to confirm payment\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\nGets notification that payment is complete\n\n## Product support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve created a single integration for all wallets that works across Stripe products, where Stripe Checkout, Link, Apple Pay, and Google Pay are automatically enabled.\n\n\\* Invoices and Subscriptions only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).\n\n## Migrating from the Sources or Tokens APIs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your current integration uses the Sources or Tokens API, we recommend following the [migration guide](https://docs.stripe.com/payments/payment-intents/migration) to transition to Payment Intents and Payment Methods.",
  "title": "Wallets | Stripe Documentation",
  "description": "Learn about wallet payments with Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/disputes/responding",
  "markdown": "# Responding to disputes | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to effectively respond to disputes.\n\nWhen an account owner files a dispute against a payment, their bank alerts Stripe and Stripe notifies you through the following channels:\n\n*   Email\n*   Stripe Dashboard\n*   An API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks \"webhook\"))\n*   Push notification (if you’ve subscribed)\n\nEach of the dispute notification channels provides a link to the dispute’s details page in your Dashboard, where you can learn more about the reason for the dispute and take appropriate action.\n\nYou can see a detailed list of all disputed payments on the [Disputes tab of the Payments page](https://dashboard.stripe.com/disputes) in your Dashboard. To review or respond to a dispute, open its details page by selecting it in the list.\n\nYou can also use [Fraud Stripe Apps](https://marketplace.stripe.com/categories/fraud) to automate dispute management and handle chargebacks.\n\n#### Note\n\nWhen you receive a dispute notification, take action to resolve it before the deadline. If you don’t respond, you automatically lose the dispute and can’t retrieve the disputed funds.\n\n[](#review-reasons)\n\nWhen you get a dispute, the corresponding category or reason appears in your [Dashboard](https://dashboard.stripe.com/disputes) and as the value for the `reason` attribute of the [dispute](https://docs.stripe.com/api#dispute_object-reason) object.\n\nEach dispute category specifies different response requirements and recommendations to make it effective in addressing the root claim from the cardholder, so your first step is to review our response guidelines for the [category](https://docs.stripe.com/disputes/categories#dispute-category-types) of your dispute so you can collect the best set of evidence to counter the dispute claim.\n\n### Inquiries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInquiries appear as disputed payments in the Dashboard, but they actually represent a pre-dispute stage that’s typically issued when an account owner doesn’t recognize a transaction on their account. Respond in this stage to resolve any questions and prevent a formal dispute escalation, which saves you time, fees, and your rating with the card networks. For more information, see [Inquiries](https://docs.stripe.com/disputes/how-disputes-work#inquiries).\n\n#### Note\n\nIf an inquiry escalates to a chargeback, you must submit another response for the dispute.\n\n### Fraudulent Disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Visa CE 3.0 Eligibility![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor fraudulent disputes with the Visa 10.4 (Card absent fraud) code, Stripe automatically evaluates your transaction history to determine eligibility with [Visa Compelling Evidence 3.0](https://docs.stripe.com/disputes/categories#visa-ce-30). If your dispute is eligible, we notify you in the Dashboard and in the dispute email. In these cases, we encourage [submitting evidence](#respond) because this eligibility typically translates to a significantly higher likelihood of overturning the dispute in your favor.\n\n#### Liability Shift![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor fraudulent disputes that might be covered by the [liability shift](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments) rule, Stripe automatically provides most of the evidence, such as the Electronic Commerce Indicator (ECI) from [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\").\n\n[\n\n## Understand the complaint![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#understand)\n\nWhen possible, the Dispute details page provides you with a copy of the bank’s submission to Stripe based on the account owner’s claim. These are actual documents attached by card networks and can provide additional information about the disputed transaction, such as a text description from the account owner describing the specific complaint. When responding to the dispute, make sure to properly address the issue described in these files.\n\nIf the dispute is still open and the bank has provided these files, select **Review the claim details** under Step 1 of the checklist modal in the Dashboard to view them.\n\nThe Dispute details page might also provide you with a way to email the account owner. We recommend contacting them, as it might give you insight to better understand the complaint and help you decide how to proceed. Be sure to keep a record of all communication with your customer during this process, as it provides evidence to submit with your response.\n\n[](#decide)\n\nWhen you have a clear picture of the dispute details, decide whether to accept or challenge the dispute. Consider the following questions in your determination:\n\n*   Is the account owner’s claim valid?\n*   If not, do I have the evidence required to disprove the claim?\n*   Can I convince the account owner to withdraw their dispute if I resolve their complaint amicably, for example, by offering a store credit or a replacement item?\n*   Is the dispute [CE 3.0 Eligible](#visa-ce-30-eligibility)? If so, consider responding because Stripe provides most of the required evidence from your transaction history.\n*   Might the dispute be covered by the [liability shift](#liability-shift) rule? If so, consider responding with evidence on top of what Stripe automatically provides, such as the [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") outcome.\n\nWhen you’ve decided how to respond, select the corresponding button on the Dispute details page in your Dashboard:\n\n*   **Accept dispute** submits a response to the issuing bank affirming that you aren’t contesting the refunded amount.\n*   **Counter dispute** opens a form that guides you through the submission process, prompts you for evidence that is relevant to the dispute type and your response type, and allows you to easily upload supporting files.\n\nSee [Responding to disputes using the API](https://docs.stripe.com/disputes/api) if you prefer to handle disputes programmatically.\n\n[](#respond)\n\n#### Prepare your response carefully\n\nYou have only one opportunity to submit your response. Stripe immediately forwards your response and all supporting files to the issuing bank. You can’t edit the response or submit additional files, so make sure you’ve assembled all your evidence before you submit.\n\n1.  **Open the dispute response form**: Click **Counter dispute** to open Stripe’s dispute response form.\n    \n2.  **Tell us about the dispute**: In the first page of the form, tell us why you believe the dispute is in error and the product type of the original purchase. This information along with the dispute category helps Stripe recommend the most relevant evidence to support your challenge on the next page of the form. For example, if your counter to a customer’s claim that they canceled a subscription for an online service is that the customer agreed to a minimum term, it doesn’t make sense to ask you for shipping and tracking details. When your integration supports it, Stripe automatically captures the product type based on the original payment.\n    \n3.  **Assemble your evidence**: The second page of the form has a dynamic set of sections representing the most relevant details you can provide for your individual case.\n    \n    In the **Supporting Files**: section, use the File Upload tool to attach evidence that matches the checklist of evidence types relevant to your dispute type and counter argument. For each uploaded file, specify which type of evidence it satisfies. You can only submit one file per type of evidence, so if you have several files representing one type of evidence, combine them into a single, multi-page file.\n    \n    Consider the following guidelines to make sure your supporting files are effective:\n    \n    *   Consult the evidence recommendations for your specific [dispute category](https://docs.stripe.com/disputes/categories#dispute-category-types).\n        \n    *   For fraudulent disputes in particular, if your dispute is [Visa CE 3.0 eligible](#visa-ce-30-eligibility), look for the Required for CE 3.0 badge throughout the response form. In most cases, Stripe pre-populates these fields with the required data from your transaction history.\n        \n        *   If the field is pre-populated, don’t edit it because you might affect eligibility\n        *   If the field is empty, add the requested information, such as the product description\n        \n        If your dispute may be covered by the [liability shift](#liability-shift) rule, we populate [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") information such as the Electronic Commerce Indicator (ECI) automatically for you.\n        \n    *   Organize each piece of evidence according to the evidence type it satisfies - be as succinct as possible.\n        \n    *   Combine items of the same evidence type into a single file.\n        \n    *   Limit your evidence file size to the combined maximum of 4.5 MB.\n        \n    *   Limit your Mastercard evidence file length to the combined maximum of 19 pages.\n        \n    *   Banks evaluating the dispute won’t review any external content, so don’t include:\n        \n        *   Audio or video files\n        *   Requests to call or email for more information\n        *   Links to click for further information (for example, file downloads or links to tracking information)\n4.  **Background evidence**: The other sections of the second page vary depending on the dispute type and your answers in the first page. When your integration supports it, Stripe automatically captures the data for these sections and pre-populates both the API evidence object attributes and the form fields in the Dashboard. But if any of these fields aren’t pre-populated, include as much information as you can before you submit your response. These sections can include:\n    \n    *   Shipping details\n    *   Refund policy details\n    *   Customer details\n    *   Product details\n    \n    The more information your integration [collects and passes to Stripe](https://docs.stripe.com/disputes/prevention/best-practices#collect-information) when your customer makes a payment, the better your ability to prevent disputes and fraud from occurring, and challenge them effectively when they do.\n    \n5.  **Submit evidence**: Click the checkbox to acknowledge your understanding that your response is final. After you submit it, Stripe automatically puts the evidence you provide into a format accepted by the issuing bank and submits it for consideration. At this point, you can’t amend what you’ve submitted or provide any additional information, so make sure to include every relevant detail.\n    \n\n#### Note\n\nIn some cases, you might have multiple disputes associated with a single payment. If this occurs, consider responding to each dispute individually.\n\n[](#status)\n\nAfter you submit a response, the status of the dispute changes to `under_review`. When the issuer informs Stripe of its decision, we inform you of the outcome by email, in the `charge.dispute.closed` webhook event, and by updating the dispute status in the Dashboard and the `Dispute` API object to one of the following:\n\n*   `won` indicates that the bank decided in your favor and overturned the dispute. In this case, the issuing bank returns the debited chargeback amount to Stripe, and Stripe passes this amount back to you. For businesses in Mexico, the dispute fee might also be returned. Otherwise, the dispute fee isn’t returned.\n    \n*   `lost` indicates that the bank decided in the account owner’s favor and upheld the dispute. In this case, the refund is permanent and the dispute fee isn’t returned.\n    \n    In some cases, the bank provides additional details about the dispute decision. Select **View issuing bank response** under **Relevant documents** in the Dispute details to view them.\n    \n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Preventing disputes and fraud](https://docs.stripe.com/disputes/prevention)\n*   [Dispute monitoring programs](https://docs.stripe.com/disputes/monitoring-programs)\n*   [Calculating dispute rates](https://docs.stripe.com/disputes/measuring)",
  "title": "Responding to disputes | Stripe Documentation",
  "description": "Understand how to evaluate the aspects of a dispute that influence how you should respond. Then review the steps for how to submit the best response with the most convincing evidence.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/3d-secure",
  "markdown": "# 3D Secure authentication | Stripe DocumentationThe Stripe Docs logo\n\n## Reduce fraud and meet regulatory requirements through 3D Secure (3DS) authentication.\n\n[3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") (3DS) is an authentication method that provides an additional layer of authentication for credit card transactions, protecting against fraudulent actors. 3DS asks your customers to verify their identity with the card issuer during payment. In most scenarios, you direct your customer to a verification page on their bank’s site where they type in a password linked to the card or a code sent to their phone. Customers might recognize this method through the card networks’ brand names, like Visa Secure and Mastercard Identity Check.\n\nThe [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") regulation, as part of PSD2 in Europe and similar regulations in the UK, India and Australia, might require using 3DS for card payments. 3DS is optional in other regions but you can still use it as a tool to reduce fraud.",
  "title": "3D Secure authentication | Stripe Documentation",
  "description": "Reduce fraud and meet regulatory requirements through 3D Secure (3DS) authentication.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/setup-intents",
  "markdown": "# The Setup Intents API | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about the Setup Intents API for saving payment methods.\n\nUse the [Setup Intents API](https://docs.stripe.com/api/setup_intents \"Setup Intents API\") to set up a payment method for future payments. It’s similar to a payment, but no charge is created. [Set up a payment method for future payments now](https://docs.stripe.com/payments/save-and-reuse).\n\nThe goal is to have payment credentials saved and optimized for future payments, meaning the payment method is configured correctly for any scenario. When setting up a card, for example, it may be necessary to authenticate the customer or check the card’s validity with the customer’s bank. Stripe updates the `SetupIntent` object throughout that process.\n\n![UI that collects card details but does not charge the card](https://b.stripecdn.com/docs-statics-srv/assets/reuse-si.2499c9ffdcfc8bd5d430e9a1809890bf.svg)\n\n## Saving and reusing payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Setup Intents API is useful for businesses that onboard customers but don’t charge them right away:\n\n*   A car rental company that collects payment method details before the customer rents the car and charges the card after the rental period ends\n*   A crowdfunding website that collects card details to be charged later, only if the campaign reaches a certain amount\n*   A utility company that charges a different amount each month based on usage but collects SEPA payment details before the first month’s payment\n\n#### Note\n\nYou can set up payment methods for future use with [Checkout](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) too.\n\n#### Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Save cards without making an initial payment](https://docs.stripe.com/payments/save-and-reuse)\n*   [Save bank details for SEPA Direct Debit payments](https://docs.stripe.com/payments/sepa-debit/set-up-payment)\n*   [Save bank details for BECS Direct Debit payments](https://docs.stripe.com/payments/au-becs-debit/set-up-payment)\n\n## Getting permission to save a payment method ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. If you set up a payment method for future on-session payments, such as displaying the payment method on a future checkout page, make sure that you explicitly collect consent from the customer for this specific use. For example, include a “Save my payment method for future use” checkbox to collect consent. If you need to differentiate between payment methods saved only for offline usages and payment methods you can present to your customer for future on-session purchases, you can utilize the [allow\\_redisplay](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) parameter on the PaymentMethod object.\n\nIf you set up a payment method for future off-session payments, you need permission. Creating an agreement (sometimes called a _mandate_) up front allows you to charge the customer when they’re not actively using your website or app.\n\nAdd terms to your website or app that state how you plan to process payments, and let customers opt in. At a minimum, ensure that your terms cover the following:\n\n*   The customer’s permission to your initiating a payment or a series of payments on their behalf\n*   The anticipated frequency of payments (that is, one-time or recurring)\n*   How the payment amount will be determined\n\nSee recommended mandate text for [saving cards](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#collect-payment-details) or [saving SEPA bank details](https://docs.stripe.com/payments/sepa-debit/set-up-payment).\n\nFor users impacted by [SCA](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"), this agreement helps payments succeed without interruption. When you set up your integration to properly save a card, Stripe marks any subsequent off-session payment as a [merchant-initiated transaction](https://stripe.com/guides/strong-customer-authentication#merchant-initiated-transactions-including-variable-subscriptions \"merchant-initiated transaction\") (MIT) so that your customers don’t have to come back online and authenticate. Merchant-initiated transactions require an agreement between you and your customer.\n\n## Increasing success rate by specifying usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [usage](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) parameter tells Stripe how you plan to use payment method details later. For some payment methods, Stripe can use your `usage` setting to pick the most frictionless flow for the customer. This optimization is designed to increase the number of successful payments.\n\nFor example, credit and debit cards under European [SCA](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") regulation may require the customer to authenticate the card during the saving process. Setting `usage` to `off_session` properly authenticates a credit or debit card for off-session payments so that your customer doesn’t have to come back online and re-authenticate. So although it creates initial friction in the setup flow, setting `usage` to `off_session` can reduce customer intervention in later off-session payments.\n\nHowever, if you only plan to use the card when the customer is checking out, set `usage` to `on_session`. This lets the bank know you plan to use the card when the customer is available to authenticate, so you can postpone authenticating the card details until then and avoid upfront friction.\n\n| How you intend to use the card | usage enum value to use |\n| --- | --- |\n| On-session payments only | `on_session` |\n| Off-session payments only | `off_session` (default) |\n| Both on and off-session payments | `off_session` (default) |\n\nNote that `usage` is an optimization. A card set up for on-session payments can still be used to make off-session payments, but the bank is more likely to reject the off-session payment and require authentication from the customer. In either case, later authentication may still be required, so build a recovery process in your app. When an off-session card payment requires authentication, bring your customer back online to complete the payment.\n\nIf not specified, `usage` defaults to `off_session`. See how to create a SetupIntent on your server and specify the `usage`:\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d usage=on_session`\n\n#### Note\n\nFollow the guidance on this page to ensure your integration handles cards that require [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). Correctly flagging transactions allows Stripe to claim correct SCA exemptions on your behalf to minimize the need for authentication with each payment.",
  "title": "The Setup Intents API | Stripe Documentation",
  "description": "Learn more about the Setup Intents API for saving payment methods.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-methods",
  "markdown": "# Payment Methods API | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about the API that powers a range of global payment methods.\n\nThe Payment Methods API allows you to accept a variety of payment methods through a single API. A [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) object contains the payment method details to create payments. With the Payment Methods API, you can combine a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"):\n\n*   With a [PaymentIntent](https://docs.stripe.com/api/payment_intents) to accept a payment\n*   With a [SetupIntent](https://docs.stripe.com/api/setup_intents) and a [Customer](https://docs.stripe.com/api/customers \"Customers\") to save payment details for later\n\n## Supported payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo determine which payment methods to use for specific locales, see the [guide to payment methods](https://stripe.com/payments/payment-methods-guide).\n\nThe guide includes available payment methods for different regions, a detailed description of each payment method’s characteristics, and the [geographic regions](https://stripe.com/payments/payment-methods-guide#payment-methods-fact-sheets) where they are most relevant. You can enable any payment methods available to you in the [Dashboard](https://dashboard.stripe.com/). Activation is generally instantaneous and does not require additional contracts.\n\n## Customer actions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n​​Some payment methods require your customer to take additional steps to complete the payment. The PaymentIntent object’s `next_action` parameter specifies the type of customer action.\n\nSome common actions that customers need to perform are:\n\n*   ​​Redirect to their bank’s online service to authenticate and approve the payment.\n*   Verify ownership of their account by providing a one-time code that you post to the Stripe API (for example, microdeposits).\n*   Push funds (for example, in the case for bank transfers) through their bank’s online service.\n\nNot all payment methods require additional customer actions. For example, card payments (excluding 3D Secure) require no additional authentication beyond collecting card details.\n\n#### Note\n\nFor payment methods that require customer action, listen to [webhooks](#webhooks) for notifications on whether a payment has succeeded or not.\n\n## Immediate or delayed notification of payment success ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome payment methods immediately return payment status when a transaction is attempted (for example, card payments) but other methods have a delay such as ACH debits. For those that immediately return payment status, the PaymentIntent status either changes to `succeeded` or `requires_payment_method`. A status of `succeeded` guarantees that you will receive the funds from your customers.\n\nPayment methods with delayed notification can’t guarantee payment during the delay. The status of the PaymentIntent object will be `processing` until the payment status is either successful or failed. It’s common for businesses to hold an order in a _pending_ state during this time, not fulfilling the order until the payment is successful.\n\n#### Note\n\n​​For payment methods with delayed notification, listen to [webhooks](#webhooks) for notifications on whether a payment has succeeded or not.\n\n## Single-use or reusable ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can reuse certain payment methods (for example, cards or bank debits) for additional payments without authorizing and collecting payment details again.\n\nYou should always set up reusable payment methods for future use to reduce the chance of future declines and payment friction (such as [authentication being required](https://docs.stripe.com/strong-customer-authentication)). Reusable payment methods can be [set up for future use when accepting a payment](https://docs.stripe.com/payments/save-during-payment) or [set up for future use without taking a payment](https://docs.stripe.com/payments/save-and-reuse).\n\nSingle-use payment methods (for example, some kinds of bank transfers) can’t be attached to customers because they’re consumed after a payment attempt.\n\n## Use webhooks to track payment status ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse [webhooks](https://docs.stripe.com/webhooks \"webhook\") for payment methods that either require customer action or when payment notification is delayed. Stripe sends the following events when the `PaymentIntent` status is updated:\n\n| Event | Description | Next steps |\n| --- | --- | --- |\n| `payment_intent.processing` | The customer’s payment was submitted to Stripe successfully. Only applicable to payment methods with [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification). | Wait for the initiated payment to succeed or fail. |\n| `payment_intent.succeeded` | The payment succeeded. | Fulfill the purchased goods or services. |\n| `payment_intent.payment_failed` | The payment failed. | Send an email or push notification to request another payment method. |\n\n​​You can also use the following options instead of building a webhook handler to listen to events:\n\n*   Manually track the status of payments in the Stripe Dashboard, if your business accepts a low volume of orders from payment methods with delayed notification. The Dashboard allows you to [view all your Stripe payments](https://dashboard.stripe.com/test/payments), send email receipts, handle payouts, or retry failed payments.\n*   Use polling (for example, repeatedly retrieving a PaymentIntent so that you can check its status). Note that polling is significantly less reliable and may not work at scale. Stripe enforces rate limiting on API requests, so exercise caution if you use polling.\n*   Use a partner application to handle common business events, like [automation](https://stripe.partners/?f_category=automation) or [marketing and sales](https://stripe.partners/?f_category=marketing-and-sales), by integrating a partner application.\n\n## The PaymentMethod object ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA PaymentMethod contains reusable payment method details for creating payments (for example, card expiration date or billing address), it doesn’t include transaction-specific information (for example, amount, currency). A PaymentMethod is attached to a PaymentIntent to represent the [states of a payment lifecycle](https://docs.stripe.com/payments/paymentintents/lifecycle). Each PaymentMethod has a [type attribute](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type) (for example, `\"type\": \"sepa_debit\"` ) and an additional hash whose name matches the type and contains information specific to the PaymentMethod type (for example, `\"sepa_debit\":{}`). Example of a `sepa_debit` PaymentMethod object:\n\n`{   \"id\": \"pm_123456789\",   \"object\": \"payment_method\",   \"billing_details\": {     \"address\": {...},     \"email\": \"jenny@example.com\",     \"name\": \"Jenny Rosen\",     \"phone\": \"+335555555555\"   },   \"sepa_debit\": {     \"bank_code\": \"37040044\",     \"branch_code\": \"94832\",     \"country\": \"FR\",     \"fingerprint\": \"ygEJfUjzWMGyWnZg\",     \"last4\": \"3000\"   },   \"type\": \"sepa_debit\",   (...) }`\n\n#### Note\n\nTo safely handle sensitive payment information and automatically handle customer actions, Stripe recommends that you create payment methods using [Stripe.js](https://docs.stripe.com/js#stripe-create-payment-method).",
  "title": "Payment Methods API | Stripe Documentation",
  "description": "Learn more about the API that powers a range of global payment methods.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/older-apis",
  "markdown": "# Older payment APIs | Stripe DocumentationThe Stripe Docs logo\n\n## Information about our older APIs and the newer APIs that replace them.\n\nWe’ve replaced some of our older APIs and no longer update their documentation.\n\n## Migrate to current APIs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe older APIs are limited. To get the latest Stripe features, migrate to the [Payment Intents](https://docs.stripe.com/payments/payment-intents), [Setup Intents](https://docs.stripe.com/payments/setup-intents), and [Payment Methods](https://docs.stripe.com/payments/payment-methods) APIs. See each individual API’s docs for specifics on migrating.\n\n## Deprecation of the Sources API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve deprecated support for local payment methods in the [Sources API](https://docs.stripe.com/sources) and plan to turn it off. If you currently handle any local payment methods using the Sources API, you must [migrate them to the current APIs](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll communicate more information about this end of support via email.\n\nWe’ve also deprecated support for card payments in the Sources API, but don’t currently plan to turn it off.\n\n## Older APIs that remain available![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlthough unsupported, these APIs aren’t going away. Until you upgrade your integration, you can still use these APIs:\n\n*   [Charges](https://docs.stripe.com/payments/charges-api)\n*   [ACH](https://docs.stripe.com/ach-deprecated)\n\n## Comparing the APIs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Older payment APIs | Stripe Documentation",
  "description": "Information about our older APIs and the newer APIs that replace them.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/more-payment-scenarios",
  "markdown": "# More payment scenarios | Stripe DocumentationThe Stripe Docs logo\n\n## Find a payments integration to support your use case.\n\nThe [Payment Intents](https://docs.stripe.com/api/payment_intents/create) and [Setup Intents](https://docs.stripe.com/api/setup_intents/create) APIs handle any changing regulations and bank behaviors for you. Tell Stripe how you intend to use a payment method and we’ll route payments behind the scenes to improve your business’s payment acceptance rates.\n\n[](https://docs.stripe.com/payments/save-and-reuse \"Set up future payments\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/Charge-later.28228850e63d988f4fd682d2e49ddb4d.svg)](https://docs.stripe.com/payments/save-and-reuse \"Set up future payments\")\n\nSecurely save payment details, charge them later.\n\n[](https://docs.stripe.com/payments/3d-secure \"3D Secure authentication\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/Handle-authentication.214b18ba6fec04b5e60db52f98b49385.svg)](https://docs.stripe.com/payments/3d-secure \"3D Secure authentication\")\n\nLearn about 3D Secure and how to support it.\n\n[](https://docs.stripe.com/payments/finalize-payments-on-the-server \"Finalize payments on the server\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/Accept-payment.d5a983eea468e3ce2bb8532a350bfcf9.svg)](https://docs.stripe.com/payments/finalize-payments-on-the-server \"Finalize payments on the server\")\n\n[Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server \"Finalize payments on the server\")\n\nBuild an integration where you can collect payment details on the client and confirm payments from the server.",
  "title": "More payment scenarios | Stripe Documentation",
  "description": "Find a payments integration to support your use case.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/baas/start-integration/integration-guides/b2b-payments",
  "markdown": "# B2B Payments integration guide | Stripe DocumentationThe Stripe Docs logo\n\n## Build a B2B Payments integration with Issuing.\n\nBuild a US B2B Payments integration by using Stripe [Issuing](https://docs.stripe.com/issuing/how-issuing-works) to create cards for your business, employees, or contractors to make purchases on your behalf.\n\nBy the end of this guide, you’ll know how to:\n\n*   Fund your Issuing Balance\n*   Create virtual cards for your own business\n*   Use these cards to spend funds from your Issuing Balance\n\n[](#add-funds)\n\nTo spend money using cards, add funds to the Issuing balance on your account. This balance represents funds reserved for Issuing and is safely separated from your earnings, payouts, and funds from other Stripe products.\n\nYou can add funds from your [Dashboard](https://dashboard.stripe.com/balance/overview#issuing-summary) or using the [create top-up](https://docs.stripe.com/api/topups/create) endpoint.\n\n`curl https://api.stripe.com/v1/topups \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d destination_balance=issuing \\   -d amount=2000 \\   -d currency=usd \\   -d description=\"Top-up for Issuing, July 12, 2024\" \\   -d statement_descriptor=Top-up`\n\n[](#create-cardholders-cards)\n\n### Create a cardholder ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Cardholder](https://docs.stripe.com/api/#issuing_cardholder_object) is the company or business entity that’s authorized to use card funding by the Issuing balance. The `Cardholder` object includes relevant details, such as a [name](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-name) to display on cards and a [billing](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-billing) address, which is usually the business address.\n\nThe following API call creates a new `Cardholder`:\n\n`curl https://api.stripe.com/v1/issuing/cardholders \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d name=\"Company Card\" \\   --data-urlencode email=\"company@example.com\" \\   --data-urlencode phone_number=\"+18008675309\" \\  -d status=active \\  -d type=company \\  -d \"billing[address][line1]\"=\"123 Main Street\" \\  -d \"billing[address][city]\"=\"San Francisco\" \\  -d \"billing[address][state]\"=CA \\  -d \"billing[address][postal_code]\"=94111 \\  -d \"billing[address][country]\"=US`\n\nStripe returns a `Cardholder` object that contains the information you provided and sends the `issuing_cardholder.created` webhook event.\n\n### Create a card ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a card and attach it to the `Cardholder` that you want to make the authorized user of the card.\n\nIn the following examples, we show you how to create a [virtual card](https://docs.stripe.com/issuing/cards/virtual). You can, however, create [physical cards](https://docs.stripe.com/issuing/cards/physical) and ship them to cardholders in live mode.\n\n`curl https://api.stripe.com/v1/issuing/cards \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d currency=usd \\  -d type=virtual \\  -d cardholder=  {{CARDHOLDER_ID}}    `\n\nStripe returns a `Card` object on creation, and sends the `issuing_card.created` webhook event:\n\n`{   \"id\": \"ic_1NvPjF2SSJdH5vn2OVbE7r0b\",   \"object\": \"issuing.card\",   \"brand\": \"Visa\",   ...   \"status\": \"inactive\",   \"type\": \"virtual\" }`\n\nYou need to activate the card before a user can use it. While you can activate virtual cards in the same API call you used to create it, physical cards must be activated separately. When ready, activate the card by marking the `status` as `active`:\n\n`curl https://api.stripe.com/v1/issuing/cards/ic_1NvPjF2SSJdH5vn2OVbE7r0b \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d status=active`\n\nAt this point, there’s now an active card attached to a cardholder. See the [Issuing page](https://dashboard.stripe.com/issuing/overview) to view the card and cardholder information.\n\n`{   \"id\": \"ic_1NvPjF2SSJdH5vn2OVbE7r0b\",   \"object\": \"issuing.card\",   \"brand\": \"Visa\",   ...   \"status\": \"active\",   \"type\": \"virtual\", }`\n\nTo learn more, see:\n\n*   [Read more about virtual cards](https://docs.stripe.com/issuing/cards/virtual).\n*   [Read more about physical cards](https://docs.stripe.com/issuing/cards/physical).\n*   [Using the Dashboard for Issuing with Connect](https://docs.stripe.com/issuing/connect#using-dashboard-issuing)\n*   [Create cards with the API](https://docs.stripe.com/issuing/cards)\n*   [Testing physical card shipment](https://docs.stripe.com/issuing/cards/physical/testing)\n\n[](#use-card)\n\nTo observe the impact of card activity on the associated balance, generate a test authorization. You can do this in the **Issuing page** of the Dashboard for the connected account, or with the following call to the [Authorization API](https://docs.stripe.com/api/issuing/authorizations):\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d card=  {{CARD_ID}}   \\  -d amount=1000 \\  -d authorization_method=chip \\  -d \"merchant_data[category]\"=taxicabs_limousines \\  -d \"merchant_data[city]\"=\"San Francisco\" \\  -d \"merchant_data[country]\"=US \\  -d \"merchant_data[name]\"=\"Rocket Rides\" \\  -d \"merchant_data[network_id]\"=1234567890 \\  -d \"merchant_data[postal_code]\"=94107 \\  -d \"merchant_data[state]\"=CA`\n\nAfter approval, Stripe creates an `Authorization` in a `pending` state while it waits for [capture](https://docs.stripe.com/issuing/purchases/transactions). Note the authorization `id` that you’ll use to capture the funds:\n\n`{   \"id\": \"iauth_1NvPyY2SSJdH5vn2xZQE8C7k\",   \"object\": \"issuing.authorization\",   \"amount\": 1000,   ...   \"status\": \"pending\",   \"transactions\": [], }`\n\n### Capture the funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCapture the funds using the following code:\n\n`curl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/`\n\n`{{AUTHORIZATION_ID}}`\n\n`/capture \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nAfter the authorization is captured, Stripe creates an Issuing [Transaction](https://docs.stripe.com/issuing/purchases/transactions), the `status` of the authorization is set to `closed`.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Handling real-time auth webhooks](https://docs.stripe.com/issuing/controls/real-time-authorizations)\n*   [Spending controls](https://docs.stripe.com/issuing/controls/spending-controls)\n*   [Issuing authorizations](https://docs.stripe.com/issuing/purchases/authorizations)\n*   [Issuing transactions](https://docs.stripe.com/issuing/purchases/transactions)\n*   [Testing Issuing](https://docs.stripe.com/issuing/testing)\n*   [Working with Stripe Issuing cards and Treasury](https://docs.stripe.com/treasury/account-management/issuing-cards)\n*   [Manage transaction fraud](https://docs.stripe.com/issuing/manage-fraud)\n*   [Issue regulated customer notices](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices)",
  "title": "B2B Payments integration guide | Stripe Documentation",
  "description": "Build a B2B Payments integration with Issuing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components",
  "markdown": "# Supported Connect embedded components | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about current and upcoming embedded components.\n\nAdd Connect embedded components to your page as HTML elements or as [React components](https://github.com/stripe/react-connect-js).\n\n## Available components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/connect/supported-embedded-components/account-management \"Account management\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/account-management.d93cc532baac7ecd3cd6643d3eaeee55.png)](https://docs.stripe.com/connect/supported-embedded-components/account-management \"Account management\")\n\nShow account details and allow them to be edited.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding \"Account onboarding\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/account-onboarding.95f17633afced6796cc6759330f3ac06.png)](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding \"Account onboarding\")\n\nShow a localized onboarding form that validates data.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/balances \"Balances\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/balances.2ebd5dfb88dc3e4fadb490e726100256.png)](https://docs.stripe.com/connect/supported-embedded-components/balances \"Balances\")\n\nShow balance information and allow your connected accounts to perform payouts.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/documents \"Documents\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/documents.d1d6714ebcd79d26c9729e618ce2e905.png)](https://docs.stripe.com/connect/supported-embedded-components/documents \"Documents\")\n\nShow a list of documents available for download.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/notification-banner \"Notification banner\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/notifications-banner.fd29bec4a8862dabbfab3d83106c2423.png)](https://docs.stripe.com/connect/supported-embedded-components/notification-banner \"Notification banner\")\n\nShow a banner that lists required actions for risk interventions and onboarding requirements.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/payments \"Payments\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/payments.ad0a2d5c6a2387f1ff595c6fcca96662.png)](https://docs.stripe.com/connect/supported-embedded-components/payments \"Payments\")\n\nShow a list of payments with export, refund, and dispute capabilities.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/payment-details \"Payment details\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/payment-details.c42997150069204957d8d1172849d66b.png)](https://docs.stripe.com/connect/supported-embedded-components/payment-details \"Payment details\")\n\nShow details of a given payment and allow users to manage disputes and perform refunds.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/payouts \"Payouts\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/payouts.2c5188c3132085b58dfc7fb661703d6f.png)](https://docs.stripe.com/connect/supported-embedded-components/payouts \"Payouts\")\n\nShow payout information and allow your users to perform payouts.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/payouts-list \"Payouts list\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/payouts-list.36eb022bd4c62d9d6b6b6a4fde0714aa.png)](https://docs.stripe.com/connect/supported-embedded-components/payouts-list \"Payouts list\")\n\nShow a filterable list of payouts.\n\n## Beta components Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen using private beta components, use beta versions of the Stripe SDK, as well as beta versions of the [@stripe/connect-js](https://github.com/stripe/connect-js) and [@stripe/react-connect-js](https://github.com/stripe/react-connect-js) SDKs.\n\nTo create an account session with private beta components, use the Stripe beta SDKs:\n\n*   [Ruby](https://github.com/stripe/stripe-ruby/#beta-sdks) `>=11.1.0-beta.1`\n*   [Python](https://github.com/stripe/stripe-python/#beta-sdks) `>=9.2.0b1`\n*   [PHP](https://github.com/stripe/stripe-php/#beta-sdks) `>=14.2.0-beta.1`\n*   [Node](https://github.com/stripe/stripe-node/#beta-sdks) `>=15.2.0-beta.1`\n*   [.NET](https://github.com/stripe/stripe-dotnet#beta-sdks) `>=44.2.0-beta.1`\n*   [Java](https://github.com/stripe/stripe-java#beta-sdks) `>=25.2.0-beta.1`\n*   [Go](https://github.com/stripe/stripe-go#beta-sdks) `>=78.2.0-beta.1`\n\nUse the client-side libraries for rendering the private beta components:\n\nInstall the library:\n\n`npm install --save @stripe/connect-js@beta`\n\nIf you’re using React in your application:\n\n`npm install --save @stripe/react-connect-js@beta`\n\n### Available beta components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/connect/supported-embedded-components/app-install \"App install\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/app-install.fccc72ed33b532bf2fd402d98b65e214.png)](https://docs.stripe.com/connect/supported-embedded-components/app-install \"App install\")\n\nShow a button to install an App.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/app-viewport \"App viewport\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/app-viewport.21e004d1d15b4e4f5f9f68e41885b2fa.png)](https://docs.stripe.com/connect/supported-embedded-components/app-viewport \"App viewport\")\n\nShow a view from an installed App.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/financial-account \"Financial account\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/financial-account.31638aec874b6e0d0f9e11018c6027b9.png)](https://docs.stripe.com/connect/supported-embedded-components/financial-account \"Financial account\")\n\nShow details of a financial account.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/issuing-card \"Issuing card\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/issuing-card.b5f53c96f0cb56ed7febd28e1e215c1c.png)](https://docs.stripe.com/connect/supported-embedded-components/issuing-card \"Issuing card\")\n\nShow an individual issued card.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/issuing-cards-list \"Issuing cards list\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/issuing-cards-list.a28b1c42c54a8fe797ca1021c41a7efc.png)](https://docs.stripe.com/connect/supported-embedded-components/issuing-cards-list \"Issuing cards list\")\n\nShow a table of all issued cards.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/payment-method-settings \"Payment method settings\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/payment-method-settings.77728dd382b9c523faadaad4cb562107.png)](https://docs.stripe.com/connect/supported-embedded-components/payment-method-settings \"Payment method settings\")\n\nShow a list of payment methods that connected accounts can manage and accept.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/tax-registrations \"Tax registrations\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/tax-registrations.e5aabe4b2c87144c5ee6ca4e548d162c.png)](https://docs.stripe.com/connect/supported-embedded-components/tax-registrations \"Tax registrations\")\n\nShow and manage tax registrations from connected accounts.\n\n[](https://docs.stripe.com/connect/supported-embedded-components/tax-settings \"Tax settings\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/tax-settings.eacea24c508ca45de63cf8f5978965ff.png)](https://docs.stripe.com/connect/supported-embedded-components/tax-settings \"Tax settings\")\n\nAllow connected accounts to set up Stripe Tax.\n\n## Integration guides![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/stripe-apps/accounting-software-integrations \"Accounting integrations\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/accounting-integrations.609dfd768f506c87c8ef2e8012bfef77.png)](https://docs.stripe.com/stripe-apps/accounting-software-integrations \"Accounting integrations\")\n\nShow third-party accounting software integrations.\n\n[](https://docs.stripe.com/baas/start-integration/integration-guides/embedded-finance?integration=embedded \"Embedded finance\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/Embedded_Finance.e4212392e3badc2f6de549998eb28f05.svg)](https://docs.stripe.com/baas/start-integration/integration-guides/embedded-finance?integration=embedded \"Embedded finance\")\n\nUse prebuilt UI components to embed Issuing and Treasury into your website.\n\n[](#migrating-v1-to-v2-beta)\n\n1.  Update your client library.\n    *   [Ruby](https://github.com/stripe/stripe-ruby/#beta-sdks) `>=11.1.0-beta.1`\n    *   [Python](https://github.com/stripe/stripe-python/#beta-sdks) `>=9.2.0b1`\n    *   [PHP](https://github.com/stripe/stripe-php/#beta-sdks) `>=14.2.0-beta.1`\n    *   [Node](https://github.com/stripe/stripe-node/#beta-sdks) `>=15.2.0-beta.1`\n    *   [.NET](https://github.com/stripe/stripe-dotnet#beta-sdks) `>=44.2.0-beta.1`\n    *   [Java](https://github.com/stripe/stripe-java#beta-sdks) `>=25.2.0-beta.1`\n    *   [Go](https://github.com/stripe/stripe-go#beta-sdks) `>=78.2.0-beta.1`\n2.  Update the beta header used from `embedded_connect_beta=v1` to `embedded_connect_beta=v2`.\n3.  Specify the list of `components` to enable as a parameter when creating an [Account Session](https://docs.stripe.com/api/account_sessions/create).\n\n[](#migrating-v2-beta-to-ga)\n\nIf you’re using a beta component that’s now generally available, follow these steps:\n\n1.  Update your client library.\n    *   [Ruby](https://github.com/stripe/stripe-ruby) `>=11.1.0`\n    *   [Python](https://github.com/stripe/stripe-python) `>=9.2.0`\n    *   [PHP](https://github.com/stripe/stripe-php) `>=14.2.0`\n    *   [Node](https://github.com/stripe/stripe-node) `>=15.2.0`\n    *   [.NET](https://github.com/stripe/stripe-dotnet) `>=44.2.0`\n    *   [Java](https://github.com/stripe/stripe-java) `>=25.2.0`\n    *   [Go](https://github.com/stripe/stripe-go) `>=78.2.0`\n2.  Remove the `embedded_connect_beta` header.\n3.  Use the GA releases of the `@stripe/connect-js` and `@stripe/react-connect-js` npm packages.",
  "title": "Supported Connect embedded components | Stripe Documentation",
  "description": "Learn about current and upcoming embedded components.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-vscode",
  "markdown": "# Stripe for Visual Studio Code\n\n## Build, test, and use Stripe inside your editor.\n\nStripe’s [extension](https://marketplace.visualstudio.com/items?itemName=Stripe.vscode-stripe) for [Visual Studio Code](https://code.visualstudio.com/) lets you generate sample code, view API request logs, forward events to your application, and use Stripe within your editor.\n\nA new Stripe panel in the activity bar provides access to code snippets for several languages, adds [debug configurations](https://code.visualstudio.com/docs/editor/debugging#_redirect-inputoutput-tofrom-the-debug-target), and extends the [command palette](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette) with common developer workflows.\n\nWith Stripe for VS Code, you can:\n\n*   [Get started quickly with a Stripe Sample.](#samples)\n*   [Forward Stripe webhook events to your local application.](#webhooks)\n*   [Stream request logs in real-time.](#monitor-logs)\n*   [Trigger new events while testing.](#webhooks)\n*   [Generate snippets for common scenarios.](#snippets)\n*   [Verify your source code doesn’t expose API keys.](#linter)\n*   [Quickly jump to the API reference.](#api-reference)\n*   [Easily access the Stripe Dashboard.](#dashboard-access)\n\n## Install Stripe for VS Code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Note\n\nAs a prerequisite, ensure you have the [Stripe CLI](https://docs.stripe.com/stripe-cli#install) installed.\n\nYou can find the Stripe VS Code extension in the [Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=Stripe.vscode-stripe). Click **Install** to add the extension to your editor.\n\n## Features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Get started quickly with a Stripe Sample ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Stripe Samples](https://github.com/stripe-samples) are built by Stripe, and provide all of the client and server code you need for common integration scenarios, such as creating a subscription with Stripe Billing.\n\nThe **Start with a Stripe Sample** button allows you to browse through the catalog and select the right language for your integration. The extension clones and opens the Sample in a new workspace, automatically populating your API keys in the .env file of the Sample.\n\n### Trigger and forward webhook events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can listen for incoming webhook events and forward them to your to your local machine in one of two ways:\n\n*   Click **Forward webhook events to your local machine** in the **Events** section.\n*   Run the command `Stripe: Forward webhook events to your local machine` from the [command palette](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette).\n\nThen, enter the localhost URL that you want to forward events to. If you’re using Connect, you can set a different URL for events from your Connect applications. If your localhost URLs use HTTPS, you can skip SSL certificate verification.\n\nYou can use the **Trigger new event** button to test your webhook integration with events from the Stripe API.\n\n#### Caution\n\nYou can only trigger events in test mode.\n\nYou can stream events created by members of your account in real time with the **Start streaming events** button. Clicking on an event entry under **Recent events** opens event details directly inside your editor.\n\n#### Note\n\nIf you’d like to resend an event, you can right click an event entry under **Recent events** or run a [Stripe CLI](https://docs.stripe.com/cli/events/resend) command: `stripe events resend <event>`.\n\n#### Stripe debug configuration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen forwarding events to your local machine, you may find yourself entering the same URLs over and over. To fix this, you can create a [debug configuration](https://code.visualstudio.com/docs/editor/debugging#_redirect-inputoutput-tofrom-the-debug-target) to save your forwarding setup, allowing you to start forwarding to your URLs with a single button.\n\nPlace the following configuration in a [launch.json](https://code.visualstudio.com/docs/editor/debugging#_launch-configurations) file, which VS Code uses to track debugging setup details. Then, select the configuration in the Run view. After selecting your configuration, press `F5` to quickly start forwarding events.\n\n`{   \"version\": \"0.2.0\",   \"configurations\": [     {       \"name\": \"Stripe: Webhooks listen\",       \"type\": \"stripe\",       \"request\": \"launch\",       \"command\": \"listen\",       \"forwardTo\": \"[http://localhost:3000](http://localhost:3000/)\",       \"forwardConnectTo\": \"[http://localhost:3000](http://localhost:3000/)\",`\n      \n\n`\"events\"`\n\n`: [\"payment_intent.succeeded\", \"payment_intent.canceled\"],         \"skipVerify\"  : true     }   ] }`\n\nYou can specify the `forwardTo` and `forwardConnectTo` parameters; these are the URLs on your local machine that you want to receive your account’s events and Connect events, respectively. The `events` parameter accepts an optional list to specify which events to receive. If you’re using HTTPS URLs, the `skipVerify` parameter accepts a Boolean to skip verifying SSL certificates.\n\n#### Compound configurations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can launch your local application and forward webhook events simultaneously using a [compound configuration](https://code.visualstudio.com/docs/editor/debugging#_compound-launch-configurations).\n\n`{   \"version\": \"0.2.0\",   \"configurations\": [     {       \"name\": \"Stripe: Webhooks listen\",       \"type\": \"stripe\",       \"request\": \"launch\",       \"command\": \"listen\",       \"forwardTo\": \"[http://localhost:3000](http://localhost:3000/)\",       \"forwardConnectTo\": \"[http://localhost:3000](http://localhost:3000/)\",       \"events\": [\"payment_intent.succeeded\", \"payment_intent.canceled\"],       \"skipVerify\": true     },     {       \"type\": \"node\",       \"request\": \"launch\",       \"name\": \"Node: Launch Program\",       \"program\": \"${workspaceFolder}/examples/standalone.js\",       \"skipFiles\": [\"<node_internals>/**\"]     }   ],   \"compounds\": [     {       \"name\": \"Launch: Stripe + API\",       \"configurations\": [\"Node: Launch Program\", \"Stripe: Webhooks listen\"]     }   ] }`\n\n### Monitor API request logs in real-time ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can stream API request logs created by members of your account in real time with the **Start streaming API logs** button. Clicking on a log entry under **Recent logs** opens log details directly inside your editor. From there, you can hover over the request ID to open the log in your Dashboard.\n\n#### Caution\n\nThe extension only delivers logs for requests made in test mode.\n\n### Code snippets for common Stripe scenarios ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can quickly generate code snippets for common scenarios (for example, creating a Checkout Session and redirecting the user to the browser) or basic API requests. After generating a snippet, you can tab through it to fill in your values.\n\n### Verify your source code doesn’t expose API keys ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe built-in Stripe linter checks for [API keys](https://docs.stripe.com/keys) in your source code and marks them as problems if you unsafely expose them.\n\n#### Note\n\nThe linter treats unsafe use of test-mode keys as warnings and live-mode keys as errors.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/api_key_linter.99d5ec681ed1835e12ec8ff43a31df42.png)\n\n### Access the Stripe API reference ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can hover over a resource method to reveal a link to the [Stripe API reference](https://docs.stripe.com/api). This is useful for identifying parameters for an API request or the shape of an API response.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/api_reference_hover.7faf7deee997b0f54656ed4a4f842e14.png)\n\n### Access the Stripe Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe **Quick Links** section includes links to quickly jump to the Dashboard to manage API keys, webhooks, and other resources.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/quick_links_view.dd5362166ad40a383ca540bc62e71ed6.png)\n\n## Settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following configurations can be set in your [VS Code settings](https://code.visualstudio.com/docs/getstarted/settings):\n\n| Setting name | Description |\n| --- | --- |\n| `stripe.cliInstallPath` | Specifies the absolute install path for the Stripe CLI executable. Default: the default install path for the Stripe CLI |\n| `stripe.projectName` | Specifies the project name to read from for the Stripe CLI configuration. You can define a unique configuration for individual projects, or use the global configuration by default. See the [Stripe CLI reference](https://docs.stripe.com/cli/login) for more details. Default: `default` |\n| `stripe.telemetry.enabled` | Specifies whether to enable Stripe telemetry (even if enabled still abides by the overall `telemetry.enableTelemetry` setting). Default: `true` |\n\n## Commands ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe extension supports various commands to access features through the [command palette](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette). To see the full list of supported commands, open the command palette and type `Stripe`.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/command_palette.ee0cb66b2fbbc0c2e981e1340815e57e.png)\n\n## Contributing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe VS Code is an open-source project under the MIT License. Contributions to the project are welcome. For details on how to contribute to the project, check out the [vscode-stripe](https://github.com/stripe/vscode-stripe) project on GitHub.\n\n## Feedback ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFeel free to provide feedback or submit feature requests through the project’s [issue tracker](https://github.com/stripe/vscode-stripe/issues/new).",
  "title": "Stripe for Visual Studio Code | Stripe Documentation",
  "description": "Build, test, and use Stripe inside your editor.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/file-upload",
  "markdown": "# File upload guide | Stripe DocumentationThe Stripe Docs logo\n\n## Use the File Upload API to securely send dispute evidence, identification documents, and more to Stripe.\n\nWhen you upload a file to Stripe using the API, a file token and other information about the file is returned. The token can then be used in other API calls. This guide provides a detailed walk-through of this process.\n\n## Uploading a file![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo upload a file, send a `multipart/form-data` request to **https://files.stripe.com/v1/files**. Note that the subdomain **files.stripe.com** is different than most of Stripe’s API endpoints. The request should specify a `purpose` and a `file`. The following example uploads a file located at **/path/to/a/file.jpg** on your local file system with the purpose `dispute_evidence`:\n\n`curl https://files.stripe.com/v1/files \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -F \"file\"=\"@/path/to/a/file.jpg\" \\   -F \"purpose\"=\"dispute_evidence\"`\n\nThe following example uploads a file using our Android SDK with the purpose `dispute_evidence`:\n\n`class CheckoutActivity : AppCompatActivity() {     private val stripe: Stripe by lazy {         Stripe(this,` \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n`)     }      private fun uploadFile(file: File) {         stripe.createFile(             StripeFileParams(                 file,                 StripeFilePurpose.DisputeEvidence             ),             callback = object : ApiResultCallback<StripeFile> {                 override fun onSuccess(result: StripeFile) {                     // File upload succeeded                 }                  override fun onError(e: Exception) {                     // File upload failed                 }              }         )     } }`\n\nThere are [several valid purpose](https://docs.stripe.com/api#create_file-purpose) values, each with file format and size requirements.\n\n| Purpose | Description | Supported mimetypes | Max size | Expiry | Downloadable |\n| --- | --- | --- | --- | --- | --- |\n| `account_requirement` | Additional documentation requirements that can be requested for an account. | PDF  <br>JPEG  <br>PNG | 16MB | NEVER | false |\n| `business_icon` | A business icon. | JPEG  <br>PNG  <br>GIF | 512KB | NEVER | true |\n| `business_logo` | A business logo. | JPEG  <br>PNG  <br>GIF | 512KB | NEVER | true |\n| `customer_signature` | Customer signature image. | JPEG  <br>PNG  <br>SVG | 4MB | 7 days | true |\n| `dispute_evidence` | Evidence to submit with a dispute response. | PDF  <br>JPEG  <br>PNG | 5MB | 9 months | true |\n| `identity_document` | A document to verify the identity of an account owner during account provisioning. | PDF  <br>JPEG  <br>PNG | 16MB | NEVER | false |\n| `pci_document` | A self-assessment PCI questionnaire. | PDF | 16MB | NEVER | true |\n| `tax_document_user_upload` | A user-uploaded tax document. | PDF  <br>CSV  <br>JPEG  <br>PNG  <br>XLSX  <br>DOCX | 16MB | NEVER | true |\n| `additional_verification` | Additional verification for custom accounts. | PDF  <br>JPEG  <br>PNG | 16MB | NEVER | false |\n| `terminal_reader_splashscreen` | Splashscreen to be displayed on Terminal readers. | PNG  <br>JPEG  <br>GIF | 4.194304MB | 1 year | true |\n\n#### Caution\n\n`identity_document` images also need to be smaller than 8,000px by 8,000px.\n\nThe MIME type of the file you wish to upload must correspond to its file format.\n\n| File format | MIME type |\n| --- | --- |\n| APK | **application/vnd.android.package-archive** |\n| CSV | **text/csv** |\n| DOCX | **application/vnd.openxmlformats-officedocument.wordprocessingml.document** |\n| GIF | **image/gif** |\n| HTML | **text/html** |\n| JPEG | **image/jpeg** |\n| JSON | **application/json** |\n| JSONL | **application/jsonl** |\n| MARKDOWN | **text/markdown** |\n| PDF | **application/pdf** |\n| PEM | **application/x-pem-file** |\n| PNG | **image/png** |\n| SVG | **image/svg+xml** |\n| TIFF | **image/tiff** |\n| TSV | **text/tab-separated-values** |\n| TXT | **text/plain** |\n| WEBP | **image/webp** |\n| XLS | **application/vnd.ms-excel** |\n| XLSM | **application/vnd.ms-excel.sheet.macroEnabled.12** |\n| XLSX | **application/vnd.openxmlformats-officedocument.spreadsheetml.sheet** |\n| XML | **application/xml** |\n| ZIP | **application/zip** |\n\n#### Caution\n\nAny Microsoft Office documents containing VBA macros will be rejected due to security concerns.\n\nA successful request returns a [file](https://docs.stripe.com/api/files/object) object.\n\n## Retrieving a File API resource![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo retrieve the API resource for a File, make a GET request to the **/v1/files** endpoint of the **files.stripe.com** subdomain providing the file upload ID:\n\n`curl https://files.stripe.com/v1/files/`\n\n`{{FILE_ID}}`\n\n `\\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n## Downloading File Contents ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf the file purpose allows downloading the file contents, then the [file](https://docs.stripe.com/api/files/object) includes a non-null `url` field indicating how to access the contents. This url requires authentication with your Stripe API keys.\n\n`curl https://files.stripe.com/v1/files/`\n\n`{{FILE_ID}}`\n\n  `-u sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\nIf you want unauthenticated access to a file whose purpose allows downloading, then you can produce anonymous download links by creating a [file\\_link](https://docs.stripe.com/api#file_links).\n\n`curl https://api.stripe.com/v1/file_links \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n  `-d file=  {{FILE_ID}}`\n\nThe file\\_link resource has a `url` field that will allow unauthenticated access to the contents of the file.\n\n## Using a file ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter a file is uploaded, the file upload ID can be used in other API requests. For example, to attach an uploaded file to a particular dispute as evidence:\n\n`curl https://api.stripe.com/v1/disputes/`\n\n`{{DISPUTE_ID}}`\n\n  `-u sk_test_4eC39HqLyjWDarjtT1zdp7dc -d \"evidence[receipt]\"=  {{FILE_ID}}`\n\nNote that you can only use an uploaded file in a single API request.\n\n## Handling Upload Errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you use the File API to upload a PDF document, we run it through a series of checks to validate that it is correctly formatted and meets PDF specifications. We return an error for uploads that fail any of our checks.\n\nTry the following to fix errors that we detect:\n\n*   Remove annotations or additional media you added to the document.\n*   If you cannot remove your annotations or media, or if you combined several PDFs into one, try using your computer’s Print to PDF function to create a fresh document.\n    *   [Print to PDF with macOS](https://support.apple.com/guide/mac-help/save-a-document-as-a-pdf-on-mac-mchlp1531/mac)\n    *   [Print to PDF with Adobe Acrobat](https://helpx.adobe.com/acrobat/using/print-to-pdf.html)",
  "title": "File upload guide | Stripe Documentation",
  "description": "Use the File Upload API to securely send dispute evidence, identification documents, and more to Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/dev-tools-csat",
  "markdown": "# Feedback on your developer experience\n\n## Tell us about your experience with Stripe developer tools.\n\nSelect the developer tool you would like to provide feedback on\n\nRate your experience with this developer tool\n\nExtremely dissatisfied\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\nExtremely satisfied\n\nTell us why you chose this rating\n\nMay we contact you for questions? If so, please provide your name and email\n\nFull name\n\nEmail",
  "title": "Feedback on your developer experience | Stripe Documentation",
  "description": "Tell us about your experience with Stripe developer tools.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/partners/training-and-certification",
  "markdown": "# Stripe certification for partners | Stripe DocumentationThe Stripe Docs logo\n\n## Become a Stripe-certified architect or developer.\n\nWe offer two types of Stripe certifications that to partners: architect and developer. Partners can achieve associate or professional-level certifications for each type. Stripe certifications let partners gain Stripe expertise and leverage their knowledge with in-depth training. After completing the [additional requirements](https://docs.stripe.com/partners#requirements), these certifications can also help you become a [Stripe verified partner](https://docs.stripe.com/partners#verified-partners). Regardless of the [partner track](https://docs.stripe.com/partners#partner-tracks), all partners can complete certifications.\n\nTo become a verified services partner, partners need two certifications, one of which must be a professional-level certification (the other can be associate or professional-level).\n\nWith our [Fundamentals](https://www.stripe.training/page/sales) course, Stripe also offers optional training for sales teams to learn the fundamentals of online payments, how Stripe products address business needs, and how to go to market with Stripe.\n\n## Associate architect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Associate Architect Certification](https://www.stripe.training/study-guide-associate-architect-certification/1569115) is for professionals with 1 year of experience or more designing Stripe implementations. Associate architects have expertise in online payments, regulatory compliance, fraud, and API fundamentals. They also have a good understanding of Stripe Payments, Radar, Connect, and Billing. The certification covers best practices and recommended implementation methods to solve common business problems.\n\nHere’s what to expect:\n\n*   **Certification exam duration:** 90 minutes\n    \n*   **Format:** 45-50 multiple choice questions\n    \n*   **Optional certification prep time:** 16 hours (Stripe Fundamentals course) plus 6 hours (implementation training)\n    \n*   **Languages:** English and Japanese\n    \n\nFor architects experienced in Stripe implementations, we recommend the training (but it’s not required).\n\n## Professional implementation architect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Professional Implementation Architect Certification](https://www.stripe.training/page/architect) is for professionals with 2 or more years of experience designing and managing Stripe implementations, with knowledge of account structures, funds flows, third-party integrations, and data migration. Professional-level architects can apply business solutions and lead Stripe implementations.\n\nHere’s what to expect:\n\n*   **Certification exam duration:** 90 minutes\n    \n*   **Format:** 45-50 multiple choice questions\n    \n*   **Optional certification prep time:** 16 hours (Stripe Fundamentals) plus 7.5 hours (implementation training)\n    \n\nFor architects experienced in Stripe implementations, we recommend the training (but it’s not required).\n\n## Associate developer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Associate Developer Certification](https://www.stripe.training/associate-developer) is for full-stack developers new to Stripe. It validates a developer’s ability to use no-code and low-code Stripe tools to address use cases in a hands-on coding environment. Associate developers practice integrating Stripe’s low-code solutions, such as [Payment Links](https://docs.stripe.com/payment-links).\n\nHere’s what to expect:\n\n*   **Certification exam duration:** 6-8 hours (exam must be completed within 30 days of starting)\n    \n*   **Format:** [Coding challenge](https://www.stripe.training/associate-developer)\n    \n*   **Available languages:** React or HTML (front-end) and Node.js, Python, PHP, or Java (back-end)\n    \n*   **Optional certification prep time:** 16 hours\n    \n\nFor developers experienced in creating Stripe integrations, we recommend the training (but it’s not required).\n\n## Professional developer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Professional Developer Certification](https://www.stripe.training/stripe-certified-professional-developer) is for experienced full-stack developers who have previously used Stripe. It validates your ability to implement more complex payments solutions using Stripe products. Professional developers can use Stripe’s flexible [Payment Element](https://docs.stripe.com/payments/payment-element) and core payment APIs to build integrations for a variety of common business flows.\n\nHere’s what to expect:\n\n*   **Certification exam duration:** 15-20 hours (exam must be completed within 30 days of starting)\n    \n*   **Format:** [Coding challenge](https://www.stripe.training/stripe-certified-professional-developer)\n    \n*   **Available languages:** React or HTML (front-end) and Node.js, Python, PHP, Ruby, or Java (back-end)\n    \n*   **Optional certification prep time:** 16 hours\n    \n\nFor developers experienced in creating Stripe integrations, we recommend the training (but it’s not required).",
  "title": "Stripe certification for partners | Stripe Documentation",
  "description": "Become a Stripe-certified architect or developer.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/partners",
  "markdown": "# Stripe Partner Ecosystem | Stripe DocumentationThe Stripe Docs logo\n\nDig deeper into each program benefit.\n\n### Build ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDevelop solutions and services with Stripe.\n\n#### Technical training and certification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe provides training, instructor-led online events, and workshops for Stripe partners to gain architect and developer certifications. Partners signal their expertise within the Stripe Partner Ecosystem by being certified. Learn more about [Stripe certification for partners](https://docs.stripe.com/partners/training-and-certification).\n\n#### Roundtables with product management ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe regularly hosts a series of invite only roundtables and delivers online events with a select number of eligible partners to discuss the product roadmap. During these roundtables, partners can gain visibility into product plans, uncover industry trends, and understand Stripe’s go-to-market priorities.\n\n#### Solution blueprints ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners can draw from Stripe’s library of prebuilt solution blueprints that visually document and capture business requirements and map the end-state to different Stripe solutions. Stripe segments these blueprints across business models such as marketplaces, e-commerce and DTC, B2B SaaS, and embedded payments. Additionally, Stripe can provide blueprints for common third-party integrations such as CRM, ERP, and e-commerce platforms.\n\nThese assets can help partners present complex topics like money movement in multiple currencies across countries and provide clarity and value to your users.\n\n#### Investment funding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAvailable to partners with an assigned Stripe partner development manager, you can use this fund to build solutions and support repeatable business cases. The investment fund has four general categories of business cases: competitive migrations, API modernization, pre-sales workshops, and proof of concepts.\n\nIf partners have unique ideas beyond these four business cases, they can reach out to their partner development manager to see if their concept qualifies for our investment fund.\n\n#### GitHub access ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners in the apps track have access to the [Stripe Apps GitHub](https://github.com/stripe/stripe-apps) to submit tickets, track request progress, and engage with the apps technical teams.\n\n#### Discord channel access ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners in the apps track can engage with Stripe and other app developers in our [Discord channel](https://discord.com/invite/stripe). Search `Stripe Apps` to engage with our community.\n\n#### Apps product roadmap preview ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners in the apps track might be eligible to access Stripe Apps platform roadmap previews. Product roadmap reviews occur regularly and might cover new features, how to gain early access to new APIs, and extensibility opportunities.\n\n### Market ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAccelerate your marketing campaigns with prebuilt campaigns, customizable assets, and co-marketing funds.\n\n#### Marketing content, campaign assets, how-to guides, and templates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMarket with Stripe using our “campaigns in a box” and solution toolkits. Stripe provides resources for partners such as messaging frameworks, templated blogs, emails, and social content that you can customize to launch integrated campaigns that drive demand.\n\n#### Stripe verified partner badge and co-branding guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners can download the Stripe Verified Partner badge (used externally to promote our partnership) from the partner portal. The Stripe Verified Partner badge unlocks co-marketing benefits and amplification of partner services and offerings in the partner directory. Stripe provides partners with complete guidelines on co-branding with Stripe.\n\nStripe verified partners are eligible to be featured across Stripe’s social media channels, including our LinkedIn page, and have their message amplified to Stripe’s customers and community.\n\n#### Marketing advisory workshops and funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners in the embedded payments track are eligible to receive one-on-one consultations with the Stripe marketing team to discuss insights, best practices, and receive recommendations about how to improve acquisition, activation, and lifecycle marketing strategies. By participating in a workshop, partners agree to staff a dedicated marketing resource with the capacity to execute a marketing plan within 90 days. Partners can request marketing advisory funds (MAF) to cover the cost of marketing activities recommended from the workshop.\n\n#### Market development funds (MDF) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners can request MDF to help fund 50% of the cost of co-marketing activities that generate demand for their app, solution, or service. Examples of eligible activities include integrated marketing campaigns, paid media, and digital and in-person customer-facing events. To be eligible to request MDF, partners must be verified in the technology or services track and have an assigned Stripe partner development manager, or have achieved the growth milestone in the apps track.\n\n#### Joint customer case studies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe might invite Stripe partners to participate in a joint case study to showcase how we worked together to solve a customer’s business challenge. Reach out to your partner development manager if you have a story you’d like to nominate for consideration.\n\n#### Amplify your company and solution with a directory listing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe partner directory listing provides Stripe verified partners with the opportunity to promote their company and relationship with Stripe. For Stripe verified partners, their company details page can help drive leads and build awareness of their solutions or services.\n\n#### App Marketplace listing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe App Marketplace listings help businesses find partners in the apps track and understand how their product can help them run their business. Learn more about [Stripe App Marketplace listings](https://docs.stripe.com/stripe-apps/review-requirements).\n\n#### App Marketplace and Stripe Dashboard promotion ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners in the apps track are eligible to receive promotion of their Stripe App in the [Stripe App Marketplace](https://marketplace.stripe.com/) and in the app drawer in the Stripe Dashboard.\n\n#### Stripe Apps marketing events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPartners in the apps track are eligible to join marketing virtual events to learn more about Stripe’s planned marketing activities and best practices on how to use our marketing templates to drive usage of your app. Partners can learn more about scheduled marketing virtual events in Stripe’s partner newsletters.\n\n### Sell ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSubmit co-selling opportunities to help close deals faster.\n\n#### Deal registration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe Go-to-Market Partner team works with Stripe partners to grow our businesses together. Stripe partners can submit a referral to Stripe or they can co-sell with Stripe to close opportunities. You can use three channels for deal registration: submit referrals through the partner portal, bulk upload files with up to 50 leads, or register deals through an ungated lead form.\n\nPartners can also track the progress of a deal through the partner portal.\n\n#### Sales enablement and payments education ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe partners and Stripe verified partners can access self-service and guided training courses on how to sell Stripe solutions. The Business Foundations course helps our partners understand the basics of positioning Stripe solutions and identifying opportunities. The Stripe Fast Start series covers a number of topics, including a Stripe overview and how to sell to different segments of the market. Stripe partners also have access to sales materials, including pitch decks and discovery guides to drive engagement with their users.\n\n#### Crossbeam account mapping ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe uses the Crossbeam platform to help with account mapping between eligible partners and Stripe’s sales team. After completing onboarding, partners can accelerate co-selling with Stripe by discovering overlapping customers and prospects in an automated and secure manner. To learn more about this benefit and how to onboard, contact your partner development manager or submit a case through the partner portal.\n\n#### Referral incentive ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe Partner Ecosystem Referral Incentive is a program that rewards apps, technology, and services track partners for submitting and closing eligible new opportunities with Stripe with a payout that’s time-bound and based on the deal size of new referrals. Stripe partners can take advantage of this incentive by referring new customers who’ve never processed payments with Stripe or by referring existing customers who want to increase their business on Stripe.\n\nPartners in the embedded payments track using Stripe Connect might be eligible for the revenue share program, which enables your company to grow as your customers expand with Stripe.\n\n#### Drive ecosystem revenue through PartnerStack ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe partners can work with PartnerStack to launch, scale, and grow their indirect channels and drive revenue to their business. PartnerStack provides an exclusive discount for members of the Stripe Partner Ecosystem. To learn more about this tool and how to build a partner program, submit a case through the partner portal.\n\n### Engage ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStay close to our product roadmap and leadership teams as you build a partnership with us.\n\n#### Partner portal and partner program support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the Stripe partner portal to access partner resources. You can submit and track leads and opportunities, complete training and certifications, download marketing materials, request market development funds, and find support for all other needs.\n\n#### Eligible for partner management ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSelect verified partners are eligible for one-on-one support with a dedicated partner development manager. As the partner’s main point of contact, the partner development manager can assist with go-to-market strategies, help close deals with Stripe sellers, and coordinate enablement sessions.\n\n#### Partner awards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOur partner awards recognize select Stripe partners who lead the way with customer solutions through Stripe and showcase their Stripe expertise.\n\nWe might invite select verified partners to participate in speaking opportunities at Stripe events to increase their visibility among Stripe sellers and customers.",
  "title": "Stripe Partner Ecosystem | Stripe Documentation",
  "description": "Learn about the Stripe Partner Ecosystem.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/libraries",
  "markdown": "# Stripe SDKs | Stripe DocumentationThe Stripe Docs logo\n\n## Libraries and tools for interacting with your Stripe integration.\n\n## Server-side SDKs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s server-side helper libraries (also known as server-side SDKs) reduce the amount of work required to use Stripe’s REST APIs, starting with reducing the boilerplate code you have to write. Below are the installation instructions for these libraries in a variety of popular server-side programming languages.\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\nYou can access certain Stripe products and features in the beta stage with beta SDKs. The versions of these beta SDKs have the `beta` or `b` suffix, for example, 5.1.0b3 in Python and 5.1.0-beta.3 in other language SDKs. Try these beta SDKs and share feedback with us before the features reach the stable phase. To learn more about how to use the beta SDKs, read the readme file in the GitHub repository of the individual language SDKs.\n\n## Web SDKs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe provides the following web client SDKs to enable integrations with [Stripe Elements](https://docs.stripe.com/payments/elements), our prebuilt UI components, to create a payment form that lets you securely collect a customer’s card details without handling the sensitive data.\n\n## Mobile device SDKs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOur mobile device helper libraries (also known as Mobile device SDKs) help you create native applications for Apple’s and Android’s devices and platforms. The React Native SDK helps you integrate Stripe into iOS and Android applications built with React Native.\n\nThe following is a list of community-supported libraries that we know about—these libraries aren’t supported by Stripe, and we can’t speak to their accuracy or completeness. But these are open source, so feel free to fork and hack as much as you like.\n\n## Stripe OpenAPI Specification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s OpenAPI specification empowers you with a broad set of developer tooling, starting with Postman collections.\n\n## Stripe versioning ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe server-side SDKs use Semantic Versioning, whereas Stripe APIs are versioned by the release date. A breaking API change results in an increment in the major version number of the SDK.",
  "title": "Stripe SDKs | Stripe Documentation",
  "description": "Use our server-side libraries to work with Stripe from Ruby, Python, PHP, Java, Node, Go and .NET or our Web SDKs to work with HTML and JavaScript (including React). We also provide Mobile SDKs for iOS, Android and React Native.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/vouchers",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Vouchers\n\n## Learn about voucher payment methods with Stripe.\n\nWith vouchers, customers complete online purchases in-person at authorized locations like convenience stores. Vouchers are often used by:\n\n*   Businesses with customers that don’t have cards or bank accounts.\n*   Retailers with consumers in countries like Mexico, where card authorizations rates are low and offering a backup payment option improves conversion.\n\nVouchers might not be a good fit for your business if:\n\n*   You deliver goods immediately after checkout. Some customers may not complete payment and it can take one business day to receive a payment confirmation.\n*   You need to send refunds. Not all vouchers support refunds. Some businesses create separate processes to credit customers who ask for a refund directly.\n\n## Payment experience![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a customer chooses a voucher method for payment, they receive a digital voucher through email or in an app with a transaction summary and a voucher code. The customer scans the voucher code at an authorized location like a convenience store and pays in-person, often with cash.\n\n![Figure describing the four step voucher payment flow. First, customer selects voucher payment at checkout. Next, they receive a voucher with transaction reference. Then, they provide voucher and cash at a store, ATM, or bank. Finally, receive notification that payment is complete.](https://b.stripecdn.com/docs-statics-srv/assets/payment_flow.7acf8f7f09d6fa1883720435f7c2589b.svg)\n\n## Product support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll voucher methods work on PaymentIntents. We build hosted voucher experiences for you to simplify your integration. [Contact us](https://support.stripe.com/contact) to request a new voucher method.\n\n| Payment method | Customer country | PaymentIntents | Checkout | Connect | Invoicing | Payment Element | Payment Links | Mobile Payment Element | Subscriptions |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| [Boleto](https://docs.stripe.com/payments/boleto) | Brazil |     |     |     |     |     |     |     |     |\n| [Konbini](https://docs.stripe.com/payments/konbini) | Japan |     |     | \\*  | \\*\\* |     |     |     | \\*\\* |\n| [Multibanco](https://docs.stripe.com/payments/multibanco) | Portugal |     |     |     |     |     |     |     |     |\n| [OXXO](https://docs.stripe.com/payments/oxxo) | Mexico |     |     |     |     |     |     |     |     |\n\n\\*\\* Invoices and Subscriptions only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).\n\n## Migrating from the Sources or Tokens APIs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you currently use the Sources or Tokens API, see [migrating to PaymentIntents](https://docs.stripe.com/payments/payment-intents/migration) to use the latest integrations.",
  "title": "Vouchers | Stripe Documentation",
  "description": "Learn about voucher payment methods with Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/keys",
  "markdown": "# API keys | Stripe DocumentationThe Stripe Docs logo\n\n## Use API keys to authenticate API requests.\n\nStripe authenticates your API requests using your account’s API keys. If a request doesn’t include a valid key, Stripe returns an [invalid request error](https://docs.stripe.com/error-handling#invalid-request-errors). If a request includes a deleted or expired key, Stripe returns an [authentication error](https://docs.stripe.com/error-handling#authentication-errors).\n\nUse the [Developers Dashboard](https://dashboard.stripe.com/test/apikeys) to create, reveal, delete, and roll API keys. To access your v1 API keys, select the **API Keys** tab in your Dashboard.\n\n## Test mode versus live mode ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll Stripe API requests occur in either [test mode](https://docs.stripe.com/test-mode \"test mode\") or live mode. Use test mode to access test data, and live mode to access actual account data. Each mode has its own set of API keys. Objects in one mode aren’t accessible to the other. For instance, a test-mode [product object](https://docs.stripe.com/api/products/object) can’t be part of a live-mode payment.\n\n#### Live mode key access\n\nYou can only reveal a live mode secret or restricted API key one time. If you lose it, you can’t retrieve it from the Dashboard. In that case, roll it or delete it and create a new one.\n\n| Type | When to use | Objects | How to use | Considerations |\n| --- | --- | --- | --- | --- |\n| test mode | Use test mode, and its associated test API keys, as you build your integration. In test mode, card networks and payment providers don’t process payments. | API calls return simulated objects. For example, you can retrieve and use test `account`, `payment`, `customer`, `charge`, `refund`, `transfer`, `balance`, and `subscription` objects. | Use [test credit cards and accounts](https://docs.stripe.com/testing#cards). You can’t accept real payment methods or work with real accounts. | [Identity](https://docs.stripe.com/identity) doesn’t perform any verification checks. Also, Connect [account objects](https://docs.stripe.com/api/accounts/object) don’t return sensitive fields. |\n| live mode | Use live mode, and its associated live API keys, when you’re ready to launch your integration and accept real money. In live mode, card networks and payment providers do process payments. | API calls return real objects. For example, you can retrieve and use real `account`, `payment`, `customer`, `charge`, `refund`, `transfer`, `balance`, and `subscription` objects. | Accept real credit cards and work with customer accounts. You can accept actual payment authorizations, charges, and captures for credit cards and accounts. | Disputes have a more nuanced flow and a simpler [testing process](https://docs.stripe.com/testing#disputes). Also, some [payment methods](https://docs.stripe.com/payments/payment-methods) have a more nuanced flow and require more steps. |\n\n## Secret and publishable keys ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll accounts have a total of four API keys by default—two for test mode and two for live mode:\n\n*   **Test mode secret key**: Use this key to authenticate requests on your server when in test mode. By default, you can use this key to perform any API request without restriction.\n*   **Test mode publishable key**: Use this key for testing purposes in your web or mobile app’s client-side code.\n*   **Live mode secret key**: Use this key to authenticate requests on your server when in live mode. By default, you can use this key to perform any API request without restriction.\n*   **Live mode publishable key**: Use this key, when you’re ready to launch your app, in your web or mobile app’s client-side code.\n\n#### Testing and development\n\nUse only your test API keys for testing and development. This ensures that you don’t accidentally modify your live customers or charges.\n\nYou can find your secret and publishable keys in [API keys](https://dashboard.stripe.com/test/apikeys). When you’re logged in, Stripe’s documentation automatically populates code examples with your test mode API keys (only you can see these values). If you’re not logged in, our code examples include randomly generated API keys. You can replace them with your own test keys or [log in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fkeys) to see the code examples populated with your test API keys. If you can’t view your API keys, ask the owner of your Stripe account to add you to their [team](https://docs.stripe.com/get-started/account/teams), with the proper permissions.\n\nThe following table shows randomly generated examples of secret and publishable test API keys:\n\n#### Restricted API keys\n\nThe Dashboard can also generate restricted API keys, enabling customizable and limited access to the API. However, Stripe doesn’t offer any restricted keys by default.\n\n| Type | Value | When to use |\n| --- | --- | --- |\n| Secret | `sk_test_4eC39HqLyjWDarjtT1zdp7dc` | **On the server side**: Must be secret and stored securely in your web or mobile app’s server-side code (such as in an environment variable or credential management system) to call Stripe APIs. Don’t expose this key on a website or embed it in a mobile application. |\n| Publishable | `pk_test_TYooMQauvdEDq54NiTphI7jx` | **On the client side**: Can be publicly accessible in your web or mobile app’s client-side code (such as checkout.js) to securely collect payment information, such as with [Stripe Elements](https://docs.stripe.com/payments/elements). By default, [Stripe Checkout](https://docs.stripe.com/payments/checkout) securely collects payment information. |\n| Restricted | A string that starts with `rk_test_` | **In microservices**: Must be secret and stored securely in your microservice code to call Stripe APIs. Don’t expose this key on a website or embed it in a mobile application. |\n\n### Keep your keys safe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAnyone can use your live mode secret API key to make any API call on behalf of your account, such as creating a charge or performing a refund. Keep your keys safe by following the [secret API keys best practices](https://docs.stripe.com/keys-best-practices).\n\n#### Customize API access with restricted API keys ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo provide limited access to the API, [create restricted API keys](https://dashboard.stripe.com/test/apikeys/create). You can configure a restricted API key to allow read or write access to specific API resources. When using microservices that interact with the API on your behalf, define restricted keys that allow only the minimum access those microservices require. For example, if you use a dispute monitoring service, create a restricted key that only provides read access to dispute-related resources. That key allows the service to get the data it needs, but doesn’t allow it to make any changes or access any other data.\n\nRestricted keys can’t interact with many parts of Stripe’s API because they’re only intended to reduce risk when using or building microservices. Don’t use restricted keys as an alternative to your account’s secret or publishable API keys during development of your Stripe integration.\n\n#### Permission errors\n\nIf you use a restricted API key in a call it doesn’t have access to, Stripe raises a [permission error](https://docs.stripe.com/error-handling#permission-errors).\n\n#### Limit the IP addresses that can send API requests ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can increase the security of a secret or restricted key by limiting the IP addresses that can use it to send API requests. Additionally, you can [restrict a key to one or more IP addresses or to a range of IP addresses](#limit-api-secret-keys-ip-address).\n\n## Reveal a secret API key for test mode ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn test mode, you can reveal a secret API key as many times as you want.\n\nTo reveal a secret key in test mode:\n\n1.  In the Developers Dashboard, select the [API keys](https://dashboard.stripe.com/test/apikeys) tab.\n2.  In the **Standard keys** list, in the **Secret key** row, click **Reveal test key**.\n3.  Copy the key value by clicking it.\n4.  Save the key value.\n5.  Click **Hide test key**.\n\n## Reveal a secret or restricted API key for live mode ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor security, in live mode Stripe only shows you a secret or restricted API key one time. Store the key in a safe place where you won’t lose it. To help yourself remember where you stored it, you can leave a note on the key in the Dashboard. If you lose the key, you can roll it or delete it and create another.\n\n#### You can't reveal a live mode secret key that you created\n\nAfter you create a secret or restricted API key in live mode, we display the value before you save it. You must copy the value before saving it because you can’t reveal it later. You can only reveal a default secret key or a key generated by a scheduled roll.\n\nTo reveal a secret or restricted key in live mode and attach a note:\n\n#### Note\n\nThe `API keys` link here opens in live mode.\n\n1.  In the Developers Dashboard, select the [API keys](https://dashboard.stripe.com/apikeys) tab.\n2.  In the **Standard keys** list or **Restricted keys** list, in the row for the key you want to reveal, click **Reveal live key**.\n3.  Copy the key value by clicking it.\n4.  Save the key value.\n5.  Click **Hide test key**.\n6.  Click the overflow menu () next to the key, then select **Edit key…**.\n7.  In the **Note** field, enter the location where you saved the key, then click **Save**.\n8.  If you created the key before Stripe introduced this feature, click **Hide live key**.\n\n#### Note\n\nKeys that you created before Stripe introduced this feature aren’t automatically hidden when they’re revealed. You must manually hide them.\n\n## Roll an API key ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRolling a key revokes it and generates a replacement key. You can roll a key immediately or schedule a key to roll after a certain time. Roll a key in scenarios such as the following examples:\n\n*   If you’re in live mode and you lose a secret key or restricted key, you can’t recover it from the Dashboard and must replace it.\n*   If a secret or restricted key is compromised, you need to revoke it to block any potentially malicious API requests that might use it.\n*   Your policy requires rotating keys at certain intervals.\n\nTo roll an API key:\n\n1.  Open the [API keys](https://dashboard.stripe.com/test/apikeys) page.\n2.  In the row for the key you want to roll, click the overflow menu (), then select **Roll key…**.\n3.  Choose an expiration date from the **Expiration** dropdown.\n4.  Click **Roll API key**.\n5.  The dialog displays the new key value. Copy it by clicking it.\n6.  Save the key value. You can’t retrieve it later.\n7.  In the **Add a note** field, enter the location where you saved the key and click **Done** or **Save**.\n\nIf you chose **Now** for the **Expiration**, we delete the old key. If you selected a different time, you can see the time remaining until the key expires below its name.\n\nRegardless of the old key’s expiration time, the new key is ready to use immediately.\n\nWhen you roll a publishable key, the replacement key’s name is always `Publishable key`. When you roll a secret key, the replacement key’s name is always `Secret key`. When you roll a restricted key, the replacement key’s name is the same as the rolled key. You can rename a secret or restricted key by clicking its overflow menu and selecting **Edit key…**.\n\n## Delete a secret or restricted API key ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you delete a key, any code that uses that key can no longer make API calls. Create a new key and update the code to use it.\n\n#### Note\n\nYou can’t delete a publishable key.\n\nTo delete a key:\n\n1.  In the Developers Dashboard, select the [API keys](https://dashboard.stripe.com/test/apikeys) tab.\n2.  Locate the key you want to delete in either the **Standard keys** or **Restricted keys** list. Click the overflow menu icon () in the row of that key, then select **Delete key…**.\n3.  In the Delete API key dialog, if you’re sure that you want to delete the key, click **Delete key**. Otherwise, click **Cancel**.\n\n## Create a secret API key ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create a secret API key:\n\n1.  Open the [API keys](https://dashboard.stripe.com/test/apikeys) page.\n2.  Click **Create secret key**.\n3.  Stripe sends a verification code to your email address or in a text message. (As with any email or text message, it might not arrive immediately.) Enter the code in the dialog. If the dialog doesn’t continue automatically, click **Continue**.\n4.  Enter a name in the **Key name** field.\n5.  Click **Create**.\n6.  The dialog displays the new key value. Copy it by clicking it.\n7.  Save the key value. You can’t retrieve it later.\n8.  In the **Add a note** field, enter the location where you saved the key and click **Done**.\n\n## Create a restricted API key ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA [restricted API key](https://docs.stripe.com/keys#limit-access) only allows the level of access that you specify.\n\nTo create a restricted API key:\n\n1.  Open the [API keys](https://dashboard.stripe.com/test/apikeys) page.\n2.  You can create a restricted key from scratch or start by cloning an existing restricted key.\n    *   To create a restricted key from scratch, click **Create restricted key**. In this case, the default value for all permissions is **None**.\n    *   To clone an existing key, in the row for the key you want to clone, click the overflow menu (), then select **Duplicate key…**. In this case, the default value for each permission is its value in the cloned key.\n3.  In the **Key name** field, enter a name. If you cloned an existing key, the default name is the cloned key’s name.\n4.  For each resource you want the new key to access, select the permission for this key to allow. If you use Connect, you can also select the permission for this key to allow when accessing connected accounts. Available permissions are **None**, **Read**, or **Write**.\n5.  Click **Create key**.\n6.  Stripe sends a verification code to your email address or in a text message. (As with any email or text message, it might not arrive immediately.) Enter the code in the dialog. If the dialog doesn’t continue automatically, click **Continue**.\n7.  The dialog displays the new key value. Copy it by clicking it.\n8.  Save the key value. You can’t retrieve it later.\n9.  In the **Add a note** field, enter the location where you saved the key and click **Done**.\n\n## Limit secret or restricted keys to a list or range of IP addresses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo limit API requests using a key to one or more specific IP addresses or to a range of IP addresses:\n\n#### Valid IP address ranges\n\nYou can specify any valid CIDR range. For example, a valid range could be `100.10.38.0 - 100.10.38.255`, specified as `100.10.38.0/24`. All addresses in the range must start with `100.10.38`.\n\n1.  Open the [API keys](https://dashboard.stripe.com/test/apikeys) page.\n2.  In the **Standard keys** list or **Restricted keys** list, in the row for the key you want to reveal, click the overflow menu (), then select **Manage IP restrictions…**.\n3.  Click **Limit use to a set of IP addresses**.\n4.  Enter an IP address or range of IP addresses:\n    *   For an individual IP address, enter it in the **IP address** field.\n    *   For a range of IP addresses, enter the range in Classless Inter-Domain Routing (CIDR) notation. In the **IP Address** field, enter the first address in the range. In the **CIDR** field, enter the network prefix size.\n    *   You can also select the **Bulk manage** tab and enter individual IP addresses and ranges, separated by spaces. Changes you make in one tab appear in the other tab.\n5.  To add another address or range, click **\\+ Add**.\n6.  Click **Save**.\n\n## Change a secret or restricted API key’s name or note ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo change the name or note text of a secret or restricted key:\n\n1.  Open the [API keys](https://dashboard.stripe.com/test/apikeys) page.\n2.  In the row for the key you want to change, click the overflow menu (), then select **Edit key…**.\n3.  If you want to change the name, in **Key name**, enter the new name.\n4.  If you want to change the note text, in **Note**, enter the new note text.\n5.  Click **Save**.\n\n## View the API request logs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo [open the API request logs](https://docs.stripe.com/development/dashboard/request-logs), click the overflow menu () for any key, then select **View request logs**. Opening the logs redirects you to the main Stripe Dashboard.",
  "title": "API keys | Stripe Documentation",
  "description": "Use API keys to authenticate API requests.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/event-destinations",
  "markdown": "# Event Destinations | Stripe DocumentationThe Stripe Docs logo\n\n## Event DestinationsBeta\n\n## Send events from Stripe to webhook endpoints and cloud services.\n\n#### Beta\n\nSet up an event destination to receive events from Stripe across multiple destination types, including webhook endpoints, and [Amazon Eventbridge](https://docs.stripe.com/event-destinations/eventbridge).\n\n## Use cases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen building Stripe integrations, you might want your applications to receive events in real time from your Stripe accounts, enabling your backend systems to respond and perform actions accordingly.\n\nWith an event destination, Stripe pushes real-time event data from your account, enabling you to run back-end actions, such as:\n\n*   Sending users a notification when a customer confirms a payment\n*   Initating an internal claims reconciliation process when a customer disputes a charge\n*   Granting access to your user when they make successful recurring subscription payments\n\n## Events overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe generates event data to keep you informed about the activity in your account.\n\nWhen an event occurs, Stripe generates a new [Event](https://docs.stripe.com/api/v1/events) object. After your destination receives the [event](https://docs.stripe.com/api/v1/events), your app can run back-end actions (for example, calling your shipping provider’s APIs to schedule a shipment after you receive a `payment_intent.succeded` event).\n\nThe [event](https://docs.stripe.com/api/v1/events) we send to your event destination provides a snapshot of the object that changed. It might include a `previous_attributes` property that indicates the change when applicable.\n\nSee the [full list of event types](https://docs.stripe.com/api/events/types) that we send to your event destination.\n\nA single API request might result in the creation of multiple events. For example, creating a new subscription for a customer might result in `customer.subscription.created` and `payment_intent.succeeded` events. Select the events you want to subscribe to for each event destination.\n\n### Sample event payload![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following payload is an example `invoice.created` event that occurs when you create a new subscription.\n\n`{   \"object\": {     \"id\": \"in_1KnN0G589O8KAxCGfVSpD0Pj\",     \"object\": \"invoice\",     \"account_country\": \"US\",`\n\n## Event permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo view an event in the Dashboard, assign the [Admin or Developer role](https://docs.stripe.com/get-started/account/teams/roles) to your user account. To retrieve an event using the API, use either a [secret API key](https://docs.stripe.com/keys#create-api-secret-key), which allows you to view all event types by default, or a [restricted API key](https://docs.stripe.com/keys#create-restricted-api-secret-key) with `Read` access enabled for the specific event type’s resource. For example, you can grant `Read` access to `payment_intent` resources on your restricted API key to programmatically retrieve `payment_intent.succeeded events`.\n\n## Disable an event destination![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can disable an event destination. After you disable it, Stripe stops sending any events to that destination. After you re-enabled a destination, Stripe resumes sending events to the destination.",
  "title": "Event Destinations | Stripe Documentation",
  "description": "Send events from Stripe to webhook endpoints and cloud services.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-cli/overview",
  "markdown": "# Stripe CLI | Stripe DocumentationThe Stripe Docs logo\n\n## Manage your Stripe resources in test mode directly from the command line.\n\nThe Stripe CLI is a developer tool to help you build, test, and manage your integration with Stripe directly from the command line. With the Stripe CLI, it’s easy to perform many common tasks like calling Stripe APIs, testing your webhooks integration, and creating an application.\n\n## Start with a guide![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Log into Stripe to authenticate requests![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLog in and authenticate your [Stripe user account](https://docs.stripe.com/get-started/account/activate) to generate a set of _restricted keys_. To learn more, see [Stripe CLI keys and permissions](https://docs.stripe.com/stripe-cli/keys).\n\nPress the **Enter** key on your keyboard to complete the authentication process in your browser.\n\n## Specify an API version while running requests![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you call Stripe APIs in the CLI, it uses your default API version in all requests. To find your default version in the Developers Dashboard, see the [API keys](https://dashboard.stripe.com/test/apikeys) page. To try out different API versions in the CLI, use the following flags:\n\n| Flag | Description | Example |\n| --- | --- | --- |\n| `–stripe-version 2024-06-20` | Use the `--stripe-version` flag in any CLI request to specify an API version. | `stripe products create --name=“My Product” --stripe-version 2024-06-20` |\n| `--latest` | Use the `--latest` flag in any CLI request to specify the latest API version. | `stripe products create --name=\"My Product\" --latest` |\n\nYou can also [view a list of API versions](https://docs.stripe.com/upgrades#api-versions).\n\n## Stream request logs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `stripe logs tail` command to stream API request logs. Keep this window open. If you have an error in your API calls, this terminal returns the API error message and a reason for the error.\n\n## Forward events to your local webhook endpoint![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `--forward-to` flag to send all [Stripe events](https://docs.stripe.com/cli/trigger#trigger-event) in **test mode** to your local webhook endpoint. To disable HTTPS certificate verification, use the `--skip-verify` flag.\n\n`stripe listen --forward-to localhost:4242/stripe_webhooks`\n\n`Ready! Your webhook signing secret is '{{WEBHOOK_SIGNING_SECRET}}' (^C to quit)`\n\nTo forward specific events in a comma separated list, use the `--events` flag.\n\n`stripe listen --events payment_intent.created,customer.created,payment_intent.succeeded,charge.succeeded,checkout.session.completed,charge.failed \\   --forward-to localhost:4242/webhook`\n\nIf you’ve already [registered your endpoint in Stripe](https://docs.stripe.com/webhooks#register-webhook), you can use the `--load-from-webhooks-api` and `--forward-to` flags.\n\n`stripe listen --load-from-webhooks-api --forward-to localhost:5000`\n\nThis command forwards events sent to your Stripe-registered **public** webhook endpoint to your **local** webhook endpoint. It loads your registered endpoint, parses the path and its registered events, then appends the path to your local webhook endpoint in the `--forward-to` path. If you’re checking webhook signatures, use the `{{WEBHOOK_SIGNING_SECRET}}` from the initial output of the `listen` command.\n\n## List all available events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [`--help`](https://docs.stripe.com/cli/help) flag to list all possible events that can occur for an event category. For example, to list all possible events for the [prebuilt checkout page](https://docs.stripe.com/checkout/quickstart) for [Stripe Checkout](https://docs.stripe.com/payments/checkout):\n\n`stripe trigger checkout --help`\n\n## Create a one-time product and price![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Make a single API request to [Create a product](https://docs.stripe.com/api/products/create).\n\n`stripe products create \\ --name=\"My First Product\" \\ --description=\"Created with the Stripe CLI\"`\n\n1.  Look for the product identifier (in `id`) in the response object. Save it for the next step.\n\nIf everything worked, the command-line displays the following response.\n\n`{   \"id\":` \n\n`\"prod_LTenIrmp8Q67sa\"`\n\n`,   \"object\": \"product\",`\n\n1.  Call [Create a price](https://docs.stripe.com/api/prices/create) to attach a price of 30 USD. Swap the placeholder in `product` with your product identifier (for example, `prod_LTenIrmp8Q67sa`).\n\n`stripe prices create \\   --unit-amount=3000 \\   --currency=usd \\   --product=`\n\n`{{PRODUCT_ID}}`\n\nIf everything worked, the command-line displays the following response.\n\n`{   \"id\":` \n\n`\"price_1KzlAMJJDeE9fu01WMJJr79o\"`\n\n`,   \"object\": \"price\",`\n\n## Trigger a webhook event while testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrigger the `checkout.session.completed` event to create the API objects that result from a checkout session successfully completing.\n\n`stripe trigger checkout.session.completed`\n\nYour `stripe listen` terminal displays the following output:\n\n`Setting up fixture for: checkout_session Running fixture for: checkout_session Setting up fixture for: payment_page Running fixture for: payment_page Setting up fixture for: payment_method Running fixture for: payment_method Setting up fixture for: payment_page_confirm Running fixture for: payment_page_confirm Trigger succeeded!`\n\nTo learn more about triggers, read our [guide](https://docs.stripe.com/stripe-cli/triggers).",
  "title": "Stripe CLI | Stripe Documentation",
  "description": "Manage your Stripe resources in test mode directly from the command line.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/webhooks",
  "markdown": "# Receive Stripe events in your webhook endpoint\n\n## Listen to events in your Stripe account on your webhook endpoint so your integration can automatically trigger reactions.\n\n#### Send events to your AWS account\n\n## Why use webhooks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen building Stripe integrations, you might want your applications to receive events as they occur in your Stripe accounts, so that your backend systems can execute actions accordingly.\n\nTo enable webhook events, you need to register webhook endpoints. After you register them, Stripe can push real-time event data to your application’s webhook endpoint when [events](https://docs.stripe.com/webhooks#events-overview) happen in your Stripe account. Stripe uses HTTPS to send webhook events to your app as a JSON payload that includes an [Event object](https://docs.stripe.com/api/events).\n\nReceiving webhook events is particularly useful for listening to asynchronous events such as when a customer’s bank confirms a payment, a customer disputes a charge, a recurring payment succeeds, or when collecting subscription payments.\n\n## Event overview ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe generates event data that we can send you to inform you of activity in your account.\n\nWhen an event occurs, Stripe generates a new [Event object](https://docs.stripe.com/api/events). A single API request might result in the creation of multiple events. For example, if you create a new subscription for a customer, you receive `customer.subscription.created` and `payment_intent.succeeded` events.\n\nBy registering webhook endpoints in your Stripe account, you enable Stripe to automatically send [Event objects](https://docs.stripe.com/api/events) as part of POST requests to the registered webhook endpoint hosted by your application. After your webhook endpoint receives the [Event](https://docs.stripe.com/api/events), your app can run backend actions (for example, calling your shipping provider’s APIs to schedule a shipment after you receive a `payment_intent.succeeded` event).\n\n### Event object ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Event object](https://docs.stripe.com/api/events) we send to your webhook endpoint provides a snapshot of the object that changed. They might include a `previous_attributes` property that indicates the change, when applicable.\n\nSee the [full list of event types](https://docs.stripe.com/api/events/types) that we send to your webhook.\n\n### Example event payload![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following event shows a subscription update at the end of a trial.\n\n`{   \"id\": \"evt_1MqqbKLt4dXK03v5qaIbiNCC\",   \"object\": \"event\",   \"api_version\": \"2024-06-20\",   \"created\": 1680064028,`\n\n### Event object structure ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReview the event object structure to better understand events and the underlying information they provide.\n\n#### Event type![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou receive events for all of the [event types](https://docs.stripe.com/api/events/types) your webhook endpoint is listening for in your configuration. Use the received event `type` to determine what processing your application needs to perform. The `data.object` corresponding to each event `type` varies.\n\n#### Live and test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou might receive both live and test mode event delivery requests to your endpoints. This can happen if you use a single endpoint for both live and test mode or if you’re a Connect platform making test mode requests for live Standard connected accounts. Use the `livemode` attribute to check whether the object exists in live or test mode, and determine the correct handling for the event.\n\n#### API version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `api_version` indicates the API version of the event and [dictates the structure of the included data.object](https://docs.stripe.com/webhooks#api-versions). Your endpoint receives events using the configured API version, which can differ from your account’s default API version or the API version of any requests related to the event. This attribute is determined by the destination endpoint, which indicates that the same event might be delivered to multiple endpoints using different API versions. If you use our Java, .NET or Go client libraries, make sure that you configure the endpoint API version to use the same API version pinned in the client. Otherwise, you might be unable to de-serialize the event objects.\n\nWhen retrieving Event objects from the API, you can’t control the API version of the `data.object` structure. Instead, retrieve that object from the appropriate API endpoint and use the `Stripe-Version` header to [specify an API version](https://docs.stripe.com/api/versioning).\n\n#### API request events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen an event is generated as a result of an API request, that request shows up as the `request.id`. If you use an [`idempotency_key`](https://docs.stripe.com/api/idempotent_requests) when making the request, it’s included as the `request.idempotency_key`. Check this `request` hash when you investigate what causes an event.\n\n#### Data object and previous attributes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor `*.updated` events, the event payload includes `data.previous_attributes` that allow you to inspect what’s changed about the Stripe object. The `previous_ attributes` in the example `customer.subscription.updated` event above indicates that the subscription has a previous value of `status: trialing`, among other changes. The `data.object` indicates the status as `active` which indicates that the subscription transitioned out of a trial period.\n\n#### Pending deliveries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `pending_webhooks` to determine how many endpoints configured for this event haven’t responded successfully to delivery. During initial delivery, this value is 1 or higher because your endpoint hasn’t responded successfully. If you retrieve this event later, `pending_webhooks` decrease to a minimum of 0 as each endpoint responds successfully. This is important for `invoice.created` events because unsuccessful deliveries [can delay invoice finalization](https://docs.stripe.com/billing/subscriptions/webhooks#successful-invoice-finalization).\n\n#### Connected account events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvents from connected accounts delivered to a [Connect endpoint](https://docs.stripe.com/connect/webhooks#connect-webhooks) include the `account`. Use `account` to track which connected account the object belongs to make sure that your platform can process the event data appropriately.\n\n### Why event objects get generated ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis table describes different scenarios that trigger generating [Event objects](https://docs.stripe.com/api/events).\n\n| Source | Trigger |\n| --- | --- |\n| Dashboard | When you call an API by modifying your Stripe resources in the Stripe Dashboard. |\n| API | When a user action in your app or website results in an API call. |\n| API | When you manually trigger an event with the Stripe CLI. |\n| API | When you call an API directly with the Stripe CLI. |\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo start receiving webhook events in your app, create and register a webhook endpoint:\n\n1.  Create a webhook endpoint handler to receive event data POST requests.\n2.  Test your webhook endpoint handler locally using the Stripe CLI.\n3.  Register your endpoint within Stripe using the **Dashboard** or the API.\n4.  Secure your webhook endpoint.\n\nYou can register and create one endpoint to handle several different event types at the same time, or set up individual endpoints for specific events.\n\n[](#webhook-endpoint-def)\n\nSet up an HTTP or HTTPS endpoint function that can accept webhook requests with a POST method. If you’re still developing your endpoint function on your local machine, it can use HTTP. After it’s publicly accessible, your webhook endpoint function must use HTTPS.\n\nSet up your endpoint function so that it:\n\n1.  Handles POST requests with a JSON payload consisting of an [event object](https://docs.stripe.com/api/events/object).\n2.  Quickly returns a successful status code (`2xx`) prior to any complex logic that could cause a timeout. For example, you must return a `200` response before updating a customer’s invoice as paid in your accounting system.\n\n#### Note\n\n#### Example endpoint ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis code snippet is a webhook function configured to check that the event type was received, to handle the event, and return a 200 response.\n\n`require 'json'  # Using Sinatra post '/webhook' do   payload = request.body.read   event = nil    begin     event = Stripe::Event.construct_from(       JSON.parse(payload, symbolize_names: true)     )   rescue JSON::ParserError => e     # Invalid payload     status 400     return   end    # Handle the event   case event.type   when 'payment_intent.succeeded'     payment_intent = event.data.object # contains a Stripe::PaymentIntent     # Then define and call a method to handle the successful payment intent.     # handle_payment_intent_succeeded(payment_intent)   when 'payment_method.attached'     payment_method = event.data.object # contains a Stripe::PaymentMethod     # Then define and call a method to handle the successful attachment of a PaymentMethod.     # handle_payment_method_attached(payment_method)   # ... handle other event types   else     puts \"Unhandled event type: #{event.type}\"   end    status 200 end`\n\n[](#test-webhook)\n\nBefore you go-live with your webhook endpoint function, we recommend that you test your application integration. You can do so by configuring a local listener to send events to your local machine, and sending test events. You need to use the [CLI](https://docs.stripe.com/stripe-cli) to test.\n\n#### Forward events to a local endpoint ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo forward events to your local endpoint, run the following command with the [CLI](https://docs.stripe.com/stripe-cli) to set up a local listener. The `--forward-to` flag sends all [Stripe events](https://docs.stripe.com/cli/trigger#trigger-event) in **test mode** to your local webhook endpoint.\n\n`stripe listen --forward-to localhost:4242/stripe_webhooks`\n\n#### Note\n\nYou can also run the stripe listen command on the [Stripe Shell](https://docs.stripe.com/stripe-shell/overview) to see events through the Stripe shell terminal, although you won’t be able to forward events from the shell to your local endpoint.\n\nUseful configurations to help you test with your local listener include the following:\n\n*   To disable HTTPS certificate verification, use the `--skip-verify` optional flag.\n*   To forward only specific events, use the `--events` optional flag and pass in a comma separated list of events.\n\n`stripe listen --events payment_intent.created,customer.created,payment_intent.succeeded,checkout.session.completed,payment_intent.payment_failed \\   --forward-to localhost:4242/webhook`\n\n*   To forward events to your local webhook endpoint from the public webhook endpoint that you already registered on Stripe, use the `--load-from-webhooks-api` optional flag. It loads your registered endpoint, parses the path and its registered events, then appends the path to your local webhook endpoint in the `--forward-to path`.\n\n`stripe listen --load-from-webhooks-api --forward-to localhost:5000`\n\n*   To check webhook signatures, use the `{{WEBHOOK_SIGNING_SECRET}}` from the initial output of the listen command.\n\n`Ready! Your webhook signing secret is '{{WEBHOOK_SIGNING_SECRET}}' (^C to quit)`\n\n#### Triggering test events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo send test events, trigger an event type that your webhook is subscribed to by manually creating an object in the Stripe Dashboard. Alternatively, you can use the following command in either [Stripe Shell](https://docs.stripe.com/stripe-shell/overview) or [Stripe CLI](https://docs.stripe.com/stripe-cli).\n\nThis example triggers a `payment_intent.succeeded` event:\n\n`stripe trigger payment_intent.succeeded Running fixture for: payment_intent Trigger succeeded! Check dashboard for event details.`\n\nLearn how to trigger events with [Stripe for VS Code](https://docs.stripe.com/stripe-vscode).\n\n[](#register-webhook)\n\nAfter testing your webhook endpoint function, register the webhook endpoint’s accessible URL using the [Webhooks section](https://dashboard.stripe.com/webhooks) in the Developer Dashboard or the API so Stripe knows where to deliver events. You can register up to 16 webhook endpoints with Stripe. Registered webhook endpoints must be publicly accessible **HTTPS** URLs.\n\n#### Webhook URL format ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe URL format to register a webhook endpoint is:\n\n`https://<your-website>/<your-webhook-endpoint>`\n\nFor example, if your domain is `https://mycompanysite.com` and the route to your webhook endpoint is `@app.route('/stripe_webhooks', methods=['POST'])`, specify `https://mycompanysite.com/stripe_webhooks` as the **Endpoint URL**.\n\n### Add a webhook endpoint![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nStripe supports two endpoint types: Account and [Connect](https://docs.stripe.com/connect \"Connect\"). Create an endpoint for _Account_ unless you’ve created a [Connect application](https://docs.stripe.com/connect). Use the following steps to register a webhook endpoint in the Developers Dashboard. You can register up to 16 webhook endpoints on each Stripe account.\n\n1.  Navigate to the [Webhooks](https://dashboard.stripe.com/webhooks) page.\n2.  Click **Add endpoint**.\n3.  Add your webhook endpoint’s HTTPS URL in **Endpoint URL**.\n4.  If you have a _Stripe Connect_ account, enter a description, then click **Listen to events on Connected accounts**.\n5.  Select the [event types](https://docs.stripe.com/api#event_types) you’re currently receiving in your local webhook endpoint in **Select events**.\n6.  Click **Add endpoint**.\n\n#### Register a webhook endpoint with the Stripe API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can also programmatically [create webhook endpoints](https://docs.stripe.com/api/webhook_endpoints/create).\n\nTo receive events from connected accounts, use the [connect parameter](https://docs.stripe.com/api/webhook_endpoints/create#create_webhook_endpoint-connect).\n\nThe following example creates an endpoint that notifies you when charges succeed or fail.\n\n`curl https://api.stripe.com/v1/webhook_endpoints \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"url\"=\"[https://example.com/my/webhook/endpoint](https://example.com/my/webhook/endpoint)\" \\   -d \"enabled_events[]\"=\"payment_intent.payment_failed\" \\   -d \"enabled_events[]\"=\"payment_intent.succeeded\"`\n\n[](#verify-official-libraries)\n\nYou need to secure your integration by making sure your handler verifies that all webhook requests are generated by Stripe. You can verify webhook signatures using our official libraries or verify them manually.\n\n### Verify webhook signatures with official libraries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe recommend using our official libraries to verify signatures. You perform the verification by providing the event payload, the `Stripe-Signature` header, and the endpoint’s secret. If verification fails, you get an error.\n\nIf you get a signature verification error, read our guide about [troubleshooting it](https://docs.stripe.com/webhooks/signature).\n\n#### Warning\n\nStripe requires the raw body of the request to perform signature verification. If you’re using a framework, make sure it doesn’t manipulate the raw body. Any manipulation to the raw body of the request causes the verification to fail.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``require 'stripe' require 'sinatra'  # If you are testing your webhook locally with the Stripe CLI you # can find the endpoint's secret by running `stripe listen` # Otherwise, find your endpoint's secret in your webhook settings in # the Developer Dashboard endpoint_secret = 'whsec_...'  # Using the Sinatra framework set :port, 4242  post '/my/webhook/url' do   payload = request.body.read   sig_header = request.env['HTTP_STRIPE_SIGNATURE']   event = nil    begin     event = Stripe::Webhook.construct_event(       payload, sig_header, endpoint_secret     )   rescue JSON::ParserError => e     # Invalid payload     puts \"Error parsing payload: #{e.message}\"     status 400     return   rescue Stripe::SignatureVerificationError => e     # Invalid signature     puts \"Error verifying webhook signature: #{e.message}\"     status 400     return   end    # Handle the event   case event.type   when 'payment_intent.succeeded'     payment_intent = event.data.object # contains a Stripe::PaymentIntent     puts 'PaymentIntent was successful!'   when 'payment_method.attached'     payment_method = event.data.object # contains a Stripe::PaymentMethod     puts 'PaymentMethod was attached to a Customer!'   # ... handle other event types   else     puts \"Unhandled event type: #{event.type}\"   end    status 200 end``\n\n## Debug webhook integrations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMultiple types of issues can occur when delivering events to your webhook endpoint:\n\n*   Stripe might not be able to deliver an event to your webhook endpoint.\n*   Your webhook endpoint might have an SSL issue.\n*   Your network connectivity is intermittent.\n*   Your webhook endpoint isn’t receiving events that you expect to receive.\n\n### View event deliveries ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Note\n\nTo view event deliveries for a specific endpoint, select the webhook endpoint in the [Webhooks](https://dashboard.stripe.com/webhooks) tab.\n\nTo view all events that were triggered in your account, view the [Events](https://dashboard.stripe.com/events) tab.\n\n### Fix HTTP status codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen an event displays a status code of `200`, it indicates successful delivery to the webhook endpoint. You might also receive a status code other than `200`. View the table below for a list of common HTTP status codes and recommended solutions.\n\n| Pending webhook status | Description | Fix |\n| --- | --- | --- |\n| (Unable to connect) ERR | We’re unable to establish a connection to the destination server. | Make sure that your host domain is publicly accessible to the internet. |\n| (`302`) ERR (or other `3xx` status) | The destination server attempted to redirect the request to another location. We consider redirect responses to webhook requests as failures. | Set the webhook endpoint destination to the URL resolved by the redirect. |\n| (`400`) ERR (or other `4xx` status) | The destination server can’t or won’t process the request. This might occur when the server detects an error (`400`), when the destination URL has access restrictions, (`401`, `403`), or when the destination URL doesn’t exist (`404`). | *   Make sure that your endpoint is publicly accessible to the internet.<br>*   Make sure that your endpoint accepts a POST HTTP method. |\n| (`500`) ERR (or other `5xx` status) | The destination server encountered an error while processing the request. | Review your application’s logs to understand why it’s returning a `500` error. |\n| (TLS error) ERR | We couldn’t establish a secure connection to the destination server. Issues with the SSL/TLS certificate or an intermediate certificate in the destination server’s certificate chain usually cause these errors. Stripe requires [TLS](https://docs.stripe.com/security/guide#tls \"TLS\") version v1.2 or higher. | Perform an [SSL server test](https://www.ssllabs.com/ssltest/) to find issues that might cause this error. |\n| (Timed out) ERR | The destination server took too long to respond to the webhook request. | Make sure you defer complex logic and return a successful response immediately in your webhook handling code. |\n\n## Event delivery behaviors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis section helps you understand different behaviors to expect regarding how Stripe sends events to your webhook endpoint.\n\n### Retry behavior ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn live mode, Stripe attempts to deliver a given event to your webhook endpoint for up to 3 days with an exponential back off. In the [Events](https://dashboard.stripe.com/events) section of the Dashboard, you can view when the next retry will occur.\n\nIn test mode, Stripe retries three times over a few hours. You can manually retry transmitting individual events to your webhook endpoint after this time using the [Events](https://dashboard.stripe.com/events) section of the Dashboard. You can also [query for missed events](https://docs.stripe.com/api/events/list) to reconcile the data over any time period.\n\nThe automatic retries still continue, even if you manually retry transmitting individual webhook events to a given endpoint and the attempt is successful.\n\nIf your endpoint has been disabled or deleted when Stripe attempts a retry, future retries of that event are prevented. However, if you disable and then re-enable a webhook endpoint before Stripe can retry, you can still expect to see future retry attempts.\n\n### Disable behavior ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn live and test mode, Stripe attempts to notify you of a misconfigured endpoint by email if the endpoint hasn’t responded with a `2xx` HTTP status code for multiple days in a row. The email also states when the endpoint will be automatically disabled.\n\n### API versioning ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe API version in your account settings when the event occurs dictates the API version, and therefore the structure of an `Event` object sent in a webhook. For example, if your account is set to an older API version, such as **2015-02-16**, and you change the API version for a specific request with [versioning](https://docs.stripe.com/api#versioning), the `Event` object generated and sent to your endpoint is still based on the **2015-02-16** API version.\n\nYou can’t change `Event` objects after creation. For example, if you update a charge, the original charge event remains unchanged. This means that subsequent updates to your account’s API version don’t retroactively alter existing `Event` objects. Fetching older events by calling `/v1/events` using a newer API version also has no impact on the structure of the received events.\n\nYou can set test webhook endpoints to either your default API version or the latest API version. The `Event` sent to the webhook URL is structured for the endpoint’s specified version. You can also programmatically create endpoints with a specific [api\\_version](https://docs.stripe.com/api/webhook_endpoints/create#create_webhook_endpoint-api_version).\n\n### Event ordering ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe doesn’t guarantee delivery of events in the order in which they’re generated. For example, creating a subscription might generate the following events:\n\n*   `customer.subscription.created`\n*   `invoice.created`\n*   `invoice.paid`\n*   `charge.created` (if there’s a charge)\n\nYour endpoint shouldn’t expect delivery of these events in this order, and needs to handle delivery accordingly. You can also use the API to fetch any missing objects (for example, you can fetch the [invoice](https://docs.stripe.com/api/invoices \"invoices\"), charge, and subscription objects using the information from `invoice.paid` if you happen to receive this event first).\n\n## Best practices for using webhooks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReview these best practices to make sure your webhooks remain secure and function well with your integration.\n\n### Handle duplicate events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWebhook endpoints might occasionally receive the same event more than once. You can guard against duplicated event receipts by logging the [event IDs](https://docs.stripe.com/api/events/object#event_object-id) you’ve processed, and then not processing already-logged events.\n\n### Only listen to event types your integration requires![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConfigure your webhook endpoints to receive only the types of events required by your integration. Listening for extra events (or all events) puts undue strain on your server and we don’t recommend it.\n\nYou can [change the events](https://docs.stripe.com/api/webhook_endpoints/update#update_webhook_endpoint-enabled_events) that a webhook endpoint receives in the Dashboard or with the API.\n\n### Handle events asynchronously![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConfigure your handler to process incoming events with an asynchronous queue. You might encounter scalability issues if you choose to process events synchronously. Any large spike in webhook deliveries (for example, during the beginning of the month when all subscriptions renew) might overwhelm your endpoint hosts.\n\nAsynchronous queues allow you to process the concurrent events at a rate your system can support.\n\n### Exempt webhook route from CSRF protection ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re using Rails, Django, or another web framework, your site might automatically check that every POST request contains a _CSRF token_. This is an important security feature that helps protect you and your users from [cross-site request forgery](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)) attempts. However, this security measure might also prevent your site from processing legitimate events. If so, you might need to exempt the webhooks route from CSRF protection.\n\n``class StripeController < ApplicationController   # If your controller accepts requests other than Stripe webhooks,   # you'll probably want to use `protect_from_forgery` to add CSRF   # protection for your application. But don't forget to exempt   # your webhook route!   protect_from_forgery except: :webhook    def webhook     # Process webhook data in `params`   end end``\n\n### Receive events with an HTTPS server![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use an HTTPS URL for your webhook endpoint (required in live mode), Stripe validates that the connection to your server is secure before sending your webhook data. For this to work, your server must be correctly configured to support HTTPS with a valid server certificate. Stripe webhooks support only [TLS](https://docs.stripe.com/security/guide#tls \"TLS\") versions v1.2 and v1.3.\n\n### Roll endpoint signing secrets periodically ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe secret used for verifying that events come from Stripe is modifiable in the [Webhooks section](https://dashboard.stripe.com/webhooks) of the Dashboard. For each endpoint, click **Roll secret**. You can choose to immediately expire the current secret or delay its expiration for up to 24 hours to allow yourself time to update the verification code on your server. During this time, multiple secrets are active for the endpoint. Stripe generates one signature per secret until expiration. To keep them safe, we recommend that you roll secrets periodically, or when you suspect a compromised secret.\n\n### Verify events are sent from Stripe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe sends webhook events from a set list of IP addresses. Only trust events coming from these [IP addresses](https://docs.stripe.com/ips).\n\nAdditionally, verify webhook signatures to confirm that received events are sent from Stripe. Stripe signs webhook events it sends to your endpoints by including a signature in each event’s `Stripe-Signature` header. This allows you to verify that the events were sent by Stripe, not by a third party. You can verify signatures either using our [official libraries](#verify-official-libraries), or [verify manually](#verify-manually) using your own solution.\n\nThe following section describes how to verify webhook signatures:\n\n1.  Retrieve your endpoint’s secret.\n2.  Verify the signature.\n\n#### Retrieving your endpoint’s secret ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [Webhooks](https://dashboard.stripe.com/webhooks) section of the Dashboard. Select an endpoint that you want to obtain the secret for, and find the secret on the top right of the page.\n\nStripe generates a unique secret key for each endpoint. If you use the same endpoint for both [test and live API keys](https://docs.stripe.com/keys#test-live-modes), the secret is different for each one. Additionally, if you use multiple endpoints, you must obtain a secret for each one you want to verify signatures on, and Stripe starts to sign each webhook it sends to the endpoint.\n\n### Preventing replay attacks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA [replay attack](https://en.wikipedia.org/wiki/Replay_attack) is when an attacker intercepts a valid payload and its signature, then re-transmits them. To mitigate such attacks, Stripe includes a timestamp in the `Stripe-Signature` header. Because this timestamp is part of the signed payload, it’s also verified by the signature, so an attacker can’t change the timestamp without invalidating the signature. If the signature is valid but the timestamp is too old, you can have your application reject the payload.\n\nOur libraries have a default tolerance of 5 minutes between the timestamp and the current time. You can change this tolerance by providing an additional parameter when verifying signatures. Use Network Time Protocol ([NTP](https://en.wikipedia.org/wiki/Network_Time_Protocol)) to make sure that your server’s clock is accurate and synchronizes with the time on Stripe’s servers.\n\nStripe generates the timestamp and signature each time we send an event to your endpoint. If Stripe retries an event (for example, your endpoint previously replied with a non-`2xx` status code), then we generate a new signature and timestamp for the new delivery attempt.\n\n### Quickly return a 2xx response ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour [endpoint](https://docs.stripe.com/webhooks#example-endpoint) must quickly return a successful status code (`2xx`) prior to any complex logic that could cause a timeout. For example, you must return a `200` response before updating a customer’s invoice as paid in your accounting system.",
  "title": "Receive Stripe events in your webhook endpoint | Stripe Documentation",
  "description": "Listen to events in your Stripe account on your webhook endpoint so your integration can automatically trigger reactions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-shell/overview",
  "markdown": "# Stripe Shell | Stripe DocumentationThe Stripe Docs logo\n\n## Manage your Stripe resources in test mode from the Stripe docs site.\n\nStripe Shell is an interactive, authenticated, browser-based shell for managing your Stripe resources in test mode. It securely authenticates access anywhere within the Stripe docs site. Just login to the Stripe docs site and launch the Stripe Shell with a keyboard shortcut.\n\n## Start with a guide![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Key features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Use your favorite pre-installed tools![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nManage your Stripe resources with the Stripe CLI pre-loaded with autocomplete. No more hunting around for commands—start typing _stripe_ and hit the space bar on your keyboard then click a supported command.\n\n### Use the Stripe Shell to learn new products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLaunch the Stripe Shell from the Stripe docs site to easily try out different combinations of Stripe API requests before writing a line of code.\n\n### Execute Stripe CLI snippets directly in Stripe docs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRun any supported Stripe CLI command directly within the Stripe docs site. When you click the green _play_ button next to any supported CLI command, the Stripe Shell runs the request and returns an immediate response in the terminal window.\n\n### Use the Stripe CLI for local development![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile the Stripe Shell can’t test a webhooks integration on your local server, it’s still possible to use the Stripe CLI to forward and trigger webhook events locally. To learn more, see [Test a webhooks integration with the Stripe CLI](https://docs.stripe.com/webhooks#test-webhook).",
  "title": "Stripe Shell | Stripe Documentation",
  "description": "Manage your Stripe resources in test mode from the Stripe docs site.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/development/dashboard",
  "markdown": "# Developers Dashboard | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Developers Dashboard to view API request and event activity.\n\nThe Developers Dashboard collects information about each request in your account—use the Dashboard to view common integration errors, requests that failed, webhook events, and so on.\n\n## Start with a guide![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Key features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Determine the reason a request failed![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nManage your Stripe integration from the Developers Dashboard. Find your default API version and all versions used by your account, or filter API request logs and view log entries.\n\n### Setup local webhook event listeners![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvents are our way of letting you know when something interesting happens in your account. Use the Developers Dashboard and the Stripe CLI to setup a webhooks listener on your local machine, then trigger events to test your setup.\n\n### Manage access to your application![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll accounts have a total of four keys: a _publishable_ and _secret_ key pair for [test mode](https://docs.stripe.com/test-mode \"test mode\") and live mode. Use the Developers Dashboard to expire an existing key, restrict traffic to an IP address, or create a restricted API key for microservices used by your application.\n\n### Monitor a webhooks integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you send an API request, we log one or more events for your account. Use the Developers Dashboard to view events triggered by your account so you know which events to monitor in your webhooks integration.",
  "title": "Developers Dashboard | Stripe Documentation",
  "description": "Use the Developers Dashboard to view API request and event activity.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/workbench",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## WorkbenchBeta\n\n## Use Workbench to build, manage, and debug your Stripe integration.\n\n#### Beta\n\nTo enable or disable Workbench, configure the setting for your user login from the [Early access features](https://dashboard.stripe.com/settings/early_access) in the Dashboard.\n\nWorkbench provides developer tools to help you build, manage, and debug your Stripe integration from your browser, anywhere in the Dashboard. For example, using Workbench you can:\n\n*   Review a summary of recent integration errors\n*   Inspect API objects, request logs, events, and webhook deliveries\n*   Run API requests using the built-in command-line environment, or build them with the API Explorer\n*   Create and manage your webhook endpoint configuration\n\n**Share your ideas:** improve Workbench by clicking **Share feedback** at the top of the tool with feature requests, bug reports, and feedback.\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo use Workbench, you [need a Stripe account](https://dashboard.stripe.com/register) and to enable the beta from [Early access features](https://dashboard.stripe.com/settings/early_access) in the Dashboard. Only users with the **Administrator** or **Developer** role have full access to all Workbench tools.\n\n1.  Sign in to the [Dashboard](https://dashboard.stripe.com/). From the **Developers** menu, click **Workbench**.\n2.  You can drag the top handle of the Workbench pane to resize it, or you can click the maximize icon () to leave or enter full-screen mode.\n3.  Click the minimize icon () to collapse Workbench to a taskbar at the bottom of the page, or the expand icon () to reopen the pane. The taskbar lets you quickly inspect API objects and includes a notification tray that alerts you to critical API errors and event activity.\n4.  To hide the Workbench taskbar, click the collapse icon () to minimize the taskbar to an icon on the right of the Dashboard. Hover over the icon to display the notification tray. Click the icon to reopen the full Workbench pane.\n\nWorkbench includes multiple tools in each tab. Learn more about the functionality of each tab and how to use it below.\n\n#### Note\n\nTo open or minimize Workbench from anywhere in the Dashboard, press the tilde key (**~**) on your keyboard.\n\n### Use Workbench tools![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile using Workbench, keep these tools in mind:\n\n*   Click **Copy link** to generate a shareable URL of the current Workbench view.\n*   Click **Send feedback** to share ideas or questions with the core development team.\n\n## Overview of your Stripe integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSee an overview of your account’s API activity in the **Overview** tab.\n\n*   The **Integration status** widget displays any known service degradations in Stripe’s infrastructure.\n*   The **API keys** widget displays a list of standard and restricted keys on your account. Click **Manage** to create or update your API keys.\n*   The **API versions** widget displays a breakdown of the API versions that recent API requests to your account used. Click **Upgrade available** to [upgrade the default API version](https://docs.stripe.com/upgrades#how-can-i-upgrade-my-api) of your Stripe account.\n*   The **API requests** and **Webhooks** graphs visualize recent API activity on your account.\n*   **Integration insights** displays actionable improvements you can make to your Stripe account to resolve errors, improve performance, or better use Stripe APIs.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/workbench-overview.82e64e4151ee0da510e97050956b1a96.png)\n\nThe Overview tab shows a quick snapshot of your account’s API activity.\n\n## View recent errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Errors** tab summarizes recent errors for your Stripe account. You can learn more about how to resolve each type of API error, and review recent API request logs for each error.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/workbench-errors.f9bc5a18ecacc6f161ebc9cd2a8d9f0a.png)\n\nThe Errors tab summarizes recent API errors and highlights related request logs.\n\n## Use the Inspector to learn about API objects![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the **Inspector** to explore a JSON view of API objects on your Stripe account. To inspect an object, you can:\n\n*   Enter an object ID from the **Inspector** tab.\n*   Enter an object ID from the Workbench taskbar.\n*   Visit a Dashboard page for any object (for example, a `Payment`, `Customer`, or `Subscription`) and open the **Inspector** tab.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/workbench-inspector.132a139ddb20906e606a39d4eaf51af5.png)\n\nThe Inspector shows a JSON view of the API object, and any related request logs and events.\n\nThe **Inspector** tab displays all related API objects on the left, and a JSON view in the **Overview** tab. The **Logs** and **Events** tabs show related API activity to this object.\n\n## View API request logs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Logs** tab includes a list of recent API requests and responses for your Stripe account. Workbench highlights recent errors with suggestions on how to resolve them. You can filter API requests by:\n\n*   Date of the request\n*   HTTP status (for example, `200`)\n*   HTTP method (for example, `POST` or `DELETE`)\n*   API endpoint (for example, `/v1/checkout/sessions`)\n*   IP address that created the request\n*   Source (direct API requests or Dashboard)\n*   Account (or specifically when using Connect, the platform or connected accounts)\n*   API version (for example, `2020-08-27`)\n*   Error code (for example, `resource_missing`)\n*   Error type (for example, `invalid_request_error`)\n*   Error parameter (for example, `line_items[*][price]`)\n\nWorkbench doesn’t automatically refresh this tab in real-time as your account receives new API requests. Click **Refresh logs** to fetch the latest request logs from your Stripe account.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/workbench-logs.eca1ad610d58aa7493eff9d064a659d9.png)\n\nThe Logs tool presents a timeline of API activity, with filters for time endpoint, response code, and other properties.\n\n## Review recent events on your Stripe account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Events** tab includes a list of recent events on your Stripe account. Click **Refresh events** to fetch the latest events from your Stripe account. You can filter events by:\n\n*   Date of the event\n*   Delivery status (delivered or failed)\n*   Event type (for example, `customer.subscription.created`; you can also use wildcards (for example, `customer.*`)\n*   API resource (for example, `cus_123`)\n\nClick an event in the list on the left to review the event’s details, payload, and attempted deliveries on the right. Learn more about [setting up webhook endpoints](https://docs.stripe.com/workbench/webhooks) with Workbench.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/workbench-events.45cfc616e1e6b03ac93673581b47b8ba.png)\n\nThe Events tab shows recent activity on your Stripe account. Events can be delivered to webhook endpoints.\n\nThe **Delivery attempts** section lists attempted deliveries of the event (for example, to a webhook endpoint). Workbench might list multiple delivery attempts if the initial attempts failed. Stripe [automatically retries](https://docs.stripe.com/webhooks#behaviors) delivery in live mode several times. Click **Retry now** to manually attempt to redeliver the event.\n\n## Set up a webhook endpoint![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Webhooks** tab allows you to create a new webhook endpoint for Stripe to deliver events to:\n\n*   URL endpoints using webhooks\n*   Your local machine using the [Stripe CLI](https://docs.stripe.com/stripe-cli)\n\nClick **Create new endpoint** to configure a new webhook endpoint that Stripe sends events to. Select the API version that Stripe uses to generate webhook events and the event types to listen for, and specify an HTTPS URL where your server hosts the webhook endpoint.\n\nOn the left, Workbench lists any configured webhook endpoints. The **Overview** summarizes the activity on that configured endpoint, and **Event deliveries** provides a complete list of attempts by Stripe to deliver events to that endpoint. Click **Retry now** next to any delivery attempt so Stripe can redeliver the event to that endpoint.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/main.a385ccd665e5fbafa035600ecee9021a.png)\n\nSet up a new webhook endpoint or route events to your local development machine.\n\n## Run API commands using Shell and Explorer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Shell** provides a command-line interface to manage your Stripe resources within Workbench, similar to the [Stripe CLI](https://docs.stripe.com/stripe-cli). See [Shell and API Explorer](https://docs.stripe.com/workbench/shell) for the full list of available commands.\n\n#### Note\n\nShell is read-only in live mode. Switch to [test mode](https://docs.stripe.com/test-mode) to run API requests that create, modify, or delete API objects.\n\nWhen using Workbench, a minimal Shell is always available in the pane, or you can use the **Shell** tab to launch a full-screen session. From the **Shell** tab, click **New pane** to split the pane into multiple shell sessions.\n\nClick **API Explorer** to reveal the interactive command builder on the right. Choose the API resource and HTTP method to show the required and optional parameters for that request. The **Headers** tab allows setting some HTTP headers, such as the [`Stripe-Account` header](https://docs.stripe.com/connect/authentication#stripe-account-header) which allows making API requests to a connected account. Click **Run** to execute the API request.\n\nFilling in parameters in the API Explorer automatically constructs the corresponding Shell command. Select a programming language, then click **Print SDK request** to see the corresponding SDK code for the API request.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/workbench-shell.bda499755fff63eadcbcc0c90c7a70f1.png)\n\nShell and the API Explorer help you experiment with Stripe’s API from Workbench.\n\n## Next steps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Set up a webhook endpoint](https://docs.stripe.com/workbench/webhooks)\n*   [Try the Shell and API Explorer](https://docs.stripe.com/workbench/shell)\n*   [Keyboard shortcuts in Workbench](https://docs.stripe.com/workbench/keyboard-shortcuts)",
  "title": "Workbench | Stripe Documentation",
  "description": "Use Workbench to build, manage, and debug your Stripe integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/baas/start-integration/integration-guides/embedded-finance",
  "markdown": "# Embedded Finance integration guide | Stripe DocumentationThe Stripe Docs logo\n\n## Build an embedded financial services integration with Issuing and Treasury.\n\nBuild a US embedded financial services offering using Stripe [Issuing](https://docs.stripe.com/issuing/how-issuing-works) and [Treasury](https://docs.stripe.com/treasury). Use Issuing to create cards, and Treasury to store balances and fund card spend.\n\nBy the end of this guide, you’ll know how to:\n\n*   Create verified connected accounts representing your business customers with relevant Issuing and Treasury capabilities\n*   Create financial accounts that you can use as a wallet for your business customers and add funds to using an external bank account\n*   Create virtual cards for your business customers and use these cards to spend funds from a wallet\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Sign up for a [Stripe account](https://dashboard.stripe.com/register).\n2.  [Activate Issuing and Treasury in test mode](https://dashboard.stripe.com/setup/treasury/activate?a=1) from the Dashboard. For more information, see [API access to Issuing and Treasury](https://docs.stripe.com/treasury/access).\n3.  Configure your [Connect platform branding settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding) for your business and add an icon.\n\n[](#set-up-connect)\n\n### Create a connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a connected account to represent a business customer of your platform. For example, if your product is a SaaS platform for restaurants, each restaurant would be represented as a connected account.\n\n#### Connect account types\n\nIssuing only supports connected accounts that don’t use a Stripe-hosted Dashboard, and where your platform is responsible for requirements collection and loss liability, also known as a Custom connected account. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Issuing. If your existing accounts don’t match this configuration, you must recreate them.\n\nThe following request creates a US-based connected account with the correct configuration and requests the requisite capabilities:\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d country=US \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d \"capabilities[transfers][requested]\"=true \\  -d \"capabilities[card_issuing][requested]\"=true \\  -d \"capabilities[treasury][requested]\"=true \\  -d \"capabilities[us_bank_account_ach_payments][requested]\"=true`\n\nThe user’s account information appears in the response:\n\n`{     ...     \"id\":   \"{{CONNECTED_ACCOUNT_ID}}\",     \"controller\": {       \"stripe_dashboard\": {         \"type\": \"none\"       },       \"fees\": {         \"payer\": \"application\"       },       \"losses\": {         \"payments\": \"application\"       },       \"is_controller\": true,       \"type\": \"application\",       \"requirement_collection\": \"application\"     },     ... }`\n\nNote the connected account’s `id`. You’ll provide this value to [authenticate](https://docs.stripe.com/connect/authentication) as the connected account by passing it into requests in the `Stripe-Account` header.\n\nIf a connected account already exists, you can add the requisite capabilities by specifying the connected account `id` in the request:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d country=US \\   --data-urlencode email=\"jenny.rosen@example.com\" \\  -d \"capabilities[transfers][requested]\"=true \\  -d \"capabilities[treasury][requested]\"=true \\  -d \"capabilities[card_issuing][requested]\"=true`\n\n### Verify the connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nChoose one of the following onboarding options:\n\n[Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding) is a web form hosted by Stripe with your brand’s name, color, and icon. Stripe-hosted onboarding uses the [Accounts API](https://docs.stripe.com/api/accounts) to read the requirements and generate an onboarding form with robust data validation and is localized for all Stripe-supported countries.\n\nBefore using Connect Onboarding, you must provide the name, color, and icon of your brand in the Branding section of your [Connect settings page](https://dashboard.stripe.com/test/settings/connect).\n\nYou can use hosted onboarding to allow connected accounts to link an `external_account` (which is required for payouts) by enabling it through your [Connect Onboarding settings](https://dashboard.stripe.com/settings/connect).\n\nTo create an onboarding link for the connected account, use the [Account Links API](https://docs.stripe.com/api/account_links/create).\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account={{CONNECTED_ACCOUNT_ID}} \\   --data-urlencode refresh_url=\"https://example.com/reauth\" \\   --data-urlencode return_url=\"https://example.com/return\" \\   -d type=account_onboarding`\n\n#### Caution\n\nFor security reasons, don’t email, text, or send account link URLs directly to your connected account. We recommend that you distribute the account link URL from within your platform’s application, where their account is authenticated.\n\nThe response you receive includes the `url` parameter containing the link for your connected account to onboard to your platform.\n\nAt this point, Stripe has created and verified the connected account with `active` relevant capabilities to use Issuing and Treasury.\n\nTo learn more, see:\n\n*   [Set up an Issuing and Connect integration](https://docs.stripe.com/issuing/connect)\n*   [Stripe hosted onboarding for connected accounts](https://docs.stripe.com/connect/custom/hosted-onboarding)\n*   [Creating and using connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct)\n*   [Identify verification for connected accounts](https://docs.stripe.com/connect/identity-verification)\n\n[](#create-financial-accounts-add-funds)\n\nAfter you enable Treasury on your platform, add [FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts) objects to your [platform architecture](https://docs.stripe.com/treasury/account-management/treasury-accounts-structure) to enable the efficient storing, sending, and receiving of funds. Stripe attaches a financial account to your platform account after enablement, and lets you provision an individual financial account for each eligible connected account on your platform.\n\nIn the Stripe API, `FinancialAccount` objects serve as the source and destination of money movement API requests. You request `Features` through the API to assign to `FinancialAccounts` that provide additional functionality for the financial accounts on your platform.\n\nA financial account operates a distinct [balance of funds](https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions) from the connected account payments balance of the account it’s linked to. For example, the owner of a connected account on your platform might have a 100 USD connected account balance and a 200 USD financial account balance. In this scenario, the connected account owner has a sum of 300 USD spread between their financial account and connected account balances. These two balances remain separate, but the API provides the ability to move money from the connected account balance to the financial account balance.\n\n#### Multiple financial accounts\n\nThe multiple financial account beta feature enables you to open multiple financial accounts for a single connected account. Contact [treasury-support@stripe.com](mailto:treasury-support@stripe.com) to access test mode for this feature and join the wait list.\n\n### Create a Financial Account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter Stripe adds the `treasury` capability to an account and it’s marked `active`, you can create a `FinancialAccount` object for the connected account. To do this, call `FinancialAccounts` and request the `Features` you want to provide:\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"supported_currencies[]\"=usd \\  -d \"features[card_issuing][requested]\"=true \\  -d \"features[deposit_insurance][requested]\"=true \\  -d \"features[financial_addresses][aba][requested]\"=true \\  -d \"features[inbound_transfers][ach][requested]\"=true \\  -d \"features[intra_stripe_flows][requested]\"=true \\  -d \"features[outbound_payments][ach][requested]\"=true \\  -d \"features[outbound_payments][us_domestic_wire][requested]\"=true \\  -d \"features[outbound_transfers][ach][requested]\"=true \\  -d \"features[outbound_transfers][us_domestic_wire][requested]\"=true`\n\nThe response, when you request features on financial account creation, indicates their status in the `active_features`, `pending_features`, and `restricted_features` parameters:\n\n`{   \"object\": \"treasury.financial_account\",   \"created\": 1612927106,   \"id\": \"fa_123\",   \"country\": \"US\",   \"supported_currencies\": [\"usd\"],   \"active_features\": [\"card_issuing\"],   \"pending_features\": [\"financial_addresses.aba\"],   \"restricted_features\": [],   // No FinancialAddress added as the financial_addresses.aba feature is not yet active   \"financial_addresses\": [],   \"livemode\": true,   \"status\": \"open\",   ... }`\n\nActivation might be instantaneous for some features (for example, `card_issuing`). However, other features, like `financial_addresses.aba`, [activate asynchronously](https://tripe.com/docs/treasury/account-management/financial-account-features#webhooks), might stay `pending` for up to 30 minutes while Stripe communicates with external systems. After all of the relevant features are active, you get confirmation on the `treasury.financial_account.features_status_updated` webhook listener. See [Available features](https://docs.stripe.com/treasury/account-management/financial-account-features#available-features) for more information on financial account features.\n\n### Link a bank account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo let your customers transfer money to and from an external account, create a `SetupIntent` with the required parameters and attach it to `self` to denote that the external account is owned by your customer:\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d attach_to_self=true \\  -d \"flow_directions[]\"=inbound \\  -d \"flow_directions[]\"=outbound \\  -d \"payment_method_types[]\"=us_bank_account \\  -d \"payment_method_data[type]\"=us_bank_account \\  -d \"payment_method_data[us_bank_account][routing_number]\"=110000000 \\  -d \"payment_method_data[us_bank_account][account_number]\"=000123456789 \\  -d \"payment_method_data[us_bank_account][account_holder_type]\"=company \\  -d \"payment_method_data[billing_details][name]\"=\"Company Corp\" \\  -d confirm=true \\  -d \"mandate_data[customer_acceptance][type]\"=online \\  -d \"mandate_data[customer_acceptance][online][ip_address]\"=\"123.123.123.123\"`\n\nThe API response includes a unique identifier for the `payment_method` that’s used to reference this bank account when making ACH transfers:\n\n`{   \"id\": \"{{SETUP_INTENT_ID}}\",   \"object\": \"setup_intent\",   \"next_action\": {     \"type\": \"verify_with_microdeposits\",     \"verify_with_microdeposits\": {       \"arrival_date\": 1642579200,       \"hosted_verification_url\": \"https://payments.stripe.com/microdeposit/sacs_test_xxx\",       \"microdeposit_type\": \"amounts\"     }   },   ...   \"payment_method\": \"{{PAYMENT_METHOD_ID}}\",   \"payment_method_types\": [     \"us_bank_account\"   ] }`\n\nBefore you can use a bank account, it must be verified using microdeposits (which we focus on here) or the faster [financial connections](https://docs.stripe.com/financial-connections) option. The `SetupIntent` response from the previous step includes a `hosted_verification_url` which you must present to your customer for them to input the associated descriptor code of the microdeposit. Use the value `SM11AA` to verify the bank account, or test a variety of other cases by using the [test account numbers](https://docs.stripe.com/payments/ach-debit/set-up-payment?platform=web&payment-ui=stripe-hosted#test-account-numbers) Stripe provides.\n\n![Microdeposit verification](https://b.stripecdn.com/docs-statics-srv/assets/microdeposit-verification.a9151fafd6f3582cb8a268bf7b1b306e.png)\n\nMicrodeposit verification\n\n### Add funds to the financial account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsing the embedded [Financial account component](https://docs.stripe.com/connect/supported-embedded-components/financial-account) in your application, you can enable your Connected Accounts to transfer funds into the Financial account.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the financial account component by specifying `financial_account` in the `components` parameter. You can enable or disable individual features of the financial account component by specifying the `features` parameter under `financial_account`.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[financial_account][enabled]\"=true \\  -d \"components[financial_account][features][money_movement]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the financial account component in the frontend:\n\n`// Include this element in your HTML const financialAccount = stripeConnectInstance.create('financial-account'); financialAccount.setFinancialAccount('{{FINANCIAL_ACCOUNT_ID') container.appendChild(financialAccount);`\n\nFrom here, users can click **Move money** to initiate a transfer.\n\nAt this point, the connected account has a `FinancialAccount` that has been loaded with funds received from an `InboundTransfer` that you can spend using cards or `OutboundPayments` like ACH or wires.\n\nTo learn more, see:\n\n*   [Getting permissions for InboundTransfers](https://docs.stripe.com/treasury/moving-money/working-with-bankaccount-objects#permissions)\n*   [Working with Treasury financial accounts](https://docs.stripe.com/treasury/account-management/financial-accounts)\n*   [Using Treasury to move money](https://docs.stripe.com/treasury/examples/moving-money#microdeposits)\n*   [Requesting features on a Financial Account](https://docs.stripe.com/treasury/account-management/financial-account-features#available-features)\n*   [Working with SetupIntents, PaymentMethods, and BankAccounts](https://docs.stripe.com/treasury/moving-money/working-with-bankaccount-objects)\n*   [Moving money with Treasury using InboundTransfer objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/inbound-transfers)\n*   [Moving money with Treasury using ReceivedCredit objects](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/received-credits)\n\n[](#create-cardholders-cards)\n\nThe [Cardholder](https://docs.stripe.com/api/issuing/cardholder/object) is the individual (that is, employee or contractor) that’s authorized by your business customer to use card funding by the associated balance. The `Cardholder` object includes relevant details, such as a [name](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-name) to display on cards and a [billing](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-billing) address, which is usually the business address of the connected account or your platform.\n\nUse the embedded [Issuing cards list component](https://docs.stripe.com/connect/supported-embedded-components/issuing-cards-list) to enable your connected accounts to create a [Card](https://docs.stripe.com/api/issuing/cards/object) for a Cardholder and associate it with the Financial Account.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the Issuing cards list component by specifying `issuing_cards_list` in the `components` parameter. You can enable or disable individual features of the Issuing cards list component by specifying the `features` parameter under `issuing_cards_list`.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[issuing_cards_list][enabled]\"=true \\  -d \"components[issuing_cards_list][features][card_management]\"=true \\  -d \"components[issuing_cards_list][features][cardholder_management]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the Issuing cards list component in the front end:\n\n`// Include this element in your HTML const issuingCardsList = stripeConnectInstance.create('issuing-cards-list'); container.appendChild(issuingCardsList);`\n\nFrom here, users can click **Create card** to begin creating a new Cardholder and Card. The user can also activate the card during creation, or do so afterwards.\n\nAt this point, there’s an active card attached to a cardholder and financial account. See the [Issuing page](https://dashboard.stripe.com/issuing/overview) for the connected account to view the card and cardholder information.\n\nTo learn more, see:\n\n*   [Virtual cards with Issuing](https://docs.stripe.com/issuing/cards/virtual)\n*   [Physical cards](https://docs.stripe.com/issuing/cards/physical)\n*   [Using the Dashboard for Issuing with Connect](https://docs.stripe.com/issuing/connect#using-dashboard-issuing)\n*   [Create cards with the API](https://docs.stripe.com/issuing/cards)\n*   [Testing physical card shipment](https://docs.stripe.com/issuing/cards/physical/testing)\n\n[](#use-card)\n\nTo observe the impact of card activity on the associated balance, generate a test authorization. You can do this in the **Issuing page** of the Dashboard for the connected account, or with the following call to the [Authorization API](https://docs.stripe.com/api/issuing/authorizations):\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d card=  {{CARD_ID}}   \\  -d amount=1000 \\  -d authorization_method=chip \\  -d \"merchant_data[category]\"=taxicabs_limousines \\  -d \"merchant_data[city]\"=\"San Francisco\" \\  -d \"merchant_data[country]\"=US \\  -d \"merchant_data[name]\"=\"Rocket Rides\" \\  -d \"merchant_data[network_id]\"=1234567890 \\  -d \"merchant_data[postal_code]\"=94107 \\  -d \"merchant_data[state]\"=CA`\n\nAfter approval, Stripe creates an `Authorization` in a `pending` state while it waits for [capture](https://docs.stripe.com/issuing/purchases/transactions). Note the authorization `id` that you’ll use to capture the funds:\n\n`{   \"id\": \"iauth_1NvPyY2SSJdH5vn2xZQE8C7k\",   \"object\": \"issuing.authorization\",   \"amount\": 1000,   ...   \"status\": \"pending\",   \"transactions\": [], }`\n\nYou can use retrieve the balance details of the financial account and see the impact of the authorization:\n\n`curl https://api.stripe.com/v1/treasury/financial_accounts/`\n\n`{{FINANCIAL_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nThe API response is a `FinancialAccount` object with a `balance` hash that details the funds and their availability:\n\n`{   \"object\": \"treasury.financial_account\",   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   ...   \"balance\": {     \"cash\": {\"usd\": 19000},     \"inbound_pending\": {\"usd\": 0},     \"outbound_pending\": {\"usd\": 1000}   } }`\n\nThe response indicates 190 USD is currently available for use with an additional 10 USD held in `outbound_pending` from the `pending` authorization. You can now simulate capture of the authorization with the API.\n\n### Capture the funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCapture the funds using the following code:\n\n`curl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/`\n\n`{{AUTHORIZATION_ID}}`\n\n`/capture \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nAfter the authorization is captured, Stripe creates an Issuing [Transaction](https://docs.stripe.com/issuing/purchases/transactions), the `status` of the authorization is set to `closed`, and a `ReceivedDebit` webhook is created with these details. Retrieving the balance details of the financial account again shows the `outbound_pending` is now 0 USD while the available cash is remains 190 USD:\n\n`{   \"object\": \"treasury.financial_account\",   \"id\": \"{{FINANCIAL_ACCOUNT_ID}}\",   ...   \"balance\": {     \"cash\": {\"usd\": 19000},     \"inbound_pending\": {\"usd\": 0},     \"outbound_pending\": {\"usd\": 0}   } }`\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Handling real-time auth webhooks](https://docs.stripe.com/issuing/controls/real-time-authorizations)\n*   [Spending controls](https://docs.stripe.com/issuing/controls/spending-controls)\n*   [Issuing authorizations](https://docs.stripe.com/issuing/purchases/authorizations)\n*   [Issuing transactions](https://docs.stripe.com/issuing/purchases/transactions)\n*   [Testing Issuing](https://docs.stripe.com/issuing/testing)\n*   [Working with Stripe Issuing cards and Treasury](https://docs.stripe.com/treasury/account-management/issuing-cards)\n*   [Manage transaction fraud](https://docs.stripe.com/issuing/manage-fraud)\n*   [Issue regulated customer notices](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices)",
  "title": "Embedded Finance integration guide | Stripe Documentation",
  "description": "Build an embedded financial services integration with Issuing and Treasury.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps",
  "markdown": "# Stripe Apps | Stripe DocumentationThe Stripe Docs logo\n\n## Extend Stripe with third party services or embed custom user experiences directly in the Stripe Dashboard.\n\nStripe Apps provides the opportunity to become a third-party developer for Stripe. You can develop and privately distribute or publish your Stripe app on the global [Stripe Apps Marketplace](https://marketplace.stripe.com/). As a third-party Stripe Apps developer, you can create apps to:\n\n*   Authenticate users for third-party services using OAuth 2.0 or a restricted API key (RAK).\n*   Use the Stripe API to make calls, listen to events, and automate workflows. For example, you can create an app that automatically initiates a billing flow when a customer signs a contract, to streamline tasks and reducing manual account reconciliation.\n*   Design custom user interfaces that operate directly within the Stripe Dashboard. For example, users can interact with customer records, balance statements, and payment information in their CRM systems.\n\n#### Note\n\nStripe Apps serve as an extension of Stripe. To learn how to accept payments, see [Payments](https://docs.stripe.com/payments). To accept and send multiparty payments, see [Connect](https://docs.stripe.com/connect). To build a lightweight tool you can test, see [Developer tools](https://docs.stripe.com/development).\n\n![The types of Stripe Apps you can build as a developer](https://b.stripecdn.com/docs-statics-srv/assets/overview-v2.7266d8efad9da259a2bfcf634b259f08.png)\n\nThe main types of apps you can develop\n\nAs a Stripe Apps user, you have access to a range of apps on the Stripe Apps Marketplace to help bolster or expand your business on Stripe. You can also integrate Stripe into existing third-party services or platforms to synchronize data fields, trigger external workflows, or use Stripe as a payment processor.\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Build an app![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Distribute an app![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Migrate to Stripe Apps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Reference![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Support and troubleshooting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEngage with us on GitHub to:\n\n*   [Receive developer support](https://github.com/stripe/stripe-apps/wiki/Developer-Support)\n*   [View known issues or submit feedback](https://github.com/stripe/stripe-apps/issues)",
  "title": "Stripe Apps | Stripe Documentation",
  "description": "Extend Stripe with third party services or embed custom user experiences directly in the Stripe Dashboard.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/security",
  "markdown": "# Security at Stripe | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how Stripe handles security.\n\n#### PCI 4.0 released\n\n[PCI DSS v4.0](https://docs-prv.pcisecuritystandards.org/PCI%20DSS/Standard/PCI-DSS-v3-2-1-to-v4-0-Summary-of-Changes-r2.pdf) replaces v3.2.1 effective March 31, 2024. Stripe can help you understand how the requirements for demonstrating your compliance might change. Read our [Guide to PCI compliance](https://stripe.com/ie/guides/pci-compliance) to get started.\n\nOur users trust Stripe with their sensitive data and rely on us to be good custodians of their customers’ data as well. As a payments infrastructure company, our security posture continually evolves to meet the rigorous standards of the global financial industry.\n\n## Standards and regulations compliance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe uses best-in-class security practices to maintain a high level of security.\n\n### PCI-certified ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA PCI-certified auditor evaluated Stripe and certified us to [PCI Service Provider Level 1](https://usa.visa.com/splisting/splistinglearnmore.html). This is the most stringent level of certification available in the payments industry. This audit includes both Stripe’s Card Data Vault (CDV) and the secure software development of our integration code.\n\nWe provide our users with features to automate some aspects of PCI compliance.\n\n*   We analyze the user’s integration method and dynamically inform them of which PCI validation form to use.\n*   If a user integrates with Stripe Elements, Checkout, Terminal SDKs, or our mobile libraries, we provide assistance in completing their PCI validation form ([Self-Assessment Questionnaire A](https://www.pcisecuritystandards.org/pci_security/completing_self_assessment)) in the Dashboard.\n*   We publish a [PCI Compliance Guide](https://stripe.com/guides/pci-compliance) to help educate our users about PCI compliance and how Stripe can help.\n\n### System and Organization Controls (SOC) reports ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s systems, processes, and controls are regularly audited as part of our SOC 1 and SOC 2 compliance programs. SOC 1 and SOC 2 Type II reports are produced annually and can be provided upon request.\n\nThe Auditing Standards Board of the American Institute of Certified Public Accountants’ ([AICPA](https://www.aicpa.org/)) Trust Service Criteria (TSC) developed the SOC 3 report. Stripe’s SOC 3 is a public report of internal controls over security, availability, and confidentiality. [View our recent SOC 3 report](https://d37ugbyn3rpeym.cloudfront.net/docs/security/2023-Stripe-Payment-Processing-SOC3.pdf).\n\n### EMVCo standard for card terminals ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Terminal is certified to the [EMVCo Level 1 and 2](https://www.emvco.com/approved-products/?search_bar_keywords=bbpos&tax%5Bapproved-products_categories%5D%5B90%5D%5B%5D=94%2C95%2C96%2C97%2C99) standards of EMV® Specifications for card and terminal security and interoperability. Terminal is also certified to the [PCI Payment Application Data Security Standard](https://en.wikipedia.org/wiki/PA-DSS) (PA-DSS)—the global security standard that aims to prevent payment applications developed for third parties from storing prohibited secure data.\n\n### NIST Cybersecurity Framework ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s suite of information security policies and their overarching design are aligned with the [NIST Cybersecurity Framework](https://www.nist.gov/cyberframework/new-framework). Our security practices meet the standards of our enterprise customers who must provide secure products like on-demand cloud computing and storage platforms (for example, DigitalOcean and Slack).\n\n### Privacy and data protection ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe continuously implement evolving privacy and data protection processes, procedures, and best practices under all applicable privacy and data protection regimes. For more information, see the following resources:\n\n*   [Privacy policy](https://stripe.com/privacy)\n*   [Privacy center](https://stripe.com/en-ca/legal/privacy-center)\n*   [Data processing Agreement](https://stripe.com/legal/dpa)\n\n## Stripe product securement ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSecurity is one of Stripe’s guiding principles for all our product design and infrastructure decisions. We offer a range of features to help our users better protect their Stripe data.\n\n### Sensitive action authentication ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe Dashboard supports several forms of [multi-factor authentication](https://support.stripe.com/questions/enable-two-step-authentication) (MFA) including: [SMS](https://support.stripe.com/questions/enable-two-step-authentication-via-text-messaging), [time-based one-time password algorithm](https://support.stripe.com/questions/enable-two-step-authentication-using-a-mobile-app) (TOTP), and universal 2nd factor (U2F). We also support [single sign-on](https://docs.stripe.com/get-started/account/sso) through Security Assertion Markup Language (SAML) 2.0, allowing customers to mandate sign-in requirements, configure access control, and instantly onboard team members through Just-in-Time account provisioning.\n\nSupport requests from users must be authenticated by sending the request from the Dashboard (after login) or by verifying account access before a support response is proffered. By requiring authentication, we minimize the risk of providing any information to non-authorized people.\n\n### Access restriction and auditing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFrom the Dashboard, users can assign different detailed [roles](https://docs.stripe.com/get-started/account/teams) to enable least-privilege access for their employees, and create [restricted access keys](https://docs.stripe.com/keys#limit-access) to reduce the security and reliability risk of API key exposure.\n\nUsers can also view audit logs of important account changes and activity in their [security history](https://dashboard.stripe.com/security_history). These audit logs contain records of sensitive account activity, like logging in or changing bank account information. We monitor logins and note:\n\n*   If they’re from the same or usual devices\n*   If they’re from consistent IP addresses\n*   Failed attempts\n\nUsers can export historical information from the logs. For time-sensitive activities, such as logins from unknown IPs and devices, we send automatic notifications so that logs don’t need to be reviewed manually.\n\n### HTTPS and HSTS for secure connections ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe mandate the use of HTTPS for all services using [TLS](https://docs.stripe.com/security/guide#tls \"TLS\") (SSL), including our public website and the [Dashboard](https://dashboard.stripe.com/dashboard). We regularly audit the details of our implementation, including the certificates we serve, the certificate authorities we use, and the ciphers we support. We use [HSTS](http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security) to make sure that browsers interact with Stripe only over HTTPS. Stripe is also on the HSTS preloaded lists for all modern major browsers.\n\nAll server-to-sever communication is encrypted using mutual transport layer security (mTLS) and Stripe has dedicated [PGP keys](https://docs.stripe.com/security/python-client-pgp-key) for users to encrypt communications with Stripe, or verify signed messages they receive from Stripe. Our systems automatically block requests made using older, less secure versions of TLS, [requiring use of at least TLS 1.2](https://stripe.com/blog/completing-tls-upgrade).\n\nThe [stripe.com](https://stripe.com/) domain, including the Dashboard and API subdomains, are on the [top domains](https://chromium-review.googlesource.com/c/chromium/src/+/605062) list for Chrome, providing extra protection against homoglyph attacks. This makes it harder to create fake pages that look like stripe.com in Chrome (for example, [strípe.com](https://xn--strpe-1sa.com/)), which renders as punycode ([xn–strpe-1sa.com](https://xn--strpe-1sa.com/)), in turn making it harder for Stripe credentials to be phished.\n\n### Proactive internet monitoring ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe proactively scan the internet for our merchants’ API keys. If we find a compromised key, we take appropriate action, advising the user to roll their API key. We use the GitHub Token Scanner to alert us when a user’s API keys have been leaked on GitHub. If we find external phishing pages that might catch our users, we work proactively with our vendors to take those down and report them to Google Safe Browsing.\n\n## Infrastructure safeguards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOur security teams test our infrastructure regularly by scanning for vulnerabilities and conducting penetration tests and red team exercises. We hire industry-leading security companies to perform third-party scans of our systems, and we immediately address their findings. Our servers are frequently and automatically replaced to maintain server health and discard stale connections or resources. Server operating systems are upgraded well in advance of their security end of life (EOL) date.\n\n### Dedicated card technology ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe encrypts sensitive data both in transit and at rest. Stripe’s infrastructure for storing, decrypting, and transmitting primary account numbers (PANs), such as credit card numbers, runs in a separate hosting infrastructure, and doesn’t share any credentials with the rest of our services. A dedicated team manages our CDV in an isolated Amazon Web Services (AWS) environment that’s separate from the rest of Stripe’s infrastructure. Access to this separate environment is restricted to a small number of specially trained engineers and access is reviewed quarterly.\n\nAll card numbers are encrypted at rest with AES-256. Decryption keys are stored on separate machines. We tokenize PANs internally, isolating raw numbers from the rest of our infrastructure. None of Stripe’s internal servers and daemons can obtain plain text card numbers but can request that cards are sent to a service provider on a static allowlist. Stripe’s infrastructure for storing, decrypting, and transmitting card numbers runs in a separate hosting environment, and doesn’t share any credentials with Stripe’s primary services including our API and website. It’s not just PANs that are tokenized this way; we treat other sensitive data, like bank account information, in a similar way.\n\n### Corporate technology ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe takes a zero-trust approach to employee access management. Employees are authenticated leveraging SSO, two-factor authentication (2FA) using a hardware-based token, and mTLS through a cryptographic certificate on Stripe-issued machines. After connecting to the network, sensitive internal systems and those outside the scope of the employee’s standard work require additional access permissions.\n\nWe monitor audit logs to detect abnormalities and watch for intrusions and suspicious activity, and also monitor changes to sensitive files in our code base. All of Stripe’s code goes through multiparty review and automated testing. Code changes are recorded in an immutable, tamper-evident log. We constantly collect information about Stripe-issued laptops to monitor for malicious processes, connections to fraudulent domains, and intruder activity. We have a comprehensive process for allowlisting permitted software on employee laptops, preventing the installation of non-approved applications.\n\n## Security posture maintenance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOur developers work with security experts early in a project’s life cycle. As part of our Security Review process, security experts develop threat models and trust boundaries that help guide the implementation of the project. Developers use this same process to make changes to sensitive pieces of code.\n\n### Dedicated experts on-call ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe have a number of dedicated security teams that specialize in different areas of security, including infrastructure, operations, privacy, users, and applications. Security experts are available 24/7 through on-call rotations. We’re focused on constantly raising the bar on best practices to minimize cybersecurity risks.\n\n### Security is every Stripe employee’s job ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe require every Stripe employee to complete security education annually, and we provide secure software development training to Stripe engineers. We run internal phishing campaigns to test everyone at Stripe on recognizing phishing attempts and flagging them to the appropriate security team.\n\n### Managing access control ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe have a formal process for granting access to systems and information; we regularly review and automatically remove inactive access. Actions within the most sensitive areas of the infrastructure need a human review. To enable best practices for access control, our security experts build primitives to assist Stripe teams in implementing the principle of least privilege. To minimize our exposure, we have a data retention policy that minimizes the data we keep while complying with regulatory and business requirements.\n\n### Vulnerability disclosure and reward program ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe maintain a vulnerability disclosure and reward (“bug bounty”) program that compensates independent security researchers who help us keep our users safe. By submitting a security bug or vulnerability to Stripe through [HackerOne](https://hackerone.com/stripe), you acknowledge that you’ve read and agreed to the [program terms and conditions](https://hackerone.com/stripe). Refer to our policy on HackerOne for more information on how to participate in our bug bounty program.",
  "title": "Security at Stripe | Stripe Documentation",
  "description": "Learn how Stripe handles security.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors",
  "markdown": "# Stripe Connectors | Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\n## Use connectors to integrate with Stripe and leverage its products with leading software providers.\n\nSign up for developer updates:",
  "title": "Stripe Connectors | Stripe Documentation",
  "description": "Use connectors to integrate with Stripe and leverage its products with leading software providers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/no-code/buy-button",
  "markdown": "# Create an embeddable buy button\n\n## Use Payment Links to create an embeddable buy button for your website.\n\nCreate an embeddable buy button to sell a product, subscription, or accept a payment on your website. Start by selecting an existing link from the [Payment Links list view](https://dashboard.stripe.com/payment-links) or by [creating a new link](https://dashboard.stripe.com/payment-links/create) where you can decide which products to sell and customize the checkout UI. After you create your link, click **Buy button** to configure the buy button design and generate the code that you can copy and paste into your website.\n\n## Customize the button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, your buy button uses the same branding and call to action configured for your payment link. You can:\n\n*   Choose between a simple button and a card widget.\n*   Set brand colors, shapes, and fonts to match your website.\n*   Set the language of the button and payment page to match your website’s language.\n*   Customize your button’s call to action.\n\n![Customize the buy button](https://b.stripecdn.com/docs-statics-srv/assets/buy-button-card-layout.4003c3e9ffe3ce4378092dbdcd456ed9.png)\n\nCustomize the buy button",
  "title": "Create an embeddable buy button | Stripe Documentation",
  "description": "Use Payment Links to create an embeddable buy button for your website.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/no-code/quotes",
  "markdown": "# Use quotes | Stripe DocumentationThe Stripe Docs logo\n\nAfter your customer accepts the quote, bill them by converting the quote into an invoice or subscription.\n\nYou can only create one-off invoices if a quote _only_ has one-time prices.\n\nIf a quote has at least one recurring price, you can only convert it to a subscription.\n\n### Convert a quote to an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  To mark a quote as accepted and create a draft invoice, go to **Convert to invoice** > **Quotes details**.\n    \n2.  Use the [invoice editor](https://dashboard.stripe.com/test/invoices/create) to modify the draft invoice as needed.\n    \n3.  Email the invoice or automatically charge the customer.\n    \n\n### Convert a quote to a subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  In the quote editor, choose a customer and create or select a product with a recurring price.\n    \n2.  Enter the quote details and choose to either **Start the subscription immediately** or **Schedule a subscription start date**.\n    \n3.  Finalize the quote. This marks the quote as **Accepted**.\n    \n4.  Go to **Convert to subscription** > **Quotes details**.\n    \n5.  Enter or modify the subscription details, then click **Create subscription**.\n    \n\nIf you schedule the subscription to start immediately, Stripe creates an active subscription along with a draft invoice for the initial payment. Stripe finalizes the draft invoice automatically in one hour. Otherwise, the subscription begins on the scheduled start date. Depending on the subscription’s payment terms, Stripe collects payment by either charging the customer’s payment method on file or sending them an invoice.",
  "title": "Use quotes | Stripe Documentation",
  "description": "Send a quote and convert it to a payment or subscription.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/payment-methods",
  "markdown": "# Payment methods | Stripe DocumentationThe Stripe Docs logo\n\n[ACH Direct Debit](https://docs.stripe.com/invoicing/ach-debit)Stripe users in the United States can accept ACH Direct Debit payments from customers with a US bank account using the Automated Clearing House (ACH) payments system operated by Nacha.USDUSNone.[Alipay](https://docs.stripe.com/payments/alipay)Alipay is a digital wallet in China that has more than a billion active users worldwide. Alipay users can pay on the web or on a mobile device using login credentials or their Alipay app.AUD, CAD, CNY, EUR, GBP, HKD, JPY, MYR, NZD, SGD, USDAU, CA, Europe, HK, JP, NZ, SG, USAlipay isn’t currently supported on the Hosted Invoice Page.[Bancontact](https://docs.stripe.com/payments/bancontact)Bancontact is the most popular online payment method in Belgium, with over 15 million cards in circulation.EURAU, CA, Europe, HK, JP, MX, NZ, SG, USNone.[Credit transfer (Sources)](https://docs.stripe.com/payments/sources/credit-transfers)Stripe users can receive bank transfers directly from customers using [Sources](https://docs.stripe.com/sources).EUR, JPY, USDEurope (SEPA), JP, USNone.[Bank transfer (Payment Intents)](https://docs.stripe.com/payments/bank-transfers)Stripe users can receive bank transfers directly from customers using [Payment Intents](https://docs.stripe.com/payments/payment-intents).EUR, IDR, JPY, MXN, GBP, USDEurope (SEPA), Indonesia, Japan, Mexico, United Kingdom, United StatesCan only add this payment method to individual invoices. Invoices that use this payment method only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).[Bacs Direct Debit](https://docs.stripe.com/payments/payment-methods/bacs-debit) Stripe users in the United Kingdom can accept Bacs Direct Debit from customers with a UK bank account.GBPUnited KingdomYou must be based in United Kingdom.[BECS Direct Debit in Australia](https://docs.stripe.com/payments/au-becs-debit)Stripe users in Australia can accept BECS Direct Debit payments from customers with an Australian bank account.AUDAUYou must be based in Australia.[Boleto](https://docs.stripe.com/payments/boleto/accept-a-payment)Boleto is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method that requires customers to [take additional steps](https://docs.stripe.com/payments/payment-methods#customer-actions) to complete their payment.BRLBRYou must be based in Brazil.[Cash App Pay](https://docs.stripe.com/payments/cash-app-pay)Cash App Pay is a reusable payment method in the US that requires customers to authenticate their payment.USDUSYou must be based in the United States.[Cards](https://docs.stripe.com/payments/cards/overview)Cards are one of the most popular ways to pay online, with broad global reach. There are different types of cards and several steps in the process.Most currenciesMost locationsNone.[EPS](https://docs.stripe.com/payments/eps)EPS is an Austria-based payment method that allows customers to complete transactions online using their bank credentials.EURAU, CA, Europe, HK, JP, MX, NZ, SG, USNone.[Financial Process Exchange (FPX)](https://docs.stripe.com/payments/fpx)A Malaysia-based payment method that allows customers to complete transactions online using their bank credentials.MYRMYYou must be based in Malaysia.[giropay](https://docs.stripe.com/payments/giropay)A German payment method based on online banking. It allows customers to complete transactions online using their online banking environment, with funds debited from their bank account.EURAU, CA, Europe, HK, JP, MX, NZ, SG, USNone.[iDEAL](https://docs.stripe.com/payments/ideal)iDEAL is a Netherlands-based payment method that allows customers to complete transactions online using their bank credentials.EURAU, CA, Europe, HK, JP, MX, NZ, SG, USNone.[Pre-authorized payment method (PAD)](https://docs.stripe.com/payments/acss-debit)Stripe users in Canada and the United States can accept pre-authorized debit payments (PADs) from customers with a Canadian bank account using the Automated Clearing Settlement System (ACSS).CAD, USDCA, USNone.[Konbini](https://docs.stripe.com/payments/konbini)Konbini allows customers in Japan to pay for bills and online purchases at convenience stores with cash.JPYJPInvoices that use Konbini as a payment method only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).[Link](https://docs.stripe.com/payments/link)Link saves and autofills payment and shipping information for your customers so they don’t need to enter payment details manually.Most currenciesMost locationsNone.[PayNow](https://docs.stripe.com/payments/paynow)PayNow is a real-time bank transfer service available to customers of participating banks and Non-Bank Financial Institutions (NFIs) in Singapore. Customers see a QR code when checking out with PayNow. They complete the payment by scanning it using a participating app.SGDSGInvoices that use PayNow as a payment method only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).[PayPal](https://docs.stripe.com/payments/paypal)PayPal is one of the most familiar brands in Europe. Millions of active global PayPal users choose PayPal everyday for one-off and recurring payments.EUR, GBP, USD, CHF, CZK, DKK, NOK, PLN, SEK, AUD, CAD, HKD, NZD, SGDEurope, UK, CHYou must be in Europe, the United Kingdom, or Switzerland.[PromptPay](https://docs.stripe.com/payments/promptpay)PromptPay allows customers in Thailand to make a payment using their preferred app from participating banks.THBTHInvoices that use PromptPay as a payment method only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).[Przelewy24](https://docs.stripe.com/payments/p24)A Poland-based payment method aggregator that allows customers to complete transactions online using bank transfers and other methods. Przelewy24 provides a way for customers to pay with over 165 banks.EUR, PLNAU, CA, Europe, HK, JP, MX, NZ, SG, USNone.[SEPA direct debit](https://docs.stripe.com/payments/sepa-debit)The Single Euro Payments Area (SEPA) is an initiative of the European Union to simplify payments within and across member countries.EURMost locationsNone.[Sofort](https://docs.stripe.com/payments/sofort)Stripe users in Europe and the United States can use the [Payment Intents API](https://docs.stripe.com/payments/payment-intents) to accept Sofort payments from customers in select countries.EURAU, CA, Europe, HK, JP, MX, NZ, SG, USNone.[WeChat Pay](https://docs.stripe.com/payments/wechat-pay)As China’s largest internet company, Tencent offers a number of web and mobile products across social networking, communications, media, games, finance, and so on.CNY, AUD, CAD, EUR, GBP, HKD, JPY, SGD, USD, DKK, NOK, SEK, CHF (depending on business location)AU, CA, Europe, HK, JP, SG, UK, USNone.",
  "title": "Payment methods | Stripe Documentation",
  "description": "Learn about the supported payment methods for Invoicing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/no-code/tap-to-pay",
  "markdown": "# Tap to Pay on the Dashboard mobile app\n\n## Use the Stripe Dashboard mobile app to accept in-person, contactless payments.\n\nProcess in-person, contactless payments using only your phone with [Tap to Pay](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay) with Stripe Terminal. You don’t need to buy any hardware or write any code. To get started accepting payments with Tap to Pay, download the Stripe Dashboard mobile app on [iOS](https://apps.apple.com/app/apple-store/id978516833?pt=91215812&ct=stripe-mobile-app-ttp-doc-page&mt=8) or [Android](https://play.google.com/store/apps/details?id=com.stripe.android.dashboard) and log in with your Stripe account.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you start setting up Tap to Pay, make sure that you meet the requirements below and operate in a supported country.\n\nIf you’re new to Stripe, set up and activate your [Stripe account](https://dashboard.stripe.com/register/) before downloading the Stripe Dashboard mobile app.\n\nIf you’re new to Stripe, [set up and activate a new account](https://dashboard.stripe.com/register/) before downloading the Dashboard mobile app.\n\n|     |     |\n| --- | --- |\n| **Good for** | In-person payments without your own app or terminal |\n| **Pricing** | [Pay-as-you-go for Terminal and Tap to Pay](https://stripe.com/pricing) |\n| **Compatible with** | Contactless cards (Visa, MC, Amex, Discover) and NFC mobile wallets (Apple Pay, Google Pay, Samsung Pay) |\n| **Download the app** | The Stripe Dashboard app is available on the App Store and Google Play:<br><br>*   [Download iOS app on the App Store](https://apps.apple.com/app/apple-store/id978516833?pt=91215812&ct=stripe-mobile-app-ttp-doc-page&mt=8)<br>*   [Download Android app on Google Play](https://play.google.com/store/apps/details?id=com.stripe.android.dashboard) |\n| **Requirements** | *   [Stripe account](https://docs.stripe.com/get-started/account)<br>*   Stripe [iOS](https://apps.apple.com/app/apple-store/id978516833?pt=91215812&ct=stripe-mobile-app-ttp-doc-page&mt=8) or [Android](https://play.google.com/store/apps/details?id=com.stripe.android.dashboard) Dashboard app<br>*   Location permissions enabled<br>*   **iOS:** iPhone XS or later with a device passcode set running iOS 16.0 or later<br>*   **Android:** A [supported Android device](https://docs.stripe.com/terminal/payments/setup-reader/tap-to-pay?platform=android#supported-devices) |\n| **Supported countries** | The Stripe Dashboard app is available on iOS and Android in the following countries.<br><br>**iOS country availability**<br><br>Australia<br><br>United Kingdom<br><br>United States<br><br>**Android country availability**<br><br>Australia<br><br>Austria<br><br>Belgium<br><br>Canada<br><br>Czech Republic<br><br>Denmark<br><br>Finland<br><br>France<br><br>Germany<br><br>Ireland<br><br>Italy<br><br>Luxembourg<br><br>Malaysia<br><br>Netherlands<br><br>New Zealand<br><br>Norway<br><br>Portugal<br><br>Singapore<br><br>Spain<br><br>Sweden<br><br>Switzerland<br><br>United Kingdom<br><br>United States |\n\n## Accept a Tap to Pay contactless payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Enable NFC\n\nBefore accepting Tap to Pay contactless payments, you must enable NFC on your mobile device.\n\n1.  Open your Stripe Dashboard mobile app.\n2.  Tap the add symbol () from any tab.\n3.  Select **Charge a card or send an invoice**.\n4.  Enter the amount to charge.\n5.  Select **Tap to Pay** as your payment acceptance option.\n6.  When the Tap to Pay symbol appears, prompt your customer to tap their card to the device by following the instructions on screen.\n7.  The payment confirmation page signals successful completion of the transaction.\n\n## Other ways to accept in-person payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re unable to accept a Tap to Pay payment in the Dashboard app, you have other options:\n\n*   **Manually charge a card**: Open the Stripe Dashboard app, click the add symbol () from any tab, and select **Charge a card or send an invoice**. Then, enter your customer’s card information manually.\n*   **iOS only: Generate a QR code**: Create a [payment link](https://docs.stripe.com/no-code/payment-links) and have your customer scan the QR code to pay. You can also [share a payment link](https://docs.stripe.com/payment-links/share) through text, email, and other channels.\n\n#### For developers\n\n## Charge limits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMaximum and minimum limits on charge amounts apply when accepting payments. For more information on limits, see [Minimum and maximum charge amounts](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts).",
  "title": "Tap to Pay on the Dashboard mobile app | Stripe Documentation",
  "description": "You only need your phone to let in-person customers pay you with a contactless card or mobile wallet. Download the Stripe Dashboard mobile app for iPhone or Android to use Tap to Pay.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/no-code/payout",
  "markdown": "# Pay out to people | Stripe DocumentationThe Stripe Docs logo\n\n## Add money to your Stripe balance and pay out to sellers or service providers.\n\nUse this guide to learn how to add funds to your account balance and transfer the funds into your users’ bank accounts, without processing payments through Stripe. This guide uses an example of a Q&A product that pays its writers a portion of the advertising revenue that their answers generate. The platform and connected accounts are both in the US.\n\nWhen adding funds to your balance, best practice is to use a manual [payout](https://docs.stripe.com/payouts \"payout\") schedule. If you enable automatic payouts, you can’t control whether the system uses added funds for payouts. You can configure your schedule in your [payout settings](https://dashboard.stripe.com/settings/payouts).\n\n#### Note\n\n## Prerequisites ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  [Register your platform](https://dashboard.stripe.com/connect/tasklist).\n2.  Add business details to [activate your account](https://dashboard.stripe.com/account/onboarding).\n3.  [Complete your platform profile](https://dashboard.stripe.com/connect/settings/profile).\n4.  [Customize your brand settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding). Add a business name, icon, and brand color.\n\n[](#create-connected-account)\n\nWhen a user (seller or service provider) signs up on your platform, create a user [Account](https://docs.stripe.com/api/accounts) (referred to as a _connected account_) so you can accept payments and move funds to their bank account. Connected accounts represent your users in Stripe’s API and facilitate the collection of information requirements so Stripe can verify the user’s identity. For a Q&A product that pays for answers, the connected account represents the writer.\n\n### Customize your signup form ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn your [platform settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding), customize your Express signup form by changing the color and logos that users see when they click your [Connect](https://docs.stripe.com/connect \"Connect\") link.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/oauth-form.4b13fc5edc56abd16004b4ccdff27fb6.png)\n\nDefault Express signup form\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/branding-settings-payouts.20c99c810389a4e7f5c55238e80a9fc8.png)\n\nBranding settings\n\n### Create a connected account link ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create a connected account onboarding link by clicking **+Create** on the [accounts overview page](https://dashboard.stripe.com/connect/accounts/overview), and selecting **Express** for the account type, along with the **transfers** capability. Click **Continue** to generate a link to share with the user you want to onboard.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/create-account.474100e68f8c8df37bc4b5fac9e04583.png)\n\nCreate a connected account\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/no-code-connect-express-link.40a3af1fdd03417e6560d3327db55961.png)\n\nCreate an onboarding link\n\nThis link directs users to a form where they can provide information in order to connect to your platform. For example, if you have a Q&A platform, you can provide a link for writers to connect with the platform. The link is only for the single connected account you created. After your user completes the onboarding flow, you can view them in your accounts list.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dashboard-account-payout.94e15f1be4a11a54d18fc305433e50f4.png)\n\n[](#add-funds)\n\nTo add funds, go to the [Balance](https://dashboard.stripe.com/test/balance/overview) section in the Dashboard. Click **Add to balance** and select why you are adding funds to your account.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/add_funds_modal_with_issuing.f3dc58497698fb2a62b6461b7ed4fba6.png)\n\nSelect **Pay out connected accounts** to add funds to pay out to your connected accounts. If you are adding funds to your balance to cover future refunds and disputes, or to repay your platform’s negative balance, select **Cover negative balances** and see [adding funds to your Stripe balance](https://docs.stripe.com/get-started/account/add-funds).\n\n### Verify your bank account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nGo through the verification process in the Dashboard when you first attempt to add funds from an unverified bank account. If your bank account is unverified, you’ll need to confirm two microdeposits from Stripe. These deposits appear in your online banking statement within 1-2 business days. You’ll see `ACCTVERIFY` as the statement description.\n\nStripe notifies you in the Dashboard and through email when the microdeposits have arrived in your account. To complete the verification process, click the Dashboard notification in the [Balance](https://dashboard.stripe.com/balance/overview) section, enter the two microdeposit amounts, and click **Verify account**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/top-ups4.85d1f2d8440f525714d0f2d20775e2d1.png)\n\n### Add funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOnce verified, use the [Dashboard](https://dashboard.stripe.com/test/balance/overview) to add funds to your account balance.\n\n1.  In the Dashboard, go to the [Balance](https://dashboard.stripe.com/test/balance/overview) section.\n2.  In the **Add to balance** window, enter an amount in USD and select Connect payouts.\n3.  In the resulting modal (shown below), enter an amount in USD.\n4.  Verify the amount and then click **Add funds.**\n5.  The resulting object is called a [top-up](https://docs.stripe.com/api/topups/object) and can be viewed in the [Top-ups](https://dashboard.stripe.com/test/topups) section of the Dashboard.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/topup_modal.5523d356678b312020e4e063e7de8eb4.png)\n\n### View funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nView your funds in the Dashboard on [Top-ups](https://dashboard.stripe.com/test/topups) tab under the [Balance](https://dashboard.stripe.com/balance/overview) page. Each time you add funds, a top-up object is made that has a unique ID in the format **tu\\_XXXXXX**, which you can see on the detailed view for the top-up.\n\n### Settlement timing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUS platforms add funds via ACH debit and can take 5-6 business days to become available in your Stripe balance. You can request a review of your account for faster settlement timing by contacting [Stripe Support](https://support.stripe.com/contact).\n\nAs we learn more about your account, Stripe might be able to decrease your settlement timing automatically.\n\nAdding funds for future refunds and disputes or to repay a negative balance can happen through [bank or wire transfers](https://docs.stripe.com/get-started/account/add-funds) and are available in 1-2 business days.\n\n[](#pay-out-to-user)\n\nAfter your user completes [the onboarding process](https://docs.stripe.com/connect/add-and-pay-out-guide#create-connected-account) and you’ve added funds to your balance, you can transfer some of your balance to your connected accounts. In this example, money is transferred from the Q&A platform’s balance to the individual writer.\n\nTo pay your user, go to the **Balance** section of an account’s detail page and click **Add funds**. By default, any funds you transfer to a connected account accumulate in the connected account’s Stripe balance and are paid out on a daily rolling basis. You can change the payout frequency by clicking the right-most button in the **Balance** section and selecting **Edit payout schedule**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/send-funds.5c34a4e2e038c3a5343c7aa165eb3787.png)\n\nSend funds to user\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/edit-payout-schedule.537eca9bac08a738533bd644e9dd2280.png)\n\nEdit payout schedule",
  "title": "Pay out to people | Stripe Documentation",
  "description": "Add money to your Stripe balance and pay out to sellers or service providers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/dashboard/manage-invoices",
  "markdown": "# Invoices page | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to manage your invoices in the Dashboard.\n\nInvoices move through a series of statuses as they’re created and processed. You can track the status of an [invoice](https://docs.stripe.com/api/invoices \"invoices\") on the [Invoices page](https://dashboard.stripe.com/invoices).\n\n#### Note\n\nYou can remove the header on the Invoices page by closing all of the items in the task list. After you remove the header, you can’t make it reappear.\n\nInvoices in `open` status can display a different badge, such as `Past due` or `Retrying`. In some scenarios, you can hover over the badge to view an explanatory tooltip.\n\n#### Note\n\nIf an open non-subscription invoice is waiting for a payment that’s initiated but still pending, it shows the `Pending` badge in the list of invoices. However, its details page shows the `Open` badge.\n\n![Invoices page](https://b.stripecdn.com/docs-statics-srv/assets/invoices-page.e6e97cbab0962e47914e2dd446a046b7.png)\n\nInvoices page\n\n## Filter invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn the Invoices page, you can filter the view using the buttons above the list. The **Outstanding** button shows invoices with `open` status. To further refine the list, click **Filter**. You can filter by frequency, status, creation date, due date, and so on.\n\nYou can also configure the information displayed in the **Customer** column. Click the gear icon next to that column’s heading and select the customer description, customer email, list of line items, or a metadata attribute.\n\n![Filter invoices](https://b.stripecdn.com/docs-statics-srv/assets/invoices-page-filter.309be8c81d4f7cb9e551923804fe941f.png)\n\nFilter invoices\n\n## Invoice actions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou see a **Download PDF** button when you hover over the overflow menu (). Depending on the invoice status, clicking the button downloads either a PDF of the invoice or a receipt. If the customer has paid the invoice, Stripe generates a PDF of the receipt. For all other statuses, Stripe generates a PDF of the invoice. The overflow menu also provides additional actions, which allow you to duplicate an invoice, delete a draft, or view the customer details associated with an invoice.\n\n#### Note\n\nIf you need the original invoice for a paid invoice, click through to the [Invoice details page](#invoice-details-page).\n\n## Export invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can export all of your invoices, or a subset of them (as a CSV file) by using the **Export** feature.\n\n![Export invoices](https://b.stripecdn.com/docs-statics-srv/assets/export-invoices.222e5d15d14c8527fa040da14ee2b510.png)\n\nExport invoices\n\n## Invoice details page ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you click an invoice on the Invoices page, its details page opens. If the invoice is in `draft` status and isn’t associated with a subscription, the edit invoice form opens automatically. You can perform a variety of actions on the details page, such as editing it, adding a note, resending it, or downloading a receipt. The available actions depend on the status of the invoice.\n\n#### Note\n\nAfter Stripe finalizes an invoice, you can’t change its due date. If you need to change the due date, you must [void](https://docs.stripe.com/invoicing/overview#void) (cancel) the original invoice and send a new one.\n\n![Invoice details page](https://b.stripecdn.com/docs-statics-srv/assets/invoice-details-page.b44b9476aee88475ad7b18558e1d03a8.png)\n\nInvoice details page\n\n## Pending invoice items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can see a customer’s pending invoice items by navigating to the [Customers page](https://dashboard.stripe.com/customers), and clicking on their name. If the customer has a pending invoice item, it appears under **Pending invoice items**. An invoice item appears as pending if it’s not attached to any invoice.\n\nUnder **Pending invoice items**, you can also choose to create a new invoice item, or instantly invoice everything listed. When you click **Invoice now**, a dialog appears that lets you select whether to charge the default source or email the invoice to the customer. Additionally, the dialog gives you the option to calculate tax automatically. To learn about how invoice items fit within a subscription, see [Add invoice items to a draft subscription invoice](https://docs.stripe.com/billing/invoices/subscription#adding-draft-invoice-items).",
  "title": "Invoices page | Stripe Documentation",
  "description": "Learn how to manage your invoices in the Dashboard.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/automatic-charging",
  "markdown": "# Automatic charging | Stripe DocumentationThe Stripe Docs logo\n\n## Have Stripe automatically charge a customer's stored payment method.\n\nStripe can automatically attempt to pay an [invoice](https://docs.stripe.com/api/invoices \"invoices\") if the customer has a payment method on file. You can automatically charge a customer when you’re [creating an invoice](https://dashboard.stripe.com/invoices/create) or through the [API](https://docs.stripe.com/api/invoices). When you automatically charge a payment method on file, Stripe doesn’t notify the customer about the invoice. However, if you want to send an email receipt, make sure that you enable the **Successful payments** option in your [Email settings](https://dashboard.stripe.com/settings/emails) and that you’ve added your customer’s email address.\n\n## Add a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo add a payment method, go to the [Customers page](https://dashboard.stripe.com/customers) and select a customer. Select **Add** in the **Payment methods** section to add a card or an ACH debit bank account. You can also add a payment method during invoice creation. If your customer uses multiple payment methods, click the overflow menu () next to the card to make it the default.",
  "title": "Automatic charging | Stripe Documentation",
  "description": "Have Stripe automatically charge a customer's stored payment method.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/automatic-reconciliation",
  "markdown": "# Automatic reconciliation | Stripe DocumentationThe Stripe Docs logo\n\n## Let Stripe handle the cash reconciliation for credit transfer payment methods.\n\n#### Warning\n\nThis page covers the Sources-based implementation of credit transfers. We deprecated the Sources API and plan to remove support for local payment methods. If you currently integrate with Credit Transfers, you must [migrate to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\n​​Businesses often use credit transfer payments for large deals or new business relationships. Credit transfer payments can generate a lot of manual work for your team. Stripe facilitates this process by accepting transfers that pay open invoices.\n\nFor each of your customers, Stripe auto-generates a US virtual bank account number that can be paid in USD with ACH credit or wires. When your customer sees an invoice with this virtual bank account, they can send payment to it. ​​Stripe automatically reconciles the payment with the virtual bank account and the invoice. Stripe then marks the invoice as paid.\n\n### Transfers versus debits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing automatic reconciliation means that you don’t need to expose your sensitive bank account details to users or manually reconcile open invoices with your bank. With auto-reconciliation for invoices, Stripe can:\n\n*   Match incoming payments with invoice amounts.\n*   Manage overpayment or underpayment, when the amount paid doesn’t match the invoice.\n*   Reduce the number of API calls required to transfer funds into Stripe.\n*   Manage payment retries on open invoices.\n\n## Pay an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a customer doesn’t have an [ach\\_credit\\_transfer](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-ach_credit_transfer) subhash, Stripe creates one for every invoice. All invoices include instructions on where to send payment. Also, each customer has a unique payment address that’s shared across their invoices. With the `ach_credit_transfer` subhash, customers can transfer funds through either the US ACH system or domestic wire, and include an invoice number in the memo field.\n\n#### Note\n\n​​ACH credit transfers only support USD.\n\nAs soon as a customer makes a transfer, Stripe matches the payment to an invoice by checking for an invoice number in the memo field of the transfer. We fulfill any invoices that we find a match for. If we can’t find a match, we fulfill the oldest outstanding invoice of the same amount. If we can’t find any outstanding invoice that has the same amount, then we’ll fulfill as many outstanding invoices that can be fulfilled with the transfer amount, starting with the oldest payable invoice. When an invoice is fulfilled, an `invoice.paid` event occurs (you can receive this event by using [webhooks](https://docs.stripe.com/invoicing/integration/workflow-transitions)).\n\nYou can inspect the status of any ACH credit transfer by viewing the list of payment methods for the customer in the [Dashboard](https://dashboard.stripe.com/customers). You can also see the status by viewing a customer’s sources in the API:\n\n`curl https://api.stripe.com/v1/customers/cus_9jWC3097MQwYwF/sources \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\nStripe returns a list of sources attached to that customer. The source `type` for an ACH credit transfer has a value of `ach_credit_transfer`. In the following response example, the ACH credit transfer receiver is awaiting payment from the customer:\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\": \"src_19Q3AILlRB0eXbMt81RVDnM9\",       \"object\": \"source\",       \"amount\": null,       \"client_secret\": \"src_client_secret_Z0zPIgnR0BVafiMLaJcxI3HS\",       \"created\": 1481585102,       \"currency\": \"usd\",       \"customer\": \"cus_9jWC3097MQwYwF\",       \"flow\": \"receiver\",       \"livemode\": false,       \"metadata\": {},       \"owner\": {         \"address\": null,         \"email\": \"jenny.rosen@example.com\",         \"name\": null,         \"phone\": null,         \"verified_address\": null,`\n\nOccasionally, customers might want to use payment methods outside of Stripe, such as paper checks. In these situations, Stripe allows you to keep track of your invoice’s payment status. After you receive an invoice payment from a customer outside of Stripe, you can manually mark their invoice as paid:\n\n`curl https://api.stripe.com/v1/invoices/in_18jwqyLlRB0eXbMtrUQ97YBw/pay \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d paid_out_of_band=true`\n\n## Handle exceptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your customer pays an amount that doesn’t match an invoice amount, the funds aren’t charged and remain in the `Source​` object. If you want to use these funds to fulfill your invoice, you have a few options:\n\n*   **Overpayment**—If a user sends more funds than the invoice requests, Stripe automatically marks the invoice as paid, using the funds that match the open invoice. The remaining funds stay in the `Source` receiver. You can manually apply these funds to an invoice. If you have multiple matching open invoices, Stripe applies the funds to the oldest invoice.\n*   **Underpayment**—In your [Subscription and emails settings](https://dashboard.stripe.com/settings/billing/automatic), you can specify rules around underpayment in the **Partial payments** section. You can specify that within a certain margin of error, Stripe auto-reconciles invoices and credits the difference.\n\nA typical scenario for underpayment might be that a customer’s bank takes funds from the total amount sent. For example, ​​if the customer sends 100 USD to pay their 100 USD invoice, the customer’s bank might take 20 USD, which leaves you with 80 USD. If this difference (which is usually within 20 USD) is acceptable, you can ​​minimize manual effort by specifying this margin ahead of time.\n\nFor any other exceptions:\n\n*   ​If the receiver has enough money to pay your invoice, you can claim those funds in the Dashboard by clicking the **Charge customer** button on the invoice, or by calling the [Pay invoice](https://docs.stripe.com/api#pay_invoice) endpoint and specifying the ACH credit transfer object as the source.\n*   ​​If the funds to pay the invoice are insufficient and you don’t forgive the difference, you can ask your customer to send the remaining amount. You can also void the old invoice, open a new one for the lesser amount, and immediately click **Charge customer** on it.\n\nIf your customer has an ACH credit transfer source with sufficient funds, or a credit card or bank account on file, you can use those sources to pay the invoice by calling the [Pay invoice](https://docs.stripe.com/api#pay_invoice) endpoint with the source you want to use.\n\n## Refund payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund ACH credit transfer and check payments through either the [Dashboard](https://dashboard.stripe.com/payments) or the [API](https://docs.stripe.com/api#create_refund). However, the customer must specify the account to return the funds to. Stripe automatically contacts the customer at the email address provided. As soon as the customer provides us with their account information, we process the refund automatically.\n\nThe initial status of the refund is `pending`. If the refund fails, ​​you’ll receive the `charge.refund.updated​` event, and the status of the refund transitions to `failed`. This means that ​​we couldn’t process the refund, and you must return the funds to your customer outside of Stripe. This is a rare occurrence, which can happen if the refund is sent to an account that has been frozen. Refunds that have been completed have a `succeeded` status.\n\n## Test payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf ​​you’re in test mode, you can simulate transferring money into the receiver by updating the owner email on the source to `amount_XXXX@any_domain.com`, where `XXXX` is the amount of money you want to simulate transferring. ​​The payment won’t be associated with the invoice unless Stripe has frozen the invoice from editing. This happens either one hour after [webhooks](https://docs.stripe.com/webhooks \"webhook\") have been delivered, or when you’ve sent the customer an email for the invoice. In the Dashboard, you can immediately send an email by clicking the invoice’s **Send invoice** button.\n\n`curl https://api.stripe.com/v1/sources/src_19Q3AILlRB0eXbMt81RVDnM9 \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode \"owner[email]\"=\"amount_1000@example.com\"`\n\nA few moments after the update request, you can retrieve the `receiver` parameter:\n\n`curl https://api.stripe.com/v1/sources/src_19Q3AILlRB0eXbMt81RVDnM9 \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nIf the update request succeeded, the `receiver` attribute shows the funds:\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\": \"src_19Q3AILlRB0eXbMt81RVDnM9\",       \"object\": \"source\",       \"amount\": null,       \"client_secret\": \"src_client_secret_Z0zPIgnR0BVafiMLaJcxI3HS\",       \"created\": 1481585102,       \"currency\": \"usd\",       \"customer\": \"cus_4fdAW5ftNQow1a\",       \"flow\": \"receiver\",       \"livemode\": false,       \"metadata\": {},       \"owner\": {         \"address\": null,         \"email\": \"amount_1000@test.com\",         \"name\": null,         \"phone\": null,         \"verified_address\": null,`\n\nIn this instance, the customer’s open invoice (of the same amount) transitions to paid. It has a corresponding payment object that displays the details of the payment.",
  "title": "Automatic reconciliation | Stripe Documentation",
  "description": "Let Stripe handle the cash reconciliation for credit transfer payment methods.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/no-code/cart-recovery-emails",
  "markdown": "# Cart Recovery Emails | Stripe DocumentationThe Stripe Docs logo\n\n## Cart Recovery EmailsBeta\n\n## Automatically send emails to remind customers to complete their purchase.\n\nCustomers might leave a Payment Link or Checkout session before completing their purchase—also known as [cart abandonment](https://docs.stripe.com/payments/checkout/compliant-promotional-emails). Enable no-code automated cart recovery emails, directly from the Dashboard, to email customers to complete their purchase and boost your revenue and conversion.\n\nCart Recovery Emails is currently in invite only beta for US businesses. To request early access for your Stripe account, sign up [here](https://forms.gle/wNkyKBSirJj6GFXv6).\n\n### Available in Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you don’t have a Stripe account, [sign up now](https://dashboard.stripe.com/register/payment_links).\n\nStripe sends Cart Recovery Emails from the marketing email domain (marketing@marketing.stripe.com) but we encourage you to onboard your own [Custom Email Domain](https://dashboard.stripe.com/settings/emails). This allows customers to receive these emails from your own domain resulting in better deliverability and conversion rates.\n\n![sample email](https://b.stripecdn.com/docs-statics-srv/assets/cart-recovery-email.fad5422a229cebffff9984b45ca62974.png)\n\nSample cart recovery email\n\n1.  Go to your Stripe Dashboard.\n2.  Navigate to Settings and click [Checkout and Payment Links](https://dashboard.stripe.com/settings/checkout#cart-recovery-emails). You can see and send a preview of the cart recovery email there and customize it if necessary.\n    \n    ![cart recovery email settings](https://b.stripecdn.com/docs-statics-srv/assets/checkout-settings-cart-recovery.2d64419f339e7c71d5f115b1d747279b.png)\n    \n3.  Review and, if acceptable, accept the Cart Recovery Emails terms and conditions.\n4.  (Optional) Configure a custom reply-to address; this allows you to receive replies from customers. The default address is no-reply@stripe.com, and customer replies aren’t sent to you.\n\nTo send cart recovery emails, you need to [collect consent from customers](https://docs.stripe.com/payments/checkout/promotional-emails-consent). Depending on how you create your Payment Link or Checkout session, you might need to take additional actions.\n\n|     | Additional actions |\n| --- | --- |\n| Payment Link created in the Dashboard (No-code) | No additional action is required. `consent_collection` is automatically set and your customers receive recovery emails. You’ll also receive events if you’ve configured a webhook endpoint. |\n| Payment Link created with the API | Pass [“consent\\_collection\\[promotions\\]”=auto](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-consent_collection-promotions) when you create the Payment Link. |\n| Checkout created with the API | Pass [“consent\\_collection\\[promotions\\]”=auto](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-consent_collection-promotions) when you create the Checkout session. |\n\nAfter `consent_collection` is set, the customer sees a checkbox below the email address field on the checkout page asking them to consent to receiving promotional emails.\n\n## Sending Cart Recovery Emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEmails are automatically sent on your behalf to the customer when the checkout session expires (defaults to 24 hours). Checkout sessions created with the API can change this using the `expires_at` field. The following requirements must also be satisfied:\n\n*   The checkout session isn’t testmode.\n*   The customer consented to receiving promotional emails on the checkout page and provided a complete email address.\n*   The customer doesn’t have a later checkout session with you. For example, if the customer created checkout sessions A and B (in that order) and both expire, only B will have a recovery email sent. If B had been completed successfully, no emails would be sent.\n\n## Finding recovered payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe display a `Recovered` badge on the [Payment](https://dashboard.stripe.com/payments) details page in the Dashboard if the payment is recovered using a cart recovery email.\n\n![recovered payment](https://b.stripecdn.com/docs-statics-srv/assets/checkout-recovered-badge.d768294772fece45b5015a50cee45245.png)\n\n## Recover abandoned carts using the API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re a developer and want to further customize your cart recovery emails, consider [recovering abandoned carts using the API](https://docs.stripe.com/payments/checkout/abandoned-carts).\n\nBecause your business might use various platforms to send promotional emails, make sure that you synchronize these emails across all systems when customers subscribe or unsubscribe to them.\n\nIn the Stripe Dashboard, you can synchronize recipient promotional subscriptions with other systems:\n\n*   Download a CSV file containing the promotional email subscriptions for each email address that Stripe has ever collected promotional consent from.\n*   Upload CSV files containing updated promotional subscription data per email address, which updates the subscription statuses that Stripe has on record for each recipient.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sync-subscriptions-settings.fb75370f685c42b1197be4dd4b320e24.png)\n\nSync subscriptions settings section\n\n### Download recipient promotional email subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo download the subscriptions, go to the [Email settings page](https://dashboard.stripe.com/settings/emails) in the Dashboard and click **Download customer marketing email subscriptions**.\n\nThis initiates a download of a CSV file containing the promotional email subscription statuses of all email addresses Stripe has a subscription status for. It also includes the date when that change was made.\n\n*   Email address\n*   Subscription status\n    *   Either `Subscribed` or `Unsubscribed`\n*   Updated at\n    *   A date and time, in UTC, which conveys when the update time\n\n#### Sample CSV ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Email address | Subscription status | Updated at |\n| --- | --- | --- |\n| example@gmail.com | Subscribed | 2023-10-23T20:58:02+00:00 |\n| jonathan@hotmail.com | Unsubscribed | 2023-10-23T20:58:02+00:00 |\n\n### Upload promotional email subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo synchronize Stripe’s subscription status with other systems, you can upload subscription statuses per email address.\n\nIn the [Email settings page](https://dashboard.stripe.com/settings/emails) in the Dashboard, you can upload a CSV file containing subscription statuses per email address. You can also include a date field for the **updated at** status to Stripe’s system. If a date field isn’t specified, the system defaults to the uploaded status.\n\n*   Email address\n*   Subscription status\n    *   Either `Subscribed` or `Unsubscribed`\n*   Updated at (optional)\n    *   Date and time in ISO 8601 format or Unix timestamp.\n\n#### Sample CSV ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Email address | Subscription status | Updated at |\n| --- | --- | --- |\n| adrian@gmail.com | Subscribed | 2023-10-23T20:58:02+00:00 |\n| jonathan@hotmail.com | Unsubscribed |     |\n| example@gmail.com | Subscribed | 1698094682 |\n\n## View marketing email subscription for a customer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can view the marketing subscription for a customer on the [Customers page](https://dashboard.stripe.com/customers) in the Dashboard.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/customer-detail-page-marketing-prefs.030fda62a655721b1a5371bbc450876e.png)\n\nMarketing email preferences in customer details page\n\nThis table describes the customer’s overall subscription, as well as their granular marketing email preferences.",
  "title": "Cart Recovery Emails | Stripe Documentation",
  "description": "Automatically send emails to remind customers to complete their purchase.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/billing-cycle",
  "markdown": "# Setting the subscription billing cycle date\n\n## Learn how to set the billing date for subscriptions.\n\nA subscription’s billing cycle depends on two factors:\n\n*   The recurring interval of its [price](https://docs.stripe.com/products-prices/overview) or prices, such as monthly, yearly, weekly, and so on.\n*   The [billing cycle anchor](https://docs.stripe.com/api/subscriptions/object#subscription_object-billing_cycle_anchor) is the reference point that aligns future billing cycle dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals. The default value is either the subscription creation date or the trial end date (if you’re using a trial period). You can also explicitly set this value at the time you create the subscription.\n\n#### Note\n\nBilling cycle anchors are UNIX timestamps in seconds from the current epoch.\n\n### Examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   A monthly subscription with a billing cycle anchor date of September 2 always bills on the 2nd day of the month.\n*   A monthly subscription with a billing cycle anchor date of January 31 bills the last day of the month closest to the anchor date, so February 28 (or February 29 in a leap year), then March 31, April 30, and so on.\n*   A weekly subscription with a billing cycle anchor date of Friday, June 3 bills every Friday thereafter.\n\nFull billing periods start on the first full [invoice](https://docs.stripe.com/api/invoices \"invoices\") date, which is often the same as the billing cycle anchor and is always interval-aligned with it.\n\n## Specify the billing cycle anchor for new subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThere are two ways to set the billing cycle anchor on new subscriptions:\n\n*   Use `billing_cycle_anchor_config` to calculate the timestamp for you (monthly or yearly subscriptions only).\n*   Use `billing_cycle_anchor` to accept the timestamp directly.\n\nIf you’re creating a monthly or yearly subscription, we recommend using the `billing_cycle_anchor_config` parameter because it automatically factors in short months and leap years for you. If you’re creating a daily or weekly subscription, or if you prefer to set the cycle date of your subscription using a timestamp, use the `billing_cycle_anchor` parameter directly.\n\n### Use `billing_cycle_anchor_config`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create an integration with monthly and yearly subscriptions, use `billing_cycle_anchor_config` on [create subscription](https://docs.stripe.com/api#create_subscription) to specify the day of the month on which to anchor.\n\nSet `day_of_month` to `31` to create a monthly subscription that cycles at the end of the month, even in months with less than 31 days. If a month has less than 31 days, the subscription cycles on the last day of that month.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"=  {{PRICE_ID}}   \\  -d \"billing_cycle_anchor_config[day_of_month]\"=31`\n\nYou can also specify `month` to control the month of year for the anchor on multi-month and yearly subscriptions.\n\nTo cycle your yearly subscriptions on the first of July, create a yearly subscription with a `month` of `7` and `day_of_month` of `1`.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"=  {{PRICE_ID}}   \\  -d \"billing_cycle_anchor_config[month]\"=7 \\  -d \"billing_cycle_anchor_config[day_of_month]\"=1`\n\nTo precisely align billing periods with another subscription, provide the same `day_of_month` as the original as well as the same `hour`, `minute`, and `second`. If you omit the `hour`, `minute`, and `second` parameters, the values derive from the time of subscription creation.\n\nFor example, if you have an existing monthly subscription with a `billing_cycle_anchor` timestamp that contains the day of the month, hour, minute, and second of 15, 12, 30, and 0, you can align a new monthly subscription with it. To do this, set `day_of_month`, `hour`, `minute`, and `second` to match those same values, respectively.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"=  {{PRICE_ID}}   \\  -d \"billing_cycle_anchor_config[day_of_month]\"=15 \\  -d \"billing_cycle_anchor_config[hour]\"=12 \\  -d \"billing_cycle_anchor_config[minute]\"=30 \\  -d \"billing_cycle_anchor_config[second]\"=0`\n\nIf you use `billing_cycle_anchor_config`, it might result in a `billing_cycle_anchor` that’s more than one billing period in the future. However, the date for the first full invoice always falls within one billing period from the creation of the subscription or the ending of a free trial.\n\nFor example, assume that you create a two-month interval subscription in February and you cycle it at the end of every month by setting `day_of_month` to `31`. The next month that has 31 days on two-month intervals from February is August, which results in a billing cycle anchor on August 31. However, the first full invoice date for this subscription still occurs in February. There’s an initial, prorated period from subscription creation until February 28 (or 29 during a leap year), followed by a full two-month billing period.\n\n### Use `billing_cycle_anchor` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create a subscription with an explicit billing cycle anchor using the Subscriptions API or Checkout.\n\nCall [create subscription](https://docs.stripe.com/api#create_subscription), setting a timestamp for `billing_cycle_anchor`.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"items[0][price]\"=  {{PRICE_ID}}   \\  -d billing_cycle_anchor=1611008505`\n\n### Configure proration behavior![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegardless of which API parameter you use, Stripe automatically creates a prorated invoice to bill for the period between the subscription creation date and the first full invoice date.\n\nIf you don’t want to immediately charge a customer for the period between the subscription creation and the first full invoice date, either:\n\n*   [Disable the proration](https://docs.stripe.com/billing/subscriptions/prorations#disable-prorations) by setting `proration_behavior` to `none`, making the initial period up to the first full invoice date free. This action doesn’t generate an invoice at all until the first billing cycle.\n*   [Combine a trial with the billing\\_cycle\\_anchor](https://docs.stripe.com/billing/subscriptions/trials#combine-trial-anchor) by setting `trial_end` to a timestamp representing the date when the free trial ends. Depending on the duration of the free trial and the number of days until the first full invoice date, this option might result in a prorated invoice following the trial period. For example, a free trial is 7 days and the billing cycle is monthly on the 1st. If the customer subscribes on the 15th, we generate a prorated invoice on the 22nd for the period between the 22nd and the 1st, then invoice for the full amount on the 1st of each month thereafter. If a customer subscribes on the 28th, the free trial extends past the 1st, generating a prorated invoice until the next month.\n\n## Change the billing cycle on pre-existing subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [Subscriptions API](https://docs.stripe.com/api/subscriptions/update) or [Dashboard](https://dashboard.stripe.com/subscriptions) to change the billing date of an existing subscription through one of the following options:\n\n*   Reset the billing cycle anchor to the current time.\n*   Add a [free trial](https://docs.stripe.com/billing/subscriptions/trials) to automatically set the anchor date to the end of the trial. Trials typically start when you create a subscription, but you can also apply them to existing subscriptions, allowing you to credit the customer for the days left in the previous cycle that they already paid.\n*   If all the prices are zero-amount, adding one or more paid prices immediately resets the billing period. See the [upgrade and downgrade guide](https://docs.stripe.com/billing/subscriptions/upgrade-downgrade#handling-zero-amount-prices-and-quantities) for more details on this scenario.\n\n### Reset the billing cycle to the current time![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you reset the billing cycle, Stripe immediately sends an invoice. Enable proration to credit the customer for any days already paid in the previous period. Disabling proration might result in overcharging your customer.\n\nCall [update the subscription](https://docs.stripe.com/api#update_subscription), setting `billing_cycle_anchor` to `now` and `proration_behavior` to `create_prorations` to prevent overcharging the customer for any days they already paid in the previous cycle.\n\n`curl https://api.stripe.com/v1/subscriptions/sub_49ty4767H20z6a \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d billing_cycle_anchor=now \\  -d proration_behavior=create_prorations`\n\n### Add a trial to change the billing cycle![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAdding a non-prorated trial period to an existing subscription allows you to configure the billing cycle to be any date.\n\nTypically, if you’re using the trial period to change the billing cycle without issuing a prorated invoice, you disable proration because the length of the trial period accounts for the portion already paid from the previous billing cycle.\n\nFor example, if a customer has an active subscription set to bill next on July 23, and you introduce a trial period until August 1:\n\n*   The customer receives a 0 USD invoice on July 15.\n*   The customer isn’t billed on July 23.\n*   The customer is billed next on August 1, then on September 1, and so on.\n*   The customer already paid through July 23 in the previous cycle, so that “free” period isn’t actually free.\n*   The period between July 23 and July 31 isn’t charged.\n*   The new cycle billed on August 1 is a full cycle at the normal rate.\n\nCall [update subscription](https://docs.stripe.com/api#update_subscription), setting `trial_end` to a Unix timestamp representing the end date for the trial (also the new billing cycle anchor) and `proration_behavior` to `none`.\n\n`curl https://api.stripe.com/v1/subscriptions/sub_49ty4767H20z6a \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d trial_end=1611008505 \\  -d proration_behavior=none`\n\n## Metered billing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith [metered billing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing), the price paid by the customer varies based on consumption during the billing cycle. When changing the billing cycle results in ending a subscription interval early, you charge the customer for the usage accrued during the shortened billing cycle.\n\n### Thresholds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the regular cycle, you can configure subscriptions to bill whenever the amount due reaches a [threshold](https://docs.stripe.com/billing/subscriptions/usage-based/pricing-models#billing-thresholds).\n\nIf you have a subscription configured to invoice this way, you can set it up to reset the subscription cycle when it hits the threshold.\n\nSee [billing thresholds](https://docs.stripe.com/billing/subscriptions/usage-based/pricing-models#billing-thresholds) for more details.",
  "title": "Setting the subscription billing cycle date | Stripe Documentation",
  "description": "Learn how to set the billing date for subscriptions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/invoices",
  "markdown": "# Invoices | Stripe API Reference\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [The Invoice object](https://docs.stripe.com/api/invoices/object)\n\n### Attributes\n\n*   Unique identifier for the object. This property is always present unless the invoice is an upcoming invoice. See [Retrieve an upcoming invoice](https://stripe.com/docs/api/invoices/upcoming) for more details.\n    \n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n*   #### \n    \n    chargenullable stringExpandable\n    \n    ID of the latest charge generated for this invoice, if any.\n    \n*   Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `charge_automatically`<br><br>Attempt payment using the default source attached to the customer. |\n    | `send_invoice`<br><br>Email payment instructions to the customer. |\n    \n\n*   The ID of the customer who will be billed.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   #### \n    \n    hosted\\_invoice\\_urlnullable string\n    \n    The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.\n    \n*   The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent.\n    \n*   End of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.\n    \n*   Start of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.\n    \n*   The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://docs.stripe.com/billing/invoices/workflow#workflow-overview)\n    \n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n    The subscription that this invoice was prepared for, if any.\n    \n*   Total after discounts and taxes.\n    \n\n### More attributes\n\n*   #### \n    \n    account\\_countrynullable string\n    \n*   #### \n    \n    account\\_namenullable string\n    \n*   #### \n    \n    account\\_tax\\_idsnullable array of stringsExpandable\n    \n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n\n*   #### \n    \n    billing\\_reasonnullable enum\n    \n\n*   #### \n    \n    custom\\_fieldsnullable array of objects\n    \n*   #### \n    \n    customer\\_addressnullable object\n    \n*   #### \n    \n    customer\\_emailnullable string\n    \n*   #### \n    \n    customer\\_namenullable string\n    \n*   #### \n    \n    customer\\_phonenullable string\n    \n*   #### \n    \n    customer\\_shippingnullable object\n    \n*   #### \n    \n    customer\\_tax\\_exemptnullable enum\n    \n*   #### \n    \n    customer\\_tax\\_idsnullable array of objects\n    \n*   #### \n    \n    default\\_payment\\_methodnullable stringExpandable\n    \n*   #### \n    \n    default\\_sourcenullable stringExpandable\n    \n*   #### \n    \n    default\\_tax\\_ratesarray of objects\n    \n*   #### \n    \n    discountnullable objectDeprecated\n    \n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    due\\_datenullable timestamp\n    \n*   #### \n    \n    effective\\_atnullable timestamp\n    \n*   #### \n    \n    ending\\_balancenullable integer\n    \n\n*   #### \n    \n    from\\_invoicenullable object\n    \n*   #### \n    \n    invoice\\_pdfnullable string\n    \n\n*   #### \n    \n    last\\_finalization\\_errornullable object\n    \n*   #### \n    \n    latest\\_revisionnullable stringExpandable\n    \n\n*   #### \n    \n    next\\_payment\\_attemptnullable timestamp\n    \n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n\n*   #### \n    \n    post\\_payment\\_credit\\_notes\\_amountinteger\n    \n*   #### \n    \n    pre\\_payment\\_credit\\_notes\\_amountinteger\n    \n*   #### \n    \n    quotenullable stringExpandable\n    \n*   #### \n    \n    receipt\\_numbernullable string\n    \n\n*   #### \n    \n    shipping\\_costnullable object\n    \n*   #### \n    \n    shipping\\_detailsnullable object\n    \n\n*   #### \n    \n    statement\\_descriptornullable string\n    \n\n*   #### \n    \n    subscription\\_detailsnullable object\n    \n*   #### \n    \n    subscription\\_proration\\_datenullable integer\n    \n\n*   #### \n    \n    subtotal\\_excluding\\_taxnullable integer\n    \n\n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n*   #### \n    \n    threshold\\_reasonnullable object\n    \n*   #### \n    \n    total\\_discount\\_amountsnullable array of objects\n    \n*   #### \n    \n    total\\_excluding\\_taxnullable integer\n    \n*   #### \n    \n    total\\_tax\\_amountsarray of objects\n    \n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n*   #### \n    \n    webhooks\\_delivered\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [The Invoice Line Item object](https://docs.stripe.com/api/invoices/line_item)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The amount, in cents.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   The ID of the invoice that contains this line item.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription`, `metadata` reflects the current metadata from the subscription associated with the line item, unless the invoice line was directly updated with different metadata after creation.\n    \n*   The period this `line_item` covers. For subscription line items, this is the subscription period. For prorations, this starts when the proration was calculated, and ends at the period end of the subscription. For invoice items, this is the time at which the invoice item was created or the period of the item. If you have [Stripe Revenue Recognition](https://docs.stripe.com/revenue-recognition) enabled, the period will be used to recognize and defer revenue. See the [Revenue Recognition documentation](https://docs.stripe.com/revenue-recognition/methodology/subscriptions-and-invoicing) for details.\n    \n*   The price of the line item.\n    \n*   Whether this is a proration.\n    \n*   The quantity of the subscription, if the line item is a subscription or a proration.\n    \n*   A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.\n    \n\n### More attributes\n\n*   #### \n    \n    amount\\_excluding\\_taxnullable integer\n    \n*   #### \n    \n    discount\\_amountsnullable array of objects\n    \n\n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    invoice\\_itemnullable stringExpandable\n    \n\n*   #### \n    \n    proration\\_detailsnullable object\n    \n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n*   #### \n    \n    subscription\\_itemnullable stringExpandable\n    \n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    tax\\_ratesarray of objects\n    \n*   #### \n    \n    unit\\_amount\\_excluding\\_taxnullable decimal string\n    \n\nThe Invoice Line Item object\n\n```\n{  \"id\": \"il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"object\": \"line_item\",  \"amount\": 1000,  \"amount_excluding_tax\": 1000,  \"currency\": \"usd\",  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amounts\": [],  \"discountable\": true,  \"discounts\": [],  \"invoice_item\": \"ii_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1696975413,    \"start\": 1696975413  },  \"price\": {    \"id\": \"price_1NzlYfGgdF1VjufL0cVjLJVI\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1696965933,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_OnMHDH6VBmYlTr\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"proration\": false,  \"proration_details\": {    \"credited_items\": null  },  \"quantity\": 1,  \"subscription\": null,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoiceitem\",  \"unit_amount_excluding_tax\": \"1000\"}\n```\n\n## [Create an invoice](https://docs.stripe.com/api/invoices/create)\n\nThis endpoint creates a draft invoice for a given customer. The invoice remains a draft until you [finalize](#finalize_invoice) the invoice, which allows you to [pay](#pay_invoice) or [send](#send_invoice) the invoice to your customers.\n\n### Parameters\n\n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n*   Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `charge_automatically` |\n    | `send_invoice` |\n    \n*   The ID of the customer who will be billed.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The ID of the subscription to invoice, if any. If set, the created invoice will only include pending invoice items for that subscription. The subscription’s billing cycle and regular subscription events won’t be affected.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    pending\\_invoice\\_items\\_behaviorenum\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object. Raises [an error](#errors) if the customer ID provided is invalid.\n\n```\ncurl https://api.stripe.com/v1/invoices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Create a preview invoice](https://docs.stripe.com/api/invoices/create_preview)\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_detailsobject\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nPOST /v1/invoices/create\\_preview\n\n```\ncurl https://api.stripe.com/v1/invoices/create_preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"upcoming_in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```",
  "title": "Invoices | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/dashboard/credit-notes",
  "markdown": "# Issue credit notes | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Dashboard to adjust or refund finalized invoices with credit notes.\n\nCredit notes are documents that decrease the amount of an `open` or `paid` [invoice](https://docs.stripe.com/api/invoices \"invoices\"). The difference between issuing a credit note and adjusting the amount of an invoice by [revising it](https://docs.stripe.com/invoicing/invoice-edits) is that a credit note doesn’t void and replace the original invoice. Some example scenarios where you might use credit notes include:\n\n*   **You accidentally overbilled a customer**—You accidentally charged your customer 110 USD instead of 100 USD because of a data entry mistake. Use a credit note to give your customer a 10 USD credit for the overcharge.\n*   **You’re short on inventory**—You billed your customer for five items, but when it’s time to ship them you realize you only have three items left in stock. Use a credit note to refund your customer for the two items they didn’t receive.\n*   **Discounts**—You and your customer negotiate a discount on an invoice. Instead of voiding the invoice and issuing a new one, you can use a credit note to adjust the amount owed on the existing invoice.\n\nA credit note reduces the amount due without recording any payment. However, if a credit note reduces the balance of an `open` invoice to 0, the invoice status changes to `paid`. For information on invoice statuses, see the [Invoicing overview](https://docs.stripe.com/invoicing/overview#invoice-statuses).\n\n#### Note\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you issue a credit note for an `open` invoice, it decreases the amount due on the invoice. When you issue a credit note for a `paid` invoice, you credit the customer’s account balance or give them a refund outside of Stripe.\n\nThe sum of all credit notes issued for an invoice can’t exceed the ​​total amount of the invoice. For a `paid` invoice, the sum of the refund, credit, and out-of-band payment amounts must equal the credit note total.\n\nWhen you create a credit note, you can apply credit amounts in three ways:\n\n*   Discount a fixed amount from an invoice line item.\n*   Discount a quantity from an invoice line item. The total discount is the discount quantity times the unit price of that line item.\n*   Apply a discount to the total invoice amount by adding a custom discount line item with a description, quantity, and unit price. The total discount is the quantity times the unit price.\n\nWe recommend discounting invoice line items when possible, since it associates each credit with a line item. Adding a custom discount line item can make reporting and tracking difficult, because the credit isn’t associated with a real invoice line item.\n\n#### Note\n\nYou can’t combine discount types on an invoice line item. For example, if you discount a line item quantity, then a future credit note can only discount that line item by quantity, not by amount. If you discount a line item amount, then a future credit note can only discount that line item by amount, not by quantity.\n\n## Create a credit note ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create credit notes for open or paid invoices.\n\n1.  Open the [Invoices page](https://dashboard.stripe.com/test/invoices) in the Dashboard.\n    \n2.  Select the open or paid invoice you want to add a credit note to.\n    \n3.  Click **More** and select **Issue a credit note**.\n    \n4.  Select a reason for the credit note.\n    \n5.  (_Optional_) Perform the following actions:\n    \n    *   Edit line item credit quantities or amounts.\n        \n    *   Click **Add item** to add a custom line item.\n        \n    *   Click **Set item tax** to select a tax rate to use for credit purposes.\n        \n6.  If the invoice is `paid`, choose whether to refund the customer’s card, credit their balance, or refund the amount outside of Stripe (for example, cash).\n    \n7.  Click **Issue credit note** to submit the credit note.\n    \n\n#### Note\n\nOpen invoices can’t have a credit note with a pending [payment\\_intent](https://docs.stripe.com/api/invoices/object#invoice_object-payment_intent).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/credit-note-dashboard.d9f67171b43e5ad618bc6d153b86286a.png)\n\nIssue a credit note in the Dashboard\n\n## Credit balances and discounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you issue a credit note on an invoice with an applied [customer credit balance](https://docs.stripe.com/invoicing/customer/balance), funds are sometimes credited to the credit balance instead of the initial payment method. For example, if a credit balance of 150 USD is applied to an invoice for 200 USD, then the finalized invoice is for 50 USD. If you issue a credit note for 50 USD or less, the funds are refunded to the customer’s payment method. Anything above 50 USD is added to the customer’s credit balance and is applied to the next invoice.\n\n[Discounts](https://docs.stripe.com/billing/taxes/tax-rates#discounts) apply proportionally to all of the line items on an invoice. For example, applying a 50% discount to an invoice with 10 line items at 10 USD each changes the amount of each line item to 5 USD. If you then apply a credit note for one line item, it reduces the invoice amount by 5 USD.\n\nFixed-amount discounts work the same way. If you apply a 10 USD discount to an invoice with 10 line items at 10 USD, each line item is 10% of the sum amount and is discounted by 10% \\* 10 USD = 1 USD. The amount of each line item becomes 9 USD. If you then apply a credit note for one line item, it reduces the invoice amount by 9 USD.\n\nIf you want to credit the original line item amount, you can make up the difference by adding a custom discount line item to the credit note. For example, if a discount reduced a line item’s credit amount from 10 USD to 9 USD, you can add a custom discount line item for 1 USD.\n\n## Voiding credit notes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can void a credit note only if it’s on an open invoice. Voiding a credit note reverses its adjustment, increasing the amount due on the invoice by the amount of the credit note.\n\nTo void a credit note in the Dashboard, click the overflow menu () at the top right of the credit note, then select **Void credit note**.\n\n## Crediting negative line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can also credit negative invoice line items.\n\nThe following restrictions apply:\n\n*   The total amount of the credit note must remain positive.\n*   The total amount credited to a negative line item must be negative.\n*   The total amount credited to a negative line item can’t be less than the line item amount.\n\nYou also can’t credit a negative amount on a custom credit note line item. We only support negative amounts on credit note line items that are tied to invoice line items.",
  "title": "Issue credit notes | Stripe Documentation",
  "description": "Use the Dashboard to adjust or refund finalized invoices with credit notes.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-cli/keys",
  "markdown": "# Stripe CLI keys and permissions\n\n## Learn about default Stripe CLI keys generated when you run \"stripe login\" and their permissions.\n\nBy default, you can use your account’s _secret keys_ to perform any API request without restriction. When you run the `stripe login` command to authenticate to the Stripe CLI, the CLI generates a set of _restricted keys_ for your account (one test mode, one live mode) that’re valid for 90 days.\n\n## About restricted keys![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUnlike an API secret key, a _restricted_ key generated by the Stripe CLI has restrictions on the API requests that it can perform. You can create new restricted keys in the Dashboard with different restrictions, or specify any API key using the `--api-key` flag.\n\n### Where keys are stored![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe CLI stores the keys in the **Restricted keys** section on the [API Keys](https://dashboard.stripe.com/apikeys) page and your local machine in `~/.config/stripe/config.toml`.\n\n### Where to find permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse these steps to view the permissions associated with your restricted key:\n\n1.  Open the [API keys](https://dashboard.stripe.com/apikeys) page.\n2.  Scroll down to the **Restricted keys** section.\n3.  Hover over the _info_ () icon next to your **CLI key** name to view permissions.\n\n## Specify an API key![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Use the `--api-key` flag to specify your API secret key inline each time you send a request.\n\n`stripe login --api-key` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`",
  "title": "Stripe CLI keys and permissions | Stripe Documentation",
  "description": "Learn about default Stripe CLI keys generated when you run \"stripe login\" and their permissions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/update-payment-method",
  "markdown": "# Allow customers to update their subscription payment methods\n\n## Give your customers links they can use to update subscription payment details.\n\nThe Dashboard provides sharable links that allow customers to update their payment method for an automatically billed subscription.\n\nTo share a link, either:\n\n1.  Go to the **Subscription details** page for the customer’s subscription.\n2.  Click the **Actions** menu.\n3.  Select **Share payment update link**.\n\nOr:\n\n1.  Find the subscription on [**Dashboard** > **Customers**](https://dashboard.stripe.com/customers) > **Customer details** or [**Dashboard** > **Billing** > **Subscriptions**](https://dashboard.stripe.com/subscriptions).\n2.  Click the overflow menu ().\n3.  Select **Share payment update link**.\n\nA modal opens that allows you to:\n\n*   Email a link\n*   Copy a link to directly share with a customer\n*   Deactivate all existing links for this subscription\n\nThese links allow a customer to update their payment method for only the applicable subscription. The links don’t update other subscriptions or the customer’s default payment method.\n\n## Restrictions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   The subscription’s status must be `active`, `past_due`, or `trialing`. It cannot be `unpaid`.\n*   The subscription’s billing must be `auto` and charge a payment method. It cannot be `send`.\n*   This feature only supports updating card payment methods.\n*   Each link only allows a customer to update their payment details one time.\n*   If unused, a link expires after 30 days.",
  "title": "Allow customers to update their subscription payment methods | Stripe Documentation",
  "description": "Give your customers links they can use to update subscription payment details.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/checklist/go-live",
  "markdown": "# Go-live checklist | Stripe DocumentationThe Stripe Docs logo\n\n## Use this checklist to ensure a smooth transition when taking your integration live.\n\nStripe has designed its live and test modes to function as [similarly as possible](https://docs.stripe.com/keys#test-live-modes). Flipping the switch is mostly a matter of swapping your [API keys](https://docs.stripe.com/keys).\n\nIf you are a developer, or had a developer perform an integration for you, you should also consider the following items before going live. If you’re using Stripe through a connected website or a plug-in, most won’t apply.\n\n*   #### Warning\n    \n    All requests use your account API settings, unless you override the API version. The [changelog](https://docs.stripe.com/upgrades#api-versions) lists every available version. Note that by default webhook events are structured according to your account API version, unless you set an API version during [endpoint creation](https://docs.stripe.com/api/webhook_endpoints/create).\n    \n    If you’re using a strongly typed language (Go, Java, TypeScript, .NET), the server-side library pins the API version based on the library version being used. If you’re not familiar with how Stripe manages versioning, please see the [versioning docs](https://docs.stripe.com/libraries#server-side-libraries).\n    \n    To make sure everything is in sync:\n    \n    *   Upgrade to the latest API version in your [Stripe Dashboard](https://dashboard.stripe.com/developers)\n    *   For dynamic languages (Node.js, PHP, Python, Ruby): [set the API version](https://docs.stripe.com/libraries#server-side-libraries) in the server-side library\n    *   For strongly typed languages (Go, Java, TypeScript, .NET): [upgrade to the latest version](https://docs.stripe.com/libraries#server-side-libraries) of your chosen library\n*   We’ve created several [test values](https://docs.stripe.com/testing) you can use to replicate various states and responses. Beyond these options, perform your due diligence, testing your integration with:\n    \n    *   Incomplete data\n    *   Invalid data\n    *   Duplicate data (for example, retry the same request to see what happens) We also recommend you have someone else test your integration, especially if that other person isn’t a developer themselves.\n*   Review your API error handling\n    \n    Once you’ve gone live is an unfortunate time to discover you’ve not properly written your code to handle every possible [error type](https://docs.stripe.com/api#errors), including those that should “never” happen. Be certain your code is defensive, handling not just the common errors, but all possibilities.\n    \n    When testing your error handling, pay close attention to what information is shown to your users. A card being declined (that is, a `card_error`) is a different concern than an error on your backend (for example, an `invalid_request_error`).\n    \n*   Stripe logs every request made with your API keys, with these records being viewable in the [Dashboard](https://dashboard.stripe.com/logs). We recommend that you log all important data on your end, too, despite the apparent redundancy. Your own logs will be a life-saver if your server has a problem contacting Stripe or there’s an issue with your API keys—both cases would prevent us from logging your request.\n    \n    Regularly examine your logs to ensure they’re storing only the information you need and not anything of a sensitive nature (for example, credit card details or personally identifiable information).\n    \n*   Ensure you're not relying on test mode objects\n    \n    Stripe objects created in test mode—such as plans, coupons, products, and SKUs—are not usable in live mode. This prevents your test data from being inadvertently used in your production code. When recreating necessary objects in live mode, be certain to use the same ID values (for example, the same plan _ID_, not the same _name_) to guarantee your code will continue to work without issue.\n    \n*   Ensure you've registered your production webhooks\n    \n    Your Stripe account can have both test and live [webhook endpoints](https://docs.stripe.com/webhooks). If you’re using webhooks, make sure you’ve defined live endpoints in your Stripe account. Then confirm that the live endpoint functions exactly the same as your test endpoint.\n    \n    While examining your webhooks status, also take a moment to check that your production endpoint:\n    \n    *   Gracefully handles delayed webhook notifications\n    *   Gracefully handles duplicate webhook notifications\n    *   Does not require event notifications to occur in a specific order\n*   Subscribe to the API announcements mailing list\n    \n    We recommend all developers subscribe to our [API updates mailing list](https://groups.google.com/a/lists.stripe.com/forum/#!forum/api-announce) to keep up with new features as we release them.\n    \n*   Change and secure your API keys\n    \n    As a security measure, we recommend [rolling your API keys](https://docs.stripe.com/keys#safe-keys) on a regular basis, and also just before going live. This is in case they have been saved somewhere outside of your codebase during development. Make sure your workflow doesn’t result in your API keys being represented or stored in multiple places—this leads to bugs—or even ending up in your version control software.",
  "title": "Go-live checklist | Stripe Documentation",
  "description": "Use this checklist to ensure a smooth transition when taking your integration live.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/api-request",
  "markdown": "# Send your first Stripe API request\n\nAll accounts have a total of four API keys by default—two for test mode and two for live mode:\n\n*   **Test mode secret key**: Use this key to authenticate requests on your server when in test mode. By default, you can use this key to perform any API request without restriction.\n*   **Test mode publishable key**: Use this key for testing purposes in your web or mobile app’s client-side code.\n*   **Live mode secret key**: Use this key to authenticate requests on your server when in live mode. By default, you can use this key to perform any API request without restriction.\n*   **Live mode publishable key**: Use this key, when you’re ready to launch your app, in your web or mobile app’s client-side code.\n\n#### Testing and development\n\nUse only your test API keys for testing and development. This ensures that you don’t accidentally modify your live customers or charges.\n\nYou can find your secret and publishable keys in [API keys](https://dashboard.stripe.com/test/apikeys). When you’re logged in, Stripe’s documentation automatically populates code examples with your test mode API keys (only you can see these values). If you’re not logged in, our code examples include randomly generated API keys. You can replace them with your own test keys or [log in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fget-started%2Fapi-request) to see the code examples populated with your test API keys. If you can’t view your API keys, ask the owner of your Stripe account to add you to their [team](https://docs.stripe.com/get-started/account/teams), with the proper permissions.\n\nThe following table shows randomly generated examples of secret and publishable test API keys:\n\n#### Restricted API keys\n\nThe Dashboard can also generate restricted API keys, enabling customizable and limited access to the API. However, Stripe doesn’t offer any restricted keys by default.\n\n| Type | Value | When to use |\n| --- | --- | --- |\n| Secret | `sk_test_4eC39HqLyjWDarjtT1zdp7dc` | **On the server side**: Must be secret and stored securely in your web or mobile app’s server-side code (such as in an environment variable or credential management system) to call Stripe APIs. Don’t expose this key on a website or embed it in a mobile application. |\n| Publishable | `pk_test_TYooMQauvdEDq54NiTphI7jx` | **On the client side**: Can be publicly accessible in your web or mobile app’s client-side code (such as checkout.js) to securely collect payment information, such as with [Stripe Elements](https://docs.stripe.com/payments/elements). By default, [Stripe Checkout](https://docs.stripe.com/payments/checkout) securely collects payment information. |\n| Restricted | A string that starts with `rk_test_` | **In microservices**: Must be secret and stored securely in your microservice code to call Stripe APIs. Don’t expose this key on a website or embed it in a mobile application. |",
  "title": "Send your first Stripe API request | Stripe Documentation",
  "description": "Get started with the Stripe API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/products/create",
  "markdown": "# Create a product | Stripe API Reference\n\nCreates a new product object.\n\n### Parameters\n\n*   The product’s name, meant to be displayable to the customer.\n    \n*   Whether the product is currently available for purchase. Defaults to `true`.\n    \n*   The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n    \n*   An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    marketing\\_featuresarray of objects\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns a product object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Gold Plan\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [Update a product](https://docs.stripe.com/api/products/update)\n\nUpdates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Whether the product is available for purchase.\n    \n*   The ID of the [Price](https://docs.stripe.com/api/prices) object that is the default price for this product.\n    \n*   The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The product’s name, meant to be displayable to the customer.\n    \n\n### More parameters\n\n*   #### \n    \n    marketing\\_featuresarray of objects\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns the product object if the update succeeded.\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [Retrieve a product](https://docs.stripe.com/api/products/retrieve)\n\nRetrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a product object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [List all products](https://docs.stripe.com/api/products/list)\n\nReturns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.\n\n### Parameters\n\n*   Only return products that are active or inactive (e.g., pass `false` to list all inactive products).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products, starting after product `starting_after`. Each entry in the array is a separate product object. If no more products are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prod_NWjs8kKbJWmuuc\",      \"object\": \"product\",      \"active\": true,      \"created\": 1678833149,      \"default_price\": null,      \"description\": null,      \"images\": [],      \"features\": [],      \"livemode\": false,      \"metadata\": {},      \"name\": \"Gold Plan\",      \"package_dimensions\": null,      \"shippable\": null,      \"statement_descriptor\": null,      \"tax_code\": null,      \"unit_label\": null,      \"updated\": 1678833149,      \"url\": null    }    {...}    {...}  ],}\n```\n\n## [Delete a product](https://docs.stripe.com/api/products/delete)\n\nDelete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with `type=good` is only possible if it has no SKUs associated with it.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a deleted object on success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"deleted\": true}\n```",
  "title": "Create a product | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/prices/create",
  "markdown": "# Create a price | Stripe API Reference\n\nCreates a new price for an existing product. The price can be recurring or one-time.\n\n### Parameters\n\n*   Whether the price can be used for new purchases. Defaults to `true`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the price, hidden from customers.\n    \n*   #### \n    \n    productstringRequired unless product\\_data is provided\n    \n    The ID of the product that this price will belong to.\n    \n*   The recurring components of a price such as `interval` and `usage_type`.\n    \n*   #### \n    \n    unit\\_amountintegerRequired conditionally\n    \n    A positive integer in cents (or 0 for a free price) representing how much to charge. One of `unit_amount`, `unit_amount_decimal`, or `custom_unit_amount` is required, unless `billing_scheme=tiered`.\n    \n\n### More parameters\n\n*   #### \n    \n    custom\\_unit\\_amountobjectRequired unless unit\\_amount is provided\n    \n\n*   #### \n    \n    product\\_dataobjectRequired unless product is provided\n    \n\n*   #### \n    \n    tiersarray of objectsRequired if billing\\_scheme=tiered\n    \n*   #### \n    \n    tiers\\_modeenumRequired if billing\\_scheme=tiered\n    \n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe newly created `Price` object is returned upon success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/prices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d currency=usd \\  -d unit_amount=1000 \\  -d \"recurring[interval]\"=month \\  -d \"product_data[name]\"=\"Gold Plan\"\n```\n\n```\n{  \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",  \"object\": \"price\",  \"active\": true,  \"billing_scheme\": \"per_unit\",  \"created\": 1679431181,  \"currency\": \"usd\",  \"custom_unit_amount\": null,  \"livemode\": false,  \"lookup_key\": null,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NZKdYqrwEYx6iK\",  \"recurring\": {    \"aggregate_usage\": null,    \"interval\": \"month\",    \"interval_count\": 1,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"tax_behavior\": \"unspecified\",  \"tiers_mode\": null,  \"transform_quantity\": null,  \"type\": \"recurring\",  \"unit_amount\": 1000,  \"unit_amount_decimal\": \"1000\"}\n```\n\n## [Update a price](https://docs.stripe.com/api/prices/update)\n\nUpdates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.\n\n### Parameters\n\n*   Whether the price can be used for new purchases. Defaults to `true`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the price, hidden from customers.\n    \n\n### More parameters\n\n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n\n### Returns\n\nThe updated price object is returned upon success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/prices/price_1MoBy5LkdIwHu7ixZhnattbh \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",  \"object\": \"price\",  \"active\": true,  \"billing_scheme\": \"per_unit\",  \"created\": 1679431181,  \"currency\": \"usd\",  \"custom_unit_amount\": null,  \"livemode\": false,  \"lookup_key\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"nickname\": null,  \"product\": \"prod_NZKdYqrwEYx6iK\",  \"recurring\": {    \"aggregate_usage\": null,    \"interval\": \"month\",    \"interval_count\": 1,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"tax_behavior\": \"unspecified\",  \"tiers_mode\": null,  \"transform_quantity\": null,  \"type\": \"recurring\",  \"unit_amount\": 1000,  \"unit_amount_decimal\": \"1000\"}\n```\n\n## [Retrieve a price](https://docs.stripe.com/api/prices/retrieve)\n\nRetrieves the price with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a price if a valid price or plan ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/prices/price_1MoBy5LkdIwHu7ixZhnattbh \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",  \"object\": \"price\",  \"active\": true,  \"billing_scheme\": \"per_unit\",  \"created\": 1679431181,  \"currency\": \"usd\",  \"custom_unit_amount\": null,  \"livemode\": false,  \"lookup_key\": null,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NZKdYqrwEYx6iK\",  \"recurring\": {    \"aggregate_usage\": null,    \"interval\": \"month\",    \"interval_count\": 1,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"tax_behavior\": \"unspecified\",  \"tiers_mode\": null,  \"transform_quantity\": null,  \"type\": \"recurring\",  \"unit_amount\": 1000,  \"unit_amount_decimal\": \"1000\"}\n```\n\n## [List all prices](https://docs.stripe.com/api/prices/list)\n\nReturns a list of your active prices, excluding [inline prices](https://docs.stripe.com/products-prices/pricing-models#inline-pricing). For the list of inactive prices, set `active` to false.\n\n### Parameters\n\n*   Only return prices that are active or inactive (e.g., pass `false` to list all inactive prices).\n    \n*   Only return prices for the given currency.\n    \n*   Only return prices for the given product.\n    \n*   Only return prices of type `recurring` or `one_time`.\n    \n\n### More parameters\n\n*   #### \n    \n    lookup\\_keysarray of strings\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` prices, starting after prices `starting_after`. Each entry in the array is a separate price object. If no more prices are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/prices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/prices\",  \"has_more\": false,  \"data\": [    {      \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",      \"object\": \"price\",      \"active\": true,      \"billing_scheme\": \"per_unit\",      \"created\": 1679431181,      \"currency\": \"usd\",      \"custom_unit_amount\": null,      \"livemode\": false,      \"lookup_key\": null,      \"metadata\": {},      \"nickname\": null,      \"product\": \"prod_NZKdYqrwEYx6iK\",      \"recurring\": {        \"aggregate_usage\": null,        \"interval\": \"month\",        \"interval_count\": 1,        \"trial_period_days\": null,        \"usage_type\": \"licensed\"      },      \"tax_behavior\": \"unspecified\",      \"tiers_mode\": null,      \"transform_quantity\": null,      \"type\": \"recurring\",      \"unit_amount\": 1000,      \"unit_amount_decimal\": \"1000\"    }    {...}    {...}  ],}\n```\n\n## [Search prices](https://docs.stripe.com/api/prices/search)\n\nSearch for prices you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` prices. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/prices/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode query=\"active:'true' AND metadata['order_id']:'6735'\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/prices/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"price_1MoBy5LkdIwHu7ixZhnattbh\",      \"object\": \"price\",      \"active\": true,      \"billing_scheme\": \"per_unit\",      \"created\": 1679431181,      \"currency\": \"usd\",      \"custom_unit_amount\": null,      \"livemode\": false,      \"lookup_key\": null,      \"metadata\": {        \"order_id\": \"6735\"      },      \"nickname\": null,      \"product\": \"prod_NZKdYqrwEYx6iK\",      \"recurring\": {        \"aggregate_usage\": null,        \"interval\": \"month\",        \"interval_count\": 1,        \"trial_period_days\": null,        \"usage_type\": \"licensed\"      },      \"tax_behavior\": \"unspecified\",      \"tiers_mode\": null,      \"transform_quantity\": null,      \"type\": \"recurring\",      \"unit_amount\": 1000,      \"unit_amount_decimal\": \"1000\"    }    {...}    {...}  ],}\n```",
  "title": "Create a price | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/tokens",
  "markdown": "# Tokens | Stripe API Reference\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [The Token object](https://docs.stripe.com/api/tokens/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Hash describing the card used to make the charge.\n    \n\n### More attributes\n\n*   #### \n    \n    bank\\_accountnullable object\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n\n```\n{  \"id\": \"tok_1N3T00LkdIwHu7ixt44h1F8k\",  \"object\": \"token\",  \"card\": {    \"id\": \"card_1N3T00LkdIwHu7ixRdxpVI1Q\",    \"object\": \"card\",    \"address_city\": null,    \"address_country\": null,    \"address_line1\": null,    \"address_line1_check\": null,    \"address_line2\": null,    \"address_state\": null,    \"address_zip\": null,    \"address_zip_check\": null,    \"brand\": \"Visa\",    \"country\": \"US\",    \"cvc_check\": \"unchecked\",    \"dynamic_last4\": null,    \"exp_month\": 5,    \"exp_year\": 2024,    \"fingerprint\": \"mToisGZ01V71BCos\",    \"funding\": \"credit\",    \"last4\": \"4242\",    \"metadata\": {},    \"name\": null,    \"tokenization_method\": null,    \"wallet\": null  },  \"client_ip\": \"52.35.78.6\",  \"created\": 1683071568,  \"livemode\": false,  \"type\": \"card\",  \"used\": false}\n```\n\n## [Create an account token](https://docs.stripe.com/api/tokens/create_account)\n\nCreates a single-use token that wraps a user’s legal entity information. Use this when creating or updating a Connect account. Learn more about [account tokens](https://docs.stripe.com/connect/account-tokens).\n\nIn live mode, you can only create account tokens with your application’s publishable key. In test mode, you can only create account tokens with your secret key or publishable key.\n\n### Parameters\n\n*   Information for the account this token represents.\n    \n\n### Returns\n\nReturns the created account token if it’s successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"account[individual][first_name]\"=Jane \\  -d \"account[individual][last_name]\"=Doe \\  -d \"account[tos_shown_and_accepted]\"=true\n```\n\n```\n{  \"id\": \"ct_1BZ6xr2eZvKYlo2CsSOhuTfi\",  \"object\": \"token\",  \"client_ip\": \"104.198.25.169\",  \"created\": 1513297331,  \"livemode\": false,  \"redaction\": null,  \"type\": \"account\",  \"used\": false}\n```\n\n## [Create a bank account token](https://docs.stripe.com/api/tokens/create_bank_account)\n\nCreates a single-use token that represents a bank account’s details. You can use this token with any API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a [connected account](#accounts) where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n\n### Parameters\n\n*   The bank account this token will represent.\n    \n\n### More parameters\n\n*   #### \n    \n    customerstringConnect only\n    \n\n### Returns\n\nReturns the created bank account token if it’s successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"bank_account[country]\"=US \\  -d \"bank_account[currency]\"=usd \\  -d \"bank_account[account_holder_name]\"=\"Jenny Rosen\" \\  -d \"bank_account[account_holder_type]\"=individual \\  -d \"bank_account[routing_number]\"=110000000 \\  -d \"bank_account[account_number]\"=000123456789\n```\n\n```\n{  \"id\": \"tok_1N3T00LkdIwHu7ixt44h1F8k\",  \"object\": \"token\",  \"bank_account\": {    \"id\": \"ba_1NWScr2eZvKYlo2C8MgV5Cwn\",    \"object\": \"bank_account\",    \"account_holder_name\": \"Jenny Rosen\",    \"account_holder_type\": \"individual\",    \"account_type\": null,    \"bank_name\": \"STRIPE TEST BANK\",    \"country\": \"US\",    \"currency\": \"usd\",    \"fingerprint\": \"1JWtPxqbdX5Gamtz\",    \"last4\": \"6789\",    \"routing_number\": \"110000000\",    \"status\": \"new\"  },  \"client_ip\": null,  \"created\": 1689981645,  \"livemode\": false,  \"redaction\": null,  \"type\": \"bank_account\",  \"used\": false}\n```\n\n## [Create a card token](https://docs.stripe.com/api/tokens/create_card)\n\nCreates a single-use token that represents a credit card’s details. You can use this token in place of a credit card dictionary with any API method. You can only use these tokens once by [creating a new Charge object](#create_charge) or by attaching them to a [Customer object](#create_customer).\n\nIn most cases, you can use our recommended [payments integrations](https://docs.stripe.com/payments) instead of using the API.\n\n### Parameters\n\n*   The card this token will represent. If you also pass in a customer, the card must be the ID of a card belonging to the customer. Otherwise, if you do not pass in a customer, this is a dictionary containing a user’s credit card details, with the options described below.\n    \n\n### Returns\n\nReturns the created card token if it’s successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"card[number]\"=4242424242424242 \\  -d \"card[exp_month]\"=5 \\  -d \"card[exp_year]\"=2024 \\  -d \"card[cvc]\"=314\n```\n\n```\n{  \"id\": \"tok_1N3T00LkdIwHu7ixt44h1F8k\",  \"object\": \"token\",  \"card\": {    \"id\": \"card_1N3T00LkdIwHu7ixRdxpVI1Q\",    \"object\": \"card\",    \"address_city\": null,    \"address_country\": null,    \"address_line1\": null,    \"address_line1_check\": null,    \"address_line2\": null,    \"address_state\": null,    \"address_zip\": null,    \"address_zip_check\": null,    \"brand\": \"Visa\",    \"country\": \"US\",    \"cvc_check\": \"unchecked\",    \"dynamic_last4\": null,    \"exp_month\": 5,    \"exp_year\": 2024,    \"fingerprint\": \"mToisGZ01V71BCos\",    \"funding\": \"credit\",    \"last4\": \"4242\",    \"metadata\": {},    \"name\": null,    \"tokenization_method\": null,    \"wallet\": null  },  \"client_ip\": \"52.35.78.6\",  \"created\": 1683071568,  \"livemode\": false,  \"type\": \"card\",  \"used\": false}\n```",
  "title": "Tokens | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/no-code",
  "markdown": "# No-code options for using Stripe\n\n## Get started quickly, without writing any code.\n\nUse Stripe without writing code\n\nLearn which Stripe features are best for your business, then read instructions for getting started. No code required.\n\n[](https://docs.stripe.com/no-code/get-started)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/no-code.83d695b276c7a0549aeae2c8d16e14c9.png)\n\n## Accept payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Host your customer experience on Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## More resources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Developer resources](https://docs.stripe.com/development)Sign up for the newsletter, follow Stripe on X, or chat with the community on the official Discord.\n*   [Support site](https://support.stripe.com/)Learn the answers to common account questions and get troubleshooting tips and tricks.",
  "title": "No-code options for using Stripe | Stripe Documentation",
  "description": "Get started quickly, without writing any code.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/authentication",
  "markdown": "# Making API calls for connected accounts\n\n## Learn how to add the right information to your API calls so you can make calls for your connected accounts.\n\nYou can make API calls for your connected accounts:\n\n*   Server-side with the [Stripe-Account header](#stripe-account-header) and the connected account ID, per request\n*   Client-side by passing the connected account ID as an argument to the client library\n\nTo optimize performance and reliability, Stripe has established [rate limits and allocations](https://docs.stripe.com/rate-limits) for API endpoints.\n\nFor server-side API calls, you can make requests as connected accounts using the special header `Stripe-Account` with the Stripe account identifier (it starts with the prefix `acct_`) of your platform user. Here’s an example that shows how to [Create a PaymentIntent](https://docs.stripe.com/api/payment_intents/create) with your platform’s [API secret key](https://docs.stripe.com/keys) and your user’s [Account](https://docs.stripe.com/api/accounts) identifier.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=1000 \\  -d currency=usd \\  -d \"automatic_payment_methods[enabled]\"=true`\n\nIn the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.\n\nThe `Stripe-Account` header approach is implied in any API request that includes the Stripe account ID in the URL. Here’s an example that shows how to [Retrieve an account](https://docs.stripe.com/api/accounts/retrieve) with your user’s [Account](https://docs.stripe.com/api/accounts) identifier in the URL.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nAll of Stripe’s server-side libraries support this approach on a per-request basis:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\   --data-urlencode email=\"person@example.com\"`\n\n## Adding the connected account ID to a client-side application![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nClient-side libraries set the connected account ID as an argument to the client application:\n\nThe JavaScript code for passing the connected account ID client-side is the same for plain JS and for ESNext.\n\n`var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`, {   stripeAccount:   {{CONNECTED_ACCOUNT_ID}}  , });`",
  "title": "Making API calls for connected accounts | Stripe Documentation",
  "description": "Learn how to add the right information to your API calls so you can make calls for your connected accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/error-codes",
  "markdown": "# Error codes | Stripe DocumentationThe Stripe Docs logo\n\nBelow is a list of possible error codes, along with additional information about how to resolve them. For convenience, every Error object links to this list in its [doc\\_url](https://docs.stripe.com/api/errors#errors-doc_url) attribute.\n\n### `account_closed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer’s bank account has been closed.\n\n### `account_country_invalid_address`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe country of the business address provided does not match the country of the account. Businesses must be located in the same country as the account.\n\n### `account_error_country_change_requires_additional_steps`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour account has already onboarded as a Connect platform. Changing your country requires additional steps. Please reach out to Stripe support for more information.\n\n### `account_information_mismatch`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome account information mismatches with one another. For example, some banks might require that the business\\_profile.name must match the account holder name.\n\n### `account_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe account ID provided as a value for the `Stripe-Account` header is invalid. Check that your requests are specifying a valid account ID.\n\n### `account_number_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank account number provided is invalid (e.g., missing digits). Bank account information varies from country to country. We recommend creating validations in your entry forms based on the [bank account formats](https://docs.stripe.com/connect/payouts-bank-accounts) we provide.\n\n### `acss_debit_session_incomplete`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe ACSS debit session is not ready to transition to complete status yet. Please try again the request later.\n\n### `alipay_upgrade_required`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis method for creating Alipay payments is not supported anymore. Please upgrade your integration to use [Sources](https://stripe.com/docs/sources/alipay) instead.\n\n### `amount_too_large`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe specified amount is greater than the maximum amount allowed. Use a lower amount and try again.\n\n### `amount_too_small`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe specified amount is less than the minimum amount allowed. Use a higher amount and try again.\n\n### `api_key_expired`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe API key provided has expired. Obtain your current API keys from the [Dashboard](https://dashboard.stripe.com/account/apikeys) and update your integration to use them.\n\n### `application_fees_not_allowed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe proposed money movement could not be completed due to regulatory reasons.\n\n### `authentication_required`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe payment requires authentication to proceed. If your customer is [off session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session), notify your customer to return to your application and complete the payment. If you provided the [error\\_on\\_requires\\_action](https://docs.stripe.com/payments/without-card-authentication) parameter, then your customer should try another card that does not require authentication.\n\n### `balance_insufficient`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe transfer or payout could not be completed because the associated account does not have a sufficient balance available. Create a new transfer or payout using an amount less than or equal to the account’s available balance.\n\n### `balance_invalid_parameter`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInvalid parameter was provided in the balance method object. Check our API documentation or the returned error message for more context.\n\n### `bank_account_bad_routing_numbers`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank account is known to not support the currency in question.\n\n### `bank_account_declined`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank account provided can not be used to charge, either because it is not verified yet or it is not supported.\n\n### `bank_account_exists`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank account provided already exists on the specified [Customer](https://docs.stripe.com/api#update_customer-source) object. If the bank account should also be attached to a different customer, include the correct customer ID when making the request again.\n\n### `bank_account_restricted`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer’s account cannot be used with the payment method.\n\n### `bank_account_unusable`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank account provided cannot be used. A different bank account must be used.\n\n### `bank_account_unverified`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour Connect platform is attempting to share an unverified bank account with a connected account.\n\n### `bank_account_verification_failed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank account cannot be verified, either because the microdeposit amounts provided do not match the actual amounts, or because verification has failed too many times.\n\n### `billing_invalid_mandate`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Subscription or Invoice attempted payment on a PaymentMethod without an active mandate. In order to create Subscription or Invoice payments with this PaymentMethod, it must be confirmed on-session with a PaymentIntent or SetupIntent first.\n\n### `bitcoin_upgrade_required`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis method for creating Bitcoin payments is not supported anymore. Please upgrade your integration to use [Sources](https://stripe.com/docs/sources) instead.\n\nThe charge cannot be [captured](https://docs.stripe.com/charges/placing-a-hold) as the authorization has expired. Refer to the payment method’s documentation to learn more.\n\n### `capture_unauthorized_payment`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charge you’re attempting to [capture](https://docs.stripe.com/charges/placing-a-hold) has not been authorized for capturing payment.\n\n### `card_decline_rate_limit_exceeded`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis card has been declined too many times. You can try to charge this card again after 24 hours. We suggest reaching out to your customer to make sure they have entered all of their information correctly and that there are no issues with their card.\n\n### `card_declined`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card has been declined. When a card is declined, the error returned also includes the `decline_code` attribute with the reason why the card was declined. Refer to our [decline codes](https://docs.stripe.com/declines/codes) documentation to learn more.\n\n### `cardholder_phone_number_required`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must have a `phone_number` on file for Issuing Cardholders who will be creating EU cards. You cannot create EU cards without a `phone_number` on file for the cardholder. See the [3D Secure Documenation](https://docs.stripe.com/issuing/3d-secure) for more details.\n\n### `charge_already_captured`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charge you’re attempting to [capture](https://docs.stripe.com/charges/placing-a-hold) has already been captured. Update the request with an uncaptured charge ID.\n\n### `charge_already_refunded`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charge you’re attempting to [refund](https://docs.stripe.com/refunds) has already been refunded. Update the request to use the ID of a charge that has not been refunded.\n\n### `charge_disputed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charge you’re attempting to [refund](https://docs.stripe.com/refunds) has been charged back. Check the [disputes documentation](https://docs.stripe.com/disputes) to learn how to respond to the dispute.\n\n### `charge_exceeds_source_limit`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis charge would cause you to exceed your rolling-window processing limit for this source type. Please retry the charge later, or [contact us](https://support.stripe.com/email) to request a higher processing limit.\n\n### `charge_invalid_parameter`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more provided parameters was not allowed for the given operation on the Charge. Check our [API reference](https://docs.stripe.com/api/charges) or the returned error message to see which values were not correct for that Charge.\n\n### `charge_not_refundable`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAttempt to refund a charge was unsuccessful because the charge is no longer refundable.\n\n### `clearing_code_unsupported`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe clearing code provided is not supported.\n\n### `country_code_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe country code provided was invalid.\n\n### `country_unsupported`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour platform attempted to create a custom account in a country that is not yet supported. Make sure that users can only sign up in [countries supported by custom accounts](https://docs.stripe.com/connect/custom-accounts#country).\n\n### `coupon_expired`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [coupon](https://docs.stripe.com/api#coupons) provided for a [subscription](https://docs.stripe.com/api#subscriptions) or [order](https://docs.stripe.com/api#orders) has expired. Either create a new coupon, or use an existing one that is valid.\n\n### `customer_max_payment_methods`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe maximum number of [PaymentMethods](https://docs.stripe.com/api/payment_methods) for this [Customer](https://docs.stripe.com/api/customers) has been reached. Either [detach](https://docs.stripe.com/api/payment_methods/detach) some PaymentMethods from this Customer or proceed with a different Customer.\n\n### `customer_max_subscriptions`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe maximum number of subscriptions for a customer has been reached. [Contact us](https://support.stripe.com/email) if you are receiving this error.\n\n### `customer_tax_location_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer location information cannot be used to accurately determine tax rates. Verify that address fields such as country, state, and postal code have been added correctly. See the [supported address formats](https://docs.stripe.com/tax/customer-locations#supported-formats).\n\n### `debit_not_authorized`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer has notified their bank that this payment was unauthorized.\n\n### `email_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe email address is invalid (e.g., not properly formatted). Check that the email address is properly formatted and only includes [allowed characters](https://en.wikipedia.org/wiki/Email_address#Local-part).\n\n### `expired_card`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card has expired. Check the expiration date or use a different card.\n\n### `financial_connections_account_inactive`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nData cannot be refreshed on inactive Financial Connections accounts.\n\n### `financial_connections_no_successful_transaction_refresh`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTransaction data can only be retrieved for accounts that have at least one successful transaction refresh.\n\n### `forwarding_api_inactive`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe vault and forward API is currently not accessible with this account and/or config. Please [contact us](https://support.stripe.com/contact) if you are receiving this error.\n\n### `forwarding_api_invalid_parameter`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInvalid parameter was provided in the vault and forward API. Check our API documentation or the returned error message for more context.\n\n### `forwarding_api_upstream_connection_error`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe did not receive a response from the destination endpoint.\n\n### `forwarding_api_upstream_connection_timeout`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe request to the destination endpoint timed out.\n\n### `idempotency_key_in_use`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe idempotency key provided is currently being used in another request. This occurs if your integration is making duplicate requests simultaneously.\n\n### `incorrect_address`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card’s address is incorrect. Check the card’s address or use a different card.\n\n### `incorrect_cvc`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card’s security code is incorrect. Check the card’s security code or use a different card.\n\n### `incorrect_number`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card number is incorrect. Check the card’s number or use a different card.\n\n### `incorrect_zip`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card’s postal code is incorrect. Check the card’s postal code or use a different card.\n\n### `instant_payouts_config_disabled`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis connected account is not eligible for Instant Payouts. Ask the platform to enable Instant Payouts.\n\n### `instant_payouts_currency_disabled`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis connected account is not eligible for Instant Payouts in this currency. Ask the platform to enable Instant Payouts in this currency.\n\n### `instant_payouts_limit_exceeded`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou have reached your daily processing limits for Instant Payouts.\n\n### `instant_payouts_unsupported`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis card is not eligible for Instant Payouts. Try a debit card from a [supported bank](https://stripe.com/docs/payouts/instant-payouts-banks).\n\n### `insufficient_funds`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer’s account has insufficient funds to cover this payment.\n\n### `intent_invalid_state`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIntent is not in the state that is required to perform the operation.\n\n### `intent_verification_method_missing`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIntent does not have verification method specified in its PaymentMethodOptions object.\n\n### `invalid_card_type`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card provided as an [external account](https://stripe.com/docs/api#external_accounts) is not supported for payouts. Provide a non-prepaid debit card instead.\n\n### `invalid_characters`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis value provided to the field contains characters that are unsupported by the field.\n\n### `invalid_cvc`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card’s security code is invalid. Check the card’s security code or use a different card.\n\n### `invalid_expiry_month`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card’s expiration month is incorrect. Check the expiration date or use a different card.\n\n### `invalid_expiry_year`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card’s expiration year is incorrect. Check the expiration date or use a different card.\n\n### `invalid_number`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card number is invalid. Check the card details or use a different card.\n\n### `invalid_source_usage`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe source cannot be used because it is not in the correct state (e.g., a charge request is trying to use a source with a `pending`, `failed`, or `consumed` source). Check the [status](https://docs.stripe.com/api#source_object-status) of the source you are attempting to use.\n\n### `invalid_tax_location`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe specified location is invalid. Check the [Supported address formats](https://docs.stripe.com/tax/customer-locations#supported-formats) for the address formats supported when calculating tax.\n\n### `invoice_no_customer_line_items`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn invoice cannot be generated for the specified customer as there are no pending invoice items. Check that the correct customer is being specified or create any necessary invoice items first.\n\n### `invoice_no_payment_method_types`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn invoice cannot be finalized because there are no payment method types available to process the payment. Your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice) or the invoice’s [`payment_settings`](https://docs.stripe.com/api/invoices/object#invoice_object-payment_settings) might be restricting which payment methods are available, or you might need to activate more [payment methods](https://dashboard.stripe.com/settings/payments) in the Dashboard.\n\n### `invoice_no_subscription_line_items`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn invoice cannot be generated for the specified subscription as there are no pending invoice items. Check that the correct subscription is being specified or create any necessary invoice items first.\n\n### `invoice_not_editable`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe specified invoice can no longer be edited. Instead, consider creating additional [invoice items](https://docs.stripe.com/billing/invoices/subscription#adding-upcoming-invoice-items) that will be applied to the next invoice. You can either [manually generate](https://docs.stripe.com/billing/invoices/subscription#generating-invoices) the next invoice or wait for it to be automatically generated at the end of the billing cycle.\n\n### `invoice_on_behalf_of_not_editable`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou cannot update the `on_behalf_of` property of an invoice after the invoice has been assigned a number.\n\n### `invoice_payment_intent_requires_action`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis payment requires additional user action before it can be completed successfully. Payment can be completed using the PaymentIntent associated with the invoice. See [this page](https://stripe.com/docs/billing/subscriptions/payment#handling-action-required) for more details.\n\n### `invoice_upcoming_none`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere is no upcoming invoice on the specified customer to preview. Only customers with active subscriptions or pending invoice items have invoices that can be previewed.\n\n### `livemode_mismatch`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTest and live mode API keys, requests, and objects are only available within the mode they are in.\n\n### `lock_timeout`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis object cannot be accessed right now because another API request or Stripe process is currently accessing it. If you see this error intermittently, retry the request. If you see this error frequently and are making multiple concurrent requests to a single object, make your requests serially or at a lower rate. See the [rate limit documentation](https://docs.stripe.com/rate-limits#object-lock-timeouts) for more details.\n\n### `missing`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBoth a customer and source ID have been provided, but the source has not been saved to the customer. To create a charge for a customer with a specified source, you must first [save the card details](https://docs.stripe.com/saving-cards).\n\n### `no_account`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank account could not be located.\n\n### `not_allowed_on_standard_account`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTransfers and payouts on behalf of a Standard connected account are not allowed.\n\n### `out_of_inventory`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more line item(s) are out of stock. If more stock is available, update the inventory’s orderable quantity and try again.\n\n### `ownership_declaration_not_allowed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCompany ownership declaration is allowed only during account updates and accounts created via account tokens.\n\n### `parameter_invalid_empty`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more required values were not provided. Make sure requests include all required parameters.\n\n### `parameter_invalid_integer`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more of the parameters requires an integer, but the values provided were a different type. Make sure that only supported values are provided for each attribute. Refer to our [API documentation](https://stripe.com/docs/api) to look up the type of data each attribute supports.\n\n### `parameter_invalid_string_blank`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more values provided only included whitespace. Check the values in your request and update any that contain only whitespace.\n\n### `parameter_invalid_string_empty`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more required string values is empty. Make sure that string values contain at least one character.\n\n### `parameter_missing`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more required values are missing. Check our [API documentation](https://docs.stripe.com/api) to see which values are required to create or modify the specified resource.\n\n### `parameter_unknown`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe request contains one or more unexpected parameters. Remove these and try again.\n\n### `parameters_exclusive`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTwo or more mutually exclusive parameters were provided. Check our [API documentation](https://docs.stripe.com/api) or the returned error message to see which values are permitted when creating or modifying the specified resource.\n\n### `payment_intent_action_required`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe provided payment method requires customer actions to complete, but `error_on_requires_action` was set. If you’d like to add this payment method to your integration, we recommend that you first [upgrade your integration to handle actions](https://docs.stripe.com/payments/payment-intents/upgrade-to-handle-actions).\n\n### `payment_intent_authentication_failure`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe provided payment method has failed authentication. Provide a new payment method to attempt to fulfill this PaymentIntent again.\n\n### `payment_intent_incompatible_payment_method`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent expected a payment method with different properties than what was provided.\n\n### `payment_intent_invalid_parameter`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more provided parameters was not allowed for the given operation on the PaymentIntent. Check our [API reference](https://docs.stripe.com/api/payment_intents) or the returned error message to see which values were not correct for that PaymentIntent.\n\n### `payment_intent_konbini_rejected_confirmation_number`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `confirmation_number` provided in `payment_method_options[konbini]` was rejected by the processing partner at time of PaymentIntent confirmation.\n\n### `payment_intent_mandate_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe provided mandate is invalid and can not be used for the payment intent.\n\n### `payment_intent_payment_attempt_expired`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe latest payment attempt for the PaymentIntent has expired. Check the [`last_payment_error`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error) property on the PaymentIntent for more details, and provide a new payment method to attempt to fulfill this PaymentIntent again.\n\n### `payment_intent_payment_attempt_failed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe latest payment attempt for the PaymentIntent has failed. Check the [`last_payment_error`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error) property on the PaymentIntent for more details, and provide a new payment method to attempt to fulfill this PaymentIntent again.\n\n### `payment_intent_unexpected_state`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent’s state was incompatible with the operation you were trying to perform.\n\n### `payment_method_bank_account_already_verified`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis bank account has already been verified.\n\n### `payment_method_bank_account_blocked`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis bank account has failed verification in the past and can not be used. [Contact us](https://support.stripe.com/email) if you wish to attempt to use these bank account credentials.\n\n### `payment_method_billing_details_address_missing`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentMethod’s billing details is missing address details. Please update the missing fields and try again.\n\n### `payment_method_configuration_failures`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAttempt to create or modify Payment Method Configuration was unsuccessful.\n\n### `payment_method_currency_mismatch`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe currency specified does not match the currency for the attached payment method. A payment can only be created for the same currency as the corresponding payment method.\n\n### `payment_method_customer_decline`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer did not approve the payment. Please provide a new payment method to attempt to fulfill this intent again.\n\n### `payment_method_invalid_parameter`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInvalid parameter was provided in the payment method object. Check our [API documentation](https://docs.stripe.com/api) or the returned error message for more context.\n\n### `payment_method_invalid_parameter_testmode`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe parameter provided for payment method is not allowed to be used in testmode. Check our [API documentation](https://docs.stripe.com/api) or the returned error message for more context.\n\n### `payment_method_microdeposit_failed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMicrodeposits were failed to be deposited into the customer’s bank account. Please check the account, institution and transit numbers as well as the currency type.\n\n### `payment_method_microdeposit_verification_amounts_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must provide exactly two microdeposit amounts.\n\n### `payment_method_microdeposit_verification_amounts_mismatch`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe amounts provided do not match the amounts that were sent to the bank account.\n\n### `payment_method_microdeposit_verification_attempts_exceeded`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou have exceeded the number of allowed verification attempts.\n\n### `payment_method_microdeposit_verification_descriptor_code_mismatch`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe verification code provided does not match the one sent to the bank account.\n\n### `payment_method_microdeposit_verification_timeout`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayment method should be verified with microdeposits within the required period.\n\n### `payment_method_not_available`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe payment processor for the provided payment method is temporarily unavailable. Please try a different payment method or retry later with the same payment method.\n\n### `payment_method_provider_decline`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe payment or setup attempt was declined by the issuer or customer. Check the [`last_payment_error`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error) or [`last_setup_error`](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-last_setup_error) property on the PaymentIntent or SetupIntent respectively for more details, and provide a new payment method to attempt to fulfill this intent again.\n\n### `payment_method_provider_timeout`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe payment method failed due to a timeout. Check the [`last_payment_error`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error) or [`last_setup_error`](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-last_setup_error) property on the PaymentIntent or SetupIntent respectively for more details, and provide a new payment method to attempt to fulfill this intent again.\n\n### `payment_method_unactivated`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe operation cannot be performed as the payment method used has not been activated. Activate the payment method in the [Dashboard](https://dashboard.stripe.com/account/payments/settings), then try again.\n\n### `payment_method_unexpected_state`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe provided payment method’s state was incompatible with the operation you were trying to perform. Confirm that the payment method is in an allowed state for the given operation before attempting to perform it.\n\n### `payment_method_unsupported_type`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe API only supports payment methods of certain types.\n\n### `payout_reconciliation_not_ready`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReconciliation for this payout is still in progress.\n\n### `payouts_limit_exceeded`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou have reached your daily processing limits for this payout type.\n\n### `payouts_not_allowed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayouts have been disabled on the connected account. Check the connected account’s status to see if any [additional information](https://docs.stripe.com/connect/identity-verification) needs to be provided, or if payouts have been disabled for [another reason](https://docs.stripe.com/connect/handling-api-verification#determining-if-identity-verification-is-needed).\n\n### `platform_account_required`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnly Stripe Connect platforms can work with other accounts. If you need to setup a Stripe Connect platform, you can do so [in the dashboard](https://dashboard.stripe.com/account/applications/settings).\n\n### `platform_api_key_expired`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe API key provided by your Connect platform has expired. This occurs if your platform has either generated a new key or the connected account has been disconnected from the platform. Obtain your current API keys from the [Dashboard](https://dashboard.stripe.com/account/apikeys) and update your integration, or reach out to the user and reconnect the account.\n\n### `postal_code_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe postal code provided was incorrect.\n\n### `processing_error`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn error occurred while processing the card. Try again later or with a different payment method.\n\n### `product_inactive`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe product this SKU belongs to is no longer available for purchase.\n\n### `progressive_onboarding_limit_exceeded`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nProgressive onboarding limit has been reached for the platform.\n\n### `rate_limit`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nToo many requests hit the API too quickly. We recommend an exponential backoff of your requests.\n\n### `refer_to_customer`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe customer has stopped the payment with their bank. Contact them for details and to arrange payment.\n\n### `refund_disputed_payment`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou cannot refund a disputed payment.\n\n### `resource_already_exists`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA resource with a user-specified ID (e.g., plan or coupon) already exists. Use a different, unique value for `id` and try again.\n\n### `resource_missing`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe ID provided is not valid. Either the resource does not exist, or an ID for a different resource has been provided.\n\n### `return_intent_already_processed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou cannot confirm this refund as it is already processed.\n\n### `routing_number_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe bank routing number provided is invalid.\n\n### `secret_key_required`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe API key provided is a publishable key, but a secret key is required. Obtain your current API keys from the [Dashboard](https://dashboard.stripe.com/account/apikeys) and update your integration to use them.\n\n### `sepa_unsupported_account`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour account does not support [SEPA](https://docs.stripe.com/sources/sepa-debit) payments.\n\n### `setup_attempt_failed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe latest setup attempt for the SetupIntent has failed. Check the `last_setup_error` property on the SetupIntent for more details, and provide a new payment method to attempt to set it up again.\n\n### `setup_intent_authentication_failure`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe provided payment method has failed authentication. Provide a new payment method to attempt to fulfill this SetupIntent again.\n\n### `setup_intent_invalid_parameter`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOne or more provided parameters was not allowed for the given operation on the SetupIntent. Check our [API reference](https://docs.stripe.com/api/setup_intents) or the returned error message to see which values were not correct for that SetupIntent.\n\n### `setup_intent_mandate_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe provided mandate is invalid and can not be used for the setup intent.\n\n### `setup_intent_setup_attempt_expired`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe latest setup attempt for the SetupIntent has expired. Check the [`last_setup_error`](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-last_setup_error) property on the SetupIntent for more details, and provide a new payment method to attempt to complete this SetupIntent again.\n\n### `setup_intent_unexpected_state`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SetupIntent’s state was incompatible with the operation you were trying to perform.\n\n### `shipping_address_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe shipping address information cannot be used to accurately determine tax rates. Verify that address fields such as zip code, state, or province have been added correctly.\n\n### `shipping_calculation_failed`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nShipping calculation failed as the information provided was either incorrect or could not be verified.\n\n### `sku_inactive`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SKU is inactive and no longer available for purchase. Use a different SKU, or make the current SKU active again.\n\n### `state_unsupported`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOccurs when providing the `legal_entity` information for a U.S. custom account, if the provided state is not supported. (This is mostly associated states and territories.)\n\n### `status_transition_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe requested status transition is not valid.\n\n### `stripe_tax_inactive`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax has not been activated on your account. Check the [setup documentation](https://docs.stripe.com/tax/set-up) to get started.\n\n### `tax_id_invalid`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax ID number provided is invalid (e.g., missing digits). Tax ID information varies from country to country, but must be at least nine digits.\n\n### `taxes_calculation_failed`![](https://b.str