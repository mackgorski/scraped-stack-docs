ache'\nrequest.body = \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_ID\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\"permissions\": [\n    [\n      \"resource_server_identifier\": \"API_ID\",\n      \"permission_name\": \"PERMISSION_NAME\"\n    ],\n    [\n      \"resource_server_identifier\": \"API_ID\",\n      \"permission_name\": \"PERMISSION_NAME\"\n    ]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/roles/ROLE_ID/permissions\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
  "title": "Remove Permissions from Roles",
  "description": "Learn how to remove permissions added to a role using the Auth0 Dashboard or the Management API. ",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/view-user-roles",
  "markdown": "# View Roles Assigned to Users\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/users/USER_ID/roles' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/USER_ID/roles\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/USER_ID/roles\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/users/USER_ID/roles\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/users/USER_ID/roles',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/USER_ID/roles\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/USER_ID/roles\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/users/USER_ID/roles\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/USER_ID/roles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/USER_ID/roles\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
  "title": "View Roles Assigned to Users",
  "description": "Learn how to view roles assigned to a user using the Auth0 Dashboard or the Management API. ",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/libraries/auth0-swift/auth0-swift-passwordless",
  "markdown": "# Auth0.swift: Passwordless Authentication\n\nPasswordless authentication allows users to login using only an email address or phone number, reducing the friction that occurs when a user must remember a password. Passwordless authentication can be done via email or via SMS, and either by sending the user a code, or sending them a link which contains a code.\n\nTo use Passwordless Authentication you need Auth0.Swift version `1.20.0` or greater.\n\n## How Passwordless works\n\nPasswordless requires two steps:\n\n1.  Request the code\n    \n2.  Input the code\n    \n\nWhen using links, the same thing happens, but in a slightly different way, because the user does not have to input a code themselves. The code is included in the URL.\n\n### Step 1: Request the code\n\nIn this example, requesting the code is done by calling `startPasswordless` with the user's email, and the type of connection. The `type` parameter will default to `Code`. On success, you'll probably display a notice to the user that their code is on the way, and perhaps route them to a view to input that code.\n\n```\nAuth0\n   .authentication()\n   .startPasswordless(email: \"support@auth0.com\")\n   .start { result in\n       switch result {\n       case .success:\n           print(\"Sent OTP to support@auth0.com!\")\n       case .failure(let error):\n           print(error)\n       }\n   }\n```\n\n### Step 2: Input the code\n\nOnce the user has a code, they can input it. Call the `login` method, and pass in the user's email, the code they received, and the name of the connection in question. Upon success, you will receive a Credentials object in the response.\n\n```\nAuth0\n   .authentication()\n   .login(\n       email: \"support@auth0.com\", \n       code: \"123456\", \n       audience: \"https://myapi.com/api\",\n       scope: \"openid email\")\n   .start { result in\n       switch result {\n       case .success(let credentials):\n           print(\"Access Token: \\(credentials.accessToken)\")\n       case .failure(let error):\n           print(error)\n       }\n   }\n```\n\nIf you used SMS, the call would be similar to this example instead:\n\n```\nAuth0\n   .authentication()\n   .login(\n       phoneNumber: \"+4591131761367\", \n       code: \"123456\", \n       audience: \"https://myapi.com/api\",\n       scope: \"openid email\")\n   .start { result in\n       switch result {\n       case .success(let credentials):\n           print(\"Access Token: \\(credentials.accessToken)\")\n       case .failure(let error):\n           print(error)\n       }\n   }\n```\n\n## Passwordless parameters\n\nPasswordless authentication can be started with a variety of different parameters.\n\nFor example:\n\n`.startPasswordless(email: String, type: String, connection: String)`\n\nor\n\n`.startPasswordless(phoneNumber: String, type: String, connection: String)`\n\n| **Parameter** | **Required** | **Description** |\n| --- | --- | --- |\n| `email` | required | (String) Either `email` or `phoneNumber` is required (not both), depending on which will be used. |\n| `phoneNumber` | required | (String) Either `email` or `phoneNumber` is required (not both), depending on which will be used. |\n| `type` | optional | (String) The type of Passwordless transaction to use, either `.Code` or `.iOSLink`. Defaults to `.Code`. |\n| `connection` | optional | (String) The name of the connection to use for the Passwordless authentication. Defaults to `sms` for the SMS overload or to `email` for the email overload |",
  "title": "Auth0.swift: Passwordless Authentication",
  "description": "Using Auth0.Swift in passwordless mode",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/customize/login-pages/universal-login/customize-templates",
  "markdown": "# Customize Universal Login Page Templates\n\nYou can customize Universal Login pages by providing a page template created with the [Liquid template language](https://shopify.github.io/liquid/basics/introduction/). With page templates, you can define the content displayed around Universal Login prompts, such as the login box or an MFA challenge. As the same page template is used for all login flow pages, this method of customization allows you to easily implement a consistent, branded experience for users.\n\nTo use customized page templates, you must configure a [Custom Domain](https://auth0.com/docs/customize/custom-domains) for your tenant. Further, you can only update Universal Login page templates with the [Management API](https://auth0.com/docs/api/management/v2).\n\n## Page template requirements\n\nWhen creating a Universal Login page template, you must include the following tags:\n\n| **Tag** | **Description** |\n| --- | --- |\n| `auth0:widget` | Contains HTML for the prompt displayed on every page of the login flow, such as the Login page or Reset Password page |\n| `auth0:head` | Contains the tags required for rendering the prompt |\n\nTo center the prompt on the page, add `class=\"_widget-auto-layout\"` to the `<body>` element. You can omit this attribute to manually position the prompt as needed.\n\n##### Example template:\n\nThe following example demonstrates the simplest Universal Login page template you can create with the required tags:\n\n```\n<!DOCTYPE html><html>\n  <head>\n    {%- auth0:head -%}\n  </head>\n  <body>\n    {%- auth0:widget -%}\n  </body></html>\n```\n\n## Page template variables\n\nPage templates support a variety of context variables that impact how a page is rendered.\n\nFor example, you can use these variables to:\n\n*   Render different content depending on the application associated with the login flow. For example, you may manage two brands that require different page designs. \n    \n*   Render different content depending on the specific prompt. For example, you may want to add information about what your application offers on the Login page but prefer the MFA flow to only display the MFA challenge prompt. \n    \n*   Add a footer with user support information, such as links to your support page or contact information.\n    \n\n### Available variables\n\nPage templates support the following variables:\n\n#### Application\n\n| **Variable** | **Description** | **Example** |\n| --- | --- | --- |\n| `application.id` | Your application client ID | XXXXXXXXXXXXXXXXXXXXXXXXX |\n| `application.name` | The name of your application | My Application |\n| `application.logo_url` | URL of the application logo | https://example.com/mylogo.png |\n| `application.metadata` | Your application metadata | `{`  <br>`\"attribute1\": \"value\"`  <br>`\"attribute2\": \"value\"`  <br>`\"attribute3\": \"value\"`  <br>`}` |\n\n#### Branding\n\n| **Variable** | **Description** | **Example** |\n| --- | --- | --- |\n| `branding.logo_url` | URL of your application logo | https://example.com/mylogo.png |\n| `branding.colors.primary` | Your primary branding color | #000000 |\n| `branding.colors.page_background` | Background color for Universal Login pages | #FFFFFF |\n\n#### Tenant\n\n| **Variable** | **Description** | **Example** |\n| --- | --- | --- |\n| `tenant.friendly_name` | Your tenant's display name | My Tenant |\n| `tenant.support_email` | Support email address for your tenant | support@example.com |\n| `tenant.support_url` | Support page URL for your tenant | https://example.com/support |\n\n#### Organizations\n\nThe following variables refer to the [Auth0 Organizations](https://auth0.com/docs/manage-users/organizations/organizations-overview) feature.\n\n| **Variable** | **Description** | **Example** |\n| --- | --- | --- |\n| `organization.id` | ID of Organization | org\\_XXXXXXXXXXXXXXX |\n| `organization.display_name` | Display name of Organization | My Organization |\n| `organization.name` | Internal name of Organization | my-organization |\n| `organization.metadata` | Organization metadata | `{`  <br>`\"attribute1\": \"value\"`  <br>`\"attribute2\": \"value\"`  <br>`\"attribute3\": \"value\"`  <br>`}` |\n| `organization.branding.logo_url` | URL of Organization logo | https://example.com/orglogo.png |\n| `organization.branding.colors.primary` | Primary branding color for Organization | #000000 |\n| `organization.branding.colors.page_background` | Background color for Organization's login pages | #FFFFFF |\n\n#### Current user information\n\nYou can only use the following variables for pages that render after authentication.\n\n| **Variables** | **Description** | **Example** |\n| --- | --- | --- |\n| `user.user_id` | ID of the user profile | auth0\\|XXXXXXXXXXXXXXXXXXXX |\n| `user.picture` | URL of the user's profile picture | https://example.com/userimage |\n| `user.email` | Email address of user | user@example.com |\n| `user.email_verified` | Boolean of email verification status (true/false) | true |\n| `user.app_metadata` | `app_metadata` object of the user profile | `{`  <br>`\"attribute1\": \"value\"`  <br>`\"attribute2\": \"value\"`  <br>`\"attribute3\": \"value\"`  <br>`}` |\n| `user.user_metadata` | `user_metadata` object of the user profile | `{`  <br>`\"attribute1\": \"value\"`  <br>`\"attribute2\": \"value\"`  <br>`\"attribute3\": \"value\"`  <br>`}` |\n| `user.family_name` | Family (last) name of user | Smith |\n| `user.given_name` | Given (first) name of user | Abigail |\n| `user.name` | Full name of user | Abigail Smith |\n| `user.nickname` | Nickname (alias) of user | Abby |\n| `user.username` | Internal name of user | asmith |\n\n#### Current screen information\n\n| **Variables** | **Description** | **Example** |\n| --- | --- | --- |\n| `locale` | Locale used to render the page; matches one of the [supported tenant languages](https://auth0.com/docs/customize/internationalization-and-localization/universal-login-internationalization) | en-US |\n| `prompt.name` | Name of the currently rendered [Universal Login prompt](#prompts) | mfa |\n| `prompt.screen.name` | Name of the currently rendered Universal Login screen | mfa-login-options |\n| `prompt.screen.texts` | All localized texts from the current screen | `{`  <br>`\"pageTitle\": \"Available methods\"`  <br>`}` |\n\n### Prompts\n\nThe term `prompt` refers to a specific step of the login flow. A specific prompt may consist of one or more screens. You can manage prompts through the [Auth0 Dashboard](https://manage.auth0.com/#/custom_text) or the Prompts endpoints of the [Management API](https://auth0.com/docs/api/management/v2).\n\nThe sections below provide details for each available prompt.\n\n### Custom query parameters\n\nYou can also use query parameters within the context by passing them to the `/authorize` endpoint when initiating the authentication request. These custom query parameters must have the `ext-` prefix.\n\nThe following example uses the `ext-ga` and `ext-test` query parameters to the login page template:\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    {%- auth0:head -%}\n  </head>\n  <body>\n    {%- auth0:widget -%}\n  </body>\n  <pre style='background: wheat'>\n    <b>Value of the ext-ga parameter:</b>{{ transaction.params.ext-ga }}\n    <b>Value of the ext-test parameter:</b>{{ transaction.params.ext-test }}\n  </pre>\n</html>\n```\n\n### Custom signup prompts\n\nIf you use custom signup prompts, you must enable custom page templates. The following is the minimum template that allows custom signup prompts to render:\n\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    {%- auth0:head -%}\n    <style>\n      body._widget-auto-layout {\n        --page-background-image: url('https://REPLACE/WITH/YOUR/BACKGROUND/IMAGE.png');\n        background-color: var(--page-background-color);\n        background-image: var(--page-background-image);\n        background-position: center;\n        background-size: cover;\n        background-repeat: no-repeat;\n      }\n    </style>\n    <title>{{ prompt.screen.texts.pageTitle }}</title>\n  </head>\n  <body class=\"_widget-auto-layout\">\n    {%- auth0:widget -%}\n  </body>\n</html>\n```\n\nTo learn more, review [Customize Signup and Login Prompts](https://auth0.com/docs/customize/login-pages/universal-login/customize-signup-and-login-prompts).\n\n## Examples\n\n### Login box + image layout\n\nThe following template will show the login box to the left, and an image to the right only for the login/signup pages. The rest of the pages will look like the default ones.\n\n```\n<!DOCTYPE html>\n<html lang=\"{{locale}}\">\n  <head>\n    {%- auth0:head -%}\n    <style>\n      body {\n        background-image: url(\"https://images.unsplash.com/photo-1592450865877-e3a318ec3522?ixlib=rb-1.2.1&auto=format&fit=crop&w=2255&q=80\");\n        background-size: cover;\n        background-position: center;\n        background-repeat: no-repeat;\n      }\n      .prompt-wrapper {\n        position: relative;\n        display: flex;\n        align-items: center;\n        width: 480px;\n        height: 100%;\n        justify-content: center;\n        background-color: rgb(60,60,60);\n      }\n    </style>\n    <title>{{ prompt.screen.texts.pageTitle }}</title>\n\n  </head>\n  <body class=\"_widget-auto-layout\">\n    {% if prompt.name == \"login\" or prompt.name == \"signup\" %} \n        <div class=\"prompt-wrapper\">\n        {%- auth0:widget -%}\n        </div>\n    {% else %}\n        {%- auth0:widget -%}\n    {% endif %}\n  </body>\n</html>\n```\n\n![Universal Login box with email username/password and image layout example](https://images.ctfassets.net/cdy7uua7fh8z/7F2LIZ4qVdGqMUNnj66wcP/611287c9bb937c4040728fb442c7978f/page-templates-layout.png)\n\nThe example below adds a gray footer with links to Privacy Policy and Terms of Services:\n\n```\n<!DOCTYPE html><html lang=\"{{locale}}\">\n  <head>\n    {%- auth0:head -%}\n    <style>\n      body {\n        background-image: radial-gradient(white, rgb(200, 200, 200));\n      }\n      .footer {\n        background-color: rgb(120, 120, 120);\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        padding: 16px 0; \n        width: 100%;\n        color: white;\n        /* Use a high z-index for future-proofing */\n        z-index: 10;\n      }\n      .footer ul {\n        text-align: center;\n      }\n      .footer ul li {\n        display: inline-block;\n        margin: 0 4px;\n      }\n      .footer ul li:not(:first-of-type) {\n        margin-left: 0;\n      }\n      .footer ul li:not(:first-of-type)::before {\n        content: '';\n        display: inline-block;\n        vertical-align: middle;\n        width: 4px;\n        height: 4px;\n        margin-right: 4px;\n        background-color: white;\n        border-radius: 50%;\n      }\n      .footer a {\n        color: white;\n      }\n    </style>\n     <title>{{ prompt.screen.texts.pageTitle }}</title>\n  </head>\n  <body class=\"_widget-auto-layout\">\n    {%- auth0:widget -%}\n    <footer class=\"footer\">\n      <ul>\n        <li><a href=\"https://company.com/privacy\">Privacy Policy</a></li>\n        <li><a href=\"https://company.com/terms\">Terms of Service</a></li>\n      </ul>\n    </footer>\n  </body></html>\n```\n\n![Universal Login box with email address/password and footers layout example](https://images.ctfassets.net/cdy7uua7fh8z/17BeLStId6jsxSfEnVFPMa/4ee123ee4c241ae1a26632218b1ec874/page-templates-footer.png)\n\n## Page templates API\n\nTo set the page template, you need to use the Management API. You first need to get a Management API token with the `update:branding`, `read:branding`, `delete:branding` scopes. If you are using the `API Explorer Application` to generate tokens, make sure those scopes are enabled for the `Auth0 Management API`.\n\nTo set the template, you need to use the following endpoint:\n\n*   [cURL](#c1e6c79f170f491b92832a5f02d50ec5_shell)\n*   [C#](#c1e6c79f170f491b92832a5f02d50ec5_csharp)\n*   [Go](#c1e6c79f170f491b92832a5f02d50ec5_go)\n*   [Java](#c1e6c79f170f491b92832a5f02d50ec5_java)\n*   [Node.JS](#c1e6c79f170f491b92832a5f02d50ec5_node)\n*   [Obj-C](#c1e6c79f170f491b92832a5f02d50ec5_objc)\n*   [...](#)\n\n```\ncurl --request PUT \\\n  --url 'https://{yourDomain}/api/v2/branding/templates/universal-login' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'content-type: text/html' \\\n  --data '<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/branding/templates/universal-login\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"content-type\", \"text/html\");\nrequest.AddParameter(\"text/html\", \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/branding/templates/universal-login\"\n\n\tpayload := strings.NewReader(\"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"content-type\", \"text/html\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.put(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"content-type\", \"text/html\")\n  .body(\"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PUT',\n  url: 'https://{yourDomain}/api/v2/branding/templates/universal-login',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN', 'content-type': 'text/html'},\n  data: '<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>'\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"content-type\": @\"text/html\" };\n\nNSData *postData = [[NSData alloc] initWithData:[@\"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\" dataUsingEncoding:NSUTF8StringEncoding]];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/branding/templates/universal-login\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PUT\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/branding/templates/universal-login\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PUT\",\n  CURLOPT_POSTFIELDS => \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"content-type: text/html\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\"\n\nheaders = {\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'content-type': \"text/html\"\n    }\n\nconn.request(\"PUT\", \"/{yourDomain}/api/v2/branding/templates/universal-login\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"content-type\"] = 'text/html'\nrequest.body = \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"content-type\": \"text/html\"\n]\n\nlet postData = NSData(data: \"<!DOCTYPE html><html><head>{%- auth0:head -%}</head><body>{%- auth0:widget -%}</body></html>\".data(using: String.Encoding.utf8)!)\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/branding/templates/universal-login\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PUT\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nTo retrieve the template, you need to use the following endpoint:\n\n*   [cURL](#7431dd457f314f4890834b565cbc6172_shell)\n*   [C#](#7431dd457f314f4890834b565cbc6172_csharp)\n*   [Go](#7431dd457f314f4890834b565cbc6172_go)\n*   [Java](#7431dd457f314f4890834b565cbc6172_java)\n*   [Node.JS](#7431dd457f314f4890834b565cbc6172_node)\n*   [Obj-C](#7431dd457f314f4890834b565cbc6172_objc)\n*   [...](#)\n\n```\ncurl --request GET \\\n  --url 'https://{yourDomain}/api/v2/branding/templates/universal-login' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/branding/templates/universal-login\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/branding/templates/universal-login\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.get(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'GET',\n  url: 'https://{yourDomain}/api/v2/branding/templates/universal-login',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/branding/templates/universal-login\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/branding/templates/universal-login\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"GET\", \"/{yourDomain}/api/v2/branding/templates/universal-login\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/branding/templates/universal-login\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nTo delete the template, you need to use the following endpoint:\n\n*   [cURL](#0dbed89f99b14cd7b6984e5880c7d653_shell)\n*   [C#](#0dbed89f99b14cd7b6984e5880c7d653_csharp)\n*   [Go](#0dbed89f99b14cd7b6984e5880c7d653_go)\n*   [Java](#0dbed89f99b14cd7b6984e5880c7d653_java)\n*   [Node.JS](#0dbed89f99b14cd7b6984e5880c7d653_node)\n*   [Obj-C](#0dbed89f99b14cd7b6984e5880c7d653_objc)\n*   [...](#)\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/branding/templates/universal-login' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/branding/templates/universal-login\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/branding/templates/universal-login\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/branding/templates/universal-login',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/branding/templates/universal-login\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/branding/templates/universal-login\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/branding/templates/universal-login\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/branding/templates/universal-login\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/branding/templates/universal-login\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```\n\nThe maximum size for the Page Template is 100KB. If that is not big enough, consider moving images/css files outside of the Page Template code.\n\n## CSS customization\n\nThere are a few things that you can customize using CSS:\n\n*   You can hide the tenant logo by adding `class=\"_hide-prompt-logo\"` in the `<body>` element.\n    \n*   You can specify a custom logo by adding `class=\"_use-custom-prompt-logo\"` in the `<body>` element. This would let you, for example, change the login page logo depending on the application:\n    \n\n```\n<!DOCTYPE html>\n<html lang=\"{{locale}}\">\n\n  <head>\n    <title>Welcome to {{ application.name }} </title>\n    {%- auth0:head -%}\n    <style>\n      {% if application.name == \"Auth0 Community\" %}\n      #custom-prompt-logo {\n      background-image: url('https://cdn.auth0.com/manhattan/versions/1.3312.0/assets/badge.png');\n      }\n      {% elsif application.name == \"Auth0 Dashboard\" %}\n      #custom-prompt-logo {\n      background-image: url('https://cdn.auth0.com/blog/auth0rta/theme/logos/auth0-logo-black.png');\n      }\n      {% endif %}\n  </style>\n\n  </head>\n\n  <body class=\"_widget-auto-layout _use-custom-prompt-logo\">\n    {%- auth0:widget -%}\n  </body>\n\n</html>\n```\n\nThe current implementation does not support further CSS customization. If you look at the HTML that is generated, you will see code like:\n\n```\n.c10d15918.c7b3b8672 {\n  background: #D00E17;\n}\n```\n\n## Using the Auth0 CLI\n\nYou can use the [Auth0 CLI](https://github.com/auth0/auth0-cli) to easily update Page Templates.\n\nIn the Auth0 CLI, run:\n\n`auth0 universal-login templates update`\n\nThe Auth0 CLI will open two windows:\n\n*   A browser window with a [Storybook](https://storybook.js.org/) that shows the login page with the page template applied:\n    \n\n![Page Templates Storybook](https://images.ctfassets.net/cdy7uua7fh8z/1Ms4jj0pdMowoSZi54i72S/a2adcffa34a491ed7a587094884ad0f1/storybook.png)\n\n*   The default editor, with the page template code:\n    \n\n![undefined](https://images.ctfassets.net/cdy7uua7fh8z/3fTqpTmRRgVeLu5p8cioWa/e5a5c8a12dc93f5de95f12581ce0e5ff/vs-code.png)\n\nYou can now change the page template code, and you will be able to preview the changes in your browser window.\n\nOnce you close the window, you’ll be asked if you want to save the template. If you answer **Yes**, the template will be uploaded to your tenant.\n\n## Troubleshooting\n\nIf the template is not being applied, verify that you're navigating to `{customDomain}/authorize`. If you're navigating to `{yourDomain}/authorize`, Auth0 will not render the page template.",
  "title": "Customize Universal Login Page Templates",
  "description": "Learn how to create login page templates for the Universal Login experience.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/design/browser-based-vs-native-experience-on-mobile",
  "markdown": "# Mobile Device Login Flow Best Practices\n\nWhen developing a native mobile application, such as an iOS or Android application, you can choose between the following login flows: native or browser-based.\n\n![Native vs. Browser-based Login Page UX](https://images.ctfassets.net/cdy7uua7fh8z/7CRPh9xs7KloQB8gt2hSC/a69eeb843ccc2a6c5effe15be465c5d9/mobile-ux.png)\n\n*   When using a **browser-based** login flow, the user is shown a web browser and redirected to the Auth0 login page, where they can either sign up or log in. For example, an iOS application opens a SafariViewController or Android application opens a Custom Chrome Tab.\n    \n*   When using a **native** login flow, the user signs up or enters their credentials directly into the app.\n    \n\nIf your platform supports it, we recommend that you use a browser-based login flow where your application presents an in-application (embedded) browser for login and signup. Using an in-application browser gives your application the benefits of browser-based authentication, such as shared authentication state and security context, without disrupting the user experience by switching applications. Regardless of which option you choose, Auth0 supports either.\n\n## Single Sign-on across native applications\n\nIf you have several mobile applications (such as Google Drive, Google Docs/Sheets, YouTube, and so on), you might want to automatically log the user into all of them if they log into any one app.\n\nIf your applications use a wholly native experience, your users have to enter their credentials for each application. However, if you use a browser-based login flow you can implement Single Sign-on (SSO), reducing the number of times the user has to log in.\n\n## SSO across devices/desktops/laptops\n\nGoogle is currently investing in the ability to synchronize sessions across devices called Google SmartLock. This allows users to sign in using one device or desktop/laptop computer and automatically sync their session across all of their devices. To learn more, read [Sync passwords across your devices in the Google Help Center](https://get.google.com/smartlock/).\n\nWhile SmartLock is not yet universal, using browser-based login flows allows you to take advantage of this tool.\n\n## Phishing and security issues\n\nWith a native login flow, an unauthorized party could decompile or intercept traffic to/from your application to get the Client ID and authentication URL. With this information the unauthorized party could create a rogue application, upload it to an application store, and use it to phish for usernames, passwords, and Access Tokens.\n\nUsing a browser-based flow protects you from this, since the callback URL is linked to the application through universal links (iOS) or App Links (Android). Note, however, that this is **not** a universally supported feature. To learn more about universal app links, read [Universal Links for Developers on apple.com](https://developer.apple.com/ios/universal-links/). To learn more about App Links, read [Enable Android App Links Support](https://auth0.com/docs/get-started/applications/enable-android-app-links-support).\n\n## Implementation time\n\nUsing browser-based flows reduces the implementation time required, since everything is handled by the hosted login page (including multi-factor authentication and attack protection).\n\nBy default, Lock provides the user experience, but you can customize it with your own templates written in HTML and CSS, then integrate it with `auth0.js`.\n\n## Automatic improvements\n\nBy relying on a Universal Login experience, you will automatically receive new features without requiring you to make any changes to your native application. For example, if Auth0 adds support for FIDO/U2F, you would not need to make any code changes to your application before you can use this functionality. To learn more about FIDO/U2F, read [What is FIDO U2F? on yubico.com](https://www.yubico.com/solutions/fido-u2f/).\n\n## Load time and user experience\n\nWhen using a native login flow, the login UI and logic is included in the application. With a browser-based login flow, the user sees some loading time as the page loads.\n\nHowever, it's worth noting that the number of times a user logs in with the mobile devices is low. Once the user logs in, your application should only log them out if you revoke their access or if the user opts to log out.\n\n## Compliance with best practices\n\nAs explained in the [RFC 8252 OAuth 2.0 for Native Apps](https://tools.ietf.org/html/rfc8252), OAuth 2.0 authorization requests from native apps should only be made through external user-agents, primarily the user's browser. The specification details the security and usability reasons why this is the case.\n\n## Implementation examples\n\nYou can find instructions on how to implement a browser-based login flow in our Quickstarts:\n\n*   [iOS (Swift)](https://auth0.com/docs/quickstart/native/ios-swift/00-login)\n    \n*   [Android](https://auth0.com/docs/quickstart/native/android/00-login)\n    \n\nFor native login flows, you can find samples in the following GitHub repos:\n\n*   [iOS Swift](https://github.com/auth0-samples/auth0-ios-swift-sample/tree/embedded-login/01-Embedded-Login)\n    \n*   [Android](https://github.com/auth0-samples/auth0-android-sample/tree/embedded-login/01-Embedded-Login-Kt)",
  "title": "Mobile Device Login Flow Best Practices",
  "description": "Describes the pros and cons between a browser-based vs. native experience when implementing Auth0 on a mobile device",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/business-to-business/launch/tenant-check",
  "markdown": "# Tenant Check (B2B)\n\nThis section covers a list of configurations to check in your tenant. This should be done periodically during development and sufficiently before launch so you have time to fix anything amiss.\n\n## General tenant check\n\n### Tenant preparation check\n\nCheck to ensure you have set up tenant environments to support your SDLC lifecycle and that Dev, Test and Prod tenants are cleanly separated so that ongoing development work after launch doesn’t negatively impact your production environment.\n\nEvery company has some form of Software Development Life Cycle (SDLC), and throughout the development process you will want to align with that strategy. For instance, you need to be able to test your integration with Auth0 in a similar fashion as you test the applications themselves. It is therefore important to [structure Auth0 tenants to support your SDLC](https://auth0.com/docs/dev-lifecycle/setting-up-env), and there is a consistent pattern which our customers typically follow when it comes to the best practices associated with tenant layout for doing so:\n\n| Environment | Sample Tenant Name | Description |\n| --- | --- | --- |\n| Development | **company-dev** | A shared environment where most of your development work occurs |\n| QA/Testing | **company-qa** or **company-uat** | An environment for formal testing of the changes you've made |\n| Production | **company-prod** | The production tenant |\n\nIn some cases you may also want to create one or more sandboxes (e.g., **company-sandbox1**, **company-sandbox2**) so that you can test changes without compromising your development environment. This might be where you test deployment scripts and the like.\n\n### Best Practice\n\nYou can also take advantage of our [Implementation Checklists](https://auth0.com/docs/architecture-scenarios/checklists) that you can download and customize to meet your implementation project needs.\n\n### Tenant association check\n\nTo ensure that your [tenants are all associated with your Auth0 contractual agreement](https://auth0.com/docs/get-started/auth0-overview/create-tenants/child-tenants) and have the same features, ensure all your tenants are associated with your company account. If you have individual developers that want to create their own sandboxes for testing, make sure they get associated with your account so they have the same permissions too. To do this you should contact your Auth0 representative or the [Auth0 Support Center](https://support.auth0.com/).\n\n### Specify production tenant\n\nTo ensure Auth0 recognizes your production tenant, be sure to [set your production tenant](https://auth0.com/docs/dev-lifecycle/setting-up-env#set-the-environment) with the “production” flag in the Support Center.\n\n### Tenant production check\n\nAuth0 provides a [Production Check](https://auth0.com/docs/deploy-monitor/pre-deployment-checks) facility to detect many common errors. You should ensure this has been run and any findings from the report mitigated before launch.\n\nIn addition, you should check the [best practice configurations advice](https://auth0.com/docs/deploy-monitor/pre-deployment-checks/production-checks-best-practices), for which checking cannot be automated.\n\n### Tenant settings check\n\n#### Tenant settings\n\nMake sure to follow the Auth0 [tenant settings](https://auth0.com/docs/get-started/tenant-settings) recommendations in configuring your logo as well as your support email and support URL so users know how to get help if an issue occurs. You'll want to check your SSO Session Timeout settings and the list of dashboard admins with access to your production tenant as well.\n\n#### Error page customization\n\nIf there are issues encountered during user interactive workflow (e.g. user sign up or login), Auth0 provides error messages that indicate what the problem is under the hood. The default messages are somewhat cryptic, especially to the end user, since they will likely be missing context that only you can supply. As such, we recommend [customizing your error pages](https://auth0.com/docs/customize/login-pages/custom-error-pages) to provide the missing context-specific information directly to your users. Furthermore, customizing your error pages allows you to display your branding, not Auth0's, as well as provide useful information to your users as to what should be done next. This information might include a link to a FAQ or how to get in touch with your company's support team or help desk.\n\n### Best Practice\n\nOut-of-the-box there is no user interface for customizing Auth0 provided error pages, but you can use the [Tenant Settings endpoint of the Management API](https://auth0.com/docs/api/management/v2#!/Tenants/patch_settings) to configure them. Alternatively, if you can create and host your own error page, then you can have Auth0 direct users to that page instead of using the Auth0-hosted option.\n\n#### Legacy feature flags off\n\nIf you have an older tenant, you may have various legacy feature flags enabled in your [tenant settings advanced tab](https://auth0.com/docs/get-started/tenant-settings). If you have any toggles on in the “Migrations” section of this tab, you should review your usage and make plans to migrate off the legacy feature.\n\n#### Delegated admin extension\n\nWhile you are checking the list of users with access to your production tenant, don't forget to check any users specified in the [Delegated Admin Extension](https://auth0.com/docs/customize/extensions/delegated-administration-extension).\n\n### Custom Domain Naming set up\n\nBy default, the URL associated with your tenant will include its name and possibly a region-specific identifier. For example, tenants based in the US have the a URL similar to `https://example.auth0.com` while those based in Europe have something that is of the fashion `https://example.eu.auth0.com`. A [Custom Domain](https://auth0.com/docs/customize/custom-domains) offers a way of providing your users with a consistent experience by using a name that’s consistent with your organization's brand.\n\nIn addition, Custom Domain functionality offers you complete control over the certificate management process. By default, Auth0 provides standard SSL certificates, but if you configure a custom domain, you can use Extended Validation (EV) SSL certificates or similar to provide the visual, browser-based cues that offer your visitors additional peace of mind.\n\nIn general, we see customers having the most success when they use a centralized domain for authentication - this is especially the case if the company offers multiple products or service brands. By using a centralized domain, you can provide end users with a consistent user experience while also minimizing the need to maintain multiple production tenants in Auth0.\n\n## Application and Connection settings check\n\nEach of your connection settings should be reviewed against the [connection configuration best practices](https://auth0.com/docs/authenticate/connection-settings-best-practices).\n\nIn addition, you should review that all connections are appropriate and that no experimental connections are left in your production tenant as they could enable unauthorized access.\n\nIf you use SAML connections, it is a best practice to configure the connections to sign SAML requests.\n\n## Page customization check\n\nIf you use the Auth0 universal login page, password reset page, or Guardian multi-factor authentication, you should check that you have adequately customized the pages displayed to the end user.\n\n### Universal Login Page\n\n[Universal Login](https://auth0.com/docs/authenticate/login/auth0-universal-login) is the recommended method for authenticating users, and it centers around use of the Login page. You can customize the Login page to support your organization's branding requirements.\n\n### Password reset page\n\nThe [Password Reset](https://auth0.com/docs/customize/login-pages/classic-login/customize-password-reset-page) page is used whenever a user takes advantage of password change functionality and, as with the login page, you can customize it to reflect your organization's particular branding requirements.\n\n### Guardian\n\nThe Multi-factor Authentication pages can be customized by adjusting the Universal Login branding options in the [Universal Login Settings](https://manage.auth0.com/#/login_settings) section.\n\nIf you need further customization, you can also customize [the full HTML content](https://auth0.com/docs/secure/multi-factor-authentication/customize-mfa/customize-mfa-classic-login) to reflect your organization's particular UX requirements.\n\nIf you are using Auth0’s authorization feature, be sure to double check all privileges granted to ensure authorizations are appropriate for your production environment.\n\n## API configuration check\n\n### Access token expiration\n\nYou should double check the [API access token expiration settings](https://auth0.com/docs/get-started/apis/api-settings) to ensure they are appropriate for each API in your production environment.\n\n### API offline access\n\nIf your application does not request refresh tokens, this should be off.\n\n### Access token signing algorithm\n\nIt is recommended that the [API access token signing algorithm](https://auth0.com/docs/get-started/applications/signing-algorithms) be set to RS256 rather than HS256 to minimize exposure of the signing key.\n\n### API Access token validation\n\nIf you have any custom APIs, be sure to check that they are adequately [validating the access tokens](https://auth0.com/docs/secure/tokens/access-tokens/validate-access-tokens) they receive before using the information in them.\n\n## API Scopes\n\nIf you have applications making machine-to-machine calls to any of your APIs, you should review the scopes specified for the API to ensure they are all appropriate for your production environment. For further information see the documentation on [client credentials grant](https://auth0.com/docs/get-started/applications/update-grant-types).\n\n## Rules/Hooks check\n\nYou should also have aligned your rules with Auth0 [rules best practices](https://auth0.com/docs/rules-best-practices).\n\n## Email templates customized\n\nAuth0 makes extensive use of email to provide both user notifications and to drive the functionality needed for secure identity management (for example, email verification, account recovery, and brute force protections), and Auth0 provides a number of templates for these.\n\nOut of the box, the email templates used contain standard verbiage and Auth0 branding. However, you can configure almost every aspect of these templates to reflect the verbiage and user experience you want and make changes to things like the preferred language, accessibility options, and so forth.\n\nEmail templates are customized using [Liquid syntax](https://auth0.com/docs/customize/email/email-templates/use-liquid-syntax-in-email-templates). If you are interested in customizing your templates based on user preferences, you will also have access to the [metadata](https://auth0.com/docs/manage-users/user-accounts/metadata) located in users' profiles, as well as any specific application metadata too.\n\n## Attack protection configured\n\nThe reason that authentication systems are important is to prevent bad actors from accessing applications and user data that they should not. We want to place as many barriers as possible between those bad actors and access to our systems. One of the easiest ways to do this is to ensure that your [attack protection](https://auth0.com/docs/secure/attack-protection) with Auth0 is configured correctly, so take a moment to read the guidance on this subject and ensure that it's working correctly for you.\n\n### Best Practice\n\nAnomaly detection is handled behind the scenes by Auth0 and provides a great security feature for your product. If you're going to utilize it, ensure that you have set up your [Email Provider](https://auth0.com/docs/architecture-scenarios/b2b/operations#email-provider-setup) and configured your [Email Templates](https://auth0.com/docs/architecture-scenarios/b2b/branding#email-template-customization) before turning on email delivery to your users.\n\n## Project Planning Guide\n\nWe provide planning guidance in PDF format that you can download and refer to for details about our recommended strategies.\n\n[B2B IAM Project Planning Guide](https://assets.ctfassets.net/cdy7uua7fh8z/63F0WOPJdVzsPMxV1Xvp8x/7a329487c5e890d8e820f6a48983b46a/B2B_Project_Planning.pdf)",
  "title": "Tenant Check (B2B)",
  "description": "Tenant Checks to perform before launch of your B2B IAM implementation.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/business-to-business/launch/operations-readiness",
  "markdown": "# Operations Readiness (B2B)\n\n## Status\n\nYou should ensure your operations staff knows how to monitor Auth0 service status and has set up a means to subscribe to updates on Auth0 status.\n\nThe Auth0 [status dashboard](https://status.auth0.com/) together with the Auth0 [uptime dashboard](http://uptime.auth0.com/) shows current and past status of the Auth0 service in a human-readable format. If any monitoring alerts are triggered, and as a first step in troubleshooting, your operations staff should check the status dashboard to see if there is a current outage. The public cloud status page also provides a facility for subscribing to outage notifications, and we also recommend that you check the status of any third-party [external services](https://auth0.com/docs/deploy-monitor/monitor/check-external-services-status) you depend on, such as Social Providers. Having this information handy can help quickly eliminate possible causes when troubleshooting an issue and should be at the top of a troubleshooting checklist for developers as well as the help desk staff.\n\n### Best Practice\n\nInformation on how to check the status of Auth0 as well as any dependent services (such as Social Providers) should be at the top of a troubleshooting checklist for both developers and helpdesk staff, and we recommend you subscribe via the Auth0 status page to set up notification of any status updates.\n\nIn the event of an outage to the public cloud service, Auth0 performs a Root Cause Analysis (RCA) and publishes the results on the Auth0 status page. Auth0 performs a thorough investigation after an outage—including a determination of root cause, as well as contributing factors and how to prevent the issue from occurring again—and as a result, an RCA document can take a few weeks to be published.\n\n## Email provider setup\n\nYou should double check that you have set up your own email provider to support production volumes of emails that might be sent to customers for signup, email validation, account recovery and the like.\n\nAuth0 sends [emails](https://auth0.com/docs/customize/email) to users for events such as signup welcome, email validation, breached password, and password reset events. You can customize the email templates for each type of event, and advanced customization of email handling is also possible. Auth0 provides a test email provider with limited capacity for basic testing, but you must set up your own email provider for production use, and customization of email templates will not work until you have established your own provider.\n\n### Best Practice\n\nThe default Auth0 email provider does not support sending production volumes of email or customization of email templates. You should therefore configure your own email provider before deploying to production.\n\n## Infrastructure\n\n### Firewalls\n\nIf custom code executing in Auth0 (such as in an Action, Rule, Hook, or custom database scripts) will call a service inside your network, or if you configure an on-premise SMTP provider in Auth0, then you may need to configure your firewall to allow [inbound traffic from Auth0](https://auth0.com/docs/secure/security-guidance/data-security/allowlist). The IP addresses to allow through the firewall are specific to each region and are listed on the Rules, Hooks, custom database scripts, and email provider configuration screens in your Auth0 dashboard.\n\n## NTP\n\nIf this is not handled automatically by your hosting environment, you should have scripts which will automatically restart NTP (Network Time Protocol) if it fails and alerts that will notify someone if NTP is not running. Authentication transactions rely on accurate system time because security tokens may be evaluated as expired when received if there are time discrepancies between sending and receiving systems.\n\n## LoadBalancer timeouts checked\n\nIf you use the AD/LDAP connector, you should check the load balancer settings in your environment to see if they terminate long running connections that are inactive. If they do, you can modify the [Auth0 AD/LDAP Connection settings](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-connector-to-auth0) to use the `LDAP_HEARTBEAT_SECONDS` setting to send periodic heartbeat messages to keep the connection open.\n\n## LoadBalancer configuration\n\nIf your application maintains server state such that it depends on sticky load balancing to route users to a particular server, it can be beneficial to double check that all load balancer configurations are correct. One load balancer in a pool that is out of sync can cause intermittent errors that are hard to troubleshoot. A quick check of load balancer configuration can avoid such issues in the first place.\n\n## Logs\n\nYou should check that you have set up the ability to capture log data, that logs are covered by your data retention policy and you have mechanisms to enforce logs data retention limits. You should also make sure that your development, support, and security teams know how to access logs data for troubleshooting and forensics purposes. Exporting log files to services that provide comprehensive analytics can help you identify patterns such as usage trends and errors.\n\nAuth0 provides extensive capability when it comes to the logging of events, and also in the scanning of logs in order to identify event anomalies (see [logs documentation](https://auth0.com/docs/deploy-monitor/logs) for further details). Standard log retention period for Auth0 logs is determined by subscription level with the shortest period being 2 days and the longest period being only 30 days. Leveraging Auth0 support for integrating with external logging services will allow you to retain logs outside of this, and will also provide for log aggregation across your organization.\n\n### Best Practice\n\nYou should leverage one of the log streaming solutions to send log data to an external log analytics service. This will enable keeping data for longer periods of time and provide advanced analytics on the log data.\n\nYou should review the log data [retention period](https://auth0.com/docs/deploy-monitor/logs/log-data-retention) for your subscription level, and implement a log data export extension to send log data to an external log analytics service. You can use one of our [log streaming solutions](https://marketplace.auth0.com/features/log-streaming) in Auth0 Marketplace.\n\nDevelopment teams can use log files for troubleshooting and detecting intermittent errors that may be hard to find via QA tests. Security teams will probably want log data in case forensic data is ever needed. Exporting log files to services that provide comprehensive analytics can help you see patterns such as usage trends and attack protection triggers.\n\n### Rate limits and other errors\n\nAuth0 provides a unique error code for errors reported when the [rate limit is exceeded](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy). You should set up automatic scanning of logs to check for rate limit errors so you can proactively address activity that hits rate limits before it causes too much trouble for your users. Auth0 also publishes error codes for other types of errors, and you will find it helpful to scan logs for [authentication errors](https://auth0.com/docs/libraries/common-auth0-library-authentication-errors) as well as errors from Auth0 Management API calls (Management API error codes are shown below each call in the [Management API Explorer](https://auth0.com/docs/api/management/v2)).\n\n### Best Practice\n\nCalling the Management API to retrieve user profile information from within a Rule is a common cause of rate limit errors because such API calls can execute for every login as well as periodic session checks.\n\n## Monitoring\n\nBe sure to set up proactive monitoring of the Auth0 service as well as end-to-end authentication through your application.\n\nYou should establish mechanisms for [monitoring Auth0 implementations](https://auth0.com/docs/deploy-monitor/monitor), so your support or operations team receives the timely information needed to proactively handle service outages. Auth0 provides monitoring endpoints that can be incorporated into your monitoring infrastructure. These endpoints are designed to provide a response suitable for consumption by monitoring services. It should be noted that they only provide data on Auth0. For complete end-to-end monitoring, which is essential for checking the ability of users to log in, we recommend that you set up [synthetic transaction monitoring](https://auth0.com/docs/deploy-monitor/monitor/monitor-applications). This will provide greater granularity for your monitoring and enable you to detect outages unrelated to Auth0 as well as degradation of performance, so you can respond more proactively.\n\n### Best Practice\n\nYou should set up the ability to send synthetic login transactions to facilitate end-to-end monitoring of authentication. You can do this with a simple application that uses the [Resource Owner Password Grant](https://auth0.com/docs/api-auth/tutorials/password-grant) in combination with a test user that has no privileges, and don’t forget about [Auth0 rate limiting policies](https://auth0.com/docs/policies/rate-limits) too.\n\n## Auth0 Notifications\n\nYou should ensure your team is monitoring all of the following communication channels from Auth0 to stay abreast of important announcements and changes.\n\nThere are several different types of notifications from Auth0 that you should watch for as they contain important information that could impact your tenant(s) and project.\n\n### Dashboard notifications\n\nFrom time to time, Auth0 may send an important announcement related to your tenant. These announcements about your service will be sent to your Auth0 dashboard and depending on the severity of the announcement, via email to the registered Auth0 dashboard administrators. You should make a regular practice of logging in to the dashboard and checking the bell icon at the top for any important notices. In addition, you should review emails from Auth0 in a timely fashion as they may convey important information about changes or actions you need to take.\n\n### Auth0 security bulletins\n\nAuth0 regularly conducts a number of security-related tests, and if any issues are found, will proactively identify and notify customers who need to make security-related changes. Due to the extensible nature of the Auth0 product, however, it may not be possible for Auth0 to identify every impacted customer, so you should regularly check Auth0 [security bulletins](https://auth0.com/docs/secure). You should make sure a security contact for your organization is listed in Support Center.\n\n### Best Practice\n\nIt is a best practice to check the Auth0 [Security Bulletins](https://auth0.com/docs/security/bulletins) page periodically and take the recommended action if you are impacted by any security bulletins.\n\n### Change log\n\nAuth0 provides information on changes to the service in the Auth0 [change log](https://auth0.com/changelog). You should make a regular practice of reviewing Auth0 change logs to be aware of changes. Support teams researching an issue may find it useful to review the change log to determine if recent changes might be related, especially if these are breaking changes. Development teams will also want to review the change logs to identify new features that may be beneficial.\n\nIn addition, you should periodically check the [Auth0 migrations page](https://auth0.com/docs/troubleshoot/product-lifecycle/deprecations-and-migrations) for news about upcoming deprecations that might require your team to make changes.\n\n## Automated deployment, version control\n\nWhile not required, we recommend you set up automated deployment with version control. Using automation to deploy or revert changes to the dev, test, and production environments enables you to respond more efficiently to issues post-launch.\n\nIn addition to adopting best practices for change management and [QA](https://auth0.com/docs/get-started/architecture-scenarios/business-to-consumer/quality-assurance), successful customers also integrate Auth0 collateral management as part of an automated deployment process. As discussed in the Architecture section under [SDLC support](https://auth0.com/docs/architecture-scenarios/b2c/architecture#sdlc-support), you should configure separate Auth0 tenants for development, testing, and production environments, where the tenant configuration is the same in each environment. Using deployment automation helps ensure that tenant configuration is consistent across environments, which reduces bugs and other issues.\n\n### Best Practice\n\nHowever you configure deployment automation, we’d recommend you unit test your rules, custom DB scripts, and hooks prior to deployment, and run some integration tests against your tenant post-deployment too. For more details regarding this, see the [Quality Assurance](https://auth0.com/docs/architecture-scenarios/b2c/quality-assurance) guidance provided.\n\nAuth0 provides support for the following deployment automation approaches, which can be used in conjunction if desired:\n\n*   The [Auth0 Deploy CLI tooling](https://auth0.com/docs/deploy-monitor/deploy-cli-tool) provides an easy-to-use script that integrates with your existing Continuous Integration/Continuous Deployment (CI/CD) pipeline.\n    \n*   Auth0 [Source Control Extensions](https://auth0.com/docs/customize/extensions) provides an easy-to-set-up basic automation process with very low maintenance if you don't have a CI/CD pipeline, or in cases where you cannot directly integrate with a CI/CD pipeline.\n    \n*   If your development workflow leverages [Terraform](https://www.terraform.io/), [Auth0 Terraform Provider](https://auth0.com/docs/deploy-monitor/auth0-terraform-provider) helps you manage your Auth0 tenant configurations.\n    \n\nEach environment may also need some environment-specific configuration—Application Client ID’s and Client Secrets will be different between the Auth0 tenants, for example—so you’re going to want some way of being able to dynamically reference this rather than having hard-coded values. Auth0 provides support for handling environment-specific configuration information through one of the following two approaches:\n\n*   Use [Tenant Specific Variables](#tenant-specific-variables)\n    \n*   Use [keyword replacement](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli) if using the Auth0 Deploy CLI tool\n    \n\n## Tenant-specific variables\n\nAuth0 allows you to configure variables that are available from within custom [extensibility](https://auth0.com/docs/customize/extensions); these can be thought of as environment variables for your Auth0 tenant. Rather than hard code references that change when moving code between development, test, and production environments, you can use a variable name that is configured in the tenant and referenced by the custom extensibility code. This makes it easier for the same custom code to function, without changes, in different tenants as the code can reference variables which will be populated with tenant-specific values at execution time:\n\n*   For use of variables in Actions, see [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action) to learn how to configure secrets in the editor\n    \n*   For use of variables in Rules, see how to [configure values](https://auth0.com/docs/customize/rules/configuration)\n    \n*   For use of variables in Hooks, see how to configure [secrets](https://auth0.com/docs/customize/hooks/hook-secrets) in the editor\n    \n*   For use of variables in Custom DB Scripts, see the [configuration parameters](https://auth0.com/docs/connections/database/custom-db/create-db-connection#step-3-add-configuration-parameters)\n    \n\n### Best Practice\n\nIt’s a recommended best practice to use variables to contain tenant-specific values as well as any sensitive secrets that should not be exposed in your custom code. If your custom code is deployed in GitHub/Gitlab/Bitbucket/VSTS, then using a tenant-specific variable avoids exposure of sensitive values via your repository.\n\n## Backup / Restore\n\nYou should have a plan and mechanism in place to support any backup/restore capability needed for your project. This can be done using the Auth0 Management API for data as well as the Automated Deployment capabilities described in the automated deployment section for Auth0 configuration.\n\nAs noted in the Auth0 [Data Tenant Restore policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies) and [Data Transfer policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/data-export-and-transfer-policy), Auth0 does not restore deleted tenants or move data between tenants. Auth0 provides the Auth0 Management API to provide customers a completely flexible capability to backup, restore and move data as needed. Customers can write scripts to retrieve data from Auth0 for backup purposes, and similarly write scripts for use with the Automated Deployment capability to restore any aspect of their Auth0 configuration.\n\n## Versions Up to Date\n\nYou should double check that all technologies in your application stack, as well as browser versions used by your users are on current, up-to-date versions as this will impact Auth0’s ability to provide support if issues arise.\n\n*   Check you are using the latest supported version of node.js in [Auth0 dashboard settings](https://auth0.com/docs/get-started/tenant-settings).\n    \n*   Check you are using a version of SDK/Libraries supported by Auth0 per the [Auth0 Support Matrix](https://auth0.com/docs/troubleshoot/customer-support/product-support-matrix).\n    \n\n## Certificate rollover plan\n\nCertificates may be used in identity deployments. To ensure a certificate expiration does not catch you by surprise, you should have a list of certificates in your environment along with the expiration dates, how you will be notified when expiration draws near and how the certificate rollover process works.\n\n### SAML connections\n\nFor SAML connections, you obtain a certificate from the IdP and upload it to a SAML connection for the IdP in your Auth0 dashboard. When one of these certificates is about to expire, Auth0 will send email to dashboard administrators warning of the upcoming expiration. You can obtain the new certificate and upload it using the connection configuration screen.\n\n### WS-Fed connections\n\nFor Web Service Federation (WS-Fed) connections, if you configure them by specifying an ADFS URL, any changes will be picked up by a daily update. You can trigger an update manually by visiting the connection configuration page in the Auth0 dashboard and doing a Save. If a certificate is changed at the remote IdP, Auth0 can be updated by those mechanisms or by uploading a new metadata file in the same connection configuration screen.\n\n## Disaster Recovery / Business Continuity Plan in place\n\nWhile not an absolute requirement prior to launch, it is useful to have a disaster recovery plan in place to ensure business continuity in the face of different types of disasters, including system outages and natural disasters hitting a region where critical staff is located.\n\n## Processes documented\n\nAnother item which is not an absolute requirement, but also recommended is to ensure all processes related to Auth0 are documented. This can include the following:\n\n*   Change management for configuration\n    \n*   Deployment of new changes and any automatic deployment mechanisms used, how to revert to previous version if issues found\n    \n*   Certificate rollover processes, if any\n    \n*   Adding or removing new Identity Providers, if applicable\n    \n*   Changes to user profile structure in Auth0 or in directories Auth0 pulls from\n    \n*   Adding or removing applications or APIs\n    \n*   Capturing and exporting logs\n    \n*   Backup/restore process you have implemented\n    \n*   User management (forgotten password, lost phone)\n    \n*   Root cause analysis after an incident\n    \n\n## Project Planning Guide\n\nWe provide planning guidance in PDF format that you can download and refer to for details about our recommended strategies.\n\n[B2B IAM Project Planning Guide](https://assets.ctfassets.net/cdy7uua7fh8z/63F0WOPJdVzsPMxV1Xvp8x/7a329487c5e890d8e820f6a48983b46a/B2B_Project_Planning.pdf)",
  "title": "Operations Readiness (B2B)",
  "description": "Operations checks to perform before launch of your B2B IAM implementation.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/business-to-business/launch/compliance-readiness",
  "markdown": "# Compliance Readiness (B2B)\n\nThere are several requirements related to privacy and compliance. Auth0 cannot provide legal guidance on your privacy or other regulatory obligations, but we can provide a curated list of privacy requirements below for which Auth0 offers features that may help you meet your obligations. Prior to launch, you should check that you’ve met all your privacy obligations and review the features outlined below to ensure you’re leveraging all the available Auth0 features to help you meet your privacy and compliance requirements.\n\n## Publish privacy policy and obtain user consent\n\nIf you collect or process personal data about users, you should have published a privacy policy and have established procedures to ensure your operations abide by the contents of the policy. You also need to obtain a user’s consent for the collection and processing of information. Auth0 provides options for [displaying a link to your privacy policy storing user consent](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr).\n\n## Provide access to view, correct and erase data\n\nPrivacy legislation often requires that users have the right to view and correct any data held about them. If you are a data controller, you should provide a mechanism for this. Auth0 customers can build a self-service feature to access and correct data via the management API.\n\n## Provide access to data portability\n\nIf you are a data controller, you may be obligated to provide users a means to export their data from your system in a transportable format. Auth0 provides user data portability mechanisms to help you satisfy this obligation via both manual export capabilities and the Management API which enables you to implement a self-service feature for users.\n\n## Take steps to minimize personal data\n\nYou should have reviewed the personal data you collect about users to ensure it is legitimately required for the purposes of the processing covered in the privacy policy and consent. You should also confirm you have minimized the data you collect, and established a data retention policy. You can optionally elect to encrypt data you store in user metadata for additional protection.\n\n## Data retention policy enforcement automated\n\nYou should have a published data retention policy and automate the enforcement of it. The Auth0 management API or the Auth0 dashboard can be used to facilitate [erasure of user accounts](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-right-to-access-correct-and-erase-data).\n\n## Protect personal data\n\nRegardless of whether you are a data controller or a data processor, you have obligations to protect the personal data you hold about users. This includes use of encryption where possible, and implementing reasonable security measures to protect user accounts. Prior to launch, you should check if you are using all the security features available from Auth0 to help with this such as Brute Force Detection, Multi-Factor Authentication (for both users and administrators), and a strong password policy if using passwords. You should also ensure you have a process ready to respond to Brute Force attacks.\n\n## Supplier evaluation\n\nAnother common compliance obligation is to perform due diligence review of the security of any third-party suppliers to which you expose personal data. For Auth0, you will find information to facilitate this task on the Auth0 [security and certifications](https://auth0.com/security/) page where you can view the security certifications Auth0 has obtained.\n\n## Additional resources\n\nAdditional resources that may be useful for your compliance requirements include:\n\n*   [Auth0 Privacy Policy](https://auth0.com/privacy)\n    \n*   [Security and Compliance](https://auth0.com/security/)\n    \n*   [Auth0 Compliance and Certifications](https://auth0.com/docs/secure/data-privacy-and-compliance)\n    \n*   [Auth0 General Data Protection Regulation Compliance](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr)\n    \n\n## Project Planning Guide\n\nWe provide planning guidance in PDF format that you can download and refer to for details about our recommended strategies.\n\n[B2B IAM Project Planning Guide](https://assets.ctfassets.net/cdy7uua7fh8z/63F0WOPJdVzsPMxV1Xvp8x/7a329487c5e890d8e820f6a48983b46a/B2B_Project_Planning.pdf)",
  "title": "Compliance Readiness (B2B)",
  "description": "Compliance checks to perform before launch of your B2B IAM implementation.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/business-to-business/launch/testing",
  "markdown": "# Testing Complete (B2B)\n\nPrior to launch, you should have completed all the testing that applies to your environment.\n\nQuality Assurance is important in identifying issues before they impact your customers and, depending on the nature of your project, there are several different types of quality assurance testing that you’re going to want to consider as part of your integration with Auth0:\n\n*   Is your application easy to understand and use, even by those with a disability?\n    \n*   Does your application need to work across various different browsers and devices?\n    \n*   Does your application need to work in multinational and/or international environments?\n    \n*   How will your application perform when subjected to unexpected production loads?\n    \n*   How can you ensure your application is safe from security-related vulnerabilities?\n    \n\nAuth0 [Universal Login](https://auth0.com/docs/authenticate/login/auth0-universal-login) and associated UI widgets (such as [Lock](https://auth0.com/docs/libraries/lock)) have already been designed and built following usability and accessibility best practices, and provide tested out-of-box support for a whole host of [browsers and devices](https://auth0.com/docs/troubleshoot/customer-support/product-support-matrix). Support for [internationalization](https://auth0.com/docs/customize/internationalization-and-localization) (I18N) is also provided out-of-box, with built-in extensibility designed for custom multi-language and localization (L10N) situations.\n\nTo ensure functional requirements are met and unexpected events are handled correctly, guidance is provided for testing the [integration](#integration-testing) between your application(s) and Auth0, and for [unit testing](#unit-testing) individual extensibility modules (such as [Rules](https://auth0.com/docs/customize/rules/debug-rules), [Hooks](https://auth0.com/docs/customize/hooks/update-hooks), and Custom Database scripts). Guidance is also provided regarding Auth0's [penetration testing policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/penetration-testing-policy) to help when testing for security vulnerability, and also how [Mock](#mock-testing) testing can be leveraged in conjunction with our [load testing policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/load-testing-policy) to help ensure your application(s) perform under unexpected load.\n\n## Unit testing\n\nThe objective of unit testing is to test individual units of code. If you create custom code within Auth0 in the form of Rules, Hooks, and/or Custom DB scripts, you should consider use a testing framework (such as [Mocha](https://mochajs.org/)) to test your code. Companies who have been most successful with Auth0 have found it useful to execute these unit tests prior to [automatically deploying](https://auth0.com/docs/get-started/architecture-scenarios/business-to-business/deployment) Auth0 tenant configuration and collateral.\n\n## Integration testing\n\nIt is a recommended best practice that you set up different tenants for development, testing, and production as discussed in Architecture guidance for [SDLC support](https://auth0.com/docs/architecture-scenarios/b2b/architecture#sdlc-support). Auth0 allows you to configure variables that are available from within custom [extensibility](https://auth0.com/docs/customize/extensions); these can be thought of as environment variables for your Auth0 tenant. Rather than hard code references that change when moving code between development, test, and production environments, you can use a variable name that is configured in the tenant and referenced by the custom extensibility code. This makes it easier for the same custom code to function, without changes, in different tenants as the code can reference variables which will be populated with tenant-specific values at execution time:\n\n*   For use of variables in Rules, see how to [configure values](https://auth0.com/docs/customize/rules/configuration)\n    \n*   For use of variables in Hooks, see how to configure [secrets](https://auth0.com/docs/customize/hooks/hook-secrets) in the editor\n    \n*   For use of variables in Actions, see Explore Flows and Triggers\n    \n*   For use of variables in Custom DB Scripts, see the [configuration parameters](https://auth0.com/docs/connections/database/custom-db/create-db-connection#step-3-add-configuration-parameters)\n    \n\n### Best Practice\n\nIt’s a recommended best practice to use variables to contain tenant-specific values as well as any sensitive secrets that should not be exposed in your custom code. If your custom code is deployed in GitHub, then using a tenant-specific variable avoids exposure of sensitive values via your GitHub repository.\n\n### Test automation\n\nYou can automate your overall build process by incorporating deployment automation as well as test automation. This can be used to deploy new versions of configuration and/or custom code to Auth0 and execute automated tests. If the tests uncover any failures, the deployment automation capabilities can be used to revert to the last working version. For further information, see the [deployment automation guidance](https://auth0.com/docs/get-started/architecture-scenarios/business-to-business/deployment) provided.\n\n## Mock testing\n\nIn a balance between Auth0’s [load testing policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/load-testing-policy) and the desire to load test, it is common practice among Auth0’s customers to mock out Auth0’s endpoints. This is a valuable practice in order to ensure that your application works with your expected interfaces without having to restrict your testing, and tools such as [MockServer](http://www.mock-server.com/), [JSON Server](https://github.com/typicode/json-server) or even [Postman](https://learning.getpostman.com/docs/postman/mock_servers/setting_up_mock/) can be used to assist.\n\n## Pen testing (optional)\n\nIf you will be conducting penetration tests, you should be aware of Auth0’s [penetration testing policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/penetration-testing-policy) and abide by it. Penetration tests require advance notice to Auth0 so that your tests are not mistaken for malicious activity and shut down.\n\n## Load testing (optional)\n\nIf you will be conducting load tests, you should be aware of Auth0’s[](https://auth0.com/docs/policies/load-testing) [load testing policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/load-testing-policy) and abide by it. Load tests require advance notice to Auth0. In planning your load testing, you will also need to be aware of Auth0’s [API rate limits](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy).\n\nLoad tests require prior approval from Auth0, as explained in the Auth0 load test policy. Be sure to note the lead time for a request to be reviewed and allow enough time for review as well as conducting the tests. If your load test request has been approved, the following guidance can help avoid errors and faulty test results.\n\n*   Run an HTTP trace on a test execution of your application to identify all the calls your application or intended test needs to make, and make sure your test includes them so it is representative of what will happen in production.\n    \n*   Design your test to be mindful of Auth0 API rate limits.\n    \n*   Use of any custom code in Auth0 (Actions, Rules, Hooks, custom database scripts, custom OAuth connections) will invoke the Auth0 custom code sandbox and this may cost more in terms of performance. Turn off Rules unless they are essential to the test. If they are off you will have higher throughput than if they are on.\n    \n*   Estimate the expected overall load for your production environment and percent of calls to each endpoint and structure your performance test accordingly so it gives you a realistic test result. Different endpoints have different performance costs. Failure to design a representative test will result in misleading results.\n    \n*   Don’t make calls that depend on the results of earlier calls without checking that pre-requisite calls or responses have completed. Simply building in a delay may not be adequate.\n    \n*   Be sure to implement adequate error handling. A frequent cause of issues during tests is errors in custom code (Actions, Rules, Hooks, custom database scripts, custom OAuth connection scripts) caused by unhandled exceptions in the custom code.\n    \n*   Load tests should be written to start at a low level and increase the load gradually, capturing data at each level, to get the most useful results. Starting at a high level and immediately failing gives less information about what the system can sustain.\n    \n*   It is normal to need to run a performance test multiple times, possibly adjusting the code under test or the test harness/configuration. Be sure to start your testing early to allow enough time for more than one iteration.\n    \n*   Use your own mail provider account and make sure to arrange ahead of time for enough mail-sending quota or you may be rate-limited by the mail provider. Turn off mail sending if you do not use it.\n    \n*   Be sure to use your own account credentials for all social connections rather than Auth0 dev keys. In the Auth0 dashboard, go to Connections -> Social -> {name of connection}—to see instructions for how to add your own social provider account credentials into the connection. Note: some social providers do not allow load testing. Check your provider(s) for their policy\n    \n*   In order to avoid rate limiting, and more accurately simulate real load, your tests will need to send requests for different users, not all requests for the same user. If you use only one or a few users, caching may reduce the effective load and not provide realistic results.\n    \n*   Be sure to stay within the agreed-upon parameters for the test and the Auth0 load test policy. Auth0 reserves the right to terminate any performance/load testing which does not stay within the bounds of agreed-upon parameters or which extends beyond the scheduled test window.\n    \n\n## Project Planning Guide\n\nWe provide planning guidance in PDF format that you can download and refer to for details about our recommended strategies.\n\n[B2B IAM Project Planning Guide](https://assets.ctfassets.net/cdy7uua7fh8z/63F0WOPJdVzsPMxV1Xvp8x/7a329487c5e890d8e820f6a48983b46a/B2B_Project_Planning.pdf)",
  "title": "Testing Complete (B2B)",
  "description": "Testing preparation for the launch of your B2B IAM implementation.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/business-to-business/launch/support-readiness",
  "markdown": "# Support Readiness (B2B)\n\n## Review Auth0 Policies\n\nWhen starting to prepare for your launch, be sure to read through [Auth0 Policies](https://auth0.com/docs/troubleshoot/customer-support/operational-policies) and prepare your production operations accordingly for any required lead times or responsibilities on your part, according to the policies.\n\n## Review your Support plan, SLAs, Severity definitions and Support center documentation\n\nYou should review the specifics of the [support plan](https://auth0.com/docs/troubleshoot/customer-support) you’ve purchased and the Service Level Agreements associated with it, to ensure it is adequate for your needs. If you haven’t already done so, explore the [support center](https://support.auth0.com/) and familiarize yourself with support features such as viewing suggested solutions to common issues and [filing tickets](https://auth0.com/docs/troubleshoot/customer-support/open-and-manage-support-tickets) and viewing your quota usage. It will be helpful to review the severity level definitions for support tickets so that you file tickets with the correct severity. One important note is that it is not possible today in the Support Center to increase the severity of a support ticket. If you file a ticket for a medium-grade issue which later becomes a high severity issue, you should file a new urgent, high severity ticket that explains anything new that triggers the urgency and references the original ticket for details.\n\nYou should also ensure your development and support teams are familiar with the [Auth0 community forum](https://community.auth0.com/), discussed further below. Customers can often find answers there right away to common issues, avoiding the need to file a ticket, so it should be your first stop for technical questions.\n\nThe [Auth0 community forum](https://community.auth0.com/) contains a wealth of information. If you have a question, chances are someone else has already asked the question on the forum. Answers are contributed by both Auth0 staff and the larger community of Auth0 users.\n\nImportant notices are posted to the community forum to help you stay abreast of important news. Be sure to check out the “Community” and “FAQ” categories. The Community category contains pro-active posts on product announcements, roadmap information, How-To videos as well as important information about any upcoming feature deprecations.\n\nIt’s a good idea to check out the Auth0 Community on a regular basis, not just when you have questions. While you are there, if you see a question you’ve already solved, please contribute your wisdom to help others!\n\n## Gather Auth0 troubleshooting information needed for support tickets\n\nWe recommend your support team become familiar with our [troubleshooting guides](https://auth0.com/docs/troubleshoot) specific to identity protocols and Auth0. This includes the questions to research and information to collect before posting a question on the Auth0 forum or filing a support ticket. Authentication transactions often span multiple systems so there are some specialized troubleshooting techniques that are helpful to learn.\n\n## Have troubleshooting tools ready\n\nYour team will doubtless have already done some troubleshooting during the development of your application, but we recommend making sure your support team is also familiar with any tools below relevant to your project. If you need to file a ticket, the Auth0 support team may ask for a HAR (HTTP Archive) file to help analyze the issue so it’s helpful for your support staff to be familiar with how to do this.\n\n### Capture HAR file\n\nA [HAR file](https://auth0.com/docs/troubleshoot/troubleshooting-tools/generate-and-analyze-har-files) captures a sequence of browser interactions and is a commonly used tool when debugging authentication issues. The process of authenticating a user often involves redirecting the user’s browser from an application to Auth0, and possibly to another remote Identity Provider, depending on the type of connection used. You can capture the redirection and the responses and analyze it to find clues about the cause of an issue.\n\n### Analyze HAR file\n\nAnalyze the HAR file to obtain valuable troubleshooting information. It shows the sequence of browser redirects involved in an authentication transaction, along with the parameters used. The HAR file also shows if the authentication process stopped mid-stream and if so where, which helps to pinpoint the location of the issue. The HAR file contains tokens returned to the application front-end, and these can be pasted into appropriate viewers to see if they contain the expected contents.\n\n### View JWT\n\nThe [jwt.io](https://jwt.io/) tool was written by Auth0 and allows you to view the contents of a JWT\\-formatted token. Applications that delegate authentication to Auth0 via OIDC will receive an ID Token from Auth0. Depending on your type of application, the ID Token may be captured in a HAR file. The ID Token is in JWT format and can be pasted into jwt.io to view the contents of the ID Token.\n\n### View SAML request/response\n\nThere are many SAML decoders available. The [samltool.io](https://samltool.io/) decoder was written by Auth0 and allows you to view the contents of a SAML Request or Response. Applications that delegate authentication to Auth0 via SAML or use a SAML type of connection in Auth0 will use SAML Requests and Responses. These SAML Requests and Responses may be captured in a HAR file. The requests and responses can be pasted into samltool.io or other SAML decoders to view the contents of the SAML Request or Response.\n\n## Review Auth0 support matrix\n\nOne potential cause of issues is using out of date versions of SDKs or libraries. We strongly recommend your team check your software stack, browsers, SDKs and libraries against the [Auth0 support matrix](https://auth0.com/docs/troubleshoot/customer-support/product-support-matrix) to ensure you are running on up-to-date, supported versions. In the event of an issue, the Auth0 support team may ask you to upgrade to a supported version. To avoid slowing down progress on issue resolution, be sure you are on up-to-date versions.\n\n## Use Auth0 feedback portal\n\nAuth0 welcomes feedback and ideas from Auth0 customers. If you have a suggestion for our product team, you can submit product feedback directly on the [Product Feedback portal](https://auth0.com/feedback).\n\n## Prepare real-time webtask log extension\n\nFor debugging and supporting custom code in Auth0, including Actions, Rules, Hooks, custom database scripts, and custom OAuth connections, knowledge of the [Realtime Webtask Log](https://auth0.com/docs/customize/extensions/real-time-webtask-logs) is essential. This enables you to view output from your custom code, including output from console.log statements.\n\nWe recommend installing the real-time webtask log extension and getting familiar with using it to view log output from your custom code as a debugging and support tool.\n\n## Troubleshooting\n\nYou should prepare to [troubleshoot basic issues](https://auth0.com/docs/troubleshoot/basic-issues) both during your development as well as after your application or API goes live. Make sure your development and support teams are prepared with knowledge of troubleshooting tools, and the list of common issues to check when troubleshooting an issue.\n\n## Project Planning Guide\n\nWe provide planning guidance in PDF format that you can download and refer to for details about our recommended strategies.\n\n[B2B IAM Project Planning Guide](https://assets.ctfassets.net/cdy7uua7fh8z/63F0WOPJdVzsPMxV1Xvp8x/7a329487c5e890d8e820f6a48983b46a/B2B_Project_Planning.pdf)",
  "title": "Support Readiness (B2B)",
  "description": "Support readiness for the launch of your B2B IAM implementation.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/libraries/common-auth0-library-authentication-errors",
  "markdown": "# Common Auth0 Library Authentication Errors\n\nThe actions or input data of your users, during the sign up or the log in processes, might trigger errors. Here is a list of the most common errors that you might get if you use any of the Auth0 libraries for authentication.\n\n## Sign up\n\nIn the case of a failed signup, the most common errors are:\n\n| **Error** | **Description** |\n| --- | --- |\n| **invalid\\_password** | If the password used doesn't comply with the password policy for the connection |\n| **invalid\\_signup** | The user you are attempting to sign up is invalid |\n| **password\\_dictionary\\_error** | The chosen password is too common |\n| **password\\_no\\_user\\_info\\_error** | The chosen password is based on user information |\n| **password\\_strength\\_error** | The chosen [password is too weak](https://auth0.com/docs/connections/database/password-strength) |\n| **unauthorized** | If you cannot sign up for this application. May have to do with the violation of a specific rule |\n| **user\\_exists** | The user you are attempting to sign up has already signed up |\n| **username\\_exists** | The username you are attempting to sign up with is already in use |\n\n## Log in\n\nIn the case of a failed login, the most common errors are:\n\n| **Error** | **Description** |\n| --- | --- |\n| **access\\_denied** | When using web-based authentication, the resource server denies access per OAuth2 specifications |\n| **invalid\\_user\\_password** | The username and/or password used for authentication are invalid |\n| **mfa\\_invalid\\_code** | The multi-factor authentication (MFA) code provided by the user is invalid/expired |\n| **mfa\\_registration\\_required** | The administrator has required [multi-factor authentication](https://auth0.com/docs/mfa), but the user has not enrolled |\n| **mfa\\_required** | The user must provide the [multi-factor authentication](https://auth0.com/docs/mfa) code to authenticate |\n| **password\\_leaked** | If the password has been leaked and a different one needs to be used |\n| **PasswordHistoryError** | The password provided for sign up/update has already been used (reported when [password history](https://auth0.com/docs/connections/database/password-options#password-history) feature is enabled) |\n| **PasswordStrengthError** | The password provided does not match the connection's [strength requirements](https://auth0.com/docs/connections/database/password-strength) |\n| **too\\_many\\_attempts** | The account is blocked due to too many attempts to sign in |\n| **unauthorized** | The user you are attempting to sign in with is blocked |\n\n## Learn more\n\n*   [Attack Protection](https://auth0.com/docs/secure/attack-protection)",
  "title": "Common Auth0 Library Authentication Errors",
  "description": "Describes common sign up and login errors that you might see when you authenticate users using Auth0 libraries.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/business-to-business/launch/launch-day",
  "markdown": "# Launch Day Preparation (B2B)\n\n## Notifications / announcements\n\nIt helps a launch go smoothly if all stakeholders are aware of the impending launch and understand the launch plan as well as their role and responsibilities. In addition to notifying teams that will be actively involved, it can help to notify teams that might be needed if anything goes wrong. Having someone on standby during a launch can help expedite response. Be sure to identify and notify any team that might need to answer questions from customers, including on social media.\n\n### Parties to notify\n\n*   Customers\n    \n*   Business parters, if applicable\n    \n*   Application team(s) impacted by launch\n    \n*   Support teams\n    \n*   Network teams (network changes, on standby, in case of issues)\n    \n*   Security teams (on standby, in case of issues)\n    \n*   Marketing teams (ready for announcements, response to issues)\n    \n*   Social media teams (ready to monitor social media, respond)\n    \n*   Sales teams (prepared to answer questions from customers)\n    \n*   Customer success teams (prepared to answer questions from customers)\n    \n\n## Notification plan\n\nYour notification plan should include elements such as the target audience, the key takeaways for the audience, the message content, the plans for distributing the notification and how to test the messaging.\n\nA list of elements to include in the plan are:\n\n*   Target audience (consider both internal & external audiences)\n    \n*   Message\n    \n*   Timing\n    \n*   Dependencies\n    \n*   Responsible parties (who will send it)\n    \n*   Mechanism (how it will be communicated)\n    \n*   Test message and delivery (if applicable - test to ensure notifications sent)\n    \n\n## Notification distribution\n\nA common tactic is to release notifications in batches to spread out the initial onslaught of load and reduce the scope of confusion if there are any unforeseen glitches. It’s easier to correct issues with a small group than during a big-bang launch.\n\n*   One approach is to start with a relatively small batch of notifications, and if no issues are identified, increase the size of the batches over time.\n    \n*   You can also send out batches on a rolling schedule around the globe to spread out load hitting the system at once and have notifications arrive at an optimal time within each timezone to increase the likelihood of the messages being read.\n    \n*   You can do a soft-launch to a portion of users, such as individual customers, regions or some other grouping that makes sense for your application.\n    \n\n## Outage windows (if needed)\n\nSome organizations require a formal request for an outage window if any outages or downtime is required for a launch. If your organization requires this, be sure to identify if any downtime is required for the cutover or launch (or other dependent systems) and file the necessary outage or change requests in advance of any lead-time requirements.\n\n## Cutover plan (if needed)\n\nSome launches involve cutover from a previous solution to a new solution. If your project fits this scenario, you should be sure to identify everything that needs to happen as well as any dependencies, the responsible party for each task, and necessary timing. You may wish to plan alternates for all important roles or in each region in case anyone is unexpectedly sick or otherwise unavailable. A checklist of items to consider for the cutover plan is:\n\n*   Have you documented the cutover plan and rollback plan if needed?\n    \n*   Are backups needed of anything prior to change?\n    \n*   Are any preparatory data changes required?\n    \n*   Any DNS records to be changed?\n    \n*   Any Firewall changes?\n    \n*   Any new monitoring targets?\n    \n*   Any software to be deployed?\n    \n\n## Go / no-go criteria\n\nIn your overall launch plan, it is helpful to have go/no-go criteria and to have discussed in advance the types of issues which could occur and which could be worked through vs would require reverting. A launch plan can specify periodic check-in timeframes with criteria of what to assess at each checkpoint and how long to allow an issue to continue unresolved.\n\nFor each stage of the launch, it helps to have success criteria defined, that indicate the launch is proceeding as planned and can continue. Some example criteria could be:\n\n*   User signups growing with minimal errors\n    \n*   User logins at expected rate, minimal errors\n    \n*   Reported support issues below a certain threshold\n    \n*   No issues identified that could lead to corrupted data\n    \n\nIt’s also helpful to have identified criteria which could trigger a “no-go” decision to halt the launch. The risk tolerance for each environment varies, but a few example criteria might include:\n\n*   High percent of user signup or login resulting in errors that cannot be resolved quickly\n    \n*   High number of support issues that cannot be resolved quickly\n    \n*   Condition identified that could lead to data corruption\n    \n*   High severity security issue discovered\n    \n\n## Rollback\n\nIt is always wise to have a plan for how to rollback or revert a launch, just in case something unforeseeable occurs which cannot be resolved. Reviewing the launch plan for every step which involves a change can help identify the tasks or changes requires to revert a launch or cutover.\n\nThe rollback plan should include the steps to take, the sequence, how long each is likely to take and the responsible party. Understanding the cumulative time required to roll back can help to determine the timing of the final go/no-go decision to fit within any required outage window.\n\nIf any data is migrated or changed for the launch, the plan should include how to revert it, if needed. Reverting may require running scripts to undo operational changes or restoring a data store from a backup taken before the launch process began.\n\nIt is also necessary to plan for the case where some data is entered into a new system before it has to be reverted. Will such data / transactions need to be abandoned with the rollback or will you have a way to capture and apply them elsewhere so they aren’t lost?\n\nIf the resolution of issues or process to revert could potentially take longer than one shift, you’ll want to ensure you have a primary and perhaps a secondary person available and prepared to handle things during each work shift. If an issue results in the need for prolonged response, significantly beyond one shift, there are limits for how long people can realistically function without a break. It can help to be prepared with resources for a follow-the-sun issue response effort if needed.\n\n## Standby contacts\n\nAs the launch day approaches, it’s a good idea to identify all contacts who might be needed for troubleshooting or resolving issues and request them to be on standby and ready to help if needed. The launch leader should have contact information for each person on the standby list to expedite communications.\n\nIf there is a physical or virtual \"launch room\", the people on standby should know where it is and be ready to join if needed. Having a central room or video conference prepared can expedite communications and troubleshooting across all parties if an issue occurs.\n\n## Success Criteria\n\nA lot of planning goes into a launch in order to be successful, but will you know how to evaluate the launch? If you define success criteria before the launch, you can determine what to monitor and if any additional monitoring or checks need to be in place to evaluate the launch. For example - if one element of the success criteria is the number of sign-ups or logins - do you have a way of monitoring that and has it been tested to ensure it is accurate?\n\nYou’ll want statistics to be able to trumpet the success of your launch. You don’t want to find out after the launch that you didn’t capture any data to quantify all the hard work your team put into the launch.\n\n## Risks & mitigations plan\n\nIt’s no fun to think of things that could go wrong, but if anything happens, you’ll be glad you did as having a plan can expedite response. A few examples to plan for include:\n\n*   Software application bug\n    \n*   Application incompatibility with user browser settings\n    \n*   Network failure/outage\n    \n*   DoS attack\n    \n*   Hosting environment failure\n    \n*   Load / capacity issues\n    \n*   Data / corruption issues\n    \n*   Security vulnerability discovered\n    \n\nIf you had a beta period, it may help to review the results of the beta to identify additional possible failure scenarios.\n\n## Project Planning Guide\n\nWe provide planning guidance in PDF format that you can download and refer to for details about our recommended strategies.\n\n[B2B IAM Project Planning Guide](https://assets.ctfassets.net/cdy7uua7fh8z/63F0WOPJdVzsPMxV1Xvp8x/7a329487c5e890d8e820f6a48983b46a/B2B_Project_Planning.pdf)",
  "title": "Launch Day Preparation (B2B)",
  "description": "Launch preparation considerations for your B2B IAM implementation.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/business-to-consumer/launch/tenant-check",
  "markdown": "# Tenant Check (B2C)\n\nThis section covers a list of configurations to check in your tenant. This should be done periodically during development and sufficiently before launch so you have time to fix anything amiss.\n\n## General tenant check\n\n### Tenant preparation check\n\nCheck to ensure you have set up tenant environments to support your SDLC lifecycle and that Dev, Test and Prod tenants are cleanly separated so that ongoing development work after launch doesn’t negatively impact your production environment.\n\nEvery company has some form of Software Development Life Cycle (SDLC), and throughout the development process you will want to align with that strategy. For instance, you need to be able to test your integration with Auth0 in a similar fashion as you test the applications themselves. It is therefore important to [structure Auth0 tenants to support your SDLC](https://auth0.com/docs/dev-lifecycle/setting-up-env), and there is a consistent pattern which our customers typically follow when it comes to the best practices associated with tenant layout for doing so:\n\n| Environment | Sample Tenant Name | Description |\n| --- | --- | --- |\n| Development | **company-dev** | A shared environment where most of your development work occurs |\n| QA/Testing | **company-qa** or **company-uat** | An environment for formal testing of the changes you've made |\n| Production | **company-prod** | The production tenant |\n\nIn some cases you may also want to create one or more sandboxes (e.g., **company-sandbox1**, **company-sandbox2**) so that you can test changes without compromising your development environment. This might be where you test deployment scripts and the like.\n\n### Best Practice\n\nYou can also take advantage of our [Implementation Checklists](https://auth0.com/docs/architecture-scenarios/checklists) that you can download and customize to meet your implementation project needs.\n\n### Tenant association check\n\nTo ensure that your [tenants are all associated with your Auth0 contractual agreement](https://auth0.com/docs/get-started/auth0-overview/create-tenants/child-tenants) and have the same features, ensure all your tenants are associated with your company account. If you have individual developers that want to create their own sandboxes for testing, make sure they get associated with your account so they have the same permissions too. To do this you should contact your Auth0 representative or the [Auth0 Support Center](https://support.auth0.com/).\n\n### Specify production tenant\n\nTo ensure Auth0 recognizes your production tenant, be sure to [set your production tenant](https://auth0.com/docs/dev-lifecycle/setting-up-env#set-the-environment) with the “production” flag in the Support Center.\n\n### Tenant production check\n\nAuth0 provides a [Production Check](https://auth0.com/docs/deploy-monitor/pre-deployment-checks) facility to detect many common errors. You should ensure this has been run and any findings from the report mitigated before launch.\n\nIn addition, you should check the [best practice configurations advice](https://auth0.com/docs/deploy-monitor/pre-deployment-checks/production-checks-best-practices), for which checking cannot be automated.\n\n### Tenant settings check\n\n#### Tenant settings\n\nMake sure to follow the Auth0 [tenant settings](https://auth0.com/docs/get-started/tenant-settings) recommendations in configuring your branding as well as your support email and support URL so users know how to get help if an issue occurs. You'll want to check your SSO Session Timeout settings and the list of dashboard admins with access to your production tenant as well.\n\n#### Error page customization\n\nIf there are issues encountered during user interactive workflow (e.g. user sign up or login), Auth0 provides error messages that indicate what the problem is under the hood. The default messages are somewhat cryptic, especially to the end user, since they will likely be missing context that only you can supply. As such, we recommend [customizing your error pages](https://auth0.com/docs/customize/login-pages/custom-error-pages) to provide the missing context-specific information directly to your users. Furthermore, customizing your error pages allows you to display your branding, not Auth0's, as well as provide useful information to your users as to what should be done next. This information might include a link to a FAQ or how to get in touch with your company's support team or help desk.\n\n### Best Practice\n\nOut-of-the-box there is no user interface for customizing Auth0 provided error pages, but you can use the [Tenant Settings endpoint of the Management API](https://auth0.com/docs/api/management/v2#!/Tenants/patch_settings) to configure them. Alternatively, if you can create and host your own error page, then you can have Auth0 direct users to that page instead of using the Auth0-hosted option.\n\n#### Legacy feature flags off\n\nIf you have an older tenant, you may have various legacy feature flags enabled in your [tenant settings advanced tab](https://auth0.com/docs/get-started/tenant-settings). If you have any toggles on in the “Migrations” section of this tab, you should review your usage and make plans to migrate off the legacy feature.\n\n#### Delegated admin extension\n\nWhile you are checking the list of users with access to your production tenant, don't forget to check any users specified in the [Delegated Admin Extension](https://auth0.com/docs/customize/extensions/delegated-administration-extension).\n\n### Custom Domain Naming set up\n\nBy default, the URL associated with your tenant will include its name and possibly a region-specific identifier. For example, tenants based in the US have the a URL similar to `https://example.auth0.com` while those based in Europe have something that is of the fashion `https://example.eu.auth0.com`. A [Custom Domain](https://auth0.com/docs/customize/custom-domains) offers a way of providing your users with a consistent experience by using a name that’s consistent with your organization's brand.\n\nIn addition, Custom Domain functionality offers you complete control over the certificate management process. By default, Auth0 provides standard SSL certificates, but if you configure a custom domain, you can use Extended Validation (EV) SSL certificates or similar to provide the visual, browser-based cues that offer your visitors additional peace of mind.\n\nIn general, we see customers having the most success when they use a centralized domain for authentication - this is especially the case if the company offers multiple products or service brands. By using a centralized domain, you can provide end users with a consistent user experience while also minimizing the need to maintain multiple production tenants in Auth0.\n\n## Application and Connection settings check\n\nEach of your connection settings should be reviewed against the [connection configuration best practices](https://auth0.com/docs/authenticate/connection-settings-best-practices).\n\nIn addition, you should review that all connections are appropriate and that no experimental connections are left in your production tenant as they could enable unauthorized access.\n\nIf you use SAML connections, it is a best practice to configure the connections to sign SAML requests.\n\n## Page customization check\n\nIf you use the Auth0 universal login page, password reset page, or Guardian multi-factor authentication, you should check that you have adequately customized the pages displayed to the end user.\n\n### Universal Login Page\n\n[Universal Login](https://auth0.com/docs/authenticate/login/auth0-universal-login) is the recommended method for authenticating users, and it centers around use of the Login page. You can customize the Login page to support your organization's branding requirements.\n\n### Best Practice\n\nIf you choose to customize the Universal Login page script, we strongly recommend that you make use of version control. To do this, you should deploy the script to your Auth0 tenant via [deployment automation](https://auth0.com/docs/architecture-scenarios/b2c/deployment) or via one of the [alternative strategies](https://auth0.com/docs/universal-login/version-control).\n\n### Password reset page\n\nThe [Password Reset](https://auth0.com/docs/customize/login-pages/classic-login/customize-password-reset-page) page is used whenever a user takes advantage of password change functionality and, as with the login page, you can customize it to reflect your organization's particular branding requirements.\n\n### Guardian\n\nThe Multi-factor Authentication pages can be customized by adjusting the Universal Login branding options in the [Universal Login Settings](https://manage.auth0.com/#/login_settings) section.\n\nIf you need further customization, you can also customize [the full HTML content](https://auth0.com/docs/secure/multi-factor-authentication/customize-mfa/customize-mfa-classic-login) to reflect your organization's particular UX requirements.\n\nIf you are using Auth0’s authorization feature, be sure to double check all privileges granted to ensure authorizations are appropriate for your production environment.\n\n## API configuration check\n\n### Access token expiration\n\nYou should double check the [API access token expiration settings](https://auth0.com/docs/get-started/apis/api-settings) to ensure they are appropriate for each API in your production environment.\n\n### API offline access\n\nIf your application does not request refresh tokens, this should be off.\n\n### Access token signing algorithm\n\nIt is recommended that the [API access token signing algorithm](https://auth0.com/docs/get-started/applications/signing-algorithms) be set to RS256 rather than HS256 to minimize exposure of the signing key.\n\n### API Access token validation\n\nIf you have any custom APIs, be sure to check that they are adequately [validating the access tokens](https://auth0.com/docs/secure/tokens/access-tokens/validate-access-tokens) they receive before using the information in them.\n\n## API Scopes\n\nIf you have applications making machine-to-machine calls to any of your APIs, you should review the scopes specified for the API to ensure they are all appropriate for your production environment. For further information see the documentation on [client credentials grant](https://auth0.com/docs/get-started/applications/update-grant-types).\n\n## Rules/Hooks check\n\nYou should also have aligned your rules with Auth0 [rules best practices](https://auth0.com/docs/rules-best-practices).\n\n## Email templates customized\n\nAuth0 makes extensive use of email to provide both user notifications and to drive the functionality needed for secure identity management (for example, email verification, account recovery, and brute force protections), and Auth0 provides a number of templates for these.\n\nOut of the box, the email templates used contain standard verbiage and Auth0 branding. However, you can configure almost every aspect of these templates to reflect the verbiage and user experience you want and make changes to things like the preferred language, accessibility options, and so forth.\n\nEmail templates are customized using [Liquid syntax](https://auth0.com/docs/customize/email/email-templates/use-liquid-syntax-in-email-templates). If you are interested in customizing your templates based on user preferences, you will also have access to the [metadata](https://auth0.com/docs/manage-users/user-accounts/metadata) located in users' profiles, as well as any specific application metadata too.\n\n## Attack protection configured\n\nThe reason that authentication systems are important is to prevent bad actors from accessing applications and user data that they should not. We want to place as many barriers as possible between those bad actors and access to our systems. One of the easiest ways to do this is to ensure that your [attack protection](https://auth0.com/docs/secure/attack-protection) with Auth0 is configured correctly, so take a moment to read the guidance on this subject and ensure that it's working correctly for you.\n\n### Best Practice\n\nAnomaly detection is handled behind the scenes by Auth0 and provides a great security feature for your product. If you're going to utilize it, ensure that you have set up your [Email Provider](https://auth0.com/docs/architecture-scenarios/b2c/operations#email-provider-setup) and configured your [Email Templates](https://auth0.com/docs/architecture-scenarios/b2c/branding#email-template-customization) before turning on email delivery to your users.\n\n## Project Planning Guide\n\nWe provide planning guidance in PDF format that you can download and refer to for details about our recommended strategies.\n\n[B2C IAM Project Planning Guide](https://assets.ctfassets.net/cdy7uua7fh8z/3er1aEQ7Ul0q3c9leJWczR/b1f18b4c16abb7e78b01e4eb2b52bb8e/B2C_Project_Planning.pdf)",
  "title": "Tenant Check (B2C)",
  "description": "Tenant Checks to perform before launch of your B2C IAM implementation.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/business-to-consumer/launch/testing",
  "markdown": "# Testing Complete (B2C)\n\nPrior to launch, you should have completed all the testing that applies to your environment.\n\nQuality Assurance is important in identifying issues before they impact your customers and, depending on the nature of your project, there are several different types of quality assurance testing that you’re going to want to consider as part of your integration with Auth0:\n\n*   Is your application easy to understand and use, even by those with a disability?\n    \n*   Does your application need to work across various different browsers and devices?\n    \n*   Does your application need to work in multinational and/or international environments?\n    \n*   How will your application perform when subjected to unexpected production loads?\n    \n*   How can you ensure your application is safe from security-related vulnerabilities?\n    \n\nAuth0 [Universal Login](https://auth0.com/docs/authenticate/login/auth0-universal-login) and associated UI widgets (such as [Lock](https://auth0.com/docs/libraries/lock)) have already been designed and built following usability and accessibility best practices, and provide tested out-of-box support for a whole host of [browsers and devices](https://auth0.com/docs/troubleshoot/customer-support/product-support-matrix). Support for [internationalization](https://auth0.com/docs/customize/internationalization-and-localization) (I18N) is also provided out-of-box, with built-in extensibility designed for custom multi-language and localization (L10N) situations.\n\nTo ensure functional requirements are met and unexpected events are handled correctly, guidance is provided for testing the [integration](#integration-testing) between your application(s) and Auth0, and for [unit testing](#unit-testing) individual extensibility modules (such as [Rules](https://auth0.com/docs/customize/rules/debug-rules), [Hooks](https://auth0.com/docs/customize/hooks/update-hooks), and Custom Database scripts). Guidance is also provided regarding Auth0's [penetration testing policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/penetration-testing-policy) to help when testing for security vulnerability, and also how [Mock](#mock-testing) testing can be leveraged in conjunction with our [load testing policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/load-testing-policy) to help ensure your application(s) perform under unexpected load.\n\n## Unit testing\n\nThe objective of unit testing is to test individual units of code. If you create custom code within Auth0 in the form of Rules, Hooks, and/or Custom DB scripts, you should consider use a testing framework (such as [Mocha](https://mochajs.org/)) to test your code. Companies who have been most successful with Auth0 have found it useful to execute these unit tests prior to [automatically deploying](https://auth0.com/docs/get-started/architecture-scenarios/business-to-consumer/deployment) Auth0 tenant configuration and collateral.\n\n## Integration testing\n\nIt is a recommended best practice that you set up different tenants for development, testing, and production as discussed in Architecture guidance for [SDLC support](https://auth0.com/docs/architecture-scenarios/b2c/architecture#sdlc-support). Auth0 allows you to configure variables that are available from within custom [extensibility](https://auth0.com/docs/customize/extensions); these can be thought of as environment variables for your Auth0 tenant. Rather than hard code references that change when moving code between development, test, and production environments, you can use a variable name that is configured in the tenant and referenced by the custom extensibility code. This makes it easier for the same custom code to function, without changes, in different tenants as the code can reference variables which will be populated with tenant-specific values at execution time:\n\n*   For use of variables in Rules, see how to [configure values](https://auth0.com/docs/customize/rules/configuration)\n    \n*   For use of variables in Hooks, see how to configure [secrets](https://auth0.com/docs/customize/hooks/hook-secrets) in the editor\n    \n*   For use of variables in Actions, see Explore Flows and Triggers\n    \n*   For use of variables in Custom DB Scripts, see the [configuration parameters](https://auth0.com/docs/connections/database/custom-db/create-db-connection#step-3-add-configuration-parameters)\n    \n\n### Best Practice\n\nIt’s a recommended best practice to use variables to contain tenant-specific values as well as any sensitive secrets that should not be exposed in your custom code. If your custom code is deployed in GitHub, then using a tenant-specific variable avoids exposure of sensitive values via your GitHub repository.\n\n### Test automation\n\nYou can automate your overall build process by incorporating deployment automation as well as test automation. This can be used to deploy new versions of configuration and/or custom code to Auth0 and execute automated tests. If the tests uncover any failures, the deployment automation capabilities can be used to revert to the last working version. For further information, see the [deployment automation guidance](https://auth0.com/docs/get-started/architecture-scenarios/business-to-consumer/deployment) provided.\n\n## Mock testing\n\nIn a balance between Auth0’s [load testing policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/load-testing-policy) and the desire to load test, it is common practice among Auth0’s customers to mock out Auth0’s endpoints. This is a valuable practice in order to ensure that your application works with your expected interfaces without having to restrict your testing, and tools such as [MockServer](http://www.mock-server.com/), [JSON Server](https://github.com/typicode/json-server) or even [Postman](https://learning.getpostman.com/docs/postman/mock_servers/setting_up_mock/) can be used to assist.\n\n## Pen testing (optional)\n\nIf you will be conducting penetration tests, you should be aware of Auth0’s [penetration testing policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/penetration-testing-policy) and abide by it. Penetration tests require advance notice to Auth0 so that your tests are not mistaken for malicious activity and shut down.\n\n## Load testing (optional)\n\nIf you will be conducting load tests, you should be aware of Auth0’s[](https://auth0.com/docs/policies/load-testing) [load testing policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/load-testing-policy) and abide by it. Load tests require advance notice to Auth0. In planning your load testing, you will also need to be aware of Auth0’s [API rate limits](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy).\n\nLoad tests require prior approval from Auth0, as explained in the Auth0 load test policy. Be sure to note the lead time for a request to be reviewed and allow enough time for review as well as conducting the tests. If your load test request has been approved, the following guidance can help avoid errors and faulty test results.\n\n*   Run an HTTP trace on a test execution of your application to identify all the calls your application or intended test needs to make, and make sure your test includes them so it is representative of what will happen in production.\n    \n*   Design your test to be mindful of Auth0 API rate limits.\n    \n*   Use of any custom code in Auth0 (Actions, Rules, Hooks, custom database scripts, custom OAuth connections) will invoke the Auth0 custom code sandbox and this may cost more in terms of performance. Turn off Rules unless they are essential to the test. If they are off you will have higher throughput than if they are on.\n    \n*   Estimate the expected overall load for your production environment and percent of calls to each endpoint and structure your performance test accordingly so it gives you a realistic test result. Different endpoints have different performance costs. Failure to design a representative test will result in misleading results.\n    \n*   Don’t make calls that depend on the results of earlier calls without checking that pre-requisite calls or responses have completed. Simply building in a delay may not be adequate.\n    \n*   Be sure to implement adequate error handling. A frequent cause of issues during tests is errors in custom code (Actions, Rules, Hooks, custom database scripts, custom OAuth connection scripts) caused by unhandled exceptions in the custom code.\n    \n*   Load tests should be written to start at a low level and increase the load gradually, capturing data at each level, to get the most useful results. Starting at a high level and immediately failing gives less information about what the system can sustain.\n    \n*   It is normal to need to run a performance test multiple times, possibly adjusting the code under test or the test harness/configuration. Be sure to start your testing early to allow enough time for more than one iteration.\n    \n*   Use your own mail provider account and make sure to arrange ahead of time for enough mail-sending quota or you may be rate-limited by the mail provider. Turn off mail sending if you do not use it.\n    \n*   Be sure to use your own account credentials for all social connections rather than Auth0 dev keys. In the Auth0 dashboard, go to Connections -> Social -> {name of connection}—to see instructions for how to add your own social provider account credentials into the connection. Note: some social providers do not allow load testing. Check your provider(s) for their policy\n    \n*   In order to avoid rate limiting, and more accurately simulate real load, your tests will need to send requests for different users, not all requests for the same user. If you use only one or a few users, caching may reduce the effective load and not provide realistic results.\n    \n*   Be sure to stay within the agreed-upon parameters for the test and the Auth0 load test policy. Auth0 reserves the right to terminate any performance/load testing which does not stay within the bounds of agreed-upon parameters or which extends beyond the scheduled test window.\n    \n\n## Project Planning Guide\n\nWe provide planning guidance in PDF format that you can download and refer to for details about our recommended strategies.\n\n[B2C IAM Project Planning Guide](https://assets.ctfassets.net/cdy7uua7fh8z/3er1aEQ7Ul0q3c9leJWczR/b1f18b4c16abb7e78b01e4eb2b52bb8e/B2C_Project_Planning.pdf)",
  "title": "Testing Complete (B2C)",
  "description": "Testing preparation for the launch of your B2C IAM implementation.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/business-to-consumer/launch/compliance-readiness",
  "markdown": "# Compliance Readiness (B2C)\n\nThere are several requirements related to privacy and compliance. Auth0 cannot provide legal guidance on your privacy or other regulatory obligations, but we can provide a curated list of privacy requirements below for which Auth0 offers features that may help you meet your obligations. Prior to launch, you should check that you’ve met all your privacy obligations and review the features outlined below to ensure you’re leveraging all the available Auth0 features to help you meet your privacy and compliance requirements.\n\n## Publish privacy policy and obtain user consent\n\nIf you collect or process personal data about users, you should have published a privacy policy and have established procedures to ensure your operations abide by the contents of the policy. You also need to obtain a user’s consent for the collection and processing of information. Auth0 provides options for [displaying a link to your privacy policy storing user consent](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr).\n\n## Provide access to view, correct and erase data\n\nPrivacy legislation often requires that users have the right to view and correct any data held about them. If you are a data controller, you should provide a mechanism for this. Auth0 customers can build a self-service feature to access and correct data via the management API.\n\n## Provide access to data portability\n\nIf you are a data controller, you may be obligated to provide users a means to export their data from your system in a transportable format. Auth0 provides user data portability mechanisms to help you satisfy this obligation via both manual export capabilities and the Management API which enables you to implement a self-service feature for users.\n\n## Take steps to minimize personal data\n\nYou should have reviewed the personal data you collect about users to ensure it is legitimately required for the purposes of the processing covered in the privacy policy and consent. You should also confirm you have minimized the data you collect, and established a data retention policy. You can optionally elect to encrypt data you store in user metadata for additional protection.\n\n## Data retention policy enforcement automated\n\nYou should have a published data retention policy and automate the enforcement of it. The Auth0 management API or the Auth0 dashboard can be used to facilitate [erasure of user accounts](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr/gdpr-right-to-access-correct-and-erase-data).\n\n## Protect personal data\n\nRegardless of whether you are a data controller or a data processor, you have obligations to protect the personal data you hold about users. This includes use of encryption where possible, and implementing reasonable security measures to protect user accounts. Prior to launch, you should check if you are using all the security features available from Auth0 to help with this such as Brute Force Detection, Multi-Factor Authentication (for both users and administrators), and a strong password policy if using passwords. You should also ensure you have a process ready to respond to Brute Force attacks.\n\n## Supplier evaluation\n\nAnother common compliance obligation is to perform due diligence review of the security of any third-party suppliers to which you expose personal data. For Auth0, you will find information to facilitate this task on the Auth0 [security and certifications](https://auth0.com/security/) page where you can view the security certifications Auth0 has obtained.\n\n## Additional resources\n\nAdditional resources that may be useful for your compliance requirements include:\n\n*   [Auth0 Privacy Policy](https://auth0.com/privacy)\n    \n*   [Security and Compliance](https://auth0.com/security/)\n    \n*   [Auth0 Compliance and Certifications](https://auth0.com/docs/secure/data-privacy-and-compliance)\n    \n*   [Auth0 General Data Protection Regulation Compliance](https://auth0.com/docs/secure/data-privacy-and-compliance/gdpr)\n    \n\n## Project Planning Guide\n\nWe provide planning guidance in PDF format that you can download and refer to for details about our recommended strategies.\n\n[B2C IAM Project Planning Guide](https://assets.ctfassets.net/cdy7uua7fh8z/3er1aEQ7Ul0q3c9leJWczR/b1f18b4c16abb7e78b01e4eb2b52bb8e/B2C_Project_Planning.pdf)",
  "title": "Compliance Readiness (B2C)",
  "description": "Compliance checks to perform before launch of your B2C IAM implementation.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/business-to-consumer/launch/support-readiness",
  "markdown": "# Support Readiness (B2C)\n\n## Review Auth0 Policies\n\nWhen starting to prepare for your launch, be sure to read through [Auth0 Policies](https://auth0.com/docs/troubleshoot/customer-support/operational-policies) and prepare your production operations accordingly for any required lead times or responsibilities on your part, according to the policies.\n\n## Review your Support plan, SLAs, Severity definitions and Support center documentation\n\nYou should review the specifics of the [support plan](https://auth0.com/docs/troubleshoot/customer-support) you’ve purchased and the Service Level Agreements associated with it, to ensure it is adequate for your needs. If you haven’t already done so, explore the [support center](https://support.auth0.com/) and familiarize yourself with support features such as viewing suggested solutions to common issues and [filing tickets](https://auth0.com/docs/troubleshoot/customer-support/open-and-manage-support-tickets) and viewing your quota usage. It will be helpful to review the severity level definitions for support tickets so that you file tickets with the correct severity. One important note is that it is not possible today in the Support Center to increase the severity of a support ticket. If you file a ticket for a medium-grade issue which later becomes a high severity issue, you should file a new urgent, high severity ticket that explains anything new that triggers the urgency and references the original ticket for details.\n\nYou should also ensure your development and support teams are familiar with the [Auth0 community forum](https://community.auth0.com/), discussed further below. Customers can often find answers there right away to common issues, avoiding the need to file a ticket, so it should be your first stop for technical questions.\n\nThe [Auth0 community forum](https://community.auth0.com/) contains a wealth of information. If you have a question, chances are someone else has already asked the question on the forum. Answers are contributed by both Auth0 staff and the larger community of Auth0 users.\n\nImportant notices are posted to the community forum to help you stay abreast of important news. Be sure to check out the “Community” and “FAQ” categories. The Community category contains pro-active posts on product announcements, roadmap information, How-To videos as well as important information about any upcoming feature deprecations.\n\nIt’s a good idea to check out the Auth0 Community on a regular basis, not just when you have questions. While you are there, if you see a question you’ve already solved, please contribute your wisdom to help others!\n\n## Gather Auth0 troubleshooting information needed for support tickets\n\nWe recommend your support team become familiar with our [troubleshooting guides](https://auth0.com/docs/troubleshoot) specific to identity protocols and Auth0. This includes the questions to research and information to collect before posting a question on the Auth0 forum or filing a support ticket. Authentication transactions often span multiple systems so there are some specialized troubleshooting techniques that are helpful to learn.\n\n## Have troubleshooting tools ready\n\nYour team will doubtless have already done some troubleshooting during the development of your application, but we recommend making sure your support team is also familiar with any tools below relevant to your project. If you need to file a ticket, the Auth0 support team may ask for a HAR (HTTP Archive) file to help analyze the issue so it’s helpful for your support staff to be familiar with how to do this.\n\n### Capture HAR file\n\nA [HAR file](https://auth0.com/docs/troubleshoot/troubleshooting-tools/generate-and-analyze-har-files) captures a sequence of browser interactions and is a commonly used tool when debugging authentication issues. The process of authenticating a user often involves redirecting the user’s browser from an application to Auth0, and possibly to another remote Identity Provider, depending on the type of connection used. You can capture the redirection and the responses and analyze it to find clues about the cause of an issue.\n\n### Analyze HAR file\n\nAnalyze the HAR file to obtain valuable troubleshooting information. It shows the sequence of browser redirects involved in an authentication transaction, along with the parameters used. The HAR file also shows if the authentication process stopped mid-stream and if so where, which helps to pinpoint the location of the issue. The HAR file contains tokens returned to the application front-end, and these can be pasted into appropriate viewers to see if they contain the expected contents.\n\n### View JWT\n\nThe [jwt.io](https://jwt.io/) tool was written by Auth0 and allows you to view the contents of a JWT\\-formatted token. Applications that delegate authentication to Auth0 via OIDC will receive an ID Token from Auth0. Depending on your type of application, the ID Token may be captured in a HAR file. The ID Token is in JWT format and can be pasted into jwt.io to view the contents of the ID Token.\n\n### View SAML request/response\n\nThere are many SAML decoders available. The [samltool.io](https://samltool.io/) decoder was written by Auth0 and allows you to view the contents of a SAML Request or Response. Applications that delegate authentication to Auth0 via SAML or use a SAML type of connection in Auth0 will use SAML Requests and Responses. These SAML Requests and Responses may be captured in a HAR file. The requests and responses can be pasted into samltool.io or other SAML decoders to view the contents of the SAML Request or Response.\n\n## Review Auth0 support matrix\n\nOne potential cause of issues is using out of date versions of SDKs or libraries. We strongly recommend your team check your software stack, browsers, SDKs and libraries against the [Auth0 support matrix](https://auth0.com/docs/troubleshoot/customer-support/product-support-matrix) to ensure you are running on up-to-date, supported versions. In the event of an issue, the Auth0 support team may ask you to upgrade to a supported version. To avoid slowing down progress on issue resolution, be sure you are on up-to-date versions.\n\n## Use Auth0 feedback portal\n\nAuth0 welcomes feedback and ideas from Auth0 customers. If you have a suggestion for our product team, you can submit product feedback directly on the [Product Feedback portal](https://auth0.com/feedback).\n\n## Prepare real-time webtask log extension\n\nFor debugging and supporting custom code in Auth0, including Actions, Rules, Hooks, custom database scripts, and custom OAuth connections, knowledge of the [Realtime Webtask Log](https://auth0.com/docs/customize/extensions/real-time-webtask-logs) is essential. This enables you to view output from your custom code, including output from console.log statements.\n\nWe recommend installing the real-time webtask log extension and getting familiar with using it to view log output from your custom code as a debugging and support tool.\n\n## Troubleshooting\n\nYou should prepare to [troubleshoot basic issues](https://auth0.com/docs/troubleshoot/basic-issues) both during your development as well as after your application or API goes live. Make sure your development and support teams are prepared with knowledge of troubleshooting tools, and the list of common issues to check when troubleshooting an issue.\n\n## Project Planning Guide\n\nWe provide planning guidance in PDF format that you can download and refer to for details about our recommended strategies.\n\n[B2C IAM Project Planning Guide](https://assets.ctfassets.net/cdy7uua7fh8z/3er1aEQ7Ul0q3c9leJWczR/b1f18b4c16abb7e78b01e4eb2b52bb8e/B2C_Project_Planning.pdf)",
  "title": "Support Readiness (B2C)",
  "description": "Support readiness for the launch of your B2C IAM implementation.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/business-to-consumer/launch/operations-readiness",
  "markdown": "# Operations Readiness (B2C)\n\n## Status\n\nYou should ensure your operations staff knows how to monitor Auth0 service status and has set up a means to subscribe to updates on Auth0 status.\n\nThe Auth0 [status dashboard](https://status.auth0.com/) together with the Auth0 [uptime dashboard](http://uptime.auth0.com/) shows current and past status of the Auth0 service in a human-readable format. If any monitoring alerts are triggered, and as a first step in troubleshooting, your operations staff should check the status dashboard to see if there is a current outage. The public cloud status page also provides a facility for subscribing to outage notifications, and we also recommend that you check the status of any third-party [external services](https://auth0.com/docs/deploy-monitor/monitor/check-external-services-status) you depend on, such as Social Providers. Having this information handy can help quickly eliminate possible causes when troubleshooting an issue and should be at the top of a troubleshooting checklist for developers as well as the help desk staff.\n\n### Best Practice\n\nInformation on how to check the status of Auth0 as well as any dependent services (such as Social Providers) should be at the top of a troubleshooting checklist for both developers and helpdesk staff, and we recommend you subscribe via the Auth0 status page to set up notification of any status updates.\n\nIn the event of an outage to the public cloud service, Auth0 performs a Root Cause Analysis (RCA) and publishes the results on the Auth0 status page. Auth0 performs a thorough investigation after an outage—including a determination of root cause, as well as contributing factors and how to prevent the issue from occurring again—and as a result, an RCA document can take a few weeks to be published.\n\n## Email provider setup\n\nYou should double check that you have set up your own email provider to support production volumes of emails that might be sent to customers for signup, email validation, account recovery and the like.\n\nAuth0 sends [emails](https://auth0.com/docs/customize/email) to users for events such as signup welcome, email validation, breached password, and password reset events. You can customize the email templates for each type of event, and advanced customization of email handling is also possible. Auth0 provides a test email provider with limited capacity for basic testing, but you must set up your own email provider for production use, and customization of email templates will not work until you have established your own provider.\n\n### Best Practice\n\nThe default Auth0 email provider does not support sending production volumes of email or customization of email templates. You should therefore configure your own email provider before deploying to production.\n\n## Infrastructure\n\n### Firewalls\n\nIf custom code executing in Auth0 (such as in an Action, Rule, Hook, or Custom DB scripts) will call a service inside your network, or if you configure an on-premise SMTP provider in Auth0, then you may need to configure your firewall to allow [inbound traffic from Auth0](https://auth0.com/docs/secure/security-guidance/data-security/allowlist). The IP addresses to allow through the firewall are specific to each region and are listed on the Rules, Hooks, custom database scripts, and email provider configuration screens in your Auth0 dashboard.\n\n## NTP\n\nIf this is not handled automatically by your hosting environment, you should have scripts which will automatically restart NTP (Network Time Protocol) if it fails and alerts that will notify someone if NTP is not running. Authentication transactions rely on accurate system time because security tokens may be evaluated as expired when received if there are time discrepancies between sending and receiving systems.\n\n## LoadBalancer timeouts checked\n\nIf you use the AD/LDAP connector, you should check the load balancer settings in your environment to see if they terminate long running connections that are inactive. If they do, you can modify the [Auth0 AD/LDAP Connection settings](https://auth0.com/docs/authenticate/identity-providers/enterprise-identity-providers/active-directory-ldap/ad-ldap-connector/ad-ldap-connector-to-auth0) to use the `LDAP_HEARTBEAT_SECONDS` setting to send periodic heartbeat messages to keep the connection open.\n\n## LoadBalancer configuration\n\nIf your application maintains server state such that it depends on sticky load balancing to route users to a particular server, it can be beneficial to double check that all load balancer configurations are correct. One load balancer in a pool that is out of sync can cause intermittent errors that are hard to troubleshoot. A quick check of load balancer configuration can avoid such issues in the first place.\n\n## Logs\n\nYou should check that you have set up the ability to capture log data, that logs are covered by your data retention policy and you have mechanisms to enforce logs data retention limits. You should also make sure that your development, support, and security teams know how to access logs data for troubleshooting and forensics purposes. Exporting log files to services that provide comprehensive analytics can help you identify patterns such as usage trends and errors.\n\nAuth0 provides extensive capability when it comes to the logging of events, and also in the scanning of logs in order to identify event anomalies (see [logs documentation](https://auth0.com/docs/deploy-monitor/logs) for further details). Standard log retention period for Auth0 logs is determined by subscription level with the shortest period being two days and the longest period being only 30 days. Leveraging Auth0 support for integrating with external logging services will allow you to retain logs outside of this, and will also provide for log aggregation across your organization.\n\n### Best Practice\n\nYou should leverage one of the log streaming solutions to send log data to an external log analytics service. This will enable keeping data for longer periods of time and provide advanced analytics on the log data.\n\nYou should review the log data [retention period](https://auth0.com/docs/deploy-monitor/logs/log-data-retention) for your subscription level, and implement a log data export service to send log data to an external log analytics service. You can use one of our [log streaming solutions](https://marketplace.auth0.com/features/log-streaming) in Auth0 Marketplace.\n\nDevelopment teams can use log files for troubleshooting and detecting intermittent errors that may be hard to find via QA tests. Security teams will probably want log data in case forensic data is ever needed. Exporting log files to services that provide comprehensive analytics can help you see patterns such as usage trends and attack protection triggers.\n\n### Rate limits and other errors\n\nAuth0 provides a unique error code for errors reported when the [rate limit is exceeded](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/rate-limit-policy). You should set up automatic scanning of logs to check for rate limit errors so you can proactively address activity that hits rate limits before it causes too much trouble for your users. Auth0 also publishes error codes for other types of errors, and you will find it helpful to scan logs for [authentication errors](https://auth0.com/docs/libraries/common-auth0-library-authentication-errors) as well as errors from Auth0 Management API calls (Management API error codes are shown below each call in the [Management API Explorer](https://auth0.com/docs/api/management/v2)).\n\n### Best Practice\n\nCalling the Management API to retrieve user profile information from within a Rule is a common cause of rate limit errors because such API calls can execute for every login as well as periodic session checks.\n\n## Monitoring\n\nBe sure to set up proactive monitoring of the Auth0 service as well as end-to-end authentication through your application.\n\nYou should establish mechanisms for [monitoring Auth0 implementations](https://auth0.com/docs/deploy-monitor/monitor), so your support or operations team receives the timely information needed to proactively handle service outages. Auth0 provides monitoring endpoints that can be incorporated into your monitoring infrastructure. These endpoints are designed to provide a response suitable for consumption by monitoring services. It should be noted that they only provide data on Auth0. For complete end-to-end monitoring, which is essential for checking the ability of users to log in, we recommend that you set up synthetic transaction monitoring. This will provide greater granularity for your monitoring and enable you to detect outages unrelated to Auth0 as well as degradation of performance, so you can respond more proactively.\n\n### Best Practice\n\nYou should set up the ability to send synthetic login transactions to facilitate end-to-end monitoring of authentication. You can do this with a simple application that uses the [Resource Owner Password Grant](https://auth0.com/docs/api-auth/tutorials/password-grant) in combination with a test user that has no privileges, and don’t forget about [Auth0 rate limiting policies](https://auth0.com/docs/policies/rate-limits) too.\n\n## Auth0 Notifications\n\nYou should ensure your team is monitoring all of the following communication channels from Auth0 to stay abreast of important announcements and changes.\n\nThere are several different types of notifications from Auth0 that you should watch for as they contain important information that could impact your tenant(s) and project.\n\n### Dashboard notifications\n\nFrom time to time, Auth0 may send an important announcement related to your tenant. These announcements about your service will be sent to your Auth0 dashboard and depending on the severity of the announcement, via email to the registered Auth0 dashboard administrators. You should make a regular practice of logging in to the dashboard and checking the bell icon at the top for any important notices. In addition, you should review emails from Auth0 in a timely fashion as they may convey important information about changes or actions you need to take.\n\n### Auth0 security bulletins\n\nAuth0 regularly conducts a number of security-related tests, and if any issues are found, will proactively identify and notify customers who need to make security-related changes. Due to the extensible nature of the Auth0 product, however, it may not be possible for Auth0 to identify every impacted customer, so you should regularly check Auth0 [security bulletins](https://auth0.com/docs/secure). You should make sure a security contact for your organization is listed in Support Center.\n\n### Best Practice\n\nIt is a best practice to check the Auth0 [Security Bulletins](https://auth0.com/docs/security/bulletins) page periodically and take the recommended action if you are impacted by any security bulletins.\n\n### Change log\n\nAuth0 provides information on changes to the service in the Auth0 [change log](https://auth0.com/changelog). You should make a regular practice of reviewing Auth0 change logs to be aware of changes. Support teams researching an issue may find it useful to review the change log to determine if recent changes might be related, especially if these are breaking changes. Development teams will also want to review the change logs to identify new features that may be beneficial.\n\nIn addition, you should periodically check the [Auth0 migrations page](https://auth0.com/docs/troubleshoot/product-lifecycle/deprecations-and-migrations) for news about upcoming deprecations that might require your team to make changes.\n\n## Automated Deployment, version control\n\nWhile not required, it is highly recommended that you have deployment automation set up. You can respond more efficiently if you need to make any changes after launch if you have automated the ability to deploy and revert changes to dev, test and production environments.\n\nIn addition to adopting best practices for change management and [QA](https://auth0.com/docs/get-started/architecture-scenarios/business-to-consumer/quality-assurance), successful customers will also integrate Auth0 collateral management as part of some automated deployment process. As discussed in the Architecture section under [SDLC support](https://auth0.com/docs/architecture-scenarios/b2c/architecture#sdlc-support), you will want to ensure you configure separate Auth0 tenants for development, testing, and production environments, and you will want that configuration to be almost identical for the tenant in each environment. Using deployment automation helps ensure this, so that each environment tenant is configured the same, and you will be less likely to see bugs show up as a result of mismatched configurations between environments.\n\n### Best Practice\n\nHowever you configure deployment automation, we’d recommend you unit test your rules, custom DB scripts, and hooks prior to deployment, and run some integration tests against your tenant post-deployment too. For more details regarding this, see the [Quality Assurance](https://auth0.com/docs/architecture-scenarios/b2c/quality-assurance) guidance provided.\n\nAuth0 provides support for a couple of different options when it comes to the deployment automation approaches you can use, and each can be used in conjunction with the other if desired:\n\n*   The [Auth0 Deploy CLI tooling](https://auth0.com/docs/deploy-monitor/deploy-cli-tool) provides you with an easy-to-use script that can help you integrate with your existing Continuous Integration/Continuous Deployment (CI/CD) pipeline.\n    \n*   If you can’t integrate directly with, or for some reason you don’t have a CI/CD pipeline, then the Auth0 [Source Control Extensions](https://auth0.com/docs/customize/extensions) can provide an easy-to-set-up basic automation process with very low maintenance.\n    \n\nEach environment may also need some environment-specific configuration—Application Client ID’s and Client Secrets will be different between the Auth0 tenants, for example—so you’re going to want some way of being able to dynamically reference this rather than having hard-coded values. Auth0 provides support for handling environment-specific configuration information through one of the following two approaches:\n\n*   Use [Tenant Specific Variables](#tenant-specific-variables)\n    \n*   Use [keyword replacement](https://auth0.com/docs/deploy-monitor/deploy-cli-tool/configure-the-deploy-cli) if using the Auth0 Deploy CLI tool\n    \n\n## Tenant specific variables\n\nAuth0 allows you to configure variables that are available from within custom [extensibility](https://auth0.com/docs/customize/extensions); these can be thought of as environment variables for your Auth0 tenant. Rather than hard code references that change when moving code between development, test, and production environments, you can use a variable name that is configured in the tenant and referenced by the custom extensibility code. This makes it easier for the same custom code to function, without changes, in different tenants as the code can reference variables which will be populated with tenant-specific values at execution time:\n\n*   For use of variables in Actions, see [Write Your First Action](https://auth0.com/docs/customize/actions/write-your-first-action) to learn how to configure secrets in the editor\n    \n*   For use of variables in Rules, see how to [configure values](https://auth0.com/docs/customize/rules/configuration)\n    \n*   For use of variables in Hooks, see how to configure [secrets](https://auth0.com/docs/customize/hooks/hook-secrets) in the editor\n    \n*   For use of variables in Custom DB Scripts, see the [configuration parameters](https://auth0.com/docs/connections/database/custom-db/create-db-connection#step-3-add-configuration-parameters)\n    \n\n### Best Practice\n\nIt’s a recommended best practice to use variables to contain tenant-specific values as well as any sensitive secrets that should not be exposed in your custom code. If your custom code is deployed in GitHub/Gitlab/Bitbucket/VSTS, then using a tenant-specific variable avoids exposure of sensitive values via your repository.\n\n## Backup / Restore\n\nYou should have a plan and mechanism in place to support any backup/restore capability needed for your project. This can be done using the Auth0 Management API for data as well as the Automated Deployment capabilities described in the automated deployment section for Auth0 configuration.\n\nAs noted in the Auth0 [Data Tenant Restore policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies) and [Data Transfer policy](https://auth0.com/docs/troubleshoot/customer-support/operational-policies/data-export-and-transfer-policy), Auth0 does not restore deleted tenants or move data between tenants. Auth0 provides the Auth0 Management API to provide customers a completely flexible capability to backup, restore and move data as needed. Customers can write scripts to retrieve data from Auth0 for backup purposes, and similarly write scripts for use with the Automated Deployment capability to restore any aspect of their Auth0 configuration.\n\n## Versions Up to Date\n\nYou should double check that all technologies in your application stack, as well as browser versions used by your users are on current, up-to-date versions as this will impact Auth0’s ability to provide support if issues arise.\n\n*   Check you are using the latest supported version of node.js in [Auth0 dashboard settings](https://auth0.com/docs/get-started/tenant-settings).\n    \n*   Check you are using a version of SDK/Libraries supported by Auth0 per the [Auth0 Support Matrix](https://auth0.com/docs/troubleshoot/customer-support/product-support-matrix).\n    \n\n## Certificate rollover plan\n\nCertificates may be used in identity deployments. To ensure a certificate expiration does not catch you by surprise, you should have a list of certificates in your environment along with the expiration dates, how you will be notified when expiration draws near and how the certificate rollover process works.\n\n### SAML connections\n\nFor SAML connections, you obtain a certificate from the IdP and upload it to a SAML connection for the IdP in your Auth0 dashboard. When one of these certificates is about to expire, Auth0 will send email to dashboard administrators warning of the upcoming expiration. You can obtain the new certificate and upload it using the connection configuration screen.\n\n### WS-Fed connections\n\nFor WS-Fed connections, if you configure them by specifying an ADFS URL, any changes will be picked up by a daily update. You can trigger an update manually by visiting the connection configuration page in the Auth0 dashboard and doing a Save. If a certificate is changed at the remote IdP, Auth0 can be updated by those mechanisms or by uploading a new metadata file in the same connection configuration screen.\n\n## Disaster Recovery / Business Continuity Plan in place\n\nWhile not an absolute requirement prior to launch, it is useful to have a disaster recovery plan in place to ensure business continuity in the face of different types of disasters, including system outages and natural disasters hitting a region where critical staff is located.\n\n## Processes documented\n\nAnother item which is not an absolute requirement, but also recommended is to ensure all processes related to Auth0 are documented. This can include the following:\n\n*   Change management for configuration\n    \n*   Deployment of new changes and any automatic deployment mechanisms used, how to revert to previous version if issues found\n    \n*   Certificate rollover processes, if any\n    \n*   Adding or removing new Identity Providers, if applicable\n    \n*   Changes to user profile structure in Auth0 or in directories Auth0 pulls from\n    \n*   Adding or removing applications or APIs\n    \n*   Capturing and exporting logs\n    \n*   Backup/restore process you have implemented\n    \n*   User management (forgotten password, lost phone)\n    \n*   Root cause analysis after an incident\n    \n\n## Project Planning Guide\n\nWe provide planning guidance in PDF format that you can download and refer to for details about our recommended strategies.\n\n[B2C IAM Project Planning Guide](https://assets.ctfassets.net/cdy7uua7fh8z/3er1aEQ7Ul0q3c9leJWczR/b1f18b4c16abb7e78b01e4eb2b52bb8e/B2C_Project_Planning.pdf)",
  "title": "Operations Readiness (B2C)",
  "description": "Operations checks to perform before launch of your B2C IAM implementation.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/provisioning",
  "markdown": "# Single Identity Provider: Provisioning\n\nBy using the Auth0 Organizations feature, a single Auth0 Tenant can be provisioned for deployment to a production environment. For all but the most complex architectural scenarios, provisioning of a single Auth0 Tenant for use in a production environment is recommended because it provides ease of integration/use for [Single Sign-On (SSO)](https://auth0.com/docs/authenticate/single-sign-on), user [Profile Management](https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/profile-management), and so on. Depending on the implementation, you will need to address some additional items concerning setup of your Auth0 Tenant and your corresponding integration.\n\nBranding associated with an organization is extremely valuable because using brand collateral provides users with an environment that they know and trust. Using recognized brand collateral also increases user confidence that the information they provide (for example, credentials) will be handled safely and securely. Default out-of-box Auth0 branding should therefore be replaced. To learn more, see [Branding](https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/branding).\n\n## Organizations\n\nYou should create an independent Auth0 Organization for each of the organizations you will support. In this case, we’ll create the `hoekstra` organization to represent Hoekstra & Associates in our example, and the `metahexa` organization to represent MetaHexa Bank. You can [create organizations](https://auth0.com/docs/manage-users/organizations/configure-organizations/create-organizations) either manually via the Auth0 Dashboard or programmatically via the use of the Auth0 Management API.\n\n## Applications\n\nDepending on how your Organization Tenant implementation is designed, you have different options when creating [Application](https://auth0.com/docs/get-started/applications) definitions within your Auth0 Tenant. Whichever option you choose, the [Organization behavior is defined at the application level](https://auth0.com/docs/manage-users/organizations/configure-organizations/define-organization-behavior).\n\nIf you provision a separate Organization Tenant for each of your customers, then you will typically need an independent Application definition in Auth0 for each. This arrangement will also usually involve sending both the Application-specific `client_id` parameter and the `organization` parameter, which identifies which Auth0 Organization to use, as part of the call to the `/authorize` endpoint. To learn more, see [Authentication](https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/authentication).\n\nAlternatively, the use of a single Application definition in Auth0 is supported. In this case, the user will be prompted to specify the required organization as part of first-factor authentication. This will typically require the use of a common Application `client_id`, but the `organization` parameter will be omitted on the call to the `/authorize` endpoint.\n\n## Connections\n\nNext, define the [Connections](https://auth0.com/docs/connections) that will be used to authenticate users. In this case, we’ll define a [Database Connection](https://auth0.com/docs/connections/database) for users associated with Hoekstra & Associates and an [Enterprise Connection](https://auth0.com/docs/connections/identity-providers-enterprise) for users associated with MetaHexa Bank.\n\nOnce the Connection has been defined, it can be provisioned to the appropriate Auth0 Organization using either the Auth0 Dashboard or Auth0 Management API. For more information, see [Enable Organization Connections](https://auth0.com/docs/manage-users/organizations/configure-organizations/enable-connections).\n\n## Users\n\nFor users that are authenticated via Connections other than Database or Custom Database Connections, the user is provisioned to the external Identity Provider (IdP) independent of Auth0 and in the normal way. On the other hand, users that are authenticated via Database or Custom Database Connections can be provisioned in a number of different ways. The Auth0 Dashboard and Auth0 Management API can be used to create a user directly in your Auth0 Tenant. We also support [Automatic Migration](https://auth0.com/docs/manage-users/user-migration/configure-automatic-migration-from-your-database) and [Bulk Migration](https://auth0.com/docs/manage-users/user-migration/bulk-user-imports).\n\nUsers are then associated with an Auth0 Organization by assigning them memberships, and an Auth0 Organization can be configured to [assign user Membership automatically](https://auth0.com/docs/manage-users/organizations/configure-organizations/grant-just-in-time-membership) or [on a manual basis](https://auth0.com/docs/manage-users/organizations/configure-organizations/assign-members).\n\n### Invitation\n\nThe Auth0 Organization feature also supports the use of Member Invitation. In the Member Invitation workflow, inviting a user to an application will result in the user being provisioned automatically and their user membership being generated automatically.\n\n#### Database Connection\n\nUsing our Hoekstra & Associates example, let’s see how this implementation might flow where a Database Connection is used as part of user invitation; most of the workflow described will typically be handled by using the relevant Auth0 SDK or library associated with your technology stack:\n\n![Architecture Scenarios - MOA - Isolated Users, Shared Apps, Invitation Flow (Database Connection)](https://images.ctfassets.net/cdy7uua7fh8z/2QMwMeBQ6U9TjLtbjPgNwe/1b436cd226b95355e73a93d5f9bc0be3/Isolated_Users__Shared_Apps__Invitation_Flow__Database_Connection_.png)\n\n1.  Jennifer from Hoekstra & Associates receives an email sent from Travel0’s Auth0 Tenant on behalf of Hoekstra & Associates' instance of Travel0 Corporate Booking.\n    \n    1.  The email was sent as described in [Invite Organization Members](https://auth0.com/docs/manage-users/organizations/configure-organizations/invite-members) and may have been triggered using either the Auth0 Dashboard or the Auth0 Management API.\n        \n2.  Jennifer opens the email and clicks on its contained link. Doing so directs her browser to Hoekstra & Associates' instance of Travel0 Corporate Booking. The base URL used in the link is specified as the [Application Login URI](https://auth0.com/docs/get-started/applications/application-settings), which forms part of Hoekstra & Associates' instance of Travel0 Corporate Booking application definition in the Travel0 Auth0 Tenant. \n    \n    1.  The link contains `organization` and `organization_name` parameters. The `organization` parameter is set to the ID of the corresponding Auth0 Organization definition in your Auth0 Tenant. This will be forwarded to the Auth0 Tenant as part of step 3.\n        \n    2.  The link also contains the `invitation` parameter, which will also be forwarded as part of step 3.\n        \n3.  Hoekstra & Associates' instance of Travel0 Corporate Booking redirects to the Travel0 Auth0 Tenant using [Authorization Code Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow) (with or without [PKCE](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-pkce)) by calling the `/authorize` endpoint and passing parameters similar to the following, typically via use of an [Auth0 SDK](https://auth0.com/docs/libraries) or third-party library:\n    \n    1.  `redirect_uri`: [`https://hoekstra.corp.travel0.net/login/callback`](https://hoekstra.corp.travel0.net/login/callback)\n        \n    2.  `response_type`: `code`\n        \n    3.  `state`: Unique [state](https://auth0.com/docs/secure/attack-protection/state-parameters) generated in this session\n        \n    4.  `scope`: `openid profile` ...\n        \n    5.  any necessary additional [OIDC Scopes](https://auth0.com/docs/get-started/apis/scopes/openid-connect-scopes), depending on the information required about the user.\n        \n    6.  `client_id`: Client ID associated with the Application created in the Travel0 Auth0 Tenant for Hoekstra & Associates' instance of Travel0 Corporate Booking.\n        \n    7.  `organization`: ID of the inviting organization typically obtained via the link in the email described in step 2. Specified in the form `organization=`organization\\_id, where organization\\_id is set to the identifier associated with the corresponding Auth0 Organization definition in your Auth0 Tenant.\n        \n    8.  `invitation`: Additional `invitation` parameter associated with the link in the email, as described in step 2.\n        \n4.  The Travel0 Auth0 Tenant redirects to `/signup/invitation` to collect a password credential from the user.\n    \n    1.  A Universal Login Page, which you can configure to display organization-specific brand collateral as described in [Branding](https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/branding), is displayed.\n        \n5.  The user enters their password (and any additional credentials, such as user name) and clicks continue. The user ID is set to the email address associated with the user and cannot be changed.\n    \n6.  The Travel0 Auth0 Tenant checks credentials. If valid, the user is provisioned and Auth0 Organization Membership is set. The user is implicitly authenticated, and the [Rules](https://auth0.com/docs/customize/rules) pipeline executes. Rules can be used to handle access control, as described in [Authorization](https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/authorization).\n    \n    1.  If credentials for the user are invalid, then the user will be prompted to re-enter them.\n        \n7.  Upon successful credential checking and Rules execution, the user is redirected to the `redirect_uri` ([`https://hoekstra.corp.travel0.net/login/callback`](https://hoekstra.corp.travel0.net/login/callback)) with the `state` passed in step 3, as well as a `code`.\n    \n8.  Hoekstra & Associates' instance of Travel0 Corporate Booking validates the `state` and then calls the Travel0 Auth0 Tenant at [`https://auth.travel0.net/oauth/token`](https://auth.travel0.net/oauth/token), passing the `code` and its `client id` and `client secret` in exchange for the [ID Token](https://auth0.com/docs/tokens/id-tokens). The ID token is then used to generate a session for [`https://hoekstra.corp.travel0.net`](https://hoekstra.corp.travel0.net/).\n    \n9.  Hoekstra & Associates' instance of Travel0 Corporate Booking instance displays the appropriate page to the user.\n    \n\n#### Enterprise Connection\n\nUsing our MetaHexa Bank example, let’s see how this implementation might flow where an Enterprise Connection is used as part of user invitation; again, most of the workflow described will typically be handled by using the relevant Auth0 SDK or library associated with your technology stack:\n\n![Architecture Scenarios - MOA - Isolated Users, Shared Apps, Invitation Flow (Enterprise Connection)](https://images.ctfassets.net/cdy7uua7fh8z/1IsdaHpprvIp17R5zYIg7q/c2c73360fb21657ab2ae98c0981b1cc6/Isolated_Users__Shared_Apps__Invitation_Flow__Enterprise_Connection_.png)\n\n1.  Amintha from MetaHexa Bank receives an email sent from Travel0’s Auth0 Tenant on behalf of MetaHexa Bank's instance of Travel0 Corporate Booking.\n    \n    1.  The email was sent as described in [Invite Organization Members](https://auth0.com/docs/manage-users/organizations/configure-organizations/invite-members) and may have been triggered using either the Auth0 Dashboard or the Auth0 Management API.\n        \n2.  Amintha opens the email and clicks on its contained link. Doing so directs her browser to MetaHexa Bank's instance of Travel0 Corporate Booking. The base URL used in the link is specified as the [Application Login URI](https://auth0.com/docs/get-started/applications/application-settings), which forms part of MetaHexa Bank's instance of Travel0 Corporate Booking application definition in the Travel0 Auth0 Tenant. \n    \n    1.  The link contains `organization` and `organization_name` parameters. The `organization` parameter is set to the ID of the corresponding Auth0 Organization definition in your Auth0 Tenant. This will be forwarded to the Auth0 Tenant as part of step 3.\n        \n    2.  The link also contains the `invitation` parameter, which will also be forwarded as part of step 3.\n        \n3.  MetaHexa Bank's instance of Travel0 Corporate Booking redirects to the Travel0 Auth0 Tenant using [Authorization Code Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow) (with or without [PKCE](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-pkce)) by calling the `/authorize` endpoint and passing parameters similar to the following, typically via use of an [Auth0 SDK](https://auth0.com/docs/libraries) or third-party library:\n    \n    1.  `redirect_uri`: [`https://metahexa.corp.travel0.net/login/callback`](https://metahexa.corp.travel0.net/login/callback)\n        \n    2.  `response_type`: `code`\n        \n    3.  `state`: Unique [state](https://auth0.com/docs/secure/attack-protection/state-parameters) generated in this session\n        \n    4.  `scope`: `openid profile` ...\n        \n    5.  any necessary additional [OIDC Scopes](https://auth0.com/docs/get-started/apis/scopes/openid-connect-scopes), depending on the information required about the user.\n        \n    6.  `client_id`: Client ID associated with the Application created in the Travel0 Auth0 Tenant for MetaHexa Bank's instance of Travel0 Corporate Booking.\n        \n    7.  `organization`: ID of the inviting organization typically obtained via the link in the email described in step 2. Specified in the form `organization=`organization\\_id, where organization\\_id is set to the identifier associated with the corresponding Auth0 Organization definition in your Auth0 Tenant.\n        \n    8.  `invitation`: Additional `invitation` parameter associated with the link in the email, as described in step 2.\n        \n4.  The Travel0 Auth0 Tenant redirects to `/invitation`, where Amintha is informed that she will be redirected to the MetaHexa IdP to authenticate first-factor credentials.\n    \n    1.  The user confirms, and \n        \n    2.  Auth0 redirects to the MetaHexa Bank IdP instance, where\n        \n    3.  The login page is displayed, and the user enters credentials and clicks `login`. \n        \n5.  If successful, the Auth0 Organization Membership is set, the user is implicitly authenticated, and the [Rules](https://auth0.com/docs/customize/rules) pipeline executes. Rules can be used to handle access control as described in [Authorization](https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/authorization).\n    \n\nSteps 6 through 8 will match those described in the [Database Connection](#database-connection) scenario, but where Amintha is the user instead of Jennifer, and where MetaHexa Bank (`metahexa.corp.travel0.net`) will be used in place of Hoekstra & Associates.\n\nInvitation via Social Connection follows a similar pattern to that associated with an [Enterprise Connection](#enterprise-connections), but the upstream IdP is associated with the social provider rather than any specific organization. For additional considerations with respect to using Social Connections, please see [Authentication](https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/authentication).",
  "title": "Single Identity Provider: Provisioning",
  "description": "Learn about provisioning Organizations for multi-tenant architectures.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/authentication",
  "markdown": "# Single Identity Provider: Authentication\n\nIn our architecture scenarios, we provide general purpose guidance on [B2B Authentication](https://auth0.com/docs/get-started/architecture-scenarios/business-to-business/authentication), including the use of the [Universal Login](https://auth0.com/docs/authenticate/login/auth0-universal-login) as a recommended best practice, which we recommend reviewing alongside the guidance provided here.\n\nAuthenticating users requires the processing of first-factor credentials. Whether this is performed by Auth0 or by some third-party Identity Provider (IdP), when you use the Auth0 Organizations feature, you must also use Auth0 [Universal Login Experience](https://auth0.com/docs/authenticate/login/auth0-universal-login/universal-login-vs-classic-login/universal-experience) capability.\n\n## Database Connection\n\nUsing our Hoekstra & Associates example, let's see how this Authentication implementation might flow with a user authenticated via an Auth0 Database Connection; most of the workflow described will typically be handled by using the relevant Auth0 SDK or library associated with your technology stack:\n\n![Architecture Scenarios - MOA - Isolated Users, Shared Apps, Database Login Flow](https://images.ctfassets.net/cdy7uua7fh8z/4ZdA61Ar4ijowOLLGCgLKx/fb71991702bf5f223f5ea184f7b6e693/Isolated_Users__Shared_Apps__Database_Login_Flow.png)\n\n1.  Jennifer from Hoekstra & Associates opens her browser and navigates to Hoekstra & Associates' instance of Travel0 Corporate Booking.\n    \n    1.  If Jennifer already has a session cookie with Hoekstra & Associates' instance of Travel0 Corporate Booking, then she will typically be logged in to the system, and we will exit here. For more information, see [Single Sign-On](https://auth0.com/docs/authenticate/single-sign-on).\n        \n2.  Hoekstra & Associates' instance of Travel0 Corporate Booking redirects to the Travel0 Auth0 Tenant using [Authorization Code Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow) (with or without [PKCE](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-pkce)) by calling the `/authorize` endpoint and passing parameters, typically via use of an [Auth0 SDK](https://auth0.com/docs/libraries) or third-party library:\n    \n    1.  `redirect_uri`: [`https://hoekstra.corp.travel0.net/login/callback`](https://hoekstra.corp.travel0.net/login/callback)\n        \n    2.  `response_type`: `code`\n        \n    3.  `state`: Unique [state](https://auth0.com/docs/secure/attack-protection/state-parameters) generated in this session\n        \n    4.  `scope`: `openid profile` ...\n        \n    5.  any necessary additional [OIDC Scopes](https://auth0.com/docs/get-started/apis/scopes/openid-connect-scopes), depending on the information required about the user.\n        \n    6.  `client_id`: Client ID associated with the Application created in the Travel0 Auth0 Tenant for Hoekstra & Associates' instance of Travel0 Corporate Booking.\n        \n    7.  `organization`: Auth0 Organization to use. Where the organization is known ahead of time, a request to `/authorize` can include this parameter, which is specified in the form `organization=`organization\\_id, where organization\\_id is set to the identifier associated with the corresponding Auth0 Organization definition in your Auth0 Tenant. Alternatively, you can omit the `organization` parameter from the call to `/authorize` and configure your Auth0 Tenant to prompt the user to select the appropriate organization as part of first-factor authentication. For more information, see [Define Organization Behavior](https://auth0.com/docs/manage-users/organizations/configure-organizations/define-organization-behavior).\n        \n3.  The Travel0 Auth0 Tenant redirects to `/login` to collect credentials from the user. If Jennifer already has a Database session with Hoekstra & Associates, then steps 3a and 4 will be skipped. For more information, see [Single Sign-On](https://auth0.com/docs/authenticate/single-sign-on).\n    \n    1.  The Universal Login Page, which you can configure to include organization-specific brand collateral as described in [Branding](https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/branding), is displayed.\n        \n4.  The user enters their credentials and clicks `login`.\n    \n5.  The Travel0 Auth0 Tenant checks the credentials for the user; if valid, the [Rules](https://auth0.com/docs/customize/rules) pipeline executes. Rules can be used to handle access control as described in [Authorization](https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/authorization). If credentials for the user are invalid, then the user will be prompted to re-enter them.\n    \n6.  Upon successful first-factor authentication and Rules execution, the user is redirected to the `redirect_uri` ([`https://hoekstra.corp.travel0.net/login/callback`](https://hoekstra.corp.travel0.net/login/callback)) with the `state` passed in step 2, as well as a `code`.\n    \n7.  Hoekstra & Associates' instance of Travel0 Corporate Booking validates the `state` and then calls the Travel0 Auth0 Tenant at [`https://auth.travel0.net/oauth/token`](https://auth.travel0.net/oauth/token), passing the `code` and its `client id` and `client secret` in exchange for the [ID Token](https://auth0.com/docs/tokens/id-tokens). The ID Token is then used to generate a session for [`https://hoekstra.corp.travel0.net`](https://hoekstra.corp.travel0.net/).\n    \n8.  Hoekstra & Associates' instance of Travel0 Corporate Booking instance displays the appropriate page to the user.\n    \n\n## Enterprise Connection\n\nAuthenticating via an Enterprise Connection follows a very similar process. Using our MetaHexa Bank example, let's see how this Authentication implementation might flow with a user authenticated via the Enterprise Connection to MetaHexa Bank; again, most of the workflow described will typically be handled by using the relevant Auth0 SDK or library associated with your technology stack\n\n![Architecture Scenarios - MOA - Isolated Users, Shared Apps, Enterprise Login Flow](https://images.ctfassets.net/cdy7uua7fh8z/11D1vMSKQcxyhfdDZzLprD/a8b0b85363ebbe6af3c67ba5ba90fc8b/Isolated_Users__Shared_Apps__Enterpise_Login_Flow.png)\n\n1.  Amintha from MetaHexa Bank opens her browser and navigates to MetaHexa Bank's instance of Travel0 Corporate Booking.\n    \n    1.  If Amintha already has a session cookie with MetaHexa Bank's instance of Travel0 Corporate Booking, then she will typically be logged in to the system, and we will exit here. For more information, see [Single Sign-On](https://auth0.com/docs/authenticate/single-sign-on).\n        \n2.  MetaHexa Bank's instance of Travel0 Corporate Booking redirects to the Travel0 Auth0 Tenant using [Authorization Code Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow) (with or without [PKCE](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-pkce)) by calling the `/authorize` endpoint and passing parameters, typically via use of an [Auth0 SDK](https://auth0.com/docs/libraries) or third-party library:\n    \n    1.  `redirect_uri`: [`https://metahexa.corp.travel0.net/login/callback`](https://metahexa.corp.travel0.net/login/callback)\n        \n    2.  `response_type`: `code`\n        \n    3.  `state`: Unique [state](https://auth0.com/docs/secure/attack-protection/state-parameters) generated in this session\n        \n    4.  `scope`: `openid profile` ...\n        \n    5.  any necessary additional [OIDC Scopes](https://auth0.com/docs/get-started/apis/scopes/openid-connect-scopes), depending on the information required about the user.\n        \n    6.  `client_id`: Client ID associated with the Application created in the Travel0 Auth0 Tenant for MetaHexa Bank's instance of Travel0 Corporate Booking.\n        \n    7.  `organization`: Auth0 Organization to use. Where the organization is known ahead of time, a request to `/authorize` can include this parameter, which is specified in the form `organization=`organization\\_id, where organization\\_id is set to the identifier associated with the corresponding Auth0 Organization definition in your Auth0 Tenant. Alternatively, you can omit the `organization` parameter from the call to `/authorize` and configure your Auth0 Tenant to prompt the user to select the appropriate organization as part of first-factor authentication. For more information, see [Define Organization Behavior](https://auth0.com/docs/manage-users/organizations/configure-organizations/define-organization-behavior).\n        \n    8.  `connection`: Name of the configured Auth0 Enterprise Connection for MetaHexa Bank.\n        \n3.  The Travel Auth0 Tenant redirects to the MetaHexa IdP to authenticate first-factor credentials.\n    \n    1.  The login page is displayed, and the user enters credentials. If Amintha already has a session with the MetaHexa IdP, then steps 3a and 4 will be skipped. For more information, see [Single Sign-On (SSO)](https://auth0.com/docs/authenticate/single-sign-on).\n        \n4.  The user enters their credentials and clicks `login`.\n    \n5.  Upon successful first-factor authentication, the [Rules](https://auth0.com/docs/customize/rules) pipeline executes. Rules can be used to handle access control as described in [Authorization](https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/authorization). If credentials for the user are invalid, then the user will be prompted to re-enter them.\n    \n\nSteps 6 through 8 will match those described in the [Database Connection](#database-connection) scenario, but where Amintha is the user instead of Jennifer, and where MetaHexa Bank (`metahexa.corp.travel0.net`) will be used in place of Hoekstra & Associates.\n\nAuthentication via Social Connection follows a similar pattern to that associated with an [Enterprise Connection](#enterprise-connection), but where the upstream IdP is associated with the social provider rather than any specific organization.\n\nWith Social Connections, user isolation cannot be modeled consistently on a per-organization basis. Although it may be tempting to model user isolation by creating multiple connections to a social provider, such as by using [Custom Social Connections](https://auth0.com/docs/connections/social/oauth2), you should refrain from doing so; such a strategy can result in the same user ID being created in multiple connection definitions, which will invariably lead to problems down the line.",
  "title": "Single Identity Provider: Authentication",
  "description": "Learn about authentication users through Organizations for multi-tenant architectures.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/business-to-consumer/launch/launch-day",
  "markdown": "# Launch Day Preparation (B2C)\n\n## Notifications / announcements\n\nIt helps a launch go smoothly if all stakeholders are aware of the impending launch and understand the launch plan as well as their role and responsibilities. In addition to notifying teams that will be actively involved, it can help to notify teams that might be needed if anything goes wrong. Having someone on standby during a launch can help expedite response. Be sure to identify and notify any team that might need to answer questions from customers, including on social media.\n\n### Parties to notify\n\n*   Customers\n    \n*   Business parters, if applicable\n    \n*   Application team(s) impacted by launch\n    \n*   Support teams\n    \n*   Network teams (network changes, on standby, in case of issues)\n    \n*   Security teams (on standby, in case of issues)\n    \n*   Marketing teams (ready for announcements, response to issues)\n    \n*   Social media teams (ready to monitor social media, respond)\n    \n*   Sales teams (prepared to answer questions from customers)\n    \n*   Customer success teams (prepared to answer questions from customers)\n    \n\n## Notification plan\n\nYour notification plan should include elements such as the target audience, the key takeaways for the audience, the message content, the plans for distributing the notification and how to test the messaging.\n\nA list of elements to include in the plan are:\n\n*   Target audience (consider both internal & external audiences)\n    \n*   Message\n    \n*   Timing\n    \n*   Dependencies\n    \n*   Responsible parties (who will send it)\n    \n*   Mechanism (how it will be communicated)\n    \n*   Test message and delivery (if applicable - test to ensure notifications sent)\n    \n\n## Notification distribution\n\nA common tactic is to release notifications in batches to spread out the initial onslaught of load and reduce the scope of confusion if there are any unforeseen glitches. It’s easier to correct issues with a small group than during a big-bang launch.\n\n*   One approach is to start with a relatively small batch of notifications, and if no issues are identified, increase the size of the batches over time.\n    \n*   You can also send out batches on a rolling schedule around the globe to spread out load hitting the system at once and have notifications arrive at an optimal time within each timezone to increase the likelihood of the messages being read.\n    \n*   You can do a soft-launch to a portion of users, such as individual customers, regions or some other grouping that makes sense for your application.\n    \n\n## Outage windows (if needed)\n\nSome organizations require a formal request for an outage window if any outages or downtime is required for a launch. If your organization requires this, be sure to identify if any downtime is required for the cutover or launch (or other dependent systems) and file the necessary outage or change requests in advance of any lead-time requirements.\n\n## Cutover plan (if needed)\n\nSome launches involve cutover from a previous solution to a new solution. If your project fits this scenario, you should be sure to identify everything that needs to happen as well as any dependencies, the responsible party for each task, and necessary timing. You may wish to plan alternates for all important roles or in each region in case anyone is unexpectedly sick or otherwise unavailable. A checklist of items to consider for the cutover plan is:\n\n*   Have you documented the cutover plan and rollback plan if needed?\n    \n*   Are backups needed of anything prior to change?\n    \n*   Are any preparatory data changes required?\n    \n*   Any DNS records to be changed?\n    \n*   Any Firewall changes?\n    \n*   Any new monitoring targets?\n    \n*   Any software to be deployed?\n    \n\n## Go / no-go criteria\n\nIn your overall launch plan, it is helpful to have go/no-go criteria and to have discussed in advance the types of issues which could occur and which could be worked through vs would require reverting. A launch plan can specify periodic check-in timeframes with criteria of what to assess at each checkpoint and how long to allow an issue to continue unresolved.\n\nFor each stage of the launch, it helps to have success criteria defined, that indicate the launch is proceeding as planned and can continue. Some example criteria could be:\n\n*   User signups growing with minimal errors\n    \n*   User logins at expected rate, minimal errors\n    \n*   Reported support issues below a certain threshold\n    \n*   No issues identified that could lead to corrupted data\n    \n\nIt’s also helpful to have identified criteria which could trigger a “no-go” decision to halt the launch. The risk tolerance for each environment varies, but a few example criteria might include:\n\n*   High percent of user signup or login resulting in errors that cannot be resolved quickly\n    \n*   High number of support issues that cannot be resolved quickly\n    \n*   Condition identified that could lead to data corruption\n    \n*   High severity security issue discovered\n    \n\n## Rollback\n\nIt is always wise to have a plan for how to rollback or revert a launch, just in case something unforeseeable occurs which cannot be resolved. Reviewing the launch plan for every step which involves a change can help identify the tasks or changes requires to revert a launch or cutover.\n\nThe rollback plan should include the steps to take, the sequence, how long each is likely to take and the responsible party. Understanding the cumulative time required to roll back can help to determine the timing of the final go/no-go decision to fit within any required outage window.\n\nIf any data is migrated or changed for the launch, the plan should include how to revert it, if needed. Reverting may require running scripts to undo operational changes or restoring a data store from a backup taken before the launch process began.\n\nIt is also necessary to plan for the case where some data is entered into a new system before it has to be reverted. Will such data / transactions need to be abandoned with the rollback or will you have a way to capture and apply them elsewhere so they aren’t lost?\n\nIf the resolution of issues or process to revert could potentially take longer than one shift, you’ll want to ensure you have a primary and perhaps a secondary person available and prepared to handle things during each work shift. If an issue results in the need for prolonged response, significantly beyond one shift, there are limits for how long people can realistically function without a break. It can help to be prepared with resources for a follow-the-sun issue response effort if needed.\n\n## Standby contacts\n\nAs the launch day approaches, it’s a good idea to identify all contacts who might be needed for troubleshooting or resolving issues and request them to be on standby and ready to help if needed. The launch leader should have contact information for each person on the standby list to expedite communications.\n\nIf there is a physical or virtual \"launch room\", the people on standby should know where it is and be ready to join if needed. Having a central room or video conference prepared can expedite communications and troubleshooting across all parties if an issue occurs.\n\n## Success Criteria\n\nA lot of planning goes into a launch in order to be successful, but will you know how to evaluate the launch? If you define success criteria before the launch, you can determine what to monitor and if any additional monitoring or checks need to be in place to evaluate the launch. For example - if one element of the success criteria is the number of sign-ups or logins - do you have a way of monitoring that and has it been tested to ensure it is accurate?\n\nYou’ll want statistics to be able to trumpet the success of your launch. You don’t want to find out after the launch that you didn’t capture any data to quantify all the hard work your team put into the launch.\n\n## Risks & mitigations plan\n\nIt’s no fun to think of things that could go wrong, but if anything happens, you’ll be glad you did as having a plan can expedite response. A few examples to plan for include:\n\n*   Software application bug\n    \n*   Application incompatibility with user browser settings\n    \n*   Network failure/outage\n    \n*   DoS attack\n    \n*   Hosting environment failure\n    \n*   Load / capacity issues\n    \n*   Data / corruption issues\n    \n*   Security vulnerability discovered\n    \n\nIf you had a beta period, it may help to review the results of the beta to identify additional possible failure scenarios.\n\n## Project Planning Guide\n\nWe provide planning guidance in PDF format that you can download and refer to for details about our recommended strategies.\n\n[B2C IAM Project Planning Guide](https://assets.ctfassets.net/cdy7uua7fh8z/3er1aEQ7Ul0q3c9leJWczR/b1f18b4c16abb7e78b01e4eb2b52bb8e/B2C_Project_Planning.pdf)",
  "title": "Launch Day Preparation (B2C)",
  "description": "Launch preparation considerations for your B2C IAM implementation.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/branding",
  "markdown": "# Single Identity Provider: Branding\n\nBranding collateral associated with an organization is extremely valuable because using brand collateral provides users with an environment that they know and trust. Using recognized brand collateral also increases user confidence that the information they provide (for example, credentials) will be handled safely and securely. In our architecture scenarios, we provide general guidance on a number of [B2B Branding](https://auth0.com/docs/get-started/architecture-scenarios/business-to-business/branding) topics, which we recommend reviewing alongside the guidance provided here.\n\n## Universal Login\n\nBranding a multi-organization environment can be more complex than in a standard environment where you only have to deal with one set of brand collateral. [Auth0 Organizations](https://auth0.com/docs/manage-users/organizations/organizations-overview), however, leverages the [Universal Login experience](https://auth0.com/docs/authenticate/login/auth0-universal-login/universal-login-vs-classic-login/universal-experience), which provides a number of [page templates](https://auth0.com/docs/customize/login-pages/universal-login/customize-templates) to help simplify brand customization. Auth0 Organization configuration itself also allows you to [select basic color scheme branding](https://auth0.com/docs/manage-users/organizations/configure-organizations/create-organizations).\n\n### Login page\n\nWhen using a [Database or Custom Database Connection](https://auth0.com/docs/connections/database), the Login page is used to obtain first-factor credentials for a user. You can configure the Login page using a set of [template variables](https://auth0.com/docs/manage-users/organizations/create-first-organization) available to assist with per-organization customization.\n\n### Password Reset page\n\nSimilar to the [Login page](#login-page), the Password Reset page can be configured in scenarios that use a Database or Custom Database Connection. For scenarios involving an Enterprise Connection or a Social Connection, password changes are handled external to Auth0 by the upstream Identity Provider (IdP), so an Auth0 Password Reset page is never displayed.\n\n### Multi-factor Authentication pages\n\nMulti-Factor Authentication (MFA) in Auth0 is supported for all methods used to obtain first-factor credentials for a user (i.e., Database or Custom Database Connection, Enterprise Connection, or Social Connection). If you're using MFA, then you will likely want to brand the Universal Login experience pages associated with MFA, which can be done similarly to [Login page](#login-page) branding.\n\n## Email templates\n\nAs with Universal Login page templates, a set of email [template variables](https://auth0.com/docs/customize/email/email-templates) are available to assist with per-organization email customization. The email templates that need to be customized will vary depending on how users are authenticated (in other words, via Database or Custom Database Connection, Enterprise Connection, or Social Connection). To learn more about email template customization when using the Auth0 Organizations feature, see [Create Your First Organization: Email Templates](https://auth0.com/docs/manage-users/organizations/create-first-organization).\n\n## Custom Domains\n\nThe Auth0 Organizations feature supports only one [Custom Domain](https://auth0.com/docs/customize/custom-domains), which is defined at the Auth0 Tenant level. Therefore, we recommend that you use a Custom Domain Name that is organization agnostic. If you absolutely must implement per-organization domain naming, then multiple Auth0 Tenants will need to be deployed to production. Because using multiple tenants has ramifications that affect Single Sign-On (SSO), user profile management, and so on, you should carefully consider before going down this route.",
  "title": "Single Identity Provider: Branding",
  "description": "Learn about customizing branding for Organizations in multi-tenant architectures.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/authorization",
  "markdown": "# Single Identity Provider: Authorization\n\nWhen thinking about authorization, you typically need to consider how you determine what a person is allowed to do and how you communicate this information to your applications and/or APIs. Depending on the applications you have, you may be affected by one or both of these. In our architecture scenarios, we provide general purpose guidance on [B2B Authorization](https://auth0.com/docs/get-started/architecture-scenarios/business-to-business/authorization), which we recommend reviewing alongside the guidance provided here.\n\n*   [ID Tokens](https://auth0.com/docs/secure/tokens/id-tokens) are often used to convey user authorization information to applications through custom claims, which can be added using [Rules](https://auth0.com/docs/customize/rules) extensibility. Added claims can allow you to present a user interface in which users don’t have the ability to attempt something they are not permitted to do. Authorization information in an ID Token also provides any application backend with a way to restrict users from bypassing frontend controls for traditional web apps.\n    \n\n*   APIs that provide public-facing access to shared resource services are typically protected via access control mechanisms. For this purpose, Auth0 provides the ability to create an authorization bearer token, or OAuth 2 [access token](https://auth0.com/docs/secure/tokens/access-tokens), which can convey user authorization information to an API, typically by using Auth0 [Role-Based Access Control (RBAC)](https://auth0.com/docs/manage-users/access-control/configure-core-rbac) to apply one or more [membership-assigned roles](https://auth0.com/docs/manage-users/organizations/configure-organizations/add-member-roles) or by adding custom claims via [Rules](https://auth0.com/docs/customize/rules) extensibility. You can also leverage Auth0 RBAC capability to automatically adjust the `scope` claim of an access token. APIs can then use this information to apply the appropriate level of access control, which allows your API to enforce policy rules without having to do an extra lookup to get information about the user.\n    \n*   In certain cases, you may want to implement application-level policies at the Auth0 Tenant; this allows you to apply policies to a whole range of applications and resource services (APIs) without needing to modify each one independently. You typically implement this via [Rules](https://auth0.com/docs/customize/rules) extensibility.\n    \n\n## ID token claims\n\nUsually claims can be added to identity tokens as discussed in our [ID Token Claims](https://auth0.com/docs/get-started/architecture-scenarios/business-to-consumer/authorization) best practice guidance. When using the Auth0 Organizations feature, an `org_id` claim is automatically added to any identity token (for an example, see [Work with Tokens and Organizations](https://auth0.com/docs/manage-users/organizations/using-tokens)) issued for users with organization membership. This parameter is validated by Auth0 SDKs. You can also add supplemental information associated with an Auth0 Organization by adding a custom claim to the identity token:\n\n```\ncontext.idToken['http://travel0.net/multifactor'] = context.multifactor;\n```\n\n**Note**: If you have configured your tenant to support organization names in the Authentication API, the `org_name` claim is automatically included in ID tokens. To learn more, review [Use Organization Names in Authentication API](https://auth0.com/docs/manage-users/organizations/configure-organizations/use-org-name-authentication-api).\n\n### SAML assertion\n\nWhile the Auth0 Organization feature does not support SAML\\-aware applications, a SAML assertion generated by an upstream Identity Provider (IdP) can be configured to populate standard or custom claims in an identity token consumed downstream. For example, you could define the mappings section of a SAML enterprise connection:\n\n```\n{ \n  \"user_id\": [\n    \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\",\n    \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn\",\n    \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"\n  ],\n  \"email\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\",\n  \"name\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\",\n  \"given_name\": [\n    \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname\",\n    \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"\n  ], \n  \"family_name\": \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname\",\n  \"groups\": \"http://schemas.xmlsoap.org/claims/Group\"\n}\n```\n\nIn this example, each field will be assigned a value in the `user` object in a Rule, which will either map to standard claims in an identity token or can be mapped using custom claims. To learn more about customizing SAML mappings, see [Connect Your App to SAML Identity Providers: Set up mappings](https://auth0.com/docs/connections/enterprise/saml#set-up-mappings).\n\n## Access token claims\n\nIn addition to any other claims you are adding to your access token for access control decisions (see our general [Access Token Claims](https://auth0.com/docs/get-started/architecture-scenarios/business-to-consumer/authorization) best practice guidance), you will typically want to communicate the organization to which the user belongs.\n\nAs with the identity token, when using the Auth0 Organizations feature, the `org_id` claim is automatically added to any access token (for an example, see [Work with Tokens and Organizations](https://auth0.com/docs/manage-users/organizations/using-tokens)) issued for users with organization membership. You can also add supplemental information associated with an Auth0 Organization by adding a custom claim to the access token:\n\n```\ncontext.accessToken['http://travel0.net/multifactor'] = context.multifactor;\n```\n\n**Note**: If you have configured your tenant to support organization names in the Authentication API, the `org_name` claim is automatically included in access tokens. To learn more, review [Use Organization Names in Authentication API](https://auth0.com/docs/manage-users/organizations/configure-organizations/use-org-name-authentication-api).\n\nAlternatively, you could create a unique API audience for each organization, which would result in a unique API definition in Auth0. While this mechanism can mitigate the need for employing custom Rule extensibility, the complexity it introduces can be challenging. A simple comparison is as follows:\n\n| **Approach** | **Pros** | **Cons** |\n| --- | --- | --- |\n| Unique API Audience | *   Out-of-the-box support for machine-to-machine access for a single organization.<br>*   Audience is a standard claim in an access token.<br>*   Refresh token processing requires no additional organization logic. | *   Must automate the creation of an API for every organization.<br>*   Independent roles may need to be created if using RBAC.<br>Must automate the provisioning of Roles to Membership.*   API implementation has to process for multiple audiences. |\n| Custom Claim | Simplifies Auth0 Tenant configuration. | Custom code needed in a rule to add the organization to the access token. |\n\n### Roles\n\nThe Auth0 Organizations feature also supports [Role-Based Access Control (RBAC)](https://auth0.com/docs/manage-users/access-control/rbac) via the [Authorization Core](https://auth0.com/docs/manage-users/access-control/configure-core-rbac) feature associated with an Auth0 Tenant. RBAC is [applied at the Auth0 Organization membership level](https://auth0.com/docs/manage-users/organizations/configure-organizations/add-member-roles).\n\n## Access control\n\nResource-level policy enforcement is the responsibility of the applications and/or APIs in your system. If you attempt to enforce policies in a centralized Authorization Server, such as your Auth0 Tenant, you will quickly run into a complex control system that is difficult to maintain and understand. Instead, your centralized Authorization Server can ensure that the appropriate information about a user is included in the tokens, so that your applications and APIs have the necessary information to make policy enforcement decisions. At the very least, in situations where there is too much information to contain in a single token (for example, resource-level permissions) or where information changes frequently enough that it would be out of date if accessed directly in the token, your applications and APIs should be able to look up the correct information.\n\nSome high-level policy enforcement, on the other hand, can be handled in a centralized fashion. For example, when using an Auth0 Tenant context, there are some situations in which you could implement a Rule that mitigates the need for every application and/or API to apply the same restrictions. These include:\n\n*   blocking access to users from a particular IP address\n    \n*   implementing specific requirements around Contextual or Adaptive MFA\n    \n*   restricting login to only users who have verified their email address\n    \n*   restricting access to a certain API audience, so a user cannot obtain an access token for any other API audience or cannot obtain an access token for that audience under certain circumstances. In this case, if you’re creating a custom API Audience for each organization, your Rule must also ensure that the authenticating user belongs to the organization that matches the corresponding API audience.",
  "title": "Single Identity Provider: Authorization",
  "description": "Learn about authorizing users for Organizations in multi-tenant architectures.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-write-hook",
  "markdown": "# Delegated Administration: Write Hook\n\nThe Write Hook, which runs anytime you create or update a user, allows you to do things like:\n\n*   Changing the user's password\n    \n*   Changing the user's email address\n    \n*   Updating the user's profile\n    \n\nYou can also use the Write Hook to automatically set default values for newly-created users. For example, you might want to automatically assign a user to the same group, department, or vendor as the ones to which you've been assigned.\n\n## Hook contract\n\n*   **ctx**: Context object.\n    \n    *   **request.originalUser**: Current user's values where the **payload** is the new set of fields. Only available when the method is **update**.\n        \n    *   **payload**: Payload object\n        \n        *   **memberships**: Array of memberships that were selected in the UI when creating the user.\n            \n        *   **email**: Email address of the user.\n            \n        *   **password**: Password of the user.\n            \n        *   **connection**: Name of the database connection.\n            \n        *   **app\\_metadata**: Data that's included if a Custom Field being modified is saved in `app_metadata`.\n            \n        *   **user\\_metadata**: Data that's included if a Custom Field being modified is saved in `user_metadata`.\n            \n    *   **userFields**: User fields array (if specified in the settings query)\n        \n    *   **method**: Either **create** or **update** depending on whether this is being called as a result of a create or an update call.\n        \n*   **callback(error, user)**: Callback to which you can return an error and the user object that should be sent to the Management API.\n    \n\nFor more information about **userFields**, read [Delegated Administration: Settings Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-settings-query-hook).\n\n## Sample use\n\nKelly manages the Finance department. When she creates users, these users should be assigned as members of the Finance department.\n\n```\nfunction(ctx, callback) {\n  var newProfile = {\n    email: ctx.payload.email,\n    password: ctx.payload.password,\n    connection: ctx.payload.connection,\n    user_metadata: ctx.payload.user_metadata,\n    app_metadata: {\n      department: ctx.payload.memberships && ctx.payload.memberships[0],\n      ...ctx.payload.app_metadata\n    }\n  };\n\n  if (!ctx.payload.memberships || ctx.payload.memberships.length === 0) {\n    return callback(new Error('The user must be created within a department.'));\n  }\n\n  // Get the department from the current user's metadata.\n  var currentDepartment = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n  if (!currentDepartment || !currentDepartment.length) {\n    return callback(new Error('The current user is not part of any department.'));\n  }\n\n  // If you're not in the IT department, you can only create users within your own department.\n  // IT can create users in all departments.\n  if (currentDepartment !== 'IT' && ctx.payload.memberships[0] !== currentDepartment) {\n    return callback(new Error('You can only create users within your own department.'));\n  }\n\n  if (ctx.method === 'update') {\n    // If updating, only set the fields we need to send\n    Object.keys(newProfile).forEach(function(key) {\n      if (newProfile[key] === ctx.request.originalUser[key]) delete newProfile[key];\n    });\n  }\n\n  // This is the payload that will be sent to API v2. You have full control over how the user is created in API v2.\n  return callback(null, newProfile);\n}\n```\n\n## Learn more\n\n*   [Delegated Administration: Access Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-access-hook)\n*   [Delegated Administration: Filter Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook)\n*   [Delegated Administration: Memberships Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-memberships-query-hook)\n*   [Delegated Administration: Settings Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-settings-query-hook)",
  "title": "Delegated Administration: Write Hook",
  "description": "Learn how to use the Write Hook with the Delegated Administration Extension.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-settings-query-hook",
  "markdown": "# Delegated Administration: Settings Query Hook\n\nThe **Settings Query Hook** allows you to customize the look and feel of the Delegated Administration extension.\n\n## Hook contract\n\n*   **ctx**: Context object.\n    \n    *   **request.user**: User currently logged in.\n        \n    *   **locale**: Locale (as inferred from the URL) -- `https://{yourTenant}.us.webtask.io/auth0-delegated-admin/en/users` will set **locale** to `en`.\n        \n*   **callback(error, settings)**: Callback to which you can return an error and a settings object.\n    \n\n## Sample use\n\n```\nfunction(ctx, callback) {\n  var department = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n\n  return callback(null, {\n    // Only these connections should be visible in the connections picker. If only one connection is available, the connections picker will not be shown in the UI.\n    connections: [ 'Username-Password-Authentication', 'My-Custom-DB' ],\n    // The dictionary allows you to overwrite the title of the dashboard and the \"Memberships\" label in the Create User dialog.\n    dict: {\n      title: department ? department + ' User Management' : 'User Management Dashboard',\n      memberships: 'Departments',\n      menuName: ctx.request.user.name\n    },\n    // The CSS option allows you to inject a custom CSS file depending on the context of the current user (eg: a different CSS for every customer)\n    css: (department && department !== 'IT') && 'https://rawgit.com/auth0-extensions/auth0-delegated-administration-extension/master/docs/theme/fabrikam.css',\n    // This option allows you to restrict creating new users\n    canCreateUser: (department === 'IT')\n  });\n}\n```\n\n### Properties\n\n*   **connections**: List of the connections this admin is allowed to create and edit users within.\n    \n*   **dict**: Dictionary that allows you to overwrite the title of the dashboard and the **Memberships** label in the Create User dialog.\n    \n    *   **dict.title**: Title to display at the top of the UI.\n        \n    *   **dict.memberships**: Label to set for memberships fields.\n        \n    *   **dict.menuName**: Name to set for the upper right-hand dropdown menu.\n        \n    *   **dict.logoutUrl**: Alternate URL for the logout menu option.\n        \n*   **userFields**: Array of user fields (see \"Custom fields\" below).\n    \n*   **css**: String URL to import CSS.\n    \n*   **altcss**: String URL to import a second set of CSS. You can use this to specify things like accessibility CSS for larger fonts. The user will be presented with a menu item allowing them to toggle this set of CSS on/off.\n    \n*   **languageDictionary**: String URL or Dictionary Object (see \"Localization\"below).\n    \n*   **suppressRawData**: Set to **true** to skip pages that show raw JSON\n    \n*   **errorTranslator**: Function that translates error messages based on localization. Example: `(function (error, languageDictionary) { return languageDictionary.customErrors[error] || error; }).toString()`\n    \n*   **canCreateUser**: Boolean flag. If set to `false`, removes `Create User` button and forbids creating new users, `true` by default.\n    \n\n## Custom fields\n\nBeginning with version 3.0 of the Delegated Admin Extension, you can define custom fields and specify their values. Custom fields can be stored in the **user metadata** and **app metadata** fields accessible during the user creation or update processes.\n\nYou may also customize existing fields defined by Auth0, such as email, username, name, and connection.\n\nTo use custom fields, you must:\n\n*   Add your list of **userFields** to the Settings Query Hook\n    \n*   Implement a Write Hook. Custom fields require the use of the Write Hook to properly update `user_metadata` and `app_metadata`. You must update the user object passed to the callback function with the `user_metadata` and `app_metadata` from the context (`ctx` object) provided to the Hook.\n    \n\nTo learn more about Write Hooks, read [Delegated Administration: Write Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-write-hook).\n\nSample schema for **userFields**:\n\n```\nuserFields: [\n    {\n        \"property\": string, // required\n        \"label\": string,\n        \"sortProperty\": string,\n        \"display\": true || function.toString(),\n        \"search\": false || {\n            \"display\": true || function.toString()\n            \"listOrder\": 1,\n            \"listSize\": string(###%), // e.g. 15%\n            \"filter\": boolean,\n            \"sort\": boolean\n        },\n        \"edit\": false || {\n            \"display\": true || function.toString()\n            \"type\": \"text || select || password || hidden\",\n            \"component\": \"InputText || Input Combo || InputMultiCombo || InputSelectCombo\",\n            \"options\": Array(string) || Array ({ \"value\": string, \"label\": string }),\n            \"disabled\": true || false,\n            \"validationFunction\": function.toString()\n        },\n        \"create\": false || {\n            \"display\": true || function.toString()\n            \"type\": \"text || select || password || hidden\",\n            \"component\": \"InputText || Input Combo || InputMultiCombo || InputSelectCombo\",\n            \"options\": Array(string) || Array ({ \"value\": string, \"label\": string }),\n            \"disabled\": true || false,\n            \"validationFunction\": function.toString()\n        }\n    },\n    ...\n]\n```\n\n*   **property** (**required**): Property name of the **ctx.payload** object for the Write Hook. In the Write Hook, `\"property\": \"app_metadata.dbId\"` sets `ctx.payload.app_metadata.dbId`.\n    \n*   **label**: Label that will be used when adding a label to the field on the user info page, create page, edit profile page, or search page.\n    \n*   **sortProperty**: If sorting by a different field than this for the search table, use this field. Dot notation is allowed.\n    \n*   **display**: true || false || stringified => This is the default display value. If not overridden in search, edit, or create, it will use this value.\n    \n    *   if `true`, will just return `user.<property>`.\n        \n    *   Default: if `false` this value will not be displayed on any page (unless overridden in search, edit, or create).\n        \n    *   if stringified function: Executes function to get the value to display. Example: `(function display(user, value, languageDictionary) { return moment(value).fromNow(); }).toString()`\n        \n*   **search**: false || object => Describes how this field will behave on the search page.\n    \n    *   Default: if `false`, will not show up in the search table.\n        \n    *   **search.display**: Overrides the default display value.\n        \n    *   **search.listOrder**: Specifies the column order for the search display table.\n        \n    *   **search.listSize**: Specifies the default width of the column.\n        \n    *   **search.filter**: Specifies whether to allow this field to be searched in the search dropdown. Default is false.\n        \n    *   **search.sort**: Specifies whether this column is sortable. Use sortProperty if you want to sort by a field other than property. Default is false.\n        \n*   **edit**: false || object => Describes whether the field shows up on the edit dialogs. If not a default field and set to an object, this will show up in the `Change Profile` page on the User Actions dropdown on the user page.\n    \n    *   Default: if `false`, will not show up on any edit/update page.\n        \n    *   **edit.display**: Overrides the default display value.\n        \n    *   **edit.required**: Set to true to fail if it does not have a value. Default is false.\n        \n    *   **edit.type** **required**: text || select || password\n        \n    *   **edit.component**: InputText || Input Combo || InputMultiCombo || InputSelectCombo\n        \n        *   **InputText** (default): Simple text box.\n            \n        *   **InputCombo**: Searchable dropdown, single value only.\n            \n        *   **InputMultiCombo**: Searchable dropdown with multiple values allowed.\n            \n        *   **InputSelectCombo**: Select dropdown of options.\n            \n    *   **edit.options**: If component is one of InputCombo, InputMultiCombo, InputSelectCombo, the option values need to be specified.\n        \n        *   **Array(string)**: Array of values (the label and value fields will be set to the same value).\n            \n        *   **Array({ \"value\": string, \"label\": string })**: Allows you to set separate values for the value and label. This will result in the value in the Write Hook having the same value, but it can be trimmed down to just the value in the Write Hook.\n            \n        *   Server-side validation will ensure that any value specified for this field appears in the options array.\n            \n    *   **edit.disabled**: `true` if the component should be read only; default is false.\n        \n    *   **edit.validateFunction**: Stringified function for validation. Note that this validation function will run on both the server- and client-side. Example: `(function validate(value, values, context, languageDictionary) { if (value...) return 'something went wrong'; return false; }).toString()`.\n        \n*   **create**: false || object => Describes whether the field shows up on the create dialog.\n    \n    *   Default: if `false`, will not show up on the create page.\n        \n    *   **create.placeholder**: Provide placeholder text to show when input is empty.\n        \n    *   **create.required**: Set to true to fail if it does not have a value. Default is false.\n        \n    *   **create.type** **required**: text || select || password\n        \n    *   **create.component**: InputText || Input Combo || InputMultiCombo || InputSelectCombo\n        \n        *   **InputText** (default): Text box. Default for type text and password.\n            \n        *   **InputCombo**: Searchable dropdown, single value only.\n            \n        *   **InputMultiCombo**: Searchable dropdown with multiple values allowed.\n            \n        *   **InputSelectCombo**: Select dropdown of options.\n            \n    *   **create.options**: If component is one of InputCombo, InputMultiCombo, InputSelectCombo, the option values need to be specified.\n        \n        *   **Array(string)**: Simple array of values, label, and value will be set to the same.\n            \n        *   **Array({ \"value\": string, \"label\": string })**: Allows you to set separate values for both the value and label. This will result in the value in the Write Hook having the same value, but it can be trimmed down to just the value in the Write Hook.\n            \n        *   Server-side validation will ensure that any value specified for this field is in the options array.\n            \n    *   **create.disabled**: true if component should be read only, default is false.\n        \n    *   **create.validateFunction**: Stringified function for checking the validation.\n        \n        *   Example: `(function validate(value, values, context, languageDictionary) { if (value...) return 'something went wrong'; return false; }).toString()`\n            \n        *   This validation function will run on both the server- and client-side.\n            \n\n## Predefined fields\n\nThere are a set of pre-defined, searchable fields for default behavior.\n\nYou can override the default behavior by adding the field as a userField and then overriding the behavior you would like to change. This would often be done to suppress a field by setting the display to false.\n\n### Search fields\n\n*   **name**: Constructed field from other fields: default display function: `(function(user, value) { return (value || user.nickname || user.email || user.user_id); }).toString()`\n    \n*   **email**: Email address or N/A\n    \n*   **last\\_login\\_relative**: Last login time\n    \n*   **logins\\_count**: Number of logins\n    \n*   **connection**: Database connection\n    \n\n### User info fields\n\n*   **user\\_id**: User ID\n    \n*   **name**: User's name\n    \n*   **username**: User's username\n    \n*   **email**: User's email\n    \n*   **identity.connection**: Connection value\n    \n*   **isBlocked**: Whether or not the user is blocked\n    \n*   **blocked\\_for**: Whether or not the user has attack protection blocks\n    \n*   **last\\_ip**: Last IP the user used to log in\n    \n*   **logins\\_count**: Number of times the user has logged in\n    \n*   **currentMemberships**: List of memberships for this user\n    \n*   **created\\_at**: Date/time at which the user was created\n    \n*   **updated\\_at**: Date/time at which the user was updated\n    \n*   **last\\_login**: Date/time at which the user last logged in\n    \n\n### Create and edit user fields\n\n*   **connection**: User's database\n    \n*   **password**: New password\n    \n*   **repeatPassword**: Repeat of the user's password\n    \n*   **email**: User's email\n    \n*   **username**: User's username\n    \n\n### Sample use\n\n```\nfunction(ctx, callback) {\n  var department = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n\n  return callback(null, {\n    // Only these connections should be visible in the connections picker.\n    // If only one connection is available, the connections picker will not be shown in the UI.\n    connections: [ 'Username-Password-Authentication', 'My-Custom-DB' ],\n    // The dictionary allows you to overwrite the title of the dashboard and the \"Memberships\" label in the Create User dialog.\n    dict: {\n      title: department ? department + ' User Management' : 'User Management Dashboard',\n      memberships: 'Departments'\n    },\n    // User Fields are the custom fields that can be displayed in create and edit, and can also be used for searching, and can be used to customize the view user page\n    userFields: [\n        {\n            \"label\": \"Conexión\",\n            \"property\": \"connection\",\n        },\n        {\n            \"label\": \"Correo Electrónico\",\n            \"property\": \"email\",\n        },\n        ...\n    ],\n    // The CSS option allows you to inject a custom CSS file depending on the context of the current user (eg: a different CSS for every customer)\n    css: (department && department !== 'IT') && 'https://rawgit.com/auth0-extensions/auth0-delegated-administration-extension/master/docs/theme/fabrikam.css',\n    languageDictionary: 'https://your-cdn.com/locale/es.json'\n  });\n}\n```\n\n## Localization\n\nBeginning with version 3.0 of the Delegated Admin Extension, you can provide a language dictionary for use with localization. The language dictionary is used only for static page content; for field level content, you must use **userFields** labels.\n\nTo specify the locale, you can use the path. For example: `https://{yourTenant}.us.webtask.io/auth0-delegated-admin/en/users` will set `context.locale` to `en` in the settings query.\n\nThe **languageDictionary** is set as part of the settings query, which allows you to:\n\n*   Explicitly define a **languageDictionary**\n    \n*   Provide a URL to fetch the contents for the **languageDictionary** parameter\n    \n\nFor more information, you can review the [Delegated Administration Extension Language Dictionary file](https://rawgit.com/auth0-extensions/auth0-delegated-administration-extension/master/tests/utils/en.json).\n\n### Example: Provide link to language dictionary file\n\n```\nfunction(ctx, callback) {\n  var department = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n\n  return callback(null, {\n    // Only these connections should be visible in the connections picker.\n    // If only one connection is available, the connections picker will not be shown in the UI.\n    connections: [ 'Username-Password-Authentication', 'My-Custom-DB' ],\n    // The dictionary allows you to overwrite the title of the dashboard and the \"Memberships\" label in the Create User dialog.\n    dict: {\n      title: department ? department + ' User Management' : 'User Management Dashboard',\n      memberships: 'Departments'\n    },\n    // User Fields are the custom fields that can be displayed in create and edit, and can also be used for searching, and can be used to customize the view user page\n    userFields: [\n        {\n            \"label\": \"Conexión\",\n            \"property\": \"connection\",\n        },\n        {\n            \"label\": \"Correo Electrónico\",\n            \"property\": \"email\",\n        },\n        ...\n    ],\n    // The CSS option allows you to inject a custom CSS file depending on the context of the current user (eg: a different CSS for every customer)\n    css: (department && department !== 'IT') && 'https://rawgit.com/auth0-extensions/auth0-delegated-administration-extension/master/docs/theme/fabrikam.css',\n    languageDictionary: 'https://your-cdn.com/locale/es.json'\n  });\n}\n```\n\n### Example: Provide language dictionary object\n\n```\nfunction(ctx, callback) {\n  var department = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n\n  return callback(null, {\n    // Only these connections should be visible in the connections picker.\n    // If only one connection is available, the connections picker will not be shown in the UI.\n    connections: [ 'Username-Password-Authentication', 'My-Custom-DB' ],\n    // The dictionary allows you to overwrite the title of the dashboard and the \"Memberships\" label in the Create User dialog.\n    dict: {\n      title: department ? department + ' User Management' : 'User Management Dashboard',\n      memberships: 'Departments'\n    },\n    // User Fields are the custom fields that can be displayed in create and edit, and can also be used for searching, and can be used to customize the view user page\n    userFields: [\n        {\n            \"label\": \"Conexión\",\n            \"property\": \"connection\",\n        },\n        {\n            \"label\": \"Correo Electrónico\",\n            \"property\": \"email\",\n        },\n        ...\n    ],\n    // The CSS option allows you to inject a custom CSS file depending on the context of the current user (eg: a different CSS for every customer)\n    css: (department && department !== 'IT') && 'https://rawgit.com/auth0-extensions/auth0-delegated-administration-extension/master/docs/theme/fabrikam.css',\n    languageDictionary: {\n        loginsCountLabel: 'Cantidad de Logins:',\n        searchBarPlaceholder: 'Busqueda de usuarios usando la sintaxis de Lucene',\n        deviceNameColumnHeader: 'Dispositivo',\n        ...\n    }\n  });\n}\n```\n\n## Learn more\n\n*   [Delegated Administration: Access Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-access-hook)\n*   [Delegated Administration: Filter Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook)\n*   [Delegated Administration: Write Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-write-hook)\n*   [Delegated Administration: Memberships Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-memberships-query-hook)",
  "title": "Delegated Administration: Settings Query Hook",
  "description": "Learn how to use the Settings Query Hook with the Delegated Administration Extension.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-1",
  "markdown": "# AWS API Gateway Tutorial Step 1\n\n## Step 1 - Set up the Amazon API Gateway\n\nAfter completing this step, you will have:\n\n*   Set up Amazon API Gateway using AWS Lambda functions to execute your service logic that stores and retrieves pets from an Amazon DynamoDB table;\n    \n*   Created two unauthenticated REST service methods for getting and updating a list of pets.\n    \n\nPrior to beginning, please have [Node.js](https://nodejs.org/) installed.\n\n### 1\\. Create the Amazon DynamoDB Table\n\nIn the [Amazon DynamoDB Console](https://console.aws.amazon.com/dynamodb), click on **Create Table**.\n\n![DynamoDB Console - Create Table](https://images.ctfassets.net/cdy7uua7fh8z/2ZPhi7Ddx4TznSXEEhUSDK/52a06412f7c5e6d0ef0d13c6ffe17611/dynamodb-create-table.png)\n\nConfigure the variables associated with the table:\n\n*   **Table name**: Pets\n    \n*   **Primary key**: username\n    \n*   **Primary key type**: String\n    \n*   **Use default settings**: unchecked\n    \n*   **Read capacity units**: 3\n    \n*   **Write capacity units**: 3\n    \n\n![DynamoDB Console - Configure Newly Created Table](https://images.ctfassets.net/cdy7uua7fh8z/6MYJV97Xa3DxajG8DYj2dx/e428ab2ce137176d7771c61a9c528f7c/configure-newly-created-table.png)\n\nClick **Create** to create the table with your provided settings.\n\nWhile the table is being created, take note of the Amazon Resource Name (ARN) under the Table details section. You will need the table's ARN in the next step.\n\n![DynamoDB Console - Table Details - Amazon Resource Name](https://images.ctfassets.net/cdy7uua7fh8z/4ZFemddtUD8tRi0NUvzXJ2/38abd951974cad385ef7417f48adf359/table-arn.png)\n\n### 2\\. Create the Policy that Grants AWS Lambda Functions Access to the DynamoDB Pets Table\n\nNavigate to the [AWS IAM Console](https://console.aws.amazon.com/iam).\n\nClick on **Roles** in the left menu, and then click the **Create New Role** button.\n\n![IAM Console - Roles - Create New Roles](https://images.ctfassets.net/cdy7uua7fh8z/4mgCTXLpycHLA8RbYoEFim/5d9eb81be979355aa9cd10d476ead515/roles.png)\n\nName the role `APIGatewayLambdaExecRole` and click **Next Step**.\n\nSelect the Role Type. Under AWS Service Roles, select AWS Lambda.\n\n![IAM Console - Select the Role Type - Service Roles - AWS Lambda](https://images.ctfassets.net/cdy7uua7fh8z/326kKGbahlvIwVFTi61Gfw/026d1fc0c8c6e3a489ec4fb840f551da/select-role-type.png)\n\nOn the Attach Policy screen, skip this step by clicking **Next Step**. At this point, review the information you provided. If all looks correct, click **Create Role**. When finished, you should see your role listed on the IAM homepage.\n\nSelect the role you just created, **APIGatewayLambdaExecRole**. Click the down arrow for Inline Policies and click the **Click Here** link.\n\nSelect Custom Policy, and then click **Select**. Name the policy `LogAndDynamoDBAccess` and add the following code as the policy document (be sure to first update the Amazon Resource Name (ARN) for your DynamoDB table). Click **Apply Policy**.\n\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AccessCloudwatchLogs\",\n      \"Action\": [\"logs:*\"],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"arn:aws:logs:*:*:*\"\n    },\n    {\n      \"Sid\": \"PetsDynamoDBReadWrite\",\n                  \"Effect\": \"Allow\",\n      \"Action\": [\n                  \"dynamodb:DeleteItem\",\n                  \"dynamodb:GetItem\",\n                  \"dynamodb:PutItem\",\n                  \"dynamodb:UpdateItem\"\n                  ],\n      \"Resource\": [\"DYNAMODB_TABLE_ARN_VALUE_FROM_PREVIOUS_STEP\"]\n    }\n   ]\n}\n```\n\n### 2\\. Create the AWS Lambda Functions\n\nThe next three steps create the AWS Lambda functions for retrieving and updating pet information in the DynamoDB table.\n\n#### Create the Lambda Function for GetPetInfo\n\nIn the [AWS Lambda Console](https://console.aws.amazon.com/lambda), select **Create a Lambda Function** (if you have not created an AWS Lambda function before, you will click **Get Started Now**).\n\nOn the Select blueprint screen, click **Blank Function**.\n\nYou will then be prompted to Configure triggers. Click **Next** to proceed. You do not have to do so at this point.\n\nFinally, you will be asked to Configure function.\n\nPopulate the appropriate fields with the following information:\n\n*   **Name**: `GetPetInfo`\n    \n*   **Runtime**: Node.js 6.10\n    \n\nPaste the following code to read pet information from the DynamoDB table into the **Lambda function code** area.\n\n```\nvar AWS = require('aws-sdk');\nvar DOC = require('dynamodb-doc');\nvar dynamo = new DOC.DynamoDB();\n\nexports.handler = function(event, context) {\n   var cb = function(err, data) {\n      if(err) {\n         console.log('error on GetPetsInfo: ',err);\n         context.done('Unable to retrieve pet information', null);\n      } else {\n         if(data.Item && data.Item.pets) {\n             context.done(null, data.Item.pets);\n         } else {\n              context.done(null, {});\n         }\n      }\n   };\n\n   dynamo.getItem({TableName:\"Pets\", Key:{username:\"default\"}}, cb);\n};\n```\n\nFor Role, select **Choose an existing role**. Next, choose **APIGatewayLambdaExecRole** as the Existing Role. Leave all other settings at their default values.\n\nClick **Next** to review the information you provided. If all looks correct, click **Create function**.\n\nClick **Test**, leaving the Input test event at its default (which uses the Hello World template). When the test completes, you should see an empty output (`{}`) in the Execution Result section. The table is empty.\n\n#### Create the Lambda Function for UpdatePetInfo\n\nRepeat the instructions used to create the `GetPetInfo` function, but use the following instead as the function code:\n\n```\nvar AWS = require('aws-sdk');\nvar DOC = require('dynamodb-doc');\nvar dynamo = new DOC.DynamoDB();\nexports.handler = function(event, context) {\n    var item = { username:\"default\",\n                 pets: event.pets || {}\n            };\n\n    var cb = function(err, data) {\n        if(err) {\n            console.log(err);\n            context.fail('unable to update pets at this time');\n        } else {\n            console.log(data);\n                context.done(null, data);\n        }\n    };\n    dynamo.putItem({TableName:\"Pets\", Item:item}, cb);\n};\n```\n\nTest the function by clicking the Actions drop-down and choosing **Configure sample event**. Enter the following for sample data and click **Submit**:\n\n```\n{\n  \"pets\": [{\n    \"id\": 1,\n    \"type\": \"dog\",\n    \"price\": 249.99\n  }]\n}\n```\n\nYou should see an empty return result (`{}`).\n\nReturn to your `GetPetInfo` Lambda function and click **Test** again. You should now see a single pet.\n\n#### Create the Third Lambda Function\n\nYou will create one additional Lambda function. While this function will do nothing, it is required by the OPTIONS method for CORS as described in a later section.\n\nUsing the steps described above, create a Lambda function named `NoOp`. The function's code will be as follows:\n\n```\nexports.handler = function(event, context) {\n    context.succeed('');\n}\n```\n\nInstead of creating this third Lambda function, you may choose to [create an OPTIONS method](#method-options) on the API Gateway.\n\n### 3\\. Create the Amazon API Gateway API\n\nYou will create an API with two methods: one will `GET` pet information, and one will `POST` pet information.\n\n#### Method: GET Pet Information\n\nGo to the [Amazon API Gateway Console](https://console.aws.amazon.com/apigateway), and click **Create API**. If this is the first time you are creating an API, you will see a screen prompting you to **Get Started** instead.\n\nIf this is the first time you are creating an API, you will be prompted to create an Example API. Click **OK** to exit the pop-up notification, and choose the **New API** radio button instead of the **Example API** button.\n\nName the API `SecurePets` and click **Create API**.\n\nNavigate to the Resources tab of the `SecurePets` API and click the **Create Resource** action.\n\nName the resource `Pets` and click **Create Resource** again.\n\nIn the left pane, select `/pets` and then click the **CreateMethod** button.\n\nIn the drop-down, select GET and click the checkmark button. Provide the following configuration values for the `GET` method:\n\n*   **Integration type**: Lambda Function;\n    \n*   **Lambda Region**: Region you are located in;\n    \n*   **Lambda Function**: GetPetInfo.\n    \n\nClick **Save** and then **OK** when prompted in the popup to grant permissions to the Lambda function.\n\nIn the Method Execution window that appears next, click **Test**.\n\nYou should see the single pet returned in the response body.\n\n#### Method: POST Pet Information\n\nCreating the API used to `POST` pet information is similar to creating the one used to `GET` pet information.\n\nIn the left pane, select `/pets`, and click **CreateMethod**.\n\nIn the drop-down, select POST, and click the checkmark button.\n\nSelect Lambda Function for Integration Type, select the region you are located in, and select UpdatePetInfo for the Lambda function.\n\nClick **Save** and then **OK** when prompted in the popup to grant permissions to the Lambda function.\n\n**Test**, and paste the following for the request body:\n\n```\n{\"pets\": [\n    {\"id\": 1, \"type\": \"dog\", \"price\": 249.99},\n    {\"id\": 2, \"type\": \"cat\", \"price\": 124.99}\n  ]\n}\n```\n\nYou should see an empty return result (`{}`).\n\nReturn to the GET method, and click **Test** again to see that the response body indicates there are two pets listed in the table:\n\n```\n[\n  {\n    \"id\": 1,\n    \"price\": 249.99,\n    \"type\": \"dog\"\n  },\n  {\n    \"id\": 2,\n    \"price\": 124.99,\n    \"type\": \"cat\"\n  }\n]\n```\n\n#### Method: OPTIONS\n\nInstead of creating a lambda function that performs no action, you can create an `OPTIONS` method on the API Gateway.\n\nIn the left pane, select `/pets`, and click **CreateMethod**. In the drop down, select OPTIONS, and click the checkmark button. Select Mock for Integration Type. Click **Save**.\n\nLeaving the Response Body blank, click **Test**. You should receive a Response Body indicating `no data`.\n\nAt this point, the AWS Lambda functions and the Amazon API Gateway methods are defined with no security.",
  "title": "AWS API Gateway Tutorial Step 1",
  "description": "Step 1 of Amazon API Gateway Tutorial",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-5",
  "markdown": "# AWS API Gateway Tutorial Step 5\n\n## Step 5 - Use Identity Tokens to Flow Identity\n\nIn this final step, you will:\n\n*   Flow identity to the service by passing your OpenID JSON Web Token (JWT);\n    \n*   Validate the token;\n    \n*   Extract profile information to assign a buyer for a pet.\n    \n\n## Use an Identity Token\n\nYou can use your Lambda function to process and obtain information about the user. For example, during a purchasing transaction, you retrieved the username from the profile returned with the identity token. However, you can also choose to have the user's information embedded with the identity itself, which is a JSON Web Token (JWT).\n\nThe advantages of using JWTs is that you can:\n\n1.  Verify the authenticity of the JWT;\n    \n2.  Be sure that the calling user is authenticated (instead of relying on a plain-text parameter that could have been tampered with).\n    \n\nIn addition, you can use the JWT for authorization, which allows you to bypass the IAM integration with Amazon API Gateway. Please note, however, that using the API Gateway for authorization allows you to halt the API call prior to invocation of your Lambda function.\n\n### Add Information to the JWT\n\nThere are several ways of adding a user's information to the JWT. The following example adds the user's email address to the JWT, but the concepts are same for other user datapoints.\n\n#### Use Rules\n\nOne way to add a user's email address to the JWT is to use a [rule](https://auth0.com/docs/rules). This is a good approach if you want to make sure that this value is always available in the JWT for an authenticating user.\n\nIn `login.js`, you can see this scope specified in the parameters passed to `auth.signin`:\n\n```\n$scope.login = function() {\n    var params = {\n        authParams: {\n          scope: 'openid email'\n        }\n      };\n\n    auth.signin(params, function(profile, token) {\n      ...\n    }\n  }\n```\n\nWhile you can include the full profile of the user within the JWT, you will want to include only what is necessary since the JWT is typically passed with every request.\n\n## Validate the JWT Token\n\nBecause the AWS Lambda console has access to a limited number of Node modules that can be used when you enter your Node.js code using the browser console, you'll need to include additional modules and upload the Lambda function as a package to process the identity token.\n\nFor additional details, see [Creating Deployment Packages using Node.js](http://docs.aws.amazon.com/lambda/latest/dg/nodejs-create-deployment-pkg.html) and [Uploading Deployment Packages and Testing](http://docs.aws.amazon.com/lambda/latest/dg/walkthrough-s3-events-adminuser-create-test-function-upload-zip-test.html).\n\nThe following seed project contains the code you'll need for your updated AWS Lambda function.\n\n<%= include('../../../\\_includes/\\_package', { org: 'auth0', repo: 'auth0-aws', path: 'examples/api-gateway/lambda' }) %>\n\nYou'll see two custom JavaScript files within the seed project:\n\n*   `index.js`: contains your main code;\n    \n*   `auth0-variables`: contains the code you need to update.\n    \n\nIn addition to the custom files, there is a standard Node.js `package.json` file.\n\nThe code adds functionality to extract information from and validate the JWT. By default, Auth0 uses a symmetric key for signing the JWT, though you may opt to use asymmetric keys (if you need to allow third-party validation of your token, you should use an asymmetric key and share only your public key).\n\nFor more information about token verification, see [Identity Protocols Supported by Auth0](https://auth0.com/docs/authenticate/protocols).\n\nUpdate `auth0-variables.js` with your secret key, which can be found on the Settings tab of your Application in the Auth0 Dashboard:\n\n```\nvar env={};\nenv.AUTH0_SECRET='{yourAuth0Secret}';\nmodule.exports = env;\n```\n\nRun **npm install** from the directory where your files are, zip up the contents (`index.js` must be at the root of the zip), and upload it for use by the `PurchasePet` Lambda function. If you test this, you should see an authorization failure, since the JWT is not in the message body.\n\nTake a look at the logic in `index.js`. You will see logic around line 60 that validates the token and extracts the decoded information that contains the identity information used for the purchase logic:\n\n```\nif(event.authToken) {\n     jwt.verify(event.authToken, secret, function(err, decoded) {\n         if(err) {\n           console.log('failed jwt verify: ', err, 'auth: ', event.authToken);\n           context.done('authorization failure', null);\n         } else if(!decoded.email)\n         {\n           console.log('err, email missing in jwt', 'jwt: ', decoded);\n           context.done('authorization failure', null);\n         } else {\n           userEmail = decoded.email;\n           console.log('authorized, petId', petId, 'userEmail:', userEmail);\n           dynamo.getItem({TableName:\"Pets\", Key:{username:\"default\"}}, readcb);\n         }\n     });\n  } else {\n     console.log('invalid authorization token', event.authToken);\n     context.done('authorization failure', null);\n  }\n    ...\n```\n\nThe final step is to pass the JWT to the method used by the browser client.\n\nThe standard method comes with an `Authorization` header as a bearer token, and you can use this method by turning off IAM authorization and relying solely on the OpenID Token for authorization (you will also need to map the Authorization header into the event data passed to the AWS Lambda function).\n\nIf, however, you are using IAM, then the AWS API Gateway uses the `Authorization` header to contain the signature of the message, and you will break the authentication by inserting the JWT into this header. To do this, you can either:\n\n*   Add a custom header for the JWT;\n    \n*   Put the custom header into the body of the message.\n    \n\nIf you choose to use a custom header, you'll also need to do some mapping for the Integration Request of the POST method for `pets/purchase`.\n\nTo keep the validation process simple, pass the JWT in the body of the post to the AWS Lambda function. To do this, update the `buyPet` method in `home.js` by removing the `userName` from the body, and adding `authToken` as follows:\n\n```\nfunction buyPet(user, id) {\n    var apigClient = getSecureApiClient();\n    var body = {\n      petId:id,\n      authToken: store.get('token')\n    };\n\n    apigClient.petsPurchasePost({}, body)\n      .then(function(response) {\n        console.log(response);\n        $scope.pets = response.data;\n        $scope.$apply();\n      }).catch(function (response) {\n        alert('buy pets failed');\n        showError(response);\n    });\n}\n```\n\nUpload your code to your S3 bucket and try to purchase a pet. You will see the email of the purchaser in the resulting message.\n\nIf you have any errors, double check that you have properly set your secret key. One useful tool for checking issues with your token decoding is [jwt.io](http://jwt.io/).\n\n## Summary\n\nIn this tutorial, you have:\n\n*   Created an API using AWS API Gateway that includes methods using AWS Lamdba functions;\n    \n*   Secured access to your API using IAM roles;\n    \n*   Integrated a SAML identity provider with IAM to tie access to the API to your user base;\n    \n*   Provided different levels of access based on whether a user authenticated from the Database or Social Connection;\n    \n*   Used an Auth0 rule to enforce role assignment;\n    \n*   Used a JWT to provide further authorization context and pass identity information into the appropriate Lambda function.",
  "title": "AWS API Gateway Tutorial Step 5",
  "description": "Step 5 of Amazon API Gateway Tutorial",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-4",
  "markdown": "# AWS API Gateway Tutorial Step 4\n\n## Step 4 - Use Multiple Roles with Amazon API Gateway\n\nIn this step, you'll assign different AWS IAM roles to users based on authentication information:\n\n*   Users authenticating with Social Connections will be treated as buyers;\n    \n*   Users authenticating with Database Connections will be treated as admins.\n    \n\nYou will perform this role assignment logic in two different ways:\n\n*   JavaScript;\n    \n*   Auth0 rules.\n    \n\nFor many Auth0 Applications, you'll want different users to have different levels of access, and you'll want additional information about a given identity to use in your service logic. In cases where it's sufficient to lock down access at the API level, you can use different AWS IAM roles (for example, administrators can use the update function to add and remove pets, but social users can only buy pets).\n\nThe following diagram illustrates AWS IAM role assignments for two different user classes: users authenticated via Social Connections and users authenticated via Database Connections. It also illustrates that AWS IAM roles can be assigned to other entities, like AWS Lamdba functions, to control the permissions these entities are assigned for an account. In short, an IAM role is a group of permissions to AWS capabilities that is defined by one or more policies and then assigned to an entity.\n\nFor cases where you want to make decisions within your code (for example, you might want a credit check of a user buying a pet), you will want to flow identity as well. This will be demonstrated below in [Step 5 - Using Identity Tokens to Flow Identity](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-5).\n\n### 1\\. Create the PetPurchase API Resource\n\nUsing the [Amazon API Gateway Console](https://console.aws.amazon.com/apigateway), select your Pets API. You will be taken to its Resources page.\n\nClick on **Actions** and **Create Resource**. Name the New Child Resource `Purchase`. Click **Create Resource**.\n\nAdd an OPTIONS method for the `purchase` resource as outlined previously for `pets` in the [Set Up Cors and Deploy the API section of Step 2 - Securing and Deploying the Amazon API Gateway](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-2#set-up-cors-and-deploy-the-api).\n\nCreate a new AWS Lambda function for purchasing a pet called `PetPurchase`, which adds `isSold` and `soldTo` attributes to a pet as follows:\n\n```\nvar AWS = require('aws-sdk');\nvar DOC = require('dynamodb-doc');\nvar dynamo = new DOC.DynamoDB();\n\nexports.handler = function(event, context) {\n   var petId = event.petId;\n   var user = event.userName;\n   var pets = {};\n   console.log('start PetsPurchase, petId', petId, ' userName', user);\n\n   var writecb = function(err, data) {\n      if(!err) {\n          context.done(null, pets);\n      } else {\n          console.log('error on GetPetsInfo: ',err);\n          context.done('failed on update', null);\n      }\n   };\n\n   var readcb = function(err, data) {\n      if(err) {\n          console.log('error on GetPetsInfo: ',err);\n          context.done('failed to retrieve pet information', null);\n      } else {\n          // make sure we have pets\n          if(data.Item && data.Item.pets) {\n              pets = data.Item.pets;\n              var found = false;\n\n              for(var i = 0; i < pets.length && !found; i++) {\n                  if(pets[i].id === petId) {\n                     if(!pets[i].isSold) {\n                        pets[i].isSold = true;\n                        pets[i].soldTo = user;\n                        var item = { username:\"default\",pets: pets};\n                        dynamo.putItem({TableName:\"Pets\", Item:item}, writecb);\n                        found = true;\n                     }\n                  }\n               }\n               if(!found) {\n                 console.log('pet not found');\n                 context.done('That pet is not available.', null);\n               }\n           } else {\n              console.log('pet already sold');\n              context.done('That pet is not available.', null);\n           }\n       }\n   };\n\n   dynamo.getItem({TableName:\"Pets\", Key:{username:\"default\"}}, readcb);\n};\n```\n\nOnce you have defined the Lambda function, [add a POST method to the `purchase` resource](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-1#method-post-pet-information) that calls the `PetPurchase` Lambda. Be sure to also add the `Access-Control-Allow-Origin` header with a value of `*` to the POST method using the method response/integration response configuration found in [Set Up Cors and Deploy the API section of Step 2 - Securing and Deploying the Amazon API Gateway](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-2#set-up-cors-and-deploy-the-api).\n\nTest the API gateway method, providing the following as an input message:\n\n```\n{\n    \"petId\": 1,\n    \"userName\": \"fred flintstone\"\n }\n```\n\nIn the test response, you should see the pet with ID of 1 is now sold to Fred Flintstone:\n\n```\n[\n  {\n    \"id\": 1,\n    \"price\": 249.99,\n    \"type\": \"dog\",\n    \"isSold\": true,\n    \"soldTo\": \"fred flintstone\"\n  },\n\n  ...\n```\n\n### 2\\. Use IAM to Secure the PurchasePet API\n\n#### Update IAM\n\nTo secure your API, follow the same process for adding a new role that you [performed in Part 2](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-2) of this tutorial. Call the new role `auth0-api-social-role`.\n\nThe ARN for the method you will secure in the IAM policy should look something like:\n\n```\narn:aws:execute-api:us-east-1:your-accountid:your-api-id/*/pets/purchase\n```\n\nBe sure to update the trust policy as well.\n\nGo to the [Amazon API Gateway Console](https://console.aws.amazon.com/apigateway), and select the POST method for the `/pets/purchase` resource. Select **Method Request** and change **Authorization Type** to AWS\\_IAM. Click the check to save the setting.\n\nAt this point, you have defined two roles that you can use with the API gateway:\n\n*   `auth0-api-role`: permits updating pets\n    \n*   `auth0-api-social-role`: permits purchasing a pet\n    \n\n#### Configure Login with Amazon and Update Auth0\n\nYou can create a social role using Login with Amazon (LWA).\n\nWhile this tutorial includes instructions for using Login with Amazon, please note that you can use other social providers as well.\n\n1.  Navigate to [Auth0 Dashboard > Authentication > Social](https://manage.auth0.com/#/connections/social), and select **Create Connection**.\n    \n2.  Choose the connection you want to set up, and consent.\n    \n3.  Copy and paste the `Client ID` and `Client Secret` from your social identity provider, select the **Attributes** (and **Permissions**, where applicable), and click **Save**.\n    \n4.  Select the **Applications** view, enable the switch for each of your Auth0 applications that should be able to use this connection, and select **Save**.\n    \n\nOnce you've entered the appropriate information, select **Try Connection** to ensure that everything is set up correctly.\n\nWhen you configure LWA using the Amazon console, be sure to enter into Allowed Return URLs the callback URL to your Auth0 Application, which should look something like `https://johndoe.auth0.com/login/callback`. The Auth0 help page will show you specifically what to enter.\n\nNavigate to [Auth0 Dashboard > Applications > Applications](https://manage.auth0.com/#/applications), and select your Application to view its settings. Select the **Connections** view, locate the **Social** section, and ensure that **Amazon** is enabled.\n\n#### Deploy the API and Update the Single-Page Application\n\n##### Deploy the API\n\nUsing the [Amazon API Gateway Console](https://console.aws.amazon.com/apigateway), you will again [deploy the API and generate a new JavaScript SDK](https://auth0.com/docs/customize/integrations/aws/aws-api-gateway-delegation/aws-api-gateway-delegation-2#set-up-cors-and-deploy-the-api).\n\nAt this point, you have made the necessary configuration changes to enable pet purchases. To make this live, copy your newly downloaded SDK over the previous one in your `pets` folder, as well as your Amazon S3 bucket.\n\n##### Update the Login Controller Logic to Choose Different Roles for Different Types of Users\n\nThe login controller logic uses `getOptionsForRole` to select different roles for different users. When you obtain the delegation token, you can tell Auth0 which role to use (that is, the user is an admin or not).\n\nIn the `pets/login/login.js` file, modify the `role` and `principal` values for the non-admin user for the social user IAM role you just created.\n\nAt this point, you should be able to log in using Amazon credentials **or** the database user you previously created. Notice that the UI lets a social user buy pets, while an admin user can add and remove pets.\n\nTo test this functionality, you can temporarily hide the remove button in the UI by removing `ng-show=\"isAdmin\"` in `/pets/home/home.html`:\n\n```\n<button ng-show=\"isAdmin\" class=\"btn delete-btn\" ng-click=\"removePet(pet.id)\">remove</button>\n```\n\nAfter copying the changes to your S3 bucket, attempt to remove a pet while logged in as a social user.\n\nIn `home.js`, modify the `buyPet` function to enable pet purchases:\n\n```\nfunction buyPet(user, id) {\n    var apigClient = getSecureApiClient();\n\n    apigClient.petsPurchasePost({},{userName:user, petId:id})\n      .then(function(response) {\n        console.log(response);\n        $scope.pets = response.data;\n        $scope.$apply();\n      }).catch(function (response) {\n        alert('buy pets failed');\n        showError(response);\n    });\n}\n…\n```\n\nCopy the code to your S3 bucket, log out, and then log back in in as a social user by clicking on the Amazon icon in the Lock login dialog. You may need to click **SHOW ALL** if your previous login persists in the Lock pane.\n\nNote that, as an Amazon user, you can buy a pet, but not add or remove pets. However, if you log in with a user associated with a Database Connection, you are able to add and remove pets, but not buy pets.\n\n### Enforce Role Assignment with Auth0 Rules\n\nIn some cases, you might determine the appropriate role using the Application (as shown here), but for security reasons (you might want to prevent the user from assuming a more privileged role than necessary), you might want to determine user privileges on the server-side.\n\nWith Auth0, this is done via rules, which are service logic statements you define that are then run during the Auth0 authentication process. For example, you could create rules to:\n\n*   Eliminate the passing of role information from the browser to the Application;\n    \n*   Insert role information into the delegation request based on the authentication source.\n    \n\n#### Enforce Role Assignment\n\nYou will add a rule that will check to see if the role requested by the user is allowed, depending on its association with a Social or Database Connection.\n\n1.  Navigate to [Auth0 Dashboard > Auth Pipeline > Rules](https://manage.auth0.com/#/rules), and select **Create Rule**.\n    \n2.  Choose the **Empty rule** template\n    \n3.  Name the rule **AWS Pets** (or something similar), then populate the body of the rule with the following JavaScript code:\n    \n    ```\n    function (user, context, callback) {\n      if(context.clientID === '{yourClientId}') {\n        var socialRoleInfo = {\n          role:\"arn:aws:iam::<your account>:role/auth0-api-social-role\",\n          principal: \"arn:aws:iam::your account>:saml-provider/auth0\"\n        };\n    \n        var adminRoleInfo = {\n          role:\"arn:aws:iam::<your account>:role/auth0-api-role\",\n          principal: \"arn:aws:iam::<your account>:saml-provider/auth0\"\n        };\n    \n        var requestRole = context.request.body.role;\n        var requestPrincipal = context.request.body.principal;\n        var allowedRole = null;\n    \n        if(user.identities[0].isSocial === false) {\n          allowedRole = adminRoleInfo;\n        } else {\n          allowedRole = socialRoleInfo;\n        }\n    \n        if((requestRole && requestRole !== allowedRole.role) ||\n           (requestPrincipal && requestPrincipal !== allowedRole.principal)) {\n            console.log('mismatch in requested role:',requestRole, ':', requestPrincipal);\n            console.log('overridding');\n        } else {\n          console.log('valid or no role requested for delegation');\n        }\n    \n        context.addonConfiguration = context.addonConfiguration || {};\n        context.addonConfiguration.aws = context.addonConfiguration.aws || {};\n        context.addonConfiguration.aws.role = allowedRole.role;\n        context.addonConfiguration.aws.principal = allowedRole.principal;\n        callback(null, user, context);\n    \n      } else {\n        callback(null, user, context);\n      }\n    }\n    ```\n    \n    Be sure to adjust the above code with the correct values for your integration. The fields are **Princial ARN**, **Role ARN**, and **Client Secret**.\n4.  **Save** your changes.\n    \n\n#### Caveats\n\n*   Rules run at a global scope for every authentication. You should only run the logic on authentication requests associated with a given application (which is why the script used asks for the clientID. Without this information, the logic runs for every authentication request associated with your Auth0 account.\n    \n*   Information is passed into the rule with the context and the user.\n    \n*   You can extend the objects passed in to the rule. In the code above, the rule checks the body of the request for the role information. The role is set into the context addonConfiguration of the allowed role, which always overrides settings in the request body.\n    \n\n#### Debug Your Rule\n\nYou are ready to debug your rule(s). Select **Try this Rule**, and you will be presented with a script that tries the rule's logic. Select **Try**.\n\nYou will then be presented with the output of running your rule.",
  "title": "AWS API Gateway Tutorial Step 4",
  "description": "Step 4 of Amazon API Gateway Tutorial",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/troubleshoot-wordpress-plugin-invalid-state-errors",
  "markdown": "# Troubleshoot WordPress Plugin Invalid State Errors\n\nWe added state validation to WordPress plugin version 3.6.0, which you can find in the [wp-auth0 GitHub repository](https://github.com/auth0/wp-auth0/releases/tag/3.6.0). This security measure helps mitigate CSRF attacks by ensuring that the response belongs to a request initiated by the same user To learn more, read [Prevent Attacks and Redirect Users with OAuth 2.0 State Parameter](https://auth0.com/docs/secure/attack-protection/state-parameters).\n\n## How state validation works\n\nThe plugin performs state validation by:\n\n1.  Setting an `auth0_state` cookie in the browser via Javascript when the Lock login form is shown (on `wp-login.php` or any other page when using a shortcode or widget).\n    \n2.  Passing that value to the Lock embedded login form so it can be sent with the authentication request.\n    \n3.  Receiving that value back from Auth0 unchanged in a `state` URL parameter if the Auth0 login was successful.\n    \n4.  Validating the that value received matches the value sent and stored in the `auth0_state` cookie. If it's valid, then the login process continues. If not, the process stops and an \"Invalid state\" error message is shown.\n    \n5.  Deleting the cookie, regardless of validity.\n    \n6.  Using values in the base64 decoded object to redirect or perform other login actions, if valid.\n    \n\nThis process should be completely opaque to both the logging-in user and the site admin. The Auth0 server does not validate or require a state value and returns it untouched to the callback URL. If the \"Invalid state\" message is seen, then one of the first 4 steps above is not happening.\n\n## Common causes of the invalid state error\n\nBelow are some common causes of the invalid state error as well troubleshooting steps you can take.\n\n### Cached callback URLs\n\nThe most common cause of the invalid state error is when the callback URL is cached on the server.\n\nExclude caching on your server for all the URLs listed in the **Allowed Callback URLs** field in [Auth0 Dashboard > Applications > Applications > Settings](https://manage.auth0.com/#/applications/{yourClientId}/settings) and test again. In addition, exclude caching the site URL (`/index.php` on a regular install) if it has an Auth0 URL parameter.\n\nCheck to see if your server’s time is not set properly. The `BeforeValidException` error can occur when the token is perceived to have been generated before the current time, which can happen if the server times are off. You can check server time by using `echo current_time( 'c' )`. A temporary workaround may also be to modify the plugin to add a time offset if you cannot modify the server time, but it should be fixed for production.\n\nIf that does not solve the issue, continue with the troubleshooting steps below.\n\n### Cached cookies and URL parameters\n\nIf you're on a managed host like WP-Engine, you may need to contact their support team for additional assistance. We've had reports of issues accessing required cookies on the callback URL, as well as problems with checking authentication on the final page that users see after logging in. Specifically, ask to have cache exclusions added for:\n\n*   **Cookie:** `auth0_state`\n    \n*   **Cookie:** `auth0_nonce`\n    \n*   **Arg/URL parameter:** `auth0`\n    \n*   **Arg/URL parameter:** `code`\n    \n*   **Arg/URL parameter:** `state`\n    \n*   **Arg/URL parameter:** `id_token`\n    \n\n### Page refresh after error message\n\nIf you refresh the page after seeing a different error message (email verification, etc) the invalid state message will appear, as it’s trying to revalidate an already used value. This is expected.\n\n### Cookie names requirement\n\nSome hosts, like Pantheon, require specific cookie names to be used. You can alter the cookie name using the `auth0_state_cookie_name` filter in your theme or a custom plugin. To learn more about the `auth0_state_cookie_name` filter, read [Extend Login by Auth0 WordPress Plugin](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/extend-login-by-auth0). For additional information, [see the related GitHub issue](https://github.com/auth0/wp-auth0/issues/494) and [explore its fix](https://github.com/auth0/wp-auth0/pull/495).\n\n### Universal Login Page and link building\n\nIf your site is using the Universal Login Page and you're building the link yourself in a theme or plugin, you need to:\n\n*   Set a cookie called `auth0_state` with a randomly-generated value\n    \n*   Send that value in a `state` URL parameter.\n    \n\nAlternatively, you can go to Settings > Features tab > Universal Login Page and redirect login requests to the `wp-login.php` page where that cookie and URL parameter will be set automatically. If you want to continue to use a custom-built `/authorize` URL, you can [see the code that runs this process in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/lib/WP_Auth0_LoginManager.php#L90).\n\n### Visiting the callback URL directly\n\nIf you visit your callback URL (typically `yourdomain.com/index.php?auth0=1`) directly or a second time after the authorization code has been exchanged, the invalid state error might display. This indicates that the state has already been verified and deleted.\n\n## Troubleshoot invalid state errors\n\nNote that some of the steps below will require the login process to be broken during the process (marked as such):\n\n1.  While logged out of WordPress and Auth0, visit the login page being tested.\n    \n2.  Check if the `auth0_state` cookie is being set (in Chrome, View > Developer > JavaScript Console > Application tab > Storage on the left > Cookies > domain being tested, look for an `auth0_state` cookie with a non-empty value).\n    \n    *   If this value is not set, check for errors in the JS console and make sure that your browser can accept cookies (login will not work without cookies). This is set in `/assets/js/lock-init.js`. You can [view this code on GitHub](https://github.com/auth0/wp-auth0/blob/master/assets/js/lock-init.js#L22).\n        \n    *   If the value is set, copy the value and view the source code of the page (in Chrome, **View** > **Developer** > **View Source**). Search for the value, and it should appear as the value associated with parameter `wpAuth0LockGlobal.settings.auth.params.state` ([view sample JSON](https://gist.github.com/joshcanhelp/1b8bb990048325eb7214e2b3d7136b78)). Make a note of this value (you'll need it in a following step).\n        \n3.  If the value appears there and the Lock form is loading normally then steps 1 and 2 from the first list above are functioning properly.\n    \n4.  Before logging in, [add this code snippet to the top of your `wp-config.php`](https://gist.github.com/joshcanhelp/ba98f748747c7fd2ecdf54e73c6110f3), so you can do a test install. **WARNING**: This will break login for the WordPress site being tested, so use it only on a non-production install.\n    \n5.  Log in normally.\n    \n6.  After you're redirected back to your site's callback URL, the process will stop. You should see an output like what's shown in the linked Gist in step #4 above. If you see something like `Array()` with no additional values, then one of two things could be happening:\n    \n    *   The WordPress callback URL is cached. Page caching can happen in many different ways so there are not explicit steps we can provide here. Check any caching plugins you may have installed, they usually have some kind of URL exclusion built-in. Also check with your host as caching may be automatic and require support involvement.\n        \n    *   The server is not reading the Auth0 cookie. For a possible solution, [see the related GitHub issue](https://github.com/auth0/wp-auth0/issues/494) and [explore its fix](https://github.com/auth0/wp-auth0/pull/495).\n        \n7.  If the values are present, check the response headers for the callback URL being loaded (in Chrome, View > Developer > JavaScript Console > Network tab, click the first \"document\" listed with a 500 status and look for \"Response Headers\"). Look for any evidence of caching here, like a `Cache-Control` with a non-zero `max-age`, an `x-cache` of something other than `MISS`, or any other clue that this page is being served from a cache.\n    \n8.  Also in the response headers, check that `set-cookie` includes a directive like `auth0_state=deleted` to confirm the validation process is happening.\n    \n9.  Make sure that the `state` parameter in the URL matches the one recorded from the cookie being set in step #3 above.\n    \n10.  If there is no evidence of caching, remove the debugging snippet from `wp-config.php` and refresh the callback URL. You should see the \"Invalid state\" message again. If any caching changes were made, attempt the login process all the way through (make sure to clear your cookies and browser cache for the site before testing).\n    \n\nThe following troubleshooting steps require plugin changes that will break the login process and need to be rolled back once complete. These steps should be performed on a test or staging server.\n\n11\\. Next, we need to check why the state is coming in but does not match the stored value.\n\n12\\. In `lib/WP_Auth0_LoginManager.php`, output the values of the stored and returned state and stop the process after. Just before [line 148](https://github.com/auth0/wp-auth0/blob/master/lib/WP_Auth0_LoginManager.php#L148), add:\n\n```\necho '<h1>$_REQUEST</h1>'; var_dump($_REQUEST); echo '<h1>$_COOKIE</h1>'; var_dump($_COOKIE); die('<h1>Done</h1>');\n```\n\n13\\. Once again, make sure you're logged out and complete the login process.\n\n14\\. You should see values output when redirected back to the WordPress callback URL.\n\n15\\. Check if the `state` value in `$_REQUEST` exists and matches the `auth0_state` value in `$_COOKIE`.\n\n*   If it's different, it should match the original value recorded in step #3 above. This means that the `$_COOKIE` state value has changed somewhere in the process.\n    \n\nIf none of the steps above resolve the issue, please collect the results of the steps above and [contact support](https://support.auth0.com/) or [post on Community](https://community.auth0.com/tags/wordpress) with the tag `wordpress`. Also include:\n\n*   PHP version\n    \n*   WordPress version\n    \n*   Auth0 plugin version\n    \n*   Browser and OS used to test\n    \n*   A HAR file recording the entire process from loading the page with the login form all the way through the \"Invalid state\" message. To learn more about HAR files, read [Generate and Analyze HAR Files](https://auth0.com/docs/troubleshoot/troubleshooting-tools/generate-and-analyze-har-files).\n    \n\n*   [\"Invalid state\" error during Auth0 WordPress redirect](https://community.auth0.com/t/invalid-state-error-during-auth0-wordpress-redirect/12552/16) in Auth0 Community\n    \n*   [Invalid state when visiting the callback URL directly](https://wordpress.org/support/topic/unable-to-resolve-troubleshooting-with-a-client-grant-for-already-exists/) on wordpress.org",
  "title": "Troubleshoot WordPress Plugin Invalid State Errors",
  "description": "Troubleshooting invalid state errors in the Login by Auth0 WordPress plugin",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/user-migration-in-login-by-auth0",
  "markdown": "# User Migration in Login by Auth0 WordPress Plugin\n\nThe User Migration functionality uses a core Auth0 feature called Custom Databases combined with URL endpoints in the Login by Auth0 plugin to allow users to authenticate with existing WordPress user accounts. To learn more about custom databases, read [Custom Database Connections](https://auth0.com/docs/authenticate/database-connections/custom-db).\n\n## How It Works\n\nWhen you enable data migration, the plugin exposes two secure endpoints that allow Auth0 to authenticate users using WordPress accounts. These endpoints are secured with a secret token and can be set only to allow IP addresses used by Auth0.\n\nThe login flow is as follows:\n\n1.  A user attempts to login with an Auth0 login form (embedded on your site or hosted at Auth0).\n    \n2.  If Auth0 can't find a user associated with the provided credentials in your database connection, it proceeds to call the Migration endpoint on your WordPress site with the user credentials and the migration token.\n    \n3.  The plugin finds a user in your WordPress database with the provided username/email and verifies the password.\n    \n4.  If a user can be successfully authenticated, Auth0 creates the user in the database connection for your site, authenticates the user, and logs them in.\n    \n5.  The next time the user logs in, they will use the Auth0 user, and the Migration endpoint will be skipped.\n    \n\nUser Migration must be set up when the site is first connected to Auth0. Attempting to turn on or off custom database scripts for a database connection that has already had users will fail. See the **Troubleshooting** section for more information about moving between modes.\n\n## Set Up and Configuration\n\nThe easiest way to construct User Migration is to use the Setup Wizard when the plugin is first installed. To learn more about the process, read [Install Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/install-login-by-auth0).\n\nIf the User Migration Setup Wizard could not complete or you want to see the process in more detail, follow the steps below. Again, this is starting from scratch with a database connection that does not have any users. The following process should be completed on a site with no traffic or with maintenance mode turned on.\n\n1.  [Create and correctly configure an Application](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0), and create and activate an empty Database Connection for the Application. These can be the same as the ones created in the standard Setup Wizard process, or you can create these from scratch. To learn more about the Setup Wizard, read [Install Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/install-login-by-auth0).\n    \n2.  In the **Auth0 > Settings** screen in WordPress, make sure the Application's Domain, Client ID and Client Secret are saved in the correct fields in the **Basic** tab.\n    \n3.  In the **Advanced** view, enable the **User Migration Endpoints** setting, and select **Save Changes**. If you are using constant-based settings, set `AUTH0_ENV_MIGRATION_WS` to `true` and `AUTH0_ENV_MIGRATION_TOKEN` to a secure random string at least 16 digits long and without single quotes or backslashes.\n    \n4.  Under the settings, you should now see a **Security Token**. Keep this page open as you will need this value later on in the process.\n    \n5.  In the Auth0 Dashboard, go to the Database Connection you want to use and enable **Requires Username** and **Import Users to Auth0**.\n    \n6.  Select the **Custom Database view**, and enable **Use my own database**.\n    \n7.  There should be two tabs below this setting under **Database Action Scripts**: one for **Login** and one for **Get User**.\n    \n8.  Select the **Login** view, clear out the existing code, [copy the db-login.js code from the GitHub repository](https://raw.githubusercontent.com/auth0/wp-auth0/4.4.0/lib/scripts-js/db-login.js), and paste it into the code editor.\n    \n9.  **This step is for versions 3.10.0 and earlier:** Look for `{THE_WS_URL}` and replace that with your WordPress instance's site URL, followed by `/index.php?a0_action=migration-ws-login`. The site URL can be found in the **Settings > General** screen in wp-admin. You can test this by pasting the complete URL in your browser. You should see `{\"status\":401,\"error\":\"Unauthorized\"}`.\n    \n10.  **This step is for versions 3.10.0 and earlier:** Look for `{THE_WS_TOKEN}` and replace that with the token that appears under the **User Migration Endpoints** setting.\n    \n11.  There should be no errors in the editor. If everything looks good, click **Save** at the top.\n    \n12.  **This step is for 3.11.0 and later:** Scroll down to **Settings** and add the following configuration variables: - `endpointUrl` set to your WordPress instance's site URL (**wp-admin > Settings > General > \"Site URL\" field**), followed by `/index.php?a0_action=`. - `migrationToken` set to the security token value seen in step 4 above. - `userNamespace` set to your Application name in Auth0 or any other value only including letters, numbers, and dashes.\n    \n    ![WordPress Plugin custom database settings](https://images.ctfassets.net/cdy7uua7fh8z/1icr0yX47nODUrzP7B6Xl2/b43621c3b6641f68bcb14ac38b237c11/auth0-custom-database-config.png)\n13.  Click the **Try** button at the top and use a valid WordPress user account in the form that appears. You should see the \"The profile is\" followed by the user's data. If not, please see the **Troubleshooting** section below.\n    \n14.  Select the **Get User** view, clear out the existing code, [copy the db-get-user.js code from the GitHub repository](https://raw.githubusercontent.com/auth0/wp-auth0/4.4.0/lib/scripts-js/db-get-user.js), and paste it into the code editor.\n    \n15.  **This step is for 3.10.0 and earlier:** Look for `{THE_WS_URL}` and replace that with your WordPress instance's site URL, followed by /index.php?a0\\_action=`migration-ws-get-user`. The site URL can be found in the **Settings > General** screen in wp-admin. You can test this by pasting the complete URL in your browser. You should see `{\"status\":401,\"error\":\"Unauthorized\"}`.\n    \n16.  **This step is for 3.10.0 and earlier:** Look for `{THE_WS_TOKEN}` and replace that with the token that appears under the **User Migration Endpoints** setting.\n    \n17.  There should be no errors in the editor. If everything looks good, click **Save**.\n    \n18.  Click the **Try** button at the top and use an email with a valid WordPress user account in the form that appears. You should see the \"The profile is\" followed by the user's data. If not, please see the **Troubleshooting** section below.\n    \n19.  In a new browser session, navigate to a login page on the WordPress site and attempt to log in (the user should not already exist in the database). You'll notice that the login process takes a little longer than usual at first, but it should succeed. Subsequent logins will be faster.\n    \n20.  (OPTIONAL) To turn on additional security for the migration endpoints, go to **Auth0 > Settings** screen in WordPress, turn on, then **Save Changes**. Attempt to log in with a different user to test that Auth0 can still reach the endpoints.\n    \n\nAt this point, the User Migration setup is complete, and existing WordPress users will be trickle-migrated to the Auth0 Database Connection.\n\n## Troubleshooting\n\nIssues with the User Migration typically come from a few places:\n\n*   Incorrect URL or token in the custom database scripts.\n    \n*   IP allow list turned on but with incorrect IP addresses.\n    \n*   Restricted or cached endpoints on your WordPress instance.\n    \n\nThe best way to start troubleshooting the issue is to use the **Try** button for the **Login** script found in the Custom Database view of the Database Connection being used on [Auth0 Dashboard > Authentication > Database](https://manage.auth0.com/#/connections/database). The following are the error messages you might see and the steps to take to fix.\n\n### Unexpected token < in JSON at position 0\n\nThis means the custom script is not getting data back in a format it can use. An incorrect endpoint URL likely causes this in the database script.\n\nFirst, copy the URL on line 10 in the script and paste it in your browser. If the endpoint is correct, it should display one of the two messages below:\n\n`{\"status\":401,\"error\":\"Unauthorized\"}`\n\n`// or`\n\n`{\"status\":403,\"error\":\"Forbidden\"}`\n\nIf what you're seeing is the home page or a 404, then the URL is incorrect. Look for your site URL under **Settings > General > Site URL** in the WordPress admin. Add `/index.php?a0_action=migration-ws-login` to the end for the Login script and `/index.php?a0_action=migration-ws-get-user` to the end for the Get User script.\n\n\\- **For versions 3.10.0 and earlier**: The URL value should appear in the script itself as the first parameter in the `request.post` call. - **For versions 3.11.0 and later**: The token value should be saved in a configuration variable. Add the following to the first line of the function and use the **Try** button to see what is stored for `endpointUrl`:\n\n`callback(null, configuration);`\n\nIf you're sure the URLs are correct and are still having this issue, check with your host to make sure those URLs are not cached or restricted in any way.\n\n### Wrong email or password\n\nThis is the default error shown if anything else goes wrong. The easiest way to troubleshoot what's happening is to temporarily output the error that's being sent back (these are opaque by default to avoid displaying anything that might give attackers something to work with).\n\nOn line 30 of the Login script, change:\n\n`callback(null);`\n\nto:\n\n`callback(wpUser.error);`\n\nSave the script, and try the connection again. You should see one of the following messages and be able to pinpoint the issue with the steps below. Once you've solved the issue, change the script back to what it was.\n\n### Forbidden\n\nThis means that the migration endpoints are turned off in your WordPress install. In WordPress, go to **Auth0 > Settings > Advanced** and turn on **User Migration Endpoints**. Make sure the token that appears there is the same as what is used for both custom database scripts:\n\n*   **For versions 3.10.0 and earlier**: The token value should appear in the script itself after `access_token:`\n    \n*   **For versions 3.11.0 and later**: The token value should be saved in a configuration variable. Add the following to the first line of the function and use the **Try** button to see what is stored for `migrationToken`:\n    \n\n`callback(null, configuration);`\n\nThis means that the migration IP allow list is turned on, but the incoming IP address is not on the list. Just below the Login script you should see a list of IP addresses:\n\n![WordPress User Migration - Auth0 IP Addresses](https://images.ctfassets.net/cdy7uua7fh8z/3RnxoRlvXm8FmNfu02fXVn/3672806c9cbf2bfe28503be8b8a63eda/auth0-incoming-ip-addresses.png)\n\nMake sure all of those IP addresses appear in WordPress under **Auth0 > Settings > Advanced** in the plugin:\n\n![WordPress User Migration - IP Whitelist](https://images.ctfassets.net/cdy7uua7fh8z/3w6C1IrsSC9hoivpSY122l/d117857524ef8d7872f364d3a7dbabda/migration-ip-whitelist-setting-field.png)\n\nIf one or more of the IP addresses listed in Auth0 do not appear in WordPress, add the missing ones into the field and save the settings page. Also, [create a post in the Auth0 Community](https://community.auth0.com/tags/wordpress) (and tag it \"wordpress\") that contains the missing IP address(es), so we can address the issue.\n\nThe security token is either missing in the database script (line 16), or your server is not processing the headers correctly. Check the Login script and make sure that the token exists and matches what is in WordPress. If the token is there and correct, then you'll need to talk to your host to enable the `Authorization` header to be parsed. For help with server troubleshooting, read [Apache 2.4 + PHP-FPM and Authorization headers on stackoverflow.com](https://stackoverflow.com/questions/17018586/apache-2-4-php-fpm-and-authorization-headers). To see how the token is retrieved, view the [plugin code in the GitHub repository.](https://github.com/auth0/wp-auth0/blob/master/lib/WP_Auth0_Routes.php#L138)\n\n### Invalid token\n\nThe security token in the database script is incorrect. Check the Login script line 16 and make sure that the token matches what is in WordPress.\n\n### Invalid Credentials\n\nThe email address and/or password being used is incorrect. Check to make sure you're entering the correct email address and that the password is correct. You can reset the user password to something else to make sure you have the correct one.\n\n### Cannot Change Email or Incorrect User Data\n\nIf you are using more than one custom database connection in your Auth0 tenant and you're unable to change the email address or are getting user data stored for the wrong user, it's likely that you have overlapping user IDs in Auth0. This problem has been fixed for new sites installing 3.11.0 but, for connections created before then, this will need to be manually fixed by doing one of the following:\n\n*   If you don’t have any user data stored that needs to be kept (if you’re only using the connection to support login and not storing any metadata), you can create a new custom database connection using the steps above (using the 3.11.0 notes) and switch the Application to this new connection (make sure to turn the old connection off). The migration will be restarted, and there will be no impact on the user experience.\n    \n*   If you do have data in Auth0 that needs to be kept, you can [use our User Import/Export Extension](https://auth0.com/docs/manage-users/user-migration/user-import-export-extension) to adjust the user data. 1. Create a new custom database connection using the steps above (using the 3.11.0 notes). 2. Export all users from the existing connection (we recommend putting your site in maintenance mode while doing the switch-over, so no users are missed). 3. Change all user IDs to add the namespace used when creating the new connection. User IDs should go from something like `auth0|123` to `auth0|Your-WP-Site-Name|123`. Adjust all other fields you need to follow the import schema. To learn more, read [Bulk User Import Database Schema and Examples](https://auth0.com/docs/manage-users/user-migration/bulk-user-import-database-schema-and-examples). 4. Turn the new connection on and the old connection off for your application. 5. Import the new user data into the new connection and test.\n    \n*   If you have a paid account, you can contact our support team to run a database update script to change the user IDs to a namespaced version and add the namespace to your database script at the same time (step 12 in **Set Up and Configuration** above).",
  "title": "User Migration in Login by Auth0 WordPress Plugin",
  "description": "Describes the user migration feature of the Login by Auth0 WordPress Plugin",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/extend-login-by-auth0",
  "markdown": "# Extend Login by Auth0 WordPress Plugin\n\nWordPress plugins can be extended to fit your specific requirements by using actions and filters to run custom code at specific points during runtime. This document outlines the existing hooks in the Login by Auth0 plugin. We're happy to review and approve new filters and actions that help you integrate even further in this plugin. To learn more, read the Contributing section in the [ReadMe in the plugin's GitHub repository](https://github.com/auth0/wp-auth0/blob/master/README.md).\n\n## WordPress Actions\n\nWordPress Actions run custom code at specific points during processing. To learn more about WordPress Actions, read [WordPress Plugin Handbook: Actions on wordpress.org](https://developer.wordpress.org/plugins/hooks/actions/). You can also [see examples in the GitHub repository](https://github.com/auth0/wp-auth0/tree/master/examples).\n\n### auth0\\_before\\_login\n\nThis action runs in `WP_Auth0_LoginManager` after a user has been authenticated successfully but before they have been logged into WordPress. It can be used to stop the login process if needed using `wp_die()` or throwing an exception. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_before_login.php).\n\n### auth0\\_user\\_login\n\nThis action runs in `WP_Auth0_LoginManager` after a user has been authenticated successfully and logged into WordPress. It can be used to set specific meta values, send notifications, or ping other services. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_user_login.php).\n\n### wpa0\\_user\\_created\n\nThis action runs in `WP_Auth0_Users` just after a WordPress user is successfully created. It can be used to change user values, set additional user metas, or trigger other new user actions. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/wpa0_user_created.php).\n\n## Filters\n\nFilters in WordPress also run custom code at specific points during processing but always return a modified value of the same type that was passed in. To learn more about filters, read [WordPress Plugin Handbook: Filters on wordpress.org](https://developer.wordpress.org/plugins/hooks/filters/). You can also [see examples in the GitHub repository](https://github.com/auth0/wp-auth0/tree/master/examples).\n\n### auth0\\_create\\_user\\_data\n\nThis filter can be used to modify the user data array when creating a new user in WordPress from an incoming Auth0 user. It receives 2 parameters:\n\n*   `$user_data` is the user data parsed from the Auth0 profile.\n    \n*   `$userinfo` is the Auth0 user profile.\n    \n\nThis filter should always return an array of data that will be passed to the core `wp_insert_user()` function. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_create_user_data.php).\n\n### auth0\\_get\\_wp\\_user\n\nThis filter is called after the plugin finds the related user to login (based on the auth0 `user_id`) and is used to override the default behavior with custom matching rules (for example, always match by email). You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_get_wp_user.php).\n\nIf the filter returns null, it will look up by email. To learn more, read [Integrate with WordPress](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/integrate-with-wordpress).\n\n### auth0\\_verify\\_email\\_page\n\nThis filter runs in `WP_Auth0_Email_Verification` to change the HTML rendered when a user who is logging in needs to verify their email before gaining access to the site. Note that this HTML is passed to `wp_die()` where it is modified before being displayed (see the `_default_wp_die_handler()` definition in core for more information). You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_verify_email_page.php).\n\n### auth0\\_get\\_auto\\_login\\_connection\n\nThis filter is used in `WP_Auth0_LoginManager` to modify what connection is used for the auto-login process. The setting in wp-admin is pulled and then passed through this filter. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_get_auto_login_connection.php).\n\n### wp\\_auth0\\_get\\_option\n\nThis filter is used by option-getting functions and methods to modify the output value. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/wp_auth0_get_option.php).\n\n### auth0\\_migration\\_ws\\_authenticated\n\nThis filter is used in `WP_Auth0_Routes` to alter the WP\\_User object that is JSON-encoded and returned to Auth0 during a user migration. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_migration_ws_authenticated.php).\n\n### wpa0\\_should\\_create\\_user\n\nThis filter is used in `WP_Auth0_Users` when deciding whether a user should be created. The initial value passed in is `TRUE`. If `FALSE` is returned for any reason, registration will be rejected and the registering user will see an error message (`WP_Auth0_UsersRepo::create()`). You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/wpa0_should_create_user.php).\n\n### auth0\\_login\\_css\n\nThis filter is used to modify the CSS on the login page, including the login widget itself. This filter runs before CSS is retrieved from the wp-admin settings page. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_login_css.php).\n\n### auth0\\_login\\_form\\_tpl\n\nFilters the template used for the Auth0 login form. This should return a path to a file containing HTML that replaces what is in `wp-content/plugins/auth0/templates/auth0-login-form.php`. The standard Lock initiation JS looks for an ID attribute of `auth0-login-form` to instantiate the login form so make sure that's present or replace the `wp-content/plugins/auth0/assets/js/lock-init.js` file with your own. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_login_form_tpl.php).\n\n### auth0\\_settings\\_fields\n\nThis filter is used to modify an existing form field or to add a new one. This should return a modified `$options` array with your changes or additions. New fields must have a field callback, as shown below. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_settings_fields.php).\n\n### auth0\\_auth\\_scope\n\nThis filter allows developers to add or change the scope requested during login. This can be used to add [custom claims](https://auth0.com/docs/secure/tokens/json-web-tokens/create-custom-claims) or request a Refresh Token. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_auth_scope.php).\n\n### auth0\\_nonce\\_cookie\\_name\n\nUse this filter to modify the cookie name used for nonce validation. See the `auth0_state_cookie_name` filter below for an example. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_nonce_cookie_name.php).\n\n### auth0\\_state\\_cookie\\_name\n\nUse this filter to modify the cookie name used for the state parameter value. This can add a prefix or suffix or replace the string entirely. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_state_cookie_name.php). [](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_state_cookie_name.php)To learn more about the state parameter, read [Prevent Attacks and Redirect Users with OAuth 2.0 State Parameters](https://auth0.com/docs/secure/attack-protection/state-parameters). Make sure to use valid characters in any modifications made:\n\n`A <cookie-name> can be any US-ASCII characters except control characters (CTLs), spaces, or tabs. It also must not contain a separator character like the following: ( ) < > @ , ; : \\ \" / ? = { }.`\n\nTo learn more about the `Set-Cookie` HTTP response header, read [Set-Cookie in MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie).\n\n### auth0\\_settings\\_constant\\_prefix\n\nUse this filter to change the prefix for the constant used to override plugin settings. Please note that this filter **must** run before the Auth0 plugin is loaded so it needs to be located in an MU plugin. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_settings_constant_prefix.php). To learn more about MU plugins, read [Must Use Plugins on wordpress.org](https://wordpress.org/support/article/must-use-plugins/).\n\nThis filter allows developers to adjust the `/authorize` endpoint parameters as needed. The function must return a dictionary-type array of URL parameters. To learn more about how these parameters are used, read [Authentication API Explorer: Login](https://auth0.com/docs/api/authentication#login). You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_authorize_url_params.php).\n\n### auth0\\_authorize\\_url\n\nThis filter allows developers to adjust the complete `/authorize` URL before use. The function must return a valid URL as a string. To learn more about how this URL is used, read [Authentication API Explorer: Login](https://auth0.com/docs/api/authentication#login). You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_authorize_url.php).\n\n### auth0\\_die\\_on\\_login\\_output\n\nThis filter lets you modify or replace the HTML content passed to `wp_die()` when there is an error during login. This filter does not affect the verify email content (see auth0\\_verify\\_email\\_page). You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_die_on_login_output.php).\n\n### auth0\\_coo\\_auth0js\\_url\n\nThis filter lets you override the default CDN URL for Auth0.js when loading the COO fallback page.\n\n### auth0\\_slo\\_return\\_to\n\nThis filter lets you override the default `returnTo` URL when logging out of Auth0. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_slo_return_to.php).\n\n### auth0\\_logout\\_url\n\nThis filter lets you override the Auth0 logout URL. To learn more about how this is used, read [Logout](https://auth0.com/docs/authenticate/login/logout). You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_logout_url.php).\n\n### auth0\\_use\\_management\\_api\\_for\\_userinfo\n\nThis filter determines whether or not user profile data retrieved from the Management API should when you're not using the Implicit Login Flow. Return a boolean `true` (default) to use the API, `false` to use the ID token. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_use_management_api_for_userinfo.php).\n\n### auth0\\_lock\\_options\n\nThis filter can be used to modify the options for the embedded Lock login form used in shortcodes, widgets, and on the wp-login.php page when **Features > Universal Login Page** is turned off. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_lock_options.php).\n\n### auth0\\_jwt\\_leeway\n\nThis filter lets you adjust the leeway time used to validate ID tokens and should return a number of seconds as an integer. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_jwt_leeway.php).\n\n### auth0\\_jwt\\_max\\_age\n\nThis filter lets you adjust the `max_age` URL parameter sent on the authorize URL. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_jwt_max_age.php).\n\n### auth0\\_authorize\\_state\n\nThis filter lets you filter the state data before being encoded and used for login. This data will be verified after a successful login and provided as-is for use. You can [see an example in the GitHub repository](https://github.com/auth0/wp-auth0/blob/master/examples/auth0_authorize_state.php).\n\n## Use case\n\nYou can [see an example of using actions with filters in the GitHub repository](https://gist.github.com/evansims/c7116f83040af3e899213422489debc2).[](https://gist.github.com/evansims/c7116f83040af3e899213422489debc2)\n\n## Learn more\n\n*   [Integrate with WordPress](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/integrate-with-wordpress)\n*   [Install Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/install-login-by-auth0)\n*   [Configure Login by Auth0](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/configure-login-by-auth0)\n*   [Troubleshoot WordPress Plugin Invalid State Errors](https://auth0.com/docs/customize/integrations/cms/wordpress-plugin/troubleshoot-wordpress-plugin-invalid-state-errors)",
  "title": "Extend Login by Auth0 WordPress Plugin",
  "description": "Learn how to extend the Login by Auth0 WordPress Plugin with hooks, filters, and functions.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/sign-up-prompt-customizations",
  "markdown": "# Customize Signup and Login Prompts\n\n**Customize Signup and Login Prompts** is a feature that allows customers with Custom Domain and Custom Page Template enabled to add custom fields and content to their app’s signup and login prompts.\n\n#### Use Cases \n\nCustomize Signup and Login Prompts supports two use cases: **custom content** and **data capture.** \n\n**Custom content** is static content like text, links, or images placed directly on the signup and login prompts.\n\n**Data capture** uses form elements dynamically added to the signup and login prompts, which is useful for collecting and validating user consent or user-produced data like surname. Data capture is only available for Database Connections without Passkey authentication users.\n\n#### Terminology\n\nA **Prompt** is a specific step in a given authentication flow. Each Prompt has at least one **Screen** and, depending on tenant configuration, each supported Screen has either four or six **Entry Points,** which are locations in the Screen where custom code (**Partials**) can be inserted.\n\nThe following Prompts can be customized:\n\n*   `signup`\n    \n*   `signup-id`\n    \n*   `signup-password`\n    \n*   `login`\n    \n*   `login-id`\n    \n*   `login-password`\n    \n\nPartials support HTML, CSS, Javascript, and [Liquid syntax](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers) to power conditional logic and dynamic variables. In addition, any Liquid variable that is available to the [Page Template](https://auth0.com/docs/customize/login-pages/universal-login/customize-templates) is also available.\n\nThese entry points available when a database connection is enabled:\n\n*   `form-content-start`\n    \n*   `form-content-end`\n    \n*   `form-footer-start`\n    \n*   `form-footer-end`\n    \n\nThe following Entry Points are available when at least one social or enterprise connection is enabled:\n\n*   `secondary-actions-start`\n    \n*   `secondary-actions-end`\n    \n\n#### Use the Management API to Manage Partials\n\nPartials can be a maximum of 10,000 characters and are be managed by the [Auth0 Management API](https://auth0.com/docs/api/management/v2/prompts/put-partials) at `/v2/prompts/{prompts_name}/partials`. Every Prompt must specify the `Screen` when adding, updating, or deleting a Partial. Below is an example call to view all existing Partials for a prompt, noting that `ulp-container` prefix is not required when referencing Entry Points in API calls.\n\nCustom Prompts does not currently support [Auth0's Deploy CLI tool](https://auth0.com/docs/deploy-monitor/deploy-cli-tool) or Auth0 CLI.\n\n```\nGET /api/v2/prompts/signup-id/partials\n# response\n# success code: 200\n# not found code: 404\nbody: {\n  \"signup-id\": {\n    \"form-content-start\": \"<div>HTML or Liquid</div>...\",\n    \"form-content-end\": \"<div>HTML or Liquid</div>...\"\n  }\n}\n```\n\n#### Style and Validate Form Inputs\n\nCustomize Signup and Login Prompts offers pre-built styles and support for client-side validations for certain HTML form elements. The following elements are supported:\n\n*   `<input type=\"text\">`\n    \n*   `<input type=\"number\">`\n    \n*   `<input type=\"checkbox\">` \n    \n*   `<input type=\"password\">`\n    \n*   `<input type=\"email\">`\n    \n*   `<input type=\"tel\">`\n    \n*   `<input type=\"url\">`\n    \n*   `<select>`\n    \n*   `<textarea>`\n    \n\nTo use pre-built input styles, wrap your form element of choice in a `<div>` with the `ulp-field` class. Similarly, add the `ulp-error` class to the same `<div>` to use pre-built error styles. If the `ulp-error-info` element is present, a styled error message will also be displayed.\n\n#### Client-Side Validation\n\nThe feature's client-side validation framework allows customers to validate user input using HTML attributes to execute one or more custom validation functions. Validation functions can be included directly in the Partial or included in the `<head>` of the page template.\n\nTo add client-side validation to a form element:\n\n*   Reference the validation function using the `data-ulp-validation-function` attribute on the `<div class=\"ulp-error-info\">` element.\n    \n*   Declare which DOM events the validation function should be run on using the `data-ulp-validation-event-listeners` attribute on the `<div class=\"ulp-error-info\">` element, noting that validations run automatically on submission.\n    \n\n#### Localize Content\n\nPartial content can be localized by defining new custom text variables using the [Custom Text API](https://auth0.com/docs/api/management/v2/prompts/put-custom-text-by-language). Up to thirty custom text variables can be defined per screen/language combination.\n\n##### Create or Update a Custom Text Variable\n\nThe Custom Text API is available [here](https://auth0.com/docs/api/management/v2/prompts/get-custom-text-by-language) and each variable follows a `var-<name>` naming convention. Calls to the API must specify the Screen when adding, updating, or deleting a custom text variable. Markdown links are supported and are converted to HTML `<a>` elements before being displayed to users.\n\nBelow is an example call to add a variable for the text of a terms of service checkbox label in English and Spanish. See the Management API to learn more.\n\n```\n# PUT /api/v2/prompts/signup-id/custom-text/en\n{\n  \"signup\": {\n    \"var-tos\": \"I agree with the [Terms of Service](https://en.example.com/tos)\"\n  }\n}\n\n# PUT /api/v2/prompts/signup-id/custom-text/es\n{\n  \"signup\": {\n    \"var-tos\": \"Estoy de acuerdo con los [Términos de Servicio](https://es.example.com/tos)\"\n  }\n}\n```\n\n##### Use a Custom Text Variable in a Partial\n\nCustom text variables are referenced in Partials using the `prompts.screen.text` object; the reference for the `var-tos` example in the previous section is `prompt.screen.texts.varTos`. See below for an example of how to use a previously created variable in a Partial on the Signup ID Prompt, noting that the Management API's `var-tos` variable is referenced as `varTos` in the Partial.\n\n```\n# PUT api/v2/prompts/signup/partials\n{\n  \"signup\": {\n    \"form-content-end\": \"<div class='ulp-field'><input type='checkbox' name='ulp-terms-of-service' id='terms-of-service'><label for='terms-of-service'>{{ prompt.screen.texts.varTos }}</label></div>\"\n  }\n}\n```\n\n#### Validate and Save Captured Data\n\nData captured by custom form elements is available in Actions, and Auth0 recommends that the collected data be validated.\n\nEach Action receives the captured data as an object on the `event.request.body`. Customers can return a validation error by using the `api.validation.error` function.\n\n*   Data from the Signup Prompts is accessible on Pre User Registration, and if a validation error is returned, the user is prevented from registering.\n    \n*   Data from Login Prompts is accessible on Post Login, and if a validation error is returned, the validation error is forwarded to the customer’s application error page.\n    \n\n##### Save to User Metadata\n\nFrom the Action, captured data can be sent to an external API for validation and storage or saved in `user_metadata` on the user via `api.user.setUserMetadata`.\n\n```\n# Given this code in the signup form\n# <div class=\"ulp-field\">\n#   <label for=\"full-name\">Full Name</label>\n#   <input type=\"text\" name=\"ulp-full-name\" id=\"full-name\">\n# </div>\n\nexports.onExecutePreUserRegistration = async (event, api) => {\n  const fullName = event.request.body['ulp-full-name'];\n  if(!fullName) {\n    api.validation.error(\"invalid_payload\", \"Missing Name\");\n    return;\n  }\n\n  api.user.setUserMetadata(\"fullName\", fullName);\n};\n```\n\n## Learn more\n\n*   [Use Dynamic Variables to Internationalize Custom Form Elements](https://auth0.com/docs/use-dynamic-variables-to-internationalize-custom-form-elements)\n*   [Use Actions to Validate and Store End-user Data Gathered By Signup Prompt Customizations](https://auth0.com/docs/validate-and-store-user-data-with-actions)",
  "title": "Customize Signup and Login Prompts",
  "description": "Learn how to customize signup and login prompts for Universal Login ",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/api/management/v2/users/post-users",
  "markdown": "Auth0 Management API v2",
  "title": "Auth0 Management API v2",
  "description": null,
  "languageCode": "en"
},
{
  "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-memberships-query-hook",
  "markdown": "# Delegated Administration: Memberships Query Hook\n\nWhen creating a new user, the User Interface shows a dropdown where you can choose the membership(s) you want assigned to a user. These memberships are then defined using the **Memberships Query Hook**.\n\n## Hook contract\n\n*   **ctx**: Context object.\n    \n*   **callback(error, { createMemberships: true/false, memberships: })**: Callback to which you can return an error and an object containing the membership configuration.\n    \n\n## Sample use\n\nUsers of the IT department should be able to create users in other departments. Users from other departments should only be able to create users for their departments.\n\n```\nfunction(ctx, callback) {\n  var currentDepartment = ctx.payload.user.app_metadata && ctx.payload.user.app_metadata.department;\n  if (!currentDepartment || !currentDepartment.length) {\n    return callback(null, [ ]);\n  }\n\n  if (currentDepartment === 'IT') {\n    return callback(null, [ 'IT', 'HR', 'Finance', 'Marketing' ]);\n  }\n\n  return callback(null, [ ctx.payload.user.app_metadata.department ]);\n}\n```\n\n## Notes\n\nBecause you can only use this query in the UI, you'll need to assign memberships using the **Write Hook** if you need to enforce rules regarding the assignment of users to specific departments.\n\nIf there is only one membership group possible, the Memberships field will not show in the UI.\n\nYou can allow the end user to enter any value into the **memberships** field by setting **createMemberships** to true:\n\n```\nfunction(ctx, callback) {\n  var currentDepartment = ctx.payload.user.app_metadata.department;\n  if (!currentDepartment || !currentDepartment.length) {\n    return callback(null, [ ]);\n  }\n\n  return callback(null, {\n    createMemberships: ctx.payload.user.app_metadata.department === 'IT' ? true : false,\n    memberships: [ ctx.payload.user.app_metadata.department ]\n  });\n}\n```\n\n## Learn more\n\n*   [Delegated Administration: Access Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-access-hook)\n*   [Delegated Administration: Filter Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook)\n*   [Delegated Administration: Settings Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-settings-query-hook)\n*   [Delegated Administration: Write Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-write-hook)",
  "title": "Delegated Administration: Memberships Query Hook",
  "description": "Learn how to use the Memberships Query Hook with the Delegated Administration Extension.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/delete-roles",
  "markdown": "# Delete Roles\n\n```\ncurl --request DELETE \\\n  --url 'https://{yourDomain}/api/v2/roles/ROLE_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/roles/ROLE_ID\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/roles/ROLE_ID\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.delete(\"https://{yourDomain}/api/v2/roles/ROLE_ID\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'DELETE',\n  url: 'https://{yourDomain}/api/v2/roles/ROLE_ID',\n  headers: {authorization: 'Bearer MGMT_API_ACCESS_TOKEN'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/roles/ROLE_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/roles/ROLE_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\nheaders = { 'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\" }\n\nconn.request(\"DELETE\", \"/{yourDomain}/api/v2/roles/ROLE_ID\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/roles/ROLE_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\"]\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/roles/ROLE_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
  "title": "Delete Roles",
  "description": "Learn how to delete a role using the Auth0 Dashboard or the Management API. ",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/view-users-assigned-to-roles",
  "markdown": "# View Users Assigned to Roles\n\nYou can view the users assigned to a [role](https://auth0.com/docs/authorization/concepts/rbac) using the Auth0 Dashboard or the Management API. Roles are used with the API Authorization Core feature set.\n\n## Prerequisites\n\nFor role-based access control (RBAC) to work properly, you must enable it for your API using either the Dashboard or the Management API. The Authorization Core functionality is different from the Authorization Extension. For a comparison, read [Authorization Core vs. Authorization Extension](https://auth0.com/docs/manage-users/access-control/authorization-core-vs-authorization-extension).\n\n## Dashboard\n\n1.  Go to [Dashboard > User Management > Roles](https://manage.auth0.com/#/users) and click the name of the role to view.\n    \n    ![Dashboard - User Management - Roles List](https://images.ctfassets.net/cdy7uua7fh8z/4tHd5gg5rlYtwfJtwQig3o/c32ad91f1f368565d9940fb8ee1be65c/Screen_Shot_2021-05-20_at_7.29.11_PM.png)\n2.  Click the **Users** tab.\n    \n    ![Dashboard - User Management - Roles - Users](https://images.ctfassets.net/cdy7uua7fh8z/71fXrC53nQD9sWsiDiM1hv/7cc018e64b066f3d46e00f5f165a7542/Screen_Shot_2021-05-20_at_7.35.27_PM.png)\n\nThe following information is displayed for each user:\n\n| Column | Description |\n| --- | --- |\n| Picture | User's picture from the user profile. |\n| Name | User's name from the user profile. |\n| Email address | User's email address from the user profile. |\n\n## Management API\n\nTo retrieve a list of users assigned to a role, see [Get a Role's Users](https://auth0.com/docs/api/management/v2#!/Roles/get_role_user).\n\n## Learn more\n\n*   [Assign Roles to Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/assign-roles-to-users)\n*   [Create Roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/create-roles)\n*   [Delete Roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/delete-roles)\n*   [Edit Role Definitions](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/edit-role-definitions)\n*   [Remove Permissions from Roles](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/remove-permissions-from-roles)\n*   [Remove Roles from Users](https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/remove-roles-from-users)",
  "title": "View Users Assigned to Roles",
  "description": "Describes how to view users assigned to a role using the Auth0 Dashboard or Management API.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/assign-roles-to-users",
  "markdown": "# Assign Roles to Users\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/api/v2/users/USER_ID/roles' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"roles\": [ \"ROLE_ID\", \"ROLE_ID\" ] }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/USER_ID/roles\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/USER_ID/roles\"\n\n\tpayload := strings.NewReader(\"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/api/v2/users/USER_ID/roles\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/api/v2/users/USER_ID/roles',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {roles: ['ROLE_ID', 'ROLE_ID']}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"roles\": @[ @\"ROLE_ID\", @\"ROLE_ID\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/USER_ID/roles\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/USER_ID/roles\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/api/v2/users/USER_ID/roles\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/USER_ID/roles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"roles\\\": [ \\\"ROLE_ID\\\", \\\"ROLE_ID\\\" ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\"roles\": [\"ROLE_ID\", \"ROLE_ID\"]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/USER_ID/roles\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
  "title": "Assign Roles to Users",
  "description": "Learn how to assign roles to a user using the Auth0 Dashboard or the Management API. ",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens/changes-in-auth0-management-apiv2-tokens",
  "markdown": "# Changes in Auth0 Management APIv2 Tokens\n\nSome time ago, we changed the process of getting a Management APIv2 Token. This article explains what changed, why this was done, and how you can work around it (not recommended).\n\n## What changed and why\n\n### The user experience\n\nUntil recently, you could generate a Management APIv2 Token directly from the Management API Explorer. You selected the scopes, according to the endpoint you wanted to invoke, and got a token from that same page.\n\nThat way was very easy, but it was also very insecure. So we changed it.\n\nThe new way uses the [Client Credentials Flow](https://auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow). To learn how to use the new process, see [Management API Access Tokens](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens).\n\n#### Why this changed\n\nTo generate the token, the Management API required access to your Global Client Secret (used to sign the token). This is information that should not be exposed to web browsers.\n\nFurthermore, the API Explorer has no way to do authorization. This means that if a user could log in and access the API Explorer, they could generate a token with any scope, even if they were not allowed to have that scope.\n\nThe new implementation does not pose such risks. Once you perform the initial configuration, you can get a token either by visiting the Auth0 Dashboard, or by making a simple `POST` request to the [`/oauth/token` endpoint of our Authentication API](https://auth0.com/docs/api/authentication#client-credentials).\n\nHowever, with regards to the manual process, we do understand that changing screens is not always the best user experience, so we are looking into ways to make the new flow more intuitive.\n\n### The validity period\n\nWith the previous flow, tokens never expired. With the new flow, all Management APIv2 tokens expire by default after 24 hours.\n\n#### Why this changed\n\nHaving a token that never expires can be very risky, in case an attacker gets hold of it. If the token expires within a few hours, the attacker has only a small window of time in which to access your protected resources.\n\nTo get a token, you should follow only the process described in [Management API Access Tokens](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens).",
  "title": "Changes in Auth0 Management APIv2 Tokens",
  "description": "Learn what changed in the flow for generating Auth0 Management APIv2 tokens and why.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens/get-management-api-tokens-for-single-page-applications",
  "markdown": "# Get Management API Access Tokens for Single-Page Applications\n\nIn certain cases, you may want to use Auth0's [Management API](https://auth0.com/docs/api/management/v2#!) to manage your applications and APIs rather than the Auth0 Management Dashboard.\n\nTo call any Management API endpoints, you must authenticate using a specialized [Access Token](https://auth0.com/docs/secure/tokens/access-tokens) called the Management API Token. Management API Tokens are [JSON Web Tokens (JWTs)](https://auth0.com/docs/secure/tokens/json-web-tokens) that contain specific granted permissions (also known as scopes) for the Management API endpoints you want to call.\n\n## Limitations\n\nSince single-page applications (SPAs) are public clients and cannot securely store sensitive information (such as a **Client Secret**), they must retrieve Management API Tokens from the frontend, unlike other [application types](https://auth0.com/docs/get-started/applications). This means that Management API Tokens for SPAs have certain limitations. Specifically, they are issued in the context of the user who is currently signed in to Auth0 which limits updates to only the logged-in user's data. Although this restricts use of the Management API, it can still be used to perform actions related to updating the logged-in user's user profile.\n\n## Available scopes and endpoints\n\nWith a Management API Token issued for a SPA, you can access the following scopes (and hence endpoints).\n\n## Use Management API token to call Management API from a SPA\n\nYou can retrieve a Management API Token from a SPA (using the Management API’s audience to generate it) and use the token to call the Management API to retrieve the full user profile of the currently logged-in user.\n\n1.  [Retrieve a Management API token](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens/get-management-api-access-tokens-for-production).\n    \n    1.  Authenticate the user by redirecting them to the Authorization endpoint, which is where users are directed upon login or sign-up.\n        \n    2.  When you receive the Management API Token, it will be in [JSON Web Token format](https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-token-structure).\n        \n    3.  Decode it and review its contents.\n        \n2.  Call the Management API to retrieve the logged-in user's user profile from the [Get User by ID](https://auth0.com/docs/api/management/v2#!/Users/get_users_by_id) endpoint.\n    \n    1.  To call the endpoint, include the encoded Management API token you retrieved in the `Authorization` header of the request.\n        \n    2.  Be sure to replace the `USER_ID` and `MGMT_API_ACCESS_TOKEN` placeholder values with the logged-in user's user ID (`sub` value from the decoded Management API token) and the Management API access token, respectively.\n        \n\n## Learn more\n\n*   [Get Management API Access Tokens for Testing](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens/get-management-api-access-tokens-for-testing)\n*   [Get Management API Access Tokens for Production](https://auth0.com/docs/secure/tokens/access-tokens/management-api-access-tokens/get-management-api-access-tokens-for-production)",
  "title": "Get Management API Access Tokens for Single-Page Applications",
  "description": "Learn about available scopes and endpoints for Management API tokens for Single-page Applications (SPAs).",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-access-hook",
  "markdown": "# Delegated Administration: Access Hook\n\nBecause the Filter Hook only applies filtering logic, you'll need a second layer of logic to determine if the current user (or the person acting as the administrator) is allowed to access a specific user.\n\nTo learn more about the Filter Hook, read [Delegated Administration: Filter Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook).\n\nThe **Access Hook** allows you to determine if the current user is allowed to read, delete, block, unblock, or update a specific user.\n\n## Hook contract\n\n*   **ctx**: Context object.\n    \n    *   **payload**: Payload object.\n        \n        *   **action**: Current action (e.g., **delete:user**) that is being executed.\n            \n        *   **user**: User on which the action is being executed.\n            \n*   **callback(error)**: Callback to which you can return an error if access is denied.\n    \n\n## Sample use\n\nKelly manages the Finance department, and she should only be able to access users within her department.\n\n```\nfunction(ctx, callback) {\n  if (ctx.payload.action === 'delete:user') {\n    return callback(new Error('You are not allowed to delete users.'));\n  }\n\n  // Get the department from the current user's metadata.\n  var department = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n  if (!department || !department.length) {\n    return callback(new Error('The current user is not part of any department.'));\n  }\n\n  // The IT department can access all users.\n  if (department === 'IT') {\n    return callback();\n  }\n\n  ctx.log('Verifying access:', ctx.payload.user.app_metadata.department, department);\n\n  if (!ctx.payload.user.app_metadata.department || ctx.payload.user.app_metadata.department !== department) {\n    return callback(new Error('You can only access users within your own department.'));\n  }\n\n  return callback();\n}\n```\n\n## Notes\n\nIf this hook is not configured, all users will be accessible to the current user.\n\nThe Hook supports the following action names (which you set using as the value for **ctx.payload.action**):\n\n*   read:user\n    \n*   delete:user\n    \n*   reset:password\n    \n*   change:password\n    \n*   change:username\n    \n*   change:email\n    \n*   read:devices\n    \n*   read:logs\n    \n*   remove:multifactor-provider\n    \n*   block:user\n    \n*   unblock:user\n    \n*   send:verification-email\n    \n\n## Learn more\n\n*   [Delegated Administration: Filter Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook)\n*   [Delegated Administration: Memberships Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-memberships-query-hook)\n*   [Delegated Administration: Settings Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-settings-query-hook)\n*   [Delegated Administration: Write Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-write-hook)",
  "title": "Delegated Administration: Access Hook",
  "description": "Learn how to use the Access Hook with the Delegated Administration Extension.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/roles/edit-role-definitions",
  "markdown": "# Edit Role Definitions\n\n```\ncurl --request PATCH \\\n  --url 'https://{yourDomain}/api/v2/roles/ROLE_ID' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"name\": \"ROLE_NAME\", \"description\": \"ROLE_DESC\" }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/roles/ROLE_ID\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/roles/ROLE_ID\"\n\n\tpayload := strings.NewReader(\"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.patch(\"https://{yourDomain}/api/v2/roles/ROLE_ID\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'PATCH',\n  url: 'https://{yourDomain}/api/v2/roles/ROLE_ID',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {name: 'ROLE_NAME', description: 'ROLE_DESC'}\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"name\": @\"ROLE_NAME\",\n                              @\"description\": @\"ROLE_DESC\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/roles/ROLE_ID\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"PATCH\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/roles/ROLE_ID\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"PATCH\",\n  CURLOPT_POSTFIELDS => \"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"PATCH\", \"/{yourDomain}/api/v2/roles/ROLE_ID\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/roles/ROLE_ID\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"name\\\": \\\"ROLE_NAME\\\", \\\"description\\\": \\\"ROLE_DESC\\\" }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\n  \"name\": \"ROLE_NAME\",\n  \"description\": \"ROLE_DESC\"\n] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/roles/ROLE_ID\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"PATCH\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
  "title": "Edit Role Definitions",
  "description": "Learn how to edit a role definition using the Auth0 Dashboard and the Management API. ",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/manage-users/access-control/configure-core-rbac/rbac-users/assign-permissions-to-users",
  "markdown": "# Assign Permissions to Users\n\n```\ncurl --request POST \\\n  --url 'https://{yourDomain}/api/v2/users/USER_ID/permissions' \\\n  --header 'authorization: Bearer MGMT_API_ACCESS_TOKEN' \\\n  --header 'cache-control: no-cache' \\\n  --header 'content-type: application/json' \\\n  --data '{ \"permissions\": [ { \"resource_server_identifier\": \"API_IDENTIFIER\", \"permission_name\": \"PERMISSION_NAME\" }, { \"resource_server_identifier\": \"API_IDENTIFIER\", \"permission_name\": \"PERMISSION_NAME\" } ] }'\n```\n\n```\nvar client = new RestClient(\"https://{yourDomain}/api/v2/users/USER_ID/permissions\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddHeader(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\");\nrequest.AddHeader(\"cache-control\", \"no-cache\");\nrequest.AddParameter(\"application/json\", \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n```\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://{yourDomain}/api/v2/users/USER_ID/permissions\"\n\n\tpayload := strings.NewReader(\"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n\treq.Header.Add(\"cache-control\", \"no-cache\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}\n```\n\n```\nHttpResponse<String> response = Unirest.post(\"https://{yourDomain}/api/v2/users/USER_ID/permissions\")\n  .header(\"content-type\", \"application/json\")\n  .header(\"authorization\", \"Bearer MGMT_API_ACCESS_TOKEN\")\n  .header(\"cache-control\", \"no-cache\")\n  .body(\"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\")\n  .asString();\n```\n\n```\nvar axios = require(\"axios\").default;\n\nvar options = {\n  method: 'POST',\n  url: 'https://{yourDomain}/api/v2/users/USER_ID/permissions',\n  headers: {\n    'content-type': 'application/json',\n    authorization: 'Bearer MGMT_API_ACCESS_TOKEN',\n    'cache-control': 'no-cache'\n  },\n  data: {\n    permissions: [\n      {\n        resource_server_identifier: 'API_IDENTIFIER',\n        permission_name: 'PERMISSION_NAME'\n      },\n      {\n        resource_server_identifier: 'API_IDENTIFIER',\n        permission_name: 'PERMISSION_NAME'\n      }\n    ]\n  }\n};\n\naxios.request(options).then(function (response) {\n  console.log(response.data);\n}).catch(function (error) {\n  console.error(error);\n});\n```\n\n```\n#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\",\n                           @\"authorization\": @\"Bearer MGMT_API_ACCESS_TOKEN\",\n                           @\"cache-control\": @\"no-cache\" };\nNSDictionary *parameters = @{ @\"permissions\": @[ @{ @\"resource_server_identifier\": @\"API_IDENTIFIER\", @\"permission_name\": @\"PERMISSION_NAME\" }, @{ @\"resource_server_identifier\": @\"API_IDENTIFIER\", @\"permission_name\": @\"PERMISSION_NAME\" } ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://{yourDomain}/api/v2/users/USER_ID/permissions\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];\n```\n\n```\n$curl = curl_init();\n\ncurl_setopt_array($curl, [\n  CURLOPT_URL => \"https://{yourDomain}/api/v2/users/USER_ID/permissions\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\",\n  CURLOPT_HTTPHEADER => [\n    \"authorization: Bearer MGMT_API_ACCESS_TOKEN\",\n    \"cache-control: no-cache\",\n    \"content-type: application/json\"\n  ],\n]);\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}\n```\n\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"\")\n\npayload = \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'authorization': \"Bearer MGMT_API_ACCESS_TOKEN\",\n    'cache-control': \"no-cache\"\n    }\n\nconn.request(\"POST\", \"/{yourDomain}/api/v2/users/USER_ID/permissions\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n```\nrequire 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://{yourDomain}/api/v2/users/USER_ID/permissions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"authorization\"] = 'Bearer MGMT_API_ACCESS_TOKEN'\nrequest[\"cache-control\"] = 'no-cache'\nrequest.body = \"{ \\\"permissions\\\": [ { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" }, { \\\"resource_server_identifier\\\": \\\"API_IDENTIFIER\\\", \\\"permission_name\\\": \\\"PERMISSION_NAME\\\" } ] }\"\n\nresponse = http.request(request)\nputs response.read_body\n```\n\n```\nimport Foundation\n\nlet headers = [\n  \"content-type\": \"application/json\",\n  \"authorization\": \"Bearer MGMT_API_ACCESS_TOKEN\",\n  \"cache-control\": \"no-cache\"\n]\nlet parameters = [\"permissions\": [\n    [\n      \"resource_server_identifier\": \"API_IDENTIFIER\",\n      \"permission_name\": \"PERMISSION_NAME\"\n    ],\n    [\n      \"resource_server_identifier\": \"API_IDENTIFIER\",\n      \"permission_name\": \"PERMISSION_NAME\"\n    ]\n  ]] as [String : Any]\n\nlet postData = JSONSerialization.data(withJSONObject: parameters, options: [])\n\nlet request = NSMutableURLRequest(url: NSURL(string: \"https://{yourDomain}/api/v2/users/USER_ID/permissions\")! as URL,\n                                        cachePolicy: .useProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.httpMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.httpBody = postData as Data\n\nlet session = URLSession.shared\nlet dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    print(error)\n  } else {\n    let httpResponse = response as? HTTPURLResponse\n    print(httpResponse)\n  }\n})\n\ndataTask.resume()\n```",
  "title": "Assign Permissions to Users",
  "description": "Learn how to assign permissions to a user using the Auth0 Dashboard or the Management API.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/libraries/auth0-swift/auth0-swift-user-management",
  "markdown": "# Auth0.swift: User Management\n\nThe Management API provides [User Account Linking](https://auth0.com/docs/manage-users/user-accounts/user-account-linking), which allows you to link and unlink separate user accounts from different providers, tying them to a single profile. It also allows you to update user metadata and other profile information.\n\n## Link users\n\nLinking user accounts will allow a user to authenticate from any of their accounts and, no matter which one they use, still pull up the same profile upon login. Auth0 treats all of these accounts as separate profiles by default, so if you wish for a user's accounts to be linked, this is the way to go.\n\nThe `link` method accepts two parameters: the primary profile's user ID and the secondary profile's Access Token (the token obtained after login with this identity). The user ID in question is the unique identifier for this user account. If the ID is in the format `facebook|1234567890`, the ID required is the portion after the delimiting pipe (in this case, `1234567890`).\n\n```\nAuth0\n   .users(token: \"user-scoped access token\")\n   .link(userId, withOtherUserToken: \"another user token\")\n   .start { result in\n      switch result {\n      case .success(let userInfo):\n        print(\"User: \\(userInfo)\")\n      case .failure(let error):\n        print(error)\n      }\n   }\n```\n\n## Unlink users\n\nUnlinking users is a similar process to linking users. The `unlink` method takes three parameters: the secondary profile's user ID, the secondary profile's provider (the connection's identity provider), and the primary profile's user ID. The parameters read, essentially: \"Unlink this **secondary user** (with this **provider**) from this **primary user**\".\n\n```\nAuth0\n   .users(token: \"user-scoped access token\")\n   .unlink(identityId: identifier, provider: provider, fromUserId:userId)\n   .start { result in\n      switch result {\n      case .success(let userInfo):\n        print(\"User: \\(userInfo)\")\n      case .failure(let error):\n        print(error)\n      }\n   }\n```\n\nWhen accounts are linked, the metadata from the secondary account's profile is not merged with the metadata from the primary account's profile. Similarly, when unlinking accounts, the secondary account's profile does not retain metadata from the primary account's profile.\n\n## Retrieve user metadata\n\n```\nAuth0\n    .users(token: \"user-scoped access token\")\n    .get(userId, fields: [\"user_metadata\"], include: true)\n    .start { result in\n        switch result {\n        case .success(let userInfo):\n            print(\"User: \\(userInfo)\")\n        case .failure(let error):\n            print(error)\n        }\n    }\n```\n\n## Update user metadata\n\nWhen updating user metadata, you will create a `userMetadata` object and then call the `patch` method, passing it the user ID and the `userMetadata` object. The values in this object will overwrite existing values with the same key, or add new ones for those that don't yet exist in the user metadata.\n\n```\nAuth0\n    .users(token: \"user-scoped access token\")\n    .patch(\"user identifier\", userMetadata: [\"first_name\": \"John\", \"last_name\": \"Doe\"])\n    .start { result in\n        switch result {\n        case .success(let userInfo):\n          print(\"User: \\(userInfo)\")\n        case .failure(let error):\n          print(error)\n        }\n    }\n```",
  "title": "Auth0.swift: User Management",
  "description": "User Management with Auth0.Swift",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/libraries/lock/lock-authentication-modes",
  "markdown": "# Lock Authentication Modes\n\nLock can function in two different modes. The default mode is **redirect mode**. In this mode, your user is redirected to be authenticated, and then is returned to the application. In the second mode, **popup mode**, a popup window allows the user to authenticate with the identity provider without leaving the application.\n\n## Redirect Mode\n\nWhen you click the IdP button (For example, Facebook) with redirect mode, you are redirected to Facebook momentarily. Redirect mode is the default with Lock, and is the recommended mode for almost all use cases. Once you successfully login (to Facebook, in this example), Facebook will redirect you back to your app (through Auth0). The majority of examples or samples in the reference documentation employ redirect mode.\n\nIf after you click on the IdP button (Facebook for example), a popup (new tab or window) is opened, it means you are using popup mode. In that popup, you'll see that Facebook page is displayed. Once you successfully login to Facebook, the popup will be closed and your web app will recognize that the user has been authenticated. The web app has **never been redirected to any other page**.\n\nImplementing Lock with Popup Mode is again a simple change of the `redirect` option from its default.\n\nto configure this snippet with your account\n\n```\nvar lock = new Auth0Lock(\n  '{yourClientId}',\n  '{yourDomain}',\n  {\n    auth: {\n      redirect: false\n    }\n  }\n);\n```\n\nMulti-factor authentication (MFA) is not supported when Lock is in popup mode and embedded in your application. Additionally, popup mode does not work with Universal Login.\n\nSome Auth0 features, such as [Single Sign-on (SSO)](https://auth0.com/docs/authenticate/single-sign-on) between multiple applications, depend on users being redirected to Auth0 to set a cookie on `'{yourDomain}'`.\n\nWhen using popup mode, a popup window will be displayed in order to set this cookie. If prompts are unnecessary, this popup window will be blank and be in a hidden iframe to minimize disruption. The reason for this is that cross-origin requests sent from your application to Auth0 are not be able to set cookies.\n\nIf you do not want to display a popup window and do not need SSO between multiple applications, you can set `sso: false` when using Lock or auth0.js.\n\n```\nvar options = {\n  auth: {\n    sso: false\n  }\n}\n```",
  "title": "Lock Authentication Modes",
  "description": "Details about Authentication Modes with Lock.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-filter-hook",
  "markdown": "# Delegated Administration: Filter Hook\n\nBy default, users with the **Delegated Admin - User** role see all users associated with the Auth0 account. However, you can filter the data users see using the **Filter Hook**.\n\n## Hook contract\n\n*   **ctx**: Context object.\n    \n*   **callback(error, query)**: Callback to which you can return an error or the lucene query used when filtering the users. The extension will send this query to the [**Get Users** endpoint](https://auth0.com/docs/api/management/v2#!/Users/get_users) of the Management API.\n    \n\nTo learn more about the lucene query, review [User Search Query Syntax](https://auth0.com/docs/manage-users/user-search/user-search-query-syntax).\n\n### Sample use\n\nIf Kelly manages the Finance department, she should only see the users that are also part of the Finance department. We'll filter the users with respect to the department of the current user (which, in this case, is the Finance department and Kelly, respectively).\n\n```\nfunction(ctx, callback) {\n  // Get the department from the current user's metadata.\n  var department = ctx.request.user.app_metadata && ctx.request.user.app_metadata.department;\n  if (!department || !department.length) {\n    return callback(new Error('The current user is not part of any department.'));\n  }\n\n  // The IT department can see all users.\n  if (department === 'IT') {\n    return callback();\n  }\n\n  // Return the lucene query.\n  return callback(null, 'app_metadata.department:\"' + department + '\"');\n}\n```\n\n### Search engine override\n\nYou can override the default search engine by specifying your choice in the response.\n\n```\n// Return the lucene query.\nreturn callback(null, { query: 'app_metadata.department:\"' + department + '\"', searchEngine: 'v2' });\n```\n\n## Notes\n\nDo not use single quotes, double quotes, or any other special characters (such as **+** or **\\-**) in terms on which you'll want to filter. This may cause issues with the Lucene query.\n\nIf you use multiple operators like OR, NOT, or AND, use wrap those search parameters in parentheses \\[`()`\\] to delineate which operator is in effect where.\n\nIf you do not configure this Hook, the search returns **all users**.\n\n## Learn more\n\n*   [Delegated Administration: Access Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-access-hook)\n*   [Delegated Administration: Memberships Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-memberships-query-hook)\n*   [Delegated Administration: Settings Query Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-settings-query-hook)\n*   [Delegated Administration: Write Hook](https://auth0.com/docs/customize/extensions/delegated-administration-extension/delegated-administration-hooks/delegated-administration-write-hook)",
  "title": "Delegated Administration: Filter Hook",
  "description": "Learn how to use the Filter Hook with the Delegated Administration Extension.",
  "languageCode": null
},
{
  "url": "https://auth0.com/docs/get-started/architecture-scenarios/multiple-organization-architecture/single-identity-provider-organizations/logout",
  "markdown": "# Single Identity Provider: Logout\n\nTerminating an authenticated session when it's no longer needed, otherwise known as Logout, is a good practice when it comes to security hygiene. Providing logout capability helps mitigate a number of potential security issues, including the likelihood that unauthorized parties can \"take over\" a session. In our architecture scenarios, we provide general purpose guidance on [B2B Logout](https://auth0.com/docs/get-started/architecture-scenarios/business-to-business/logout), which we recommend reviewing alongside the guidance provided here. For this scenario, Logout is almost identical to logout in any other system, so it will have the same level of complexity as described in our standard documentation.\n\n## Database Connection\n\nUsing our Hoekstra & Associates example, the following diagram illustrates the flow typically encountered when dealing with a user authenticated via an Auth0 Database Connection. Let’s walk through this flow to see what occurs; note that most of the workflow described will typically be handled by using the relevant Auth0 SDK or library associated with your technology stack:\n\n![Architecture Scenarios - MOA - Isolated Users, Shared Apps, Logout Flow](https://images.ctfassets.net/cdy7uua7fh8z/5fQIKm5Izpy4zKw7ZsZoAE/e3661e2fa3e5bcd2258cfb6ef895f161/Isolated_Users__Shared_Apps__Logout_Flow__1_.png)\n\n1.  Jennifer clicks `logout`.\n    \n2.  Hoekstra & Associates' Instance of Travel0 Corporate Booking redirects the browser to the Travel0 Auth0 Tenant at [https://auth.travel0.net](https://auth.travel0.net/) with the following parameters:\n    \n    1.  `returnTo`: [`https://hoekstra.corp.travel0.net/logoutComplete`](https://hoekstra.corp.travel0.net/logoutComplete)\n        \n    2.  `client_id`: Client ID associated with the Application created in the Travel0 Auth0 Tenant for the Hoekstra & Associates instance of Travel0 Corporate Booking.\n        \n3.  The Travel0 Auth0 Tenant terminates the Auth0 session established on behalf of the user, removing any SSO information, and redirects the browser to the specified `returnTo` URL.\n    \n4.  The Hoekstra & Associates Instance of Travel0 Corporate Booking renders a page to let Jennifer know that she successfully logged out, likely with a button to log back in if desired.\n    \n    1.  At this stage, the Travel0 Corporate Booking instance will typically want to clean up the application session associated with the user, too.\n        \n\n## Enterprise Connection\n\nFor this scenario, implementing Logout can be a little more complex than it is when using a Database Connection. You still have the option to either logout from only the application or to have logout from the application result in logout from the Auth0 Tenant, too. However, you may also have the option of allowing logout from the organization’s Identity Provider (IdP), which most applications avoid, especially if users have access to other corporate applications to which they may need to stay logged in. Avoiding this, however, may result in users who subsequently click the `login` button being authenticated automatically without interactively providing first-factor credentials. Such functionality may make for an unexpected user experience, so you should consider communicating this to the user.\n\nUsing our MetaHexa Bank example, let's see how this Logout implementation might flow with a user authenticated via an Enterprise Connection to MetaHexa Bank; again, most of the workflow described will typically be handled by using the relevant Auth0 SDK or library associated with your technology stack:\n\n![Architecture Scenarios - MOA - Isolated Users, Shared Apps, Enterprise Logout Flow](https://images.ctfassets.net/cdy7uua7fh8z/36ulIzcfP3GIymWql7SDW2/b350f739f26644364400330fce0a604c/Isolated_Users__Shared_Apps__Enterprise_Logout_Flow__1_.png)\n\n1.  Amintha clicks `logout`.\n    \n2.  MetaHexa Bank's Instance of Travel0 Corporate Booking redirects the browser to the Travel0 Auth0 Tenant at [https://auth.travel0.net](https://auth.travel0.net/) with the following parameters: \n    \n    1.  `returnTo`: [`https://metahexa.corp.travel0.net/logoutComplete`](https://metahexa.corp.travel0.net/logoutComplete)\n        \n    2.  `client_id`: Client ID associated with the Application created in the Travel0 Auth0 Tenant for the MetaHexa Bank instance of Travel0 Corporate Booking.\n        \n    3.  `federated`:  Optional parameter used to log the user out of the MetaHexa Bank IdP. When specified, the browser is redirected to the `/logout` endpoint associated with the MetaHexa Bank IdP, which terminates the user’s session before redirecting the browser back to the Travel0 Auth0 Tenant.\n        \n\nSteps 3 and 4 will match those described in the [Database Connection](#database-connection) scenario, but will use Amintha in place of Jennifer and MetaHexa Bank (`metahexa.corp.travel0.net`) in place of Hoekstra & Associates.\n\nIn the context of Social Connections, Logout follows a similar pattern to that associated with an [Enterprise Connection](#enterprise-connection), but the upstream IdP is associated with the social provider rather than any specific organization. You will almost certainly never want to leverage federated logout capability with a social provider because the resulting user experience would be too disruptive.",
  "title": "Single Identity Provider: Logout",
  "description": "Learn about logging users out for Organizations in multi-tenant architectures.",
  "languageCode": null
}]