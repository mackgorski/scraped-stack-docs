[
  {
    "url": "https://storybook.js.org/docs",
    "markdown": "# StorybookChromatic\n\nWelcome to Storybook's documentation ✦ Learn how to get started with Storybook in your project. Then, explore Storybook's main concepts and discover additional resources to help you grow and maintain your Storybook.\n\n## [What is Storybook?](#what-is-storybook)\n\nStorybook is a frontend workshop for building UI components and pages in isolation. It helps you develop and share hard-to-reach states and edge cases without needing to run your whole app. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.\n\n## [Install Storybook](#install-storybook)\n\nStorybook is a standalone tool that runs alongside your app. It's a zero-config environment that works with any modern frontend framework. You can install Storybook into an existing project or create a new one from scratch.\n\n```\nnpx storybook@latest init\n```\n\nWant to know more about installing Storybook? Check out the [installation guide](https://storybook.js.org/docs/get-started/install).\n\n## [Main concepts](#main-concepts)\n\nStorybook is a powerful tool that can help you with many aspects of your UI development workflow. Here are some of the main concepts to get you started.\n\n## [Additional resources](#additional-resources)\n\nOnce you've learned the basics, explore these other ways to get the most out of Storybook.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/contribute/roadmap",
    "markdown": "# StorybookChromatic\n\nThe Storybook team maintains a [public roadmap](https://github.com/orgs/storybookjs/projects/20/views/1) in the form of a GitHub project. This page explains what's in the roadmap, how to interpret it, and how to contribute to it.\n\n## [What's in the roadmap?](#whats-in-the-roadmap)\n\nEach card represents a Storybook project. The columns represent how larger changes make their way from idea to shipped feature. Projects typically start as an [Request for Comment (RFC)](https://storybook.js.org/docs/contribute/RFC), then evolve into a [tracking issue](https://github.com/storybookjs/storybook/issues?q=is%3Aissue++sort%3Aupdated-desc+label%3ATracking+) once the team has fully scoped what it entails. We ship a Storybook [minor version](https://semver.org/) every eight weeks, and a major version once per year, typically in Feb/Mar.\n\n### [Candidates](#candidates)\n\nThese cards are ideas on our radar that we are considering for the current major release. For example, if `8.0` is the most recent major version, these would be ideas for `8.x` or `9.0`. The ideas in this column are the fuzziest and may come and go depending on our priorities.\n\n### [Under consideration](#under-consideration)\n\nThese are projects being discussed for the next dev cycle. For example, if the most recent minor version is `8.1`, and we are currently working on `8.2`, the projects in this column would be under consideration for `8.3`. Unlike the candidates column, which can contain any idea, the projects under consideration must be documented with an [RFC](https://storybook.js.org/docs/contribute/RFC).\n\n### [In progress](#in-progress)\n\nThese are projects that we are currently working on. There are two kinds of projects in this column:\n\n1.  **[Tracking issues](https://github.com/storybookjs/storybook/issues?q=is%3Aissue++sort%3Aupdated-desc+label%3ATracking+)**: Fully scoped projects expected to ship in the next minor release. For example, if the most recent minor is `8.1`, these should ship in `8.2`, eight weeks after `8.1`.\n2.  **Other projects**: Community projects facilitated by the core team and side projects. These don't have an ETA but we will push to have them ready as part of the current major. For example, if `8.0` is the most recent major version, these should ship in `8.x` or `9.0`.\n\n### [Done](#done)\n\nThese projects are completed, documented, and released. We follow a \"fixed time, variable scope\" policy for core projects, which means we scope a project into milestones to provide the most value to users as early as possible and cut scope if necessary to ship on time. If a feature has been scoped out of a project, we might try to fit it into a follow-up project, treat it as general maintenance work, or forget about it. Storybook is open source, so PR contributions are always welcome!\n\n## [Frequently asked questions](#frequently-asked-questions)\n\n### [When will project X be available?](#when-will-project-x-be-available)\n\nThis roadmap is an estimation, not a commitment. In general, every tracking issue \"in progress\" should be available in the next two months. Everything else on the board has a decent chance of getting into the next major release. For example, if `8.0` is the most recent major release, we will try to ship everything on the board as part of `8.x` or `9.0`. If we don't think a project is likely for the next major, we will kick it off the board.\n\n### [What about issue Y or discussion Z?](#what-about-issue-y-or-discussion-z)\n\nThe Storybook core team and our community members continuously contribute bug fix bugs and smaller product improvements. The projects here are larger chunks of work. In some cases they may close out certain issues, and when possible we will call those out in the RFC or project tracking issue.\n\n### [How do I get something onto the board?](#how-do-i-get-something-onto-the-board)\n\nIf there's a significant product improvement that you want to see, and there is currently an issue or an [RFC](https://storybook.js.org/docs/contribute/RFC) for it, upvote that issue/discussion, and comment on it with more information about your need or use case if it's not currently captured. If you don't see anything that's quite right, please feel free to [submit an RFC](https://github.com/storybookjs/storybook/discussions/new?category=rfc). We prioritize based on a combination of user/contributor interest (upvotes, comments, [Discord](https://discord.gg/storybook) conversations, etc.) and our own strategic ambitions for the project.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/faq",
    "markdown": "# StorybookChromatic\n\nHere are some answers to frequently asked questions. If you have a question, you can ask it in our [GitHub discussions](https://github.com/storybookjs/storybook/discussions/new?category=help).\n\n## [Error: No angular.json file found](#error-no-angularjson-file-found)\n\nStorybook can be set up for both single-project and multi-project Angular workspaces. To set up Storybook for a project, run `npx storybook@latest init` at the root of the workspace where the `angular.json` file is located. During initialization, the `.storybook` folder will be created and the `angular.json` file will be edited to add the Storybook configuration for the selected project. It's important to run the command at the root level to ensure that Storybook detects all projects correctly.\n\n## [How can I opt-out of Angular Ivy?](#how-can-i-opt-out-of-angular-ivy)\n\nIn case you are having trouble with Angular Ivy you can deactivate it in your `main.js`:\n\n## [How can I opt-out of Angular ngcc?](#how-can-i-opt-out-of-angular-ngcc)\n\nIn case you postinstall ngcc, you can disable it:\n\nPlease report any issues related to Ivy in our [GitHub Issue Tracker](https://github.com/storybookjs/storybook/labels/app%3A%20angular) as the support for View Engine will be dropped in a future release of Angular.\n\n## [How can I run coverage tests with Create React App and leave out stories?](#how-can-i-run-coverage-tests-with-create-react-app-and-leave-out-stories)\n\nCreate React App does not allow providing options to Jest in your `package.json`, however you can run `jest` with commandline arguments:\n\nIf you're using [`Yarn`](https://yarnpkg.com/) as a package manager, you'll need to adjust the command accordingly.\n\nYou can generally reuse Webpack rules by placing them in a file that is `require()`\\-ed from both your `next.config.js` and your `.storybook/main.js` files. For example:\n\n## [How do I fix module resolution in special environments?](#how-do-i-fix-module-resolution-in-special-environments)\n\nIn case you are using [Yarn Plug-n-Play](https://yarnpkg.com/features/pnp) or your project is set up within a mono repository environment, you might run into issues with module resolution similar to this when running Storybook:\n\nTo fix this, you can wrap the package name inside your Storybook configuration file (i.e., `.storybook/main.js|ts`) as follows:\n\n## [How do I setup the new React Context Root API with Storybook?](#how-do-i-setup-the-new-react-context-root-api-with-storybook)\n\nIf your installed React Version equals or is higher than 18.0.0, the new React Root API is automatically used and the newest React [concurrent features](https://reactjs.org/docs/concurrent-mode-intro.html) can be used.\n\nYou can opt-out from the new React Root API by setting the following property in your `.storybook/main.js` file:\n\n## [Why is there no addons channel?](#why-is-there-no-addons-channel)\n\nA common error is that an addon tries to access the \"channel\", but the channel is not set. It can happen in a few different cases:\n\n1.  You're trying to access addon channel (e.g., by calling `setOptions`) in a non-browser environment like Jest. You may need to add a channel mock:\n    \n2.  In React Native, it's a special case documented in [#1192](https://github.com/storybookjs/storybook/issues/1192)\n    \n\n## [Why aren't Controls visible in the Canvas panel but visible in Docs?](#why-arent-controls-visible-in-the-canvas-panel-but-visible-in-docs)\n\nIf you're adding Storybook's dependencies manually, make sure you include the [`@storybook/addon-controls`](https://www.npmjs.com/package/@storybook/addon-controls) dependency in your project and reference it in your `.storybook/main.js` as follows:\n\n## [Why aren't the addons working in a composed Storybook?](#why-arent-the-addons-working-in-a-composed-storybook)\n\nComposition is a new feature that we released with version 6.0, and there are still some limitations to it.\n\nFor now, the addons you're using in a composed Storybook will not work.\n\nWe're working on overcoming this limitation, and soon you'll be able to use them as if you are working with a non-composed Storybook.\n\n## [Can I have a Storybook with no local stories?](#can-i-have-a-storybook-with-no-local-stories)\n\nStorybook does not work unless you have at least one local story (or docs page) defined in your project. In this context, local means a `.stories.*` or `.mdx` file that is referenced in your project's `.storybook/main.js` config.\n\nIf you're in a [Storybook composition](https://storybook.js.org/docs/sharing/storybook-composition) scenario, where you have multiple Storybooks, and want to have an extra Storybook with no stories of its own, that serves as a \"glue\" for all the other Storybooks in a project for demo/documentation purposes, you can do the following steps:\n\nIntroduce a single `.mdx` docs page (addon-essentials or addon-docs required), that serves as an Introduction page, like so:\n\nAnd then refer to it in your Storybook config file:\n\nStarting with Storybook version 6.0, we've introduced some great features aimed at streamlining your development workflow.\n\nWith this, we would like to point out that if you plan on using addons created by our fantastic community, you need to consider that some of those addons might be working with an outdated version of Storybook.\n\nWe're actively working to provide a better way to address this situation, but in the meantime, we'd like to ask for a bit of caution on your end so that you don't run into unexpected problems. Let us know by leaving a comment in the following [GitHub issue](https://github.com/storybookjs/storybook/issues/26031) so that we can gather information and expand the current list of addons that need to be updated to work with the latest version of Storybook.\n\n## [Is it possible to browse the documentation for past versions of Storybook?](#is-it-possible-to-browse-the-documentation-for-past-versions-of-storybook)\n\nWith the release of version 6.0, we updated our documentation as well. That doesn't mean that the old documentation was removed. We kept it to help you with your Storybook migration process. Use the content from the table below in conjunction with our [migration guide](https://github.com/storybookjs/storybook/blob/next/MIGRATION.mdx).\n\nWe're only covering versions 5.3 and 5.0 as they were important milestones for Storybook. If you want to go back in time a little more, you'll have to check the specific release in the monorepo.\n\n| Section | Page | Current Location | Version 5.3 location | Version 5.0 location |\n| --- | --- | --- | --- | --- |\n| N/A | Why Storybook | [See current documentation](https://storybook.js.org/docs/get-started/why-storybook) | Non existing feature or undocumented | Non existing feature or undocumented |\n| Get started | Install | [See current documentation](https://storybook.js.org/docs/get-started/install) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/guides/quick-start-guide) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/guides/quick-start-guide) |\n|     | What's a story | [See current documentation](https://storybook.js.org/docs/get-started/whats-a-story) | [See versioned documentation for your framework](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/guides) | [See versioned documentation for your framework](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/guides) |\n|     | Browse Stories | [See current documentation](https://storybook.js.org/docs/get-started/browse-stories) | [See versioned documentation for your framework](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/guides) | [See versioned documentation for your framework](https://github.com/storybookjs/storybook/blob/release/5.0/docs/src/pages/guides) |\n|     | Setup | [See current documentation](https://storybook.js.org/docs/get-started/setup) | [See versioned documentation for your framework](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/guides) | [See versioned documentation for your framework](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/guides) |\n| Write stories | Introduction | [See current documentation](https://storybook.js.org/docs/writing-stories) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/basics/writing-stories) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/basics/writing-stories) |\n|     | Parameters | [See current documentation](https://storybook.js.org/docs/writing-stories/parameters) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/basics/writing-stories/index.md#parameters) | Non existing feature or undocumented |\n|     | Decorators | [See current documentation](https://storybook.js.org/docs/writing-stories/decorators) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/basics/writing-stories/index.md#decorators) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/basics/writing-stories/index.md#using-decorators) |\n|     | Naming components and hierarchy | [See current documentation](https://storybook.js.org/docs/writing-stories/naming-components-and-hierarchy) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/basics/writing-stories) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/basics/writing-stories) |\n|     | Build pages and screens | [See current documentation](https://storybook.js.org/docs/writing-stories/build-pages-with-storybook) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | Stories for multiple components | [See current documentation](https://storybook.js.org/docs/writing-stories/stories-for-multiple-components) | Non existing feature or undocumented | Non existing feature or undocumented |\n| Write docs | Autodocs | [See current documentation](https://storybook.js.org/docs/writing-docs/autodocs) | See versioned addon documentation | Non existing feature or undocumented |\n|     | MDX | [See current documentation](https://storybook.js.org/docs/writing-docs/mdx) | See versioned addon documentation | Non existing feature or undocumented |\n|     | Doc Blocks | [See current documentation](https://storybook.js.org/docs/writing-docs/doc-blocks) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | Preview and build docs | [See current documentation](https://storybook.js.org/docs/writing-docs/build-documentation) | Non existing feature or undocumented | Non existing feature or undocumented |\n| Testing | Visual tests | [See current documentation](https://storybook.js.org/docs/writing-tests/visual-testing) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/testing/automated-visual-testing) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/testing/automated-visual-testing) |\n|     | Accessibility tests | [See current documentation](https://storybook.js.org/docs/writing-tests/accessibility-testing) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | Interaction tests | [See current documentation](https://storybook.js.org/docs/writing-tests/interaction-testing) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/testing/interaction-testing) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/testing/interaction-testing) |\n|     | Snapshot tests | [See current documentation](https://storybook.js.org/docs/writing-tests/snapshot-testing/snapshot-testing) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/testing/structural-testing) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/testing/structural-testing) |\n|     | Import stories in tests/Unit tests | [See current documentation](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/testing/react-ui-testing) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/testing/react-ui-testing) |\n|     | Import stories in tests/End-to-end testing | [See current documentation](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/testing/react-ui-testing) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/testing/react-ui-testing) |\n| Sharing | Publish Storybook | [See current documentation](https://storybook.js.org/docs/sharing/publish-storybook) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/basics/exporting-storybook) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/basics/exporting-storybook) |\n|     | Embed | [See current documentation](https://storybook.js.org/docs/sharing/embed) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | Composition | [See current documentation](https://storybook.js.org/docs/sharing/storybook-composition) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | Package Composition | [See current documentation](https://storybook.js.org/docs/sharing/package-composition) | Non existing feature or undocumented | Non existing feature or undocumented |\n| Essential addons | Controls | [See current documentation](https://storybook.js.org/docs/essentials/controls) | Controls are specific to version 6.0 see [Knobs versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/addons/knobs) | Controls are specific to version 6.0 see [Knobs versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/addons/knobs) |\n|     | Actions | [See current documentation](https://storybook.js.org/docs/essentials/actions) | [See addon versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/addons/actions) | [See addon versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/addons/actions) |\n|     | Viewport | [See current documentation](https://storybook.js.org/docs/essentials/viewport) | [See addon versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/addons/viewport) | [See addon versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/addons/viewport) |\n|     | Backgrounds | [See current documentation](https://storybook.js.org/docs/essentials/backgrounds) | [See addon versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/addons/backgrounds) | [See addon versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/addons/backgrounds) |\n|     | Toolbars and globals | [See current documentation](https://storybook.js.org/docs/essentials/toolbars-and-globals) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/basics/toolbar-guide) | Non existing feature or undocumented |\n| Configure | Overview | [See current documentation](https://storybook.js.org/docs/configure) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/overview) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/basics/writing-stories) |\n|     | Integration/Frameworks | [See current documentation](https://storybook.js.org/docs/configure/integration/frameworks) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | Integration/Framework support for frameworks | [See current documentation](https://storybook.js.org/docs/configure/integration/frameworks-feature-support) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | Integration/Compilers | [See current documentation](https://storybook.js.org/docs/configure/integration/compilers) | See versioned documentation [here](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/custom-babel-config) | See versioned documentation [here](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/custom-babel-config) |\n|     | Integration/Typescript | [See current documentation](https://storybook.js.org/docs/configure/integration/typescript) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/typescript-config) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/typescript-config) |\n|     | Integration/Styling and CSS | [See current documentation](https://storybook.js.org/docs/configure/styling-and-css) | See versioned documentation | See versioned documentation |\n|     | Integration/Images and assets | [See current documentation](https://storybook.js.org/docs/configure/integration/images-and-assets) | See versioned documentation | See versioned documentation |\n|     | Story rendering | [See current documentation](https://storybook.js.org/docs/configure/story-rendering) | See versioned documentation [here](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/add-custom-head-tags) and [here](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/add-custom-body) | See versioned documentation [here](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/add-custom-head-tags) |\n|     | Story Layout | [See current documentation](https://storybook.js.org/docs/configure/story-layout) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | User Interface/Features and behavior | [See current documentation](https://storybook.js.org/docs/configure/user-interface/features-and-behavior) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/options-parameter) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/options-parameter) |\n|     | User Interface/Theming | [See current documentation](https://storybook.js.org/docs/configure/user-interface/theming) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/theming) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/theming) |\n|     | User Interface/Sidebar & URLS | [See current documentation](https://storybook.js.org/docs/configure/user-interface/sidebar-and-urls) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/options-parameter) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/options-parameter) |\n|     | Environment variables | [See current documentation](https://storybook.js.org/docs/configure/environment-variables) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/env-vars) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/env-vars) |\n| Builders | Introduction | [See current documentation](https://storybook.js.org/docs/builders) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | Vite | [See current documentation](https://storybook.js.org/docs/builders/vite) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | Webpack | [See current documentation](https://storybook.js.org/docs/builders/webpack) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/custom-webpack-config/index.mdx) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/custom-webpack-config/index.mdx) |\n|     | Builder API | [See current documentation](https://storybook.js.org/docs/builders/builder-api) | Non existing feature or undocumented | Non existing feature or undocumented |\n| Addons | Introduction | [See current documentation](https://storybook.js.org/docs/addons) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/addons/writing-addons) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/addons/writing-addons) |\n|     | Install addons | [See current documentation](https://storybook.js.org/docs/addons/install-addons) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/addons/using-addons/) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/addons/using-addons/) |\n|     | Writing Addons | [See current documentation](https://storybook.js.org/docs/addons/writing-addons) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/addons/writing-addons) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/addons/writing-addons) |\n|     | Writing Presets | [See current documentation](https://storybook.js.org/docs/addons/writing-presets) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/presets/writing-presets) | Non existing feature or undocumented |\n|     | Addons Knowledge Base | [See current documentation](https://storybook.js.org/docs/addons/addon-knowledge-base) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/addons/writing-addons) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/addons/writing-addons) |\n|     | Types of addons | [See current documentation](https://storybook.js.org/docs/addons/addon-types) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | Addons API | [See current documentation](https://storybook.js.org/docs/addons/addons-api) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/addons/api) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/addons/api) |\n| API | @storybook/blocks/ArgTypes | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-argtypes) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/Canvas | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-canvas) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/ColorPalette | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-colorpalette) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/Controls | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-controls) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/Description | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-description) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/IconGallery | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-icongallery) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/Markdown | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-markdown) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/Meta | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-meta) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/Primary | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-primary) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/Source | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-source) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/Stories | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-stories) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/Story | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-story) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/Subtitle | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-subtitle) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/Title | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-title) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/Typeset | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-typeset) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/Unstyled | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-unstyled) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | @storybook/blocks/useOf | [See current documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-useof) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | Stories/Component Story Format (see note below) | [See current documentation](https://storybook.js.org/docs/api/csf) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/formats/component-story-format) | Non existing feature or undocumented |\n|     | ArgTypes | [See current documentation](https://storybook.js.org/docs/api/arg-types) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/Overview | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/framework | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-framework) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/stories | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-stories) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/addons | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-addons) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/babel | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-babel) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/babelDefault | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-babel-default) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/build | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-build) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/core | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-core) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/docs | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-docs) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/env | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-env) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/features | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-features) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/indexers | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-indexers) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/logLevel | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-log-level) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/managerHead | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-manager-head) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/previewAnnotations | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-preview-annotations) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/previewBody | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-preview-body) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/previewHead | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-preview-head) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/refs | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-refs) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/staticDirs | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-static-dirs) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/swc | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-swc) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/typescript | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-typescript) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/viteFinal | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-vite-final) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | `main.js` configuration/webpackFinal | [See current documentation](https://storybook.js.org/docs/api/main-config/main-config-webpack-final) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | Frameworks | [See current documentation](https://storybook.js.org/docs/api/new-frameworks) | Non existing feature or undocumented | Non existing feature or undocumented |\n|     | CLI options | [See current documentation](https://storybook.js.org/docs/api/cli-options) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.3/docs/src/pages/configurations/cli-options) | [See versioned documentation](https://github.com/storybookjs/storybook/tree/release/5.0/docs/src/pages/configurations/cli-options) |\n\nIf you have stories written with the older `storiesOf` format, it was removed in Storybook 8.0 and is no longer maintained. We recommend that you migrate your stories to CSF. See the [migration guide](https://storybook.js.org/docs/migration-guide/index#storiesof-to-csf) for more information. However, if you need, you can still access the old `storiesOf` [documentation](https://github.com/storybookjs/storybook/blob/release/5.3/docs/src/pages/formats/storiesof-api/index.mdx) for reference.\n\nWith the [`@storybook/components`](https://www.npmjs.com/package/@storybook/components) package, you get a set of icons that you can use to customize your UI. Use the table below as a reference while writing your addon or defining your Storybook global types. Go through this [story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-icon--labels) to see how the icons look.\n\n## [I see a \"No Preview\" error with a Storybook production build](#i-see-a-no-preview-error-with-a-storybook-production-build)\n\nIf you're using the `serve` package to verify your production build of Storybook, you'll get that error. It relates to how `serve` handles rewrites. For instance, `/iframe.html` is rewritten into `/iframe`, and you'll get that error.\n\nWe recommend that you use [http-server](https://www.npmjs.com/package/http-server) instead and use the following command to preview Storybook:\n\nSuppose you don't want to run the command above frequently. Add `http-server` as a development dependency and create a new script to preview your production build of Storybook.\n\n## [Can I use Storybook with Vue 2?](#can-i-use-storybook-with-vue-2)\n\nVue 2 entered [End of Life](https://v2.vuejs.org/lts/) (EOL) on December 31, 2023, and is no longer supported by the Vue team. As a result, we've stopped supporting Vue 2 in Storybook 8 and above and will not be releasing any new versions that support it. We recommend upgrading your project to Vue 3, which Storybook fully supports. If that's not an option, you can still use Storybook with Vue 2 by installing the latest version of Storybook 7 with the following command:\n\n## [Why aren't my code blocks highlighted with Storybook MDX?](#why-arent-my-code-blocks-highlighted-with-storybook-mdx)\n\nOut of the box, Storybook provides syntax highlighting for a set of languages (e.g., Javascript, Markdown, CSS, HTML, Typescript, GraphQL) you can use with your code blocks. Currently, there's a known limitation when you try to register a custom language to get syntax highlighting. We're working on a fix for this and will update this section once it's available.\n\n## [Why aren't my MDX styles working in Storybook?](#why-arent-my-mdx-styles-working-in-storybook)\n\nWriting documentation with MDX can be troublesome, especially regarding how your code is formatted when using line breaks with code blocks. For example, this will break:\n\nBut this will work:\n\nSee the following [issue](https://github.com/mdx-js/mdx/issues/1945) for more information.\n\n## [Why are my mocked GraphQL queries failing with Storybook's MSW addon?](#why-are-my-mocked-graphql-queries-failing-with-storybooks-msw-addon)\n\nIf you're working with Vue 3, you'll need to install [`@vue/apollo-composable`](https://www.npmjs.com/package/@vue/apollo-composable). With Svelte, you'll need to install [`@rollup/plugin-replace`](https://www.npmjs.com/package/@rollup/plugin-replace) and update your `rollup.config` file to the following:\n\nWith Angular, the most common issue is the placement of the `mockServiceWorker.js` file. Use this [example](https://github.com/mswjs/examples/tree/main/examples/with-angular) as a point of reference.\n\n## [Can I use other GraphQL providers with Storybook's MSW addon?](#can-i-use-other-graphql-providers-with-storybooks-msw-addon)\n\nYes, check the [addon's examples](https://github.com/mswjs/msw-storybook-addon/tree/main/packages/docs/src/demos) to learn how to integrate different providers.\n\n## [Can I mock GraphQL mutations with Storybook's MSW addon?](#can-i-mock-graphql-mutations-with-storybooks-msw-addon)\n\nNo, currently, the MSW addon only has support for GraphQL queries. If you're interested in including this feature, open an issue in the [MSW addon repository](https://github.com/mswjs/msw-storybook-addon) and follow up with the maintainer.\n\n## [How can my code detect if it is running in Storybook?](#how-can-my-code-detect-if-it-is-running-in-storybook)\n\nYou can do this by checking for the `IS_STORYBOOK` global variable, which will equal `true` when running in Storybook. The environment variable `process.env.STORYBOOK` is also set to `true`.\n\n## [Why are my stories not showing up correctly when using certain characters?](#why-are-my-stories-not-showing-up-correctly-when-using-certain-characters)\n\nStorybook allows you to use most characters while naming your stories. Still, specific characters (e.g., `#`) can lead to issues when Storybook generates the internal identifier for the story, leading to collisions and incorrectly outputting the correct story. We recommend using such characters sparsely.\n\n## [Why is Storybook's source loader returning undefined with curried functions?](#why-is-storybooks-source-loader-returning-undefined-with-curried-functions)\n\nThis is a known issue with Storybook. If you're interested in getting it fixed, open an issue with a [working reproduction](https://storybook.js.org/docs/contribute/how-to-reproduce) so that it can be triaged and fixed in future releases.\n\n## [Why are my args no longer displaying the default values?](#why-are-my-args-no-longer-displaying-the-default-values)\n\nBefore version 6.3, unset args were set to the `argTypes.defaultValue` if specified or inferred from the component's properties (e.g., React's prop types, Angular inputs, Vue props). Starting with version 6.3, Storybook no longer infers default values but instead defines the arg's value as `undefined` when unset, allowing the framework to supply its default value.\n\nIf you are using `argTypes.defaultValue` to fix the above, you no longer need to, and you can safely remove it from your stories.\n\nAdditionally, suppose you were using `argTypes.defaultValue` or relying on inference to set a default value for an arg. In that case, you should define the arg's value at the component level instead:\n\nFor Storybook's Docs, you can manually configure the displayed value by configuring the `table.defaultValue` setting:\n\n## [Why isn't Storybook's test runner working?](#why-isnt-storybooks-test-runner-working)\n\nThere's an issue with Storybook's test runner and the latest version of Jest (i.e., version 28), which prevents it from running effectively. As a workaround, you can downgrade Jest to the previous stable version (i.e., version 27), and you'll be able to run it. See the following [issue](https://github.com/storybookjs/test-runner/issues/99) for more information.\n\n## [How does Storybook handle environment variables?](#how-does-storybook-handle-environment-variables)\n\nStorybook has built-in support for [environment variables](https://storybook.js.org/docs/configure/environment-variables). By default, environment variables are only available in Node.js code and are not available in the browser as some variables should be kept secret (e.g., API keys) and **not** exposed to anyone visiting the published Storybook.\n\nTo expose a variable, you must preface its name with `STORYBOOK_`. So `STORYBOOK_API_URL` will be available in browser code but `API_KEY` will not. Additionally you can also customize which variables are exposed by setting the [`env`](https://storybook.js.org/docs/configure/environment-variables#using-storybook-configuration) field in the `.storybook/main.js` file.\n\nVariables are set when JavaScript is compiled so when the development server is started or you build your Storybook. Environment variable files should not be committed to Git as they often contain secrets which are not safe to add to Git. Instead, add `.env.*` to your `.gitignore` file and set up the environment variables manually on your hosting provider (e.g., [GitHub](https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository)).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/contribute/how-to-reproduce",
    "markdown": "# StorybookChromatic\n\nA reproducible test case lets you isolate the cause of a problem, which is the first step towards fixing it! This page outlines how to get set up to create a reproduction.\n\n## [Why should you create a reproduction?](#why-should-you-create-a-reproduction)\n\nA reproducible test case is a great way to share a specific set of conditions that causes a bug. It allows both the maintainers and the community to verify, narrow down the cause of the problem and help you fix the issue.\n\n## [Pre-requisites](#pre-requisites)\n\nMake sure you have:\n\n*   Installed [`Yarn`](https://yarnpkg.com/) on your local development machine.\n*   A [GitHub account](https://github.com/signup) for hosting the reproduction's code.\n*   A [Chromatic account](https://www.chromatic.com/start/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook) for publishing your Storybook.\n\n## [Initial setup](#initial-setup)\n\nFirst, open a terminal and run the following command:\n\nYou can append a template name in the command to get filtered results (e.g., `npx storybook@next sandbox react`).\n\nNext, choose the template you want to work with:\n\n![Storybook reproduction generator template](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fcontribute%2Fstorybook-reproduction-generator-template.png&w=3840&q=75)\n\nFinally, enter a location for your reproduction:\n\n![Storybook reproduction location](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fcontribute%2Fstorybook-reproduction-generator-location.png&w=3840&q=75)\n\nIf you don't provide a full path for the reproduction it will be generated in the current directory.\n\nIf everything worked as it should, you should have a fully functional Storybook set up in your local environment.\n\n## [Third-party dependencies & addons](#third-party-dependencies--addons)\n\nBefore adding code, install and configure any necessary packages. For example, if you run into a problem with a CSS framework (e.g., [Tailwind](https://tailwindcss.com/)), you should install and configure it.\n\nInstall and configure any Storybook [addons](https://storybook.js.org/addons/) that relate to the issue (e.g.,`@storybook/addon-a11y`).\n\n## [Add stories](#add-stories)\n\nAny Storybook reproduction wouldn't be complete without [stories](https://storybook.js.org/docs/writing-stories). To help fix your issue faster, we encourage you to include the minimum amount of stories that will replicate your issue.\n\n## [Host](#host)\n\nWhen you've finished your work, you'll need to host your reproduction. Start by signing into GitHub.com and create a [new repository](https://github.com/new).\n\n![github repository for reproductions](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fcontribute%2Fgithub-new-repository-reproduction-optimized.png&w=3840&q=75)\n\nThen, follow GitHub's instructions to set up the repository.\n\n![github repository instructions](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fcontribute%2Fgithub-repository-steps-optimized.png&w=3840&q=75)\n\nDon't forget to replace `your-username` with your own account name.\n\n## [Publish](#publish)\n\nAn excellent way to check your reproduction is to have it deployed online. We recommend [Chromatic](https://www.chromatic.com/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook), a free publishing service created by the Storybook maintainers. It allows you to deploy and host your reproduction safely and securely in the cloud.\n\n### [Helpful resources when working with Chromatic](#helpful-resources-when-working-with-chromatic)\n\n*   [Publish Storybook](https://storybook.js.org/docs/sharing/publish-storybook)\n*   [Setup Chromatic](https://www.chromatic.com/docs/setup?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook)\n*   [Automate Chromatic with continuous integration](https://www.chromatic.com/docs/ci?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook)\n\n## [Submit the issue](#submit-the-issue)\n\nFinally, create your issue in the [Storybook issue tracker](https://github.com/storybookjs/storybook/issues/new/choose), go through the required steps, and provide a detailed description of the problem. Add the GitHub repository and [deployed reproduction](https://www.chromatic.com/docs/setup?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook#view-published-storybook) to help with the triage process.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/migration-guide",
    "markdown": "# StorybookChromatic\n\nStorybook 8 focuses on improving performance, compatibility, and stability. Key features include:\n\n*   🩻 A new visual testing workflow via [the Visual Tests addon](https://www.chromatic.com/docs/visual-tests-addon/)\n*   💨 [2-4x faster test builds](https://storybook.js.org/blog/optimize-storybook-7-6/#2-4x-faster-builds-with-thetest-flag), [25-50% faster React docgen](https://storybook.js.org/blog/optimize-storybook-7-6/#22x-faster-react-docgen), and [SWC support for Webpack projects](https://storybook.js.org/blog/optimize-storybook-7-6/#using-webpack-enable-swc)\n*   🧩 Improved framework support: you no longer need to install React as a peer dependency when using a non-React renderer\n*   🎛️ Strengthened control generation in [React](https://storybook.js.org/blog/storybook-8-beta/#major-performance-improvements) and [Vue](https://storybook.js.org/blog/first-class-vue-support-storybook-8/) projects\n*   ⚡️ Improved Vite architecture, Vitest testing, and Vite 5 support\n*   🌐 [Support for React Server Components (RSC)](https://storybook.js.org/blog/storybook-react-server-components/): our experimental solution renders async RSC in the browser and mocks Node code\n*   ✨ A refreshed desktop UI & mobile UX\n*   ➕ Much, much more\n\nThis guide is meant to help you **upgrade from Storybook 7.x to 8.0** successfully!\n\n## [Major breaking changes](#major-breaking-changes)\n\nThe rest of this guide will help you upgrade successfully, either automatically or manually. But first, there are some [breaking changes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-7x-to-800) in Storybook 8. Here are the most impactful changes you should know about before you go further:\n\n*   [`storiesOf` API has been removed](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#removal-of-storiesof-api)\n*   [`*.stories.mdx` format has been removed](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#dropping-support-for-storiesmdx-csf-in-mdx-format-and-mdx1-support)\n*   [Packages have been consolidated/removed](#package-structure-changes)\n*   [Implicit actions (from `argTypesRegex`) can no longer be used during rendering (e.g. in a play function)](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#implicit-actions-can-not-be-used-during-rendering-for-example-in-the-play-function)\n*   [`react-docgen` (instead of `react-docgen-typescript`) is the default for component analysis](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#react-docgen-component-analysis-by-default)\n*   [Storyshots has been removed](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#storyshots-has-been-removed)\n*   [Addons API introduced in Storybook 7 is now required](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#new-addons-api)\n*   Ecosystem updates\n    *   [Node 18+ is now required](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#dropping-support-for-nodejs-16)\n    *   [Next.js 13.5+ is now required](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#require-nextjs-135-and-up)\n    *   [Vue 3+ is now required](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#require-vue-3-and-up)\n    *   [Angular 15+ is now required](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#require-angular-15-and-up)\n    *   [Svelte 4+ is now required](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#require-svelte-4-and-up)\n    *   [Yarn 1 is no longer supported](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#dropping-support-for-yarn-1)\n\nIf any of these changes apply to your project, please read through the linked migration notes before continuing.\n\nIf any of these new requirements or changes are blockers for your project, we recommend to continue using Storybook 7.x.\n\nYou may wish to read the [full migration notes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-7x-to-800) before migrating. Or you can follow the instructions below and we’ll try to take care of everything for you!\n\n## [Automatic upgrade](#automatic-upgrade)\n\nTo upgrade your Storybook:\n\nThis will:\n\n1.  Determine that none of the [breaking changes](#major-breaking-changes) apply to your project\n    *   If they do, you will receive instructions on how to resolve them before continuing\n2.  Upgrade your Storybook dependencies to the latest version\n3.  Run a collection of _automigrations_, which will:\n    *   Check for common upgrade tasks\n    *   Explain the necessary changes with links to more information\n    *   Ask for approval, then perform the task on your behalf\n\n### [Common upgrade issues](#common-upgrade-issues)\n\nWhile we'll do our best to upgrade your project automatically, there is one issue worth mentioning that you might encounter during the upgrade process:\n\n#### [`storyStoreV7:false` and `storiesOf`](#storystorev7false-and-storiesof)\n\nIf you have `storyStoreV7: false` in your `.storybook/main.js`, you will need to remove it before you're able to upgrade to Storybook 8.\n\nIf you are using the `storiesOf` API (which requires `storyStoreV7: false` in Storybook 7), you will need to either [migrate your stories to CSF](https://storybook.js.org/docs/7/migration-guide#storiesof-to-csf) or use the [new indexer API to continue creating stories dynamically](https://storybook.js.org/docs/7/migration-guide#storiesof-to-dynamically-created-stories).\n\n#### [Missing `vite.config.js` file](#missing-viteconfigjs-file)\n\nIf you are using Vite, you may now need to create a `vite.config.js` file in your project root to allow newer versions of Vite to work with Storybook. Additionally, you may need to install and configure a Vite plugin for your framework. More information is available in the [full migration notes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#framework-specific-vite-plugins-have-to-be-explicitly-added).\n\n## [New projects](#new-projects)\n\nTo add Storybook to a project that isn’t currently using Storybook:\n\nThis will:\n\n1.  Figure out which renderer (React, Vue, Angular, Web Components), builder (Webpack, Vite), or meta-framework (Next.js, SvelteKit) you’re using\n2.  Install Storybook 8 and auto-configure it to mirror project settings\n\n## [Manual migrations](#manual-migrations)\n\nIn addition to the automated upgrades above, there are manual migrations that might be required to get Storybook 8 working in your project. We’ve tried to minimize this list to make it easier to upgrade. These include:\n\n### [`*.stories.mdx` to MDX+CSF](#storiesmdx-to-mdxcsf)\n\nStorybook now requires that MDX pages reference stories written in CSF, rather than the previous `.stories.mdx` hybrid approach. You can automatically convert your files using the following codemod (make sure to update the glob to fit your files):\n\nYou’ll also need to update your stories glob in `.storybook/main.js` to include the newly created .mdx and .stories.js files if it doesn’t already.\n\n#### [Known limitations](#known-limitations)\n\n*   The codemod does not remove the extracted stories from the `.stories.mdx` files. You will need to do this manually.\n\n**Note:** this migration supports the Storybook 6 [\"CSF stories with MDX docs\"](https://github.com/storybookjs/storybook/blob/6e19f0fe426d58f0f7981a42c3d0b0384fab49b1/code/addons/docs/docs/recipes.md#csf-stories-with-mdx-docs) recipe.\n\n## [Troubleshooting](#troubleshooting)\n\nThe automatic upgrade should get your Storybook into a working state. If you encounter an error running Storybook after upgrading, here’s what to do:\n\n1.  Try running the [`doctor` command](https://storybook.js.org/docs/api/cli-options#doctor) to check for common issues (such as duplicate dependencies, incompatible addons, or mismatched versions) and see suggestions for fixing them.\n2.  If you’re running `storybook` with the `dev` command, try using the `build` command instead. Sometimes `build` errors are more legible than `dev` errors!\n3.  Check [the full migration notes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-7x-to-800), which contains an exhaustive list of noteworthy changes in Storybook 8. Many of these are already handled by automigrations when you upgrade, but not all are. It’s also possible that you’re experiencing a corner case that we’re not aware of.\n4.  Search [Storybook issues on GitHub](https://github.com/storybookjs/storybook/issues). If you’re seeing a problem, there’s a good chance other people are too. If so, upvote the issue, try out any workarounds described in the comments, and comment back if you have useful info to contribute.\n5.  If there’s no existing issue, you can [file one](https://github.com/storybookjs/storybook/issues/new/choose), ideally with a reproduction attached. We’ll be on top of Storybook 8 issues as we’re stabilizing the release.\n\nIf you prefer to debug yourself, here are a few useful things you can do to help narrow down the problem:\n\n1.  Try removing all addons that are not in the `@storybook` npm namespace (make sure you don't remove the `storybook` package). Community addons that work well with 7.x might not yet be compatible with 8.0, and this is the fastest way to isolate that possibility. If you find an addon that needs to be upgraded to work with Storybook 8, please post an issue on the addon’s repository, or better yet, a pull request to upgrade it!\n2.  Another debugging technique is to bisect to older prerelease versions of Storybook to figure out which release broke your Storybook. For example, assuming that the current prerelease of Storybook is `8.0.0-beta.56`, you could set the version to `8.0.0-alpha.0` in your `package.json` and reinstall to verify that it still works (`alpha.0` should be nearly identical to `7.6.x`). If it works, you could then try `8.0.0-beta.0`, then `8.0.0-beta.28` and so forth. Once you’ve isolated the bad release, read through its [CHANGELOG](https://github.com/storybookjs/storybook/blob/next/CHANGELOG.mdx) entry and perhaps there’s a change that jumps out as the culprit. If you find the problem, please submit an issue or pull request to the Storybook monorepo and we’ll do our best to take care of it quickly.\n\n## [Package structure changes](#package-structure-changes)\n\nThe following packages are **removed**. See the [full migration notes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#removed-deprecated-shim-packages) for details.\n\n| Removal | Replacement |\n| --- | --- |\n| `@storybook/addons` | `@storybook/manager-api` or `@storyboook/preview-api` |\n| `@storybook/channel-postmessage` | `@storybook/channels` |\n| `@storybook/channel-websocket` | `@storybook/channels` |\n| `@storybook/client-api` | `@storybook/preview-api` |\n| `@storybook/core-client` | `@storybook/preview-api` |\n| `@storybook/preview-web` | `@storybook/preview-api` |\n| `@storybook/store` | `@storybook/preview-api` |\n| `@storybook/api` | `@storybook/manager-api` |\n\nThe following packages are **deprecated**. See the [full migration notes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#deprecated-storybooktesting-library-package) for details.\n\n| Deprecation | Replacement |\n| --- | --- |\n| `@storybook/testing-library` | `@storybook/test` |\n\n## [Optional migrations](#optional-migrations)\n\nIn addition to the automigrations and manual migrations above, there are also optional migrations that you should consider. These are features that we’ve deprecated in Storybook 8 (but remain backwards compatible), or best practices that should help you be more productive in the future.\n\n### [CSF 2 to CSF 3](#csf-2-to-csf-3)\n\nThere are [many good reasons](https://storybook.js.org/blog/storybook-csf3-is-here) to convert your stories from CSF 2 to CSF 3. We provide a codemod which, in most cases, should automatically make the code changes for you (make sure to update the glob to fit your files):",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/migration-guide/from-older-version",
    "markdown": "# StorybookChromatic\n\nStorybook 8 focuses on improving performance, compatibility, and stability. Key features include:\n\n*   🩻 A new visual testing workflow via [the Visual Tests addon](https://www.chromatic.com/docs/visual-tests-addon/)\n*   💨 [2-4x faster test builds](https://storybook.js.org/blog/optimize-storybook-7-6/#2-4x-faster-builds-with-thetest-flag), [25-50% faster React docgen](https://storybook.js.org/blog/optimize-storybook-7-6/#22x-faster-react-docgen), and [SWC support for Webpack projects](https://storybook.js.org/blog/optimize-storybook-7-6/#using-webpack-enable-swc)\n*   🧩 Improved framework support: you no longer need to install React as a peer dependency when using a non-React renderer\n*   🎛️ Strengthened control generation in [React](https://storybook.js.org/blog/storybook-8-beta/#major-performance-improvements) and [Vue](https://storybook.js.org/blog/first-class-vue-support-storybook-8/) projects\n*   ⚡️ Improved Vite architecture, Vitest testing, and Vite 5 support\n*   🌐 [Support for React Server Components (RSC)](https://storybook.js.org/blog/storybook-react-server-components/): our experimental solution renders async RSC in the browser and mocks Node code\n*   ✨ A refreshed desktop UI & mobile UX\n*   ➕ Much, much more\n\nThis guide is meant to help you **upgrade from Storybook 6.x to 8.0** successfully!\n\n## [Major breaking changes](#major-breaking-changes)\n\nThe rest of this guide will help you upgrade successfully, either automatically or manually. But first, we’ve accumulated a lot of breaking changes in both [Storybook 7](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#70-breaking-changes) and [Storybook 8](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-7x-to-800). Here are the most impactful changes you should know about before you go further:\n\n*   [`framework` field is now mandatory](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#new-framework-api)\n*   [Start and build CLI binaries removed](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#start-storybook--build-storybook-binaries-removed)\n*   [`storiesOf` API has been removed](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#removal-of-storiesof-api)\n*   [`*.stories.mdx` format has been removed](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#dropping-support-for-storiesmdx-csf-in-mdx-format-and-mdx1-support)\n*   [Packages have been consolidated/removed](#package-structure-changes)\n*   [Implicit actions (from `argTypesRegex`) can no longer be used during rendering (e.g. in a play function)](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#implicit-actions-can-not-be-used-during-rendering-for-example-in-the-play-function)\n*   [`react-docgen` (instead of `react-docgen-typescript`) is the default for component analysis](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#react-docgen-component-analysis-by-default)\n*   [Storyshots has been removed](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#storyshots-has-been-removed)\n*   [Addons API introduced in Storybook 7 is now required](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#new-addons-api)\n*   Ecosystem updates\n    *   [Webpack4 support discontinued](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#webpack4-support-discontinued)\n    *   [IE11 support discontinued](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#modern-browser-support)\n    *   [Node 18+ is now required](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#dropping-support-for-nodejs-16)\n    *   [Next.js 13.5+ is now required](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#require-nextjs-135-and-up)\n    *   [Vue 3+ is now required](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#require-vue-3-and-up)\n    *   [Angular 15+ is now required](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#require-angular-15-and-up)\n    *   [Svelte 4+ is now required](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#require-svelte-4-and-up)\n    *   [Yarn 1 is no longer supported](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#dropping-support-for-yarn-1)\n\nIf any of these changes apply to your project, please read through the linked migration notes before continuing.\n\nIf any of these new requirements or changes are blockers for your project, we recommend looking at the [requirements to migrate to Storybook 7](https://storybook.js.org/docs/7/migration-guide#major-breaking-changes).\n\nYou may wish to read the full migration notes for [Storybook 6 to 7](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-65x-to-700) and [Storybook 7 to 8](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-7x-to-800) before migrating. Or you can follow the instructions below and we’ll try to take care of everything for you!\n\n## [Automatic upgrade](#automatic-upgrade)\n\nTo upgrade your Storybook:\n\nThis will:\n\n1.  Determine that none of the [breaking changes](#major-breaking-changes) apply to your project\n    *   If they do, you will receive instructions on how to resolve them before continuing\n2.  Upgrade your Storybook dependencies to the latest version\n3.  Run a collection of _automigrations_, which will:\n    *   Check for common upgrade tasks\n    *   Explain the necessary changes with links to more information\n    *   Ask for approval, then perform the task on your behalf\n\n### [Common upgrade issues](#common-upgrade-issues)\n\nWhile we'll do our best to upgrade your project automatically, there are two issues worth mentioning that you might encounter during the upgrade process:\n\n#### [`storyStoreV7:false` and `storiesOf`](#storystorev7false-and-storiesof)\n\nIf you have `storyStoreV7: false` in your `.storybook/main.js`, you will need to remove it before you're able to upgrade to Storybook 8.\n\nIf you are using the `storiesOf` API (which requires `storyStoreV7: false` in Storybook 7), you will need to either [migrate your stories to CSF](https://storybook.js.org/docs/7/migration-guide#storiesof-to-csf) or use the [new indexer API to continue creating stories dynamically](https://storybook.js.org/docs/7/migration-guide#storiesof-to-dynamically-created-stories).\n\n#### [MDX 1 to MDX 3](#mdx-1-to-mdx-3)\n\nStorybook 8 uses MDX 3. If you're coming from MDX 1 (used by Storybook 6), there were significant breaking changes in MDX 2. Please reference our [guidance on upgrading successfully](https://storybook.js.org/docs/7/migration-guide#upgrade-mdx1-to-mdx2).\n\n#### [Missing `vite.config.js` file](#missing-viteconfigjs-file)\n\nIf you are using Vite, you may now need to create a `vite.config.js` file in your project root to allow newer versions of Vite to work with Storybook. Additionally, you may need to install and configure a Vite plugin for your framework. More information is available in the [full migration notes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#framework-specific-vite-plugins-have-to-be-explicitly-added).\n\n## [Package structure changes](#package-structure-changes)\n\nThe following packages are **removed**. See the [full migration notes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#removed-deprecated-shim-packages) for details.\n\n| Removal | Replacement |\n| --- | --- |\n| `@storybook/addons` | `@storybook/manager-api` or `@storyboook/preview-api` |\n| `@storybook/channel-postmessage` | `@storybook/channels` |\n| `@storybook/channel-websocket` | `@storybook/channels` |\n| `@storybook/client-api` | `@storybook/preview-api` |\n| `@storybook/core-client` | `@storybook/preview-api` |\n| `@storybook/preview-web` | `@storybook/preview-api` |\n| `@storybook/store` | `@storybook/preview-api` |\n| `@storybook/api` | `@storybook/manager-api` |\n\nThe following packages are **deprecated**. See the [full migration notes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#deprecated-storybooktesting-library-package) for details.\n\n| Deprecation | Replacement |\n| --- | --- |\n| `@storybook/testing-library` | `@storybook/test` |\n\n## [Troubleshooting](#troubleshooting)\n\nThe automatic upgrade should get your Storybook into a working state. If you encounter an error running Storybook after upgrading, here’s what to do:\n\n1.  Try running the [`doctor` command](https://storybook.js.org/docs/api/cli-options#doctor) to check for common issues (such as duplicate dependencies, incompatible addons, or mismatched versions) and see suggestions for fixing them.\n2.  If you’re running `storybook` with the `dev` command, try using the `build` command instead. Sometimes `build` errors are more legible than `dev` errors!\n3.  Check [the full migration notes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-7x-to-800), which contains an exhaustive list of noteworthy changes in Storybook 8. Many of these are already handled by automigrations when you upgrade, but not all are. It’s also possible that you’re experiencing a corner case that we’re not aware of.\n4.  Search [Storybook issues on GitHub](https://github.com/storybookjs/storybook/issues). If you’re seeing a problem, there’s a good chance other people are too. If so, upvote the issue, try out any workarounds described in the comments, and comment back if you have useful info to contribute.\n5.  If there’s no existing issue, you can [file one](https://github.com/storybookjs/storybook/issues/new/choose), ideally with a reproduction attached. We’ll be on top of Storybook 8 issues as we’re stabilizing the release.\n\nIf you prefer to debug yourself, here are a few useful things you can do to help narrow down the problem:\n\n1.  Try removing all addons that are not in the `@storybook` npm namespace (make sure you don't remove the `storybook` package). Community addons that work well with 7.x might not yet be compatible with 8.0, and this is the fastest way to isolate that possibility. If you find an addon that needs to be upgraded to work with Storybook 8, please post an issue on the addon’s repository, or better yet, a pull request to upgrade it!\n2.  Another debugging technique is to bisect to older prerelease versions of Storybook to figure out which release broke your Storybook. For example, assuming that the current prerelease of Storybook is `8.0.0-beta.56`, you could set the version to `8.0.0-alpha.0` in your `package.json` and reinstall to verify that it still works (`alpha.0` should be nearly identical to `7.6.x`). If it works, you could then try `8.0.0-beta.0`, then `8.0.0-beta.28` and so forth. Once you’ve isolated the bad release, read through its [CHANGELOG](https://github.com/storybookjs/storybook/blob/next/CHANGELOG.mdx) entry and perhaps there’s a change that jumps out as the culprit. If you find the problem, please submit an issue or pull request to the Storybook monorepo and we’ll do our best to take care of it quickly.\n\n## [Optional migrations](#optional-migrations)\n\nIn addition to the automigrations and manual migrations above, there are also optional migrations that you should consider. These are features that we’ve deprecated in Storybook 7 and 8 (but remain backwards compatible), or best practices that should help you be more productive in the future.\n\n### [CSF 2 to CSF 3](#csf-2-to-csf-3)\n\nThere are [many good reasons](https://storybook.js.org/blog/storybook-csf3-is-here) to convert your stories from CSF 2 to CSF 3. We provide a codemod which, in most cases, should automatically make the code changes for you (make sure to update the glob to fit your files):",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/frameworks/nextjs?renderer=react",
    "markdown": "# StorybookChromatic\n\nStorybook for Next.js is a [framework](https://storybook.js.org/docs/contribute/framework) that makes it easy to develop and test UI components in isolation for [Next.js](https://nextjs.org/) applications. It includes:\n\n*   🔀 Routing\n*   🖼 Image optimization\n*   ⤵️ Absolute imports\n*   🎨 Styling\n*   🎛 Webpack & Babel config\n*   💫 and more!\n\n## [Requirements](#requirements)\n\n*   Next.js ≥ 13.5\n*   Storybook ≥ 7.0\n\n## [Getting started](#getting-started)\n\n### [In a project without Storybook](#in-a-project-without-storybook)\n\nFollow the prompts after running this command in your Next.js project's root directory:\n\n[More on getting started with Storybook.](https://storybook.js.org/docs/get-started/install)\n\n### [In a project with Storybook](#in-a-project-with-storybook)\n\nThis framework is designed to work with Storybook 7+. If you’re not already using v7, upgrade with this command:\n\n#### [Automatic migration](#automatic-migration)\n\nWhen running the `upgrade` command above, you should get a prompt asking you to migrate to `@storybook/nextjs`, which should handle everything for you. In case that auto-migration does not work for your project, refer to the manual migration below.\n\n#### [Manual migration](#manual-migration)\n\nFirst, install the framework:\n\nThen, update your `.storybook/main.js|ts` to change the framework property:\n\nFinally, if you were using Storybook plugins to integrate with Next.js, those are no longer necessary when using this framework and can be removed:\n\n## [Run the Setup Wizard](#run-the-setup-wizard)\n\nIf all goes well, you should see a setup wizard that will help you get started with Storybook introducing you to the main concepts and features, including how the UI is organized, how to write your first story, and how to test your components' response to various inputs utilizing [controls](https://storybook.js.org/docs/essentials/controls).\n\n![Storybook onboarding](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fget-started%2Fexample-onboarding-wizard.png&w=3840&q=75)\n\nIf you skipped the wizard, you can always run it again by adding the `?path=/onboarding` query parameter to the URL of your Storybook instance, provided that the example stories are still available.\n\n## [Next.js's Image component](#nextjss-image-component)\n\nThis framework allows you to use Next.js's [next/image](https://nextjs.org/docs/pages/api-reference/components/image) with no configuration.\n\n### [Local images](#local-images)\n\n[Local images](https://nextjs.org/docs/pages/building-your-application/optimizing/images#local-images) are supported.\n\n### [Remote images](#remote-images)\n\n[Remote images](https://nextjs.org/docs/pages/building-your-application/optimizing/images#remote-images) are also supported.\n\n## [Next.js font optimization](#nextjs-font-optimization)\n\n[next/font](https://nextjs.org/docs/pages/building-your-application/optimizing/fonts) is partially supported in Storybook. The packages `next/font/google` and `next/font/local` are supported.\n\n### [`next/font/google`](#nextfontgoogle)\n\nYou don't have to do anything. `next/font/google` is supported out of the box.\n\n### [`next/font/local`](#nextfontlocal)\n\nFor local fonts you have to define the [src](https://nextjs.org/docs/pages/building-your-application/optimizing/fonts#local-fonts) property. The path is relative to the directory where the font loader function is called.\n\nIf the following component defines your localFont like this:\n\nYou have to tell Storybook where the `fonts` directory is located, via the [`staticDirs` configuration](https://storybook.js.org/docs/api/main-config/main-config-static-dirs#with-configuration-objects). The `from` value is relative to the `.storybook` directory. The `to` value is relative to the execution context of Storybook. Very likely it is the root of your project.\n\n### [Not supported features of `next/font`](#not-supported-features-of-nextfont)\n\nThe following features are not supported (yet). Support for these features might be planned for the future:\n\n*   [Support font loaders configuration in next.config.js](https://nextjs.org/docs/pages/building-your-application/optimizing/fonts#local-fonts)\n*   [fallback](https://nextjs.org/docs/pages/api-reference/components/font#fallback) option\n*   [adjustFontFallback](https://nextjs.org/docs/pages/api-reference/components/font#adjustfontfallback) option\n*   [preload](https://nextjs.org/docs/pages/api-reference/components/font#preload) option gets ignored. Storybook handles Font loading its own way.\n*   [display](https://nextjs.org/docs/pages/api-reference/components/font#display) option gets ignored. All fonts are loaded with display set to \"block\" to make Storybook load the font properly.\n\n### [Mocking fonts during testing](#mocking-fonts-during-testing)\n\nOccasionally fetching fonts from Google may fail as part of your Storybook build step. It is highly recommended to mock these requests, as those failures can cause your pipeline to fail as well. Next.js [supports mocking fonts](https://github.com/vercel/next.js/blob/725ddc7371f80cca273779d37f961c3e20356f95/packages/font/src/google/fetch-css-from-google-fonts.ts#L36) via a JavaScript module located where the env var `NEXT_FONT_GOOGLE_MOCKED_RESPONSES` references.\n\nFor example, using [GitHub Actions](https://www.chromatic.com/docs/github-actions):\n\nYour mocked fonts will look something like this:\n\n## [Next.js routing](#nextjs-routing)\n\n[Next.js's router](https://nextjs.org/docs/pages/building-your-application/routing) is automatically stubbed for you so that when the router is interacted with, all of its interactions are automatically logged to the Actions panel if you have the [Storybook actions addon](https://storybook.js.org/docs/essentials/actions).\n\nYou should only use `next/router` in the `pages` directory. In the `app` directory, it is necessary to use `next/navigation`.\n\n### [Overriding defaults](#overriding-defaults)\n\nPer-story overrides can be done by adding a `nextjs.router` property onto the story [parameters](https://storybook.js.org/docs/writing-stories/parameters). The framework will shallowly merge whatever you put here into the router.\n\n### [Default router](#default-router)\n\nThe default values on the stubbed router are as follows (see [globals](https://storybook.js.org/docs/essentials/toolbars-and-globals#globals) for more details on how globals work).\n\nAdditionally, the [`router` object](https://nextjs.org/docs/pages/api-reference/functions/use-router#router-object) contains all of the original methods (such as `push()`, `replace()`, etc.) as mock functions that can be manipulated and asserted on using [regular mock APIs](https://vitest.dev/api/mock.html).\n\nTo override these defaults, you can use [parameters](https://storybook.js.org/docs/writing-stories/parameters) and [`beforeEach`](https://storybook.js.org/docs/writing-stories/mocking-data-and-modules/mocking-modules#setting-up-and-cleaning-up):\n\n## [Next.js navigation](#nextjs-navigation)\n\nPlease note that [`next/navigation`](https://nextjs.org/docs/app/building-your-application/routing) can only be used in components/pages in the `app` directory.\n\n### [Set `nextjs.appDirectory` to `true`](#set-nextjsappdirectory-to-true)\n\nIf your story imports components that use `next/navigation`, you need to set the parameter `nextjs.appDirectory` to `true` in for that component's stories:\n\nIf your Next.js project uses the `app` directory for every page (in other words, it does not have a `pages` directory), you can set the parameter `nextjs.appDirectory` to `true` in the [`.storybook/preview.js|ts`](https://storybook.js.org/docs/configure/index#configure-story-rendering) file to apply it to all stories.\n\n### [Overriding defaults](#overriding-defaults-1)\n\nPer-story overrides can be done by adding a `nextjs.navigation` property onto the story [parameters](https://storybook.js.org/docs/writing-stories/parameters). The framework will shallowly merge whatever you put here into the router.\n\n### [`useSelectedLayoutSegment`, `useSelectedLayoutSegments`, and `useParams` hooks](#useselectedlayoutsegment-useselectedlayoutsegments-and-useparams-hooks)\n\nThe `useSelectedLayoutSegment`, `useSelectedLayoutSegments`, and `useParams` hooks are supported in Storybook. You have to set the `nextjs.navigation.segments` parameter to return the segments or the params you want to use.\n\nWith the above configuration, the component rendered in the stories would receive the following values from the hooks:\n\nTo use `useParams`, you have to use a segments array where each element is an array containing two strings. The first string is the param key and the second string is the param value.\n\nWith the above configuration, the component rendered in the stories would receive the following values from the hooks:\n\nThe default value of `nextjs.navigation.segments` is `[]` if not set.\n\n### [Default navigation context](#default-navigation-context)\n\nThe default values on the stubbed navigation context are as follows:\n\nAdditionally, the [`router` object](https://nextjs.org/docs/app/api-reference/functions/use-router#userouter) contains all of the original methods (such as `push()`, `replace()`, etc.) as mock functions that can be manipulated and asserted on using [regular mock APIs](https://vitest.dev/api/mock.html).\n\nTo override these defaults, you can use [parameters](https://storybook.js.org/docs/writing-stories/parameters) and [`beforeEach`](https://storybook.js.org/docs/writing-stories/mocking-data-and-modules/mocking-modules#setting-up-and-cleaning-up):\n\n## [Next.js Head](#nextjs-head)\n\n[`next/head`](https://nextjs.org/docs/pages/api-reference/components/head) is supported out of the box. You can use it in your stories like you would in your Next.js application. Please keep in mind, that the Head `children` are placed into the head element of the iframe that Storybook uses to render your stories.\n\n## [Sass/Scss](#sassscss)\n\n[Global Sass/Scss stylesheets](https://nextjs.org/docs/pages/building-your-application/styling/sass) are supported without any additional configuration as well. Just import them into [`.storybook/preview.js|ts`](https://storybook.js.org/docs/configure/index#configure-story-rendering)\n\nThis will automatically include any of your [custom Sass configurations](https://nextjs.org/docs/pages/building-your-application/styling/sass#customizing-sass-options) in your `next.config.js` file.\n\n## [CSS/Sass/Scss Modules](#csssassscss-modules)\n\n[CSS modules](https://nextjs.org/docs/pages/building-your-application/styling/css-modules) work as expected.\n\n## [Styled JSX](#styled-jsx)\n\nThe built in CSS-in-JS solution for Next.js is [styled-jsx](https://nextjs.org/docs/pages/building-your-application/styling/css-in-js), and this framework supports that out of the box too, zero config.\n\nYou can use your own babel config too. This is an example of how you can customize styled-jsx.\n\n## [PostCSS](#postcss)\n\nNext.js lets you [customize PostCSS config](https://nextjs.org/docs/pages/building-your-application/configuring/post-css). Thus this framework will automatically handle your PostCSS config for you.\n\nThis allows for cool things like zero-config Tailwind! (See [Next.js' example](https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss))\n\n## [Absolute imports](#absolute-imports)\n\n[Absolute imports](https://nextjs.org/docs/pages/building-your-application/configuring/absolute-imports-and-module-aliases#absolute-imports) from the root directory are supported.\n\nAlso OK for global styles in `.storybook/preview.js|ts`!\n\nAbsolute imports **cannot** be mocked in stories/tests. See the [Mocking modules](#mocking-modules) section for more information.\n\n## [Module aliases](#module-aliases)\n\n[Module aliases](https://nextjs.org/docs/app/building-your-application/configuring/absolute-imports-and-module-aliases#module-aliases) are also supported.\n\n## [Subpath imports](#subpath-imports)\n\nAs an alternative to [module aliases](#module-aliases), you can use [subpath imports](https://nodejs.org/api/packages.html#subpath-imports) to import modules. This follows Node package standards and has benefits when [mocking modules](#mocking-modules).\n\nTo configure subpath imports, you define the `imports` property in your project's `package.json` file. This property maps the subpath to the actual file path. The example below configures subpath imports for all modules in the project:\n\nBecause subpath imports replace module aliases, you can remove the path aliases from your TypeScript configuration.\n\nWhich can then be used like this:\n\n## [Mocking modules](#mocking-modules)\n\nComponents often depend on modules that are imported into the component file. These can be from external packages or internal to your project. When rendering those components in Storybook or testing them, you may want to [mock those modules](https://storybook.js.org/docs/writing-stories/mocking-data-and-modules/mocking-modules) to control and assert their behavior.\n\n### [Built-in mocked modules](#built-in-mocked-modules)\n\nThis framework provides mocks for many of Next.js' internal modules:\n\n1.  [`@storybook/nextjs/cache.mock`](#storybooknextjscachemock)\n2.  [`@storybook/nextjs/headers.mock`](#storybooknextjsheadersmock)\n3.  [`@storybook/nextjs/navigation.mock`](#storybooknextjsnavigationmock)\n4.  [`@storybook/nextjs/router.mock`](#storybooknextjsroutermock)\n\n### [Mocking other modules](#mocking-other-modules)\n\nHow you mock other modules in Storybook depends on how you import the module into your component.\n\nWith either approach, the first step is to [create a mock file](https://storybook.js.org/docs/writing-stories/mocking-data-and-modules/mocking-modules#mock-files). Here's an example of a mock file for a module named `session`:\n\n#### [With subpath imports](#with-subpath-imports)\n\nIf you're using [subpath imports](#subpath-imports), you can adjust your configuration to apply [conditions](https://storybook.js.org/docs/writing-stories/mocking-data-and-modules/mocking-modules#subpath-imports) so that the mocked module is used inside Storybook. The example below configures subpath imports for four internal modules, which are then mocked in Storybook:\n\nEach subpath must begin with `#`, to differentiate it from a regular module path. The `#*` entry is a catch-all that maps all subpaths to the root directory.\n\n#### [With module aliases](#with-module-aliases)\n\nIf you're using [module aliases](#module-aliases), you can add a Webpack alias to your Storybook configuration to point to the mock file.\n\n## [Runtime config](#runtime-config)\n\nNext.js allows for [Runtime Configuration](https://nextjs.org/docs/pages/api-reference/next-config-js/runtime-configuration) which lets you import a handy `getConfig` function to get certain configuration defined in your `next.config.js` file at runtime.\n\nIn the context of Storybook with this framework, you can expect Next.js's [Runtime Configuration](https://nextjs.org/docs/pages/api-reference/next-config-js/runtime-configuration) feature to work just fine.\n\nNote, because Storybook doesn't server render your components, your components will only see what they normally see on the client side (i.e. they won't see `serverRuntimeConfig` but will see `publicRuntimeConfig`).\n\nFor example, consider the following Next.js config:\n\nCalls to `getConfig` would return the following object when called within Storybook:\n\n## [Custom Webpack config](#custom-webpack-config)\n\nNext.js comes with a lot of things for free out of the box like Sass support, but sometimes you add [custom Webpack config modifications to Next.js](https://nextjs.org/docs/pages/api-reference/next-config-js/webpack). This framework takes care of most of the Webpack modifications you would want to add. If Next.js supports a feature out of the box, then that feature will work out of the box in Storybook. If Next.js doesn't support something out of the box, but makes it easy to configure, then this framework will do the same for that thing for Storybook.\n\nAny Webpack modifications desired for Storybook should be made in [`.storybook/main.js|ts`](https://storybook.js.org/docs/builders/webpack#extending-storybooks-webpack-config).\n\nNote: Not all Webpack modifications are copy/paste-able between `next.config.js` and `.storybook/main.js|ts`. It is recommended to do your research on how to properly make your modification to Storybook's Webpack config and on how [Webpack works](https://webpack.js.org/concepts/).\n\nBelow is an example of how to add SVGR support to Storybook with this framework.\n\n## [Typescript](#typescript)\n\nStorybook handles most [Typescript](https://www.typescriptlang.org/) configurations, but this framework adds additional support for Next.js's support for [Absolute Imports and Module path aliases](https://nextjs.org/docs/pages/building-your-application/configuring/absolute-imports-and-module-aliases). In short, it takes into account your `tsconfig.json`'s [baseUrl](https://www.typescriptlang.org/tsconfig#baseUrl) and [paths](https://www.typescriptlang.org/tsconfig#paths). Thus, a `tsconfig.json` like the one below would work out of the box.\n\n## [React Server Components (RSC)](#react-server-components-rsc)\n\n(⚠️ **Experimental**)\n\nIf your app uses [React Server Components (RSC)](https://nextjs.org/docs/app/building-your-application/rendering/server-components), Storybook can render them in stories in the browser.\n\nTo enable this set the `experimentalRSC` feature flag in your `.storybook/main.js|ts` config:\n\nSetting this flag automatically wraps your story in a [Suspense](https://react.dev/reference/react/Suspense) wrapper, which is able to render asynchronous components in NextJS's version of React.\n\nIf this wrapper causes problems in any of your existing stories, you can selectively disable it using the `react.rsc` [parameter](https://storybook.js.org/docs/writing-stories/parameters) at the global/component/story level:\n\nNote that wrapping your server components in Suspense does not help if your server components access server-side resources like the file system or Node-specific libraries. To work around this, you'll need to mock out your data access layer using [Webpack aliases](https://webpack.js.org/configuration/resolve/#resolvealias) or an addon like [storybook-addon-module-mock](https://storybook.js.org/addons/storybook-addon-module-mock).\n\nIf your server components access data via the network, we recommend using the [MSW Storybook Addon](https://storybook.js.org/addons/msw-storybook-addon) to mock network requests.\n\nIn the future we will provide better mocking support in Storybook and support for [Server Actions](https://nextjs.org/docs/app/api-reference/functions/server-actions).\n\n## [Notes for Yarn v2 and v3 users](#notes-for-yarn-v2-and-v3-users)\n\nIf you're using [Yarn](https://yarnpkg.com/) v2 or v3, you may run into issues where Storybook can't resolve `style-loader` or `css-loader`. For example, you might get errors like:\n\nThis is because those versions of Yarn have different package resolution rules than Yarn v1.x. If this is the case for you, please install the package directly.\n\n## [FAQ](#faq)\n\n### [Stories for pages/components which fetch data](#stories-for-pagescomponents-which-fetch-data)\n\nNext.js pages can fetch data directly within server components in the `app` directory, which often include module imports that only run in a node environment. This does not (currently) work within Storybook, because if you import from a Next.js page file containing those node module imports in your stories, your Storybook's Webpack will crash because those modules will not run in a browser. To get around this, you can extract the component in your page file into a separate file and import that pure component in your stories. Or, if that's not feasible for some reason, you can [polyfill those modules](https://webpack.js.org/configuration/node/) in your Storybook's [`webpackFinal` configuration](https://storybook.js.org/docs/builders/webpack#extending-storybooks-webpack-config).\n\n**Before**\n\n**After**\n\n### [Statically imported images won't load](#statically-imported-images-wont-load)\n\nMake sure you are treating image imports the same way you treat them when using `next/image` in normal development.\n\nBefore using this framework, image imports would import the raw path to the image (e.g. `'static/media/stories/assets/logo.svg'`). Now image imports work the \"Next.js way\", meaning that you now get an object when importing an image. For example:\n\nTherefore, if something in Storybook isn't showing the image properly, make sure you expect the object to be returned from an import instead of only the asset path.\n\nSee [local images](https://nextjs.org/docs/pages/building-your-application/optimizing/images#local-images) for more detail on how Next.js treats static image imports.\n\n### [Module not found: Error: Can't resolve `package name`](#module-not-found-error-cant-resolve-package-name)\n\nYou might get this if you're using Yarn v2 or v3. See [Notes for Yarn v2 and v3 users](#notes-for-yarn-v2-and-v3-users) for more details.\n\n### [What if I'm using the Vite builder?](#what-if-im-using-the-vite-builder)\n\nThe `@storybook/nextjs` package abstracts the Webpack 5 builder and provides all the necessary Webpack configuration needed (and used internally) by Next.js. Webpack is currently the official builder in Next.js, and Next.js does not support Vite, therefore it is not possible to use Vite with `@storybook/nextjs`. You can use `@storybook/react-vite` framework instead, but at the cost of having a degraded experience, and we won't be able to provide you official support.\n\n### [Error: You are importing avif images, but you don't have sharp installed. You have to install sharp in order to use image optimization features in Next.js.](#error-you-are-importing-avif-images-but-you-dont-have-sharp-installed-you-have-to-install-sharp-in-order-to-use-image-optimization-features-in-nextjs)\n\n`sharp` is a dependency of Next.js's image optimization feature. If you see this error, you need to install `sharp` in your project.\n\nYou can refer to the [Install `sharp` to Use Built-In Image Optimization](https://nextjs.org/docs/messages/install-sharp) in the Next.js documentation for more information.\n\n## [API](#api)\n\n### [Modules](#modules)\n\nThe `@storybook/nextjs` package exports several modules that enable you to [mock](#mocking-modules) Next.js's internal behavior.\n\n#### [`@storybook/nextjs/export-mocks`](#storybooknextjsexport-mocks)\n\nType: `{ getPackageAliases: ({ useESM?: boolean }) => void }`\n\n`getPackageAliases` is a helper for generating the aliases needed to set up [portable stories](#portable-stories).\n\n#### [`@storybook/nextjs/cache.mock`](#storybooknextjscachemock)\n\nType: `typeof import('next/cache')`\n\nThis module exports mocked implementations of the `next/cache` module's exports. You can use it to create your own mock implementations or assert on mock calls in a story's [play function](https://storybook.js.org/docs/writing-stories/play-function).\n\nType: [`cookies`](https://nextjs.org/docs/app/api-reference/functions/cookies#cookiessetname-value-options), [`headers`](https://nextjs.org/docs/app/api-reference/functions/headers) and [`draftMode`](https://nextjs.org/docs/app/api-reference/functions/draft-mode) from Next.js\n\nThis module exports _writable_ mocked implementations of the `next/headers` module's exports. You can use it to set up cookies or headers that are read in your story, and to later assert that they have been called.\n\nNext.js's default [`headers()`](https://nextjs.org/docs/app/api-reference/functions/headers) export is read-only, but this module exposes methods allowing you to write to the headers:\n\n*   **`headers().append(name: string, value: string)`**: Appends the value to the header if it exists already.\n*   **`headers().delete(name: string)`**: Deletes the header\n*   **`headers().set(name: string, value: string)`**: Sets the header to the value provided.\n\nFor cookies, you can use the existing API to write them. E.g., `cookies().set('firstName', 'Jane')`.\n\nBecause `headers()`, `cookies()` and their sub-functions are all mocks you can use any [mock utilities](https://vitest.dev/api/mock.html) in your stories, like `headers().getAll.mock.calls`.\n\n#### [`@storybook/nextjs/navigation.mock`](#storybooknextjsnavigationmock)\n\nType: `typeof import('next/navigation') & getRouter: () => ReturnType<typeof import('next/navigation')['useRouter']>`\n\nThis module exports mocked implementations of the `next/navigation` module's exports. It also exports a `getRouter` function that returns a mocked version of [Next.js's `router` object from `useRouter`](https://nextjs.org/docs/app/api-reference/functions/use-router#userouter), allowing the properties to be manipulated and asserted on. You can use it mock implementations or assert on mock calls in a story's [play function](https://storybook.js.org/docs/writing-stories/play-function).\n\n#### [`@storybook/nextjs/router.mock`](#storybooknextjsroutermock)\n\nType: `typeof import('next/router') & getRouter: () => ReturnType<typeof import('next/router')['useRouter']>`\n\nThis module exports mocked implementations of the `next/router` module's exports. It also exports a `getRouter` function that returns a mocked version of [Next.js's `router` object from `useRouter`](https://nextjs.org/docs/pages/api-reference/functions/use-router#router-object), allowing the properties to be manipulated and asserted on. You can use it mock implementations or assert on mock calls in a story's [play function](https://storybook.js.org/docs/writing-stories/play-function).\n\n### [Options](#options)\n\nYou can pass an options object for additional configuration if needed:\n\nThe available options are:\n\n#### [`builder`](#builder)\n\nType: `Record<string, any>`\n\nConfigure options for the [framework's builder](https://storybook.js.org/docs/api/main-config/main-config-framework#optionsbuilder). For Next.js, available options can be found in the [Webpack builder docs](https://storybook.js.org/docs/builders/webpack).\n\n#### [`image`](#image)\n\nType: `object`\n\nProps to pass to every instance of `next/image`. See [next/image docs](https://nextjs.org/docs/pages/api-reference/components/image) for more details.\n\n#### [`nextConfigPath`](#nextconfigpath)\n\nType: `string`\n\nThe absolute path to the `next.config.js` file. This is necessary if you have a custom `next.config.js` file that is not in the root directory of your project.\n\n### [Parameters](#parameters)\n\nThis framework contributes the following [parameters](https://storybook.js.org/docs/writing-stories/parameters) to Storybook, under the `nextjs` namespace:\n\n#### [`appDirectory`](#appdirectory)\n\nType: `boolean`\n\nDefault: `false`\n\nIf your story imports components that use `next/navigation`, you need to set the parameter `nextjs.appDirectory` to `true`. Because this is a parameter, you can apply it to a [single story](https://storybook.js.org/docs/api/parameters#story-parameters), [all stories for a component](https://storybook.js.org/docs/api/parameters#meta-parameters), or [every story in your Storybook](https://storybook.js.org/docs/api/parameters#project-parameters). See [Next.js Navigation](#nextjs-navigation) for more details.\n\n#### [`navigation`](#navigation)\n\nType:\n\nDefault value:\n\nThe router object that is passed to the `next/navigation` context. See [Next.js's navigation docs](https://nextjs.org/docs/app/building-your-application/routing) for more details.\n\n#### [`router`](#router)\n\nType:\n\nThe router object that is passed to the `next/router` context. See [Next.js's router docs](https://nextjs.org/docs/pages/building-your-application/routing) for more details.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/frameworks/react-webpack5?renderer=react",
    "markdown": "# StorybookChromatic\n\nStorybook for React & Webpack is a [framework](https://storybook.js.org/docs/contribute/framework) that makes it easy to develop and test UI components in isolation for [React](https://react.dev/) applications built with [Webpack](https://webpack.js.org/).\n\n## [Requirements](#requirements)\n\n*   React ≥ 16.8\n*   Webpack ≥ 5.0\n*   Storybook ≥ 8.0\n\n## [Getting started](#getting-started)\n\n### [In a project without Storybook](#in-a-project-without-storybook)\n\nFollow the prompts after running this command in your React project's root directory:\n\n[More on getting started with Storybook.](https://storybook.js.org/docs/get-started/install)\n\n### [In a project with Storybook](#in-a-project-with-storybook)\n\nThis framework is designed to work with Storybook 7+. If you’re not already using v7, upgrade with this command:\n\n#### [Automatic migration](#automatic-migration)\n\nWhen running the `upgrade` command above, you should get a prompt asking you to migrate to `@storybook/react-webpack5`, which should handle everything for you. In case that auto-migration does not work for your project, refer to the manual migration below.\n\n#### [Manual migration](#manual-migration)\n\nFirst, install the framework:\n\nNext, install and register your appropriate compiler addon, depending on whether you're using SWC (recommended) or Babel:\n\nIf your project is using [Create React App](#create-react-app-cra), you can skip this step.\n\nor\n\nMore details can be found in the [Webpack builder docs](https://storybook.js.org/docs/builders/webpack#compiler-support).\n\nFinally, update your `.storybook/main.js|ts` to change the framework property:\n\n## [Run the Setup Wizard](#run-the-setup-wizard)\n\nIf all goes well, you should see a setup wizard that will help you get started with Storybook introducing you to the main concepts and features, including how the UI is organized, how to write your first story, and how to test your components' response to various inputs utilizing [controls](https://storybook.js.org/docs/essentials/controls).\n\n![Storybook onboarding](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fget-started%2Fexample-onboarding-wizard.png&w=3840&q=75)\n\nIf you skipped the wizard, you can always run it again by adding the `?path=/onboarding` query parameter to the URL of your Storybook instance, provided that the example stories are still available.\n\n## [Create React App (CRA)](#create-react-app-cra)\n\nSupport for [Create React App](https://create-react-app.dev/) is handled by [`@storybook/preset-create-react-app`](https://github.com/storybookjs/presets/tree/master/packages/preset-create-react-app).\n\nThis preset enables support for all CRA features, including Sass/SCSS and TypeScript.\n\nIf you're working on an app that was initialized manually (i.e., without the use of CRA), ensure that your app has [react-dom](https://www.npmjs.com/package/react-dom) included as a dependency. Failing to do so can lead to unforeseen issues with Storybook and your project.\n\n## [API](#api)\n\n### [Options](#options)\n\nYou can pass an options object for additional configuration if needed:\n\n#### [`builder`](#builder)\n\nType: `Record<string, any>`\n\nConfigure options for the [framework's builder](https://storybook.js.org/docs/api/main-config/main-config-framework#optionsbuilder). For this framework, available options can be found in the [Webpack builder docs](https://storybook.js.org/docs/builders/webpack).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/frameworks/react-vite?renderer=react",
    "markdown": "# StorybookChromatic\n\nStorybook for React & Vite is a [framework](https://storybook.js.org/docs/contribute/framework) that makes it easy to develop and test UI components in isolation for [React](https://react.dev/) applications built with [Vite](https://vitejs.dev/). It includes:\n\n*   🏎️ Pre-bundled for performance\n*   🪄 Zero config\n*   💫 and more!\n\n## [Requirements](#requirements)\n\n*   React ≥ 16.8\n*   Vite ≥ 4.0\n*   Storybook ≥ 8.0\n\n## [Getting started](#getting-started)\n\n### [In a project without Storybook](#in-a-project-without-storybook)\n\nFollow the prompts after running this command in your React project's root directory:\n\n[More on getting started with Storybook.](https://storybook.js.org/docs/get-started/install)\n\n### [In a project with Storybook](#in-a-project-with-storybook)\n\nThis framework is designed to work with Storybook 7+. If you’re not already using v7, upgrade with this command:\n\n#### [Automatic migration](#automatic-migration)\n\nWhen running the `upgrade` command above, you should get a prompt asking you to migrate to `@storybook/react-vite`, which should handle everything for you. In case that auto-migration does not work for your project, refer to the manual migration below.\n\n#### [Manual migration](#manual-migration)\n\nFirst, install the framework:\n\nThen, update your `.storybook/main.js|ts` to change the framework property:\n\n## [Run the Setup Wizard](#run-the-setup-wizard)\n\nIf all goes well, you should see a setup wizard that will help you get started with Storybook introducing you to the main concepts and features, including how the UI is organized, how to write your first story, and how to test your components' response to various inputs utilizing [controls](https://storybook.js.org/docs/essentials/controls).\n\n![Storybook onboarding](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fget-started%2Fexample-onboarding-wizard.png&w=3840&q=75)\n\nIf you skipped the wizard, you can always run it again by adding the `?path=/onboarding` query parameter to the URL of your Storybook instance, provided that the example stories are still available.\n\n## [API](#api)\n\n### [Options](#options)\n\nYou can pass an options object for additional configuration if needed:\n\n#### [`builder`](#builder)\n\nType: `Record<string, any>`\n\nConfigure options for the [framework's builder](https://storybook.js.org/docs/api/main-config/main-config-framework#optionsbuilder). For this framework, available options can be found in the [Vite builder docs](https://storybook.js.org/docs/builders/vite).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/addons/integration-catalog",
    "markdown": "# StorybookChromatic\n\nStorybook has two types of integrations, addons and recipes, which are listed in the [integration catalog](https://storybook.js.org/integrations/).\n\n## [Addons](#addons)\n\nStorybook addons are distributed via npm. The catalog is populated by querying npm's registry for Storybook-specific metadata in `package.json`.\n\nAdd your addon to the catalog by publishing a npm package that follows these requirements:\n\n*   `package.json` with [module information](https://storybook.js.org/docs/addons/writing-addons#setup) and [addon metadata](#addon-metadata)\n*   `README.md` file with installation and configuration instructions\n*   `/dist` directory containing transpiled ES5 code\n*   `preset.js` file written as an ES5 module at the root level\n\n### [Addon metadata](#addon-metadata)\n\nWe rely on metadata to organize your addon in the catalog. You must add the `storybook-addons` as the first keyword, followed by your addon's category. Additional keywords will be used in search and as tags.\n\n| Property | Description | Example |\n| --- | --- | --- |\n| `name` | Addon package name | storybook-addon-outline |\n| `description` | Addon description | Outline all elements with CSS to help with layout placement and alignment |\n| `author` | Name of the author | winkerVSbecks |\n| `keywords` | List of keywords to describe the addon | `[\"storybook-addons\",\"style\",\"debug\"]` |\n| `repository` | Addon repository | `{\"type\": \"git\",\"url\": \"https://github.com/someone/my-addon\" }` |\n\nCustomize your addon's appearance by adding the `storybook` property with the following fields.\n\n| Property | Description | Example |\n| --- | --- | --- |\n| `displayName` | Display name | Outline |\n| `icon` | Link to custom icon for the addon (SVG are not supported) | [https://yoursite.com/outline-icon.png](https://yoursite.com/outline-icon.png) |\n| `unsupportedFrameworks` | List of unsupported frameworks | `[\"vue\"]` |\n| `supportedFrameworks` | List of supported frameworks | `[\"react\", \"angular\"]` |\n\nUse the list below as a reference when filling in the values for both the `supportedFrameworks` and `unsupportedFrameworks` fields.\n\n*   react\n*   vue\n*   angular\n*   web-components\n*   ember\n*   html\n*   svelte\n*   preact\n*   react-native\n\nMake sure to copy each item **exactly** as listed so that we can properly index your addon in our catalog.\n\nThe `package.json` above appears like below in the catalog. See an example of a production package.json [here](https://github.com/chromaui/storybook-outline/blob/main/package.json).\n\n![Storybook addon in the catalog](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Faddons%2Faddon-display.png&w=3840&q=75)\n\n#### [How long does it take for my addon to show up in the catalog?](#how-long-does-it-take-for-my-addon-to-show-up-in-the-catalog)\n\nOnce you publish the addon, it will appear in the catalog. There may be a delay between the time you publish your addon and when it's listed in the catalog. If your addon doesn't show up within 24 hours, [open an issue](https://github.com/storybookjs/frontpage/issues).\n\n## [Recipes](#recipes)\n\nRecipes are a set of instructions to integrate third-party libraries into Storybook in cases where an addon does not exist or the integration requires some manual effort.\n\n### [Who owns them?](#who-owns-them)\n\nRecipes are written and maintained by the Storybook team. We create recipes based on community popularity, tool maturity, and stability of the integration. Our goal is to ensure that recipes continue to work over time.\n\nNot finding the recipe that you want? If it's popular in the community, our docs team will write one. In the mean time, try searching for a solution — it's likely that someone has the same requirements as you do. You can also help us out by writing recipes on your own site which speeds up the research process.\n\n### [Request a recipe](#request-a-recipe)\n\nIf you'd like to request a recipe, open a [new discussion](https://github.com/storybookjs/storybook/discussions/new?category=ideas) in our GitHub repo. We'll review your request, and if it's popular, we'll add it to our backlog and prioritize it.\n\n**Learn more about the Storybook addon ecosystem**\n\n*   [Types of addons](https://storybook.js.org/docs/addons/addon-types) for other types of addons\n*   [Writing addons](https://storybook.js.org/docs/addons/writing-addons) for the basics of addon development\n*   [Presets](https://storybook.js.org/docs/addons/writing-presets) for preset development\n*   Integration catalog for requirements and available recipes\n*   [API reference](https://storybook.js.org/docs/addons/addons-api) to learn about the available APIs",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-tests/test-runner",
    "markdown": "# StorybookChromatic\n\nStorybook test runner turns all of your stories into executable tests. It is powered by [Jest](https://jestjs.io/) and [Playwright](https://playwright.dev/).\n\n*   For those [without a play function](https://storybook.js.org/docs/writing-stories): it verifies whether the story renders without any errors.\n*   For those [with a play function](https://storybook.js.org/docs/writing-stories/play-function): it also checks for errors in the play function and that all assertions passed.\n\nThese tests run in a live browser and can be executed via the [command line](#cli-options) or your [CI server](#set-up-ci-to-run-tests).\n\n## [Setup](#setup)\n\nThe test-runner is a standalone, framework-agnostic utility that runs parallel to your Storybook. You will need to take some additional steps to set it up properly. Detailed below is our recommendation to configure and execute it.\n\nRun the following command to install it.\n\nUpdate your `package.json` scripts and enable the test runner.\n\nStart your Storybook with:\n\nStorybook's test runner requires either a locally running Storybook instance or a published Storybook to run all the existing tests.\n\nFinally, open a new terminal window and run the test-runner with:\n\n## [Configure](#configure)\n\nTest runner offers zero-config support for Storybook. However, you can run `test-storybook --eject` for more fine-grained control. It generates a `test-runner-jest.config.js` file at the root of your project, which you can modify. Additionally, you can extend the generated configuration file and provide [testEnvironmentOptions](https://github.com/playwright-community/jest-playwright#configuration) as the test runner also uses [jest-playwright](https://github.com/playwright-community/jest-playwright) under the hood.\n\n### [CLI Options](#cli-options)\n\nThe test-runner is powered by [Jest](https://jestjs.io/) and accepts a subset of its [CLI options](https://jestjs.io/docs/cli) (for example, `--watch`, `--maxWorkers`). If you're already using any of those flags in your project, you should be able to migrate them into Storybook's test-runner without any issues. Listed below are all the available flags and examples of using them.\n\n| Options | Description |\n| --- | --- |\n| `--help` | Output usage information  <br>`test-storybook --help` |\n| `-s`, `--index-json` | Run in index json mode. Automatically detected (requires a compatible Storybook)  <br>`test-storybook --index-json` |\n| `--no-index-json` | Disables index json mode  <br>`test-storybook --no-index-json` |\n| `-c`, `--config-dir [dir-name]` | Directory where to load Storybook configurations from  <br>`test-storybook -c .storybook` |\n| `--watch` | Run in watch mode  <br>`test-storybook --watch` |\n| `--watchAll` | Watch files for changes and rerun all tests when something changes.  <br>`test-storybook --watchAll` |\n| `--coverage` | Runs [coverage tests](https://storybook.js.org/docs/writing-tests/test-coverage) on your stories and components  <br>`test-storybook --coverage` |\n| `--coverageDirectory` | Directory where to write coverage report output  <br>`test-storybook --coverage --coverageDirectory coverage/ui/storybook` |\n| `--url` | Define the URL to run tests in. Useful for custom Storybook URLs  <br>`test-storybook --url http://the-storybook-url-here.com` |\n| `--browsers` | Define browsers to run tests in. One or multiple of: chromium, firefox, webkit  <br>`test-storybook --browsers firefox chromium` |\n| `--maxWorkers [amount]` | Specifies the maximum number of workers the worker-pool will spawn for running tests  <br>`test-storybook --maxWorkers=2` |\n| `--testTimeout [amount]` | Defines the maximum time in milliseconds that a test can run before it is automatically marked as failed. Useful for long-running tests  <br>`test-storybook --testTimeout=60000` |\n| `--no-cache` | Disable the cache  <br>`test-storybook --no-cache` |\n| `--clearCache` | Deletes the Jest cache directory and then exits without running tests  <br>`test-storybook --clearCache` |\n| `--verbose` | Display individual test results with the test suite hierarchy  <br>`test-storybook --verbose` |\n| `-u`, `--updateSnapshot` | Use this flag to re-record every snapshot that fails during this test run  <br>`test-storybook -u` |\n| `--eject` | Creates a local configuration file to override defaults of the test-runner  <br>`test-storybook --eject` |\n| `--json` | Prints the test results in JSON. This mode will send all other test output and user messages to stderr.  <br>`test-storybook --json` |\n| `--outputFile` | Write test results to a file when the --json option is also specified.  <br>`test-storybook --json --outputFile results.json` |\n| `--junit` | Indicates that test information should be reported in a junit file.  <br>`test-storybook --**junit**` |\n| `--ci` | Instead of the regular behavior of storing a new snapshot automatically, it will fail the test and require Jest to be run with `--updateSnapshot`.  <br>`test-storybook --ci` |\n| `--shard [index/count]` | Requires CI. Splits the test suite execution into multiple machines  <br>`test-storybook --shard=1/8` |\n| `--failOnConsole` | Makes tests fail on browser console errors  <br>`test-storybook --failOnConsole` |\n| `--includeTags` | Experimental feature  <br>Defines a subset of stories to be tested if they match the enabled [tags](#experimental-filter-tests).  <br>`test-storybook --includeTags=\"test-only, pages\"` |\n| `--excludeTags` | Experimental feature  <br>Prevents stories from being tested if they match the provided [tags](#experimental-filter-tests).  <br>`test-storybook --excludeTags=\"no-tests, tokens\"` |\n| `--skipTags` | Experimental feature  <br>Configures the test runner to skip running tests for stories that match the provided [tags](#experimental-filter-tests).  <br>`test-storybook --skipTags=\"skip-test, layout\"` |\n\n### [Run tests against a deployed Storybook](#run-tests-against-a-deployed-storybook)\n\nBy default, the test-runner assumes that you're running it against a locally served Storybook on port `6006`. If you want to define a target URL to run against deployed Storybooks, you can use the `--url` flag:\n\nAlternatively, you can set the `TARGET_URL` environment variable and run the test-runner:\n\n## [Set up CI to run tests](#set-up-ci-to-run-tests)\n\nYou can also configure the test-runner to run tests on a CI environment. Documented below are some recipes to help you get started.\n\n### [Run against deployed Storybooks via Github Actions deployment](#run-against-deployed-storybooks-via-github-actions-deployment)\n\nIf you're publishing your Storybook with services such as [Vercel](https://vercel.com/) or [Netlify](https://docs.netlify.com/site-deploys/notifications/#github-commit-statuses), they emit a `deployment_status` event in GitHub Actions. You can use it and set the `deployment_status.target_url` as the `TARGET_URL` environment variable. Here's how:\n\nThe published Storybook must be publicly available for this example to work. We recommend running the test server using the recipe [below](#run-against-non-deployed-storybooks) if it requires authentication.\n\n### [Run against non-deployed Storybooks](#run-against-non-deployed-storybooks)\n\nYou can use your CI provider (for example, [GitHub Actions](https://github.com/features/actions), [GitLab Pipelines](https://docs.gitlab.com/ee/ci/pipelines/), [CircleCI](https://circleci.com/)) to build and run the test runner against your built Storybook. Here's a recipe that relies on third-party libraries, that is to say, [concurrently](https://www.npmjs.com/package/concurrently), [http-server](https://www.npmjs.com/package/http-server), and [wait-on](https://www.npmjs.com/package/wait-on) to build Storybook and run tests with the test-runner.\n\nBy default, Storybook outputs the [build](https://storybook.js.org/docs/sharing/publish-storybook#build-storybook-as-a-static-web-application) to the `storybook-static` directory. If you're using a different build directory, you'll need to adjust the recipe accordingly.\n\n### [What's the difference between Chromatic and Test runner?](#whats-the-difference-between-chromatic-and-test-runner)\n\nThe test-runner is a generic testing tool that can run locally or on CI and be configured or extended to run all kinds of tests.\n\n[Chromatic](https://www.chromatic.com/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook) is a cloud-based service that runs [visual](https://storybook.js.org/docs/writing-tests/visual-testing) and [interaction tests](https://storybook.js.org/docs/writing-tests/interaction-testing) (and soon accessibility tests) without setting up the test runner. It also syncs with your git provider and manages access control for private projects.\n\nHowever, you might want to pair the test runner and Chromatic in some cases.\n\n*   Use it locally and Chromatic on your CI.\n*   Use Chromatic for visual and interaction tests and run other custom tests using the test runner.\n\n## [Advanced configuration](#advanced-configuration)\n\n### [Test hook API](#test-hook-api)\n\nThe test-runner renders a story and executes its [play function](https://storybook.js.org/docs/writing-stories/play-function) if one exists. However, certain behaviors are impossible to achieve via the play function, which executes in the browser. For example, if you want the test-runner to take visual snapshots for you, this is possible via Playwright/Jest but must be executed in Node.\n\nThe test-runner exports test hooks that can be overridden globally to enable use cases like visual or DOM snapshots. These hooks give you access to the test lifecycle _before_ and _after_ the story is rendered. Listed below are the available hooks and an overview of how to use them.\n\n| Hook | Description |\n| --- | --- |\n| `prepare` | Prepares the browser for tests  <br>`async prepare({ page, browserContext, testRunnerConfig }) {}` |\n| `setup` | Executes once before all the tests run  <br>`setup() {}` |\n| `preVisit` | Executes before a story is initially visited and rendered in the browser  <br>`async preVisit(page, context) {}` |\n| `postVisit` | Executes after the story is visited and fully rendered  <br>`async postVisit(page, context) {}` |\n\nThese test hooks are experimental and may be subject to breaking changes. We encourage you to test as much as possible within the story's [play function](https://storybook.js.org/docs/writing-stories/play-function).\n\nTo enable the hooks API, you'll need to add a new configuration file inside your Storybook directory and set them up as follows:\n\nExcept for the `setup` function, all other functions run asynchronously. Both `preVisit` and `postVisit` functions include two additional arguments, a [Playwright page](https://playwright.dev/docs/pages) and a context object which contains the `id`, `title`, and the `name` of the story.\n\nWhen the test-runner executes, your existing tests will go through the following lifecycle:\n\n*   The `setup` function is executed before all the tests run.\n*   The context object is generated containing the required information.\n*   Playwright navigates to the story's page.\n*   The `preVisit` function is executed.\n*   The story is rendered, and any existing `play` functions are executed.\n*   The `postVisit` function is executed.\n\n### [(Experimental) Filter tests](#experimental-filter-tests)\n\nWhen you run the test-runner on Storybook, it tests every story by default. However, if you want to filter the tests, you can use the `tags` configuration option. Storybook originally introduced this feature to generate [automatic documentation](https://storybook.js.org/docs/writing-docs/autodocs) for stories. But it can be further extended to configure the test-runner to run tests according to the provided tags using a similar configuration option or via CLI flags (e.g., `--includeTags`, `--excludeTags`, `--skipTags`), only available with the latest stable release (`0.15` or higher). Listed below are the available options and an overview of how to use them.\n\n| Option | Description |\n| --- | --- |\n| `exclude` | Prevents stories if they match the provided tags from being tested. |\n| `include` | Defines a subset of stories only to be tested if they match the enabled tags. |\n| `skip` | Skips testing on stories if they match the provided tags. |\n\nRunning tests with the CLI flags takes precedence over the options provided in the configuration file and will override the available options in the configuration file.\n\n#### [Disabling tests](#disabling-tests)\n\nIf you want to prevent specific stories from being tested by the test-runner, you can configure your story with a custom tag, enable it to the test-runner configuration file or run the test-runner with the `--excludeTags` [CLI](#cli-options) flag and exclude them from testing. This is helpful when you want to exclude stories that are not yet ready for testing or are irrelevant to your tests. For example:\n\n#### [Run tests for a subset of stories](#run-tests-for-a-subset-of-stories)\n\nTo allow the test-runner only to run tests on a specific story or subset of stories, you can configure the story with a custom tag, enable it in the test-runner configuration file or run the test-runner with the `--includeTags` [CLI](#cli-options) flag and include them in your tests. For example, if you wanted to run tests based on the `test-only` tag, you can adjust your configuration as follows:\n\nApplying tags for the component's stories should either be done at the component level (using `meta`) or at the story level. Importing tags across stories is not supported in Storybook and won't work as intended.\n\n#### [Skip tests](#skip-tests)\n\nIf you want to skip running tests on a particular story or subset of stories, you can configure your story with a custom tag, enable it in the test-runner configuration file, or run the test-runner with the `--skipTags` [CLI](#cli-options) flag. Running tests with this option will cause the test-runner to ignore and flag them accordingly in the test results, indicating that the tests are temporarily disabled. For example:\n\n### [Authentication for deployed Storybooks](#authentication-for-deployed-storybooks)\n\nIf you use a secure hosting provider that requires authentication to host your Storybook, you may need to set HTTP headers. This is mainly because of how the test runner checks the status of the instance and the index of its stories through fetch requests and Playwright. To do this, you can modify the test-runner configuration file to include the `getHttpHeaders` function. This function takes the URL of the fetch calls and page visits as input and returns an object containing the headers that need to be set.\n\n### [Helpers](#helpers)\n\nThe test-runner exports a few helpers that can be used to make your tests more readable and maintainable by accessing Storybook's internals (e.g., `args`, `parameters`). Listed below are the available helpers and an overview of how to use them.\n\n#### [Accessing story information with the test-runner](#accessing-story-information-with-the-test-runner)\n\nIf you need to access information about the story, such as its parameters, the test-runner includes a helper function named `getStoryContext` that you can use to retrieve it. You can then use it to customize your tests further as needed. For example, if you need to configure Playwright's page [viewport size](https://playwright.dev/docs/api/class-page#page-set-viewport-size) to use the viewport size defined in the story's parameters, you can do so as follows:\n\n#### [Working with assets](#working-with-assets)\n\nIf you're running a specific set of tests (e.g., image snapshot testing), the test-runner provides a helper function named `waitForPageReady` that you can use to ensure the page is fully loaded and ready before running the test. For example:\n\n### [Index.json mode](#indexjson-mode)\n\nThe test-runner transforms your story files into tests when testing a local Storybook. For a remote Storybook, it uses the Storybook's [index.json](https://storybook.js.org/docs/configure/index#feature-flags) (formerly `stories.json`) file (a static index of all the stories) to run the tests.\n\n#### [Why?](#why)\n\nSuppose you run into a situation where the local and remote Storybooks appear out of sync, or you might not even have access to the code. In that case, the `index.json` file is guaranteed to be the most accurate representation of the deployed Storybook you are testing. To test a local Storybook using this feature, use the `--index-json` flag as follows:\n\nThe `index.json` mode is not compatible with the watch mode.\n\nIf you need to disable it, use the `--no-index-json` flag:\n\n#### [How do I check if my Storybook has a `index.json` file?](#how-do-i-check-if-my-storybook-has-a-indexjson-file)\n\nIndex.json mode requires a `index.json` file. Open a browser window and navigate to your deployed Storybook instance (for example, `https://your-storybook-url-here.com/index.json`). You should see a JSON file that starts with a `\"v\": 3` key, immediately followed by another key called \"stories\", which contains a map of story IDs to JSON objects. If that is the case, your Storybook supports [index.json mode](https://storybook.js.org/docs/configure/index#feature-flags).\n\n* * *\n\n## [Troubleshooting](#troubleshooting)\n\n### [The test runner seems flaky and keeps timing out](#the-test-runner-seems-flaky-and-keeps-timing-out)\n\nIf your tests time out with the following message:\n\nIt might be that Playwright couldn't handle testing the number of stories you have in your project. Perhaps you have a large number of stories, or your CI environment has a really low RAM configuration. In such cases, you should limit the number of workers that run in parallel by adjusting your command as follows:\n\n### [The error output in the CLI is too short](#the-error-output-in-the-cli-is-too-short)\n\nBy default, the test runner truncates error outputs at 1000 characters, and you can check the full output directly in Storybook in the browser. However, if you want to change that limit, you can do so by setting the `DEBUG_PRINT_LIMIT` environment variable to a number of your choosing, for example, `DEBUG_PRINT_LIMIT=5000 yarn test-storybook`.\n\n### [Run the test runner in other CI environments](#run-the-test-runner-in-other-ci-environments)\n\nAs the test runner is based on Playwright, you might need to use specific docker images or other configurations depending on your CI setup. In that case, you can refer to the [Playwright CI docs](https://playwright.dev/docs/ci) for more information.\n\n### [Tests filtered by tags are incorrectly executed](#tests-filtered-by-tags-are-incorrectly-executed)\n\nIf you've enabled filtering tests with tags and provided similar tags to the `include` and `exclude` lists, the test-runner will execute the tests based on the `exclude` list and ignore the `include` list. To avoid this, make sure the tags provided to the `include` and `exclude` lists differ.\n\n### [The test runner doesn't support Yarn PnP out of the box](#the-test-runner-doesnt-support-yarn-pnp-out-of-the-box)\n\nIf you've enabled the test-runner in a project running on a newer version of Yarn with Plug'n'Play (PnP) enabled, the test-runner might not work as expected and may generate the following error when running tests:\n\nThis is due to the test-runner using the community-maintained package [jest-playwright-preset](https://github.com/playwright-community/jest-playwright) that still needs to support this feature. To solve this, you can either switch the [`nodeLinker`](https://yarnpkg.com/features/linkers) setting to `node-modules` or install Playwright as a direct dependency in your project, followed by adding the browser binaries via the [`install`](https://playwright.dev/docs/browsers#install-browsers) command.\n\n**Learn about other UI tests**\n\n*   Test runner to automate test execution\n*   [Visual tests](https://storybook.js.org/docs/writing-tests/visual-testing) for appearance\n*   [Accessibility tests](https://storybook.js.org/docs/writing-tests/accessibility-testing) for accessibility\n*   [Interaction tests](https://storybook.js.org/docs/writing-tests/interaction-testing) for user behavior simulation\n*   [Coverage tests](https://storybook.js.org/docs/writing-tests/test-coverage) for measuring code coverage\n*   [Snapshot tests](https://storybook.js.org/docs/writing-tests/snapshot-testing/snapshot-testing) for rendering errors and warnings\n*   [End-to-end tests](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests) for simulating real user scenarios\n*   [Unit tests](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests) for functionality",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/frameworks/vue3-vite?renderer=vue",
    "markdown": "# StorybookChromatic\n\nStorybook for Vue & Vite is a [framework](https://storybook.js.org/docs/contribute/framework) that makes it easy to develop and test UI components in isolation for [Vue](https://vuejs.org/) applications built with [Vite](https://vitejs.dev/). It includes:\n\n*   🏎️ Pre-bundled for performance\n*   🪄 Zero config\n*   🧠 Comprehensive docgen\n*   💫 and more!\n\nStorybook for Vue & Vite is only supported in [Vue](https://storybook.js.org/docs/get-started/frameworks/vue3-vite?renderer=vue) projects.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/addons/addon-types",
    "markdown": "# StorybookChromatic\n\nEach Storybook addon is classified into two general categories, UI-based or Presets. Each type of addons feature is documented here. Use this as a reference when creating your addon.\n\n## [UI-based addons](#ui-based-addons)\n\nUI-based addons allow you to customize Storybook's UI with the following elements.\n\n### [Panels](#panels)\n\nPanel addons allow you to add your own UI in Storybook's addon panel. This is the most common type of addon in the ecosystem. For example, the official [`@storybook/actions`](https://storybook.js.org/docs/essentials/actions) and [`@storybook/a11y`](https://github.com/storybookjs/storybook/tree/next/code/addons/a11y) use this pattern.\n\n![Storybook panel](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Faddons%2Fstorybook-panel.png&w=3840&q=75)\n\nUse this boilerplate code to add a new `Panel` to Storybook's UI:\n\n### [Toolbars](#toolbars)\n\nToolbar addons allow you to add your own custom tools in Storybook's Toolbar. For example, the official [`@storybook/backgrounds`](https://storybook.js.org/docs/essentials/backgrounds) and the [`@storybook/addon-outline`](https://storybook.js.org/docs/essentials/measure-and-outline#outline-addon) use this pattern.\n\n![Storybook toolbar addon](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Faddons%2Fstorybook-toolbar.png&w=3840&q=75)\n\nUse this boilerplate code to add a new `button` to Storybook's Toolbar:\n\nThe `match` property allows you to conditionally render your toolbar addon, [based on the current view](https://storybook.js.org/docs/addons/writing-addons#conditionally-render-the-addon).\n\n* * *\n\nThe `icon` element used in the example loads the icons from the `@storybook/components` package. See [here](https://storybook.js.org/docs/faq#what-icons-are-available-for-my-toolbar-or-my-addon) for the list of available icons that you can use.\n\n### [Tabs](#tabs)\n\nTab addons allow you to create your own custom tabs in Storybook. For example, the official [@storybook/addon-docs](https://storybook.js.org/docs/writing-docs) uses this pattern.\n\n![Storybook tab addon](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Faddons%2Fstorybook-tab.png&w=3840&q=75)\n\nUse this boilerplate code to add a new `Tab` to Storybook's UI:\n\nLearn how to write your own addon that includes these UI elements [here](https://storybook.js.org/docs/addons/writing-addons).\n\n## [Preset addons](#preset-addons)\n\nStorybook preset addons are grouped collections of `babel`, `webpack`, and `addons` configurations to integrate Storybook and other technologies. For example the official [preset-create-react-app](https://github.com/storybookjs/presets/tree/master/packages/preset-create-react-app).\n\nUse this boilerplate code while writing your own preset addon.\n\n**Learn more about the Storybook addon ecosystem**\n\n*   Types of addons for other types of addons\n*   [Writing addons](https://storybook.js.org/docs/addons/writing-addons) for the basics of addon development\n*   [Presets](https://storybook.js.org/docs/addons/writing-presets) for preset development\n*   [Integration catalog](https://storybook.js.org/docs/addons/integration-catalog) for requirements and available recipes\n*   [API reference](https://storybook.js.org/docs/addons/addons-api) to learn about the available APIs",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/frameworks/vue3-webpack5?renderer=vue",
    "markdown": "# StorybookChromatic\n\nStorybook for Vue & Webpack is a [framework](https://storybook.js.org/docs/contribute/framework) that makes it easy to develop and test UI components in isolation for [Vue](https://vuejs.org/) applications built with [Webpack](https://webpack.js.org/).\n\nStorybook for Vue & Webpack is only supported in [Vue](https://storybook.js.org/docs/get-started/frameworks/vue3-webpack5?renderer=vue) projects.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/addons/addon-knowledge-base",
    "markdown": "# StorybookChromatic\n\nOnce you understand the basics of writing addons, there are a variety of common enhancements to make your addon better. This page details additional information about addon creation. Use it as a quick reference guide when creating your own addons.\n\n### [Disable the addon panel](#disable-the-addon-panel)\n\nIt’s possible to disable the addon panel for a particular story.\n\nTo make that possible, you need to pass the `paramKey` element when you register the panel:\n\nThen when adding a story, you can pass a disabled parameter.\n\n### [Style your addon](#style-your-addon)\n\nStorybook uses [Emotion](https://emotion.sh/docs/introduction) for styling. Alongside with a theme that you can customize!\n\nWe recommend using Emotion to style your addon’s UI components. That allows you to use the active Storybook theme to deliver a seamless developer experience. If you don’t want to use Emotion, you can use inline styles or another css-in-js lib. You can receive the theme as a prop by using Emotion's `withTheme` HOC. [Read more about theming](https://storybook.js.org/docs/configure/user-interface/theming).\n\n### [Storybook components](#storybook-components)\n\nAddon authors can develop their UIs using any React library. But we recommend using Storybook’s UI components in `@storybook/components` to build addons faster. When you use Storybook components, you get:\n\n*   Battle-tested off-the-shelf components\n*   Storybook native look and feel\n*   Built-in support for Storybook theming\n\nUse the components listed below with your next addon.\n\n| Component | Source | Story |\n| --- | --- | --- |\n| Action Bar | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/ActionBar/ActionBar.tsx) | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-actionbar--single-item) |\n| Addon Panel | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/addon-panel/addon-panel.tsx) | N/A |\n| Badge | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/Badge/Badge.tsx) | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-badge--all-badges) |\n| Button | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/Button/Button.tsx) | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-button--all-buttons) |\n| Form | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/form/index.tsx) | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-form-button--sizes) |\n| Loader | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/Loader/Loader.tsx) | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-loader--progress-bar) |\n| PlaceHolder | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/placeholder/placeholder.tsx) | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-placeholder--single-child) |\n| Scroll Area | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/ScrollArea/ScrollArea.tsx) | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-scrollarea--vertical) |\n| Space | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/spaced/Spaced.tsx) | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-spaced--row) |\n| Syntax Highlighter | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/syntaxhighlighter/syntaxhighlighter.tsx) | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-syntaxhighlighter--bash) |\n| Tabs | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/tabs/tabs.tsx) | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-tabs--stateful-static) |\n| ToolBar | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/bar/bar.tsx) | N/A |\n| ToolTip | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/tooltip/Tooltip.tsx) | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-tooltip-tooltip--basic-default) |\n| Zoom | [See component implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/Zoom/Zoom.tsx) | [See component story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-zoom--element-actual-size) |\n\nComplementing the components, also included is a set of UI primitives. Use the content listed below as a reference for styling your addon.\n\n| Component | Source | Story |\n| --- | --- | --- |\n| Color Palette (see note below) | [See implementation](https://github.com/storybookjs/storybook/tree/master/code/ui/components/src/Colors) | [See story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-colorpalette--page) |\n| Icon | [See implementation](https://github.com/storybookjs/storybook/blob/main/code/ui/components/src/icon/icons.tsx) | [See story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-icon--labels) |\n| Typography | [See implementation](https://github.com/storybookjs/storybook/tree/master/code/ui/components/src/typography) | [See story](https://main--5a375b97f4b14f0020b0cda3.chromatic.com/?path=/story/basics-typography--all) |\n\nThe color palette implemented by `@storybook/components` is a high-level abstraction of the [`@storybook/theming`](https://github.com/storybookjs/storybook/tree/next/code/lib/theming/src) package.\n\n### [Build system](#build-system)\n\nWhen you're developing your addon as a package, you can’t use `npm link` to add it to your project. List your addon as a local dependency into your package.json:\n\nRun either `yarn` or `npm install` to install the addon.\n\n### [Hot module replacement](#hot-module-replacement)\n\nWhile developing your addon, you can configure HMR (hot module replacement) to reflect the changes made.\n\n### [Standalone Storybook addons](#standalone-storybook-addons)\n\nIf you're developing a standalone addon, add a new script to `package.json` with the following:\n\n#### [Local Storybook addons](#local-storybook-addons)\n\nIf you're developing a local Storybook addon built on top of an existing Storybook installation, HMR (hot module replacement) is available out of the box.\n\n### [Composing addons in presets](#composing-addons-in-presets)\n\nIf you're working on a preset that loads third-party addons, which you don't have control over, and you need access to certain features (e.g., decorators) or provide additional configurations. In that case, you'll need to update your preset to the following to allow you to load and configure the other addons:\n\nIf you have control over the addons you want to customize. In that case, you can update your preset and implement a custom function to load any additional presets and provide the necessary configuration, similar to how it's implemented in the [Essentials](https://storybook.js.org/docs/essentials) addon.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/addons/addons-api",
    "markdown": "# StorybookChromatic\n\nStorybook's API allows developers to interact programmatically with Storybook. With the API, developers can build and deploy custom addons and other tools that enhance Storybook's functionality.\n\n## [Core Addon API](#core-addon-api)\n\nOur API is exposed via two distinct packages, each one with a different purpose:\n\n*   `@storybook/manager-api` used to interact with the Storybook manager UI or access the Storybook API.\n*   `@storybook/preview-api` used to control and configure the addon's behavior.\n\n### [addons.add()](#addonsadd)\n\nThe `add` method allows you to register the type of UI component associated with the addon (e.g., panels, toolbars, tabs). For a minimum viable Storybook addon, you should provide the following arguments:\n\n*   `type`: The type of UI component to register.\n*   `title`: The title to feature in the Addon Panel.\n*   `render`: The function that renders the addon's UI component.\n\nThe render function is called with `active`. The `active` value will be true when the panel is focused on the UI.\n\n### [addons.register()](#addonsregister)\n\nServes as the entry point for all addons. It allows you to register an addon and access the Storybook [API](#storybook-api). For example:\n\nNow you'll get an instance to our StorybookAPI. See the [api docs](#storybook-api) for Storybook API regarding using that.\n\n### [addons.getChannel()](#addonsgetchannel)\n\nGet an instance to the channel to communicate with the manager and the preview. You can find this in both the addon register code and your addon’s wrapper component (where used inside a story).\n\nIt has a NodeJS [EventEmitter](https://nodejs.org/api/events.html) compatible API. So, you can use it to emit events and listen to events.\n\n### [makeDecorator](#makedecorator)\n\nUse the `makeDecorator` API to create decorators in the style of the official addons. Like so:\n\nIf the story's parameters include `{ exampleParameter: { disable: true } }` (where `exampleParameter` is the `parameterName` of your addon), your decorator will not be called.\n\nThe `makeDecorator` API requires the following arguments:\n\n*   `name`: Unique name to identify the custom addon decorator.\n*   `parameterName`: Sets a unique parameter to be consumed by the addon.\n*   `skipIfNoParametersOrOptions`: (Optional) Doesn't run the decorator if the user hasn't options either via [decorators](https://storybook.js.org/docs/writing-stories/decorators) or [parameters](https://storybook.js.org/docs/writing-stories/parameters).\n*   `wrapper`: your decorator function. Takes the `getStory`, `context`, and both the `options` and `parameters` (as defined in `skipIfNoParametersOrOptions` above).\n\n* * *\n\n## [Storybook API](#storybook-api)\n\nStorybook's API allows you to access different functionalities of Storybook UI.\n\n### [api.selectStory()](#apiselectstory)\n\nThe `selectStory` API method allows you to select a single story. It accepts the following two parameters; story kind name and an optional story name. For example:\n\nThis is how you can select the above story:\n\n### [api.selectInCurrentKind()](#apiselectincurrentkind)\n\nSimilar to the `selectStory` API method, but it only accepts the story as the only parameter.\n\n### [api.setQueryParams()](#apisetqueryparams)\n\nThis method allows you to set query string parameters. You can use that as temporary storage for addons. Here's how you define query params:\n\nAdditionally, if you need to remove a query parameter, set it as `null` instead of removing them from the addon. For example:\n\n### [api.getQueryParam()](#apigetqueryparam)\n\nAllows retrieval of a query parameter enabled via the `setQueryParams` API method. For example:\n\n### [api.getUrlState(overrideParams)](#apigeturlstateoverrideparams)\n\nThis method allows you to get the application URL state, including any overridden or custom parameter values. For example:\n\n### [api.on(eventName, fn)](#apioneventname-fn)\n\nThis method allows you to register a handler function called whenever the user navigates between stories.\n\n### [addons.setConfig(config)](#addonssetconfigconfig)\n\nThis method allows you to override the default Storybook UI configuration (e.g., set up a [theme](https://storybook.js.org/docs/configure/user-interface/theming) or hide UI elements):\n\nThe following table details how to use the API values:\n\n| Name | Type | Description | Example Value |\n| --- | --- | --- | --- |\n| **navSize** | Number (pixels) | The size of the sidebar that shows a list of stories | `300` |\n| **bottomPanelHeight** | Number (pixels) | The size of the addon panel when in the bottom position | `200` |\n| **rightPanelWidth** | Number (pixels) | The size of the addon panel when in the right position | `200` |\n| **panelPosition** | String | Where to show the addon panel | `'bottom'` or `'right'` |\n| **enableShortcuts** | Boolean | Enable/disable shortcuts | `true` |\n| **showToolbar** | Boolean | Show/hide toolbar | `true` |\n| **theme** | Object | Storybook Theme, see next section | `undefined` |\n| **selectedPanel** | String | Id to select an addon panel | `storybook/actions/panel` |\n| **initialActive** | String | Select the default active tab on Mobile | `sidebar` or `canvas` or `addons` |\n| **sidebar** | Object | Sidebar options, see below | `{ showRoots: false }` |\n| **toolbar** | Object | Modify the tools in the toolbar using the addon id | `{ fullscreen: { hidden: false } }` |\n\nThe following options are configurable under the `sidebar` namespace:\n\n| Name | Type | Description | Example Value |\n| --- | --- | --- | --- |\n| **showRoots** | Boolean | Display the top-level nodes as a \"root\" in the sidebar | `false` |\n| **collapsedRoots** | Array | Set of root node IDs to visually collapse by default | `['misc', 'other']` |\n| **renderLabel** | Function | Create a custom label for tree nodes; must return a ReactNode | `(item, api) => <abbr title=\"...\">{item.name}</abbr>` |\n\nThe following options are configurable under the `toolbar` namespace:\n\n| Name | Type | Description | Example Value |\n| --- | --- | --- | --- |\n| **id** | String | Toggle visibility for toolbar item | `{ hidden: false }` |\n\n* * *\n\n## [Storybook hooks](#storybook-hooks)\n\nTo help streamline addon development and reduce boilerplate code, the API exposes a set of hooks to access Storybook's internals. These hooks are an extension of the `@storybook/manager-api` package.\n\n### [useStorybookState](#usestorybookstate)\n\nIt allows access to Storybook's internal state. Similar to the [`useglobals`](#useglobals) hook, we recommend optimizing your addon to rely on [`React.memo`](https://react.dev/reference/react/memo), or the following hooks; [`useMemo`](https://react.dev/reference/react/useMemo), [`useCallback`](https://react.dev/reference/react/useCallback) to prevent a high volume of re-render cycles.\n\n### [useStorybookApi](#usestorybookapi)\n\nThe `useStorybookApi` hook is a convenient helper to allow you full access to the [Storybook API](#storybook-api) methods.\n\n### [useChannel](#usechannel)\n\nAllows setting subscriptions to events and getting the emitter to emit custom events to the channel.\n\nThe messages can be listened to on both the iframe and the manager.\n\n### [useAddonState](#useaddonstate)\n\nThe `useAddonState` is a useful hook for addons that require data persistence, either due to Storybook's UI lifecycle or for more complex addons involving multiple types (e.g., toolbars, panels).\n\n### [useParameter](#useparameter)\n\nThe `useParameter` retrieves the current story's parameters. If the parameter's value is not defined, it will automatically default to the second value defined.\n\n### [useGlobals](#useglobals)\n\nExtremely useful hook for addons that rely on Storybook [Globals](https://storybook.js.org/docs/essentials/toolbars-and-globals). It allows you to obtain and update `global` values. We also recommend optimizing your addon to rely on [`React.memo`](https://react.dev/reference/react/memo), or the following hooks; [`useMemo`](https://react.dev/reference/react/useMemo), [`useCallback`](https://react.dev/reference/react/useCallback) to prevent a high volume of re-render cycles.\n\n### [useArgs](#useargs)\n\nHook that allows you to retrieve or update a story's [`args`](https://storybook.js.org/docs/writing-stories/args).\n\n**Learn more about the Storybook addon ecosystem**\n\n*   [Types of addons](https://storybook.js.org/docs/addons/addon-types) for other types of addons\n*   [Writing addons](https://storybook.js.org/docs/addons/writing-addons) for the basics of addon development\n*   [Presets](https://storybook.js.org/docs/addons/writing-presets) for preset development\n*   [Integration catalog](https://storybook.js.org/docs/addons/integration-catalog) for requirements and available recipes\n*   API reference to learn about the available APIs",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-tests/accessibility-testing",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nAccessibility is the practice of making websites inclusive to all. That means supporting requirements such as: keyboard navigation, screen reader support, touch-friendly, usable color contrast, reduced motion, and zoom support.\n\nAccessibility tests audit the rendered DOM against a set of heuristics based on [WCAG](https://www.w3.org/WAI/standards-guidelines/wcag/) rules and other industry-accepted best practices. They act as the first line of QA to catch blatant accessibility violations.\n\n## [Accessibility checks with a11y addon](#accessibility-checks-with-a11y-addon)\n\nStorybook provides an official [a11y addon](https://storybook.js.org/addons/@storybook/addon-a11y). Powered by Deque's [axe-core](https://github.com/dequelabs/axe-core), which automatically catches up to [57% of WCAG issues](https://www.deque.com/blog/automated-testing-study-identifies-57-percent-of-digital-accessibility-issues/).\n\n### [Set up the a11y addon](#set-up-the-a11y-addon)\n\nIf you want to check accessibility for your stories using the [addon](https://storybook.js.org/addons/@storybook/addon-a11y/), you'll need to install it and add it to your Storybook.\n\nRun the following command to install the addon.\n\nUpdate your Storybook configuration (in `.storybook/main.js|ts`) to include the accessibility addon.\n\nStart your Storybook, and you will see some noticeable differences in the UI. A new toolbar icon and the accessibility panel where you can inspect the results of the tests.\n\n![Storybook accessibility addon running](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Fstorybook-a11y-addon-optimized.png&w=3840&q=75)\n\n### [How it works](#how-it-works)\n\nStorybook's a11y addon runs [Axe](https://github.com/dequelabs/axe-core) on the selected story. Allowing you to catch and fix accessibility issues during development. For example, if you’re working on a button component and included the following set of stories:\n\nCycling through both stories, you will see that the `Inaccessible` story contains some issues that need fixing. Opening the violations tab in the accessibility panel provides a clear description of the accessibility issue and guidelines for solving it.\n\n![Storybook accessibility addon running](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Fstorybook-a11y-addon-optimized.png&w=3840&q=75)\n\n### [Configure](#configure)\n\nOut of the box, Storybook's accessibility addon includes a set of accessibility rules that cover most issues. You can also fine-tune the [addon configuration](https://github.com/storybookjs/storybook/tree/next/code/addons/a11y#parameters) or override [Axe's ruleset](https://github.com/storybookjs/storybook/tree/next/code/addons/a11y#handling-failing-rules) to best suit your needs.\n\n#### [Global a11y configuration](#global-a11y-configuration)\n\nIf you need to dismiss an accessibility rule or modify its settings across all stories, you can add the following to your [`storybook/preview.js|ts`](https://storybook.js.org/docs/configure/index#configure-story-rendering):\n\n#### [Component-level a11y configuration](#component-level-a11y-configuration)\n\nYou can also customize your own set of rules for all stories of a component. Update your story's default export and add a parameter with the required configuration:\n\n#### [Story-level a11y configuration](#story-level-a11y-configuration)\n\nCustomize the a11y ruleset at the story level by updating your story to include a new parameter:\n\n#### [How to disable a11y tests](#how-to-disable-a11y-tests)\n\nDisable accessibility testing for stories or components by adding the following parameter to your story’s export or component’s default export respectively:\n\n## [Automate accessibility tests with test runner](#automate-accessibility-tests-with-test-runner)\n\nThe most accurate way to check accessibility is manually on real devices. However, you can use automated tools to catch common accessibility issues. For example, [Axe](https://www.deque.com/axe/), on average, catches upwards to [57% of WCAG issues](https://www.deque.com/blog/automated-testing-study-identifies-57-percent-of-digital-accessibility-issues/) automatically.\n\nThese tools work by auditing the rendered DOM against heuristics based on [WCAG](https://www.w3.org/WAI/standards-guidelines/wcag/) rules and other industry-accepted best practices. You can then integrate these tools into your test automation pipeline using the Storybook [test runner](https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api) and [axe-playwright](https://github.com/abhinaba-ghosh/axe-playwright).\n\n### [Setup](#setup)\n\nTo enable accessibility testing with the test runner, you will need to take additional steps to set it up properly. We recommend you go through the [test runner documentation](https://storybook.js.org/docs/writing-tests/test-runner) before proceeding with the rest of the required configuration.\n\nRun the following command to install the required dependencies.\n\nAdd a new [configuration file](https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api) inside your Storybook directory with the following inside:\n\n`preVisit` and `postVisit` are convenient hooks that allow you to extend the test runner's default configuration. Read more about them [here](https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api).\n\nWhen you execute the test runner (for example, with `yarn test-storybook`), it will run the accessibility audit and any [interaction tests](https://storybook.js.org/docs/writing-tests/interaction-testing) you might have configured for each component story.\n\nIt starts checking for issues by traversing the DOM tree starting from the story's root element and generates a detailed report based on the issues it encountered.\n\n![Accessibility testing with the test runner](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Ftest-runner-a11y-optimized.png&w=3840&q=75)\n\n### [A11y config with the test runner](#a11y-config-with-the-test-runner)\n\nThe test runner provides [helper methods](https://storybook.js.org/docs/writing-tests/test-runner#helpers), allowing access to the story's information. You can use them to extend the test runner's configuration and provide additional options you may have for a specific story. For example:\n\n### [Disable a11y tests with the test runner](#disable-a11y-tests-with-the-test-runner)\n\nAdditionally, if you have already [disabled accessibility](#how-to-disable-a11y-tests) tests for any particular story, you can also configure the test runner to avoid testing it as well. For example:\n\n* * *\n\n#### [What’s the difference between browser-based and linter-based accessibility tests?](#whats-the-difference-between-browser-based-and-linter-based-accessibility-tests)\n\nBrowser-based accessibility tests, like those found in Storybook, evaluate the rendered DOM because that gives you the highest accuracy. Auditing code that hasn't been compiled yet is one step removed from the real thing, so you won't catch everything the user might experience.\n\n**Learn about other UI tests**\n\n*   [Test runner](https://storybook.js.org/docs/writing-tests/test-runner) to automate test execution\n*   [Visual tests](https://storybook.js.org/docs/writing-tests/visual-testing) for appearance\n*   Accessibility tests for accessibility\n*   [Interaction tests](https://storybook.js.org/docs/writing-tests/interaction-testing) for user behavior simulation\n*   [Coverage tests](https://storybook.js.org/docs/writing-tests/test-coverage) for measuring code coverage\n*   [Snapshot tests](https://storybook.js.org/docs/writing-tests/snapshot-testing/snapshot-testing) for rendering errors and warnings\n*   [End-to-end tests](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests) for simulating real user scenarios\n*   [Unit tests](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests) for functionality",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-tests/visual-testing",
    "markdown": "# StorybookChromatic\n\nVisual tests catch bugs in UI appearance. They work by taking screenshots of every story and comparing them to previous versions to identify visual changes. This is ideal for verifying layout, color, size, contrast, and any other visual aspect of your UI.\n\nStorybook supports cross-browser visual testing natively using [Chromatic](https://www.chromatic.com/storybook/?ref=storybook_site), a cloud service made by the Storybook team. When you enable visual testing, every story is automatically turned into a test. This gives you instant feedback on UI bugs directly in Storybook.\n\n### [Install the addon](#install-the-addon)\n\nAdd visual tests to your project by installing `@chromatic-com/storybook`, the official addon by Storybook maintainers:\n\nStorybook 7.6 or higher is required. Read the [migration guide](https://storybook.js.org/docs/migration-guide) to upgrade your project.\n\n### [Enable visual tests](#enable-visual-tests)\n\nWhen you start Storybook, you'll see a new addon panel for Visual Tests where you can run tests and view results.\n\n![Visual Tests addon enabled](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Fvta-enable.png&w=3840&q=75)\n\nTo enable visual testing, sign up for [Chromatic](https://www.chromatic.com/start?startWithSignup=true&ref=storybook_site) and create a project. This will give you access to a fleet of cloud browsers.\n\n![Visual Tests addon project selection](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Fvta-select-project.png&w=3840&q=75)\n\nSelect a project from your project list to finish setup. If you're setting up the addon for the first time, the configuration files and necessary project identifiers will be added for you automatically.\n\n### [Configure](#configure)\n\nThe addon includes configuration options covering most use cases by default. You can also fine-tune the addon configuration to match your project's requirements via the [`./chromatic.config.json`](https://www.chromatic.com/docs/visual-tests-addon/#configure) file. Below are the available options and examples of how to use them.\n\n| Option | Description |\n| --- | --- |\n| `projectId` | Automatically configured. Sets the value for the project identifier  <br>`\"projectId\": \"Project:64cbcde96f99841e8b007d75\"` |\n| `buildScriptName` | Optional. Defines the custom Storybook build script  <br>`\"buildScriptName\": \"deploy-storybook\"` |\n| `debug` | Optional. Output verbose debugging information to the console.  <br>`\"debug\": true` |\n| `zip` | Optional. Recommended for large projects. Configures the addon to deploy your Storybook to Chromatic as a zip file.  <br>`\"zip\": true` |\n\n### [Run visual tests](#run-visual-tests)\n\nClick the ▶️ Play button in the Storybook sidebar to run visual tests. This will send your stories to the cloud to take snapshots and detect visual changes.\n\n![Storybook running visual tests with the addon](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Fvta-run-tests.png&w=3840&q=75)\n\n### [Review changes](#review-changes)\n\nIf there are visual changes in your stories, they will be 🟡 highlighted in the sidebar. Click the story and go to the Visual Tests addon panel to see which pixels changed.\n\nIf the changes are intentional, ✅ accept them as baselines locally. If the changes aren't intentional, fix the story and rerun the tests using the ▶️ Play button.\n\n![Confirm UI changes in Storybook](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Fvta-changes-found.png&w=3840&q=75)\n\nWhen you finish accepting changes as baselines in the addon, you're ready to push the code to your remote repository. This will sync baselines to the cloud for anyone who checks out your branch.\n\n![Accept UI changes in Storybook](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Fvta-changes-accepted.png&w=3840&q=75)\n\n### [Automate with CI](#automate-with-ci)\n\nThe addon is designed to be used in tandem with CI. We recommend using the addon to check for changes during development and then running visual tests in CI as you get ready to merge.\n\nChanges you accept as baselines in the addon will get auto-accepted as baselines in CI so you don’t have to review twice.\n\n1.  Add a step to your CI workflow to run Chromatic.\n    \n    *   [GitHub Actions](https://chromatic.com/docs/github-actions?ref=storybook_docs)\n    *   [GitLab Pipelines](https://chromatic.com/docs/gitlab?ref=storybook_docs)\n    *   [Bitbucket Pipelines](https://chromatic.com/docs/bitbucket-pipelines?ref=storybook_docs)\n    *   [CircleCI](https://chromatic.com/docs/circleci?ref=storybook_docs)\n    *   [Travis CI](https://chromatic.com/docs/travisci?ref=storybook_docs)\n    *   [Jenkins](https://chromatic.com/docs/jenkins?ref=storybook_docs)\n    *   [Azure Pipelines](https://chromatic.com/docs/azure-pipelines?ref=storybook_docs)\n    *   [Custom CI provider](https://chromatic.com/docs/custom-ci-provider?ref=storybook_docs)\n2.  Configure your CI to include environment variables to authenticate with Chromatic (project token).\n    \n\n#### [PR checks](#pr-checks)\n\nOnce you successfully set up Chromatic in CI, your pull/merge requests will be badged with a UI Tests check. The badge notifies you of test errors or UI changes that need to be verified by your team. Make the check required in your Git provider to prevent accidental UI bugs from being merged.\n\n![PR badge for visual tests](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Fvta-prbadge-test.png&w=3840&q=75)\n\n* * *\n\n### [What’s the difference between visual tests and snapshot tests?](#whats-the-difference-between-visual-tests-and-snapshot-tests)\n\n[Snapshot tests](https://storybook.js.org/docs/writing-tests/snapshot-testing/snapshot-testing) compare the rendered markup of every story against known baselines. This means the test compares blobs of HTML and not what the user actually sees. Which in turn, can lead to an increase in false positives as code changes don’t always yield visual changes in the component.\n\nVisual tests compare the rendered pixels of every story against known baselines. Because you're testing the same thing your users actually experience, your tests will be richer and easier to maintain.\n\n**Learn about other UI tests**\n\n*   [Test runner](https://storybook.js.org/docs/writing-tests/test-runner) to automate test execution\n*   Visual tests for appearance\n*   [Accessibility tests](https://storybook.js.org/docs/writing-tests/accessibility-testing) for accessibility\n*   [Interaction tests](https://storybook.js.org/docs/writing-tests/interaction-testing) for user behavior simulation\n*   [Coverage tests](https://storybook.js.org/docs/writing-tests/test-coverage) for measuring code coverage\n*   [Snapshot tests](https://storybook.js.org/docs/writing-tests/snapshot-testing/snapshot-testing) for rendering errors and warnings\n*   [End-to-end tests](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests) for simulating real user scenarios\n*   [Unit tests](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests) for functionality",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/frameworks/angular?renderer=angular",
    "markdown": "# StorybookChromatic\n\nStorybook for Angular is a [framework](https://storybook.js.org/docs/contribute/framework) that makes it easy to develop and test UI components in isolation for [Angular](https://angular.io/) applications. It includes:\n\n*   🧱 Uses Angular builders\n*   🎛️ Compodoc integration\n*   💫 and more!\n\nStorybook for Angular is only supported in [Angular](https://storybook.js.org/docs/get-started/frameworks/angular?renderer=angular) projects.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/addons/addon-migration-guide",
    "markdown": "# StorybookChromatic\n\nWe sincerely appreciate the dedication and effort addon creators put into keeping the Storybook ecosystem vibrant and up-to-date. As Storybook evolves to version 8.0, bringing new features and improvements, this guide is here to assist you in migrating your addons from 7.x to 8.0. If you need to migrate your addon from an earlier version of Storybook, please first refer to the [Addon migration guide for Storybook 7.0](https://storybook.js.org/docs/7.6/addons/addon-migration-guide).\n\nAs we gather feedback from the community, we’ll update this page. We also have a general [Storybook migration guide](https://storybook.js.org/docs/migration-guide) if you’re looking for that.\n\n## [Updating dependencies](#updating-dependencies)\n\nBegin by updating your Storybook dependencies. Use the `next` tag for pre-release versions, `latest` for the most recent stable release, or specify the version directly.\n\n## [Key changes for addons](#key-changes-for-addons)\n\nHere are the essential changes in version 8.0 that impact addon development. Please check the [complete migration note](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#from-version-7x-to-800) for an exhaustive list of changes in 8.0.\n\n### [Node.js 16 support dropped](#nodejs-16-support-dropped)\n\nPlease upgrade your addon to Node.js 18, as support for Node.js 16 has ended.\n\n### [React 18 for manager UI](#react-18-for-manager-ui)\n\nUI-based addons (e.g., [panels](https://storybook.js.org/docs/addons/addon-types#panels), [toolbars](https://storybook.js.org/docs/addons/addon-types#toolbars), [tabs](https://storybook.js.org/docs/addons/addon-types#tabs)) rely on React 18 to render their elements in the Storybook UI. Also, note that the `key` prop is no longer passed to the render function.\n\n### [React peer dependency is no longer required](#react-peer-dependency-is-no-longer-required)\n\nTo remove your addon's peer dependency on React and reduce its install size, do the following:\n\n1.  Move `react`, `react-dom`, and the globalized Storybook packages from `peerDependencies` to `devDependencies`\n2.  Add the list of globalized packages to the `externals` property in the `tsup` configuration to ensure they are not part of the bundle.\n\nFor an example, see [the updates we've made to the Addon Kit](https://github.com/storybookjs/addon-kit/compare/79282986..fa7ee7c). These changes are optional but recommended.\n\nThis assumes your addon uses [tsup](https://tsup.egoist.dev/) for bundling. If your addon was built with an older version of the Addon Kit that uses Babel for bundling, you must first switch to tsup. For guidance, explore these older changes implemented in the Addon Kit [repository](https://github.com/storybookjs/addon-kit/pull/45/files).\n\n### [@storybook/components deprecations](#storybookcomponents-deprecations)\n\nThe `Icons` component from `@storybook/components` is now deprecated in favor of [`@storybook/icons`](https://github.com/storybookjs/icons). Additionally, various `Button` component props are also deprecated, with alternatives provided.\n\n### [Storybook layout state API changes](#storybook-layout-state-api-changes)\n\nIf you're customizing the Storybook UI configuration with `addons.setConfig({...})`, be aware of [the changes to the layout state API](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#ui-layout-state-has-changed-shape).\n\n### [Removal of deprecated features](#removal-of-deprecated-features)\n\nDeprecated packages and APIs from 7.0 are now removed in 8.0. Consult the [full migration notes](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#deprecations-which-are-now-removed) for details. Most notably, for addons, the removal of the `@storybook/addons` package requires you to switch to `@storybook/preview-api` and `@storybook/manager-api` for the same functionality.\n\n### [Babel-loader removed from Webpack](#babel-loader-removed-from-webpack)\n\nStorybook 8 [removes babel-loader from the webpack5 builder](https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#removed-babelcore-and-babel-loader-from-storybookbuilder-webpack5). If your addon's preset overrides the `babel()` method, it will break if your users are using SWC to compile their files (which is the new default for Webpack 5-based Storybook projects).\n\nTo ensure your addon supports both Babel and SWC, you can build a custom bundling plugin using [Unplugin](https://unplugin.vercel.app/) that will work with both Webpack and Vite builders, giving you complete control to run Babel (or whatever you want) on stories and components as they are loaded.\n\nAs a workaround, update your documentation to tell users to opt-in to Babel support. This should fix your addon in their project at the cost of performance:\n\n## [Migration Example](#migration-example)\n\nThe Addon Kit [repository](https://github.com/storybookjs/addon-kit) has already been updated to support Storybook 8.0, and you can use it as a reference for your migration. You'll see the changes mentioned in this guide, including ESM support via the `type: module` configuration. As an addon maintainer, we encourage you to update your addon to include them. It simplifies the setup and makes it easier for users to use your addon with the latest version of Storybook. If you choose to follow along with the ESM migration, we've prepared an abbreviated list of changes below.\n\n*   [`package.json`](https://github.com/storybookjs/addon-kit/compare/79282986..fa7ee7c#diff-7ae45ad102eab3b6d7e7896acd08c427a9b25b346470d7bc6507b6481575d519) for dependency management, ESM support and updates to the addon's entry points.\n*   [`tsup.config.ts`](https://github.com/storybookjs/addon-kit/compare/79282986..fa7ee7c#diff-8fed899bdbc24789a7bb4973574e624ed6207c6ce572338bc3c3e117672b2a2) for bundling changes, factoring in Storybook's globals.\n*   [`.storybook/local-preset.js`](https://github.com/storybookjs/addon-kit/compare/79282986..fa7ee7c#diff-390b53ea479b1ceffcbf31944f644ee23aa9f337b75a8a0ffd815bed50d376cb) to support the ESM migration.\n\nFor a complete overview of the changes applied to the Addon Kit to fully support Storybook 8.0, see the following [diff view](https://github.com/storybookjs/addon-kit/compare/79282986..fa7ee7c).\n\n## [Releasing](#releasing)\n\nTo support Storybook 8.0, we encourage you to release a new major version of your addon and continue supporting 7.x with minor or patch versions. For experimental features or testing, opt for the `next` tag. This will allow you to test your addon in projects and gather feedback before releasing a stable version.\n\n## [Support](#support)\n\nIf you're still having issues with your addon after following this guide, please open a [new discussion](https://github.com/storybookjs/storybook/discussions/new?category=help) in our GitHub repository.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/frameworks/sveltekit?renderer=svelte",
    "markdown": "# StorybookChromatic\n\nStorybook for SvelteKit is a [framework](https://storybook.js.org/docs/contribute/framework) that makes it easy to develop and test UI components in isolation for [SvelteKit](https://kit.svelte.dev/) applications. It includes:\n\n*   🪄 Zero config\n*   🧩 Easily mock many Kit modules\n*   🔗 Automatic link handling\n*   💫 and more!\n\nStorybook for SvelteKit is only supported in [Svelte](https://storybook.js.org/docs/get-started/frameworks/sveltekit?renderer=svelte) projects.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/frameworks/svelte-vite?renderer=svelte",
    "markdown": "# StorybookChromatic\n\nStorybook for Svelte & Vite is a [framework](https://storybook.js.org/docs/contribute/framework) that makes it easy to develop and test UI components in isolation for applications using [Svelte](https://svelte.dev/) built with [Vite](https://vitejs.dev/).\n\nStorybook for Svelte & Vite is only supported in [Svelte](https://storybook.js.org/docs/get-started/frameworks/svelte-vite?renderer=svelte) projects.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-tests/test-coverage",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nTest coverage is the practice of measuring whether existing tests fully cover your code. That means surfacing areas which aren't currently being tested, such as: conditions, logic branches, functions and variables.\n\nCoverage tests examine the instrumented code against a set of industry-accepted best practices. They act as the last line of QA to improve the quality of your test suite.\n\n## [Code instrumentation with the coverage addon](#code-instrumentation-with-the-coverage-addon)\n\nStorybook provides an official [test coverage addon](https://storybook.js.org/addons/@storybook/addon-coverage). Powered by [Istanbul](https://istanbul.js.org/), which allows out-of-the-box code instrumentation for the most commonly used frameworks and builders in the JavaScript ecosystem.\n\n### [Set up the coverage addon](#set-up-the-coverage-addon)\n\nEngineered to work alongside modern testing tools (e.g., [Playwright](https://playwright.dev/)), the coverage addon automatically instruments your code and generates code coverage data. For an optimal experience, we recommend using the [test runner](https://storybook.js.org/docs/writing-tests/test-runner) alongside the coverage addon to run your tests.\n\nRun the following command to install the addon.\n\nUpdate your Storybook configuration (in `.storybook/main.js|ts`) to include the coverage addon.\n\nStart your Storybook with:\n\nFinally, open a new terminal window and run the test-runner with:\n\n![Coverage test output](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Ftest-runner-coverage-result.png&w=3840&q=75)\n\n### [Configure](#configure)\n\nBy default, the [`@storybook/addon-coverage`](https://storybook.js.org/addons/@storybook/addon-coverage) offers zero-config support for Storybook and instruments your code via [`istanbul-lib-instrument`](https://www.npmjs.com/package/istanbul-lib-instrument) for [Webpack](https://webpack.js.org/), or [`vite-plugin-istanbul`](https://github.com/iFaxity/vite-plugin-istanbul) for [Vite](https://vitejs.dev/). However, you can extend your Storybook configuration file (i.e., `.storybook/main.js|ts`) and provide additional options to the addon. Listed below are the available options divided by builder and examples of how to use them.\n\n| Vite options | Description | Type |\n| --- | --- | --- |\n| `checkProd` | Configures the plugin to skip instrumentation in production environments  <br>`options: { istanbul: { checkProd: true,}}` | `boolean` |\n| `cwd` | Configures the working directory for the coverage tests.  <br>Defaults to `process.cwd()`  <br>`options: { istanbul: { cwd: process.cwd(),}}` | `string` |\n| `cypress` | Replaces the `VITE_COVERAGE` environment variable with `CYPRESS_COVERAGE`.  <br>Requires Cypress's [code coverage](https://docs.cypress.io/guides/tooling/code-coverage)  <br>`options: { istanbul: { cypress: true,}}` | `boolean` |\n| `exclude` | Overrides the [default exclude list](https://github.com/storybookjs/addon-coverage/blob/main/src/constants.ts) with the provided list of files or directories to exclude from coverage  <br>`options: { istanbul: { exclude: ['**/stories/**'],}}` | `Array<String>` or `string` |\n| `extension` | Extends the [default extension list](https://github.com/storybookjs/addon-coverage/blob/main/src/constants.ts) with the provided list of file extensions to include in coverage  <br>`options: { istanbul: { extension: ['.js', '.cjs', '.mjs'],}}` | `Array<String>` or `string` |\n| `forceBuildInstrument` | Configures the plugin to add instrumentation in build mode  <br>`options: { istanbul: { forceBuildInstrument: true,}}` | `boolean` |\n| `include` | Select the files to collect coverage  <br>`options: { istanbul: { include: ['**/stories/**'],}}` | `Array<String>` or `string` |\n| `nycrcPath` | Defines the relative path for the existing nyc [configuration file](https://github.com/istanbuljs/nyc?tab=readme-ov-file#configuration-files)  <br>`options: { istanbul: { nycrcPath: '../nyc.config.js',}}` | `string` |\n| `requireEnv` | Overrides the `VITE_COVERAGE` environment variable's value by granting access to the `env` variables  <br>`options: { istanbul: { requireEnv: true,}}` | `boolean` |\n\n| Webpack 5 options | Description | Type |\n| --- | --- | --- |\n| `autoWrap` | Provides support for top-level return statements by wrapping the program code in a function  <br>`options: { istanbul: { autoWrap: true,}}` | `boolean` |\n| `compact` | Condenses the output of the instrumented code. Useful for debugging  <br>`options: { istanbul: { compact: false,}}` | `boolean` |\n| `coverageVariable` | Defines the global variable name that Istanbul will use to store coverage results  <br>`options: { istanbul: { coverageVariable: '__coverage__',}}` | `string` |\n| `cwd` | Configures the working directory for the coverage tests.  <br>Defaults to `process.cwd()`  <br>`options: { istanbul: { cwd: process.cwd(),}}` | `string` |\n| `debug` | Enables the debug mode for additional logging information during the instrumentation process  <br>`options: { istanbul: { debug: true,}}` | `boolean` |\n| `esModules` | Enables support for ES Module syntax  <br>`options: { istanbul: { esModules: true,}}` | `boolean` |\n| `exclude` | Overrides the [default exclude list](https://github.com/storybookjs/addon-coverage/blob/main/src/constants.ts) with the provided list of files or directories to exclude from coverage  <br>`options: { istanbul: { exclude: ['**/stories/**'],}}` | `Array<String>` or `string` |\n| `extension` | Extends the [default extension list](https://github.com/storybookjs/addon-coverage/blob/main/src/constants.ts) with the provided list of file extensions to include in coverage  <br>`options: { istanbul: { extension: ['.js', '.cjs', '.mjs'],}}` | `Array<String>` or `string` |\n| `include` | Select the files to collect coverage  <br>`options: { istanbul: { include: ['**/stories/**'],}}` | `Array<String>` or `string` |\n| `nycrcPath` | Defines the relative path for the existing nyc [configuration file](https://github.com/istanbuljs/nyc?tab=readme-ov-file#configuration-files)  <br>`options: { istanbul: { nycrcPath: '../nyc.config.js',}}` | `string` |\n| `preserveComments` | Includes comments in the instrumented code  <br>`options: { istanbul: { preserveComments: true,}}` | `boolean` |\n| `produceSourceMap` | Configures Instanbul to generate a source map for the instrumented code  <br>`options: { istanbul: { produceSourceMap: true,}}` | `boolean` |\n| `sourceMapUrlCallback` | Defines a callback function invoked with the filename and the source map URL when a source map is generated  <br>`options: { istanbul: { sourceMapUrlCallback: (filename, url) => {},}}` | `function` |\n\nOut of the box, code coverage tests work seamlessly with Storybook's test-runner and the [`@storybook/addon-coverage`](https://storybook.js.org/addons/@storybook/addon-coverage). However, that doesn't mean you can't use additional reporting tools (e.g., [Codecov](https://about.codecov.io/)). For instance, if you're working with [LCOV](https://wiki.documentfoundation.org/Development/Lcov), you can use the generated output (in `coverage/storybook/coverage-storybook.json`) and create your own report with:\n\n* * *\n\n## [Troubleshooting](#troubleshooting)\n\n### [Run test coverage in other frameworks](#run-test-coverage-in-other-frameworks)\n\nIf you intend on running coverage tests in frameworks with special files like Vue 3 or Svelte, you'll need to adjust your configuration and enable the required file extensions. For example, if you're using Vue, you'll need to add the following to your nyc configuration file (i.e., `.nycrc.json` or `nyc.config.js`):\n\n### [The coverage addon doesn't support optimized builds](#the-coverage-addon-doesnt-support-optimized-builds)\n\nIf you generated a production build optimized for performance with the [`--test`](https://storybook.js.org/docs/sharing/publish-storybook#customizing-the-build-for-performance) flag, and you're using the coverage addon to run tests against your Storybook, you may run into a situation where the coverage addon doesn't instrument your code. This is due to how the flag works, as it removes addons that have an impact on performance (e.g., [`Docs`](https://storybook.js.org/docs/writing-docs), [coverage addon](https://storybook.js.org/addons/@storybook/addon-coverage)). To resolve this issue, you'll need to adjust your Storybook configuration file (i.e., `.storybook/main.js|ts`) and include the [`disabledAddons`](https://storybook.js.org/docs/api/main-config/main-config-build#testdisabledaddons) option to allow the addon to run tests at the expense of a slower build.\n\n### [The coverage addon doesn't support instrumented code](#the-coverage-addon-doesnt-support-instrumented-code)\n\nAs the [coverage addon](https://storybook.js.org/addons/@storybook/addon-coverage) is based on Webpack5 loaders and Vite plugins for code instrumentation, frameworks that don't rely upon these libraries (e.g., Angular configured with Webpack), will require additional configuration to enable code instrumentation. In that case, you can refer to the following [repository](https://github.com/yannbf/storybook-coverage-recipes) for more information.\n\n**Learn about other UI tests**\n\n*   [Test runner](https://storybook.js.org/docs/writing-tests/test-runner) to automate test execution\n*   [Visual tests](https://storybook.js.org/docs/writing-tests/visual-testing) for appearance\n*   [Accessibility tests](https://storybook.js.org/docs/writing-tests/accessibility-testing) for accessibility\n*   [Interaction tests](https://storybook.js.org/docs/writing-tests/interaction-testing) for user behavior simulation\n*   Coverage tests for measuring code coverage\n*   [Snapshot tests](https://storybook.js.org/docs/writing-tests/snapshot-testing/snapshot-testing) for rendering errors and warnings\n*   [End-to-end tests](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests) for simulating real user scenarios\n*   [Unit tests](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests) for functionality",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/frameworks/svelte-webpack5?renderer=svelte",
    "markdown": "# StorybookChromatic\n\nStorybook for Svelte & Webpack is a [framework](https://storybook.js.org/docs/contribute/framework) that makes it easy to develop and test UI components in isolation for applications using [Svelte](https://svelte.dev/) built with [Webpack](https://webpack.js.org/).\n\nStorybook for Svelte & Webpack is only supported in [Svelte](https://storybook.js.org/docs/get-started/frameworks/svelte-webpack5?renderer=svelte) projects.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/styling-and-css",
    "markdown": "# StorybookChromatic\n\nThere are many ways to include CSS in a web application, and correspondingly there are many ways to include CSS in Storybook. Usually, it is best to try and replicate what your application does with styling in Storybook’s configuration.\n\n## [CSS](#css)\n\nStorybook supports importing CSS files in a few different ways. Storybook will inject these tags into the preview iframe where your components render, not the Storybook Manager UI. The best way to import CSS depends on your project's configuration and your preferences.\n\n### [Import bundled CSS (Recommended)](#import-bundled-css-recommended)\n\nAll Storybooks are pre-configured to recognize imports for CSS files. To add global CSS for all your stories, import it in [`.storybook/preview.ts`](https://storybook.js.org/docs/configure/index#configure-story-rendering). These files will be subject to HMR, so you can see your changes without restarting your Storybook server.\n\nIf your component files import their CSS files, this will work too. However, if you're using CSS processor tools like Sass or Postcss, you may need some more configuration.\n\n### [Include static CSS](#include-static-css)\n\nIf you have a global CSS file that you want to include in all your stories, you can import it in [`.storybook/preview-head.html`](https://storybook.js.org/docs/configure/story-rendering#adding-to-head). However, these files will not be subject to HMR, so you'll need to restart your Storybook server to see your changes.\n\n## [CSS modules](#css-modules)\n\n### [Vite](#vite)\n\nVite comes with CSS modules support out-of-the-box. If you have customized the CSS modules configuration in your `vite.config.js` this will automatically be applied to your Storybook as well. Read more about [Vite's CSS modules support](https://vitejs.dev/guide/features.html#css-modules).\n\n### [Webpack](#webpack)\n\nUsing `@storybook/nextjs`?\n\nStorybook recreates your Next.js configuration, so you can use CSS modules in your stories without any extra configuration.\n\nIf you're using Webpack and want to use CSS modules, you'll need some extra configuration. We recommend installing [`@storybook/addon-styling-webpack`](https://storybook.js.org/addons/@storybook/addon-styling-webpack/) to help you configure these tools.\n\n## [PostCSS](#postcss)\n\n### [Vite](#vite-1)\n\nVite comes with PostCSS support out-of-the-box. If you have customized the PostCSS configuration in your `vite.config.js` this will automatically be applied to your Storybook as well. Read more about [Vite's PostCSS support](https://vitejs.dev/guide/features.html#postcss).\n\n### [Webpack](#webpack-1)\n\nUsing `@storybook/nextjs`?\n\nStorybook recreates your Next.js configuration, so you can use PostCSS in your stories without any extra configuration.\n\nIf you're using Webpack and want to use PostCSS, you'll need some extra configuration. We recommend installing [`@storybook/addon-styling-webpack`](https://storybook.js.org/addons/@storybook/addon-styling-webpack/) to help you configure these tools.\n\n## [CSS pre-processors](#css-pre-processors)\n\n### [Vite](#vite-2)\n\nVite comes with Sass, Less, and Stylus support out-of-the-box. Read more about [Vite's CSS Pre-processor support](https://vitejs.dev/guide/features.html#css-pre-processors).\n\n### [Webpack](#webpack-2)\n\nUsing `@storybook/nextjs`?\n\nStorybook recreates your Next.js configuration, so you can use Sass in your stories without any extra configuration.\n\nIf you're using Webpack and want to use Sass or less, you'll need some extra configuration. We recommend installing [`@storybook/addon-styling-webpack`](https://storybook.js.org/addons/@storybook/addon-styling-webpack/) to help you configure these tools. Or if you'd prefer, you can customize [Storybook's webpack configuration yourself](https://storybook.js.org/docs/builders/webpack#override-the-default-configuration) to include the appropriate loader(s).\n\n## [CSS-in-JS](#css-in-js)\n\nCSS-in-JS libraries are designed to use basic JavaScript, and they often work in Storybook without any extra configuration. Some libraries expect components to render in a specific rendering “context” (for example, to provide themes), which can be accomplished with `@storybook/addon-themes`'s [`withThemeFromJSXProvider` decorator](https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#withthemefromjsxprovider).\n\n## [Adding webfonts](#adding-webfonts)\n\n### [`.storybook/preview-head.html`](#storybookpreview-headhtml)\n\nIf you need webfonts to be available, you may need to add some code to the [`.storybook/preview-head.html`](https://storybook.js.org/docs/configure/story-rendering#adding-to-head) file. We recommend including any assets with your Storybook if possible, in which case you likely want to configure the [static file location](https://storybook.js.org/docs/configure/integration/images-and-assets#serving-static-files-via-storybook-configuration).\n\n### [`.storybook/preview.ts`](#storybookpreviewts)\n\nIf you're using something like [`fontsource`](https://fontsource.org/) for your fonts, you can import the needed css files in your [`.storybook/preview.ts`](https://storybook.js.org/docs/configure/index#configure-story-rendering) file.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure",
    "markdown": "# StorybookChromatic\n\nStorybook is configured via a folder called `.storybook`, which contains various configuration files.\n\nNote that you can change the folder that Storybook uses by setting the `-c` flag to your `storybook dev` and `storybook build` [CLI commands](https://storybook.js.org/docs/api/cli-options).\n\n## [Configure your Storybook project](#configure-your-storybook-project)\n\nStorybook's main configuration (i.e., the `main.js|ts`) defines your Storybook project's behavior, including the location of your stories, the addons you use, feature flags and other project-specific settings. This file should be in the `.storybook` folder in your project's root directory. You can author this file in either JavaScript or [TypeScript](https://storybook.js.org/docs/configure/integration/typescript). Listed below are the available options and examples of how to use them.\n\nThis configuration file is a [preset](https://storybook.js.org/docs/addons/addon-types) and, as such, has a powerful interface, which can be further customized. Read our documentation on writing [presets](https://storybook.js.org/docs/addons/writing-presets) to learn more.\n\n| Configuration element | Description |\n| --- | --- |\n| `stories` | The array of globs that indicates the [location of your story files](#configure-story-loading), relative to `main.js` |\n| `staticDirs` | Sets a list of directories of [static files](https://storybook.js.org/docs/configure/integration/images-and-assets#serving-static-files-via-storybook-configuration) to be loaded by Storybook  <br>`staticDirs: ['../public']` |\n| `addons` | Sets the list of [addons](https://storybook.js.org/integrations) loaded by Storybook  <br>`addons: ['@storybook/addon-essentials']` |\n| `typescript` | Configures how Storybook handles [TypeScript files](https://storybook.js.org/docs/configure/integration/typescript)  <br>`typescript: { check: false, checkOptions: {} }` |\n| `framework` | Configures Storybook based on a set of [framework-specific](https://storybook.js.org/docs/configure/integration/frameworks) settings  <br>`framework: { name: '@storybook/svelte-vite', options:{} }` |\n| `core` | Configures Storybook's [internal features](https://storybook.js.org/docs/api/main-config/main-config-core)  <br>`core: { disableTelemetry: true, }` |\n| `docs` | Configures Storybook's [auto-generated documentation](https://storybook.js.org/docs/writing-docs/autodocs)  <br>`docs: { autodocs: 'tag' }` |\n| `features` | Enables Storybook's [additional features](https://storybook.js.org/docs/api/main-config/main-config-features)  <br>See table below for a list of available features |\n| `refs` | Configures [Storybook composition](https://storybook.js.org/docs/sharing/storybook-composition)  <br>`refs: { example: { title: 'ExampleStorybook', url:'https://your-url.com' } }` |\n| `logLevel` | Configures Storybook's logs in the browser terminal. Useful for debugging  <br>`logLevel: 'debug'` |\n| `webpackFinal` | Customize Storybook's [Webpack](https://storybook.js.org/docs/builders/webpack) setup  <br>`webpackFinal: async (config:any) => { return config; }` |\n| `viteFinal` | Customize Storybook's Vite setup when using the [vite builder](https://github.com/storybookjs/builder-vite)  <br>`viteFinal: async (config: Vite.InlineConfig, options: Options) => { return config; }` |\n| `env` | Defines custom Storybook [environment variables](https://storybook.js.org/docs/configure/environment-variables#using-storybook-configuration).  <br>`env: (config) => ({...config, EXAMPLE_VAR: 'Example var' }),` |\n| `build` | Optimizes Storybook's production [build](https://storybook.js.org/docs/api/main-config/main-config-build) for performance by excluding specific features from the bundle. Useful when decreased build times are a priority.  <br>`build: { test: {} }` |\n\n## [Configure story loading](#configure-story-loading)\n\nBy default, Storybook will load stories from your project based on a glob (pattern matching string) in `.storybook/main.js|ts` that matches all files in your project with extension `.stories.*`. The intention is for you to colocate a story file along with the component it documents.\n\nIf you want to use a different naming convention, you can alter the glob using the syntax supported by [picomatch](https://github.com/micromatch/picomatch#globbing-features).\n\nFor example, if you wanted to pull both `.md` and `.js` files from the `my-project/src/components` directory, you could write:\n\n### [With a configuration object](#with-a-configuration-object)\n\nAdditionally, you can customize your Storybook configuration to load your stories based on a configuration object. For example, if you wanted to load your stories from a `packages/components` directory, you could adjust your `stories` configuration field into the following:\n\nWhen Storybook starts, it will look for any file containing the `stories` extension inside the `packages/components` directory and generate the titles for your stories.\n\n### [With a directory](#with-a-directory)\n\nYou can also simplify your Storybook configuration and load the stories using a directory. For example, if you want to load all the stories inside a `packages/MyStories`, you can adjust the configuration as such:\n\n### [With a custom implementation](#with-a-custom-implementation)\n\nYou can also adjust your Storybook configuration and implement custom logic to load your stories. For example, suppose you were working on a project that includes a particular pattern that the conventional ways of loading stories could not solve. In that case, you could adjust your configuration as follows:\n\n#### [Known limitations](#known-limitations)\n\nBecause of the way stories are currently indexed in Storybook, loading stories on demand has a couple of minor limitations at the moment:\n\n*   [CSF formats](https://storybook.js.org/docs/api/csf) from version 1 to version 3 are supported.\n*   Custom `storySort` functions are allowed based on a restricted API.\n\n## [Configure story rendering](#configure-story-rendering)\n\nTo control the way stories are rendered and add global [decorators](https://storybook.js.org/docs/writing-stories/decorators#global-decorators) and [parameters](https://storybook.js.org/docs/writing-stories/parameters#global-parameters), create a `.storybook/preview.js` file. This is loaded in the Canvas UI, the “preview” iframe that renders your components in isolation. Use `preview.js` for global code (such as [CSS imports](https://storybook.js.org/docs/get-started/setup#render-component-styles) or JavaScript mocks) that applies to all stories.\n\nThe `preview.js` file can be an ES module and export the following keys:\n\n*   `decorators` - an array of global [decorators](https://storybook.js.org/docs/writing-stories/decorators#global-decorators)\n*   `parameters` - an object of global [parameters](https://storybook.js.org/docs/writing-stories/parameters#global-parameters)\n*   `globalTypes` - definition of [globalTypes](https://storybook.js.org/docs/essentials/toolbars-and-globals#global-types-and-the-toolbar-annotation)\n\nIf you’re looking to change how to order your stories, read about [sorting stories](https://storybook.js.org/docs/writing-stories/naming-components-and-hierarchy#sorting-stories).\n\n## [Configure Storybook’s UI](#configure-storybooks-ui)\n\nTo control the behavior of Storybook’s UI (the **“manager”**), you can create a `.storybook/manager.js` file.\n\nThis file does not have a specific API but is the place to set [UI options](https://storybook.js.org/docs/configure/user-interface/features-and-behavior) and to configure Storybook’s [theme](https://storybook.js.org/docs/configure/user-interface/theming).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api",
    "markdown": "# StorybookChromatic\n\nAn overview of all available API references for Storybook.\n\n## [Configuration](#configuration)\n\n| Name | Description |\n| --- | --- |\n| [`main.js\\|ts`](https://storybook.js.org/docs/api/main-config/main-config) | Storybook's primary configuration file, which specifies your Storybook project's behavior, including the location of your stories, the addons you use, feature flags and other project-specific settings. |\n| [`preview.js\\|jsx\\|ts\\|tsx`](https://storybook.js.org/docs/configure/#configure-story-rendering) | This configuration file controls the way stories are rendered. You can also use it to run code that applies to all stories. |\n| [`manager.js\\|ts`](https://storybook.js.org/docs/configure/#configure-storybooks-ui) | This configuration file controls the behavior of Storybook's UI, the manager. |\n| [CLI](https://storybook.js.org/docs/api/cli-options) | Storybook is a CLI tool. You can start Storybook in development mode or build a static version of your Storybook. |\n\n## [Stories](#stories)\n\n| Name | Description |\n| --- | --- |\n| [CSF](https://storybook.js.org/docs/api/csf) | Component Story Format (CSF) is the API for writing stories. It's an [open standard](https://github.com/ComponentDriven/csf) based on ES6 modules that is portable beyond Storybook. |\n| [ArgTypes](https://storybook.js.org/docs/api/arg-types) | ArgTypes specify the behavior of [args](https://storybook.js.org/docs/writing-stories/args). By specifying the type of an arg, you constrain the values that it can accept and provide information about args that are not explicitly set. |\n| [Parameters](https://storybook.js.org/docs/api/parameters) | Parameters are static metadata used to configure your [stories](https://storybook.js.org/docs/get-started/whats-a-story) [addons](https://storybook.js.org/docs/addons) in Storybook. They are specified at the story, meta (component), project (global) levels. |\n\n## [Docs](#docs)\n\n| Name | Description |\n| --- | --- |\n| [Doc blocks](https://storybook.js.org/docs/writing-docs/doc-blocks/#available-blocks) | Storybook offers several doc blocks to help document your components and other aspects of your project. |",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/upgrading",
    "markdown": "# StorybookChromatic\n\nThe frontend ecosystem is a fast-moving place. Regular dependency upgrades are a way of life, whether upgrading a framework, library, tooling, or all of the above! Storybook provides a few resources to help ease the pain of upgrading.\n\n## [Upgrade script](#upgrade-script)\n\nThe most common upgrade is Storybook itself. [Storybook releases](https://storybook.js.org/releases) follow [Semantic Versioning](https://semver.org/). We publish patch releases with bug fixes continuously, minor versions of Storybook with new features every few months, and major versions of Storybook with breaking changes roughly once per year.\n\nTo help ease the pain of keeping Storybook up-to-date, we provide a command-line script:\n\nThe `upgrade` command will use whichever version you specify. For example:\n\n*   `storybook@latest upgrade` will upgrade to the latest version\n*   `storybook@7.6.10 upgrade` will upgrade to `7.6.10`\n*   `storybook@7 upgrade` will upgrade to the newest `7.x.x` version\n\nAfter running the command, the script will:\n\n*   Upgrade all Storybook packages in your project to the specified version\n*   Run the relevant [automigrations](https://storybook.js.org/docs/migration-guide/index#automatic-upgrade) factoring in the [breaking changes](https://storybook.js.org/docs/migration-guide/index#major-breaking-changes) between your current version and the specified version\n\nIn addition to running the command, we also recommend checking the [MIGRATION.md file](https://github.com/storybookjs/storybook/blob/next/MIGRATION.mdx), for the detailed log of relevant changes and deprecations that might affect your upgrade.\n\n### [Verifying the upgrade](#verifying-the-upgrade)\n\nTo help you verify that the upgrade was completed and that your project is still working as expected, the Storybook CLI provides the [`doctor`](https://storybook.js.org/docs/api/cli-options#doctor) command that allows you to do a health check on your project for common issues that might arise after an upgrade, such as duplicated dependencies, incompatible addons or mismatched versions. To perform the health check, run the following command with your package manager of choice:\n\n## [Automigrate script](#automigrate-script)\n\nStorybook upgrades are not the only thing to consider: changes in the ecosystem also present challenges. For example well-known frontend frameworks, such as [Angular](https://update.angular.io/?l=2&v=16.0-17.0), [Next.js](https://nextjs.org/docs/pages/building-your-application/upgrading) or [Svelte](https://svelte.dev/docs/v4-migration-guide) have been rolling out significant changes to their ecosystem, so even if you don't upgrade your Storybook version, you might need to update your configuration accordingly. That's what Automigrate is for:\n\nIt runs a set of standard configuration checks, explains what is potentially out-of-date, and offers to fix it for you automatically. It also points to the relevant documentation so you can learn more. It runs automatically as part of [`storybook upgrade`](#upgrade-script) command, but it's also available on its own if you don't want to upgrade Storybook.\n\n## [Prereleases](#prereleases)\n\nIn addition to the above, Storybook is under constant development, and we publish pre-release versions almost daily. Pre-releases are the best way to try out new features before they are generally available, and we do our best to keep them as stable as possible, although this is not always possible.\n\nTo upgrade to the latest pre-release:\n\nThe `upgrade` command will use whichever version you specify. For example:\n\n*   `storybook@next upgrade` will upgrade to the newest pre-release version\n*   `storybook@8.0.0-beta.1 upgrade` will upgrade to `8.0.0-beta.1`\n*   `storybook@8 upgrade` will upgrade to the newest `8.x` version\n\nIf you'd like to downgrade to a stable version, manually edit the package version numbers in your `package.json` and re-install.\n\nStorybook collects completely anonymous data to help us improve user experience. Participation is optional, and you may [opt-out](https://storybook.js.org/docs/configure/telemetry#how-to-opt-out) if you'd not like to share any information.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/sharing/publish-storybook",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nTeams publish Storybook online to review and collaborate on works in progress. That allows developers, designers, PMs, and other stakeholders to check if the UI looks right without touching code or requiring a local dev environment.\n\n## [Build Storybook as a static web application](#build-storybook-as-a-static-web-application)\n\nFirst, we'll need to build Storybook as a static web application. The functionality is already built-in and pre-configured for most supported frameworks. Others require a bit of customization (e.g., Angular). Run the following command inside your project's root directory:\n\nYou can provide additional flags to customize the command. Read more about the flag options [here](https://storybook.js.org/docs/api/cli-options).\n\nStorybook will create a static web application capable of being served by any web server. Preview it locally by running the following command:\n\n### [Customizing the build for performance](#customizing-the-build-for-performance)\n\nBy default, Storybook's production build will encapsulate all stories and documentation into the production bundle. This is ideal for small projects but can cause performance issues for larger projects or when decreased build times are a priority (e.g., testing, CI/CD). If you need, you can customize the production build with the [`test` option](https://storybook.js.org/docs/api/main-config/main-config-build#test) in your `main.js|ts` configuration file and adjust your build script to enable the optimizations with the `--test` [flag](https://storybook.js.org/docs/api/cli-options#build).\n\n## [Publish Storybook with Chromatic](#publish-storybook-with-chromatic)\n\nOnce you've built your Storybook as a static web application, you can publish it to your web host. We recommend [Chromatic](https://www.chromatic.com/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook), a free publishing service made for Storybook that documents, versions, and indexes your UI components securely in the cloud.\n\n![Storybook publishing workflow](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fworkflow-publish.png&w=3840&q=75)\n\nTo get started, sign up with your GitHub, GitLab, Bitbucket, or email and generate a unique _project-token_ for your project.\n\nNext, install the [Chromatic CLI](https://www.npmjs.com/package/chromatic) package from npm:\n\nRun the following command after the package finishes installing. Make sure that you replace `your-project-token` with your own project token.\n\nWhen Chromatic finishes, you should have successfully deployed your Storybook. Preview it by clicking the link provided (i.e., [https://random-uuid.chromatic.com](https://random-uuid.chromatic.com/)).\n\n![Chromatic publish build](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fbuild-publish-only.png&w=3840&q=75)\n\n### [Setup CI to publish automatically](#setup-ci-to-publish-automatically)\n\nConfigure your CI environment to publish your Storybook and [run Chromatic](https://www.chromatic.com/docs/ci?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook) whenever you push code to a repository. Let's see how to set it up using GitHub Actions.\n\nIn your project's root directory, add a new file called `chromatic.yml` inside the `.github/workflows` directory:\n\nSecrets are secure environment variables provided by GitHub so that you don't need to hard code your `project-token`. Read the [official documentation](https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository) to learn how to configure them.\n\nCommit and push the file. Congratulations, you've successfully automated publishing your Storybook. Now whenever you open a PR you’ll get a handy link to your published Storybook in your PR checks.\n\n![PR check publish](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fprbadge-publish.png&w=3840&q=75)\n\n### [Review with your team](#review-with-your-team)\n\nPublishing Storybook as part of the development process makes it quick and easy to [gather team feedback](https://storybook.js.org/tutorials/design-systems-for-developers/react/en/review/).\n\nA common method to ask for review is to paste a link to the published Storybook in a pull request or Slack.\n\nIf you publish your Storybook to Chromatic, you can use the [UI Review](https://www.chromatic.com/features/publish?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook) feature to automatically scan your PRs for new and updated stories. That makes it easy to identify what changed and give feedback.\n\n![UI review in Chromatic](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fworkflow-uireview.png&w=3840&q=75)\n\n### [Versioning and history](#versioning-and-history)\n\nWhen you publish Storybook, you also get component history and versioning down to the commit. That's useful during implementation review for comparing components between branches/commits to past versions.\n\n![Library history in Chromatic](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fworkflow-history-versioning.png&w=3840&q=75)\n\n## [Publish Storybook to other services](#publish-storybook-to-other-services)\n\nSince Storybook is built as a static web application, you can also publish it to any web host, including [GitHub Pages](https://docs.github.com/en/pages), [Netlify](https://www.netlify.com/), [AWS S3](https://aws.amazon.com/s3/), and more. However, features such as [Composition](https://storybook.js.org/docs/sharing/storybook-composition), [embedding stories](https://storybook.js.org/docs/sharing/embed), history, versioning, and assets may require tighter integration with Storybook APIs and secure authentication. If you want to know more about headers, you can refer to the [Migration guide](https://github.com/storybookjs/storybook/blob/main/MIGRATION.md#deploying-build-artifacts). Additionally, if you want to learn about the Component Publishing Protocol (CPP), you can find more information below.\n\n### [GitHub Pages](#github-pages)\n\nTo deploy Storybook on GitHub Pages, use the community-built [Deploy Storybook to GitHub Pages](https://github.com/bitovi/github-actions-storybook-to-github-pages) Action. To enable it, create a new workflow file inside your `.github/workflows` directory with the following content:\n\nThe GitHub Pages Action requires additional configuration options to customize the deployment process. Refer to the [official documentation](https://github.com/marketplace/actions/deploy-storybook-to-github-pages) for more information.\n\n## Component Publishing Protocol (CPP)\n\nStorybook can communicate with services that host built Storybooks online. This enables features such as [Composition](https://storybook.js.org/docs/sharing/storybook-composition). We categorize services via compliance with the \"Component Publishing Protocol\" (CPP) with various levels of support in Storybook.\n\n### [CPP level 1](#cpp-level-1)\n\nThis level of service serves published Storybooks and makes the following available:\n\n*   Versioned endpoints, URLs that resolve to different published Storybooks depending on a `version=x.y.z` query parameter (where `x.y.z` is the released version of the package).\n*   Support for `/index.json` (formerly `/stories.json`) endpoint, which returns a list of stories and their metadata.\n*   Support for `/metadata.json` and the `releases` field.\n\nExample: [Chromatic](https://www.chromatic.com/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook)\n\n### [CPP level 0](#cpp-level-0)\n\nThis level of service can serve published Storybooks but has no further integration with Storybook’s APIs.\n\nExamples: [Netlify](https://www.netlify.com/), [S3](https://aws.amazon.com/en/s3/)\n\n## [Search engine optimization (SEO)](#search-engine-optimization-seo)\n\nIf your Storybook is publicly viewable, you may wish to configure how it is represented in search engine result pages.\n\n### [Description](#description)\n\nYou can provide a description for search engines to display in the results listing, by adding the following to the `manager-head.html` file in your config directory:\n\n### [Preventing your Storybook from being crawled](#preventing-your-storybook-from-being-crawled)\n\nYou can prevent your published Storybook from appearing in search engine results by including a noindex meta tag, which you can do by adding the following to the `manager-head.html` file in your config directory:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/frameworks/web-components-vite?renderer=web-components",
    "markdown": "# StorybookChromatic\n\nStorybook for Web components & Vite is a [framework](https://storybook.js.org/docs/contribute/framework) that makes it easy to develop and test UI components in isolation for applications using [Web components](https://www.webcomponents.org/introduction) built with [Vite](https://vitejs.dev/).\n\nStorybook for Web components & Vite is only supported in [Web components](https://storybook.js.org/docs/get-started/frameworks/web-components-vite?renderer=web-components) projects.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/sharing/embed",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nEmbed stories to showcase your work to teammates and the developer community at large. In order to use embeds, your Storybook must be published and publicly accessible.\n\nStorybook supports `<iframe>` embeds out of the box. If you use Chromatic to [publish Storybook](https://storybook.js.org/docs/sharing/publish-storybook#publish-storybook-with-chromatic), you can also embed stories in Notion, Medium, and countless other platforms that support the oEmbed standard.\n\n## [Embed a story with the toolbar](#embed-a-story-with-the-toolbar)\n\nEmbed a story with the toolbar, and paste the published story URL. For example:\n\n  \n\n## [Embed a story without the toolbar](#embed-a-story-without-the-toolbar)\n\nTo embed a plain story without Storybook's toolbar, click the \"open canvas in new tab\" icon in the top-right corner of Storybook to get the canvas URL. For example:\n\n  \n\n## [Embed documentation](#embed-documentation)\n\nEmbed a documentation page by replacing `viewMode=story` with the uniquely auto-generated documentation entry for the story.\n\n  \n\n## [Embed stories on other platforms](#embed-stories-on-other-platforms)\n\nEvery platform has different levels of embed support. Check the documentation of your service to see how they recommend embedding external content.\n\nHow to embed in Medium\n\nPaste the Storybook URL into your Medium article, then press Enter. The embed will automatically resize to fit the story's height.\n\nWhile editing an article, Medium renders all embeds non-interactive. Once your article is published, it will become interactive. [Preview a demo on Medium](https://medium.com/@ghengeveld/embedding-storybook-on-medium-ce8a280c03ad).\n\n How to embed in Notion\n\nIn your Notion document, type /embed, press Enter, and paste the story URL as the embed link. You can resize the embed as necessary.\n\n![Embed Notion](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fembed-notion.png&w=750&q=75)\n\nHow to embed in Ghost\n\nType `/html` in your Ghost post, press Enter and paste the iframe URL. You can resize the embed via the width and height properties as required.\n\n![Embed Ghost](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fembed-ghost.png&w=1920&q=75)",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/frameworks/web-components-webpack5?renderer=web-components",
    "markdown": "# StorybookChromatic\n\nStorybook for Web components & Webpack is a [framework](https://storybook.js.org/docs/contribute/framework) that makes it easy to develop and test UI components in isolation for applications using [Web components](https://www.webcomponents.org/introduction) built with [Webpack](https://webpack.js.org/).\n\nStorybook for Web components & Webpack is only supported in [Web components](https://storybook.js.org/docs/get-started/frameworks/web-components-webpack5?renderer=web-components) projects.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/why-storybook",
    "markdown": "# StorybookChromatic\n\n## [The problem](#the-problem)\n\nThe web’s universality is pushing more complexity into the frontend. It began with responsive web design, which turned every user interface from one to 10, 100, 1000 different user interfaces. Over time, additional requirements piled on like devices, browsers, accessibility, performance, and async states.\n\nComponent-driven tools like React, Vue 3, and Angular help break down complex UIs into simple components but they’re not silver bullets. As frontends grow, the number of components swells. Mature projects can contain hundreds of components that yield thousands of discrete variations.\n\nTo complicate matters further, those UIs are painful to debug because they’re entangled in business logic, interactive states, and app context.\n\nThe breadth of modern frontends overwhelm existing workflows. Developers must consider countless UI variations, yet aren’t equipped to develop or organize them all. You end up in a situation where UIs are tougher to build, less satisfying to work on, and brittle.\n\n![UI multiverse](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fget-started%2Fmultiverse.png&w=3840&q=75)\n\n## [The solution](#the-solution)\n\n#### [Build UIs in isolation](#build-uis-in-isolation)\n\nEvery piece of UI is now a [component](https://www.componentdriven.org/). The superpower of components is that you don't need to spin up the whole app just to see how they render. You can render a specific variation in isolation by passing in props, mocking data, or faking events.\n\nStorybook is packaged as a small, development-only, [workshop](https://bradfrost.com/blog/post/a-frontend-workshop-environment/) that lives alongside your app. It provides an isolated iframe to render components without interference from app business logic and context. That helps you focus development on each variation of a component, even the hard-to-reach edge cases.\n\n#### [Capture UI variations as “stories”](#capture-ui-variations-as-stories)\n\nWhen developing a component variation in isolation, save it as a story. [Stories](https://github.com/ComponentDriven/csf) are a declarative syntax for supplying props and mock data to simulate component variations. Each component can have multiple stories. Each story allows you to demonstrate a specific variation of that component to verify appearance and behavior.\n\nYou write stories for granular UI component variation and then use those stories in development, testing, and documentation.\n\n#### [Storybook keeps track of every story](#storybook-keeps-track-of-every-story)\n\nStorybook is an interactive directory of your UI components and their stories. In the past, you'd have to spin up the app, navigate to a page, and contort the UI into the right state. This is a huge waste of time and bogs down frontend development. With Storybook, you can skip all those steps and jump straight to working on a UI component in a specific state.\n\n Where does Storybook fit into my project?\n\nStorybook is packaged as a small, development-only, [workshop](https://bradfrost.com/blog/post/a-frontend-workshop-environment/) that lives alongside your app. Install it by [running a command](https://storybook.js.org/docs/get-started/install).\n\nDuring development, run it in a separate node process. If you’re working on UI in isolation, the only thing you’ll need to run is Storybook.\n\nDoes Storybook work with my favorite libraries?\n\nStorybook aims to integrate with industry-standard tools and platforms to simplify setup. Thanks to our ambitious developer community, we’ve made significant progress. There are hundreds of [addons](https://storybook.js.org/addons/) and tutorials that walk through how to set up Storybook in all types of projects.\n\nIf you’re using a niche framework or a recently launched tool, we might not have an integration for it yet. Consider creating a [proof of concept](https://storybook.js.org/docs/addons/writing-addons) yourself first to lead the way for the rest of the community.\n\nWhat’s the recommended Storybook workflow?\n\nEvery team is different and so is their workflow. Storybook is designed to be incrementally adoptable. Teams can gradually try features to see what works best for them.\n\nMost community members choose a [Component-Driven](https://www.componentdriven.org/) workflow. UIs are developed in isolation from the “bottom up” starting with basic components then progressively combined to assemble pages.\n\n1.  Build each component in isolation and write stories for its variations.\n2.  Compose small components together to enable more complex functionality.\n3.  Assemble pages by combining composite components.\n4.  Integrate pages into your project by hooking up data and business logic.\n\n## [Benefits](#benefits)\n\nWhen you write stories for components, you get a bunch of additional benefits for free.\n\n**📝 Develop UIs that are more durable**\n\nIsolate components and pages and track their use cases as [stories](https://storybook.js.org/docs/writing-stories). Verify hard-to-reach edge cases of UI. Use addons to mock everything a component needs—context, API requests, device features, etc.\n\n**✅ Test UIs with less effort and no flakes**\n\nStories are a pragmatic, reproducible way of tracking UI states. Use them to spot-test the UI during development. Storybook offers built-in workflows for automated [Accessibility](https://storybook.js.org/docs/writing-tests/accessibility-testing), [Interaction](https://storybook.js.org/docs/writing-tests/interaction-testing), and [Visual](https://storybook.js.org/docs/writing-tests/visual-testing) testing. Or use stories as test cases by importing them into other JavaScript testing tools.\n\n**📚 Document UI for your team to reuse**\n\nStorybook is the single source of truth for your UI. Stories index all your components and their various states, making it easy for your team to find and reuse existing UI patterns. Storybook also auto-generates [documentation](https://storybook.js.org/docs/writing-docs) from those stories.\n\n**📤 Share how the UI actually works**\n\nStories show how UIs actually work, not just a picture of how they're supposed to work. That keeps everyone aligned on what's currently in production. [Publish Storybook](https://storybook.js.org/docs/sharing/publish-storybook) to get sign-off from teammates. Or [embed](https://storybook.js.org/docs/sharing/embed) them in wikis, Markdown, and Figma to streamline collaboration.\n\n**🚦Automate UI workflows**\n\nStorybook is compatible with your continuous integration workflow. Add it as a CI step to automate user interface testing, review implementation with teammates, and get signoff from stakeholders.\n\n## [Write stories once, reuse everywhere](#write-stories-once-reuse-everywhere)\n\nStorybook is powered by [Component Story Format](https://github.com/ComponentDriven/csf), an open standard based on JavaScript ES6 modules. This enables stories to interoperate between development, testing, and design tools. Each story is exported as a JavaScript function enabling you to reuse it with other tools. No vendor lock-in.\n\nReuse stories with [Jest](https://jestjs.io/) or [Vitest](https://vitest.dev/) and [Testing Library](https://testing-library.com/) to verify interactions. Put them in [Chromatic](https://www.chromatic.com/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook) for visual testing. Audit story accessibility with [Axe](https://github.com/dequelabs/axe-core). Or test user flows with [Playwright](https://playwright.dev/) and [Cypress](https://www.cypress.io/). Reuse unlocks more workflows at no extra cost.\n\n* * *\n\nStorybook is purpose-built to help you develop complex UIs faster with greater durability and lower maintenance. It’s used by 100s of [leading companies](https://storybook.js.org/showcase) and thousands of [developers](https://github.com/storybookjs/storybook/).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/story-rendering",
    "markdown": "# StorybookChromatic\n\nIn Storybook, your stories render in a particular “preview” iframe (also called the Canvas) inside the larger Storybook web application. The JavaScript build configuration of the preview is controlled by a [builder](https://storybook.js.org/docs/builders) config, but you also may want to run some code for every story or directly control the rendered HTML to help your stories render correctly.\n\n## [Running code for every story](#running-code-for-every-story)\n\nCode executed in the preview file (`.storybook/preview.js|ts`) runs for every story in your Storybook. This is useful for setting up global styles, initializing libraries, or anything else required to render your components.\n\nHere's an example of how you might use the preview file to initialize a library that must run before your components render:\n\n## [Adding to <head>](#adding-to-head)\n\nIf you need to add extra elements to the `head` of the preview iframe, for instance, to load static stylesheets, font files, or similar, you can create a file called [`.storybook/preview-head.html`](https://storybook.js.org/docs/configure/index#configure-story-rendering) and add tags like this:\n\nStorybook will inject these tags into the _preview iframe_ where your components render, not the Storybook application UI.\n\nHowever, it's also possible to modify the preview head HTML programmatically using a preset defined in the `main.js` file. Read the [presets documentation](https://storybook.js.org/docs/addons/writing-presets#ui-configuration) for more information.\n\n## [Adding to <body>](#adding-to-body)\n\nSometimes, you may need to add different tags to the `<body>`. Helpful for adding some custom content roots.\n\nYou can accomplish this by creating a file called `preview-body.html` inside your `.storybook` directory and adding tags like this:\n\nIf using relative sizing in your project (like `rem` or `em`), you may update the base `font-size` by adding a `style` tag to `preview-body.html`:\n\nStorybook will inject these tags into the _preview iframe_ where your components render, not the Storybook application UI.\n\nJust like how you have the ability to customize the preview `head` HTML tag, you can also follow the same steps to customize the preview `body` with a preset. To obtain more information on how to do this, refer to the [presets documentation](https://storybook.js.org/docs/addons/writing-presets#ui-configuration).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/sharing/design-integrations",
    "markdown": "# StorybookChromatic\n\nStorybook integrates with design tools to speed up your development workflow. That helps you debug inconsistencies earlier in the design process, discover existing components to reuse, and compare designs to stories.\n\n## [Figma](#figma)\n\n[Figma](https://www.figma.com/) is a collaborative UI design tool that allows multiple people to work on the same design simultaneously in the browser. There are two ways to integrate Storybook and Figma.\n\n*   [**Embed Storybook in Figma**](#embed-storybook-in-figma-with-the-plugin)\n*   [**Embed Figma in Storybook**](#embed-figma-in-storybook-with-the-addon)\n\n### [Embed Storybook in Figma with the plugin](#embed-storybook-in-figma-with-the-plugin)\n\n[Storybook Connect](https://www.figma.com/community/plugin/1056265616080331589/Storybook-Connect) is a Figma plugin that allows you to embed component stories in Figma. It’s powered by [Storybook embeds](https://storybook.js.org/docs/sharing/embed) and [Chromatic](https://www.chromatic.com/?utm_source=storybook_website&utm_medium=link&utm_campaign=storybook), a publishing tool created by the Storybook team.\n\n#### [Install plugin](#install-plugin)\n\nBefore we begin, you must have a Storybook [published to Chromatic](https://storybook.js.org/docs/sharing/publish-storybook#publish-storybook-with-chromatic). It provides the index, versions, and access control that back the plugin.\n\nGo to [Storybook Connect](https://www.figma.com/community/plugin/1056265616080331589/Storybook-Connect) to install the plugin.\n\nIn Figma, open the command palette (in Mac OS, use `Command + /`, in Windows use `Control + /`) and type `Storybook Connect` to enable it.\n\n![Figma palette Storybook connect](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Ffigma-plugin-open-in-figma.png&w=2048&q=75)\n\nFollow the instructions to connect and authenticate with Chromatic.\n\n#### [Link stories to Figma components](#link-stories-to-figma-components)\n\nLink stories to Figma components, variants, and instances.\n\nGo to a story in a Storybook published on Chromatic. Make sure it’s on the branch you want to link. Then copy the URL to the story.\n\nIn Figma, select the component, open the plugin, and paste the URL.\n\n![Story linked in Figma](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Ffigma-plugin-paste-url.png&w=2048&q=75)\n\nChromatic will automatically update your linked stories to reflect the most recent Storybook published on the branch you linked. That means the link persists even as you push new code.\n\nThe plugin does not support linking stories to Figma layers.\n\n#### [View stories in Figma](#view-stories-in-figma)\n\nOnce they're connected, you'll be able to view the story by clicking the link in the sidebar. Click \"View story\". Alternatively, open the plugin by using the command palette (in Mac OS, use `Command + /`, in Windows, use `Control + /`), then type `Storybook Connect`.\n\n![Figma sidebar with story link](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Ffigma-plugin-sidebar.png&w=3840&q=75)\n\n### [Embed Figma in Storybook with the addon](#embed-figma-in-storybook-with-the-addon)\n\n[Designs addon](https://storybook.js.org/addons/@storybook/addon-designs) allows you to embed Figma files and prototypes in Storybook.\n\n![Storybook addon figma](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fstorybook-figma-addon.png&w=3840&q=75)\n\n#### [Install design addon](#install-design-addon)\n\nRun the following command to install the addon.\n\nUpdate your Storybook configuration (in `.storybook/main.js|ts`) to include the addon.\n\n#### [Link Figma components to stories](#link-figma-components-to-stories)\n\nIn Figma, open the file you want to embed in Storybook. You can embed files, prototypes, components, and frames.\n\n*   Embed a file or prototype, click the \"Share\" button to generate a unique URL for the file then click \"Copy link\".\n    \n*   Embed a component or frame check \"Link to selected frame\" in the Share dialog. Or right click on the frame and go to \"Copy/Paste as\" » \"Copy link\".\n    \n\nIn Storybook, add a new [parameter](https://storybook.js.org/docs/writing-stories/parameters) named `design` to your story and paste the Figma URL. For example:\n\n#### [View designs in Storybook](#view-designs-in-storybook)\n\nClick the \"Design\" tab in the addon panel to view the embedded Figma design.\n\n![Design addon panel](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fdesign-addon-panel.png&w=1920&q=75)\n\n## [Zeplin](#zeplin)\n\n[Zeplin](https://zeplin.io/) is a design tool that generates styleguides from [Sketch](https://www.sketch.com/), [Figma](https://www.figma.com/), and [Adobe XD](https://www.adobe.com/products/xd.html).\n\nUse the [Zeplin addon](https://storybook.js.org/addons/storybook-zeplin) to connect Storybook. The addon displays designs from Zeplin alongside the currently selected story. It includes convenient tooling to overlay the design image atop the live component.\n\nZeplin's native app also supports [links to published Storybooks](https://support.zeplin.io/en/articles/5674596-connecting-your-storybook-instance-with-zeplin).\n\n![Zeplin Storybook addon](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fstorybook-zeplin-addon.png&w=3840&q=75)\n\n## [Zeroheight](#zeroheight)\n\n[Zeroheight](https://zeroheight.com/) is a collaborative styleguide generator for design systems. It showcases design, code, brand, and copywriting documentation in one place. Users can easily edit that documentation with a WYSIWYG editor.\n\nZeroheight integrates with [Storybook](https://zeroheight.com/3xlwst8/p/507ba7-storybook), enabling you to embed stories alongside your design specs.\n\n![Zeroheight Storybook integration](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fstorybook-zeroheight.gif&w=1920&q=75)\n\n## [UXPin](#uxpin)\n\n[UXPin](https://www.uxpin.com/) is an interactive design tool that uses production code to generate prototypes.\n\nUXPin allows you to [use interactive stories](https://www.uxpin.com/docs/merge/storybook-integration/) to design user flows.\n\n## [InVision Design System Manager](#invision-design-system-manager)\n\n[InVision DSM](https://www.invisionapp.com/design-system-manager) is a design system documentation tool. It helps design teams consolidate UX principles, user interface design, and design tokens in a shared workspace.\n\nInVision allows you to embed [Storybook](https://support.invisionapp.com/hc/en-us/articles/360028388192-Publishing-Storybook-to-DSM) in your design system documentation.\n\n![Invision DSM Storybook integration](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fstorybook-invision-dsm.gif&w=1920&q=75)\n\n## [Adobe XD](#adobe-xd)\n\n[Adobe XD](https://www.adobe.com/products/xd.html) is a UI and UX design tool for creating wireframes, interactive designs, and prototypes.\n\nIntegrate Adobe XD with Storybook using the [design addon](https://storybook.js.org/addons/storybook-addon-designs/). You can [embed design specs](https://helpx.adobe.com/xd/help/publish-design-specs.html) alongside stories by following these [instructions](https://pocka.github.io/storybook-addon-designs/?path=/story/docs-iframe-readme--page).\n\n## [Build your own integration](#build-your-own-integration)\n\nExtend and customize Storybook by building an integration. Integrate with lower-level Storybook APIs or bootstrap an addon to customize Storybook's UI and behavior.\n\n*   [Addon documentation](https://storybook.js.org/docs/addons)\n*   [Create an addon tutorial](https://storybook.js.org/tutorials/create-an-addon/)",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/install",
    "markdown": "# StorybookChromatic\n\nUse the Storybook CLI to install it in a single command. Run this inside your project’s root directory:\n\nInstall a specific version\n\nThe `init` command will use whichever version you specify. For example:\n\n*   `storybook@latest init` will initialize the latest version\n*   `storybook@7.6.10 init` will initialize `7.6.10`\n*   `storybook@7 init` will initialize the newest `7.x.x` version\n\nStorybook will look into your project's dependencies during its install process and provide you with the best configuration available.\n\nThe command above will make the following changes to your local environment:\n\n*   📦 Install the required dependencies.\n*   🛠 Setup the necessary scripts to run and build Storybook.\n*   🛠 Add the default Storybook configuration.\n*   📝 Add some boilerplate stories to get you started.\n*   📡 Set up telemetry to help us improve Storybook. Read more about it [here](https://storybook.js.org/docs/configure/telemetry).\n\nWatch a video tutorial on the Storybook channel\n\n## [Run the Setup Wizard](#run-the-setup-wizard)\n\nIf all goes well, you should see a setup wizard that will help you get started with Storybook introducing you to the main concepts and features, including how the UI is organized, how to write your first story, and how to test your components' response to various inputs utilizing [controls](https://storybook.js.org/docs/essentials/controls).\n\n![Storybook onboarding](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fget-started%2Fexample-onboarding-wizard.png&w=3840&q=75)\n\nIf you skipped the wizard, you can always run it again by adding the `?path=/onboarding` query parameter to the URL of your Storybook instance, provided that the example stories are still available.\n\n## [Start Storybook](#start-storybook)\n\nStorybook comes with a built-in development server featuring everything you need for project development. Depending on your system configuration, running the `storybook` command will start the local development server, output the address for you, and automatically open the address in a new browser tab where a welcome screen greets you.\n\nStorybook collects completely anonymous data to help us improve user experience. Participation is optional, and you may [opt-out](https://storybook.js.org/docs/configure/telemetry#how-to-opt-out) if you'd not like to share any information.\n\n![Storybook welcome screen](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fget-started%2Fexample-welcome.png&w=3840&q=75)\n\nThere are some noteworthy items here:\n\n*   A collection of useful links for more in-depth configuration and customization options you have at your disposal.\n*   A second set of links for you to expand your Storybook knowledge and get involved with the ever-growing Storybook community.\n*   A few example stories to get you started.\n\n### Troubleshooting\n\n#### [Run Storybook with other package managers](#run-storybook-with-other-package-managers)\n\nThe Storybook CLI includes support for the industry's popular package managers (e.g., [Yarn](https://yarnpkg.com/), [npm](https://www.npmjs.com/), and [pnpm](https://pnpm.io/)) automatically detecting the one you are using when you initialize Storybook. However, if you want to use a specific package manager as the default, add the `--package-manager` flag to the installation command. For example:\n\n#### [The CLI doesn't detect my framework](#the-cli-doesnt-detect-my-framework)\n\nIf you're working with a custom environment set up or need set up Storybook manually, you can use the `--type` flag to specify the framework you need to use. Listed below are the supported frameworks and examples of how to use them:\n\n| Framework | Type |\n| --- | --- |\n| Angular | `angular` |\n| Ember | `ember` |\n| HTML | `html` |\n| Next.js | `nextjs` |\n| Preact | `preact` |\n| Qwik | `qwik` |\n| React | `react` |\n| Server | `server` |\n| Solid | `solid` |\n| Svelte | `svelte` |\n| Vue 3 | `vue3` |\n| Web Components | `web_components` |\n\n#### [Yarn Plug'n'Play (PnP) support with Storybook](#yarn-plugnplay-pnp-support-with-storybook)\n\nIf you've enabled Storybook in a project running on a new version of Yarn with [Plug'n'Play](https://yarnpkg.com/features/pnp) (PnP) enabled, you may notice that it will generate `node_modules` with some additional files and folders. This is a known constraint as Storybook relies on some directories (e.g., `.cache`) to store cache files and other data to improve performance and faster builds. You can safely ignore these files and folders, adjusting your `.gitignore` file to exclude them from the version control you're using.\n\n#### [Run Storybook with Webpack 4](#run-storybook-with-webpack-4)\n\nIf you previously installed Storybook in a project that uses Webpack 4, it will no longer work. This is because Storybook now uses Webpack 5 by default. To solve this issue, we recommend you upgrade your project to Webpack 5 and then run the following command to migrate your project to the latest version of Storybook:\n\n#### [The installation process seems flaky and keeps failing](#the-installation-process-seems-flaky-and-keeps-failing)\n\nIf you're still running into some issues during the installation process, we encourage you to check out the following resources:\n\n*   [Storybook's React Webpack README](https://github.com/storybookjs/storybook/tree/next/code/frameworks/react-webpack5) for more information on how to set up Storybook in your React project with Webpack 5.\n*   [Storybook's React Vite README](https://github.com/storybookjs/storybook/tree/next/code/frameworks/react-vite) for more information on how to set up Storybook in your React project with Vite.\n*   [Storybook's help documentation](https://storybook.js.org/community#support) to contact the community and ask for help.\n\nNow that you have successfully installed Storybook and understood how it works, let's continue where you left off in the [setup wizard](#run-the-setup-wizard) and delve deeper into writing stories.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/story-layout",
    "markdown": "# StorybookChromatic\n\n## Story layout\n\nThe `layout` [parameter](https://storybook.js.org/docs/writing-stories/parameters) allows you to configure how stories are positioned in Storybook's Canvas tab.\n\n## [Global layout](#global-layout)\n\nYou can add the parameter to your [`./storybook/preview.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering), like so:\n\n![Layout params centered story](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fconfigure%2Flayout-params-story-centered.png&w=3840&q=75)\n\nIn the example above, Storybook will center all stories in the UI. `layout` accepts these options:\n\n*   `centered`: center the component horizontally and vertically in the Canvas\n*   `fullscreen`: allow the component to expand to the full width and height of the Canvas\n*   `padded`: _(default)_ Add extra padding around the component\n\n## [Component layout](#component-layout)\n\nYou can also set it at a component level like so:\n\n## [Story layout](#story-layout)\n\nOr even apply it to specific stories like so:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/sharing/storybook-composition",
    "markdown": "# StorybookChromatic\n\nComposition allows you to browse components from any Storybook accessible via URL inside your local Storybook. You can compose any [Storybook published online](https://storybook.js.org/docs/sharing/publish-storybook) or running locally no matter the view layer, tech stack, or dependencies.\n\n![Storybook reference external](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Freference-external-storybooks-composition.png&w=3840&q=75)\n\nYou’ll see the composed Storybook’s stories in the sidebar alongside your own. This unlocks common workflows that teams often struggle with:\n\n*   👩‍💻 UI developers can quickly reference prior art without switching between Storybooks.\n*   🎨 Design systems can expand adoption by composing themselves into their users’ Storybooks.\n*   🛠 Frontend platform can audit how components are used across projects.\n*   📚 View multiple Storybooks with different tech stacks in one place\n\n![Storybook composition](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fcombine-storybooks.png&w=3840&q=75)\n\n## [Compose published Storybooks](#compose-published-storybooks)\n\nIn your [`.storybook/main.js|ts`](https://storybook.js.org/docs/configure/index#configure-story-rendering) file add a `refs` field with information about the reference Storybook. Pass in a URL to a statically built Storybook.\n\nAddons in composed Storybooks will not work as they normally do in a non-composed Storybook.\n\n## [Compose local Storybooks](#compose-local-storybooks)\n\nYou can also compose multiple Storybooks that are running locally. For instance, if you have a React Storybook and an Angular Storybook running on different ports, you can update your configuration file (i.e., `.storybook/main.js|ts`) and reference them as follows:\n\nAdding this configuration will combine React and Angular Storybooks into your current one. You’ll see the changes being applied automatically when either of these changes. Enabling you to develop both frameworks in sync.\n\n## [Compose Storybooks per environment](#compose-storybooks-per-environment)\n\nYou can also compose Storybooks based on the current development environment (e.g., development, staging, production). For instance, if the project you're working on already has a published Storybook but also includes a version with cutting-edge features not yet released, you can adjust the composition based on that. For example:\n\nSimilar to other fields available in Storybook’s configuration file, the `refs` field can also be a function that accepts a `config` parameter containing Storybook’s configuration object. See the [API reference](https://storybook.js.org/docs/api/main-config/main-config-refs) for more information.\n\n## [Troubleshooting](#troubleshooting)\n\n### [Storybook composition is not working with my project](#storybook-composition-is-not-working-with-my-project)\n\nIf you're working with an outdated Storybook version or have a project-specific requirement that prevents you from updating your Storybook to the latest version, you can rely on the Storybook CLI to generate the `index.json` file when you deploy your Storybook. For example:\n\nThe usage of a specific version of the CLI is intended as the `extract` command is not available in Storybook 8.0 or higher. It also requires you to provide additional configuration to generate the `index.json` file accurately. See the [previous documentation](https://storybook.js.org/docs/7/sharing/storybook-composition) for more information.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/sharing/package-composition",
    "markdown": "# StorybookChromatic\n\nStorybook is widely used by component libraries and design systems. Design system authors can automatically compose their design systems inside their consumer’s Storybooks.\n\nFor example, if you use a design system package, its stories can appear alongside your own. That makes it convenient to cross reference usage documentation without leaving Storybook.\n\nComposition via a package requires a secure integration between the service where you publish Storybook and Storybook’s own APIs. We recommend [publishing Storybook to Chromatic](https://storybook.js.org/docs/sharing/publish-storybook#publish-storybook-with-chromatic) for full support of these features.\n\n## [For consumers](#for-consumers)\n\nComposition happens automatically if the package [supports](#for-authors) it. When you install the package, Storybook will load its stories alongside your own.\n\n![Package composition workflow](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fpackage-composition.png&w=3840&q=75)\n\n### [Set up](#set-up)\n\nIf you want to configure how the composed Storybook behaves, you can disable the `ref` element in your [`.storybook/main.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering)\n\n### [Switching versions](#switching-versions)\n\nChange the version of the composed Storybook to see how the library evolves. This requires [configuration](#show-a-version-selector) from the package author.\n\n![Package composition workflow](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fsharing%2Fcomposition-versioning.png&w=3840&q=75)\n\nComponent library authors can expand adoption by composing their components in their consumer’s Storybooks.\n\nAdd a `storybook` property in your published `package.json`that contains an object with a `url` field. Point the URL field to a published Storybook at the version you want.\n\n### [Automatic version selection](#automatic-version-selection)\n\nIf you're using [Chromatic](https://storybook.js.org/docs/sharing/publish-storybook#publish-storybook-with-chromatic), you can provide a single URL for your Storybook in the `storybook.url` field. You do not need to change the URL each time you publish a new version. Storybook will automatically find the correct URL for your package. For example:\n\nIn this example `xyz123` is your Chromatic project id. Storybook will automatically compose in the Storybook published to that project corresponding to the version the user has installed.\n\n### [Show a version selector](#show-a-version-selector)\n\nIf you're using [Chromatic](https://storybook.js.org/docs/sharing/publish-storybook#publish-storybook-with-chromatic), you can provide a list of versions for the user to [choose from](#switching-versions) to experiment with other versions of your package.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/whats-a-story",
    "markdown": "# StorybookChromatic\n\nA story captures the rendered state of a UI component. Developers write multiple stories per component that describe all the “interesting” states a component can support.\n\nWhen you installed Storybook, the CLI created example components that demonstrate the types of components you can build with Storybook: Button, Header, and Page.\n\nEach example component has a set of stories that show the states it supports. You can browse the stories in the UI and see the code behind them in files that end with `.stories.js|ts`. The stories are written in [Component Story Format](https://storybook.js.org/docs/api/csf) (CSF), an ES6 modules-based standard for writing component examples.\n\nLet’s start with the `Button` component. A story is an object that describes how to render the component in question. Here’s how to render `Button` in the “primary” state and export a story called `Primary`.\n\n![Button story with args](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fget-started%2Fexample-button-args.png&w=3840&q=75)\n\nView the rendered `Button` by clicking on it in the Storybook sidebar. Note how the values specified in [`args`](https://storybook.js.org/docs/writing-stories/args) are used to render the component and match those represented in the [Controls](https://storybook.js.org/docs/essentials/controls) tab. Using `args` in your stories has additional benefits:\n\n*   `Button`'s callbacks are logged into the [Actions](https://storybook.js.org/docs/essentials/actions) tab. Click to try it.\n*   `Button`'s arguments are dynamically editable in the Controls tab. Adjust the controls.\n\n## [Working with stories](#working-with-stories)\n\nStorybook makes it easy to work on one component in one state (aka a story) at a time. When you edit a component's code or its stories, Storybook will instantly re-render in the browser. No need to refresh manually.\n\n### [Create a new story](#create-a-new-story)\n\nIf you're working on a component that does not yet have any stories, you can click the ➕ button in the sidebar to search for your component and have a basic story created for you.\n\nYou can also create a story file for your new story. We recommend copy/pasting an existing story file next to the component source file, then adjusting it for your component.\n\nIf you're working on a component that already has other stories, you can use the [Controls addon](https://storybook.js.org/docs/essentials/controls) to adjust the value of a control and then save those changes as a new story.\n\nOr, if you prefer, edit the story file's code to add a new named export for your story:\n\n### [Edit a story](#edit-a-story)\n\nUsing the [Controls addon](https://storybook.js.org/docs/essentials/controls), update a control's value for a story. You can then save the changes to the story and the story file's code will be updated for you.\n\nOf course, you can always update the story's code directly too:\n\nStories are also helpful for checking that UI continues to look correct as you make changes. The `Button` component has four stories that show it in different use cases. View those stories now to confirm that your change to `Primary` didn’t introduce unintentional bugs in the other stories.\n\nChecking component’s stories as you develop helps prevent accidental regressions. [Tools that integrate with Storybook can automate this](https://storybook.js.org/docs/writing-tests) for you.\n\nNow that we’ve seen the basic anatomy of a story let’s see how we use Storybook’s UI to develop stories.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/browse-stories",
    "markdown": "# StorybookChromatic\n\nLast chapter, we learned that stories correspond with discrete component states. This chapter demonstrates how to use Storybook as a workshop for building components.\n\nA `*.stories.js` file defines all the stories for a component. Each story has a corresponding sidebar item. When you click on a story, it renders in the Canvas an isolated preview iframe.\n\nNavigate between stories by clicking on them in the sidebar. Try the sidebar search to find a story by name.\n\nOr use keyboard shortcuts. Click on the Storybook's menu to see the list of shortcuts available.\n\n![Storybook keyboard shortcuts examples](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fget-started%2Fstorybook-keyboard-shortcuts.png&w=3840&q=75)\n\nStorybook ships with time-saving tools built-in. The toolbar contains tools that allow you to adjust how the story renders in the Canvas:\n\n*   🔍 Zooming visually scales the component so you can check the details.\n*   🖼 Background changes the rendered background behind your component so you can verify how your component renders in different visual contexts.\n*   📐 Grid renders your component on top of a grid layout so you can verify if your component is aligned correctly.\n*   📏 Measure toggles a measurement overlay to help you inspect the dimensions of components.\n*   🎚️ Outline displays the component's bounding box so you can verify if your component is positioned correctly.\n*   📱 Viewport renders the component in a variety of dimensions and orientations. It’s ideal for checking the responsiveness of components.\n\nThe [“Docs”](https://storybook.js.org/docs/writing-docs) page displays auto-generated documentation for components (inferred from the source code). Usage documentation is helpful when sharing reusable components with your team, for example, in an application.\n\n![Storybook keyboard shortcuts examples](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fget-started%2Fmdx-example.png&w=3840&q=75)\n\nThe toolbar is customizable. You can use [globals](https://storybook.js.org/docs/essentials/toolbars-and-globals) to quickly toggle themes and languages. Or install Storybook toolbar [addons](https://storybook.js.org/docs/configure/user-interface/storybook-addons) from the community to enable advanced workflows.\n\n## [Addons](#addons)\n\nAddons are plugins that extend Storybook's core functionality. You can find them in the addons panel, a reserved place in the Storybook UI below the Canvas. Each tab shows the generated metadata, logs, or static analysis for the selected story by the addon.\n\n![Storybook addon examples](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fget-started%2Faddons.png&w=3840&q=75)\n\n*   **Controls** allows you to interact with a component’s args (inputs) dynamically. Experiment with alternate configurations of the component to discover edge cases.\n*   **Actions** help you verify interactions produce the correct outputs via callbacks. For instance, if you view the “Logged In” story of the `Header` component, we can verify that clicking the “Log out” button triggers the `onLogout` callback, which would be provided by the component that made use of the Header.\n*   **Interactions** provides a helpful user interface for debugging [interaction tests](https://storybook.js.org/docs/writing-tests/interaction-testing) with the `play` function.\n*   **Visual Tests** lets you pinpoint UI bugs in your local development environment by providing instant feedback directly in Storybook.\n\nStorybook is extensible. Our rich ecosystem of addons helps you test, document, and optimize your stories. You can also create an addon to satisfy your workflow requirements. Read more in the [addons section](https://storybook.js.org/docs/addons).\n\nIn the next chapter, we'll get your components rendering in Storybook so you can use it to supercharge component development.\n\n## [Use stories to build UIs](#use-stories-to-build-uis)\n\nWhen building apps, one of the biggest challenges is to figure out if a piece of UI already exists in your codebase and how to use it for the new feature you're building.\n\nStorybook catalogues all your components and their use cases. Therefore, you can quickly browse it to find what you're looking for.\n\nHere's what the workflow looks like:\n\n*   🗃 Use the sidebar to find a suitable component\n*   👀 Review its stories to pick a variant that suits your needs\n*   📝 Copy/paste the story definition into your app code and wire it up to data\n\nYou can access the story definition from the stories file or make it available in your published Storybook using the [Storysource addon](https://storybook.js.org/addons/@storybook/addon-storysource/) or the [Docs addon](https://storybook.js.org/docs/api/doc-blocks/doc-block-source).\n\n![Docblock source](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fget-started%2Fdocblock-source.png&w=3840&q=75)",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/environment-variables",
    "markdown": "# StorybookChromatic\n\nYou can use environment variables in Storybook to change its behavior in different “modes”. If you supply an environment variable prefixed with `STORYBOOK_`, it will be available in `process.env` when using Webpack, or `import.meta.env` when using the Vite builder:\n\nDo not store any secrets (e.g., private API keys) or other types of sensitive information in your Storybook. Environment variables are embedded into the build, meaning anyone can view them by inspecting your files.\n\nThen we can access these environment variables anywhere inside our preview JavaScript code like below:\n\nYou can also access these variables in your custom `<head>`/`<body>` using the substitution `%STORYBOOK_X%`, for example: `%STORYBOOK_THEME%` will become `red`.\n\nIf using the environment variables as attributes or values in JavaScript, you may need to add quotes, as the value will be inserted directly, for example: `<link rel=\"stylesheet\" href=\"%STORYBOOK_STYLE_URL%\" />`.\n\n### [Using .env files](#using-env-files)\n\nYou can also use `.env` files to change Storybook's behavior in different modes. For example, if you add a `.env` file to your project with the following:\n\nThen you can access this environment variable anywhere, even within your stories:\n\n#### [With Vite](#with-vite)\n\nOut of the box, Storybook provides a [Vite builder](https://storybook.js.org/docs/builders/vite), which does not output Node.js globals like `process.env`. To access environment variables in Storybook (e.g., `STORYBOOK_`, `VITE_`), you can use `import.meta.env`. For example:\n\nYou can also use specific files for specific modes. Add a `.env.development` or `.env.production` to apply different values to your environment variables.\n\nYou can also pass these environment variables when you are [building your Storybook](https://storybook.js.org/docs/sharing/publish-storybook) with `build-storybook`.\n\nThen they'll be hardcoded to the static version of your Storybook.\n\n### [Using Storybook configuration](#using-storybook-configuration)\n\nAdditionally, you can extend your Storybook configuration file (i.e., [`.storybook/main.js|.ts`](https://storybook.js.org/docs/configure/index#configure-story-rendering)) and provide a configuration field that you can use to define specific variables (e.g., API URLs). For example:\n\nWhen Storybook loads, it will enable you to access them in your stories similar as you would do if you were working with an `env` file:\n\n### [Using environment variables to choose the browser](#using-environment-variables-to-choose-the-browser)\n\nStorybook allows you to choose the browser you want to preview your stories. Either through a `.env` file entry or directly in your `storybook` script.\n\nThe table below lists the available options:\n\n| Browser | Example |\n| --- | --- |\n| Safari | `BROWSER=\"safari\"` |\n| Firefox | `BROWSER=\"firefox\"` |\n| Chromium | `BROWSER=\"chromium\"` |\n\nBy default, Storybook will open a new Chrome window as part of its startup process. If you don't have Chrome installed, make sure to include one of the following options, or set your default browser accordingly.\n\n## [Troubleshooting](#troubleshooting)\n\n### [Environment variables are not working](#environment-variables-are-not-working)\n\nIf you're trying to use framework-specific environment variables (e.g.,`VUE_APP_`), you may run into issues primarily due to the fact that Storybook and your framework may have specific configurations and may not be able to recognize and use those environment variables. If you run into a similar situation, you may need to adjust your framework configuration to make sure that it can recognize and use those environment variables. For example, if you're working with a Vite-based framework, you can extend the configuration file and enable the [`envPrefix`](https://vitejs.dev/config/shared-options.html#envprefix) option. Other frameworks may require a similar approach.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/builders",
    "markdown": "# StorybookChromatic\n\nStorybook, at its core, is powered by builders such as Webpack and Vite. These builders spin up a development environment, compile your code—Javascript, CSS, and MDX—into an executable bundle and update the browser in real-time.\n\n![Storybook builder overview](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fbuilders%2Fstorybook-builder-workflow.png&w=3840&q=75)\n\n## [CLI basics](#cli-basics)\n\nBefore diving into setting up Storybook's builders, let's look at how the CLI configures them. When you initialize Storybook (via `npx storybook@latest init`), the CLI automatically detects which builder to use based on your application. For example, if you're working with Vite, it will install the Vite builder. If you're working with Webpack, it installs the Webpack 5 builder by default.\n\nAdditionally, you can also provide a flag to Storybook's CLI and specify the builder you want to use:\n\n## [Manual setup](#manual-setup)\n\nStorybook uses the Webpack 5 builder by default if you don't specify one. If you want to use a different builder in your application, these docs detail how you can set up Storybook's supported builders.\n\n*   [**Vite builder**](https://storybook.js.org/docs/builders/vite) for bundling your stories with Vite with near-instant HMR.\n*   [**Webpack**](https://storybook.js.org/docs/builders/webpack) for bundling your stories with Webpack with improved performance",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/essentials",
    "markdown": "# StorybookChromatic\n\nA major strength of Storybook are [addons](https://storybook.js.org/addons) that extend Storybook’s UI and behavior. Storybook ships by default with a set of “essential” addons that add to the initial user experience. There are many third-party addons as well as “official” addons developed by the Storybook core team.\n\n*   [Actions](https://storybook.js.org/docs/essentials/actions)\n*   [Backgrounds](https://storybook.js.org/docs/essentials/backgrounds)\n*   [Controls](https://storybook.js.org/docs/essentials/controls)\n*   [Docs](https://storybook.js.org/docs/writing-docs)\n*   [Highlight](https://storybook.js.org/docs/essentials/highlight)\n*   [Measure & outline](https://storybook.js.org/docs/essentials/measure-and-outline)\n*   [Toolbars & globals](https://storybook.js.org/docs/essentials/toolbars-and-globals)\n*   [Viewport](https://storybook.js.org/docs/essentials/viewport)\n\n### [Installation](#installation)\n\nIf you ran `npx storybook@latest init` to include Storybook in your project, the latest version of the Essentials addon ([`@storybook/addon-essentials`](https://storybook.js.org/addons/tag/essentials)) is already installed and configured for you. You can go ahead and skip the rest of this section.\n\nHowever, if you intend to install the Essentials addon manually into an existing Storybook instance, you can do so by running the following command in your terminal:\n\nUpdate your Storybook configuration (in [`.storybook/main.js|ts`](https://storybook.js.org/docs/configure/index#configure-story-rendering)) to include the Essentials addon.\n\n### [Configuration](#configuration)\n\nEssentials is \"zero-config”. It comes with a recommended configuration out of the box.\n\nIf you need to reconfigure any of the [individual Essentials addons](https://storybook.js.org/addons/tag/essentials), install them manually by following the installation instructions, and depending on the method of choice, register them in your Storybook configuration file (i.e., [`.storybook/main.js|ts`](https://storybook.js.org/docs/configure/index#configure-story-rendering)) and adjust the configuration to suit your needs. For example:\n\nBelow is an abridged configuration and table with all the available options for each addon.\n\n| Addon | Option | Description |\n| --- | --- | --- |\n| `@storybook/addon-actions` | N/A | N/A |\n| `@storybook/addon-viewport` | N/A | N/A |\n| `@storybook/addon-docs` | `csfPluginOptions` | Provides additional configuration for Storybook's CSF plugin. Can be disabled with `null`. |\n|     | `mdxPluginOptions` | Provides additional configuration options and plugin configuration for [MDX documentation](https://storybook.js.org/docs/writing-docs/mdx#markdown-tables-arent-rendering-correctly). |\n| `@storybook/addon-controls` | N/A | N/A |\n| `@storybook/addon-backgrounds` | N/A | N/A |\n| `@storybook/addon-toolbars` | N/A | N/A |\n| `@storybook/addon-measure` | N/A | N/A |\n\nWhen you start Storybook, your custom configuration will override the default.\n\n### [Disabling addons](#disabling-addons)\n\nIf you need to disable any of the Essential's addons, you can do it by changing your [`.storybook/main.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering) file.\n\nFor example, if you wanted to disable the [backgrounds addon](https://storybook.js.org/docs/essentials/backgrounds), you would apply the following change to your Storybook configuration:\n\nYou can use the following keys for each individual addon: `actions`, `backgrounds`, `controls`, `docs`, `viewport`, `toolbars`, `measure`, `outline`, and `highlight`.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/setup",
    "markdown": "# StorybookChromatic\n\nNow that you’ve learned what stories are and how to browse them, let’s demo working on one of your components.\n\nPick a simple component from your project, like a Button, and write a `.stories.js`, or a `.stories.ts` file to go along with it. It might look something like this:\n\nGo to your Storybook to view the rendered component. It’s OK if it looks a bit unusual right now.\n\nDepending on your technology stack, you also might need to configure the Storybook environment further.\n\n## [Render component styles](#render-component-styles)\n\nStorybook isn’t opinionated about how you generate or load CSS. It renders whatever DOM elements you provide. But sometimes, things won’t “look right” out of the box.\n\nYou may have to configure your CSS tooling for Storybook’s rendering environment. Here are some setup guides for popular tools in the community.\n\n*   [Tailwind](https://storybook.js.org/recipes/tailwindcss/)\n*   [Material UI](https://storybook.js.org/recipes/@mui/material/)\n*   [Vuetify](https://storybook.js.org/recipes/vuetify/)\n*   [Styled Components](https://storybook.js.org/recipes/styled-components/)\n*   [Emotion](https://storybook.js.org/recipes/@emotion/styled/)\n*   [Sass](https://storybook.js.org/recipes/sass/)\n*   [Bootstrap](https://storybook.js.org/recipes/bootstrap/)\n*   [Less](https://storybook.js.org/recipes/less/)\n*   [Vanilla-extract](https://storybook.js.org/recipes/@vanilla-extract/css/)\n\nDon't see the tool that you're looking for? Check out the [styling and css](https://storybook.js.org/docs/configure/styling-and-css) page for more details.\n\n## [Configure Storybook for your stack](#configure-storybook-for-your-stack)\n\nStorybook comes with a permissive [default configuration](https://storybook.js.org/docs/configure). It attempts to customize itself to fit your setup. But it’s not foolproof.\n\nYour project may have additional requirements before components can be rendered in isolation. This warrants customizing configuration further. There are three broad categories of configuration you might need.\n\nBuild configuration like Webpack and Babel\n\nIf you see errors on the CLI when you run the `yarn storybook` command, you likely need to make changes to Storybook’s build configuration. Here are some things to try:\n\n*   [Presets](https://storybook.js.org/docs/addons/addon-types) bundle common configurations for various technologies into Storybook. In particular, presets exist for Create React App and Ant Design.\n*   Specify a custom [Babel configuration](https://storybook.js.org/docs/configure/integration/compilers#babel) for Storybook. Storybook automatically tries to use your project’s config if it can.\n*   Adjust the [Webpack configuration](https://storybook.js.org/docs/builders/webpack) that Storybook uses. Try patching in your own configuration if needed.\n\nRuntime configuration\n\nIf Storybook builds but you see an error immediately when connecting to it in the browser, in that case, chances are one of your input files is not compiling/transpiling correctly to be interpreted by the browser. Storybook supports evergreen browsers, but you may need to check the Babel and Webpack settings (see above) to ensure your component code works correctly.\n\nComponent context\n\nIf a particular story has a problem rendering, often it means your component expects a specific environment is available to the component.\n\nA common frontend pattern is for components to assume that they render in a specific “context” with parent components higher up the rendering hierarchy (for instance, theme providers).\n\nUse [decorators](https://storybook.js.org/docs/writing-stories/decorators) to “wrap” every story in the necessary context providers. The [`.storybook/preview.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering) file allows you to customize how components render in Canvas, the preview iframe. See how you can wrap every component rendered in Storybook with [Styled Components](https://styled-components.com/) `ThemeProvider`, [Vue's Fontawesome](https://github.com/FortAwesome/vue-fontawesome), or with an Angular theme provider component in the example below.\n\n## [Load assets and resources](#load-assets-and-resources)\n\nWe recommend serving external resources and assets requested in your components statically with Storybook. It ensures that assets are always available to your stories. Read our [documentation](https://storybook.js.org/docs/configure/integration/images-and-assets) to learn how to hosting static files with Storybook.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/builders/vite",
    "markdown": "# StorybookChromatic\n\nStorybook Vite builder bundles your components and stories with [Vite](https://vitejs.dev/), a fast ESM bundler.\n\n*   For applications built with Vite: it allows reusing the existing configuration in Storybook.\n*   For applications built with Webpack: it provides faster startup and refresh times, with the disadvantage that your component's execution environment differs from your application.\n\n## [Setup](#setup)\n\nIf you ran `npx storybook@latest init` to include Storybook in your Vite application, the builder is already installed and configured for you. If you want, you can also opt into it manually.\n\nRun the following command to install the builder.\n\nUpdate your Storybook configuration (in `.storybook/main.js|ts`) to include the builder.\n\n## [Configuration](#configuration)\n\nOut of the box, Storybook's Vite builder includes a set of configuration defaults for the supported frameworks, which are merged alongside your existing configuration file. For an optimal experience when using the Vite builder, we recommend applying any configuration directly inside Vite's configuration file (i.e., [`vite.config.js|ts`](https://vitejs.dev/config/)).\n\nWhen Storybook loads, it automatically merges the configuration into its own. However, since different projects may have specific requirements, you may need to provide a custom configuration for Storybook. In such cases, you can modify your configuration file (`.storybook/main.js|ts`) and add the `viteFinal` configuration function as follows:\n\nThe asynchronous function [`viteFinal`](https://storybook.js.org/docs/api/main-config/main-config-vite-final) receives a `config` object with the default builder configuration and returns the updated configuration.\n\n### [Environment-based configuration](#environment-based-configuration)\n\nIf you need to customize the builder's configuration and apply specific options based on your environment, extend the `viteFinal` function as follows:\n\n### [Override the default configuration](#override-the-default-configuration)\n\nBy default, the Vite builder in Storybook searches for the Vite configuration file in the root directory of your Storybook project. However, you can customize it to look for the configuration file in a different location. For example:\n\nIf you do not want Storybook to load the Vite configuration file automatically, you can use the `viteConfigPath` option to point to a non-existent file.\n\n### [TypeScript](#typescript)\n\nIf you need, you can also configure Storybook's Vite builder using TypeScript. Rename your `.storybook/main.js` to `.storybook/main.ts` and adjust it as follows:\n\n* * *\n\n## [Troubleshooting](#troubleshooting)\n\n### [Working directory not being detected](#working-directory-not-being-detected)\n\nBy default, the Vite builder enables Vite's [`server.fs.strict`](https://vitejs.dev/config/#server-fs-strict) option for increased security, defining the project's `root` to Storybook's configuration directory. If you need to override it, you can use the `viteFinal` function and adjust it.\n\n### [ArgTypes are not generated automatically](#argtypes-are-not-generated-automatically)\n\nCurrently, [automatic argType inference](https://storybook.js.org/docs/api/arg-types#automatic-argtype-inference) is only available for React, Vue 3, and Svelte (JSDocs only). With React, the Vite builder defaults to `react-docgen`, a faster alternative to `react-docgen-typescript` for parsing React components. If you run into any issues, you can revert to `react-docgen-typescript` by updating your Storybook configuration file as follows:\n\n### [Interaction tests not working as expected](#interaction-tests-not-working-as-expected)\n\nIf you are migrating from a Webpack-based project, such as [CRA](https://create-react-app.dev/), to Vite, and you have enabled Interaction testing with the [`@storybook/addon-interactions`](https://storybook.js.org/addons/@storybook/addon-interactions) addon, you may run into a situation where your tests fail to execute notifying you that the `window` object is not defined. To resolve this issue, you can create a `preview-head.html` file in your Storybook configuration directory and include the following:\n\n**Learn more about builders**\n\n*   Vite builder for bundling with Vite\n*   [Webpack builder](https://storybook.js.org/docs/builders/webpack) for bundling with Webpack\n*   [Builder API](https://storybook.js.org/docs/builders/builder-api) for building a Storybook builder",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/get-started/conclusion",
    "markdown": "# StorybookChromatic\n\nCongratulations! You learned the basics. Storybook is the most popular tool for UI component development and documentation. You’ll be able to transfer these skills to thousands of companies that use Storybook to build UIs including GitHub, Airbnb, and Stripe.\n\nIf you’d like to learn workflows for building app UIs with Storybook, check out our in-depth guides over at the [tutorials](https://storybook.js.org/tutorials/) page. Continue reading for detailed information on how to use Storybook APIs.\n\n*   [How to write stories](https://storybook.js.org/docs/writing-stories)\n*   [How to document components and design systems](https://storybook.js.org/docs/writing-docs)\n*   [View example Storybooks from leading companies](https://storybook.js.org/showcase)",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/essentials/actions",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nThe actions addon is used to display data received by event handler (callback) arguments in your stories.\n\n## [Action args](#action-args)\n\nActions work via supplying special Storybook-generated “action” arguments (referred to as \"args\" for short) to your stories. There are two ways to get an action arg:\n\n### [Via @storybook/test fn spy function](#via-storybooktest-fn-spy-function)\n\nThe recommended way to write actions is to use the `fn` utility from `@storybook/test` to mock and spy args. This is very useful for writing [interaction tests](https://storybook.js.org/docs/writing-tests/interaction-testing). You can mock your component's methods by assigning them to the `fn()` function:\n\nIf your component calls an arg (because of either the user's interaction or the `play` function) and that arg is spied on , the event will show up in the action panel:\n\n![Essential Actions addon usage](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fessentials%2Faddon-actions-screenshot.png&w=3840&q=75)\n\n### [Automatically matching args](#automatically-matching-args)\n\nAnother option is to use a global parameter to match all [argTypes](https://storybook.js.org/docs/api/arg-types) that match a certain pattern. The following configuration automatically creates actions for each `on` argType (which you can either specify manually or can be [inferred automatically](https://storybook.js.org/docs/api/arg-types#automatic-argtype-inference)).\n\nThis is quite useful when your component has dozens (or hundreds) of methods and you do not want to manually apply the `fn` utility for each of those methods. However, **this is not the recommended** way of writing actions. That's because automatically inferred args **are not available as spies in your play function**. If you use `argTypesRegex` and your stories have play functions, you will need to also define args with the `fn` utility to test them in your play function.\n\nIf you need more granular control over which `argTypes` are matched, you can adjust your stories and include the `argTypesRegex` parameter. For example:\n\nIf you're generating argTypes with another addon (like [docs](https://storybook.js.org/docs/writing-docs), which is the common behavior), ensure the actions addon **AFTER** the other addon. You can do this by listing it later in the addons registration code in [`.storybook/main.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering). This is default in [essentials](https://storybook.js.org/docs/essentials/).\n\n## [Action event handlers](#action-event-handlers)\n\nIt is also possible to detect if your component is emitting the correct HTML events using the `parameters.actions.handles` [parameter](https://storybook.js.org/docs/writing-stories/parameters).\n\nThis will bind a standard HTML event handler to the outermost HTML element rendered by your component and trigger an action when the event is called for a given selector. The format is `<eventname> <selector>`. The selector is optional; it defaults to all elements.\n\n## [API](#api)\n\n### [Parameters](#parameters)\n\nThis addon contributes the following [parameters](https://storybook.js.org/docs/writing-stories/parameters) to Storybook, under the `actions` namespace:\n\n#### [`argTypesRegex`](#argtypesregex)\n\nType: `string`\n\nCreate actions for each arg that matches the regex. Please note the significant [limitations of this approach](#automatically-matching-args), as described above.\n\n#### [`disable`](#disable)\n\nType: `boolean`\n\nDisable this addon's behavior. If you wish to disable this addon for the entire Storybook, you should do so when registering `addon-essentials`. See the [essential addon's docs](https://storybook.js.org/docs/essentials/index#disabling-addons) for more information.\n\nThis parameter is most useful to allow overriding at more specific levels. For example, if this parameter is set to `true` at the project level, it could then be re-enabled by setting it to `false` at the meta (component) or story level.\n\n#### [`handles`](#handles)\n\nType: `string[]`\n\nBinds a standard HTML event handler to the outermost HTML element rendered by your component and triggers an action when the event is called for a given selector. The format is `<eventname> <selector>`. The selector is optional; it defaults to all elements.\n\nSee the [action event handlers](#action-event-handlers) section, above, for more information.\n\n### [Exports](#exports)\n\nThis addon contributes the following exports to Storybook:\n\n#### [`action`](#action)\n\nType: `(name?: string) => void`\n\nAllows you to create an action that appears in the actions panel of the Storybook UI when clicked. The action function takes an optional name parameter, which is used to identify the action in the UI.\n\n## [Advanced / legacy usage](#advanced--legacy-usage)\n\nThere are also some older ways to use actions as documented in the [advanced README](https://storybook.js.org/addons/actions/ADVANCED.md).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/telemetry",
    "markdown": "# StorybookChromatic\n\nStorybook collects completely anonymous data to help us improve user experience. Participation in this anonymous program is optional, and you may opt-out if you'd not like to share any information.\n\n## [Why is telemetry collected?](#why-is-telemetry-collected)\n\nHundreds of thousands of developers use Storybook daily to build, test, and document components. Storybook is framework agnostic and integrates with the front-end ecosystem:\n\n*   **JavaScript frameworks** such as [React](https://reactjs.org/), [Vue 3](https://vuejs.org/), [Svelte](https://svelte.dev/) and [Solid](https://www.solidjs.com/)\n*   **Libraries** such as [Styled-Components](https://styled-components.com/), [Tailwind](https://tailwindcss.com/), [Redux](https://redux.js.org/)\n*   **Design tools** such as [Figma](https://figma.com/), [Sketch](https://www.sketch.com/), [Zeplin](https://zeplin.io/) and [InVision](https://www.invisionapp.com/)\n*   **Workflow tools** such as [Notion](https://www.notion.so/product), [Confluence](https://www.atlassian.com/software/confluence), and [Jira](https://www.atlassian.com/software/jira)\n\nIn the past, our improvement process relied on manually gathering feedback. But with a growing userbase and the need to support a wide variety of integrations, we need a more accurate method for gauging Storybook usage and pain points.\n\nThese telemetry data help us (the maintainers) to prioritize the highest impact projects. That allows us to keep up with trends in the front-end ecosystem and verify that our community's hard work achieves the intended result.\n\n## [What is being collected?](#what-is-being-collected)\n\nWe collect general usage details, including command invocation, Storybook version, addons, and the view layer.\n\nSpecifically, we track the following information in our telemetry events:\n\n*   Timestamp of the occurrence.\n*   Command invoked (e.g., `init`, `upgrade`, `dev`, `build`).\n*   Storybook unique identifier: One-way hash generated during Storybook installation process.\n*   One way hash of the IP address where the event occurred for spam detection.\n*   Story count.\n*   Storybook version.\n*   Storybook metadata:\n    *   Language (e.g., TypeScript, JavaScript).\n    *   Supported view layers (e.g., React, Vue 3, Angular, Svelte).\n    *   Builder (e.g., Webpack5, Vite).\n    *   Meta framework (e.g., [Next](https://nextjs.org/), [Gatsby](https://www.gatsbyjs.com/), [CRA](https://create-react-app.dev/)).\n    *   [Addons](https://storybook.js.org/integrations) (e.g., [Essentials](https://storybook.js.org/docs/essentials), [Accessibility](https://storybook.js.org/addons/@storybook/addon-a11y/)).\n    *   Testing tools (e.g. [Jest](https://jestjs.io/), [Vitest](https://vitest.dev/), [Playwright](https://playwright.dev/)).\n*   Package manager information (e.g., `npm`, `yarn`).\n*   Monorepo information (e.g., [NX](https://nx.dev/), [Turborepo](https://turborepo.org/)).\n*   In-app events (e.g., [Storybook guided tour](https://github.com/storybookjs/addon-onboarding)).\n\nAccess to the raw data is highly controlled, limited to select members of Storybook's core team who maintain the telemetry. We cannot identify individual users from the dataset: it is anonymized and untraceable back to the user.\n\n## [What about sensitive information?](#what-about-sensitive-information)\n\nWe take your privacy and our security very seriously. We perform additional steps to ensure that secure data (e.g., environment variables or other forms of sensitive data) **do not** make their way into our analytics. You can view all the information we collect by setting the `STORYBOOK_TELEMETRY_DEBUG` to `1` to print out the information gathered. For example:\n\nWill generate the following output:\n\nAdditionally, if Storybook's guided tour is enabled, it will generate the following output:\n\nThe data we collect is anonymous, not traceable to the source, and only meaningful in aggregate form. No data we collect is personally identifiable. In the future, we plan to share relevant data with the community through public dashboards (or similar data representation formats).\n\n## [How to opt-out](#how-to-opt-out)\n\nYou may opt-out of the telemetry by setting Storybook's configuration element `disableTelemetry` to `true`, using the `--disable-telemetry` flag, or setting the environment variable`STORYBOOK_DISABLE_TELEMETRY` to `1`. For example:\n\nThere is a `boot` event containing no metadata (used to ensure the telemetry is working). It is sent prior to evaluating your [Storybook configuration file](https://storybook.js.org/docs/api/main-config/main-config) (i.e., `main.js|ts`), so it is unaffected by the `disableTelemetry` option. If you want to ensure that the event is not sent, use the `STORYBOOK_DISABLE_TELEMETRY` environment variable.\n\n## [Crash reports (disabled by default)](#crash-reports-disabled-by-default)\n\nIn addition to general usage telemetry, you may also choose to share crash reports. Storybook will then sanitize the error object (removing all user paths) and append it to the telemetry event. To enable crash reporting, you can set the `enableCrashReports` configuration element to `true`, using the `--enable-crash-reports` flag, or set the `STORYBOOK_ENABLE_CRASH_REPORTS` environment variable to `1`. For example:\n\nGenerates the following item in the telemetry event:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nA story captures the rendered state of a UI component. It's an object with annotations that describe the component's behavior and appearance given a set of arguments.\n\nStorybook uses the generic term arguments (args for short) when talking about React’s `props`, Vue’s `props`, Angular’s `@Input`, and other similar concepts.\n\n## [Where to put stories](#where-to-put-stories)\n\nA component’s stories are defined in a story file that lives alongside the component file. The story file is for development-only, and it won't be included in your production bundle. In your filesytem, it looks something like this:\n\n## [Component Story Format](#component-story-format)\n\nWe define stories according to the [Component Story Format](https://storybook.js.org/docs/api/csf) (CSF), an ES6 module-based standard that is easy to write and portable between tools.\n\nThe key ingredients are the [default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export) that describes the component, and [named exports](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_named_exports) that describe the stories.\n\n### [Default export](#default-export)\n\nThe _default_ export metadata controls how Storybook lists your stories and provides information used by addons. For example, here’s the default export for a story file `Button.stories.js|ts`:\n\nStarting with Storybook version 7.0, story titles are analyzed statically as part of the build process. The _default_ export must contain a `title` property that can be read statically or a `component` property from which an automatic title can be computed. Using the `id` property to customize your story URL must also be statically readable.\n\n### [Defining stories](#defining-stories)\n\nUse the _named_ exports of a CSF file to define your component’s stories. We recommend you use UpperCamelCase for your story exports. Here’s how to render `Button` in the “primary” state and export a story called `Primary`.\n\n#### [Working with React Hooks](#working-with-react-hooks)\n\n[React Hooks](https://react.dev/reference/react) are convenient helper methods to create components using a more streamlined approach. You can use them while creating your component's stories if you need them, although you should treat them as an advanced use case. We **recommend** [args](https://storybook.js.org/docs/writing-stories/args) as much as possible when writing your own stories. As an example, here’s a story that uses React Hooks to change the button's state:\n\n### [Rename stories](#rename-stories)\n\nYou can rename any particular story you need. For instance, to give it a more accurate name. Here's how you can change the name of the `Primary` story:\n\nYour story will now be shown in the sidebar with the given text.\n\n## [How to write stories](#how-to-write-stories)\n\nA story is an object that describes how to render a component. You can have multiple stories per component, and those stories can build upon one another. For example, we can add Secondary and Tertiary stories based on our Primary story from above.\n\nWhat’s more, you can import `args` to reuse when writing stories for other components, and it's helpful when you’re building composite components. For example, if we make a `ButtonGroup` story, we might remix two stories from its child component `Button`.\n\nWhen Button’s signature changes, you only need to change Button’s stories to reflect the new schema, and ButtonGroup’s stories will automatically be updated. This pattern allows you to reuse your data definitions across the component hierarchy, making your stories more maintainable.\n\nThat’s not all! Each of the args from the story function are live editable using Storybook’s [Controls](https://storybook.js.org/docs/essentials/controls) panel. It means your team can dynamically change components in Storybook to stress test and find edge cases.\n\nYou can also use the Controls panel to edit or save a new story after adjusting its control values.\n\nAddons can enhance args. For instance, [Actions](https://storybook.js.org/docs/essentials/actions) auto-detects which args are callbacks and appends a logging function to them. That way, interactions (like clicks) get logged in the actions panel.\n\n### [Using the play function](#using-the-play-function)\n\nStorybook's `play` function and the [`@storybook/addon-interactions`](https://storybook.js.org/addons/@storybook/addon-interactions) are convenient helper methods to test component scenarios that otherwise require user intervention. They're small code snippets that execute once your story renders. For example, suppose you wanted to validate a form component, you could write the following story using the `play` function to check how the component responds when filling in the inputs with information:\n\nWithout the help of the `play` function and the `@storybook/addon-interactions`, you had to write your own stories and manually interact with the component to test out each use case scenario possible.\n\n### [Using parameters](#using-parameters)\n\nParameters are Storybook’s method of defining static metadata for stories. A story’s parameters can be used to provide configuration to various addons at the level of a story or group of stories.\n\nFor instance, suppose you wanted to test your Button component against a different set of backgrounds than the other components in your app. You might add a component-level `backgrounds` parameter:\n\n![Parameters background color](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-stories%2Fparameters-background-colors.png&w=3840&q=75)\n\nThis parameter would instruct the backgrounds addon to reconfigure itself whenever a Button story is selected. Most addons are configured via a parameter-based API and can be influenced at a [global](https://storybook.js.org/docs/writing-stories/parameters#global-parameters), [component](https://storybook.js.org/docs/writing-stories/parameters#component-parameters) and [story](https://storybook.js.org/docs/writing-stories/parameters#story-parameters) level.\n\n### [Using decorators](#using-decorators)\n\nDecorators are a mechanism to wrap a component in arbitrary markup when rendering a story. Components are often created with assumptions about ‘where’ they render. Your styles might expect a theme or layout wrapper, or your UI might expect specific context or data providers.\n\nA simple example is adding padding to a component’s stories. Accomplish this using a decorator that wraps the stories in a `div` with padding, like so:\n\nDecorators [can be more complex](https://storybook.js.org/docs/writing-stories/decorators#context-for-mocking) and are often provided by [addons](https://storybook.js.org/docs/configure/user-interface/storybook-addons). You can also configure decorators at the [story](https://storybook.js.org/docs/writing-stories/decorators#story-decorators), [component](https://storybook.js.org/docs/writing-stories/decorators#component-decorators) and [global](https://storybook.js.org/docs/writing-stories/decorators#global-decorators) level.\n\n## [Stories for two or more components](#stories-for-two-or-more-components)\n\nSometimes you may have two or more components created to work together. For instance, if you have a parent `List` component, it may require child `ListItem` components.\n\nIn such cases, it makes sense to render a different function for each story:\n\nYou can also reuse _story data_ from the child `ListItem` in your `List` component. That’s easier to maintain because you don’t have to update it in multiple places.\n\nNote that there are disadvantages in writing stories like this as you cannot take full advantage of the args mechanism and composing args as you build even more complex composite components. For more discussion, see the [multi component stories](https://storybook.js.org/docs/writing-stories/stories-for-multiple-components) workflow documentation.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/builders/webpack",
    "markdown": "# StorybookChromatic\n\nStorybook Webpack builder is the default builder for Storybook. This builder enables you to create a seamless development and testing experience for your components and provides an efficient way to develop UI components in isolation allowing you to leverage your existing Webpack configuration with Storybook.\n\n## [Configure](#configure)\n\nBy default, Storybook provides zero-config support for Webpack and automatically sets up a baseline configuration created to work with the most common use cases. However, you can extend your Storybook configuration file (i.e., `.storybook/main.js|ts`) and provide additional options to improve your Storybook's performance or customize it to your needs. Listed below are the available options and examples of how to use them.\n\n| Option | Description |\n| --- | --- |\n| `lazyCompilation` | Enables Webpack's experimental [`lazy compilation`](https://webpack.js.org/configuration/experiments/#experimentslazycompilation)  <br>`core: { builder: { options: { lazyCompilation: true } } }` |\n| `fsCache` | Configures Webpack's filesystem [caching](https://webpack.js.org/configuration/cache/#cachetype) feature  <br>`core: { builder: { options: { fsCache: true } } }` |\n\n### [Override the default configuration](#override-the-default-configuration)\n\nStorybook's Webpack configuration is based on [Webpack 5](https://webpack.js.org/), allowing it to be extended to fit your project's needs. If you need to add a loader or a plugin, you can provide the `webpackFinal` configuration element in your [`.storybook/main.js|ts`](https://storybook.js.org/docs/configure/index#configure-your-storybook-project) file. The configuration element should export a function that receives the baseline configuration as the first argument and Storybook's options object as the second argument. For example:\n\nWhen Storybook starts, it automatically merges the configuration into its own. However, when providing the `webpackFinal` configuration element, you're responsible for merging the configuration yourself. We recommend that you handle the changes to the `config` object responsibly, preserving both the `entry` and `output` properties.\n\n#### [Working with Webpack plugins](#working-with-webpack-plugins)\n\nAnother way to customize your Storybook configuration is to add a custom plugin or loader to help with code optimization, asset management, or other tasks. Nevertheless, since Storybook relies on the `HtmlWebpackPlugin` to generate the preview page, we recommend that you append the changes to the `config.plugins` array rather than overwriting it. For example:\n\nAdditionally, when working with Webpack loaders that don't explicitly include specific file extensions (i.e., via the `test` property), you should `exclude` the `.ejs` file extension for that loader.\n\n### [Import a custom Webpack configuration](#import-a-custom-webpack-configuration)\n\nIf you already have an existing Webpack configuration file that you need to reuse with Storybook, you can import it and merge it into the default configuration. For example:\n\nProjects scaffolded based on generators may require that you import their specific Webpack configuration files. We suggest reading your generator's documentation for more information.\n\n### [Debug Webpack configuration](#debug-webpack-configuration)\n\nIf you intend to debug the Webpack configuration used by Storybook, you can use the Storybook CLI to help you. If you're running in [development mode](https://storybook.js.org/docs/api/cli-options#dev), you can use the following command:\n\nAdditionally, if you're generating a [static build](https://storybook.js.org/docs/api/cli-options#build) of your Storybook, you can use the following command:\n\n## [Compiler support](#compiler-support)\n\nStorybook takes a compiler-agnostic approach to bundling. This allows you to bring your own application bundler (e.g., [Babel](https://babeljs.io/), [SWC](https://swc.rs/)) and ensures compatibility within the vast ecosystem of Webpack 5-based projects.\n\n### [SWC](#swc)\n\nIf your project is built using [SWC](https://swc.rs/), use the [`@storybook/addon-webpack5-compiler-swc`](https://storybook.js.org/addons/@storybook/addon-webpack5-compiler-swc) addon. This addon increases ecosystem compatibility with Webpack 5 projects while maintaining high performance. Run the following command to set up the addon automatically:\n\nAdditional options can be provided to customize the SWC configuration. See the [SWC API documentation](https://storybook.js.org/docs/api/main-config/main-config-swc) for more information.\n\nWhen enabled, this addon adjusts the Webpack configuration to use the [`swc-loader`](https://swc.rs/docs/usage/swc-loader) for JavaScript and TypeScript files. Additionally, it will detect and use your project's SWC configuration.\n\n### [Babel](#babel)\n\nIf you're working with a project that relies on Babel's tooling to provide support for specific features, including TypeScript or other modern JavaScript features, you can use the [`@storybook/addon-webpack5-compiler-babel`](https://storybook.js.org/addons/@storybook/addon-webpack5-compiler-babel) addon to allow you to include them in your Storybook to ensure compatibility with your project. Run the following command to set up the addon automatically:\n\nWhen enabled, the addon will adjust the Webpack configuration to use the [`babel-loader`](https://webpack.js.org/loaders/babel-loader/) as the default loader for JavaScript and TypeScript files. Additionally, it will detect and use your project's Babel configuration.\n\n## [Troubleshooting](#troubleshooting)\n\n### [TypeScript modules are not resolved within Storybook](#typescript-modules-are-not-resolved-within-storybook)\n\nStorybook's default Webpack configuration provides support for most project setups without the need for any additional configuration. Nevertheless, depending on your project configuration, or the framework of choice, you may run into issues with TypeScript modules not being resolved within Storybook when aliased from your [`tsconfig` file](https://www.typescriptlang.org/tsconfig). If you encounter this issue, you can use [`tsconfig-paths-webpack-plugin`](https://github.com/dividab/tsconfig-paths-webpack-plugin#tsconfig-paths-webpack-plugin) while [extending Storybook's Webpack config](#override-the-default-configuration) as follows:\n\nHowever, if you're working with a framework that provides a default aliasing configuration (e.g., Next.js, Nuxt) and you want to configure Storybook to use the same aliases, you may not need to install any additional packages. Instead, you can extend the default configuration of Storybook to use the same aliases provided by the framework. For example, to set up an alias for the `@` import path, you can add the following to your `.storybook/main.js|ts` file:\n\n### [Pre-bundled assets do not show in the Storybook UI](#pre-bundled-assets-do-not-show-in-the-storybook-ui)\n\nAs Storybook relies on [esbuild](https://esbuild.github.io/) to build its internal manager, support for bundling assets with the `managerWebpack` will no longer have an impact on the Storybook UI. We recommend removing existing `managerWebpack` configuration elements from your Storybook configuration file and bundling assets other than images or CSS into JavaScript beforehand.\n\n### [Storybook doesn't run with Webpack 4](#storybook-doesnt-run-with-webpack-4)\n\nSupport for Webpack 4 has been removed and is no longer being maintained. If you're upgrading your Storybook, it will automatically use Webpack 5 and attempt to migrate your configuration. However, if you're working with a custom Webpack configuration, you may need to update it to work with Webpack 5. The migration process is necessary to ensure that your project runs smoothly with the latest version of Storybook. You can follow the instructions provided on the Webpack [website](https://webpack.js.org/migrate/5/) to update your configuration.\n\n**Learn more about builders**\n\n*   [Vite builder](https://storybook.js.org/docs/builders/vite) for bundling with Vite\n*   Webpack builder for bundling with Webpack\n*   [Builder API](https://storybook.js.org/docs/builders/builder-api) for building a Storybook builder",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/essentials/backgrounds",
    "markdown": "# StorybookChromatic\n\nThe backgrounds toolbar addon allows you to set the background color in which the story renders in the UI:\n\n## [Configuration](#configuration)\n\nBy default, the backgrounds toolbar includes a light and dark background.\n\nBut you're not restricted to these backgrounds, you can configure your own set of colors with the `parameters.backgrounds` [parameter](https://storybook.js.org/docs/writing-stories/parameters) in your [`.storybook/preview.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering):\n\nIf you define the `default` property, the addon will apply it to all stories. Otherwise, it's only listed as an available color.\n\n### [Extending the configuration](#extending-the-configuration)\n\nYou can also define backgrounds per-component or per-story basis through [parameter inheritance](https://storybook.js.org/docs/writing-stories/parameters#component-parameters):\n\nYou can also override a single key on the `backgrounds` parameter, for instance, to set a different default value for a particular story:\n\n### [Disable backgrounds](#disable-backgrounds)\n\nIf you want to disable backgrounds in a story, you can do so by setting the `backgrounds` parameter like so:\n\n## [Grid](#grid)\n\nBackgrounds toolbar also includes a Grid selector. This way, you can quickly see if your components are aligned.\n\nYou don't need additional configuration to get started. But its properties are fully customizable, if you don't supply any value to any of its properties, they'll default to the following values:\n\n### [Disable the grid](#disable-the-grid)\n\nIf you need to disable the grid for a specific story, set the `backgrounds` parameter to the following:\n\n## [API](#api)\n\n### [Parameters](#parameters)\n\nThis addon contributes the following [parameters](https://storybook.js.org/docs/writing-stories/parameters) to Storybook, under the `backgrounds` namespace:\n\n#### [`default`](#default)\n\nType: `string`\n\nDefault background color. Must match the `name` property of one of the [available colors](#values).\n\n#### [`disable`](#disable)\n\nType: `boolean`\n\nDisable this addon's behavior. If you wish to disable this addon for the entire Storybook, you should do so when registering `addon-essentials`. See the [essential addon's docs](https://storybook.js.org/docs/essentials/index#disabling-addons) for more information.\n\nThis parameter is most useful to allow overriding at more specific levels. For example, if this parameter is set to `true` at the project level, it could then be re-enabled by setting it to `false` at the meta (component) or story level.\n\n#### [`grid`](#grid-1)\n\nType:\n\n##### `grid.cellAmount`\n\nType: `number`\n\nDefault: `5`\n\nSpecify the size of the minor grid lines.\n\n##### `grid.cellSize`\n\nType: `number`\n\nDefault: `20`\n\nSpecify the size of the major grid lines.\n\n##### `grid.disable`\n\nType: `boolean`\n\nDisable the grid.\n\n##### `grid.offsetX`\n\nType: `number`\n\nDefault: `0` if [story layout](https://storybook.js.org/docs/api/parameters#layout) is `'fullscreen'`; `16` if story layout is `'padded'`\n\nHorizontal offset of the grid.\n\n##### `grid.offsetY`\n\nType: `number`\n\nDefault: `0` if [story layout](https://storybook.js.org/docs/api/parameters#layout) is `'fullscreen'`; `16` if story layout is `'padded'`\n\nVertical offset of the grid.\n\n##### `grid.opacity`\n\nType: `number`\n\nDefault: `0.5`\n\nOpacity of the grid lines.\n\n#### [`values`](#values)\n\nType: `{ name: string; value: string }[]`\n\nAvailable background colors. See above for a [usage example](#configuration).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/builders/builder-api",
    "markdown": "# StorybookChromatic\n\nStorybook is architected to support multiple builders, including [Webpack](https://webpack.js.org/), [Vite](https://vitejs.dev/), and [ESBuild](https://esbuild.github.io/). The builder API is the set of interfaces you can use to add a new builder to Storybook.\n\n![Storybook builders](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fbuilders%2Fstorybook-builders.png&w=3840&q=75)\n\n## [How do builders work?](#how-do-builders-work)\n\nIn Storybook, a builder is responsible for compiling your components and stories into JS bundles that run in the browser. A builder also provides a development server for interactive development and a production mode for optimized bundles.\n\nTo opt into a builder, the user must add it as a dependency and then edit their configuration file (`.storybook/main.js`) to enable it. For example, with the Vite builder:\n\n## [Builder API](#builder-api)\n\nIn Storybook, every builder must implement the following [API](https://github.com/storybookjs/storybook/blob/next/code/lib/types/src/modules/core-common.ts#L183-L203), exposing the following configuration options and entry points:\n\nIn development mode, the `start` API call is responsible for initializing the development server to monitor the file system for changes (for example, components and stories) then execute a hot module reload in the browser. It also provides a **bail** function to allow the running process to end gracefully, either via user input or error.\n\nIn production, the `build` API call is responsible for generating a static Storybook build, storing it by default in the `storybook-static` directory if no additional configuration is provided. The generated output should contain everything the user needs to view its Storybook by opening either the `index.html` or `iframe.html` in a browser with no other processes running.\n\n## [Implementation](#implementation)\n\nUnder the hood, a builder is responsible for serving/building the preview `iframe`, which has its own set of requirements. To fully support Storybook, including the [Essential addons](https://storybook.js.org/docs/writing-stories) that ship with Storybook, it must consider the following.\n\n### [Import stories](#import-stories)\n\nThe `stories` configuration field enables story loading in Storybook. It defines an array of file globs containing the physical location of the component's stories. The builder must be able to load those files and monitor them for changes and update the UI accordingly.\n\n### [Provide configuration options](#provide-configuration-options)\n\nBy default, Storybook's configuration is handled in a dedicated file (`storybook/main.js|ts`), giving the user the option to customize it to suit its needs. The builder should also provide its own configuration support through additional fields or some other builder-appropriate mechanism. For example:\n\n### [Handle preview.js exports](#handle-previewjs-exports)\n\nThe [`preview.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering) configuration file allows users to control how the story renders in the UI. This is provided via the [decorators](https://storybook.js.org/docs/writing-stories/decorators) named export. When Storybook starts, it converts these named exports into internal API calls via virtual module entry, for example, `addDecorator()`. The builder must also provide a similar implementation. For example:\n\n### [MDX support](#mdx-support)\n\n[Storybook's Docs](https://storybook.js.org/docs/writing-docs) includes the ability to author stories/documentation in MDX using a Webpack loader. The builder must also know how to interpret MDX and invoke Storybook's special extensions. For example:\n\n### [Generate source code snippets](#generate-source-code-snippets)\n\nStorybook annotates components and stories with additional metadata related to their inputs to automatically generate interactive controls and documentation. Currently, this is provided via Webpack loaders/plugins. The builder must re-implement this to support those features.\n\n### [Generate a static build](#generate-a-static-build)\n\nOne of Storybook's core features it's the ability to generate a static build that can be [published](https://storybook.js.org/docs/sharing/publish-storybook) to a web hosting service. The builder must also be able to provide a similar mechanism. For example:\n\n### [Development server integration](#development-server-integration)\n\nBy default, when Storybook starts in development mode, it relies on its internal development server. The builder needs to be able to integrate with it. For example:\n\n### [Shutdown the development server](#shutdown-the-development-server)\n\nThe builder must provide a way to stop the development server once the process terminates; this can be via user input or error. For example:\n\n### [HMR support](#hmr-support)\n\nWhile running in development mode, the builder's development server must be able to reload the page once a change happens, either in a story, component, or helper function.\n\n### [More information](#more-information)\n\nThis area is under rapid development, and the associated documentation is still in progress and subject to change. If you are interested in creating a builder, you can learn more about implementing a builder in Storybook by checking the source code for [Vite](https://github.com/storybookjs/storybook/tree/next/code/builders/builder-vite), [Webpack](https://github.com/storybookjs/storybook/tree/next/code/builders/builder-webpack5), or Modern Web's [dev-server-storybook](https://github.com/modernweb-dev/web/blob/master/packages/dev-server-storybook/src/serve/storybookPlugin.ts). When you're ready, open an [RFC](https://storybook.js.org/docs/contribute/RFC) to discuss your proposal with the Storybook community and maintainers.\n\n**Learn more about builders**\n\n*   [Vite builder](https://storybook.js.org/docs/builders/vite) for bundling with Vite\n*   [Webpack builder](https://storybook.js.org/docs/builders/webpack) for bundling with Webpack\n*   Builder API for building a Storybook builder",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/essentials/controls",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nStorybook Controls gives you a graphical UI to interact with a component's arguments dynamically without needing to code. It creates an addon panel next to your component examples (\"stories\"), so you can edit them live.\n\nControls do not require any modification to your components. Stories for controls are:\n\n*   Convenient. Auto-generate controls based on React/Vue/Angular/etc. components.\n*   Portable. Reuse your interactive stories in documentation, tests, and even in designs.\n*   Rich. Customize the controls and interactive data to suit your exact needs.\n\nTo use the Controls addon, you need to write your stories using [args](https://storybook.js.org/docs/writing-stories/args). Storybook will automatically generate UI controls based on your args and what it can infer about your component. Still, you can configure the controls further using [argTypes](https://storybook.js.org/docs/api/arg-types), see below.\n\n## [Choosing the control type](#choosing-the-control-type)\n\nBy default, Storybook will choose a control for each arg based on its initial value. This will work well with specific arg types (e.g., `boolean` or `string`). To enable them, add the `component` annotation to the default export of your story file, and it will be used to infer the controls and auto-generate the matching [`argTypes`](https://storybook.js.org/docs/api/arg-types) for your component using [`react-docgen`](https://github.com/reactjs/react-docgen), a documentation generator for React components that also includes first-class support for TypeScript.\n\nFor instance, suppose you have a `variant` arg on your story that should be `primary` or `secondary`:\n\nBy default, Storybook will render a free text input for the `variant` arg:\n\n![Essential addon Controls using a string](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fessentials%2Faddon-controls-args-variant-string.png&w=3840&q=75)\n\nIt works as long as you type a valid string into the auto-generated text control. Still, it's not the best UI for our scenario, given that the component only accepts `primary` or `secondary` as variants. Let’s replace it with Storybook’s radio component.\n\nWe can specify which controls get used by declaring a custom [argType](https://storybook.js.org/docs/api/arg-types) for the `variant` property. ArgTypes encode basic metadata for args, such as name, description, and defaultValue for an arg. These get automatically filled in by Storybook Docs.\n\n`ArgTypes` can also contain arbitrary annotations, which the user can override. Since `variant` is a property of the component, let's put that annotation on the default export.\n\nArgTypes are a powerful feature that can be used to customize the controls for your stories. For more information, see the documentation about [customizing controls](#annotation) with `argTypes` annotation.\n\nThis replaces the input with a radio group for a more intuitive experience.\n\n![Essential Control addon with a radio group](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fessentials%2Faddon-controls-args-variant-optimized.png&w=3840&q=75)\n\n## [Custom control type matchers](#custom-control-type-matchers)\n\nControls can automatically be inferred from arg's name with [regex](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp), but currently only for the color picker and date picker controls. If you've used the Storybook CLI to setup your project, it should have automatically created the following defaults in `.storybook/preview.js`:\n\n| Control | Default regex | Description |\n| --- | --- | --- |\n| **color** | `/(background\\|color)$/i` | Will display a color picker UI for the args that match it |\n| **date** | `/Date$/` | Will display a date picker UI for the args that match it |\n\nIf you haven't used the CLI to set the configuration, or if you want to define your patterns, use the `matchers` property in the `controls` parameter:\n\n## [Fully custom args](#fully-custom-args)\n\nUntil now, we only used auto-generated controls based on the component for which we're writing stories. If we are writing [complex stories](https://storybook.js.org/docs/writing-stories/stories-for-multiple-components), we may want to add controls for args that aren’t part of the component. For example, here's how you could use a `footer` arg to populate a child component:\n\nBy default, Storybook will add controls for all args that:\n\n*   It infers from the component definition [if your framework supports it](https://storybook.js.org/docs/configure/integration/frameworks-feature-support).\n    \n*   Appear in the list of args for your story.\n    \n\nUsing `argTypes`, you can change the display and behavior of each control.\n\n### [Dealing with complex values](#dealing-with-complex-values)\n\nWhen dealing with non-primitive values, you'll notice that you'll run into some limitations. The most obvious issue is that not every value can be represented as part of the `args` param in the URL, losing the ability to share and deep link to such a state. Beyond that, complex values such as JSX cannot be synchronized between the manager (e.g., Controls addon) and the preview (your story).\n\nOne way to deal with this is to use primitive values (e.g., strings) as arg values and add a custom `render` function to convert them to their complex counterpart before rendering. It isn't the nicest way to do it (see below), but certainly the most flexible.\n\nUnless you need the flexibility of a function, an easier way to map primitives to complex values before rendering is to define a `mapping`; additionally, you can specify `control.labels` to configure custom labels for your checkbox, radio, or select input.\n\nNote that both `mapping` and `control.labels` don't have to be exhaustive. If the currently selected option is not listed, it's used verbatim.\n\n## [Creating and editing stories from controls](#creating-and-editing-stories-from-controls)\n\nThe Controls addon allows you to create or edit stories, directly from the Controls panel.\n\n### [Create a new story](#create-a-new-story)\n\nOpen the Controls panel for a story and adjust the value of a control. Then save those changes as a new story.\n\nIf you're working on a component that does not yet have any stories, you can click the ➕ button in the sidebar to search for your component and have a basic story created for you.\n\n### [Edit a story](#edit-a-story)\n\nYou can also update a control's value, then save the changes to the story. The story file's code will be updated for you.\n\n## [Configuration](#configuration)\n\nThe Controls addon can be configured in two ways:\n\n*   Individual controls can be configured via control annotations.\n*   The addon's appearance can be configured via parameters.\n\n### [Annotation](#annotation)\n\nAs shown above, you can configure individual controls with the “control\" annotation in the [argTypes](https://storybook.js.org/docs/api/arg-types) field of either a component or story. Below is a condensed example and table featuring all available controls.\n\n| Data Type | Control | Description |\n| --- | --- | --- |\n| **boolean** | `boolean` | Provides a toggle for switching between possible states.  <br>`argTypes: { active: { control: 'boolean' }}` |\n| **number** | `number` | Provides a numeric input to include the range of all possible values.  <br>`argTypes: { even: { control: { type: 'number', min:1, max:30, step: 2 } }}` |\n|     | `range` | Provides a range slider component to include all possible values.  <br>`argTypes: { odd: { control: { type: 'range', min: 1, max: 30, step: 3 } }}` |\n| **object** | `object` | Provides a JSON-based editor component to handle the object's values.  <br>Also allows edition in raw mode.  <br>`argTypes: { user: { control: 'object' }}` |\n| **array** | `object` | Provides a JSON-based editor component to handle the array's values.  <br>Also allows edition in raw mode.  <br>`argTypes: { odd: { control: 'object' }}` |\n|     | `file` | Provides a file input component that returns an array of URLs.  <br>Can be further customized to accept specific file types.  <br>`argTypes: { avatar: { control: { type: 'file', accept: '.png' } }}` |\n| **enum** | `radio` | Provides a set of radio buttons based on the available options.  <br>`argTypes: { contact: { control: 'radio', options: ['email', 'phone', 'mail'] }}` |\n|     | `inline-radio` | Provides a set of inlined radio buttons based on the available options.  <br>`argTypes: { contact: { control: 'inline-radio', options: ['email', 'phone', 'mail'] }}` |\n|     | `check` | Provides a set of checkbox components for selecting multiple options.  <br>`argTypes: { contact: { control: 'check', options: ['email', 'phone', 'mail'] }}` |\n|     | `inline-check` | Provides a set of inlined checkbox components for selecting multiple options.  <br>`argTypes: { contact: { control: 'inline-check', options: ['email', 'phone', 'mail'] }}` |\n|     | `select` | Provides a drop-down list component to handle single value selection. `argTypes: { age: { control: 'select', options: [20, 30, 40, 50] }}` |\n|     | `multi-select` | Provides a drop-down list that allows multiple selected values. `argTypes: { countries: { control: 'multi-select', options: ['USA', 'Canada', 'Mexico'] }}` |\n| **string** | `text` | Provides a freeform text input.  <br>`argTypes: { label: { control: 'text' }}` |\n|     | `color` | Provides a color picker component to handle color values.  <br>Can be additionally configured to include a set of color presets.  <br>`argTypes: { color: { control: { type: 'color', presetColors: ['red', 'green']} }}` |\n|     | `date` | Provides a datepicker component to handle date selection. `argTypes: { startDate: { control: 'date' }}` |\n\nThe `date` control will convert the date into a UNIX timestamp when the value changes. It's a known limitation that will be fixed in a future release. If you need to represent the actual date, you'll need to update the story's implementation and convert the value into a date object.\n\nNumeric data types will default to a `number` control unless additional configuration is provided.\n\n### [Parameters](#parameters)\n\nControls supports the following configuration [parameters](https://storybook.js.org/docs/writing-stories/parameters), either globally or on a per-story basis:\n\n#### [Show full documentation for each property](#show-full-documentation-for-each-property)\n\nSince Controls is built on the same engine as Storybook Docs, it can also show property documentation alongside your controls using the expanded parameter (defaults to false). This means you embed a complete [`Controls`](https://storybook.js.org/docs/api/doc-blocks/doc-block-controls) doc block in the controls panel. The description and default value rendering can be [customized](#fully-custom-args) like the doc block.\n\nTo enable expanded mode globally, add the following to [`.storybook/preview.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering):\n\nHere's what the resulting UI looks like:\n\n![Controls addon expanded](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fessentials%2Faddon-controls-expanded.png&w=3840&q=75)\n\n#### [Specify initial preset color swatches](#specify-initial-preset-color-swatches)\n\nFor `color` controls, you can specify an array of `presetColors`, either on the `control` in `argTypes`, or as a parameter under the `controls` namespace:\n\nColor presets can be defined as an object with `color` and `title` or a simple CSS color string. These will then be available as swatches in the color picker. When you hover over the color swatch, you'll be able to see its title. It will default to the nearest CSS color name if none is specified.\n\n#### [Filtering controls](#filtering-controls)\n\nIn specific cases, you may be required to display only a limited number of controls in the controls panel or all except a particular set.\n\nTo make this possible, you can use optional `include` and `exclude` configuration fields in the `controls` parameter, which you can define as an array of strings or a regular expression.\n\nConsider the following story snippets:\n\n#### [Sorting controls](#sorting-controls)\n\nBy default, controls are unsorted and use whatever order the args data is processed in (`none`). Additionally, you can sort them alphabetically by the arg's name (`alpha`) or with the required args first (`requiredFirst`).\n\nConsider the following snippet to force required args first:\n\n### [Disable controls for specific properties](#disable-controls-for-specific-properties)\n\nAside from the features already documented here, Controls can also be disabled for individual properties.\n\nSuppose you want to turn off Controls for a property called `foo` in a component's story. The following example illustrates how:\n\nResulting in the following change in Storybook UI:\n\nThe previous example also removed the prop documentation from the table. In some cases, this is fine. However, sometimes you might want to render the prop documentation without a control. The following example illustrates how:\n\nAs with other Storybook properties, such as [decorators](https://storybook.js.org/docs/writing-stories/decorators), you can apply the same pattern at a story level for more granular cases.\n\n### [Conditional controls](#conditional-controls)\n\nIn some cases, it's useful to be able to conditionally exclude a control based on the value of another control. Controls supports basic versions of these use cases with the `if`, which can take a simple query object to determine whether to include the control.\n\nConsider a collection of \"advanced\" settings only visible when the user toggles an \"advanced\" toggle.\n\nOr consider a constraint where if the user sets one control value, it doesn't make sense for the user to be able to set another value.\n\nThe query object must contain either an `arg` or `global` target:\n\n| field | type | meaning |\n| --- | --- | --- |\n| arg | string | The ID of the arg to test. |\n| global | string | The ID of the global to test. |\n\nIt may also contain at most one of the following operators:\n\n| operator | type | meaning |\n| --- | --- | --- |\n| truthy | boolean | Is the target value truthy? |\n| exists | boolean | Is the target value defined? |\n| eq  | any | Is the target value equal to the provided value? |\n| neq | any | Is the target value NOT equal to the provided value? |\n\nIf no operator is provided, that is equivalent to `{ truthy: true }`.\n\n## [API](#api)\n\n### [Parameters](#parameters-1)\n\nThis addon contributes the following [parameters](https://storybook.js.org/docs/writing-stories/parameters) to Storybook, under the `controls` namespace:\n\n#### [`disable`](#disable)\n\nType: `boolean`\n\nDisable this addon's behavior. If you wish to disable this addon for the entire Storybook, you should do so when registering `addon-essentials`. See the [essential addon's docs](https://storybook.js.org/docs/essentials/index#disabling-addons) for more information.\n\nThis parameter is most useful to allow overriding at more specific levels. For example, if this parameter is set to `true` at the project level, it could then be re-enabled by setting it to `false` at the meta (component) or story level.\n\n#### [`exclude`](#exclude)\n\nType: `string[] | RegExp`\n\nSpecifies which properties to exclude from the Controls addon panel. Any properties whose names match the regex or are part of the array will be left out. See [usage example](#filtering-controls), above.\n\n#### [`expanded`](#expanded)\n\nType: `boolean`\n\nShow the full documentation for each property in the Controls addon panel, including the description and default value. See [usage example](#show-full-documentation-for-each-property), above.\n\n#### [`include`](#include)\n\nType: `string[] | RegExp`\n\nSpecifies which properties to include in the Controls addon panel. Any properties whose names don't match the regex or are not part of the array will be left out. See [usage example](#filtering-controls), above.\n\n#### [`presetColors`](#presetcolors)\n\nType: `(string | { color: string; title?: string })[]`\n\nSpecify preset color swatches for the color picker control. The color value may be any valid CSS color. See [usage example](#specify-initial-preset-color-swatches), above.\n\n#### [`sort`](#sort)\n\nType: `'none' | 'alpha' | 'requiredFirst'`\n\nDefault: `'none'`\n\nSpecifies how the controls are sorted.\n\n*   **none**: Unsorted, displayed in the same order the arg types are processed in\n*   **alpha**: Sorted alphabetically, by the arg type's name\n*   **requiredFirst**: Same as `alpha`, with any required arg types displayed first",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/essentials/highlight",
    "markdown": "# StorybookChromatic\n\nStorybook's [Highlight](https://storybook.js.org/addons/@storybook/addon-highlight/) addon is a helpful tool for visually debugging your components, allowing you to highlight specific DOM nodes within your story when used as a standalone addon or enhancing other addons such as the [Accessibility addon](https://storybook.js.org/addons/@storybook/addon-a11y/) to inform you of accessibility issues within your components.\n\n![Story with highlighted elements](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fessentials%2Fhighlight.png&w=3840&q=75)\n\n## [Highlighting DOM Elements](#highlighting-dom-elements)\n\nTo highlight DOM elements with the addon, you'll need to emit the `HIGHLIGHT` event from within a story or an addon. The event payload must contain an `elements` property assigned to an array of selectors matching the elements you want to highlight. For example:\n\nWe recommend choosing the most specific selector possible to avoid highlighting elements other addons use. This is because the addon tries to match selectors against the entire DOM tree.\n\n### [Reset highlighted elements](#reset-highlighted-elements)\n\nOut of the box, Storybook automatically removes highlighted elements when transitioning between stories. However, if you need to clear them manually, you can emit the `RESET_HIGHLIGHT` event from within a story or an addon. For example:\n\nThe `emit` function derived from the `useChannel` API hook creates a communication channel in Storybook's UI to listen for events and update the UI accordingly. The Highlight addon uses this channel to listen to custom events and update the highlighted elements (if any) accordingly.\n\n## [Customize style](#customize-style)\n\nBy default, the addon applies a standard style to the highlighted elements you've enabled for the story. However, you can enable your custom style by extending the payload object and providing a `color` and/or `style` properties. For example:\n\n## [API](#api)\n\n### [Parameters](#parameters)\n\nThis addon contributes the following [parameters](https://storybook.js.org/docs/writing-stories/parameters) to Storybook, under the `highlight` namespace:\n\n#### [`disable`](#disable)\n\nType: `boolean`\n\nDisable this addon's behavior. If you wish to disable this addon for the entire Storybook, you should do so when registering `addon-essentials`. See the [essential addon's docs](https://storybook.js.org/docs/essentials/index#disabling-addons) for more information.\n\nThis parameter is most useful to allow overriding at more specific levels. For example, if this parameter is set to `true` at the project level, it could then be re-enabled by setting it to `false` at the meta (component) or story level.\n\n### [Exports](#exports)\n\nThis addon contributes the following exports to Storybook:\n\n#### [`HIGHLIGHT`](#highlight)\n\nType: `string`\n\nAn event that highlights DOM elements. The event payload must contain an `elements` property assigned to an array of selectors matching the elements you want to highlight. See the [usage example](#highlighting-dom-elements), above.\n\n#### [`RESET_HIGHLIGHT`](#reset_highlight)\n\nType: `string`\n\nAn event to clear all highlights from highlighted elements. See the [usage example](#reset-highlighted-elements), above.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories/args",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nA story is a component with a set of arguments that define how the component should render. “Args” are Storybook’s mechanism for defining those arguments in a single JavaScript object. Args can be used to dynamically change props, slots, styles, inputs, etc. It allows Storybook and its addons to live edit components. You _do not_ need to modify your underlying component code to use args.\n\nWhen an arg’s value changes, the component re-renders, allowing you to interact with components in Storybook’s UI via addons that affect args.\n\nLearn how and why to write stories in [the introduction](https://storybook.js.org/docs/writing-stories/). For details on how args work, read on.\n\n## [Args object](#args-object)\n\nThe `args` object can be defined at the [story](#story-args), [component](#component-args) and [global level](#global-args). It is a JSON serializable object composed of string keys with matching valid value types that can be passed into a component for your framework.\n\n## [Story args](#story-args)\n\nTo define the args of a single story, use the `args` CSF story key:\n\nThese args will only apply to the story for which they are attached, although you can [reuse](https://storybook.js.org/docs/writing-stories/build-pages-with-storybook#args-composition-for-presentational-screens) them via JavaScript object reuse:\n\nIn the above example, we use the [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) feature of ES 2015.\n\n## [Component args](#component-args)\n\nYou can also define args at the component level; they will apply to all the component's stories unless you overwrite them. To do so, use the `args` key on the `default` CSF export:\n\n## [Global args](#global-args)\n\nYou can also define args at the global level; they will apply to every component's stories unless you overwrite them. To do so, define the `args` property in the default export of `preview.js`:\n\nFor most uses of global args, [globals](https://storybook.js.org/docs/essentials/toolbars-and-globals) are a better tool for defining globally-applied settings, such as a theme. Using globals enables users to change the value with the toolbar menu.\n\n## [Args composition](#args-composition)\n\nYou can separate the arguments to a story to compose in other stories. Here's how you can combine args for multiple stories of the same component.\n\nIf you find yourself re-using the same args for most of a component's stories, you should consider using [component-level args](#component-args).\n\nArgs are useful when writing stories for composite components that are assembled from other components. Composite components often pass their arguments unchanged to their child components, and similarly, their stories can be compositions of their child components stories. With args, you can directly compose the arguments:\n\n## [Args can modify any aspect of your component](#args-can-modify-any-aspect-of-your-component)\n\nYou can use args in your stories to configure the component's appearance, similar to what you would do in an application. For example, here's how you could use a `footer` arg to populate a child component:\n\n## [Setting args through the URL](#setting-args-through-the-url)\n\nYou can also override the set of initial args for the active story by adding an `args` query parameter to the URL. Typically you would use the [Controls addon](https://storybook.js.org/docs/essentials/controls) to handle this. For example, here's how you could set a `size` and `style` arg in the Storybook's URL:\n\nAs a safeguard against [XSS](https://owasp.org/www-community/attacks/xss/) attacks, the arg's keys and values provided in the URL are limited to alphanumeric characters, spaces, underscores, and dashes. Any other types will be ignored and removed from the URL, but you can still use them with the Controls addon and [within your story](#mapping-to-complex-arg-values).\n\nThe `args` param is always a set of `key: value` pairs delimited with a semicolon `;`. Values will be coerced (cast) to their respective `argTypes` (which may have been automatically inferred). Objects and arrays are supported. Special values `null` and `undefined` can be set by prefixing with a bang `!`. For example, `args=obj.key:val;arr[0]:one;arr[1]:two;nil:!null` will be interpreted as:\n\nSimilarly, special formats are available for dates and colors. Date objects will be encoded as `!date(value)` with value represented as an ISO date string. Colors are encoded as `!hex(value)`, `!rgba(value)` or `!hsla(value)`. Note that rgb(a) and hsl(a) should not contain spaces or percentage signs in the URL.\n\nArgs specified through the URL will extend and override any default values of args set on the story.\n\n## [Setting args from within a story](#setting-args-from-within-a-story)\n\nInteractive components often need to be controlled by their containing component or page to respond to events, modify their state and reflect those changes in the UI. For example, when a user toggles a switch component, the switch should be checked, and the arg shown in Storybook should reflect the change. To enable this, you can use the `useArgs` API exported by `@storybook/preview-api`:\n\n## [Mapping to complex arg values](#mapping-to-complex-arg-values)\n\nComplex values such as JSX elements cannot be serialized to the manager (e.g., the Controls addon) or synced with the URL. Arg values can be \"mapped\" from a simple string to a complex type using the `mapping` property in `argTypes` to work around this limitation. It works in any arg but makes the most sense when used with the `select` control type.\n\nNote that `mapping` does not have to be exhaustive. If the arg value is not a property of `mapping`, the value will be used directly. Keys in `mapping` always correspond to arg _values_, not their index in the `options` array.\n\nUsing args in addons\n\nIf you are [writing an addon](https://storybook.js.org/docs/addons/writing-addons) that wants to read or update args, use the `useArgs` hook exported by `@storybook/manager-api`:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/csf",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nComponent Story Format (CSF) is the recommended way to [write stories](https://storybook.js.org/docs/writing-stories). It's an [open standard](https://github.com/ComponentDriven/csf) based on ES6 modules that is portable beyond Storybook.\n\nIf you have stories written in the older `storiesOf()` syntax, it was removed in Storybook 8.0 and is no longer maintained. We recommend migrating your stories to CSF. See the [migration guide](https://storybook.js.org/docs/migration-guide/index#storiesof-to-csf) for more information.\n\nIn CSF, stories and component metadata are defined as ES Modules. Every component story file consists of a required [default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export) and one or more [named exports](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export).\n\n## [Default export](#default-export)\n\nThe default export defines metadata about your component, including the `component` itself, its `title` (where it will show up in the [navigation UI story hierarchy](https://storybook.js.org/docs/writing-stories/naming-components-and-hierarchy#sorting-stories)), [decorators](https://storybook.js.org/docs/writing-stories/decorators), and [parameters](https://storybook.js.org/docs/writing-stories/parameters).\n\nThe `component` field is required and used by addons for automatic prop table generation and display of other component metadata. The `title` field is optional and should be unique (i.e., not re-used across files).\n\nFor more examples, see [writing stories](https://storybook.js.org/docs/writing-stories).\n\n## [Named story exports](#named-story-exports)\n\nWith CSF, every named export in the file represents a story object by default.\n\nThe exported identifiers will be converted to \"start case\" using Lodash's [startCase](https://lodash.com/docs/#startCase) function. For example:\n\n| Identifier | Transformation |\n| --- | --- |\n| name | Name |\n| someName | Some Name |\n| someNAME | Some NAME |\n| some\\_custom\\_NAME | Some Custom NAME |\n| someName1234 | Some Name 1 2 3 4 |\n\nWe recommend that all export names to start with a capital letter.\n\nStory objects can be annotated with a few different fields to define story-level [decorators](https://storybook.js.org/docs/writing-stories/decorators) and [parameters](https://storybook.js.org/docs/writing-stories/parameters), and also to define the `name` of the story.\n\nStorybook's `name` configuration element is helpful in specific circumstances. Common use cases are names with special characters or Javascript restricted words. If not specified, Storybook defaults to the named export.\n\n## [Args story inputs](#args-story-inputs)\n\nStarting in SB 6.0, stories accept named inputs called Args. Args are dynamic data that are provided (and possibly updated by) Storybook and its addons.\n\nConsider Storybook’s [\"Button\" example](https://storybook.js.org/docs/writing-stories/index#defining-stories) of a text button that logs its click events:\n\nNow consider the same example, re-written with args:\n\nOr even more simply:\n\nNot only are these versions shorter and more accessible to write than their no-args counterparts, but they are also more portable since the code doesn't depend on the actions addon specifically.\n\nFor more information on setting up [Docs](https://storybook.js.org/docs/writing-docs) and [Actions](https://storybook.js.org/docs/essentials/actions), see their respective documentation.\n\n## [Play function](#play-function)\n\nStorybook's `play` functions are small snippets of code executed when the story renders in the UI. They are convenient helper methods to help you test use cases that otherwise weren't possible or required user intervention.\n\nA good use case for the `play` function is a form component. With previous Storybook versions, you'd write your set of stories and had to interact with the component to validate it. With Storybook's play functions, you could write the following story:\n\nWhen the story renders in the UI, Storybook executes each step defined in the `play` function and runs the assertions without the need for user interaction.\n\n## [Custom render functions](#custom-render-functions)\n\nStarting in Storybook 6.4, you can write your stories as JavaScript objects, reducing the boilerplate code you need to generate to test your components, thus improving functionality and usability. `Render` functions are helpful methods to give you additional control over how the story renders. For example, if you were writing a story as an object and you wanted to specify how your component should render, you could write the following:\n\nWhen Storybook loads this story, it will detect the existence of a `render` function and adjust the component rendering accordingly based on what's defined.\n\n## [Storybook export vs. name handling](#storybook-export-vs-name-handling)\n\nStorybook handles named exports and the `name` option slightly differently. When should you use one vs. the other?\n\nStorybook will always use the named export to determine the story ID and URL.\n\nIf you specify the `name` option, it will be used as the story display name in the UI. Otherwise, it defaults to the named export, processed through Storybook's `storyNameFromExport` and `lodash.startCase` functions.\n\nWhen you want to change the name of your story, rename the CSF export. It will change the name of the story and also change the story's ID and URL.\n\nIt would be best if you used the `name` configuration element in the following cases:\n\n1.  You want the name to show up in the Storybook UI in a way that's not possible with a named export, e.g., reserved keywords like \"default\", special characters like emoji, spacing/capitalization other than what's provided by `storyNameFromExport`.\n2.  You want to preserve the Story ID independently from changing how it's displayed. Having stable Story IDs is helpful for integration with third-party tools.\n\n## [Non-story exports](#non-story-exports)\n\nIn some cases, you may want to export a mixture of stories and non-stories (e.g., mocked data).\n\nYou can use the optional configuration fields `includeStories` and `excludeStories` in the default export to make this possible. You can define them as an array of strings or regular expressions.\n\nConsider the following story file:\n\nWhen this file renders in Storybook, it treats `ComplexStory` and `SimpleStory` as stories and ignores the `data` named exports.\n\nFor this particular example, you could achieve the same result in different ways, depending on what's convenient:\n\n*   `includeStories: /^[A-Z]/`\n*   `includeStories: /.*Story$/`\n*   `includeStories: ['SimpleStory', 'ComplexStory']`\n*   `excludeStories: /^[a-z]/`\n*   `excludeStories: /.*Data$/`\n*   `excludeStories: ['simpleData', 'complexData']`\n\nThe first option is the recommended solution if you follow the best practice of starting story exports with an uppercase letter (i.e., use UpperCamelCase).\n\n## [Upgrading from CSF 2 to CSF 3](#upgrading-from-csf-2-to-csf-3)\n\nIn CSF 2, the named exports are always functions that instantiate a component, and those functions can be annotated with configuration options. For example:\n\nThis declares a Primary story for a Button that renders itself by spreading `{ primary: true }` into the component. The `default.title` metadata says where to place the story in a navigation hierarchy.\n\nHere's the CSF 3 equivalent:\n\nLet's go through the changes individually to understand what's going on.\n\n### [Spreadable story objects](#spreadable-story-objects)\n\nIn CSF 3, the named exports are **objects**, not functions. This allows us to reuse stories more efficiently with the JS spread operator.\n\nConsider the following addition to the intro example, which creates a `PrimaryOnDark` story that renders against a dark background:\n\nHere's the CSF 2 implementation:\n\n`Primary.bind({})` copies the story function, but it doesn't copy the annotations hanging off the function, so we must add `PrimaryOnDark.args = Primary.args` to inherit the args.\n\nIn CSF 3, we can spread the `Primary` object to carry over all its annotations:\n\nLearn more about [named story exports](#named-story-exports).\n\n### [Default render functions](#default-render-functions)\n\nIn CSF 3, you specify how a story renders through a `render` function. We can rewrite a CSF 2 example to CSF 3 through the following steps.\n\nLet's start with a simple CSF 2 story function:\n\nNow, let's rewrite it as a story object in CSF 3 with an explicit `render` function that tells the story how to render itself. Like CSF 2, this gives us full control of how we render a component or even a collection of components.\n\nLearn more about [render functions](#custom-render-functions).\n\nBut in CSF 2, a lot of story functions are identical: take the component specified in the default export and spread args into it. What's interesting about these stories is not the function, but the args passed into the function.\n\nCSF 3 provides default render functions for each renderer. If all you're doing is spreading args into your component—which is the most common case—you don't need to specify any `render` function at all:\n\nFor more information, see the section on [custom render functions](#custom-render-functions).\n\n### [Generate titles automatically](#generate-titles-automatically)\n\nFinally, CSF 3 can automatically generate titles.\n\nYou can still specify a title like in CSF 2, but if you don't specify one, it can be inferred from the story's path on disk. For more information, see the section on [configuring story loading](https://storybook.js.org/docs/configure/index#configure-story-loading).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories/decorators",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nA decorator is a way to wrap a story in extra “rendering” functionality. Many addons define decorators to augment your stories with extra rendering or gather details about how your story renders.\n\nWhen writing stories, decorators are typically used to wrap stories with extra markup or context mocking.\n\nSome components require a “harness” to render in a useful way. For instance, if a component runs right up to its edges, you might want to space it inside Storybook. Use a decorator to add spacing for all stories of the component.\n\n![Story without padding](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-stories%2Fdecorators-no-padding.png&w=3840&q=75)\n\n![Story with padding](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-stories%2Fdecorators-padding.png&w=3840&q=75)\n\n## [“Context” for mocking](#context-for-mocking)\n\nThe second argument to a decorator function is the **story context** which contains the properties:\n\n*   `args` - the story arguments. You can use some [`args`](https://storybook.js.org/docs/writing-stories/args) in your decorators and drop them in the story implementation itself.\n*   `argTypes`\\- Storybook's [argTypes](https://storybook.js.org/docs/api/arg-types) allow you to customize and fine-tune your stories [`args`](https://storybook.js.org/docs/writing-stories/args).\n*   `globals` - Storybook-wide [globals](https://storybook.js.org/docs/essentials/toolbars-and-globals#globals). In particular you can use the [toolbars feature](https://storybook.js.org/docs/essentials/toolbars-and-globals#global-types-and-the-toolbar-annotation) to allow you to change these values using Storybook’s UI.\n*   `hooks` - Storybook's API hooks (e.g., useArgs).\n*   `parameters`\\- the story's static metadata, most commonly used to control Storybook's behavior of features and addons.\n*   `viewMode`\\- Storybook's current active window (e.g., canvas, docs).\n\nThis context can be used to adjust the behavior of your decorator based on the story's arguments or other metadata. For example, you could create a decorator that allows you to optionally apply a layout to the story, by defining `parameters.pageLayout = 'page'` (or `'page-mobile'`): :\n\nFor another example, see the section on [configuring the mock provider](https://storybook.js.org/docs/writing-stories/mocking-data-and-modules/mocking-providers#configuring-the-mock-provider), which demonstrates how to use the same technique to change which theme is provided to the component.\n\n### [Using decorators to provide data](#using-decorators-to-provide-data)\n\nIf your components are “connected” and require side-loaded data to render, you can use decorators to provide that data in a mocked way without having to refactor your components to take that data as an arg. There are several techniques to achieve this. Depending on exactly how you are loading that data. Read more in the [building pages in Storybook](https://storybook.js.org/docs/writing-stories/build-pages-with-storybook) section.\n\n## [Story decorators](#story-decorators)\n\nTo define a decorator for a single story, use the `decorators` key on a named export:\n\nIt is useful to ensure that the story remains a “pure” rendering of the component under test and that any extra HTML or components are used only as decorators. In particular the [Source](https://storybook.js.org/docs/api/doc-blocks/doc-block-source) Doc Block works best when you do this.\n\n## [Component decorators](#component-decorators)\n\nTo define a decorator for all stories of a component, use the `decorators` key of the default CSF export:\n\n## [Global decorators](#global-decorators)\n\nWe can also set a decorator for **all stories** via the `decorators` export of your [`.storybook/preview.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering) file (this is the file where you configure all stories):\n\n## [Decorator inheritance](#decorator-inheritance)\n\nLike parameters, decorators can be defined globally, at the component level, and for a single story (as we’ve seen).\n\nAll decorators relevant to a story will run in the following order once the story renders:\n\n*   Global decorators, in the order they are defined\n*   Component decorators, in the order they are defined\n*   Story decorators, in the order they are defined",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/essentials/interactions",
    "markdown": "# StorybookChromatic\n\nThe [`play`](https://storybook.js.org/docs/writing-stories/play-function) function in Storybook allows you to simulate user interactions to run after a story renders. With the [Interactions](https://storybook.js.org/addons/@storybook/addon-interactions/) addon, you have a way to visualize and debug these interactions.\n\n## [Play function for interactions](#play-function-for-interactions)\n\nStories isolate and capture component states in a structured manner. While developing a component, you can quickly cycle through the stories to verify the look and feel. Each story specifies all the inputs required to reproduce a specific state. You can even mock context and API calls, allowing you to handle most use cases of a component. But what about states that require user interaction?\n\nFor example, clicking a button to open/close a dialog box, dragging a list item to reorder it, or filling out a form to check for validation errors. To test those behaviors, you have to interact with the components as a user would. Interactive stories enable you to automate these interactions using a play function. They are small snippets of code that run once the story finishes rendering, emulating the exact steps a user would take to interact with the component.\n\n### [Powered by Testing Library and Vitest](#powered-by-testing-library-and-vitest)\n\nThe interactions are written using a package called `@storybook/test`. It provides Storybook-instrumented versions of [Testing Library](https://testing-library.com/) and [Vitest](https://vitest.dev/). That gives you a familiar developer-friendly syntax to interact with the DOM and make assertions, but with extra telemetry to help with debugging.\n\n## [Set up the interactions addon](#set-up-the-interactions-addon)\n\nBy default, the [`@storybook/addon-interactions`](https://storybook.js.org/addons/@storybook/addon-interactions/) is already installed and configured if you're adding Storybook for new projects. If you're migrating from a previous version of Storybook, you'll need to install it manually.\n\nRun the following command to install the interactions addon and related dependencies.\n\nNext, update [`.storybook/main.js|ts`](https://storybook.js.org/docs/configure/index#configure-story-rendering) to the following:\n\nNow when you run Storybook, the Interactions addon will be enabled.\n\n![Storybook Interactions installed and registered](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fessentials%2Faddon-interactions-installed-registered.png&w=3840&q=75)\n\n## [Write an interaction test](#write-an-interaction-test)\n\nInteractions run as part of the `play` function of your stories. We rely on Testing Library to do the heavy lifting.\n\nMake sure to import the Storybook wrappers for Vitest and Testing Library via `@storybook/test` rather than importing the original packages directly.\n\nThe above example uses the `canvasElement` to scope your element queries to the current story. It's essential if you want your play functions to eventually be compatible with Storybook Docs, which renders multiple components on the same page. Additionally, the `step` function can be used to create labeled groups of interactions.\n\nWhile you can refer to the [Testing Library documentation](https://testing-library.com/docs/) for details on how to use it, there's an important detail that's different when using the Storybook wrapper: **method invocations must be `await`\\-ed**. It allows you to step back and forth through your interactions using the debugger.\n\nAny `args` that have been marked as an Action, either using the [argTypes annotation](https://storybook.js.org/docs/essentials/actions#action-argtype-annotation) or the [argTypesRegex](https://storybook.js.org/docs/essentials/actions#automatically-matching-args), will be automatically converted to a [Jest mock function](https://jestjs.io/docs/mock-function-api) (spy). This allows you to make assertions about calls to these functions.\n\nTo mock functions in your Storybook stories for reliable and isolated component testing, use the named `fn` import from `@storybook/test`.\n\n## [API](#api)\n\n### [Parameters](#parameters)\n\nThis addon contributes the following [parameters](https://storybook.js.org/docs/writing-stories/parameters) to Storybook, under the `interactions` namespace:\n\n#### [`disable`](#disable)\n\nType: `boolean`\n\nDisable this addon's behavior. If you wish to disable this addon for the entire Storybook, you should do so when registering `addon-essentials`. See the [essential addon's docs](https://storybook.js.org/docs/essentials/index#disabling-addons) for more information.\n\nThis parameter is most useful to allow overriding at more specific levels. For example, if this parameter is set to `true` at the project level, it could then be re-enabled by setting it to `false` at the meta (component) or story level.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/sharing",
    "markdown": "# StorybookChromatic\n\nYou have your components ready and tested. That's great! Now you want to make your component library available to your team or community to help them understand how they work. There are multiple ways you can do that. You can publish your Storybook to services like Chromatic, embed some of your stories in your own website, or use third party services like Figma.\n\n*   [Publish](https://storybook.js.org/docs/sharing/publish-storybook)\n*   [Embed](https://storybook.js.org/docs/sharing/embed)\n*   [Design integrations](https://storybook.js.org/docs/sharing/design-integrations)\n*   [Composition](https://storybook.js.org/docs/sharing/storybook-composition)\n*   [Package Composition](https://storybook.js.org/docs/sharing/package-composition)",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/arg-types",
    "markdown": "# StorybookChromatic\n\nArgTypes specify the behavior of [args](https://storybook.js.org/docs/writing-stories/args). By specifying the type of an arg, you constrain the values that it can accept and provide information about args that are not explicitly set (i.e., [description](#description)).\n\nYou can also use argTypes to “annotate” args with information used by addons that make use of those args. For instance, to instruct the [controls addon](https://storybook.js.org/docs/essentials/controls) to render a color picker, you could specify the `'color'` [control type](#control).\n\nThe most concrete realization of argTypes is the [`ArgTypes` doc block](https://storybook.js.org/docs/api/doc-blocks/doc-block-argtypes) ([`Controls`](https://storybook.js.org/docs/api/doc-blocks/doc-block-controls) is similar). Each row in the table corresponds to a single argType and the current value of that arg.\n\n![ArgTypes table](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-argtypes.png&w=3840&q=75)\n\n## [Automatic argType inference](#automatic-argtype-inference)\n\nIf you are using the Storybook [docs](https://storybook.js.org/docs/writing-docs) addon (installed by default as part of [essentials](https://storybook.js.org/docs/essentials)), then Storybook will infer a set of argTypes for each story based on the `component` specified in the [default export](https://storybook.js.org/docs/writing-stories/index#default-export) of the CSF file.\n\nTo do so, Storybook uses various static analysis tools depending on your framework.\n\n| Framework | Static analysis tool |\n| --- | --- |\n| React | [react-docgen](https://github.com/reactjs/react-docgen) (default) or [react-docgen-typescript](https://github.com/styleguidist/react-docgen-typescript) |\n| Vue | [vue-docgen-api](https://github.com/vue-styleguidist/vue-styleguidist/tree/dev/packages/vue-docgen-api) |\n| Angular | [compodoc](https://compodoc.app/) |\n| WebComponents | [custom-element.json](https://github.com/webcomponents/custom-elements-json) |\n| Ember | [YUI doc](https://github.com/ember-learn/ember-cli-addon-docs-yuidoc#documenting-components) |\n\nThe data structure of `argTypes` is designed to match the output of the these tools. Properties specified manually will override what is inferred.\n\n## [Manually specifying argTypes](#manually-specifying-argtypes)\n\nFor most Storybook projects, argTypes are [automatically inferred](#automatic-argtype-inference) from your components. Any argTypes specified manually will override the inferred values.\n\nArgTypes are most often specified at the meta (component) level, in the [default export](https://storybook.js.org/docs/writing-stories/index#default-export) of the CSF file:\n\nThey can apply to all stories when specified at the project (global) level, in the `preview.js|ts` configuration file:\n\nOr they can apply only to a [specific story](https://storybook.js.org/docs/writing-stories/index#defining-stories):\n\n## [`argTypes`](#argtypes)\n\nType:\n\nYou configure argTypes using an object with keys matching the name of args. The value of each key is an object with the following properties:\n\n### [`control`](#control)\n\nType:\n\nDefault:\n\n1.  `'select'`, if [`options`](#options) are specified\n2.  Else, inferred from [`type`](#type)\n3.  Else, `'object'`\n\nSpecify the behavior of the [controls addon](https://storybook.js.org/docs/essentials/controls) for the arg. If you specify a string, it's used as the [`type`](#controltype) of the control. If you specify an object, you can provide additional configuration. Specifying `false` will prevent the control from rendering.\n\n#### [`control.type`](#controltype)\n\nType: `ControlType | null`\n\nDefault: [Inferred](#automatic-argtype-inference); `'select'`, if [`options`](#options) are specified; falling back to `'object'`\n\nSpecifies the type of control used to change the arg value with the [controls addon](https://storybook.js.org/docs/essentials/controls). Here are the available types, `ControlType`, grouped by the type of data they handle:\n\n| Data type | ControlType | Description |\n| --- | --- | --- |\n| **array** | `'object'` | Provides a JSON-based editor to handle the values of the array. Also allows editing in raw mode.  <br>`{ control: 'object' }` |\n| **boolean** | `'boolean'` | Provides a toggle for switching between possible states.  <br>`{ control: 'boolean' }` |\n| **enum** | `'check'` | Provides a set of stacked checkboxes for selecting multiple options.  <br>`{ control: 'check', options: ['email', 'phone', 'mail'] }` |\n|     | `'inline-check'` | Provides a set of inlined checkboxes for selecting multiple options.  <br>`{ control: 'inline-check', options: ['email', 'phone', 'mail'] }` |\n|     | `'radio'` | Provides a set of stacked radio buttons based on the available options.  <br>`{ control: 'radio', options: ['email', 'phone', 'mail'] }` |\n|     | `'inline-radio'` | Provides a set of inlined radio buttons based on the available options.  <br>`{ control: 'inline-radio', options: ['email', 'phone', 'mail'] }` |\n|     | `'select'` | Provides a select to choose a single value from the options.  <br>`{ control: 'select', options: [20, 30, 40, 50] }` |\n|     | `'multi-select'` | Provides a select to choose multiple values from the options.  <br>`{ control: 'multi-select', options: ['USA', 'Canada', 'Mexico'] }` |\n| **number** | `'number'` | Provides a numeric input to include the range of all possible values.  <br>`{ control: { type: 'number', min:1, max:30, step: 2 } }` |\n|     | `'range'` | Provides a range slider to include all possible values.  <br>`{ control: { type: 'range', min: 1, max: 30, step: 3 } }` |\n| **object** | `'file'` | Provides a file input that returns an array of URLs. Can be further customized to accept specific file types.  <br>`{ control: { type: 'file', accept: '.png' } }` |\n|     | `'object'` | Provides a JSON-based editor to handle the object's values. Also allows editing in raw mode.  <br>`{ control: 'object' }` |\n| **string** | `'color'` | Provides a color picker to choose color values. Can be additionally configured to include a set of color presets.  <br>`{ control: { type: 'color', presetColors: ['red', 'green']} }` |\n|     | `'date'` | Provides a datepicker to choose a date.  <br>`{ control: 'date' }` |\n|     | `'text'` | Provides a freeform text input.  <br>`{ control: 'text' }` |\n\nThe `date` control will convert the date into a UNIX timestamp when the value changes. It's a known limitation that will be fixed in a future release. If you need to represent the actual date, you'll need to update the story's implementation and convert the value into a date object.\n\n#### [`control.accept`](#controlaccept)\n\nType: `string`\n\nWhen `type` is `'file'`, you can specify the file types that are accepted. The value should be a string of comma-separated MIME types.\n\n#### [`control.labels`](#controllabels)\n\nType: `{ [option: string]: string }`\n\nMap [`options`](#options) to labels. `labels` doesn't have to be exhaustive. If an option is not in the object's keys, it's used verbatim.\n\n#### [`control.max`](#controlmax)\n\nType: `number`\n\nWhen `type` is `'number'` or `'range'`, sets the maximum allowed value.\n\n#### [`control.min`](#controlmin)\n\nType: `number`\n\nWhen `type` is `'number'` or `'range'`, sets the minimum allowed value.\n\n#### [`control.presetColors`](#controlpresetcolors)\n\nType: `string[]`\n\nWhen `type` is `'color'`, defines the set of colors that are available in addition to the general color picker. The values in the array should be valid CSS color values.\n\n#### [`control.step`](#controlstep)\n\nType: `number`\n\nWhen `type` is `'number'` or `'range'`, sets the granularity allowed when incrementing/decrementing the value.\n\n### [`description`](#description)\n\nType: `string`\n\nDefault: [Inferred](#automatic-argtype-inference)\n\nDescribe the arg. (If you intend to describe the type of the arg, you should use [`table.type`](#tabletype), instead.)\n\n### [`if`](#if)\n\nType:\n\nConditionally render an argType based on the value of another [arg](https://storybook.js.org/docs/writing-stories/args) or [global](https://storybook.js.org/docs/essentials/toolbars-and-globals).\n\n### [`mapping`](#mapping)\n\nType: `{ [key: string]: { [option: string]: any } }`\n\nMap [`options`](#options) to values.\n\nWhen dealing with non-primitive values, you'll notice that you'll run into some limitations. The most obvious issue is that not every value can be represented as part of the `args` param in the URL, losing the ability to share and deeplink to such a state. Beyond that, complex values such as JSX cannot be synchronized between the manager (e.g., Controls addon) and the preview (your story).\n\n`mapping` doesn't have to be exhaustive. If the currently selected option is not listed, it's used verbatim. Can be used with [`control.labels`](#labels).\n\n### [`name`](#name)\n\nType: `string`\n\nThe `argTypes` object uses the name of the arg as the key. By default, that key is used when displaying the argType in Storybook. You can override the displayed name by specifying a `name` property.\n\nBe careful renaming args in this way. Users of the component you're documenting will not be able to use the documented name as a property of your component and the actual name will not displayed.\n\nFor this reason, the `name` property is best used when defining an `argType` that is only used for documentation purposes and not an actual property of the component. For example, when [providing argTypes for each property of an object](https://stackblitz.com/edit/github-uplqzp?file=src/stories/Button.stories.tsx).\n\n### [`options`](#options)\n\nType: `string[]`\n\nDefault: [Inferred](#automatic-argtype-inference)\n\nIf the arg accepts a finite set of values, you can specify them with `options`. If those values are [complex](https://storybook.js.org/docs/essentials/controls#dealing-with-complex-values), like JSX elements, you can use [`mapping`](#mapping) to map them to string values. You can use [`control.labels`](#labels) to provide custom labels for the options.\n\n### [`table`](#table)\n\nType:\n\nDefault: [Inferred](#automatic-argtype-inference)\n\nSpecify how the arg is documented in the [`ArgTypes` doc block](https://storybook.js.org/docs/api/doc-blocks/doc-block-argtypes), [`Controls` doc block](https://storybook.js.org/docs/api/doc-blocks/doc-block-controls), and [Controls addon panel](https://storybook.js.org/docs/essentials/controls).\n\n#### [`table.category`](#tablecategory)\n\nType: `string`\n\nDefault: [Inferred](#automatic-argtype-inference), in some frameworks\n\nDisplay the argType under a category heading, with the label specified by `category`.\n\n#### [`table.defaultValue`](#tabledefaultvalue)\n\nType: `{ detail?: string; summary: string }`\n\nDefault: [Inferred](#automatic-argtype-inference)\n\nThe documented default value of the argType. `summary` is typically used for the value itself, while `detail` is used for additional information.\n\n#### [`table.disable`](#tabledisable)\n\nType: `boolean`\n\nSet to `true` to remove the argType's row from the table.\n\n#### [`table.readonly`](#tablereadonly)\n\nType: `boolean`\n\nSet to `true` to indicate that the argType is read-only.\n\n#### [`table.subcategory`](#tablesubcategory)\n\nType: `string`\n\nDisplay the argType under a subcategory heading (which displays under the \\[`category`\\] heading), with the label specified by `subcategory`.\n\n#### [`table.type`](#tabletype)\n\nType: `{ detail?: string; summary: string }`\n\nDefault: Inferred from [`type`](#type)\n\nThe documented type of the argType. `summary` is typically used for the type itself, while `detail` is used for additional information.\n\nIf you need to specify the actual, semantic type, you should use [`type`](#type), instead.\n\n### [`type`](#type)\n\nType: `'boolean' | 'function' | 'number' | 'string' | 'symbol' | SBType`\n\nThe full type of `SBType` is:\n\nSBType\n\nDefault: [Inferred](#automatic-argtype-inference)\n\nSpecifies the semantic type of the argType. When an argType is [inferred](#automatic-argtype-inference), the information from the various tools is summarized in this property, which is then used to infer other properties, like [`control`](#control) and [`table.type`](#tabletype).\n\nIf you only need to specify the documented type, you should use [`table.type`](#tabletype), instead.\n\n### [`defaultValue`](#defaultvalue)\n\n(⛔️ **Deprecated**)\n\nType: `any`\n\nDefine the default value of the argType. Deprecated in favor of defining the [`arg`](https://storybook.js.org/docs/writing-stories/args) value directly.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/parameters",
    "markdown": "# StorybookChromatic\n\nParameters are static metadata used to configure your [stories](https://storybook.js.org/docs/get-started/whats-a-story) and [addons](https://storybook.js.org/docs/addons) in Storybook. They are specified at the story, meta (component), project (global) levels.\n\n## [Story parameters](#story-parameters)\n\nℹ️ Parameters specified at the story level will [override](#parameter-inheritance) those specified at the project level and meta (component) level.\n\nParameters specified at the story level apply to that story only. They are defined in the `parameters` property of the story (named export):\n\nℹ️ Parameters specified at the meta (component) level will [override](#parameter-inheritance) those specified at the project level.\n\nParameter's specified in a [CSF](https://storybook.js.org/docs/writing-stories/index#component-story-format-csf) file's meta configuration apply to all stories in that file. They are defined in the `parameters` property of the `meta` (default export):\n\n## [Project parameters](#project-parameters)\n\nParameters specified at the project (global) level apply to **all stories** in your Storybook. They are defined in the `parameters` property of the default export in your `.storybook/preview.js|ts` file:\n\n## [Available parameters](#available-parameters)\n\nStorybook only accepts a few parameters directly.\n\n### [`layout`](#layout)\n\nType: `'centered' | 'fullscreen' | 'padded'`\n\nDefault: `'padded'`\n\nSpecifies how the canvas should [lay out the story](https://storybook.js.org/docs/configure/story-layout).\n\n*   **centered**: Center the story within the canvas\n*   **padded**: (default) Add padding to the story\n*   **fullscreen**: Show the story as-is, without padding\n\n### [`options`](#options)\n\nType:\n\nThe `options` parameter can _only_ be applied at the [project level](#project-parameters).\n\n#### [`options.storySort`](#optionsstorysort)\n\nType: `StorySortConfig | StorySortFn`\n\nSpecifies the order in which stories are displayed in the Storybook UI.\n\nWhen specifying a configuration object, the following options are available:\n\n*   **includeNames**: Whether to include the story name in the sorting algorithm. Defaults to `false`.\n*   **locales**: The locale to use when sorting stories. Defaults to your system locale.\n*   **method**: The sorting method to use. Defaults to `alphabetical`.\n    *   **alphabetical**: Sort stories alphabetically by name.\n    *   **alphabetical-by-kind**: Sort stories alphabetically by kind, then by name.\n    *   **custom**: Use a custom sorting function.\n*   **order**: Stories in the specified order will be displayed first, in the order specified. All other stories will be displayed after, in alphabetical order. The order array can accept a nested array to sort 2nd-level story kinds, e.g. `['Intro', 'Pages', ['Home', 'Login', 'Admin'], 'Components']`.\n\nWhen specifying a custom sorting function, the function behaves like a typical JavaScript sorting function. It accepts two stories to compare and returns a number. For example:\n\nSee [the guide](https://storybook.js.org/docs/writing-stories/naming-components-and-hierarchy#sorting-stories) for usage examples.\n\n### [`test`](#test)\n\nType:\n\n#### [`clearMocks`](#clearmocks)\n\nType: `boolean`\n\nDefault: `false`\n\n[Similar to Vitest](https://vitest.dev/config/#clearmocks), it will call `.mockClear()` on all spies created with `fn()` from `@storybook/test` when a story unmounts. This will clear mock history, but not reset its implementation to the default one.\n\n#### [`mockReset`](#mockreset)\n\nType: `boolean`\n\nDefault: `false`\n\n[Similar to Vitest](https://vitest.dev/config/#mockreset), it will call `.mockReset()` on all spies created with `fn()` from `@storybook/test` when a story unmounts. This will clear mock history and reset its implementation to an empty function (will return `undefined`).\n\n#### [`restoreMocks`](#restoremocks)\n\nType: `boolean`\n\nDefault: `true`\n\n[Similar to Vitest](https://vitest.dev/config/#restoremocks), it will call `.restoreMocks()` on all spies created with `fn()` from `@storybook/test` when a story unmounts. This will clear mock history and reset its implementation to the original one.\n\n#### [`dangerouslyIgnoreUnhandledErrors`](#dangerouslyignoreunhandlederrors)\n\nType: `boolean`\n\nDefault: `false`\n\nUnhandled errors might cause false positive assertions. Setting this to `true` will prevent the [play function](https://storybook.js.org/docs/writing-stories/play-function) from failing and showing a warning when unhandled errors are thrown during execution.\n\n* * *\n\n### [Essential addons](#essential-addons)\n\nAll other parameters are contributed by addons. The [essential addon's](https://storybook.js.org/docs/essentials) parameters are documented on their individual pages:\n\n*   [Actions](https://storybook.js.org/docs/essentials/actions#parameters)\n*   [Backgrounds](https://storybook.js.org/docs/essentials/backgrounds#parameters)\n*   [Controls](https://storybook.js.org/docs/essentials/controls#parameters)\n*   [Highlight](https://storybook.js.org/docs/essentials/highlight#parameters)\n*   [Interactions](https://storybook.js.org/docs/essentials/interactions#parameters)\n*   [Measure & Outline](https://storybook.js.org/docs/essentials/measure-and-outline#parameters)\n*   [Viewport](https://storybook.js.org/docs/essentials/viewport#parameters)\n\n## [Parameter inheritance](#parameter-inheritance)\n\nNo matter where they're specified, parameters are ultimately applied to a single story. Parameters specified at the project (global) level are applied to every story in that project. Those specified at the meta (component) level are applied to every story associated with that meta. And parameters specified for a story only apply to that story.\n\nWhen specifying parameters, they are merged together in order of increasing specificity:\n\n1.  Project (global) parameters\n2.  Meta (component) parameters\n3.  Story parameters\n\nℹ️ Parameters are **merged**, so objects are deep-merged, but arrays and other properties are overwritten.\n\nIn other words, the following specifications of parameters:\n\nWill result in the following parameter values applied to each story:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/essentials/toolbars-and-globals",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nStorybook ships with toolbar addons to control the [viewport](https://storybook.js.org/docs/essentials/viewport) and [background](https://storybook.js.org/docs/essentials/backgrounds) the story renders in. You can also create your own toolbar items which control special “globals” which you can then read to create [decorators](https://storybook.js.org/docs/writing-stories/decorators) to control story rendering.\n\n![Toolbars and globals](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fessentials%2Ftoolbars-and-globals.png&w=3840&q=75)\n\n## [Globals](#globals)\n\nGlobals in Storybook represents “global” (as in not story-specific) inputs to the rendering of the story. As they aren’t specific to the story, they aren’t passed in the `args` argument to the story function (although they are accessible as `context.globals`), but typically you use them in decorators, which apply to all stories.\n\nWhen the globals change, the story re-renders, and the decorators rerun with the new values. The easiest way to change globals is to create a toolbar item for them.\n\nStorybook has a simple, declarative syntax for configuring toolbar menus. In your [`.storybook/preview.js|ts`](https://storybook.js.org/docs/configure/index#configure-story-rendering), you can add your own toolbars by creating `globalTypes` with a `toolbar` annotation:\n\nWhen you start your Storybook, you should see a new dropdown with the `light` and `dark` options in your toolbar.\n\n## [Create a decorator](#create-a-decorator)\n\nWe have a `global` implemented. Let's wire it up! We can consume our new `theme` global in a decorator using the `context.globals.theme` value.\n\nFor example, suppose you are using [`styled-components`](https://styled-components.com/). You can add a theme provider decorator to your [`.storybook/preview.js|ts`](https://storybook.js.org/docs/configure/index#configure-story-rendering) config:\n\n## [Advanced usage](#advanced-usage)\n\nSo far, we've managed to create and consume a global inside Storybook.\n\nNow let's take a look at a more complex example. Let's suppose we wanted to implement a new global called **locale** for internationalization, which shows a flag on the right side of the toolbar.\n\nIn your [`.storybook/preview.js|ts`](https://storybook.js.org/docs/configure/index#configure-story-rendering), add the following:\n\nThe `icon` element used in the examples loads the icons from the `@storybook/components` package. See [here](https://storybook.js.org/docs/faq#what-icons-are-available-for-my-toolbar-or-my-addon) for the list of available icons that you can use.\n\nThe `@storybook/addon-toolbars` addon is required to use toolbars. The toolbars addon is included by default in `@storybook/addon-essentials`.\n\nBy adding the configuration element `right`, the text will be displayed on the right side in the toolbar menu once you connect it to a decorator.\n\nHere's a list of the configuration options available.\n\n| MenuItem | Type | Description | Required |\n| --- | --- | --- | --- |\n| **value** | String | The string value of the menu that gets set in the globals | Yes |\n| **title** | String | The main text of the title | Yes |\n| **right** | String | A string that gets displayed on the right side of the menu | No  |\n| **icon** | String | An icon that gets shown in the toolbar if this item is selected | No  |\n\n## [Consuming globals from within a story](#consuming-globals-from-within-a-story)\n\nWe recommend consuming globals from within a decorator and define a global setting for all stories.\n\nBut we're aware that sometimes it's more beneficial to use toolbar options on a per-story basis.\n\nUsing the example above, you can modify any story to retrieve the **Locale** `global` from the story context:\n\n## [Consuming globals from within an addon](#consuming-globals-from-within-an-addon)\n\nIf you're working on a Storybook addon and need to retrieve globals, you can do so. The `@storybook/manager-api` package provides a hook for this scenario. You can use the [`useGlobals()`](https://storybook.js.org/docs/addons/addons-api#useglobals) hook to retrieve any globals you want.\n\nUsing the ThemeProvider example above, you could expand it to display which theme is active inside a panel as such:\n\n## [Updating globals from within an addon](#updating-globals-from-within-an-addon)\n\nIf you're working on a Storybook addon that needs to update the global and refreshes the UI, you can do so. As mentioned previously, the `@storybook/manager-api` package provides the necessary hook for this scenario. You can use the `updateGlobals` function to update any global values you need.\n\nFor example, if you were working on a [toolbar addon](https://storybook.js.org/docs/addons/addon-types#toolbars), and you want to refresh the UI and update the global once the user clicks on a button:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/essentials/measure-and-outline",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nStorybook's [Measure](https://storybook.js.org/addons/@storybook/addon-measure/) and [Outline](https://storybook.js.org/addons/@storybook/addon-outline) addons give you the necessary tooling to inspect and visually debug CSS layout and alignment issues within your stories. It makes it easy to catch UI bugs early in development.\n\n## [Measure addon](#measure-addon)\n\nWhile working with composite components or page layouts, dealing with whitespace (i.e., `margin`,`padding`,`border`) and individual component measurements can be pretty troublesome. It would require that you open up the browser's development tools and manually inspect the DOM tree for issues and UI bugs.\n\nWith Storybook's Measure addon, you can quickly visualize each component's measurements through a click of a button in Storybook's toolbar.\n\nAlternatively you can press the `m` key on your keyboard to toggle the addon.\n\n## [Outline addon](#outline-addon)\n\nWhen building your layouts, checking the visual alignment of all components can be pretty complicated, even more, if your components are spread apart or contain unique shapes.\n\nWith Storybook's Outline addon, you can toggle the outlines associated with all your UI elements, allowing you to spot bugs and broken layouts instantly with a click of a button.\n\n## [API](#api)\n\n### [Parameters](#parameters)\n\nThis addon contributes the following [parameters](https://storybook.js.org/docs/writing-stories/parameters) to Storybook, under the `measure` or `outline` namespace:\n\n#### [`disable`](#disable)\n\nType: `boolean`\n\nDisable this addon's behavior. If you wish to disable this addon for the entire Storybook, you should do so when registering `addon-essentials`. See the [essential addon's docs](https://storybook.js.org/docs/essentials/index#disabling-addons) for more information.\n\nThis parameter is most useful to allow overriding at more specific levels. For example, if this parameter is set to `true` at the project level, it could then be re-enabled by setting it to `false` at the meta (component) or story level.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories/parameters",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nParameters are a set of static, named metadata about a story, typically used to control the behavior of Storybook features and addons.\n\nFor example, let’s customize the backgrounds addon via a parameter. We’ll use `parameters.backgrounds` to define which backgrounds appear in the backgrounds toolbar when a story is selected.\n\n## [Story parameters](#story-parameters)\n\nWe can set a parameter for a single story with the `parameters` key on a CSF export:\n\n## [Component parameters](#component-parameters)\n\nWe can set the parameters for all stories of a component using the `parameters` key on the default CSF export:\n\n## [Global parameters](#global-parameters)\n\nWe can also set the parameters for **all stories** via the `parameters` export of your [`.storybook/preview.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering) file (this is the file where you configure all stories):\n\nSetting a global parameter is a common way to configure addons. With backgrounds, you configure the list of backgrounds that every story can render in.\n\n## [Rules of parameter inheritance](#rules-of-parameter-inheritance)\n\nThe way the global, component and story parameters are combined is:\n\n*   More specific parameters take precedence (so a story parameter overwrites a component parameter which overwrites a global parameter).\n*   Parameters are **merged** so keys are only ever overwritten, never dropped.\n\nThe merging of parameters is important. It means it is possible to override a single specific sub-parameter on a per-story basis but still retain the majority of the parameters defined globally.\n\nIf you are defining an API that relies on parameters (e.g. an [**addon**](https://storybook.js.org/docs/addons)) it is a good idea to take this behavior into account.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories/loaders",
    "markdown": "# StorybookChromatic\n\nLoaders are asynchronous functions that load data for a story and its [decorators](https://storybook.js.org/docs/writing-stories/decorators). A story's loaders run before the story renders, and the loaded data injected into the story via its render context.\n\nLoaders can be used to load any asset, lazy load components, or fetch data from a remote API. This feature was designed as a performance optimization to handle large story imports. However, [args](https://storybook.js.org/docs/writing-stories/args) is the recommended way to manage story data. We're building up an ecosystem of tools and techniques around Args that might not be compatible with loaded data.\n\nThey are an advanced feature (i.e., escape hatch), and we only recommend using them if you have a specific need that other means can't fulfill.\n\n## [Fetching API data](#fetching-api-data)\n\nStories are isolated component examples that render internal data defined as part of the story or alongside the story as [args](https://storybook.js.org/docs/writing-stories/args).\n\nLoaders are helpful when you need to load story data externally (e.g., from a remote API). Consider the following example that fetches a todo item to display in a todo list:\n\nThe response obtained from the remote API call is combined into a `loaded` field on the story context, which is the second argument to a story function. For example, in React, the story's args were spread first to prioritize them over the static data provided by the loader. With other frameworks (e.g., Angular), you can write your stories as you'd usually do.\n\n## [Global loaders](#global-loaders)\n\nWe can also set a loader for **all stories** via the `loaders` export of your [`.storybook/preview.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering) file (this is the file where you configure all stories):\n\nIn this example, we load a \"current user\" available as `loaded.currentUser` for all stories.\n\n## [Loader inheritance](#loader-inheritance)\n\nLike [parameters](https://storybook.js.org/docs/writing-stories/parameters), loaders can be defined globally, at the component level, and for a single story (as we’ve seen).\n\nAll loaders, defined at all levels that apply to a story, run before the story renders in Storybook's canvas.\n\n*   All loaders run in parallel\n*   All results are the `loaded` field in the story context\n*   If there are keys that overlap, \"later\" loaders take precedence (from lowest to highest):\n    *   Global loaders, in the order they are defined\n    *   Component loaders, in the order they are defined\n    *   Story loaders, in the order they are defined",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories/play-function",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\n`Play` functions are small snippets of code executed after the story renders. Enabling you to interact with your components and test scenarios that otherwise required user intervention.\n\n## [Setup the interactions addon](#setup-the-interactions-addon)\n\nWe recommend installing Storybook's [`addon-interactions`](https://storybook.js.org/addons/@storybook/addon-interactions) before you start writing stories with the `play` function. It's the perfect complement for it, including a handy set of UI controls to allow you command over the execution flow. At any time, you can pause, resume, rewind, and step through each interaction. Also providing you with an easy-to-use debugger for potential issues.\n\nRun the following command to install the addon and the required dependencies.\n\nUpdate your Storybook configuration (in `.storybook/main.js|ts`) to include the interactions addon.\n\n## [Writing stories with the play function](#writing-stories-with-the-play-function)\n\nStorybook's `play` functions are small code snippets that run once the story finishes rendering. Aided by the `addon-interactions`, it allows you to build component interactions and test scenarios that were impossible without user intervention. For example, if you were working on a registration form and wanted to validate it, you could write the following story with the `play` function:\n\nWhen Storybook finishes rendering the story, it executes the steps defined within the `play` function, interacting with the component and filling the form's information. All of this without the need for user intervention. If you check your `Interactions` panel, you'll see the step-by-step flow.\n\n## [Composing stories](#composing-stories)\n\nThanks to the [Component Story Format](https://storybook.js.org/docs/api/csf), an ES6 module based file format, you can also combine your `play` functions, similar to other existing Storybook features (e.g., [args](https://storybook.js.org/docs/writing-stories/args)). For example, if you wanted to verify a specific workflow for your component, you could write the following stories:\n\nBy combining the stories, you're recreating the entire component workflow and can spot potential issues while reducing the boilerplate code you need to write.\n\n## [Working with events](#working-with-events)\n\nMost modern UIs are built focusing on interaction (e.g., clicking a button, selecting options, ticking checkboxes), providing rich experiences to the end-user. With the `play` function, you can incorporate the same level of interaction into your stories.\n\nA common type of component interaction is a button click. If you need to reproduce it in your story, you can define your story's `play` function as the following:\n\nWhen Storybook loads the story and the function executes, it interacts with the component and triggers the button click, similar to what a user would do.\n\nAsides from click events, you can also script additional events with the `play` function. For example, if your component includes a select with various options, you can write the following story and test each scenario:\n\nIn addition to events, you can also create interactions with the `play` function based on other types of asynchronous methods. For instance, let's assume that you're working with a component with validation logic implemented (e.g., email validation, password strength). In that case, you can introduce delays within your `play` function to emulate user interaction and assert if the values provided are valid or not:\n\nWhen Storybook loads the story, it interacts with the component, filling in its inputs and triggering any validation logic defined.\n\nYou can also use the `play` function to verify the existence of an element based on a specific interaction. For instance, if you're working on a component and want to check what happens if a user introduces the wrong information. In that case, you could write the following story:\n\n## [Querying elements](#querying-elements)\n\nIf you need, you can also adjust your `play` function to find elements based on queries (e.g., role, text content). For example:\n\nWhen Storybook loads the story, the `play` function starts its execution and queries the DOM tree expecting the element to be available when the story renders. In case there's a failure in your test, you'll be able to verify its root cause quickly.\n\nOtherwise, if the component is not immediately available, for instance, due to a previous step defined inside your `play` function or some asynchronous behavior, you can adjust your story and wait for the change to the DOM tree to happen before querying the element. For example:\n\n## [Working with the Canvas](#working-with-the-canvas)\n\nBy default, each interaction you write inside your `play` function will be executed starting from the top-level element of the Canvas. This is acceptable for smaller components (e.g., buttons, checkboxes, text inputs), but can be inefficient for complex components (e.g., forms, pages), or for multiple stories. To accommodate this, you can adjust your interactions to start execution from the component's root. For example:\n\nApplying these changes to your stories can provide a performance boost and improved error handling with [`addon-interactions`](https://storybook.js.org/addons/@storybook/addon-interactions).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/cli-options",
    "markdown": "# StorybookChromatic\n\nThe Storybook command line interface (CLI) is the main tool you use to build and develop Storybook.\n\nStorybook collects completely anonymous data to help us improve user experience. Participation is optional, and you may [opt-out](https://storybook.js.org/docs/configure/telemetry#how-to-opt-out) if you'd not like to share any information.\n\n## [API commands](#api-commands)\n\nAll of the following documentation is available in the CLI by running `storybook --help`.\n\nPassing options to these commands works slightly differently if you're using npm instead of Yarn. You must prefix all of your options with `--`. For example, `npm run storybook build -- -o ./path/to/build --quiet`.\n\n### [`dev`](#dev)\n\nCompiles and serves a development build of your Storybook that reflects your source code changes in the browser in real-time. It should be run from the root of your project.\n\nOptions include:\n\n| Option | Description |\n| --- | --- |\n| `--help` | Output usage information  <br>`storybook dev --help` |\n| `-V`, `--version` | Output the version number  <br>`storybook dev -V` |\n| `-p`, `--port [number]` | Port to run Storybook  <br>`storybook dev -p 9009` |\n| `--exact-port [number]` | Attempts to run Storybook on the exact port number specified.  <br>If the port is already in use, Storybook will exit with an error message  <br>`storybook dev --exact-port 9009` |\n| `-h`, `--host [string]` | Host to run Storybook  <br>`storybook dev -h my-host.com` |\n| `-c`, `--config-dir [dir-name]` | Directory where to load Storybook configurations from  <br>`storybook dev -c .storybook` |\n| `--loglevel [level]` | Controls level of logging during build.  <br>Available options: `silly`, `verbose`, `info` (default), `warn`, `error`, `silent`  <br>`storybook dev --loglevel warn` |\n| `--https` | Serve Storybook over HTTPS. Note: You must provide your own certificate information  <br>`storybook dev --https` |\n| `--ssl-ca` | Provide an SSL certificate authority. (Optional with --https, required if using a self-signed certificate)  <br>`storybook dev --ssl-ca my-certificate` |\n| `--ssl-cert` | Provide an SSL certificate. (Required with --https)  <br>`storybook dev --ssl-cert my-ssl-certificate` |\n| `--ssl-key` | Provide an SSL key. (Required with --https)  <br>`storybook dev --ssl-key my-ssl-key` |\n| `--smoke-test` | Exit after successful start  <br>`storybook dev --smoke-test` |\n| `--ci` | CI mode (skip interactive prompts, don't open browser)  <br>`storybook dev --ci` |\n| `--no-open` | Do not open Storybook automatically in the browser  <br>`storybook dev --no-open` |\n| `--quiet` | Suppress verbose build output  <br>`storybook dev --quiet` |\n| `--debug` | Outputs more logs in the CLI to assist debugging  <br>`storybook dev --debug` |\n| `--debug-webpack` | Display final webpack configurations for debugging purposes  <br>`storybook dev --debug-webpack` |\n| `--stats-json [dir-name]` | Write stats JSON to disk  <br>Requires Webpack  <br>`storybook dev --stats-json /tmp/stats` |\n| `--no-version-updates` | Skips Storybook's update check  <br>`storybook dev --no-version-updates` |\n| `--docs` | Starts Storybook in documentation mode. Learn more about it in [here](https://storybook.js.org/docs/writing-docs/build-documentation#preview-storybooks-documentation)  <br>`storybook dev --docs` |\n| `--initial-path [path]` | Configures the URL Storybook should open when it opens the browser for the first time  <br>`storybook dev --initial-path=/docs/getting-started--docs` |\n| `--preview-url [path]` | Overrides the default Storybook preview with a custom built preview URL  <br>`storybook dev --preview-url=http://localhost:1337/external-iframe.html` |\n| `--force-build-preview` | Forcefully builds Storybook's preview iframe.  <br>Useful if you're experiencing issues, or combined with `--preview-url` to ensure the preview is up-to-date  <br>`storybook dev --force-build-preview` |\n| `--disable-telemetry` | Disables Storybook's telemetry. Learn more about it [here](https://storybook.js.org/docs/configure/telemetry#how-to-opt-out)  <br>`storybook dev --disable-telemetry` |\n| `--enable-crash-reports` | Enables sending crash reports to Storybook's telemetry. Learn more about it [here](https://storybook.js.org/docs/configure/telemetry#crash-reports-disabled-by-default)  <br>`storybook dev --enable-crash-reports` |\n\nWith the release of Storybook 8, the `-s` CLI flag was removed. We recommend using the [static directory](https://storybook.js.org/docs/configure/integration/images-and-assets#serving-static-files-via-storybook) instead if you need to serve static files.\n\n### [`build`](#build)\n\nCompiles your Storybook instance so it can be [deployed](https://storybook.js.org/docs/sharing/publish-storybook). It should be run from the root of your project.\n\nOptions include:\n\n| Option | Description |\n| --- | --- |\n| `-h`, `--help` | Output usage information  <br>`storybook build --help` |\n| `-V`, `--version` | Output the version number  <br>`storybook build -V` |\n| `-o`, `--output-dir [dir-name]` | Directory where to store built files  <br>`storybook build -o /my-deployed-storybook` |\n| `-c`, `--config-dir [dir-name]` | Directory where to load Storybook configurations from  <br>`storybook build -c .storybook` |\n| `--loglevel [level]` | Controls level of logging during build.  <br>Available options: `silly`, `verbose`, `info` (default), `warn`, `error`, `silent`  <br>`storybook build --loglevel warn` |\n| `--quiet` | Suppress verbose build output  <br>`storybook build --quiet` |\n| `--debug` | Outputs more logs in the CLI to assist debugging  <br>`storybook build --debug` |\n| `--debug-webpack` | Display final webpack configurations for debugging purposes  <br>`storybook build --debug-webpack` |\n| `--stats-json [dir-name]` | Write stats JSON to disk  <br>Requires Webpack  <br>`storybook build --stats-json /tmp/stats` |\n| `--docs` | Builds Storybook in documentation mode. Learn more about it in [here](https://storybook.js.org/docs/writing-docs/build-documentation#publish-storybooks-documentation)  <br>`storybook build --docs` |\n| `--test` | Optimize Storybook's production build for performance and tests by removing unnecessary features with the `test` option. Learn more [here](https://storybook.js.org/docs/api/main-config/main-config-build).  <br>`storybook build --test` |\n| `--preview-url [path]` | Overrides the default Storybook preview with a custom built preview URL  <br>`storybook build --preview-url=http://localhost:1337/external-iframe.html` |\n| `--force-build-preview` | Forcefully builds Storybook's preview iframe.  <br>Useful if you're experiencing issues, or combined with `--preview-url` to ensure the preview is up-to-date  <br>`storybook build --force-build-preview` |\n| `--disable-telemetry` | Disables Storybook's telemetry. Learn more about it [here](https://storybook.js.org/docs/configure/telemetry#how-to-opt-out)  <br>`storybook build --disable-telemetry` |\n| `--enable-crash-reports` | Enables sending crash reports to Storybook's telemetry. Learn more about it [here](https://storybook.js.org/docs/configure/telemetry#crash-reports-disabled-by-default)  <br>`storybook build --enable-crash-reports` |\n\n### [`init`](#init)\n\nInstalls and initializes the specified version (e.g., `@latest`, `@8`, `@next`) of Storybook into your project. Read more in the [installation guide](https://storybook.js.org/docs/get-started/install).\n\nFor example, `storybook@latest init` will install the latest version of Storybook into your project.\n\nOptions include:\n\n| Option | Description |\n| --- | --- |\n| `-h`, `--help` | Output usage information  <br>`storybook init --help` |\n| `-b`, `--builder` | Defines the [builder](https://storybook.js.org/docs/builders) to use for your Storybook instance  <br>`storybook init --builder webpack5` |\n| `-f`,`--force` | Forcefully installs Storybook into your project, prompting you to overwrite existing files  <br>`storybook init --force` |\n| `-s`, `--skip-install` | Skips the dependency installation step. Used only when you need to configure Storybook manually  <br>`storybook init --skip-install` |\n| `-t`, `--type` | Defines the [framework](https://storybook.js.org/docs/configure/integration/frameworks) to use for your Storybook instance  <br>`storybook init --type solid` |\n| `-y`, `--yes` | Skips interactive prompts and automatically installs Storybook per specified version  <br>`storybook init --yes` |\n| `--package-manager` | Sets the package manager to use when installing Storybook.  <br>Available package managers include `npm`, `yarn`, and `pnpm`  <br>`storybook init --package-manager pnpm` |\n| `--use-pnp` | Enables [Plug'n'Play](https://yarnpkg.com/features/pnp) support for Yarn. This option is only available when using Yarn as your package manager  <br>`storybook init --use-pnp` |\n| `-p`, `--parser` | Sets the [jscodeshift parser](https://github.com/facebook/jscodeshift#parser).  <br>Available parsers include `babel`, `babylon`, `flow`, `ts`, and `tsx`  <br>`storybook init --parser tsx` |\n| `--debug` | Outputs more logs in the CLI to assist debugging  <br>`storybook init --debug` |\n| `--disable-telemetry` | Disables Storybook's telemetry. Learn more about it [here](https://storybook.js.org/docs/configure/telemetry#how-to-opt-out)  <br>`storybook init --disable-telemetry` |\n| `--enable-crash-reports` | Enables sending crash reports to Storybook's telemetry. Learn more about it [here](https://storybook.js.org/docs/configure/telemetry#crash-reports-disabled-by-default)  <br>`storybook init --enable-crash-reports` |\n| `--no-dev` | Complete the initialization of Storybook without running the Storybook dev server  <br>`storybook init --no-dev` |\n\n### [`add`](#add)\n\nInstalls a Storybook addon and configures your project for it. Read more in the [addon installation guide](https://storybook.js.org/docs/addons/install-addons).\n\nOptions include:\n\n| Option | Description |\n| --- | --- |\n| `-h`, `--help` | Output usage information  <br>`storybook add --help` |\n| `-c`, `--config-dir` | Directory where to load Storybook configurations from  <br>`storybook migrate --config-dir .storybook` |\n| `--package-manager` | Sets the package manager to use when installing the addon.  <br>Available package managers include `npm`, `yarn`, and `pnpm`  <br>`storybook add [addon] --package-manager pnpm` |\n| `-s`, `--skip-postinstall` | Skips post-install configuration. Used only when you need to configure the addon yourself  <br>`storybook add [addon] --skip-postinstall` |\n| `--debug` | Outputs more logs in the CLI to assist debugging  <br>`storybook add --debug` |\n\n### [`remove`](#remove)\n\nDeletes a Storybook addon from your project. Read more in the [addon installation guide](https://storybook.js.org/docs/addons/install-addons#removing-addons).\n\nOptions include:\n\n| Option | Description |\n| --- | --- |\n| `-h`, `--help` | Output usage information  <br>`storybook remove --help` |\n| `--package-manager` | Sets the package manager to use when removing the addon.  <br>Available package managers include `npm`, `yarn`, and `pnpm`  <br>`storybook remove [addon]--package-manager pnpm` |\n| `--debug` | Outputs more logs in the CLI to assist debugging  <br>`storybook remove --debug` |\n| `--disable-telemetry` | Disables Storybook's telemetry. Learn more about it [here](https://storybook.js.org/docs/configure/telemetry#how-to-opt-out)  <br>`storybook remove --disable-telemetry` |\n| `--enable-crash-reports` | Enables sending crash reports to Storybook's telemetry. Learn more about it [here](https://storybook.js.org/docs/configure/telemetry#crash-reports-disabled-by-default)  <br>`storybook remove --enable-crash-reports` |\n\n### [`upgrade`](#upgrade)\n\nUpgrades your Storybook instance to the specified version (e.g., `@latest`, `@8`, `@next`). Read more in the [upgrade guide](https://storybook.js.org/docs/configure/upgrading).\n\nFor example, `storybook@latest upgrade --dry-run` will perform a dry run (no actual changes) of upgrading your project to the latest version of Storybook.\n\nOptions include:\n\n| Option | Description |\n| --- | --- |\n| `-h`, `--help` | Output usage information  <br>`storybook upgrade --help` |\n| `-c`, `--config-dir` | Directory where to load Storybook configurations from  <br>`storybook upgrade --config-dir .storybook` |\n| `-n`, `--dry-run` | Checks for version upgrades without installing them  <br>`storybook upgrade --dry-run` |\n| `-s`, `--skip-check` | Skips the migration check step during the upgrade process  <br>`storybook upgrade --skip-check` |\n| `-y`, `--yes` | Skips interactive prompts and automatically upgrades Storybook to the latest version  <br>`storybook upgrade --yes` |\n| `-f`,`--force` | Force the upgrade, skipping autoblockers check  <br>`storybook upgrade --force` |\n| `--package-manager` | Sets the package manager to use when upgrading Storybook.  <br>Available package managers include `npm`, `yarn`, and `pnpm`  <br>`storybook upgrade --package-manager pnpm` |\n| `--debug` | Outputs more logs in the CLI to assist debugging  <br>`storybook upgrade --debug` |\n| `--disable-telemetry` | Disables Storybook's telemetry. Learn more about it [here](https://storybook.js.org/docs/configure/telemetry#how-to-opt-out)  <br>`storybook upgrade --disable-telemetry` |\n| `--enable-crash-reports` | Enables sending crash reports to Storybook's telemetry. Learn more about it [here](https://storybook.js.org/docs/configure/telemetry#crash-reports-disabled-by-default)  <br>`storybook upgrade --enable-crash-reports` |\n\n### [`migrate`](#migrate)\n\nRuns the provided codemod to ensure your Storybook project is compatible with the specified version. Read more in the [migration guide](https://storybook.js.org/docs/configure/upgrading).\n\nThe command requires the codemod name (e.g., `csf-2-to-3`) as an argument to apply the necessary changes to your project. You can find the list of available codemods by running `storybook migrate --list`.\n\nFor example, `storybook@latest migrate csf-2-to-3 --dry-run`, checks your project to verify if the codemod can be applied without making any changes, providing you with a report of which files would be affected.\n\nOptions include:\n\n| Option | Description |\n| --- | --- |\n| `-h`, `--help` | Output usage information  <br>`storybook migrate --help` |\n| `-c`, `--config-dir` | Directory where to load Storybook configurations from  <br>`storybook migrate --config-dir .storybook` |\n| `-n`, `--dry-run` | Verify the migration exists and show the files to which it will be applied  <br>`storybook migrate --dry-run` |\n| `-l`, `--list` | Shows a list of available codemods  <br>`storybook migrate --list` |\n| `-g`, `--glob` | Glob for files upon which to apply the codemods  <br>`storybook migrate --glob src/**/*.stories.tsx` |\n| `-p`, `--parser` | Sets the [jscodeshift parser](https://github.com/facebook/jscodeshift#parser).  <br>Available parsers include `babel`, `babylon`, `flow`, `ts`, and `tsx`  <br>`storybook migrate --parser tsx` |\n| `-r`, `--rename [from-to]` | Renames the files affected by the codemod to include the provided suffix  <br>`storybook migrate --rename \".js:.ts\"` |\n| `--debug` | Outputs more logs in the CLI to assist debugging  <br>`storybook migrate --debug` |\n\n### [`automigrate`](#automigrate)\n\nPerform standard configuration checks to determine if your Storybook project can be automatically migrated to the specified version. Read more in the [migration guide](https://storybook.js.org/docs/configure/upgrading#automigrate-script).\n\nFor example, `storybook@latest automigrate --dry-run` scans your project for potential migrations that can be applied automatically without making any changes.\n\nOptions include:\n\n| Option | Description |\n| --- | --- |\n| `-h`, `--help` | Output usage information  <br>`storybook automigrate --help` |\n| `-c`, `--config-dir` | Directory where to load Storybook configurations from  <br>`storybook automigrate --config-dir .storybook` |\n| `-n`, `--dry-run` | Checks for available migrations without applying them  <br>`storybook automigrate --dry-run` |\n| `-s`, `--skip-install` | Skip installing dependencies whenever applicable  <br>`storybook automigrate --skip-install` |\n| `-y`, `--yes` | Applies available migrations automatically without prompting for confirmation  <br>`storybook automigrate --yes` |\n| `-l`, `--list` | Shows a list of available automigrations  <br>`storybook automigrate --list` |\n| `--package-manager` | Sets the package manager to use when running the auto migration.  <br>Available package managers include `npm`, `yarn`, and `pnpm`  <br>`storybook automigrate --package-manager pnpm` |\n| `--renderer` | Specifies Storybook's renderer to use when running the automigration.  <br>Useful for monorepo environments where multiple Storybook instances can exist in the same project  <br>`storybook automigrate --renderer vue` |\n| `--debug` | Outputs more logs in the CLI to assist debugging  <br>`storybook automigrate --debug` |\n| `--disable-telemetry` | Disables Storybook's telemetry. Learn more about it [here](https://storybook.js.org/docs/configure/telemetry#how-to-opt-out)  <br>`storybook automigrate --disable-telemetry` |\n| `--enable-crash-reports` | Enables sending crash reports to Storybook's telemetry. Learn more about it [here](https://storybook.js.org/docs/configure/telemetry#crash-reports-disabled-by-default)  <br>`storybook automigrate --enable-crash-reports` |\n\n### [`doctor`](#doctor)\n\nPerforms a health check on your Storybook project for common issues (e.g., duplicate dependencies, incompatible addons or mismatched versions) and provides suggestions on how to fix them. Applicable when [upgrading](https://storybook.js.org/docs/configure/upgrading#verifying-the-upgrade) Storybook versions.\n\nOptions include:\n\n| Option | Description |\n| --- | --- |\n| `-h`, `--help` | Output usage information  <br>`storybook doctor --help` |\n| `-c`, `--config-dir` | Directory where to load Storybook configurations from  <br>`storybook doctor --config-dir .storybook` |\n| `--package-manager` | Sets the package manager to use when running the health check.  <br>Available package managers include `npm`, `yarn`, and `pnpm`  <br>`storybook doctor --package-manager pnpm` |\n| `--debug` | Outputs more logs in the CLI to assist debugging  <br>`storybook doctor --debug` |\n\n### [`info`](#info)\n\nReports useful debugging information about your environment. Helpful in providing information when opening an issue or a discussion.\n\nExample output:\n\n### [`sandbox`](#sandbox)\n\nGenerates a local sandbox project using the specified version (e.g., `@latest`, `@8`, `@next`) for testing Storybook features based on the list of supported [frameworks](https://storybook.js.org/docs/configure/integration/frameworks). Useful for reproducing bugs when opening an issue or a discussion.\n\nFor example, `storybook@next sandbox` will generated sandboxes using the newest pre-release version of Storybook.\n\nThe `framework-filter` argument is optional and can filter the list of available frameworks. For example, `storybook@next sandbox react` will only offer to generate React-based sandboxes.\n\nOptions include:\n\n| Option | Description |\n| --- | --- |\n| `-h`, `--help` | Output usage information  <br>`storybook sandbox --help` |\n| `-o`, `--output [dir-name]` | Configures the location of the sandbox project  <br>`storybook sandbox --output /my-sandbox-project` |\n| `--no-init` | Generates a sandbox project without without initializing Storybook  <br>`storybook sandbox --no-init` |\n| `--debug` | Outputs more logs in the CLI to assist debugging  <br>`storybook sandbox --debug` |\n| `--disable-telemetry` | Disables Storybook's telemetry. Learn more about it [here](https://storybook.js.org/docs/configure/telemetry#how-to-opt-out)  <br>`storybook sandbox --disable-telemetry` |\n| `--enable-crash-reports` | Enables sending crash reports to Storybook's telemetry. Learn more about it [here](https://storybook.js.org/docs/configure/telemetry#crash-reports-disabled-by-default)  <br>`storybook sandbox --enable-crash-reports` |\n\nIf you're looking for a hosted version of the available sandboxes, see [storybook.new](https://storybook.new/).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories/tags",
    "markdown": "# StorybookChromatic\n\nTags allow you to control which stories are included in your Storybook, enabling many different uses of the same total set of stories. For example, you can use tags to include/exclude tests from the [test runner](https://storybook.js.org/docs/writing-tests/test-runner#run-tests-for-a-subset-of-stories). For more complex use cases, see the [recipes](#recipes) section, below.\n\nThe following tags are available in every Storybook project:\n\n| Tag | Applied by default? | Description |\n| --- | --- | --- |\n| `autodocs` | No  | Stories tagged with `autodocs` will be included in the [docs page](https://storybook.js.org/docs/writing-docs/autodocs). If a CSF file does not contain at least one story tagged with `autodocs`, that component will not generate a docs page. |\n| `dev` | Yes | Stories tagged with `dev` are rendered in Storybook's sidebar. |\n| `test` | Yes | Stories tagged with `test` do not currently affect Storybook's UI, but can be used to filter the [test runner](https://storybook.js.org/docs/writing-tests/test-runner#run-tests-for-a-subset-of-stories). |\n\nThe `dev` and `test` tags are automatically, implicitly applied to every story in your Storybook project.\n\nA tag can be any static (i.e. not created dynamically) string, either the [built-in tags](#built-in-tags) or custom tags of your own design. To apply tags to a story, assign an array of strings to the `tags` property. Tags may be applied at the project, component (meta), or story levels.\n\nFor example, to apply the `autodocs` tag to all stories in your project, you can use `.storybook/preview.js|ts`:\n\nWithin a component stories file, you apply tags like so:\n\nTo remove a tag from a story, prefix it with `!`. For example:\n\nTags can be removed for all stories in your project (in `.storybook/preview.js|ts`), all stories for a component (in the CSF file meta), or a single story (as above).\n\n## [Recipes](#recipes)\n\n### [Docs-only stories](#docs-only-stories)\n\nIt can sometimes be helpful to provide example stories for documentation purposes, but you want to keep the sidebar navigation more focused on stories useful for development. By enabling the `autodocs` tag and removing the `dev` tag, a story becomes docs-only: appearing only in the [docs page](https://storybook.js.org/docs/writing-docs/autodocs) and not in Storybook's sidebar.\n\n### [Combo stories, still tested individually](#combo-stories-still-tested-individually)\n\nFor a component with many variants, like a Button, a grid of those variants all together can be a helpful way to visualize it. But you may wish to test the variants individually. You can accomplish this with tags like so:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/new-frameworks",
    "markdown": "# StorybookChromatic\n\nStorybook is architected to support diverse web frameworks, including React, Vue, Angular, Web Components, Svelte, and over a dozen others. This guide helps you get started on adding new framework support for Storybook.\n\n## [Scaffolding a new framework](#scaffolding-a-new-framework)\n\nThe first thing to do is to scaffold your framework support in its own repo.\n\nWe recommend adopting the same project structure as the Storybook monorepo. That structure contains the framework package (`app/<framework>`) and an example app (`examples/<framework>-kitchen-sink`) as well as other associated documentation and configuration as needed.\n\nIt may seem like a little more hierarchy than what’s necessary. But because the structure mirrors the way Storybook’s monorepo is structured, you can reuse Storybook’s tooling. It also makes it easier to move the framework into the Storybook monorepo later if that is desirable.\n\nWe recommend using `@storybook/html` as a starter framework since it’s the simplest and contains no framework-specific peculiarities. There is a boilerplate to get you started [here](https://github.com/CodeByAlex/storybook-framework-boilerplate).\n\n## [Framework architecture](#framework-architecture)\n\nSupporting a new framework in Storybook typically consists of two main aspects:\n\n1.  Configuring the server. In Storybook, the server is the node process that runs when you run `storybook dev` or `storybook build`. Configuring the server typically means configuring babel and webpack in framework-specific ways.\n    \n2.  Configuring the client. The client is the code that runs in the browser, and configuring it, means providing a framework-specific story rendering function.\n    \n\n## [Configuring the server](#configuring-the-server)\n\nStorybook has the concept of [presets](https://storybook.js.org/docs/addons/writing-presets), which are typically babel/webpack configurations for file loading. If your framework has its own file format (e.g., “.vue”), you might need to transform them into JavaScript files at load time. If you assume every user of your framework needs this, you should add it to the framework. So far, every framework added to Storybook has done it because Storybook’s core configuration is extremely minimal.\n\n### [Package structure](#package-structure)\n\nIt's helpful to understand Storybook's package structure before adding a framework preset. Each framework typically exposes two executables in its `package.json`:\n\nThese scripts pass an `options` object to `@storybook/core/server`, a library that abstracts all of Storybook’s framework-independent code.\n\nFor example, here’s the boilerplate to start the dev server with `storybook dev`:\n\nThus the essence of adding framework presets is just filling in that options object.\n\n### [Server options](#server-options)\n\nAs described above, the server `options` object does the heavy lifting of configuring the server.\n\nLet’s look at the `@storybook/vue`’s options definition:\n\nThe value of the `framework` option (i.e., ‘vue’) is something that gets passed to addons and allows them to do specific tasks related to your framework.\n\nThe essence of this file is the framework presets, and these are standard [Storybook presets](https://storybook.js.org/docs/addons/writing-presets) -- you can look at framework packages in the Storybook monorepo (e.g. [React](https://github.com/storybookjs/storybook/blob/main/app/react/src/server/options.ts), [Vue](https://github.com/storybookjs/storybook/blob/main/app/vue/src/server/options.ts), [Web Components](https://github.com/storybookjs/storybook/blob/main/app/web-components/src/server/options.ts)) to see examples of framework-specific customizations.\n\nWhile developing your custom framework, not maintained by Storybook, you can specify the path to the location file with the `frameworkPath` key:\n\nYou can add a relative path to `frameworkPath`. Don't forget that they resolve from the Storybook configuration directory (i.e., `.storybook`) by default.\n\nMake sure the `frameworkPath` ends up at the `dist/client/index.js` file within your framework app.\n\n## [Configuring the client](#configuring-the-client)\n\nTo configure the client, you must provide a framework-specific render function. Before diving into the details, it’s essential to understand how user-written stories relate to what renders on the screen.\n\n### [Renderable objects](#renderable-objects)\n\nStorybook stories are ES6 objects that return a “renderable object.”\n\nConsider the following React story:\n\nIn this case, the renderable object is the React element, `<Button .../>`.\n\nIn most other frameworks, the renderable object is actually a plain JavaScript object.\n\nConsider the following hypothetical example:\n\nThe design of this “renderable object” is framework-specific and should ideally match the idioms of that framework.\n\n### [Render function](#render-function)\n\nThe framework's render function is the entity responsible for converting the renderable object into DOM nodes. It is typically of the form:\n\n### [Package structure](#package-structure-1)\n\nOn the client side, the key file is [`src/client/preview.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering):\n\nThe globals file typically sets up a single global variable that client-side code (such as addon-provided decorators) can refer to if needed to understand which framework it's running in:\n\nThe `start` function abstracts all of Storybook’s framework-independent client-side (browser) code, and it takes the render function we defined above. For examples of render functions, see [React](https://github.com/storybookjs/storybook/blob/main/app/react/src/client/preview/render.tsx), [Vue](https://github.com/storybookjs/storybook/blob/main/app/vue/src/client/preview/render.ts), [Angular](https://github.com/storybookjs/storybook/blob/main/app/angular/src/client/preview/render.ts), and [Web Components](https://github.com/storybookjs/storybook/blob/main/app/web-components/src/client/preview/render.ts) in the Storybook monorepo.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/addons",
    "markdown": "# StorybookChromatic\n\nAddons extend Storybook with features and integrations that are not built into the core. Most Storybook features are implemented as addons. For instance: [documentation](https://storybook.js.org/docs/writing-docs), [accessibility testing](https://github.com/storybookjs/storybook/tree/master/addons/a11y), [interactive controls](https://storybook.js.org/docs/essentials/controls), among others. The [addon API](https://storybook.js.org/docs/addons/addons-api) makes it easy for you to configure and customize Storybook in new ways. There are countless addons made by the community that unlocks time-saving workflows.\n\nBrowse our [addon catalog](https://storybook.js.org/addons) to install an existing addon or as inspiration for your own addon.\n\n## [Storybook basics](#storybook-basics)\n\nBefore writing your first [addon](https://storybook.js.org/addons), let’s take a look at the basics of Storybook’s architecture. While Storybook presents a unified user interface, under the hood it’s divided down the middle into **Manager** and **Preview**.\n\nThe **Manager** is the UI responsible for rendering the:\n\n*   🔍 Search\n*   🧭 Navigation\n*   🔗 Toolbars\n*   📦 Addons\n\nThe **Preview** area is an `iframe` where your stories are rendered.\n\n![Storybook detailed window](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Faddons%2Fmanager-preview.png&w=3840&q=75)\n\nBecause both elements run in their own separate `iframes`, they use a communication channel to keep in sync. For example, when you select a story in the Manager an event is dispatched across the channel notifying the Preview to render the story.\n\n## [Anatomy of an addon](#anatomy-of-an-addon)\n\nStorybook addons allow you to extend what's already possible with Storybook, everything from the [user interface](https://storybook.js.org/docs/addons/addon-types) to the [API](https://storybook.js.org/docs/addons/addons-api). Each one is classified into two broader categories.\n\n### [UI-based addons](#ui-based-addons)\n\n[UI-based addons](https://storybook.js.org/docs/addons/addon-types#ui-based-addons) focus on customizing Storybook's user interface to extend your development workflow. Examples of UI-based addons include: [Controls](https://storybook.js.org/docs/essentials/controls), [Docs](https://storybook.js.org/docs/writing-docs) and [Accessibility](https://github.com/storybookjs/storybook/tree/master/addons/a11y).\n\n[Learn how to write an addon »](https://storybook.js.org/docs/addons/writing-addons)\n\n### [Preset addons](#preset-addons)\n\n[Preset addons](https://storybook.js.org/docs/addons/addon-types#preset-addons) help you integrate Storybook with other technologies and libraries. An examples of a preset addons is [preset-create-react-app](https://github.com/storybookjs/presets/tree/master/packages/preset-create-react-app).\n\n[Learn how to write a preset addon »](https://storybook.js.org/docs/addons/writing-presets)",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/contribute",
    "markdown": "# StorybookChromatic\n\nStorybook is a community-oriented open source project that welcomes contributions. Some of our most popular features started with a developer wanting to solve a problem for themselves.\n\n## [Contributor covenant](#contributor-covenant)\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. [Continue reading our contributor covenant »](https://github.com/storybookjs/storybook/blob/next/CODE_OF_CONDUCT.mdx)\n\n## [Ways to contribute](#ways-to-contribute)\n\n*   [**RFC process**](https://storybook.js.org/docs/contribute/RFC) for authoring feature requests\n*   [**Code**](https://storybook.js.org/docs/contribute/code) for features and bug fixes\n*   [**Frameworks**](https://storybook.js.org/docs/contribute/framework) to get started with a new framework\n*   [**Documentation**](https://storybook.js.org/docs/contribute/documentation/documentation-updates) for documentation improvements, typos, and clarifications\n*   [**Examples**](https://storybook.js.org/docs/contribute/documentation/new-snippets) for new snippets and examples\n*   [**Addons**](https://storybook.js.org/docs/addons) for new addons\n\n## [Not sure how to get started?](#not-sure-how-to-get-started)\n\n*   [Chat in Discord `#contributing`](https://discord.com/channels/486522875931656193/839297503446695956)\n*   [Browse \"good first issues\" to fix](https://github.com/storybookjs/storybook/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\n*   [Submit a bug report or feature request](https://github.com/storybookjs/storybook/issues)",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories/naming-components-and-hierarchy",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nStorybook provides a powerful way to organize your stories, giving you the necessary tools to categorize, search, and filter your stories based on your organization's needs and preferences.\n\n## [Structure and hierarchy](#structure-and-hierarchy)\n\nWhen organizing your Storybook, there are two methods of structuring your stories: **implicit** and **explicit**. The [implicit method](https://storybook.js.org/docs/configure/user-interface/sidebar-and-urls#csf-30-auto-titles) involves relying upon the physical location of your stories to position them in the sidebar, while the [explicit method](#naming-stories) involves utilizing the `title` parameter to place the story.\n\n![Storybook sidebar hierarchy](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-stories%2Fnaming-hierarchy-sidebar-anatomy.png&w=3840&q=75)\n\nBased on how you structure your Storybook, you can see that the story hierarchy is made up of various parts:\n\n*   **Category**: The top-level grouping of stories and documentation pages generated by Storybook\n*   **Folder**: A mid-level organizational unit that groups components and stories in the sidebar, representing a feature or section of your application\n*   **Component**: A low-level organizational unit representing the component that the story is testing\n*   **Docs**: The automatically generated [documentation page](https://storybook.js.org/docs/writing-docs/autodocs) for the component\n*   **Story**: The individual story testing a specific component state\n\n## [Naming stories](#naming-stories)\n\nWhen creating your stories, you can explicitly use the `title` parameter to define the story's position in the sidebar. It can also be used to [group](#grouping) related components together in an expandable interface to help with Storybook organization providing a more intuitive experience for your users. For example:\n\nYields this:\n\n![Stories hierarchy without paths](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-stories%2Fnaming-hierarchy-no-path.png&w=3840&q=75)\n\n## [Grouping](#grouping)\n\nIt is also possible to group related components in an expandable interface to help with Storybook organization. To do so, use the `/` as a separator:\n\nYields this:\n\n![Stories hierarchy with paths](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-stories%2Fnaming-hierarchy-with-path.png&w=3840&q=75)\n\n## [Roots](#roots)\n\nBy default, the top-level grouping will be displayed as “root” in the Storybook UI (i.e., the uppercased, non-expandable items). If you need, you can [configure Storybook](https://storybook.js.org/docs/configure/user-interface/sidebar-and-urls#roots) and disable this behavior. Useful if you need to provide a streamlined experience for your users; nevertheless, if you have a large Storybook composed of multiple component stories, we recommend naming your components according to the file hierarchy.\n\n## [Single-story hoisting](#single-story-hoisting)\n\nSingle-story components (i.e., component stories without **siblings**) whose **display name** exactly matches the component's name (last part of `title`) are automatically hoisted up to replace their parent component in the UI. For example:\n\n![Stories hierarchy with single story hoisting](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-stories%2Fnaming-hierarchy-single-story-hoisting.png&w=3840&q=75)\n\nBecause story exports are automatically \"start cased\" (`myStory` becomes `\"My Story\"`), your component name should match that. Alternatively, you can override the story name using `myStory.storyName = '...'` to match the component name.\n\n## [Sorting stories](#sorting-stories)\n\nOut of the box, Storybook sorts stories based on the order in which they are imported. However, you can customize this pattern to suit your needs and provide a more intuitive experience by adding `storySort` to the `options` parameter in your `preview.js` file.\n\nAsides from the unique story identifier, you can also use the `title`, `name`, and import path to sort your stories using the `storySort` function.\n\nThe `storySort` can also accept a configuration object.\n\n| Field | Type | Description | Required | Default Value | Example |\n| --- | --- | --- | --- | --- | --- |\n| **method** | String | Tells Storybook in which order the stories are displayed | No  | Storybook configuration | `'alphabetical'` |\n| **order** | Array | The stories to be shown, ordered by supplied name | No  | Empty Array `[]` | `['Intro', 'Components']` |\n| **includeNames** | Boolean | Include story name in sort calculation | No  | `false` | `true` |\n| **locales** | String | The locale required to be displayed | No  | System locale | `en-US` |\n\nTo sort your stories alphabetically, set `method` to `'alphabetical'` and optionally set the `locales` string. To sort your stories using a custom list, use the `order` array; stories that don't match an item in the `order` list will appear after the items in the list.\n\nThe `order` array can accept a nested array to sort 2nd-level story kinds. For example:\n\nWhich would result in this story ordering:\n\n1.  `Intro` and then `Intro/*` stories\n2.  `Pages` story\n3.  `Pages/Home` and `Pages/Home/*` stories\n4.  `Pages/Login` and `Pages/Login/*` stories\n5.  `Pages/Admin` and `Pages/Admin/*` stories\n6.  `Pages/*` stories\n7.  `Components` and `Components/*` stories\n8.  All other stories\n\nIf you want specific categories to sort to the end of the list, you can insert a `*` into your `order` array to indicate where \"all other stories\" should go:\n\nIn this example, the `WIP` category would be displayed at the end of the list.\n\nNote that the `order` option is independent of the `method` option; stories are sorted first by the `order` array and then by either the `method: 'alphabetical'` or the default `configure()` import order.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/essentials/viewport",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nThe Viewport toolbar item allows you to adjust the dimensions of the iframe your story is rendered in. It makes it easy to develop responsive UIs.\n\n## [Configuration](#configuration)\n\nOut of the box, the Viewport addon offers you a standard set of viewports that you can use. If you want to change the default set of viewports, you can set the global `parameters.viewport` [parameter](https://storybook.js.org/docs/writing-stories/parameters) in your [`.storybook/preview.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering):\n\nThe viewport global can take an object with the following keys:\n\n| Field | Type | Description | Default Value |\n| --- | --- | --- | --- |\n| **defaultViewport** | String | Sets the default viewport | `'responsive'` |\n| **defaultOrientation** | String | Sets the default orientation (e.g. portrait or landscape) | `'portrait'` |\n| **disable** | Boolean | Disables the viewport | N/A |\n| **viewports** | Object | The configuration objects for the viewport | `{}` |\n\nThe viewports object needs the following keys:\n\n| Field | Type | Description | Example values |\n| --- | --- | --- | --- |\n| **name** | String | Name for the viewport | `'Responsive'` |\n| **styles** | Object | Sets Inline styles to be applied to the story | `{ width:0, height:0 }` |\n| **type** | String | Type of the device (e.g., desktop, mobile, or tablet) | `desktop` |\n\n### [Use a detailed set of devices](#use-a-detailed-set-of-devices)\n\nThe Viewport addon includes a selection of devices that you can use to test your components. Listed below are the available devices and examples of how to use them.\n\n| Device | Description | Dimensions  <br>(w×h, px) |\n| --- | --- | --- |\n| iPhone 5 | Configures the iPhone 5 as a device for the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphone5', }},` | 320 × 568 |\n| iPhone 6 | Enables the iPhone 6 to be used with the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphone6', }},` | 375 × 667 |\n| iPhone 6 Plus | Includes the iPhone 6 Plus as a device for the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphone6p', }},` | 414 × 736 |\n| iPhone 8 Plus | Sets the iPhone 8 Plus as a device to be used by the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphone8p', }},` | 414 × 736 |\n| iPhone X | Configures the iPhone X as a device for the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphonex', }},` | 375 × 812 |\n| iPhone XR | Includes the iPhone XR as a device for the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphonexr', }},` | 414 × 896 |\n| iPhone XS Max | Sets the iPhone XS Max as a device to be used by the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphonexsmax', }},` | 414 × 896 |\n| iPhone SE (2nd generation) | Configures the iPhone SE (2nd generation) as a device for the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphonese2', }},` | 375 × 667 |\n| iPhone 12 mini | Enables the iPhone 12 Mini to be used with the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphone12mini', }},` | 375 × 812 |\n| iPhone 12 | Includes the iPhone 12 as a device for the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphone12', }},` | 390 × 844 |\n| iPhone 12 Pro Max | Configures the iPhone 12 Pro Max as a device for the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphone12promax', }},` | 428 × 926 |\n| iPhone SE 3rd generation | Enables the iPhone SE (3rd generation) to be used with the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphoneSE3', }},` | 375 × 667 |\n| iPhone 13 | Includes the iPhone 13 as a device for the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphone13', }},` | 390 × 844 |\n| iPhone 13 Pro | Enables the iPhone 13 Pro to be used with the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphone13pro', }},` | 390 × 844 |\n| iPhone 13 Pro Max | Configures the iPhone 13 Pro Max as a device to be used by the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphone13promax', }},` | 428 × 926 |\n| iPhone 14 | Enables the iPhone 14 to be used with the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphone14', }},` | 390 × 844 |\n| iPhone 14 Pro | Includes the iPhone 14 Pro as a device for the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphone14pro', }},` | 393 × 852 |\n| iPhone 14 Pro Max | Sets the iPhone 14 Pro Max as a device to be used by the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'iphone14promax', }},` | 430 × 932 |\n| Galaxy S5 | Configures the Galaxy S5 as a device for the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'galaxys5', }},` | 360 × 640 |\n| Galaxy S9 | Enables the Galaxy S9 to be used with the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'galaxys9', }},` | 360 × 740 |\n| Nexus 5X | Includes the Nexus 5x as a device for the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'nexus5x', }},` | 412 × 668 |\n| Nexus 6P | Sets the Nexus 6P as a device to be used by the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'nexus6p', }},` | 412 × 732 |\n| Pixel | Configures the Pixel as a device for the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'pixel', }},` | 540 × 960 |\n| Pixel XL | Enables the Pixel XL to be used with the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'pixelxl', }},` | 720 × 1280 |\n| Small mobile | Enabled by default.  <br>Configures a small form factor generic mobile device to be used by the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'mobile1', }},` | 320 × 568 |\n| Large mobile | Enabled by default.  <br>Configures a large form factor mobile device to be used by the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'mobile2', }},` | 414 × 896 |\n| iPad | Includes the iPad as a device for the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'ipad', }},` | 768 × 1024 |\n| iPad Pro 10.5-in | Enables the iPad Pro (10.5-inch) to be used with the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'ipad10p', }},` | 834 × 112 |\n| iPad Pro 11-in | Configures the iPad Pro (11-inch) as a device for the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'ipad11p', }},` | 834 × 1194 |\n| iPad Pro 12.9-in | Sets the iPad Pro (12.9-inch) as a device to be used by the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'ipad12p', }},` | 1024 × 1366 |\n| Tablet | Enabled by default.  <br>Configures a standard form factor tablet device to be used by the Viewport addon.  <br>`parameters: { viewport: { defaultViewport: 'tablet', }},` | 834 × 1112 |\n\nThe generic devices are enabled by default as they are the most common for testing responsive UIs. You don't need to include them in your configuration if you want to use them. For the implementation details, see the [source code](https://github.com/storybookjs/storybook/tree/next/code/addons/viewport) for the Viewport addon.\n\n### [Add new devices](#add-new-devices)\n\nIf you have either a specific viewport or a list of viewports that you need to use, you can modify your [`.storybook/preview.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering) file and include them:\n\nMake the following changes to use them in your Storybook:\n\nOnce you start Storybook, you'll see your new viewports and devices.\n\nYou can add these two to another list of viewports if needed.\n\nFor instance, if you want to use these two with the minimal set of viewports, you can do it like so:\n\nBoth viewports (`Kindle Fire 2` and `Kindle Fire HD`) will feature in the list of devices by merging them into the [`MINIMAL_VIEWPORTS`](https://github.com/storybookjs/storybook/blob/next/code/addons/viewport/src/defaults.ts#L231).\n\n### [Configuring per component or story](#configuring-per-component-or-story)\n\nIn some cases, it's not practical for you to use a specific visual viewport on a global scale, and you need to adjust it to an individual story.\n\nUpdate your story through [parameters](https://storybook.js.org/docs/writing-stories/parameters) to include your viewports at a component level or for a specific story:\n\n### [Keyboard shortcuts](#keyboard-shortcuts)\n\n*   Previous viewport: alt + shift + v\n*   Next viewport: alt + v\n*   Reset viewport: alt + control + v\n\nIf you need, you can edit them on the shortcuts page.\n\n## [API](#api)\n\n### [Parameters](#parameters)\n\nThis addon contributes the following [parameters](https://storybook.js.org/docs/writing-stories/parameters) to Storybook, under the `viewport` namespace:\n\n#### [`defaultOrientation`](#defaultorientation)\n\nType: `'portrait' | 'landscape'`\n\nDefault: `'portrait'`\n\nSpecifies the default orientation used when viewing a story.\n\n#### [`defaultViewport`](#defaultviewport)\n\nType: `string`\n\nSpecifies the default viewport used when viewing a story. Must match a key in the [`viewports`](#viewports) object.\n\n#### [`disable`](#disable)\n\nType: `boolean`\n\nDisable this addon's behavior. If you wish to disable this addon for the entire Storybook, you should do so when registering `addon-essentials`. See the [essential addon's docs](https://storybook.js.org/docs/essentials/index#disabling-addons) for more information.\n\nThis parameter is most useful to allow overriding at more specific levels. For example, if this parameter is set to `true` at the project level, it could then be re-enabled by setting it to `false` at the meta (component) or story level.\n\n#### [`viewports`](#viewports)\n\nType:\n\nSpecify the available viewports. The key is used to reference the viewport and the value is an object to define it. See [usage example](#add-new-devices), above. The `width` and `height` values must include the unit, e.g. `'320px'`.\n\n### [Exports](#exports)\n\nThis addon contributes the following exports to Storybook:\n\n#### [`INITIAL_VIEWPORTS`](#initial_viewports)\n\nType: `object`\n\nThe default set of viewports provided by the Viewport addon, [listed above](#use-a-detailed-set-of-devices).\n\n#### [`MINIMAL_VIEWPORTS`](#minimal_viewports)\n\nType: `object`\n\nA minimal set of viewports provided by the Viewport addon, listed below:\n\n| Device | Description | Dimensions  <br>(w×h, px) |\n| --- | --- | --- |\n| Small mobile | A small mobile device size  <br>`parameters: { viewport: { defaultViewport: 'mobile1', }},` | 320 × 568 |\n| Large mobile | A large mobile device size  <br>`parameters: { viewport: { defaultViewport: 'mobile2', }},` | 414 × 896 |\n| Tablet | A tablet device size  <br>`parameters: { viewport: { defaultViewport: 'tablet', }},` | 834 × 1112 |",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/addons/install-addons",
    "markdown": "# StorybookChromatic\n\nStorybook has [hundreds of reusable addons](https://storybook.js.org/integrations) packaged as NPM modules. Let's walk through how to extend Storybook by installing and registering addons.\n\n## [Automatic installation](#automatic-installation)\n\nStorybook includes a [`storybook add`](https://storybook.js.org/docs/api/cli-options#add) command to automate the setup of addons. Several community-led addons can be added using this command, except for preset addons. We encourage you to read the addon's documentation to learn more about its installation process.\n\nRun the `storybook add` command using your chosen package manager, and the CLI will update your Storybook configuration to include the addon and install any necessary dependencies.\n\nIf you're attempting to install multiple addons at once, it will only install the first addon that was specified. This is a known limitation of the current implementation and will be addressed in a future release.\n\n### [Manual installation](#manual-installation)\n\nStorybook addons are always added through the [`addons`](https://storybook.js.org/docs/api/main-config/main-config-addons) configuration array in [`.storybook/main.js|ts`](https://storybook.js.org/docs/configure). The following example shows how to manually add the [Accessibility addon](https://storybook.js.org/addons/@storybook/addon-a11y) to Storybook.\n\nRun the following command with your package manager of choice to install the addon.\n\nNext, update `.storybook/main.js|ts` to the following:\n\nWhen you run Storybook, the accessibility testing addon will be enabled.\n\n![Storybook addon installed and registered](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Faddons%2Fstorybook-addon-installed-registered.png&w=3840&q=75)\n\n### [Removing addons](#removing-addons)\n\nTo remove an addon from Storybook, you can choose to manually uninstall it and remove it from the configuration file (i.e., [`.storybook/main.js|ts`](https://storybook.js.org/docs/configure)) or opt-in to do it automatically via the CLI with the [`remove`](https://storybook.js.org/docs/api/cli-options#remove) command. For example, to remove the [Accessibility addon](https://storybook.js.org/addons/@storybook/addon-a11y) from Storybook with the CLI, run the following command:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/contribute/RFC",
    "markdown": "# StorybookChromatic\n\nThe RFC (Request for Comment) process is intended to provide a consistent and controlled path for new features to enter the project. It helps ensure that new features are well-designed, well-implemented, and well-tested, and they do not conflict with the project's overall direction and scope.\n\n## [Goal](#goal)\n\nMany changes, such as bug fixes and documentation improvements, can be implemented and reviewed via the normal GitHub pull request workflow. Some changes, however, are considered “substantial”, and we ask that these undergo a design process, solicit community input, and reach a consensus among the Storybook core team.\n\nThe purpose of the RFC (Request for Comment) process is to:\n\n*   Provide a transparent system for proposing new feature ideas.\n*   Establish a reliable and well-regulated process for introducing new features into the project.\n*   Provide a way for the community to participate in developing new features.\n\n### [“Feature Request” vs. “RFC”](#feature-request-vs-rfc)\n\nA _feature request_ is a straightforward and relatively informal way for Storybook users to suggest a new feature or enhancement to the project. While feature requests can provide valuable insights and ideas, they typically do not involve an in-depth design process or require consensus among the core team. Feature requests are usually open to discussion and may or may not be implemented based on factors like popularity, feasibility, and alignment with the project's goals.\n\nOn the other hand, an _RFC_ is a more formalized and structured process for proposing substantial changes or additions to the project. It involves following a defined set of steps to ensure that the proposed feature or modification receives proper consideration, design, and feedback. RFCs are typically used for changes that significantly impact the project, such as introducing new API functionality, removing existing features, or establishing new usage conventions. The RFC process aims to foster discussions, gather feedback from a wider audience, and reach consensus among the core team before integrating the proposed change into the project. Accepted RFCs are more likely to be implemented than regular feature requests.\n\n## [The RFC lifecycle](#the-rfc-lifecycle)\n\n### [1\\. `Status: Proposed`](#1-status-proposed)\n\nOpen a new GitHub discussion in the [“RFC” category](https://github.com/storybookjs/storybook/discussions/new?category=rfc). Fill out the form as instructed.\n\n_Details matter_: RFCs that do not present convincing motivation, demonstrate a lack of understanding of the design's impact, or are disingenuous about the drawbacks or alternatives tend to be poorly received.\n\n### [2\\. `Status: In review`](#2-status-in-review)\n\nRFCs tend to remain in this stage for a while, giving the community and core team members time to weigh in. During this period, the author of an RFC should be prepared to revise the proposal, integrate feedback, and build consensus. RFCs that have broad support are much more likely to make progress than those that don't receive any comments.\n\nEvery week, the Storybook core team conducts a triage meeting to review open RFCs as part of the meeting's agenda. The event is publicly scheduled in the [Storybook Discord](https://discord.gg/storybook) and held in the [Storybook Discord's Watercooler channel](https://discord.com/channels/486522875931656193/486522876388704260). We invite the RFC author(s) and interested members of the community to participate and engage in a more detailed discussion of the RFC. If a core team member deems it necessary, they will be assigned as the \"champion\" of the RFC. The champion will collaborate with the RFC author and assist them throughout the RFC process.\n\n### [3\\. `Status: accepted/rejected`](#3-status-acceptedrejected)\n\nEventually, the team will decide whether the RFC is a candidate for inclusion in Storybook. On the other hand, an RFC may be rejected by the team after a public discussion has settled and comments have been made summarizing the rationale for rejection.\n\n## [Implementing an accepted RFC](#implementing-an-accepted-rfc)\n\nThe author of an RFC is not obligated to implement it. Of course, the RFC author (like any other developer) is welcome to post an implementation for review after the RFC has been accepted. However, note that the “accepted” status does not indicate priority nor whether it’s being actively worked on.\n\nIf you are interested in implementing an \"active\" RFC, but cannot determine if someone else is already working on it, feel free to ask (e.g., by leaving a comment on the associated issue).\n\nThis RFC process took heavy inspiration from the RFC processes from [Rust](https://github.com/rust-lang/rfcs) and [Gatsby](https://www.gatsbyjs.com/contributing/rfc-process/).\n\n**Learn more about contributing to Storybook**\n\n*   RFC process for authoring feature requests\n*   [Code](https://storybook.js.org/docs/contribute/code) for features and bug fixes\n*   [Frameworks](https://storybook.js.org/docs/contribute/framework) to get started with a new framework\n*   [Documentation](https://storybook.js.org/docs/contribute/documentation/documentation-updates) for documentation improvements, typos, and clarifications\n*   [Examples](https://storybook.js.org/docs/contribute/documentation/new-snippets) for new snippets and examples",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/contribute/code",
    "markdown": "# StorybookChromatic\n\nContribute a new feature or bug fix to [Storybook's monorepo](https://github.com/storybookjs/storybook). This page outlines how to get your environment set up to contribute code.\n\n## [Prerequisites](#prerequisites)\n\n*   Ensure you have Node version 18 installed (suggestion: v18.16.0).\n*   Ensure if you are using Windows to use the Windows Subsystem for Linux (WSL).\n\n## [Initial setup](#initial-setup)\n\nStart by [forking](https://docs.github.com/en/github/getting-started-with-github/quickstart/fork-a-repo) the Storybook monorepo and cloning it locally.\n\nStorybook uses the [Yarn](https://yarnpkg.com/) package manager. Use [Corepack](https://github.com/nodejs/corepack) to set up the correct version for use with Storybook.\n\n## [Run your first sandbox](#run-your-first-sandbox)\n\nStorybook development happens in a set of _sandboxes_ which are templated Storybook environments corresponding to different user setups. Within each sandbox, we inject a set of generalized stories that allow us to test core features and addons in all such environments.\n\nTo run a sandbox locally, you can use the `start` command:\n\nIt will install the required prerequisites, build the code, create and link a starter example based on a Vite React setup and finally start the Storybook server.\n\nIf all goes well, you should see the sandbox running.\n\n![Storybook sandbox running](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fget-started%2Fexample-welcome.png&w=3840&q=75)\n\n## [Running a different sandbox template](#running-a-different-sandbox-template)\n\nBy default, the `start` command is configured to initialize a Vite-based React template. If you're planning on working on a different renderer instead, you can do so as well. Start by running the `task` command as follows:\n\nWhen prompted, answer the questions as accurately as possible to allow Storybook to determine your goals. After answering these questions, you should see the entire command with the options you've selected should you require to re-run it.\n\nThe `yarn task` command takes a few development shortcuts that can catch you off guard when switching branches and may require you to re-run both the `install` and `compile` tasks. You can speed up the process by running the command with the `start-from=install` flag.\n\n## [Running tests](#running-tests)\n\nAfter successfully running your [first sandbox](#run-your-first-sandbox), you should have a fully functional Storybook version built on your local machine. Before jumping onto any code changes, verifying everything is working is essential—specifically, the test suite.\n\nRun the following command to execute the tests:\n\n## [Start developing](#start-developing)\n\nNow that you've [verified your setup](#running-tests), it's time to jump into code. The simplest way is to run one of the sandboxes in one terminal window and the interactive build process in a separate terminal.\n\nAssuming you're still running the Vite-based React sandbox initialized after running the `yarn start` command, open a new terminal window and navigate to the `code` directory of the Storybook monorepo. Then, create a new branch for your contribution by running the following command:\n\nLastly, run the build process with the following:\n\nWhen prompted to start the build process in `watch` mode, answer **yes** to develop in interactive mode. Afterward, choose which packages you want to build. For example, if you're going to work on a feature for `@storybook/addon-docs`, you might want to select both `@storybook/addon-docs` and `@storybook/components`.\n\nBuild's `watch` mode is great for interactive development. However, for performance reasons, it only transpiles your code and doesn't execute the TypeScript compiler. If something isn't working as expected, try running the `build` command **WITHOUT** enabling watch mode: it will re-generate TypeScript types and perform automatic type checking for you.\n\n![Storybook package selector](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fcontribute%2Fstorybook-build-packages-selection-optimized.png&w=3840&q=75)\n\nIf the work you'll be doing affects the `Preview` (the innermost Storybook `iframe`, where the stories are displayed), it will automatically refresh one to two seconds after you save.\n\nOtherwise, if it affects the `Manager` (the outermost Storybook `iframe` where the addons are displayed), you'll need to refresh manually after saving.\n\n![Storybook manager preview](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Faddons%2Fmanager-preview.png&w=3840&q=75)\n\n## [Check your work](#check-your-work)\n\nWhen you're done coding, add documentation and tests as appropriate. That simplifies the PR review process, which means your code will get merged faster.\n\n### [Add stories](#add-stories)\n\nAdding a story or set of generic stories to our suite helps you test your work.\n\nAssuming you're working on one of the [Essential addons](https://storybook.js.org/docs/essentials), there's a chance that a complete set of stories already exists. Check the addon's `template/stories` directory that documents how it's supposed to work and add your stories there.\n\nIf you're modifying something related to a specific renderer (e.g., React, Vue 3, etc.), it will also have a similar `template/stories` directory in which you'll need to add your stories.\n\n### [Add tests](#add-tests)\n\nUnit tests ensure that Storybook doesn't break accidentally. If your code can regress in non-obvious ways, include unit tests with your pull request. Use the following naming convention:\n\n### [End-to-end tests (e2e)](#end-to-end-tests-e2e)\n\nStorybook's monorepo is set up to rely on end-to-end testing with [Playwright](https://playwright.dev/) during CI. To help with testing, we encourage running this test suite before submitting your contribution.\n\nTo run an e2e test against a sandbox, you can use the `e2e-tests` task:\n\nIf there are issues and you'd like to debug them, you can pass a `DEBUG=1` environment variable, and Playwright will run in watch mode.\n\n## [Submit a pull request](#submit-a-pull-request)\n\nBefore submitting your contribution, run the test suite one last time with the following:\n\nStorybook relies on [Vitest](https://vitest.dev/) as part of it's testing suite. During the test run, if you spot that snapshot tests are failing, re-run the command with the `-u` flag to update them.\n\nDoing this prevents last-minute bugs and is a great way to merge your contribution faster once you submit your pull request. Failing to do so will lead to one of the maintainers mark the pull request with the **Work in Progress** label until all tests pass.\n\n### [Target `next` branch](#target-next-branch)\n\nOnce the test suite finishes, it's time to commit, push and open a pull request against Storybook's `next` (default) branch. This branch is where all active development happens and is associated with the latest prerelease version (e.g., `7.0.0-alpha.47`).\n\nIf your contribution focuses on a bugfix and you want it featured in the next stable release, mention it in the pull request description. We'll try to patch it if it appears non-disruptive and fixes a critical bug.\n\n#### [Useful resources when working with forks](#useful-resources-when-working-with-forks)\n\n*   [Sync a fork](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/working-with-forks/syncing-a-fork)\n*   [Merge an upstream repository into your fork](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/working-with-forks/merging-an-upstream-repository-into-your-fork)\n\n### [Reproducing job failures](#reproducing-job-failures)\n\nAfter creating your PR, if one of the CI jobs failed, when checking the logs of that job, you will see that it printed a message explaining how to reproduce the task locally. Typically that involves running the task against the right template:\n\nTypically it is a good idea to start from the `install` task to ensure your local code is completely up to date. If you reproduce the failure, you can try and make fixes, [compile them](#start-developing) with `build`, then rerun the task with `--start-from=auto`.\n\nThe default instructions run the code in \"linked\" mode, meaning built changes to Storybook library code will be reflected in the sandbox immediately (the next time you run the task). However, CI runs in \"unlinked\" mode, which in rare cases, will behave differently.\n\nIf you are having trouble reproducing, try rerunning the command with the `--no-link` flag. If you need to do that, you'll need to run it with `--start-from=compile` after each code change.\n\n## [How to work with reproductions](#how-to-work-with-reproductions)\n\nWe encourage bug reports to include reproductions. In the same way that it's possible to [develop interactively](#start-developing) against example projects in the monorepo, it's also possible to develop against a reproduction repository.\n\nTo do so, run the following command in the root of the monorepo:\n\nThis command creates a project `../storybook-repros/your-project`, and automatically links it to your local Storybook code. After connecting it, you should be able to run Storybook and develop as mentioned [above](#start-developing).\n\nIf you already have a reproduction on your local machine, you can similarly link it to your monorepo dev setup with the `--local` flag:\n\nThe `storybook link` command relies on [Yarn linking](https://yarnpkg.com/cli/link/) under the hood. It requires your local reproduction to be using [Yarn 2 or higher](https://yarnpkg.com/) as well, which is the case if you've already enabled it with the [`storybook sandbox`](https://storybook.js.org/docs/contribute/how-to-reproduce) command per our contribution guidelines. The process will fail if you're trying to link a non-Yarn 2 project.\n\n## [Developing a template](#developing-a-template)\n\nThe first step is to add an entry to `code/lib/cli/src/sandbox-templates.ts`, which is the master list of all repro templates:\n\nAdd the `inDevelopment` flag until the PR is merged (you can fast-follow it with a second PR to remove the flag), as it'll make the development process much easier.\n\nThe **`key`** `cra/default-js` consists of two parts:\n\n*   The prefix is the tool that was used to generate the repro app\n*   The suffix is options that modify the default install, e.g. a specific version or options\n\nThe **`script`** field is what generates the application environment. The `.` argument is “the current working directory” which is auto-generated based on the key (e.g. `repros/cra/default-js/before-storybook`). The `{{beforeDir}}` key can also be used, which will be replaced by the path of that directory.\n\nThe rest of the fields are self-explanatory:\n\nThe **`skipTasks`** field exists because some sandboxes might not work properly in specific tasks temporarily, but we might still want to run the other tasks. For instance, a bug was introduced outside of our control, which fails only in the `test-runner` task.\n\nThe **`name`** field should contain a human readable name/description of the template.\n\nThe **`expected`** field reflects what framework/renderer/builder we expect `sb init` to generate. This is useful for assertions while generating sandboxes. If the template is generated with a different expected framework, for instance, it will fail, serving as a way to detect regressions.\n\n### [Running a sandbox](#running-a-sandbox)\n\nIf your template has a `inDevelopment` flag, it will be generated (locally) as part of the sandbox process. You can create the sandbox with the following command, where `<template-key>` is replaced by the id of the selected template e.g. `cra/default-js`:\n\nTemplates with `inDevelopment` will automatically run with `--no-link` flag as it is required for the local template generation to work.\n\nOnce the PR is merged, the template will be generated on a nightly cadence and you can remove the `inDevelopment` flag and the sandbox will pull the code from our templates repository.\n\n## [Troubleshooting](#troubleshooting)\n\n`yarn build --all --watch` watches everything but is resource-intensive\n\nIt's troublesome to know which packages you'll change ahead of time, and watching them can be highly demanding, even on modern machines. If you're working on a powerful enough machine, you can use `yarn build --all --watch` instead of `yarn build`.\n\n**Learn more about contributing to Storybook**\n\n*   [RFC process](https://storybook.js.org/docs/contribute/RFC) for authoring feature requests\n*   Code for features and bug fixes\n*   [Frameworks](https://storybook.js.org/docs/contribute/framework) to get started with a new framework\n*   [Documentation](https://storybook.js.org/docs/contribute/documentation/documentation-updates) for documentation improvements, typos, and clarifications\n*   [Examples](https://storybook.js.org/docs/contribute/documentation/new-snippets) for new snippets and examples",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/addons/configure-addons",
    "markdown": "# StorybookChromatic\n\nThe addon API is designed for customization. It offers addon authors different ways to configure and communicate with their users' Storybook. Let's look at what these are and their suggested use cases.\n\n## [Preset](#preset)\n\nPresets offload the burden of configuration from the user to the addon. Preset options are global and are accessible from NodeJS. They're ideal for pre-configuring Webpack loaders, Babel plugins, and other library or framework-specific configurations.\n\nFor example, many libraries require that the app be wrapped by a `Provider` which _provides_ data to components down the tree. Presets can describe behavior like adding wrappers automatically, without users having to do any manual configuration. If a user installs an addon that has Presets, the addon can instruct Storybook to wrap all stories in `Provider`. This allows folks to start using your library with Storybook, with just 1 line of config!\n\nFor more on presets, see: [Write a preset addon](https://storybook.js.org/docs/addons/writing-presets)\n\nThe mechanism for wrapping each story is referred to as a Storybook [decorator](https://storybook.js.org/docs/writing-stories/decorators). They allow you to augment stories with extra rendering functionality or by providing data.\n\n## [Parameters](#parameters)\n\nParameters are available in the browser and are great for configuring addon behavior globally, at the component level, or at the story level.\n\nFor example, the [Pseudo States addon](https://storybook.js.org/addons/storybook-addon-pseudo-states) uses parameters to enable the various pseudo-states. Users can provide global defaults and then override them at the story level.\n\nUse the [`useParameter`](https://storybook.js.org/docs/addons/addons-api#useparameter) hook to access the parameter values within your addon.\n\n## [Channels](#channels)\n\nChannels enable two-way communication between the manager and the preview pane, using a NodeJS [EventEmitter](https://nodejs.org/api/events.html) compatible API. Your addons can plug into specific channels and respond to these events.\n\nFor example, the [Actions addon](https://storybook.js.org/addons/@storybook/addon-actions) captures user events and displays their data in a panel.\n\nUse the [`useChannel`](https://storybook.js.org/docs/addons/addons-api#usechannel) hook to access the channel data within your addon.\n\nFor a complete example, check out [storybookjs/addon-kit/withRoundTrip.ts](https://github.com/storybookjs/addon-kit/blob/main/src/withRoundTrip.ts)",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/contribute/framework",
    "markdown": "# StorybookChromatic\n\nA Storybook framework is a node package that enables out-of-the-box support for either a metaframework (Next.js, NuxtJS, SvelteKit) or a combination of [builder](https://storybook.js.org/docs/builders) (Webpack, Vite) plus renderer (React, Angular, Vue 3, web components, etc).\n\nFor metaframeworks, the Storybook framework also takes care of additional configuration necessary to make Storybook behave similarly to apps generated by the metaframework. For example, `@storybook/nextjs` [recreates or mocks a number of features of Next.js apps](https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/README.md#supported-features) inside Storybook.\n\nFor your reference, you can view [all of the official Storybook frameworks](https://github.com/storybookjs/storybook/tree/next/code/frameworks), including their full source code and documentation.\n\n## [How to make a framework](#how-to-make-a-framework)\n\n### [1\\. Decide on a package name](#1-decide-on-a-package-name)\n\nThe name should start with `storybook-framework-` and then correspond to what your framework supports. For example, a framework targeting SvelteKit would be `storybook-framework-svelte-kit` and a framework targeting Stencil with Vite would be `storybook-framework-stencil-vite`. When not targeting a metaframework, the naming convention is `storybook-framework-<renderer>-<builder>`.\n\n### [2\\. Consider what your framework will need to do](#2-consider-what-your-framework-will-need-to-do)\n\nThe goal is to make Storybook behave—out-of-the-box—as similarly as possible to the metaframework or builder-renderer combination you’re targeting.\n\nFor metaframeworks, this means attempting to recreate any builder or babel configuration provided by the metaframework. You should try to do so in a way that respects the user's existing project configuration as much as possible.\n\nThe library or libraries your framework supports may have different major versions available. Consider which versions of each library your framework will support. You will need to account for the changes within those different versions or split your framework into different versions/packages itself to support each library version. To speed up maintenance, please consider adding integration tests for the various library versions your framework supports.\n\n### [3\\. Write the documentation](#3-write-the-documentation)\n\nBefore writing any code, write a helpful README that contains installation instructions and a list of available features. Use the [README for `@storybook/nextjs`](https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/README.mdx) as a template. Writing the documentation first helps guide your other work.\n\nA framework can contain the following parts:\n\n#### [`package.json` (](#packagejson-example)[example](https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/package.json))\n\nBecause a framework is a node package, it must contain a `package.json` file. Here’s a template you can use to start:\n\n`package.json` template\n\nA few notes on some of those properties:\n\n*   `exports`: The root, `./preset`, and `package.json` exports are required. If your framework has a `preview.js`, then that is required as well.\n*   `types`: We strongly encourage you to author your framework in TypeScript and distribute the types.\n*   `dependencies` and `devDependencies`: These are just examples. Yours may look quite different.\n*   `peerDependencies`: If your framework provides support for multiple versions of the libraries you’re targeting, be sure that is represented here.\n\n#### [`preset.js` (](#presetjs-example)[example](https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/src/preset.ts))\n\nThe [preset API](https://storybook.js.org/docs/addons/writing-presets) is where you will configure the Storybook core (which builder and renderer are used by your framework), the builder (via either the [`webpackFinal`](https://storybook.js.org/docs/builders/webpack#override-the-default-configuration) or [`viteFinal`](https://storybook.js.org/docs/builders/vite#configuration) export), babel (via the `babel` export), any necessary addons, and any available options for your framework.\n\n#### [`preview.js` (](#previewjs-example)[example](https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/src/preview.tsx))\n\nThe (optional) [preview API](https://storybook.js.org/docs/configure/index#configure-story-rendering) is where you configure the rendering of stories, such as global decorators or initializing some runtime config needed for your framework to behave as expected. If your framework requires this file, note that you also need to [configure the `previewAnnotations` in `preset.js`](https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/src/preset.ts#L71-L74).\n\n#### [`types.ts` (](#typests-example)[example](https://github.com/storybookjs/storybook/blob/next/code/frameworks/nextjs/src/types.ts))\n\nIf you author your framework in TypeScript (recommended), you should export the type for `StorybookConfig` which reflects the available options of your framework.\n\n### [5\\. Test your framework](#5-test-your-framework)\n\nTest it in a fresh project using a Storybook set up as close as possible to your framework. For example, for `@storybook/nextjs`, which uses React and Webpack5, start with a project that uses `@storybook/react` and `@storybook/builder-webpack5`. Follow the installation instructions from your README and ensure everything works as expected. Remember to test the various versions, configs, and options for the libraries you’re supporting.\n\n### [6\\. Let us know!](#6-let-us-know)\n\nOnce it's fully tested and released, please let us know about your framework by either announcing it in the [`#showcase`](https://discord.com/channels/486522875931656193/1048740936953376859) Discord channel or tweeting it and mentioning `@storybookjs`. It's our hope that well-made community frameworks can eventually move into the Storybook codebase and be considered \"officially\" supported.\n\n**Learn more about contributing to Storybook**\n\n*   [RFC process](https://storybook.js.org/docs/contribute/RFC) for authoring feature requests\n*   [Code](https://storybook.js.org/docs/contribute/code) for features and bug fixes\n*   Frameworks to get started with a new framework\n*   [Documentation](https://storybook.js.org/docs/contribute/documentation/documentation-updates) for documentation improvements, typos, and clarifications\n*   [Examples](https://storybook.js.org/docs/contribute/documentation/new-snippets) for new snippets and examples",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories/build-pages-with-storybook",
    "markdown": "# StorybookChromatic\n\nStorybook helps you build any component, from small “atomic” components to composed pages. But as you move up the component hierarchy toward the page level, you deal with more complexity.\n\nThere are many ways to build pages in Storybook. Here are common patterns and solutions.\n\n*   Pure presentational pages.\n*   Connected components (e.g., network requests, context, browser environment).\n\n## [Pure presentational pages](#pure-presentational-pages)\n\nTeams at the BBC, The Guardian, and the Storybook maintainers themselves build pure presentational pages. If you take this approach, you don't need to do anything special to render your pages in Storybook.\n\nIt's straightforward to write components to be fully presentational up to the screen level. That makes it easy to show in Storybook. The idea is that you do all the messy “connected” logic in a single wrapper component in your app outside of Storybook. You can see an example of this approach in the [Data](https://storybook.js.org/tutorials/intro-to-storybook/react/en/data/) chapter of the Intro to Storybook tutorial.\n\nThe benefits:\n\n*   Easy to write stories once components are in this form.\n*   All the data for the story is encoded in the args of the story, which works well with other parts of Storybook's tooling (e.g. [controls](https://storybook.js.org/docs/essentials/controls)).\n\nThe downsides:\n\n*   Your existing app may not be structured in this way, and it may be difficult to change it.\n    \n*   Fetching data in one place means that you need to drill it down to the components that use it. This can be natural in a page that composes one big GraphQL query (for instance), but other data fetching approaches may make this less appropriate.\n    \n*   It's less flexible if you want to load data incrementally in different places on the screen.\n    \n\n### [Args composition for presentational screens](#args-composition-for-presentational-screens)\n\nWhen you are building screens in this way, it is typical that the inputs of a composite component are a combination of the inputs of the various sub-components it renders. For instance, if your screen renders a page layout (containing details of the current user), a header (describing the document you are looking at), and a list (of the subdocuments), the inputs of the screen may consist of the user, document and subdocuments.\n\nIn such cases, it is natural to use [args composition](https://storybook.js.org/docs/writing-stories/args#args-composition) to build the stories for the page based on the stories of the sub-components:\n\nThis approach is beneficial when the various subcomponents export a complex list of different stories. You can pick and choose to build realistic scenarios for your screen-level stories without repeating yourself. Your story maintenance burden is minimal by reusing the data and taking a Don't-Repeat-Yourself(DRY) philosophy.\n\n## [Mocking connected components](#mocking-connected-components)\n\nConnected components are components that depend on external data or services. For example, a full page component is often a connected component. When you render a connected component in Storybook, you need to mock the data or modules that the component depends on. There are various layers in which you can do that.\n\n### [](#mocking-imports)[Mocking imports](https://storybook.js.org/docs/writing-stories/mocking-data-and-modules/mocking-modules)\n\nComponents can depend on modules that are imported into the component file. These can be from external packages or internal to your project. When rendering those components in Storybook or testing them, you may want to mock those modules to control their behavior.\n\n### [](#mocking-api-services)[Mocking API Services](https://storybook.js.org/docs/writing-stories/mocking-data-and-modules/mocking-network-requests)\n\nFor components that make network requests (e.g., fetching data from a REST or GraphQL API), you can mock those requests in your stories.\n\n### [](#mocking-providers)[Mocking providers](https://storybook.js.org/docs/writing-stories/mocking-data-and-modules/mocking-providers)\n\nComponents can receive data or configuration from context providers. For example, a styled component might access its theme from a ThemeProvider or Redux uses React context to provide components access to app data. You can mock a provider and the value it's providing and wrap your component with it in your stories.\n\n### [Avoiding mocking dependencies](#avoiding-mocking-dependencies)\n\nIt's possible to avoid mocking the dependencies of connected \"container\" components entirely by passing them around via props or React context. However, it requires a strict split of the container and presentational component logic. For example, if you have a component responsible for data fetching logic and rendering DOM, it will need to be mocked as previously described.\n\nIt’s common to import and embed container components amongst presentational components. However, as we discovered earlier, we’ll likely have to mock their dependencies or the imports to render them within Storybook.\n\nNot only can this quickly grow to become a tedious task, but it’s also challenging to mock container components that use local states. So, instead of importing containers directly, a solution to this problem is to create a React context that provides the container components. It allows you to freely embed container components as usual, at any level in the component hierarchy without worrying about subsequently mocking their dependencies; since we can swap out the containers themselves with their mocked presentational counterpart.\n\nWe recommend dividing context containers up over specific pages or views in your app. For example, if you had a `ProfilePage` component, you might set up a file structure as follows:\n\nIt’s also often helpful to set up a “global” container context (perhaps named `GlobalContainerContext`) for container components that may be rendered on every page of your app and add them to the top level of your application. While it’s possible to place every container within this global context, it should only provide globally required containers.\n\nLet’s look at an example implementation of this approach.\n\nFirst, create a React context, and name it `ProfilePageContext`. It does nothing more than export a React context:\n\n`ProfilePage` is our presentational component. It will use the `useContext` hook to retrieve the container components from `ProfilePageContext`:\n\n#### [Mocking containers in Storybook](#mocking-containers-in-storybook)\n\nIn the context of Storybook, instead of providing container components through context, we’ll instead provide their mocked counterparts. In most cases, the mocked versions of these components can often be borrowed directly from their associated stories.\n\nIf the same context applies to all `ProfilePage` stories, we can use a [decorator](https://storybook.js.org/docs/writing-stories/decorators).\n\n#### [Providing containers to your application](#providing-containers-to-your-application)\n\nNow, in the context of your application, you’ll need to provide `ProfilePage` with all of the container components it requires by wrapping it with `ProfilePageContext.Provider`:\n\nFor example, in Next.js, this would be your `pages/profile.js` component.\n\n#### [Mocking global containers in Storybook](#mocking-global-containers-in-storybook)\n\nIf you’ve set up `GlobalContainerContext`, you’ll need to set up a decorator within Storybook’s `preview.js` to provide context to all stories. For example:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories/typescript",
    "markdown": "# StorybookChromatic\n\nWriting your stories in [TypeScript](https://www.typescriptlang.org/) makes you more productive. You don't have to jump between files to look up component props. Your code editor will alert you about missing required props and even autocomplete prop values, just like when using your components within your app. Plus, Storybook infers those component types to auto-generate the [Controls](https://storybook.js.org/docs/api/doc-blocks/doc-block-controls) table.\n\nStorybook has built-in TypeScript support, so you can get started with zero configuration required.\n\n## [Typing stories with `Meta` and `StoryObj`](#typing-stories-with-meta-and-storyobj)\n\nWhen writing stories, there are two aspects that are helpful to type. The first is the [component meta](https://storybook.js.org/docs/writing-stories/index#default-export), which describes and configures the component and its stories. In a [CSF file](https://storybook.js.org/docs/api/csf), this is the default export. The second is the [stories themselves](https://storybook.js.org/docs/writing-stories/index#defining-stories).\n\nStorybook provides utility types for each of these, named `Meta` and `StoryObj`. Here's an example CSF file using those types:\n\n### [Props type parameter](#props-type-parameter)\n\n`Meta` and `StoryObj` types are both [generics](https://www.typescriptlang.org/docs/handbook/2/generics.html#working-with-generic-type-variables), so you can provide them with an optional prop type parameter for the component type or the component's props type (e.g., the `typeof Button` portion of `Meta<typeof Button>`). By doing so, TypeScript will prevent you from defining an invalid arg, and all [decorators](https://storybook.js.org/docs/writing-stories/decorators), [play functions](https://storybook.js.org/docs/writing-stories/play-function), or [loaders](https://storybook.js.org/docs/writing-stories/loaders) will type their function arguments.\n\nThe example above passes a component type. See [**Typing custom args**](#typing-custom-args) for an example of passing a props type.\n\n## [Using `satisfies` for better type safety](#using-satisfies-for-better-type-safety)\n\nIf you are using TypeScript 4.9+, you can take advantage of the new [`satisfies`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-9.html) operator to get stricter type checking. Now you will receive type errors for missing required args, not just invalid ones.\n\nUsing `satisfies` to apply a story's type helps maintain type safety when sharing a [play function](https://storybook.js.org/docs/writing-stories/play-function) across stories. Without it, TypeScript will throw an error that the `play` function may be undefined. The `satisfies` operator enables TypeScript to infer whether the play function is defined or not.\n\nFinally, use of `satisfies` allows you to pass `typeof meta` to the `StoryObj` generic. This informs TypeScript of the connection between the `meta` and `StoryObj` types, which allows it to infer the `args` type from the `meta` type. In other words, TypeScript will understand that args can be defined both at the story and meta level and won't throw an error when a required arg is defined at the meta level, but not at the story level.\n\n## [Typing custom args](#typing-custom-args)\n\nSometimes stories need to define args that aren’t included in the component's props. For this case, you can use an [intersection type](https://www.typescriptlang.org/docs/handbook/2/objects.html#intersection-types) to combine a component's props type and your custom args' type. For example, here's how you could use a `footer` arg to populate a child component:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-docs",
    "markdown": "# StorybookChromatic\n\nWhen you write component stories during development, you also create basic documentation to revisit later.\n\nStorybook gives you tools to expand this essential documentation with prose and layout that feature your components and stories prominently. That allows you to create UI library usage guidelines, design system sites, and more.\n\n![Docs page](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-docs%2Fdocs-completed.png&w=3840&q=75)\n\nIf you're including Storybook in your project for the [first time](https://storybook.js.org/docs/get-started/install), we provide you with a [documentation page](https://storybook.js.org/docs/writing-docs/autodocs) (\"Autodocs\" for short), positioned near your stories. It's a baseline template automatically generated, listing your existing stories and relevant metadata.\n\nAdditionally, you can customize this template if needed or create free-form pages for each component using [MDX](https://storybook.js.org/docs/writing-docs/mdx). In both cases, you’ll use Doc Blocks as the building blocks to create full-featured documentation.\n\nDocs is autoconfigured to work out of the box in most use cases. In some cases, you may need or want to tweak the configuration. Read more about it [here](https://storybook.js.org/addons/@storybook/addon-docs).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories/stories-for-multiple-components",
    "markdown": "# StorybookChromatic\n\nIt's useful to write stories that [render two or more components](https://storybook.js.org/docs/writing-stories/index#stories-for-two-or-more-components) at once if those components are designed to work together. For example, `ButtonGroup`, `List`, and `Page` components.\n\n## [Subcomponents](#subcomponents)\n\nWhen the components you're documenting have a parent-child relationship, you can use the `subcomponents` property to document them together. This is especially useful when the child component is not meant to be used on its own, but only as part of the parent component.\n\nHere's an example with `List` and `ListItem` components:\n\nNote that by adding a `subcomponents` property to the default export, we get an extra panel on the [ArgTypes](https://storybook.js.org/docs/writing-docs/doc-blocks#argtypes) and [Controls](https://storybook.js.org/docs/essentials/controls#) tables, listing the props of `ListItem`:\n\n![Subcomponents in ArgTypes doc block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-stories%2Fdoc-block-arg-types-subcomponents-for-list.png&w=3840&q=75)\n\nSubcomponents are only intended for documentation purposes and have some limitations:\n\n1.  The [argTypes](https://storybook.js.org/docs/api/arg-types) of subcomponents are [inferred (for the renderers that support that feature)](https://storybook.js.org/docs/api/arg-types#automatic-argtype-inference) and cannot be manually defined or overridden.\n2.  The table for each documented subcomponent does _not_ include [controls](https://storybook.js.org/docs/essentials/controls) to change the value of the props, because controls always apply to the main component's args.\n\nLet's talk about some techniques you can use to mitigate the above, which are especially useful in more complicated situations.\n\n## [Reusing story definitions](#reusing-story-definitions)\n\nWe can also reduce repetition in our stories by reusing story definitions. Here, we can reuse the `ListItem` stories' args in the story for `List`:\n\nBy rendering the `Unchecked` story with its args, we are able to reuse the input data from the `ListItem` stories in the `List`.\n\nHowever, we still aren’t using args to control the `ListItem` stories, which means we cannot change them with controls and we cannot reuse them in other, more complex component stories.\n\n## [Using children as an arg](#using-children-as-an-arg)\n\nOne way we improve that situation is by pulling the rendered subcomponent out into a `children` arg:\n\nNow that `children` is an arg, we can potentially reuse it in another story.\n\nHowever, there are some caveats when using this approach that you should be aware of.\n\nThe `children` arg, just like all args, needs to be JSON serializable. To avoid errors with your Storybook, you should:\n\n*   Avoid using empty values\n*   Use [mapping](https://storybook.js.org/docs/essentials/controls#dealing-with-complex-values) if you want to adjust the value with [controls](https://storybook.js.org/docs/essentials/controls)\n*   Use caution with components that include third party libraries\n\nWe're currently working on improving the overall experience for the children arg and allow you to edit children arg in a control and allow you to use other types of components in the near future. But for now you need to factor in this caveat when you're implementing your stories.\n\n## [Creating a Template Component](#creating-a-template-component)\n\nAnother option that is more “data”-based is to create a special “story-generating” template component:\n\nThis approach is a little more complex to setup, but it means you can more easily reuse the `args` to each story in a composite component. It also means that you can alter the args to the component with the Controls addon.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/addons/writing-presets",
    "markdown": "# StorybookChromatic\n\nStorybook presets are pre-configured settings or configurations that enable developers quickly set up and customize their environment with a specific set of features, functionalities, or integrations.\n\n## [How presets work](#how-presets-work)\n\nPreset addons allow developers to compose various configuration options and plugins via APIs to integrate with Storybook and customize its behavior and functionality. Typically, presets are separated into two files, each with its specific role.\n\n### [Local presets](#local-presets)\n\nThis type of preset allows you to encapsulate and organize configurations specific to the addon, including [builder](https://storybook.js.org/docs/builders) support, [Babel](https://babeljs.io/), or third-party integrations. For example:\n\n### [Root-level presets](#root-level-presets)\n\nThis type of preset is user-facing and responsible for registering the addon without any additional configuration from the user by bundling Storybook-related features (e.g., [parameters](https://storybook.js.org/docs/writing-stories/parameters)) via the [`previewAnnotations`](https://storybook.js.org/docs/api/main-config/main-config-preview-annotations) and UI related features (e.g., addons) via the `managerEntries` API. For example:\n\n## [Presets API](#presets-api)\n\nWhen writing a preset, you can access a select set of APIs to interact with the Storybook environment, including the supported builders (e.g., Webpack, Vite), the Storybook configuration, and UI. Below are the available APIs you can use when writing a preset addon.\n\n### [Babel](#babel)\n\nTo customize Storybook's Babel configuration and add support for additional features, you can use the [`babelDefault`](https://storybook.js.org/docs/api/main-config/main-config-babel-default) API. It will apply the provided configuration ahead of any other user presets, which can be further customized by the end user via the [`babel`](https://storybook.js.org/docs/api/main-config/main-config-babel) configuration option. For example:\n\nThe Babel configuration is only applied to frameworks that use Babel internally. If you enable it for a framework that uses a different compiler, like [SWC](https://swc.rs/) or [esbuild](https://esbuild.github.io/), it will be ignored.\n\n### [Builders](#builders)\n\nBy default, Storybook provides support for the leading industry builders, including [Webpack](https://storybook.js.org/docs/builders/webpack) and [Vite](https://storybook.js.org/docs/builders/vite). If you need additional features for any of these builders, you can use APIs to extend the builder configuration based on your specific needs.\n\n#### [Vite](#vite)\n\nIf you are creating a preset and want to include Vite support, the `viteFinal` API can be used to modify the default configuration and enable additional features. For example:\n\n#### [Webpack](#webpack)\n\nTo customize the Webpack configuration in Storybook to add support for additional file types, apply specific loaders, configure plugins, or make any other necessary modifications, you can use the `webpackFinal` API. Once invoked, it will extend the default Webpack configuration with the provided configuration. An example of this would be:\n\n### [ManagerEntries](#managerentries)\n\nIf you're writing a preset that loads third-party addons, which you may not have control over, but require access to specific features or additional configuration, you can use the `managerEntries` API. For example:\n\n### [PreviewAnnotations](#previewannotations)\n\nIf you need additional settings to render stories for a preset, like [decorators](https://storybook.js.org/docs/writing-stories/decorators) or [parameters](https://storybook.js.org/docs/writing-stories/parameters), you can use the `previewAnnotations` API. For example, to apply a decorator to all stories, create a preview file that includes the decorator and make it available to the preset as follows:\n\n## [Advanced configuration](#advanced-configuration)\n\nThe presets API is designed to be flexible and allow you to customize Storybook to your specific needs, including using presets for more advanced use cases without publishing them. In such cases, you can rely on a private preset. These private presets contain configuration options meant for development purposes and not for end-users. The `.storybook/main.js|ts` file is an example of such a private preset that empowers you to modify the behavior and functionality of Storybook.\n\n### [Addons](#addons)\n\nFor addon consumers, the [`managerEntries`](#managerentries) API can be too technical, making it difficult to use. To make it easier to add addons to Storybook, the preset API provides the [`addons`](https://storybook.js.org/docs/api/main-config/main-config-addons) API, which accepts an array of addon names and will automatically load them for you. For example:\n\nThe array of values supports references to additional presets and addons that should be included in the manager. Storybook will automatically detect whether the provided value is a preset or an addon and load it accordingly.\n\n### [Entries](#entries)\n\nEntries are the place to register entry points for the preview. This feature can be utilized to create a configure-storybook preset that automatically loads all `*.stories.js` files into Storybook, eliminating the need for users to copy-paste the same configuration repeatedly.\n\n### [UI configuration](#ui-configuration)\n\nThe Storybook preset API also provides access to the UI configuration, including the `head` and `body` HTML elements of the preview, configured by the [`previewHead`](https://storybook.js.org/docs/api/main-config/main-config-preview-head) and [`previewBody`](https://storybook.js.org/docs/api/main-config/main-config-preview-body) APIs. Both allow you to set up Storybook in a way that is similar to using the [`preview-head.html`](https://storybook.js.org/docs/configure/story-rendering#adding-to-head) and [`preview-body.html`](https://storybook.js.org/docs/configure/story-rendering#adding-to-body) files. These methods accept a string and return a modified version, injecting the provided content into the HTML element.\n\nAdditionally, if you need to customize the manager (i.e., where Storybook’s search, navigation, toolbars, and addons render), you can use the [`managerHead`](https://storybook.js.org/docs/api/main-config/main-config-manager-head) to modify the UI, similar to how you would do it with the `manager-head.html` file. For example:\n\nHowever, if you need, you can also customize the template used by Storybook to render the UI. To do so, you can use the `previewMainTemplate` API and provide a reference for a custom template created as a `ejs` file. For an example of how to do this, see the [template](https://github.com/storybookjs/storybook/blob/next/code/builders/builder-webpack5/templates/preview.ejs) used by the Webpack 5 builder.\n\n## [Troubleshooting](#troubleshooting)\n\n### [Storybook doesn't load files in my preset](#storybook-doesnt-load-files-in-my-preset)\n\nAs Storybook relies on [esbuild](https://esbuild.github.io/) instead of Webpack to build the UI, presets that depend on the `managerWebpack` API to configure the manager or load additional files other than CSS or images will no longer work. We recommend removing it from your preset and adjusting your configuration to convert any additional files to JavaScript.\n\n**Learn more about the Storybook addon ecosystem**\n\n*   [Types of addons](https://storybook.js.org/docs/addons/addon-types) for other types of addons\n*   [Writing addons](https://storybook.js.org/docs/addons/writing-addons) for the basics of addon development\n*   Presets for preset development\n*   [Integration catalog](https://storybook.js.org/docs/addons/integration-catalog) for requirements and available recipes\n*   [API reference](https://storybook.js.org/docs/addons/addons-api) to learn about the available APIs",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/addons/writing-addons",
    "markdown": "# StorybookChromatic\n\nStorybook addons are a powerful way to extend Storybook's functionality and customize the development experience. They can be used to add new features, customize the UI, or integrate with third-party tools.\n\n## [What are we going to build?](#what-are-we-going-to-build)\n\nThis reference guide is to help you develop a mental model for how Storybook addons work by building a simple addon based on the popular [Outline addon](https://storybook.js.org/addons/@storybook/addon-outline/). Throughout this guide, you'll learn how addons are structured, Storybook's APIs, how to test your addon locally, and how to publish it.\n\n## [Addon anatomy](#addon-anatomy)\n\nThere are two main categories of addons, each with its role:\n\n*   **UI-based**: These addons are responsible for customizing the interface, enabling shortcuts for common tasks, or displaying additional information in the UI.\n*   **Presets**: [These](https://storybook.js.org/docs/addons/writing-presets) are pre-configured settings or configurations that enable developers to quickly set up and customize their environment with a specific set of features, functionality, or technology.\n\n### [UI-based addons](#ui-based-addons)\n\nThe addon built in this guide is a UI-based addon, specifically a [toolbar](https://storybook.js.org/docs/addons/addon-types#toolbars) addon, enabling users to draw outlines around each element in the story through a shortcut or click of a button. UI addons can create other types of UI elements, each with its function: [panels](https://storybook.js.org/docs/addons/addon-types#panels) and [tabs](https://storybook.js.org/docs/addons/addon-types#tabs), providing users with various ways to interact with the UI.\n\n## [Setup](#setup)\n\nTo create your first addon, you're going to use the [Addon Kit](https://github.com/storybookjs/addon-kit), a ready-to-use template featuring all the required building blocks, dependencies and configurations to help you get started building your addon. In the Addon Kit repository, click the **Use this template** button to create a new repository based on the Addon Kit's code.\n\nClone the repository you just created and install its dependencies. When the installation process finishes, you will be prompted with questions to configure your addon. Answer them, and when you're ready to start building your addon, run the following command to start Storybook in development mode and develop your addon in watch mode:\n\nThe Addon Kit uses [Typescript](https://www.typescriptlang.org/) by default. If you want to use JavaScript instead, you can run the `eject-ts` command to convert the project to JavaScript.\n\n### [Understanding the build system](#understanding-the-build-system)\n\nAddons built in the Storybook ecosystem rely on [tsup](https://tsup.egoist.dev/), a fast, zero-config bundler powered by [esbuild](https://esbuild.github.io/) to transpile your addon's code into modern JavaScript that can run in the browser. Out of the box, the Addon Kit comes with a pre-configured `tsup` configuration file that you can use to customize the build process of your addon.\n\nWhen the build scripts run, it will look for the configuration file and pre-bundle the addon's code based on the configuration provided. Addons can interact with Storybook in various ways. They can define presets to modify the configuration, add behavior to the manager UI, or add behavior to the preview iframe. These different use cases require different bundle outputs because they target different runtimes and environments. Presets are executed in a Node environment. Storybook's manager and preview environments provide certain packages in the global scope, so addons don't need to bundle them or include them as dependencies in their `package.json` file.\n\nThe `tsup` configuration handles these complexities by default, but you can customize it according to their requirements. For a detailed explanation of the bundling techniques used, please refer to [the README of the addon-kit](https://github.com/storybookjs/addon-kit#bundling), and check out the default `tsup` configuration [here](https://github.com/storybookjs/addon-kit/blob/main/tsup.config.ts).\n\n## [Register the addon](#register-the-addon)\n\nBy default, code for the UI-based addons is located in one of the following files, depending on the type of addon built: **`src/Tool.tsx`**, **`src/Panel.tsx`**, or **`src/Tab.tsx`**. Since we're building a toolbar addon, we can safely remove the `Panel` and `Tab` files and update the remaining file to the following:\n\nGoing through the code blocks in sequence:\n\nThe [`useGlobals`](https://storybook.js.org/docs/addons/addons-api#useglobals) and [`useStorybookApi`](https://storybook.js.org/docs/addons/addons-api#usestorybookapi) hooks from the `manager-api` package are used to access the Storybook's APIs, allowing users to interact with the addon, such as enabling or disabling it.\n\nThe `IconButton` or `Button` component from the [`@storybook/components`](https://www.npmjs.com/package/@storybook/components) package can be used to render the buttons in the toolbar. The [`@storybook/icons`](https://github.com/storybookjs/icons) package provides a large set of appropriately sized and styled icons to choose from.\n\nThe `Tool` component is the entry point of the addon. It renders the UI elements in the toolbar, registers a keyboard shortcut, and handles the logic to enable and disable the addon.\n\nMoving onto the manager, here we register the addon with Storybook using a unique name and identifier. Since we've removed the `Panel` and `Tab` files, we'll need to adjust the file to only reference the addon we're building.\n\n### [Conditionally render the addon](#conditionally-render-the-addon)\n\nNotice the `match` property. It allows you to control the view mode (story or docs) and tab (the story canvas or [custom tabs](https://storybook.js.org/docs/addons/addon-types#tabs)) where the toolbar addon is visible. For example:\n\n*   `({ tabId }) => tabId === 'my-addon/tab'` will show your addon when viewing the tab with the ID `my-addon/tab`.\n*   `({ viewMode }) => viewMode === 'story'` will show your addon when viewing a story in the canvas.\n*   `({ viewMode }) => viewMode === 'docs'` will show your addon when viewing the documentation for a component.\n*   `({ tabId, viewMode }) => !tabId && viewMode === 'story'` will show your addon when viewing a story in the canvas and not in a custom tab (i.e. when `tabId === undefined`).\n\nRun the `start` script to build and start Storybook and verify that the addon is registered correctly and showing in the UI.\n\n![Addon registered in the toolbar](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Faddons%2Fstorybook-addon-initial-state.png&w=3840&q=75)\n\n### [Style the addon](#style-the-addon)\n\nIn Storybook, applying styles for addons is considered a side-effect. Therefore, we'll need to make some changes to our addon to allow it to use the styles when it is active and remove them when it's disabled. We're going to rely on two of Storybook's features to handle this: [decorators](https://storybook.js.org/docs/writing-stories/decorators) and [globals](https://storybook.js.org/docs/essentials/toolbars-and-globals#globals). To handle the CSS logic, we must include some helper functions to inject and remove the stylesheets from the DOM. Start by creating the helper file with the following content:\n\nNext, create the file with the styles we want to inject with the following content:\n\nSince the addon can be active in both the story and documentation modes, the DOM node for Storybook's preview `iframe` is different in these two modes. In fact, Storybook renders multiple story previews on one page when in documentation mode. Therefore, we'll need to choose the correct selector for the DOM node where the styles will be injected and ensure the CSS is scoped to that particular selector. That mechanism is provided as an example within the `src/withGlobals.ts` file, which we'll use to connect the styling and helper functions to the addon logic. Update the file to the following:\n\n## [Packaging and publishing](#packaging-and-publishing)\n\nStorybook addons, similar to most packages in the JavaScript ecosystem, are distributed as NPM packages. However, they have specific criteria that need to be met to be published to NPM and crawled by the integration catalog:\n\n1.  Have a `dist` folder with the transpiled code.\n2.  A `package.json` file declaring:\n    *   Module-related information\n    *   Integration catalog metadata\n\n### [Module Metadata](#module-metadata)\n\nThe first category of metadata is related to the addon itself. This includes the entry for the module, which files to include when the addon is published. And the required configuration to integrate the addon with Storybook, allowing it to be used by its consumers.\n\n### [Integration Catalog Metadata](#integration-catalog-metadata)\n\nThe second metadata category is related to the [integration catalog](https://storybook.js.org/integrations). Most of this information is already pre-configured by the Addon Kit. However, items like the display name, icon, and frameworks must be configured via the `storybook` property to be displayed in the catalog.\n\nThe `storybook` configuration element includes additional properties that help customize the addon's searchability and indexing. For more information, see the [Integration catalog documentation](https://storybook.js.org/docs/addons/integration-catalog).\n\nOne essential item to note is the `keywords` property as it maps to the catalog's tag system. Adding the `storybook-addons` ensures that the addon is discoverable in the catalog when searching for addons. The remaining keywords help with the searchability and categorization of the addon.\n\n### [Publishing to NPM](#publishing-to-npm)\n\nOnce you're ready to publish your addon to NPM, the Addon Kit comes pre-configured with the [Auto](https://github.com/intuit/auto) package for release management. It generates a changelog and uploads the package to NPM and GitHub automatically. Therefore, you need to configure access to both.\n\n1.  Authenticate using [npm adduser](https://docs.npmjs.com/cli/v9/commands/npm-adduser)\n2.  Generate a [access token](https://docs.npmjs.com/creating-and-viewing-access-tokens#creating-access-tokens) with both `read` and `publish` permissions.\n3.  Create a [personal access token](https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token) with `repo` and `workflow` scoped permissions.\n4.  Create a `.env` file in the root of your project and add the following:\n\nNext, run the following command to create labels on GitHub. You'll use these labels to categorize changes to the package.\n\nFinally, run the following command to create a release for your addon. This will build and package the addon code, bump the version, push the release into GitHub and npm, and generate a changelog.\n\n### [CI automation](#ci-automation)\n\nBy default, the Addon Kit comes pre-configured with a GitHub Actions workflow, enabling you to automate the release management process. This ensures that the package is always up to date with the latest changes and that the changelog is updated accordingly. However, you'll need additional configuration to use your NPM and GitHub tokens to publish the package successfully. In your repository, click the **Settings** tab, then the **Secrets and variables** dropdown, followed by the **Actions** item. You should see the following screen:\n\n![GitHub secrets page](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Faddons%2Fgithub-secrets-screen.png&w=3840&q=75)\n\nThen, click the **New repository secret**, name it `NPM_TOKEN`, and paste the token you generated earlier. Whenever you merge a pull request to the default branch, the workflow will run and publish a new release, automatically incrementing the version number and updating the changelog.\n\n**Learn more about the Storybook addon ecosystem**\n\n*   [Types of addons](https://storybook.js.org/docs/addons/addon-types) for other types of addons\n*   Writing addons for the basics of addon development\n*   [Presets](https://storybook.js.org/docs/addons/writing-presets) for preset development\n*   [Integration catalog](https://storybook.js.org/docs/addons/integration-catalog) for requirements and available recipes\n*   [API reference](https://storybook.js.org/docs/addons/addons-api) to learn about the available APIs",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-docs/build-documentation",
    "markdown": "# StorybookChromatic\n\nStorybook allows you to create rich and extensive [documentation](https://storybook.js.org/docs/writing-docs/) that will help you and any other stakeholder involved in the development process. Out of the box you have the tooling required to not only write it but also to preview it and build it.\n\n## [Preview Storybook's documentation](#preview-storybooks-documentation)\n\nAt any point during your development, you can preview the documentation you've written. Storybook allows you to generate a preview of the final documentation when you use the `--docs` flag. We recommend including it in your `package.json` as a new script:\n\nDepending on your configuration, when you execute the `storybook-docs` script. Storybook will be put into documentation mode and will generate a different build.\n\nIt will look for any stories available either in [MDX](https://storybook.js.org/docs/writing-docs/mdx) or [CSF](https://storybook.js.org/docs/writing-stories/index#component-story-format) and based on the documentation you've added it will display it...\n\n![Storybook in documentation mode](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-docs%2Fstorybook-docs-build.png&w=3840&q=75)\n\nThere's some caveats to this build mode, as to the normal Storybook build:\n\n*   The top level item refers to the primary story for your component.\n*   Each individual story is now in a flattened display mode, with a different set of icons. This allows focus on the documentation itself.\n*   Storybook's layout is rendered differently. The toolbar will not be displayed.\n\n## [Publish Storybook's documentation](#publish-storybooks-documentation)\n\nYou can also publish your documentation, the same you would [publish](https://storybook.js.org/docs/sharing/publish-storybook) your Storybook. You can use the `--docs` flag with `build-storybook` command. We recommend as well including it as a script in your `package.json` file:\n\nBased on the configuration you have, when the `build-storybook-docs` script is executed, Storybook once again will be put into documentation mode and will generate a different build and output the documentation into the `storybook-static` folder.\n\nThe same caveats mentioned above will apply.\n\nYou can use any hosting provider to deploy your documentation, for instance:\n\n*   [Vercel](https://vercel.com/)\n*   [Netlify](https://www.netlify.com/)\n*   [S3](https://aws.amazon.com/en/s3/)\n\n**Learn more about Storybook documentation**\n\n*   [Autodocs](https://storybook.js.org/docs/writing-docs/autodocs) for creating documentation for your stories\n*   [MDX](https://storybook.js.org/docs/writing-docs/mdx) for customizing your documentation\n*   [Doc Blocks](https://storybook.js.org/docs/writing-docs/doc-blocks) for authoring your documentation\n*   Publishing docs to automate the process of publishing your documentation",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-tests/interaction-testing",
    "markdown": "# StorybookChromatic\n\nAs you build more complex UIs like pages, components become responsible for more than just rendering the UI. They fetch data and manage state. Interaction tests allow you to verify these functional aspects of UIs.\n\nIn a nutshell, you start by supplying the appropriate props for the initial state of a component. Then simulate user behavior such as clicks and form entries. Finally, check whether the UI and component state update correctly.\n\nIn Storybook, this familiar workflow happens in your browser. That makes it easier to debug failures because you're running tests in the same environment as you develop components: the browser.\n\n## [How does component testing in Storybook work?](#how-does-component-testing-in-storybook-work)\n\nYou start by writing a [**story**](https://storybook.js.org/docs/writing-stories) to set up the component's initial state. Then simulate user behavior using the **play** function. Finally, use the **test-runner** to confirm that the component renders correctly and that your interaction tests with the **play** function pass. Additionally, you can automate test execution via the [command line](https://storybook.js.org/docs/writing-tests/test-runner#cli-options) or in your [CI environment](https://storybook.js.org/docs/writing-tests/test-runner#set-up-ci-to-run-tests).\n\n*   The [`play`](https://storybook.js.org/docs/writing-stories/play-function) function is a small snippet of code that runs after a story finishes rendering. You can use this to test user workflows.\n*   The test is written using Storybook-instrumented versions of [Vitest](https://vitest.dev/) and [Testing Library](https://testing-library.com/) coming from the [`@storybook/test`](https://npmjs.com/package/@storybook/test) package.\n*   [`@storybook/addon-interactions`](https://storybook.js.org/addons/@storybook/addon-interactions/) visualizes the test in Storybook and provides a playback interface for convenient browser-based debugging.\n*   [`@storybook/test-runner`](https://github.com/storybookjs/test-runner) is a standalone utility—powered by [Jest](https://jestjs.io/) and [Playwright](https://playwright.dev/)—that executes all of your interactions tests and catches broken stories.\n\n## [Set up the interactions addon](#set-up-the-interactions-addon)\n\nTo enable interaction testing with Storybook, you'll need to take additional steps to set it up properly. We recommend you go through the [test runner documentation](https://storybook.js.org/docs/writing-tests/test-runner) before proceeding with the rest of the required configuration.\n\nRun the following command to install the interactions addon and related dependencies.\n\nUpdate your Storybook configuration (in `.storybook/main.js|ts`) to include the interactions addon.\n\n## [Write an interaction test](#write-an-interaction-test)\n\nThe test itself is defined inside a `play` function connected to a story. Here's an example of how to set up an interaction test with Storybook and the `play` function:\n\nOnce the story loads in the UI, it simulates the user's behavior and verifies the underlying logic.\n\n### [Run code before the component gets rendered](#run-code-before-the-component-gets-rendered)\n\nYou can execute code before rendering by using the `mount` function in the `play` method.\n\nHere's an example of using the [`mockdate`](https://github.com/boblauer/MockDate) package to mock the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date), a useful way to make your story render in a consistent state.\n\nThere are two requirements to use the `mount` function:\n\n1.  You _must_ destructure the mount property from the `context` (the argument passed to your play function). This makes sure that Storybook does not start rendering the story before the play function begins.\n2.  Your Storybook framework or builder must be configured to transpile to ES2017 or newer. This is because destructuring statements and async/await usages are otherwise transpiled away, which prevents Storybook from recognizing your usage of `mount`.\n\n#### [Create mock data before rendering](#create-mock-data-before-rendering)\n\nYou can also use `mount` to create mock data that you want to pass to the component. To do so, first create your data in the play function and then call the `mount` function with a component configured with that data. In this example, we create a mock `note` and pass its `id` to the Page component, which we call `mount` with.\n\nWhen you call `mount()` with no arguments, the component is rendered using the story’s render function, whether the [implicit default](https://storybook.js.org/docs/api/csf#default-render-functions) or the [explicit custom definition](https://storybook.js.org/docs/api/csf#custom-render-functions).\n\nWhen you mount a specific component inside the `mount` function like in the example above, the story’s render function will be ignored. This is why you must forward the `args` to the component.\n\n### [Run code before each story in a file](#run-code-before-each-story-in-a-file)\n\nSometimes you might need to run the same code before each story in a file. For instance, you might need to set up the initial state of the component or modules. You can do this by adding an asynchronous `beforeEach` function to the component meta.\n\nYou can return a cleanup function from the `beforeEach` function, which will run **after** each story, when the story is remounted or navigated away from.\n\nGenerally, you should reset component and module state in the [preview file's `beforeAll` or `beforeEach` functions](#reset-state-for-all-tests), to ensure it applies to your entire project. However, if a component's needs are particularly unique, you can use the returned cleanup function in the component meta `beforeEach` to reset the state as needed.\n\n### [Set up or reset state for all tests](#set-up-or-reset-state-for-all-tests)\n\nWhen you [alter a component's state](#run-code-before-the-component-gets-rendered), it's important to reset that state before rendering another story to maintain isolation between tests.\n\nThere are two options for resetting state, `beforeAll` and `beforeEach`.\n\n#### [`beforeAll`](#beforeall)\n\nThe `beforeAll` function in the preview file (`.storybook/preview.js|ts`) will run once before any stories in the project and will _not_ re-run between stories. Beyond its initial run when kicking off a test run, it will not run again unless the preview file is updated. This is a good place to bootstrap your project or run any setup that your entire project depends on, as in the example below.\n\nYou can return a cleanup function from the `beforeAll` function, which will run before re-running the `beforeAll` function or during the teardown process in the test runner.\n\n#### [`beforeEach`](#beforeeach)\n\nUnlike `beforeAll`, which runs only once, the `beforeEach` function in the preview file (`.storybook/preview.js|ts`) will run before each story in the project. This is best used for resetting state or modules that are used by all or most of your stories. In the example below, we use it to reset the mocked Date.\n\nYou can return a cleanup function from the `beforeEach` function, which will run **after** each story, when the story is remounted or navigated away from.\n\nIt is _not_ necessary to restore `fn()` mocks, as Storybook will already do that automatically before rendering a story. See the [`parameters.test.restoreMocks` API](https://storybook.js.org/docs/api/parameters#restoremocks) for more information.\n\n### [API for user-events](#api-for-user-events)\n\nUnder the hood, Storybook’s `@storybook/test` package provides Testing Library’s [`user-events`](https://testing-library.com/docs/user-event/intro/) APIs. If you’re familiar with [Testing Library](https://testing-library.com/), you should be at home in Storybook.\n\nBelow is an abridged API for user-event. For more, check out the [official user-event docs](https://testing-library.com/docs/user-event/utility/).\n\n| User events | Description |\n| --- | --- |\n| `clear` | Selects the text inside inputs, or textareas and deletes it  <br>`userEvent.clear(await within(canvasElement).getByRole('myinput'));` |\n| `click` | Clicks the element, calling a click() function  <br>`userEvent.click(await within(canvasElement).getByText('mycheckbox'));` |\n| `dblClick` | Clicks the element twice  <br>`userEvent.dblClick(await within(canvasElement).getByText('mycheckbox'));` |\n| `deselectOptions` | Removes the selection from a specific option of a select element  <br>`userEvent.deselectOptions(await within(canvasElement).getByRole('listbox'),'1');` |\n| `hover` | Hovers an element  <br>`userEvent.hover(await within(canvasElement).getByTestId('example-test'));` |\n| `keyboard` | Simulates the keyboard events  <br>`userEvent.keyboard(‘foo’);` |\n| `selectOptions` | Selects the specified option, or options of a select element  <br>`userEvent.selectOptions(await within(canvasElement).getByRole('listbox'),['1','2']);` |\n| `type` | Writes text inside inputs, or textareas  <br>`userEvent.type(await within(canvasElement).getByRole('my-input'),'Some text');` |\n| `unhover` | Unhovers out of element  <br>`userEvent.unhover(await within(canvasElement).getByLabelText(/Example/i));` |\n\n### [Assert tests with Vitest's APIs](#assert-tests-with-vitests-apis)\n\nStorybook’s `@storybook/test` also provides APIs from [Vitest](https://vitest.dev/), such as [`expect`](https://vitest.dev/api/expect.html#expect) and [`vi.fn`](https://vitest.dev/api/vi.html#vi-fn). These APIs improve your testing experience, helping you assert whether a function has been called, if an element exists in the DOM, and much more. If you are used to `expect` from testing packages such as [Jest](https://jestjs.io/) or [Vitest](https://vitest.dev/), you can write interaction tests in much the same way.\n\n### [Group interactions with the `step` function](#group-interactions-with-the-step-function)\n\nFor complex flows, it can be worthwhile to group sets of related interactions together using the `step` function. This allows you to provide a custom label that describes a set of interactions:\n\nThis will show your interactions nested in a collapsible group:\n\n![Interaction testing with labeled steps](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Fstorybook-addon-interactions-steps.png&w=3840&q=75)\n\n### [Mocked modules](#mocked-modules)\n\nIf your component depends on modules that are imported into the component file, you can mock those modules to control and assert on their behavior. This is detailed in the [mocking modules](https://storybook.js.org/docs/writing-stories/mocking-data-and-modules/mocking-modules) guide.\n\nYou can then import the mocked module (which has all of the helpful methods of a [Vitest mocked function](https://vitest.dev/api/mock.html)) into your story and use it to assert on the behavior of your component:\n\n### [Interactive debugger](#interactive-debugger)\n\nIf you check your interactions panel, you'll see the step-by-step flow. It also offers a handy set of UI controls to pause, resume, rewind, and step through each interaction.\n\n### [Permalinks for reproductions](#permalinks-for-reproductions)\n\nThe `play` function is executed after the story is rendered. If there’s an error, it’ll be shown in the interaction addon panel to help with debugging.\n\nSince Storybook is a webapp, anyone with the URL can reproduce the error with the same detailed information without any additional environment configuration or tooling required.\n\n![Interaction testing with a component](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Fstorybook-addon-interactions-error-optimized.png&w=3840&q=75)\n\nStreamline interaction testing further by automatically [publishing Storybook](https://storybook.js.org/docs/sharing/publish-storybook) in pull requests. That gives teams a universal reference point to test and debug stories.\n\n## [Execute tests with the test-runner](#execute-tests-with-the-test-runner)\n\nStorybook only runs the interaction test when you're viewing a story. Therefore, you'd have to go through each story to run all your checks. As your Storybook grows, it becomes unrealistic to review each change manually. Storybook [test-runner](https://github.com/storybookjs/test-runner) automates the process by running all tests for you. To execute the test-runner, open a new terminal window and run the following command:\n\n![Interaction test with test runner](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Fstorybook-interaction-test-runner-loginform-optimized.png&w=3840&q=75)\n\nIf you need, you can provide additional flags to the test-runner. Read the [documentation](https://storybook.js.org/docs/writing-tests/test-runner#cli-options) to learn more.\n\n## [Automate](#automate)\n\nOnce you're ready to push your code into a pull request, you'll want to automatically run all your checks using a Continuous Integration (CI) service before merging it. Read our [documentation](https://storybook.js.org/docs/writing-tests/test-runner#set-up-ci-to-run-tests) for a detailed guide on setting up a CI environment to run tests.\n\n## [Troubleshooting](#troubleshooting)\n\n#### [What’s the difference between interaction tests and visual tests?](#whats-the-difference-between-interaction-tests-and-visual-tests)\n\nInteraction tests can be expensive to maintain when applied wholesale to every component. We recommend combining them with other methods like visual testing for comprehensive coverage with less maintenance work.\n\n#### [What's the difference between interaction tests and using Jest + Testing Library alone?](#whats-the-difference-between-interaction-tests-and-using-jest--testing-library-alone)\n\nInteraction tests integrate Jest and Testing Library into Storybook. The biggest benefit is the ability to view the component you're testing in a real browser. That helps you debug visually, instead of getting a dump of the (fake) DOM in the command line or hitting the limitations of how JSDOM mocks browser functionality. It's also more convenient to keep stories and tests together in one file than having them spread across files.\n\n**Learn about other UI tests**\n\n*   [Test runner](https://storybook.js.org/docs/writing-tests/test-runner) to automate test execution\n*   [Visual tests](https://storybook.js.org/docs/writing-tests/visual-testing) for appearance\n*   [Accessibility tests](https://storybook.js.org/docs/writing-tests/accessibility-testing) for accessibility\n*   Interaction tests for user behavior simulation\n*   [Coverage tests](https://storybook.js.org/docs/writing-tests/test-coverage) for measuring code coverage\n*   [Snapshot tests](https://storybook.js.org/docs/writing-tests/snapshot-testing/snapshot-testing) for rendering errors and warnings\n*   [End-to-end tests](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests) for simulating real user scenarios\n*   [Unit tests](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests) for functionality",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-tests",
    "markdown": "# StorybookChromatic\n\nStorybook provides a clean-room environment for testing components in isolation. Stories make it easy to explore a component in all its variations, no matter how complex.\n\nThat means stories are a pragmatic starting point for your UI testing strategy. You already write stories as a natural part of UI development, testing those stories is a low-effort way to prevent UI bugs over time.\n\nThe simplest testing method is manual “spot checking”. You run Storybook locally, then eyeball every story to verify its appearance and behavior. [Publish](https://storybook.js.org/docs/sharing/publish-storybook) your Storybook online to share reproductions and get teammates involved.\n\nTo test a component in isolation, you often have to mock data, dependencies, or even network requests. Check out our guide on [mocking in Storybook](https://storybook.js.org/docs/writing-stories/build-pages-with-storybook#mocking-connected-components) for more info.\n\nStorybook also comes with tools, [a test runner](https://storybook.js.org/docs/writing-tests/test-runner), and handy integrations with the larger JavaScript ecosystem to expand your UI test coverage. These docs detail how you can use Storybook for UI testing.\n\n*   [**Test runner**](https://storybook.js.org/docs/writing-tests/test-runner) to automatically test your entire Storybook and catch broken stories.\n*   [**Visual tests**](https://storybook.js.org/docs/writing-tests/visual-testing) capture a screenshot of every story then compare it against baselines to detect appearance and integration issues\n*   [**Accessibility tests**](https://storybook.js.org/docs/writing-tests/accessibility-testing) catch usability issues related to visual, hearing, mobility, cognitive, speech, or neurological disabilities\n*   [**Interaction tests**](https://storybook.js.org/docs/writing-tests/interaction-testing) verify component functionality by simulating user behaviour, firing events, and ensuring that state is updated as expected\n*   [**Coverage tests**](https://storybook.js.org/docs/writing-tests/test-coverage) to measure how much of your code is covered by your tests\n*   [**Snapshot tests**](https://storybook.js.org/docs/writing-tests/snapshot-testing/snapshot-testing) detect changes in the rendered markup to surface rendering errors or warnings\n*   [**End-to-end tests**](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests) for simulating real user scenarios\n*   [**Unit tests**](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests) for functionality",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-docs/autodocs",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nStorybook Autodocs is a powerful tool that can help you quickly generate comprehensive documentation for your UI components. By leveraging Autodocs, you're transforming your stories into living documentation which can be further extended with [MDX](https://storybook.js.org/docs/writing-docs/mdx) and [Doc Blocks](https://storybook.js.org/docs/writing-docs/doc-blocks) to provide a clear and concise understanding of your components' functionality.\n\nStorybook infers the relevant metadata (e.g., [`args`](https://storybook.js.org/docs/writing-stories/args), [`argTypes`](https://storybook.js.org/docs/api/arg-types), [`parameters`](https://storybook.js.org/docs/writing-stories/parameters)) and automatically generates a documentation page with this information positioned at the root-level of your component tree in the sidebar.\n\n![Storybook autodocs](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-docs%2Fautodocs.png&w=3840&q=75)\n\n## [Set up automated documentation](#set-up-automated-documentation)\n\nAutodocs is configured through [tags](https://storybook.js.org/docs/writing-stories/tags). If a [CSF](https://storybook.js.org/docs/api/csf) file contains at least one story tagged with `autodocs`, then a documentation page will be generated for that component.\n\nTo enable automatic documentation for all stories in a project, add it to `tags` in your `.storybook/preview.js|ts` file:\n\nYou can also enable it at the component (or story) level:\n\nYou can disable auto docs for a particular component by [removing the tag](https://storybook.js.org/docs/writing-stories/tags#removing-tags):\n\nSimilarly, you can exclude a particular story from the auto docs page, by removing the tag:\n\n### [Configure](#configure)\n\nIn addition to enabling the feature with `tags`, you can extend your Storybook configuration file (i.e., `.storybook/main.js|ts|cjs`) and provide additional options to control how documentation gets created. Listed below are the available options and examples of how to use them.\n\n| Option | Description |\n| --- | --- |\n| `defaultName` | Renames the auto-generated documentation page  <br>Default: `docs: { defaultName: 'Documentation' }` |\n\n### [Write a custom template](#write-a-custom-template)\n\nWatch a video tutorial on the Storybook channel\n\nTo replace the default documentation template used by Storybook, you can extend your UI configuration file (i.e., `.storybook/preview.js|ts`) and introduce a `docs` [parameter](https://storybook.js.org/docs/writing-docs/doc-blocks#customizing-the-automatic-docs-page). This parameter accepts a `page` function that returns a React component, which you can use to generate the required template. For example:\n\nInternally, Storybook uses a similar implementation to generate the default template. See the Doc Blocks [API reference](https://storybook.js.org/docs/writing-docs/doc-blocks#available-blocks) to learn more about how Doc Blocks work.\n\nGoing over the code snippet in more detail. When Storybook starts up, it will override the default template with the custom one composed of the following:\n\n1.  A header with the component's metadata retrieved by the `Title`, `Subtitle`, and `Description` Doc Blocks.\n2.  The first story defined in the file via the `Primary` Doc Block with a handy set of UI controls to zoom in and out of the component.\n3.  An interactive table with all the relevant [`args`](https://storybook.js.org/docs/writing-stories/args) and [`argTypes`](https://storybook.js.org/docs/api/arg-types) defined in the story via the `Controls` Doc Block.\n4.  A overview of the remaining stories via the `Stories` Doc Block.\n\n#### [With MDX](#with-mdx)\n\nYou can also use MDX to generate the documentation template. This is useful in non-React projects where JSX-handling is not configured. Normally, when you create an MDX file in your project, it is treated as normal documentation. To indicate that an MDX file is a documentation template, supply the `isTemplate` property to its [`Meta`](https://storybook.js.org/docs/api/doc-blocks/doc-block-meta) Doc Block. For example:\n\nThen you can use it in your `.storybook/preview.js` or an individual story file by importing it:\n\nIf you only need to override the documentation page for a single component, we recommend creating an MDX file and referencing it directly via the `<Meta of={} />` Doc Block.\n\n### [Generate a table of contents](#generate-a-table-of-contents)\n\nStorybook's auto-generated documentation pages can be quite long and difficult to navigate. To help with this, you can enable the table of contents feature to provide a quick overview of the documentation page and allow users to jump to a specific section. To enable it, extend your Storybook UI configuration file (i.e., `.storybook/preview.js`) and provide a `docs` [parameter](https://storybook.js.org/docs/writing-stories/parameters#global-parameters) with a `toc` property.\n\n### [Configure the table of contents](#configure-the-table-of-contents)\n\nBy default, the table of contents on the documentation page will only show the `h3` headings that are automatically generated. However, if you want to customize the table of contents, you can add more parameters to the `toc` property. The following options and examples of how to use them are available.\n\n| Option | Description |\n| --- | --- |\n| `contentsSelector` | Defines the container's CSS selector for search for the headings  <br>`toc: { contentsSelector: '.sbdocs-content' }` |\n| `disable` | Hides the table of contents for the documentation pages  <br>`toc: { disable: true }` |\n| `headingSelector` | Defines the list of headings to feature in the table of contents  <br>`toc: { headingSelector: 'h1, h2, h3' }` |\n| `ignoreSelector` | Configures the table of contents to ignore specific headings or stories. By default, the table of contents will ignore all content placed within Story blocks  <br>`toc: { ignoreSelector: '.docs-story h2' }` |\n| `title` | Defines a title caption for the table of contents.  <br>Accepts one of: `string`, `null`, React element  <br>`toc: { title: 'Table of Contents' }` |\n| `unsafeTocbotOptions` | Provides additional [`TocBot`](https://tscanlin.github.io/tocbot/) configuration options  <br>`toc: { unsafeTocbotOptions: { orderedList: true } }` |\n\nThe `contentsSelector`, `headingSelector`, and `ignoreSelector` properties allow additional customization. For more information on using them, see the [`Tocbot` documentation](https://tscanlin.github.io/tocbot/).\n\n#### [Component-level configuration](#component-level-configuration)\n\nIf you want to customize the table of contents for a specific story, you can include a `toc` property in the story's default export and provide the required [configuration](#configure-the-table-of-contents). For example, if you need to hide the table of contents for a specific story, adjust your story as follows:\n\n### [Customize component documentation](#customize-component-documentation)\n\nCreating automated documentation with Storybook's Autodocs provides you with the starting point to build a sustainable documentation pattern. Nevertheless, it may not be suited for every case, and you may want to extend it and provide additional information. We recommend combining [MDX](https://storybook.js.org/docs/writing-docs/mdx) alongside Storybook's [Doc Blocks](https://storybook.js.org/docs/writing-docs/doc-blocks) for such cases to author your documentation.\n\n## [Advanced configuration](#advanced-configuration)\n\n### [Documenting multiple components](#documenting-multiple-components)\n\nSometimes it's helpful to document multiple components together. For example, a component library’s ButtonGroup and Button components might not make sense without one another.\n\nAutodocs allows you to document your \"main\" component, defined by the `component` property, as well as one or more `subcomponents` related to it.\n\n![Subcomponents in ArgTypes doc block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-stories%2Fdoc-block-arg-types-subcomponents-for-list.png&w=3840&q=75)\n\nThe main component and its subcomponents will show up in a tabbed version of the [`ArgTypes` doc block](https://storybook.js.org/docs/writing-docs/doc-blocks#argtypes). The tab titles will correspond to the keys of the `subcomponents` object.\n\nIf you want to organize your documentation differently for component groups, we recommend [using MDX](https://storybook.js.org/docs/writing-docs/mdx). It gives you complete control over how your components are displayed and supports any configuration.\n\n### [Customize the Docs Container](#customize-the-docs-container)\n\nThe Docs Container is the component that wraps up the documentation page. It's responsible for rendering the documentation page in Storybook's UI. You can customize it by creating your own component and updating your Storybook UI configuration file (i.e., `.storybook/preview.js`) to reference it.\n\n### [Override the default theme](#override-the-default-theme)\n\nBy default, Storybook provides two themes for the UI: `light` and `dark`. If you need to customize the theme used by the documentation to match the existing one, you can update your Storybook UI configuration file (i.e., `.storybook/preview.js`) and apply it.\n\n### [Working with custom MDX components](#working-with-custom-mdx-components)\n\nOut of the box, Storybook has a set of components that you can use to customize your documentation page. If you're working with a design system or component library and wish to add them to your documentation page, you can override the `MDXProvider` component inherited from `@mdx-js/react` with your own. However, there's a caveat to this, the component replacement will only have an impact if you're writing documentation using Markdown syntax (e.g., `#` for headings). Native HTML elements, such as `<h1>`, will not be replaced with your custom implementation.\n\nThis is not a Storybook issue but a detail of how MDX works. From their [migration guide](https://mdxjs.com/migrating/v2/#update-mdx-content):\n\n“We now ‘sandbox’ components, for lack of a better name. It means that when you pass a component for h1, it does get used for `# hi` but not for `<h1>hi</h1>`”\n\n## [Troubleshooting](#troubleshooting)\n\n### [The table of contents doesn't render as expected](#the-table-of-contents-doesnt-render-as-expected)\n\nWhen using Autodocs's table of contents, you may encounter situations where it appears differently than expected. To help you resolve these problems, we have compiled a list of possible scenarios that may cause issues.\n\n#### [With simple documentation pages](#with-simple-documentation-pages)\n\nIf you have a documentation page with only one matching heading and create a table of contents for it, the table of contents will not be hidden by default. A potential solution for this issue would be to add a second heading or turn it off entirely.\n\n#### [With small screens](#with-small-screens)\n\nIf the screen width is less than 1200px, the table of contents will be hidden by default. Currently, there's no built-in solution for this issue that doesn't impact the documentation page's style compatibility.\n\n#### [With MDX](#with-mdx-1)\n\nIf you're writing [unattached documentation](https://storybook.js.org/docs/writing-docs/mdx#writing-unattached-documentation) using MDX, you cannot customize the table of contents primarily due to the lack of support for defining parameters based on the current implementation. As a result, the table of contents will always revert to the default [configuration](#configure-the-table-of-contents) provided globally.\n\n### [The auto-generated documentation is not showing up in a monorepo setup](#the-auto-generated-documentation-is-not-showing-up-in-a-monorepo-setup)\n\nOut of the box, Storybook's Autodocs feature is built to generate documentation for your stories automatically. Nevertheless, if you're working with a monorepo setup (e.g., [`Yarn Workspaces`](https://yarnpkg.com/features/workspaces), [`pnpm Workspaces`](https://pnpm.io/workspaces)), you may run into issues where part of the documentation may not be generated for you. To help you troubleshoot those issues, we've prepared some recommendations that might help you.\n\nUpdate your import statements to reference the component directly instead of the package's root. For example:\n\nAdditionally, if you're developing using TypeScript, you may need to update Storybook's configuration file (i.e., `.storybook/main.js|ts`) to include the following:\n\nIf you're still encountering issues, we recommend reaching out to the community using the default communication channels (e.g., [GitHub discussions](https://github.com/storybookjs/storybook/discussions/new?category=help)).\n\n### [The controls are not updating the story within the auto-generated documentation](#the-controls-are-not-updating-the-story-within-the-auto-generated-documentation)\n\nIf you turned off inline rendering for your stories via the [`inline`](https://storybook.js.org/docs/api/doc-blocks/doc-block-story#inline) configuration option, you would run into a situation where the associated controls are not updating the story within the documentation page. This is a known limitation of the current implementation and will be addressed in a future release.\n\n**Learn more about Storybook documentation**\n\n*   Autodocs for creating documentation for your stories\n*   [MDX](https://storybook.js.org/docs/writing-docs/mdx) for customizing your documentation\n*   [Doc Blocks](https://storybook.js.org/docs/writing-docs/doc-blocks) for authoring your documentation\n*   [Publishing docs](https://storybook.js.org/docs/writing-docs/build-documentation) to automate the process of publishing your documentation",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-docs/doc-blocks",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nStorybook offers several doc blocks to help document your components and other aspects of your project.\n\nThere are two common ways to use doc blocks in Storybook, within MDX and as part of the docs page template.\n\n## [Within MDX](#within-mdx)\n\nThe blocks are most commonly used within Storybook's [MDX documentation](https://storybook.js.org/docs/writing-docs/mdx):\n\n![Screenshot of mdx content](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-docs%2Fmdx-example.png&w=3840&q=75)\n\n## [Customizing the automatic docs page](#customizing-the-automatic-docs-page)\n\nThe blocks are also used to define the page template for [automatics docs](https://storybook.js.org/docs/writing-docs/autodocs). For example, here's the default template:\n\n![Screenshot of automatic docs template](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-docs%2Fautodocs-default-template.png&w=3840&q=75)\n\nIf you [override the default page template](https://storybook.js.org/docs/writing-docs/autodocs#write-a-custom-template), you can similarly use Doc Blocks to build the perfect documentation page for your project.\n\nNote that some doc blocks render other blocks. For example, the `<Stories />` block expands to:\n\nAs a result, for example, customizing the [`Source`](https://storybook.js.org/docs/api/doc-blocks/doc-block-source) block via parameters (see next section) will also affect the Source blocks rendered as part of [`Canvas`](https://storybook.js.org/docs/api/doc-blocks/doc-block-canvas) blocks.\n\n## [Customizing doc blocks](#customizing-doc-blocks)\n\nIn both use cases (MDX and automatic docs), many of the doc blocks can be customized via [parameters](https://storybook.js.org/docs/writing-stories/parameters).\n\nFor example, you can filter out the `style` prop from all [`Controls`](https://storybook.js.org/docs/api/doc-blocks/doc-block-controls) tables through your Storybook:\n\nParameters can also be defined at the [component](https://storybook.js.org/docs/writing-stories/parameters#component-parameters) (or meta) level or the [story](https://storybook.js.org/docs/writing-stories/parameters#story-parameters) level, allowing you to customize Doc Blocks exactly as you need, where you need.\n\nThe blocks that accept customization via parameters are marked in the list of available blocks below.\n\nWhen using a doc block in MDX, it can also be customized with its props:\n\n## [Available blocks](#available-blocks)\n\nEach block has a dedicated API reference page detailing usage, available options, and technical details.\n\n### [](#argtypes)[ArgTypes](https://storybook.js.org/docs/api/doc-blocks/doc-block-argtypes)\n\nAccepts parameters in the namespace `parameters.docs.argTypes`.\n\nThe `ArgTypes` block can be used to show a static table of [arg types](https://storybook.js.org/docs/api/arg-types) for a given component as a way to document its interface.\n\n![Screenshot of ArgTypes block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-argtypes.png&w=3840&q=75)\n\n### [](#canvas)[Canvas](https://storybook.js.org/docs/api/doc-blocks/doc-block-canvas)\n\nAccepts parameters in the namespace `parameters.docs.canvas`.\n\nThe `Canvas` block is a wrapper around a [`Story`](https://storybook.js.org/docs/api/doc-blocks/doc-block-story), featuring a toolbar that allows you to interact with its content while automatically providing the required [`Source`](https://storybook.js.org/docs/api/doc-blocks/doc-block-source) snippets.\n\n![Screenshot of Canvas block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-canvas.png&w=3840&q=75)\n\n### [](#colorpalette)[ColorPalette](https://storybook.js.org/docs/api/doc-blocks/doc-block-colorpalette)\n\nThe `ColorPalette` block allows you to document all color-related items (e.g., swatches) used throughout your project.\n\n![Screenshot of ColorPalette and ColorItem blocks](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-colorpalette.png&w=3840&q=75)\n\n### [](#controls)[Controls](https://storybook.js.org/docs/api/doc-blocks/doc-block-controls)\n\nAccepts parameters in the namespace `parameters.docs.controls`.\n\nThe `Controls` block can be used to show a dynamic table of args for a given story, as a way to document its interface, and to allow you to change the args for a (separately) rendered story (via the [`Story`](https://storybook.js.org/docs/api/doc-blocks/doc-block-story) or [`Canvas`](https://storybook.js.org/docs/api/doc-blocks/doc-block-canvas) blocks).\n\n![Screenshot of Controls block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-controls.png&w=3840&q=75)\n\n### [](#description)[Description](https://storybook.js.org/docs/api/doc-blocks/doc-block-description)\n\nThe `Description` block displays the description for a component, story, or meta obtained from their respective JSDoc comments.\n\n![Screenshot of Description block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-title-subtitle-description.png&w=3840&q=75)\n\n### [](#icongallery)[IconGallery](https://storybook.js.org/docs/api/doc-blocks/doc-block-icongallery)\n\nThe `IconGallery` block lets you quickly document all icons associated with your project, displayed in a neat grid.\n\n![Screenshot of IconGallery and IconItem blocks](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-icongallery.png&w=3840&q=75)\n\n### [](#markdown)[Markdown](https://storybook.js.org/docs/api/doc-blocks/doc-block-markdown)\n\nThe `Markdown` block allows you to import and include plain markdown in your MDX files.\n\n![Screenshot of Markdown block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-markdown.png&w=3840&q=75)\n\n### [](#meta)[Meta](https://storybook.js.org/docs/api/doc-blocks/doc-block-meta)\n\nThe `Meta` block is used to [attach](#attached-vs-unattached) a custom MDX docs page alongside a component’s list of stories. It doesn’t render any content but serves two purposes in an MDX file:\n\n*   Attaches the MDX file to a component and its stories, or\n*   Controls the location of the unattached docs entry in the sidebar.\n\n### [](#primary)[Primary](https://storybook.js.org/docs/api/doc-blocks/doc-block-primary)\n\nThe `Primary` block displays the primary (first defined in the stories file) story in a [`Story`](https://storybook.js.org/docs/api/doc-blocks/doc-block-story) block. It is typically rendered immediately under the title in a docs entry.\n\n![Screenshot of Primary block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-primary.png&w=3840&q=75)\n\n### [](#source)[Source](https://storybook.js.org/docs/api/doc-blocks/doc-block-source)\n\nAccepts parameters in the namespace `parameters.docs.source`.\n\nThe `Source` block is used to render a snippet of source code directly.\n\n![Screenshot of Source block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-source.png&w=3840&q=75)\n\n### [](#stories)[Stories](https://storybook.js.org/docs/api/doc-blocks/doc-block-stories)\n\nThe `Stories` block renders the full collection of stories in a stories file.\n\n![Screenshot of Stories block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-stories.png&w=3840&q=75)\n\n### [](#story)[Story](https://storybook.js.org/docs/api/doc-blocks/doc-block-story)\n\nAccepts parameters in the namespace `parameters.docs.story`.\n\nStories (component tests) are Storybook's fundamental building blocks.\n\nIn Storybook Docs, you can render any of your stories from your CSF files in the context of an MDX file with all annotations (parameters, args, loaders, decorators, play function) applied using the `Story` block.\n\n![Screenshot of Story block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-story.png&w=3840&q=75)\n\n### [](#subtitle)[Subtitle](https://storybook.js.org/docs/api/doc-blocks/doc-block-subtitle)\n\nThe `Subtitle` block can serve as a secondary heading for your docs entry.\n\n![Screenshot of Subtitle block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-title-subtitle-description.png&w=3840&q=75)\n\n### [](#title)[Title](https://storybook.js.org/docs/api/doc-blocks/doc-block-title)\n\nThe `Title` block serves as the primary heading for your docs entry. It is typically used to provide the component or page name.\n\n![Screenshot of Title block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-title-subtitle-description.png&w=3840&q=75)\n\n### [](#typeset)[Typeset](https://storybook.js.org/docs/api/doc-blocks/doc-block-typeset)\n\nThe `Typeset` block helps document the fonts used throughout your project.\n\n![Screenshot of Typeset block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-typeset.png&w=3840&q=75)\n\n### [](#unstyled)[Unstyled](https://storybook.js.org/docs/api/doc-blocks/doc-block-unstyled)\n\nThe `Unstyled` block is a unique block that disables Storybook's default styling in MDX docs wherever it is added.\n\nBy default, most elements (like `h1`, `p`, etc.) in docs have a few default styles applied to ensure the docs look good. However, sometimes you might want some of your content not to have these styles applied. In those cases, wrap the content with the `Unstyled` block to remove the default styles.\n\n![Screenshot of Unstyled block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-unstyled.png&w=3840&q=75)\n\n## [Make your own Doc Blocks](#make-your-own-doc-blocks)\n\nStorybook also provides a [`useOf` hook](https://storybook.js.org/docs/api/doc-blocks/doc-block-useof) to make it easier to create your own blocks that function like the built-in blocks.\n\n## [Troubleshooting](#troubleshooting)\n\n### [Why can't I use the Doc Blocks inside my stories?](#why-cant-i-use-the-doc-blocks-inside-my-stories)\n\nStorybook's Doc Blocks are highly customizable and helpful building blocks to assist you with building your custom documentation. Although most of them enable you to customize them with parameters or globally to create custom [documentation templates](#customizing-the-automatic-docs-page), they are primarily designed for MDX files. For example, if you try to add the `ColorPalette` block to your stories as follows, you'll get an error message when the story loads in Storybook.\n\n**Learn more about Storybook documentation**\n\n*   [Autodocs](https://storybook.js.org/docs/writing-docs/autodocs) for creating documentation for your stories\n*   [MDX](https://storybook.js.org/docs/writing-docs/mdx) for customizing your documentation\n*   Doc Blocks for authoring your documentation\n*   [Publishing docs](https://storybook.js.org/docs/writing-docs/build-documentation) to automate the process of publishing your documentation",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/integration/frameworks",
    "markdown": "# StorybookChromatic\n\nFrameworks are packages that auto-configure Storybook to work with most common environment setups. They simplify the setup process and reduce boilerplate by mirroring your framework's conventions to create applications.\n\n## [How do frameworks work in Storybook?](#how-do-frameworks-work-in-storybook)\n\nYou start by [installing](https://storybook.js.org/docs/get-started/install) Storybook into an existing project. Then, it tries to detect the framework you're using and automatically configures Storybook to work with it. That means adding the necessary libraries as dependencies and adjusting the configuration. Finally, starting Storybook will automatically load the framework configuration before loading any existing addons to match your application environment.\n\n## [Which frameworks are supported?](#which-frameworks-are-supported)\n\nStorybook provides support for the leading industry builders and frameworks. However, that doesn't mean you can't use Storybook with other frameworks. Below is a list of currently supported frameworks divided by their builders.\n\n| Builder | Framework |\n| --- | --- |\n| Webpack | React, Angular, Vue 3, Web Components, NextJS, HTML, Ember, Preact, Svelte |\n| Vite | React, Vue 3, Web Components, HTML, Svelte, SvelteKit, Qwik, Solid |\n\n### [What about feature support?](#what-about-feature-support)\n\nIn addition to supporting the most popular frameworks in the industry, Storybook also tries to retain the same level of feature support for each framework, including the addon ecosystem. For more information, see [Framework support](https://storybook.js.org/docs/configure/integration/frameworks-feature-support) for a comprehensive list of which features and addons are currently maintained with the community's help.\n\n## [Configure](#configure)\n\nEvery modern web application has unique requirements and relies on various tools and frameworks. By default, with Storybook, you get an out-of-the-box configuration generated to work with most frameworks. However, you can extend your existing configuration file (i.e., `./storybook/main.js|ts|cjs`) and provide additional options. Below is an abridged table with available options and examples of configuring Storybook for your framework.\n\n| Option | Description | Framework |\n| --- | --- | --- |\n| `nextConfigPath` | Sets the default path for the NextJS configuration file  <br>`framework: { name: '@storybook/nextjs', options: { nextConfigPath: '../next.config.js'} }` | NextJS |\n| `builder` | Configures [Webpack 5](https://storybook.js.org/docs/builders/webpack) builder options for NextJS  <br>`core: { builder: { name:'webpack5', options: { lazyCompilation: true} }}` | NextJS |\n| `strictMode` | Enables React's [strict mode](https://reactjs.org/docs/strict-mode.html)  <br>`framework: { name: '@storybook/react-webpack5', options: { strictMode: false } }` | React |\n| `legacyRootApi` | Requires React 18. Toggles support for React's [legacy root API](https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html#updates-to-client-rendering-apis)  <br>`framework: { name: '@storybook/react-webpack5', options: { legacyRootApi: true } }` | React |\n| `enableIvy` | Enabled by default with Angular 9+. Replaces the default compiler with the [Ivy compiler](https://docs.angular.lat/guide/ivy)  <br>`framework: { name: '@storybook/angular', options: { enableIvy: true } }` | Angular |\n| `enableNgcc` | Enabled by default with Angular 9+. Adds support for ngcc for backwards compatibility  <br>`framework: { name: '@storybook/angular', options: { enableNgcc: false } }` | Angular |\n\n* * *\n\n## [Troubleshooting](#troubleshooting)\n\n### [NextJS 13 doesn't work with Storybook](#nextjs-13-doesnt-work-with-storybook)\n\nWith the release of Next.js [version 13](https://nextjs.org/blog/next-13), it introduced breaking changes (e.g., [TurboPack](https://turbo.build/pack), [Server Components](https://nextjs.org/docs/advanced-features/react-18/server-components)) that are not yet fully supported by Storybook. The Storybook team is working on adding support for these features. In the meantime, you can still use Storybook alongside your Next.js 13 project if you're not relying on them.\n\n### [My framework doesn't work with Storybook](#my-framework-doesnt-work-with-storybook)\n\nOut of the box, most frameworks work seamlessly with Storybook. However, some frameworks (e.g., [CRACO](https://craco.js.org/)) provide their own configuration that Storybook isn't prepared to handle without additional steps, either [via addon](https://storybook.js.org/docs/addons/writing-presets) or integration. To learn more, read our [addons guide](https://storybook.js.org/docs/addons).\n\n### [How do I build a Storybook framework?](#how-do-i-build-a-storybook-framework)\n\nStorybook is a framework-agnostic tool. It can be used with any framework. However, to make it easier for you to get started, we provide instructions that you can use to build your framework. To learn more, read our [frameworks guide](https://storybook.js.org/docs/contribute/framework).\n\n### [Legacy framework support](#legacy-framework-support)\n\nWe're deprecating support for several frameworks, including [Aurelia](https://github.com/aurelia/framework), [Marionette](https://github.com/marionettejs/backbone.marionette), [Mithril](https://github.com/MithrilJS/mithril.js), [Rax](https://github.com/alibaba/rax), and [Riot](https://github.com/riot/riot). Nevertheless, we're always looking for help maintaining these frameworks. If you're working with one of them and you want to continue supporting them, visit the dedicated [Storybook End-of-Life repository](https://github.com/storybook-eol). To learn more about the sunsetting process and view instructions on how to contribute, read our [documentation](https://storybook.js.org/docs/contribute).\n\n### [Learn about configuring Storybook](#learn-about-configuring-storybook)\n\n*   [Theming](https://storybook.js.org/docs/configure/user-interface/theming) to customize the look and feel of Storybook's UI\n*   [CSS](https://storybook.js.org/docs/configure/styling-and-css) to configure CSS support\n*   [Images & assets](https://storybook.js.org/docs/configure/integration/images-and-assets) for static asset handling\n*   [Environment variables](https://storybook.js.org/docs/configure/environment-variables) to configure environment variables",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/migration-guide/index",
    "markdown": "Storybook",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": null
  },
  {
    "url": "https://storybook.js.org/docs/configure/integration/frameworks-feature-support",
    "markdown": "# StorybookChromatic\n\nStorybook integrates with many popular frontend frameworks. We do our best to keep feature parity amongst frameworks, but it’s tricky for our modest team to support every framework.\n\nBelow is a comprehensive table of what’s supported in which framework integration. If you’d like a certain feature supported in your framework, we welcome pull requests.\n\n## [Core frameworks](#core-frameworks)\n\nCore frameworks have dedicated maintainers or contributors who are responsible for maintaining the integration. As such, you can use most Storybook features in these frameworks.\n\n|     | React | Vue 3 | Angular | Web Components |\n| --- | --- | --- | --- | --- |\n| **Essentials** |     |     |     |     |\n| [Actions](https://storybook.js.org/docs/essentials/actions) | ✅   | ✅   | ✅   | ✅   |\n| [Backgrounds](https://storybook.js.org/docs/essentials/backgrounds) | ✅   | ✅   | ✅   | ✅   |\n| [Docs](https://storybook.js.org/docs/writing-docs) | ✅   | ✅   | ✅   | ✅   |\n| [Viewport](https://storybook.js.org/docs/essentials/viewport) | ✅   | ✅   | ✅   | ✅   |\n| [Controls](https://storybook.js.org/docs/essentials/controls) | ✅   | ✅   | ✅   | ✅   |\n| [Measure](https://storybook.js.org/docs/essentials/measure-and-outline#measure-addon) | ✅   | ✅   | ✅   | ✅   |\n| [Outline](https://storybook.js.org/docs/essentials/measure-and-outline#outline-addon) | ✅   | ✅   | ✅   | ✅   |\n| **Addons** |     |     |     |     |\n| [A11y](https://storybook.js.org/docs/writing-tests/accessibility-testing) | ✅   | ✅   | ✅   | ✅   |\n| [Interactions](https://storybook.js.org/docs/writing-tests/interaction-testing) | ✅   | ✅   | ✅   | ✅   |\n| [Test runner](https://storybook.js.org/docs/writing-tests/test-runner) | ✅   | ✅   | ✅   | ✅   |\n| [Test coverage](https://storybook.js.org/docs/writing-tests/test-coverage) | ✅   | ✅   | ✅   | ✅   |\n| [CSS resources](https://github.com/storybookjs/addon-cssresources) | ✅   | ✅   | ✅   | ✅   |\n| [Design assets](https://github.com/storybookjs/addon-design-assets) | ✅   | ✅   | ✅   | ✅   |\n| [Events](https://github.com/storybookjs/addon-events) | ✅   | ✅   | ✅   | ✅   |\n| [Google analytics](https://github.com/storybookjs/addon-google-analytics) | ✅   | ✅   | ✅   | ✅   |\n| [GraphQL](https://github.com/storybookjs/addon-graphql) | ✅   |     | ✅   |     |\n| [Jest](https://github.com/storybookjs/storybook/tree/next/code/addons/jest) | ✅   | ✅   | ✅   | ✅   |\n| [Links](https://github.com/storybookjs/storybook/tree/next/code/addons/links) | ✅   | ✅   | ✅   | ✅   |\n| [Queryparams](https://github.com/storybookjs/addon-queryparams) | ✅   | ✅   | ✅   | ✅   |\n| [Storysource](https://github.com/storybookjs/storybook/tree/next/code/addons/storysource) | ✅   | ✅   | ✅   | ✅   |\n| **Docs** |     |     |     |     |\n| [CSF Stories](https://storybook.js.org/docs/api/csf) | ✅   | ✅   | ✅   | ✅   |\n| [Autodocs](https://storybook.js.org/docs/writing-docs/autodocs) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - ArgTypes](https://storybook.js.org/docs/api/doc-blocks/doc-block-argtypes) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Canvas](https://storybook.js.org/docs/api/doc-blocks/doc-block-canvas) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - ColorPalette](https://storybook.js.org/docs/api/doc-blocks/doc-block-colorpalette) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Controls](https://storybook.js.org/docs/api/doc-blocks/doc-block-controls) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Description](https://storybook.js.org/docs/api/doc-blocks/doc-block-description) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - IconGallery](https://storybook.js.org/docs/api/doc-blocks/doc-block-icongallery) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Markdown](https://storybook.js.org/docs/api/doc-blocks/doc-block-markdown) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Meta](https://storybook.js.org/docs/api/doc-blocks/doc-block-meta) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Primary](https://storybook.js.org/docs/api/doc-blocks/doc-block-primary) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Source](https://storybook.js.org/docs/api/doc-blocks/doc-block-source) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Story](https://storybook.js.org/docs/api/doc-blocks/doc-block-story) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Stories](https://storybook.js.org/docs/api/doc-blocks/doc-block-stories) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Subtitle](https://storybook.js.org/docs/api/doc-blocks/doc-block-subtitle) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Title](https://storybook.js.org/docs/api/doc-blocks/doc-block-title) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Typeset](https://storybook.js.org/docs/api/doc-blocks/doc-block-typeset) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Unstyled](https://storybook.js.org/docs/api/doc-blocks/doc-block-unstyled) | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - UseOf](https://storybook.js.org/docs/api/doc-blocks/doc-block-useof) | ✅   | ✅   | ✅   | ✅   |\n| Inline stories | ✅   | ✅   | ✅   | ✅   |\n\nCommunity frameworks have fewer contributors which means they may not be as up to date as core frameworks. If you use one of these frameworks for your job, please consider contributing to its integration with Storybook.\n\n|     | Ember | HTML | Svelte | Preact | Qwik | SolidJS |\n| --- | --- | --- | --- | --- | --- | --- |\n| **Essentials** |     |     |     |     |     |     |\n| [Actions](https://storybook.js.org/docs/essentials/actions) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Backgrounds](https://storybook.js.org/docs/essentials/backgrounds) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Docs](https://storybook.js.org/docs/writing-docs) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Viewport](https://storybook.js.org/docs/essentials/viewport) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Controls](https://storybook.js.org/docs/essentials/controls) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Measure](https://storybook.js.org/docs/essentials/measure-and-outline#measure-addon) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Outline](https://storybook.js.org/docs/essentials/measure-and-outline#outline-addon) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| **Addons** |     |     |     |     |     |     |\n| [A11y](https://storybook.js.org/docs/writing-tests/accessibility-testing) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Interactions](https://storybook.js.org/docs/writing-tests/interaction-testing) |     | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Test runner](https://storybook.js.org/docs/writing-tests/test-runner) |     | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Test coverage](https://storybook.js.org/docs/writing-tests/test-coverage) |     | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [CSS resources](https://github.com/storybookjs/addon-cssresources) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Design assets](https://github.com/storybookjs/addon-design-assets) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Events](https://github.com/storybookjs/addon-events) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Google analytics](https://github.com/storybookjs/addon-google-analytics) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [GraphQL](https://github.com/storybookjs/addon-graphql) |     |     |     |     |     |     |\n| [Jest](https://github.com/storybookjs/storybook/tree/next/code/addons/jest) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Links](https://github.com/storybookjs/storybook/tree/next/code/addons/links) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Queryparams](https://github.com/storybookjs/addon-queryparams) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Storysource](https://github.com/storybookjs/storybook/tree/next/code/addons/storysource) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| **Docs** |     |     |     |     |     |     |\n| [CSF Stories](https://storybook.js.org/docs/api/csf) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Autodocs](https://storybook.js.org/docs/writing-docs/autodocs) |     | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - ArgTypes](https://storybook.js.org/docs/api/doc-blocks/doc-block-argtypes) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Canvas](https://storybook.js.org/docs/api/doc-blocks/doc-block-canvas) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - ColorPalette](https://storybook.js.org/docs/api/doc-blocks/doc-block-colorpalette) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Controls](https://storybook.js.org/docs/api/doc-blocks/doc-block-controls) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Description](https://storybook.js.org/docs/api/doc-blocks/doc-block-description) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - IconGallery](https://storybook.js.org/docs/api/doc-blocks/doc-block-icongallery) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Markdown](https://storybook.js.org/docs/api/doc-blocks/doc-block-markdown) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Meta](https://storybook.js.org/docs/api/doc-blocks/doc-block-meta) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Primary](https://storybook.js.org/docs/api/doc-blocks/doc-block-primary) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Source](https://storybook.js.org/docs/api/doc-blocks/doc-block-source) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Story](https://storybook.js.org/docs/api/doc-blocks/doc-block-story) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Stories](https://storybook.js.org/docs/api/doc-blocks/doc-block-stories) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Subtitle](https://storybook.js.org/docs/api/doc-blocks/doc-block-subtitle) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Title](https://storybook.js.org/docs/api/doc-blocks/doc-block-title) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Typeset](https://storybook.js.org/docs/api/doc-blocks/doc-block-typeset) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - Unstyled](https://storybook.js.org/docs/api/doc-blocks/doc-block-unstyled) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| [Doc Blocks - UseOf](https://storybook.js.org/docs/api/doc-blocks/doc-block-useof) | ✅   | ✅   | ✅   | ✅   | ✅   | ✅   |\n| Inline stories |     | ✅   | ✅   |     |     |     |\n\n## [Deprecated](#deprecated)\n\nTo align the Storybook ecosystem with the current state of frontend development, the following features and addons are now deprecated, no longer maintained, and will be removed in future versions of Storybook\n\n| Feature | Status |\n| --- | --- |\n| [Knobs](https://github.com/storybookjs/addon-knobs) | The Knobs addon was officially deprecated with the release of Storybook 6.3 and is no longer actively maintained. We recommend using the [controls](https://storybook.js.org/docs/essentials/controls) instead. |\n| [Storyshots](https://storybook.js.org/docs/writing-tests/snapshot-testing/storyshots-migration-guide) | The Storyshots addon was officially deprecated with the release of Storybook 7.6, is no longer actively maintained and was removed in Storybook 8. See the [migration guide](https://storybook.js.org/docs/writing-tests/snapshot-testing/storyshots-migration-guide) for the available alternatives. |\n| StoriesOf | The `storiesOf` API was officially removed with the release of Storybook 8 and is no longer maintained. We recommend using the [CSF API](https://storybook.js.org/docs/api/csf) instead for writing stories.  <br>See the [migration guide](https://storybook.js.org/docs/migration-guide/index#storiesof-to-csf) for more information. |",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests",
    "markdown": "# StorybookChromatic\n\nTeams test a variety of UI characteristics using different tools. Each tool requires you to replicate the same component state over and over. That’s a maintenance headache. Ideally, you’d set up your tests similarly and reuse that across tools.\n\nStorybook enables you to isolate a component and capture its use cases in a `*.stories.js|ts` file. Stories are standard JavaScript modules that are cross-compatible with the whole JavaScript ecosystem.\n\nStories are a practical starting point for UI testing. Import stories into tools like [Jest](https://jestjs.io/), [Testing Library](https://testing-library.com/), [Vitest](https://vitest.dev/) and [Playwright](https://playwright.dev/), to save time and maintenance work.\n\n## [Write a test with Testing Library](#write-a-test-with-testing-library)\n\n[Testing Library](https://testing-library.com/) is a suite of helper libraries for browser-based interaction tests. With [Component Story Format](https://storybook.js.org/docs/api/csf), your stories are reusable with Testing Library. Each named export (story) is renderable within your testing setup. For example, if you were working on a login component and wanted to test the invalid credentials scenario, here's how you could write your test:\n\nStorybook provides a [`composeStories`](https://storybook.js.org/docs/api/portable-stories/portable-stories-vitest#composestories) utility that helps convert stories from a test file into renderable elements that can be reused in your Node tests with JSDOM. It also allows you to apply other Storybook features that you have enabled your project (e.g., [decorators](https://storybook.js.org/docs/writing-stories/decorators), [args](https://storybook.js.org/docs/writing-stories/args)) into your tests, enabling you to reuse your stories in your testing environment of choice (e.g., [Jest](https://jestjs.io/), [Vitest](https://vitest.dev/)), ensuring your tests are always in sync with your stories without having to rewrite them. This is what we refer to as portable stories in Storybook.\n\nOnce the test runs, it loads the story and renders it. [Testing Library](https://testing-library.com/) then emulates the user's behavior and checks if the component state has been updated.\n\n### [Override story properties](#override-story-properties)\n\nBy default, the `setProjectAnnotations` function injects into your existing tests any global configuration you've defined in your Storybook instance (i.e., parameters, decorators in the `preview.js|ts` file). Nevertheless, this may cause unforeseen side effects for tests that are not intended to use these global configurations. For example, you may want to always test a story in a particular locale (via `globalTypes`) or configure a story to apply specific `decorators` or `parameters`.\n\nTo avoid this, you can override the global configurations by extending either the `composeStory` or `composeStories` functions to provide test-specific configurations. For example:\n\n## [Run tests on a single story](#run-tests-on-a-single-story)\n\nYou can use the [`composeStory`](https://storybook.js.org/docs/api/portable-stories/portable-stories-vitest#composestory) function to allow your tests to run on a single story. However, if you're relying on this method, we recommend that you supply the story metadata (i.e., the [default export](https://storybook.js.org/docs/writing-stories/index#default-export)) to the `composeStory` function. This ensures that your tests can accurately determine the correct information about the story. For example:\n\n## [Combine stories into a single test](#combine-stories-into-a-single-test)\n\nIf you intend to test multiple stories in a single test, use the [`composeStories`](https://storybook.js.org/docs/api/portable-stories/portable-stories-vitest#composestories) function. It will process every component story you've specified, including any [`args`](https://storybook.js.org/docs/writing-stories/args) or [`decorators`](https://storybook.js.org/docs/writing-stories/decorators) you've defined. For example:\n\n## [Troubleshooting](#troubleshooting)\n\n### [Run tests in other frameworks](#run-tests-in-other-frameworks)\n\nStorybook provides community-led addons for other frameworks like [Vue 2](https://storybook.js.org/addons/@storybook/testing-vue) and [Angular](https://storybook.js.org/addons/@storybook/testing-angular). However, these addons still lack support for the latest stable Storybook release. If you're interested in helping out, we recommend reaching out to the maintainers using the default communication channels (GitHub and [Discord server](https://discord.com/channels/486522875931656193/839297503446695956)).\n\n### [The args are not being passed to the test](#the-args-are-not-being-passed-to-the-test)\n\nThe components returned by `composeStories` or `composeStory` not only can be rendered as React components but also come with the combined properties from the story, meta, and global configuration. This means that if you want to access args or parameters, for instance, you can do so:\n\n**Learn about other UI tests**\n\n*   [Test runner](https://storybook.js.org/docs/writing-tests/test-runner) to automate test execution\n*   [Visual tests](https://storybook.js.org/docs/writing-tests/visual-testing) for appearance\n*   [Accessibility tests](https://storybook.js.org/docs/writing-tests/accessibility-testing) for accessibility\n*   [Interaction tests](https://storybook.js.org/docs/writing-tests/interaction-testing) for user behavior simulation\n*   [Coverage tests](https://storybook.js.org/docs/writing-tests/test-coverage) for measuring code coverage\n*   [Snapshot tests](https://storybook.js.org/docs/writing-tests/snapshot-testing/snapshot-testing) for rendering errors and warnings\n*   [End-to-end tests](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests) for simulating real user scenarios\n*   Unit tests for functionality",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-tests/snapshot-testing/snapshot-testing",
    "markdown": "# StorybookChromatic\n\nSnapshot tests compare the rendered markup of every story against known baselines. It’s a way to identify markup changes that trigger rendering errors and warnings.\n\nStorybook is a helpful tool for snapshot testing because every story is essentially a test specification. Any time you write or update a story, you get a snapshot test for free.\n\n![Example Snapshot test](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Fsnapshot-test.png&w=1920&q=75)\n\nIf you're [upgrading](https://storybook.js.org/docs/configure/upgrading) to Storybook 8.0 and were using the Storyshots addon for snapshot testing, it was officially deprecated and removed with this release. See the [migration guide](https://storybook.js.org/docs/writing-tests/snapshot-testing/storyshots-migration-guide) for more information.\n\n## [Automate snapshot tests with the test-runner](#automate-snapshot-tests-with-the-test-runner)\n\nStorybook test-runner turns all of your stories into executable tests. Powered by [Jest](https://jestjs.io/) and [Playwright](https://playwright.dev/). It's a standalone, framework-agnostic utility that runs parallel to your Storybook. It enables you to run multiple testing patterns in a multi-browser environment, including interaction testing with the [play function](https://storybook.js.org/docs/writing-tests/interaction-testing), DOM snapshot, and [accessibility testing](https://storybook.js.org/docs/writing-tests/accessibility-testing).\n\n### [Setup](#setup)\n\nTo enable snapshot testing with the test-runner, you'll need to take additional steps to set it up properly. We recommend you go through the [test-runner documentation](https://storybook.js.org/docs/writing-tests/test-runner) before proceeding with the rest of the required configuration to learn more about the available options and APIs.\n\nAdd a new [configuration file](https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api) inside your Storybook directory with the following inside:\n\nThe `postVisit` hook allows you to extend the test runner's default configuration. Read more about them [here](https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api).\n\nWhen you execute the test-runner (for example, with `yarn test-storybook`), it will run through all of your stories and run the snapshot tests, generating a snapshot file for each story in your project located in the `__snapshots__` directory.\n\n### [Configure](#configure)\n\nOut of the box, the test-runner provides an inbuilt snapshot testing configuration covering most use cases. You can also fine-tune the configuration to fit your needs via `test-storybook --eject` or by creating a `test-runner-jest.config.js` file at the root of your project.\n\n#### [Override the default snapshot directory](#override-the-default-snapshot-directory)\n\nThe test-runner uses a specific naming convention and path for the generated snapshot files by default. If you need to customize the snapshot directory, you can define a custom snapshot resolver to specify the directory where the snapshots are stored.\n\nCreate a `snapshot-resolver.js` file to implement a custom snapshot resolver:\n\nUpdate the `test-runner-jest.config.js` file and enable the `snapshotResolver` option to use the custom snapshot resolver:\n\nWhen the test-runner is executed, it will cycle through all of your stories and run the snapshot tests, generating a snapshot file for each story in your project located in the custom directory you specified.\n\n#### [Customize snapshot serialization](#customize-snapshot-serialization)\n\nBy default, the test-runner uses [`jest-serializer-html`](https://github.com/algolia/jest-serializer-html) to serialize HTML snapshots. This may cause issues if you use specific CSS-in-JS libraries like [Emotion](https://emotion.sh/docs/introduction), Angular's `ng` attributes, or similar libraries that generate hash-based identifiers for CSS classes. If you need to customize the serialization of your snapshots, you can define a custom snapshot serializer to specify how the snapshots are serialized.\n\nCreate a `snapshot-serializer.js` file to implement a custom snapshot serializer:\n\nUpdate the `test-runner-jest.config.js` file and enable the `snapshotSerializers` option to use the custom snapshot resolver:\n\nWhen the test-runner executes your tests, it will introspect the resulting HTML, replacing the dynamically generated attributes with the static ones provided by the regular expression in the custom serializer file before snapshotting the component. This ensures that the snapshots are consistent across different test runs.\n\n## [Snapshot tests with Portable Stories](#snapshot-tests-with-portable-stories)\n\nStorybook provides a [`composeStories`](https://storybook.js.org/docs/api/portable-stories/portable-stories-vitest#composestories) utility that helps convert stories from a test file into renderable elements that can be reused in your Node tests with JSDOM. It also allows you to apply other Storybook features that you have enabled your project (e.g., [decorators](https://storybook.js.org/docs/writing-stories/decorators), [args](https://storybook.js.org/docs/writing-stories/args)) into your tests, enabling you to reuse your stories in your testing environment of choice (e.g., [Jest](https://jestjs.io/), [Vitest](https://vitest.dev/)), ensuring your tests are always in sync with your stories without having to rewrite them. This is what we refer to as portable stories in Storybook.\n\n### [Run tests on a single story](#run-tests-on-a-single-story)\n\nIf you need to run tests on a single story, you can use the `composeStories` function from the appropriate framework to process it and apply any configuration you've defined in your stories (e.g., [decorators](https://storybook.js.org/docs/writing-stories/decorators), [args](https://storybook.js.org/docs/writing-stories/args)) and combine it with your testing environment to generate a snapshot file. For example, if you're working on a component and you want to test its default state, ensuring the expected DOM structure doesn't change, here's how you could write your test:\n\n### [Execute tests on multiple stories](#execute-tests-on-multiple-stories)\n\nYou can also use the `composeStories` function to test multiple stories. This is useful when you want to extend your test coverage to generate snapshots for the different states of the components in your project. To do so, you can write your test as follows:\n\nWhen your tests are executed in your testing environment, they will generate a single snapshot file with all the stories in your project (i.e.,`storybook.test.ts|js.snap`). However, if you need, you can extend your test file to generate individual snapshot files for each story in your project with Vitest's [`toMatchFileSnapshot`](https://vitest.dev/guide/snapshot.html#file-snapshots) API or Jest's [`jest-specific-snapshot`](https://github.com/igor-dv/jest-specific-snapshot) package. For example:\n\n#### [What’s the difference between snapshot tests and visual tests?](#whats-the-difference-between-snapshot-tests-and-visual-tests)\n\nVisual tests capture images of stories and compare them against image baselines. Snapshot tests take DOM snapshots and compare them against DOM baselines. Visual tests are better suited for verifying appearance. Snapshot tests are useful for smoke testing and ensuring the DOM doesn’t change.\n\n#### [Learn about other UI tests](#learn-about-other-ui-tests)\n\n*   [Test runner](https://storybook.js.org/docs/writing-tests/test-runner) to automate test execution\n*   [Visual tests](https://storybook.js.org/docs/writing-tests/visual-testing) for appearance\n*   [Accessibility tests](https://storybook.js.org/docs/writing-tests/accessibility-testing) for accessibility\n*   [Interaction tests](https://storybook.js.org/docs/writing-tests/interaction-testing) for user behavior simulation\n*   [Coverage tests](https://storybook.js.org/docs/writing-tests/test-coverage) for measuring code coverage\n*   Snapshot tests for rendering errors and warnings\n*   [End-to-end tests](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests) for simulating real user scenarios\n*   [Unit tests](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests) for functionality",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-typeset",
    "markdown": "# StorybookChromatic\n\n```\n{/* Typography.mdx */}\n \nimport { Meta, Typeset } from '@storybook/blocks';\n \n<Meta title=\"Typography\" />\n \nexport const typography = {\n  type: {\n    primary: '\"Nunito Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n  },\n  weight: {\n    regular: '400',\n    bold: '700',\n    extrabold: '800',\n    black: '900',\n  },\n  size: {\n    s1: 12,\n    s2: 14,\n    s3: 16,\n    m1: 20,\n    m2: 24,\n    m3: 28,\n    l1: 32,\n    l2: 40,\n    l3: 48,\n  },\n};\n \nexport const SampleText = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';\n \n# Typography\n \n**Font:** Nunito Sans\n \n**Weights:** 400(regular), 700(bold), 800(extrabold), 900(black)\n \n<Typeset\n  fontSizes={[\n    Number(typography.size.s1),\n    Number(typography.size.s2),\n    Number(typography.size.s3),\n    Number(typography.size.m1),\n    Number(typography.size.m2),\n    Number(typography.size.m3),\n    Number(typography.size.l1),\n    Number(typography.size.l2),\n    Number(typography.size.l3),\n  ]}\n  fontWeight={typography.weight.black}\n  sampleText={SampleText}\n  fontFamily={typography.type.primary}\n/>\n```",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/integration/typescript",
    "markdown": "# StorybookChromatic\n\nStorybook provides an integrated [TypeScript](https://www.typescriptlang.org/) experience, including zero-configuration setup and built-in types for APIs, addons, and stories.\n\n## [Configure Storybook with TypeScript](#configure-storybook-with-typescript)\n\nStorybook's configuration file (i.e., `main.ts`) is defined as an ESM module written in TypeScript, providing you with the baseline configuration to support your existing framework while enabling you stricter type-checking and autocompletion in your editor. Below is an abridged configuration file.\n\nSee the [main configuration API reference](https://storybook.js.org/docs/api/main-config/main-config) for more details and additional properties.\n\n### [Extending the default configuration](#extending-the-default-configuration)\n\nOut of the box, Storybook is built to work with a wide range of third-party libraries, enabling you to safely access and document metadata (e.g., props) for your components without any additional configuration. It relies on [`react-docgen`](https://github.com/reactjs/react-docgen), a fast and highly customizable parser to process TypeScript files to infer the component's metadata and generate types automatically for improved performance and type safety. If you need to customize the default configuration for a specific use case scenario, you can adjust your Storybook configuration file and provide the required options. Listed below are the available options and examples of how to use them.\n\n| Option | Description |\n| --- | --- |\n| `check` | Available for Webpack-based projects.  <br>Enables type checking within Storybook  <br>`typescript: { check: true },` |\n| `checkOptions` | Requires the `check` option to be enabled.  <br>Configures the [`fork-ts-checker-webpack-plugin`](https://github.com/TypeStrong/fork-ts-checker-webpack-plugin) plugin  <br>`typescript: { checkOptions: {},},` |\n| `reactDocgen` | Configures the TypeScript parser used by Storybook.  <br>Available options: `react-docgen` (default), `react-docgen-typescript`, `false`  <br>`typescript: { reactDocgen: 'react-docgen'},` |\n| `reactDocgenTypescriptOptions` | Requires the `reactDocgen`option to be `react-docgen-typescript`.  <br>Configures the `react-docgen-typescript-plugin` plugin per builder  <br>`typescript: { reactDocgen: 'react-docgen-typescript', reactDocgenTypescriptOptions: {},},` |\n| `skipCompiler` | Disables parsing Typescript files through the compiler  <br>`typescript: { skipCompiler:false,},` |\n\n## [Write stories with TypeScript](#write-stories-with-typescript)\n\nStorybook provides zero-config TypeScript support, allowing you to write stories using this language without additional configuration. You can use this format for improved type safety and code completion. For example, if you're testing a `Button` component, you could do the following in your story file:\n\nThe example above uses the power of TypeScript in combination with the exported generic types (`Meta` and `StoryObj`) to tell Storybook how to infer the component's metadata and the type of the component's inputs (e.g., props). This can greatly improve the developer experience by letting your IDE show you what properties are injected by Storybook.\n\n### [TypeScript 4.9 support](#typescript-49-support)\n\nAssuming that you're working on a project that uses TypeScript 4.9+, you can update your component stories to use the new [`satisfies`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-9.html) operator to ensure stricter type checking for your component stories. For example:\n\nNow, when you define a story or update an existing one, you'll automatically get notified that you're missing a required [`arg`](https://storybook.js.org/docs/writing-stories/args). However, you're not limited to using the `satisfies` operator at the component level. If you need, you can also use it at the story level. For example:\n\n## [Troubleshooting](#troubleshooting)\n\n### [The `satisfies` operator is not working as expected](#the-satisfies-operator-is-not-working-as-expected)\n\nOut of the box, Storybook supports the `satisfies` operator for almost every framework already using TypeScript version 4.9 or higher. However, due to the constraints of the Angular and Web Components framework, you might run into issues when applying this operator for additional type safety. This is primarily due to how both frameworks are currently implemented, making it almost impossible for Storybook to determine if the component property is required. If you encounter this issue, please open up a support request on [GitHub Discussions](https://github.com/storybookjs/storybook/discussions/new?category=help).\n\n### [Storybook doesn't create the required types for external packages](#storybook-doesnt-create-the-required-types-for-external-packages)\n\nIf your project relies on a third-party library and the expected types are not being generated, preventing you from accurately documenting your components, you can adjust the `reactDocgen` configuration option in your Storybook configuration file to use `react-docgen-typescript` instead and include the required options. For example:\n\n### [The types are not being generated for my component](#the-types-are-not-being-generated-for-my-component)\n\nIf you're working with a React project, type inference is automatically enabled for your components using the `react-docgen` library for improved build times and type safety. However, you may run into a situation where some options may not work as expected (e.g., [`Enums`](https://www.typescriptlang.org/docs/handbook/enums.html), React's [`forwardRef`](https://react.dev/reference/react/forwardRef)). This is primarily due to how the `react-docgen` package is implemented, making it difficult for Storybook to infer the component's metadata and generate types automatically. To solve this, you can update the `typescript` configuration option in your Storybook configuration file to use `react-docgen-typescript` instead. For example:\n\nIf you're still encountering issues, we recommend reaching out to the community using the default communication channels (e.g., [GitHub discussions](https://github.com/storybookjs/storybook/discussions/new?category=help)).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/integration/compilers",
    "markdown": "# StorybookChromatic\n\nJavascript compilers are essential in optimizing and transforming code, enhancing performance, and ensuring compatibility across different environments. Storybook provides support for the leading compilers, ensuring lightning-fast build time and execution with [SWC](https://swc.rs/) or leveraging [Babel](https://babeljs.io/) with its extensive ecosystem of plugins and presets to allow you to use the latest features of the ecosystem with minimal configuration required for your Webpack-based project.\n\n## [SWC](#swc)\n\nSWC is a fast, highly extensible tool for compiling and bundling modern JavaScript applications. Powered by [Rust](https://www.rust-lang.org/), it improves performance and reduces build times. Storybook includes a built-in integration with SWC, allowing zero-configuration setup and built-in types for APIs. If you've initialized Storybook in a Webpack-based project with any of the supported [frameworks](https://storybook.js.org/docs/configure/integration/frameworks), except Angular, Create React App, Ember.js and Next.js, it will automatically use SWC as its default, providing you with faster loading time.\n\nSupport for the SWC builder is currently experimental for Next.js projects, and it's not enabled by default. It requires you to opt in to use it. For more information on configuring SWC with the supported frameworks, see the [SWC API](https://storybook.js.org/docs/api/main-config/main-config-swc) documentation.\n\n## [Babel](#babel)\n\nBabel is a widely adopted JavaScript compiler providing a modular architecture and extensive plugin system to support a wide range of use cases, enabling access to the cutting-edge features of the tooling ecosystem. Storybook provides a seamless integration with Babel, allowing you to share a standard setup between your project and Storybook without any additional configuration.\n\nIf you're not using Storybook 7, please reference the [previous documentation](https://storybook.js.org/docs/6/configure/babel) for guidance on configuring your Babel setup.\n\n### [Configure](#configure)\n\nBy default, Babel provides an opinionated [configuration](https://babeljs.io/docs/config-files) that works for most projects, relying on two distinct methods for configuring projects with the tool:\n\n*   **Project-wide configuration**: Babel will look for a `babel.config.js` or equivalent file in the root of your project and use it to configure your project's Babel setup.\n*   **File-relative configuration**: Babel will look for a `.babelrc.json` or equivalent file, introspecting the project structure until it finds a configuration file. This will allow you to configure Babel individually for multiple aspects of your project.\n\nStorybook relies on an agnostic approach to configuring Babel, enabling you to provide the necessary configuration for your project, and it will use it. Based on the supported frameworks, builders, and addons, it may include minor adjustments to ensure compatibility with Storybook's features.\n\nFor custom project configurations such as monorepos, where you have multiple Storybook configurations, creating a `.babelrc.json` file in your project's current working directory may not be sufficient. In those cases, you can create a `babel.config.js` file to override Babel's configuration, and Storybook will automatically detect and use it. See the Babel [documentation](https://babeljs.io/docs/config-files) for more information.\n\n### [Working with Create React App](#working-with-create-react-app)\n\nIf you're working with a project that was initialized with [Create React App](https://create-react-app.dev/), Storybook will automatically detect and use the Babel configuration provided by the tool enabled via the `@storybook/preset-create-react-app` preset, allowing to use Storybook without any additional configuration.\n\n## [Troubleshooting](#troubleshooting)\n\n### [The SWC compiler doesn't work with React](#the-swc-compiler-doesnt-work-with-react)\n\nIf you have enabled the SWC builder option in a React-based project and you are not explicitly importing React in your `jsx|tsx` files, it can cause Storybook to fail to load. SWC does not automatically import the `jsx-runtime` module when using the SWC builder. To resolve this issue, you need to adjust your Storybook configuration file (i.e., `.storybook/main.js|ts`) and configure the `swc` option as follows:\n\n### [Babel configuration not working](#babel-configuration-not-working)\n\nOut of the box, Storybook can detect and apply any Babel configuration you provided in your project. However, if you're running into a situation where your configuration is not being used, you configure the [`BABEL_SHOW_CONFIG_FOR`](https://babeljs.io/docs/configuration#print-effective-configs) environment variable and set it to the file you want to inspect. For example:\n\nWhen the command runs, it will output the Babel configuration applied to the file you specified despite showing a transpilation error in the console and preventing Storybook from loading. This is a known issue with Babel unrelated to Storybook, which you address by turning off the environment variable after inspecting the configuration and restarting Storybook.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-webpack-final",
    "markdown": "# StorybookChromatic\n\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n \nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  webpackFinal: async (config, { configType }) => {\n    if (configType === 'DEVELOPMENT') {\n      // Modify config for development\n    }\n    if (configType === 'PRODUCTION') {\n      // Modify config for production\n    }\n    return config;\n  },\n};\n \nexport default config;\n```",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-end-to-end-tests",
    "markdown": "# StorybookChromatic\n\nStorybook seamlessly integrates with additional testing frameworks like [Cypress](https://www.cypress.io/) and [Playwright](https://playwright.dev/) to provide a comprehensive testing solution. By leveraging the Component Story Format (CSF), developers can write test cases that simulate user interactions and verify the behavior of individual components within the Storybook environment. This approach enables developers to thoroughly test their components' functionality, responsiveness, and visual appearance across different scenarios, resulting in more robust and reliable applications.\n\n### [With Cypress](#with-cypress)\n\n[Cypress](https://www.cypress.io/) is an end-to-end testing framework. It enables you to test a complete instance of your application by simulating user behavior. With Component Story Format, your stories are reusable with Cypress. Each named export (in other words, a story) is renderable within your testing setup.\n\nAn example of an end-to-end test with Cypress and Storybook is testing a login component for the correct inputs. For example, if you had the following story:\n\nThe play function contains small snippets of code that run after the story renders. It allows you to sequence interactions in stories.\n\nWith Cypress, you could write the following test:\n\nWhen Cypress runs your test, it loads Storybook's isolated iframe and checks if the inputs match the test values.\n\n![Cypress running successfully](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-tests%2Fcypress-success-run-tests-optimized.png&w=3840&q=75)\n\n### [With Playwright](#with-playwright)\n\n[Playwright](https://playwright.dev/) is a browser automation tool and end-to-end testing framework from Microsoft. It offers cross-browser automation, mobile testing with device emulation, and headless testing. With Component Story Format, your stories are reusable with Playwright. Each named export (in other words, a story) is renderable within your testing setup.\n\nA real-life scenario of user flow testing with Playwright would be how to test a login form for validity. For example, if you had the following story already created:\n\nThe play function contains small snippets of code that run after the story renders. It allows you to sequence interactions in stories.\n\nWith Playwright, you can write a test to check if the inputs are filled and match the story:\n\nOnce you execute Playwright, it opens a new browser window, loads Storybook's isolated iframe, asserts if the inputs contain the specified values, and displays the test results in the terminal.\n\n#### [Learn about other UI tests](#learn-about-other-ui-tests)\n\n*   [Test runner](https://storybook.js.org/docs/writing-tests/test-runner) to automate test execution\n*   [Visual tests](https://storybook.js.org/docs/writing-tests/visual-testing) for appearance\n*   [Accessibility tests](https://storybook.js.org/docs/writing-tests/accessibility-testing) for accessibility\n*   [Interaction tests](https://storybook.js.org/docs/writing-tests/interaction-testing) for user behavior simulation\n*   [Coverage tests](https://storybook.js.org/docs/writing-tests/test-coverage) for measuring code coverage\n*   [Snapshot tests](https://storybook.js.org/docs/writing-tests/snapshot-testing/snapshot-testing) for rendering errors and warnings\n*   End-to-end tests for simulating real user scenarios\n*   [Unit tests](https://storybook.js.org/docs/writing-tests/import-stories-in-tests/stories-in-unit-tests) for functionality",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-unstyled",
    "markdown": "# StorybookChromatic\n\nThe `Unstyled` block is a special block that disables Storybook's default styling in MDX docs wherever it is added.\n\nBy default, most elements (like `h1`, `p`, etc.) in docs have a few default styles applied to ensure the docs look good. However, sometimes you might want some of your content to not have these styles applied. In those cases, wrap the content with the `Unstyled` block to remove the default styles.\n\nYields:\n\n![Screenshot of Unstyled Doc Block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-unstyled.png&w=3840&q=75)\n\nThe other blocks like [`Story`](https://storybook.js.org/docs/api/doc-blocks/doc-block-story) and [`Canvas`](https://storybook.js.org/docs/api/doc-blocks/doc-block-canvas) are already unstyled, so there’s no need to wrap those in the `Unstyled` block to ensure that Storybook’s styles don’t bleed into the stories. However, if you import your components directly in the MDX, you most likely want to wrap them in the Unstyled block.\n\nDue to how CSS inheritance works it’s best to always add the Unstyled block to the root of your MDX, and not nested into other elements. The following example will cause some Storybook styles like `color` to be inherited into `CustomComponent` because they are applied to the root `div`:\n\n## [Unstyled](#unstyled)\n\n`Unstyled` is configured with the following props:\n\n### [`children`](#children)\n\nType: `React.ReactNode`\n\nProvides the content to which you do _not_ want to apply default docs styles.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/user-interface/features-and-behavior",
    "markdown": "# StorybookChromatic\n\n```\nimport { addons } from '@storybook/manager-api';\n \naddons.setConfig({\n  navSize: 300,\n  bottomPanelHeight: 300,\n  rightPanelWidth: 300,\n  panelPosition: 'bottom',\n  enableShortcuts: true,\n  showToolbar: true,\n  theme: undefined,\n  selectedPanel: undefined,\n  initialActive: 'sidebar',\n  sidebar: {\n    showRoots: false,\n    collapsedRoots: ['other'],\n  },\n  toolbar: {\n    title: { hidden: false },\n    zoom: { hidden: false },\n    eject: { hidden: false },\n    copy: { hidden: false },\n    fullscreen: { hidden: false },\n  },\n});\n```",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-useof",
    "markdown": "# StorybookChromatic\n\nThe default blocks supplied by Storybook do not fit all use cases, so you might want to write your own blocks.\n\nIf your own doc blocks need to interface with annotations from Storybook—that is stories, meta or components—you can use the `useOf` hook. Pass in a module export of a story, meta, or component and it will return its annotated form (with applied parameters, args, loaders, decorators, play function) that you can then use for anything you like. In fact, most of the existing blocks like [`Description`](https://storybook.js.org/docs/api/doc-blocks/doc-block-description) and [`Canvas`](https://storybook.js.org/docs/api/doc-blocks/doc-block-canvas) use `useOf` under the hood.\n\nHere’s an example of how the`useOf` hook could be used to create a custom block that displays the name of the story:\n\n## [useOf](#useof)\n\n### [Type](#type)\n\n### [Parameters](#parameters)\n\n#### [`moduleExportOrType`](#moduleexportortype)\n\n(**Required**)\n\nType: `ModuleExport | 'story' | 'meta' | 'component'`\n\nProvides the story export, meta export, component export, or CSF file exports from which you get annotations.\n\nWhen the custom block is in an [attached doc](https://storybook.js.org/docs/api/doc-blocks/doc-block-meta#attached-vs-unattached), it’s also possible to get the primary (first) story, meta, or component by passing in a string instead. This is useful as a fallback, so the `of` prop can be omitted in your block. The most common pattern is using this as `useOf(props.of || 'story')` which will fall back to the primary story if no `of` prop is defined.\n\n*   `useOf('story')` returns the annotated primary story in attached mode; error in unattached mode\n*   `useOf('meta')` returns the annotated meta in attached mode; error in unattached mode\n*   `useOf('component')` returns the annotated component specified in the meta in attached mode; error in unattached mode\n\n#### [`validTypes`](#validtypes)\n\nType: `Array<'story' | 'meta' | 'component'>`\n\nOptionally specify an array of valid types that your block accepts. Passing anything other than the valid type(s) will result in an error. For example, the [`Canvas`](https://storybook.js.org/docs/api/doc-blocks/doc-block-canvas) block uses `useOf(of, ['story'])`, which ensures it only accepts a reference to a story, not a meta or component.\n\n### [Return](#return)\n\nThe return value depends on the matched type:\n\n#### [`EnhancedResolvedModuleExportType['type'] === 'story'`](#enhancedresolvedmoduleexporttypetype--story)\n\nType: `{ type: 'story', story: PreparedStory }`\n\nFor stories, annotated stories are returned as is. They are prepared, meaning that they are already merged with project and meta annotations.\n\n#### [`EnhancedResolvedModuleExportType['type'] === 'meta'`](#enhancedresolvedmoduleexporttypetype--meta)\n\nType: `{ type: 'meta', csfFile: CSFFile, preparedMeta: PreparedMeta }`\n\nFor meta, the parsed CSF file is returned, along with prepared annotated meta. That is, project annotations merged with meta annotations, but no story annotations.\n\n#### [`EnhancedResolvedModuleExportType['type'] === 'component'`](#enhancedresolvedmoduleexporttypetype--component)\n\nType: `{ type: 'component', component: Component, projectAnnotations: NormalizedProjectAnnotations }`\n\nFor components, the component is returned along with project annotations; no meta or story annotations.\n\nNote that it’s often impossible for the hook to determine if a component is passed in or any other object, so it behaves like an `unknown` type as well.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/user-interface/theming",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nStorybook is theme-able using a lightweight theming API.\n\n## [Global theming](#global-theming)\n\nIt's possible to theme Storybook globally.\n\nStorybook includes two themes that look good out of the box: \"light\" and \"dark\". Unless you've set your preferred color scheme as dark, Storybook will use the light theme as default.\n\nMake sure you have installed [`@storybook/manager-api`](https://www.npmjs.com/package/@storybook/manager-api) and [`@storybook/theming`](https://www.npmjs.com/package/@storybook/theming) packages.\n\nAs an example, you can tell Storybook to use the \"dark\" theme by modifying [`.storybook/manager.js`](https://storybook.js.org/docs/configure/user-interface/features-and-behavior):\n\nWhen setting a theme, set a complete theme object. The theme is replaced, not combined.\n\n## [Theming docs](#theming-docs)\n\n[Storybook Docs](https://storybook.js.org/docs/writing-docs) uses the same theme system as Storybook’s UI but is themed independently from the main UI.\n\nSupposing you have a Storybook theme defined for the main UI in [`.storybook/manager.js`](https://storybook.js.org/docs/configure/user-interface/features-and-behavior):\n\nHere's how you'd specify the same theme for docs in [`.storybook/preview.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering):\n\nContinue to read if you want to learn how to create your theme.\n\n## [Create a theme quickstart](#create-a-theme-quickstart)\n\nThe easiest way to customize Storybook is to generate a new theme using the `create()` function from `storybook/theming`. This function includes shorthands for the most common theme variables. Here's how to use it:\n\nInside your `.storybook` directory, create a new file called `YourTheme.js` and add the following:\n\nIf you're using `brandImage` to add your custom logo, you can use any of the most common image formats.\n\nAbove, we're creating a new theme that will:\n\n*   Use Storybook's `light` theme as a baseline.\n*   Replace Storybook's logo in the sidebar with our own (defined in the brandImage variable).\n*   Add custom branding information.\n*   Set the brand link to open in the same window (as opposed to a new one), via the `target` attribute.\n\nFinally, we'll need to import the theme into Storybook. Create a new file called `manager.js` in your `.storybook` directory and add the following:\n\nNow your custom theme will replace Storybook's default theme, and you'll see a similar set of changes in the UI.\n\n![Storybook starter theme](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fconfigure%2Fstorybook-starter-custom-theme.png&w=3840&q=75)\n\nLet's take a look at a more complex example. Copy the code below and paste it in `.storybook/YourTheme.js`.\n\nAbove, we're updating the theme with the following changes:\n\n*   A custom color palette (defined in the `app` and `color` variables).\n*   Custom fonts (defined in the `font` and `text` variables).\n\nWith the new changes introduced, the custom theme should yield a similar result.\n\n![Storybook custom theme loaded](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fconfigure%2Fstorybook-custom-theme.png&w=3840&q=75)\n\nMany theme variables are optional, the `base` property is **NOT**.\n\nThe `@storybook/theming` package is built using TypeScript, which should help create a valid theme for TypeScript users. The types are part of the package itself.\n\n## [CSS escape hatches](#css-escape-hatches)\n\nThe Storybook theme API is narrow by design. If you want to have fine-grained control over the CSS, all UI and Docs components are tagged with class names to make this possible. **Use at your own risk** as this is an advanced feature.\n\nTo style these elements, insert style tags into:\n\n*   For Storybook’s UI, use `.storybook/manager-head.html`\n*   For Storybook Docs, use `.storybook/preview-head.html`\n\nCaution\n\nThe same way as you can adjust your [preview’s head tag](https://storybook.js.org/docs/configure/story-rendering#adding-to-head), Storybook allows you to modify the code on the manager's side, through `.storybook/manager-head.html`. It can be helpful when adding theme styles that target Storybook's HTML, but it comes with a cost as Storybook's inner HTML can change at any time through the release cycle.\n\n## [MDX component overrides](#mdx-component-overrides)\n\nIf you're using MDX for docs, there's one more level of \"themability\". MDX allows you to completely override the rendered components from Markdown using a `components` parameter. It's an advanced usage that we don't officially support in Storybook, but it's a powerful construct if you need it.\n\nHere's how you might insert a custom code renderer for `code` blocks on the page, in [`.storybook/preview.js`](https://storybook.js.org/docs/configure/index#configure-story-rendering):\n\nYou can even override a Storybook block component.\n\nHere's how you might insert a custom `<Canvas />` block:\n\n## [Addons and theme creation](#addons-and-theme-creation)\n\nSome addons require specific theme variables that a Storybook user must add. If you share your theme with the community, make sure to support the official API and other popular addons, so your users have a consistent experience.\n\nFor example, the popular Actions addon uses [react-inspector](https://github.com/storybookjs/react-inspector/blob/master/src/styles/themes/chromeLight.tsx), which has themes of its own. Supply additional theme variables to style it like so:\n\nReuse the theme variables above for a native Storybook developer experience. The theming engine relies on [emotion](https://emotion.sh/), a CSS-in-JS library.\n\nUse the theme variables in object notation:\n\nOr with template literals:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/integration/images-and-assets",
    "markdown": "# StorybookChromatic\n\nComponents often rely on images, videos, fonts, and other assets to render as the user expects. There are many ways to use these assets in your story files.\n\n### [Import assets into stories](#import-assets-into-stories)\n\nYou can import any media assets by importing (or requiring) them. It works out of the box with our default config. But, if you are using a custom webpack config, you’ll need to add the [file loader](https://webpack.js.org/loaders/) to handle the required files.\n\nAfterward, you can use any asset in your stories:\n\n### [Serving static files via Storybook Configuration](#serving-static-files-via-storybook-configuration)\n\nWe recommend serving static files via Storybook to ensure that your components always have the assets they need to load. We recommend this technique for assets that your components often use, like logos, fonts, and icons.\n\nConfigure a directory (or a list of directories) where your assets live when starting Storybook. Use the `staticDirs` configuration element in your main Storybook configuration file (i.e., `.storybook/main.js|ts`) to specify the directories:\n\nHere `../public` is your static directory. Now use it in a component or story like this.\n\nYou can also pass a list of directories separated by commas without spaces instead of a single directory.\n\nOr even use a configuration object to define the directories:\n\n### [Reference assets from a CDN](#reference-assets-from-a-cdn)\n\nUpload your files to an online CDN and reference them. In this example, we’re using a placeholder image service.\n\n### [Absolute versus relative paths](#absolute-versus-relative-paths)\n\nSometimes, you may want to deploy your Storybook into a subpath, like `https://example.com/storybook`.\n\nIn this case, you need to have all your images and media files with relative paths. Otherwise, the browser cannot locate those files.\n\nIf you load static content via importing, this is automatic, and you do not have to do anything.\n\nSuppose you are serving assets in a [static directory](#serving-static-files-via-storybook-configuration) along with your Storybook. In that case, you need to use relative paths to load images or use the base element.\n\n### [Referencing Fonts in Stories](#referencing-fonts-in-stories)\n\nAfter configuring Storybook to serve assets from your static folder, you can reference those assets in Storybook. For example, you can reference and apply a custom font to your stories. To do this, create a [`preview-head.html`](https://storybook.js.org/docs/configure/story-rendering) file inside the configuration directory (i.e., `.storybook`) and add a `<link />` tag to reference your font.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config",
    "markdown": "# StorybookChromatic\n\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n \nconst config: StorybookConfig = {\n  // Required\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  // Optional\n  addons: ['@storybook/addon-essentials'],\n  docs: {\n    autodocs: 'tag',\n  },\n  staticDirs: ['../public'],\n};\n \nexport default config;\n```",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-argtypes",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nThe `ArgTypes` block can be used to show a static table of [arg types](https://storybook.js.org/docs/api/arg-types) for a given component, as a way to document its interface.\n\nIf you’re looking for a dynamic table that shows a story’s current arg values for a story and supports users changing them, see the [`Controls`](https://storybook.js.org/docs/api/doc-blocks/doc-block-controls) block instead.\n\n![Screenshot of ArgTypes block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-argtypes.png&w=3840&q=75)\n\n## [ArgTypes](#argtypes)\n\nConfiguring with props **and** parameters\n\nℹ️ Like most blocks, the `ArgTypes` block is configured with props in MDX. Many of those props derive their default value from a corresponding [parameter](https://storybook.js.org/docs/writing-stories/parameters) in the block's namespace, `parameters.docs.argTypes`.\n\nThe following `exclude` configurations are equivalent:\n\nThe example above applied the parameter at the [component](https://storybook.js.org/docs/writing-stories/parameters#component-parameters) (or meta) level, but it could also be applied at the [project](https://storybook.js.org/docs/writing-stories/parameters#global-parameters) or [story](https://storybook.js.org/docs/writing-stories/parameters#story-parameters) level.\n\n### [`exclude`](#exclude)\n\nType: `string[] | RegExp`\n\nDefault: `parameters.docs.argTypes.exclude`\n\nSpecifies which arg types to exclude from the args table. Any arg types whose names match the regex or are part of the array will be left out.\n\n### [`include`](#include)\n\nType: `string[] | RegExp`\n\nDefault: `parameters.docs.argTypes.include`\n\nSpecifies which arg types to include in the args table. Any arg types whose names don’t match the regex or are not part of the array will be left out.\n\n### [`of`](#of)\n\nType: Story export or CSF file exports\n\nSpecifies which story to get the arg types from. If a CSF file exports is provided, it will use the primary (first) story in the file.\n\n### [`sort`](#sort)\n\nType: `'none' | 'alpha' | 'requiredFirst'`\n\nDefault: `parameters.docs.argTypes.sort` or `'none'`\n\nSpecifies how the arg types are sorted.\n\n*   **none**: Unsorted, displayed in the same order the arg types are processed in\n*   **alpha**: Sorted alphabetically, by the arg type's name\n*   **requiredFirst**: Same as `alpha`, with any required arg types displayed first",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-docs/mdx",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\n[MDX](https://mdxjs.com/) files mix Markdown and Javascript/JSX to create rich interactive documentation. You can use Markdown’s readable syntax (such as `# heading`) for your documentation, include stories defined in [Component Story Format (CSF)](https://storybook.js.org/docs/api/csf), and freely embed JSX component blocks at any point in the file. All at once.\n\nIn addition, you can write pure documentation pages in MDX and add them to Storybook alongside your stories.\n\n![MDX simple example result](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-docs%2Fmdx-hero.png&w=3840&q=75)\n\nWriting stories directly in MDX was removed in Storybook 8, and we're no longer supporting it. Please reference the [previous documentation](https://storybook.js.org/docs/6/writing-docs/mdx) for guidance on that feature or [migrate](https://storybook.js.org/docs/migration-guide/index#storiesmdx-to-mdxcsf) to the new format.\n\n## [Basic example](#basic-example)\n\nLet's start with an example, `Checkbox.mdx`, combining Markdown with a single story.\n\nThis MDX file references a story file, `Checkbox.stories.js|ts`, that is written in [Component Story Format (CSF)](https://storybook.js.org/docs/api/csf):\n\nAnd here's how that's rendered in Storybook:\n\n![MDX simple example result](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-docs%2Fmdx-simple.png&w=3840&q=75)\n\nThere’s a lot going on here. We're writing Markdown, we're writing JSX, and we're also defining and referencing Storybook stories that are drop-in compatible with the entire Storybook ecosystem.\n\nLet’s break it down.\n\n### [MDX and CSF](#mdx-and-csf)\n\nThe first thing you'll notice is that the component documentation is divided into distinct formats: one for writing component stories describing each possible component state and the second one for documenting how to use them. This split leverages the best qualities of each format:\n\n*   **CSF** is great for succinctly defining stories (component examples). If you use TypeScript, it also provides type safety and auto-completion.\n*   **MDX** is great for writing structured documentation and composing it with interactive JSX elements.\n\n### [Anatomy of MDX](#anatomy-of-mdx)\n\nAssuming you’re already familiar with writing stories with [CSF](https://storybook.js.org/docs/writing-stories), we can dissect the MDX side of things in greater detail.\n\nThe document consists of a number of blocks separated by blank lines. Since MDX mixes a few different languages together, it uses those blank lines to help distinguish where one starts, and the next begins. Failing to separate blocks by whitespace can cause (sometimes cryptic) parse errors.\n\nGoing through the code blocks in sequence:\n\nComments in MDX are JSX blocks that contain JS comments.\n\nImports the components and stories that will be used in the JSX throughout the rest of the file.\n\nWhen providing the `of` prop to the `Meta` block, make sure that you're referencing the [**default export**](https://storybook.js.org/docs/api/csf#default-export) of the story file and not the component itself to prevent render issues with the generated documentation.\n\nThe `Meta` block defines where the document will be placed in the sidebar. In this case, it is adjacent to the Checkbox’s stories. By default, the docs sidebar node is titled `\"Docs\"`, but this can be customized by passing a `name` prop (e.g., `<Meta of={CheckboxStories} name=\"Info\" />`). If you want to place a docs node at an arbitrary point in the navigation hierarchy, you can use the `title` prop (e.g., `<Meta title=\"path/to/node\" />`).\n\nMDX supports standard markdown ([\"commonmark\"](https://commonmark.org/)) by default and can be extended to support [GitHub Flavored Markdown (GFM)](https://github.github.com/gfm/) and other extensions (see the [Troubleshooting section](#troubleshooting) to learn more about some of the current limitations).\n\nFinally, MDX supports blocks of arbitrary JSX.\n\nIn this case, we are leveraging “Doc Blocks”, a library of documentation components designed to work with Storybook stories to show your stories, your component APIs & controls for interacting with your components inside your documentation, among other utilities.\n\nIn addition to Doc Blocks, MDX can incorporate arbitrary React components, making it a very flexible documentation system. Suppose you want a stylized list of “dos and don’ts” for your component; you can use off-the-shelf components or write your own.\n\n### [Known limitations](#known-limitations)\n\nWhile MDX supports a variety of runtimes ([React](https://mdxjs.com/packages/react/), [Preact](https://mdxjs.com/packages/preact/), [Vue](https://mdxjs.com/packages/vue/)), Storybook’s implementation is React-only. That means your documentation is rendered in React, while your stories render in the runtime of your choice (React, Vue, Angular, Web Components, Svelte, etc.).\n\n## [Setup custom documentation](#setup-custom-documentation)\n\nIn addition, to document your components with MDX, you can also extend it to write other types of content, such as guidelines or best practices on how to use them. To enable custom documentation for your stories with this format, start by updating your Storybook configuration file (i.e., `.storybook/main.js|ts|cjs`).\n\nCreate an MDX file to add your custom documentation. Depending on how you want your documentation to render in the UI, you'll need to consider the following use cases.\n\n### [Using the `Meta` Doc Block](#using-the-meta-doc-block)\n\nIf you need to match the component documentation to an existing story, you can configure the [`Meta`](https://storybook.js.org/docs/api/doc-blocks/doc-block-meta) Doc Block to control how the documentation gets rendered. Out of the box, it allows you to define a custom title or a reference to the story you need to document (i.e., via the `of` prop). For example:\n\n### [Writing unattached documentation](#writing-unattached-documentation)\n\nSuppose you're documenting an existing component and only provide the `Meta` Doc Block without additional props or other blocks. In that case, Storybook will consider it as \"unattached\" documentation, or in other words, a \"documentation-only\" page, and it will render it differently in the sidebar navigation menu:\n\n![MDX docs only story](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-docs%2Fmdx-documentation-only.png&w=3840&q=75)\n\n### [Using the File System](#using-the-file-system)\n\nHowever, providing the `Meta` Doc Block may not be required for certain use cases, such as standalone pages or even as guidelines for testing your components. In that case, you can safely omit it. Storybook will instead rely on the file's physical location to place the documentation in the sidebar, overriding any pre-existent [auto-generated](https://storybook.js.org/docs/writing-docs/autodocs) documentation with your own. For example:\n\nIf you're overriding an existing auto-generated documentation page enabled via [`tags`](https://storybook.js.org/docs/writing-docs/autodocs#setup-automated-docs) configuration property, we recommend removing it to avoid errors.\n\nOnce the custom MDX documentation is loaded, Storybook will infer the title and location using the same heuristic rules to generate [auto-title stories](https://storybook.js.org/docs/configure/user-interface/sidebar-and-urls#csf-30-auto-titles) and render it in the sidebar as a `Docs` entry.\n\n#### [Working with standalone documentation pages](#working-with-standalone-documentation-pages)\n\nWriting standalone documentation pages is a common use case that applies not only on a per-component but also on a per-project basis. For example, you might want to document your project's onboarding process with instructions on using it. To do so, you can create a new MDX file containing your documentation using a similar structure and content:\n\n![MDX guidelines page](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-docs%2Fmdx-standalone-page.png&w=3840&q=75)\n\nWhen Storybook loads the documentation, it will infer the placement of the page in the sidebar navigation menu using the file's physical location and render it as a `Docs` entry.\n\n### [Fully control custom documentation](#fully-control-custom-documentation)\n\nDocumentation can be expensive to maintain and keep up to date when applied to every project component. To help simplify this process, Storybook provides a set of useful UI components (i.e., Doc Blocks) to help cover more advanced cases. If you need additional content, use them to help create your custom documentation.\n\n### [Working with multiple components](#working-with-multiple-components)\n\nIf you need to document multiple components in a single documentation page, you can reference them directly inside your MDX file. Internally, Storybook looks for the story metadata and composes it alongside your existing documentation. For example:\n\n### [Generate documentation from Markdown](#generate-documentation-from-markdown)\n\nIf you need to extend your documentation with additional content written in Markdown, you can use the `Markdown` Doc Block to import the available content, and Storybook will render it alongside your existing documentation. For example, if you have a `CHANGELOG.md` file, you can import it and render it in your documentation page as follows:\n\nThe `Markdown` Doc Block provides additional configuration options to customize the rendering of your documentation. For more information, refer to the [API documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-markdown).\n\n![Changelog markdown in an MDX story](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fwriting-docs%2Fmdx-markdown-docs-import.png&w=3840&q=75)\n\n### [Linking to other stories and pages](#linking-to-other-stories-and-pages)\n\nAnother way to improve documentation is by linking to other stories and pages. Suppose you already have a component story with the following unique identifier, `some--id`, and you want to link it to your documentation page. In that case, you can use the `path` query string to redirect to the documentation entry related to the story:\n\nInstead, if you need to target a specific documentation section, you can adjust the link to point at it. For example:\n\nHowever, cross-linking documentation isn't restricted to documentation pages. You can adjust the `path` query and supply the story's unique identifier if you need to reference a specific one. For example:\n\nBy applying this pattern with the Controls addon, all anchors will be ignored in Canvas based on how Storybook handles URLs to track the args values.\n\n## [Troubleshooting](#troubleshooting)\n\n### [Markdown tables aren't rendering correctly](#markdown-tables-arent-rendering-correctly)\n\nIf you're extending your documentation to include specific features (e.g., tables, footnotes), you may run into some issues rendering them correctly using the current MDX version supported by Storybook. We recommend enabling the [`remark-gfm`](https://github.com/remarkjs/remark-gfm) plugin in your configuration file (i.e., [`.storybook/main.js|ts`](https://storybook.js.org/docs/configure)) to render them correctly.\n\nThe [`remark-gfm`](https://github.com/remarkjs/remark-gfm) package is not included by default with Storybook and must be installed separately as a development dependency. To learn more about how to use it and the other breaking changes introduced by MDX, refer to the [GFM guide](https://mdxjs.com/guides/gfm/) and the [migration guide](https://mdxjs.com/migrating/v2/) provided by the MDX team for more information.\n\n### [The MDX documentation doesn't render in my environment](#the-mdx-documentation-doesnt-render-in-my-environment)\n\nAs Storybook relies on [MDX 3](https://mdxjs.com/) to render documentation, some technical limitations may prevent you from migrating to this version. If that's the case, we've prepared a set of instructions to help you transition to this new version.\n\n#### [Storybook doesn't create documentation for my component stories](#storybook-doesnt-create-documentation-for-my-component-stories)\n\nIf you run into a situation where Storybook is not able to detect and render the documentation for your component stories, it may be due to a misconfiguration in your Storybook. Check your configuration file (i.e., `.storybook/main.js|ts`) and ensure the `stories` configuration element provides the correct path to your stories location (e.g., `../src/**/*.stories.@(js|jsx|mjs|ts|tsx)`).\n\n### [The migration seems flaky and keeps failing](#the-migration-seems-flaky-and-keeps-failing)\n\nBy default, running the [migration](https://storybook.js.org/docs/configure/upgrading) command will prompt you to update the existing MDX files in your project according to the MDX version supported by Storybook. However, this might be a disruptive process, specifically if you're upgrading from a previous version of Storybook where you were using the legacy MDX format. To help you troubleshoot those issues, we've prepared some recommendations that might help you.\n\nStart by running the following command inside your project directory:\n\nDepending on the volume, you may be required to run the command multiple times to fix all the issues.\n\nWhen it finishes, it will output the list of files causing issues. You can then use this information to fix the problems manually.\n\nAdditionally, if you're working with VSCode, you can add the [MDX extension](https://marketplace.visualstudio.com/items?itemName=unifiedjs.vscode-mdx) and enable MDX experimental support for linting, type checking, and auto-completion by adding the following to your user settings:\n\nIf you're still encountering issues, we recommend reaching out to the community using the default communication channels (e.g., [GitHub discussions](https://github.com/storybookjs/storybook/discussions/new?category=help)).\n\n### [The controls are not updating the story within the MDX documentation page](#the-controls-are-not-updating-the-story-within-the-mdx-documentation-page)\n\nIf you turned off inline rendering for your stories via the [`inline`](https://storybook.js.org/docs/api/doc-blocks/doc-block-story#inline) configuration option, you would run into a situation where the associated controls are not updating the story within the documentation page. This is a known limitation of the current implementation and will be addressed in a future release.\n\n### [The React version used is unexpected](#the-react-version-used-is-unexpected)\n\nFor most projects, Storybook's addon-docs uses the React version listed in your project's dependencies. If it does not find one, it will use React 18.2.0. There are two exceptions to this:\n\n*   Preact projects will always use React 17\n*   Next.js projects will always use the canary version that comes with the Next.js version installed, regardless of which React version is listed in the project’s dependencies.\n\nIf you're having issues with the React version used, you may need to re-create your project's `node_modules` folder to ensure the correct version is used.\n\n**Learn more about Storybook documentation**\n\n*   [Autodocs](https://storybook.js.org/docs/writing-docs/autodocs) for creating documentation for your stories\n*   MDX for customizing your documentation\n*   [Doc Blocks](https://storybook.js.org/docs/writing-docs/doc-blocks) for authoring your documentation\n*   [Publishing docs](https://storybook.js.org/docs/writing-docs/build-documentation) to automate the process of publishing your documentation",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/user-interface/sidebar-and-urls",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nStorybook’s sidebar lists all your stories grouped by component. When you have many components, you may also wish to group those components. To do so, you can add the `/` separator to the `title` of your CSF file, and Storybook will group the stories into groups based on common prefixes:\n\n![Storybook sidebar anatomy](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fconfigure%2Fsidebar-anatomy.png&w=3840&q=75)\n\nWe recommend using a nesting scheme that mirrors the filesystem path of the components. For example, if you have a file `components/modals/Alert.js`, name the CSF file `components/modals/Alert.stories.js` and title it `Components/Modals/Alert`.\n\n## [Roots](#roots)\n\nBy default, Storybook will treat your top-level nodes as “roots”. Roots are displayed in the UI as “sections” of the hierarchy. Lower level groups will show up as folders:\n\n![Storybook sidebar story roots](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fconfigure%2Fsidebar-roots.png&w=3840&q=75)\n\nIf you’d prefer to show top-level nodes as folders rather than roots, you can set the `sidebar.showRoots` option to `false` in [`./storybook/manager.js`](https://storybook.js.org/docs/configure/user-interface/features-and-behavior):\n\n## [Permalink to stories](#permalink-to-stories)\n\nBy default, Storybook generates an `id` for each story based on the component title and the story name. This `id` in particular is used in the URL for each story, and that URL can serve as a permalink (primarily when you [publish](https://storybook.js.org/docs/sharing/publish-storybook) your Storybook).\n\nConsider the following story:\n\nStorybook's ID-generation logic will give this the `id` `foo-bar--baz`, so the link would be `?path=/story/foo-bar--baz`.\n\nIt is possible to manually set the story's id, which is helpful if you want to rename stories without breaking permalinks. Suppose you want to change the position in the hierarchy to `OtherFoo/Bar` and the story name to `Moo`. Here's how to do that:\n\nStorybook will prioritize the `id` over the title for ID generation if provided and prioritize the `story.name` over the export key for display.\n\n## [CSF 3.0 auto-titles](#csf-30-auto-titles)\n\nStorybook 6.4 introduced [CSF 3.0](https://storybook.js.org/blog/component-story-format-3-0/) as an experimental feature, allowing you to write stories more compactly. Suppose you're already using this format to write your stories. In that case, you can omit the `title` element from the default export and allow Storybook automatically infer it based on the file's physical location. For example, given the following configuration and story:\n\nWhen Storybook loads, the story can show up in the sidebar as `components/My Component`.\n\nAuto-titles work with explicit titling options like the component's `title` and the story's `name`:\n\n### [Auto-title filename case](#auto-title-filename-case)\n\nStarting with Storybook 6.5, story titles generated automatically no longer rely on Lodash's [startCase](https://lodash.com/docs/#startCase). Instead, the file name casing is preserved, allowing additional control over the story title. For example, `components/My Component` will be defined as `components/MyComponent`.\n\nIf you need, you can revert to the previous pattern by adding the following configuration:\n\n### [Auto-title redundant filenames](#auto-title-redundant-filenames)\n\nIn addition to improvements to the story file name casing, a new heuristic was introduced, removing redundant names in case the filename has the same name as the directory name, or if it's called `index.stories.js|ts`. For example, before `components/MyComponent/MyComponent.stories.js` was defined as `Components/MyComponent/MyComponent` in the sidebar. Now it will be defined as `Components/MyComponent`.\n\nIf you need to preserve the naming scheme, you can add the `title` element to the default export. For example:\n\n### [Auto-title prefixes](#auto-title-prefixes)\n\nAdditionally, if you customize your Storybook to load your stories based on a [configuration object](https://storybook.js.org/docs/configure/index#with-a-configuration-object), including a `titlePrefix`, Storybook automatically prefixes all titles to matching stories. For example, assuming you have the following configuration:\n\nWhen Storybook generates the titles for all matching stories, they'll retain the `Custom` prefix.\n\n### [Story Indexers](#story-indexers)\n\n[Story Indexers](https://storybook.js.org/docs/api/main-config/main-config-indexers) are a set of heuristics used by Storybook to crawl your filesystem based on a given glob pattern searching for matching stories, which is then used to generate an `index.json` (formerly `stories.json`) file responsible for populating the sidebar with the necessary information. By default, this heuristic will look for files that contain the following scheme `*.stories.@(js|jsx|mjs|ts|tsx)`.\n\nYou can provide your own indexer to include stories with a different naming convention, adjust the automatic title generation beyond a prefix, and many other use cases. For more information, see the [Story Indexers API reference](https://storybook.js.org/docs/api/main-config/main-config-indexers).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-framework",
    "markdown": "# StorybookChromatic\n\n(**Required**)\n\nParent: [main.js|ts configuration](https://storybook.js.org/docs/api/main-config/main-config)\n\nType: `FrameworkName | { name: FrameworkName; options?: FrameworkOptions }`\n\nConfigures Storybook based on a set of [framework-specific](https://storybook.js.org/docs/configure/integration/frameworks) settings.\n\n## [`name`](#name)\n\nType: `string`\n\nFor available frameworks and their options, see their respective [documentation](https://github.com/storybookjs/storybook/tree/next/code/frameworks).\n\n## [`options`](#options)\n\nType: `Record<string, any>`\n\nWhile many options are specific to a framework, there are some options that are shared across some frameworks, e.g. those that configure Storybook's [builder](https://storybook.js.org/docs/api/main-config/main-config-core#builder).\n\n### [`options.builder`](#optionsbuilder)\n\nType: `Record<string, any>`\n\nConfigures Storybook's builder, [Vite](https://storybook.js.org/docs/builders/vite) or [Webpack](https://storybook.js.org/docs/builders/webpack).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-canvas",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nThe `Canvas` block is a wrapper around a [`Story`](https://storybook.js.org/docs/api/doc-blocks/doc-block-story), featuring a toolbar that allows you to interact with its content while automatically providing the required [`Source`](https://storybook.js.org/docs/api/doc-blocks/doc-block-source) snippets.\n\n![Screenshot of Canvas block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-canvas.png&w=3840&q=75)\n\nWhen using the Canvas block in MDX, it references a story with the `of` prop:\n\nIn previous versions of Storybook it was possible to pass in arbitrary components as children to `Canvas`. That is deprecated and the `Canvas` block now only supports a single story.\n\n## [Canvas](#canvas)\n\nConfiguring with props **and** parameters\n\nℹ️ Like most blocks, the `Canvas` block is configured with props in MDX. Many of those props derive their default value from a corresponding [parameter](https://storybook.js.org/docs/writing-stories/parameters) in the block's namespace, `parameters.docs.canvas`.\n\nThe following `sourceState` configurations are equivalent:\n\nThe example above applied the parameter at the [story](https://storybook.js.org/docs/writing-stories/parameters#story-parameters) level, but it could also be applied at the [component](https://storybook.js.org/docs/writing-stories/parameters#component-parameters) (or meta) level or [project](https://storybook.js.org/docs/writing-stories/parameters#global-parameters) level.\n\n### [`additionalActions`](#additionalactions)\n\nType:\n\nDefault: `parameters.docs.canvas.additionalActions`\n\nProvides any additional custom actions to show in the bottom right corner. These are simple buttons that do anything you specify in the `onClick` function.\n\n### [`className`](#classname)\n\nType: `string`\n\nDefault: `parameters.docs.canvas.className`\n\nProvides HTML class(es) to the preview element, for custom styling.\n\n### [`layout`](#layout)\n\nType: `'centered' | 'fullscreen' | 'padded'`\n\nDefault: `parameters.layout` or `parameters.docs.canvas.layout` or `'padded'`\n\nSpecifies how the canvas should layout the story.\n\n*   **centered**: Center the story within the canvas\n*   **padded**: (default) Add padding to the story\n*   **fullscreen**: Show the story as-is, without padding\n\nIn addition to the `parameters.docs.canvas.layout` property or the `layout` prop, the `Canvas` block will respect the `parameters.layout` value that defines [how a story is laid out](https://storybook.js.org/docs/configure/story-layout) in the regular story view.\n\n### [`meta`](#meta)\n\nType: CSF file exports\n\nSpecifies the CSF file to which the story is associated.\n\nYou can render a story from a CSF file that you haven’t attached to the MDX file (via `Meta`) by using the `meta` prop. Pass the **full set of exports** from the CSF file (not the default export!).\n\n### [`of`](#of)\n\nType: Story export\n\nSpecifies which story's source is displayed.\n\n### [`source`](#source)\n\nType: `SourceProps['code'] | SourceProps['format'] | SourceProps['language'] | SourceProps['type']`\n\nSpecifies the props passed to the inner `Source` block. For more information, see the `Source` Doc Block [documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-source).\n\nThe dark prop is ignored, as the `Source` block is always rendered in dark mode when shown as part of a `Canvas` block.\n\n### [`sourceState`](#sourcestate)\n\nType: `'hidden' | 'shown' | 'none'`\n\nDefault: `parameters.docs.canvas.sourceState` or `'hidden'`\n\nSpecifies the initial state of the source panel.\n\n*   **hidden**: the source panel is hidden by default\n*   **shown**: the source panel is shown by default\n*   **none**: the source panel is not available and the button to show it is not rendered\n\n### [`story`](#story)\n\nType: `StoryProps['inline'] | StoryProps['height'] | StoryProps['autoplay']`\n\nSpecifies the props passed to the inner `Story` block. For more information, see the `Story` Doc Block [documentation](https://storybook.js.org/docs/api/doc-blocks/doc-block-story).\n\n### [`withToolbar`](#withtoolbar)\n\nType: `boolean`\n\nDefault: `parameters.docs.canvas.withToolbar`\n\nDetermines whether to render a toolbar containing tools to interact with the story.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-addons",
    "markdown": "# StorybookChromatic\n\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n \nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  addons: [\n    '@storybook/addon-essentials',\n    {\n      name: '@storybook/addon-styling-webpack',\n      options: {\n        rules: [\n          {\n            test: /\\.css$/,\n            use: [\n              'style-loader',\n              'css-loader',\n              {\n                loader: 'postcss-loader',\n                options: {\n                  implementation: require.resolve('postcss'),\n                },\n              },\n            ],\n          },\n        ],\n      },\n    },\n  ],\n};\n \nexport default config;\n```",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-colorpalette",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nThe `ColorPalette` block allows you to document all color-related items (e.g., swatches) used throughout your project.\n\n![Screenshot of ColorPalette and ColorItem blocks](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-colorpalette.png&w=3840&q=75)\n\n## [ColorPalette](#colorpalette)\n\n`ColorPalette` is configured with the following props:\n\n### [`children`](#children)\n\nType: `React.ReactNode`\n\n`ColorPalette` expects only `ColorItem` children.\n\n## [ColorItem](#coloritem)\n\n`ColorItem` is configured with the following props:\n\n### [`colors`](#colors)\n\n(**Required**)\n\nType: `string[] | { [key: string]: string }`\n\nProvides the list of colors to be displayed. Accepts any valid CSS color format (hex, RGB, HSL, etc.). When an object is provided, the keys will be displayed above the values.\n\n### [`subtitle`](#subtitle)\n\n(**Required**)\n\nType: `string`\n\nProvides an additional description of the color.\n\n### [`title`](#title)\n\n(**Required**)\n\nType: `string`\n\nSets the name of the color to be displayed.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-controls",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nThe `Controls` block can be used to show a dynamic table of args for a given story, as a way to document its interface, and to allow you to change the args for a (separately) rendered story (via the [`Story`](https://storybook.js.org/docs/api/doc-blocks/doc-block-story) or [`Canvas`](https://storybook.js.org/docs/api/doc-blocks/doc-block-canvas) blocks).\n\nIf you’re looking for a static table that shows a component's arg types with no controls, see the [`ArgTypes`](https://storybook.js.org/docs/api/doc-blocks/doc-block-argtypes) block instead.\n\n![Screenshot of Controls block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-controls.png&w=3840&q=75)\n\n## [Controls](#controls)\n\nConfiguring with props **and** parameters\n\nℹ️ Like most blocks, the `Controls` block is configured with props in MDX. Many of those props derive their default value from a corresponding [parameter](https://storybook.js.org/docs/writing-stories/parameters) in the block's namespace, `parameters.docs.controls`.\n\nThe following `exclude` configurations are equivalent:\n\nThe example above applied the parameter at the [component](https://storybook.js.org/docs/writing-stories/parameters#component-parameters) (or meta) level, but it could also be applied at the [project](https://storybook.js.org/docs/writing-stories/parameters#global-parameters) or [story](https://storybook.js.org/docs/writing-stories/parameters#story-parameters) level.\n\nThis API configures Controls blocks used within docs pages. To configure the Controls addon panel, see the [Controls addon docs](https://storybook.js.org/docs/essentials/controls). To configure individual controls, you can specify [argTypes](https://storybook.js.org/docs/api/arg-types#control) for each.\n\n### [`exclude`](#exclude)\n\nType: `string[] | RegExp`\n\nDefault: `parameters.docs.controls.exclude`\n\nSpecifies which controls to exclude from the args table. Any controls whose names match the regex or are part of the array will be left out.\n\n### [`include`](#include)\n\nType: `string[] | RegExp`\n\nDefault: `parameters.docs.controls.include`\n\nSpecifies which controls to include in the args table. Any controls whose names don't match the regex or are not part of the array will be left out.\n\n### [`of`](#of)\n\nType: Story export or CSF file exports\n\nSpecifies which story to get the controls from. If a CSF file exports is provided, it will use the primary (first) story in the file.\n\n### [`sort`](#sort)\n\nType: `'none' | 'alpha' | 'requiredFirst'`\n\nDefault: `parameters.docs.controls.sort` or `'none'`\n\nSpecifies how the controls are sorted.\n\n*   **none**: Unsorted, displayed in the same order the controls are processed in\n*   **alpha**: Sorted alphabetically, by the arg type's name\n*   **requiredFirst**: Same as `alpha`, with any required controls displayed first",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-babel",
    "markdown": "# StorybookChromatic\n\nParent: [main.js|ts configuration](https://storybook.js.org/docs/api/main-config/main-config)\n\nType: `(config: Babel.Config, options: Options) => Babel.Config | Promise<Babel.Config>`\n\nCustomize Storybook's [Babel](https://babeljs.io/) setup.\n\n[Addon authors](https://storybook.js.org/docs/addons/writing-presets#babel) should use [`babelDefault`](https://storybook.js.org/docs/api/main-config/main-config-babel-default) instead, which is applied to the preview config before any user presets have been applied.\n\n## [`Babel.Config`](#babelconfig)\n\nThe options provided by [Babel](https://babeljs.io/docs/options) are only applicable if you've enabled the [`@storybook/addon-webpack5-compiler-babel`](https://storybook.js.org/addons/@storybook/addon-webpack5-compiler-babel) addon.\n\nIf you have an existing Babel configuration file (e.g., `.babelrc`), it will be automatically detected and used by Storybook without any additional configuration required.\n\n## [`Options`](#options)\n\nType: `{ configType?: 'DEVELOPMENT' | 'PRODUCTION' }`\n\nThere are other options that are difficult to document here. Please introspect the type definition for more information.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-description",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nThe `Description` block displays the description for a component, story, or meta, obtained from their respective JSDoc comments.\n\n![Screenshot of Description block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-title-subtitle-description.png&w=3840&q=75)\n\n## [Description](#description)\n\n`Description` is configured with the following props:\n\n### [`of`](#of)\n\nType: Story export or CSF file exports\n\nSpecifies where to pull the description from. It can either point to a story or a meta, depending on which description you want to show.\n\nDescriptions are pulled from the JSDoc comments or parameters, and they are rendered as markdown. See [Writing descriptions](#writing-descriptions) for more details.\n\n## [Writing descriptions](#writing-descriptions)\n\nThere are multiple places to write the description of a component/story, depending on what you want to achieve. Descriptions can be written at the story level to describe each story of a component, or they can be written at the meta or component level to describe the component in general.\n\nDescriptions can be written as [JSDoc comments](https://jsdoc.app/about-getting-started.html) above stories, meta, or components. Alternatively they can also be specified in [`parameters`](https://storybook.js.org/docs/writing-stories/parameters). To describe a story via parameters instead of comments, add it to `parameters.docs.description.story`; to describe meta/component, add it to `parameters.docs.description.component`.\n\nWe recommend using JSDoc comments for descriptions, and only use the `parameters.docs.description.X` properties in situations where comments are not possible to write for some reason, or where you want the description shown in Storybook to be different from the comments. Comments provide a better writing experience as you don’t have to worry about indentation, and they are more discoverable for other developers that are exploring the story/component sources.\n\nWhen documenting a story, reference a story export in the `of` prop (see below) and the Description block will look for descriptions in the following order:\n\n1.  `parameters.docs.description.story` in the story\n2.  JSDoc comments above the story\n\nWhen documenting a component, reference a meta export in the `of` prop (see below) and the Description block will look for descriptions in the following order:\n\n1.  `parameters.docs.description.component` in the meta\n2.  JSDoc comments above the meta\n3.  JSDoc comments above the component\n\nThis flow gives you powerful ways to override the description for each scenario. Take the following example:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-build",
    "markdown": "# StorybookChromatic\n\nParent: [main.js|ts configuration](https://storybook.js.org/docs/api/main-config/main-config)\n\nType: `TestBuildConfig`\n\nProvides configuration options to optimize Storybook's production build output.\n\n## [`test`](#test)\n\nType: `TestBuildFlags`\n\nConfigures Storybook's production builds for performance testing purposes by disabling certain features from the build. When running `build-storybook`, this feature is enabled by setting the `--test` [flag](https://storybook.js.org/docs/api/cli-options#build).\n\nThe options documented on this page are automatically enabled when the `--test` flag is provided to the `build-storybook` command. We encourage you to override these options only if you need to disable a specific feature for your project or if you are debugging a build issue.\n\n### [`test.disableBlocks`](#testdisableblocks)\n\nType: `boolean`\n\nExcludes the `@storybook/blocks` package from the build, which generates automatic documentation with [Docs Blocks](https://storybook.js.org/docs/writing-docs/doc-blocks).\n\n### [`test.disabledAddons`](#testdisabledaddons)\n\nType: `string[]`\n\nSets the list of addons that will disabled in the build output.\n\n### [`test.disableMDXEntries`](#testdisablemdxentries)\n\nType: `boolean`\n\nEnabling this option removes user-written documentation entries in MDX format from the build.\n\n### [`test.disableAutoDocs`](#testdisableautodocs)\n\nType: `boolean`\n\nPrevents automatic documentation generated with the [autodocs](https://storybook.js.org/docs/writing-docs/autodocs) feature from being included in the build.\n\n### [`test.disableDocgen`](#testdisabledocgen)\n\nType: `boolean`\n\nDisables [automatic argType](https://storybook.js.org/docs/api/arg-types#automatic-argtype-inference) and component property inference with any of the supported static analysis tools based on the framework you are using.\n\n### [`test.disableSourcemaps`](#testdisablesourcemaps)\n\nType: `boolean`\n\nOverrides the default behavior of generating source maps for the build.\n\n### [`test.disableTreeShaking`](#testdisabletreeshaking)\n\nType: `boolean`\n\nDisables [tree shaking](https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking) in the build.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-babel-default",
    "markdown": "# StorybookChromatic\n\nParent: [main.js|ts configuration](https://storybook.js.org/docs/api/main-config/main-config)\n\nType: `(config: Babel.Config, options: Options) => Babel.Config | Promise<Babel.Config>`\n\n`babelDefault` allows customization of Storybook's [Babel](https://babeljs.io/) setup. It is applied to the preview config before any user presets have been applied, which makes it useful and recommended for [addon authors](https://storybook.js.org/docs/addons/writing-presets#babel) so that the end user's [`babel`](https://storybook.js.org/docs/api/main-config/main-config-babel) setup can override it.\n\nTo adjust your Storybook's Babel setup directly—not via an addon—use [`babel`](https://storybook.js.org/docs/api/main-config/main-config-babel) instead.\n\n## [`Babel.Config`](#babelconfig)\n\nThe options provided by [Babel](https://babeljs.io/docs/options) are only applicable if you've enabled the [`@storybook/addon-webpack5-compiler-babel`](https://storybook.js.org/addons/@storybook/addon-webpack5-compiler-babel) addon.\n\n## [`Options`](#options)\n\nType: `{ configType?: 'DEVELOPMENT' | 'PRODUCTION' }`\n\nThere are other options that are difficult to document here. Please introspect the type definition for more information.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-core",
    "markdown": "# StorybookChromatic\n\nParent: [main.js|ts configuration](https://storybook.js.org/docs/api/main-config/main-config)\n\nType:\n\nConfigures Storybook's internal features.\n\n## [`builder`](#builder)\n\nType:\n\nConfigures Storybook's builder, [Vite](https://storybook.js.org/docs/builders/vite) or [Webpack](https://storybook.js.org/docs/builders/webpack).\n\nWith the new [Framework API](https://storybook.js.org/docs/api/new-frameworks), [`framework.options.builder`](https://storybook.js.org/docs/api/main-config/main-config-framework#optionsbuilder) is now the preferred way to configure the builder.\n\nYou should only use `core.builder.options` if you need to configure a builder that is not part of a framework.\n\n## [`channelOptions`](#channeloptions)\n\nType: `ChannelOptions`\n\nConfigures the channel used by Storybook to communicate between the manager and preview.\n\nOnly two properties are likely to be used:\n\n### [`channelOptions.allowFunction`](#channeloptionsallowfunction)\n\nType: `boolean`\n\nDefault: `false`\n\nEnables serializing functions across the channel, which can be a security risk.\n\n### [`channelOptions.maxDepth`](#channeloptionsmaxdepth)\n\nType: `number`\n\nDefault: `3`\n\nThe maximum depth of nested objects to serialize across the channel. Larger values will be slower.\n\n## [`crossOriginIsolated`](#crossoriginisolated)\n\nType: `boolean`\n\nEnable CORS headings to run document in a \"secure context\". See [SharedArrayBuffer security requirements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements)\n\nThis enables these headers in development-mode:\n\n*   `Cross-Origin-Opener-Policy: same-origin`\n*   `Cross-Origin-Embedder-Policy: require-corp`\n\n## [`disableProjectJson`](#disableprojectjson)\n\nType: `boolean`\n\nDisables the generation of `project.json`, a file containing Storybook metadata\n\n## [`disableTelemetry`](#disabletelemetry)\n\nType: `boolean`\n\nDisables Storybook's [telemetry collection](https://storybook.js.org/docs/configure/telemetry).\n\n## [`disableWebpackDefaults`](#disablewebpackdefaults)\n\nType: `boolean`\n\nDisables Storybook's default Webpack configuration.\n\n## [`disableWhatsNewNotifications`](#disablewhatsnewnotifications)\n\nType: `boolean`\n\nDisables the \"What's New\" notifications in the UI for new Storybook versions and ecosystem updates (e.g., [addons](https://storybook.js.org/integrations/), [content](https://storybook.js.org/blog/), etc.).\n\n## [`enableCrashReports`](#enablecrashreports)\n\nType: `boolean`\n\nEnable crash reports to be sent to Storybook [telemetry](https://storybook.js.org/docs/configure/telemetry).\n\n## [`renderer`](#renderer)\n\nType: `RendererName`",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-icongallery",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nThe `IconGallery` block enables you to easily document React icon components associated with your project, displayed in a neat grid.\n\n![Screenshot of IconGallery and IconItem blocks](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-icongallery.png&w=3840&q=75)\n\n## [IconGallery](#icongallery)\n\n`IconGallery` is configured with the following props:\n\n### [`children`](#children)\n\nType: `React.ReactNode`\n\n`IconGallery` expects only `IconItem` children.\n\n## [IconItem](#iconitem)\n\n`IconItem` is configured with the following props:\n\n### [`name`](#name)\n\n(**Required**)\n\nType: `string`\n\nSets the name of the icon.\n\n### [`children`](#children-1)\n\nType: `React.ReactNode`\n\nProvides the icon to be displayed.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-markdown",
    "markdown": "# StorybookChromatic\n\nThe `Markdown` block allows you to import and include plain markdown in your MDX files.\n\n![Screenshot of Markdown block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-markdown.png&w=3840&q=75)\n\nWhen importing markdown files, it’s important to use the `?raw` suffix on the import path to ensure the content is imported as-is, and isn’t being evaluated:\n\n## [Markdown](#markdown)\n\n`Markdown` is configured with the following props:\n\n### [`children`](#children)\n\nType: `string`\n\nProvides the markdown-formatted string to parse and display.\n\n### [`options`](#options)\n\nSpecifies the options passed to the underlying [`markdown-to-jsx` library](https://github.com/probablyup/markdown-to-jsx/blob/main/README.md).\n\n## [Why not import markdown directly?](#why-not-import-markdown-directly)\n\nFrom a purely technical standpoint, we could include the imported markdown directly in the MDX file like this:\n\nHowever, there are small syntactical differences between plain markdown and MDX2. MDX2 is more strict and will interpret certain content as JSX expressions. Here’s an example of a perfectly valid markdown file, that would break if it was handled directly by MDX2:\n\nFurthermore, MDX2 wraps all strings on newlines in `p` tags or similar, meaning that content would render differently between a plain `.md` file and an `.mdx` file.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-env",
    "markdown": "# StorybookChromatic\n\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n \nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  /*\n   * 👇 The `config` argument contains all the other existing environment variables.\n   * Either configured in an `.env` file or configured on the command line.\n   */\n  env: (config) => ({\n    ...config,\n    EXAMPLE_VAR: 'An environment variable configured in Storybook',\n  }),\n};\n \nexport default config;\n```",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-meta",
    "markdown": "# StorybookChromatic\n\nThe `Meta` block is used to [attach](#attached-vs-unattached) a custom MDX docs page alongside a component’s list of stories. It doesn’t render any content, but serves two purposes in an MDX file:\n\n*   Attaches the MDX file to a component and its stories, or\n*   Controls the location of the unattached docs entry in the sidebar.\n\nThe Meta block doesn’t render anything visible.\n\n`Meta` is configured with the following props:\n\n### [`isTemplate`](#istemplate)\n\nType: `boolean`\n\nDetermines whether the MDX file serves as an [automatic docs template](https://storybook.js.org/docs/writing-docs/autodocs#with-mdx). When true, the MDX file is not indexed as it normally would be.\n\n### [`name`](#name)\n\nType: `string`\n\nSets the name of the [attached](#attached-vs-unattached) doc entry. You can attach more than one MDX file to the same component in the sidebar by setting different names for each file's `Meta`.\n\n### [`of`](#of)\n\nType: CSF file exports\n\nSpecifies which CSF file is [attached](#attached-vs-unattached) to this MDX file. Pass the **full set of exports** from the CSF file (not the default export!).\n\nAttaching an MDX file to a component’s stories with the `of` prop serves two purposes:\n\n1.  Ensures the MDX content appears in the sidebar inside the component’s story list. By default, it will be named whatever the `docs.defaultName` (which defaults to `\"Docs\"`) option is set to in `main.js`. But this can be overridden with the [`name` prop](#name).\n2.  Attaches the component and its stories to the MDX file, allowing you to use other doc blocks in “attached” mode (for instance to use the `Stories` block).\n\nThe `of` prop is optional. If you don’t want to attach a specific CSF file to this MDX file, you can either use the `title` prop to control the location, or emit `Meta` entirely, and let [autotitle](https://storybook.js.org/docs/configure/user-interface/sidebar-and-urls#csf-30-auto-titles) decide where it goes.\n\n### [`title`](#title)\n\nType: `string`\n\nSets the title of an [unattached](#attached-vs-unattached) MDX file.\n\nIf you want to change the sorting of the docs entry with the component’s stories, use [Story Sorting](https://storybook.js.org/docs/writing-stories/naming-components-and-hierarchy#sorting-stories), or add specific MDX files to your `stories` field in `main.js` in order.\n\n## [Attached vs. unattached](#attached-vs-unattached)\n\nIn Storybook, a docs entry (MDX file) is \"attached\" when it is associated with a stories file, via `Meta`'s [`of` prop](#of). Attached docs entries display next to the stories list under the component in the sidebar.\n\n\"Unattached\" docs entries are not associated with a stories file and can be displayed anywhere in the sidebar via `Meta`'s [`title` prop](#title).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-docs",
    "markdown": "# StorybookChromatic\n\n## docs\n\nParent: [main.js|ts configuration](https://storybook.js.org/docs/api/main-config/main-config)\n\nType:\n\nConfigures Storybook's [auto-generated documentation](https://storybook.js.org/docs/writing-docs/autodocs).\n\n## [`autodocs`](#autodocs)\n\nType: `boolean | 'tag'`\n\nDefault: `'tag'`\n\nEnables or disables automatic documentation for stories.\n\n*   `true`: Enables it for all stories\n*   `false`: Disables it for all stories\n*   `'tag'`: Enables it for stories tagged with `'autodocs'`\n\n## [`defaultName`](#defaultname)\n\nType: `string`\n\nDefault: `'Docs'`\n\nName used for generated documentation pages.\n\n## [`docsMode`](#docsmode)\n\nType: `boolean`\n\nOnly show documentation pages in the sidebar (usually set with the `--docs` CLI flag).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-features",
    "markdown": "# StorybookChromatic\n\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n \nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  features: {\n    legacyDecoratorFileOrder: true,\n  },\n};\n \nexport default config;\n```",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-indexers",
    "markdown": "# StorybookChromatic\n\n(⚠️ **Experimental**)\n\nWhile this feature is experimental, it must be specified by the `experimental_indexers` property of [`StorybookConfig`](https://storybook.js.org/docs/api/main-config/main-config).\n\nParent: [main.js|ts configuration](https://storybook.js.org/docs/api/main-config/main-config)\n\nType: `(existingIndexers: Indexer[]) => Promise<Indexer[]>`\n\nIndexers are responsible for building Storybook's index of stories—the list of all stories and a subset of their metadata like `id`, `title`, `tags`, and more. The index can be read at the `/index.json` route of your Storybook.\n\nThe indexers API is an advanced feature that allows you to customize Storybook's indexers, which dictate how Storybook indexes and parses files into story entries. This adds more flexibility to how you can write stories, including which language stories are defined in or where to get stories from.\n\nThey are defined as a function that returns the full list of indexers, including the existing ones. This allows you to add your own indexer to the list, or to replace an existing one:\n\nUnless your indexer is doing something relatively trivial (e.g. [indexing stories with a different naming convention](https://storybook.js.org/docs/configure/user-interface/sidebar-and-urls#story-indexers)), in addition to indexing the file, you will likely need to [transpile it to CSF](#transpiling-to-csf) so that Storybook can read them in the browser.\n\n## [`Indexer`](#indexer)\n\nType:\n\nSpecifies which files to index and how to index them as stories.\n\n### [`test`](#test)\n\n(Required)\n\nType: `RegExp`\n\nA regular expression run against file names included in the [`stories`](https://storybook.js.org/docs/api/main-config/main-config-stories) configuration that should match all files to be handled by this indexer.\n\n### [`createIndex`](#createindex)\n\n(Required)\n\nType: `(fileName: string, options: IndexerOptions) => Promise<IndexInput[]>`\n\nFunction that accepts a single CSF file and returns a list of entries to index.\n\n#### [`fileName`](#filename)\n\nType: `string`\n\nThe name of the CSF file used to create entries to index.\n\n#### [`IndexerOptions`](#indexeroptions)\n\nType:\n\nOptions for indexing the file.\n\n##### `makeTitle`\n\nType: `(userTitle?: string) => string`\n\nA function that takes a user-provided title and returns a formatted title for the index entry, which is used in the sidebar. If no user title is provided, one is automatically generated based on the file name and path.\n\nSee [`IndexInput.title`](#title) for example usage.\n\n#### [`IndexInput`](#indexinput)\n\nType:\n\nAn object representing a story to be added to the stories index.\n\n##### `exportName`\n\n(Required)\n\nType: `string`\n\nFor each `IndexInput`, the indexer will add this export (from the file found at `importPath`) as an entry in the index.\n\n##### `importPath`\n\n(Required)\n\nType: `string`\n\nThe file to import from, e.g. the [CSF](https://storybook.js.org/docs/api/csf) file.\n\nIt is likely that the [`fileName`](#filename) being indexed is not CSF, in which you will need to [transpile it to CSF](#transpiling-to-csf) so that Storybook can read it in the browser.\n\n##### `type`\n\n(Required)\n\nType: `'story'`\n\nThe type of entry.\n\n##### `rawComponentPath`\n\nType: `string`\n\nThe raw path/package of the file that provides `meta.component`, if one exists.\n\n##### `metaId`\n\nType: `string`\n\nDefault: Auto-generated from [`title`](#title)\n\nDefine the custom id for meta of the entry.\n\nIf specified, the export default (meta) in the CSF file _must_ have a corresponding `id` property, to be correctly matched.\n\n##### `name`\n\nType: `string`\n\nDefault: Auto-generated from [`exportName`](#exportname)\n\nThe name of the entry.\n\n##### `tags`\n\nType: `string[]`\n\nTags for filtering entries in Storybook and its tools.\n\n##### `title`\n\nType: `string`\n\nDefault: Auto-generated from default export of [`importPath`](#importpath)\n\nDetermines the location of the entry in the sidebar.\n\nMost of the time, you should **not** specify a title, so that your indexer will use the default naming behavior. When specifying a title, you **must** use the [`makeTitle`](#maketitle) function provided in [`IndexerOptions`](#indexeroptions) to also use this behavior. For example, here's an indexer that merely appends a \"Custom\" prefix to the title derived from the file name:\n\n##### `__id`\n\nType: `string`\n\nDefault: Auto-generated from [`title`](#title)/[`metaId`](#metaid) and [`exportName`](#exportname)\n\nDefine the custom id for the story of the entry.\n\nIf specified, the story in the CSF file **must** have a corresponding `__id` property, to be correctly matched.\n\nOnly use this if you need to override the auto-generated id.\n\n## [Transpiling to CSF](#transpiling-to-csf)\n\nThe value of [`importPath`](#importpath) in an [`IndexInput`](#indexinput) must resolve to a [CSF](https://storybook.js.org/docs/api/csf) file. Most custom indexers, however, are only necessary because the input is _not_ CSF. Therefore, you will likely need to transpile the input to CSF, so that Storybook can read it in the browser and render your stories.\n\nTranspiling the custom source format to CSF is beyond the scope of this documentation. This transpilation is often done at the builder level ([Vite](https://storybook.js.org/docs/builders/vite) and/or [Webpack](https://storybook.js.org/docs/builders/webpack)), and we recommend using [unplugin](https://github.com/unjs/unplugin) to create plugins for multiple builders.\n\nThe general architecture looks something like this:\n\n![Architecture diagram showing how a custom indexer indexes stories from a source file](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fmain-config-indexers-arch-indexer.jpg&w=3840&q=75)\n\n1.  Using the [`stories`](https://storybook.js.org/docs/api/main-config/main-config-stories) configuration, Storybook finds all files that match the [`test`](#test) property of your indexer\n2.  Storybook passes each matching file to your indexer's [`createIndex` function](#createindex), which uses the file contents to generate and return a list of index entries (stories) to add to the index\n3.  The index populates the sidebar in the Storybook UI\n\n![Architecture diagram showing how a build plugin transforms a source file into CSF](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fmain-config-indexers-arch-build-plugin.jpg&w=3840&q=75)\n\n1.  In the Storybook UI, the user navigates to a URL matching the story id and the browser requests the CSF file specified by the [`importPath`](#importpath) property of the index entry\n2.  Back on the server, your builder plugin transpiles the source file to CSF, and serves it to the client\n3.  The Storybook UI reads the CSF file, imports the story specified by [`exportName`](#exportname), and renders it\n\nLet's look at an example of how this might work.\n\nFirst, here's an example of a non-CSF source file:\n\nThe builder plugin would then:\n\n1.  Receive and read the source file\n2.  Import the exported `generateStories` function\n3.  Run the function to generate the stories\n4.  Write the stories to a CSF file\n\nThat resulting CSF file would then be indexed by Storybook. It would look something like this:\n\n### [Examples](#examples)\n\nSome example usages of custom indexers include:\n\nGenerating stories dynamically from fixture data or API endpoints\n\nThis indexer generates stories for components based on JSON fixture data. It looks for `*.stories.json` files in the project, adds them to the index and separately converts their content to CSF.\n\nAn example input JSON file could look like this:\n\nA builder plugin will then need to transform the JSON file into a regular CSF file. This transformation could be done with a Vite plugin similar to this:\n\nGenerating stories with an alternative API\n\nYou can use a custom indexer and builder plugin to create your API to define stories extending the CSF format. To learn more, see the following [proof of concept](https://stackblitz.com/edit/github-h2rgfk?file=README.mdx) to set up a custom indexer to generate stories dynamically. It contains everything needed to support such a feature, including the indexer, a Vite plugin, and a Webpack loader.\n\nDefining stories in non-JavaScript language\n\nCustom indexers can be used for an advanced purpose: defining stories in any language, including template languages, and converting the files to CSF. To see examples of this in action, you can refer to [`@storybook/addon-svelte-csf`](https://github.com/storybookjs/addon-svelte-csf) for Svelte template syntax and [`storybook-vue-addon`](https://github.com/tobiasdiez/storybook-vue-addon) for Vue template syntax.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-primary",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nThe `Primary` block displays the primary (first defined in the stories file) story, in a [`Story`](https://storybook.js.org/docs/api/doc-blocks/doc-block-story) block. It is typically rendered immediately under the title in a docs entry.\n\n![Screenshot of Primary block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-primary.png&w=3840&q=75)\n\n## [Primary](#primary)\n\n`Primary` is configured with the following props:\n\n### [`of`](#of)\n\nType: CSF file exports\n\nSpecifies which CSF file is used to find the first story, which is then rendered by this block. Pass the full set of exports from the CSF file (not the default export!).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-source",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nThe `Source` block is used to render a snippet of source code directly.\n\n![Screenshot of Source block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-source.png&w=3840&q=75)\n\n## [Source](#source)\n\nConfiguring with props **and** parameters\n\nℹ️ Like most blocks, the `Source` block is configured with props in MDX. Many of those props derive their default value from a corresponding [parameter](https://storybook.js.org/docs/writing-stories/parameters) in the block's namespace, `parameters.docs.source`.\n\nThe following `language` configurations are equivalent:\n\nThe example above applied the parameter at the [story](https://storybook.js.org/docs/writing-stories/parameters#story-parameters) level, but it could also be applied at the [component](https://storybook.js.org/docs/writing-stories/parameters#component-parameters) (or meta) level or [project](https://storybook.js.org/docs/writing-stories/parameters#global-parameters) level.\n\n### [`code`](#code)\n\nType: `string`\n\nDefault: `parameters.docs.source.code`\n\nProvides the source code to be rendered.\n\n### [`dark`](#dark)\n\nType: `boolean`\n\nDefault: `parameters.docs.source.dark`\n\nDetermines if the snippet is rendered in dark mode.\n\nLight mode is only supported when the `Source` block is rendered independently. When rendered as part of a [`Canvas` block](https://storybook.js.org/docs/api/doc-blocks/doc-block-canvas)—like it is in [autodocs](https://storybook.js.org/docs/writing-docs/autodocs)—it will always use dark mode.\n\n### [`excludeDecorators`](#excludedecorators)\n\nType: `boolean`\n\nDefault: `parameters.docs.source.excludeDecorators`\n\nDetermines if [decorators](https://storybook.js.org/docs/writing-stories/decorators) are rendered in the source code snippet.\n\n### [`format`](#format)\n\nType: `boolean | 'dedent' | BuiltInParserName`\n\nDefault: `parameters.docs.source.format` or `true`\n\nSpecifies the formatting used on source code. Both `true` and `'dedent'` have the same effect of removing any extraneous indentation. Supports all valid [prettier parser names](https://prettier.io/docs/en/configuration.html#setting-the-parserdocsenoptionshtmlparser-option).\n\n### [`language`](#language)\n\nType:\n\nDefault: `parameters.docs.source.language` or `'jsx'`\n\nSpecifies the language used for syntax highlighting.\n\n### [`of`](#of)\n\nType: Story export\n\nSpecifies which story's source is rendered.\n\n### [`transform`](#transform)\n\nType: `(code: string, storyContext: StoryContext) => string`\n\nDefault: `parameters.docs.source.transform`\n\nA function to dynamically transform the source before being rendered, based on the original source and any story context necessary. The returned string is displayed as-is. If both [`code`](#code) and `transform` are specified, `transform` will be ignored.\n\n### [`type`](#type)\n\nType: `'auto' | 'code' | 'dynamic'`\n\nDefault: `parameters.docs.source.type` or `'auto'`\n\nSpecifies how the source code is rendered.\n\n*   **auto**: Same as **dynamic**, if the story's `render` function accepts args inputs and **dynamic** is supported by the framework in use; otherwise same as **code**\n*   **code**: Renders the value of [`code` prop](#code), otherwise renders static story source\n*   **dynamic**: Renders the story source with dynamically updated arg values\n\nNote that dynamic snippets will only work if the story uses [`args`](https://storybook.js.org/docs/writing-stories/args) and the [`Story` block](https://storybook.js.org/docs/api/doc-blocks/doc-block-story) for that story is rendered along with the `Source` block.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-stories",
    "markdown": "# StorybookChromatic\n\n(**Required**)\n\nParent: [main.js|ts configuration](https://storybook.js.org/docs/api/main-config/main-config)\n\nType:\n\nConfigures Storybook to load stories from the specified locations. The intention is for you to colocate a story file along with the component it documents:\n\nIf you want to use a different naming convention, you can alter the glob using the syntax supported by [picomatch](https://github.com/micromatch/picomatch#globbing-features).\n\nKeep in mind that some addons may assume Storybook's default naming convention.\n\n## [With an array of globs](#with-an-array-of-globs)\n\nStorybook will load stories from your project as found by this array of globs (pattern matching strings).\n\nStories are loaded in the order they are defined in the array. This allows you to control the order in which stories are displayed in the sidebar:\n\n## [With a configuration object](#with-a-configuration-object)\n\nAdditionally, you can customize your Storybook configuration to load your stories based on a configuration object. This object is of the type `StoriesSpecifier`, defined below.\n\nFor example, if you wanted to load your stories from a `packages/components` directory, you could adjust your `stories` configuration field into the following:\n\nWhen Storybook starts, it will look for any file containing the `stories` extension inside the `packages/components` directory and generate the titles for your stories.\n\n### [`StoriesSpecifier`](#storiesspecifier)\n\nType:\n\n#### [`StoriesSpecifier.directory`](#storiesspecifierdirectory)\n\n(**Required**)\n\nType: `string`\n\nWhere to start looking for story files, relative to the root of your project.\n\n#### [`StoriesSpecifier.files`](#storiesspecifierfiles)\n\nType: `string`\n\nDefault: `'**/*.@(mdx|stories.@(js|jsx|mjs|ts|tsx))'`\n\nA glob, relative to `StoriesSpecifier.directory` (with no leading `./`), that matches the filenames to load.\n\n#### [`StoriesSpecifier.titlePrefix`](#storiesspecifiertitleprefix)\n\nType: `string`\n\nDefault: `''`\n\nWhen [auto-titling](https://storybook.js.org/docs/configure/user-interface/sidebar-and-urls#csf-30-auto-titles), prefix used when generating the title for your stories.\n\n## [With a custom implementation](#with-a-custom-implementation)\n\n💡 Storybook now statically analyzes the configuration file to improve performance. Loading stories with a custom implementation may de-optimize or break this ability.\n\nYou can also adjust your Storybook configuration and implement custom logic to load your stories. For example, suppose you were working on a project that includes a particular pattern that the conventional ways of loading stories could not solve. In that case, you could adjust your configuration as follows:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-stories",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nThe `Stories` block renders the full collection of stories in a stories file.\n\n![Screenshot of Stories block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-stories.png&w=3840&q=75)\n\n## [Stories](#stories)\n\n`Stories` is configured with the following props:\n\n### [`includePrimary`](#includeprimary)\n\nType: `boolean`\n\nDefault: `true`\n\nDetermines if the collection of stories includes the primary (first) story.\n\nIf a stories file contains only one story and `includePrimary={true}`, the `Stories` block will render nothing to avoid a potentially confusing situation.\n\n### [`title`](#title)\n\nType: `string`\n\nDefault: `'Stories'`\n\nSets the heading content preceding the collection of stories.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-log-level",
    "markdown": "# StorybookChromatic\n\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n \nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  logLevel: 'debug',\n};\n \nexport default config;\n```",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-story",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nStories (component tests) are Storybook's fundamental building blocks.\n\nIn Storybook Docs, you can render any of your stories from your CSF files in the context of an MDX file with all annotations (parameters, args, loaders, decorators, play function) applied using the `Story` block.\n\nTypically you want to use the [`Canvas` block](https://storybook.js.org/docs/api/doc-blocks/doc-block-canvas) to render a story with a surrounding border and the source block, but you can use the `Story` block to render just the story.\n\n![Screenshot of Story block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-story.png&w=3840&q=75)\n\n## [Story](#story)\n\nConfiguring with props **and** parameters\n\nℹ️ Like most blocks, the `Story` block is configured with props in MDX. Many of those props derive their default value from a corresponding [parameter](https://storybook.js.org/docs/writing-stories/parameters) in the block's namespace, `parameters.docs.story`.\n\nThe following `autoplay` configurations are equivalent:\n\nThe example above applied the parameter at the [story](https://storybook.js.org/docs/writing-stories/parameters#story-parameters) level, but it could also be applied at the [component](https://storybook.js.org/docs/writing-stories/parameters#component-parameters) (or meta) level or [project](https://storybook.js.org/docs/writing-stories/parameters#global-parameters) level.\n\n### [`autoplay`](#autoplay)\n\nType: `boolean`\n\nDefault: `parameters.docs.story.autoplay`\n\nDetermines whether a story's play function runs.\n\nBecause all stories render simultaneously in docs entries, play functions can perform arbitrary actions that can interact with each other (such as stealing focus or scrolling the screen). For that reason, by default, stories **do not run play functions in docs mode**.\n\nHowever, if you know your play function is “safe” to run in docs, you can use this prop to run it automatically.\n\n### [`height`](#height)\n\nType: `string`\n\nDefault: `parameters.docs.story.height`\n\nSet a minimum height (note for an iframe this is the actual height) when rendering a story in an iframe or inline. This overrides `parameters.docs.story.iframeHeight` for iframes.\n\n### [`inline`](#inline)\n\nType: `boolean`\n\nDefault: `parameters.docs.story.inline` or `true` (for [supported frameworks](https://storybook.js.org/docs/configure/integration/frameworks-feature-support))\n\nDetermines whether the story is rendered `inline` (in the same browser frame as the other docs content) or in an iframe.\n\nSetting the `inline` option to false will prevent the associated [controls](https://storybook.js.org/docs/api/doc-blocks/doc-block-controls) from updating the story within the documentation page. This is a known limitation of the current implementation and will be addressed in a future release.\n\n### [`meta`](#meta)\n\nType: CSF file exports\n\nSpecifies the CSF file to which the story is associated.\n\nYou can render a story from a CSF file that you haven’t attached to the MDX file (via `Meta`) by using the `meta` prop. Pass the **full set of exports** from the CSF file (not the default export!).\n\n### [`of`](#of)\n\nType: Story export\n\nSpecifies which story is rendered by the `Story` block. If no `of` is defined and the MDX file is [attached](https://storybook.js.org/docs/api/doc-blocks/doc-block-meta#attached-vs-unattached), the primary (first) story will be rendered.\n\nWatch a video tutorial on the Storybook channel",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-manager-head",
    "markdown": "# StorybookChromatic\n\nParent: [main.js|ts configuration](https://storybook.js.org/docs/api/main-config/main-config)\n\nType: `(head: string) => string`\n\nProgrammatically adjust the manager's `<head>` of your Storybook. For example, load a custom font or add a script. Most often used by [addon authors](https://storybook.js.org/docs/addons/writing-presets#ui-configuration).\n\nIf you don't need to programmatically adjust the manager head, you can add scripts and styles to `manager-head.html` instead.\n\nFor example, you can conditionally add scripts or styles, depending on the environment:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-preview-body",
    "markdown": "# StorybookChromatic\n\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n \nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  previewBody: (body) => `\n    ${body}\n    ${\n      process.env.ANALYTICS_ID ? '<script src=\"https://cdn.example.com/analytics.js\"></script>' : ''\n    }\n  `,\n};\n \nexport default config;\n```",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-preview-head",
    "markdown": "# StorybookChromatic\n\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n \nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  previewHead: (head) => `\n    ${head}\n    ${\n      process.env.ANALYTICS_ID ? '<script src=\"https://cdn.example.com/analytics.js\"></script>' : ''\n    }\n  `,\n};\n \nexport default config;\n```",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-subtitle",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nThe `Subtitle` block can serve as a secondary heading for your docs entry.\n\n![Screenshot of Subtitle block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-title-subtitle-description.png&w=3840&q=75)\n\n## [Subtitle](#subtitle)\n\n`Subtitle` is configured with the following props:\n\n### [`children`](#children)\n\nType: `JSX.Element | string`\n\nDefault: `parameters.docs.subtitle`\n\nProvides the content.\n\n### [`of`](#of)\n\nType: CSF file exports\n\nSpecifies which meta's subtitle is displayed.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/doc-blocks/doc-block-title",
    "markdown": "# StorybookChromatic\n\nWatch a video tutorial on the Storybook channel\n\nThe `Title` block serves as the primary heading for your docs entry. It is typically used to provide the component or page name.\n\n![Screenshot of Title block](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fdoc-block-title-subtitle-description.png&w=3840&q=75)\n\n## [Title](#title)\n\n`Title` is configured with the following props:\n\n### [`children`](#children)\n\nType: `JSX.Element | string`\n\nProvides the content. Falls back to value of `title` in an [attached](https://storybook.js.org/docs/api/doc-blocks/doc-block-meta#attached-vs-unattached) CSF file (or value derived from [autotitle](https://storybook.js.org/docs/configure/user-interface/sidebar-and-urls#csf-30-auto-titles)), trimmed to the last segment. For example, if the title value is `'path/to/components/Button'`, the default content is `'Button'`.\n\n### [`of`](#of)\n\nType: CSF file exports\n\nSpecifies which meta's title is displayed.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-refs",
    "markdown": "# StorybookChromatic\n\nParent: [main.js|ts configuration](https://storybook.js.org/docs/api/main-config/main-config)\n\nType:\n\n```\n{ [key: string]:\n  | { title: string; url: string; expanded?: boolean }\n  | (config: { title: string; url: string; expanded?: boolean }) => { title: string; url: string; expanded?: boolean }\n  | { disable: boolean }\n}\n```\n\nConfigures [Storybook composition](https://storybook.js.org/docs/sharing/storybook-composition).\n\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n \nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  refs: {\n    'design-system': {\n      title: 'Storybook Design System',\n      url: 'https://master--5ccbc373887ca40020446347.chromatic.com/',\n      expanded: false, // Optional, true by default\n    },\n  },\n};\n \nexport default config;\n```\n\n## [Using a function](#using-a-function)\n\nYou can use a function to dynamically configure refs:\n\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n \nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n \n  // 👇 Retrieve the current environment from the configType argument\n  refs: (config, { configType }) => {\n    if (configType === 'DEVELOPMENT') {\n      return {\n        react: {\n          title: 'Composed React Storybook running in development mode',\n          url: 'http://localhost:7007',\n        },\n        angular: {\n          title: 'Composed Angular Storybook running in development mode',\n          url: 'http://localhost:7008',\n        },\n      };\n    }\n    return {\n      react: {\n        title: 'Composed React Storybook running in production',\n        url: 'https://your-production-react-storybook-url',\n      },\n      angular: {\n        title: 'Composed Angular Storybook running in production',\n        url: 'https://your-production-angular-storybook-url',\n      },\n    };\n  },\n};\n \nexport default config;\n```\n\n## [Disable a ref](#disable-a-ref)\n\nSome package dependencies automatically [compose their Storybook in yours](https://storybook.js.org/docs/sharing/package-composition). You can disable this behavior by setting `disable` to `true` for the package name:\n\n```\n// Replace your-framework with the framework you are using (e.g., react-webpack5, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n \nconst config: StorybookConfig = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../src/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  refs: {\n    'package-name': { disable: true },\n  },\n};\n \nexport default config;\n```",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-vite-final",
    "markdown": "# StorybookChromatic\n\n```\n// Replace your-framework with the framework you are using (e.g., react-vite, vue3-vite)\nimport type { StorybookConfig } from '@storybook/your-framework';\n \nconst config = {\n  framework: '@storybook/your-framework',\n  stories: ['../src/**/*.mdx', '../stories/**/*.stories.@(js|jsx|mjs|ts|tsx)'],\n  async viteFinal(config, { configType }) {\n    const { mergeConfig } = await import('vite');\n \n    if (configType === 'DEVELOPMENT') {\n      // Your development configuration goes here\n    }\n    if (configType === 'PRODUCTION') {\n      // Your production configuration goes here.\n    }\n    return mergeConfig(config, {\n      // Your environment configuration here\n    });\n  },\n};\n \nexport default config;\n```",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-preview-annotations",
    "markdown": "# StorybookChromatic\n\n```\n// @storybook/nextjs framework's src/preset.ts\n \nimport type { StorybookConfig } from './types';\n \nexport const previewAnnotations: StorybookConfig['previewAnnotations'] = (entry = []) => [\n  ...entry,\n  require.resolve('@storybook/nextjs/preview.js'),\n];\n```",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-swc",
    "markdown": "# StorybookChromatic\n\nParent: [main.js|ts configuration](https://storybook.js.org/docs/api/main-config/main-config)\n\nType: `(config: swc.Options, options: Options) => swc.Options | Promise<swc.Options>`\n\nCustomize Storybook's [SWC](https://swc.rs/) setup for Webpack-based projects enabled via the [`@storybook/addon-webpack5-compiler-swc`](https://storybook.js.org/addons/@storybook/addon-webpack5-compiler-swc) addon based on the supported [frameworks](https://storybook.js.org/docs/configure/integration/frameworks), except Angular, Create React App, Ember.js and Next.js.\n\n## [`SWC.Options`](#swcoptions)\n\nThe options provided by [SWC](https://swc.rs/) are only applicable if you've enabled the [`@storybook/addon-webpack5-compiler-swc`](https://storybook.js.org/addons/@storybook/addon-webpack5-compiler-swc) addon.\n\n## [Options](#options)\n\nType: `{ configType?: 'DEVELOPMENT' | 'PRODUCTION' }`\n\nThere are other options that are difficult to document here. Please introspect the type definition for more information.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-static-dirs",
    "markdown": "# StorybookChromatic\n\nParent: [main.js|ts configuration](https://storybook.js.org/docs/api/main-config/main-config)\n\nType: `(string | { from: string; to: string })[]`\n\nSets a list of directories of [static files](https://storybook.js.org/docs/configure/integration/images-and-assets#serving-static-files-via-storybook-configuration) to be loaded by Storybook.\n\n## [With configuration objects](#with-configuration-objects)\n\nYou can also use a configuration object to define the directories:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/main-config/main-config-typescript",
    "markdown": "# StorybookChromatic\n\nParent: [main.js|ts configuration](https://storybook.js.org/docs/api/main-config/main-config)\n\nType:\n\nConfigures how Storybook handles [TypeScript files](https://storybook.js.org/docs/configure/integration/typescript).\n\n## [`check`](#check)\n\nType: `boolean`\n\nOptionally run [fork-ts-checker-webpack-plugin](https://github.com/TypeStrong/fork-ts-checker-webpack-plugin). Note that because this uses a Webpack plugin, it is only available when using the [Webpack builder](https://storybook.js.org/docs/builders/webpack).\n\n## [`checkOptions`](#checkoptions)\n\nType: `CheckOptions`\n\nOptions to pass to `fork-ts-checker-webpack-plugin`, if [enabled](#check). See [docs for available options](https://github.com/TypeStrong/fork-ts-checker-webpack-plugin/blob/v4.1.6/README.md#options).\n\n## [`reactDocgen`](#reactdocgen)\n\nType: `'react-docgen' | 'react-docgen-typescript' | false`\n\nDefault:\n\n*   `false`: if `@storybook/react` is not installed\n*   `'react-docgen'`: if `@storybook/react` is installed\n\nConfigures which library, if any, Storybook uses to parse React components, [react-docgen](https://github.com/reactjs/react-docgen) or [react-docgen-typescript](https://github.com/styleguidist/react-docgen-typescript). Set to `false` to disable parsing React components. `react-docgen-typescript` invokes the TypeScript compiler, which makes it slow but generally accurate. `react-docgen` performs its own analysis, which is much faster but incomplete.\n\n## [`reactDocgenTypescriptOptions`](#reactdocgentypescriptoptions)\n\nType: `ReactDocgenTypescriptOptions`\n\nConfigures the options to pass to `react-docgen-typescript-plugin` if `react-docgen-typescript` is enabled. See [docs for available options](https://github.com/hipstersmoothie/react-docgen-typescript-plugin).\n\n## [`skipCompiler`](#skipcompiler)\n\nType: `boolean`\n\nDisable parsing of TypeScript files through the compiler, which is used for Webpack5.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/user-interface/storybook-addons",
    "markdown": "# StorybookChromatic\n\nA key strength of Storybook is its extensibility. Use addons to extend and customize Storybook to fit your team’s development workflow.\n\nAddons are integral to the way Storybook works. Many of Storybook's core features are implemented as addons! These addons are installed out of the box with [essentials](https://storybook.js.org/docs/essentials).\n\n## [Addon features](#addon-features)\n\nThe most obvious thing addons affect in Storybook is the UI of Storybook itself. Within the UI the **toolbar** and **addons panel** are the two chief places addons will appear.\n\n![Storybook addons locations](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fconfigure%2Faddon-locations.png&w=3840&q=75)\n\nAddons can also hook into the rendering of your story in the preview pane via injecting their own [decorators](https://storybook.js.org/docs/writing-stories/decorators).\n\nFinally, addons can affect the build setup of Storybook by injecting their own webpack configuration to allow the use of other tools in Storybook. Addons that do only this are often referred to as [presets](https://storybook.js.org/docs/addons/addon-types).\n\n## [Essential, core and community addons](#essential-core-and-community-addons)\n\nThere are many, many Storybook addons, but they can be roughly categorized into three areas:\n\n*   **Essential** addons are core-team developed addons that are considered a part of the out-of-the-box user experience. These ship by default with new Storybook installations.\n*   **Core** addons are developed by the core team. They are kept in sync with the development of Storybook itself and written in idiomatic ways as templates for other addons. They can be found within the [Storybook monorepo](https://github.com/storybookjs/storybook/tree/next/code/addons).\n*   **Community** addons are addons written by the massive Storybook community. They can be found on our [website](https://storybook.js.org/addons/), [GitHub](https://github.com/), and [npm](https://www.npmjs.com/).",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories/mocking-data-and-modules/mocking-modules",
    "markdown": "# StorybookChromatic\n\nComponents can also depend on modules that are imported into the component file. These can be from external packages or internal to your project. When rendering those components in Storybook or testing them, you may want to mock those modules to control their behavior.\n\nThere are two primary approaches to mocking modules in Storybook. They both involve creating a mock file to replace the original module. The difference between the two approaches is how you import the mock file into your component.\n\nFor either approach, relative imports of the mocked module are not supported.\n\n## [Mock files](#mock-files)\n\nTo mock a module, create a file with the same name and in the same directory as the module you want to mock. For example, to mock a module named `session`, create a file next to it named `session.mock.js|ts`, with a few characteristics:\n\n*   It must import the original module using a relative import.\n    *   Using a subpath or alias import would result in it importing itself.\n*   It should re-export all exports from the original module.\n*   It should use the `fn` utility to mock any necessary functionality from the original module.\n*   It should use the [`mockName`](https://vitest.dev/api/mock.html#mockname) method to ensure the name is preserved when minified\n*   It should not introduce side effects that could affect other tests or components. Mock files should be isolated and only affect the module they are mocking.\n\nHere's an example of a mock file for a module named `session`:\n\nWhen you use the `fn` utility to mock a module, you create full [Vitest mock functions](https://vitest.dev/api/mock.html). See [below](#using-mocked-modules-in-stories) for examples of how you can use a mocked module in your stories.\n\n### [Mock files for external modules](#mock-files-for-external-modules)\n\nYou can't directly mock an external module like [`uuid`](https://github.com/uuidjs/uuid) or `node:fs`. Instead, you must wrap it in your own module, which you can mock like any other internal one. For example, with `uuid`, you could do the following:\n\nAnd create a mock for the wrapper:\n\n## [Subpath imports](#subpath-imports)\n\nThe recommended method for mocking modules is to use [subpath imports](https://nodejs.org/api/packages.html#subpath-imports), a feature of Node packages that is supported by both [Vite](https://storybook.js.org/docs/builders/vite) and [Webpack](https://storybook.js.org/docs/builders/webpack).\n\nTo configure subpath imports, you define the `imports` property in your project's `package.json` file. This property maps the subpath to the actual file path. The example below configures subpath imports for four internal modules:\n\nThere are three aspects to this configuration worth noting:\n\nFirst, **each subpath must begin with `#`**, to differentiate it from a regular module path. The `#*` entry is a catch-all that maps all subpaths to the root directory.\n\nSecond, the order of the keys is important. The `default` key should come last.\n\nThird, note the **`storybook`, `test`, and `default` keys** in each module's entry. The `storybook` value is used to import the mock file when loaded in Storybook, while the `default` value is used to import the original module when loaded in your project. The `test` condition is also used within Storybook, which allows you to use the same configuration in Storybook and your other tests.\n\nWith the package configuration in place, you can then update your component file to use the subpath import:\n\nSubpath imports will only be correctly resolved and typed when the [`moduleResolution` property](https://www.typescriptlang.org/tsconfig/#moduleResolution) is set to `'Bundler'`, `'NodeNext'`, or `'Node16'` in your TypeScript configuration.\n\nIf you are currently using `'node'`, that is intended for projects using a Node.js version older than v10. Projects written with modern code likely do not need to use `'node'`.\n\nStorybook recommends the [TSConfig Cheat Sheet](https://www.totaltypescript.com/tsconfig-cheat-sheet) for guidance on setting up your TypeScript configuration.\n\n## [Builder aliases](#builder-aliases)\n\nIf your project is unable to use [subpath imports](#subpath-imports), you can configure your Storybook builder to alias the module to the mock file. This will instruct the builder to replace the module with the mock file when bundling your Storybook stories.\n\n## [Using mocked modules in stories](#using-mocked-modules-in-stories)\n\nWhen you use the `fn` utility to mock a module, you create full [Vitest mock functions](https://vitest.dev/api/mock.html) which have many useful methods. For example, you can use the [`mockReturnValue`](https://vitest.dev/api/mock.html#mockreturnvalue) method to set a return value for the mocked function or [`mockImplementation`](https://vitest.dev/api/mock.html#mockimplementation) to define a custom implementation.\n\nHere, we define `beforeEach` on a story (which will run before the story is rendered) to set a mocked return value for the `getUserFromSession` function used by the Page component:\n\nIf you are [writing your stories in TypeScript](https://storybook.js.org/docs/writing-stories/typescript), you must import your mock modules using the full mocked file name to have the functions correctly typed in your stories. You do **not** need to do this in your component files. That's what the [subpath import](#subpath-imports) or [builder alias](#builder-aliases) is for.\n\n### [Spying on mocked modules](#spying-on-mocked-modules)\n\nThe `fn` utility also spies on the original module's functions, which you can use to assert their behavior in your tests. For example, you can use [interaction tests](https://storybook.js.org/docs/writing-tests/interaction-testing) to verify that a function was called with specific arguments.\n\nFor example, this story checks that the `saveNote` function was called when the user clicks the save button:\n\n### [Setting up and cleaning up](#setting-up-and-cleaning-up)\n\nBefore the story renders, you can use the asynchronous `beforeEach` function to perform any setup you need (e.g., configure the mock behavior). This function can be defined at the story, component (which will run for all stories in the file), or project (defined in `.storybook/preview.js|ts`, which will run for all stories in the project).\n\nYou can also return a cleanup function from `beforeEach` which will be called after your story unmounts. This is useful for tasks like unsubscribing observers, etc.\n\nIt is _not_ necessary to restore `fn()` mocks with the cleanup function, as Storybook will already do that automatically before rendering a story. See the [`parameters.test.restoreMocks` API](https://storybook.js.org/docs/api/parameters#restoremocks) for more information.\n\nHere's an example of using the [`mockdate`](https://github.com/boblauer/MockDate) package to mock the [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) and reset it when the story unmounts.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories/mocking-data-and-modules/mocking-providers",
    "markdown": "# StorybookChromatic\n\nComponents can receive data or configuration from context providers. For example, a styled component might access its theme from a ThemeProvider or Redux uses React context to provide components access to app data. To mock a provider, you can wrap your component in a [decorator](https://storybook.js.org/docs/writing-stories/decorators) that includes the necessary context.\n\nNote the file extension above (`.tsx` or `.jsx`). You may need to adjust your preview file's extension to allow use of JSX, depending on your project's settings.\n\nFor another example, reference the [Screens](https://storybook.js.org/tutorials/intro-to-storybook/react/en/screen/) chapter of the Intro to Storybook tutorial, where we mock a Redux provider with mock data.\n\n## [Configuring the mock provider](#configuring-the-mock-provider)\n\nWhen mocking a provider, it may be necessary to configure the provider to supply a different value for individual stories. For example, you might want to test a component with different themes or user roles.\n\nOne way to do this is to define the decorator for each story individually. But if you imagine a scenario where you wish to create stories for each of your components in both light and dark themes, this approach can quickly become cumbersome.\n\nFor a better way, with much less repetition, you can use the [decorator function's second \"context\" argument](https://storybook.js.org/docs/writing-stories/decorators#context-for-mocking) to access a story's [`parameters`](https://storybook.js.org/docs/writing-stories/parameters) and adjust the provided value. This way, you can define the provider once and adjust its value for each story.\n\nFor example, we can adjust the decorator from above to read from `parameters.theme` to determine which theme to provide:\n\nNow, you can define a `theme` parameter in your stories to adjust the theme provided by the decorator:\n\nThis powerful approach allows you to provide any value (theme, user role, mock data, etc.) to your components in a way that is both flexible and maintainable.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/configure/index",
    "markdown": "Storybook",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": null
  },
  {
    "url": "https://storybook.js.org/docs/contribute/documentation/documentation-updates",
    "markdown": "# StorybookChromatic\n\nFix a typo or clarify a section of the docs. This page outlines how to edit the documentation.\n\n## [Find the Markdown file](#find-the-markdown-file)\n\nScroll to the bottom of the document in question, then click ✍️ Edit on GitHub – PRs welcome! This will open the Markdown file on GitHub.\n\n![Storybook documentation edit](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fcontribute%2Fstorybook-edit-docs-optimized.png&w=3840&q=75)\n\nUse GitHub's web editor by clicking the pencil icon on the right-hand corner. Tweak the document to your liking.\n\n![GitHub edit documentation](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fcontribute%2Fgithub-docs-edit-optimized.png&w=3840&q=75)\n\nScroll down to the bottom of the document page on GitHub and describe what you changed and why. Select the `Create a new branch for this commit and start a pull request` option then click the `Propose changes` button.\n\n![Fill the commit information](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fcontribute%2Fstorybook-docs-submit-changes-optimized.png&w=3840&q=75)\n\n## [Create the pull request](#create-the-pull-request)\n\nIn the Storybook repository, create a pull request that describes changes and includes additional context that would help maintainers review. Once you submit the PR, a maintainer will guide you through the triage and merge process.\n\n**Learn more about contributing to Storybook**\n\n*   [RFC process](https://storybook.js.org/docs/contribute/RFC) for authoring feature requests\n*   [Code](https://storybook.js.org/docs/contribute/code) for features and bug fixes\n*   [Frameworks](https://storybook.js.org/docs/contribute/framework) to get started with a new framework\n*   Documentation for documentation improvements, typos, and clarifications\n*   [Examples](https://storybook.js.org/docs/contribute/documentation/new-snippets) for new snippets and examples",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/essentials/index",
    "markdown": "Storybook",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": null
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories/index",
    "markdown": "Storybook",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": null
  },
  {
    "url": "https://storybook.js.org/docs/api/portable-stories/portable-stories-vitest",
    "markdown": "# StorybookChromatic\n\nPortable stories are Storybook [stories](https://storybook.js.org/docs/writing-stories) which can be used in external environments, such as [Vitest](https://vitest.dev/).\n\nNormally, Storybook composes a story and its [annotations](#annotations) automatically, as part of the [story pipeline](#story-pipeline). When using stories in Vitest tests, you must handle the story pipeline yourself, which is what the [`composeStories`](#composestories) and [`composeStory`](#composestory) functions enable.\n\n**Using `Next.js`?** Next.js requires specific configuration that is only available in [Jest](https://storybook.js.org/docs/api/portable-stories/portable-stories-jest). The portable stories API is not supported in Next.js with Vitest.\n\n## [composeStories](#composestories)\n\n`composeStories` will process the component's stories you specify, compose each of them with the necessary [annotations](#annotations), and return an object containing the composed stories.\n\nBy default, the composed story will render the component with the [args](https://storybook.js.org/docs/writing-stories/args) that are defined in the story. You can also pass any props to the component in your test and those props will override the values passed in the story's args.\n\n### [Type](#type)\n\n### [Parameters](#parameters)\n\n#### [`csfExports`](#csfexports)\n\n(**Required**)\n\nType: CSF file exports\n\nSpecifies which component's stories you want to compose. Pass the **full set of exports** from the CSF file (not the default export!). E.g. `import * as stories from './Button.stories'`\n\n#### [`projectAnnotations`](#projectannotations)\n\nType: `ProjectAnnotation | ProjectAnnotation[]`\n\nSpecifies the project annotations to be applied to the composed stories.\n\nThis parameter is provided for convenience. You should likely use [`setProjectAnnotations`](#setprojectannotations) instead. Details about the `ProjectAnnotation` type can be found in that function's [`projectAnnotations`](#projectannotations-2) parameter.\n\nThis parameter can be used to [override](#overriding-globals) the project annotations applied via `setProjectAnnotations`.\n\n### [Return](#return)\n\nType: `Record<string, ComposedStoryFn>`\n\nAn object where the keys are the names of the stories and the values are the composed stories.\n\nAdditionally, the composed story will have the following properties:\n\n| Property | Type | Description |\n| --- | --- | --- |\n| storyName | `string` | The story's name |\n| args | `Record<string, any>` | The story's [args](https://storybook.js.org/docs/writing-stories/args) |\n| argTypes | `ArgType` | The story's [argTypes](https://storybook.js.org/docs/api/arg-types) |\n| id  | `string` | The story's id |\n| tags | `string[]` | The story's [tags](https://storybook.js.org/docs/writing-stories/tags) |\n| parameters | `Record<string, any>` | The story's [parameters](https://storybook.js.org/docs/api/parameters) |\n| play | `(context) => Promise<void> \\| undefined` | Mounts and executes the [play function](#3-play) of a given story |\n\n## [composeStory](#composestory)\n\nYou can use `composeStory` if you wish to compose a single story for a component.\n\n### [Type](#type-1)\n\n### [Parameters](#parameters-1)\n\n#### [`story`](#story)\n\n(**Required**)\n\nType: `Story export`\n\nSpecifies which story you want to compose.\n\n#### [`componentAnnotations`](#componentannotations)\n\n(**Required**)\n\nType: `Meta`\n\nThe default export from the stories file containing the [`story`](#story).\n\n#### [`projectAnnotations`](#projectannotations-1)\n\nType: `ProjectAnnotation | ProjectAnnotation[]`\n\nSpecifies the project annotations to be applied to the composed story.\n\nThis parameter is provided for convenience. You should likely use [`setProjectAnnotations`](#setprojectannotations) instead. Details about the `ProjectAnnotation` type can be found in that function's [`projectAnnotations`](#projectannotations-2) parameter.\n\nThis parameter can be used to [override](#overriding-globals) the project annotations applied via `setProjectAnnotations`.\n\n#### [`exportsName`](#exportsname)\n\nType: `string`\n\nYou probably don't need this. Because `composeStory` accepts a single story, it does not have access to the name of that story's export in the file (like `composeStories` does). If you must ensure unique story names in your tests and you cannot use `composeStories`, you can pass the name of the story's export here.\n\n### [Return](#return-1)\n\nType: `ComposedStoryFn`\n\nA single [composed story](#return).\n\n## [setProjectAnnotations](#setprojectannotations)\n\nThis API should be called once, before the tests run, typically in a [setup file](https://vitest.dev/config/#setupfiles). This will make sure that whenever `composeStories` or `composeStory` are called, the project annotations are taken into account as well.\n\nThese are the configurations needed in the setup file:\n\n*   preview annotations: those defined in `.storybook/preview.ts`\n*   addon annotations (optional): those exported by addons\n*   beforeAll: code that runs before all tests ([more info](https://storybook.js.org/docs/writing-tests/interaction-testing#beforeall))\n*   testingLibraryRender: the render function from Testing Library\n\nYou **must** provide `testingLibraryRenderer` to use portable stories with Vitest.\n\nSometimes a story can require an addon's [decorator](https://storybook.js.org/docs/writing-stories/decorators) or [loader](https://storybook.js.org/docs/writing-stories/loaders) to render properly. For example, an addon can apply a decorator that wraps your story in the necessary router context. In this case, you must include that addon's `preview` export in the project annotations set. See `addonAnnotations` in the example above.\n\nNote: If the addon doesn't automatically apply the decorator or loader itself, but instead exports them for you to apply manually in `.storybook/preview.js|ts` (e.g. using `withThemeFromJSXProvider` from [@storybook/addon-themes](https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#withthemefromjsxprovider)), then you do not need to do anything else. They are already included in the `previewAnnotations` in the example above.\n\nIf you need to configure Testing Library's `render` or use a different render function, please let us know in [this discussion](https://github.com/storybookjs/storybook/discussions/28532) so we can learn more about your needs.\n\n### [Type](#type-2)\n\n### [Parameters](#parameters-2)\n\n#### [`projectAnnotations`](#projectannotations-2)\n\n(**Required**)\n\nType: `ProjectAnnotation | ProjectAnnotation[]`\n\nA set of project [annotations](#annotations) (those defined in `.storybook/preview.js|ts`) or an array of sets of project annotations, which will be applied to all composed stories.\n\n## [Annotations](#annotations)\n\nAnnotations are the metadata applied to a story, like [args](https://storybook.js.org/docs/writing-stories/args), [decorators](https://storybook.js.org/docs/writing-stories/decorators), [loaders](https://storybook.js.org/docs/writing-stories/loaders), and [play functions](https://storybook.js.org/docs/writing-stories/play-function). They can be defined for a specific story, all stories for a component, or all stories in the project.\n\n## [Story pipeline](#story-pipeline)\n\nTo preview your stories in Storybook, Storybook runs a story pipeline, which includes applying project annotations, loading data, rendering the story, and playing interactions. This is a simplified version of the pipeline:\n\n![A flow diagram of the story pipeline. First, set project annotations. Collect annotations (decorators, args, etc) which are exported by addons and the preview file. Second, compose story. Create renderable elements based on the stories passed onto the API. Third, play. Mount the component and execute all the story lifecycle hooks.](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fstory-pipeline.png&w=3840&q=75)\n\nWhen you want to reuse a story in a different environment, however, it's crucial to understand that all these steps make a story. The portable stories API provides you with the mechanism to recreate that story pipeline in your external environment:\n\n### [1\\. Apply project-level annotations](#1-apply-project-level-annotations)\n\n[Annotations](#annotations) come from the story itself, that story's component, and the project. The project-level annotations are those defined in your `.storybook/preview.js` file and by addons you're using. In portable stories, these annotations are not applied automatically — you must apply them yourself.\n\n👉 For this, you use the [`setProjectAnnotations`](#setprojectannotations) API.\n\n### [2\\. Compose](#2-compose)\n\nThe story is prepared by running [`composeStories`](#composestories) or [`composeStory`](#composestory). The outcome is a renderable component that represents the render function of the story.\n\n### [3\\. Play](#3-play)\n\nFinally, stories can prepare data they need (e.g. setting up some mocks or fetching data) before rendering by defining [loaders](https://storybook.js.org/docs/writing-stories/loaders), [beforeEach](https://storybook.js.org/docs/writing-tests/interaction-testing#run-code-before-each-story) or by having all the story code in the play function when using the [mount](https://storybook.js.org/docs/writing-tests/interaction-testing#run-code-before-the-component-gets-rendered). In portable stories, all of these steps will be executed when you run the `play` method of the composed story.\n\n👉 For this, you use the [`composeStories`](#composestories) or [`composeStory`](#composestory) API. The composed story will return a `play` method to be called.\n\nIf your play function contains assertions (e.g. `expect` calls), your test will fail when those assertions fail.\n\n## [Overriding globals](#overriding-globals)\n\nIf your stories behave differently based on [globals](https://storybook.js.org/docs/essentials/toolbars-and-globals#globals) (e.g. rendering text in English or Spanish), you can define those global values in portable stories by overriding project annotations when composing a story:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/contribute/documentation/new-snippets",
    "markdown": "# StorybookChromatic\n\nAdd or update the code snippets in the documentation. This page outlines how the code snippets are structured.\n\n## [Documented frameworks](#documented-frameworks)\n\nStorybook maintains code snippets for a [variety of frameworks](https://storybook.js.org/docs/configure/integration/frameworks-feature-support). We try to keep them up to date as framework APIs evolve. But it's tricky to keep track of every API change in every framework.\n\nWe welcome community contributions to the code snippets. Here's a matrix of the frameworks we have snippets for. Help us add snippets for your favorite framework.\n\n| React | Vue 3 | Angular | Web Components | Svelte | Solid | Ember | HTML | Preact |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| [✅](https://github.com/storybookjs/storybook/tree/next/docs/snippets/react) | [✅](https://github.com/storybookjs/storybook/tree/next/docs/snippets/vue) | [✅](https://github.com/storybookjs/storybook/tree/next/docs/snippets/angular) | [✅](https://github.com/storybookjs/storybook/tree/next/docs/snippets/web-components) | [✅](https://github.com/storybookjs/storybook/tree/next/docs/snippets/svelte) | [✅](https://github.com/storybookjs/storybook/tree/next/docs/snippets/solid) | ❌   | ❌   | ❌   |\n\n## [Setup](#setup)\n\nAssuming you've already followed the [local environment guide](https://storybook.js.org/docs/contribute/code#initial-setup), the first thing you need to do is create a branch on your local Storybook monorepo by running the following command:\n\nBefore adding your snippets, open the `docs` folder with your editor of choice. Get familiarized with the documentation, including how the snippets are organized and their contents.\n\nThen inside the root folder of the Storybook monorepo, run the following command:\n\nSelect the option `Synchronize documentation (sync-docs)` and type the path of your `frontpage` project folder. Now every file change inside the monorepo `docs` folder will be reflected in the frontpage repo at `src/content/docs`.\n\n### [Add your first snippet](#add-your-first-snippet)\n\nNow that you're familiar with how the documentation is structured, it's time to add the code snippets. First, go to the `docs/snippets/` folder and create a new directory for your framework of choice (e.g., `ember`).\n\nBrowse the documentation and look for the code snippets you're willing to contribute. For example, on the [setup page](https://github.com/storybookjs/storybook/blob/next/docs/get-started/setup.mdx), you should see something similar to:\n\nCreate the file `ember/your-component.js.mdx`, similar to the other frameworks, and reference it.\n\nCode snippets are divided into various file extensions, if you're contributing a TypeScript file use `.ts.mdx`, or if you're adding JavaScript files use `.js.mdx`.\n\nGo through the rest of the documentation and repeat the process.\n\n### [Preview your work](#preview-your-work)\n\nBefore submitting your contribution, we advise you to check your work against the Storybook website. Doing this prevents last-minute issues with the documentation and is also an excellent way for the maintainers to merge faster once you submit the pull request. However, failing to do so will lead one of the maintainers to notify you that your contribution has an issue.\n\nStart by forking [frontpage repo](https://github.com/storybookjs/frontpage) and cloning it locally.\n\nNavigate to the `frontpage` directory and install the required dependencies with the following command:\n\nNext, make sure that you have running the `Synchronize documentation (sync-docs)` task from Storybook monorepo. Then, execute the following command to launch the Storybook website.\n\nDuring the start process if there's an issue with the documentation, the process will stop and you'll get a notification.\n\nOpen a browser window to `http://localhost:8000`, click the Docs link, and select your framework from the dropdown.\n\n![Storybook docs with dropdown](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fcontribute%2Flocal-storybook-website-dropdown-optimized.png&w=3840&q=75)\n\nGo through the documentation and check your work.\n\n## [Submit your contribution](#submit-your-contribution)\n\nFinally, commit, push and open a pull request in the Storybook monorepo. Add a clear description of the work you've done, and one of the maintainers will guide you through the merge process.\n\n**Learn more about contributing to Storybook**\n\n*   [RFC process](https://storybook.js.org/docs/contribute/RFC) for authoring feature requests\n*   [Code](https://storybook.js.org/docs/contribute/code) for features and bug fixes\n*   [Frameworks](https://storybook.js.org/docs/contribute/framework) to get started with a new framework\n*   [Documentation](https://storybook.js.org/docs/contribute/documentation/documentation-updates) for documentation improvements, typos, and clarifications\n*   [Examples](https://storybook.js.org/docs/contribute/documentation/new-snippets) for new snippets and examples",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/6/configure/babel",
    "markdown": "Storybook: Frontend workshop for UI development",
    "title": "Storybook: Frontend workshop for UI development",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": null
  },
  {
    "url": "https://storybook.js.org/docs/writing-tests/snapshot-testing/storyshots-migration-guide",
    "markdown": "# StorybookChromatic\n\nWe're actively integrating community feedback to improve the tooling and documentation for snapshot testing with Storybook. If you're interested in participating in this process and helping us improve it. Please fill out this [form](https://forms.gle/jzcMr6cqmZZpH9Z5A) to share your feedback.\n\nThis guide will teach you how to migrate your snapshot tests from the Storyshots addon to Storybook's test-runner or portable stories. Also, you will be able to understand the differences between them and set up, configure, and run snapshot tests using the available tooling provided by Storybook.\n\n## [Migrating tests from Storyshots](#migrating-tests-from-storyshots)\n\n### [Prerequisites](#prerequisites)\n\nBefore you begin the migration process, ensure that you have:\n\n*   A fully functional Storybook configured with one of the [supported frameworks](https://storybook.js.org/docs/configure/integration/frameworks) running the latest stable version (i.e., 7.6 or higher).\n*   Familiarity with your current Storybook and its testing setup.\n\n### [With the test-runner](#with-the-test-runner)\n\nStorybook test-runner turns all of your stories into executable tests. Powered by [Jest](https://jestjs.io/) and [Playwright](https://playwright.dev/). It's a standalone, framework-agnostic utility that runs parallel to your Storybook. It enables you to run multiple testing patterns in a multi-browser environment, including interaction testing with the [play function](https://storybook.js.org/docs/writing-tests/interaction-testing), DOM snapshot, and [accessibility testing](https://storybook.js.org/docs/writing-tests/accessibility-testing).\n\n#### [Setup](#setup)\n\nTo get started with the migration process from the Storyshots addon to the test-runner, we recommend that you remove the Storyshots addon and similar packages (i.e., `storybook/addon-storyshots-puppeteer` ) from your project, including any related configuration files. Then, follow the test-runner's [setup instructions](https://storybook.js.org/docs/writing-tests/test-runner#setup) to install, configure and run it.\n\n#### [Extend your test coverage](#extend-your-test-coverage)\n\nThe Storyshots addon offered a highly customizable testing solution, allowing users to extend testing coverage in various ways. However, the test-runner provides a similar experience but with a different API. Below, you will find additional examples of using the test-runner to achieve results similar to those you achieved with Storyshots.\n\n#### [Enable DOM snapshot testing with the test-runner](#enable-dom-snapshot-testing-with-the-test-runner)\n\nTo enable DOM snapshot testing with the test-runner, you can extend the test-runner's configuration file and use the available [hooks](https://storybook.js.org/docs/writing-tests/test-runner#test-hook-api) and combine them with Playwright's built-in [`APIs`](https://playwright.dev/docs/test-snapshots) to generate DOM snapshots for each story in your project. For example:\n\nIf you've set up DOM snapshot tests in your project with the test-runner and enabled the [`index.json` mode](https://storybook.js.org/docs/writing-tests/test-runner#indexjson-mode) via CLI flag, tests are generated in a temporary folder outside your project, and snapshots get stored alongside them. You'll need to extend the test-runner's configuration and provide a custom snapshot resolver to allow a different location for the snapshots. See the [Troubleshooting](#the-test-runner-does-not-generate-snapshot-files-in-the-expected-directory) section for more information.\n\n#### [Run image snapshot tests with the test-runner](#run-image-snapshot-tests-with-the-test-runner)\n\nBy default, the test-runner provides you with the option to run multiple testing patterns (e.g., DOM snapshot testing, [accessibility](https://storybook.js.org/docs/writing-tests/accessibility-testing#a11y-config-with-the-test-runner)) with minimal configuration. However, if you want, you can extend it to run visual regression testing alongside your other tests. For example:\n\n### [With Portable Stories](#with-portable-stories)\n\nStorybook provides a `composeStories` utility that helps convert stories from a story file into renderable elements that can be reused in your Node tests with JSDOM. It also allows you to apply other Storybook features that you have enabled in your project (e.g., [decorators](https://storybook.js.org/docs/writing-stories/decorators), [args](https://storybook.js.org/docs/writing-stories/args)), which allows your component to render correctly. This is what is known as portable stories.\n\n#### [Setup](#setup-1)\n\nWe recommend you turn off your current storyshots tests to start the migration process. To do this, rename the configuration file (i.e., `storybook.test.ts|js` or similar) to `storybook.test.ts|js.old`. This will prevent the tests from being detected, as you'll create a new testing configuration file with the same name. By doing this, you'll be able to preserve your existing tests while transitioning to portable stories before removing the Storyshots addon from your project.\n\n#### [Import project-level annotations from Storybook](#import-project-level-annotations-from-storybook)\n\nIf you need project-level annotations (e.g., [decorators](https://storybook.js.org/docs/writing-stories/decorators), [args](https://storybook.js.org/docs/writing-stories/args), styles) enabled in your `./storybook/preview.js|ts` included in your tests, adjust your test set up file to import the annotations as follows:\n\nYou **must** provide `testingLibraryRenderer` to use portable stories with Vitest or Jest.\n\n#### [Configure the testing framework for portable stories](#configure-the-testing-framework-for-portable-stories)\n\nTo help you migrate from Storyshots addon to Storybook's portable stories with the `composeStories` helper API, we've prepared examples to help you get started. Listed below are examples of two of the most popular testing frameworks: [Jest](https://jestjs.io/) and [Vitest](https://vitest.dev/). We recommend placing the code in a newly created `storybook.test.ts|js` file and adjusting the code accordingly, depending on your testing framework. Both examples below will:\n\n*   Import all story files based on a glob pattern\n*   Iterate over these files and use `composeStories` on each of their modules, resulting in a list of renderable components from each story\n*   Cycle through the stories, render them, and snapshot them\n\n#### [Vitest](#vitest)\n\nIf you're using [Vitest](https://vitest.dev/) as your testing framework, you can begin migrating your snapshot tests to Storybook's portable stories with the `composeStories` helper API by referring to the following example. You will need to modify the code in your `storybook.test.ts|js` file as follows:\n\nWhen your test is executed with Vitest, it will generate a single snapshot file (i.e., `storybook.test.ts|js.snap`) with all the stories in your project. However, if you want to generate individual snapshot files, you can use Vitest's [`toMatchFileSnapshot`](https://vitest.dev/guide/snapshot.html#file-snapshots) API. For example:\n\n#### [Jest](#jest)\n\nIf you're using Jest as your testing framework, you can begin migrating your snapshot tests to Storybook's portable stories with the `composeStories` helper API by referring to the following example. You will need to modify the code in your `storybook.test.ts|js` file as follows:\n\nWhen your test is executed with Jest, it will generate a single snapshot file (i.e., `__snapshots__/storybook.test.ts|js.snap`) with all the stories in your project. However, if you want to generate individual snapshot files, you can use the [`jest-specific-snapshot`](https://github.com/igor-dv/jest-specific-snapshot) package. For example:\n\n#### [Known limitations](#known-limitations)\n\nIf you opt to use portable stories in your tests, you'll have a single test file that can run in a JSDOM environment, rendering and snapshotting all your stories. However, as your project grows, you may run into the limitations you had with Storyshots previously:\n\n*   You are not testing against a real browser.\n*   You must mock many browser utilities (e.g., canvas, window APIs, etc).\n*   Your debugging experience will not be as good, given you can't access the browser as part of your tests.\n\nAlternatively, you may want to consider migrating to the other available option for snapshot testing with Storybook: the [test-runner](#with-the-test-runner) for a more robust solution that runs tests against a real browser environment with [Playwright](https://playwright.dev/).\n\n* * *\n\n## [Troubleshooting](#troubleshooting)\n\nAs running snapshot tests with Storybook and the test-runner can lead to some technical limitations that may prevent you from setting up or running your tests successfully, we've prepared a set of instructions to help you troubleshoot any issues you may encounter.\n\n### [The test-runner reports an error when running snapshot tests](#the-test-runner-reports-an-error-when-running-snapshot-tests)\n\nIf you're experiencing intermittent test failures with the test-runner, uncaught errors may occur when your tests run in the browser. These errors might not have been caught if you were using the Storyshots addons previously. The test-runner will, by default, consider these uncaught errors as failed tests. However, if these errors are expected, you can ignore them by enabling custom story tags in your stories and test-runner configuration files. For more information, please refer to the [test-runner documentation](https://storybook.js.org/docs/writing-tests/test-runner#experimental-filter-tests).\n\n### [The test-runner does not generate snapshot files in the expected directory](#the-test-runner-does-not-generate-snapshot-files-in-the-expected-directory)\n\nIf you've configured the test-runner to run snapshot tests, you may notice that the paths and names of the snapshot files differ from those previously generated by the Storyshots addon. This is because the test-runner uses a different naming convention for snapshot files. Using a custom snapshot resolver, you can configure the test-runner to use the same naming convention you used previously.\n\nRun the following command to generate a custom configuration file for the test-runner that you can use to configure Jest:\n\nUpdate the file and enable the `snapshotResolver` option to use a custom snapshot resolver:\n\nFinally, create a `snapshot-resolver.js` file to implement a custom snapshot resolver:\n\n### [The format of the snapshot files is different from the ones generated by the Storyshots addon](#the-format-of-the-snapshot-files-is-different-from-the-ones-generated-by-the-storyshots-addon)\n\nBy default, the test-runner uses [`jest-serializer-html`](https://github.com/algolia/jest-serializer-html) to serialize HTML snapshots. This may cause differences in formatting compared to your existing snapshots, even if you're using specific CSS-in-JS libraries like [Emotion](https://emotion.sh/docs/introduction), Angular's `ng` attributes, or other similar libraries that generate hash-based identifiers for CSS classes. However, you can configure the test-runner to use a custom snapshot serializer to solve this issue by overriding the random class names with a static one that will be the same for each test run.\n\nRun the following command to generate a custom configuration file for the test-runner that you can use to provide additional configuration options.\n\nUpdate the file and enable the `snapshotSerializers` option to use a custom snapshot resolver. For example:\n\nFinally, create a `snapshot-serializer.js` file to implement a custom snapshot serializer:\n\nWhen the test-runner executes your tests, it will introspect the resulting HTML and replace any dynamically generated attributes with the static ones provided by the regex expression before snapshotting the component.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/api/portable-stories/portable-stories-jest",
    "markdown": "# StorybookChromatic\n\nPortable stories are Storybook [stories](https://storybook.js.org/docs/writing-stories) which can be used in external environments, such as [Jest](https://jestjs.io/).\n\nNormally, Storybook composes a story and its [annotations](#annotations) automatically, as part of the [story pipeline](#story-pipeline). When using stories in Jest tests, you must handle the story pipeline yourself, which is what the [`composeStories`](#composestories) and [`composeStory`](#composestory) functions enable.\n\n**Using `Next.js`?** You need to do three things differently when using portable stories in Jest with Next.js projects:\n\n*   Configure the [`next/jest.js` transformer](https://nextjs.org/docs/pages/building-your-application/testing/jest#manual-setup), which will handle all of the necessary Next.js configuration for you.\n*   Import [`composeStories`](#composestories) or [`composeStory`](#composestory) from the `@storybook/nextjs` package (e.g. `import { composeStories } from '@storybook/nextjs'`).\n*   Set up [internal module aliases](https://storybook.js.org/docs/get-started/frameworks/nextjs#storybooknextjsexport-mocks) to ensure the framework configuration works correctly and to be able to mock and assert on them.\n\n## [composeStories](#composestories)\n\n`composeStories` will process the component's stories you specify, compose each of them with the necessary [annotations](#annotations), and return an object containing the composed stories.\n\nBy default, the composed story will render the component with the [args](https://storybook.js.org/docs/writing-stories/args) that are defined in the story. You can also pass any props to the component in your test and those props will override the values passed in the story's args.\n\n### [Type](#type)\n\n### [Parameters](#parameters)\n\n#### [`csfExports`](#csfexports)\n\n(**Required**)\n\nType: CSF file exports\n\nSpecifies which component's stories you want to compose. Pass the **full set of exports** from the CSF file (not the default export!). E.g. `import * as stories from './Button.stories'`\n\n#### [`projectAnnotations`](#projectannotations)\n\nType: `ProjectAnnotation | ProjectAnnotation[]`\n\nSpecifies the project annotations to be applied to the composed stories.\n\nThis parameter is provided for convenience. You should likely use [`setProjectAnnotations`](#setprojectannotations) instead. Details about the `ProjectAnnotation` type can be found in that function's [`projectAnnotations`](#projectannotations-2) parameter.\n\nThis parameter can be used to [override](#overriding-globals) the project annotations applied via `setProjectAnnotations`.\n\n### [Return](#return)\n\nType: `Record<string, ComposedStoryFn>`\n\nAn object where the keys are the names of the stories and the values are the composed stories.\n\nAdditionally, the composed story will have the following properties:\n\n| Property | Type | Description |\n| --- | --- | --- |\n| storyName | `string` | The story's name |\n| args | `Record<string, any>` | The story's [args](https://storybook.js.org/docs/writing-stories/args) |\n| argTypes | `ArgType` | The story's [argTypes](https://storybook.js.org/docs/api/arg-types) |\n| id  | `string` | The story's id |\n| tags | `string[]` | The story's [tags](https://storybook.js.org/docs/writing-stories/tags) |\n| parameters | `Record<string, any>` | The story's [parameters](https://storybook.js.org/docs/api/parameters) |\n| play | `(context) => Promise<void> \\| undefined` | Mounts and executes the [play function](#3-play) of a given story |\n\n## [composeStory](#composestory)\n\nYou can use `composeStory` if you wish to compose a single story for a component.\n\n### [Type](#type-1)\n\n### [Parameters](#parameters-1)\n\n#### [`story`](#story)\n\n(**Required**)\n\nType: `Story export`\n\nSpecifies which story you want to compose.\n\n#### [`componentAnnotations`](#componentannotations)\n\n(**Required**)\n\nType: `Meta`\n\nThe default export from the stories file containing the [`story`](#story).\n\n#### [`projectAnnotations`](#projectannotations-1)\n\nType: `ProjectAnnotation | ProjectAnnotation[]`\n\nSpecifies the project annotations to be applied to the composed story.\n\nThis parameter is provided for convenience. You should likely use [`setProjectAnnotations`](#setprojectannotations) instead. Details about the `ProjectAnnotation` type can be found in that function's [`projectAnnotations`](#projectannotations-2) parameter.\n\nThis parameter can be used to [override](#overriding-globals) the project annotations applied via `setProjectAnnotations`.\n\n#### [`exportsName`](#exportsname)\n\nType: `string`\n\nYou probably don't need this. Because `composeStory` accepts a single story, it does not have access to the name of that story's export in the file (like `composeStories` does). If you must ensure unique story names in your tests and you cannot use `composeStories`, you can pass the name of the story's export here.\n\n### [Return](#return-1)\n\nType: `ComposedStoryFn`\n\nA single [composed story](#return).\n\n## [setProjectAnnotations](#setprojectannotations)\n\nThis API should be called once, before the tests run, typically in a [setup file](https://jestjs.io/docs/configuration#setupfiles-array). This will make sure that whenever `composeStories` or `composeStory` are called, the project annotations are taken into account as well.\n\nThese are the configurations needed in the setup file:\n\n*   preview annotations: those defined in `.storybook/preview.ts`\n*   addon annotations (optional): those exported by addons\n*   beforeAll: code that runs before all tests ([more info](https://storybook.js.org/docs/writing-tests/interaction-testing#beforeall))\n*   testingLibraryRender: the render function from Testing Library\n\nSometimes a story can require an addon's [decorator](https://storybook.js.org/docs/writing-stories/decorators) or [loader](https://storybook.js.org/docs/writing-stories/loaders) to render properly. For example, an addon can apply a decorator that wraps your story in the necessary router context. In this case, you must include that addon's `preview` export in the project annotations set. See `addonAnnotations` in the example above.\n\nNote: If the addon doesn't automatically apply the decorator or loader itself, but instead exports them for you to apply manually in `.storybook/preview.js|ts` (e.g. using `withThemeFromJSXProvider` from [@storybook/addon-themes](https://github.com/storybookjs/storybook/blob/next/code/addons/themes/docs/api.md#withthemefromjsxprovider)), then you do not need to do anything else. They are already included in the `previewAnnotations` in the example above.\n\nIf you need to configure Testing Library's `render` or use a different render function, please let us know in [this discussion](https://github.com/storybookjs/storybook/discussions/28532) so we can learn more about your needs.\n\n### [Type](#type-2)\n\n### [Parameters](#parameters-2)\n\n#### [`projectAnnotations`](#projectannotations-2)\n\n(**Required**)\n\nType: `ProjectAnnotation | ProjectAnnotation[]`\n\nA set of project [annotations](#annotations) (those defined in `.storybook/preview.js|ts`) or an array of sets of project annotations, which will be applied to all composed stories.\n\n## [Annotations](#annotations)\n\nAnnotations are the metadata applied to a story, like [args](https://storybook.js.org/docs/writing-stories/args), [decorators](https://storybook.js.org/docs/writing-stories/decorators), [loaders](https://storybook.js.org/docs/writing-stories/loaders), and [play functions](https://storybook.js.org/docs/writing-stories/play-function). They can be defined for a specific story, all stories for a component, or all stories in the project.\n\n## [Story pipeline](#story-pipeline)\n\nTo preview your stories in Storybook, Storybook runs a story pipeline, which includes applying project annotations, loading data, rendering the story, and playing interactions. This is a simplified version of the pipeline:\n\n![A flow diagram of the story pipeline. First, set project annotations. Collect annotations (decorators, args, etc) which are exported by addons and the preview file. Second, compose story. Create renderable elements based on the stories passed onto the API. Third, play. Mount the component and execute all the story lifecycle hooks.](https://storybook.js.org/_next/image?url=%2Fdocs-assets%2F8.2%2Fapi%2Fstory-pipeline.png&w=3840&q=75)\n\nWhen you want to reuse a story in a different environment, however, it's crucial to understand that all these steps make a story. The portable stories API provides you with the mechanism to recreate that story pipeline in your external environment:\n\n### [1\\. Apply project-level annotations](#1-apply-project-level-annotations)\n\n[Annotations](#annotations) come from the story itself, that story's component, and the project. The project-level annotations are those defined in your `.storybook/preview.js` file and by addons you're using. In portable stories, these annotations are not applied automatically — you must apply them yourself.\n\n👉 For this, you use the [`setProjectAnnotations`](#setprojectannotations) API.\n\n### [2\\. Compose](#2-compose)\n\nThe story is prepared by running [`composeStories`](#composestories) or [`composeStory`](#composestory). The outcome is a renderable component that represents the render function of the story.\n\n### [3\\. Play](#3-play)\n\nFinally, stories can prepare data they need (e.g. setting up some mocks or fetching data) before rendering by defining [loaders](https://storybook.js.org/docs/writing-stories/loaders), [beforeEach](https://storybook.js.org/docs/writing-tests/interaction-testing#run-code-before-each-story) or by having all the story code in the play function when using the [mount](https://storybook.js.org/docs/writing-tests/interaction-testing#run-code-before-the-component-gets-rendered). In portable stories, all of these steps will be executed when you run the `play` method of the composed story.\n\n👉 For this, you use the [`composeStories`](#composestories) or [`composeStory`](#composestory) API. The composed story will return a `play` method to be called.\n\nIf your play function contains assertions (e.g. `expect` calls), your test will fail when those assertions fail.\n\n## [Overriding globals](#overriding-globals)\n\nIf your stories behave differently based on [globals](https://storybook.js.org/docs/essentials/toolbars-and-globals#globals) (e.g. rendering text in English or Spanish), you can define those global values in portable stories by overriding project annotations when composing a story:",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  },
  {
    "url": "https://storybook.js.org/docs/writing-stories/mocking-data-and-modules/mocking-network-requests",
    "markdown": "# StorybookChromatic\n\nFor components that make network requests (e.g. fetching data from a REST or GraphQL API), you can mock those requests using a tool like [Mock Service Worker (MSW)](https://mswjs.io/). MSW is an API mocking library, which relies on service workers to capture network requests and provides mocked data in response.\n\nThe [MSW addon](https://storybook.js.org/addons/msw-storybook-addon/) brings this functionality into Storybook, allowing you to mock API requests in your stories. Below is an overview of how to set up and use the addon.\n\n## [Set up the MSW addon](#set-up-the-msw-addon)\n\nFirst, if necessary, run this command to install MSW and the MSW addon:\n\nIf you're not already using MSW, generate the service worker file necessary for MSW to work:\n\nThen ensure the [`staticDirs`](https://storybook.js.org/docs/api/main-config/main-config-static-dirs) property in your Storybook configuration will include the generated service worker file (in `/public`, by default):\n\nFinally, initialize the addon and apply it to all stories with a [project-level loader](https://storybook.js.org/docs/writing-stories/loaders#global-loaders):\n\n## [Mocking REST requests](#mocking-rest-requests)\n\nIf your component fetches data from a REST API, you can use MSW to mock those requests in Storybook. As an example, consider this document screen component:\n\nThis example uses the [`fetch` API](https://developer.mozilla.org/en-US/docs/Web/API/fetch) to make network requests. If you're using a different library (e.g. [`axios`](https://axios-http.com/)), you can apply the same principles to mock network requests in Storybook.\n\nWith the MSW addon, we can write stories that use MSW to mock the REST requests. Here's an example of two stories for the document screen component: one that fetches data successfully and another that fails.\n\n## [Mocking GraphQL requests](#mocking-graphql-requests)\n\nGraphQL is another common way to fetch data in components. You can use MSW to mock GraphQL requests in Storybook. Here's an example of a document screen component that fetches data from a GraphQL API:\n\nThis example uses GraphQL with [Apollo Client](https://www.apollographql.com/docs/) to make network requests. If you're using a different library (e.g. [URQL](https://formidable.com/open-source/urql/) or [React Query](https://react-query.tanstack.com/)), you can apply the same principles to mock network requests in Storybook.\n\nThe MSW addon allows you to write stories that use MSW to mock the GraphQL requests. Here's an example demonstrating two stories for the document screen component. The first story fetches data successfully, while the second story fails.\n\n## [Configuring MSW for stories](#configuring-msw-for-stories)\n\nIn the examples above, note how each story is configured with `parameters.msw` to define the request handlers for the mock server. Because it uses parameters in this way, it can also be configured at the [component](https://storybook.js.org/docs/writing-stories/parameters#component-parameters) or even [project](https://storybook.js.org/docs/writing-stories/parameters#global-parameters) level, allowing you to share the same mock server configuration across multiple stories.",
    "title": "Storybook",
    "description": "Storybook is a frontend workshop for building UI components and pages in isolation. Thousands of teams use it for UI development, testing, and documentation. It's open source and free.",
    "languageCode": "en"
  }
]