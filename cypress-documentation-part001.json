[
  {
    "url": "https://docs.cypress.io/guides/guides/environment-variables",
    "markdown": "# Environment Variables | Cypress Documentation\n\nEnvironment variables are useful when:\n\n*   Values are different across developer machines.\n*   Values are different across multiple environments: _(dev, staging, qa, prod)_\n*   Values change frequently and are highly dynamic.\n\nEnvironment variables can be changed easily - especially when running in CI.\n\n#### Instead of hard coding this in your tests:[​](#Instead-of-hard-coding-this-in-your-tests \"Direct link to Instead of hard coding this in your tests:\")\n\n```\ncy.request('https://api.acme.corp') // this will break on other environments\n```\n\n#### We can move this into a Cypress environment variable:[​](#We-can-move-this-into-a-Cypress-environment-variable \"Direct link to We can move this into a Cypress environment variable:\")\n\n```\ncy.request(Cypress.env('EXTERNAL_API')) // points to a dynamic env var\n```\n\ninfo\n\n**Using 'baseUrl'**\n\nEnvironment variables are great at pointing to external services and servers, or storing password or other credentials.\n\nHowever, you **do not** need to use environment variables to point to the origin and domain under test. Use `baseUrl` instead of environment variables.\n\n[`cy.visit()`](https://docs.cypress.io/api/commands/visit) and [`cy.request()`](https://docs.cypress.io/api/commands/request) are automatically prefixed with this value - avoiding the need to specify them.\n\n`baseUrl` can be set in the Cypress configuration file - and then you can set an environment variable in your OS to override it like shown below.\n\n```\nCYPRESS_BASE_URL=https://staging.app.com cypress run\n```\n\n## Setting[​](#Setting \"Direct link to Setting\")\n\nThere are different ways to set environment variables. Each has a slightly different use case.\n\n**_To summarize you can:_**\n\n*   [Set in your configuration file](#Option-1-configuration-file)\n*   [Create a `cypress.env.json`](#Option-2-cypressenvjson)\n*   [Export as `CYPRESS_*`](#Option-3-CYPRESS_)\n*   [Pass in the CLI as `--env`](#Option-4---env)\n*   [Set an environment variable within test configuration.](#Option-5-Test-Configuration)\n\nDon't feel obligated to pick just one method. It is common to use one strategy for local development but another when running in [CI](https://docs.cypress.io/guides/continuous-integration/introduction).\n\nWhen your tests are running, you can use the [`Cypress.env`](https://docs.cypress.io/api/cypress-api/env) function to access the values of your environment variables.\n\n### Option #1: configuration file[​](#Option-1-configuration-file \"Direct link to Option #1: configuration file\")\n\nAny key/value you set in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration) under the `env` key will become an environment variable.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  projectId: '128076ed-9868-4e98-9cef-98dd8b705d75',  env: {    login_url: '/login',    products_url: '/products',  },})\n```\n\n#### Test file[​](#Test-file \"Direct link to Test file\")\n\n```\nCypress.env() // {login_url: '/login', products_url: '/products'}Cypress.env('login_url') // '/login'Cypress.env('products_url') // '/products'\n```\n\n#### Overview[​](#Overview \"Direct link to Overview\")\n\ntip\n\n**Benefits**\n\n*   Great for values that need to be checked into source control and remain the same on all machines.\n\ndanger\n\n**Downsides**\n\n*   Only works for values that should be the same on across all machines.\n\n### Option #2: `cypress.env.json`[​](#Option-2-cypressenvjson \"Direct link to Option-2-cypressenvjson\")\n\nYou can create your own `cypress.env.json` file that Cypress will automatically check. Values in here will overwrite conflicting environment variables in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration).\n\nThis strategy is useful because if you add `cypress.env.json` to your `.gitignore` file, the values in here can be different for each developer machine.\n\n```\n{  \"host\": \"veronica.dev.local\",  \"api_server\": \"http://localhost:8888/api/v1/\"}\n```\n\n#### From test file[​](#From-test-file \"Direct link to From test file\")\n\n```\nCypress.env() // {host: 'veronica.dev.local', api_server: 'http://localhost:8888/api/v1'}Cypress.env('host') // 'veronica.dev.local'Cypress.env('api_server') // 'http://localhost:8888/api/v1/'\n```\n\n#### An Overview[​](#An-Overview \"Direct link to An Overview\")\n\ntip\n\n**Benefits**\n\n*   Dedicated file just for environment variables.\n*   Enables you to generate this file from other build processes.\n*   Values can be different on each machine (if not checked into source control).\n*   Supports nested fields (objects), e.g. `{ testUser: { name: '...', email: '...' } }`.\n\ndanger\n\n**Downsides**\n\n*   Another file you have to deal with.\n*   Overkill for 1 or 2 environment variables.\n\n### Option #3: `CYPRESS_*`[​](#Option-3-CYPRESS_ \"Direct link to Option-3-CYPRESS_\")\n\nAny exported environment variables set on the command line or in your CI provider that start with either `CYPRESS_` or `cypress_` will automatically be parsed by Cypress.\n\ndanger\n\nThe environment variable `CYPRESS_INTERNAL_ENV` is reserved and should not be set.\n\n#### Overriding configuration options[​](#Overriding-configuration-options \"Direct link to Overriding configuration options\")\n\nEnvironment variables that match a corresponding configuration option will override any value set in the [Cypress configuration](https://docs.cypress.io/guides/references/configuration).\n\ninfo\n\nCypress automatically normalizes both the key and the value. The leading `CYPRESS_` or `cypress_` is removed and the remaining name is camelCased, while values are converted to `Number` or `Boolean` wherever possible.\n\nFor example, these enviroment variables in the command line will override any `viewportWidth` or `viewportHeight` options set in the Cypress configuration:\n\n```\nexport CYPRESS_VIEWPORT_WIDTH=800export CYPRESS_VIEWPORT_HEIGHT=600\n```\n\n#### Overriding environment variables[​](#Overriding-environment-variables \"Direct link to Overriding environment variables\")\n\nEnvironment variables that do not match configuration options will be set as environment variables for use in tests with [`Cypress.env()`](https://docs.cypress.io/api/cypress-api/env), and will override any existing values in the Cypress configuration `env` object and `cypress.env.json` files.\n\ninfo\n\nCypress automatically removes the leading `CYPRESS_` or `cypress_` from any environment variable name specified in this way.\n\nFor example, these environment variables in the command line:\n\n```\nexport CYPRESS_HOST=laura.dev.localexport cypress_api_server=http://localhost:8888/api/v1/\n```\n\nWill yield these results inside a test file:\n\n```\nCypress.env() // {HOST: 'laura.dev.local', api_server: 'http://localhost:8888/api/v1'}Cypress.env('HOST') // 'laura.dev.local'Cypress.env('api_server') // 'http://localhost:8888/api/v1/'\n```\n\n#### Overview:[​](#Overview-1 \"Direct link to Overview:\")\n\ntip\n\n**Benefits**\n\n*   Quickly export some values.\n*   Can be stored in your `bash_profile`.\n*   Allows for dynamic values between different machines.\n*   Especially useful for CI environments.\n\ndanger\n\n**Downsides**\n\n*   Not as obvious where values come from versus the other options.\n*   No support for nested fields.\n\n### Option #4: `--env`[​](#Option-4---env \"Direct link to Option-4---env\")\n\nYou can pass in environment variables as options when [using the CLI tool](https://docs.cypress.io/guides/guides/command-line#cypress-run).\n\nValues here will overwrite all other conflicting environment variables.\n\nYou can use the `--env` argument for [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run).\n\ncaution\n\nMultiple values must be separated by a comma, not a space. In some shells, like Windows PowerShell, you may need to surround the key/value pair with quotes: `--env \"cyuser=dummyUser,cypassword=dummyPassword\"`.\n\n#### From the command line or CI[​](#From-the-command-line-or-CI \"Direct link to From the command line or CI\")\n\n```\ncypress run --env host=kevin.dev.local,api_server=http://localhost:8888/api/v1\n```\n\n#### Test file:[​](#Test-file-1 \"Direct link to Test file:\")\n\n```\nCypress.env() // {host: 'kevin.dev.local', api_server: 'http://localhost:8888/api/v1'}Cypress.env('host') // 'kevin.dev.local'Cypress.env('api_server') // 'http://localhost:8888/api/v1/'\n```\n\n#### Overview -[​](#Overview-- \"Direct link to Overview -\")\n\ntip\n\n**Benefits**\n\n*   Does not require any changes to files or configuration.\n*   More clear where environment variables come from.\n*   Allows for dynamic values between different machines.\n*   Overwrites all other forms of setting env variables.\n\ndanger\n\n**Downsides**\n\n*   Pain to write the `--env` options everywhere you use Cypress.\n*   No support for nested fields.\n\n### Option #5: Test Configuration[​](#Option-5-Test-Configuration \"Direct link to Option #5: Test Configuration\")\n\nYou can set environment variables for specific suites or tests by passing the `env` values to the [test configuration](https://docs.cypress.io/guides/references/configuration#Test-Configuration).\n\n#### Suite of test configuration[​](#Suite-of-test-configuration \"Direct link to Suite of test configuration\")\n\n*   End-to-End Test\n*   Component Test\n\n```\n// change environment variable for single suite of testsdescribe(  'test against Spanish content',  {    env: {      language: 'es',    },  },  () => {    it('displays Spanish', () => {      cy.visit(`https://docs.cypress.io/${Cypress.env('language')}/`)      cy.contains('¿Por qué Cypress?')    })  })\n```\n\n#### Single test configuration[​](#Single-test-configuration \"Direct link to Single test configuration\")\n\n```\n// change environment variable for single testit(  'smoke test develop api',  {    env: {      api: 'https://dev.myapi.com',    },  },  () => {    cy.request(Cypress.env('api')).its('status').should('eq', 200)  })// change environment variable for single testit(  'smoke test staging api',  {    env: {      api: 'https://staging.myapi.com',    },  },  () => {    cy.request(Cypress.env('api')).its('status').should('eq', 200)  })\n```\n\n#### Overview[​](#Overview-2 \"Direct link to Overview\")\n\ntip\n\n**Benefits**\n\n*   Only takes effect for duration of suite or test.\n*   More clear where environment variables come from.\n*   Allows for dynamic values between tests\n\n## Overriding Configuration[​](#Overriding-Configuration \"Direct link to Overriding Configuration\")\n\nIf your environment variables match a standard configuration key, then instead of setting an `environment variable` they will instead override the configuration value.\n\n**Change the `baseUrl` configuration value / not set env var in `Cypress.env()`**\n\n```\nexport CYPRESS_BASE_URL=http://localhost:8080\n```\n\n**'foo' does not match config / sets env var in `Cypress.env()`**\n\nYou can [read more about how environment variables can change configuration here](https://docs.cypress.io/guides/references/configuration).\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Cypress.env()](https://docs.cypress.io/api/cypress-api/env)\n*   [Configuration API](https://docs.cypress.io/api/plugins/configuration-api)\n*   [Environment Variables recipe](https://docs.cypress.io/examples/recipes#Fundamentals)\n*   [Test Configuration](https://docs.cypress.io/guides/references/configuration#Test-Configuration)\n*   [Pass environment variables: tips and tricks](https://glebbahmutov.com/blog/cypress-tips-and-tricks/#pass-the-environment-variables-correctly)\n*   [Keep passwords secret in E2E tests](https://glebbahmutov.com/blog/keep-passwords-secret-in-e2e-tests/)",
    "title": "Environment Variables | Cypress Documentation",
    "description": "Difference between OS-level and Cypress environment variables",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/references/cypress-studio",
    "markdown": "# Cypress Studio | Cypress Documentation\n\ncaution\n\n**Experimental**\n\nCypress Studio is an experimental feature and can be enabled by adding the [experimentalStudio](https://docs.cypress.io/guides/references/experiments#End-to-End-Testing) attribute to your Cypress configuration.\n\n```\n{  e2e: {    experimentalStudio: true  }}\n```\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to extend tests interactively using the Cypress Studio\n*   How to add new tests interactively using the Cypress Studio\n\n## Limitations[​](#Limitations \"Direct link to Limitations\")\n\n*   Cypress Studio is currently only available for writing E2E tests, and doesn't yet work with Component Testing.\n*   Cypress Studio does not support writing tests that use domains of multiple origins.\n\n## Overview[​](#Overview \"Direct link to Overview\")\n\nCypress Studio provides a visual way to generate tests within Cypress, by _recording interactions_ against the application under test.\n\nThe [`.click()`](https://docs.cypress.io/api/commands/click), [`.type()`](https://docs.cypress.io/api/commands/type), [`.check()`](https://docs.cypress.io/api/commands/check), [`.uncheck()`](https://docs.cypress.io/api/commands/uncheck), and [`.select()`](https://docs.cypress.io/api/commands/select) Cypress commands are supported and will generate test code when interacting with the DOM inside of the Cypress Studio. You can also generate assertions by right clicking on an element that you would like to assert on.\n\nThe Cypress [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) is an open source project implementing a payment application to demonstrate real-world usage of Cypress testing methods, patterns, and workflows. It will be used to demonstrate the functionality of Cypress Studio below.\n\n### Extending a Test[​](#Extending-a-Test \"Direct link to Extending a Test\")\n\nYou can extend any preexisting test or start by creating a new test with the following test scaffolding.\n\n```\n// Code from Real World App (RWA)describe('Cypress Studio Demo', () => {  beforeEach(() => {    // Seed database with test data    cy.task('db:seed')    // Login test user    cy.database('find', 'users').then((user) => {      cy.login(user.username, 's3cret', true)    })  })  it('create new transaction', () => {    // Extend test with Cypress Studio  })})\n```\n\n#### Step 1 - Run the spec[​](#Step-1---Run-the-spec \"Direct link to Step 1 - Run the spec\")\n\nWe will use Cypress Studio to perform a \"New Transaction\" user journey. First, launch Cypress and select End To End testing, then choose a browser to run specs in.\n\n![Cypress Studio](https://docs.cypress.io/img/guides/cypress-studio/run-spec-1.png)\n\nOnce the browser is open, run the spec created in the previous step.\n\n#### Step 2 - Launch Cypress Studio[​](#Step-2---Launch-Cypress-Studio \"Direct link to Step 2 - Launch Cypress Studio\")\n\nOnce the tests complete their run, hover over a test in the Command Log to reveal an \"Add Commands to Test\" button.\n\nClicking on \"Add Commands to Test\" will launch the Cypress Studio.\n\ninfo\n\nCypress Studio is directly integrated with the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log).\n\n![Activate Cypress Studio](https://docs.cypress.io/img/guides/cypress-studio/extend-activate-studio.png)\n\ntip\n\nCypress will automatically execute all hooks and currently present test code, and then the test can be extended from that point on (e.g. We are logged into the application inside the `beforeEach` block).\n\nNext, Cypress will execute the test in isolation and pause after the last command in the test.\n\n![Cypress Studio Ready](https://docs.cypress.io/img/guides/cypress-studio/extend-ready.png)\n\nNow, we can begin updating the test to create a new transaction between users.\n\n#### Step 3 - Interact with the Application[​](#Step-3---Interact-with-the-Application \"Direct link to Step 3 - Interact with the Application\")\n\nTo record actions, begin interacting with the application. Here we will click on the \"New\" button on the right side of the header and as a result we will see our click recorded in the Command Log.\n\n![Cypress Studio Recording Click](https://docs.cypress.io/img/guides/cypress-studio/extend-click-new-transaction.png)\n\nNext, we can start typing in the name of a user that we want to pay.\n\n![Cypress Studio Recording Type](https://docs.cypress.io/img/guides/cypress-studio/extend-type-user-name.png)\n\nOnce we see the name come up in the results, we want to add an assertion to ensure that our search function works correctly. Right clicking on the user's name will bring up a menu from which we can add an assertion to check that the element contains the correct text (the user's name).\n\n![Cypress Studio Add Assertion](https://docs.cypress.io/img/guides/cypress-studio/extend-assert-user-name.png)\n\nWe can then click on that user in order to progress to the next screen. We will complete the transaction form by clicking on and typing in the amount and description inputs.\n\n![Cypress Studio Recording Type](https://docs.cypress.io/img/guides/cypress-studio/extend-type-transaction-form.png)\n\ntip\n\nNotice the commands generated in the Command Log.\n\nNow it's time to complete the transaction. You might have noticed that the \"Pay\" button was disabled before we typed into the inputs. To make sure that our form validation works properly, let's add an assertion to make sure the \"Pay\" button is enabled.\n\n![Cypress Studio Add Assertion](https://docs.cypress.io/img/guides/cypress-studio/extend-assert-button-enabled.png)\n\nFinally, we will click the \"Pay\" button and get presented with a confirmation page of our new transaction.\n\n![Cypress Studio Save Commands](https://docs.cypress.io/img/guides/cypress-studio/extend-save-test.png)\n\nTo discard the interactions, click the \"Cancel\" button to exit Cypress Studio. If satisfied with the interactions with the application, click \"Save Commands\" and the test code will be saved to your spec file. Alternatively you can choose the \"copy\" button in order to copy the generated commands to your clipboard.\n\n#### Generated Test Code[​](#Generated-Test-Code \"Direct link to Generated Test Code\")\n\nViewing our test code, we can see that the test is updated after clicking \"Save Commands\" with the actions we recorded in Cypress Studio.\n\n```\n// Code from Real World App (RWA)describe('Cypress Studio Demo', () => {  beforeEach(() => {    // Seed database with test data    cy.task('db:seed')    // Login test user    cy.database('find', 'users').then((user) => {      cy.login(user.username, 's3cret', true)    })  })  it('create new transaction', () => {    /* ==== Generated with Cypress Studio ==== */    cy.get('[data-test=nav-top-new-transaction]').click()    cy.get('[data-test=user-list-search-input]').clear()    cy.get('[data-test=user-list-search-input]').type('dev')    cy.get(      '[data-test=user-list-item-tsHF6_D5oQ] > .MuiListItemText-root > .MuiListItemText-primary'    ).should('have.text', 'Devon Becker')    cy.get('[data-test=user-list-item-tsHF6_D5oQ]').click()    cy.get('#amount').clear()    cy.get('#amount').type('$25')    cy.get('#transaction-create-description-input').clear()    cy.get('#transaction-create-description-input').type('Sushi dinner')    cy.get('[data-test=transaction-create-submit-payment]').should('be.enabled')    cy.get('[data-test=transaction-create-submit-payment]').click()    /* ==== End Cypress Studio ==== */  })})\n```\n\nThe selectors are generated according to the [`Cypress.SelectorPlayground` selector priority](https://docs.cypress.io/api/cypress-api/selector-playground-api#Default-Selector-Priority).\n\n### Adding a New Test[​](#Adding-a-New-Test \"Direct link to Adding a New Test\")\n\nYou can add a new test to any existing `describe` or `context` block, by clicking \"Add New Test\" on our defined `describe` block.\n\n![Cypress Studio Add Test](https://docs.cypress.io/img/guides/cypress-studio/add-test-1.png)\n\nWe are launched into Cypress Studio and can begin interacting with our application to generate the test.\n\nFor this test, we will add a new bank account. Our interactions are as follows:\n\n1.  Click \"Bank Accounts\" in left hand navigation\n    \n    ![Cypress Studio Begin Add Test](https://docs.cypress.io/img/guides/cypress-studio/add-test-2.png)\n    \n2.  Click the \"Create\" button on Bank Accounts page\n    \n    ![Cypress Studio Add Test Create Bank Account](https://docs.cypress.io/img/guides/cypress-studio/add-test-create.png)\n    \n3.  Fill out the bank account information\n    \n    ![Cypress Studio Add Test Complete Bank Account Form](https://docs.cypress.io/img/guides/cypress-studio/add-test-form-complete.png)\n    \n4.  Click the \"Save\" button\n    \n    ![Cypress Studio Add Test Save Bank Account](https://docs.cypress.io/img/guides/cypress-studio/add-test-form-save.png)\n    \n\nTo discard the interactions, click the \"Cancel\" button to exit Cypress Studio.\n\nIf satisfied with the interactions with the application, click \"Save Commands\" and prompt will ask for the name of the test. Click \"Save Test\" and the test will be saved to the file.\n\n![Cypress Studio Add Test Completed Run](https://docs.cypress.io/img/guides/cypress-studio/add-test-save-test.png)\n\nOnce saved, the file will be run again in Cypress.\n\n![Cypress Studio Add Test Completed Run](https://docs.cypress.io/img/guides/cypress-studio/add-test-final.png)\n\nFinally, viewing our test code, we can see that the test is updated after clicking \"Save Commands\" with the actions we recorded in Cypress Studio.\n\n```\n// Code from Real World App (RWA)import { User } from 'models'describe('Cypress Studio Demo', () => {  beforeEach(() => {    cy.task('db:seed')    cy.database('find', 'users').then((user: User) => {      cy.login(user.username, 's3cret', true)    })  })  it('create new transaction', () => {    // Extend test with Cypress Studio  })  /* === Test Created with Cypress Studio === */  it('create bank account', function () {    /* ==== Generated with Cypress Studio ==== */    cy.get('[data-test=sidenav-bankaccounts]').click()    cy.get('[data-test=bankaccount-new] > .MuiButton-label').click()    cy.get('#bankaccount-bankName-input').click()    cy.get('#bankaccount-bankName-input').type('Test Bank Account')    cy.get('#bankaccount-routingNumber-input').click()    cy.get('#bankaccount-routingNumber-input').type('987654321')    cy.get('#bankaccount-accountNumber-input').click()    cy.get('#bankaccount-accountNumber-input').type('123456789')    cy.get('[data-test=bankaccount-submit] > .MuiButton-label').click()    /* ==== End Cypress Studio ==== */  })})\n```\n\n## History[​](#History \"Direct link to History\")\n\n| Version | Changes |\n| --- | --- |\n| [10.7.0](https://docs.cypress.io/guides/references/changelog#10-7-0) | Re-introduced Cypress Studio into version 10 |\n| [8.1.0](https://docs.cypress.io/guides/references/changelog#8-1-0) | Added ability to generate assertions |\n| [6.3.0](https://docs.cypress.io/guides/references/changelog#6-3-0) | Added Cypress Studio as experimental |",
    "title": "Cypress Studio | Cypress Documentation",
    "description": "Experimental",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/guides/launching-browsers",
    "markdown": "# Launching Browsers | Cypress Documentation\n\nWhen you run tests in Cypress, we launch a browser for you. This enables us to:\n\n1.  Create a clean, pristine testing environment.\n2.  Access the privileged browser APIs for automation.\n\ninfo\n\n**Cross Browser Support**\n\nCypress currently supports Firefox and Chrome-family browsers (including Edge and Electron). To run tests optimally across these browsers in CI, check out the strategies demonstrated in the [cross browser Testing](https://docs.cypress.io/guides/guides/cross-browser-testing) guide.\n\nWhen Cypress is initially launched, you can choose to test your application using number of browsers including:\n\n*   [Chrome](https://www.google.com/chrome/)\n*   [Chrome Beta](https://www.google.com/chrome/beta/)\n*   [Chrome Canary](https://www.google.com/chrome/canary/)\n*   [Chromium](https://www.chromium.org/Home)\n*   [Edge](https://www.microsoft.com/edge)\n*   [Edge Beta](https://www.microsoftedgeinsider.com/download)\n*   [Edge Canary](https://www.microsoftedgeinsider.com/download)\n*   [Edge Dev](https://www.microsoftedgeinsider.com/download)\n*   [Electron](https://electron.atom.io/)\n*   [Firefox](https://www.mozilla.org/firefox/)\n*   [Firefox Developer Edition](https://www.mozilla.org/firefox/developer/)\n*   [Firefox Nightly](https://www.mozilla.org/firefox/nightly/)\n*   [WebKit (Experimental)](#WebKit-Experimental)\n\nCypress automatically detects available browsers on your OS. You can switch the browser by using the drop down near the top right corner:\n\n![Select a different browser](https://docs.cypress.io/img/guides/launching-browsers/v10/browser-list-dropdown.png)\n\n### Browser versions supported[​](#Browser-versions-supported \"Direct link to Browser versions supported\")\n\nCypress supports the browser versions below:\n\n*   Chrome 80 and above.\n*   Edge 80 and above.\n*   Firefox 86 and above.\n\n### Download specific Chrome version[​](#Download-specific-Chrome-version \"Direct link to Download specific Chrome version\")\n\nThe Chrome browser is evergreen - meaning it will automatically update itself, sometimes causing a breaking change in your automated tests. You can use [https://vikyd.github.io/download-chromium-history-version](https://vikyd.github.io/download-chromium-history-version) to download a specific released version of Chromium for every platform.\n\n### Electron Browser[​](#Electron-Browser \"Direct link to Electron Browser\")\n\nIn addition to the browsers found on your system, you'll notice that Electron is an available browser. The Electron browser is a version of Chromium that comes with [Electron](https://electron.atom.io/).\n\nThe Electron browser has the advantage of coming baked into Cypress and does not need to be installed separately.\n\nBy default, when running [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run) from the CLI, we will launch all browsers headlessly.\n\n#### You can also launch Electron headed:[​](#You-can-also-launch-Electron-headed \"Direct link to You can also launch Electron headed:\")\n\nBecause Electron is the default browser - it is typically run in CI. If you are seeing failures in CI, to easily debug them you may want to run locally with the `--headed` option.\n\n### Chrome Browsers[​](#Chrome-Browsers \"Direct link to Chrome Browsers\")\n\nAll Chrome\\* flavored browsers will be detected and are supported above Chrome 64.\n\nYou can launch Chrome like this:\n\n```\ncypress run --browser chrome\n```\n\nTo use this command in CI, you need to install the browser you want - or use one of our [docker images](https://docs.cypress.io/examples/docker).\n\nBy default, we will launch Chrome in headlessly during `cypress run`. To run Chrome headed, you can pass the `--headed` argument to `cypress run`.\n\nYou can also launch Chromium:\n\n```\ncypress run --browser chromium\n```\n\nOr Chrome Beta:\n\n```\ncypress run --browser chrome:beta\n```\n\nOr Chrome Canary:\n\n```\ncypress run --browser chrome:canary\n```\n\n### Edge Browsers[​](#Edge-Browsers \"Direct link to Edge Browsers\")\n\nMicrosoft Edge-family (Chromium-based) browsers are supported by Cypress.\n\nYou can launch Microsoft Edge like this:\n\n```\ncypress run --browser edge\n```\n\nOr Microsoft Edge Beta:\n\n```\ncypress run --browser edge:beta\n```\n\nOr Microsoft Edge Canary:\n\n```\ncypress run --browser edge:canary\n```\n\nOr Microsoft Edge Dev:\n\n```\ncypress run --browser edge:dev\n```\n\n### Firefox Browsers[​](#Firefox-Browsers \"Direct link to Firefox Browsers\")\n\nFirefox-family browsers are supported by Cypress.\n\nYou can launch Firefox like this:\n\n```\ncypress run --browser firefox\n```\n\nOr Firefox Developer/Nightly Edition:\n\n```\ncypress run --browser firefox:devcypress run --browser firefox:nightly\n```\n\nTo use this command in CI, you need to install these other browsers - or use one of our [docker images](https://docs.cypress.io/examples/docker).\n\nBy default, we will launch Firefox headlessly during `cypress run`. To run Firefox headed, you can pass the `--headed` argument to `cypress run`.\n\n### WebKit (Experimental)[​](#WebKit-Experimental \"Direct link to WebKit (Experimental)\")\n\nCypress has [experimental](https://docs.cypress.io/guides/references/experiments) support for WebKit, Safari's browser engine. Testing your app with WebKit is representative of how your app would run in Safari. To opt-in to `experimentalWebKitSupport`, follow these steps:\n\n1.  Add `experimentalWebKitSupport: true` to your [configuration](https://docs.cypress.io/guides/references/configuration) to enable the experiment.\n2.  Install the `playwright-webkit` npm package in your repo to acquire WebKit itself: `npm install [[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection) --save-dev`.\n    *   We built this experiment on top of the Playwright WebKit browser as a stepping stone towards creating a better UX with Cypress-provided browsers in the future. Thank you, Playwright contributors.\n3.  Now, you should be able to use WebKit like any other browser. For example, to record with WebKit in CI:\n    \n    ```\n    cypress run --browser webkit --record # ...\n    ```\n    \n\nWebKit support is _experimental_, so you may encounter issues. If you encounter an issue not on the \"Known Issues\" list, please [open an issue](https://github.com/cypress-io/cypress/issues/new/choose) on the GitHub repository.\n\n#### Known Issues with `experimentalWebKitSupport`[​](#Known-Issues-with-experimentalWebKitSupport \"Direct link to Known-Issues-with-experimentalWebKitSupport\")\n\n*   `cy.origin()` is not yet supported.\n*   `cy.intercept()`'s `forceNetworkError` option is disabled.\n*   When using `experimentalSingleTabRunMode` with video recording in WebKit, only the video for the first spec is recorded.\n*   Some differences in `cy.type()` behavior:\n    *   `textInput` events are missing the `data` property\n    *   `beforeinput` events are missing the `inputType` property\n    *   `cy.type('{uparrow}')` and `cy.type('{downarrow}')` on an `input[type=number]` do not round to the nearest `step` specified\n*   Stack traces may be missing some function names and location information.\n*   See issues labeled [`experiment: webkit`](https://github.com/cypress-io/cypress/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22experiment%3A+webkit%22) for a complete list.\n\n#### Linux Dependencies[​](#Linux-Dependencies \"Direct link to Linux Dependencies\")\n\nWebKit requires additional dependencies to run on Linux. To install the required dependencies, run this:\n\n```\nnpx playwright install-deps webkit\n```\n\n### Launching by a path[​](#Launching-by-a-path \"Direct link to Launching by a path\")\n\nYou can launch any supported browser by specifying a path to the binary:\n\n```\ncypress run --browser /usr/bin/chromium\n```\n\n```\ncypress open --browser /usr/bin/chromium\n```\n\nCypress will automatically detect the type of browser supplied and launch it for you.\n\n[See the Command Line guide for more information about the `--browser` arguments](https://docs.cypress.io/guides/guides/command-line#cypress-run-browser-lt-browser-name-or-path-gt)\n\n[Having trouble launching a browser? Check out our troubleshooting guide](https://docs.cypress.io/guides/references/troubleshooting#Launching-browsers)\n\n### Customize available browsers[​](#Customize-available-browsers \"Direct link to Customize available browsers\")\n\nSometimes you might want to modify the list of browsers found before running tests.\n\nFor example, your web application might _only_ be designed to work in a Chrome browser, and not inside the Electron browser.\n\nIn the [setupNodeEvents](https://docs.cypress.io/api/plugins/configuration-api) function, you can filter the list of browsers passed inside the `config` object and return the list of browsers you want available for selection during `cypress open`.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      // inside config.browsers array each object has information like      // {      //   name: 'chrome',      //   channel: 'canary',      //   family: 'chromium',      //   displayName: 'Canary',      //   version: '80.0.3966.0',      //   path:      //    '/Applications/Canary.app/Contents/MacOS/Canary',      //   majorVersion: 80      // }      return {        browsers: config.browsers.filter(          (b) => b.family === 'chromium' && b.name !== 'electron'        ),      }    },  },})\n```\n\nWhen you open Cypress in a project that uses the above modifications to the `setupNodeEvents` function, Electron will no longer display in the list of available browsers.\n\ninfo\n\nIf you return an empty list of browsers or `browsers: null`, the default list will be restored automatically.\n\nIf you have installed a Chromium-based browser like [Brave](https://brave.com/), [Vivaldi](https://vivaldi.com/) you can add them to the list of returned browsers. Here is a configuration that inserts a local Brave browser into the returned list.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')const execa = require('execa')const findBrowser = () => {  // the path is hard-coded for simplicity  const browserPath =    '/Applications/Brave Browser.app/Contents/MacOS/Brave Browser'  return execa(browserPath, ['--version']).then((result) => {    // STDOUT will be like \"Brave Browser 77.0.69.135\"    const [, version] = /Brave Browser (\\d+\\.\\d+\\.\\d+\\.\\d+)/.exec(result.stdout)    const majorVersion = parseInt(version.split('.')[0])    return {      name: 'Brave',      channel: 'stable',      family: 'chromium',      displayName: 'Brave',      version,      path: browserPath,      majorVersion,    }  })}module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      return findBrowser().then((browser) => {        return {          browsers: config.browsers.concat(browser),        }      })    },  },})\n```\n\nOnce selected, the Brave browser is detected using the same approach as any other browser of the `chromium` family.\n\n![Brave browser executing end-to-end tests](https://docs.cypress.io/img/guides/launching-browsers/v10/brave-running-tests.png)\n\nIf you modify the list of browsers, you can see the [resolved configuration](https://docs.cypress.io/guides/references/configuration#Resolved-Configuration) in the **Settings** tab.\n\n### Unsupported Browsers[​](#Unsupported-Browsers \"Direct link to Unsupported Browsers\")\n\nSome browsers such as Safari and Internet Explorer are not currently supported. Support for more browsers is on our roadmap.\n\n## Browser Environment[​](#Browser-Environment \"Direct link to Browser Environment\")\n\nCypress launches the browser in a way that's different from a regular browser environment. But it launches in a way that we believe makes testing _more reliable_ and _accessible_.\n\n### Launching Browsers[​](#Launching-Browsers \"Direct link to Launching Browsers\")\n\nWhen Cypress goes to launch your browser it will give you an opportunity to modify the arguments used to launch the browser.\n\nThis enables you to do things like:\n\n*   Load your own extension\n*   Enable or disable experimental features\n\n[This part of the API is documented here.](https://docs.cypress.io/api/plugins/browser-launch-api)\n\n### Cypress Profile[​](#Cypress-Profile \"Direct link to Cypress Profile\")\n\nCypress generates its own isolated profile apart from your normal browser profile. This means things like `history` entries, `cookies`, and `3rd party extensions` from your regular browsing session will not affect your tests in Cypress.\n\ncaution\n\n**Wait, I need my developer extensions!**\n\nThat's no problem - you have to reinstall them **once** in the Cypress launched browser. We'll continue to use this Cypress testing profile on subsequent launches so all of your configuration will be preserved.\n\nAny extra tabs (i.e. tabs other than the one opened by Cypress) will be closed between tests. We recommend using your own browser instead of the one launched by Cypress for general-purpose browsing.\n\n### Disabled Barriers[​](#Disabled-Barriers \"Direct link to Disabled Barriers\")\n\nCypress automatically disables certain functionality in the Cypress launched browser that tend to get in the way of automated testing.\n\n#### The Cypress launched browser automatically:[​](#The-Cypress-launched-browser-automatically \"Direct link to The Cypress launched browser automatically:\")\n\n*   Ignores certificate errors.\n*   Allows blocked pop-ups.\n*   Disables 'Saving passwords'.\n*   Disables 'Autofill forms and passwords'.\n*   Disables asking to become your primary browser.\n*   Disables device discovery notifications.\n*   Disables language translations.\n*   Disables restoring sessions.\n*   Disables background network traffic.\n*   Disables background and renderer throttling.\n*   Disables prompts requesting permission to use devices like cameras or mics\n*   Disables user gesture requirements for autoplaying videos.\n\nYou can see all of the default chrome command line switches we send [here](https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/browsers/chrome.ts#L36).\n\n## Browser Icon[​](#Browser-Icon \"Direct link to Browser Icon\")\n\nYou might notice that if you already have the browser open you will see two of the same browser icons in your dock.\n\n![Cypress icon with 2 Google Chrome icons](https://docs.cypress.io/img/guides/launching-browsers/v10/multiple-chrome-icons.png)\n\nWe understand that when Cypress is running in its own profile it can be difficult to tell the difference between your normal browser and Cypress.\n\nFor this reason you may find downloading and using a browser's release channel versions (Dev, Canary, etc) useful. These browsers have different icons from the standard stable browser, making them more distinguishable. You can also use the bundled [Electron browser](#Electron-Browser), which does not have a dock icon.\n\nAdditionally, in Chrome-based browsers, we've made the browser spawned by Cypress look different than regular sessions. You'll see a darker theme around the chrome of the browser. You'll always be able to visually distinguish these.\n\n![Cypress Browser with darker chrome](https://docs.cypress.io/img/guides/launching-browsers/v10/cypress-browser-chrome.png)\n\n## Troubleshooting[​](#Troubleshooting \"Direct link to Troubleshooting\")\n\n[Having issues launching installed browsers? Read more about troubleshooting browser launching](https://docs.cypress.io/guides/references/troubleshooting#Launching-browsers)\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Browser Launch API](https://docs.cypress.io/api/plugins/browser-launch-api)\n*   [Cross browser Testing](https://docs.cypress.io/guides/guides/cross-browser-testing)",
    "title": "Launching Browsers | Cypress Documentation",
    "description": "When you run tests in Cypress, we launch a browser for you. This enables us to:",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/end-to-end-testing/auth0-authentication",
    "markdown": "# Auth0 Integration: Cypress Auth | Cypress Documentation\n\n## Auth0 Authentication\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   Log in to [Auth0](https://auth0.com/) through the UI with [`cy.origin()`](https://docs.cypress.io/api/commands/origin)\n*   Programmatically authenticate with [Auth0](https://auth0.com/) via a custom Cypress command\n*   Adapt your [Auth0](https://auth0.com/) application for programmatic authentication during testing\n\ncaution\n\nThis guide is setup for testing against an [Auth0](https://auth0.com/) Single Page Application using the [Classic Universal Login Experience](https://auth0.com/docs/universal-login/classic). This configuration is recommended for a \"Test Tenant\" and/or \"Test API\" setup for automated end-to-end testing.\n\ntip\n\n**Authenticate by visiting a different domain with [`cy.origin()`](https://docs.cypress.io/api/commands/origin)**\n\nTypically, logging in a user within your app by authenticating via a third-party provider requires visiting a login page hosted on a different domain. Before Cypress [v12.0.0](https://on.cypress.io/changelog#12-0-0), Cypress tests were limited to visiting domains of the same origin, making programmatic login the only option for authenticating users with a third-party API. As of Cypress [v12.0.0](https://on.cypress.io/changelog#12-0-0), Cypress tests are no longer limited to visiting domains of a single origin, meaning you can easily authenticate with [Auth0](https://auth0.com/) via the UI!\n\n## Auth0 Application Setup[​](#Auth0-Application-Setup \"Direct link to Auth0 Application Setup\")\n\nTo get started with Auth0, an application needs to be setup within the [Auth0 Dashboard](https://auth0.com/docs/get-started/auth0-overview/dashboard) via the following steps:\n\n1.  Visit the [Auth0 Dashboard](https://auth0.com/docs/get-started/auth0-overview/dashboard) and click the \"Create Application\" button.\n2.  Enter the desired name for your application.\n3.  Select \"Single Page Application\"\n\nOnce your application is created, visit the [Application Settings](https://auth0.com/docs/dashboard/reference/settings-application) tab under your application, and add your local development URL and port (e.g `http://localhost:3000`) under the following sections:\n\n*   Allowed Callback URLs\n*   Allowed Logout URLs\n*   Allowed Web Origins\n*   Allowed Origins (CORS)\n\nIn the bottom of [Application Settings](https://auth0.com/docs/dashboard/reference/settings-application), click [Show Advanced Settings](https://auth0.com/docs/dashboard/reference/settings-application#advanced-settings), select \"Grant Types\" tab and check \"Password\" (unchecked by default).\n\nNext, click your Tenant icon (upper right avatar menu) to go to your [Tenant Settings](https://auth0.com/docs/get-started/tenant-settings). On the [General](https://auth0.com/docs/dashboard/reference/settings-tenant#general) tab go to the [API Authorization Settings](https://auth0.com/docs/dashboard/reference/settings-tenant#api-authorization-settings)\n\n*   Set \"Default Audience\" to the Audience URL for the Application you are testing (e.g. `https://your-api-id.auth0.com/api/v2/`)\n*   Set \"Default Directory\" to **\"Username-Password-Authentication\"**\n\nFinally, create a user in the [Auth0 User Store](https://auth0.com/docs/connections/database#using-the-auth0-user-store) for testing with Cypress. This testing-dedicated target user will be login to your application within your test specs. If required for your testing purposes, you can make as many users needed to test your specific application.\n\n## Setting Auth0 app credentials in Cypress[​](#Setting-Auth0-app-credentials-in-Cypress \"Direct link to Setting Auth0 app credentials in Cypress\")\n\nTo have access to test user credentials within our tests we need to configure Cypress to use the [Auth0](https://auth0.com/) environment variables set in the `.env` file.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')// Populate process.env with values from .env filerequire('dotenv').config()module.exports = defineConfig({  env: {    auth0_username: process.env.AUTH0_USERNAME,    auth0_password: process.env.AUTH0_PASSWORD,    auth0_domain: process.env.REACT_APP_AUTH0_DOMAIN,    auth0_audience: process.env.REACT_APP_AUTH0_AUDIENCE,    auth0_scope: process.env.REACT_APP_AUTH0_SCOPE,    auth0_client_id: process.env.REACT_APP_AUTH0_CLIENTID,    auth0_client_secret: process.env.AUTH0_CLIENT_SECRET,  },})\n```\n\nNote that `auth0_client_secret` is only needed for [programmatic login](#Programmatic-Login).\n\n## Custom Command for Auth0 Authentication[​](#Custom-Command-for-Auth0-Authentication \"Direct link to Custom Command for Auth0 Authentication\")\n\nThere are two ways you can authenticate to Auth0:\n\n*   [Login with `cy.origin()`](#Login-with-cyorigin)\n*   [Programmatic Login](#Programmatic-Login)\n\n### Login with [`cy.origin()`](https://docs.cypress.io/api/commands/origin)[​](#Login-with-cyorigin \"Direct link to Login-with-cyorigin\")\n\nNext, we'll write a custom command called `loginToAuth0` to perform a login to [Auth0](https://auth0.com/). This command will use [`cy.origin()`](https://docs.cypress.io/api/commands/origin) to\n\n1.  Navigate to the Auth0 login\n2.  Input user credentials\n3.  Sign in and redirect back to the [Cypress Real World App](https://github.com/cypress-io/cypress-realworld-app)\n4.  Cache the results with [`cy.session()`](https://docs.cypress.io/api/commands/session)\n\n```\n// cypress/support/auth-provider-commands/auth0.tsfunction loginViaAuth0Ui(username: string, password: string) {  // App landing page redirects to Auth0.  cy.visit('/')  // Login on Auth0.  cy.origin(    Cypress.env('auth0_domain'),    { args: { username, password } },    ({ username, password }) => {      cy.get('input#username').type(username)      cy.get('input#password').type(password, { log: false })      cy.contains('button[value=default]', 'Continue').click()    }  )  // Ensure Auth0 has redirected us back to the RWA.  cy.url().should('equal', 'http://localhost:3000/')}Cypress.Commands.add('loginToAuth0', (username: string, password: string) => {  const log = Cypress.log({    displayName: 'AUTH0 LOGIN',    message: [`🔐 Authenticating | ${username}`],    // @ts-ignore    autoEnd: false,  })  log.snapshot('before')  loginViaAuth0Ui(username, password)  log.snapshot('after')  log.end()})\n```\n\nNow, we can use our `loginToAuth0` command in the test. Below is our test to login as a user via Auth0 and run a basic sanity check.\n\n```\ndescribe('Auth0', function () {  beforeEach(function () {    cy.task('db:seed')    cy.intercept('POST', '/graphql').as('createBankAccount')    cy.loginToAuth0(      Cypress.env('auth0_username'),      Cypress.env('auth0_password')    )    cy.visit('/')  })  it('shows onboarding', function () {    cy.contains('Get Started').should('be.visible')  })})\n```\n\nLastly, we can refactor our login command to take advantage of [`cy.session()`](https://docs.cypress.io/api/commands/session) to store our logged in user so we don't have to reauthenticate before every test.\n\n```\nCypress.Commands.add('loginToAuth0', (username: string, password: string) => {  const log = Cypress.log({    displayName: 'AUTH0 LOGIN',    message: [`🔐 Authenticating | ${username}`],    // @ts-ignore    autoEnd: false,  })  log.snapshot('before')  cy.session(    `auth0-${username}`,    () => {      loginViaAuth0Ui(username, password)    },    {      validate: () => {        // Validate presence of access token in localStorage.        cy.wrap(localStorage)          .invoke('getItem', 'authAccessToken')          .should('exist')      },    }  )  log.snapshot('after')  log.end()})\n```\n\n### Programmatic Login[​](#Programmatic-Login \"Direct link to Programmatic Login\")\n\nBelow is a command to programmatically login into [Auth0](https://auth0.com/), using the [/oauth/token endpoint](https://auth0.com/docs/protocols/protocol-oauth2#token-endpoint) and set an item in `localStorage` with the authenticated users details, which we will use in our application code to verify we are authenticated under test.\n\nThe `loginByAuth0Api` command will execute the following steps:\n\n1.  Use the [/oauth/token endpoint](https://auth0.com/docs/protocols/protocol-oauth2#token-endpoint) to perform the programmatic login.\n2.  Finally the `auth0Cypress` `localStorage` item is set with the `access token`, `id_token` and user profile.\n\n```\n// cypress/support/commands.jsCypress.Commands.add(  'loginByAuth0Api',  (username: string, password: string) => {    cy.log(`Logging in as ${username}`)    const client_id = Cypress.env('auth0_client_id')    const client_secret = Cypress.env('auth0_client_secret')    const audience = Cypress.env('auth0_audience')    const scope = Cypress.env('auth0_scope')    cy.request({      method: 'POST',      url: `https://${Cypress.env('auth0_domain')}/oauth/token`,      body: {        grant_type: 'password',        username,        password,        audience,        scope,        client_id,        client_secret,      },    }).then(({ body }) => {      const claims = jwt.decode(body.id_token)      const {        nickname,        name,        picture,        updated_at,        email,        email_verified,        sub,        exp,      } = claims      const item = {        body: {          ...body,          decodedToken: {            claims,            user: {              nickname,              name,              picture,              updated_at,              email,              email_verified,              sub,            },            audience,            client_id,          },        },        expiresAt: exp,      }      window.localStorage.setItem('auth0Cypress', JSON.stringify(item))      cy.visit('/')    })  })\n```\n\nWith our Auth0 app setup properly in the Auth0 Developer console, necessary environment variables in place, and our `loginByAuth0Api` command implemented, we will be able to authenticate with Auth0 while our app is under test. Below is a test to login as a user via [Auth0](https://auth0.com/), complete the onboarding process and logout.\n\n```\ndescribe('Auth0', function () {  beforeEach(function () {    cy.task('db:seed')    cy.loginByAuth0Api(      Cypress.env('auth0_username'),      Cypress.env('auth0_password')    )  })  it('shows onboarding', function () {    cy.contains('Get Started').should('be.visible')  })})\n```\n\n## Adapting an Auth0 App for Testing[​](#Adapting-an-Auth0-App-for-Testing \"Direct link to Adapting an Auth0 App for Testing\")\n\ninfo\n\n**Note**\n\nThe previous sections focused on the recommended Auth0 authentication practice within Cypress tests. To use this practice it is assumed you are testing an app appropriately built or adapted to use Auth0.\n\nThe following sections provides guidance on building or adapting an app to use Auth0 authentication. Please note that if you are [logging in with `cy.origin()`](#Login-with-cyorigin) and your app is already successfully integrated with Auth0, you do not need to make any further changes to your app and the remainder of this guide should be regarded as purely informational.\n\nThe [Cypress Real World App](https://github.com/cypress-io/cypress-realworld-app) is used and provides configuration and runnable code for both the React SPA and the Express back end.\n\nThe front end uses the [auth0-react SDK](https://github.com/auth0/auth0-react) for React Single Page Applications (SPA), which uses the [auth0-spa-js SDK](https://github.com/auth0/auth0-spa-js) underneath. The back end uses [express-jwt](https://github.com/auth0/express-jwt) to validate JWT's against [Auth0](https://auth0.com/).\n\n### Adapting the back end[​](#Adapting-the-back-end \"Direct link to Adapting the back end\")\n\nIn order to validate API requests from the frontend, we install [express-jwt](https://github.com/auth0/express-jwt) and [jwks-rsa](https://github.com/auth0/node-jwks-rsa) and configure validation for JWT's from [Auth0](https://auth0.com/).\n\n```\n// backend/helpers.tsimport jwt from 'express-jwt'import jwksRsa from 'jwks-rsa'dotenv.config()const auth0JwtConfig = {  secret: jwksRsa.expressJwtSecret({    cache: true,    rateLimit: true,    jwksRequestsPerMinute: 5,    jwksUri: `https://${process.env.REACT_APP_AUTH0_DOMAIN}/.well-known/jwks.json`,  }),  // Validate the audience and the issuer.  audience: process.env.REACT_APP_AUTH0_AUDIENCE,  issuer: `https://${process.env.REACT_APP_AUTH0_DOMAIN}/`,  algorithms: ['RS256'],}\n```\n\nNext, we'll define an Express middleware function to be use in our routes to verify the [Auth0](https://auth0.com/) JWT sent by the front end API requests as the `Bearer` token.\n\n```\n// backend/helpers.ts// ...export const checkJwt = jwt(auth0JwtConfig).unless({ path: ['/testData/*'] })\n```\n\nOnce this helper is defined, we can use globally to apply to all routes:\n\n```\n// backend/app.ts// initial imports ...import { checkJwt } from './helpers'// ...if (process.env.REACT_APP_AUTH0) {  app.use(checkJwt)}// routes ...\n```\n\n### Adapting the front end[​](#Adapting-the-front-end \"Direct link to Adapting the front end\")\n\nWe need to update our front end React app to allow for authentication with [Auth0](https://auth0.com/). As mentioned above, the [auth0-react SDK](https://github.com/auth0/auth0-react) for React Single Page Applications (SPA) is used.\n\nFirst, we create a `AppAuth0.tsx` container to render our application as it is authenticated with [Auth0](https://auth0.com/). The component is identical to the `App.tsx` component, but uses the `useAuth0` React Hook, removes the need for the Sign Up and Sign In routes and wraps the component with the `withAuthenticationRequired` higher order function (HOC).\n\nA `useEffect` hook is added to get the access token for the authenticated user and send an `AUTH0` event with the `user` and `token` objects to work with the existing authentication layer (`authMachine.ts`).\n\n```\n// src/containers/AppAuth0.tsx// initial imports ...import { withAuthenticationRequired, useAuth0 } from '@auth0/auth0-react'// ...const AppAuth0 = () => {  const { isAuthenticated, user, getAccessTokenSilently } = useAuth0()  // ...  useEffect(() => {    ;(async function waitForToken() {      const token = await getAccessTokenSilently()      authService.send('AUTH0', { user, token })    })()  }, [user, getAccessTokenSilently])  // ...  const isLoggedIn =    isAuthenticated &&    (authState.matches('authorized') ||      authState.matches('refreshing') ||      authState.matches('updating'))  return <div className={classes.root}>// ...</div>}export default withAuthenticationRequired(AppAuth0)\n```\n\nNote: The full [AppAuth0.tsx component](https://github.com/cypress-io/cypress-realworld-app/blob/develop/src/containers/AppAuth0.tsx) is in the [Cypress Real World App](https://github.com/cypress-io/cypress-realworld-app).\n\nNext, we update our entry point (`index.tsx`) to wrap our application with the `<Auth0Provider>` from the [auth0-react SDK](https://github.com/auth0/auth0-react) SDK providing a custom `onRedirectCallback`. We pass props for the Auth0 environment variables set in `.env` above, and render our `<AppAuth0>` component as the application.\n\n```\n// src/index.tsx// initial imports ...import AppAuth0 from \"./containers/AppAuth0\";// ..const onRedirectCallback = (appState: any) => {  history.replace((appState && appState.returnTo) || window.location.pathname);};if (process.env.REACT_APP_AUTH0) {  ReactDOM.render(    <Auth0Provider      domain={process.env.REACT_APP_AUTH0_DOMAIN!}      clientId={process.env.REACT_APP_AUTH0_CLIENTID!}      redirectUri={window.location.origin}      audience={process.env.REACT_APP_AUTH0_AUDIENCE}      scope={process.env.REACT_APP_AUTH0_SCOPE}      onRedirectCallback={onRedirectCallback}    >      <Router history={history}>        <ThemeProvider theme={theme}>          <AppAuth0 />        </ThemeProvider>      </Router>    </Auth0Provider>,    document.getElementById(\"root\")  );} else {  // render passport-local App.tsx}\n```\n\nAn update to our [AppAuth0.tsx component](https://github.com/cypress-io/cypress-realworld-app/blob/develop/src/containers/AppAuth0.tsx) is needed to conditionally use the `auth0Cypress` `localStorage` item.\n\nIn the code below, we conditionally apply a `useEffect` block based on being under test with Cypress (using `window.Cypress`).\n\nIn addition, we will update the export to be wrapped with `withAuthenticationRequired` if we are not under test in Cypress. This allows our application to work with the [Auth0](https://auth0.com/) redirect login flow in development/production but not when under test in Cypress.\n\n```\n// src/containers/AppAuth0.tsx// initial imports ...import { withAuthenticationRequired, useAuth0 } from \"@auth0/auth0-react\";// ...const AppAuth0 = () => {  const { isAuthenticated, user, getAccessTokenSilently } = useAuth0();  // ...  useEffect(() => {      (async function waitForToken() {        const token = await getAccessTokenSilently();        authService.send(\"AUTH0\", { user, token });      })();    }, [user, getAccessTokenSilently]);  // If under test in Cypress, get credentials from \"auth0Cypress\" localstorage item and send event to our state management to log the user into the SPA  if (window.Cypress) {    useEffect(() => {      const auth0 = JSON.parse(localStorage.getItem(\"auth0Cypress\")!);      authService.send(\"AUTH0\", {        user: auth0.body.decodedToken.user,        token: auth0.body.access_token,      });    }, []);  } else {    useEffect(() => {      (async function waitForToken() {        const token = await getAccessTokenSilently();        authService.send(\"AUTH0\", { user, token });      })();    }, [isAuthenticated, user, getAccessTokenSilently]);  }  // ...  const isLoggedIn =    isAuthenticated &&    (authState.matches(\"authorized\") ||      authState.matches(\"refreshing\") ||      authState.matches(\"updating\"));  return (    <div className={classes.root}>      // ...    </div>  );};// Conditional export wrapped with `withAuthenticationRequired` if we are not under test in Cypress.let appAuth0 = window.Cypress ? AppAuth0 : withAuthenticationRequired(AppAuth0);export default appAuth0\n```\n\n## Auth0 Rate Limiting Logins[​](#Auth0-Rate-Limiting-Logins \"Direct link to Auth0 Rate Limiting Logins\")\n\nBe aware of the rate limit statement in the Auth0 documentation:\n\n[Auth0 Rate Limit](https://auth0.com/docs/connections/database/rate-limits) - \"If a user attempts to login 20 times per minute as the same user from the same location, regardless of having the correct credentials, the rate limit will come into effect. When this happens, the user can make 10 attempts per minute.\"\n\nThis limit can be reached as the size of a test suite grows along with enabling [parallelized runs](https://on.cypress.io/parallelization) to speed up test run duration.\n\nIf you run into this rate limit, a programmatic approach can be added to the `loginByAuth0` command to clear a blocked IP prior to the test run.\n\nNext you'll need to obtain a [API token](https://auth0.com/docs/api/management/v2/tokens) to interact with the [Auth0 Management API](https://auth0.com/docs/api/management/v2). This token is a JSON Web Token (JWT) and it contains specific granted permissions for the API.\n\nAdd this token as environment variable `AUTH0_MGMT_API_TOKEN` to our [Cypress Real World App](https://github.com/cypress-io/cypress-realworld-app) `.env` with your API token.\n\n```\n// .env// ... additional keysAUTH0_MGMT_API_TOKEN = 'YOUR-MANAGEMENT-API-TOKEN'\n```\n\nWith this token in place, we can add interaction with the [Auth0 Anomaly remove the blocked IP address endpoint](https://auth0.com/docs/api/management/v2#!/Anomaly/delete_ips_by_id) to our `loginByAuth0Api` command. This will send a delete request to [Auth0 Management API](https://auth0.com/docs/api/management/v2) anomaly endpoint to unblock an IP that may become blocked during the test run.\n\ninfo\n\n**Tip**\n\n[icanhazip.com](http://icanhazip.com/) is a free, hosted service to find a system's current external IP address.\n\n```\nCypress.Commands.add('loginByAuth0Api', (username, password) => {  // Useful when rate limited by Auth0  cy.exec('curl -4 icanhazip.com')    .its('stdout')    .then((ip) => {      cy.request({        method: 'DELETE',        url: `https://${Cypress.env(          'auth0_domain'        )}/api/v2/anomaly/blocks/ips/${ip}`,        auth: {          bearer: Cypress.env('auth0_mgmt_api_token'),        },      })    })  // ... remaining loginByAuth0Api command})\n```",
    "title": "Auth0 Integration: Cypress Auth | Cypress Documentation",
    "description": "Seamlessly implement Auth0 authentication with Cypress. Integrate Auth0 authentication for secure testing",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/guides/module-api",
    "markdown": "# Module API | Cypress Documentation\n\nYou can require Cypress as a node module from your application under test and run Cypress via Node.js. This can be useful when you want access to the test results directly after the run. With this workflow, for example, you can:\n\n*   Send a notification about failing tests with included screenshot images\n*   Rerun a single failing spec file\n*   Kick off other builds or scripts\n\n## `cypress.run()`[​](#cypressrun \"Direct link to cypressrun\")\n\nRuns Cypress tests via Node.js and resolve with all test results. See the [Cypress Module API recipe](https://github.com/cypress-io/cypress-example-recipes#fundamentals).\n\n```\n// e2e-run-tests.jsconst cypress = require('cypress')cypress.run({  reporter: 'junit',  browser: 'chrome',  config: {    baseUrl: 'http://localhost:8080',    video: true,  },  env: {    login_url: '/login',    products_url: '/products',  },})\n```\n\nYou can then run Cypress by running the following in your terminal or an npm script:\n\n### Options[​](#Options \"Direct link to Options\")\n\nJust like the [Command Line options](https://docs.cypress.io/guides/guides/command-line) for `cypress run`, you can pass options that modify how Cypress runs.\n\n| Option | Type | Description |\n| --- | --- | --- |\n| `autoCancelAfterFailures` | _number_ \\| _false_ | Specify the number of failures to cancel a run being recorded to the Cloud or `false` to disable auto-cancellation. |\n| `browser` | _string_ | Specify different browser to run tests in, either by name or by filesystem path |\n| `ciBuildId` | _string_ | Specify a unique identifier for a run to enable [grouping](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#Grouping-test-runs) or [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) |\n| `config` | _object_ | Specify [configuration](https://docs.cypress.io/guides/references/configuration) |\n| `configFile` | _string_ | Path to the [configuration file](https://docs.cypress.io/guides/references/configuration#Configuration-File) to be used. |\n| `env` | _object_ | Specify [environment variables](https://docs.cypress.io/guides/guides/environment-variables) |\n| `group` | _string_ | [Group](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#Grouping-test-runs) recorded tests together under a single run |\n| `headed` | _boolean_ | Displays the browser instead of running headlessly |\n| `headless` | _boolean_ | Hide the browser instead of running headed (default during `cypress run`) |\n| `key` | _string_ | Specify your secret record key |\n| `exit` | _boolean_ | Whether to close Cypress after all tests run |\n| `parallel` | _boolean_ | Run recorded specs in [parallel](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) across multiple machines |\n| `port` | _number_ | Override default port |\n| `project` | _string_ | Path to a specific project |\n| `quiet` | _boolean_ | If passed, Cypress output will not be printed to `stdout`. Only output from the configured [Mocha reporter](https://docs.cypress.io/guides/tooling/reporters) will print. |\n| `record` | _boolean_ | Whether to record the test run |\n| `reporter` | _string_ | Specify a [Mocha reporter](https://docs.cypress.io/guides/tooling/reporters) |\n| `reporterOptions` | _object_ | Specify [Mocha reporter](https://docs.cypress.io/guides/tooling/reporters) options |\n| `runnerUi` | _boolean_ | Whether to display the Cypress Runner UI. Defaults to `false` when [Test Replay](https://docs.cypress.io/guides/cloud/test-replay) is enabled. Otherwise defaults to `true`. |\n| `slowTestThreshold` | _number_ | Time, in milliseconds, to consider a test \"slow\" during `cypress run`. A slow test will display in orange text in the default reporter. |\n| `spec` | _string_ | Specify the specs to run, see examples below |\n| `tag` | _string_ | Identify a run with a tag or tags |\n| `testingType` | _string_ | Specify the type of tests to execute; either `e2e` or `component`. Defaults to `e2e` |\n\n### Examples[​](#Examples \"Direct link to Examples\")\n\n#### Run a single spec file[​](#Run-a-single-spec-file \"Direct link to Run a single spec file\")\n\nHere is an example of programmatically running a spec file. Note that the file path is relative to the current working directory.\n\n```\n// e2e-run-tests.jsconst cypress = require('cypress')cypress  .run({    // the path is relative to the current working directory    spec: './cypress/e2e/examples/actions.cy.js',  })  .then((results) => {    console.log(results)  })  .catch((err) => {    console.error(err)  })\n```\n\nYou can then run Cypress by running the following in your terminal or an npm script:\n\n#### Run specs using wildcard[​](#Run-specs-using-wildcard \"Direct link to Run specs using wildcard\")\n\nYou can pass a wildcard pattern to run all matching spec files\n\n```\nconst cypress = require('cypress')cypress.run({  // the wildcard path is relative to the current working directory  spec: './cypress/e2e/**/api*.js',})\n```\n\n#### Programmatically control which browser to run[​](#Programmatically-control-which-browser-to-run \"Direct link to Programmatically control which browser to run\")\n\nYou can pass a browser option to specify which browser to run tests in so that you can programmatically control which specs to run in each browser.\n\n```\n// run 'node cypress-chrome.js'const cypress = require('cypress')cypress.run({  spec: './cypress/e2e/**/chrome-test*.js',  browser: 'chrome',})\n```\n\n```\n// run 'node cypress-firefox.js'const cypress = require('cypress')cypress.run({  spec: './cypress/e2e/**/firefox-test*.js',  browser: 'firefox',})\n```\n\n#### Use modern syntax[​](#Use-modern-syntax \"Direct link to Use modern syntax\")\n\nIf your Node version allows you can use the modern `async / await` syntax to wait for the Promise returned by the `cypress.run` method.\n\n```\nconst cypress = require('cypress');(async () => {  const results = await cypress.run()  // use the results object})()\n```\n\n### Results[​](#Results \"Direct link to Results\")\n\n`cypress.run()` returns a `Promise` that resolves with an object containing the tests results. A typical run could return something like this:\n\n```\n{  \"cypressVersion\": \"3.0.2\",  \"endedTestsAt\": \"2018-07-11T17:53:35.675Z\",  \"browserName\": \"electron\",  \"browserPath\": \"path/to/browser\",  \"browserVersion\": \"59.0.3071.115\",  \"config\": {...},  \"osName\": \"darwin\",  \"osVersion\": \"14.5.0\",  \"runs\": [{    \"error\": null,    \"reporter\": \"spec\",    \"reporterStats\": {...},    \"spec\": {...},    \"stats\": {      \"suites\": 1,      \"tests\": 1,      \"passes\": 0,      \"pending\": 0,      \"skipped\": 0,      \"failures\": 1,      \"startedAt\": \"2020-08-05T08:38:37.589Z\",      \"endedAt\": \"2018-07-11T17:53:35.675Z\",      \"duration\": 1171    },    \"screenshots\": [{      \"name\": null,      \"takenAt\": \"2020-08-05T08:52:20.432Z\",      \"path\": \"User/janelane/my-app/cypress/screenshots/cy.js/test (failed).png\",      \"height\": 720,      \"width\": 1280    }],    \"tests\": [{      \"title\": [ \"test\" ],      \"state\": \"failed\",      \"displayError\": \"AssertionError: expected true to be false\\n' +      '    at Context.eval (...cypress/e2e/cy.js:5:21\",      \"attempts\": [{        \"state\": \"failed\",      }],    }],    \"video\": \"User/janelane/my-app/cypress/videos/abc123.mp4\"  }],  \"runUrl\": \"https://cloud.cypress.io/projects/def456/runs/12\",  \"startedTestsAt\": \"2018-07-11T17:53:35.463Z\",  \"totalDuration\": 212,  \"totalFailed\": 1,  \"totalPassed\": 0,  \"totalPending\": 0,  \"totalSkipped\": 0,  \"totalSuites\": 1,  \"totalTests\": 1,}\n```\n\nYou can find the TypeScript definition for the results object in the [`cypress/cli/types` folder](https://github.com/cypress-io/cypress/tree/develop/cli/types).\n\n### Handling errors[​](#Handling-errors \"Direct link to Handling errors\")\n\nEven when tests fail, the `Promise` resolves with the test results. The `Promise` is only rejected if Cypress cannot run for some reason (for example if a binary has not been installed or it cannot find a module dependency). In that case, the `Promise` will be rejected with a detailed error.\n\nThere is a third option - Cypress could run, but the tests could not start for some reason. In that case the resolved value is an object with two fields\n\n```\n{  \"failures\": 1,    // non-zero number  \"message\": \"...\"  // error message}\n```\n\nIn order to handle these possible errors, you can add a `catch` to `cypress.run()`:\n\n```\n// e2e-run-tests.jsconst cypress = require('cypress')cypress.run({...}).then(result => {  if (result.failures) {    console.error('Could not execute tests')    console.error(result.message)    process.exit(result.failures)  }  // print test results and exit  // with the number of failed tests as exit code  process.exit(result.totalFailed)}).catch(err => {  console.error(err.message)  process.exit(1)})\n```\n\n## `cypress.open()`[​](#cypressopen \"Direct link to cypressopen\")\n\nOpen Cypress tests via Node.js.\n\n```\n// e2e-open-tests.jsconst cypress = require('cypress')cypress.open({  config: {    baseUrl: 'http://localhost:8080',  },  env: {    login_url: '/login',    products_url: '/products',  },})\n```\n\nYou can then open Cypress by running the following in your terminal or an npm script:\n\n### Options[​](#Options-1 \"Direct link to Options\")\n\nJust like the [Command Line options](https://docs.cypress.io/guides/guides/command-line), you can pass options that modify how Cypress runs.\n\n| Option | Type | Description |\n| --- | --- | --- |\n| `browser` | _string_ | Specify a filesystem path to a custom browser |\n| `config` | _object_ | Specify [configuration](https://docs.cypress.io/guides/references/configuration) |\n| `configFile` | _string_ | Path to the [configuration file](https://docs.cypress.io/guides/references/configuration#Configuration-File) to be used. |\n| `detached` | _boolean_ | Open Cypress in detached mode |\n| `env` | _object_ | Specify [environment variables](https://docs.cypress.io/guides/guides/environment-variables) |\n| `global` | _boolean_ | Run in global mode |\n| `port` | _number_ | Override default port |\n| `project` | _string_ | Path to a specific project |\n| `testingType` | _string_ | Specify the type of tests to execute; either `e2e` or `component`. Defaults to `e2e` |\n\n### Example[​](#Example \"Direct link to Example\")\n\n```\n// e2e-open-tests.jsconst cypress = require('cypress')cypress.open({})\n```\n\nYou can then open Cypress by running the following in your terminal or an npm script:\n\n## `cypress.cli`[​](#cypresscli \"Direct link to cypresscli\")\n\n### `parseRunArguments()`[​](#parseRunArguments \"Direct link to parseRunArguments\")\n\nIf you are writing a tool that wraps around the `cypress.run()` command, you might want to parse user-supplied command line arguments using the same logic as `cypress run` uses. In that case, you can use the included `parseRunArguments` function.\n\n```\n// wrapper.jsconst cypress = require('cypress')const runOptions = await cypress.cli.parseRunArguments(process.argv.slice(2))const results = await cypress.run(runOptions)// process the \"cypress.run()\" results\n```\n\nAn example use running from your terminal could be:\n\n```\nnode ./wrapper cypress run --browser chrome --config ...\n```\n\n**Note:** the arguments passed to `parseRunArguments` should start with `cypress run`.\n\nWe use CLI parsing and calling `cypress.run` to [repeat tests to find flaky tests](https://github.com/bahmutov/cypress-repeat) and to [validate test numbers after a test run](https://github.com/bahmutov/cypress-expect). Read [Wrap Cypress Using npm Module API](https://glebbahmutov.com/blog/wrap-cypress-using-npm/) for more examples.\n\n## History[​](#History \"Direct link to History\")\n\n| Version | Changes |\n| --- | --- |\n| [12.6.0](https://docs.cypress.io/guides/references/changelog#12-6-0) | Added `autoCancelAfterFailures` to run options. |\n| [10.0.0](https://docs.cypress.io/guides/references/changelog#10-0-0) | `slowTestThreshold` is now scoped to each testing type. |\n| [8.7.0](https://docs.cypress.io/guides/references/changelog#8-7-0) | Added `slowTestThreshold` configuration option. |\n| [7.3.0](https://docs.cypress.io/guides/references/changelog#7-3-0) | Added `testingType` configuration option. |\n| [5.0.0](https://docs.cypress.io/guides/references/changelog#5-0-0) | Test results returned from `cypress.run()` changed. |\n| [4.11.0](https://docs.cypress.io/guides/references/changelog#4-11-0) | Added `cypress.cli` with `parseRunArguments` function. |\n| [4.9.0](https://docs.cypress.io/guides/references/changelog#4-9-0) | Added `quiet` option to `cypress.run()` |",
    "title": "Module API | Cypress Documentation",
    "description": "You can require Cypress as a node module from your application under test and",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/references/error-messages",
    "markdown": "# Error Messages | Cypress Documentation\n\n*   [Test File Errors](#Test-File-Errors)\n    *   [No tests found](#No-tests-found)\n    *   [We found an error preparing your test file](#We-found-an-error-preparing-your-test-file)\n*   [Support File Errors](#Support-File-Errors)\n    *   [Support file missing or invalid](#Support-file-missing-or-invalid)\n    *   [Error Loading Config](#Error-Loading-Config)\n*   [Command Errors](#Command-Errors)\n    *   [Cypress cannot execute commands outside a running test](#Cypress-cannot-execute-commands-outside-a-running-test)\n    *   [`cy...()` failed because the page updated](#cy-failed-because-the-page-updated)\n    *   [`cy...()` failed because the element cannot be interacted with](#cy-failed-because-the-element-cannot-be-interacted-with)\n    *   [`cy...()` failed because the element is currently animating](#cy-failed-because-the-element-is-currently-animating)\n    *   [The test has finished but Cypress still has commands in its queue](#The-test-has-finished-but-Cypress-still-has-commands-in-its-queue)\n    *   [`cy.visit()` failed because you are attempting to visit a second unique domain](#cyvisit-failed-because-you-are-attempting-to-visit-a-second-unique-domain)\n    *   [`cy.visit()` failed because you are attempting to visit a different origin domain](#cyvisit-failed-because-you-are-attempting-to-visit-a-different-origin-domain)\n    *   [`cy.visit()` succeeded, but commands are timing out](#cyvisit-succeeded-but-commands-are-timing-out)\n    *   [`Cypress.addParentCommand()` / `Cypress.addDualCommand()` / `Cypress.addChildCommand()` has been removed and replaced by `Cypress.Commands.add()`](#CypressaddParentCommand--CypressaddDualCommand--CypressaddChildCommand-has-been-removed-and-replaced-by-CypressCommandsadd)\n    *   [Cypress detected that you invoked one or more `cy` commands in a custom command but returned a different value.](#Cypress-detected-that-you-invoked-one-or-more-cy-commands-in-a-custom-command-but-returned-a-different-value)\n    *   [Cypress detected that you invoked one or more `cy` commands but returned a different value.](#Cypress-detected-that-you-invoked-one-or-more-cy-commands-but-returned-a-different-value)\n    *   [Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.](#Cypress-detected-that-you-returned-a-promise-from-a-command-while-also-invoking-one-or-more-cy-commands-in-that-promise)\n    *   [Cypress detected that you returned a promise in a test, but also invoked one or more `cy` commands inside of that promise.](#Cypress-detected-that-you-returned-a-promise-in-a-test-but-also-invoked-one-or-more-cy-commands-inside-of-that-promise)\n    *   [Cypress detected that you returned a promise in a test, but also invoked a done callback.](#Cypress-detected-that-you-returned-a-promise-in-a-test-but-also-invoked-a-done-callback)\n    *   [CypressError: Timed out retrying: Expected to find element: ‘…’, but never found it. Queried from element: <…>](#CypressError-Timed-out-retrying-Expected-to-find-element--but-never-found-it-Queried-from-element-)\n*   [CLI Errors](#CLI-Errors)\n    *   [You passed the `--record` flag but did not provide us your Record Key.](#You-passed-the---record-flag-but-did-not-provide-us-your-Record-Key)\n    *   [The `cypress ci` command has been deprecated](#The-cypress-ci-command-has-been-deprecated)\n    *   [A Cached Cypress Binary Could not be found](#A-Cached-Cypress-Binary-Could-not-be-found)\n    *   [Incorrect usage of `--ci-build-id` flag](#Incorrect-usage-of---ci-build-id-flag)\n    *   [The `--ci-build-id`, `--group`, `--tag`, `--parallel`, or `--auto-cancel-after-failures` flags can only be used when recording](#The---ci-build-id---group---tag---parallel-or---auto-cancel-after-failures-flags-can-only-be-used-when-recording)\n    *   [We could not determine a unique CI build ID](#We-could-not-determine-a-unique-CI-build-ID)\n    *   [Group name has already been used for this run](#Group-name-has-already-been-used-for-this-run)\n    *   [Cannot parallelize tests across environments](#Cannot-parallelize-tests-across-environments)\n    *   [Cannot parallelize tests in this group](#Cannot-parallelize-tests-in-this-group)\n    *   [Run must pass `--parallel` flag](#Run-must-pass---parallel-flag)\n    *   [Cannot parallelize tests on a stale run](#Cannot-parallelize-tests-on-a-stale-run)\n    *   [Run is not accepting any new groups](#Run-is-not-accepting-any-new-groups)\n    *   [The Cypress App could not be unzipped. This is most likely because the maximum path length is being exceeded on your system.](#The-Cypress-App-could-not-be-unzipped-This-is-most-likely-because-the-maximum-path-length-is-being-exceeded-on-your-system)\n    *   [error: unknown option: --auto-cancel-after-failures](#error-unknown-option---auto-cancel-after-failures)\n    *   [\\--auto-cancel-after-failures must be a integer or false](#--auto-cancel-after-failures-must-be-a-integer-or-false)\n    *   [\\--auto-cancel-after-failures passed without a Business or Enterprise Cloud account](#--auto-cancel-after-failures-passed-without-a-Business-or-Enterprise-Cloud-account)\n    *   [You passed the --auto-cancel-after-failures flag for a run that is already in progress](#You-passed-the---auto-cancel-after-failures-flag-for-a-run-that-is-already-in-progress)\n*   [Page Load Errors](#Page-Load-Errors)\n    *   [Cypress detected a cross-origin error happened on page load](#Cypress-detected-a-cross-origin-error-happened-on-page-load)\n    *   [Cypress detected that an uncaught error was thrown from a cross-origin script.](#Cypress-detected-that-an-uncaught-error-was-thrown-from-a-cross-origin-script)\n*   [Browser Errors](#Browser-Errors)\n    *   [The browser process running your tests just exited unexpectedly](#The-browser-process-running-your-tests-just-exited-unexpectedly)\n*   [Cypress App errors](#Cypress-App-errors)\n    *   [Whoops, we can't run your tests](#Whoops-we-cant-run-your-tests)\n    *   [Cannot connect to API server](#Cannot-connect-to-API-server)\n    *   [Cypress detected policy settings on your computer that may cause issues](#Cypress-detected-policy-settings-on-your-computer-that-may-cause-issues)\n    *   [Uncaught exceptions from your application](#Uncaught-exceptions-from-your-application)\n\n## Test File Errors[​](#Test-File-Errors \"Direct link to Test File Errors\")\n\n### No tests found[​](#No-tests-found \"Direct link to No-tests-found\")\n\nThis message means that Cypress was unable to find tests in the specified file. You'll likely get this message if you have an empty test file and have not yet written any tests.\n\n![No tests found](https://docs.cypress.io/img/guides/references/no-tests-found.png)\n\n### We found an error preparing your test file[​](#We-found-an-error-preparing-your-test-file \"Direct link to We-found-an-error-preparing-your-test-file\")\n\nThis message means that Cypress encountered an error when compiling and/or bundling your test file. Cypress automatically compiles and bundles your test code so you can use ES2015, CoffeeScript, modules, etc.\n\n#### You'll typically receive this message due to:[​](#Youll-typically-receive-this-message-due-to \"Direct link to You'll typically receive this message due to:\")\n\n*   The file not existing\n*   A syntax error in the file or one of its dependencies\n*   A missing dependency\n\nWhen the error is fixed in your test file, your tests will automatically re-run.\n\n## Support File Errors[​](#Support-File-Errors \"Direct link to Support File Errors\")\n\n### Support file missing or invalid[​](#Support-file-missing-or-invalid \"Direct link to Support-file-missing-or-invalid\")\n\nThe `supportFolder` option was removed from Cypress in version [`0.18.0`](https://docs.cypress.io/guides/references/changelog#0-18-0) and was replaced by module support and the [`supportFile`](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) configuration option.\n\nCypress used to automatically include any scripts in the `supportFolder` before your test files. However, automatically including all the files in a certain directory is somewhat magical and unintuitive, and requires creating globals for the purpose of utility functions.\n\n### Error Loading Config[​](#Error-Loading-Config \"Direct link to Error-Loading-Config\")\n\nThe `supportFile` configuration option was removed from the root configutation object in Cypress version `10.0.0`. Instead, it must be added within each testing type's configuration object as a separate property if you would like to use a file other than the default [supportFile](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) configuration.\n\n#### Use modules for utility functions[​](#Use-modules-for-utility-functions \"Direct link to Use modules for utility functions\")\n\nCypress supports both ES2015 modules and CommonJS modules. You can import/require npm modules as well as local modules:\n\n```\nimport _ from 'lodash'import util from './util'it('uses modules', () => {  expect(_.kebabCase('FooBar')).to.equal('foo-bar')  expect(util.secretCode()).to.equal('1-2-3-4')})\n```\n\n#### Use supportFile to load scripts before your test code[​](#Use-supportFile-to-load-scripts-before-your-test-code \"Direct link to Use supportFile to load scripts before your test code\")\n\nIt's still useful to load a setup file before your test code. If you are setting Cypress defaults or utilizing custom Cypress commands, instead of needing to import/require those defaults/commands in every test file, you can use the [`supportFile`](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) configuration option within each testing type's configuration object.\n\ndanger\n\n⚠️ For a given testing type, multiple matching `supportFile` files will result in an error when Cypress loads.\n\nJust like with your test files, the [`supportFile`](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) can use ES2015+, [TypeScript](https://docs.cypress.io/guides/tooling/typescript-support) or CoffeeScript and modules, so you can import/require other files as needed.\n\n## Command Errors[​](#Command-Errors \"Direct link to Command Errors\")\n\n### Cypress cannot execute commands outside a running test[​](#Cypress-cannot-execute-commands-outside-a-running-test \"Direct link to Cypress-cannot-execute-commands-outside-a-running-test\")\n\n![Cannot execute commands](https://docs.cypress.io/img/guides/references/cypress-cannot-execute.png)\n\nThis message means you tried to execute one or more Cypress commands outside of a currently running test. Cypress has to be able to associate commands to a specific test.\n\nTypically this happens accidentally, like in the following situation.\n\n```\ndescribe('Some Tests', () => {  it('is true', () => {    expect(true).to.be.true // yup, fine  })  it('is false', () => {    expect(false).to.be.false // yup, also fine  })  context('some nested tests', () => {    // oops you forgot to write an it(...) here!    // these cypress commands below    // are running outside of a test and cypress    // throws an error    cy.get('h1').should('contain', 'todos')  })})\n```\n\nMove those Cypress commands into an `it(...)` block and everything will work correctly.\n\nIf you are purposefully writing commands outside of a test, there is probably a better way to accomplish what you're trying to do. Read through the [Examples](https://docs.cypress.io/examples/recipes) or check out our [Support channels](https://docs.cypress.io/guides/references/troubleshooting#Support-channels) for more troubleshooting resources.\n\n### `cy...()` failed because the page updated[​](#cy-failed-because-the-page-updated \"Direct link to cy-failed-because-the-page-updated\")\n\nGetting this error means you've tried to interact with a \"dead\" DOM element - meaning the current subject has been removed from the DOM.\n\n![cy.method() failed because the page updated](https://docs.cypress.io/img/guides/references/cypress-method-failed-page-updated.png)\n\nCypress errors because after a command, the subject becomes 'fixed' to a specific element - since it can't retry commands, if the element becomes detached from the page, we can't assert or interact on it.\n\nLet's take a look at an example below.\n\n#### Application HTML[​](#Application-HTML \"Direct link to Application HTML\")\n\n```\n<body>  <div data-testid=\"parent\">    <button>Delete</button>  </div></body>\n```\n\n#### Application JavaScript[​](#Application-JavaScript \"Direct link to Application JavaScript\")\n\n```\n$('button').click(function () {  // when the <button> is clicked  // we remove the button from the DOM,  // and add a new, identical one.  $(this).replaceWith(this.outerHTML)})\n```\n\n#### Test Code causing error[​](#Test-Code-causing-error \"Direct link to Test Code causing error\")\n\n```\ncy.get('button').click().parent()\n```\n\nWe've programmed our application above so that as soon as the `click` event happens, the button is removed from the DOM. When Cypress begins processing the next query ([`.parent()`](https://docs.cypress.io/api/commands/parent)) in the test above, it detects that the yielded subject (the original button) is detached from the DOM and throws the error.\n\nFortunately, the error tells us exactly what to do:\n\n> You can typically solve this by breaking up a chain.\n\n#### Fixed Test Code[​](#Fixed-Test-Code \"Direct link to Fixed Test Code\")\n\n```\ncy.get('button').click()cy.get('button').parent()\n```\n\nThe above example is an oversimplification, but a representative one. In modern JavaScript frameworks, DOM elements are regularly re-rendered - meaning that the old element is thrown away and a new one is put in its place. Because this happens so fast, it may _appear_ as if nothing has visibly changed to the user. But if you are in the middle of executing test commands, it's possible the element you're interacting with has become \"dead\". To deal with this situation you must:\n\n*   Always start a new chain after each _command_.\n*   Use Cypress _queries_ to locate elements on the page, rather than using specific HTML elements as your subject\n\nQueries (`.get()`, `.as()` and`.parent()`, for example) and assertions (`.should()`, `.and()`) are safe to chain off of. Commands (such as `.click()`) are not.\n\n### `cy...()` failed because the element cannot be interacted with[​](#cy-failed-because-the-element-cannot-be-interacted-with \"Direct link to cy-failed-because-the-element-cannot-be-interacted-with\")\n\nYou may see a variation of this message for 4 different reasons:\n\n1.  The element is not visible\n2.  The element is being covered by another element\n3.  The element's center is hidden from view\n4.  The element is disabled\n\nCypress runs several calculations to ensure an element can _actually_ be interacted with like a real user would. If you're seeing this error, you may need to _guard_ your commands (due to a timing or an animation issue).\n\nThere have been situations where Cypress does not correctly allow you to interact with an element that should be interactable. If that's the case, [open an issue](https://github.com/cypress-io/cypress/issues/new/choose).\n\nIf you'd like to override these built-in checks, provide the `{force: true}` option to the action itself. Refer to each command for their available options, additional use cases, and argument usage.\n\n#### Ignore built-in error checking[​](#Ignore-built-in-error-checking \"Direct link to Ignore built-in error checking\")\n\n```\ncy.get('[disabled]').click({force: true}).\n```\n\n_Be careful with this option. It's possible to force your tests to pass when the element is actually not interactable in your application._\n\n### `cy...()` failed because the element is currently animating[​](#cy-failed-because-the-element-is-currently-animating \"Direct link to cy-failed-because-the-element-is-currently-animating\")\n\n![cy.method() failed because element is animating](https://docs.cypress.io/img/guides/references/cy-method-failed-element-is-animating.png)\n\nBy default Cypress detects if an element you're trying to interact with is animating. This check ensures that an element is not animating too quickly for a real user to interact with the element. This also prevents some edge cases where actions, such as [`.type()`](https://docs.cypress.io/api/commands/type) or [`.click()`](https://docs.cypress.io/api/commands/click), happened too fast during a transition.\n\nCypress will continuously attempt to interact with the element until it eventually times out. If you'd like to force Cypress to interact with the element there are a few options:\n\n*   Pass `{force: true}`. This disables _all_ error checking\n*   Pass `{waitForAnimations: false}` to disable animation error checking\n*   Pass `{animationDistanceThreshold: 20}` to decrease the sensitivity of detecting if an element is animating. By increasing the threshold this enables your element to move farther on the page without causing Cypress to continuously retry.\n\n```\ncy.get('[data-testid=\"modal-close\"]').click({ waitForAnimations: false })\n```\n\nYou can globally disable animation error checking, or increase the threshold by modifying the [Cypress configuration](https://docs.cypress.io/guides/references/configuration).\n\n#### Cypress configuration file[​](#Cypress-configuration-file \"Direct link to Cypress configuration file\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  waitForAnimations: false,  animationDistanceThreshold: 50,})\n```\n\n### The test has finished but Cypress still has commands in its queue[​](#The-test-has-finished-but-Cypress-still-has-commands-in-its-queue \"Direct link to The-test-has-finished-but-Cypress-still-has-commands-in-its-queue\")\n\nLet's examine several different ways you may get this error message. In every situation, you'll need to change something in your test code to prevent the error.\n\n![The test has finished but Cypress still has commands](https://docs.cypress.io/img/guides/references/the-test-has-finished.png)\n\ncaution\n\n**Flaky tests below!**\n\nSeveral of these tests are dependent on race conditions. You may have to run these tests multiple times before they will actually fail. You can also try tweaking some of the delays.\n\n#### Short Example[​](#Short-Example \"Direct link to Short Example\")\n\nThis first test below will pass and shows you that Cypress tries to prevent leaving commands behind in the queue in every test.\n\nEven though we return a string in our test, Cypress automatically figures out that you've queued commands above and does not end the test until all cy commands have finished.\n\n```\n// This test passes!it('Cypress is smart and this does not fail', () => {  cy.get('body').children().should('not.contain', 'foo') // <- no return here  return 'foobarbaz' // <- return here})\n```\n\nThe example below will fail because you've forcibly terminated the test early with mocha's `done`.\n\n```\n// This test errors!it('but you can forcibly end the test early which does fail', (done) => {  cy.get('body')    .then(() => {      done() // forcibly end test even though there are commands below    })    .children()    .should('not.contain', 'foo')})\n```\n\n#### Complex Async Example[​](#Complex-Async-Example \"Direct link to Complex Async Example\")\n\nWhat's happening in this example is that because we have _NOT_ told Mocha this is an asynchronous test, this test will pass _immediately_ then move onto the next test. Then, when the `setTimeout` callback function runs, new commands will get queued on the wrong test. Cypress will detect this and fail the _next_ test.\n\n```\ndescribe('a complex example with async code', function () {  it('you can cause commands to bleed into the next test', function () {    // This test passes...but...    setTimeout(() => {      cy.get('body').children().should('not.contain', 'foo')    }, 10)  })  it('this test will fail due to the previous poorly written test', () => {    // This test errors!    cy.wait(10)  })})\n```\n\nThe correct way to write the above test code is using Mocha's `done` to signify it is asynchronous.\n\n```\nit('does not cause commands to bleed into the next test', (done) => {  setTimeout(() => {    cy.get('body')      .children()      .should('not.contain', 'foo')      .then(() => {        done()      })  }, 10)})\n```\n\n#### Complex Promise Example[​](#Complex-Promise-Example \"Direct link to Complex Promise Example\")\n\nIn the example below, we forget to return the `Promise` in our test. This means the test passes synchronously but our `Promise` resolves in the next test. This also causes the commands to be queued on the wrong test. We will get the error in the next test that Cypress detected it had commands in its command queue.\n\n```\ndescribe('another complex example using a forgotten \"return\"', () => {  it('forgets to return a promise', () => {    // This test passes...but...    Cypress.Promise.delay(10).then(() => {      cy.get('body').children().should('not.contain', 'foo')    })  })  it('this test will fail due to the previous poorly written test', () => {    // This test errors!    cy.wait(10)  })})\n```\n\nThe correct way to write the above test code would be to return our `Promise`:\n\n```\nit('does not forget to return a promise', () => {  return Cypress.Promise.delay(10).then(() => {    return cy.get('body').children().should('not.contain', 'foo')  })})\n```\n\n### `cy.visit()` failed because you are attempting to visit a second unique domain[​](#cyvisit-failed-because-you-are-attempting-to-visit-a-second-unique-domain \"Direct link to cyvisit-failed-because-you-are-attempting-to-visit-a-second-unique-domain\")\n\ncaution\n\n**Note**\n\nThis error only pertains to Cypress version `v11.0.0` and under. As of Cypress [v12.0.0](https://on.cypress.io/changelog#12-0-0), users can navigate to multiple domains in a single test.\n\nSee our [Web Security](https://docs.cypress.io/guides/guides/web-security#Limitations) documentation.\n\n### `cy.visit()` failed because you are attempting to visit a different origin domain[​](#cyvisit-failed-because-you-are-attempting-to-visit-a-different-origin-domain \"Direct link to cyvisit-failed-because-you-are-attempting-to-visit-a-different-origin-domain\")\n\ncaution\n\n**Note**\n\nThis error only pertains to Cypress version `v11.0.0` and under. As of Cypress [v12.0.0](https://on.cypress.io/changelog#12-0-0), users can navigate to multiple domains in a single test.\n\nTwo URLs have the same origin if the `protocol`, `port` (if specified), and `host` are the same for both. You can only visit domains that are of the same-origin within a single test. You can read more about same-origin policy in general [here](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy).\n\nYou can visit urls that are of different origin across different tests, so you may consider splitting your `cy.visit()` of different origin domains into separate tests.\n\nSee our [Web Security](https://docs.cypress.io/guides/guides/web-security#Limitations) documentation for more information and workarounds.\n\n### `cy.visit()` succeeded, but commands are timing out[​](#cyvisit-succeeded-but-commands-are-timing-out \"Direct link to cyvisit-succeeded-but-commands-are-timing-out\")\n\nAs of Cypress [v12.0.0](https://on.cypress.io/changelog#12-0-0), users can navigate to multiple domains in a single test. The following test will succeed as-is:\n\n```\nit('navigates to docs.cypress.io', () => {  cy.visit('http://localhost:3000')  cy.visit('https://docs.cypress.io') // visit a different superdomain})\n```\n\nHowever, when the newly visited URL is not considered the same superdomain, the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) command **must** be used to interact with the newly visited domain. The following test is incorrect:\n\n```\nit('navigates to docs.cypress.io and runs additional commands', () => {  cy.visit('http://localhost:3000')  cy.visit('https://docs.cypress.io') // visit a different superdomain  cy.get('h1').should('contain', 'Why Cypress?') // fails})\n```\n\nAnd will result in the following error:\n\n![cy.visit() subsequent commands timed out](https://docs.cypress.io/img/guides/references/cy-visit-subsequent-commands-timed-out.png)\n\nIn order to fix this, our `cy.get()` command **must** be wrapped with the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) command, like so:\n\n```\nit('navigates to example.cypress.io and runs additional commands', () => {  cy.visit('http://localhost:3000')  cy.visit('https://example.cypress.io') // visit a different superdomain  cy.origin('https://example.cypress.io', () => {    cy.get('h1').should('contain', 'Why Cypress?') // now succeeds!  })})\n```\n\nSee our [Web Security](https://docs.cypress.io/guides/guides/web-security#Limitations) documentation for more information and workarounds.\n\n### `Cypress.addParentCommand()` / `Cypress.addDualCommand()` / `Cypress.addChildCommand()` has been removed and replaced by `Cypress.Commands.add()`[​](#CypressaddParentCommand--CypressaddDualCommand--CypressaddChildCommand-has-been-removed-and-replaced-by-CypressCommandsadd \"Direct link to CypressaddParentCommand--CypressaddDualCommand--CypressaddChildCommand-has-been-removed-and-replaced-by-CypressCommandsadd\")\n\nIn version [0.20.0](https://docs.cypress.io/guides/references/changelog), we removed the commands for adding custom commands and replaced them with, what we believe to be, a simpler interface.\n\nNow you can create parent, dual, and child commands using the same [Cypress.Commands.add()](https://docs.cypress.io/api/cypress-api/custom-commands) command.\n\nPlease read our [new documentation on writing custom commands](https://docs.cypress.io/api/cypress-api/custom-commands).\n\n### Cypress detected that you invoked one or more `cy` commands in a custom command but returned a different value.[​](#Cypress-detected-that-you-invoked-one-or-more-cy-commands-in-a-custom-command-but-returned-a-different-value \"Direct link to Cypress-detected-that-you-invoked-one-or-more-cy-commands-in-a-custom-command-but-returned-a-different-value\")\n\nBecause `cy` commands are asynchronous and are queued to be run later, it doesn't make sense to return anything else.\n\nFor convenience, you can also omit any return value or return `undefined` and Cypress will not error.\n\nIn versions before [0.20.0](https://docs.cypress.io/guides/references/changelog) of Cypress we automatically detected this and forced the `cy` commands to be returned. To make things less magical and clearer, we are now throwing an error.\n\n### Cypress detected that you invoked one or more `cy` commands but returned a different value.[​](#Cypress-detected-that-you-invoked-one-or-more-cy-commands-but-returned-a-different-value \"Direct link to Cypress-detected-that-you-invoked-one-or-more-cy-commands-but-returned-a-different-value\")\n\nBecause cy commands are asynchronous and are queued to be run later, it doesn't make sense to return anything else.\n\nFor convenience, you can also omit any return value or return `undefined` and Cypress will not error.\n\nIn versions before [0.20.0](https://docs.cypress.io/guides/references/changelog) of Cypress we automatically detected this and forced the `cy` commands to be returned. To make things less magical and clearer, we are now throwing an error.\n\n### Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.[​](#Cypress-detected-that-you-returned-a-promise-from-a-command-while-also-invoking-one-or-more-cy-commands-in-that-promise \"Direct link to Cypress-detected-that-you-returned-a-promise-from-a-command-while-also-invoking-one-or-more-cy-commands-in-that-promise\")\n\nBecause Cypress commands are already promise-like, you don't need to wrap them or return your own promise.\n\nCypress will resolve your command with whatever the final Cypress command yields.\n\nThe reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.\n\n### Cypress detected that you returned a promise in a test, but also invoked one or more `cy` commands inside of that promise.[​](#Cypress-detected-that-you-returned-a-promise-in-a-test-but-also-invoked-one-or-more-cy-commands-inside-of-that-promise \"Direct link to Cypress-detected-that-you-returned-a-promise-in-a-test-but-also-invoked-one-or-more-cy-commands-inside-of-that-promise\")\n\nWhile this works in practice, it's often indicative of an anti-pattern. You almost never need to return both a promise and also invoke `cy` commands.\n\n`cy` commands themselves are already promise like, and you can likely avoid the use of the separate Promise.\n\n### Cypress detected that you returned a promise in a test, but also invoked a done callback.[​](#Cypress-detected-that-you-returned-a-promise-in-a-test-but-also-invoked-a-done-callback \"Direct link to Cypress-detected-that-you-returned-a-promise-in-a-test-but-also-invoked-a-done-callback\")\n\nThe version of Mocha was upgraded with Cypress 4.0. Mocha 3+ no longer allows returning a promise and invoking a done callback. Read more about it in the [4.0 migration guide](https://docs.cypress.io/guides/references/migration-guide#Mocha-upgrade).\n\n### CypressError: Timed out retrying: Expected to find element: ‘…’, but never found it. Queried from element: <…>[​](#CypressError-Timed-out-retrying-Expected-to-find-element--but-never-found-it-Queried-from-element- \"Direct link to CypressError-Timed-out-retrying-Expected-to-find-element--but-never-found-it-Queried-from-element-\")\n\nIf you get this error in a case where the element is definitely visible in the DOM, your document might contain malformed HTML. In such cases, `document.querySelector()` will not find any elements that appear after the point where the HTML is malformed. Even if you feel certain your HTML is not malformed anywhere, check it anyway (line by line in the dev tools). Especially if you've exhausted all other possibilities.\n\n## CLI Errors[​](#CLI-Errors \"Direct link to CLI Errors\")\n\n### You passed the `--record` flag but did not provide us your Record Key.[​](#You-passed-the---record-flag-but-did-not-provide-us-your-Record-Key \"Direct link to You-passed-the---record-flag-but-did-not-provide-us-your-Record-Key\")\n\nYou may receive this error when trying to run Cypress tests in [Continuous Integration](https://docs.cypress.io/guides/continuous-integration/introduction). This means that you did not pass a specific record key to: [cypress run --record](https://docs.cypress.io/guides/guides/command-line#cypress-run).\n\nSince no record key was passed, Cypress checks for any environment variable with the name `CYPRESS_RECORD_KEY`. In this case, that was also not found.\n\nYou can get your project's record key by locating it in your settings tab in the Cypress app or in [Cypress Cloud](https://on.cypress.io/cloud).\n\nYou will want to then [add the key to your config file or as an environment variable](https://docs.cypress.io/guides/continuous-integration/introduction#Record-tests).\n\n### The `cypress ci` command has been deprecated[​](#The-cypress-ci-command-has-been-deprecated \"Direct link to The-cypress-ci-command-has-been-deprecated\")\n\nAs of version [`0.19.0`](https://docs.cypress.io/guides/references/changelog#0-19-0) and CLI versions `0.13.0`, the `cypress ci` command has been deprecated. We did this to make it clearer what the difference was between a _regular test run_ and a _recorded test run_.\n\nPreviously to record runs you had the environment variable: `CYPRESS_CI_KEY` or you wrote:\n\nYou need to rewrite this as:\n\n```\ncypress run --record --key abc-key-123\n```\n\nIf you were using the environment variable `CYPRESS_CI_KEY`, rename it to`CYPRESS_RECORD_KEY`.\n\nYou can now run and omit the `--key` flag:\n\nWe will automatically apply the record key environment variable.\n\n### A Cached Cypress Binary Could not be found[​](#A-Cached-Cypress-Binary-Could-not-be-found \"Direct link to A-Cached-Cypress-Binary-Could-not-be-found\")\n\nThis error occurs in CI when using `cypress run` without a valid Cypress binary cache installed on the system (on linux that's `~/.cache/Cypress`).\n\nTo fix this error, follow instructions on [caching the cypress binary in CI](https://docs.cypress.io/guides/continuous-integration/introduction#Caching), then bump the version of your CI cache to ensure a clean build.\n\n### Incorrect usage of `--ci-build-id` flag[​](#Incorrect-usage-of---ci-build-id-flag \"Direct link to Incorrect-usage-of---ci-build-id-flag\")\n\nYou passed the `--ci-build-id` flag but did not provide either a [\\--group](https://docs.cypress.io/guides/guides/command-line#cypress-run-group-lt-name-gt) or [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag.\n\nThe `--ci-build-id` flag is used to either group or parallelize multiple runs together.\n\nCheck out our [guide on parallelizing runs](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) and when to use the [\\--ci-build-id](https://docs.cypress.io/guides/guides/command-line#cypress-run-ci-build-id-lt-id-gt) option.\n\n### The `--ci-build-id`, `--group`, `--tag`, `--parallel`, or `--auto-cancel-after-failures` flags can only be used when recording[​](#The---ci-build-id---group---tag---parallel-or---auto-cancel-after-failures-flags-can-only-be-used-when-recording \"Direct link to The---ci-build-id---group---tag---parallel-or---auto-cancel-after-failures-flags-can-only-be-used-when-recording\")\n\nYou passed the `--ci-build-id`, [\\--group](https://docs.cypress.io/guides/guides/command-line#cypress-run-group-lt-name-gt), [\\--tag](https://docs.cypress.io/guides/guides/command-line#cypress-run-tag-lt-tag-gt), [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel), or [\\--auto-cancel-after-failures](https://docs.cypress.io/guides/guides/command-line#auto-cancel-after-runs) flag without also passing the `--record` flag.\n\nThese flags can only be used when recording to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction).\n\nPlease review our [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) documentation to learn more.\n\n### We could not determine a unique CI build ID[​](#We-could-not-determine-a-unique-CI-build-ID \"Direct link to We-could-not-determine-a-unique-CI-build-ID\")\n\nYou passed the [\\--group](https://docs.cypress.io/guides/guides/command-line#cypress-run-group-lt-name-gt) or [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag but we could not automatically determine or generate a `ciBuildId`.\n\nIn order to use either of these parameters a `ciBuildId` must be determined.\n\nThe `ciBuildId` is automatically detected if you are running Cypress in most [CI providers](https://docs.cypress.io/guides/continuous-integration/ci-provider-examples). Please review the [natively recognized environment variables](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#CI-Build-ID-environment-variables-by-provider) for your CI provider.\n\nYou can avoid this check in the future by passing an ID to the [\\--ci-build-id](https://docs.cypress.io/guides/guides/command-line#cypress-run-ci-build-id-lt-id-gt) flag manually.\n\nPlease review our [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) documentation to learn more.\n\n### Group name has already been used for this run[​](#Group-name-has-already-been-used-for-this-run \"Direct link to Group-name-has-already-been-used-for-this-run\")\n\nYou passed the [\\--group](https://docs.cypress.io/guides/guides/command-line#cypress-run-group-lt-name-gt) flag, but this group name has already been used for this run.\n\nIf you are trying to parallelize this run, then also pass the [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag, else pass a different group name.\n\nPlease review [grouping test runs](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#Grouping-test-runs) documentation to learn more.\n\n### Cannot parallelize tests across environments[​](#Cannot-parallelize-tests-across-environments \"Direct link to Cannot-parallelize-tests-across-environments\")\n\nYou passed the [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag, but we do not parallelize tests across different environments.\n\nThis machine is sending different environment parameters than the first machine that started this parallel run.\n\nIn order to run in parallel mode each machine must send identical environment parameters such as:\n\n*   Specs\n*   Operation system name\n*   Operating system version\n*   Browser name\n*   Major browser version\n\nPlease review our [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) documentation to learn more.\n\n### Cannot parallelize tests in this group[​](#Cannot-parallelize-tests-in-this-group \"Direct link to Cannot-parallelize-tests-in-this-group\")\n\nYou passed the `--parallel` flag, but this run group was originally created without the `--parallel` flag.\n\nYou cannot use the [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag with this group.\n\nPlease review our [grouping test runs](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#Grouping-test-runs) documentation to learn more.\n\n### Run must pass `--parallel` flag[​](#Run-must-pass---parallel-flag \"Direct link to Run-must-pass---parallel-flag\")\n\nYou did not pass the `--parallel` flag, but this run's group was originally created with the `--parallel` flag.\n\nYou must use the [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag with this group.\n\nPlease review our [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) documentation to learn more.\n\n### Cannot parallelize tests on a stale run[​](#Cannot-parallelize-tests-on-a-stale-run \"Direct link to Cannot-parallelize-tests-on-a-stale-run\")\n\nThis error is thrown when you are attempting to pass the [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag to a run that Cypress detected was completed over 24 hours ago.\n\nIn order to uniquely identify each run during `cypress run`, Cypress attempts to read a unique identifier from your CI provider as described in our [parallelization doc](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#CI-Build-ID-environment-variables-by-provider).\n\nYou may encounter this error if Cypress is detecting the exact same CI Build ID matching a previous CI Build ID in a run that was completed over 24 hours ago. You cannot run tests on a run that has been complete for that long. ​ ​You can see the CI Build ID that is detected for each completed run by looking at the details section at the top of your run in [Cypress Cloud](https://on.cypress.io/cloud). ​ ​You can generate and pass in your own unique CI Build ID per run as described [here](https://docs.cypress.io/guides/guides/command-line#cypress-run-ci-build-id-lt-id-gt).\n\nPlease also review our [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) documentation to learn more.\n\n### Run is not accepting any new groups[​](#Run-is-not-accepting-any-new-groups \"Direct link to Run-is-not-accepting-any-new-groups\")\n\nThe run you are attempting access to is already complete and will not accept new groups.\n\nWhen a run finishes all of its groups, it waits for a configurable set of time, [a run completion delay](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization#Run-completion-delay), before completing. All `cypress run` calls with any new groups must be executed during that time period.\n\n#### Troubleshooting[​](#Troubleshooting \"Direct link to Troubleshooting\")\n\n*   If you are passing [`--ci-build-id`](https://docs.cypress.io/guides/guides/command-line#cypress-run-ci-build-id-lt-id-gt), make sure it is generating a unique value for the run. If it is not unique and matches a previous run, you may see this error.\n*   If you are running `cypress run` calls in parallel and they are not completing within the default 60 second run completion delay, you can increase this delay. [See instructions](https://docs.cypress.io/guides/cloud/account-management/projects#Run-completion-delay).\n\nPlease review our [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) documentation to learn more.\n\n### The Cypress App could not be unzipped. This is most likely because the maximum path length is being exceeded on your system.[​](#The-Cypress-App-could-not-be-unzipped-This-is-most-likely-because-the-maximum-path-length-is-being-exceeded-on-your-system \"Direct link to The-Cypress-App-could-not-be-unzipped-This-is-most-likely-because-the-maximum-path-length-is-being-exceeded-on-your-system\")\n\nWhen Cypress is installed, it unzips to the designated cache location on your computer. This error means that Cypress detected that it has exceeded the maximum path length while unzipping Cypress.\n\nThis is common on Windows, where the maximum path length used to be 260 characters.\n\nTo fix this error, enable \"long paths\" on your Windows system:\n\n1.  Go to the Start Menu, and right click on PowerShell. Select \"Run as administrator.\"\n2.  Run this command:\n\n```\nNew-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" `  -Name \"LongPathsEnabled\" -Value 1 -PropertyType DWORD -Force\n```\n\n3.  Restart your computer.\n\nThis should get rid of the error. If you are still receiving this error, please [search for an open issue](https://github.com/cypress-io/cypress/issues) or [open a new one](https://github.com/cypress-io/cypress/issues/new/choose).\n\nIf you do not have Powershell available, you can also make this change via regedit or gpedit. [See Microsoft's documentation for details.](https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation)\n\n### error: unknown option: --auto-cancel-after-failures[​](#error-unknown-option---auto-cancel-after-failures \"Direct link to error-unknown-option---auto-cancel-after-failures\")\n\nThe `--auto-cancel-after-failures` flag is only available in Cypress 12.6.0 and later, and must be used with the `cypress run` command.\n\n### \\--auto-cancel-after-failures must be a integer or false[​](#--auto-cancel-after-failures-must-be-a-integer-or-false \"Direct link to --auto-cancel-after-failures-must-be-a-integer-or-false\")\n\nYou passed in an invalid value for the `--auto-cancel-after-failures` flag. It must be an integer or false.\n\n### \\--auto-cancel-after-failures passed without a Business or Enterprise Cloud account[​](#--auto-cancel-after-failures-passed-without-a-Business-or-Enterprise-Cloud-account \"Direct link to --auto-cancel-after-failures-passed-without-a-Business-or-Enterprise-Cloud-account\")\n\nAuto Cancellation is not included in your current billing plan. To enable this service, please visit your billing and upgrade to another plan with Auto Cancellation.\n\n[https://www.cypress.io/pricing/](https://www.cypress.io/pricing/)\n\n### You passed the --auto-cancel-after-failures flag for a run that is already in progress[​](#You-passed-the---auto-cancel-after-failures-flag-for-a-run-that-is-already-in-progress \"Direct link to You-passed-the---auto-cancel-after-failures-flag-for-a-run-that-is-already-in-progress\")\n\nYou passed the `--auto-cancel-after-failures` flag, but this run originally started with a different value on this `--auto-cancel-after-failures` flag.\n\nThe first setting of `--auto-cancel-after-failures` for any given run takes precedent.\n\n## Page Load Errors[​](#Page-Load-Errors \"Direct link to Page Load Errors\")\n\n### Cypress detected a cross-origin error happened on page load[​](#Cypress-detected-a-cross-origin-error-happened-on-page-load \"Direct link to Cypress-detected-a-cross-origin-error-happened-on-page-load\")\n\nThis error means that your application navigated to a superdomain that Cypress was not bound to. Initially when you [`cy.visit()`](https://docs.cypress.io/api/commands/visit), Cypress changes the browser's URL to match the `url` passed to [`cy.visit()`](https://docs.cypress.io/api/commands/visit). This enables Cypress to communicate with your application to bypass all same-origin security policies among other things.\n\nWhen your application navigates to a superdomain outside of the current origin-policy, Cypress is unable to communicate with it, and thus fails.\n\n#### There are a few workarounds to these common situations:[​](#There-are-a-few-workarounds-to-these-common-situations \"Direct link to There are a few workarounds to these common situations:\")\n\n1.  Don't click `<a>` links in your tests that navigate outside of your application. Likely this isn't worth testing anyway. You should ask yourself: _What's the point of clicking and going to another app?_ Likely all you care about is that the `href` attribute matches what you expect. So make an assertion about that. You can see more strategies on testing anchor links [in our \"Tab Handling and Links\" example recipe](https://docs.cypress.io/examples/recipes#Testing-the-DOM).\n    \n2.  You are testing a page that uses Single sign-on (SSO). In this case your web server is likely redirecting you between superdomains, so you receive this error message. You can likely get around this redirect problem by using [`cy.request()`](https://docs.cypress.io/api/commands/request) to manually handle the session yourself.\n    \n\nIf you find yourself stuck and can't work around these issues you can set `chromeWebSecurity` to `false` in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration) when running in Chrome family browsers (this setting will not work in other browsers). Before doing so you should really understand and [read about the reasoning here](https://docs.cypress.io/guides/guides/web-security).\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  chromeWebSecurity: false,})\n```\n\n### Cypress detected that an uncaught error was thrown from a cross-origin script.[​](#Cypress-detected-that-an-uncaught-error-was-thrown-from-a-cross-origin-script \"Direct link to Cypress-detected-that-an-uncaught-error-was-thrown-from-a-cross-origin-script\")\n\nCheck your Developer Tools Console for the actual error - it should be printed there.\n\nIt's possible to enable debugging these scripts by adding the `crossorigin` attribute and setting a `CORS` header.\n\n## Browser Errors[​](#Browser-Errors \"Direct link to Browser Errors\")\n\n### The browser process running your tests just exited unexpectedly[​](#The-browser-process-running-your-tests-just-exited-unexpectedly \"Direct link to The-browser-process-running-your-tests-just-exited-unexpectedly\")\n\nThis error can occur whenever Cypress detects that the launched browser has exited or crashed before the tests could finish running.\n\nThis can happen for a number of reasons, including:\n\n*   The browser was exited manually, by clicking the \"Quit\" button or otherwise\n*   Your test suite or application under test is starving the browser of resources.\n*   Cypress is running in a memory-starved environment\n*   The browser is testing a memory-heavy application\n*   There are problems with the GPU / GPU drivers\n*   There is a bug in the browser involving memory management\n*   There is a memory leak in Cypress\n\nFor Chromium-based browsers, you can try enabling [experimentalMemoryManagement](https://docs.cypress.io/guides/references/experiments).\n\nIf you are running in `open` mode, you can also try lowering [numTestsKeptInMemory](https://docs.cypress.io/guides/references/configuration#Global).\n\nIf the browser running Cypress tests crashes, Cypress will abort any remaining tests and print out this error.\n\n## Cypress App errors[​](#Cypress-App-errors \"Direct link to Cypress App errors\")\n\n### Whoops, we can't run your tests[​](#Whoops-we-cant-run-your-tests \"Direct link to Whoops-we-cant-run-your-tests\")\n\nThis error happens when Cypress detects that the browser automation is not connected, or that Cypress's internal proxy is being bypassed. This is caused by one of the following:\n\n**A policy setting blocks the Cypress proxy server or browser extension**\n\n*   See [Cypress detected policy settings on your computer that may cause issues](#Cypress-detected-policy-settings-on-your-computer-that-may-cause-issues).\n\n**The `--proxy-server` or `--load-extension` arguments have been changed**\n\n*   When adding a plugin with the [Browser Launch API](https://docs.cypress.io/api/plugins/browser-launch-api), it's possible for a necessary command-line argument to be changed. If you're running into this error, you can troubleshoot by inspecting `args` before and after the plugin runs, either by using `console.log()` or by [printing DEBUG logs](https://docs.cypress.io/guides/references/troubleshooting#Print-DEBUG-logs) with `DEBUG=cypress:server:plugins,cypress:server:plugins:*`.\n\n**You visit the Cypress proxy URL outside of a Cypress browser.**\n\n*   Don't copy the URL you see when launching a Cypress browser from the Cypress App and open it in a non-Cypress browser. If you want to run your tests in a different browser, follow the instructions in the [Cross Browser Testing](https://docs.cypress.io/guides/guides/cross-browser-testing) guide.\n\n### Cannot connect to API server[​](#Cannot-connect-to-API-server \"Direct link to Cannot-connect-to-API-server\")\n\nLogging in, viewing runs, and setting up new projects to record requires connecting to an external API server. This error displays when we failed to connect to the API server.\n\nThis error likely appeared because:\n\n1.  You do not have internet. Please ensure you have connectivity then try again.\n2.  You are a developer that has forked our codebase and do not have access to run our API locally. Please read more about this in our [contributing doc](https://on.cypress.io/contributing).\n\n### Cypress detected policy settings on your computer that may cause issues[​](#Cypress-detected-policy-settings-on-your-computer-that-may-cause-issues \"Direct link to Cypress-detected-policy-settings-on-your-computer-that-may-cause-issues\")\n\nWhen Cypress launches Chrome, it attempts to launch it with a custom proxy server and browser extension. Certain group policies (GPOs) on Windows can prevent this from working as intended, which can cause tests to break.\n\nIf your administrator has set any of the following Chrome GPOs, it can prevent your tests from running in Chrome:\n\n*   Proxy policies: `ProxySettings, ProxyMode, ProxyServerMode, ProxyServer, ProxyPacUrl, ProxyBypassList`\n*   Extension policies: `ExtensionInstallBlacklist, ExtensionInstallWhitelist, ExtensionInstallForcelist, ExtensionInstallSources, ExtensionAllowedTypes, ExtensionAllowInsecureUpdates, ExtensionSettings, UninstallBlacklistedExtensions`\n\nHere are some potential workarounds:\n\n1.  Ask your administrator to disable these policies so that you can use Cypress with Chrome.\n2.  Use the built-in Electron browser for tests, since it is not affected by these policies. [See the guide to launching browsers for more information.](https://docs.cypress.io/guides/guides/launching-browsers#Electron-Browser)\n3.  Try using Chromium instead of Google Chrome for your tests, since it may be unaffected by GPO. You can [download the latest Chromium build here.](https://download-chromium.appspot.com/)\n4.  If you have Local Administrator access to your computer, you may be able to delete the registry keys that are affecting Chrome. Here are some instructions:\n    1.  Open up Registry Editor by pressing WinKey+R and typing `regedit.exe`\n    2.  Look in the following locations for the policy settings listed above:\n        *   `HKEY_LOCAL_MACHINE\\Software\\Policies\\Google\\Chrome`\n        *   `HKEY_LOCAL_MACHINE\\Software\\Policies\\Google\\Chromium`\n        *   `HKEY_CURRENT_USER\\Software\\Policies\\Google\\Chrome`\n        *   `HKEY_CURRENT_USER\\Software\\Policies\\Google\\Chromium`\n    3.  Delete or rename any policy keys found. _Make sure to back up your registry before making any changes._\n\n### Uncaught exceptions from your application[​](#Uncaught-exceptions-from-your-application \"Direct link to Uncaught-exceptions-from-your-application\")\n\nWhen Cypress detects an uncaught exception in your application, it will fail the currently running test.\n\nYou can turn off this behavior globally or conditionally with the `uncaught:exception` event. Please see the [Catalog of Events](https://docs.cypress.io/api/cypress-api/catalog-of-events#Uncaught-Exceptions) for examples.\n\nOn a technical note, Cypress considers uncaught exceptions to be any error that is uncaught by your application, whether they are \"standard\" errors or unhandled promise rejections. If the error triggers the window's global `error` handler or its `unhandledrejection` handler, Cypress will detect it and fail the test.",
    "title": "Error Messages | Cypress Documentation",
    "description": "Test File Errors",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/references/experiments",
    "markdown": "# Experiments | Cypress Documentation\n\nIf you'd like to try out what we're working on in Cypress, you can enable specific experimental features for your project using the Cypress configuration options described below.\n\ncaution\n\n⚠️ The experimental features might change or ultimately be removed without making it into the core product. Our primary goal for experiments is to collect real-world feedback during their development. For more information, see the documentation for all [Cypress Release Stages](https://docs.cypress.io/guides/references/release-stages).\n\n## Configuration[​](#Configuration \"Direct link to Configuration\")\n\nYou can pass the [Cypress configuration](https://docs.cypress.io/guides/references/configuration) options below to enable or disable experiments. See our [Configuration Guide](https://docs.cypress.io/guides/references/configuration) on how to pass configuration to Cypress.\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `experimentalCspAllowList` | `false` | Indicates the Content-Security-Policy directives to be permitted during a test run. See [Content-Security-Policy](https://docs.cypress.io/guides/guides/content-security-policy) for more information. |\n| `experimentalFetchPolyfill` | `false` | Automatically replaces `window.fetch` with a polyfill that Cypress can spy on and stub. Note: `experimentalFetchPolyfill` has been deprecated in Cypress 6.0.0 and will be removed in a future release. Consider using [cy.intercept()](https://docs.cypress.io/api/commands/intercept) to intercept `fetch` requests instead. |\n| `experimentalInteractiveRunEvents` | `false` | Allows listening to the [`before:run`](https://docs.cypress.io/api/plugins/before-run-api), [`after:run`](https://docs.cypress.io/api/plugins/after-run-api), [`before:spec`](https://docs.cypress.io/api/plugins/before-spec-api), and [`after:spec`](https://docs.cypress.io/api/plugins/after-spec-api) events in the [setupNodeEvents](https://docs.cypress.io/guides/tooling/plugins-guide#Using-a-plugin) function during interactive mode. |\n| `experimentalMemoryManagement` | `false` | Enables support for improved memory management within Chromium-based browsers. |\n| `experimentalModifyObstructiveThirdPartyCode` | `false` | Whether Cypress will search for and replace obstructive code in third party `.js` or `.html` files. NOTE: Setting this flag removes [Subresource Integrity (SRI)](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity). |\n| `experimentalSourceRewriting` | `false` | Enables AST-based JS/HTML rewriting. This may fix issues caused by the existing regex-based JS/HTML replacement algorithm. See [#5273](https://github.com/cypress-io/cypress/issues/5273) for details. |\n| `experimentalWebKitSupport` | `false` | Enable experimental support for running tests in WebKit. When set, installs of `playwright-webkit` will be detected and available in Cypress. See [Launching Browsers](https://docs.cypress.io/guides/guides/launching-browsers#WebKit-Experimental) for more information. |\n| `retries.experimentalStrategy` | N/A | Applies a strategy for test retries according to your \"flake tolerance\"; options are detect-flake-but-always-fail or detect-flake-and-pass-on-threshold. See [Experimental Retries](https://docs.cypress.io/guides/references/experiments#Experimental-Flake-Detection-Features) for more details. |\n| `retries.experimentalOptions` | N/A | Sets retries strategy-specific options like maxRetries, passesRequired, and stopIfAnyPassed. See [Experimental Retries](https://docs.cypress.io/guides/references/experiments#Experimental-Flake-Detection-Features) for more details. |\n\n### Experimental CSP Allow List[​](#Experimental-CSP-Allow-List \"Direct link to Experimental CSP Allow List\")\n\nCypress by default strips all CSP headers (`Content-Security-Policy` and `Content-Security-Policy-Report-Only`) from the response before it is sent to the browser. The `experimentalCspAllowList` option allows for more granular control over which CSP directives are stripped from the CSP response headers, allowing you to test your application with CSP enabled. Valid values for this option are `false` (the default), `true`, or an array of CSP directive names.\n\n| Value | Example |\n| --- | --- |\n| [`false` (default)](#Strip-All-CSP-Headers) | `experimentalCspAllowList=false` |\n| [`true`](#Strip-Minimum-CSP-Directives) | `experimentalCspAllowList=true` |\n| [`<CspDirectives>[]`](#Allow-Specific-CSP-Directives) | `experimentalCspAllowList=[\"default-src\",\"script-src\"]` |\n\nThe value `experimentalCspAllowList=false` (default) will remove all CSP headers from the response before it is sent to the browser. This option should be used if you do not depend on CSP for any tests in your application.\n\n#### Strip Minimum CSP Directives[​](#Strip-Minimum-CSP-Directives \"Direct link to Strip Minimum CSP Directives\")\n\nIf you need to test your application with CSP enabled, setting the `experimentalCspAllowList` option will allow all CSP headers to be sent to the browser __except__ those that could prevent Cypress from functioning normally.\n\nThe following CSP directives will always be stripped:\n\n| Stripped Directive | Allowable | Reason |\n| --- | --- | --- |\n| `frame-ancestors` | No  | Prevents Cypress from loading a test application into an iframe. |\n| `navigate-to` | No  | Affects Cypress' ability to navigate to different URLs. |\n| `require-trusted-types-for` | No  | Might prevent Cypress from rewriting the DOM. |\n| `sandbox` | No  | Can restrict access to script and iframe functionality. |\n| `trusted-types` | No  | Could cause Cypress injections to be marked as untrusted. |\n\nWhen `experimentalCspAllowList=true` the following directives are also stripped in addition to the ones listed above, but can be configured to be allowed to be sent to the browser:\n\n| Stripped Directive | Allowable | Reason |\n| --- | --- | --- |\n| `child-src` | Yes | Could prevent iframes from loading in combination with other Cypress options. |\n| `default-src` | Yes | Conditionally prevents Cypress from loading scripts and running. |\n| `frame-src` | Yes | Could prevent iframes from loading in combination with other Cypress options. |\n| `form-action` | Yes | Can prevent Cypress from monitoring form events. |\n| `script-src` | Yes | Conditionally prevents Cypress from loading scripts and running. |\n| `script-src-elem` | Yes | Conditionally prevents Cypress from loading scripts and running. |\n\n#### Allow Specific CSP Directives[​](#Allow-Specific-CSP-Directives \"Direct link to Allow Specific CSP Directives\")\n\nSet the `experimentalCspAllowList` option to an array of directive names marked as \"Allowable\" from the list above. This will allow the specified CSP directives to be sent to the browser.\n\nThe following configuration would allow the `default-src`, `script-src`, and `script-src-elem` directives to be sent to the browser:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  experimentalCspAllowList: ['default-src', 'script-src', 'script-src-elem'],})\n```\n\ncaution\n\nDefining `experimentalCspAllowList` __may__ cause Cypress to be unable to run tests against your application. If you experience issues, reduce the directives specified in your allow list to identify which directive is causing issues.\n\nThere is a known issue when using certain directives containing hash algorithm values and the `modifyObstructiveCode` and/or `experimentalSourceRewriting` options. Using these options in combination with the `experimentalCspAllowList` option can cause a mismatch between the original hashed directive value, and the modified HTML or JS value.\n\n## Experimental Flake Detection Features[​](#Experimental-Flake-Detection-Features \"Direct link to Experimental Flake Detection Features\")\n\n### Experimental Test Retries[​](#Experimental-Test-Retries \"Direct link to Experimental Test Retries\")\n\n[Test retries](https://docs.cypress.io/guides/guides/test-retries) is a Cypress [Flake Detection](https://docs.cypress.io/guides/cloud/flaky-test-management#Flake-Detection) feature that enables you to re-attempt any tests that initially fail. The failure may not be a \"true\" failure, i.e. flaky. The only way to determine this is to retry the test.\n\nNormally, test retries simply stop on the first passing attempt. And the final test result of any flaky test is always \"passing\", regardless of how many prior attempts failed. The following experimental settings for retries give you more control over the retries process.\n\nThere are two strategies for retries:\n\n*   `detect-flake-and-pass-on-threshold`\n*   `detect-flake-but-always-fail`\n\nThe `detect-flake-and-pass-on-threshold` strategy is most like the current implementation of retries, where failing tests have a \"chance\" to still pass, but still detect flake. But this new experimental strategy also enables you to now set a threshold of passing attempts to achieve a passing final result. And if you want to ensure flaky tests are treated with the same urgency as failing tests, then you will prefer to use the `detect-flake-but-always-fail` strategy, which assures that every flaky test is still marked as failing.\n\n#### `experimentalStrategy: 'detect-flake-and-pass-on-threshold'`[​](#experimentalStrategy-detect-flake-and-pass-on-threshold \"Direct link to experimentalStrategy-detect-flake-and-pass-on-threshold\")\n\nSetting `experimentalStrategy: 'detect-flake-and-pass-on-threshold'` within retries will give you ability to set how many passing attempts are required for the test result to be passing. There are two `experimentalOptions` that must be set with this strategy:\n\n*   `maxRetries` sets the maximum number of retries that can occur after the first attempt failed\n*   `passesRequired` sets the required number of passing attempts for the final test result to be passing. Cannot be greater than `maxRetries`.\n    *   `passesRequired` also determines how the retries may stop before `maxRetries` is reached; either if the number of passing attempts so far has met the `passesRequired` condition or if the number of failing attempts exceeds the difference between `maxRetries` and `passesRequired` (when it's impossible to achieve the passing result).\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  retries: {    experimentalStrategy: 'detect-flake-and-pass-on-threshold',    experimentalOptions: {      maxRetries: 2,      passesRequired: 2,    },    // you must also explicitly set openMode and runMode to    // either true or false when using experimental retries    openMode: true,    runMode: true,  },})\n```\n\nExamples of the above configuration's results:\n\n**Scenario 1:**\n\n*   Attempt 1: Fail\n*   Attempt 2: Pass\n*   Attempt 3: Fail\n\nThe retries stop on attempt 3, since `maxRetries: 2` is now met and the test's final result is **failing** and **flaky**. Only one attempt passed, but two are needed to pass.\n\n**Scenario 2:**\n\n*   Attempt 1: Fail\n*   Attempt 2: Pass\n*   Attempt 3: Pass\n\nRetries stop at attempt 3 again, and the test is **passing** and **flaky**, since there are now two passing attempts.\n\n**Scenario 3:**\n\n*   Attempt 1: Fail\n*   Attempt 2: Fail\n\nRetries stop on attempt 2, and the test is **failing** , because the requisite two passing attempts for a passing result can no longer be achieved once the 1st retry failed. It's also **not flaky**, since there were no passing attempts.\n\n#### `experimentalStrategy: 'detect-flake-but-always-fail'`[​](#experimentalStrategy-detect-flake-but-always-fail \"Direct link to experimentalStrategy-detect-flake-but-always-fail\")\n\nSetting `experimentalStrategy: 'detect-flake-but-always-fail'` within retries ensures any test with any failed attempt will always end with a failing final result. There are two `experimentalOptions` that must be set in this strategy:\n\n*   `maxRetries` sets the maximum number of retries that can occur after the first attempt failed\n*   `stopIfAnyPassed` will stop the retries before `maxRetries` is reached when there is any passing attempt.\n    *   `stopIfAnyPassed` causes retries to exit as soon as any flake is detected (a test that is retrying after a failure only needs to pass once to exhibit flaky behavior). However it may help to see more retry attempts, such as when the failure mode is also non-deterministic and more of these different errors are revealed on more retries, in which case `stopIfAnyPassed: false` may be desirable.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  retries: {    experimentalStrategy: 'detect-flake-but-always-fail',    experimentalOptions: {      maxRetries: 2,      stopIfAnyPassed: true,    },    // you must also explicitly set openMode and runMode to    // either true or false when using experimental retries    openMode: true,    runMode: true,  },})\n```\n\nExamples of the above configuration's results:\n\n**Scenario 1:**\n\n*   Attempt 1: Fail\n*   Attempt 2: Fail\n*   Attempt 3: Fail\n\nThe retries stop on attempt 3, since `maxRetries: 2` is now met and the test is **failing** , but also **not flaky**.\n\n**Scenario 2:**\n\n*   Attempt 1: Fail\n*   Attempt 2: Pass\n\nRetries stop on the first retry, due to the passing attempt. The test is **failing** and **flaky**. If `stopIfAnyPassed` was `false`, then the retries would have proceeded once more.\n\ncaution\n\n**Note:** Experimental retries can only be configured at the global level and **not** per individual test, whereas non-experimental `retries` [can be configured per test](https://docs.cypress.io/guides/guides/test-retries#Individual-Tests). If you configure retries on a per-test basis while using experimental retries globally, that particular test's `retries` configuration will override the experimental retries and ignore it.\n\nAlso, while using experimental retries, you cannot set numeric values for `openMode` or `runMode` [at the global level](https://docs.cypress.io/guides/guides/test-retries#Global-Configuration). You can instead set `true` or `false` for each.\n\ninfo\n\nIf you have any feedback for the experimental retries feature, please use [this form](https://share.hsforms.com/1pCBMIbQjQwKY_f2qcdLVzw3a4za).\n\n## Testing Type-Specific Experiments[​](#Testing-Type-Specific-Experiments \"Direct link to Testing Type-Specific Experiments\")\n\nYou can provide configuration options for either E2E or Component Testing by creating `e2e` and `component` objects inside your Cypress configuration.\n\n### End-to-End Testing[​](#End-to-End-Testing \"Direct link to End-to-End Testing\")\n\nThese experiments are available to be specified inside the `e2e` configuration object:\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `experimentalStudio` | `false` | Generate and save commands directly to your test suite by interacting with your app as an end user would. |\n| `experimentalRunAllSpecs` | `false` | Enables the \"Run All Specs\" UI feature, allowing the execution of multiple specs sequentially. |\n| `experimentalOriginDependencies` | `false` | Enables support for `Cypress.require` within `cy.origin`. |\n| `experimentalSkipDomainInjection` | `null` | Removes injecting `document.domain` into `text/html` pages for any sites that match the provided patterns. |\n\n#### Experimental Skip Domain Injection[​](#Experimental-Skip-Domain-Injection \"Direct link to Experimental Skip Domain Injection\")\n\nUnder the hood, Cypress [injects document.domain](https://docs.cypress.io/guides/guides/web-security#Examples-of-what-Cypress-does-under-the-hood) into your test application to lessen the burden of navigation. This is well described in our [Cross Origin Testing](https://docs.cypress.io/guides/guides/cross-origin-testing) guide. However, some sites have compatibility issues with this feature.\n\nThe `experimentalSkipDomainInjection` option disables injecting `document.domain` inside Cypress. When enabled, all cross-origin/subdomain navigation must use `cy.origin()`, which may make tests a bit more verbose. We only recommend including your site pattern if you are having issues running Cypress out of the box and suspect setting `document.domain` is interfering with your site's ability to render properly.\n\nBefore enabling, verify your application is not implementing frame busting techniques, which you can mitigate with the [`modifyObstructiveCode`](https://docs.cypress.io/guides/references/configuration#modifyObstructiveCode) and [`experimentalModifyObstructiveThirdPartyCode`](https://docs.cypress.io/guides/guides/web-security#Modifying-Obstructive-Third-Party-Code) flags.\n\nAt this point in time, we are aware of the following sites that require the `experimentalSkipDomainInjection` option to be set to be tested properly:\n\n*   Google\n*   Salesforce\n\nThis flag can be enabled by passing an array of origin URLs or [minimatch](https://github.com/isaacs/minimatch) glob patterns:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  e2e: {    experimentalSkipDomainInjection: [      '*.salesforce.com',      '*.force.com',      '*.google.com',    ],  },})\n```\n\nIf using other Salesforce domains, such as [enhanced domains](https://help.salesforce.com/s/articleView?id=sf.domain_name_enhanced.htm&type=5), you will need to add the correct matching glob pattern.\n\n### Component Testing[​](#Component-Testing \"Direct link to Component Testing\")\n\nThese experiments are available to be specified inside the `component` configuration object:\n\n| Option | Default | Description |\n| --- | --- | --- |\n| `experimentalSingleTabRunMode` | `false` | Run all specs in a single tab, instead of creating a new tab per spec. This can improve run mode performance, but can impact spec isolation and reliability on large test suites. |\n\n## History[​](#History \"Direct link to History\")\n\n| Version | Changes |\n| --- | --- |\n| [13.4.0](https://docs.cypress.io/guides/references/changelog#13-4-0) | Added support for configuring the Experimental Flake Detection strategy via `retries.experimentalStrategy` and `retries.experimentalOptions`. |\n| [12.6.0](https://docs.cypress.io/guides/references/changelog#12-6-0) | Removed `require`/`import` and added `Cypress.require` for `experimentalOriginDependencies`. |\n| [12.4.0](https://docs.cypress.io/guides/references/changelog#12-4-0) | Added `experimentalSkipDomainInjection` and `experimentalMemoryManagement`. |\n| [12.0.0](https://docs.cypress.io/guides/references/changelog#12-0-0) | Removed `experimentalSessionAndOrigin` and made it the default behavior. Added `experimentalOriginDependencies`. |\n| [11.2.0](https://docs.cypress.io/guides/references/changelog#11-2-0) | Added `experimentalRunAllSpecs`. |\n| [10.8.0](https://docs.cypress.io/guides/references/changelog#10-8-0) | Added `experimentalWebKitSupport`. |\n| [10.6.0](https://docs.cypress.io/guides/references/changelog#10-6-0) | Added support for `experimentalSingleTabRunMode`. |\n| [10.4.0](https://docs.cypress.io/guides/references/changelog#10-4-0) | Added support for `experimentalModifyObstructiveThirdPartyCode`. |\n| [9.6.0](https://docs.cypress.io/guides/references/changelog#9-6-0) | Added support for `experimentalSessionAndOrigin` and removed `experimentalSessionSupport`. |\n| [8.2.0](https://docs.cypress.io/guides/references/changelog#8-2-0) | Added support for `experimentalSessionSupport`. |\n| [7.1.0](https://docs.cypress.io/guides/references/changelog#7-1-0) | Added support for `experimentalInteractiveRunEvents`. |\n| [7.0.0](https://docs.cypress.io/guides/references/changelog#7-0-0) | Removed `experimentalComponentTesting` and made it the default behavior. |\n| [6.7.0](https://docs.cypress.io/guides/references/changelog#6-7-0) | Removed `experimentalRunEvents` and made it the default behavior. |\n| [6.3.0](https://docs.cypress.io/guides/references/changelog#6-3-0) | Added support for `experimentalStudio`. |\n| [6.2.0](https://docs.cypress.io/guides/references/changelog#6-2-0) | Added support for `experimentalRunEvents`. |\n| [6.0.0](https://docs.cypress.io/guides/references/changelog#6-0-0) | Removed `experimentalNetworkStubbing` and made it the default behavior when using [cy.intercept()](https://docs.cypress.io/api/commands/intercept). |\n| [6.0.0](https://docs.cypress.io/guides/references/changelog#6-0-0) | Deprecated `experimentalFetchPolyfill`. |\n| [5.2.0](https://docs.cypress.io/guides/references/changelog#5-2-0) | Removed `experimentalShadowDomSupport` and made it the default behavior. |\n| [5.1.0](https://docs.cypress.io/guides/references/changelog#5-1-0) | Added support for `experimentalNetworkStubbing`. |\n| [5.0.0](https://docs.cypress.io/guides/references/changelog#5-0-0) | Removed `experimentalGetCookiesSameSite` and made it the default behavior. |\n| [4.9.0](https://docs.cypress.io/guides/references/changelog#4-9-0) | Added support for `experimentalFetchPolyfill`. |\n| [4.8.0](https://docs.cypress.io/guides/references/changelog#4-8-0) | Added support for `experimentalShadowDomSupport`. |\n| [4.6.0](https://docs.cypress.io/guides/references/changelog#4-6-0) | Added support for `experimentalSourceRewriting`. |\n| [4.5.0](https://docs.cypress.io/guides/references/changelog#4-5-0) | Added support for `experimentalComponentTesting`. |\n| [4.3.0](https://docs.cypress.io/guides/references/changelog#4-3-0) | Added support for `experimentalGetCookiesSameSite`. |",
    "title": "Experiments | Cypress Documentation",
    "description": "If you'd like to try out what we're working on in Cypress, you can enable",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/component-testing/overview",
    "markdown": "# Cypress Component Testing | Cypress Documentation\n\nCypress Component Testing provides a component workbench for you to quickly build and test components from multiple front-end UI libraries — no matter how simple or complex.\n\n## Quick Example[​](#Quick-Example \"Direct link to Quick Example\")\n\nBelow is a minimal test to assert that a button component has the correct text:\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\nimport Button from './Button'it('uses custom text for the button label', () => {  cy.mount(<Button>Click me!</Button>)  cy.get('button').should('contains.text', 'Click me!')})\n```\n\nLearn more about how to test components for [React](https://docs.cypress.io/guides/component-testing/react/overview), [Angular](https://docs.cypress.io/guides/component-testing/angular/overview), [Vue](https://docs.cypress.io/guides/component-testing/vue/overview), and [Svelte](https://docs.cypress.io/guides/component-testing/svelte/overview).\n\nOur Test Runner is browser-based, allowing you to test not only your component's functionality but also styles and appearance. You can visually see your component in action and interact with it in the test runner:\n\nYou can use the browser developer tools to inspect the DOM, play around with styles, and use the debugger to step through your code.\n\nAnd since this is Cypress, you get the same APIs, plugins, and ecosystem you are used to with end-to-end testing to create component tests.\n\n## Supported Frameworks[​](#Supported-Frameworks \"Direct link to Supported Frameworks\")\n\nCypress currently has official mounting libraries for [React](https://docs.cypress.io/guides/component-testing/react/overview), [Angular](https://docs.cypress.io/guides/component-testing/angular/overview), [Vue](https://docs.cypress.io/guides/component-testing/vue/overview), and [Svelte](https://docs.cypress.io/guides/component-testing/svelte/overview) and support for the following development servers and frameworks:\n\n| Framework | UI Library | Bundler |\n| --- | --- | --- |\n| [Create React App 4+](https://docs.cypress.io/guides/component-testing/react/overview#Create-React-App-CRA) | React 16+ | Webpack 4+ |\n| [Next.js 11+](https://docs.cypress.io/guides/component-testing/react/overview#Nextjs) | React 16+ | Webpack 5 |\n| [React with Vite](https://docs.cypress.io/guides/component-testing/react/overview#React-with-Vite) | React 16+ | Vite 2+ |\n| [React with Webpack](https://docs.cypress.io/guides/component-testing/react/overview#React-with-Webpack) | React 16+ | Webpack 4+ |\n| [Vue CLI](https://docs.cypress.io/guides/component-testing/vue/overview#Vue-CLI) | Vue 2+ | Webpack 4+ |\n| [Nuxt 2](https://docs.cypress.io/guides/component-testing/vue/overview#Nuxt) Alpha | Vue 2+ | Webpack 4+ |\n| [Vue with Vite](https://docs.cypress.io/guides/component-testing/vue/overview#Vue-with-Vite) | Vue 2+ | Vite 2+ |\n| [Vue with Webpack](https://docs.cypress.io/guides/component-testing/vue/overview#Vue-with-Webpack) | Vue 2+ | Webpack 4+ |\n| [Angular](https://docs.cypress.io/guides/component-testing/angular/overview#Framework-Configuration) | Angular 13+ | Webpack 5 |\n| [Svelte with Vite](https://docs.cypress.io/guides/component-testing/svelte/overview#Svelte-with-Vite) Alpha | Svelte 3+ | Vite 2+ |\n| [Svelte with Webpack](https://docs.cypress.io/guides/component-testing/svelte/overview#Svelte-with-Webpack) Alpha | Svelte 3+ | Webpack 4+ |\n\nThe following integrations are built and maintained by Cypress community members.\n\n| Framework | UI Library | Bundler |\n| --- | --- | --- |\n| [Qwik](https://github.com/qwikifiers/cypress-qwik) Community | Qwik | Vite |\n| [Lit](https://github.com/redfox-mx/cypress-lit) Community | Lit | Vite |\n\n## Component Testing vs. End-to-End Testing[​](#Component-Testing-vs-End-to-End-Testing \"Direct link to Component Testing vs. End-to-End Testing\")\n\nWe cover the differences between component and end-to-end testing in-depth in the [Choosing a Testing Type](https://docs.cypress.io/guides/core-concepts/testing-types) guide.\n\nBut in short, Cypress Component Testing uses the same test runner, commands, and API to test components instead of pages.\n\nThe primary difference is that Cypress Component Testing builds your components using a development server instead of rendering within a complete website, which results in faster tests and fewer dependencies on infrastructure than end-to-end tests covering the same code paths.\n\nCypress's API is user-centric and built for testing anything that renders on the web. Therefore, many of your tests will appear framework-agnostic and **approachable for developers coming from any background**.\n\nFor additional reading, we encourage folks to check out the [Component Driven](https://componentdriven.org/) organization, which talks about the pros of component-driven development and may aid you when trying to figure out if you should be taking a page-based or component-based approach to building and testing a given feature.",
    "title": "Cypress Component Testing | Cypress Documentation",
    "description": "Cypress Component Testing provides a component workbench for you to quickly",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/guides/network-requests",
    "markdown": "# Network Requests | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How Cypress enables you to stub out the back end with [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept)\n*   What tradeoffs we make when we stub our network requests\n*   How Cypress visualizes network management in the Command Log\n*   How to use Aliases to refer back to requests and wait on them\n*   How to write declarative tests that resist flake\n\ninfo\n\n**Note:** If you're looking for a resource to make an HTTP request take a look at [cy.request()](https://docs.cypress.io/api/commands/request)\n\n## Testing Strategies[​](#Testing-Strategies \"Direct link to Testing Strategies\")\n\nCypress helps you test the entire lifecycle of HTTP requests within your application. Cypress provides you access to the objects with information about the request, enabling you to make assertions about its properties. Additionally you can even stub and mock a request's response.\n\n**_Common testing scenarios:_**\n\n*   Asserting on a request's body\n*   Asserting on a request's url\n*   Asserting on a request's headers\n*   Stubbing a response's body\n*   Stubbing a response's status code\n*   Stubbing a response's headers\n*   Delaying a response\n*   Waiting for a response to happen\n\nWithin Cypress, you have the ability to choose whether to stub responses or allow them to actually hit your server. You can also mix and match within the same test by choosing to stub certain requests, while allowing others to hit your server.\n\nLet's investigate both strategies, why you would use one versus the other, and why you should regularly use both.\n\n### Use Server Responses[​](#Use-Server-Responses \"Direct link to Use Server Responses\")\n\nRequests that are not stubbed actually reach your server. By _not_ stubbing your responses, you are writing true _end-to-end_ tests. This means you are driving your application the same way a real user would.\n\n> When requests are not stubbed, this guarantees that the _contract_ between your client and server is working correctly.\n\nIn other words, you can have confidence your server is sending the correct data in the correct structure to your client to consume. It is a good idea to have _end-to-end_ tests around your application's _critical paths_. These typically include user login, signup, or other critical paths such as billing.\n\n**_There are downsides to not stubbing responses you should be aware of:_**\n\n*   Since no responses are stubbed, that means **your server has to actually send real responses**. This can be problematic because you may have to _seed a database_ before every test to generate state. For instance, if you were testing _pagination_, you'd have to seed the database with every object that it takes to replicate this feature in your application.\n*   Since real responses go through every single layer of your server (controllers, models, views, etc) the tests are often **much slower** than stubbed responses.\n\nIf you are writing a traditional server-side application where most of the responses are HTML you will likely have few stubbed responses. However, most modern applications that serve JSON can take advantage of stubbing.\n\ntip\n\n**Benefits**\n\n*   More likely to work in production\n*   Test coverage around server endpoints\n*   Great for traditional server-side HTML rendering\n\ndanger\n\n**Downsides**\n\n*   Requires seeding data\n*   Much slower\n*   Harder to test edge cases\n\ninfo\n\n**Suggested Use**\n\n*   Use sparingly\n*   Great for the _critical paths_ of your application\n*   Helpful to have one test around the _happy path_ of a feature\n\n### Stub Responses[​](#Stub-Responses \"Direct link to Stub Responses\")\n\nStubbing responses enables you to control every aspect of the response, including the response `body`, the `status`, `headers`, and even network `delay`. Stubbing is extremely fast, most responses will be returned in less than 20ms.\n\nnote\n\nStubbing responses is a great way to control the data that is returned to your client.\n\nYou don't have to do any work on the server. Your application will have no idea its requests are being stubbed, so there are _no code changes_ needed.\n\ntip\n\n**Benefits**\n\n*   Control of response bodies, status, and headers\n*   Can force responses to take longer to simulate network delay\n*   No code changes to your server or client code\n*   Fast, < 20ms response times\n\ndanger\n\n**Downsides**\n\n*   No guarantee your stubbed responses match the actual data the server sends\n*   No test coverage on some server endpoints\n*   Not as useful if you're using traditional server side HTML rendering\n\ninfo\n\n**Suggested Use**\n\n*   Use for the vast majority of tests\n*   Mix and match, typically have one true end-to-end test, and then stub the rest\n*   Perfect for JSON APIs\n\ninfo\n\n### Real World Example[​](#Real-World-Example \"Direct link to Real-World-Example\")\n\nThe Cypress [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) end-to-end tests predominately rely on server responses, and only stub network responses [on a few occasions](https://github.com/cypress-io/cypress-realworld-app/blob/07a6483dfe7ee44823380832b0b23a4dacd72504/cypress/tests/ui/notifications.spec.ts#L250-L264) to conveniently **create edge-case** or **hard-to-create application states**.\n\nThis practice allows the project to achieve full [code-coverage](https://docs.cypress.io/guides/tooling/code-coverage) for the front end _and back end_ of the app, but this has also required creating intricate database seeding or test data factory scripts that can generate appropriate data in compliance with the business-logic of the app.\n\nCheck out any of the [Real World App test suites](https://github.com/cypress-io/cypress-realworld-app/tree/develop/cypress/tests/ui) to see Cypress network handling in action.\n\n## Stubbing[​](#Stubbing \"Direct link to Stubbing\")\n\nCypress enables you to stub a response and control the `body`, `status`, `headers`, or even delay.\n\n[`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) is used to control the behavior of HTTP requests. You can statically define the body, HTTP status code, headers, and other response characteristics.\n\ninfo\n\nSee [cy.intercept()](https://docs.cypress.io/api/commands/intercept) for more information and for examples on stubbing responses.\n\n## Routing[​](#Routing \"Direct link to Routing\")\n\n```\ncy.intercept(  {    method: 'GET', // Route all GET requests    url: '/users/*', // that have a URL that matches '/users/*'  },  [] // and force the response to be: []).as('getUsers') // and assign an alias\n```\n\nWhen you use [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) to define a route, Cypress displays this under \"Routes\" in the Command Log.\n\n![Routing Table](https://docs.cypress.io/img/guides/network-requests/v10/server-routing-table.png)\n\nWhen a new test runs, Cypress will restore the default behavior and remove all routes and stubs. For a complete reference of the API and options, refer to the documentation for [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept).\n\n## Fixtures[​](#Fixtures \"Direct link to Fixtures\")\n\nA fixture is a fixed set of data located in a file that is used in your tests. The purpose of a test fixture is to ensure that there is a well known and fixed environment in which tests are run so that results are repeatable. Fixtures are accessed within tests by calling the [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture) command.\n\nWith Cypress, you can stub network requests and have it respond instantly with fixture data.\n\nWhen stubbing a response, you typically need to manage potentially large and complex JSON objects. Cypress allows you to integrate fixture syntax directly into responses.\n\n```\n// we set the response to be the activites.json fixturecy.intercept('GET', '/activities/*', { fixture: 'activities.json' })\n```\n\n### Organizing[​](#Organizing \"Direct link to Organizing\")\n\nCypress automatically scaffolds out a suggested folder structure for organizing your fixtures on every new project. By default it will create an `example.json` file when you add your project to Cypress.\n\n```\n/cypress/fixtures/example.json\n```\n\nYour fixtures can be further organized within additional folders. For instance, you could create another folder called `images` and add images:\n\n```\n/cypress/fixtures/images/cats.png/cypress/fixtures/images/dogs.png/cypress/fixtures/images/birds.png\n```\n\nTo access the fixtures nested within the `images` folder, include the folder in your [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture) command.\n\n```\ncy.fixture('images/dogs.png') // yields dogs.png as Base64\n```\n\n## Waiting[​](#Waiting \"Direct link to Waiting\")\n\nWhether or not you choose to stub responses, Cypress enables you to declaratively [`cy.wait()`](https://docs.cypress.io/api/commands/wait) for requests and their responses.\n\ninfo\n\nThis following section utilizes a concept known as [Aliasing](https://docs.cypress.io/guides/core-concepts/variables-and-aliases). If you're new to Cypress you might want to check that out first.\n\nHere is an example of aliasing requests and then subsequently waiting on them:\n\n*   End-to-End Test\n*   Component Test\n\n```\ncy.intercept('/activities/*', { fixture: 'activities' }).as('getActivities')cy.intercept('/messages/*', { fixture: 'messages' }).as('getMessages')// visiting the dashboard should make requests that match// the two routes abovecy.visit('http://localhost:8888/dashboard')// pass an array of Route Aliases that forces Cypress to wait// until it sees a response for each request that matches// each of these aliasescy.wait(['@getActivities', '@getMessages'])// these commands will not run until the wait command resolves abovecy.get('h1').should('contain', 'Dashboard')\n```\n\nIf you would like to check the response data of each response of an aliased route, you can use several `cy.wait()` calls.\n\n```\ncy.intercept({  method: 'POST',  url: '/myApi',}).as('apiCheck')cy.visit('/')cy.wait('@apiCheck').then((interception) => {  assert.isNotNull(interception.response.body, '1st API call has data')})cy.wait('@apiCheck').then((interception) => {  assert.isNotNull(interception.response.body, '2nd API call has data')})cy.wait('@apiCheck').then((interception) => {  assert.isNotNull(interception.response.body, '3rd API call has data')})\n```\n\nWaiting on an aliased route has big advantages:\n\n1.  Tests are more robust with much less flake.\n2.  Failure messages are much more precise.\n3.  You can assert about the underlying request object.\n\nLet's investigate each benefit.\n\n### Flake[​](#Flake \"Direct link to Flake\")\n\nOne advantage of declaratively waiting for responses is that it decreases test flake. You can think of [`cy.wait()`](https://docs.cypress.io/api/commands/wait) as a guard that indicates to Cypress when you expect a request to be made that matches a specific routing alias. This prevents the next commands from running until responses come back and it guards against situations where your requests are initially delayed.\n\n**_Auto-complete Example:_**\n\nWhat makes this example below so powerful is that Cypress will automatically wait for a request that matches the `getSearch` alias. Instead of forcing Cypress to test the _side effect_ of a successful request (the display of the Book results), you can test the actual _cause_ of the results.\n\n```\ncy.intercept('/search*', [{ item: 'Book 1' }, { item: 'Book 2' }]).as(  'getSearch')// our autocomplete field is throttled// meaning it only makes a request after// 500ms from the last keyPresscy.get('[data-testid=\"autocomplete\"]').type('Book')// wait for the request + response// thus insulating us from the// throttled requestcy.wait('@getSearch')cy.get('[data-testid=\"results\"]')  .should('contain', 'Book 1')  .and('contain', 'Book 2')\n```\n\n### Failures[​](#Failures \"Direct link to Failures\")\n\nIn our example above, we added an assertion to the display of the search results.\n\n**_The search results working are coupled to a few things in our application:_**\n\n1.  Our application making a request to the correct URL.\n2.  Our application correctly processing the response.\n3.  Our application inserting the results into the DOM.\n\nIn this example, there are many possible sources of failure. In most testing tools, if our request failed to go out, we would normally only ever get an error once we attempt to find the results in the DOM and see that there is no matching element. This is problematic because it's unknown _why_ the results failed to be displayed. Was there a problem with our rendering code? Did we modify or change an attribute such as an `id` or `class` on an element? Perhaps our server sent us different Book items.\n\nWith Cypress, by adding a [`cy.wait()`](https://docs.cypress.io/api/commands/wait), you can more easily pinpoint your specific problem. If the response never came back, you'll receive an error like this:\n\n![Wait Failure](https://docs.cypress.io/img/guides/network-requests/v10/clear-source-of-failure.png)\n\nNow we know exactly why our test failed. It had nothing to do with the DOM. Instead we can see that either our request never went out or a request went out to the wrong URL.\n\n### Assertions[​](#Assertions \"Direct link to Assertions\")\n\nAnother benefit of using [`cy.wait()`](https://docs.cypress.io/api/commands/wait) on requests is that it allows you to access the actual request object. This is useful when you want to make assertions about this object.\n\nIn our example above we can assert about the request object to verify that it sent data as a query string in the URL. Although we're mocking the response, we can still verify that our application sends the correct request.\n\n```\n// any request to \"/search/*\" endpoint will// automatically receive an array with two book objectscy.intercept('/search/*', [{ item: 'Book 1' }, { item: 'Book 2' }]).as(  'getSearch')cy.get('[data-testid=\"autocomplete\"]').type('Book')// this yields us the interception cycle object// which includes fields for the request and responsecy.wait('@getSearch').its('request.url').should('include', '/search?query=Book')cy.get('[data-testid=\"results\"]')  .should('contain', 'Book 1')  .and('contain', 'Book 2')\n```\n\n**_The interception object that [`cy.wait()`](https://docs.cypress.io/api/commands/wait) yields you has everything you need to make assertions including:_**\n\n*   URL\n*   Method\n*   Status Code\n*   Request Body\n*   Request Headers\n*   Response Body\n*   Response Headers\n\n**Examples**\n\n```\n// spy on POST requests to /users endpointcy.intercept('POST', '/users').as('new-user')// trigger network calls by manipulating web app's// user interface, thency.wait('@new-user').should('have.property', 'response.statusCode', 201)// we can grab the completed interception object// again to run more assertions using cy.get(<alias>)cy.get('@new-user') // yields the same interception object  .its('request.body')  .should(    'deep.equal',    JSON.stringify({      id: '101',      firstName: 'Joe',      lastName: 'Black',    })  )// and we can place multiple assertions in a// single \"should\" callbackcy.get('@new-user').should(({ request, response }) => {  expect(request.url).to.match(/\\/users$/)  expect(request.method).to.equal('POST')  // it is a good practice to add assertion messages  // as the 2nd argument to expect()  expect(response.headers, 'response headers').to.include({    'cache-control': 'no-cache',    expires: '-1',    'content-type': 'application/json; charset=utf-8',    location: '<domain>/users/101',  })})\n```\n\n**Tip:** you can inspect the full request cycle object by logging it to the console\n\n```\ncy.wait('@new-user').then(console.log)\n```\n\n## Command Log[​](#Command-Log \"Direct link to Command Log\")\n\nBy default, Cypress logs all `XMLHttpRequest`s and `fetch`es made by the application under test in the Command Log. Here is an example of what this looks like:\n\n![Screenshot of fetch and XHR requests](https://docs.cypress.io/img/guides/network-requests/command-log-requests.png)\n\ninfo\n\n**Note:** Logging can be disabled by passing `{ log: false }` with the static response.\n\n```\ncy.intercept('/users*', { body: ['user1', 'user2'], log: false }).as('getUsers')\n```\n\nTo disable logs for all xhr/fetch requests, checkout our [example](https://docs.cypress.io/api/commands/intercept#Disabling-logs-for-a-request) on the intercept api page.\n\nThe circular indicator on the left side indicates if the request went to the destination server or not. If the circle is solid, the request went to the destination server; if it is outlined, the response was stubbed by `cy.intercept()` and not sent outbound.\n\nIf we re-run our previous test to make the same requests, but this time, add a `cy.intercept()` to stub the response to `/users`, we can see that the indicator changes. After adding the following line:\n\n```\ncy.intercept('/users*', ['user1', 'user2']).as('getUsers')\n```\n\nThe Command Log will look like this:\n\n![Screenshot of stubbed fetch and unstubbed XHR requests](https://docs.cypress.io/img/guides/network-requests/command-log-stubbed.png)\n\nThe `fetch` request now has an open circle, to indicate that it has been stubbed. Also, note that the alias for the `cy.intercept()` is now displayed on the right-hand side of the Command Log. If you mouse over the alias, you can see more information about how the request was handled:\n\n![Screenshot of stubbed fetch request with tooltip and unstubbed XHR request](https://docs.cypress.io/img/guides/network-requests/command-log-stubbed-tooltip.png)\n\nAdditionally, the request will be flagged if the request and/or response was modified by a `cy.intercept()` handler function. If we add this code to modify outgoing requests to `/users`:\n\n```\ncy.intercept('/users*', (req) => {  req.headers['authorization'] = 'bearer my-bearer-auth-token'}).as('addAuthHeader')\n```\n\nThe request log for `/users` will reflect that the `req` object was modified, but the request was still fulfilled from the destination (filled indicator):\n\n![Screenshot of request that has had the req modified](https://docs.cypress.io/img/guides/network-requests/command-log-req-modified.png)\n\nAs you can see, \"req modified\" is displayed in the badge, to indicate the request object was modified. \"res modified\" and \"req + res modified\" can also be displayed, depending on if `res` was modified inside of a `req.continue()` callback.\n\nAs with all command logs, logs for network requests can be clicked to display additional information in the Console. For example, after clicking the previous request for `/users?limit=100` and opening Developer Tools, we can see the following:\n\n![Screenshot of request that has had the req modified](https://docs.cypress.io/img/guides/network-requests/request-console-props.png)\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [`cy.intercept()` docs](https://docs.cypress.io/api/commands/intercept)\n*   [Network requests in Kitchen Sink example](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/cypress/e2e/2-advanced-examples/network_requests.cy.js)\n*   [See how to make a request with `cy.request()`](https://docs.cypress.io/api/commands/request)\n*   [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) test suites to see Cypress network handling in action.\n*   Read the blog post [Asserting Network Calls from Cypress Tests](https://www.cypress.io/blog/2019/12/23/asserting-network-calls-from-cypress-tests/)\n*   If you want to test the application in offline mode, read [Testing an Application in Offline Network Mode](https://www.cypress.io/blog/2020/11/12/testing-application-in-offline-network-mode/)",
    "title": "Network Requests | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/component-testing/getting-started",
    "markdown": "# Cypress Component Testing | Cypress Documentation\n\nGetting started with Component Testing is super simple. Follow the guide below for a step by step guide on how to configure your project and quickly begin writing your first tests in just a few seconds.\n\n## Getting Started[​](#Getting-Started \"Direct link to Getting Started\")\n\n### Install Cypress[​](#Install-Cypress \"Direct link to Install Cypress\")\n\nTo begin we need to install Cypress in your project if you have not already done so.\n\n```\nnpm install cypress --save-dev\n```\n\n### Open Cypress[​](#Open-Cypress \"Direct link to Open Cypress\")\n\nOnce Cypress has been installed you can launch Cypress using the following command:\n\ninfo\n\nYou can also launch Cypress for a specific [Testing Type](https://docs.cypress.io/guides/core-concepts/testing-types) using either `--e2e` or in this case the `--component` [CLI Option](https://docs.cypress.io/guides/guides/command-line#Options).\n\nNext, the Cypress Launchpad will guide you through configuring your project.\n\n## Configuring Component Testing[​](#Configuring-Component-Testing \"Direct link to Configuring Component Testing\")\n\n### Select Testing Type[​](#Select-Testing-Type \"Direct link to Select Testing Type\")\n\nWhenever you run Cypress for the first time, the app will prompt you to set up either E2E Testing or Component Testing. Click on \"Component Testing\" to start the configuration wizard.\n\ninfo\n\nFor more information on how to choose a testing type, we recommend this [Testing Types Guide](https://docs.cypress.io/guides/core-concepts/testing-types)\n\n![Choose Component Testing](https://docs.cypress.io/img/guides/component-testing/select-test-type.jpg)\n\nChoose Component Testing\n\n### Project Setup[​](#Project-Setup \"Direct link to Project Setup\")\n\nThe Project Setup screen will automatically detect your framework and bundler. In this example we will use [React](https://react.dev/) and [Vite](https://vitejs.dev/). Click \"Next Step\" to continue.\n\n![React and Vite are automatically detected](https://docs.cypress.io/img/guides/component-testing/project-setup-react.jpg)\n\nReact and Vite are automatically detected\n\n### Installing Dependencies[​](#Installing-Dependencies \"Direct link to Installing Dependencies\")\n\nThe next screen checks that all the required dependencies are installed. All the items should have green checkboxes on them, indicating everything is good, so click \"Continue\".\n\n![All necessary dependencies are installed](https://docs.cypress.io/img/guides/component-testing/dependency-detection-react.jpg)\n\nAll necessary dependencies are installed\n\n### Config Files[​](#Config-Files \"Direct link to Config Files\")\n\nNext, Cypress generates all the necessary configuration files and gives you a list of all the changes it made to your project. Click \"Continue\".\n\n![The Cypress launchpad will scaffold all of these files for you](https://docs.cypress.io/img/guides/component-testing/scaffolded-files.jpg)\n\nThe Cypress launchpad will scaffold all of these files for you\n\n### Choose A Browser[​](#Choose-A-Browser \"Direct link to Choose A Browser\")\n\nAfter setting up component testing, you will be at the browser selection screen.\n\nPick the browser of your choice and click the \"Start Component Testing\" button to open the Cypress App.\n\n![Choose your browser](https://docs.cypress.io/img/guides/component-testing/select-browser.jpg)\n\nChoose your browser\n\n## Writing Your First Test[​](#Writing-Your-First-Test \"Direct link to Writing Your First Test\")\n\nAt this point, your project is configured to use Cypress Component Testing. However, when the test runner appears, it won't find any specs because we haven't created any yet. Now we need write our first Component Test.\n\n![](https://docs.cypress.io/img/guides/component-testing/create-your-first-spec-cfc.png)\n\n### Frameworks[​](#Frameworks \"Direct link to Frameworks\")\n\nCypress currently has official mounting libraries for [React](https://docs.cypress.io/guides/component-testing/react/overview), [Angular](https://docs.cypress.io/guides/component-testing/angular/overview), [Vue](https://docs.cypress.io/guides/component-testing/vue/overview), and [Svelte](https://docs.cypress.io/guides/component-testing/svelte/overview). In addition to our official framework support there are many community plugins such as [Qwik](https://github.com/qwikifiers/cypress-qwik) and [Lit](https://github.com/redfox-mx/cypress-lit).\n\n### Your First Component Test[​](#Your-First-Component-Test \"Direct link to Your First Component Test\")\n\nThough every framework is different and has its own unique nuances, in general, writing tests is very similar. Let's look at how a basic test is written for a `StepperComponent`.\n\nLet's assume the Stepper Component consists of two `buttons`, one used to **decrement** the counter and one to **increment** it as well as a `span` tag that sits in the middle of the buttons to show the current value of the counter.\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\nimport React from 'react'import Stepper from './Stepper'describe('<Stepper />', () => {  it('mounts', () => {    // see: https://on.cypress.io/mounting-react    cy.mount(<Stepper />)  })})\n```\n\n### Test Explanation[​](#Test-Explanation \"Direct link to Test Explanation\")\n\nLet's break down the spec. First, we import the `Stepper` component. Then, we organize our tests using the functions `describe` and `it`, which allows us to group tests into sections by using method blocks. These are global functions provided by Cypress, which means you don't have to import them directly to use them. The top-level `describe` block will be the container for all our tests in a file, and each `it` represents an individual test. The `describe` function takes two parameters, the first of which is the name of the test suite, and the second is a function that will execute the tests.\n\nWe defined a test using the `it` function inside `describe`. The first parameter to `it` is a brief description of the spec, and the second parameter is a function that contains the test code. In our example above, we only have one test, but soon we'll see how we can add multiple `it` blocks inside of a `describe` for a series of tests.\n\ninfo\n\nThe [cy.mount()](https://docs.cypress.io/api/commands/mount) method will mount our component into the test app so we can begin running tests against it.\n\nNow it's time to see the test in action.\n\n## Running the Test[​](#Running-the-Test \"Direct link to Running the Test\")\n\nSwitch back to the browser you opened for testing, and you should now see the `Stepper` Component in the spec list. Click it to see the spec execute.\n\nOur first test verifies the component can mount in its default state without any errors. If there is a runtime error during test execution, the test will fail, and you will see a stack trace pointing to the source of the problem.\n\nA basic test like the one above is an excellent way to start testing a component. Cypress renders your component in a real browser, and you can use all the techniques/tools you would normally during development, such as interacting with the component in the test runner, and using the browser dev tools to inspect and debug both your tests and the component's code.\n\nFeel free to play around with the `Stepper` component by interacting with the increment and decrement buttons.\n\nNow that the component is mounted, our next step is to test that the behavior of the component is correct.\n\n### Selectors & Assertions[​](#Selectors--Assertions \"Direct link to Selectors & Assertions\")\n\nBy default, the Stepper's counter is initialized to \"0\". We can override that value by specifying an initial count. Let's write a couple of tests that will verify both these states.\n\nTo do so, we will use a selector to access the `span` element that contains the counter, and then assert that the text value of the element is what we expect it to be.\n\nThere are various ways to select items from the DOM using Cypress. We will use [cy.get()](https://docs.cypress.io/api/commands/get), which allows us to pass in a CSS-like selector.\n\nAfter we \"get\" the element, we use the [should](https://docs.cypress.io/api/commands/should) assertion method to verify it has the correct text value.\n\nAdd the following test inside the `describe` block, right below the first test:\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\nit('stepper should default to 0', () => {  cy.mount(<Stepper />)  cy.get('span').should('have.text', '0')})\n```\n\nWhen you go back to the test runner, you should see the test pass.\n\nIn the above test, we select the element by passing in \"span\" to `cy.get()`, which will select all `span` tags in our component. We only have one `span` currently, so this works. However, if our component evolves and we add another `span`, then this test could start to fail. We should use a selector that will be less brittle to future changes.\n\nIn the `Stepper` component, the `span` tag has a `data-cy` attribute on it:\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\n<span data-cy=\"counter\">{count}</span>\n```\n\nWe assign a unique id to the `data-cy` attribute that we can use for testing purposes. Update the test to use a CSS attribute selector to `cy.get()`:\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\nit('stepper should default to 0', () => {  cy.mount(<Stepper />)  cy.get('[data-cy=counter]').should('have.text', '0')})\n```\n\nThe test will still pass as expected, and our selector is now future-proof. For more info on writing good selectors, see our guide [Selector Best Practices](https://docs.cypress.io/guides/references/best-practices#Selecting-Elements).\n\n### Passing Props to Components[​](#Passing-Props-to-Components \"Direct link to Passing Props to Components\")\n\nWe should also have a test to ensure the `count` prop sets the count to something else besides its default value of \"0\". We can pass in props to the `Stepper` component like so:\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\nit('supports a \"count\" prop to set the value', () => {  cy.mount(<Stepper count={100} />)  cy.get('[data-cy=counter]').should('have.text', '100')})\n```\n\n### Testing Interactions[​](#Testing-Interactions \"Direct link to Testing Interactions\")\n\nWe mounted and selected the element in the above tests but didn't interact with it. We should also test that the value of the counter changes when a user clicks the \"increment\" and \"decrement\" buttons.\n\nTo do so, we will interact with the component by using the [click()](https://docs.cypress.io/api/commands/click) command, which clicks a DOM element just like a real user would.\n\nAdd the following tests:\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\nit('when the increment button is pressed, the counter is incremented', () => {  cy.mount(<Stepper />)  cy.get('[data-cy=increment]').click()  cy.get('[data-cy=counter]').should('have.text', '1')})it('when the decrement button is pressed, the counter is decremented', () => {  cy.mount(<Stepper />)  cy.get('[data-cy=decrement]').click()  cy.get('[data-cy=counter]').should('have.text', '-1')})\n```\n\nWhen you view the results of each of the tests, you will see that the counter is now \"1\" in the **increment** test, and \"-1\" in the **decrement** test. Not only did our tests pass, but we can visually see the results in a browser!\n\n## Testing Components with Events[​](#Testing-Components-with-Events \"Direct link to Testing Components with Events\")\n\nAll the state of the `Stepper` Component (ie: the count) is handled internally in the component and then consumers are then alerted to changes to the state.\n\nAs the developer of the `Stepper` Component, you want to make sure when the end-user clicks the **increment** and **decrement** buttons, that the appropriate event is triggered with the proper values in the consuming component.\n\n### Using Spies[​](#Using-Spies \"Direct link to Using Spies\")\n\nWe can use [Cypress Spies](https://docs.cypress.io/guides/guides/stubs-spies-and-clocks#Spies) to validate these events are being called correctly. A spy is a special function that keeps track of how many times it was called and any parameters that it was called with. We can then assign a spy to our event, interact with the component, and then query the spy to validate it was called with the parameters we expect.\n\nLet's set up the spies and bind them to the component:\n\n*   React\n*   Angular\n*   Vue\n*   Svelte\n\n```\nit('clicking + fires a change event with the incremented value', () => {  const onChangeSpy = cy.spy().as('onChangeSpy')  cy.mount(<Stepper onChange={onChangeSpy} />)  cy.get('[data-cy=increment]').click()  cy.get('@onChangeSpy').should('have.been.calledWith', 1)})\n```\n\nFirst, we create a new spy by calling the `cy.spy()` method. We pass in a string that gives the spy an [alias](https://docs.cypress.io/guides/core-concepts/variables-and-aliases), which assigns the spy a name by which we can reference it later. In `cy.mount()`, we initialize the component and pass the spy into it. After that, we click the increment button.\n\nThe next line is a bit different. We've seen how we can use the `cy.get()` method to select elements, but we can also use it to grab any aliases we've set up previously. We use `cy.get()` to grab the alias to the spy (by prepending an \"@\" to the alias name). We assert that the method was called with the expected value.\n\nWith that, the `Stepper` component is well tested. Nice job!\n\n## What's Next?[​](#Whats-Next \"Direct link to What's Next?\")\n\nCongratulations, you covered the basics for Component Testing with Cypress!\n\nTo learn more about testing with Cypress, check out the [Introduction to Cypress](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress) guide.",
    "title": "Cypress Component Testing | Cypress Documentation",
    "description": "Getting started with Component Testing is super simple. Follow the guide below for a step by step guide on how to configure your project and quickly begin writing your first tests in just a few seconds.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/references/migration-guide",
    "markdown": "# Migration Guide | Cypress Documentation\n\n## Migrating to Cypress 13.0[​](#Migrating-to-Cypress-130 \"Direct link to Migrating to Cypress 13.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress version 13. [See the full changelog for version v13.0](https://docs.cypress.io/guides/references/changelog#13-0-0).\n\n### Cypress Cloud Test Replay[​](#Cypress-Cloud-Test-Replay \"Direct link to Cypress Cloud Test Replay\")\n\n[Test Replay](https://docs.cypress.io/guides/cloud/test-replay) is enabled by default in `v13` of the Cypress App.\n\nYou may need to allowlist `capture.cypress.io` if you work with a strict VPN. See our FAQ section about [VPN subdomain allowlisting](https://docs.cypress.io/faq/questions/cloud-faq#Im-working-with-a-restrictive-VPN-Which-subdomains-do-I-have-to-allow-on-my-VPN-for-Cypress-Cloud-to-work-properly).\n\nWith Test Replay enabled, the Cypress Runner UI is hidden by default when recording a run to the Cloud. If the Runner UI is needed during the run, you can enable it by passing [`--runner-ui`](https://docs.cypress.io/guides/guides/command-line#cypress-run-runner-ui) to the [`cypress run`](https://docs.cypress.io/guides/guides/command-line#cypress-run) command.\n\nYou can [opt-out](https://docs.cypress.io/guides/cloud/test-replay#Opt-out-of-Test-Replay) of this feature in Cloud project-level settings.\n\n### Video updates[​](#Video-updates \"Direct link to Video updates\")\n\n#### `video` is set to `false` by default[​](#video-is-set-to-false-by-default \"Direct link to video-is-set-to-false-by-default\")\n\nYou can continue recording video by setting `video` to `true` either in your Cypress configuration or via [overriding options](https://docs.cypress.io/guides/references/configuration#Overriding-Options). This can be useful if you want video locally or want video for some other reason, like in non-Chromium browsers where [Test Replay](https://docs.cypress.io/guides/cloud/test-replay) is not available.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  video: true,})\n```\n\n#### `videoUploadOnPasses` configuration option has been removed[​](#videoUploadOnPasses-configuration-option-has-been-removed \"Direct link to videoUploadOnPasses-configuration-option-has-been-removed\")\n\nMost users used `videoUploadOnPasses` as a way to skip the time to compress and upload videos to the Cloud. Since we're turning off `videoCompression` by default, this configuration option does not offer the time saving value that it once would.\n\nIf you want to prevent a passing test from uploading to the Cloud, we recommend deleting the video using our [guide with code examples to discard captured video of passing tests](https://docs.cypress.io/guides/guides/screenshots-and-videos#Control-which-videos-to-keep-and-upload-to-Cypress-Cloud).\n\n#### `videoCompression` is set to `false` by default[​](#videoCompression-is-set-to-false-by-default \"Direct link to videoCompression-is-set-to-false-by-default\")\n\nCypress has the capability to compress recorded videos after a run to reduce the video file size. By default, compression is now turned off. This results in a reduced run time by removing the time to compress the video, a larger video file size and better video quality.\n\nYou can enable this with the `videoCompression` [configuration](https://docs.cypress.io/guides/references/configuration#Videos) option if you'd like to reduce the video file size for any reason. This will also reduce the video quality and take slightly longer to process and complete the run.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // value can be true/false -or- an integer between 0 and 51  videoCompression: true,})\n```\n\n### `cy.readFile()` is now a query command[​](#cyreadFile-is-now-a-query-command \"Direct link to cyreadFile-is-now-a-query-command\")\n\nIn Cypress `v13`, the [`.readFile()`](https://docs.cypress.io/api/commands/readfile) command is now a query. Tests written using it should continue to operate exactly as before; no changes are necessary.\n\n`readFile()` will re-read the file from disk if any upcoming command in the same chain fails. Assertions no longer have to be directly attached.\n\n```\ncy.readFile(`users.json`).its('users.123.fullName').should('eq', 'John Doe')\n```\n\nBeginning with Cypress `v13`, the above test will re-read the file until the file exists, it has the requested property, and it passes the assertion.\n\nIn previous versions of Cypress, the above command would retry until the file existed, but would _not_ re-read it from disk if the file didn't have the requested property or the contents didn't match.\n\n#### `.readFile()` can no longer be overwritten with `Cypress.Commands.overwrite()`[​](#readFile-can-no-longer-be-overwritten-with-CypressCommandsoverwrite \"Direct link to readFile-can-no-longer-be-overwritten-with-CypressCommandsoverwrite\")\n\nQueries must be overwritten using `Cypress.Commands.overwriteQuery()`. If you were previously overwriting `cy.readFile()`, you will need to update your code to use `Cypress.Commands.overwriteQuery('readFile', function() { ... })` rather than `Cypress.Commands.overwrite('readFile', () => { ... })`. For more details on overwriting queries, see the [Overwriting Existing Queries](https://docs.cypress.io/api/cypress-api/custom-queries#Overwriting-Existing-Queries).\n\n## Migrating to Cypress 12.0[​](#Migrating-to-Cypress-120 \"Direct link to Migrating to Cypress 12.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress version 12.0. [See the full changelog for version 12.0](https://docs.cypress.io/guides/references/changelog#12-0-0).\n\nThe Session and Origin experiment has been released as General Availability (GA), meaning that we have deemed this experiment to be feature complete and free of issues in the majority of use cases. With releasing this as GA, the `experimentalSessionAndOrigin` flag has been removed, the [`cy.origin()`](https://docs.cypress.io/api/commands/origin) and [`cy.session()`](https://docs.cypress.io/api/commands/session) commands are generally available and [Test Isolation](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Isolation) is enabled by default.\n\n### Node.js 14+ support[​](#Nodejs-14-support \"Direct link to Node.js 14+ support\")\n\nCypress comes bundled with its own [Node.js version](https://github.com/cypress-io/cypress/blob/develop/.node-version). However, installing the `cypress` npm package uses the Node.js version installed on your system.\n\nNode.js 12 reached its end of life on April 30, 2022. [See Node's release schedule](https://github.com/nodejs/Release). This Node.js version will no longer be supported when installing Cypress. The minimum Node.js version supported to install Cypress is Node.js 14+.\n\n### Test Isolation[​](#Test-Isolation \"Direct link to Test Isolation\")\n\nThe [`testIsolation`](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Isolation) config option is enabled by default. This means Cypress resets the browser context _before_ each test by:\n\n*   clearing the dom state by visiting `about:blank`\n*   clearing [cookies](https://docs.cypress.io/api/cypress-api/cookies) in all domains\n*   clearing [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) in all domains\n*   clearing [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) in all domains\n\nTest suites that relied on the application to persist between tests may have to be updated to revisit their application and rebuild the browser state for each test that needs it.\n\nBefore this change, it was possible to write tests such that you could rely on the application (i.e. DOM state) to persist between tests. For example you could log in to a CMS in the first test, change some content in the second test, verify the new version is displayed on a different URL in the third, and log out in the fourth.\n\nHere's a simplified example of such a test strategy.\n\nBefore Multiple small tests against different origins\n\n```\nit('logs in', () => {  cy.visit('https://example.cypress.io')  cy.get('input#password').type('Password123!')  cy.get('button#submit').click()})it('updates the content', () => {  // already on page redirect from clicking button#submit  cy.get('#current-user').contains('logged in')  cy.get('button#edit-1').click()  cy.get('input#title').type('Updated title')  cy.get('button#submit').click()  cy.get('.toast').contains('Changes saved!')})it('validates the change', () => {  cy.visit('/items/1')  cy.get('h1').contains('Updated title')})\n```\n\nAfter migrating, when `testIsolation=true` by default, this flow would need to be contained within a single test. While the above practice has always been [discouraged](https://docs.cypress.io/guides/references/best-practices#Having-Tests-Rely-On-The-State-Of-Previous-Tests) we know some users have historically written tests this way, often to get around the `same-origin` restrictions. But with [`cy.origin()`](https://docs.cypress.io/api/commands/origin) you no longer need these kind of brittle hacks, as your multi-origin logic can all reside in a single test, like the following.\n\nAfter One big test using `cy.origin()`\n\n```\nit('securely edits content', () => {  cy.origin('cypress.io', () => {    cy.visit('https://example.cypress.io')    cy.get('input#password').type('Password123!')    cy.get('button#submit').click()  })  cy.origin('cypress-dx.com', () => {    cy.url().should('contain', 'cms')    cy.get('#current-user').contains('logged in')    cy.get('button#edit-1').click()    cy.get('input#title').type('Updated title')    cy.get('button#submit').click()    cy.get('.toast').contains('Changes saved!')  })  cy.visit('/items/1')  cy.get('h1').contains('Updated title')})\n```\n\nThe just-released `cy.session()` command can be used to setup and cache cookies, local storage and session storage between tests to easily re-establish the previous (or common) browser contexts needed in a suite. This command will run setup on its initial execution and will restore the saved browser state on each sequential command execution. This command reduces the need for repeated application logins, while users also benefit from the test isolation guardrails to write independent, reliable and deterministic tests from the start.\n\nIf for whatever reason you still need to persist the dom and browser context between tests, you can disable test isolation by setting `testIsolation=false` on the root configuration or at the suite-level. For example:\n\n```\ndescribe('workflow', { testIsolation: false }, () => {  ...})\n```\n\nIt is important to note that while disabling test isolation may improve the overall performance of end-to-end tests, it can cause state to \"leak\" between tests. This can make later tests dependent on the results of earlier tests, and potentially cause misleading test failures. It is important to be extremely mindful of how tests are written when using this mode, and ensure that tests continue to run independently of one another.\n\nFor example the following tests are not independent nor deterministic:\n\n```\ndescribe('workflow', { testIsolation: false }, () => {  it('logs in', () => {    cy.visit('https://example.cypress.io/log-in')    cy.get('username').type('User1')    cy.get('password').type(Cypress.env('User1_password'))    cy.get('button#login').click()    cy.contains('User1')  })  it('clicks user profile', () => {    cy.get('User1').find('#profile_avatar').click()    cy.contains('Email Preferences')  })  it('updates profile', () => {    cy.get('button#edit')    cy.get('email').type('[email protected]')    cy.get('button#save').click()  })})\n```\n\nIn the above example, each test is relying on the previous test to be _successful_ to correctly execute. If at any point, the first or second test fails, the sequential test(s) will automatically fail and provide unreliable debugging errors since the errors are representative of the previous test.\n\nThe best way to ensure your tests are independent is to add a `.only()` to your test and verify it can run successfully without the test before it.\n\n#### Simulating Pre-Test Isolation Behavior[​](#Simulating-Pre-Test-Isolation-Behavior \"Direct link to Simulating Pre-Test Isolation Behavior\")\n\nTest isolation did not truly exist pre-12. Pre-Cypress 12, the behavior was a hybrid of both `testIsolation` enabled and disabled. All local storage and cookies on the current domain were cleared, but Cypress did not clear session storage and the page always persisted.\n\nIn Cypress 12+ when `testIsolation` is enabled, local storage, session storage and cookies in **all** domains are cleared and the page is cleared. When `testIsolation` is disabled, nothing is cleared before the next test so all local storage, session storage and cookies & the page persists.\n\nIf you wanted to match pre-Cypress 12 behavior, you need to disable `testIsolation`, then run `cy.clearLocalStorage()` and `cy.clearCookies()` in a beforeEach hook to clear the local storage and cookies in the current domain.\n\n```\ndescribe('match pre-12 behavior', { testIsolation: false }, () => {  beforeEach(() => {    cy.clearLocalStorage()    cy.clearCookies()    // other beforeEach logic to restore the expected local storage or cookies needed on the client.  })})\n```\n\nMany of the issues test isolation solved were around cookie management with tests trying to save and persist cookies because the page was still available, but the cookies on the domain were unexpectedly cleared which broke interactions with the application. It wasn’t obvious Cypress was doing a partial browser clean up. Explicitly setting test isolation to enabled or disabled allows you to choose what is right for your tests.\n\n### Behavior Changes in Alias Resolution[​](#Behavior-Changes-in-Alias-Resolution \"Direct link to Behavior Changes in Alias Resolution\")\n\nCypress always re-queries aliases when they are referenced. This can result in certain tests that used to pass could start to fail. For example,\n\n```\ncy.findByTestId('popover')  .findByRole('button', { expanded: true })  .as('button')  .click()cy.get('@button').should('have.attr', 'aria-expanded', 'false')\n```\n\npreviously passed, because the initial button was collapsed when first queried, and then later expanded. However, in Cypress 12, this test fails because the alias is always re-queried from the DOM, effectively resulting in the following execution:\n\n```\ncy.findByTestId('popover').findByRole('button', { expanded: true }).click()cy.findByTestId('popover')  .findByRole('button', { expanded: true }) // A button which matches here (is expanded)...  .should('have.attr', 'aria-expanded', 'false') // ...will never pass this assertion.\n```\n\nYou can rewrite tests like this to be more specific; in our case, we changed the alias to be the first button rather than the unexpanded button.\n\n```\ncy.findByTestId('popover').findAllByRole('button').first().as('button')\n```\n\nIf you want to alias a static value, such that it is never re-queried, you will need Cypress [12.3.0](https://docs.cypress.io/guides/references/changelog#12-3-0) or later, which introduced the `type` option for [`.as()`](https://docs.cypress.io/api/commands/as) to opt into the old behavior.\n\n```\ncy.get('.username').invoke('val').as('username', { type: 'static' })\n```\n\nSee [`.as()`](https://docs.cypress.io/api/commands/as) for more details.\n\n### Command / Cypress API Changes[​](#Command--Cypress-API-Changes \"Direct link to Command / Cypress API Changes\")\n\n#### `Cypress.Cookies.defaults` and `Cypress.Cookies.preserveOnce`[​](#CypressCookiesdefaults-and-CypressCookiespreserveOnce \"Direct link to CypressCookiesdefaults-and-CypressCookiespreserveOnce\")\n\nThe `Cypress.Cookies.defaults` and `Cypress.Cookies.preserveOnce` APIs been removed. Use the [`cy.session()`](https://docs.cypress.io/api/commands/session) command to preserve cookies (and local and session storage) between tests.\n\nIf you were using `Cypress.Cookies.preserveOnce` to preserve a specific cookie within a single spec, this might look like the following:\n\n```\ndescribe('Dashboard', () => {  beforeEach(() => {-    cy.login()-    Cypress.Cookies.preserveOnce('session_id', 'remember_token')+    cy.session('unique_identifier', cy.login, {+       validate () {+        cy.getCookies().should('have.length', 2)+       },+    })  })\n```\n\nIf you were using `Cypress.Cookies.defaults` to preserve a cookie or set of cookies across test, this might look like the following:\n\n```\ndescribe('Dashboard', () => {  beforeEach(() => {-    cy.login()-    Cypress.Cookies.defaults({-       preserve: ['session_id', 'remember_token']-    })+    cy.session('unique_identifier', cy.login, {+       validate () {+        cy.getCookies().should('have.length', 2)+       },+       cacheAcrossSpecs: true+    })  })\n```\n\n#### `cy.server()`, `cy.route()` and `Cypress.Server.defaults`[​](#cyserver-cyroute-and-CypressServerdefaults \"Direct link to cyserver-cyroute-and-CypressServerdefaults\")\n\nThe `cy.server()` and `cy.route()` commands and the `Cypress.server.defaults` API has been removed. Use the [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) command instead.\n\n```\n  it('can encode + decode headers', () => {-   Cypress.Server.defaults({-     delay: 500,-     method: 'GET',-   })-   cy.server()-   cy.route(/api/, () => {-      return {-        'test': 'We’ll',-      }-    }).as('getApi')+   cy.intercept('GET', /api/, (req) => {+      req.on('response', (res) => {+        res.setDelay(500)+      })+      req.body.'test': 'We’ll'+    }).as('getApi')    cy.visit('/index.html')    cy.window().then((win) => {      const xhr = new win.XMLHttpRequest      xhr.open('GET', '/api/v1/foo/bar?a=42')      xhr.send()    })    cy.wait('@getApi')-   .its('url').should('include', 'api/v1')+   .its('request.url').should('include', 'api/v1')  })\n```\n\n#### `.invoke()`[​](#invoke \"Direct link to invoke\")\n\nThe [`.invoke()`](https://docs.cypress.io/api/commands/invoke) command now throws an error if the function returns a promise. If you wish to call a method that returns a promise and wait for it to resolve, use [`.then()`](https://docs.cypress.io/api/commands/then) instead of `.invoke()`.\n\n```\ncy.wrap(myAPI)-  .invoke('makeARequest', 'http://example.com')+  .then(api => api.makeARequest('http://example.com'))   .then(res => { ...handle response... })\n```\n\nIf `.invoke()` is followed by additional commands or assertions, it will call the named function multiple times. This has the benefit that the chained assertions can more reliably use the function's return value.\n\nIf this behavior is undesirable because you expect the function to be invoked only once, break the command chain and move the chained commands and/or assertions to their own chain. For example, rewrite\n\n```\n- cy.get('input').invoke('val', 'text').type('newText')+ cy.get('input').invoke('val', 'text')+ cy.get('input').type('newText')\n```\n\n#### `.should()`[​](#should \"Direct link to should\")\n\nThe [`.should()`](https://docs.cypress.io/api/commands/should) assertion now throws an error if Cypress commands are invoked from inside a `.should()` callback. This previously resulted in unusual and undefined behavior. If you wish to execute a series of commands on the yielded value, use`.then()` instead.\n\n```\ncy.get('button')-  .should(($button) => {    })+  .then(api => api.makeARequest('http://example.com'))   .then(res => { ...handle response... })\n```\n\n#### `.within()`[​](#within \"Direct link to within\")\n\nThe [`.within()`](https://docs.cypress.io/api/commands/within) command now throws an error if it is passed multiple elements as the subject. This previously resulted in inconsistent behavior, where some commands would use all passed in elements, some would use only the first and ignore the rest, and [`.screenshot()`](https://docs.cypress.io/api/commands/screenshot) would throw an error if used inside a `.within()` block with multiple elements.\n\nIf you were relying on the old behavior, you have several options depending on the desired result.\n\nThe simplest option is to reduce the subject to a single element.\n\n```\ncy.get('tr')+  .first() // Limit the subject to a single element before calling .within()  .within(() => {    cy.contains('Edit').click()  })\n```\n\nIf you have multiple subjects and wish to run commands over the collection as a whole, you can alias the subject rather than use `.within()`.\n\n```\ncy.get('tr')-  .within(() => {-    cy.get('td').should('have.class', 'foo')-    cy.get('td').should('have.class', 'bar')-  })+  .as('rows') // Store multiple elements as an alias+cy.get('@rows').find('td').should('have.class', 'foo')+cy.get('@rows').find('td').should('have.class', 'bar')\n```\n\nOr if you have a collection and want to run commands over every element, use `.each()` in conjunction with `.within()`.\n\n```\ncy.get('tr')-  .within(() => {-    cy.contains('Edit').should('have.attr', 'disabled')-  })+  .each($tr => {+    cy.wrap($tr).within(() => {+      cy.contains('Edit').should('have.attr', 'disabled')+    })+  })\n```\n\n#### `Cypress.Commands.overwrite()`[​](#CypressCommandsoverwrite \"Direct link to CypressCommandsoverwrite\")\n\nIn Cypress 12.0.0, we introduced a new command type, called queries. A query is a small and fast command for getting data from the window or DOM. This distinction is important because Cypress can retry chains of queries, keeping the yielded subject up-to-date as a page rerenders.\n\nWith the introduction of query commands, the following commands have been re-categorized and can no longer be overwritten with [`Cypress.Commands.overwrite()`](https://docs.cypress.io/api/cypress-api/custom-commands#Overwrite-Existing-Commands):\n\n*   [`.as()`](https://docs.cypress.io/api/commands/as)\n*   [`.children()`](https://docs.cypress.io/api/commands/children)\n*   [`.closest()`](https://docs.cypress.io/api/commands/closest)\n*   [`.contains()`](https://docs.cypress.io/api/commands/contains)\n*   [`cy.debug()`](https://docs.cypress.io/api/commands/debug)\n*   [`cy.document()`](https://docs.cypress.io/api/commands/document)\n*   [`.eq()`](https://docs.cypress.io/api/commands/eq)\n*   [`.filter()`](https://docs.cypress.io/api/commands/filter)\n*   [`.find()`](https://docs.cypress.io/api/commands/find)\n*   [`.first()`](https://docs.cypress.io/api/commands/first)\n*   [`.focused()`](https://docs.cypress.io/api/commands/focused)\n*   [`.get()`](https://docs.cypress.io/api/commands/get)\n*   [`.hash()`](https://docs.cypress.io/api/commands/hash)\n*   [`.its()`](https://docs.cypress.io/api/commands/its)\n*   [`.last()`](https://docs.cypress.io/api/commands/last)\n*   [`cy.location()`](https://docs.cypress.io/api/commands/location)\n*   [`.next()`](https://docs.cypress.io/api/commands/next)\n*   [`.nextAll()`](https://docs.cypress.io/api/commands/nextall)\n*   [`.not()`](https://docs.cypress.io/api/commands/not)\n*   [`.parent()`](https://docs.cypress.io/api/commands/parent)\n*   [`.parents()`](https://docs.cypress.io/api/commands/parents)\n*   [`.parentsUntil()`](https://docs.cypress.io/api/commands/parentsuntil)\n*   [`.prev()`](https://docs.cypress.io/api/commands/prev)\n*   [`.prevUntil()`](https://docs.cypress.io/api/commands/prevuntil)\n*   [`cy.root()`](https://docs.cypress.io/api/commands/root)\n*   [`.shadow()`](https://docs.cypress.io/api/commands/shadow)\n*   [`.siblings()`](https://docs.cypress.io/api/commands/siblings)\n*   [`cy.title()`](https://docs.cypress.io/api/commands/title)\n*   [`cy.url()`](https://docs.cypress.io/api/commands/url)\n*   [`cy.window()`](https://docs.cypress.io/api/commands/window)\n\nIf you were previously overwriting one of the above commands, try adding your version as a new command using [`Cypress.Commands.add()`](https://docs.cypress.io/api/cypress-api/custom-commands) under a different name.\n\n## Migrating to Cypress 11.0[​](#Migrating-to-Cypress-110 \"Direct link to Migrating to Cypress 11.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress version 11.0. [See the full changelog for version 11.0](https://docs.cypress.io/guides/references/changelog#11-0-0).\n\n### Component Testing Updates[​](#Component-Testing-Updates \"Direct link to Component Testing Updates\")\n\nAs of Cypress 11, Component Testing is now generally available. There are some minor breaking changes. Most projects should be able to migrate without any code modifications.\n\n#### Changes to Mounting Options[​](#Changes-to-Mounting-Options \"Direct link to Changes to Mounting Options\")\n\nEach major library we support has a `mount` function with two arguments:\n\n1.  The component\n2.  Mounting Options\n\nMounting options previously had several properties that are now removed:\n\n*   cssFile, cssFiles\n*   style, styles\n*   stylesheet, stylesheets\n\nRead more about the rationale [here](https://www.cypress.io/blog/2022/11/04/upcoming-changes-to-component-testing/). We recommend writing test-specific styles in a separate `css` file you import in your test, or in your `supportFile`.\n\n#### Before (Cypress 10)[​](#Before-Cypress-10 \"Direct link to Before (Cypress 10)\")\n\n```\nimport { mount } from 'cypress/react'import { Card } from './Card'it('renders some content', () => {  cy.mount(<Card title=\"title\" />, {    styles: `      .card { width: 100px; }    `,    stylesheets: [      'https://cdn.jsdelivr.net/npm/[email protected]/dist/css/bootstrap.min.css',    ],  })})\n```\n\n#### After (Cypress 11)[​](#After-Cypress-11 \"Direct link to After (Cypress 11)\")\n\n```\n/** style.css */@import \"https://cdn.jsdelivr.net/npm/[email protected]/dist/css/bootstrap.min.css\";.card { width: 100px }/** Card.cy.jsx */import { mount } from 'cypress/react'import { Card } from './Card'import './styles.css' // contains CDN link and custom styling.it('renders some content', () => {  cy.mount(<Card title=\"title\" />)})\n```\n\n### React - `mountHook` Removed[​](#React---mountHook-Removed \"Direct link to React---mountHook-Removed\")\n\n`mountHook` from `cypress/react` has been removed. Read more about the rationale [here](https://www.cypress.io/blog/2022/11/04/upcoming-changes-to-component-testing/).\n\nWe recommend simply replacing it with `mount` and a component.\n\nConsider the following `useCounter` hook:\n\n```\nimport { useState, useCallback } from 'react'function useCounter() {  const [count, setCount] = useState(0)  const increment = useCallback(() => setCount((x) => x + 1), [])  return { count, increment }}\n```\n\n#### Before - Cypress 10 and `mountHook`[​](#Before---Cypress-10-and-mountHook \"Direct link to Before---Cypress-10-and-mountHook\")\n\n```\nimport { mountHook } from 'cypress/react'import { useCounter } from './useCounter'it('increments the count', () => {  mountHook(() => useCounter()).then((result) => {    expect(result.current.count).to.equal(0)    result.current.increment()    expect(result.current.count).to.equal(1)    result.current.increment()    expect(result.current.count).to.equal(2)  })})\n```\n\n#### After - Cypress 11 and `mount`[​](#After---Cypress-11-and-mount \"Direct link to After---Cypress-11-and-mount\")\n\n```\nimport { useCounter } from './useCounter'it('increments the count', () => {  function Counter() {    const { count, increment } = useCounter()    return (      <>        <h1 name=\"count\">Count is {{ count }}</h1>        <button onClick={increment}>Increment</button>      </>    )  }  cy.mount(<Counter />).then(() => {    cy.get('[name=\"count\"]')      .should('contain', 0)      .get('button')      .click()      .get('[name=\"count\"]')      .should('contain', 1)  })})\n```\n\n### React - `unmount` Removed[​](#React---unmount-Removed \"Direct link to React---unmount-Removed\")\n\n`unmount` from `cypress/react` has been removed. Read more about the rationale [here](https://www.cypress.io/blog/2022/11/04/upcoming-changes-to-component-testing/). We recommend using the API React provides for unmounting components, [unmountComponentAtNode](https://reactjs.org/docs/react-dom.html#unmountcomponentatnode).\n\n#### Before - Cypress 10 and `unmount`[​](#Before---Cypress-10-and-unmount \"Direct link to Before---Cypress-10-and-unmount\")\n\n```\nimport { unmount } from 'cypress/react'it('calls the prop', () => {  cy.mount(<Comp onUnmount={cy.stub().as('onUnmount')} />)  cy.contains('My component')  unmount()  // the component is gone from the DOM  cy.contains('My component').should('not.exist')  cy.get('@onUnmount').should('have.been.calledOnce')})\n```\n\n#### After - Cypress 11 and `unmountComponentAtNode`[​](#After---Cypress-11-and-unmountComponentAtNode \"Direct link to After---Cypress-11-and-unmountComponentAtNode\")\n\n```\nimport { getContainerEl } from 'cypress/react'import ReactDom from 'react-dom'it('calls the prop', () => {  cy.mount(<Comp onUnmount={cy.stub().as('onUnmount')} />)  cy.contains('My component')  cy.then(() => ReactDom.unmountComponentAtNode(getContainerEl()))  // the component is gone from the DOM  cy.contains('My component').should('not.exist')  cy.get('@onUnmount').should('have.been.calledOnce')})\n```\n\n### Vue - `mountCallback` Removed[​](#Vue---mountCallback-Removed \"Direct link to Vue---mountCallback-Removed\")\n\n`mountCallback` from `cypress/vue` has been removed. Read more about the rationale [here](https://www.cypress.io/blog/2022/11/04/upcoming-changes-to-component-testing/). We recommend using `mount`.\n\n#### Before - Cypress 10 and `mountCallback`[​](#Before---Cypress-10-and-mountCallback \"Direct link to Before---Cypress-10-and-mountCallback\")\n\n```\nimport { mountCallback } from 'cypress/vue'beforeEach(mountCallback(MessageList))it('shows no messages', () => {  getItems().should('not.exist')})\n```\n\n#### After - Cypress 11 and `mount`[​](#After---Cypress-11-and-mount-1 \"Direct link to After---Cypress-11-and-mount-1\")\n\n```\nbeforeEach(() => cy.mount(MessageList))it('shows no messages', () => {  getItems().should('not.exist')})\n```\n\n### Angular - Providers Mounting Options Change[​](#Angular---Providers-Mounting-Options-Change \"Direct link to Angular - Providers Mounting Options Change\")\n\nThere is one breaking change for Angular users in regards to providers. In Cypress 10, we took any providers passed as part of the Mounting Options and overrode the component providers via the `TestBed.overrideComponent` API.\n\nIn Cypress 11, providers passed as part of the Mounting Options will be assigned at the module level using the `TestBed.configureTestingModule` API.\n\nThis means that module-level providers (resolved from imports or `@Injectable({ providedIn: 'root' })` can be overridden, but providers specified in `@Component({ providers: [...] })` will not be overridden when using `cy.mount(MyComponent, { providers: [...] })`.\n\nTo override component-level providers, use the `TestBed.overrideComponent` API.\n\nSee a concrete example [here](https://www.cypress.io/blog/2022/11/04/upcoming-changes-to-component-testing/#angularproviders-priority).\n\n### Vite Dev Server (`cypress/vite-dev-server`)[​](#Vite-Dev-Server-cypressvite-dev-server \"Direct link to Vite-Dev-Server-cypressvite-dev-server\")\n\nWhen providing an inline `viteConfig` inside of `cypress.config`, any `vite.config.js` file is not automatically merged.\n\n#### Before - Cypress 10 and `viteConfig`[​](#Before---Cypress-10-and-viteConfig \"Direct link to Before---Cypress-10-and-viteConfig\")\n\n```\nimport { defineConfig } from 'cypress'export default defineConfig({  component: {    devServer: {      framework: 'react',      bundler: 'vite',      viteConfig: {        // ... custom vite config ...        // result merged with `vite.config` file if present      },    },  },})\n```\n\n#### After - Cypress 11 and `viteConfig`[​](#After---Cypress-11-and-viteConfig \"Direct link to After---Cypress-11-and-viteConfig\")\n\n```\nimport { defineConfig } from 'cypress'import viteConfig from './vite.config'export default defineConfig({  component: {    devServer: {      framework: 'react',      bundler: 'vite',      viteConfig: {        ...viteConfig,        // ... other overrides ...      },    },  },})\n```\n\nVite 3+ users could make use of the [`mergeConfig`](https://vitejs.dev/guide/api-javascript.html#mergeconfig) API.\n\n## Migrating to Cypress 10.0[​](#Migrating-to-Cypress-100 \"Direct link to Migrating to Cypress 10.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress version 10.0. [See the full changelog for version 10.0](https://docs.cypress.io/guides/references/changelog#10-0-0).\n\n### Cypress Changes[​](#Cypress-Changes \"Direct link to Cypress Changes\")\n\n*   The \"Run all specs\" and \"Run filtered specs\" functionality have been removed.\n*   The experimental \"Cypress Studio\" has been removed and will be rethought/revisited in a later release.\n*   Unsupported browser versions can no longer be run via `cypress run` or `cypress open`. Instead, an error will display.\n*   In 9.x and earlier versions, `cypress open` would bring you directly to the project specs list. In 10.0.0, you must pass `--browser` and `--e2e` or `--component` as well to launch Cypress directly to the specs list.\n\n### Configuration File Changes[​](#Configuration-File-Changes \"Direct link to Configuration File Changes\")\n\nCypress now supports JavaScript and TypeScript configuration files. By default, Cypress will automatically load a `cypress.config.js` or `cypress.config.ts` file in the project root if one exists. The [Configuration guide](https://docs.cypress.io/guides/references/configuration) has been updated to reflect these changes, and explains them in greater detail.\n\nBecause of this, support for `cypress.json` has been removed. Documentation for `cypress.json` has been moved to the [Legacy Configuration guide](https://docs.cypress.io/guides/references/legacy-configuration).\n\nRelated notes:\n\n*   If no config file exists when you open Cypress, the automatic set up process will begin and either a JavaScript or TypeScript config file will be created depending on what your project uses.\n*   You may use the `--config-file` command line flag or the `configFile` [module API](https://docs.cypress.io/guides/guides/module-api) option to specify a `.js` or `.ts` file. JSON config files are no longer supported.\n*   Cypress now requires a config file, so specifying `--config-file false` on the command line or a `configFile` value of `false` in the module API is no longer valid.\n*   You can't have both `cypress.config.js` _and_ `cypress.config.ts` files. This will result in an error when Cypress loads.\n*   A [`defineConfig()`](https://docs.cypress.io/guides/references/configuration#Intelligent-Code-Completion) helper function is now exported by Cypress, which provides automatic code completion for configuration in many popular code editors. For TypeScript users, the `defineConfig` function will ensure the configuration object passed into it satisfies the type definition of the configuration file.\n*   Many pages and examples throughout the documentation have been updated to show configuration using `cypress.config.js` and `cypress.config.ts` vs the older `cypress.json`. For example:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  e2e: {    baseUrl: 'http://localhost:1234',  },})\n```\n\n### Plugins File Removed[​](#Plugins-File-Removed \"Direct link to Plugins File Removed\")\n\nBecause Cypress now supports JavaScript and TypeScript configuration files, a separate \"plugins file\" (which used to default to `cypress/plugins/index.js`) is no longer needed.\n\nSupport for the plugins file has been removed, and it has been replaced with the new [`setupNodeEvents()`](https://docs.cypress.io/guides/references/configuration#setupNodeEvents) and [`devServer`](https://docs.cypress.io/guides/references/configuration#devServer) config options.\n\nRelated notes:\n\n*   The `cypress/plugins/index.js` plugins file is no longer automatically loaded by Cypress.\n*   The [`setupNodeEvents()`](https://docs.cypress.io/guides/references/configuration#setupNodeEvents) config option is functionally equivalent to the function exported from the plugins file; it takes the same `on` and `config` arguments, and should return the same value. See the [Config option changes section](#setupNodeEvents) of this migration guide for more details.\n*   The [`devServer`](https://docs.cypress.io/guides/references/configuration#devServer) config option is specific to component testing, and offers a much more streamlined and consistent way to configure a component testing dev server than using the plugins file. See the [Config option changes section](#devServer) of this migration guide for more details.\n*   Many pages and examples throughout the documentation have been updated to show configuration in `setupNodeEvents` as well as the legacy plugins file. For example:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      // bind to the event we care about      on('<event>', (arg1, arg2) => {        // plugin stuff here      })    },  },})\n```\n\n### Config Option Changes[​](#Config-Option-Changes \"Direct link to Config Option Changes\")\n\n#### `baseUrl`[​](#baseUrl \"Direct link to baseUrl\")\n\nThe `baseUrl` config option is no longer valid at the top level of the configuration, and may only be defined inside the [`e2e`](https://docs.cypress.io/guides/references/configuration#e2e) configuration object.\n\ncaution\n\nAttempting to set the `baseUrl` config option at the top level of the configuration will result in an error when Cypress loads.\n\n#### `componentFolder`[​](#componentFolder \"Direct link to componentFolder\")\n\nThe `componentFolder` config option is no longer used, as it has been replaced by the `specPattern` [testing-type specific option](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options).\n\ncaution\n\nAttempting to set the `componentFolder` config option will result in an error when Cypress loads.\n\n#### `devServer`[​](#devServer \"Direct link to devServer\")\n\nAll functionality related to starting a component testing dev server previously in the `pluginsFile` has moved here. These options are not valid at the top-level, and may only be defined in the [`component`](https://docs.cypress.io/guides/references/configuration#component) configuration object.\n\nRelated notes:\n\n*   Do not configure your dev server inside `setupNodeEvents()`, use the `devServer` config option instead.\n\ninfo\n\nSee the dev server documentation for the UI framework you're using for more specific instructions on what the `devServer` should be for that framework. Some examples can be found in our [framework documentation](https://docs.cypress.io/guides/component-testing/component-framework-configuration).\n\n**Variant 1 (webpack & vite dev servers)**\n\nBefore\n\ncypress/plugins/index.js\n\n```\nconst { startDevServer } = require('@cypress/webpack-dev-server')const webpackConfig = require('../../webpack.config.js')module.exports = (on, config) => {  if (config.testingType === 'component') {    on('dev-server:start', async (options) =>      startDevServer({ options, webpackConfig })    )  }}\n```\n\nAfter\n\n*   cypress.config.js\n*   cypress.config.js (verbose)\n*   cypress.config.ts\n*   cypress.config.ts (verbose)\n\n```\nconst { defineConfig } = require('cypress')const webpackConfig = require('./webpack.config.js')module.exports = defineConfig({  component: {    devServer: {      framework: 'react', // or vue      bundler: 'webpack',      webpackConfig,    },  },})\n```\n\n**Variant 2 (react plugin dev servers)**\n\nBefore\n\n```\nconst devServer = require('@cypress/react/plugins/react-scripts')module.exports = (on, config) => {  if (config.testingType === 'component') {    injectDevServer(on, config, {})  }}\n```\n\nAfter\n\n*   cypress.config.js\n*   more verbose\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  component: {    devServer: {      framework: 'react', // or vue      bundler: 'webpack',    },  },})\n```\n\n#### `experimentalStudio`[​](#experimentalStudio \"Direct link to experimentalStudio\")\n\nThis option is no longer used. The experimental \"Cypress Studio\" has been removed and will be rethought/revisited in a later release.\n\ncaution\n\nAttempting to set the `experimentalStudio` config option will result in an error when Cypress loads.\n\n#### `ignoreTestFiles` → `excludeSpecPattern`[​](#ignoreTestFiles--excludeSpecPattern \"Direct link to ignoreTestFiles--excludeSpecPattern\")\n\nThe `ignoreTestFiles` option is no longer used, and has been replaced with the `excludeSpecPattern` [testing-type specific option](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options).\n\nDefault values\n\n*   `e2e.excludeSpecPattern` default value is `*.hot-update.js` (same as pervious ignore value)\n*   `component.excludeSpecPattern` default value is `['/snapshots/*', '/image_snapshots/*']` updated from `*.hot-update.js`\n*   The `**/node_modules/**` pattern is automatically added to both `e2e.specExcludePattern` and `component.specExcludePattern`, and does not need to be specified (and can't be overridden).\n\nBefore\n\n```\n{  \"ignoreTestFiles\": \"path/to/**/*.js\"}\n```\n\nAfter\n\n```\n{  component: {    excludeSpecPattern: \"path/to/**/*.js\"  },  e2e: {    excludeSpecPattern: \"other/path/to/**/*.js\"  }}\n```\n\ncaution\n\nAttempting to set the `ignoreTestFiles` config option will result in an error when Cypress loads.\n\nAlso, attempting to set the `excludeSpecPattern` config option at the top level of the configuration will result in an error when Cypress loads.\n\n#### `integrationFolder`[​](#integrationFolder \"Direct link to integrationFolder\")\n\nThis option is no longer used, as it has been replaced by the `specPattern` [testing-type specific option](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options).\n\ncaution\n\nAttempting to set the `integrationFolder` config option will result in an error when Cypress loads.\n\n#### `pluginsFile`[​](#pluginsFile \"Direct link to pluginsFile\")\n\nThis option is no longer used, and all plugin file functionality has moved into the [`setupNodeEvents()`](https://docs.cypress.io/guides/references/configuration#setupNodeEvents) and [`devServer`](https://docs.cypress.io/guides/references/configuration#devServer) options. See the [Plugins file removed](#Plugins-File-Removed) section of this migration guide for more details.\n\ncaution\n\nAttempting to set the `pluginsFile` config option will result in an error when Cypress loads.\n\n#### `setupNodeEvents()`[​](#setupNodeEvents \"Direct link to setupNodeEvents\")\n\nAll functionality related to setting up events or modifying the config, previously done in the plugins file, has moved into the `setupNodeEvents()` config options. This option is not valid at the top level of the config, and may only be defined inside the `component` or `e2e` [configuration objects](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options).\n\nMore information can be found in the [Plugins API documentation](https://docs.cypress.io/api/plugins/writing-a-plugin#Plugins-API) and the [Configuration API documentation](https://docs.cypress.io/api/plugins/configuration-api#Usage).\n\nBefore `cypress/plugins/index.js`\n\n```\nmodule.exports = (on, config) => {  if (config.testingType === 'component') {    // component testing dev server setup code    // component testing node events setup code  } else {    // e2e testing node events setup code  }}\n```\n\nAfter\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  component: {    devServer(cypressConfig) {      // component testing dev server setup code    },    setupNodeEvents(on, config) {      // component testing node events setup code    },  },  e2e: {    setupNodeEvents(on, config) {      // e2e testing node events setup code    },  },})\n```\n\nAlternately, you can continue to use an external plugins file, but you will need to load that file explicitly, and also update it to move any component testing dev server code into the [`devServer`](#devServer) config option.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')const setupNodeEvents = require('./cypress/plugins/index.js')module.exports = defineConfig({  component: {    devServer(cypressConfig) {      // component testing dev server setup code    },    setupNodeEvents,  },  e2e: {    setupNodeEvents,  },})\n```\n\n#### `slowTestThreshold`[​](#slowTestThreshold \"Direct link to slowTestThreshold\")\n\nThe `slowTestThreshold` configuration option is no longer valid at the top level of the configuration, and is now a [testing-type specific option](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options).\n\nNote that the default values are unchanged (`10000` for `e2e` and `250` for `component`).\n\ncaution\n\nAttempting to set the `slowTestThreshold` config option at the top level of the configuration will result in an error when Cypress loads.\n\n#### `supportFile`[​](#supportFile \"Direct link to supportFile\")\n\nThe `supportFile` configuration option is no longer valid at the top level of the configuration, and is now a [testing-type specific option](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options). More information can be found in the [support file docs](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Support-file).\n\nBefore\n\n```\n{  \"supportFile\": \"cypress/support/index.js\"}\n```\n\nAfter\n\n```\n{  component: {    supportFile: 'cypress/support/component.js'  },  e2e: {    supportFile: 'cypress/support/e2e.js'  }}\n```\n\ncaution\n\nAttempting to set the `supportFile` config option at the top level of the configuration will result in an error when Cypress loads.\n\nAlso, for a given testing type, multiple matching `supportFile` files will result in an error when Cypress loads.\n\n#### `testFiles` → `specPattern`[​](#testFiles--specPattern \"Direct link to testFiles--specPattern\")\n\nThe `testFiles` option is no longer used, and has been replaced with the `specPattern` option, which must be defined inside the [`component`](https://docs.cypress.io/guides/references/configuration#component) and [`e2e`](https://docs.cypress.io/guides/references/configuration#e2e) configuration objects.\n\nDefault values:\n\n*   No longer matches with `.coffee` or `.cjsx`.\n*   `e2e.specPattern` default value is `cypress/e2e/**/*.cy.{js,jsx,ts,tsx}`.\n*   `component.specPattern` default value is `**/*.cy.{js,jsx,ts,tsx}`.\n\nImportant note about matching:\n\n*   E2E tests will be found using the `e2e.specPattern` value.\n*   Component tests will be found using the `component.specPattern` value but any tests found matching the `e2e.specPattern` value will be automatically excluded.\n\ncaution\n\nAttempting to set the `testFiles` config option will result in an error when Cypress loads.\n\nAlso, attempting to set the `specPattern` config option at the top level of the configuration will result in an error when Cypress loads.\n\n### Updated Test File Locations[​](#Updated-Test-File-Locations \"Direct link to Updated Test File Locations\")\n\nPreviously, you could specify the locations of test files and folders using the configuration options: `componentFolder`, or `integrationFolder`, and `testFiles`. These options have been replaced with `specPattern`, which is not valid at the top-level, but within the [`component`](https://docs.cypress.io/guides/references/configuration#component) or [`e2e`](https://docs.cypress.io/guides/references/configuration#e2e) configuration objects. For example:\n\nBefore\n\n```\n{  \"componentFolder\": \"src\",  \"integrationFolder\": \"cypress/integration\",  \"testFiles\": \"**/*.cy.js\"}\n```\n\nAfter\n\n```\n{  component: {    specPattern: 'src/**/*.cy.js'  },  e2e: {    specPattern: 'cypress/integration/**/*.cy.js'  }}\n```\n\ncaution\n\nAttempting to set `componentFolder`, `integrationFolder`, or `testFiles` in the config will result in an error when Cypress loads.\n\ndanger\n\nFor Cypress Cloud users, changing your `specPattern` and files names or extensions of your spec files will result in a loss of data in Cypress Cloud. Because of this, if we detect your project is using Cypress Cloud during automatic migration, we won't suggest changing your spec files. We also don't recommend doing it manually if you are a Cypress Cloud user.\n\n### Generated Files[​](#Generated-Files \"Direct link to Generated Files\")\n\nGenerated screenshots and videos will still be created inside their respective [folders](https://docs.cypress.io/guides/references/configuration#Folders--Files) (`screenshotsFolder`, `videosFolder`). However, the paths of generated files inside those folders will be stripped of any common ancestor paths shared between all spec files found by the `specPattern` option (or via the `--spec` command line option or `spec` module API option, if specified).\n\nHere are a few examples, assuming the value of `videosFolder` is `cypress/videos`, `screenshotsFolder` is `cypress/screenshots` and `cy.screenshot('my-screenshot')` is called once per spec file:\n\n**Example 1**\n\n*   Spec file found\n    *   `cypress/e2e/path/to/file/one.cy.js`\n*   Common ancestor paths (calculated at runtime)\n    *   `cypress/e2e/path/to/file`\n*   Generated screenshot file\n    *   `cypress/screenshots/one.cy.js/my-screenshot.png`\n*   Generated video file\n    *   `cypress/videos/one.cy.js.mp4`\n\n**Example 2**\n\n*   Spec files found\n    *   `cypress/e2e/path/to/file/one.cy.js`\n    *   `cypress/e2e/path/to/two.cy.js`\n*   Common ancestor paths (calculated at runtime)\n    *   `cypress/e2e/path/to`\n*   Generated screenshot files\n    *   `cypress/screenshots/file/one.cy.js/my-screenshot.png`\n    *   `cypress/screenshots/two.cy.js/my-screenshot.png`\n*   Generated video files\n    *   `cypress/videos/file/one.cy.js.mp4`\n    *   `cypress/videos/two.cy.js.mp4`\n\n### Command / Cypress API Changes[​](#Command--Cypress-API-Changes-1 \"Direct link to Command / Cypress API Changes\")\n\n#### `cy.mount()`[​](#cymount \"Direct link to cymount\")\n\nIf you set up your app using the automatic configuration wizard, a basic [`cy.mount()`](https://docs.cypress.io/api/commands/mount) command will be imported for you in your support file from one our supported frameworks.\n\n#### `Cypress.Commands.add()`[​](#CypressCommandsadd \"Direct link to CypressCommandsadd\")\n\n[`Cypress.Commands.add()`](https://docs.cypress.io/api/cypress-api/custom-commands) has been updated to allow the built-in \"placeholder\" custom `mount` and `hover` commands to be overwritten without needing to use `Cypress.Commands.overwrite()`.\n\n### Component Testing Changes[​](#Component-Testing-Changes \"Direct link to Component Testing Changes\")\n\nComponent Testing has moved from experimental to beta status in 10.0.0.\n\nComponent Testing can now be ran from the main app, and launching into component testing via the command `cypress open-ct` is now deprecated. To launch directly into component testing, use the `cypress open --component` command instead.\n\nAll the Component Testing dev servers are now included in the main `cypress` npm package. Configuring them is done via specifying a framework and bundler in the `devServer` config option, and the packages are no longer directly importable. See [Framework Configuration](https://docs.cypress.io/guides/component-testing/component-framework-configuration) for more info.\n\nThe mount libraries for React and Vue have also been included in the main `cypress` package and can be imported from `cypress/react` and `cypress/vue` respectively.\n\nAny previous dev servers or mounting libraries from the `@cypress` namespace should be uninstalled in Cypress 10.\n\n### Clashing Types with Jest[​](#Clashing-Types-with-Jest \"Direct link to Clashing Types with Jest\")\n\nYou may want to consider configuring your app with a separate `tsconfig.json` to solve [clashing types with jest](https://docs.cypress.io/guides/tooling/typescript-support#Clashing-types-with-Jest). You will need to exclude `cypress.config.ts`, `cypress`, `node_modules` in your root `tsconfig.json` file.\n\n```\n{  \"exclude\": [\"cypress.config.ts\", \"cypress\", \"node_modules\"]}\n```\n\n### Code Coverage Plugin[​](#Code-Coverage-Plugin \"Direct link to Code Coverage Plugin\")\n\nThe [Cypress Code Coverage](https://github.com/cypress-io/code-coverage#readme) plugin will need to be updated to version >= 3.10 to work with Cypress 10. Using a previous version will result in an error when tests are ran with code coverage enabled.\n\n## Migrating from `cypress-file-upload` to [`.selectFile()`](https://docs.cypress.io/api/commands/selectfile)[​](#Migrating-from-cypress-file-upload-to-selectFile \"Direct link to Migrating-from-cypress-file-upload-to-selectFile\")\n\nSelecting files with input elements or dropping them over the page is available in Cypress 9.3. Read the [`.selectFile()` API docs](https://docs.cypress.io/api/commands/selectfile) for more information on how this works and how to use it. This guide details how to change your test code to migrate from the [`cypress-file-upload`](https://github.com/abramenal/cypress-file-upload) plugin to `.selectFile()`.\n\n### Quick guide[​](#Quick-guide \"Direct link to Quick guide\")\n\nThe argument signature is different for Cypress' builtin `.selectFile()` command than the `.attachFile` command the `cypress-file-upload` plugin provided. You can follow the steps below for each argument in order to migrate:\n\nWhen the first argument is a file path:\n\n*   Prefix the path with `cypress/fixtures/`.\n\nWhen the first argument is an object:\n\n*   `filePath`: Rename the property to `contents`. Prefix the value with `cypress/fixtures/`.\n*   `fileContent`: Rename the property to `contents`. Use [`Cypress.Buffer.from()`](https://docs.cypress.io/api/utilities/buffer) or other Buffer methods, rather than `Cypress.Blob`.\n*   `encoding`: Remove this property. It is no longer needed due to improved binary file handling in Cypress 9.0.\n*   `mimeType`: No change necessary. In most cases you do not need to give a mimeType explicitly. Cypress will attempt to infer the MIME type [based on the extension](https://github.com/jshttp/mime-types#mimelookuppath) of the fileName if none is provided.\n\nIn the second argument:\n\n*   `subjectType`: Rename this property to `action`. Change the value from `drag-n-drop` to `drag-drop` or from `input` to `select`.\n*   `allowEmpty`: Remove this property. `.selectFile()` does not check the length of a file read from disk, only its existence.\n*   `force`: Works the same with `.selectFile()` as it did in `cypress-file-upload`. No change necessary.\n\n### Examples[​](#Examples \"Direct link to Examples\")\n\nBelow are several examples of migrating various commands from `cypress-file-upload` to the builtin `.selectFile()` command.\n\n#### Read and attach a fixture[​](#Read-and-attach-a-fixture \"Direct link to Read and attach a fixture\")\n\nBefore Attaching a fixture from disk with `cypress-file-upload`\n\n```\ncy.get('[data-cy=\"file-input\"]').attachFile('myfixture.json')\n```\n\nAfter Selecting a fixture from disk with `.selectFile()`. Cypress follows paths from your project root (same as [`cy.readFile()`](https://docs.cypress.io/api/commands/readfile)).\n\n```\ncy.get('[data-cy=\"file-input\"]').selectFile('cypress/fixtures/myfixture.json')// Orcy.fixture('myfixture.json', { encoding: null }).as('myfixture')cy.get('[data-cy=\"file-input\"]').selectFile('@myfixture')\n```\n\n#### Using drag-n-drop[​](#Using-drag-n-drop \"Direct link to Using drag-n-drop\")\n\nBefore Dragging and dropping a file with `cypress-file-upload`\n\n```\ncy.get('[data-cy=\"dropzone\"]').attachFile('myfixture.json', {  subjectType: 'drag-n-drop',})\n```\n\nAfter Selecting a fixture from disk with `.selectFile()`. Cypress follows paths from the root of your test folder (same as [`cy.readFile()`](https://docs.cypress.io/api/commands/readfile)).\n\n```\ncy.get('[data-cy=\"dropzone\"]').selectFile('fixtures/myfixture.json', {  action: 'drag-drop',})\n```\n\n#### Overriding the file name[​](#Overriding-the-file-name \"Direct link to Overriding the file name\")\n\nBefore Dragging and dropping a file with `cypress-file-upload`\n\n```\ncy.get('[data-cy=\"dropzone\"]').attachFile({  filePath: 'myfixture.json',  fileName: 'customFileName.json',})\n```\n\nAfter Selecting a fixture from disk with `.selectFile()`. Cypress follows paths from the root of your test folder (same as [`cy.readFile()`](https://docs.cypress.io/api/commands/readfile)).\n\n```\ncy.get('[data-cy=\"dropzone\"]').selectFile({  contents: 'fixtures/myfixture.json',  fileName: 'customFileName.json',})\n```\n\n#### Working with file contents[​](#Working-with-file-contents \"Direct link to Working with file contents\")\n\nBefore Working with file contents before using using `cypress-file-upload`\n\n```\nconst special = 'file.spss'cy.fixture(special, 'binary')  .then(Cypress.Blob.binaryStringToBlob)  .then((fileContent) => {    // ...process file contents    cy.get('[data-cy=\"file-input\"]').attachFile({      fileContent,      filePath: special,      encoding: 'utf-8',      lastModified: new Date().getTime(),    })  })\n```\n\nAfter Working with file contents before using with `.selectFile()`. The `null` encoding introduced in Cypress 9.0 makes working with binary data simpler, and is the preferred encoding for use with `.selectFile()`.\n\n```\nconst special = 'file.spss'cy.fixture(special, { encoding: null }).then((contents) => {  // ...process file contents  cy.get('[data-cy=\"file-input\"]').selectFile({    contents,    fileName: special,    lastModified: new Date().getTime(),  })})// Orcy.fixture(special, { encoding: null })  .then((contents) => {    // ...process file contents  })  .as('special')cy.get('[data-cy=\"file-input\"]').selectFile('@special')\n```\n\n#### Specifying a custom mimeType[​](#Specifying-a-custom-mimeType \"Direct link to Specifying a custom mimeType\")\n\nBefore Specifying the MIME type with `cypress-file-upload`\n\n```\ncy.get('[data-cy=\"dropzone\"]').attachFile({  filePath: 'myfixture.json',  fileName: 'customFileName.json',})\n```\n\nAfter Specifying a MIME type with `.selectFile()`.\n\n```\ncy.get('[data-cy=\"dropzone\"]').selectFile({  contents: 'fixtures/myfixture.json',  mimeType: 'text/plain',})\n```\n\n## Migrating to Cypress 8.0[​](#Migrating-to-Cypress-80 \"Direct link to Migrating to Cypress 8.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress 8.0. [See the full changelog for 8.0](https://docs.cypress.io/guides/references/changelog#8-0-0).\n\n### `cypress run` runs all browsers `--headless`[​](#cypress-run-runs-all-browsers---headless \"Direct link to cypress-run-runs-all-browsers---headless\")\n\nWhen running `cypress run` previous to 8.0, some browsers would launch headed while others were launched headless by default. In 8.0, we've normalized all browsers to launch as headless by default.\n\nThis could cause a couple of changes to your existing runs:\n\n*   You may see the screenshot or video resolution of runs during `cypress run` change to the default of 1280x720. This is because headless browsers use the set screen size as opposed to the browser's size when opening headed.\n*   Chrome extensions will not load during a `--headless` run. If your run depends on a Chrome extension being loaded during `cypress run`, you should explicitly pass the `--headed` flag.\n\nYou can now remove the use of the `--headless` flag during `cypress run` as this is the default for all browsers.\n\nYou should also update any use of the `isHeaded` or `isHeadless` property on [`Cypress.browser`](https://docs.cypress.io/api/cypress-api/browser) or the [browser launch API](https://docs.cypress.io/api/plugins/browser-launch-api) accordingly.\n\nBefore run headless browser\n\n```\ncypress run --browser=chrome --headless\n```\n\n```\ncypress run --browser=firefox --headless\n```\n\nAfter All browsers headless by default, so you can remove the `--headless` flag during `cypress run`.\n\n```\ncypress run --browser=chrome\n```\n\n```\ncypress run --browser=firefox\n```\n\n### Default screen size during `--headless`[​](#Default-screen-size-during---headless \"Direct link to Default-screen-size-during---headless\")\n\nThe default screen size when running a headless browser has been reverted back to 1280x720 pixels. If you have any code in the [browser launch API](https://docs.cypress.io/api/plugins/browser-launch-api) to set the screen size to 1280x720, this can be removed.\n\nBefore set screen size to 1280x720\n\n```\n// cypress/plugins/index.jsmodule.exports = (on, config) => {  on('before:browser:launch', (browser, launchOptions) => {    if (browser.name === 'chrome' && browser.isHeadless) {      launchOptions.args.push('--window-size=1280,720')    }    if (browser.name === 'electron' && browser.isHeadless) {      launchOptions.preferences.width = 1280      launchOptions.preferences.height = 720    }    if (browser.name === 'firefox' && browser.isHeadless) {      launchOptions.args.push('--width=1280')      launchOptions.args.push('--height=720')    }    return launchOptions  })}\n```\n\nAfter no longer need overrides\n\n```\n// cypress/plugins/index.jsmodule.exports = (on, config) => {  // the default screen size is 1280x720 in all headless browsers}\n```\n\n## Migrating to Cypress 7.0[​](#Migrating-to-Cypress-70 \"Direct link to Migrating to Cypress 7.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress 7.0. [See the full changelog for 7.0](https://docs.cypress.io/guides/references/changelog#7-0-0).\n\n### [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) changes[​](#cyintercept-changes \"Direct link to cyintercept-changes\")\n\n[Cypress 7.0](https://docs.cypress.io/guides/references/changelog#7-0-0) comes with some breaking changes to [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept):\n\n#### Handler ordering is reversed[​](#Handler-ordering-is-reversed \"Direct link to Handler ordering is reversed\")\n\nPrevious to Cypress 7.0, [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) handlers were run in the order that they are defined, stopping after the first handler to call `req.reply()`, or once all handlers are complete.\n\nWith Cypress 7.0, [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) handlers are now run in reverse order of definition, stopping after the first handler to call `req.reply()`, or once all handlers are complete.\n\nThis change was done so that users can override previously declared [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) handlers by calling [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) again. See [#9302](https://github.com/cypress-io/cypress/issues/9302) for more details.\n\nBefore\n\n```\ncy.intercept(url, (req) => {  /* This will be called first! */})cy.intercept(url, (req) => {  /* This will be called second! */})\n```\n\nAfter\n\n```\ncy.intercept(url, (req) => {  /* This will be called second! */})cy.intercept(url, (req) => {  /* This will be called first! */})\n```\n\n[Read more about the `cy.intercept()` interception lifecycle.](https://docs.cypress.io/api/commands/intercept#Interception-lifecycle)\n\n#### URL matching is stricter[​](#URL-matching-is-stricter \"Direct link to URL matching is stricter\")\n\nBefore Cypress 7.0, [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) would match URLs against strings by using `minimatch`, substring match, or by equality.\n\nWith Cypress 7.0, this behavior is being tightened - URLs are matched against strings only by `minimatch` or by equality. The substring match has been removed.\n\nThis more closely matches the URL matching behavior shown by `cy.route()`. However, some intercepts will not match, even though they did before.\n\nFor example, requests with querystrings may no longer match:\n\n```\n// will this intercept match a request for `/items?page=1`?cy.intercept('/items')// ✅ before 7.0.0, this will match, because it is a substring// ❌ after 7.0.0, this will not match, because of the querystring// solution: update the intercept to match the querystring with a wildcard:cy.intercept('/items?*')\n```\n\nAlso, requests for paths in nested directories may be affected:\n\n```\n// will this intercept match a request for `/some/items`?cy.intercept('/items')// ✅ before 7.0.0, this will match, because it is a substring// ❌ after 7.0.0, this will not match, because of the leading directory// solution: update the intercept to include the directory:cy.intercept('/some/items')\n```\n\nAdditionally, the `matchUrlAgainstPath` `RouteMatcher` option that was added in Cypress 6.2.0 has been removed in Cypress 7.0. It can be safely removed from tests.\n\n#### Deprecated `cy.route2()` command removed[​](#Deprecated-cyroute2-command-removed \"Direct link to Deprecated-cyroute2-command-removed\")\n\n`cy.route2()` was the original name for `cy.intercept()` during the experimental phase of the feature. It was deprecated in Cypress 6.0. In Cypress 7.0, it has been removed entirely. Please update existing usages of `cy.route2()` to call `cy.intercept()` instead.\n\nBefore\n\n```\ncy.route2('/widgets/*', { fixture: 'widget.json' }).as('widget')\n```\n\nAfter\n\n```\ncy.intercept('/widgets/*', { fixture: 'widget.json' }).as('widget')\n```\n\n#### `res.delay()` and `res.throttle()` have been renamed[​](#resdelay-and-resthrottle-have-been-renamed \"Direct link to resdelay-and-resthrottle-have-been-renamed\")\n\nThe `res.delay()` and `res.throttle()` functions that exist on responses yielded to response handlers have been renamed.\n\nThe new names are `res.setDelay()` and `res.setThrottle()`, respectively.\n\nBefore\n\n```\ncy.intercept('/slow', (req) => {  req.continue((res) => {    // apply a delay of 1 second and a throttle of 56kbps    res.delay(1000).throttle(56)  })})\n```\n\nAfter\n\n```\ncy.intercept('/slow', (req) => {  req.continue((res) => {    // apply a delay of 1 second and a throttle of 56kbps    res.setDelay(1000).setThrottle(56)  })})\n```\n\n[Read more about available functions on `res`.](https://docs.cypress.io/api/commands/intercept#Intercepted-responses)\n\n#### Falsy values are no longer dropped in `StaticResponse` bodies[​](#Falsy-values-are-no-longer-dropped-in-StaticResponse-bodies \"Direct link to Falsy-values-are-no-longer-dropped-in-StaticResponse-bodies\")\n\nPreviously, falsy values supplied as the `body` of a `StaticResponse` would get dropped (the same as if no body was supplied). Now, the bodies are properly encoded in the response.\n\nBefore\n\n```\ncy.intercept('/does-it-exist', { body: false })// Requests to `/does-it-exist` receive an empty response body\n```\n\nAfter\n\n```\ncy.intercept('/does-it-exist', { body: false })// Requests to `/does-it-exist` receive a response body of `false`\n```\n\n#### Errors thrown by request and response handlers are no longer wrapped[​](#Errors-thrown-by-request-and-response-handlers-are-no-longer-wrapped \"Direct link to Errors thrown by request and response handlers are no longer wrapped\")\n\nPreviously, errors thrown inside of `req` and `res` handlers would be wrapped by a `CypressError`. In 7.0.0, errors thrown inside of these handlers are not wrapped before failing the test.\n\nThis should only affect users who are explicitly asserting on global errors. See [#15189](https://github.com/cypress-io/cypress/issues/15189) for more details.\n\n### Component Testing[​](#Component-Testing \"Direct link to Component Testing\")\n\nIn 7.0, component testing is no longer experimental. Cypress now ships with a dedicated component test runner with a new UI and dedicated commands to launch it.\n\n**Changes are required for all existing projects**. The required changes are limited to configuration and there are no breaking changes to the `mount` API. The migration guide contains the following steps:\n\n1.  [Update your Cypress configuration to remove `experimentalComponentTesting`](#1-Remove-experimentalComponentTesting-config)\n2.  [Install updated dependencies](#2-Install-component-testing-dependencies)\n3.  [Update the plugins file](#3-Update-plugins-file-to-use-dev-serverstart)\n4.  [Use CLI commands to launch](#4-Use-CLI-commands-to-launch)\n5.  [Update the support file (optionally)](#5-Update-the-support-file-optionally)\n\n#### 1\\. Remove `experimentalComponentTesting` config[​](#1-Remove-experimentalComponentTesting-config \"Direct link to 1-Remove-experimentalComponentTesting-config\")\n\nThe `experimentalComponentTesting` configuration is no longer needed to run component tests. Remove this flag in order to run Cypress tests without erroring.\n\nBefore experimentalComponentTesting flag is required for component testing\n\n```\n{  \"experimentalComponentTesting\": true,  \"componentFolder\": \"src\",  \"testFiles\": \"**/*spec.{js,jsx,ts,tsx}\"}\n```\n\nAfter experimentalComponentTesting flag must be removed\n\n```\n{  \"componentFolder\": \"src\",  \"testFiles\": \"**/*spec.{js,jsx,ts,tsx}\"}\n```\n\n#### 2\\. Install component testing dependencies[​](#2-Install-component-testing-dependencies \"Direct link to 2. Install component testing dependencies\")\n\nThe Component Test Runner requires the following dependencies:\n\n*   Framework-specific bindings such as [`@cypress/react`](https://www.npmjs.com/package/@cypress/react).\n*   Development server adapter such as [`@cypress/webpack-dev-server`](https://www.npmjs.com/package/@cypress/webpack-dev-server).\n*   Peer dependencies such as [`webpack-dev-server`](https://www.npmjs.com/package/webpack-dev-server), [`vue`](https://www.npmjs.org/package/vue), or [`react`](https://www.npmjs.org/package/react).\n\n**Install React dependencies**\n\n1.  Upgrade to [`@cypress/react`](https://www.npmjs.com/package/@cypress/react) 5.X.\n2.  Install [`@cypress/webpack-dev-server`](https://www.npmjs.com/package/@cypress/webpack-dev-server).\n3.  (Optional) Install [`cypress-react-selector`](https://www.npmjs.com/package/cypress-react-selector) if any tests use `cy.react()`.\n4.  (Optional) Install code coverage, see [installation steps](https://docs.cypress.io/guides/tooling/code-coverage)).\n\n```\nnpm install cypress @cypress/react @cypress/webpack-dev-server --save-dev\n```\n\n**Install Vue 3 dependencies**\n\n1.  Upgrade to [`@cypress/vue@next`](https://www.npmjs.com/package/@cypress/vue) (3.X and above).\n2.  Install [`@cypress/webpack-dev-server`](https://www.npmjs.com/package/@cypress/webpack-dev-server).\n\n```\nnpm install cypress @cypress/vue@next @cypress/webpack-dev-server --save-dev\n```\n\n**Install Vue 2 dependencies**\n\n1.  Upgrade to [`@cypress/vue@2`](https://www.npmjs.com/package/@cypress/vue) (2.X only).\n2.  Install [`@cypress/webpack-dev-server`](https://www.npmjs.com/package/@cypress/webpack-dev-server).\n\n```\nnpm install cypress @cypress/vue @cypress/webpack-dev-server --save-dev\n```\n\n#### 3\\. Update plugins file to use `dev-server:start`[​](#3-Update-plugins-file-to-use-dev-serverstart \"Direct link to 3-Update-plugins-file-to-use-dev-serverstart\")\n\n**Re-using a project's local development server instead of file preprocessors**\n\nIn 7.0 Cypress component tests require that code is bundled with your local development server, via a new `dev-server:start` event. This event replaces the previous `file:preprocessor` event.\n\nBefore Plugins file registers the file:preprocessor event\n\n```\nconst webpackPreprocessor = require('@cypress/webpack-preprocessor')const webpackConfig = require('../webpack.config.js')module.exports = (on, config) => {  on('file:preprocessor', webpackPreprocessor(options))}\n```\n\nAfter Plugins file registers the dev-server:start event\n\n```\n// The @cypress/webpack-dev-server package replaces @cypress/webpack-preprocessorconst { startDevServer } = require('@cypress/webpack-dev-server')const webpackConfig = require('../webpack.config.js')module.exports = (on, config) => {  // You must use the dev-server:start event instead of the file:preprocessor event  on('dev-server:start', (options) => {    return startDevServer({ options, webpackConfig })  })}\n```\n\n**Configure `plugins.js` for React projects**\n\nProjects using React may not need to update their plugins file. If your project is using a webpack scaffold or boilerplate, it is recommended to use a preset plugin imported from [`@cypress/react/plugins`](https://github.com/cypress-io/cypress/tree/v7.7.0/npm/react/plugins).\n\n**Preset Plugins for React**\n\nIf you are using a preset plugin within [`@cypress/react`](https://www.npmjs.com/package/@cypress/react), you should not need to update your plugins file. To check if you are using a preset, check to see if your plugins file contains an import to a file inside of `@cypress/react/plugins`.\n\nAfter An example plugins file to configure component testing in a React Scripts project\n\n```\n// The @cypress/react project exposes preset plugin configurations// These presets automatically register the events to bundle the project properlyconst injectReactScriptsDevServer = require('@cypress/react/plugins/react-scripts')module.exports = (on, config) => {  // Internally, this method registers `dev-server:start` with the proper webpack configuration  // Previously, it registered the `file:preprocessor` event.  injectReactScriptsDevServer(on, config)  return config}\n```\n\n**Configure `plugins.js` for Vue**\n\nProjects using Vue will likely be using either [`@vue/cli`](https://cli.vuejs.org/) or manually defining webpack configuration. These steps are identical to the manual setup steps, with the exception of how you resolve the webpack configuration. To access the resolved webpack configuration that contains any `vue.config.js` setup or the default [`@vue/cli`](https://cli.vuejs.org/) webpack setup, you must import the configuration and pass it into [`@cypress/webpack-dev-server`](https://www.npmjs.com/package/@cypress/webpack-dev-server).\n\nAfter An example plugins file to configure component testing in a Vue CLI project\n\n```\nconst { startDevServer } = require('@cypress/webpack-dev-server')// The resolved configuration, which contains any `vue.config.js` setupconst webpackConfig = require('@vue/cli-service/webpack.config.js')module.exports = (on, config) => {  on('dev-server:start', (options) => {    return startDevServer({ options, webpackConfig })  })}\n```\n\n**Configuring a project with vanilla webpack**\n\nFor projects with manually defined or ejected webpack configurations, the webpack configuration must be passed in.\n\nAfter An example plugins file to configure component testing in a project with vanilla webpack\n\n```\nconst { startDevServer } = require('@cypress/webpack-dev-server')const webpackConfig = require('../webpack.config.js')module.exports = (on, config) => {  on('dev-server:start', (options) => {    return startDevServer({ options, webpackConfig })  })}\n```\n\n#### 4\\. Use CLI commands to launch[​](#4-Use-CLI-commands-to-launch \"Direct link to 4. Use CLI commands to launch\")\n\nTo run your component tests you _must_ use the dedicated component testing subcommands.\n\n*   `cypress open-ct`\n*   `cypress run-ct`\n\ninfo\n\nComponent tests will no longer be picked up when launching Cypress from `cypress open` or `cypress run`. Please use `cypress open-ct` or `cypress run-ct`.\n\nBefore Commands launches both end-to-end and component tests.\n\nAfter Command launches Cypress Component Test Runner and executes component tests. End-to-end tests are run separately.\n\n```\n# open component testing runnercypress open-ct# run all component testscypress run-ct# e2e testscypress opencypress run\n```\n\n#### 5\\. Update the support file (optionally)[​](#5-Update-the-support-file-optionally \"Direct link to 5. Update the support file (optionally)\")\n\nPreviously, a support file was required to set up the component testing target node. This is no longer necessary.\n\nSpecifically for React users, if the support file contains the following line, please remove it. The import will fail in the future. We have left it in to avoid a breaking change, but the file does nothing.\n\nBefore The support file was required to import a script from [@cypress/react](https://www.npmjs.com/package/@cypress/react)\n\n```\n// support.js// This import should be removed, it will error in a future updateimport '@cypress/react/hooks'\n```\n\n#### Expanded stylesheet support[​](#Expanded-stylesheet-support \"Direct link to Expanded stylesheet support\")\n\nStylesheets are now bundled and imported within spec and support files. Previously, many of `mount`'s mounting options such as `stylesheets`, `cssFiles`, and `styles` were required to import stylesheets into your component tests. This often involved pre-compiling the stylesheets before launching the component tests, which affected performance. Migrating to imports for these styles is optional, but recommended.\n\nNow, stylesheets should be loaded into the `document` the same way they are in your application. It is recommended you update your code like so:\n\nBefore Stylesheets were loaded using the filesystem\n\n```\nconst { mount } = require('@cypress/react')const Button = require('./Button')it('renders a Button', () => {  // Mounting a button and loading the Tailwind CSS library  mount(<Button />, {    stylesheets: [      // Paths are relative to the project root directory and must be pre-compiled      // Because they are static, they do not watch for file updates      '/dist/index.css',      '/node_modules/tailwindcss/dist/tailwind.min.css',    ],  })})\n```\n\nAfter Stylesheets are supported via an import and `mountingOptions.stylesheets` is not recommended\n\n```\n// In the majority of modern style-loaders,// these styles will be injected into document.head when they're imported belowrequire('./index.scss')require('tailwindcss/dist/tailwind.min.css')const { mount } = require('@cypress/react')const Button = require('./Button')it('renders a Button', () => {  // This button will render with the Tailwind CSS styles  // as well as the application's index.scss styles  mount(<Button />)})\n```\n\n#### Desktop GUI no longer displays component tests[​](#Desktop-GUI-no-longer-displays-component-tests \"Direct link to Desktop GUI no longer displays component tests\")\n\nPreviously, the Desktop GUI displayed _both_ end-to-end and component tests. Now, component tests are only displayed when launching via the component testing-specific subcommands. `cypress open-ct` (or `run-ct` in CI)\n\n#### Executing all or some component tests[​](#Executing-all-or-some-component-tests \"Direct link to Executing all or some component tests\")\n\nIn 6.X, the Desktop GUI had support for finding and executing a subset of component tests. In 7.0, this is possible with the `--headed` command and a spec glob, like so:\n\n```\ncypress run-ct --headed --spec **/some-folder/*spec.*\n```\n\n#### Coverage[​](#Coverage \"Direct link to Coverage\")\n\nPreviously, the [`@cypress/react`](https://www.npmjs.com/package/@cypress/vue) 4.X package embedded code coverage in your tests automatically.\n\nIf you still wish to record code coverage in your tests, you must manually install it. Please see our [code coverage guide](https://docs.cypress.io/guides/tooling/code-coverage) for the latest steps.\n\n#### cypress-react-selector[​](#cypress-react-selector \"Direct link to cypress-react-selector\")\n\nIf you use `cy.react()` in your tests, you must manually install [`cypress-react-selector`](https://www.npmjs.com/package/cypress-react-selector) with `npm install cypress-react-selector --save-dev`. You do not need to update your support file.\n\n#### HTML Side effects[​](#HTML-Side-effects \"Direct link to HTML Side effects\")\n\nAs of 7.0, we only clean up components mounted by Cypress via [`@cypress/react`](https://www.npmjs.com/package/@cypress/react) or [`@cypress/vue`](https://www.npmjs.com/package/@cypress/vue).\n\nWe no longer automatically reset the `document.body` between tests. Any HTML side effects of your component tests will carry over.\n\nBefore All HTML content was cleared between spec files\n\n```\nconst { mount } = require('@cypress/react')describe('Component teardown behavior', () => {  it('modifies the document and mounts a component', () => {    // HTML unrelated to the component is mounted    Cypress.$('body').append('<div data-cy=\"some-html\"/>')    // A component is mounted    mount(<Button data-cy=\"my-button\"></Button>)    cy.get('[data-cy=\"some-html\"]').should('exist')    cy.get('[data-cy=\"my-button\"]').should('exist')  })  it('cleans up any HTML', () => {    // The component is automatically unmounted by Cypress    cy.get('[data-cy=\"my-button\"]').should('not.exist')    // The HTML left over from the previous test has been cleaned up    // This was done automatically by Cypress    cy.get('[data-cy=\"some-html\"]').should('not.exist')  })})\n```\n\nAfter Only the components are cleaned up between spec files\n\n```\nconst { mount } = require('@cypress/react')describe('Component teardown behavior', () => {  it('modifies the document and mounts a component', () => {    // HTML unrelated to the component is mounted    Cypress.$('body').append('<div data-cy=\"some-html\"/>')    // A component is mounted    mount(<Button data-cy=\"my-button\"></Button>)    cy.get('[data-cy=\"some-html\"]').should('exist')    cy.get('[data-cy=\"my-button\"]').should('exist')  })  it('only cleans up *components* between tests', () => {    // The component is automatically unmounted by Cypress    cy.get('[data-cy=\"my-button\"]').should('not.exist')    // The HTML left over from the previous test should be manually cleared    cy.get('[data-cy=\"some-html\"]').should('not.exist')  })})\n```\n\n#### Legacy `cypress-react-unit-test` and `cypress-vue-unit-test` packages[​](#Legacy-cypress-react-unit-test-and-cypress-vue-unit-test-packages \"Direct link to Legacy-cypress-react-unit-test-and-cypress-vue-unit-test-packages\")\n\nFor users upgrading from [`cypress-react-unit-tests`](https://www.npmjs.com/package/cypress-react-unit-test) or [`cypress-vue-unit-tests`](https://www.npmjs.com/package/cypress-vue-unit-test), please update all references to use [`@cypress/react`](https://www.npmjs.com/package/@cypress/react) or [`@cypress/vue`](https://www.npmjs.com/package/@cypress/vue). These packages have been deprecated and moved to the Cypress scope on npm.\n\n### Uncaught exception and unhandled rejections[​](#Uncaught-exception-and-unhandled-rejections \"Direct link to Uncaught exception and unhandled rejections\")\n\nIn 7.0, Cypress now fails tests in more situations where there is an uncaught exception and also if there is an unhandled promise rejection in the application under test.\n\nYou can ignore these situations and not fail the Cypress test with the code below.\n\n#### Turn off all uncaught exception handling[​](#Turn-off-all-uncaught-exception-handling \"Direct link to Turn off all uncaught exception handling\")\n\n```\nCypress.on('uncaught:exception', (err, runnable) => {  // returning false here prevents Cypress from  // failing the test  return false})\n```\n\n#### Turn off uncaught exception handling unhandled promise rejections[​](#Turn-off-uncaught-exception-handling-unhandled-promise-rejections \"Direct link to Turn off uncaught exception handling unhandled promise rejections\")\n\n```\nCypress.on('uncaught:exception', (err, runnable, promise) => {  // when the exception originated from an unhandled promise  // rejection, the promise is provided as a third argument  // you can turn off failing the test in this case  if (promise) {    // returning false here prevents Cypress from    // failing the test    return false  }})\n```\n\n### Node.js 12+ support[​](#Nodejs-12-support \"Direct link to Node.js 12+ support\")\n\nCypress comes bundled with its own [Node.js version](https://github.com/cypress-io/cypress/blob/develop/.node-version). However, installing the `cypress` npm package uses the Node.js version installed on your system.\n\nNode.js 10 reached its end of life on Dec 31, 2019 and Node.js 13 reached its end of life on June 1, 2019. [See Node's release schedule](https://github.com/nodejs/Release). These Node.js versions will no longer be supported when installing Cypress. The minimum Node.js version supported to install Cypress is Node.js 12 or Node.js 14+.\n\n## Migrating `cy.route()` to [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept)[​](#Migrating-cyroute-to-cyintercept \"Direct link to Migrating-cyroute-to-cyintercept\")\n\nThis guide details how to change your test code to migrate from `cy.route()` to [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept). `cy.server()` and `cy.route()` are deprecated in Cypress 6.0.0. In a future release, support for `cy.server()` and `cy.route()` will be removed.\n\nPlease also refer to the full documentation for [cy.intercept()](https://docs.cypress.io/api/commands/intercept).\n\n### Match simple route[​](#Match-simple-route \"Direct link to Match simple route\")\n\nIn many use cases, you can replace `cy.route()` with [cy.intercept()](https://docs.cypress.io/api/commands/intercept) and remove the call to `cy.server()` (which is no longer necessary).\n\nBefore\n\n```\n// Set up XHR listeners using cy.route()cy.server()cy.route('/users').as('getUsers')cy.route('POST', '/project').as('createProject')cy.route('PATCH', '/projects/*').as('updateProject')\n```\n\nAfter\n\n```\n// Intercept HTTP requestscy.intercept('/users').as('getUsers')cy.intercept('POST', '/project').as('createProject')cy.intercept('PATCH', '/projects/*').as('updateProject')\n```\n\n### Match against `url` and `path`[​](#Match-against-url-and-path \"Direct link to Match-against-url-and-path\")\n\nThe `url` argument to [cy.intercept()](https://docs.cypress.io/api/commands/intercept) matches against the full url, as opposed to the `url` or `path` in `cy.route()`. If you're using the `url` argument in [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept), you may need to update your code depending on the route you're trying to match.\n\nBefore\n\n```\n// Match XHRs with a path or url of /userscy.server()cy.route({  method: 'POST',  url: '/users',}).as('getUsers')\n```\n\nAfter\n\n```\n// Match HTTP requests with a path of /userscy.intercept({  method: 'POST',  path: '/users',}).as('getUsers')// OR// Match HTTP requests with an exact url of https://example.cypress.io/userscy.intercept({  method: 'POST',  url: 'https://example.cypress.io/users',}).as('getUsers')\n```\n\n### `cy.wait()` object[​](#cywait-object \"Direct link to cywait-object\")\n\nThe object returned by `cy.wait()` is different from intercepted HTTP requests using [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept) than the object returned from an awaited `cy.route()` XHR.\n\nBefore\n\n```\n// Wait for XHR from cy.route()cy.route('POST', '/users').as('createUser')// ...cy.wait('@createUser').then(({ requestBody, responseBody, status }) => {  expect(status).to.eq(200)  expect(requestBody.firstName).to.eq('Jane')  expect(responseBody.firstName).to.eq('Jane')})\n```\n\nAfter\n\n```\n// Wait for intercepted HTTP requestcy.intercept('POST', '/users').as('createUser')// ...cy.wait('@createUser').then(({ request, response }) => {  expect(response.statusCode).to.eq(200)  expect(request.body.name).to.eq('Jane')  expect(response.body.name).to.eq('Jane')})\n```\n\n### Fixtures[​](#Fixtures \"Direct link to Fixtures\")\n\nYou can stub requests and response with fixture data by defining a `fixture` property in the `routeHandler` argument for [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept).\n\nBefore\n\n```\n// Stub response with fixture data using cy.route()cy.route('GET', '/projects', 'fx:projects')\n```\n\nAfter\n\n```\n// Stub response with fixture data using cy.intercept()cy.intercept('GET', '/projects', {  fixture: 'projects',})\n```\n\n### Override intercepts[​](#Override-intercepts \"Direct link to Override intercepts\")\n\nAs of 7.0, newer intercepts are called before older intercepts, allowing users to override intercepts. [See \"Handler ordering is reversed\" for more details](#Handler-ordering-is-reversed).\n\nBefore 7.0, intercepts could not be overridden. See [#9302](https://github.com/cypress-io/cypress/issues/9302) for more details.\n\n## Migrating to Cypress 6.0[​](#Migrating-to-Cypress-60 \"Direct link to Migrating to Cypress 6.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress 6.0. [See the full changelog for 6.0](https://docs.cypress.io/guides/references/changelog#6-0-0).\n\n### Non-existent element assertions[​](#Non-existent-element-assertions \"Direct link to Non-existent element assertions\")\n\ninfo\n\n**Key takeway:** Use `.should('not.exist')` to assert that an element does not exist in the DOM (not `.should('not.be.visible')`, etc).\n\nIn previous versions of Cypress, there was a possibility for tests to falsely pass when asserting a negative state on non-existent elements.\n\nFor example, in the tests below we want to test that the search dropdown is no longer visible when the search input is blurred because we hide the element in CSS styles. Except in this test, we've mistakenly misspelled one of our selectors.\n\n```\ncy.get('input[type=search]').type('Cypress')cy.get('#dropdown').should('be.visible')cy.get('input[type=search]').blur()// below we misspelled \"dropdown\" in the selector 😞// the assertions falsely pass in Cypress < 6.0// and will correctly fail in Cypress 6.0 +cy.get('#dropdon').should('not.be.visible')cy.get('#dropdon').should('not.have.class', 'open')cy.get('#dropdon').should('not.contain', 'Cypress')\n```\n\n![non-existent element before 6.0](https://docs.cypress.io/img/guides/migration-guide/el-incorrectly-passes-existence-check.png)\n\nIn 6.0, these assertions will now correctly fail, telling us that the `#dropdon` element doesn't exist in the DOM.\n\n![non-existent element in 6.0](https://docs.cypress.io/img/guides/migration-guide/el-correctly-fails-existence-check.png)\n\n#### Assertions on non-existent elements[​](#Assertions-on-non-existent-elements \"Direct link to Assertions on non-existent elements\")\n\nThis fix may cause some breaking changes in your tests if you are relying on assertions such as `not.be.visible` or `not.contains` to test that the DOM element did not _exist_ in the DOM. This means you'll need to update your test code to be more specific about your assertions on non-existent elements.\n\nBefore Assert that non existent element was not visible\n\n```\nit('test', () => {  // the modal element is removed from the DOM on click  cy.get('[data-cy=\"modal\"]').find('.close').click()  // assertions below pass in Cypress < 6.0, but properly fail in 6.0+  cy.get('[data-cy=\"modal\"]').should('not.be.visible')  cy.get('[data-cy=\"modal\"]').should('not.contain', 'Upgrade')})\n```\n\nAfter Assert that non existent element does not exist\n\n```\nit('test', () => {  // the modal element is removed from the DOM on click  cy.get('data-cy=\"modal\"').find('.close').click()  // we should instead assert that the element doesn't exist  cy.get('data-cy=\"modal\"').should('not.exist')})\n```\n\n### Opacity visibility[​](#Opacity-visibility \"Direct link to Opacity visibility\")\n\nDOM elements with `opacity: 0` style are no longer considered to be visible. This includes elements with an ancestor that has `opacity: 0` since a child element can never have a computed opacity greater than that of an ancestor.\n\nElements where the CSS property (or ancestors) is `opacity: 0` are still considered [actionable](https://docs.cypress.io/guides/core-concepts/interacting-with-elements) however and [any action commands](https://docs.cypress.io/guides/core-concepts/interacting-with-elements#Actionability) used to interact with the element will perform the action. This matches browser's implementation on how they regard elements with `opacity: 0`.\n\n#### Assert visibility of `opacity: 0` element[​](#Assert-visibility-of-opacity-0-element \"Direct link to Assert-visibility-of-opacity-0-element\")\n\nBefore Failed assertion that `opacity: 0` element is not visible.\n\n```\nit('test', () => {  // '.hidden' has 'opacity: 0' style.  // In < 5.0 this assertion would fail  cy.get('.hidden').should('not.be.visible')})\n```\n\nAfter Passed assertion that `opacity: 0` element is not visible.\n\n```\nit('test', () => {  // '.hidden' has 'opacity: 0' style.  // In 6.0 this assertion will pass  cy.get('.hidden').should('not.be.visible')})\n```\n\n#### Perform actions on `opacity: 0` element[​](#Perform-actions-on-opacity-0-element \"Direct link to Perform-actions-on-opacity-0-element\")\n\nIn all versions of Cypress, you can interact with elements that have `opacity: 0` style.\n\n```\nit('test', () => {  // '.hidden' has 'opacity: 0' style.  cy.get('.hidden').click() // ✅ clicks on element  cy.get('.hidden').type('hi') // ✅ types into element  cy.get('.hidden').check() // ✅ checks element  cy.get('.hidden').select('yes') // ✅ selects element})\n```\n\n### `cy.wait(alias)` type[​](#cywaitalias-type \"Direct link to cywaitalias-type\")\n\n`cy.route()` is deprecated in 6.0.0. We encourage the use of [cy.intercept()](https://docs.cypress.io/api/commands/intercept) instead. Due to this deprecation, the type yielded by [cy.wait(alias)](https://docs.cypress.io/api/commands/wait) has changed.\n\nBefore Before 6.0.0, [cy.wait(alias)](https://docs.cypress.io/api/commands/wait) would yield an object of type `WaitXHR`.\n\nAfter In 6.0.0 and onwards, [cy.wait(alias)](https://docs.cypress.io/api/commands/wait) will yield an object of type `Interception`. This matches the new interception object type used for [cy.intercept()](https://docs.cypress.io/api/commands/intercept).\n\n#### Restore old behavior[​](#Restore-old-behavior \"Direct link to Restore old behavior\")\n\nIf you need to restore the type behavior prior to 6.0.0 for [cy.wait(alias)](https://docs.cypress.io/api/commands/wait), you can declare a global override for [cy.wait()](https://docs.cypress.io/api/commands/wait) like so:\n\n```\ndeclare global {  namespace Cypress {    interface Chainable<Subject = any> {      wait(alias: string): Chainable<Cypress.WaitXHR>    }  }}\n```\n\n### `—disable-dev-shm-usage`[​](#disable-dev-shm-usage \"Direct link to disable-dev-shm-usage\")\n\nWe now pass `—disable-dev-shm-usage` to the Chrome browser flags by default. If you're passing this flag in your `plugins` file, you can now remove this code.\n\nBefore Passing flag in plugins file.\n\n```\n// cypress/plugins/index.jsmodule.exports = (on, config) => {  on('before:browser:launch', (browser = {}, launchOptions) => {    if (browser.family === 'chromium' && browser.name !== 'electron') {      launchOptions.args.push('--disable-dev-shm-usage')    }    return launchOptions  })}\n```\n\nAfter Remove flag from plugins file.\n\n```\n// cypress/plugins/index.jsmodule.exports = (on, config) => {}\n```\n\n#### Restore old behavior[​](#Restore-old-behavior-1 \"Direct link to Restore old behavior\")\n\nIf you need to remove the flag in 6.0.0+, you can follow the workaround documented here: [#9242](https://github.com/cypress-io/cypress/issues/9242).\n\n## Migrating to Cypress 5.0[​](#Migrating-to-Cypress-50 \"Direct link to Migrating to Cypress 5.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress 5.0. [See the full changelog for 5.0](https://docs.cypress.io/guides/references/changelog#5-0-0).\n\n### Tests retries[​](#Tests-retries \"Direct link to Tests retries\")\n\nTest retries are available in Cypress 5.0. This means that tests can be re-run a number of times before potentially being marked as a failed test. Read the [Test Retries](https://docs.cypress.io/guides/guides/test-retries) doc for more information on how this works and how to turn on test retries.\n\nWhen test retries are turned on, there will now be a screenshot taken for every failed attempt, so there could potentially be more than 1 screenshot per test failure. Read the [Test Retries](https://docs.cypress.io/guides/guides/test-retries) doc for more information on how this works.\n\nThe [`cypress-plugin-retries`](https://github.com/Bkucera/cypress-plugin-retries) plugin has been deprecated in favor of test retries built into Cypress. There's guidance below on how to migrate from the [`cypress-plugin-retries`](https://github.com/Bkucera/cypress-plugin-retries) plugin to Cypress's built-in test retries.\n\n#### Configure test retries via the CLI[​](#Configure-test-retries-via-the-CLI \"Direct link to Configure test retries via the CLI\")\n\nBefore Setting retries with `cypress-plugin-retries` via env vars\n\n```\nCYPRESS_RETRIES=2 cypress run\n```\n\nAfter Setting test retries in Cypress 5.0 via env vars\n\n```\nCYPRESS_RETRIES=2 cypress run\n```\n\n#### Configure test retries in the configuration file[​](#Configure-test-retries-in-the-configuration-file \"Direct link to Configure test retries in the configuration file\")\n\nBefore Setting retries with `cypress-plugin-retries` via configuration\n\n```\n{  \"env\": {    \"RETRIES\": 2  }}\n```\n\nAfter Setting test retries in Cypress 5.0 via configuration\n\n*   `runMode` allows you to define the number of test retries when running `cypress run`\n*   `openMode` allows you to define the number of test retries when running `cypress open`\n\n```\n{  \"retries\": {    \"runMode\": 1,    \"openMode\": 3  }}\n```\n\n#### Configure test retries per test[​](#Configure-test-retries-per-test \"Direct link to Configure test retries per test\")\n\nBefore Setting retries with `cypress-plugin-retries` via the test\n\n```\nit('test', () => {  Cypress.currentTest.retries(2)})\n```\n\nAfter Setting test retries in Cypress 5.0 via test options\n\n```\nit(  'allows user to login',  {    retries: 2,  },  () => {    // ...  })\n```\n\n*   `runMode` allows you to define the number of test retries when running `cypress run`\n*   `openMode` allows you to define the number of test retries when running `cypress open`\n\n```\nit(  'allows user to login',  {    retries: {      runMode: 2,      openMode: 3,    },  },  () => {    // ...  })\n```\n\n### Module API results[​](#Module-API-results \"Direct link to Module API results\")\n\nTo more accurately reflect result data for runs with [test retries](https://docs.cypress.io/guides/guides/test-retries), the structure of each run's `runs` array resolved from the `Promise` returned from `cypress.run()` of the Module API has changed.\n\nMainly there is a new `attempts` Array on each `test` which will reflect the result of each test retry.\n\nBefore `results.runs` Module API results\n\n```\n{  // ...  \"runs\": [{    // ...    \"hooks\": [{      \"hookId\": \"h1\",      \"hookName\": \"before each\",      \"title\": [ \"before each hook\" ],      \"body\": \"function () {\\n  expect(true).to.be[\"true\"];\\n}\"    }],    // ...    \"screenshots\": [{      \"screenshotId\": \"8ddmk\",      \"name\": null,      \"testId\": \"r2\",      \"takenAt\": \"2020-08-05T08:52:20.432Z\",      \"path\": \"User/janelane/my-app/cypress/screenshots/spec.js/test (failed).png\",      \"height\": 720,      \"width\": 1280    }],    \"stats\": {      // ...      \"wallClockStartedAt\": \"2020-08-05T08:38:37.589Z\",      \"wallClockEndedAt\": \"2018-07-11T17:53:35.675Z\",      \"wallClockDuration\": 1171    },    \"tests\": [{      \"testId\": \"r2\",      \"title\": [ \"test\" ],      \"state\": \"failed\",      \"body\": \"function () {\\n  expect(true).to.be[\"false\"];\\n}\",      \"stack\": \"AssertionError: expected true to be false\\n' +        '    at Context.eval (...cypress/integration/spec.js:5:21\",      \"error\": \"expected true to be false\",      \"timings\": {        \"lifecycle\": 16,        \"test\": {...}      },      \"failedFromHookId\": null,      \"wallClockStartedAt\": \"2020-08-05T08:38:37.589Z\",      \"wallClockDuration\": 1171,      \"videoTimestamp\": 4486    }],  }],  // ...}\n```\n\nAfter `results.runs` Module API results\n\n```\n{  // ...  \"runs\": [{    // ...    \"hooks\": [{      \"hookName\": \"before each\",      \"title\": [ \"before each hook\" ],      \"body\": \"function () {\\n  expect(true).to.be[\"true\"];\\n}\"    }],    // ...    \"stats\": {      // ...      \"startedAt\": \"2020-08-05T08:38:37.589Z\",      \"endedAt\": \"2018-07-11T17:53:35.675Z\",      \"duration\": 1171    },    \"tests\": [{      \"title\": [ \"test\" ],      \"state\": \"failed\",      \"body\": \"function () {\\n  expect(true).to.be[\"false\"];\\n}\",      \"displayError\": \"AssertionError: expected true to be false\\n' +      '    at Context.eval (...cypress/integration/spec.js:5:21\",      \"attempts\": [{        \"state\": \"failed\",        \"error\": {          \"message\": \"expected true to be false\",          \"name\": \"AssertionError\",          \"stack\": \"AssertionError: expected true to be false\\n' +      '    at Context.eval (...cypress/integration/spec.js:5:21\"        },        \"screenshots\": [{          \"name\": null,          \"takenAt\": \"2020-08-05T08:52:20.432Z\",          \"path\": \"User/janelane/my-app/cypress/screenshots/spec.js/test (failed).png\",          \"height\": 720,          \"width\": 1280        }],        \"startedAt\": \"2020-08-05T08:38:37.589Z\",        \"duration\": 1171,        \"videoTimestamp\": 4486      }]    }],  }],  // ...}\n```\n\n### Cookies `whitelist` option renamed[​](#Cookies-whitelist-option-renamed \"Direct link to Cookies-whitelist-option-renamed\")\n\nThe [Cypress.Cookies.defaults()](https://docs.cypress.io/api/cypress-api/cookies) `whitelist` option has been renamed to `preserve` to more closely reflect its behavior.\n\nBefore `whitelist` option\n\n```\nCypress.Cookies.defaults({  whitelist: 'session_id',})\n```\n\nAfter `preserve` option\n\n```\nCypress.Cookies.defaults({  preserve: 'session_id',})\n```\n\n### `blacklistHosts` configuration renamed[​](#blacklistHosts-configuration-renamed \"Direct link to blacklistHosts-configuration-renamed\")\n\nThe `blacklistHosts` configuration has been renamed to [blockHosts](https://docs.cypress.io/guides/references/configuration#Notes) to more closely reflect its behavior.\n\nThis should be updated in all places where Cypress configuration can be set including via the Cypress configuration file, command line arguments, the `pluginsFile`, `Cypress.config()` or environment variables.\n\nBefore `blacklistHosts` configuration\n\n```\n{  \"blacklistHosts\": \"www.google-analytics.com\"}\n```\n\nAfter `blockHosts` configuration\n\n```\n{  \"blockHosts\": \"www.google-analytics.com\"}\n```\n\n### Return type of `Cypress.Blob` changed[​](#Return-type-of-CypressBlob-changed \"Direct link to Return-type-of-CypressBlob-changed\")\n\nWe updated the [Blob](https://github.com/nolanlawson/blob-util) library used behind [Cypress.Blob](https://docs.cypress.io/api/utilities/blob) from `1.3.3` to `2.0.2`.\n\nThe return type of the [Cypress.Blob](https://docs.cypress.io/api/utilities/blob) methods `arrayBufferToBlob`, `base64StringToBlob`, `binaryStringToBlob`, and `dataURLToBlob` have changed from `Promise<Blob>` to `Blob`.\n\nBefore `Cypress.Blob` methods returned a Promise\n\n```\nCypress.Blob.base64StringToBlob(this.logo, 'image/png').then((blob) => {  // work with the returned blob})\n```\n\nAfter `Cypress.Blob` methods return a Blob\n\n```\nconst blob = Cypress.Blob.base64StringToBlob(this.logo, 'image/png')// work with the returned blob\n```\n\n### `cy.server()` `whitelist` option renamed[​](#cyserver-whitelist-option-renamed \"Direct link to cyserver-whitelist-option-renamed\")\n\nThe `cy.server()` `whitelist` option has been renamed to `ignore` to more closely reflect its behavior.\n\nBefore `whitelist` option\n\n```\ncy.server({  whitelist: (xhr) => {    return xhr.method === 'GET' && /\\.(jsx?|html|css)(\\?.*)?$/.test(xhr.url)  },})\n```\n\nAfter `ignore` option\n\n```\ncy.server({  ignore: (xhr) => {    return xhr.method === 'GET' && /\\.(jsx?|html|css)(\\?.*)?$/.test(xhr.url)  },})\n```\n\n### Cookies `sameSite` property[​](#Cookies-sameSite-property \"Direct link to Cookies-sameSite-property\")\n\nValues yielded by [cy.setCookie()](https://docs.cypress.io/api/commands/setcookie), [cy.getCookie()](https://docs.cypress.io/api/commands/getcookie), and [cy.getCookies()](https://docs.cypress.io/api/commands/getcookies) will now contain the `sameSite` property if specified.\n\nIf you were using the `experimentalGetCookiesSameSite` configuration to get the `sameSite` property previously, this should be removed.\n\nBefore Cookies yielded before had no `sameSite` property.\n\n```\ncy.getCookie('token').then((cookie) => {  // cy.getCookie() yields a cookie object  // {  //   domain: \"localhost\",  //   expiry: 1593551644,  //   httpOnly: false,  //   name: \"token\",  //   path: \"/commands\",  //   secure: false,  //   value: \"123ABC\"  // }})\n```\n\nAfter Cookies yielded now have `sameSite` property if specified.\n\n```\ncy.getCookie('token').then((cookie) => {  // cy.getCookie() yields a cookie object  // {  //   domain: \"localhost\",  //   expiry: 1593551644,  //   httpOnly: false,  //   name: \"token\",  //   path: \"/commands\",  //   sameSite: \"strict\",  //   secure: false,  //   value: \"123ABC\"  // }})\n```\n\n### dirname / filename[​](#dirname--filename \"Direct link to dirname / filename\")\n\nThe globals `__dirname` and `__filename` no longer include a leading slash.\n\nBefore `__dirname` / `__filename`\n\n```\n// cypress/integration/app_spec.jsit('include leading slash < 5.0', () => {  expect(__dirname).to.equal('/cypress/integration')  expect(__filename).to.equal('/cypress/integration/app_spec.js')})\n```\n\nAfter `__dirname` / `__filename`\n\n```\n// cypress/integration/app_spec.jsit('do not include leading slash >= 5.0', () => {  expect(__dirname).to.equal('cypress/integration')  expect(__filename).to.equal('cypress/integration/app_spec.js')})\n```\n\n### Linux dependencies[​](#Linux-dependencies \"Direct link to Linux dependencies\")\n\nRunning Cypress on Linux now requires the `libgbm` dependency (on Debian-based systems, this is available as `libgbm-dev`). To install all required dependencies on Ubuntu/Debian, you can run the script below:\n\n```\napt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libnss3 libxss1 libasound2 libxtst6 xauth xvfb\n```\n\n### TypeScript esModuleInterop[​](#TypeScript-esModuleInterop \"Direct link to TypeScript esModuleInterop\")\n\nCypress no longer forces the `esModuleInterop` compiler option for TypeScript to be `true` for spec, support, and plugins files. We recommend setting it in your project's `tsconfig.json` instead if you need to.\n\n```\n// tsconfig.json{  \"compilerOptions\": {    \"esModuleInterop\": true    /* ... other compiler options ... */  }}\n```\n\n### TypeScript 3.4+ support[​](#TypeScript-34-support \"Direct link to TypeScript 3.4+ support\")\n\nCypress 5.0 raises minimum required TypeScript version from 2.9+ to 3.4+. You'll need to have TypeScript 3.4+ installed within your project to have TypeScript support within Cypress.\n\n### Node.js 10+ support[​](#Nodejs-10-support \"Direct link to Node.js 10+ support\")\n\nCypress comes bundled with its own [Node.js version](https://github.com/cypress-io/cypress/blob/develop/.node-version). However, installing the `cypress` npm package uses the Node.js version installed on your system.\n\nNode.js 8 reached its end of life on Dec 31, 2019 and Node.js 11 reached its end of life on June 1, 2019. [See Node's release schedule](https://github.com/nodejs/Release). These Node.js versions will no longer be supported when installing Cypress. The minimum Node.js version supported to install Cypress is Node.js 10 or Node.js 12+.\n\n## Migrating to Cypress 4.0[​](#Migrating-to-Cypress-40 \"Direct link to Migrating to Cypress 4.0\")\n\nThis guide details the changes and how to change your code to migrate to Cypress 4.0. [See the full changelog for 4.0](https://docs.cypress.io/guides/references/changelog#4-0-0).\n\n### Mocha upgrade[​](#Mocha-upgrade \"Direct link to Mocha upgrade\")\n\nMocha was upgraded from `2.5.3` to `7.0.1`, which includes a number of breaking changes and new features outlined in their [changelog](https://github.com/mochajs/mocha/blob/master/CHANGELOG.md). Some changes you might notice are described below.\n\n#### Breaking Change: invoke `done` callback and return a promise[​](#Breaking-Change-invoke-done-callback-and-return-a-promise \"Direct link to Breaking-Change-invoke-done-callback-and-return-a-promise\")\n\nStarting with [Mocha 3.0.0](https://github.com/mochajs/mocha/blob/master/CHANGELOG.md#300--2016-07-31), invoking a `done` callback _and_ returning a promise in a test results in an error.\n\nThis error originates from Mocha and is discussed at length [here](https://github.com/mochajs/mocha/pull/1320) and [here](https://github.com/mochajs/mocha/issues/2407).\n\nThe reason is that using two different ways to signal that a test is finished is usually a mistake and there is always a way to only use one. There is a [proposal to handle this situation without erroring](https://github.com/mochajs/mocha/issues/2509) that may be released in a future version of Mocha.\n\nIn the meantime, you can fix the error by choosing a single way to signal the end of your test's execution.\n\n##### Example #1[​](#Example-1 \"Direct link to Example #1\")\n\nBefore This test has a done callback and a promise\n\n```\nit('uses invokes done and returns promise', (done) => {  return codeUnderTest.doSomethingThatReturnsPromise().then((result) => {    // assertions here    done()  })})\n```\n\nAfter You can remove the `done` callback and return the promise instead:\n\n```\nit('uses invokes done and returns promise', () => {  return codeUnderTest.doSomethingThatReturnsPromise().then((result) => {    // assertions here  })})\n```\n\n##### Example #2[​](#Example-2 \"Direct link to Example #2\")\n\nBefore Sometimes it might make more sense to use the `done` callback and not return a promise:\n\n```\nit('uses invokes done and returns promise', (done) => {  eventEmitter.on('change', () => {    // assertions    done()  })  return eventEmitter.doSomethingThatEmitsChange()})\n```\n\nAfter In this case, you don't need to return the promise:\n\n```\nit('uses invokes done and returns promise', (done) => {  eventEmitter.on('change', () => {    // assertions    done()  })  eventEmitter.doSomethingThatEmitsChange()})\n```\n\n##### Example #3[​](#Example-3 \"Direct link to Example #3\")\n\nTest functions using `async/await` automatically return a promise, so they need to be refactored to not use a `done` callback.\n\nBefore This will cause an overspecified error.\n\n```\nit('uses async/await', async (done) => {  const eventEmitter = await getEventEmitter()  eventEmitter.on('change', () => done())  eventEmitter.doSomethingThatEmitsChange()})\n```\n\nAfter Update to the test code below.\n\n```\nit('uses async/await', async () => {  const eventEmitter = await getEventEmitter()  return new Promise((resolve) => {    eventEmitter.on('change', () => resolve())    eventEmitter.doSomethingThatEmitsChange()  })})\n```\n\n#### Tests require a title[​](#Tests-require-a-title \"Direct link to Tests-require-a-title\")\n\nTests now require a title and will error when not provided one.\n\n```\n// Would show as pending in Cypress 3// Will throw type error in Cypress 4:it() // Test argument \"title\" should be a string. Received type \"undefined\"\n```\n\n### Chai upgrade[​](#Chai-upgrade \"Direct link to Chai upgrade\")\n\nChai was upgraded from `3.5.0` to `4.2.0`, which includes a number of breaking changes and new features outlined in [Chai's migration guide](https://github.com/chaijs/chai/issues/781). Some changes you might notice are described below.\n\n#### Breaking Change: assertions expecting numbers[​](#Breaking-Change-assertions-expecting-numbers \"Direct link to Breaking-Change-assertions-expecting-numbers\")\n\nSome assertions will now throw an error if the assertion's target or arguments are not numbers, including `within`, `above`, `least`, `below`, `most`, `increase` and `decrease`.\n\n```\n// These will now throw errors:expect(null).to.be.within(0, 1)expect(null).to.be.above(10)// This will not throw errors:expect('string').to.have.a.length.of.at.least(3)\n```\n\n#### Breaking Change: `empty` assertions[​](#Breaking-Change-empty-assertions \"Direct link to Breaking-Change-empty-assertions\")\n\nThe `.empty` assertion will now throw when it is passed non-string primitives and functions.\n\n```\n// These will now throw TypeErrorsexpect(Symbol()).to.be.emptyexpect(() => {}).to.be.empty\n```\n\n#### Breaking Change: non-existent properties[​](#Breaking-Change-non-existent-properties \"Direct link to Breaking-Change-non-existent-properties\")\n\nAn error will throw when a non-existent property is read. If there are typos in property assertions, they will now appear as failures.\n\n```\n// Would pass in Cypress 3 but will fail correctly in 4expect(true).to.be.ture\n```\n\n#### Breaking Change: `include` checks strict equality[​](#Breaking-Change-include-checks-strict-equality \"Direct link to Breaking-Change-include-checks-strict-equality\")\n\n`include` now always use strict equality unless the `deep` property is set.\n\nBefore `include` would always use deep equality\n\n```\n// Would pass in Cypress 3 but will fail correctly in 4cy.wrap([  {    first: 'Jane',    last: 'Lane',  },]).should('include', {  first: 'Jane',  last: 'Lane',})\n```\n\nAfter Need to specificy `deep.include` for deep equality\n\n```\n// Specifically check for deep.include to pass in Cypress 4cy.wrap([  {    first: 'Jane',    last: 'Lane',  },]).should('deep.include', {  first: 'Jane',  last: 'Lane',})\n```\n\n### Sinon.JS upgrade[​](#SinonJS-upgrade \"Direct link to Sinon.JS upgrade\")\n\nSinon.JS was upgraded from `3.2.0` to `8.1.1`, which includes a number of breaking changes and new features outlined in [Sinon.JS's migration guide](https://sinonjs.org/releases/latest/#migration-guides). Some changes you might notice are described below.\n\n#### Breaking Change: stub non-existent properties[​](#Breaking-Change-stub-non-existent-properties \"Direct link to Breaking-Change-stub-non-existent-properties\")\n\nAn error will throw when trying to stub a non-existent property.\n\n```\n// Would pass in Cypress 3 but will fail in 4cy.stub(obj, 'nonExistingProperty')\n```\n\n#### Breaking Change: `reset()` replaced by `resetHistory()`[​](#Breaking-Change-reset-replaced-by-resetHistory \"Direct link to Breaking-Change-reset-replaced-by-resetHistory\")\n\nFor spies and stubs, the `reset()` method was replaced by `resetHistory()`.\n\nBefore Spies and stubs using `reset()`.\n\n```\nconst spy = cy.spy()const stub = cy.stub()spy.reset()stub.reset()\n```\n\nAfter Update spies and stubs should now use `resetHistory()`.\n\n```\nconst spy = cy.spy()const stub = cy.stub()spy.resetHistory()stub.resetHistory()\n```\n\n### Plugin Event `before:browser:launch`[​](#Plugin-Event-beforebrowserlaunch \"Direct link to Plugin-Event-beforebrowserlaunch\")\n\nSince we now support more advanced browser launch options, during `before:browser:launch` we no longer yield the second argument as an array of browser arguments and instead yield a `launchOptions` object with an `args` property.\n\nYou can see more examples of the new `launchOptions` in use in the [Browser Launch API doc](https://docs.cypress.io/api/plugins/browser-launch-api).\n\nBefore The second argument is no longer an array.\n\n```\non('before:browser:launch', (browser, args) => {  // will print a deprecation warning telling you  // to change your code to the new signature  args.push('--another-arg')  return args})\n```\n\nAfter Access the `args` property off `launchOptions`\n\n```\non('before:browser:launch', (browser, launchOptions) => {  launchOptions.args.push('--another-arg')  return launchOptions})\n```\n\n### Electron options in `before:browser:launch`[​](#Electron-options-in-beforebrowserlaunch \"Direct link to Electron-options-in-beforebrowserlaunch\")\n\nPreviously, you could pass options to the launched Electron [BrowserWindow](https://www.electronjs.org/docs/api/browser-window#new-browserwindowoptions) in `before:browser:launch` by modifying the `launchOptions` object.\n\nNow, you must pass those options as `launchOptions.preferences`:\n\nBefore Passing BrowserWindow options on the `launchOptions` object is no longer supported.\n\n```\non('before:browser:launch', (browser, args) => {  args.darkTheme = true  return args})\n```\n\nAfter Pass BrowserWindow options on the `options.preferences` object instead.\n\n```\non('before:browser:launch', (browser, launchOptions) => {  launchOptions.preferences.darkTheme = true  return launchOptions})\n```\n\n### Launching Chrome Canary with `--browser`[​](#Launching-Chrome-Canary-with---browser \"Direct link to Launching-Chrome-Canary-with---browser\")\n\nBefore 4.0, `cypress run --browser canary` would run tests in Chrome Canary.\n\nNow, you must pass `--browser chrome:canary` to select Chrome Canary.\n\nSee the [docs for `cypress run --browser`](https://docs.cypress.io/guides/guides/command-line#cypress-run-browser-lt-browser-name-or-path-gt) for more information.\n\nBefore Passing `canary` will no longer find a browser\n\n```\ncypress run --browser canary\n```\n\nAfter Pass `chrome:canary` to launch Chrome Canary\n\n```\ncypress run --browser chrome:canary\n```\n\n### Chromium-based browser `family`[​](#Chromium-based-browser-family \"Direct link to Chromium-based-browser-family\")\n\nWe updated the [Cypress browser objects](https://docs.cypress.io/api/plugins/browser-launch-api) of all Chromium-based browsers, including Electron, to have `chromium` set as their `family` field.\n\n```\nmodule.exports = (on, config) => {  on('before:browser:launch', (browser = {}, launchOptions) => {    if (browser.family === 'electron') {      // would match Electron in 3.x      // will match no browsers in 4.0.0      return launchOptions    }    if (browser.family === 'chromium') {      // would match no browsers in 3.x      // will match any Chromium-based browser in 4.0.0      // ie Chrome, Canary, Chromium, Electron, Edge (Chromium-based)      return launchOptions    }  })}\n```\n\n#### Example #1 (Finding Electron)[​](#Example-1-Finding-Electron \"Direct link to Example #1 (Finding Electron)\")\n\nBefore This will no longer find the Electron browser.\n\n```\nmodule.exports = (on, config) => {  on('before:browser:launch', (browser = {}, args) => {    if (browser.family === 'electron') {      // run code for Electron browser in 3.x      return args    }  })}\n```\n\nAfter Use `browser.name` to check for Electron\n\n```\nmodule.exports = (on, config) => {  on('before:browser:launch', (browser = {}, launchOptions) => {    if (browser.name === 'electron') {      // run code for Electron browser in 4.0.0      return launchOptions    }  })}\n```\n\n#### Example #2 (Finding Chromium-based browsers)[​](#Example-2-Finding-Chromium-based-browsers \"Direct link to Example #2 (Finding Chromium-based browsers)\")\n\nBefore This will no longer find any browsers.\n\n```\nmodule.exports = (on, config) => {  on('before:browser:launch', (browser = {}, args) => {    if (browser.family === 'chrome') {      // in 4.x, `family` was changed to 'chromium' for all Chromium-based browsers      return args    }  })}\n```\n\nAfter Use `browser.name` and `browser.family` to select non-Electron Chromium-based browsers\n\n```\nmodule.exports = (on, config) => {  on('before:browser:launch', (browser = {}, launchOptions) => {    if (browser.family === 'chromium' && browser.name !== 'electron') {      // pass launchOptions to Chromium-based browsers in 4.0      return launchOptions    }  })}\n```\n\n### `cy.writeFile()` yields `null`[​](#cywriteFile-yields-null \"Direct link to cywriteFile-yields-null\")\n\n`cy.writeFile()` now yields `null` instead of the `contents` written to the file. This change was made to more closely align with the behavior of Node.js [`fs.writeFile`](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback).\n\nBefore This assertion will no longer pass\n\n```\ncy.writeFile('path/to/message.txt', 'Hello World').then((text) => {  // Would pass in Cypress 3 but will fail in 4  expect(text).to.equal('Hello World') // false})\n```\n\nAfter Instead read the contents of the file\n\n```\ncy.writeFile('path/to/message.txt', 'Hello World')cy.readFile('path/to/message.txt').then((text) => {  expect(text).to.equal('Hello World') // true})\n```\n\n### cy.contains() ignores invisible whitespaces[​](#cycontains-ignores-invisible-whitespaces \"Direct link to cy.contains() ignores invisible whitespaces\")\n\nBrowsers ignore leading, trailing, duplicate whitespaces. And Cypress now does that, too.\n\n```\ncy.get('p').contains('hello world') // Fail in 3.x. Pass in 4.0.0.cy.get('p').contains('hello\\nworld') // Pass in 3.x. Fail in 4.0.0.\n```\n\n### Node.js 8+ support[​](#Nodejs-8-support \"Direct link to Node.js 8+ support\")\n\nCypress comes bundled with its own [Node.js version](https://github.com/cypress-io/cypress/blob/develop/.node-version). However, installing the `cypress` npm package uses the Node.js version installed on your system.\n\nNode.js 4 reached its end of life on April 30, 2018 and Node.js 6 reached its end of life on April 30, 2019. [See Node's release schedule](https://github.com/nodejs/Release). These Node.js versions will no longer be supported when installing Cypress. The minimum Node.js version supported to install Cypress is Node.js 8.\n\n### CJSX is no longer supported[​](#CJSX-is-no-longer-supported \"Direct link to CJSX is no longer supported\")\n\nCypress no longer supports CJSX (CoffeeScript + JSX), because the library used to transpile it is no longer maintained.\n\nIf you need CJSX support, you can use a pre-2.x version of the Browserify preprocessor.\n\n```\n// cypress/plugins/index.jsconst browserify = require('@cypress/browserify-preprocessor')module.exports = (on) => {  on('file:preprocessor', browserify())}\n```",
    "title": "Migration Guide | Cypress Documentation",
    "description": "Migrating to Cypress 13.0",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/guides/screenshots-and-videos",
    "markdown": "# Screenshots and Videos | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How Cypress captures screenshots of test failures automatically\n*   How to manually capture your own screenshot\n*   How Cypress can record a video of the entire run\n*   Some options of what to do with screenshot and video artifacts\n\ntip\n\n**Debugging Cypress Cloud Test Runs?**\n\nDon't rely on artifact representations or reproducing failing conditions locally. Replay the test as it executed during the recorded run with full debug capability using [![](https://docs.cypress.io/img/guides/cloud/test-replay/replay-icon.svg) Test Replay](https://docs.cypress.io/guides/cloud/test-replay).\n\nCypress comes with the ability to take screenshots, whether you are running via `cypress open` or `cypress run`, even in CI.\n\nTo take a manual screenshot you can use the [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot) command.\n\nAdditionally, Cypress will automatically capture screenshots when a failure happens during `cypress run`. Screenshots on failure are _not_ automatically taken during `cypress open`.\n\nCapturing of screenshots when a test fails can be turned off entirely by setting [`screenshotOnRunFailure`](https://docs.cypress.io/guides/references/configuration#Screenshots) to `false` from within the [Cypress configuration](https://docs.cypress.io/guides/references/configuration) or by setting `screenshotOnRunFailure` to `false` in the [Cypress.Screenshot.defaults()](https://docs.cypress.io/api/cypress-api/screenshot-api).\n\nScreenshots are stored in the [`screenshotsFolder`](https://docs.cypress.io/guides/references/configuration#Screenshots) which is set to `cypress/screenshots` by default.\n\nCypress clears any existing screenshots before `cypress run`. If you do not want to clear your screenshots folder before a run, you can set [`trashAssetsBeforeRuns`](https://docs.cypress.io/guides/references/configuration#Screenshots) to `false`.\n\n## Videos[​](#Videos \"Direct link to Videos\")\n\nVideo recording is disabled by default, but can be turned on by setting [`video`](https://docs.cypress.io/guides/references/configuration#Videos) to `true` from within your configuration.\n\nIf enabled, Cypress records a video for each spec file when running tests during `cypress run`. Videos are _not_ recorded during `cypress open`.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  video: true,})\n```\n\nVideos are stored in the [`videosFolder`](https://docs.cypress.io/guides/references/configuration#Videos) which is set to `cypress/videos` by default.\n\nWhen using the `--record` flag while running your tests, videos are processed, compressed, and uploaded to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction) after every spec file runs, successful or not. To change this behavior to only process videos in the case that tests fail, see how to [delete videos for specs without failing or retried tests](https://docs.cypress.io/guides/guides/screenshots-and-videos#Delete-videos-for-specs-without-failing-or-retried-tests). Deleting the video will cause the video to not be uploaded to Cypress Cloud.\n\nCypress clears any existing videos before a `cypress run`. If you do not want to clear your videos folder before a run, you can set [`trashAssetsBeforeRuns`](https://docs.cypress.io/guides/references/configuration#Videos) to `false`.\n\n### Video encoding[​](#Video-encoding \"Direct link to Video encoding\")\n\nAfter a video is recorded, Cypress encodes the video to a commonly digestable format. Part of this encoding process includes video compression.\n\nCompression is disabled by default, meaning this step will be skipped completely, so the file size of the video will be larger, but the encoding process is faster. Setting [`videoCompression`](https://docs.cypress.io/guides/references/configuration#Videos) to `true` will coerce the video compression value to 32 Constant Rate Factor (CRF), which takes longer to process, but results in a smaller video.\n\n**Enabling compression**\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  videoCompression: true,})\n```\n\nIf your spec files have a long run duration and [`videoCompression`](https://docs.cypress.io/guides/references/configuration#Videos) is enabled, you might notice a time gap between a finished spec and a new spec starting during `cypress run`. During this time, Cypress is encoding the captured video and possibly uploading it to Cypress Cloud.\n\n**Change compression value from 32**\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  videoCompression: 15,})\n```\n\nIn addition to enabling or disabling video compress, you can specify the CRF value used to compress the video. Here are some common scenarios:\n\n*   If the machine is encoding the video slowly (which is often the case for virtual machines that use less CPU cores), try increasing the CRF value.\n    \n*   If your videos are extremely low quality, try decreasing the CRF value.\n    \n\nA lower `videoCompression` value will spend less time compressing and result in a bigger video file size and higher quality video.\n\ninfo\n\nIf you are an FFmpeg pro and want to see all the settings and debug messages during the encoding, run Cypress with the following environment variable: `DEBUG=cypress:server:video cypress run`\n\n### Control which videos to keep and upload to Cypress Cloud[​](#Control-which-videos-to-keep-and-upload-to-Cypress-Cloud \"Direct link to Control which videos to keep and upload to Cypress Cloud\")\n\nYou may want to have more control over which videos you want to keep and upload to Cypress Cloud. Deleting videos after the run can save resource space on the machine as well as skip the time used to process, compress, and upload the video to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction).\n\nTo only process videos in the case that a test fails, you can [delete videos for specs without failing or retried tests](https://docs.cypress.io/guides/guides/screenshots-and-videos#Delete-videos-for-specs-without-failing-or-retried-tests), which will not upload the video of passed runs to Cypress Cloud.\n\nFor more fine grained control, you can use Cypress's [`after:spec`](https://docs.cypress.io/api/plugins/after-spec-api) event listener that fires after each spec file is run and delete the video when certain conditions are met.\n\n### Delete videos for specs without failing or retried tests[​](#Delete-videos-for-specs-without-failing-or-retried-tests \"Direct link to Delete videos for specs without failing or retried tests\")\n\nThe example below shows how to delete the recorded video for specs that had no retry attempts or failures when using Cypress [test retries](https://docs.cypress.io/guides/guides/test-retries).\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')const fs = require('fs')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      on('after:spec', (spec, results) => {        if (results && results.video) {          // Do we have failures for any retry attempts?          const failures = results.tests.some((test) =>            test.attempts.some((attempt) => attempt.state === 'failed')          )          if (!failures) {            // delete the video if the spec passed and no tests retried            fs.unlinkSync(results.video)          }        }      })    },  },})\n```\n\n## Now What?[​](#Now-What \"Direct link to Now What?\")\n\nSo you are capturing screenshots and recording videos of your test runs, now what?\n\nSomething you can take advantage of today is [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction): our companion enterprise service that stores your artifacts for you and lets you view them from any web browser, as well as share them with your team.\n\n### Visual Regression Test / Screenshot Diffing[​](#Visual-Regression-Test--Screenshot-Diffing \"Direct link to Visual Regression Test / Screenshot Diffing\")\n\nAnother possibility is visual regression testing: comparing screenshots of past runs with the current run to ensure that nothing changed. [Read about how to implement visual testing.](https://docs.cypress.io/guides/tooling/visual-testing)\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [After Screenshot API](https://docs.cypress.io/api/plugins/after-screenshot-api)\n*   [Cypress.Screenshot](https://docs.cypress.io/api/cypress-api/screenshot-api)\n*   [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot)\n*   [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction)\n*   [Test Replay](https://docs.cypress.io/guides/cloud/test-replay)\n*   [Visual Testing](https://docs.cypress.io/guides/tooling/visual-testing)",
    "title": "Screenshots and Videos | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/references/proxy-configuration",
    "markdown": "# Proxy Configuration | Cypress Documentation\n\nCypress needs Internet access to work. Many companies require the use of a corporate proxy to access the Internet. If your company does this, many functions of Cypress will not work until you've configured Cypress to use your proxy:\n\n*   Cypress won't be able to load web pages besides `localhost`.\n*   Cypress won't be able to warn you if your [baseUrl](https://docs.cypress.io/guides/references/configuration#Global) isn't available.\n*   Cypress won't be able to connect to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction) to log in or record test runs.\n*   `npm install cypress` may fail while downloading the Cypress binary.\n\nIf you are experiencing any or all of these issues, you may need to configure Cypress with your proxy. Instructions are available for [macOS](#Set-a-proxy-on-Linux-or-macOS), [Linux](#Set-a-proxy-on-Linux-or-macOS), and [Windows](#Set-a-proxy-on-Windows).\n\ncaution\n\nProxy Auto-Configuration (PAC) files are not currently supported. If your organization uses a PAC file, contact a network administrator to ask what HTTP proxy you should be using to access the general Internet, then use that proxy with Cypress.\n\n## Set a proxy on Linux or macOS[​](#Set-a-proxy-on-Linux-or-macOS \"Direct link to Set a proxy on Linux or macOS\")\n\nTo set your proxy on Linux or macOS, run the following command in a terminal before running Cypress:\n\n```\nexport HTTP_PROXY=http://my-company-proxy.com\n```\n\nYou can also set `NO_PROXY` to bypass the proxy for certain domains (by default, only `localhost` will be bypassed):\n\n```\nexport NO_PROXY=localhost,google.com,apple.com\n```\n\nTo make these changes permanent, you can add these commands to your shell's `~/.profile` (`~/.zsh_profile`, `~/.bash_profile`, etc.) to run them on every login.\n\n## Set a proxy on Windows[​](#Set-a-proxy-on-Windows \"Direct link to Set a proxy on Windows\")\n\nWhen starting up after being installed, Cypress will attempt to load the proxy configured in the Windows registry by default. [Learn how to set your proxy settings system-wide in Windows.](https://www.howtogeek.com/tips/how-to-set-your-proxy-settings-in-windows-8.1/)\n\ninfo\n\nWhen downloading Cypress for the first time, the `cypress` command line tool _does not_ read proxy settings from the Windows registry. If you need to configure a proxy for the installation to work, you must set the appropriate environment variables as described below.\n\nYou can also set proxy environment variables before running Cypress to override the Windows registry. This is also the only way to define a proxy for `cypress install`. In Command Prompt, defining the required environment variables looks like this:\n\n```\nset HTTP_PROXY=http://my-company-proxy.com\n```\n\nTo accomplish the same thing in PowerShell:\n\n```\n$env:HTTP_PROXY = \"http://my-company-proxy.com\"\n```\n\nTo save the `HTTP_PROXY` variable and use your proxy for all new shells, use `setx`:\n\n```\nsetx HTTP_PROXY http://my-company-proxy.com\n```\n\n## Proxy environment variables[​](#Proxy-environment-variables \"Direct link to Proxy environment variables\")\n\nCypress automatically reads from your system's `HTTP_PROXY` environment variable and uses that proxy for all HTTP and HTTPS traffic. If an `HTTPS_PROXY` environment variable is set, HTTPS traffic will use that proxy instead.\n\nTo bypass the proxy for certain domains, a `NO_PROXY` environment variable can be set to a comma-separated list of domain names to not proxy traffic for. By default, traffic to `localhost` will not be proxied. To make Cypress send traffic for `localhost` through the proxy, pass `<-loopback>` in `NO_PROXY`.\n\nIf an uppercase and a lowercase version of the proxy settings are supplied (for example, `HTTP_PROXY` and `http_proxy` are both set), the lowercase variable will be preferred.\n\nCypress needs to be able to authenticate properly when communicating to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction). When connecting through a proxy, oftentimes a self signed certificate is used as a CA. In order to handle this configuration, Cypress automatically reads from npm config's [`cafile`](https://docs.npmjs.com/cli/v8/using-npm/config#cafile) and [`ca`](https://docs.npmjs.com/cli/v8/using-npm/config#ca) options and the [`NODE_EXTRA_CA_CERTS`](https://nodejs.org/api/cli.html#node_extra_ca_certsfile) node environment variable.\n\nTo mimic the behavior of npm and node, Cypress looks at `cafile` first and then `ca` and uses the corresponding certificate(s) as a replacement for the CA. For example, to use the CA at `/home/person/certs/ca.crt`, add the following to your `.npmrc`:\n\n```\ncafile=/home/person/certs/ca.crt\n```\n\nIf neither `cafile` nor `ca` are set, Cypress looks at the system environment variable `NODE_EXTRA_CA_CERTS` and uses the corresponding certificate(s) as an extension for the trusted CA.\n\nNote that the npm config is used as a replacement, and the node environment variable is used as an extension.\n\n## View, unset, and set environment variables[​](#View-unset-and-set-environment-variables \"Direct link to View, unset, and set environment variables\")\n\nIn order to properly configure your proxy configuration, it can be helpful to know how to view currently set environment variables, unset unwanted environment variables, and set environment variables depending on your operating system.\n\n### Linux or macOS[​](#Linux-or-macOS \"Direct link to Linux or macOS\")\n\n#### Set an environment variable for the current session[​](#Set-an-environment-variable-for-the-current-session \"Direct link to Set an environment variable for the current session\")\n\n```\nexport SOME_VARIABLE=some-value\n```\n\n#### Unset an environment variable[​](#Unset-an-environment-variable \"Direct link to Unset an environment variable\")\n\n`echo` will print nothing after `unset`:\n\n#### See all the currently set environment variables[​](#See-all-the-currently-set-environment-variables \"Direct link to See all the currently set environment variables\")\n\nPrint all env vars:\n\nPrint environment variables with `proxy` (case insensitive) in the name:\n\n### Windows[​](#Windows \"Direct link to Windows\")\n\nSetting environment variables in Windows is different depending on if you're using _command prompt_ or _PowerShell_.\n\n#### Set an environment variable for current session[​](#Set-an-environment-variable-for-current-session \"Direct link to Set an environment variable for current session\")\n\n_Command prompt:_\n\n```\nset SOME_VARIABLE=some-value\n```\n\n_PowerShell:_\n\n```\n$env:SOME_VARIABLE = \"some-value\"\n```\n\n#### Set environment variable globally for all future sessions[​](#Set-environment-variable-globally-for-all-future-sessions \"Direct link to Set environment variable globally for all future sessions\")\n\n```\nsetx SOME_VARIABLE some-value\n```\n\n#### Unset an environment variable in the current session[​](#Unset-an-environment-variable-in-the-current-session \"Direct link to Unset an environment variable in the current session\")\n\n_Command prompt:_\n\n_PowerShell:_\n\n```\nRemove-Item Env:\\SOME_VARIABLE\n```\n\n#### See all currently set environment variables[​](#See-all-currently-set-environment-variables \"Direct link to See all currently set environment variables\")\n\n_Command prompt:_\n\n_PowerShell:_\n\n## View proxy settings in Cypress[​](#View-proxy-settings-in-Cypress \"Direct link to View proxy settings in Cypress\")\n\nYour current proxy settings can be viewed from within Cypress. Follow these steps:\n\n1.  Open up your project in Cypress via `cypress open`.\n2.  Click the \"Settings\" tab.\n3.  Click the \"Proxy Settings\" section to expand it and view the proxy settings that Cypress is currently using.\n\n![Proxy configuration in the Desktop app](https://docs.cypress.io/img/guides/configuration/test-runner-settings-proxy-configuration.jpg)",
    "title": "Proxy Configuration | Cypress Documentation",
    "description": "Cypress needs Internet access to work. Many companies require the use of a",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/component-testing/styling-components",
    "markdown": "# Styling Components | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to load CSS libraries like Tailwind or Bootstrap\n*   How to render icon fonts like Font Awesome\n*   Where to import your application's global stylesheets\n*   How to use `indexHtmlFile` to define a custom DOM mounting point\n\n## Rendering Components Correctly\n\nThe first time you mount _any_ new component, you may notice that the component doesn't look like it should. Unless your application is written _exclusively_ using Component-scoped CSS (e.g. Styled Components or Vue's Scoped Styles) you will need to follow this guide in order to get your component looking **and behaving** like it will in production.\n\ntip\n\nEnsure that whatever you're doing in production is happening within either the Component HTML file or the Component Support File.\n\n## Component Support File[​](#Component-Support-File \"Direct link to Component Support File\")\n\nWhen you load a component or end-to-end spec file, it will first load something called a supportFile. By default, this is created for you during first-time setup of Cypress Component Testing and is located at `cypress/support/component.js`. This file gives you the opportunity to set up your spec's environment.\n\nFor component specs, you use this file to set up page-level concerns that would usually exist by the time you mount the component. Some examples include:\n\n1.  Run-time JavaScript code (state management, routers, UI libraries)\n2.  Global styles (style resets, Tailwind)\n\nAs a rule, your Component Support File should look **very similar** to your application's main JavaScript (ie: main.js, index.js) and main CSS (ie: main.css, index.css) files.\n\n## 3rd Party CSS Libraries (Tailwind, Bootstrap, PopperJS)[​](#3rd-Party-CSS-Libraries-Tailwind-Bootstrap-PopperJS \"Direct link to 3rd Party CSS Libraries (Tailwind, Bootstrap, PopperJS)\")\n\nComponents can have three parts: markup, styles, and script logic. All three of these work together in order to deliver a working component.\n\nStyles are business logic, too.\n\n1.  Tailwind\n2.  CSS Modules\n3.  Scoped Styled\n4.  Styled Components\n5.  Regular Stylesheets\n6.  UI Libraries\n\nThis guide will help you setup your test infrastructure to render your component's styles properly.\n\nDepending on how your application is built, the first time you mount a new component, it may be completely or somewhat unstyled.\n\nThis makes sense. Many applications have some amount of one-time setup that is run outside of the component file.\n\nWe build our applications within the context that they're supposed to run in, and we make assumptions that our components will always be rendered within a root-level component (such as an `<App>`) or a top-level selector with style rules (such as `#app { /* styles in here */ }` )\n\nWhen we attempt to isolate our component to put it under test, we need to put that environment back together. We'll go into that in a moment. First, let's talk about stylesheets, testing, and one of Cypress's biggest differences in contrast to other component testing tools.\n\n## Why Test Your Component's Styles?[​](#Why-Test-Your-Components-Styles \"Direct link to Why Test Your Component's Styles?\")\n\nStylesheets are a critical part of your component's business logic. One of the best examples of this is a modal component. Common modal bugs include: z-index issues, inability to dismiss the overlay, and inability to interact with the parent page _after_ dismissing the modal.\n\nNode-based test runners like Jest or Vitest can't catch these kinds of issues because they render your styles in **emulated DOM environments** like JSDom. JSDom doesn't have a box model and certain kinds of assertions, such as if a parent is covering a child and preventing clicks, are not possible to test without a more realistic environment.\n\nOn the other hand, browser-based runners like Cypress allow you to render your application's styles and components and allow Cypress's Driver to take advantage of the real box-model and style rendering engine. Cypress's commands like `cy.click` and assertions like `should('be.visible')` have business logic that makes sure the UI you're trying to assert on and interact with is visible and interactible for your end users. This is a benefit unique to browser-based test runners.\n\n## Importing Stylesheets[​](#Importing-Stylesheets \"Direct link to Importing Stylesheets\")\n\nEach application or component library imports styles a little differently. We'll go over a few methods and describe how you can quickly restructure your components to become more testable.\n\nIf you do not follow this guide, your components will mount, but they won't look correct and you may not be able to benefit from some of the most valuable parts of Cypress. Namely, implicit checks for width, height, and overflow to ensure that your components not only exist in the page's HTML but are also visible.\n\n## Rules for Setting Up Your Styles[​](#Rules-for-Setting-Up-Your-Styles \"Direct link to Rules for Setting Up Your Styles\")\n\nAll of your application's styles need to end up in Cypress so that when your component mounts, it looks right.\n\nWe expose two hooks for you to configure your styles:\n\n1.  An HTML file called `cypress/support/component-index.html`\n2.  A JavaScript support file called `cypress/support/component.js`\n\nWhen creating a production-like test environment, you should _always_ mimic your own application's setup. If your application has multiple `<link>` tags to load fonts or other stylesheets within the `head`, ensure that the `cypress/support/component-index.html` file contains the same `<link>` tags. The same logic follows for any styles loaded in your Application's `main.js` file. If you import a `./styles.css` at the top of your `main.js` file, make sure to import it in your `cypress/support/component.js` file.\n\nFor this reason, it's strongly suggested to make a `src/setup.js` file that will be re-used in your `main.js` entrypoint as well as in your test setup. An example project structure would look like so:\n\n```\n> /cypress>   /support>    /component.js> /src>  /main.js>  /main.css>  /setup.js\n```\n\nThe contents of **setup.js** may look like so:\n\n```\nimport '~normalize/normalize.css'import 'font-awesome'import './main.css'export const createStore = () => {  return /* store */}export const createRouter = () => {  return /* router */}export const createApp = () => {  return <App router={createRouter()} store={createStore()}></App>}\n```\n\nand its usage in `main.js` could look like so:\n\n```\nimport { createApp } from './setup.js'ReactDOM.render(createApp())\n```\n\nand Cypress would re-use it in its support file\n\n```\n/* And that's it! */import '../../src/setup.js'\n```\n\nThe rest of this section is dedicated to discussing specific style problems you may have, including: Fonts, Icon Fonts, Style Resets, Global App Styles, and 3rd party component library styles.\n\n### Global App Styles[​](#Global-App-Styles \"Direct link to Global App Styles\")\n\nYour global application styles are usually in one of the following places:\n\n1.  A `styles.css` file you import within the `head` of your application.\n\nThis should be loaded within your Cypress Index HTML file.\n\n2.  Within a root-level component like `App.jsx`, `App.vue`, `App.svelte`, etc.\n\nDecouple your Root CSS from your App or Entrypoint component by pulling out these global styles into a top-level stylesheet. Both Vue and Svelte embed global application styles into the main entry point components. The rest of your application expects to be rendered _within_ those components, and so any assumptions you made when writing those components must be replicated in your test environment or else your components won't look right.\n\n```\n<style>  /* In certain scaffolds, the App.vue file does not have a separate styles file */  #app {    font-family: Sans-serif;  }</style>\n```\n\nShould become\n\n```\n/* App.vue */ <style src=\"./app.css\" />\n```\n\nand\n\n```\n/* cypress/support/component.js */ import '../../src/app.css'\n```\n\n3.  Within the `main.js` file of your application (which subsequently mounts your root-level component).\n\nRe-using stylesheets that are imported in the beginning of your application was covered in the last section.\n\n4.  Within a configuration file like `next.config.js` or `nuxt.config.js`.\n\nYou're usually providing public paths to these stylesheets. You can import the same paths within your `cypress/support/component-index.html` file.\n\n### CSS Reset or Normalize isn't applied[​](#CSS-Reset-or-Normalize-isnt-applied \"Direct link to CSS Reset or Normalize isn't applied\")\n\nAre you importing your normalize file within `cypress/support/component-index.html` or within `cypress/support/component.js`?\n\n### Fonts: Everything is rendering in Times New Roman[​](#Fonts-Everything-is-rendering-in-Times-New-Roman \"Direct link to Fonts: Everything is rendering in Times New Roman\")\n\nMost applications handle fonts in one of two ways.\n\n1.  Your `index.html` loads external fonts in the `head` tag.\n\n```\n<head>  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />  <link    href=\"https://fonts.googleapis.com/css2?family=Readex+Pro:wght@200;300;400;500;600;700&family=Roboto&display=swap\"    rel=\"stylesheet\"  /></head>\n```\n\nOr via an `@import` statement\n\n```\n<head>  <style>    @import url('https://fonts.googleapis.com/css2?family=Readex+Pro:wght@200;300;400;500;600;700&family=Roboto&display=swap');  </style></head>\n```\n\n2.  Your main stylesheet loads fonts\n\n```\n/* main.css */@font-face {  font-family: 'Fira Sans';  src: url('fonts/fira/eot/FiraSans-Regular.eot');  src:    url('fonts/fira/eot/FiraSans-Regular.eot') format('embedded-opentype'),    url('fonts/fira/woff2/FiraSans-Regular.woff2') format('woff2'),    url('fonts/fira/woff/FiraSans-Regular.woff') format('woff'),    url('fonts/fira/woff2/FiraSans-Regular.ttf') format('truetype');  font-weight: normal;  font-style: normal;}\n```\n\n### Icon Fonts: None of my icons are rendering[​](#Icon-Fonts-None-of-my-icons-are-rendering \"Direct link to Icon Fonts: None of my icons are rendering\")\n\n### Theme Providers: My components don't look right/compile because they can't access providers[​](#Theme-Providers-My-components-dont-look-rightcompile-because-they-cant-access-providers \"Direct link to Theme Providers: My components don't look right/compile because they can't access providers\")\n\nTheme Provider or other application-level wrappers like I18n or Material UI work by injecting themselves around your application. When you're component testing, you haven't rendered the component hierarchy surrounding your component.\n\nTo solve issues like these, people review the Custom Commands and Wrappers\n\nTo first explain why it's not right, you first have to explain what production-like even means.\n\nSo we have this before & after up, and now our job is to step through the component under test and try to figure out where the differences between Production and Test are.\n\nSometimes these are as simple as colors or fonts not lining up. Other times, the entire component or sections of it may not compile.\n\nThe reason this doesn't look right is because:\n\n1.  My browser supports dark mode\n2.  The `<App>` component provides its own styles",
    "title": "Styling Components | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/references/trade-offs",
    "markdown": "# Trade-offs | Cypress Documentation\n\nCypress automates the browser with its own unique architecture. While this unlocks the power to do things you will not find anywhere else, there are specific trade-offs that are made. There is no free lunch!\n\nIn this guide we will lay out what some of the trade-offs are - and specifically how you can work around them.\n\nWhile at first it may seem like these are strict limitations in Cypress - we think you will soon realize that many of these boundaries are actually **good** to have. In a sense they prevent you from writing bad, slow, or flaky tests.\n\n#### Permanent trade-offs:[​](#Permanent-trade-offs \"Direct link to Permanent trade-offs:\")\n\n*   Cypress is not a general purpose [automation tool](#Automation-restrictions).\n*   Cypress commands run [inside of a browser](#Inside-the-browser).\n*   You cannot use Cypress to drive [two browsers at the same time](#Multiple-browsers-open-at-the-same-time).\n*   Each test is bound to a single superdomain. Cross-origin navigation inside tests can be enabled by using the [`cy.origin`](https://docs.cypress.io/api/commands/origin) command. Please read our [Cross Origin Testing Guide](https://docs.cypress.io/guides/guides/cross-origin-testing).\n\n#### Temporary trade-offs:[​](#Temporary-trade-offs \"Direct link to Temporary trade-offs:\")\n\nWe have [open issues](https://github.com/cypress-io/cypress/issues) where you can find a full list of things Cypress will eventually address, we wanted to highlight some of the more important _temporary_ restrictions that Cypress will eventually address. [PRs are welcome ;-)](https://on.cypress.io/contributing)\n\nMany of these issues are currently being worked on or are on our [Roadmap](https://docs.cypress.io/guides/references/roadmap).\n\n*   [Workarounds for the lack of a `cy.hover()` command.](https://docs.cypress.io/api/commands/hover)\n*   [`cy.tab()` command.](https://github.com/cypress-io/cypress/issues/299)\n*   [There is not any native or mobile events support.](https://github.com/cypress-io/cypress/issues/311#issuecomment-339824191)\n*   [iframe support is somewhat limited, but does work.](https://github.com/cypress-io/cypress/issues/136)\n\n## Permanent trade-offs[​](#Permanent-trade-offs-1 \"Direct link to Permanent trade-offs\")\n\n### Automation restrictions[​](#Automation-restrictions \"Direct link to Automation restrictions\")\n\nCypress is a specialized tool that does one thing really well: end-to-end testing web applications while they are under development. You should not use Cypress for things it is not designed for such as:\n\n*   Indexing the web\n*   Spidering links\n*   Performance testing\n*   Scripting 3rd party sites\n\nThere are other excellent tools that are optimized for doing each item listed above.\n\nThe **sweet spot** of Cypress is to be used as a tool to test your own application **as you build it**. It is built for developers and QA engineers, not manual testers or exploratory testing.\n\n### Inside the browser[​](#Inside-the-browser \"Direct link to Inside the browser\")\n\nIn case you missed it before - Cypress tests run inside of the browser! This means we can do things nobody else can. There is no object serialization or JSON wire protocols. You have real, native access to everything in your application under test. It is impossible for Cypress to 'miss' elements and it always knows the moment your application fires any kind of event.\n\nBut what this also means is that your test code **is being evaluated inside the browser**. Test code is not evaluated in Node, or any other server side language. The **only** language we will ever support is the language of the web: JavaScript.\n\nThis trade-off means it makes it a little bit harder to communicate with the back end - like your server or database. You will not be able to connect or import those server-side libraries or modules directly. Although you can require `node_modules` which can be used in the browser. Additionally, you have the ability to use Node to import or talk directly to your back end scripts using [our Plugins API](https://docs.cypress.io/api/plugins/writing-a-plugin) or [cy.task()](https://docs.cypress.io/api/commands/task).\n\nTo talk to your database or server you need to use the [`cy.exec()`](https://docs.cypress.io/api/commands/exec), [`cy.task()`](https://docs.cypress.io/api/commands/task), or [`cy.request()`](https://docs.cypress.io/api/commands/request) commands. That means you will need to expose a way to seed and setup your database. This really is not that hard, but it might take a bit more elbow grease than other testing tools written in your back end language.\n\nThe trade-off here is that doing everything in the browser (basically all of your tests) is a much better experience in Cypress. But doing things outside of the browser may take a little extra work.\n\nIn the future we **do** have plans to release back end adapters for other languages.\n\n### Multiple browsers open at the same time[​](#Multiple-browsers-open-at-the-same-time \"Direct link to Multiple browsers open at the same time\")\n\nCypress does not support controlling more than 1 open browser at a time.\n\nWith that said, except in the most unusual and rare circumstances, you can still test most application behavior without opening multiple browsers at the same time.\n\nYou may ask about this functionality like this:\n\n> I'm trying to test a chat application. Can I run more than one browser at a time with Cypress?\n\nWhether you are testing a chat application or anything else - what you are really asking about is testing collaboration. But, **you don't need to recreate the entire environment in order to test collaboration with 100% coverage**.\n\nDoing it this way can be faster, more accurate, and more scalable.\n\nWhile outside the scope of this article, you could test a chat application using the following principles. Each one will incrementally introduce more collaboration:\n\n#### 1\\. Use only the browser:[​](#1-Use-only-the-browser \"Direct link to 1. Use only the browser:\")\n\nAvoid the server, invoke your JavaScript callbacks manually thereby simulating what happens when \"notifications come in\", or \"users leave the chat\" purely in the browser.\n\nYou can [stub](https://docs.cypress.io/api/commands/stub) everything and simulate every single scenario. Chat messages, offline messages, connections, reconnections, disconnections, group chat, etc. Everything that happens inside of the browser can be fully tested. Requests leaving the browser could also be stubbed and you could assert that the request bodies were correct.\n\n#### 2\\. Stub the other connection:[​](#2-Stub-the-other-connection \"Direct link to 2. Stub the other connection:\")\n\n```\nserver → browser            ↓server ← browser  ↓(other connections stubbed)  ↓server → browser\n```\n\nUse your server to receive messages from the browser, and simulate \"the other participant\" by sending messages as that participant. This is certainly application specific, but generally you could insert records into the database or do whatever it takes for your server to act as if a message of one client needs to be sent back to the browser.\n\nTypically this pattern enables you to avoid making a secondary WebSocket connection and yet still fulfills the bidirectional browser and server contract. This means you could also test edge cases (disconnections, etc) without actually handling real connections.\n\n#### 3: Introduce another connection:[​](#3-Introduce-another-connection \"Direct link to 3: Introduce another connection:\")\n\n```\nserver → browser            ↓server ← browser  ↓server → other connection            ↓server ← other connection  ↓server → browser\n```\n\nTo do this - you would need a background process outside of the browser to make the underlying WebSocket connection that you can then communicate with and control.\n\nYou can do this in many ways and here is an example of using an HTTP server to act as the client and exposing a REST interface that enables us to control it.\n\n```\n// Cypress tests// tell the http server at 8081 to connect to 8080cy.request('http://localhost:8081/connect?url=http://localhost:8080')// tell the http server at 8081 to send a messagecy.request('http://localhost:8081/message?m=hello')// tell the http server at 8081 to disconnectcy.request('http://localhost:8081/disconnect')\n```\n\nAnd the HTTP server code would look something like this...\n\n```\nconst client = require('socket.io:client')const express = require('express')const app = express()let socketapp.get('/connect', (req, res) => {  const url = req.query.url  socket = client(url)  socket.on('connect', () => {    res.sendStatus(200)  })})app.get('/message', (req, res) => {  const msg = req.query.m  socket.send(msg, () => {    res.sendStatus(200)  })})app.get('/disconnect', (req, res) => {  socket.on('disconnect', () => {    res.sendStatus(200)  })  socket.disconnect()})app.listen(8081, () => {})\n```\n\nThis avoids ever needing a second open browser, but still gives you an end-to-end test that provides 100% confidence that the two clients can communicate with each other.",
    "title": "Trade-offs | Cypress Documentation",
    "description": "Cypress automates the browser with its own unique architecture. While this",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/component-testing/component-framework-configuration",
    "markdown": "# Component Testing Config | Cypress Documentation\n\nWhen you launch Cypress for the first time in a project, the app will automatically guide you through setup and configuration. You don't need to do anything additional to get started.\n\nRefer to the \"Framework Configuration\" guide in each UI framework's overview guide for a list of supported development servers and how they are configured.\n\nBelow are more advanced configuration options you can customize to fit your project.\n\n## Custom Index File[​](#Custom-Index-File \"Direct link to Custom Index File\")\n\nBy default, Cypress renders your components into an HTML file located at `cypress/support/component-index.html`.\n\nThe index file allows you to add in global assets, such as styles, fonts, and external scripts.\n\nYou can provide an alternative path to the file using the `indexHtmlFile` option in the [component config](https://docs.cypress.io/guides/references/configuration#component) options:\n\n```\n{  component: {    devServer,    indexHtmlFile: '/custom/path/to/component-index.html'  }}\n```\n\n## Custom Dev Server[​](#Custom-Dev-Server \"Direct link to Custom Dev Server\")\n\nA custom function can be passed into the `devServer` option, which allows the use of build systems not provided by Cypress out of the box. These can be from the Cypress community, preview builds not included with the app, or a custom one you create.\n\nThe function's signature takes in an object with the following properties as its only parameter and needs to resolve an object containing the port of your dev server and a callback to shut it down.\n\n```\ninterface DevServerOptions {  specs: Cypress.Spec[]  cypressConfig: Cypress.PluginConfigOptions  devServerEvents: NodeJS.EventEmitter}\n```\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  component: {    async devServer({ specs, cypressConfig, devServerEvents }) {      const { port, close } = await startDevServer(        specs,        cypressConfig,        devServerEvents      )      return {        port,        close,      }    },  },})\n```\n\nAny requests triggered during a test using the `devServerPublicPathRoute` as defined in the `cypressConfig` will be forwarded to your server. Cypress will trigger a request for `[devServerPublicPathRoute]/index.html` when a test is started. Your server needs to reply with the html-file referenced in `cypressConfig.indexHtmlFile` and inject a script to load the support files and the actual test.\n\n```\nfunction createServer(cypressConfig, bundleDir, port = 1234) {  const app = express()  // read kickstart script - see below for an example  const clientScript = readFileSync(    path.join(__dirname, './client-script.js'),    'utf8'  )  app.get(    cypressConfig.devServerPublicPathRoute + '/index.html',    async (_req, res) => {      // read custom index.html file      const html = await fs.readFile(        path.join(cypressConfig.repoRoot, cypressConfig.indexHtmlFile),        { encoding: 'utf8' }      )      // inject kickstart-script      const output = html.replace(        '</head>',        `<script type=\"module\">${clientScript}</script></head>`      )      res.send(output)    }  )  // you need to establish some url-to-path-mapping, if your bundler outputs  // the full directory structure you can map this one to one  app.use(cypressConfig.devServerPublicPathRoute, express.static(bundleDir))  app.listen(port)}\n```\n\nFor a real-world example, you can refer to [this loader](https://github.com/cypress-io/cypress/blob/466155c2125476374d9f9549530f67d0c6354a41/npm/vite-dev-server/src/plugins/cypress.ts#L82-L92) used by the Vite Dev Server.\n\nThe client script must retrieve information on the currently active test from the Cypress instance of the parent frame and load the corresponding bundle. If a support file is defined, it should be injected at the top of your test bundle or loaded before the test script.\n\n```\nconst CypressInstance = (window.Cypress = parent.Cypress)const devServerPublicPathRoute = CypressInstance.config(  'devServerPublicPathRoute')let importPromise = Promise.resolve()// If you do not bundle your support file along with the tests,// you need to add a separate import statement for the support file.const supportFilePath = CypressInstance.config('supportFile')if (supportFilePath) {  const relative = supportFilePath.replace(    CypressInstance.config('projectRoot'),    ''  )  importPromise = importPromise.then(    () => import(`${devServerPublicPathRoute}${relative}`)  )}// load the spec - you can extend the load function to also load cssconst { relative } = CypressInstance.specimportPromise = importPromise.then(  () => import(`${devServerPublicPathRoute}/${relative}`))// trigger loading the importsCypressInstance.onSpecWindow(window, importPromise)// then start the test processCypressInstance.action('app:window:before:load', window)\n```\n\nFor a more complete example you can check out the [kickstart script used in the vite-devserver.](https://github.com/cypress-io/cypress/blob/develop/npm/vite-dev-server/client/initCypressTests.js)\n\nThe `devServerEvents` event emitter should be used to notify cypress about finished builds by emitting a `dev-server:compile:success` event and to listen for the `dev-server:specs:changed` event that will notify you about changed entry points.\n\n## Spec Pattern for Component Tests[​](#Spec-Pattern-for-Component-Tests \"Direct link to Spec Pattern for Component Tests\")\n\nBy default, Cypress looks for spec files anywhere in your project with an extension of `.cy.js`, `.cy.jsx`, `.cy.ts`, or `.cy.tsx`. However, you can change this behavior for component tests with a custom `specPattern` value. In the following example, we've configured Cypress to look for spec files with those same extensions, but only in the `src` folder or any of its subdirectories.\n\n```\n{  component: {    specPattern: 'src/**/*.cy.{js,jsx,ts,tsx}'  }}\n```\n\n## Additional Config[​](#Additional-Config \"Direct link to Additional Config\")\n\nFor more information on all the available configuration options, see the [configuration reference](https://docs.cypress.io/guides/references/configuration).",
    "title": "Component Testing Config | Cypress Documentation",
    "description": "When you launch Cypress for the first time in a project, the app will",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/guides/stubs-spies-and-clocks",
    "markdown": "# Stubs, Spies, and Clocks | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   Which libraries Cypress includes to provide typical testing functionality\n*   How to use stubs for asserting that code was called but preventing it from executing\n*   How to use spies for asserting that code was called without interfering with its execution\n*   How to control time for deterministically testing code that is time-dependent\n*   How Cypress improves and extends the included libraries\n\n## Capabilities[​](#Capabilities \"Direct link to Capabilities\")\n\nCypress comes built in with the ability to stub and spy with [`cy.stub()`](https://docs.cypress.io/api/commands/stub), [`cy.spy()`](https://docs.cypress.io/api/commands/spy) or modify your application's time with [`cy.clock()`](https://docs.cypress.io/api/commands/clock) - which lets you manipulate `Date`, `setTimeout`, `clearTimeout`, `setInterval`, or `clearInterval`.\n\nThese commands are useful when writing both **unit tests** and **integration tests**.\n\nCypress automatically bundles and wraps these libraries:\n\n| Name | What it does |\n| --- | --- |\n| [`sinon`](http://sinonjs.org/) | provides the [`cy.stub()`](https://docs.cypress.io/api/commands/stub) and [`cy.spy()`](https://docs.cypress.io/api/commands/spy) APIs |\n| [`lolex`](https://github.com/sinonjs/lolex) | provides the [`cy.clock()`](https://docs.cypress.io/api/commands/clock) and [`cy.tick()`](https://docs.cypress.io/api/commands/tick) APIs |\n| [`sinon-chai`](https://github.com/domenic/sinon-chai) | adds `chai` assertions for stubs and spies |\n\nYou can refer to each of these libraries' documentation for more examples and explanations.\n\n## Common Scenarios[​](#Common-Scenarios \"Direct link to Common Scenarios\")\n\n### Stubs[​](#Stubs \"Direct link to Stubs\")\n\nA stub is a way to modify a function and delegate control over its behavior to you (the programmer).\n\nA stub is most commonly used in a unit test but is still useful during some integration/e2e tests.\n\n```\n// create a standalone stub (generally for use in unit test)cy.stub()// replace obj.method() with a stubbed functioncy.stub(obj, 'method')// force obj.method() to return \"foo\"cy.stub(obj, 'method').returns('foo')// force obj.method() when called with \"bar\" argument to return \"foo\"cy.stub(obj, 'method').withArgs('bar').returns('foo')// force obj.method() to return a promise which resolves to \"foo\"cy.stub(obj, 'method').resolves('foo')// force obj.method() to return a promise rejected with an errorcy.stub(obj, 'method').rejects(new Error('foo'))\n```\n\nYou generally stub a function when it has side effects you are trying to control.\n\n#### Common Scenarios:[​](#Common-Scenarios-1 \"Direct link to Common Scenarios:\")\n\n*   You have a function that accepts a callback, and want to invoke the callback.\n*   Your function returns a `Promise`, and you want to automatically resolve or reject it.\n*   You have a function that wraps `window.location` and don't want your application to be navigated.\n*   You're trying to test your application's \"failure path\" by forcing things to fail.\n*   You're trying to test your application's \"happy path\" by forcing things to pass.\n*   You want to \"trick\" your application into thinking it's logged in or logged out.\n*   You're using `oauth` and want to stub login methods.\n\n### Spies[​](#Spies \"Direct link to Spies\")\n\nA spy gives you the ability to \"spy\" on a function, by letting you capture and then assert that the function was called with the right arguments, or that the function was called a certain number of times, or even what the return value was or what context the function was called with.\n\nA spy does **not** modify the behavior of the function - it is left perfectly intact. A spy is most useful when you are testing the contract between multiple functions and you don't care about the side effects the real function may create (if any).\n\n### Clock[​](#Clock \"Direct link to Clock\")\n\nThere are situations when it is useful to control your application's `date` and `time` in order to override its behavior or avoid slow tests.\n\nWith [cy.clock()](https://docs.cypress.io/api/commands/clock) you can control:\n\n*   `Date`\n*   `setTimeout`\n*   `setInterval`\n\n#### Common Scenarios[​](#Common-Scenarios-2 \"Direct link to Common Scenarios\")\n\n##### Control `setInterval`[​](#Control-setInterval \"Direct link to Control-setInterval\")\n\n*   You're polling something in your application with `setInterval` and want to control that.\n*   You have **throttled** or **debounced** functions which you want to control.\n\nOnce you've enabled [`cy.clock()`](https://docs.cypress.io/api/commands/clock) you can control time by **ticking** it ahead by milliseconds.\n\n```\ncy.clock()cy.visit('http://localhost:3333')cy.get('#search').type('Acme Company')cy.tick(1000)\n```\n\nYou can call [`cy.clock()`](https://docs.cypress.io/api/commands/clock) **prior** to visiting your application and we will automatically bind it to the application on the next [`cy.visit()`](https://docs.cypress.io/api/commands/visit). The same concept applies to mounting a component with [`cy.mount()`](https://docs.cypress.io/api/commands/mount). We bind **before** any timers from your code can be invoked.\n\n##### Restore the clock[​](#Restore-the-clock \"Direct link to Restore the clock\")\n\nYou can restore the clock and allow your application to resume normally without manipulating native global functions related to time. This is automatically called between tests.\n\n```\ncy.clock()cy.visit('http://localhost:3333')cy.get('#search').type('Acme Company')cy.tick(1000)// more test code here// restore the clockcy.clock().then((clock) => {  clock.restore()})// more test code here\n```\n\nYou could also restore by using [.invoke()](https://docs.cypress.io/api/commands/invoke) to invoke the `restore` function.\n\n```\ncy.clock().invoke('restore')\n```\n\n### Assertions[​](#Assertions \"Direct link to Assertions\")\n\nOnce you have a `stub` or a `spy` in hand, you can then create assertions about them.\n\n```\nconst user = {  getName: (arg) => {    return arg  },  updateEmail: (arg) => {    return arg  },  fail: () => {    throw new Error('fail whale')  },}// force user.getName() to return \"Jane\"cy.stub(user, 'getName').returns('Jane Lane')// spy on updateEmail but do not change its behaviorcy.spy(user, 'updateEmail')// spy on fail but do not change its behaviorcy.spy(user, 'fail')// invoke getNameconst name = user.getName(123)// invoke updateEmailconst email = user.updateEmail('[email protected]')try {  // invoke fail  user.fail()} catch (e) {}expect(name).to.eq('Jane Lane') // trueexpect(user.getName).to.be.calledOnce // trueexpect(user.getName).not.to.be.calledTwice // trueexpect(user.getName).to.be.calledWith(123)expect(user.getName).to.be.calledWithExactly(123) // trueexpect(user.getName).to.be.calledOn(user) // trueexpect(email).to.eq('[email protected]') // trueexpect(user.updateEmail).to.be.calledWith('[email protected]') // trueexpect(user.updateEmail).to.have.returned('[email protected]') // trueexpect(user.fail).to.have.thrown('Error') // true\n```\n\n## Integration and Extensions[​](#Integration-and-Extensions \"Direct link to Integration and Extensions\")\n\nBeyond integrating these tools together, we have also extended and improved collaboration between these tools.\n\n**Some examples:**\n\n*   We replaced Sinon's argument stringifier for a much less noisy, more performant, custom version.\n*   We improved the `sinon-chai` assertion output by changing what is displayed during a passing vs. failing test.\n*   We added aliasing support to `stub` and `spy` APIs.\n*   We automatically restore and tear down `stub`, `spy`, and `clock` between tests.\n\nWe also integrated all of these APIs directly into the Command Log, so you can visually see what's happening in your application.\n\nWe visually indicate when:\n\n*   A `stub` is called\n*   A `spy` is called\n*   A `clock` is ticked\n\nWhen you use aliasing with the [`.as()`](https://docs.cypress.io/api/commands/as) command, we also correlate those aliases with the calls. This works identically to aliasing [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept).\n\nWhen stubs are created by calling the method `.withArgs(...)` we also visually link these together.\n\nWhen you click on a stub or spy, we also output **remarkably** helpful debugging information.\n\nFor instance we automatically display:\n\n*   The call count (and the total number of calls)\n*   The arguments, without transforming them (they are the real arguments)\n*   The return value of the function\n*   The context the function was invoked with\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Spies, stubs, and clocks](https://example.cypress.io/commands/spies-stubs-clocks) examples\n*   [Stub navigator API in end-to-end tests](https://glebbahmutov.com/blog/stub-navigator-api/)\n*   [Shrink the Untestable Code With App Actions And Effects](https://www.cypress.io/blog/2019/02/28/shrink-the-untestable-code-with-app-actions-and-effects/)\n*   [Testing periodic network requests with cy.intercept and cy.clock combination](https://www.cypress.io/blog/2021/02/23/cy-intercept-and-cy-clock/)",
    "title": "Stubs, Spies, and Clocks | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/component-testing/faq",
    "markdown": "# Component Testing FAQ | Cypress Documentation\n\n## General Questions[​](#General-Questions \"Direct link to General Questions\")\n\n### What is component testing?[​](#What-is-component-testing \"Direct link to What is component testing?\")\n\nMany modern front-end UI libraries encourage writing applications using small, reusable building blocks known as components. Components start small (think buttons, images, inputs, etc.) and can be composed into larger components (order forms, date pickers, menus, etc.) and even entire pages.\n\nComponent testing is about testing an individual component in isolation from the rest of the app. This allows only having to worry about the component's functionality and not how it fits into an entire page.\n\n### What frameworks does component testing support?[​](#What-frameworks-does-component-testing-support \"Direct link to What frameworks does component testing support?\")\n\nWe support [Angular](https://docs.cypress.io/guides/component-testing/angular/overview), [React](https://docs.cypress.io/guides/component-testing/react/overview), [Svelte](https://docs.cypress.io/guides/component-testing/svelte/overview), and [Vue](https://docs.cypress.io/guides/component-testing/vue/overview) currently for component testing.\n\nWe also support several meta-frameworks like Next.js, Create React App, and Nuxt, as well as Webpack and Vite for bundling. Check each framework's overview guide for more info.\n\n### How does Cypress do component testing?[​](#How-does-Cypress-do-component-testing \"Direct link to How does Cypress do component testing?\")\n\nCypress will take a component and mount it into a blank canvas. When doing so, you have direct access to the component's API, making it easier to pass in props or data and put a component in a certain state. From there, you can use the same Cypress commands, selectors, and assertions to write your tests.\n\nCypress supports multiple frameworks and development servers for component testing.\n\n### When should I use component testing vs end-to-end testing?[​](#When-should-I-use-component-testing-vs-end-to-end-testing \"Direct link to When should I use component testing vs end-to-end testing?\")\n\nThe biggest difference between end-to-end testing and component testing is that an end-to-end test \"visits\" an entire page, and a component test \"mounts\" individual components. You set up a component test by passing any data/props/events to the component directly versus trying to manipulate a page UI. Because of this, component tests are typically easier to write, have less setup, and execute faster.\n\nUse component testing during development to help build out a component's functionality in a test-driven manner. Feel free to write many tests and cover all the edge cases.\n\nUse end-to-end testing to validate user journey's through your application as a whole. Don't repeat the same tests in the component tests; instead, focus on how an actual user will use the application.\n\n### How does Cypress component testing compare to other options?[​](#How-does-Cypress-component-testing-compare-to-other-options \"Direct link to How does Cypress component testing compare to other options?\")\n\nWhen Cypress mounts a component, it does so in an actual browser and not a simulated environment like jsdom. This allows you to visually see and interact with the component as you work on it. You can use the same browser-based developer tools that you are used to when building web applications, such as element inspectors, modifying CSS, and source debugging.\n\nCypress Component Testing is built around the same tools and APIs that end-to-end testing uses. Anyone familiar with Cypress can immediately hop in and feel productive writing component tests without a large learning curve. Component tests can also use the vast Cypress ecosystem, plugins, and services (like [Cypress Cloud](https://www.cypress.io/cloud) already available to complement your component tests.\n\n## Technical Questions[​](#Technical-Questions \"Direct link to Technical Questions\")\n\n### What is the Mount Function?[​](#What-is-the-Mount-Function \"Direct link to What is the Mount Function?\")\n\nWe ship a `mount` function for each UI library that is imported from the `cypress` package. It is responsible for rendering components within Cypress's sandboxed iframe and handling any framework-specific cleanup.\n\n```\n// example showing importing mount command in reactimport { mount } from 'cypress/react'\n```\n\nWhile you can use the `mount` function in your tests, we recommend using [`cy.mount()`](https://docs.cypress.io/api/commands/mount), which is added as a [custom command](https://docs.cypress.io/api/cypress-api/custom-commands) in the **cypress/support/component.js** file:\n\n```\nimport { mount } from 'cypress/react'Cypress.Commands.add('mount', mount)\n```\n\nThis allows you to use `cy.mount()` in any component test without having to import the framework-specific mount command, as well as customizing it to fit your needs. See the examples guide for each framework for info on creating a custom `cy.mount()` command.\n\n### Why isn't my component rendering as it should?[​](#Why-isnt-my-component-rendering-as-it-should \"Direct link to Why isn't my component rendering as it should?\")\n\nAny global styles and fonts must be imported and made available to your component, just like in the application. See our guide on [Styling Components](https://docs.cypress.io/guides/component-testing/styling-components) for more information on doing so.\n\n### Why doesn't my spec show in the Specs page?[​](#Why-doesnt-my-spec-show-in-the-Specs-page \"Direct link to Why doesn't my spec show in the Specs page?\")\n\nIf something appears missing from the spec list, make sure the files have the [proper extension and the `specPattern` is correctly defined](https://docs.cypress.io/guides/component-testing/component-framework-configuration#Spec-Pattern-for-Component-Tests).\n\n### How do I fix ESLint errors for things like using the global Cypress objects?[​](#How-do-I-fix-ESLint-errors-for-things-like-using-the-global-Cypress-objects \"Direct link to How do I fix ESLint errors for things like using the global Cypress objects?\")\n\nIf you experience ESLint errors in your code editor around Cypress globals, install the [`eslint-plugin-cypress`](https://www.npmjs.com/package/eslint-plugin-cypress) ESLint plugin.\n\n### Why isn't TypeScript recognizing the global Cypress objects or custom cypress commands (eg: `cy.mount`)?[​](#Why-isnt-TypeScript-recognizing-the-global-Cypress-objects-or-custom-cypress-commands-eg-cymount \"Direct link to Why-isnt-TypeScript-recognizing-the-global-Cypress-objects-or-custom-cypress-commands-eg-cymount\")\n\nIn some instances, TypeScript might not recognize the custom `cy.mount()` command in Cypress spec files not located in the **cypress** directory. You will get a compiler error specifying that the type is not found in this case.\n\nA quick way to fix this is to include the **cypress** directory in your **tsconfig.json** options like so:\n\n```\n\"include\": [  \"src\",  \"cypress\"]\n```\n\nTypeScript will monitor all files in the **cypress** folder and pick up the typings defined in the **cypress/support/component.ts** file.\n\nAlternatively, you can move your typings to an external file and include that file in your **tsconfig.json** file. See our [TypeScript Configuration](https://docs.cypress.io/guides/tooling/typescript-support#Using-an-External-Typings-File) guide for more info on doing this.\n\n### How do I get TypeScript to recognize Cypress types and not Jest types?[​](#How-do-I-get-TypeScript-to-recognize-Cypress-types-and-not-Jest-types \"Direct link to How do I get TypeScript to recognize Cypress types and not Jest types?\")\n\nFor frameworks that include Jest out of the box (like Create React App), you might run into issues where the Cypress global types for TypeScript conflict with Jest global types (`describe`, `test`, `it`, etc..). In this case, other Cypress globals like `Cypress` and `cy` might not be working properly either.\n\nWe are currently investigating better ways to handle this, but for the time being, we recommend using a [triple slash references directive](https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html#-reference-types-) to instruct the TypeScript compiler to look at the Cypress global types in each of your affected spec files:\n\n```\n/// <reference types=\"cypress\" />\n```\n\n**Alternatively, Relocate Component Specs**\n\nYou can also group your Cypress and Jest tests inside separate folders (not co-located with components).\n\nYou will need to add a `tsconfig.json` to the folder and specify the types the files inside that folder should use.\n\nDon't forget to update your [`specPattern`](https://docs.cypress.io/guides/references/configuration#component) to include the new file location.",
    "title": "Component Testing FAQ | Cypress Documentation",
    "description": "General Questions",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/references/troubleshooting",
    "markdown": "# Troubleshooting | Cypress Documentation\n\nThere are times when you will encounter errors or unexpected behavior with Cypress itself. This guide recommends some resources and steps to take to troubleshoot those problems.\n\n## Update Cypress[​](#Update-Cypress \"Direct link to Update Cypress\")\n\nWe always recommend using the latest version of Cypress. If you're not using the latest version, upgrade to the latest version. Your issue may already be resolved.\n\n## Support channels[​](#Support-channels \"Direct link to Support channels\")\n\nCheck these support resources:\n\n*   Connect with our community in [Discord](https://on.cypress.io/discord)\n*   Search existing [GitHub issues](https://github.com/cypress-io/cypress/issues)\n*   Search this documentation (search is in the top right) 😉\n*   Search [Stack Overflow](https://stackoverflow.com/questions/tagged/cypress) for relevant answers\n*   If your organization signs up for one of our [paid plans](https://www.cypress.io/pricing/), you can get dedicated email support, which gives you one-on-one help from our team.\n*   If you still haven't found a solution, [open an issue](https://github.com/cypress-io/cypress/issues/new/choose) _with a reproducible example_.\n\n### Common GitHub issues[​](#Common-GitHub-issues \"Direct link to Common GitHub issues\")\n\nBelow are some of common problem topics users experience with a link to the main issue(s) and links to the open and closed issues in the topic. Maybe you can find an open or closed issue matching your problem. Even open issues might suggest a workaround or shed more information on the problem.\n\n| Label | Description | Issues |\n| --- | --- | --- |\n| browser detection | Local browser is not detected | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20browser%20detection), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+browser+detection%22+is%3Aclosed) |\n| cross-origin | Getting cross-origin error | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20cross-origin%20%E2%A4%AD), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+cross-origin+%E2%A4%AD%22+is%3Aclosed) |\n| cy.request | Issues related to [`cy.request()`](https://docs.cypress.io/api/commands/request) command | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20cy.request), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+cy.request%22+is%3Aclosed) |\n| fixtures | Fixture loading and usage | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20fixtures), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+fixtures%22+is%3Aclosed) |\n| hooks | Issues related to hooks | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20hooks%20%E2%86%AA), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+hooks+%E2%86%AA%22+is%3Aclosed) |\n| iframes | Working with iframes | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20iframes), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+iframes%22+is%3Aclosed) |\n| installation | Cypress cannot be downloaded or installed | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20installation), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+installation%22+is%3Aclosed) |\n| network | Controlling network requests | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20network), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+network%22+is%3Aclosed) |\n| performance | Slow loading, slow network, etc | [open](https://github.com/cypress-io/cypress/labels/type%3A%20performance%20%F0%9F%8F%83%E2%80%8D%E2%99%80%EF%B8%8F), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22type%3A+performance+%F0%9F%8F%83%E2%80%8D%E2%99%80%EF%B8%8F%22+is%3Aclosed) |\n| screenshots | Taking image screenshots | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20screenshots%20%F0%9F%93%B8), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+screenshots+%F0%9F%93%B8%22+is%3Aclosed) |\n| scrolling | Scrolling elements into view | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20scrolling%20%E2%86%95%EF%B8%8F), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+scrolling+%E2%86%95%EF%B8%8F%22+is%3Aclosed) |\n| spec execution | Running all or filtered specs | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20spec%20execution), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+spec+execution%22+is%3Aclosed) |\n| test execution | Running tests inside a single spec | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20test%20execution), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+test+execution%22+is%3Aclosed) |\n| TypeScript | Transpiling or bundling TypeScript | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20typescript), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+typescript%22+is%3Aclosed) |\n| video | Problems with video recordings | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20video%20%F0%9F%93%B9), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+video+%F0%9F%93%B9%22+is%3Aclosed) |\n| file downloads | File downloads are not working | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20downloads%20%E2%AC%87%EF%B8%8F), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+downloads+%E2%AC%87%EF%B8%8F%22+is%3Aclosed) |\n| intercept | Network stubbing using [cy.intercept](https://docs.cypress.io/api/commands/intercept) | [open](https://github.com/cypress-io/cypress/labels/pkg%2Fnet-stubbing), [closed](https://github.com/cypress-io/cypress/issues?q=label%3Apkg%2Fnet-stubbing+is%3Aclosed) |\n| SIG\\* errors | Crashes with errors like `SIGSEGV` | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20SIG%20errors), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+SIG+errors%22+is%3Aclosed) |\n| environment variables | Parsing and using environment variables | [open](https://github.com/cypress-io/cypress/labels/topic%3A%20environment%20variables), [closed](https://github.com/cypress-io/cypress/issues?q=label%3A%22topic%3A+environment+variables%22+is%3Aclosed) |\n\n## Isolate the Problem[​](#Isolate-the-Problem \"Direct link to Isolate the Problem\")\n\nWhen debugging a failing test, follow these general principles to isolate the problem:\n\n*   Look at the [video recordings and screenshots](https://docs.cypress.io/guides/guides/screenshots-and-videos).\n*   Split large spec files into smaller ones.\n*   Split long tests into smaller tests.\n*   Run the same test using [\\--browser chrome](https://docs.cypress.io/guides/guides/command-line#cypress-run-browser-lt-browser-name-or-path-gt). The problem might be isolated to the Electron browser.\n*   If isolated to the Electron browser. Run the same tests in both Electron and Chrome, then compare the screenshots/videos. Look for and isolate any differences in the Command Log.\n\n## Download specific Chrome version[​](#Download-specific-Chrome-version \"Direct link to Download specific Chrome version\")\n\nThe Chrome browser is evergreen - meaning it will automatically update itself, sometimes causing a breaking change in your automated tests. You can use [https://vikyd.github.io/download-chromium-history-version](https://vikyd.github.io/download-chromium-history-version) to download a specific released version of Chromium for every platform.\n\n## Clear Cypress cache[​](#Clear-Cypress-cache \"Direct link to Clear Cypress cache\")\n\nIf you're having an issue during installation of Cypress, try removing the contents of the Cypress cache.\n\nThis will clear out all installed versions of Cypress that may be cached on your machine.\n\nAfter running this command, you will need to run `cypress install` before running Cypress again.\n\n```\nnpm install cypress --save-dev\n```\n\n## Launching browsers[​](#Launching-browsers \"Direct link to Launching browsers\")\n\nCypress attempts to [automatically find installed Chrome versions for you](https://docs.cypress.io/guides/guides/launching-browsers). However, probing for browsers across different environments can be error-prone. If Cypress cannot find a browser but you know you have it installed, there are ways to ensure that Cypress can \"see\" it.\n\ninfo\n\n**Using the `--browser` command line argument**\n\nYou can also supply the `--browser` command line argument to launch a browser from a known filesystem path to bypass browser auto detection. [See 'Launching Browsers' for more information](https://docs.cypress.io/guides/guides/launching-browsers#Launching-by-a-path)\n\nYou can see the full list of found browsers and their properties within the [resolved configuration](https://docs.cypress.io/guides/references/configuration#Resolved-Configuration) in the **Settings** tab of Cypress.\n\nAnother way to log what is found by Cypress is to run Cypress with the [DEBUG environment variable](#Print-DEBUG-logs) set to `cypress:launcher`. This will print information about the found browsers and their properties to the terminal.\n\n**Tip:** use the [cypress info](https://docs.cypress.io/guides/guides/command-line#cypress-info) command to see all locally detected browsers.\n\n### Mac[​](#Mac \"Direct link to Mac\")\n\nOn Mac, Cypress attempts to find installed browsers by their bundle identifier. If this does not succeed, it will fall back to the Linux browser detection method.\n\n| Browser Name | Expected Bundle Identifier | Expected Executable |\n| --- | --- | --- |\n| `chrome` | `com.google.Chrome` | `Contents/MacOS/Google Chrome` |\n| `chromium` | `org.chromium.Chromium` | `Contents/MacOS/Chromium` |\n| `chrome:canary` | `com.google.Chrome.canary` | `Contents/MacOS/Google Chrome Canary` |\n\nFor the current list, see [packages/launcher](https://github.com/cypress-io/cypress/blob/develop/packages/launcher/lib/darwin/index.ts) files.\n\n### Linux[​](#Linux \"Direct link to Linux\")\n\nOn Linux, Cypress scans your `PATH` for a number of different binary names. If the browser you are trying to use does not exist under one of the expected binary names, Cypress will not be able to find it.\n\n| Browser Name | Expected Binary Name(s) |\n| --- | --- |\n| `chrome` | `google-chrome`, `chrome`, or `google-chrome-stable` |\n| `chromium` | `chromium-browser` or `chromium` |\n| `chrome:canary` | `google-chrome-canary` |\n\nThese binary names should work for most Linux distributions. If your distribution packages browsers under a different binary name, you can add a symlink using the expected binary name so that Cypress can detect it.\n\nFor example, if your distribution packages Google Chrome as `chrome`, you could add a symlink to `google-chrome` like this:\n\n```\nsudo ln `which chrome` /usr/local/bin/google-chrome\n```\n\n### Windows[​](#Windows \"Direct link to Windows\")\n\nOn Windows, Cypress scans the following locations to try to find each browser:\n\n| Browser Name | Expected Path |\n| --- | --- |\n| `chrome` | `C:/Program Files (x86)/Google/Chrome/Application/chrome.exe` |\n| `chromium` | `C:/Program Files (x86)/Google/chrome-win32/chrome.exe` |\n| `chrome:canary` | `%APPDATA%/../Local/Google/Chrome SxS/Application/chrome.exe` |\n\nFor the current list, see [packages/launcher](https://github.com/cypress-io/cypress/blob/develop/packages/launcher/lib/windows/index.ts) files.\n\nTo make a browser installed at a different path be auto-detected, create a symbolic link using `mklink` in the location that Cypress expects to find your browser.\n\n[Read more about creating symbolic links on Windows](https://www.howtogeek.com/howto/16226/complete-guide-to-symbolic-links-symlinks-on-windows-or-linux/)\n\nOccasionally Cypress will have issues detecting the type of browser in Windows environments. To manually detect the browser type, append the browser type to the end of the path:\n\n```\ncypress open --browser C:/User/Application/browser.exe:chrome\n```\n\n## Allow the Cypress Chrome extension[​](#Allow-the-Cypress-Chrome-extension \"Direct link to Allow the Cypress Chrome extension\")\n\nCypress utilizes a Chrome extension in order to run properly. If you or your company block specific Chrome extensions, this may cause problems with running Cypress. You will want to ask your administrator to allow the Cypress extension ID below:\n\n```\ncaljajdfkjjjdehjdoimjkkakekklcck\n```\n\nYou can check the current company policies for your Chrome installation by typing `chrome://policy` into the address bar and pressing Enter.\n\n## Allow Cypress URLs on VPNs[​](#Allow-Cypress-URLs-on-VPNs \"Direct link to Allow Cypress URLs on VPNs\")\n\nTo send the data and results of your tests to [Cypress Cloud](https://on.cypress.io/cloud-introduction), Cypress needs free access to some URLs.\n\nIf you are running the tests from within a restrictive VPN you will need to allow some URLs so that Cypress can have effective communication with Cypress Cloud.\n\n**The URLs are the following:**\n\n*   `https://api.cypress.io` - **Cypress API**\n*   `https://assets.cypress.io` - **Asset CDN** (Org logos, icons, videos, screenshots, etc.)\n*   `https://authenticate.cypress.io` - **Authentication API**\n*   `https://capture.cypress.io` - **Cypress Test Replay**\n*   `https://s3.amazonaws.com/capture.cypress.io` - **Uploading Cypress Test Replay from Test Runner**\n*   `https://cloud.cypress.io` - **Cypress Cloud**\n*   `https://docs.cypress.io` - **Cypress documentation**\n*   `https://download.cypress.io` - **CDN download of Cypress binary**\n*   `https://on.cypress.io` - **URL shortener for link redirects**\n\n**If you are using GitHub Enterprise or GitLab for Enterprise (Self-managed), you may also need to add the following to the version control IP allowlist:**\n\n*   `3.211.102.119` - **Dedicated IP**\n*   `18.213.72.78` - **Dedicated IP**\n*   `35.169.145.173` - **Dedicated IP**\n*   `44.199.152.70` - **Dedicated IP**\n*   `52.70.95.89` - **Dedicated IP**\n\n## Clear App Data[​](#Clear-App-Data \"Direct link to Clear App Data\")\n\nCypress maintains some local application data in order to save user preferences and more quickly start up. Sometimes this data can become corrupted. You may fix an issue you have by clearing this app data.\n\n### To clear App Data[​](#To-clear-App-Data \"Direct link to To clear App Data\")\n\n1.  Open Cypress via `cypress open`\n2.  Go to `Developer Tools` -> `View App Data`\n3.  This will take you to the directory in your file system where your App Data is stored. If you cannot open Cypress, search your file system for a directory named `cy` whose content should look something like this:\n\n```\n📂 production  📄 all.log  📁 browsers  📁 bundles  📄 cache  📁 projects  📁 proxy  📄 state.json\n```\n\n4.  Delete everything in the `cy` folder\n5.  Close Cypress and open it up again\n\n## Print DEBUG logs[​](#Print-DEBUG-logs \"Direct link to Print DEBUG logs\")\n\nCypress is built using the [debug](https://github.com/visionmedia/debug) module. That means you can receive helpful debugging output by running Cypress with this turned on. **Note:** you will see a LOT of messages when running with `DEBUG=...` setting.\n\n**On Mac or Linux:**\n\n```\nDEBUG=cypress:* cypress run\n```\n\n**On Windows:**\n\nOn Windows, you'll need to run the command in a command prompt terminal (not PowerShell).\n\n```\nset DEBUG=cypress:*cypress run\n```\n\nIf you have issues with the logs not printing, it may be a permissions issue with setting the environment variable in your terminal. You may need to run your terminal in administrative mode or review your permission settings.\n\nRead more [about the CLI options here](https://docs.cypress.io/guides/guides/command-line#Debugging-commands) and [Good Logging](https://glebbahmutov.com/blog/good-logging/) blog post.\n\n### Detailed Logs[​](#Detailed-Logs \"Direct link to Detailed Logs\")\n\nThere are several levels of `DEBUG` messages\n\n```\n## prints very few top-level messagesDEBUG=cypress:server ...## prints ALL messages from server packageDEBUG=cypress:server* ...## prints messages only from config parsingDEBUG=cypress:server:config ...\n```\n\nThis allows you to isolate the problem a little better\n\n### Log sources[​](#Log-sources \"Direct link to Log sources\")\n\nCypress is built from multiple packages, each responsible for its own logging: server, reporter, driver, command line, etc. Each package writes debug logs under a different source. Here are a few common log sources and when you might want to enable them\n\n| Set `DEBUG` to value | To enable debugging |\n| --- | --- |\n| `cypress:cli` | The top-level command line parsing problems |\n| `cypress:server:args` | Incorrect parsed command line arguments |\n| `cypress:server:specs` | Not finding the expected specs |\n| `cypress:server:project` | Opening the project |\n| `cypress:server:browsers` | Finding installed browsers |\n| `cypress:launcher` | Launching the found browser |\n| `cypress:server:video` | Video recording |\n| `cypress:network:*` | Adding network interceptors |\n| `cypress:net-stubbing*` | Network interception in the proxy layer |\n| `cypress:server:reporter` | Problems with test reporters |\n| `cypress:server:preprocessor` | Processing specs |\n| `cypress:server:socket-e2e` | Watching spec files |\n| `cypress:server:task` | Invoking the `cy.task()` command |\n| `cypress:server:socket-base` | Debugging `cy.request()` command |\n| `cypress:webpack` | Bundling specs using webpack |\n| `cypress:server:fixture` | Loading fixture files |\n| `cypress:server:record:ci-info` | Git commit and CI information when recording to Cypress Cloud |\n\nYou can combine several areas together using the comma character. For example, to debug specs not being found, use:\n\n```\n## see how CLI arguments were parsed## and how Cypress tried to locate spec filesDEBUG=cypress:cli,cypress:server:specs npx cypress run --spec ...\n```\n\nYou can also exclude a log source using `-` character. For example, to see all `cypress:server*` messages without noisy browser messages use:\n\n```\nDEBUG=cypress:server*,-cypress:server:browsers* npx cypress run\n```\n\n#### Debug log depth[​](#Debug-log-depth \"Direct link to Debug log depth\")\n\nSometimes the logged object has deeply nested properties and is shown as `[Object]` instead of the full serialization.\n\n```\nDEBUG=cypress:server:socket-base npx cypress runcypress:server:socket-base backend:request { eventName: 'http:request', args:  [ { url: 'http://localhost:7065/echo', method: 'POST', body: [Object], auth: [Object],  json: true, encoding: 'utf8', gzip: true, timeout: 30000, followRedirect: true,  failOnStatusCode: true, retryOnNetworkFailure: true,  retryOnStatusCodeFailure: false } ] } +5ms\n```\n\nYou can increase the printed object depth using the `DEBUG_DEPTH` environment variable\n\n```\nDEBUG=cypress:server:socket-base DEBUG_DEPTH=3 npx cypress runcypress:server:socket-base backend:request { eventName: 'http:request', args:  [ { url: 'http://localhost:7065/echo', method: 'POST', body: { text: 'ping!' },  auth: { username: 'jane.lane', password: 'password123' }, json: true, encoding: 'utf8',  gzip: true, timeout: 30000, followRedirect: true, failOnStatusCode: true,  retryOnNetworkFailure: true, retryOnStatusCodeFailure: false } ] } +4ms\n```\n\n#### 3rd party modules[​](#3rd-party-modules \"Direct link to 3rd party modules\")\n\nSome 3rd party modules like [@cypress/request](https://github.com/cypress-io/request) output additional log messages by inspecting the `NODE_DEBUG` environment variable. For example to debug the network interception and the requests made by the `@cypress/request` use:\n\n```\nDEBUG=cypress:net-stubbing:server:intercept-request \\  NODE_DEBUG=request npx cypress run\n```\n\n### Debug logs in the browser[​](#Debug-logs-in-the-browser \"Direct link to Debug logs in the browser\")\n\nIf the problem is seen during `cypress open` you can print debug logs in the browser too. Open the browser's Developer Tools and set a `localStorage` property:\n\n```\nlocalStorage.debug = 'cypress*'// to disable debug messagesdelete localStorage.debug\n```\n\nReload the browser and turn on 'Verbose' logs to see debug messages within the Developer Tools console. You will only see the **cypress:driver** package logs that run in the browser, as you can see below.\n\n![Debug logs in browser](https://docs.cypress.io/img/api/debug/debug-driver.jpg)\n\n## Log memory and CPU usage[​](#Log-memory-and-CPU-usage \"Direct link to Log memory and CPU usage\")\n\nYou can tell Cypress to log out a summary of the memory and CPU usage of itself and any subprocesses at a regular interval by enabling the `cypress:server:util:process_profiler` debug stream, like so:\n\n**On Mac or Linux:**\n\n```\nDEBUG=cypress:server:util:process_profiler cypress run\n```\n\n**On Windows:**\n\n```\nset DEBUG=cypress:server:util:process_profilercypress run\n```\n\nIn the resulting output, processes are grouped by their name.\n\n![Process printout of Cypress in CLI](https://docs.cypress.io/img/guides/troubleshooting/troubleshooting-cypress-process-profiler-cli.jpg)\n\nBy default, process information is collected and summarized is printed once every 10 seconds. You can override this interval by setting the `CYPRESS_PROCESS_PROFILER_INTERVAL` environment variable to the desired interval in milliseconds.\n\nYou can also obtain more detailed per-process information by enabling the verbose `cypress-verbose:server:util:process_profiler` debug stream.\n\n## Disable the Command Log[​](#Disable-the-Command-Log \"Direct link to Disable the Command Log\")\n\nIn some cases the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log), responsible for displaying test commands, assertions, and statuses in the Cypress Test Runner, may cause performance issues resulting in slower tests or the browser crashing.\n\nIn order to isolate these issues, you can hide the Command Log by passing the environment variable below during `cypress open` or `cypress run`.\n\n```\nCYPRESS_NO_COMMAND_LOG=1 cypress run\n```\n\nYou can also hide the entire Cypress Runner UI in `cypress run` by passing the [`--no-runner-ui`](https://docs.cypress.io/guides/guides/command-line#cypress-run-no-runner-ui) command line flag.\n\n```\ncypress run --no-runner-ui\n```\n\nWith this variable set, Cypress will skip rendering the Command Log entirely, and perform none of the usual DOM updates to display information about commands and statuses as the test runs.\n\n**Note:** With this variable set, screenshots and videos will not include the Command Log.\n\n## Additional information[​](#Additional-information \"Direct link to Additional information\")\n\n### Write command log to the terminal[​](#Write-command-log-to-the-terminal \"Direct link to Write command log to the terminal\")\n\nYou can include the plugin [cypress-failed-log](https://github.com/bahmutov/cypress-failed-log) in your tests. This plugin writes the list of Cypress commands to the terminal as well as a JSON file if a test fails.\n\n![cypress-failed-log terminal output](https://docs.cypress.io/img/api/debug/failed-log.png)\n\n## Hacking on Cypress[​](#Hacking-on-Cypress \"Direct link to Hacking on Cypress\")\n\nIf you want to dive into Cypress and edit the code yourself, you can do that. The Cypress code is open source and licensed under an [MIT license](https://github.com/cypress-io/cypress/blob/develop/LICENSE). There are a few tips on getting started that we've outlined below.\n\n### Contribute[​](#Contribute \"Direct link to Contribute\")\n\nIf you'd like to contribute directly to the Cypress code, we'd love to have your help! Please check out our [contributing guide](https://github.com/cypress-io/cypress/blob/develop/CONTRIBUTING.md) to learn about the many ways you can contribute.\n\n### Run Cypress by itself[​](#Run-Cypress-by-itself \"Direct link to Run Cypress by itself\")\n\nCypress comes with an npm CLI module that parses the arguments, starts the Xvfb server (if necessary), and then opens Cypress.\n\nSome common situations on why you would want to run Cypress by itself are to:\n\n*   debug Cypress not starting or hanging\n*   debug problems related to the way CLI arguments are parsed by the npm CLI module\n\nHere is how you can launch Cypress directly without the npm CLI module. First, find where the binary is installed using the [cypress cache path](https://docs.cypress.io/guides/guides/command-line#cypress-cache-path) command.\n\nFor example, on a Linux machine:\n\n```\nnpx cypress cache path/root/.cache/Cypress\n```\n\nSecond, try a smoke test that verifies that the application has all its required dependencies present on the host machine:\n\n```\n/root/.cache/Cypress/3.3.1/Cypress/Cypress --smoke-test --ping=101101\n```\n\nIf there is a missing dependency, the application should print an error message. You can see the Electron verbose log messages by setting an [environment variable ELECTRON\\_ENABLE\\_LOGGING](https://www.electronjs.org/docs/api/command-line-switches):\n\n```\nELECTRON_ENABLE_LOGGING=true DISPLAY=10.130.4.201:0 /root/.cache/Cypress/3.3.1/Cypress/Cypress --smoke-test --ping=101[809:0617/151243.281369:ERROR:bus.cc(395)] Failed to connect to the bus: Failed to connect to socket /var/run/dbus/system_bus_socket: No such file or directory101\n```\n\nIf the smoke test fails to execute, check if a shared library is missing (a common problem on Linux machines without all of the Cypress dependencies present).\n\n```\nldd /home/person/.cache/Cypress/3.3.1/Cypress/Cypress  linux-vdso.so.1 (0x00007ffe9eda0000)  libnode.so => /home/person/.cache/Cypress/3.3.1/Cypress/libnode.so (0x00007fecb43c8000)  libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fecb41ab000)  libgtk-3.so.0 => not found  libgdk-3.so.0 => not found  ...\n```\n\n**Tip:** use [Cypress Docker image](https://docs.cypress.io/examples/docker) or install dependencies by copying them from one of our official Docker images.\n\n**Note:** verbose Electron logging might show warnings that still allow Cypress to work normally. For example, Cypress opens normally despite the scary output below:\n\n```\nELECTRON_ENABLE_LOGGING=true DISPLAY=10.130.4.201:0 /root/.cache/Cypress/3.3.1/Cypress/Cypress[475:0617/150421.326986:ERROR:bus.cc(395)] Failed to connect to the bus: Failed to connect to socket /var/run/dbus/system_bus_socket: No such file or directory[475:0617/150425.061526:ERROR:bus.cc(395)] Failed to connect to the bus: Could not parse server address: Unknown address type (examples of valid types are \"tcp\" and on UNIX \"unix\")[475:0617/150425.079819:ERROR:bus.cc(395)] Failed to connect to the bus: Could not parse server address: Unknown address type (examples of valid types are \"tcp\" and on UNIX \"unix\")[475:0617/150425.371013:INFO:CONSOLE(73292)] \"%cDownload the React DevTools for a better development experience: https://fb.me/react-devtoolsYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq\", source: file:///root/.cache/Cypress/3.3.1/Cypress/resources/app/packages/desktop-gui/dist/app.js (73292)\n```\n\nYou can also see verbose Cypress logs when running the Cypress binary\n\n```\nDEBUG=cypress* DISPLAY=10.130.4.201:0 /root/.cache/Cypress/3.3.1/Cypress/Cypress --smoke-test --ping=101cypress:ts Running without ts-node hook in environment \"production\" +0mscypress:server:cypress starting cypress with argv [ '/root/.cache/Cypress/3.3.1/Cypress/Cypress', '--smoke-test', '--ping=101' ] +0mscypress:server:args argv array: [ '/root/.cache/Cypress/3.3.1/Cypress/Cypress', '--smoke-test', '--ping=101' ] +0mscypress:server:args argv parsed: { _: [ '/root/.cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 101, cwd: '/root/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server' } +7mscypress:server:args options { _: [ '/root/.cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 101, cwd: '/root/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server', config: {} } +2mscypress:server:args argv options: { _: [ '/root/.cache/Cypress/3.3.1/Cypress/Cypress' ], smokeTest: true, ping: 101, cwd: '/root/.cache/Cypress/3.3.1/Cypress/resources/app/packages/server', config: {}, pong: 101 } +1mscypress:server:appdata path: /root/.config/Cypress/cy/production +0mscypress:server:cypress starting in mode smokeTest +356ms101cypress:server:cypress about to exit with code 0 +4ms\n```\n\nIf the smoke test does not show a specific error yet fails, try printing the Electron crash stack to maybe pinpoint the problem better:\n\n```\nELECTRON_ENABLE_STACK_DUMPING=1 npx cypress verify...Received signal 11 SEGV_MAPERR ffffffb27e8955bb#0 0x55c6389f83d9 (/root/.cache/Cypress/3.8.2/Cypress/Cypress+0x35d13d8)r8: 0000000000000000  r9: 00007ffcf0387c80 r10: 00007ffcf0387bd8 r11: 000000000000000er12: 00007ffcf0387d2c r13: 00007f3ea737b720 r14: ffffffb27e89558b r15: 00007f3ea8974200di: 0000000000000000  si: 0000000000000020  bp: 0000000000000000  bx: 0000004f2f375580dx: 0000000000000001  ax: 0000000000000030  cx: 0000000000000001  sp: 00007ffcf0387d00ip: 00007f3ea89582dd efl: 0000000000010246 cgf: 002b000000000033 erf: 0000000000000005trp: 000000000000000e msk: 0000000000000000 cr2: ffffffb27e8955bb[end of stack trace]Calling _exit(1). Core file will not be generated.\n```\n\n### Patch Cypress[​](#Patch-Cypress \"Direct link to Patch Cypress\")\n\nCypress comes with an npm CLI module that parses the arguments, starts the Xvfb server (if necessary), and then opens Cypress.\n\nIf you're encountering a bug in the current version of Cypress, you can implement a temporary fix by patching Cypress in your own project. Here is an example of how to do this.\n\n1.  Install [patch-package](https://github.com/ds300/patch-package).\n2.  Add a patch step to your CI configuration after installing your npm packages.\n\n```\n- run: npm ci- run: npx patch-package\n```\n\nAlternatively, you can apply the patch during a post-install phase. In your `package.json`, for example, you could add the following:\n\n```\n{  \"scripts\": {    \"postinstall\": \"patch-package\"  }}\n```\n\n3.  Edit the line causing the problem _in your local node\\_modules folder_ within `node_modules/cypress`.\n4.  Run the `npx patch-package cypress` command. This command will create a new file `patches/cypress+3.4.1.patch`.\n\n```\nnpx patch-package cypresspatch-package 6.1.2• Creating temporary folder• Installing cypress@3.4.1 with npm• Diffing your files with clean files✔ Created file patches/cypress+3.4.1.patch\n```\n\n5.  Commit the new `patches` folder to git.\n\ninfo\n\nIf you find a patch for an error, please add a comment explaining your workaround to the relevant Cypress GitHub issue. It will help us release an official fix faster.",
    "title": "Troubleshooting | Cypress Documentation",
    "description": "There are times when you will encounter errors or unexpected behavior with",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/guides/test-retries",
    "markdown": "# Test Retries | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   What are test retries?\n*   Why are test retries important?\n*   How to configure test retries\n\n## Introduction[​](#Introduction \"Direct link to Introduction\")\n\nEnd-to-end (E2E) tests excel at testing complex systems. However, there are still behaviors that are hard to verify and make tests flaky (i.e., unreliable) and fail sometimes due to unpredictable conditions (eg., temporary outages in external dependencies, random network errors, etc.). Some other common race conditions that could result in unreliable tests include:\n\n*   Animations\n*   API calls\n*   Test server / database availability\n*   Resource dependencies availability\n*   Network issues\n\nWith test retries, Cypress is able to retry failed tests to help [detect test flakiness](https://docs.cypress.io/guides/cloud/flaky-test-management#Flake-Detection) and continuous integration (CI) build failures. By doing so, this will save your team valuable time and resources so you can focus on what matters most to you.\n\n## How It Works[​](#How-It-Works \"Direct link to How It Works\")\n\ninfo\n\nYou may want to use the [experimental test retries](https://docs.cypress.io/guides/references/experiments#Experimental-Test-Retries) feature which offers more options for [detecting flaky tests](https://docs.cypress.io/guides/cloud/flaky-test-management#Flake-Detection). This experimental feature is available as of Cypress `13.4.0`.\n\nTest retries were originally intended to give failing tests more chances to \"pass\" (for instance, if CI environments for testing are unreliable), while still being determined as flaky if they do eventually pass. However this may not be the desired result in all cases. Experimental retries give you control over the conditions of the pass or fail result.\n\nBy default, tests will not retry when they fail. You will need to [enable test retries in your configuration](#Configure-Test-Retries) to use this feature.\n\nOnce test retries are enabled, tests can be configured to have X number of retry attempts. For example, if test retries has been configured with `2` retry attempts, Cypress will retry tests up to 2 additional times (for a total of 3 attempts) before potentially being marked as a failed test.\n\nWhen each test is run again, the following [hooks](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Hooks) will be re-run also:\n\n*   `beforeEach`\n*   `afterEach`\n\ncaution\n\nHowever, failures in `before` and `after` hooks will not trigger a retry.\n\n**The following is a detailed step-by-step example of how test retries works:**\n\nAssuming we have configured test retries with `2` retry attempts (for a total of 3 attempts), here is how the tests might run:\n\n1.  A test runs for the first time. If the\n    \n    test passes, Cypress will move forward with any remaining tests as usual.\n    \n2.  If the test fails, Cypress will tell you that the first attempt failed and will attempt to run the test a second time.\n    \n\n![](https://docs.cypress.io/img/guides/test-retries/v10/attempt-2-start.png)\n\n3.  If the test passes after the second attempt, Cypress will continue with any remaining tests.\n    \n4.  If the test fails a second time, Cypress will make the final third attempt to re-run the test.\n    \n\n![](https://docs.cypress.io/img/guides/test-retries/v10/attempt-3-start.png)\n\n5.  If the test fails a third time, Cypress will mark the test as failed and then move on to run any remaining tests.\n\n![](https://docs.cypress.io/img/guides/test-retries/v10/attempt-3-fail.png)\n\nThe following is a screen capture of what test retries looks like on the same failed test when run via [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run).\n\n![](https://docs.cypress.io/img/guides/test-retries/cli-error-message.png)\n\nDuring [cypress open](https://docs.cypress.io/guides/guides/command-line#cypress-open) you will be able to see the number of attempts made in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) and expand each attempt for review and debugging if desired.\n\n## Configure Test Retries[​](#Configure-Test-Retries \"Direct link to Configure Test Retries\")\n\n### Global Configuration[​](#Global-Configuration \"Direct link to Global Configuration\")\n\nTypically you will want to define different retry attempts for `cypress run` versus `cypress open`. You can configure this in the [Cypress configuration](https://docs.cypress.io/guides/references/configuration#Global) by passing the `retries` option an object with the following options:\n\n*   `runMode` allows you to define the number of test retries when running `cypress run`\n*   `openMode` allows you to define the number of test retries when running `cypress open`\n\n```\n{  retries: {    // Configure retry attempts for `cypress run`    // Default is 0    runMode: 2,    // Configure retry attempts for `cypress open`    // Default is 0    openMode: 0  }}\n```\n\n#### Configure retry attempts for all modes[​](#Configure-retry-attempts-for-all-modes \"Direct link to Configure retry attempts for all modes\")\n\nIf you want to configure the retry attempts for all tests run in both `cypress run` and `cypress open`, you can configure this in the [Cypress configuration](https://docs.cypress.io/guides/references/configuration#Global) by defining the `retries` property and setting the desired number of retries.\n\n### Custom Configurations[​](#Custom-Configurations \"Direct link to Custom Configurations\")\n\n#### Individual Test(s)[​](#Individual-Tests \"Direct link to Individual Test(s)\")\n\nIf you want to configure retry attempts on a specific test, you can set this by using the [test's configuration](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Configuration).\n\n```\n// Customize retry attempts for an individual testdescribe('User sign-up and login', () => {  // `it` test block with no custom configuration  it('should redirect unauthenticated user to sign-in page', () => {    // ...  })  // `it` test block with custom configuration  it(    'allows user to login',    {      retries: {        runMode: 2,        openMode: 1,      },    },    () => {      // ...    }  )})\n```\n\n#### Test Suite(s)[​](#Test-Suites \"Direct link to Test Suite(s)\")\n\nIf you want to configure try attempts for a suite of tests, you can do this by setting the suite's configuration.\n\n```\n// Customizing retry attempts for a suite of testsdescribe(  'User bank accounts',  {    retries: {      runMode: 2,      openMode: 1,    },  },  () => {    // The per-suite configuration is applied to each test    // If a test fails, it will be retried    it('allows a user to view their transactions', () => {      // ...    })    it('allows a user to edit their transactions', () => {      // ...    })  })\n```\n\nYou can find more information about custom configurations here: [Test Configuration](https://docs.cypress.io/guides/references/configuration#Test-Configuration)\n\n## Screenshots[​](#Screenshots \"Direct link to Screenshots\")\n\nWhen a test retries, Cypress will continue to take screenshots for each failed attempt or [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot) and suffix each new screenshot with `(attempt n)`, corresponding to the current retry attempt number.\n\nWith the following test code, you would see the below screenshot filenames when all 3 attempts fail:\n\n*   End-to-End Test\n*   Component Test\n\n```\ndescribe('User Login', () => {  it('displays login errors', () => {    cy.visit('/')    cy.screenshot('user-login-errors')    // ...  })})\n```\n\n```\n// screenshot filename from cy.screenshot() on 1st attempt'user-login-errors.png'// screenshot filename on 1st failed attempt'user-login-errors (failed).png'// screenshot filename from cy.screenshot() on 2nd attempt'user-login-errors (attempt 2).png'// screenshot filename on 2nd failed attempt'user-login-errors (failed) (attempt 2).png'// screenshot filename from cy.screenshot() on 3rd attempt'user-login-errors (attempt 3).png'// screenshot filename on 3rd failed attempt'user-login-errors (failed) (attempt 3).png'\n```\n\n## Videos[​](#Videos \"Direct link to Videos\")\n\nYou can use Cypress's [`after:spec`](https://docs.cypress.io/api/plugins/after-spec-api) event listener that fires after each spec file is run to delete the recorded video for specs that had no retry attempts or failures. Deleting passing and non-retried videos after the run can save resource space on the machine as well as skip the time used to process, compress, and upload the video to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction).\n\n### Only upload videos for specs with failing or retried tests[​](#Only-upload-videos-for-specs-with-failing-or-retried-tests \"Direct link to Only upload videos for specs with failing or retried tests\")\n\nThe example below shows how to delete the recorded video for specs that had no retry attempts or failures when using Cypress test retries.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')// need to install these dependencies// npm install lodash del --save-devconst _ = require('lodash')const del = require('del')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      on('after:spec', (spec, results) => {        if (results && results.video) {          // Do we have failures for any retry attempts?          const failures = _.some(results.tests, (test) => {            return _.some(test.attempts, { state: 'failed' })          })          if (!failures) {            // delete the video if the spec passed and no tests retried            return del(results.video)          }        }      })    },  },})\n```\n\n## Cypress Cloud[​](#Cypress-Cloud \"Direct link to Cypress Cloud\")\n\nIf you are using [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction), information related to test retries is displayed on the Test Results tab for a run. Selecting the Flaky filter will show tests that retried and then passed during the run.\n\nThese tests are also indicated with a \"Flaky\" badge on the Latest Runs page and Test Results tab on the Run Details page.\n\nClicking on a Test Result will open the Test Case History screen. This demonstrates the number of failed attempts, the screenshots and/or videos of failed attempts, and the error for failed attempts.\n\n![Flake artifacts and errors](https://docs.cypress.io/img/guides/test-retries/flake-artifacts-and-errors.png)\n\nYou can also see the Flaky Rate for a given test.\n\n![Flaky rate](https://docs.cypress.io/img/guides/test-retries/flaky-rate.png)\n\nFor a comprehensive view of how flake is affecting your overall test suite, you can review the [Flake Detection](https://docs.cypress.io/guides/cloud/flaky-test-management#Flake-Detection) and [Flake Alerting](https://docs.cypress.io/guides/cloud/flaky-test-management#Flake-Alerting) features highlighted in the Test Flake Management Guide.\n\ntip\n\n**Debugging Cypress Cloud Test Runs?**\n\nDon't rely on artifact representations or reproducing failing conditions locally. Replay the test as it executed during the recorded run with full debug capability using [![](https://docs.cypress.io/img/guides/cloud/test-replay/replay-icon.svg) Test Replay](https://docs.cypress.io/guides/cloud/test-replay).\n\n## Frequently Asked Questions (FAQs)[​](#Frequently-Asked-Questions-FAQs \"Direct link to Frequently Asked Questions (FAQs)\")\n\n### Will retried tests be counted as more than one test result in my billing?[​](#Will-retried-tests-be-counted-as-more-than-one-test-result-in-my-billing \"Direct link to Will retried tests be counted as more than one test result in my billing?\")\n\nNo. Tests recorded during `cypress run` with the `--record` flag will be counted the same with or without test retries.\n\nWe consider each time the `it()` function is called to be a single test for billing purposes. The test retrying will not count as extra test results in your billing.\n\nYou can always see how many tests you've recorded from your organization's Billing & Usage page within [Cypress Cloud](https://on.cypress.io/cloud).\n\n### Can I access the current attempt counter from the test?[​](#Can-I-access-the-current-attempt-counter-from-the-test \"Direct link to Can I access the current attempt counter from the test?\")\n\nYes, although ordinarily you would not have to, since this is a low-level detail. But if you want to use the current attempt number, you can use [`Cypress.currentRetry`](https://docs.cypress.io/api/cypress-api/currentretry). If you want to determine the total allowed attempts you can do the following:\n\n```\nit('does something differently on retry', { retries: 3 }, () => {  // Cypress.currentRetry returns the current test retry count  const attempt = Cypress.currentRetry  // cy.state('runnable') returns the current test object  // we can grab the total allowed attempts from its properties  const retries = cy.state('runnable')._retries  // use the \"attempt\" and \"retries\" values somehow})\n```\n\nThe above `attempt` variable will have values 0 through 3 (the first default test execution plus three allowed retries). The `retries` constant in this case is always 3.\n\n**Tip:** Cypress [bundles Lodash](https://docs.cypress.io/api/utilities/_) library. Use its helper methods to safely access a property of an object. Let's make sure the function supports different Cypress versions by falling back to the default values.\n\n```\nit('does something differently on retry', { retries: 3 }, () => {  // _.get: if the object or property is missing use the provided default value  const attempt = Cypress.currentRetry  const retries = Cypress._.get(cy.state('runnable'), '_retries', 0)  // use the \"attempt\" and \"retries\" values somehow})\n```",
    "title": "Test Retries | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/examples/docker",
    "markdown": "# Docker | Cypress Documentation\n\n## Images[​](#Images \"Direct link to Images\")\n\n[https://github.com/cypress-io/cypress-docker-images](https://github.com/cypress-io/cypress-docker-images)\n\nThis repo holds the documentation, build and publish code for various Docker images for running Cypress locally and in CI.\n\nThe following types of Cypress Docker images are available:\n\n*   [cypress/base](https://github.com/cypress-io/cypress-docker-images/tree/master/base)`:<Node version>` has the operating system dependencies required to run Cypress.\n*   [cypress/browsers](https://github.com/cypress-io/cypress-docker-images/tree/master/browsers)`:<tag>` extends the base images with pre-installed browsers.\n*   [cypress/included](https://github.com/cypress-io/cypress-docker-images/tree/master/included)`:<Cypress version>` extends the browsers images with pre-installed Cypress versions.\n*   [cypress/factory](https://github.com/cypress-io/cypress-docker-images/tree/master/factory)`:<Factory version>` is a Docker image that can be used with [`ARG`](https://docs.docker.com/reference/dockerfile/#arg) instructions in a custom-built [`Dockerfile`](https://docs.docker.com/reference/dockerfile/) to generate a new Docker image with specific versions of Node.js, Yarn v1 Classic, Chrome, Firefox, Edge and Cypress. It's used to create the above Docker images and can be used by you to create a custom Docker image with versions of your choice.\n\n## Examples[​](#Examples \"Direct link to Examples\")\n\n*   See [CI Docker examples](https://docs.cypress.io/guides/continuous-integration/introduction#CI-Docker-examples) for examples of using Cypress Docker images in Continuous Integration (CI)\n*   See [Docker usage examples](https://github.com/cypress-io/cypress-docker-images/blob/master/README.md#examples) in the [cypress-io/cypress-docker-images](https://github.com/cypress-io/cypress-docker-images) repo",
    "title": "Docker | Cypress Documentation",
    "description": "Images",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/component-testing/react/overview",
    "markdown": "# React Component Testing | Cypress Documentation\n\n## Framework Support[​](#Framework-Support \"Direct link to Framework Support\")\n\nCypress Component Testing currently supports React 16+ with the following frameworks:\n\n*   [Create React App](#Create-React-App-CRA)\n*   [Next.js](#Nextjs)\n*   [React with Vite](#React-with-Vite)\n*   [React with Webpack](#React-with-Webpack)\n\n## Tutorial[​](#Tutorial \"Direct link to Tutorial\")\n\nVisit the [Getting Started Guide](https://docs.cypress.io/guides/component-testing/getting-started) for a step-by-step tutorial on adding component testing to any project and how to write your first tests.\n\n## Installation[​](#Installation \"Direct link to Installation\")\n\nTo get up and running with Cypress Component Testing in React, install Cypress into your project:\n\n```\nnpm install cypress --save-dev\n```\n\nOpen Cypress:\n\n![Choose Component Testing](https://docs.cypress.io/img/guides/component-testing/select-test-type.jpg)\n\nChoose Component Testing\n\nThe Cypress Launchpad will guide you through configuring your project.\n\ninfo\n\nFor a step-by-step guide on how to create a component test, refer to the [Getting Started](https://docs.cypress.io/guides/component-testing/getting-started) guide.\n\nFor usage and examples, visit the [React Examples](https://docs.cypress.io/guides/component-testing/react/examples) guide.\n\n## Framework Configuration[​](#Framework-Configuration \"Direct link to Framework Configuration\")\n\nCypress Component Testing works out of the box with [Create React App](https://create-react-app.dev/), [Next.js](https://nextjs.org/), [Vite](https://vitejs.dev/), and a custom [Webpack](https://webpack.js.org/) config. Cypress will automatically detect one of these frameworks during setup and configure them properly. The examples below are for reference purposes.\n\n### Create React App (CRA)[​](#Create-React-App-CRA \"Direct link to Create React App (CRA)\")\n\nCypress Component Testing works with CRA 4+.\n\n#### CRA Configuration[​](#CRA-Configuration \"Direct link to CRA Configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  component: {    devServer: {      framework: 'create-react-app',      bundler: 'webpack',    },  },})\n```\n\n#### Sample Create React Apps[​](#Sample-Create-React-Apps \"Direct link to Sample Create React Apps\")\n\n*   [CRA 4 with JavaScript](https://github.com/cypress-io/cypress-component-testing-apps/tree/main/react-cra4-js)\n*   [CRA 5 with TypeScript](https://github.com/cypress-io/cypress-component-testing-apps/tree/main/react-cra5-ts)\n\n### Next.js[​](#Nextjs \"Direct link to Next.js\")\n\nCypress Component Testing works with Next.js 11+.\n\n#### Next.js Configuration[​](#Nextjs-Configuration \"Direct link to Next.js Configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  component: {    devServer: {      framework: 'next',      bundler: 'webpack',    },  },})\n```\n\n#### Next.js Caveats[​](#Nextjs-Caveats \"Direct link to Next.js Caveats\")\n\nThere are some specific caveats to consider when testing Next.js [Pages](https://nextjs.org/docs/basic-features/pages) in component testing.\n\nA page component could have additional logic in its `getServerSideProps` or `getStaticProps` methods. These methods only run on the server, so they are not available to run inside a component test. Trying to test a page in a component test would result in the props being passed into the page to be undefined.\n\nWhile you could pass in props directly to the page component in a component test, that would leave these server-side methods untested. However, an end-to-end test would execute and test a page entirely.\n\nBecause of this, we recommend using E2E Testing over Component Testing for Next.js pages and Component Testing for individual components in a Next.js app.\n\n#### Sample Next.js Apps[​](#Sample-Nextjs-Apps \"Direct link to Sample Next.js Apps\")\n\n*   [Next.js 13 with TypeScript](https://github.com/cypress-io/cypress-component-testing-apps/tree/main/react-next13-ts)\n\n### React with Vite[​](#React-with-Vite \"Direct link to React with Vite\")\n\nCypress Component Testing works with React apps that use Vite 2+ as the bundler.\n\n#### Vite Configuration[​](#Vite-Configuration \"Direct link to Vite Configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')const customViteConfig = require('./customConfig')module.exports = defineConfig({  component: {    devServer: {      framework: 'react',      bundler: 'vite',      // optionally pass in vite config      viteConfig: customViteConfig,      // or a function - the result is merged with      // any `vite.config` file that is detected      viteConfig: async () => {        // ... do things ...        const modifiedConfig = await injectCustomConfig(baseConfig)        return modifiedConfig      },    },  },})\n```\n\n#### Sample React Vite Apps[​](#Sample-React-Vite-Apps \"Direct link to Sample React Vite Apps\")\n\n*   [React Vite with TypeScript](https://github.com/cypress-io/cypress-component-testing-apps/tree/main/react-vite-ts)\n\n### React with Webpack[​](#React-with-Webpack \"Direct link to React with Webpack\")\n\nCypress Component Testing works with React apps that use Webpack 4+ as the bundler.\n\n#### Webpack Configuration[​](#Webpack-Configuration \"Direct link to Webpack Configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')const webpackConfig = require('./webpack.config')module.exports = defineConfig({  component: {    devServer: {      framework: 'react',      bundler: 'webpack',      // optionally pass in webpack config      webpackConfig,      // or a function - the result is merged with any      // webpack.config that is found      webpackConfig: async () => {        // ... do things ...        const modifiedConfig = await injectCustomConfig(baseConfig)        return modifiedConfig      },    },  },})\n```\n\nIf you don't provide a webpack config, Cypress will try to infer it. If Cypress cannot do so, or you want to make modifications to your config, you can specify it via the `webpackConfig` option.\n\n#### Sample React Webpack Apps[​](#Sample-React-Webpack-Apps \"Direct link to Sample React Webpack Apps\")\n\n*   [React Webpack 5 with JavaScript](https://github.com/cypress-io/cypress-component-testing-apps/tree/main/react-webpack5-js)\n\n*   [Cypress Component Test Driven Design](https://muratkerem.gitbook.io/cctdd/)\n*   [Cypress React Component Test Examples](https://github.com/muratkeremozcan/cypress-react-component-test-examples)",
    "title": "React Component Testing | Cypress Documentation",
    "description": "Framework Support",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/guides/web-security",
    "markdown": "# Web Security | Cypress Documentation\n\nBrowsers adhere to a strict [same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy). This means that browsers restrict access between `<iframes>` when their origin policies do not match.\n\nBecause Cypress works from within the browser, Cypress must be able to directly communicate with your remote application at all times. Unfortunately, browsers naturally try to prevent Cypress from doing this.\n\nTo get around these restrictions, Cypress implements some strategies involving JavaScript code, the browser's internal APIs, and network proxying to _play by the rules_ of same-origin policy. It is our goal to fully automate the application under test without you needing to modify your application's code - and we are _mostly_ able to do this.\n\n#### Examples of what Cypress does under the hood:[​](#Examples-of-what-Cypress-does-under-the-hood \"Direct link to Examples of what Cypress does under the hood:\")\n\n*   Injects [`document.domain`](https://developer.mozilla.org/en-US/docs/Web/API/Document/domain) into `text/html` pages.\n*   Proxies all HTTP / HTTPS traffic.\n*   Changes the hosted URL to match that of the application under test.\n*   Uses the browser's internal APIs for network level traffic.\n\nWhen Cypress first loads, the internal Cypress web application is hosted on a random port: something like `http://localhost:64874/__/`.\n\nAfter the first [`cy.visit()`](https://docs.cypress.io/api/commands/visit) command is issued in a test, Cypress changes its URL to match the origin of your remote application, thereby solving the first major hurdle of same-origin policy. Your application's code executes the same as it does outside of Cypress, and everything works as expected.\n\ninfo\n\n**How is HTTPS supported?**\n\nCypress does some pretty interesting things under the hood to make testing HTTPS sites work. Cypress enables you to control and stub at the network level. Therefore, Cypress must assign and manage browser certificates to be able to modify the traffic in real time.\n\nYou'll notice Chrome display a warning that the 'SSL certificate does not match'. This is normal and correct. Under the hood we act as our own CA authority and issue certificates dynamically in order to intercept requests otherwise impossible to access. We only do this for the superdomain currently under test, and bypass other traffic. That's why if you open a tab in Cypress to another host, the certificates match as expected.\n\nNote, that Cypress allows you to optionally specify CA / client certificate information for use with HTTPS sites. See [Configuring client certificates](https://docs.cypress.io/guides/references/client-certificates). If the remote server requests a client certificate for a configured URL, Cypress will supply it.\n\n## Limitations[​](#Limitations \"Direct link to Limitations\")\n\nIt's important to note that although we do our **very best** to ensure your application works normally inside of Cypress, there _are_ some limitations you need to be aware of.\n\n### Different superdomain per test requires `cy.origin` command[​](#Different-superdomain-per-test-requires-cyorigin-command \"Direct link to Different-superdomain-per-test-requires-cyorigin-command\")\n\nCypress changes its own host URL to match that of your applications. With the exception of `cy.origin`, Cypress requires that the URLs navigated to have the [same superdomain](https://docs.cypress.io/guides/guides/cross-origin-testing#Parts-of-a-URL) for the entirety of a single test.\n\nIf you attempt to visit two different superdomains, the `cy.origin` command must be used to wrap Cypress commands of the second visited domain. Otherwise, Cypress commands will timeout after the navigation and will eventually error. This is because the commands that were expected to run on the second domain are actually being run on the first domain.\n\nWithout `cy.origin`, you can visit different superdomains in _different_ tests, but not in the _same_ test. Please read our [Cross Origin Testing Guide](https://docs.cypress.io/guides/guides/cross-origin-testing) for more information.\n\nAlthough Cypress tries to enforce this limitation, it is possible for your application to bypass Cypress's ability to detect this.\n\n#### Examples of test cases that will error without the use of `cy.origin`[​](#Examples-of-test-cases-that-will-error-without-the-use-of-cyorigin \"Direct link to Examples-of-test-cases-that-will-error-without-the-use-of-cyorigin\")\n\n1.  [`.click()`](https://docs.cypress.io/api/commands/click) an `<a>` with an `href` to a different superdomain with subsequent Cypress commands being run.\n2.  [`.submit()`](https://docs.cypress.io/api/commands/submit) a `<form>` that causes your web server to redirect to you a different superdomain where additional Cypress commands are run.\n3.  Issue a JavaScript redirect in your application, such as `window.location.href = '...'`, to a different superdomain where additional Cypress commands are run.\n\nIn each of these situations, Cypress will lose the ability to automate your application and will error via command timeout unless the `cy.origin` command is used.\n\nRead on to learn about [working around these common problems](https://docs.cypress.io/guides/guides/web-security#Common-Workarounds).\n\n### Cross-origin iframes[​](#Cross-origin-iframes \"Direct link to Cross-origin iframes\")\n\nIf your site embeds an `<iframe>` that is a cross-origin frame, Cypress will not be able to automate or communicate with this `<iframe>`.\n\n#### Examples of uses for cross-origin iframes[​](#Examples-of-uses-for-cross-origin-iframes \"Direct link to Examples of uses for cross-origin iframes\")\n\n*   Embedding a Vimeo or YouTube video.\n*   Displaying a credit card form from Stripe or Braintree.\n*   Displaying an embedded login form from Auth0.\n*   Showing comments from Disqus.\n\nIt's actually _possible_ for Cypress to accommodate these situations the same way Selenium does, but you will never have _native_ access to these iframes from inside of Cypress.\n\nAs a workaround, you may be able to use [`window.postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) to directly communicate with these iframes and control them (if the 3rd party iframe supports it).\n\nOther than that, you'll have to wait for us to implement APIs to support this (check our [open issue](https://github.com/cypress-io/cypress/issues/136)), or you can [disable web security](https://docs.cypress.io/guides/guides/web-security#Disabling-Web-Security).\n\n### Insecure Content[​](#Insecure-Content \"Direct link to Insecure Content\")\n\nBecause of the way Cypress is designed, if you are testing an HTTPS site, Cypress will error anytime you attempt to navigate back to an HTTP site. This behavior helps highlight a _pretty serious security problem_ with your application.\n\n#### Example of accessing insecure content[​](#Example-of-accessing-insecure-content \"Direct link to Example of accessing insecure content\")\n\n```\n// Test codecy.visit('https://example.cypress.io')\n```\n\nIn your application code, you set `cookies` and store a session on the browser. Now let's imagine you have a single `insecure` link (or JavaScript redirect) in your application code.\n\n```\n{/* Application code */}<html>  <a href=\"http://example.cypress.io/page2\">Page 2</a></html>\n```\n\nCypress will immediately fail with the following test code:\n\n```\n// Test codecy.visit('https://example.cypress.io')cy.get('a').click() // will fail\n```\n\nBrowsers refuse to display insecure content on a secure page. Because Cypress initially changed its URL to match `https://example.cypress.io` when the browser followed the `href` to `http://example.cypress.io/page2`, the browser will refuse to display the contents.\n\nNow you may be thinking, _This sounds like a problem with Cypress because when I work with my application outside of Cypress it works just fine._\n\nHowever, the truth is, Cypress is exposing a _security vulnerability_ in your application, and you _want_ it to fail in Cypress.\n\n`cookies` that do not have their `secure` flag set to `true` will be sent as clear text to the insecure URL. This leaves your application vulnerable to session hijacking.\n\nThis security vulnerability exists **even if** your web server forces a `301 redirect` back to the HTTPS site. The original HTTP request was still made once, exposing insecure session information.\n\n#### The solution[​](#The-solution \"Direct link to The solution\")\n\nUpdate your HTML or JavaScript code to not navigate to an insecure HTTP page and instead only use HTTPS. Additionally make sure that cookies have their `secure` flag set to `true`.\n\nIf you're in a situation where you don't control the code, or otherwise cannot work around this, you can bypass this restriction in Cypress by [disabling web security](https://docs.cypress.io/guides/guides/web-security#Disabling-Web-Security).\n\n### Same port per test[​](#Same-port-per-test \"Direct link to Same port per test\")\n\nCypress requires that the URLs navigated to have the same port (if specified) for the entirety of a single test. This matches the behavior of the browser's normal [same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy).\n\n## Common Workarounds[​](#Common-Workarounds \"Direct link to Common Workarounds\")\n\nLet's investigate how you might encounter cross-origin errors in your test code and break down how to work around them in Cypress.\n\n### External Navigation[​](#External-Navigation \"Direct link to External Navigation\")\n\nThe most common situation where you might encounter this error is when you click on an `<a>` that navigates to another superdomain.\n\n```\n{/* Application code that is served at `localhost:8080` */}<html>  <a href=\"https://example.cypress.io\">Cypress</a></html>\n```\n\n```\n// Test codecy.visit('http://localhost:8080') // where your web server + HTML is hostedcy.get('a').click() // browser navigates to https://cypress.iocy.get('selector').should('exist') // Cypress errors\n```\n\nWe do not recommend visiting a superdomain that you don't control in your tests which you can read more about [here](https://docs.cypress.io/guides/references/best-practices#Visiting-External-Sites)\n\nHowever, if you control this superdomain, either by owning the hosted instance or by other means, we recommend testing this superdomain with `cy.origin`.\n\n```\n// Test codecy.visit('http://localhost:8080') // where your web server + HTML is hostedcy.get('a').click() // browser navigates to https://example.cypress.iocy.origin('https://example.cypress.io', () => {  // declare cy.origin command on expected domain  cy.get('selector').should('exist') // Yup all good})\n```\n\nIf not in control of this superdomain, we recommend you test that the `href` property is correct instead of performing the navigation. This will help lead to more deterministic tests.\n\n```\n// this test verifies the behavior and will run considerably fastercy.visit('http://localhost:8080')cy.get('a').should('have.attr', 'href', 'https://example.cypress.io') // no page load!\n```\n\nIf for any reason the two above methods cannot be leveraged, [`cy.request()`](https://docs.cypress.io/api/commands/request) may be an option to verify content as [`cy.request()`](https://docs.cypress.io/api/commands/request) is _NOT bound to CORS or same-origin policy_.\n\n```\ncy.visit('http://localhost:8080')cy.get('a').then(($a) => {  // pull off the fully qualified href from the <a>  const url = $a.prop('href')  // make a cy.request to it  cy.request(url).its('body').should('include', '</html>')})\n```\n\n### Form Submission Redirects[​](#Form-Submission-Redirects \"Direct link to Form Submission Redirects\")\n\nWhen you submit a regular HTML form, the browser will follow the HTTP(s) request.\n\n```\n<!-- Application code that is served at `localhost:8080`--><html>  <form method=\"POST\" action=\"/submit\">    <input type=\"text\" name=\"email\" />    <input type=\"submit\" value=\"Submit\" />  </form></html>\n```\n\n```\ncy.visit('http://localhost:8080')cy.get('form').submit() // submit the form!\n```\n\nIf your back end server handling the `/submit` route does a `30x` redirect to a different superdomain, you will need to use the `cy.origin` command if running additional Cypress commands after submitting the form.\n\n```\n// imagine this is some node / express code// on your localhost:8080 serverapp.post('/submit', (req, res) => {  // redirect the browser to cypress.io  res.redirect('https://example.cypress.io')})\n```\n\nYou can test this with `cy.origin`, which may look like the following test case:\n\n```\ncy.visit('http://localhost:8080')cy.get('form').submit() // submit the form!cy.origin('cypress.io', () => {  cy.url().should('contain', 'cypress.io')})\n```\n\nA common use case for this is Single sign-on (SSO), OAuth, Open ID Connect (OIDC), or Authentication as a Service platforms, such as Auth0, Okta, Amazon Cognito, and others.\n\nIn these situations, if controlling the domain under test, we recommend that you test these with `cy.origin`.\n\n```\ncy.visit('http://localhost:8080')cy.get('#login').click() // click a login button, which takes us to our authentication page.cy.origin('cypress.io', () => {  cy.get('#username').type('User1')  cy.get('#password').type('Password123')  // prompts a sign in that redirects to http://localhost:8080 with a token, cookie, or other means of acknowledgement  cy.get('button').contains('Sign In').click()})cy.get('#user-name-welcome').should('equal', 'Welcome, User1!')\n```\n\nIf for any reason you cannot leverage `cy.origin`, programmatic authentication is still an option. In this situation you may `POST` to a different server and are redirected elsewhere (typically with the session token in the URL). If that's the case, you can still test this behavior with [`cy.request()`](https://docs.cypress.io/api/commands/request).\n\nIn fact we can likely bypass the initial visit altogether and `POST` directly to your SSO server.\n\n```\ncy.request('POST', 'https://sso.corp.com/auth', {  username: 'foo',  password: 'bar',}).then((response) => {  // pull out the location redirect  const loc = response.headers['Location']  // parse out the token from the url (assuming its in there)  const token = parseOutMyToken(loc)  // do something with the token that your web application expects  // likely the same behavior as what your SSO does under the hood  // assuming it handles query string tokens like this  cy.visit('http://localhost:8080?token=' + token)  // if you don't need to work with the token you can sometimes  // visit the location header directly  cy.visit(loc)})\n```\n\n### JavaScript Redirects[​](#JavaScript-Redirects \"Direct link to JavaScript Redirects\")\n\nWhen we say JavaScript Redirects we are talking about any kind of code that does something like this:\n\n```\n{/* Application code that is served at `localhost:8080` */}<html>  <button id=\"nav\">Navigate to Cypress example</button>  <script>    document.querySelector('#nav').addEventListener('click', () => {      window.location.href = 'https://example.cypress.io'    })  </script></html>\n```\n\nYou can test this with `cy.origin`, which may look like the following test case:\n\n```\ncy.visit('http://localhost:8080')cy.get('#nav').submit() // trigger a javascript redirect!cy.origin('https://example.cypress.io', () => {  cy.url().should('contain', 'cypress.io')})\n```\n\n### Cross-Origin Errors with `cy.origin`[​](#Cross-Origin-Errors-with-cyorigin \"Direct link to Cross-Origin-Errors-with-cyorigin\")\n\nSometimes, when using `cy.origin` and especially with websites that are not under your immediate test control, cross-origin errors may still tend to creep up. We don't recommend visiting or interacting with sites you [do not control](https://docs.cypress.io/guides/references/best-practices#Visiting-External-Sites). However, if this is necessary, most of these issues can usually be remedied by applying\\` the [modify obstructive third-party code](https://docs.cypress.io/guides/references/experiments#Configuration) experimental flag or by [disabling web security](https://docs.cypress.io/guides/guides/web-security#Disabling-Web-Security).\n\n## Disabling Web Security[​](#Disabling-Web-Security \"Direct link to Disabling Web Security\")\n\nSo if you cannot work around any of the issues using the suggested workarounds above, including [modifying obstructive third-party code](https://docs.cypress.io/guides/guides/web-security#Modifying-Obstructive-Third-Party-Code) with `cy.origin`, you may want to disable web security.\n\nOne last thing to consider here is that every once in a while we discover bugs in Cypress that lead to cross-origin errors that can otherwise be fixed. If you think you're experiencing a bug, [open an issue](https://github.com/cypress-io/cypress/issues/new/choose).\n\ncaution\n\n**Chrome only**\n\nDisabling web security is only supported in Chrome-based browsers. Settings in `chromeWebSecurity` will have no effect in other browsers. We will log a warning in this case.\n\n![chromeWebSecurity warning in stdout](https://docs.cypress.io/img/guides/web-security/chrome-web-security-stdout-warning.jpg)\n\nIf you rely on disabling web security, you will not be able to run tests on browsers that do not support this feature.\n\n### Set `chromeWebSecurity` to `false`[​](#Set-chromeWebSecurity-to-false \"Direct link to Set-chromeWebSecurity-to-false\")\n\nSetting `chromeWebSecurity` to `false` in Chrome-based browsers allows you to do the following:\n\n*   Display insecure content\n*   Navigate to any superdomain without cross-origin errors with or without `cy.origin`\n*   Access cross-origin iframes that are embedded in your application\n\nStill here? That's cool, let's disable web security!\n\n#### Set `chromeWebSecurity` to `false` in the [Cypress configuration](https://docs.cypress.io/guides/references/configuration)[​](#Set-chromeWebSecurity-to-false-in-the-Cypress-configuration \"Direct link to Set-chromeWebSecurity-to-false-in-the-Cypress-configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  chromeWebSecurity: false,})\n```\n\n## Modifying Obstructive Third Party Code[​](#Modifying-Obstructive-Third-Party-Code \"Direct link to Modifying Obstructive Third Party Code\")\n\nCypress today has the concept of [modifying obstructive code](https://docs.cypress.io/guides/references/configuration#modifyObstructiveCode), which is code that may interfere with Cypress being able to run your web application. The `experimentalModifyObstructiveThirdPartyCode` flag provides the same benefits of the [modifyObstructiveCode](https://docs.cypress.io/guides/references/configuration#modifyObstructiveCode) flag, but additionally applies it to third-party `.js` and `.html` that is being either loaded or navigated to inside your application. In addition to this, this flag also does the following:\n\n*   Adjusts the User Agent in Electron to appear more chrome-like. This option can be overridden with the [userAgent](https://docs.cypress.io/guides/references/configuration#Browser) config option.\n*   Removes [Subresource Integrity (SRI)](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity) from modified scripts as they will not execute otherwise.\n*   Updates the `Sec-Fetch-Dest` Metadata header from `iframe` to `document` in cases where requests come from the application under test.\n\nWant to enable `experimentalModifyObstructiveThirdPartyCode`? Let's do it!\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  experimentalModifyObstructiveThirdPartyCode: true,})\n```",
    "title": "Web Security | Cypress Documentation",
    "description": "Browsers adhere to a strict",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/component-testing/react/examples",
    "markdown": "# React Examples | Cypress Documentation\n\n## Mounting Components[​](#Mounting-Components \"Direct link to Mounting Components\")\n\n### Mounting a Component[​](#Mounting-a-Component \"Direct link to Mounting a Component\")\n\nThe first step in testing a component is to mount it. This renders the component into a testbed and enable's the use of the Cypress API to select elements, interact with them, and run assertions.\n\nTo mount a React component, import the component into your spec and pass the component to the `cy.mount` command:\n\n```\nimport { Stepper } from './stepper'it('mounts', () => {  cy.mount(<Stepper />)  //Stepper should have initial count of 0 (default)  cy.get('[data-cy=counter]').should('have.text', '0')})\n```\n\n### Passing Data to a Component[​](#Passing-Data-to-a-Component \"Direct link to Passing Data to a Component\")\n\nYou can pass props to a component by setting them on the JSX passed into `cy.mount()`:\n\n```\nit('mounts', () => {  cy.mount(<Stepper initial={100} />)  //Stepper should have initial count of 100  cy.get('[data-cy=counter]').should('have.text', '100')})\n```\n\n### Testing Event Handlers[​](#Testing-Event-Handlers \"Direct link to Testing Event Handlers\")\n\nPass a Cypress [spy](https://docs.cypress.io/guides/guides/stubs-spies-and-clocks#Spies) to an event prop and validate it was called:\n\n```\nit('clicking + fires a change event with the incremented value', () => {  const onChangeSpy = cy.spy().as('onChangeSpy')  cy.mount(<Stepper onChange={onChangeSpy} />)  cy.get('[data-cy=increment]').click()  cy.get('@onChangeSpy').should('have.been.calledWith', 1)})\n```\n\n## Custom Mount Commands[​](#Custom-Mount-Commands \"Direct link to Custom Mount Commands\")\n\n### Customizing `cy.mount()`[​](#Customizing-cymount \"Direct link to Customizing-cymount\")\n\nBy default, `cy.mount()` is a simple passthrough to `mount()`, however, you can customize `cy.mount()` to fit your needs. For instance, if you are using providers or other global app-level setups in your React app, you can configure them here.\n\nBelow are a few examples that demonstrate using a custom mount command. These examples can be adjusted for most other providers that you will need to support.\n\n### React Router[​](#React-Router \"Direct link to React Router\")\n\nIf you have a component that consumes a hook or component from [React Router](https://reactrouter.com/), make sure the component has access to a React Router provider. Below is a sample mount command that uses `MemoryRouter` to wrap the component.\n\n*   cypress/support/component.jsx\n*   Typings\n\n```\nimport { mount } from 'cypress/react'import { MemoryRouter } from 'react-router-dom'Cypress.Commands.add('mount', (component, options = {}) => {  const { routerProps = { initialEntries: ['/'] }, ...mountOptions } = options  const wrapped = <MemoryRouter {...routerProps}>{component}</MemoryRouter>  return mount(wrapped, mountOptions)})\n```\n\nTo set up certain scenarios, pass in props that will get passed to `MemoryRouter` in the options. Below is an example test that ensures an active link has the correct class applied to it by initializing the router with `initialEntries` pointed to a particular route:\n\n```\nimport { Navigation } from './Navigation'it('home link should be active when url is \"/\"', () => {  // No need to pass in custom initialEntries as default url is '/'  cy.mount(<Navigation />)  cy.get('a').contains('Home').should('have.class', 'active')})it('login link should be active when url is \"/login\"', () => {  cy.mount(<Navigation />, {    routerProps: {      initialEntries: ['/login'],    },  })  cy.get('a').contains('Login').should('have.class', 'active')})\n```\n\n### Redux[​](#Redux \"Direct link to Redux\")\n\nTo use a component that consumes state or actions from a [Redux](https://react-redux.js.org/) store, create a `mount` command that will wrap your component in a Redux Provider:\n\n*   cypress/support/component.jsx\n*   Typings\n\n```\nimport { mount } from 'cypress/react'import { Provider } from 'react-redux'import { getStore } from '../../src/store'Cypress.Commands.add('mount', (component, options = {}) => {  // Use the default store if one is not provided  const { reduxStore = getStore(), ...mountOptions } = options  const wrapped = <Provider store={reduxStore}>{component}</Provider>  return mount(wrapped, mountOptions)})\n```\n\nThe options param can have a store that is already initialized with data:\n\n```\nimport { getStore } from '../redux/store'import { setUser } from '../redux/userSlice'import { UserProfile } from './UserProfile'it('User profile should display user name', () => {  const user = { name: 'test person' }  // getStore is a factory method that creates a new store  const store = getStore()  // setUser is an action exported from the user slice  store.dispatch(setUser(user))  cy.mount(<UserProfile />, { reduxStore: store })  cy.get('div.name').should('have.text', user.name)})\n```\n\ninfo\n\nThe `getStore` method is a factory method that initializes a new Redux store. It is important that the store be initialized with each new test to ensure changes to the store don't affect other tests.",
    "title": "React Examples | Cypress Documentation",
    "description": "Mounting Components",
    "languageCode": "en"
  },
  {
    "url": "https://www.cypress.io/blog/2019/05/02/run-cypress-with-a-single-docker-command",
    "markdown": "# How to Run Cypress in Docker With a Single Command\n\nIf you are a Node.js developer, [installing Cypress](https://on.cypress.io/installing-cypress?ref=cypress-io.ghost.io) as a dev dependency in your `package.json` file or even via direct download seems simple enough. Yet for developers working in other languages like Python or Go, using npm can be an obstacle. We often hear this question from developers:\n\n> Why don’t you have a Docker image with Cypress pre-installed?\n\nHaving an image with both OS dependencies and the Cypress test runner ready to go seems to be very convenient. **We have listened and created a Docker image with Cypress installed.** It is called `cypress/included` and is tagged with the version of Cypress installed in the image. For now, we'll use the image for the current Cypress version as of this writing - the `cypress/included:3.2.0` image. We create new images for every Cypress version released. The image is built on top of the `cypress/base:12.1.0` image with Node 12.1.0 included. You can find our official Docker images in the [cypress-docker-images](https://github.com/cypress-io/cypress-docker-images?ref=cypress-io.ghost.io) repository and on [Docker hub](https://hub.docker.com/u/cypress?ref=cypress-io.ghost.io).\n\nYou can find the examples below in the repo [demo-docker-cypress-included](https://github.com/bahmutov/demo-docker-cypress-included?ref=cypress-io.ghost.io).\n\n## [](#Running-headless-tests \"Running headless tests\")Running headless tests\n\nIf you have Cypress end-to-end tests, you can run them using the complete image. For example, if your project structure looks like this:\n\n```\ncypress/\n  integration/\n    spec.js\ncypress.json\n```\n\nThen you can execute your Cypress tests using the following shell command:\n\n```\n$ docker run -it -v $PWD:/e2e -w /e2e cypress/included:3.2.0\n\n==============================================================================\n\n  (Run Starting)\n\n  ┌──────────────────────────────────────────────────────────────────────────┐\n  │ Cypress:    3.2.0                                                        │\n  │ Browser:    Electron 59 (headless)                                       │\n  │ Specs:      1 found (spec.js)                                            │\n  └──────────────────────────────────────────────────────────────────────────┘\n\n──────────────────────────────────────────────────────────────────────────────\n\n  Running: spec.js...                                                 (1 of 1)\n\n\n  Cypress TodoMVC test\n    ✓ adds 2 todos (1351ms)\n\n  ...\n```\n\n```\nExplanation of the \"docker run\" command line arguments\n\n -it          = interactive terminal\n -v $PWD:/e2e = map current folder to /e2e inside the container\n -w /e2e      = set working directy to /e2e\n```\n\nNothing to install, just write your spec files using your favorite editor and run them.\n\n## [](#Commands-and-options \"Commands and options\")Commands and options\n\nThe image `cypress/included:3.2.0` has the entrypoint set to `cypress run`, so you don’t need to type it when running our Docker image. If you want a different command, you can change the entrypoint and then pass any additional arguments after the image name.\n\n```\n$ docker run -it -v $PWD:/e2e -w /e2e --entrypoint=cypress cypress/included:3.2.0 help\n\n  Usage: cypress [options] [command]\n\n  Options:\n\n    -v, --version      prints Cypress version\n    -h, --help         output usage information\n\n  Commands:\n\n    help               Shows CLI help and exits\n    version            prints Cypress version\n    run [options]      Runs Cypress tests from the CLI without the GUI\n    open [options]     Opens Cypress in the interactive GUI.\n    install [options]  Installs the Cypress executable matching this package's version\n    verify             Verifies that Cypress is installed correctly and executable\n    cache [options]    Manages the Cypress binary cache\n```\n\nYou can also pass environment variables into the container to control Cypress behavior. For example, the boolean config option `video` controls if the video of the run is recorded. It is `true` by default, but you can disable it via an environment variable.\n\n```\n$ CYPRESS_VIDEO=false\n$ docker run -it -v $PWD:/e2e -w /e2e -e CYPRESS_VIDEO cypress/included:3.2.0\n```\n\nIf you want to record the test run on the [Cypress Dashboard](https://on.cypress.io/dashboard-service?ref=cypress-io.ghost.io) to review later, you need to pass the record key and the `--record` CLI flag.\n\n```\n$ docker run -it -v $PWD:/e2e -w /e2e \\\n  -e CYPRESS_RECORD_KEY cypress/included:3.2.0 --record\n```\n\n## Container info\n\nTo show the information about the operating system and pre-installed browsers, you can execute [cypress info](https://on.cypress.io/command-line?ref=cypress-io.ghost.io#cypress-info) command:\n\n```\n$ docker run -it -v $PWD:/e2e -w /e2e --entrypoint=cypress cypress/included:6.2.1 info\nDisplaying Cypress info...\n\nDetected 2 browsers installed:\n\n1. Chrome\n  - Name: chrome\n  - Channel: stable\n  - Version: 87.0.4280.66\n  - Executable: google-chrome\n\n2. Firefox\n  - Name: firefox\n  - Channel: stable\n  - Version: 82.0\n  - Executable: firefox\n\nNote: to run these browsers, pass <name>:<channel> to the '--browser' field\n\nExamples:\n- cypress run --browser firefox\n- cypress run --browser chrome\n\nLearn More: https://on.cypress.io/launching-browsers\n\nProxy Settings: none detected\nEnvironment Variables:\nCYPRESS_CACHE_FOLDER: /root/.cache/Cypress\n\nApplication Data: /root/.config/cypress/cy/development\nBrowser Profiles: /root/.config/cypress/cy/development/browsers\nBinary Caches: /root/.cache/Cypress\n\nCypress Version: 6.2.1\nSystem Platform: linux (Debian - 10.5)\nSystem Memory: 2.09 GB free 534 MB\n```\n\nWe can see both Chrome and Firefox browsers pre-installed in the `cypress/included:6.2.1` image. Let's run our tests using Firefox browser for example:\n\n```\n$ docker run -it -v $PWD:/e2e -w /e2e cypress/included:6.2.1 --browser firefox\n\n========================================================================\n\n  (Run Starting)\n\n  ┌──────────────────────────────────────────────────────────────────────┐\n  │ Cypress:    6.2.1                                                    │\n  │ Browser:    Firefox 82                                               │\n  │ Specs:      1 found (spec.js)                                        │\n  └──────────────────────────────────────────────────────────────────────┘\n  ...\n```\n\n## [](#Interactive-mode \"Interactive mode\")Interactive mode\n\nRunning the tests inside a Docker container is nice, but it is missing my favorite Cypress feature: its interactive [Test Runner](https://on.cypress.io/test-runner?ref=cypress-io.ghost.io) with the Command Log, time-traveling debugger and live view of what is going on during the test! Typically, you would execute `cypress open` to open the Test Runner in interactive mode, but how do we see it if Cypress opens inside a Docker container?\n\nIf you want to see Cypress in interactive mode, you need to forward the XVFB messages from Cypress out of the Docker container into an X11 server running on the host machine. I have done this on my Mac; other operating systems might require different commands.\n\nI have installed an [XQuartz](https://www.xquartz.org/?ref=cypress-io.ghost.io) X11 server following the instructions at [Running GUI applications using Docker for Mac](https://sourabhbajaj.com/blog/2017/02/07/gui-applications-docker-mac/?ref=cypress-io.ghost.io).\n\nThen I grabbed the IP of the host machine and added it to the allowed X11 hosts.\n\n```\n$ IP=$(ipconfig getifaddr en0)\n$ /usr/X11/bin/xhost + $IP\n10.0.0.124 being added to access control list\n```\n\nNow you can execute a `cypress open` command passing `DISPLAY` and the X11 socket file to the container:\n\n```\nDISPLAY=$IP:0\ndocker run -it \\\n  -v $PWD:/e2e \\\n  -v /tmp/.X11-unix:/tmp/.X11-unix \\\n  -w /e2e \\\n  -e DISPLAY \\\n  --entrypoint cypress \\\n  cypress/included:3.2.0 open --project .\n```\n\n```\nExplanation of the \"docker run\" command line arguments:\n\n -it                  = interactive terminal\n -v $PWD:/e2e         = map current folder to /e2e inside the container\n -v /tmp/.X11-unix:/tmp/.X11-unix = map X11 socket file to communicate\n -w /e2e              = set working directy to /e2e\n -e DISPLAY           = pass environment variable DISPLAY to the container\n --entrypoint cypress = run \"cypress\" command\n    with arguments AFTER Docker image name\n    in our case they are \"--project .\" to point globally installed Cypress\n    at the current working directory /e2e inside the container\n```\n\nThe Docker container starts and you can see the full interactive Cypress Test Runner open. You can watch the test run, interact with the Command Log, open DevTools, etc. Even spec file watching is working - if you edit and save the `cypress/integration/spec.js` file, the Test Runner picks up the change and reruns the tests.\n\n![](https://cypress-io.ghost.io/blog/content/images/2019/05/cy-open.6a6565c4-1.png)\n\n**Debugging tip:** if Cypress shows an error `Gtk-WARNING **: cannot open display:...` make sure X11 server allows connections over the network from the Docker container. Run `xhost` command in the terminal to see if it has the IP address you have added previous with `xhost + $IP`.\n\n## [](#Docker-compose \"Docker compose\")Docker compose\n\nUsing [docker-compose](https://docs.docker.com/compose/?ref=cypress-io.ghost.io) to spawn services and run end-to-end tests is very convenient. We have coded several examples that show how to run a web application and Cypress tests in two Docker containers:\n\n*   [cypress-example-docker-compose](https://github.com/cypress-io/cypress-example-docker-compose?ref=cypress-io.ghost.io)\n*   [cypress-open-from-docker-compose](https://github.com/bahmutov/cypress-open-from-docker-compose?ref=cypress-io.ghost.io) which is a fork of [mtlynch/hello-world-cypress](https://github.com/mtlynch/hello-world-cypress?ref=cypress-io.ghost.io)\n\nTo support both `cypress run` and `cypress open` settings we recommend:\n\n*   placing the default settings for `cypress run` into `docker-compose.yml` file, for example, like this\n\n```\n# e2e/docker-compose.yml from repo\n# https://github.com/bahmutov/cypress-open-from-docker-compose\nversion: '3.2'\nservices:\n  # this is the web application we are going to test\n  sentimentalyzer:\n    build: ../\n    environment:\n      - PORT=8123\n  # Cypress container\n  cypress:\n    # the Docker image to use from https://github.com/cypress-io/cypress-docker-images\n    image: \"cypress/included:3.2.0\"\n    depends_on:\n      - sentimentalyzer\n    environment:\n      # pass base url to test pointing at the web application\n      - CYPRESS_baseUrl=http://sentimentalyzer:8123\n    # share the current folder as volume to avoid copying\n    working_dir: /e2e\n    volumes:\n      - ./:/e2e\n```\n\nYou can start the application, run the headless tests and close the services with command:\n\n```\ndocker-compose up --exit-code-from cypress\n```\n\n*   place the X11 configuration that enables `cypress open` Test Runner to show on the host machine in a separate YAML file that _extends_ the above file. The second file only has additional environment variables and volumes\n\n```\nversion: '3.2'\n# e2e/cy-open.yml from repo\n# https://github.com/bahmutov/cypress-open-from-docker-compose\nservices:\n  cypress:\n    # pass custom command to start Cypress otherwise it will use the entrypoint\n    # specified in the Cypress Docker image.\n    # also pass \"--project <folder>\" so that when Cypress opens\n    # it can find file \"cypress.json\" and show integration specs\n    # https://on.cypress.io/command-line#cypress-open\n    entrypoint: cypress open --project /e2e\n    environment:\n      # get the IP address of the host machine and allow X11 to accept\n      # incoming connections from that IP address\n      #   IP=$(ipconfig getifaddr en0)\n      #   /usr/X11/bin/xhost + $IP\n      # then pass the environment variable DISPLAY to show Cypress GUI on the host system\n      #   DISPLAY=$IP:0\n      - DISPLAY\n    volumes:\n      # for Cypress to communicate with the X11 server pass this socket file\n      # in addition to any other mapped volumes\n      - /tmp/.X11-unix:/tmp/.X11-unix\n```\n\nTo start in the interactive mode we need to pass both filenames to the docker\n\n```\ndocker-compose -f docker-compose.yml -f cy-open.yml up --exit-code-from cypress\n```\n\nYou should see the Test Runner and be able to run tests\n\n![](https://cypress-io.ghost.io/blog/content/images/2019/05/compose.bda19c6f-1.png)\n\n## Testing site on host\n\nLet's consider another common situation: running the Test Runner inside a Docker container, while running the website on the host outside the container. First, start the website on the host machine\n\n```\n$ npm start\n# website is running at http://localhost:2222\n```\n\nNow start the Test Runner but instead of `localhost` use a special Docker domain that points back at the host machine:\n\n```\nDISPLAY=$IP:0\ndocker run -it \\\n  -v $PWD:/e2e \\\n  -w /e2e \\\n  -e DISPLAY \\\n  --entrypoint cypress \\\n  cypress/included:3.2.0 open --project . \\\n  --config baseUrl=http://host.docker.internal:2222\n```\n\n```\nExplanation of the \"docker run\" command line arguments:\n\n -it                  = interactive terminal\n -v $PWD:/e2e         = map current folder to /e2e inside the container\n -w /e2e              = set working directy to /e2e\n -e DISPLAY           = pass environment variable DISPLAY to the container\n --entrypoint cypress = run \"cypress\" command\n    with arguments AFTER Docker image name\n    in our case they are \"--project .\" to point globally installed Cypress\n    at the current working directory /e2e inside the container\n--config baseUrl=...  = replace the default \"baseUrl\" with \n    special domain pointing to the website running on the host machine\n```\n\nRunning the Test Runner in a Docker container allows us to debug font and encoding issues. For example the problem of [missing Chinese characters](https://github.com/cypress-io/cypress-docker-images/issues/109?ref=cypress-io.ghost.io) in the `cypress-documentation` translation is only visible on CI or inside a Docker container.\n\n![](https://cypress-io.ghost.io/blog/content/images/2019/05/Screen-Shot-2019-05-16-at-11.52.02-AM.png)\n\nMissing Chinese characters when running the Test Runner inside the Docker container\n\n## Start testing\n\nThat should give you all you need to start using Cypress in Docker for all your testing needs. If you were on the fence before due to compatibility concerns, worry no more, and download the Cypress app [here](https://www.cypress.io/install/?ref=cypress-io.ghost.io).\n\n## [](#More-information \"More information\")More information\n\n*   [Cypress Docker documentation page](https://on.cypress.io/docker?ref=cypress-io.ghost.io)\n*   Official [cypress-docker-images](https://github.com/cypress-io/cypress-docker-images?ref=cypress-io.ghost.io)\n*   [demo-docker-cypress-included](https://github.com/bahmutov/demo-docker-cypress-included?ref=cypress-io.ghost.io)\n*   [cypress-open-from-docker-compose](https://github.com/bahmutov/cypress-open-from-docker-compose?ref=cypress-io.ghost.io) example\n\nIf you have any feedback for this approach or suggestions on how to make running Cypress even simpler for your team, please let us know. Open an issue in the [cypress-io/cypress-docker-images](https://github.com/cypress-io/cypress-docker-images/issues?ref=cypress-io.ghost.io) repo or in the main [cypress-io/cypress](https://github.com/cypress-io/cypress/issues?ref=cypress-io.ghost.io) repo (and do not forget to give it a ⭐️!)\n\n### Bonus\n\nIf you want to run Cypress Test Runner inside a Docker container, while the web application is running on the host machine, read how to do this in [\"Run Cypress included from Docker container\"](https://glebbahmutov.com/blog/run-cypress-included-from-docker-container/?ref=cypress-io.ghost.io)\n\n### Bonus 2\n\nYou can use `cypress/included` Docker image to run tests without installing any dependencies on GH Actions CI. See repository [](https://github.com/bahmutov/cypress-gh-action-included?ref=cypress-io.ghost.io)[cypress-gh-action-included](https://github.com/bahmutov/cypress-gh-action-included?ref=cypress-io.ghost.io) and its workflow file:\n\n```\nname: included\non: [push]\njobs:\n  cypress-run:\n    runs-on: ubuntu-latest\n    # Docker image with Cypress pre-installed\n    # https://github.com/cypress-io/cypress-docker-images/tree/master/included\n    container: cypress/included:3.8.3\n    steps:\n      - uses: actions/checkout@v1\n      - run: cypress run\n```",
    "title": "How to Run Cypress in Docker With a Single Command",
    "description": "We’ve created a Docker image with Cypress installed. Now all you have to do to run Cypress in Docker is download it and punch in the Docker run command.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/continuous-integration/introduction",
    "markdown": "# Introduction | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   An overview of Continuous Integration\n*   How to run Cypress tests in Continuous Integration\n*   How to configure Cypress in various CI Providers\n*   How to record tests to Cypress Cloud\n*   How to run tests in parallel on CI\n\n## What is Continuous Integration?[​](#What-is-Continuous-Integration \"Direct link to What is Continuous Integration?\")\n\n## Setting up CI[​](#Setting-up-CI \"Direct link to Setting up CI\")\n\n### Basics[​](#Basics \"Direct link to Basics\")\n\nRunning Cypress in Continuous Integration is almost the same as running it locally in your terminal. You generally only need to do two things:\n\n1.  **Install Cypress**\n\n```\nnpm install cypress --save-dev\n```\n\n2.  **Run Cypress**\n\nDepending on which CI provider you use, you may need a config file. You'll want to refer to your CI provider's documentation to know where to add the commands to install and run Cypress. For more configuration examples check out our [examples](https://docs.cypress.io/guides/continuous-integration/ci-provider-examples).\n\n### Boot your server[​](#Boot-your-server \"Direct link to Boot your server\")\n\n#### Challenges[​](#Challenges \"Direct link to Challenges\")\n\nTypically you will need to boot a local server prior to running Cypress. When you boot your web server, it runs as a **long running process** that will never exit. Because of this, you'll need it to run in the **background** - else your CI provider will never move onto the next command.\n\nBackgrounding your server process means that your CI provider will continue to execute the next command after executing the signal to start your server.\n\nMany people approach this situation by running a command like the following:\n\n```\nnpm start & cypress run // Do not do this\n```\n\nThe problem is - what happens if your server takes time to boot? There is no guarantee that when the next command runs (`cypress run`) that your web server is up and available. So your Cypress test may start and try to visit your local server before it is ready to be visited.\n\n#### Solutions[​](#Solutions \"Direct link to Solutions\")\n\nLuckily, there are some solutions for this. Instead of introducing arbitrary waits (like `sleep 20`) you can use a better option.\n\n**`wait-on` module**\n\nUsing the [wait-on](https://github.com/jeffbski/wait-on) module, you can block the `cypress run` command from executing until your server has booted.\n\n```\nnpm start & wait-on http://localhost:8080\n```\n\ninfo\n\nMost CI providers will automatically kill background processes so you don't have to worry about cleaning up your server process once Cypress finishes.\n\nHowever, if you're running this script locally you'll have to do a bit more work to collect the backgrounded PID and then kill it after `cypress run`.\n\n**`start-server-and-test` module**\n\nIf the server takes a very long time to start, we recommend trying the [start-server-and-test](https://github.com/bahmutov/start-server-and-test) module.\n\n```\nnpm install start-server-and-test --save-dev\n```\n\nIn your `package.json` scripts, pass the command to boot your server, the url your server is hosted on and your Cypress test command.\n\n```\n{  ...  \"scripts\": {    \"start\": \"my-server -p 3030\",    \"cy:run\": \"cypress run\",    \"test\": \"start-server-and-test start http://localhost:3030 cy:run\"  }}\n```\n\nIn the example above, the `cy:run` command will only be executed when the URL `http://localhost:3030` responds with an HTTP status code of 200. The server will also shut down when the tests complete.\n\n#### Gotchas[​](#Gotchas \"Direct link to Gotchas\")\n\nWhen [working with `webpack-dev-server`](https://github.com/bahmutov/start-server-and-test#note-for-webpack-dev-server-users) that does not respond to `HEAD` requests, use an explicit `GET` method to ping the server like this:\n\n```\n{  \"scripts\": {    \"test\": \"start-server-and-test start http-get://localhost:3030 cy:run\"  }}\n```\n\nWhen working with local `https` in webpack, set an environment variable to allow local certificate:\n\n```\n{  \"scripts\": {    \"start\": \"my-server -p 3030 --https\",    \"cy:run\": \"cypress run\",    \"cy:ci\": \"START_SERVER_AND_TEST_INSECURE=1 start-server-and-test start https-get://localhost:3030 cy:run\"  }}\n```\n\n### Record tests[​](#Record-tests \"Direct link to Record tests\")\n\nCypress can record your tests and make the results available in [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction). Cloud gives you access to recorded tests - typically when running Cypress tests from your [CI provider](https://docs.cypress.io/guides/continuous-integration/introduction) - and provides you insight into what happened when your tests ran.\n\n#### Recording tests allow you to:[​](#Recording-tests-allow-you-to \"Direct link to Recording tests allow you to:\")\n\n*   See the number of failed, pending and passing tests.\n*   Get the entire stack trace of failed tests.\n*   View screenshots taken when tests fail and when using [`cy.screenshot()`](https://docs.cypress.io/api/commands/screenshot).\n*   Watch a video of your entire test run or a clip at the point of test failure when the `video` configuration is enabled.\n*   See which machines ran each test when [parallelized](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization).\n\n#### To record tests:[​](#To-record-tests \"Direct link to To record tests:\")\n\n1.  [Set up your project to record](https://docs.cypress.io/guides/cloud/getting-started#Setup)\n2.  [Pass the `--record` flag to `cypress run`](https://docs.cypress.io/guides/guides/command-line#cypress-run) within CI.\n\n```\ncypress run --record --key=abc123\n```\n\n[Read the full guide on the Cypress Cloud.](https://docs.cypress.io/guides/cloud/introduction)\n\n### Run tests in parallel[​](#Run-tests-in-parallel \"Direct link to Run tests in parallel\")\n\nCypress can run tests in parallel across multiple machines.\n\nYou'll want to refer to your CI provider's documentation on how to set up multiple machines to run in your CI environment.\n\nOnce multiple machines are available within your CI environment, you can pass the [\\--parallel](https://docs.cypress.io/guides/guides/command-line#cypress-run-parallel) flag to have your tests run in parallel.\n\n```\ncypress run --record --key=abc123 --parallel\n```\n\n[Read the full guide on parallelization.](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization)\n\n### Official Cypress Docker Images[​](#Official-Cypress-Docker-Images \"Direct link to Official Cypress Docker Images\")\n\nCI providers, such as [GitHub Actions](https://docs.github.com/en/actions/using-jobs/running-jobs-in-a-container) and [CircleCI](https://circleci.com/docs/executor-intro/#docker), allow workflows to run using [Docker container images](https://docs.docker.com/guides/docker-concepts/the-basics/what-is-a-container/).\n\nCypress supports the use of [Docker](https://docs.docker.com/guides/docker-overview/) through the provisioning of official [Cypress Docker images](https://github.com/cypress-io/cypress-docker-images). Images are Linux-based and support `Linux/amd64` and `Linux/arm64` platforms.\n\nCypress Docker images provide a consistent environment tailored for use with Cypress. By choosing an appropriate Cypress Docker image, you determine the exact environment that your Cypress tests run in. This allows you to shield your workflows from version updates made by your CI provider, for instance if they update Node.js or browser versions.\n\n[Cypress Docker images](https://github.com/cypress-io/cypress-docker-images) are available from the repositories:\n\n*   [Docker Hub](https://hub.docker.com/u/cypress)\n*   [Amazon ECR (Elastic Container Registry) Public Gallery](https://gallery.ecr.aws/cypress-io)\n\n#### Cypress Docker variants[​](#Cypress-Docker-variants \"Direct link to Cypress Docker variants\")\n\n*   [cypress/base](https://github.com/cypress-io/cypress-docker-images/tree/master/base) is the entry-level Cypress Docker image. It contains a complete Linux (Debian) operating system, together with the [prerequisite operating system packages](https://docs.cypress.io/guides/getting-started/installing-cypress#UbuntuDebian) for Cypress, Node.js, npm and Yarn v1 Classic. An image `<tag>` gives you the choice of Node.js version.\n    \n*   [cypress/browsers](https://github.com/cypress-io/cypress-docker-images/tree/master/browsers) builds on the [cypress/base](https://github.com/cypress-io/cypress-docker-images/tree/master/base) image. For `Linux/amd64` images it adds Google Chrome, Mozilla Firefox and Microsoft Edge browsers. A corresponding image `<tag>` allows selection of the combined Node.js and browser versions. Currently `Linux/arm64` images do **not** contain browsers.\n    \n*   [cypress/included](https://github.com/cypress-io/cypress-docker-images/tree/master/included) builds on the [cypress/browsers](https://github.com/cypress-io/cypress-docker-images/tree/master/browsers) image. It adds a fixed version of Cypress, globally installed by npm. A short-form image `<tag>` selects the version of Cypress. A corresponding long-form `<tag>` selects the version of Cypress and documents the combined Node.js and browser versions.\n    \n\n[cypress/base](https://github.com/cypress-io/cypress-docker-images/tree/master/base) allows testing in the Electron browser, built-in to Cypress. [cypress/browsers](https://github.com/cypress-io/cypress-docker-images/tree/master/browsers) adds the capability to test against Chrome, Firefox and Edge. These are the primary images for use in CI workflows. [cypress/included](https://github.com/cypress-io/cypress-docker-images/tree/master/included) is intended to support local testing. It can also be used in CI workflows.\n\n*   [cypress/factory](https://github.com/cypress-io/cypress-docker-images/tree/master/factory) provides the base operating system image and allows individual selection of other components by version. It is used to generate customized Docker images.\n\n#### CI Docker examples[​](#CI-Docker-examples \"Direct link to CI Docker examples\")\n\nYou can find examples that use Cypress Docker images in CI on the documentation page [CI Provider Examples](https://docs.cypress.io/guides/continuous-integration/ci-provider-examples) and in the example repository [cypress-example-kitchensink](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/README.md).\n\nThe following individual workflows show Cypress Docker images being used in CircleCI\n\n*   [Real World App - CircleCI](https://github.com/cypress-io/cypress-realworld-app/blob/develop/.circleci/config.yml)\n\nand in GitHub Actions\n\n*   [Real World App - GitHub Actions](https://github.com/cypress-io/cypress-realworld-app/blob/develop/.github/workflows/main.yml)\n*   [cypress-docker-images - GitHub Actions](https://github.com/cypress-io/cypress-docker-images/blob/master/.github/workflows/example-cypress-github-action.yml)\n\n## Advanced setup[​](#Advanced-setup \"Direct link to Advanced setup\")\n\n### Machine requirements[​](#Machine-requirements \"Direct link to Machine requirements\")\n\nHardware requirements to run Cypress depend how much memory the browser, the application under test, and the server (if running it locally) need to run the tests without crashing. Visit our [System Requirements](https://docs.cypress.io/guides/getting-started/installing-cypress#System-requirements) guide for minimum hardware recommendations.\n\n**Some signs that your machine may not have enough CPU or memory to run Cypress:**\n\n*   The recorded video artifacts have random pauses or dropped frames.\n*   [Debug logs of the CPU and memory](https://docs.cypress.io/guides/references/troubleshooting#Log-memory-and-CPU-usage) frequently show CPU percent above 100%.\n*   The browser crashes.\n\nYou can see the total available machine memory and the current free memory by running the [`cypress info`](https://on.cypress.io/command-line#cypress-info) command.\n\n```\nnpx cypress info...Cypress Version: 13.6.6 (stable)System Platform: linux (Debian - 11.6)System Memory: 73.6 GB free 48.6 GB\n```\n\nYou can see the CPU parameters on the CI machines by executing the command below.\n\n```\nnode -p 'os.cpus()'[  {    model: 'Intel(R) Xeon(R) Platinum 8124M CPU @ 3.00GHz',    speed: 3399,    times: { user: 760580, nice: 1010, sys: 158130, idle: 1638340, irq: 0 }  }  ...]\n```\n\n**Example projects and the machine configurations used to run them on CI:**\n\n*   The [Real World App](https://github.com/cypress-io/cypress-realworld-app) project runs tests on a CircleCI machine using the [Docker executor](https://circleci.com/docs/executor-intro/#docker) with [`resource_class: large`](https://circleci.com/docs/configuration-reference/#docker-execution-environment) providing 4 vCPUs and 8 GB of RAM. `cypress info` reports `System Memory: 73.6 GB free 48.6 GB`.\n*   The [Real World App](https://github.com/cypress-io/cypress-realworld-app) project also executes its tests on [GitHub Actions](https://docs.github.com/en/actions) using the [Cypress GitHub Action](https://github.com/cypress-io/github-action) with the [standard Ubuntu GitHub-hosted runner for Public repositories](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners) providing 4 vCPUs and 16 GB of RAM. `cypress info` reports `System Memory: 16.8 GB free 15.5 GB` with CPUs reported as `AMD EPYC 7763 64-Core Processor`.\n\n**Tip:** if there are problems with longer specs, try splitting them into shorter ones, following [this example](https://glebbahmutov.com/blog/split-spec/).\n\n### Dependencies[​](#Dependencies \"Direct link to Dependencies\")\n\nCypress runs on many CI providers' virtual machine environments out-of-the-box without needing additional dependencies installed.\n\n#### Linux[​](#Linux \"Direct link to Linux\")\n\nIf you see a message about a missing dependency when you run Cypress in a Linux CI environment, then refer to the [Linux Prerequisites](https://docs.cypress.io/guides/getting-started/installing-cypress#Linux-Prerequisites) lists for guidance.\n\n### Caching[​](#Caching \"Direct link to Caching\")\n\nAs of [Cypress version 3.0](https://docs.cypress.io/guides/references/changelog#3-0-0), Cypress downloads its binary to the global system cache - on linux that is `~/.cache/Cypress`. By ensuring this cache persists across builds you can save minutes off install time by preventing a large binary download.\n\n#### We recommend users:[​](#We-recommend-users \"Direct link to We recommend users:\")\n\n*   Cache the `~/.cache` folder after running `npm install`, `yarn`, [`npm ci`](https://docs.npmjs.com/cli/ci) or equivalents as demonstrated in the configs below.\n    \n*   **Do not** cache `node_modules` across builds. This bypasses more intelligent caching packaged with `npm` or `yarn`, and can cause issues with Cypress not downloading the Cypress binary on `npm install`.\n    \n*   If you are using `npm install` in your build process, consider [switching to `npm ci`](https://blog.npmjs.org/post/171556855892/introducing-npm-ci-for-faster-more-reliable) and caching the `~/.npm` directory for a faster and more reliable build.\n    \n*   If you are using `yarn`, caching `~/.cache` will include both the `yarn` and Cypress caches. Consider using `yarn install --frozen-lockfile` as an [`npm ci`](https://docs.npmjs.com/cli/ci) equivalent.\n    \n*   If you need to override the binary location for some reason, use [CYPRESS\\_CACHE\\_FOLDER](https://docs.cypress.io/guides/references/advanced-installation#Binary-cache) environment variable.\n    \n*   Make sure you are not restoring the previous cache using lax keys; then the Cypress binaries can \"snowball\", read [Do Not Let Cypress Cache Snowball on CI](https://glebbahmutov.com/blog/do-not-let-cypress-cache-snowball/).\n    \n\n**Tip:** you can find lots of CI examples with configured caching in our [cypress-example-kitchensink](https://github.com/cypress-io/cypress-example-kitchensink#ci-status) repository.\n\n### Environment variables[​](#Environment-variables \"Direct link to Environment variables\")\n\nYou can set various environment variables to modify how Cypress runs.\n\n#### Configuration Values[​](#Configuration-Values \"Direct link to Configuration Values\")\n\nYou can set any configuration value as an environment variable. This overrides values in the Cypress configuration.\n\n**_Typical use cases would be modifying things like:_**\n\n*   `CYPRESS_BASE_URL`\n*   `CYPRESS_VIDEO`\n*   `CYPRESS_VIDEO_COMPRESSION`\n*   `CYPRESS_REPORTER`\n*   `CYPRESS_INSTALL_BINARY`\n\nRefer to the [Environment Variables recipe](https://docs.cypress.io/guides/references/configuration#Environment-Variables) for more examples.\n\n**_Record Key_**\n\nIf you are [recording your runs](#Record-tests) on a public project, you'll want to protect your Record Key. [Learn why.](https://docs.cypress.io/guides/cloud/account-management/projects#Identification)\n\nInstead of hard coding it into your run command like this:\n\n```\ncypress run --record --key abc-key-123\n```\n\nYou can set the record key as the environment variable, `CYPRESS_RECORD_KEY`, and we'll automatically use that value. You can now omit the `--key` flag when recording.\n\nTypically you'd set this inside of your CI provider.\n\n**_CircleCI Environment Variable_**\n\n![Record key environment variable](https://docs.cypress.io/img/guides/continuous-integration/cypress-record-key-as-environment-variable.png)\n\n**_TravisCI Environment Variable_**\n\n![Travis key environment variable](https://docs.cypress.io/img/guides/continuous-integration/cypress-record-key-as-env-var-travis.png)\n\n#### Git information[​](#Git-information \"Direct link to Git information\")\n\nCypress uses the [@cypress/commit-info](https://github.com/cypress-io/commit-info) package to extract git information to associate with the run (e.g. branch, commit message, author).\n\nIt assumes there is a `.git` folder and uses Git commands to get each property, like `git show -s --pretty=%B` to get commit message, see [src/git-api.js](https://github.com/cypress-io/commit-info/blob/master/src/git-api.js).\n\nUnder some environment setups (e.g. `docker`/`docker-compose`) if the `.git` directory is not available or mounted, you can pass all git related information under custom environment variables.\n\n*   Branch: `COMMIT_INFO_BRANCH`\n*   Message: `COMMIT_INFO_MESSAGE`\n*   Author email: `COMMIT_INFO_EMAIL`\n*   Author: `COMMIT_INFO_AUTHOR`\n*   SHA: `COMMIT_INFO_SHA`\n*   Remote: `COMMIT_INFO_REMOTE`\n\nIf the commit information is missing in the Cypress Cloud run then [GitHub Integration](https://docs.cypress.io/guides/cloud/integrations/source-control/github) or other tasks might not work correctly. To see the relevant Cypress debug logs, set the environment variable `DEBUG` on your CI machine and inspect the terminal output to see why the commit information is unavailable.\n\n```\nDEBUG=commit-info,cypress:server:record\n```\n\n#### CI Build Information[​](#CI-Build-Information \"Direct link to CI Build Information\")\n\nIn some newer CI providers, Cypress can't map the environment variables required to link back to builds or pull requests. In this case we provided users some environment variables to help pass that information along.\n\n*   Pull Request Id: `CYPRESS_PULL_REQUEST_ID`\n*   Pull Request URL: `CYPRESS_PULL_REQUEST_URL`\n*   Build URL: `CYPRESS_CI_BUILD_URL`\n\nSetting these will allow links within the Cloud run to take you to the appropriate place.\n\n#### Custom Environment Variables[​](#Custom-Environment-Variables \"Direct link to Custom Environment Variables\")\n\nYou can also set custom environment variables for use in your tests. These enable your code to reference dynamic values.\n\n```\nexport \"EXTERNAL_API_SERVER=https://corp.acme.co\"\n```\n\nAnd then in your tests:\n\n```\ncy.request({  method: 'POST',  url: Cypress.env('EXTERNAL_API_SERVER') + '/users/1',  body: {    foo: 'bar',    baz: 'quux',  },})\n```\n\nRefer to the dedicated [Environment Variables Guide](https://docs.cypress.io/guides/guides/environment-variables) for more examples.\n\n### Module API[​](#Module-API \"Direct link to Module API\")\n\nOftentimes it can be less complex to programmatically control and boot your servers with a Node script.\n\nIf you're using our [Module API](https://docs.cypress.io/guides/guides/module-api) then you can write a script that boots and then shuts down the server later. As a bonus, you can work with the results and do other things.\n\n```\n// scripts/run-cypress-tests.jsconst cypress = require('cypress')const server = require('./lib/my-server')// start your serverreturn server.start().then(() => {  // kick off a cypress run  return cypress.run().then((results) => {    // stop your server when it's complete    return server.stop()  })})\n```\n\n```\nnode scripts/run-cypress-tests.js\n```\n\n## Common problems and solutions[​](#Common-problems-and-solutions \"Direct link to Common problems and solutions\")\n\n### Missing binary[​](#Missing-binary \"Direct link to Missing binary\")\n\nWhen npm or yarn install the `cypress` package, a `postinstall` hook is executed that downloads the platform-specific Cypress binary. If the hook is skipped for any reason the Cypress binary will be missing (unless it was already cached).\n\nTo better diagnose the error, add [commands to get information about the Cypress cache](https://docs.cypress.io/guides/guides/command-line#cypress-cache-command) to your CI setup. This will print where the binary is located and what versions are already present.\n\n```\nnpx cypress cache pathnpx cypress cache list\n```\n\nIf the required binary version is not found in the cache, you can try the following:\n\n1.  Clean your CI's cache using your CI's settings to force a clean `npm install` on the next build.\n2.  Run the binary install yourself by adding the command `npx cypress install` to your CI script. If there is a binary already present, it should finish quickly.\n\nSee [bahmutov/yarn-cypress-cache](https://github.com/bahmutov/yarn-cypress-cache) for an example that runs the `npx cypress install` command to ensure the Cypress binary is always present before the tests begin.\n\n### Xvfb[​](#Xvfb \"Direct link to Xvfb\")\n\nWhen running on Linux, Cypress needs an X11 server; otherwise it spawns its own X11 server during the test run. When running several Cypress instances in parallel, the spawning of multiple X11 servers at once can cause problems for some of them. In this case, you can separately start a single X11 server and pass the server's address to each Cypress instance using `DISPLAY` variable.\n\nFirst, spawn the X11 server in the background at some port, for example `:99`. If you have installed `xvfb` on Linux or if you are using one of our Docker images from [cypress-docker-images](https://github.com/cypress-io/cypress-docker-images), the tools below should be available.\n\nSecond, set the X11 address in an environment variable\n\nStart Cypress as usual\n\nAfter all tests across all Cypress instances finish, kill the Xvfb background process using `pkill`\n\ncaution\n\nIn certain Linux environments, you may experience connection errors with your X11 server. In this case, you may need to start Xvfb with the following command:\n\n```\nXvfb -screen 0 1024x768x24 :99 &\n```\n\nCypress internally passes these Xvfb arguments, but if you are spawning your own Xvfb, you would need to pass these arguments. This is necessary to avoid using 8-bit color depth with Xvfb, which will prevent Chrome or Electron from crashing.\n\n### Colors[​](#Colors \"Direct link to Colors\")\n\nIf you want colors to be disabled, you can pass the `NO_COLOR` environment variable to disable colors. You may want to do this if ASCII characters or colors are not properly formatted in your CI.\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Cypress Real World App](https://github.com/cypress-io/cypress-realworld-app) runs parallelized CI jobs across multiple operating systems, browsers, and viewport sizes.\n*   [cypress-example-kitchensink](https://github.com/cypress-io/cypress-example-kitchensink#ci-status) is set up to run on multiple CI providers.\n*   [Test Replay](https://docs.cypress.io/guides/cloud/test-replay)\n*   [Cross Browser Testing Guide](https://docs.cypress.io/guides/guides/cross-browser-testing)\n*   [Blog: Setting up Bitbucket Pipelines with proper caching of npm and Cypress](https://www.cypress.io/blog/2018/08/30/setting-up-bitbucket-pipelines-with-proper-caching-of-npm-and-cypress/)\n*   [Blog: Record Test Artifacts from any Docker CI](https://www.cypress.io/blog/2018/08/28/record-test-artifacts-from-any-ci/)\n*   [Continuous Integration with Cypress](https://www.cypress.io/blog/2019/10/04/webcast-recording-continuous-integration-with-cypress/) webinar covering TeamCity, Travis and CircleCI setups.",
    "title": "Introduction | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://glebbahmutov.com/blog/ssr-e2e/",
    "markdown": "# End-to-end Testing for Server-Side Rendered Pages\n\n*   [SSR application](#ssr-application)\n*   [Check HTML](#check-html)\n*   [Removing application bundle](#removing-application-bundle)\n*   [Disable component method](#disable-component-method)\n*   [Confirming `createReactClass` call](#confirming-createreactclass-call)\n*   [Hydrated page](#hydrated-page)\n*   [Conclusions](#conclusions)\n\n**Note:** the source code for this blog post is in [bahmutov/react-server-example](https://github.com/bahmutov/react-server-example) repository which is a fork of the excellent [mhart/react-server-example](https://github.com/mhart/react-server-example).\n\n## SSR application\n\nIf you install dependencies and run this web application, it starts listening on port 3000. For each received request the server returns a rendered markup for a simple list generated using a React component. It also returns props that allow the application to [hydrate client-side](https://glebbahmutov.com/blog/hydrate-your-apps/) and continue from there.\n\nHere is the returned HTML (I am using my favorite [httpie](https://httpie.org/) instead of `curl` to fetch the page). Notice both the list items and the `window.APP_PROPS` in the returned page:\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10  <br>11  <br>12  <br>13  <br>14  <br>15  <br>16 | $ http localhost:3000  <br>HTTP/1.1 200 OK  <br>Connection: keep-alive  <br>Content-Length: 676  <br>Content-Type: text/html; charset=utf-8  <br>Date: Tue, 14 May 2019 01:32:41 GMT  <br>  <br><body><div id=\"content\"><div data-reactroot=\"\"><button disabled=\"\">  <br>Add Item</button><ul><li>Item 0</li><li>Item 1</li><li>Item 2</li>  <br><li>Item 3</li></ul></div></div><script>var APP\\_PROPS = {\"items\":\\[\"Item 0\",  <br>\"Item 1\",\"Item 2\",\"Item 3\"\\]};</script>  <br><script src=\"https://cdn.jsdelivr.net/npm/[\\[email protected\\]](https://glebbahmutov.com/cdn-cgi/l/email-protection)/umd/react.production.min.js\"></script>  <br><script src=\"https://cdn.jsdelivr.net/npm/[\\[email protected\\]](https://glebbahmutov.com/cdn-cgi/l/email-protection)/umd/react-dom.production.min.js\"></script>  <br><script src=\"https://cdn.jsdelivr.net/npm/[\\[email protected\\]](https://glebbahmutov.com/cdn-cgi/l/email-protection)/index.min.js\"></script>  <br><script src=\"https://cdn.jsdelivr.net/npm/[\\[email protected\\]](https://glebbahmutov.com/cdn-cgi/l/email-protection)/create-react-class.min.js\"></script>  <br><script src=\"/bundle.js\"></script></body> |\n\nHow do we test the server-side rendered page using an end-to-end test runner like Cypress.io? The application hydrates, thus if we simply load the page using `cy.visit('http://localhost:3000')` we might be testing the client-side SPA, not the server-rendered one! Here is one possible solution.\n\nInstead of [`cy.visit`](https://on.cypress.io/) we can request the page using [`cy.request`](https://on.cypress.io/) just like a regular HTTP resource - forcing the server to render it. The following test shows how to request the page and pick its `body` property:\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3 | it('renders 5 items on the server', () => {  <br>  cy.request('/').its('body')  <br>}) |\n\nThe DevTools console shows the returned HTML page\n\n![Page HTML is returned by the server](https://glebbahmutov.com/blog/images/ssr-e2e/request-ssr-page.png)\n\n## Check HTML\n\nIf we have static HTML we can find the rendered list items. Without bringing any extra libraries like [cheerio](https://cheerio.js.org/) we can use jQuery already bundled with Cypress:\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10 | it('renders 5 items on the server', () => {  <br>  cy.request('/')  <br>    .its('body')  <br>    .then(html => {  <br>      const $li = Cypress.$(html).find('li')  <br>      expect($li)  <br>        .to.have.property('length')  <br>        .equal(4)  <br>    })  <br>}) |\n\n![Confirm there are 4 items](https://glebbahmutov.com/blog/images/ssr-e2e/4-li-items.png)\n\nNice, server is really rendering the expected items - but we don't see them! Hmm, we can throw the HTML into the application's iframe (the one that is empty right now)\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10  <br>11 | it('renders 5 items on the server', () => {  <br>  cy.request('/')  <br>    .its('body')  <br>    .then(html => {  <br>      const $li = Cypress.$(html).find('li')  <br>      expect($li)  <br>        .to.have.property('length')  <br>        .equal(4)  <br>      cy.state('document').write(html)  <br>    })  <br>}) |\n\n**Tip:** instead of `cy.state('document')` use [cy.document](https://on.cypress.io/document) to grab the `document` object from the application under test iframe:\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3 | cy.document().invoke({ log: false }, 'write', html) |\n\nThe only problem with this approach - the JavaScript starts running immediately, which we can see by adding a few console log statements to the component life cycle methods.\n\n![Component is running](https://glebbahmutov.com/blog/images/ssr-e2e/log.png)\n\n## Removing application bundle\n\nAfter we receive the server-side rendered page, but before we stick it into the browser, we can simply remove the application bundle (or even all script tags). Then we can use \"normal\" Cypress query methods to confirm the expected number of elements - and see them ourselves.\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10  <br>11  <br>12 | it('skips client-side bundle', () => {  <br>  cy.request('/')  <br>    .its('body')  <br>    .then(html => {  <br>        <br>      html = html.replace('<script src=\"/bundle.js\"></script>', '')  <br>      cy.state('document').write(html)  <br>    })  <br>    <br>    <br>  cy.get('li').should('have.length', 4)  <br>}) |\n\nThe page shows the expected elements (highlighted) and the console does not show any messages from the component itself. The button stays disabled, which is another sign that our component has never been activated.\n\n![Skipped component bundle](https://glebbahmutov.com/blog/images/ssr-e2e/without-bundle.png)\n\n## Disable component method\n\nInstead of removing the application bundle completely, we can just disable some React component lifecycle methods, for example `componentDidMount`. Here is how we can do it - by being ready when `window.createReactClass` is called.\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10  <br>11  <br>12  <br>13  <br>14  <br>15  <br>16  <br>17  <br>18  <br>19  <br>20  <br>21  <br>22  <br>23  <br>24  <br>25 | it('disables component methods from createReactClass', () => {  <br>  let createReactClass  <br>  cy.window().then(win => {  <br>    Object.defineProperty(win, 'createReactClass', {  <br>      get () {  <br>        return definition => {  <br>          definition.componentDidMount = () => null  <br>          return createReactClass(definition)  <br>        }  <br>      },  <br>      set (fn) {  <br>        createReactClass = fn  <br>      }  <br>    })  <br>  })  <br>  cy.request('/')  <br>    .its('body')  <br>    .then(html => {  <br>      cy.state('document').write(html)  <br>    })  <br>  cy.get('li').should('have.length', 4)  <br>    <br>    <br>  cy.get('button').should('be.disabled')  <br>}) |\n\n![No more componentDidMount](https://glebbahmutov.com/blog/images/ssr-e2e/no-component.png)\n\n## Confirming `createReactClass` call\n\nIn the above test we have confirmed that the `componentDidMount` was called - but only indirectly, by observing the button that has remained disabled. Let's actually confirm that our dummy no-op function was called once by the React starting up. We can create a [`cy.stub`](https://on.cypress.io/stub) that will be called by the component.\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10  <br>11  <br>12  <br>13  <br>14  <br>15  <br>16  <br>17  <br>18  <br>19  <br>20  <br>21  <br>22 | it('how to know if componentDidMount was called', () => {  <br>  cy.window().then(win => {  <br>    let createReactClass  <br>    Object.defineProperty(win, 'createReactClass', {  <br>      get () {  <br>        return definition => {  <br>          definition.componentDidMount = cy.stub().as('componentDidMount')  <br>          return createReactClass(definition)  <br>        }  <br>      },  <br>      set (fn) {  <br>        createReactClass = fn  <br>      }  <br>    })  <br>  })  <br>  cy.request('/')  <br>    .its('body')  <br>    .then(html => {  <br>      cy.state('document').write(html)  <br>    })  <br>    <br>}) |\n\nHmm, we have a tiny bit of problem with the rest of the test. How do we get to the `@componentDidMount` alias? We cannot simply assert that it has been called once - because the alias has not been created yet when we try to `cy.get` it.\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8 | cy.request('/')  <br>  .its('body')  <br>  .then(html => {  <br>    cy.state('document').write(html)  <br>  })  <br>  <br>  <br>cy.get('@componentDidMount').should('have.been.calledOnce') |\n\n![Stub was called, but the test claims it was unavailable](https://glebbahmutov.com/blog/images/ssr-e2e/cy-get-timing-problem.png)\n\nNotice that in the test above `cy.get('@componentDidMount')` has failed to find the alias, yet it was later called by the app. That is why the \"Spies / Stubs\" table shows 1 call. Hmm, how do we wait until an alias has been created before calling `cy.get` on it? We could just add a 1 second wait - that should be enough, right?\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7 | cy.request('/')  <br>  .its('body')  <br>  .then(html => {  <br>    cy.state('document').write(html)  <br>  })  <br>cy.wait(1000)  <br>cy.get('@componentDidMount').should('have.been.calledOnce') |\n\n![Wait 1 second - the alias should be there after the delay](https://glebbahmutov.com/blog/images/ssr-e2e/wait-1-second.png)\n\nOf course, this is NOT the way Cypress works - you should not hardcode waits, instead you should just declare a condition to wait for. The test runner then will only wait until the moment the condition becomes satisfied, and not a millisecond longer. To achieve this we can take advantage of [`cy.should(fn)`](https://on.cypress.io/should#Function) that automatically retries the callback function until it passes without throwing an error (or times out).\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10  <br>11  <br>12  <br>13  <br>14  <br>15  <br>16  <br>17  <br>18  <br>19  <br>20  <br>21  <br>22  <br>23  <br>24  <br>25  <br>26  <br>27  <br>28 | it.only('how to know if componentDidMount was called', () => {  <br>  let componentDidMountSet  <br>  cy.window().then(win => {  <br>    let createReactClass  <br>    Object.defineProperty(win, 'createReactClass', {  <br>      get () {  <br>        return definition => {  <br>          definition.componentDidMount = cy.stub().as('componentDidMount')  <br>          componentDidMountSet = true  <br>          return createReactClass(definition)  <br>        }  <br>      },  <br>      set (fn) {  <br>        createReactClass = fn  <br>      }  <br>    })  <br>  })  <br>  cy.request('/')  <br>    .its('body')  <br>    .then(html => {  <br>      cy.state('document').write(html)  <br>    })  <br>  <br>    <br>  cy.wrap(null).should(() => expect(componentDidMountSet).to.be.true)  <br>    <br>  cy.get('@componentDidMount').should('have.been.calledOnce')  <br>}) |\n\nThis line is the key\n\n|     |     |\n| --- | --- |\n| 1   | cy.wrap(null).should(() => expect(componentDidMountSet).to.be.true) |\n\nIt [retries](https://on.cypress.io/retry-ability) until the `expect(...).to.be.true` passes successfully.\n\n![Auto-retry until variable is set](https://glebbahmutov.com/blog/images/ssr-e2e/retry.png)\n\nNotice that auto-retrying is much faster (130ms) than hard-coding 1 second wait, yet works reliably.\n\nOne other way to write a command to wait until a specific condition becomes true (without throwing) is to use [cypress-wait-until](https://github.com/NoriSte/cypress-wait-until) plugin. Using this plugin we can write the same \"wait until variable gets its value\" like this\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4 | let componentDidMountSet  <br>...  <br>cy.waitUntil(() => cy.wrap(componentDidMountSet))  <br>cy.get('@componentDidMount').should('have.been.calledOnce') |\n\n## Hydrated page\n\nOnce the web application starts client-side, the markup should not jump or move - the newly rendered DOM should match the static HTML exactly, except the button becomes enabled in our example. Let's confirm it with the following test:\n\n|     |     |\n| --- | --- |\n| 1  <br>2  <br>3  <br>4  <br>5  <br>6  <br>7  <br>8  <br>9  <br>10  <br>11  <br>12  <br>13  <br>14  <br>15  <br>16  <br>17  <br>18  <br>19  <br>20  <br>21  <br>22  <br>23  <br>24  <br>25  <br>26  <br>27  <br>28  <br>29  <br>30  <br>31  <br>32  <br>33  <br>34  <br>35  <br>36  <br>37  <br>38  <br>39  <br>40  <br>41  <br>42  <br>43  <br>44  <br>45  <br>46  <br>47  <br>48  <br>49  <br>50  <br>51  <br>52 | const resetDocument = () => {  <br>  const doc = cy.state('document')  <br>  doc.body.innerHTML = ''  <br>}  <br>  <br>it('renders same application after hydration', () => {  <br>    <br>    <br>    <br>  const win = cy.state('window')  <br>  delete win.createReactClass  <br>  <br>  let pageHtml  <br>  cy.request('/')  <br>    .its('body')  <br>    .then(html => {  <br>      pageHtml = html  <br>        <br>      cy.state('document').write(  <br>        html.replace('<script src=\"/bundle.js\"></script>', '')  <br>      )  <br>    })  <br>  <br>  cy.get('li').should('have.length', 4)  <br>  cy.get('button').should('be.disabled')  <br>  <br>  let staticHTML  <br>  cy.get('#content')  <br>    .invoke('html')  <br>      <br>      <br>    .then(html => (staticHTML = html.replace(' disabled=\"\"', '')))  <br>  <br>      <br>    .then(resetDocument)  <br>    .then(() => {  <br>      cy.state('document').write(pageHtml)  <br>    })  <br>  <br>    <br>  cy.get('button').should('be.enabled')  <br>  <br>  cy.get('#content')  <br>    .invoke('html')  <br>    .then(html => {  <br>      expect(html).to.equal(staticHTML)  <br>    })  <br>}) |\n\nThe test runs and confirms that the hydrated page matches the static HTML exactly.\n\n![Static vs hydrated HTML test](https://glebbahmutov.com/blog/images/ssr-e2e/hydrate-test.png)\n\n## Conclusions\n\nUsing [cy.request](https://on.cypress.io/) we can request the server-side rendered page and mount it into the Test Runner's application iframe for further testing. We can disable client-side functionality to make sure we only see the static HTML before hydration. We can also spy on the client-side application to confirm that it starts correctly, and I have shown how to wait for a variable to get its value before the test continues. Finally, I have shown how to confirm that the static HTML sent by the server is hydrated correctly by the client side application from the `APP_PROPS` data.",
    "title": "End-to-end Testing for Server-Side Rendered Pages | Better world by better software",
    "description": "SSR application Check HTML Removing application bundle Disable component method Confirming createReactClass call Hydrated page Conclusions    Note: the source code for this blog post is in bahmutov",
    "languageCode": null
  },
  {
    "url": "https://docs.cypress.io/guides/continuous-integration/ci-provider-examples",
    "markdown": "# CI Provider Examples | Cypress Documentation\n\ntip\n\n**Cypress is compatible with all Continuous Integration (CI) providers and systems.** On this page you'll find extensive guides for using Cypress with some of the most popular CI providers, and assorted quick start examples for many other providers.\n\n## Guides[​](#Guides \"Direct link to Guides\")\n\nFor the following CI Providers we have in depth guides.\n\n### CircleCI[​](#CircleCI \"Direct link to CircleCI\")\n\n[CircleCI Guide](https://docs.cypress.io/guides/continuous-integration/circleci)  \n[See CircleCI + Cypress Cloud in action](https://cloud.cypress.io/projects/7s5okt)\n\ninfo\n\n### Real World Example New[​](#Real-World-Example-New \"Direct link to Real-World-Example-New\")\n\nThe Cypress [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) uses [CircleCI](https://circleci.com/) to test over 300 test cases in parallel across 25 machines, multiple browsers, multiple device sizes, and multiple operating systems with full code-coverage reporting and [Cypress Cloud recording](https://cloud.cypress.io/projects/7s5okt).\n\nCheck out the full [RWA CircleCI configuration](https://github.com/cypress-io/cypress-realworld-app/blob/develop/.circleci/config.yml).\n\n### GitHub Actions[​](#GitHub-Actions \"Direct link to GitHub Actions\")\n\n[GitHub Actions Guide](https://docs.cypress.io/guides/continuous-integration/github-actions)  \n[See GitHub Actions + Cypress Cloud in action](https://cloud.cypress.io/projects/tpys4j)\n\ninfo\n\n### Real World Example New[​](#Real-World-Example-New-1 \"Direct link to Real-World-Example-New-1\")\n\nThe Cypress [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) uses [GitHub Actions](https://github.com/) to test over 300 test cases in parallel across 25 machines, multiple browsers, multiple device sizes, and multiple operating systems with [Cypress Cloud recording](https://cloud.cypress.io/projects/tpys4j).\n\nCheck out the full [RWA GitHub Actions configuration](https://github.com/cypress-io/cypress-realworld-app/blob/develop/.github/workflows/main.yml).\n\n### AWS CodeBuild[​](#AWS-CodeBuild \"Direct link to AWS CodeBuild\")\n\n[AWS CodeBuild Guide](https://docs.cypress.io/guides/continuous-integration/aws-codebuild)\n\n### Bitbucket[​](#Bitbucket \"Direct link to Bitbucket\")\n\n[Bitbucket Pipelines Guide](https://docs.cypress.io/guides/continuous-integration/bitbucket-pipelines)\n\n## Examples[​](#Examples \"Direct link to Examples\")\n\n### TravisCI[​](#TravisCI \"Direct link to TravisCI\")\n\n*   [Basic .travis.yml](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/basic/.travis.yml)\n*   [Parallel .travis.yml](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/.travis.yml)\n\n### Azure Pipelines[​](#Azure-Pipelines \"Direct link to Azure Pipelines\")\n\ninfo\n\n**Note**\n\nAzure Pipelines was formerly called Visual Studio Team Services(VSTS) CI or TeamFoundation\n\n*   [Basic Example (azure-ci.yml)](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/basic/azure-ci.yml)\n*   [Parallelized Example (azure-ci.yml)](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/azure-ci.yml)\n\n### Jenkins[​](#Jenkins \"Direct link to Jenkins\")\n\n*   [Basic Jenkinsfile](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/basic/Jenkinsfile)\n*   [Parallel Jenkinsfile](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/Jenkinsfile)\n\n### Netlify[​](#Netlify \"Direct link to Netlify\")\n\nWe recommend using our official [netlify-plugin-cypress](https://github.com/cypress-io/netlify-plugin-cypress) to execute end-to-end tests before and after deployment to Netlify platform. Read our tutorials [Test Sites Deployed To Netlify Using netlify-plugin-cypress](https://glebbahmutov.com/blog/test-netlify/) and [Run Cypress Tests on Netlify Using a Single Line](https://cypress.io/blog/2020/03/30/run-cypress-tests-on-netlify-using-a-single-line/).\n\n### Buildkite[​](#Buildkite \"Direct link to Buildkite\")\n\n*   [Parallel Example (.buildkite/pipeline.yml)](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/.buildkite/pipeline.yml)\n\n### CodeShip Pro[​](#CodeShip-Pro \"Direct link to CodeShip Pro\")\n\n*   [Basic](https://github.com/cypress-io/cypress-example-kitchensink/tree/master/basic/codeship-pro)\n*   [Parallel codeship-steps.yml](https://github.com/cypress-io/cypress-example-kitchensink/tree/master/codeship-steps.yml)\n*   [Parallel codeship-services.yml](https://github.com/cypress-io/cypress-example-kitchensink/tree/master/codeship-services.yml)\n\n### Semaphore[​](#Semaphore \"Direct link to Semaphore\")\n\n*   [Basic .semaphore.yml](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/basic/.semaphore.yml)\n*   [Parallel .semaphore.yml](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/.semaphore/semaphore.yml)\n\n### AppVeyor[​](#AppVeyor \"Direct link to AppVeyor\")\n\n*   [Basic Example (appveyor.yml)](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/appveyor.yml)\n\n### AWS Amplify Console[​](#AWS-Amplify-Console \"Direct link to AWS Amplify Console\")\n\n*   [Basic Example (amplify.yml)](https://github.com/cypress-io/cypress-example-kitchensink/blob/master/amplify.yml)\n\n### webapp.io[​](#webappio \"Direct link to webapp.io\")\n\n*   [cypress-example-layerci](https://github.com/bahmutov/cypress-example-layerci)\n*   [Using cypress with webapp.io](https://webapp.io/docs/integrations/cypress)",
    "title": "CI Provider Examples | Cypress Documentation",
    "description": "Cypress is compatible with all Continuous Integration (CI) providers and systems.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/component-testing/third-party-definitions",
    "markdown": "# Integrating with Cypress Component Testing\n\ninfo\n\nThis feature is only available in Cypress **v12.7** and later.\n\nCypress Component Testing includes [official support](https://docs.cypress.io/guides/component-testing/overview#Supported-Frameworks) for many popular libraries and frameworks such as [React](https://docs.cypress.io/guides/component-testing/react/overview), [Angular](https://docs.cypress.io/guides/component-testing/angular/overview), and [Vue](https://docs.cypress.io/guides/component-testing/vue/overview). All officially supported libraries feature a first class onboarding experience, where we detect and scaffold the correct files, and a framework-specific `mount` adapter to render your components. We call this collection of features a _Framework Definition_ since it defines the requirements for a library or framework to work in Cypress.\n\nIf your favorite library isn't featured, don't worry - we expose the same API we use internally for the Cypress community to define their own Framework Definitions.\n\nIn this guide, you'll learn how to author a Framework Definition, which will enjoy the same polished onboarding experience as our officially supported frameworks.\n\n## Concepts[​](#Concepts \"Direct link to Concepts\")\n\nThere are a few requirements for authoring a Framework Definition.\n\n*   [Definition File](#Framework-Definition) (we recommending naming this `definition.cjs`)\n*   [Mount Adapter](#Mount-Adapter) (we recommending naming this `index.mjs`)\n*   A [`package.json`](#packagejson) with the correct conventions\n\nThe Definition is required when users configure Component Testing for the first time. The Mount adapter is used to render components when writing tests.\n\nTo simplify this process, we recommend starting development using [our official template](https://github.com/cypress-io/cypress-ct-definition-template).\n\n## Framework Definition[​](#Framework-Definition \"Direct link to Framework Definition\")\n\nBelow is a minimal Framework Definition. Note that `defineFrameworkDefinition` is purely for type safety, similar to `defineConfig` in `cypress.config`.\n\nThere is one important convention; the `type` key in `defineFrameworkDefinition` should match the name of your package on npm, and should be named using one of the following conventions:\n\n*   `cypress-ct-*`\n*   `@organization/cypress-ct-*`\n\nSome examples of valid names include:\n\n*   `cypress-ct-react-js`\n*   `cypress-ct-svelte-testing`\n*   `@cypress/cypress-ct-react`\n*   `@angular/cypress-ct-angular`\n\nWhen configuring a project to use Component Testing, Cypress will load any dependencies following this naming convention from the project's `node_modules` and present them as framework options.\n\nA simple example of a Framework Defintion for the [Solid.js](https://www.solidjs.com/) library is shown below. We generally recommend naming this `definition.cjs`. In our [official template](https://github.com/cypress-io/cypress-ct-definition-template), this file is at the root level of the package.\n\n```\nconst { defineFrameworkDefinition } = require('cypress')const solidDep = {  // Unique, semantic identifier.  type: 'solid-js',  // Human readable name.  name: 'Solid',  // Package name install from `npm`.  package: 'solid-js',  /**   * Similar to package, but can include a version or tag.   * Used during setup to generate an install command for users.   * Eg: `solid-js@next`   */  installer: 'solid-js',  // Human readable description.  description:    'A declarative, efficient, and flexible JavaScript library for building user interfaces.',  // Minimum supported version.  minVersion: '^1.6.0',}/** * Similar to above. Create an smooth, seamless setup experience * by ensuring the user has all the necessary dependencies. * @type {Cypress.CypressComponentDependency} */const solidVitePlugin = {  type: 'solid-js-vite-plugin',  name: 'Vite Plugin Solid',  package: 'vite-plugin-solid',  installer: 'vite-plugin-solid',  description: 'A simple integration to run solid-js with vite',  minVersion: '^1.6.0 || ^2.0.0',}/** * The actual definition. */module.exports = defineFrameworkDefinition({  /**   * This should match the `npm` package name.   * The convention required to ensure your Definition is processed   * by Cypress is `cypress-ct-*` for global packages, or   * `@org/cypress-ct-*` for organization level packages.   */  type: '@lmiller1990/cypress-ct-solid-js',  /**   * The label that shows up when configuring Component Testing   * for the first time.   */  name: 'Solid.js',  /**   * Supported bundlers. Can be \"webpack\" and/or \"vite\".   * In this example we only support Solid.js with Vite.   */  supportedBundlers: ['vite'],  /**   * Used by Cypress to automatically detect the correct Framework Definition   * based on the user's project.   * In this example, if a module matching `solidDep`   * is found in the user's project,   * Solid.js will automatically be selected when configuring Component Testing.   */  detectors: [solidDep],  /**   * Supply a set of dependencies a project should have to use this Framework Definition. The user will be prompted to install them if they are not found.   * Optionally, supply different dependencies based on the chosen bundler.   */  dependencies: (bundler) => {    return [solidDep, solidVitePlugin]  },  /**   * An SVG icon. Shown when configuring Component Testing for the first time.   * Optional, but good for branding your Framework Definition.   */  icon: `    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 166 155.3\"><path d=\"M163 35S110-4 69 5l-3 1c-6 2-11 5-14 9l-2 3-15 26 26 5c11 7 25 10 38 7l46 9 18-30z\" fill=\"#76b3e1\"/><linearGradient id=\"a\" gradientUnits=\"userSpaceOnUse\" x1=\"27.5\" y1=\"3\" x2=\"152\" y2=\"63.5\"><stop offset=\".1\" stop-color=\"#76b3e1\"/><stop offset=\".3\" stop-color=\"#dcf2fd\"/><stop offset=\"1\" stop-color=\"#76b3e1\"/></linearGradient><path d=\"M163 35S110-4 69 5l-3 1c-6 2-11 5-14 9l-2 3-15 26 26 5c11 7 25 10 38 7l46 9 18-30z\" opacity=\".3\" fill=\"url(#a)\"/><path d=\"M52 35l-4 1c-17 5-22 21-13 35 10 13 31 20 48 15l62-21S92 26 52 35z\" fill=\"#518ac8\"/><linearGradient id=\"b\" gradientUnits=\"userSpaceOnUse\" x1=\"95.8\" y1=\"32.6\" x2=\"74\" y2=\"105.2\"><stop offset=\"0\" stop-color=\"#76b3e1\"/><stop offset=\".5\" stop-color=\"#4377bb\"/><stop offset=\"1\" stop-color=\"#1f3b77\"/></linearGradient><path d=\"M52 35l-4 1c-17 5-22 21npm install https://cdn.cypress.io/beta/npm/12.6.0/darwin-arm64/feature/ct-public-api-ab820f062d313fbef51665bdd1d883c69d89b3be/cypress.tgz-13 35 10 13 31 20 48 15l62-21S92 26 52 35z\" opacity=\".3\" fill=\"url(#b)\"/><linearGradient id=\"c\" gradientUnits=\"userSpaceOnUse\" x1=\"18.4\" y1=\"64.2\" x2=\"144.3\" y2=\"149.8\"><stop offset=\"0\" stop-color=\"#315aa9\"/><stop offset=\".5\" stop-color=\"#518ac8\"/><stop offset=\"1\" stop-color=\"#315aa9\"/></linearGradient><path d=\"M134 80a45 45 0 00-48-15L24 85 4 120l112 19 20-36c4-7 3-15-2-23z\" fill=\"url(#c)\"/><linearGradient id=\"d\" gradientUnits=\"userSpaceOnUse\" x1=\"75.2\" y1=\"74.5\" x2=\"24.4\" y2=\"260.8\"><stop offset=\"0\" stop-color=\"#4377bb\"/><stop offset=\".5\" stop-color=\"#1a336b\"/><stop offset=\"1\" stop-color=\"#1a336b\"/></linearGradient><path d=\"M114 115a45 45 0 00-48-15L4 120s53 40 94 30l3-1c17-5 23-21 13-34z\" fill=\"url(#d)\"/></svg>  `,})\n```\n\nOur Framework Definition shows up in Cypress! It has the \"community\" label, indicating it's a third party definition.\n\n![custom framework definition](https://docs.cypress.io/img/guides/component-testing/framework-definition-1.png)\n\nWe defined the `dependencies`, which are also correctly handled - we haven't installed them all, so Cypress is prompting us to do so:\n\n![required dependencies](https://docs.cypress.io/img/guides/component-testing/framework-definition-2.png)\n\n## Mount Adapter[​](#Mount-Adapter \"Direct link to Mount Adapter\")\n\nThe second part of defining a Framework Definition is the Mount Adapter. This is the function that renders the component in your tests using `cy.mount()`.\n\nBy default, Cypress will look for this as a `mount` function that is a **named export** from the package. This should be written in a `index.mjs` file. This example is for a [Solid.js](https://www.solidjs.com/) mount adapter:\n\n```\nimport { getContainerEl, setupHooks } from '@cypress/mount-utils'import { render } from 'solid-js/web'let disposefunction cleanup() {  dispose?.()}/** * @param {() => JSX.Element} - component to render */export function mount(component, options = {}) {  // Retrieve root DOM element that Cypress has prepared for this test  const root = getContainerEl()  dispose = render(() => component, root)  // Wait until next microtick to ensure any async render logic has executed  return cy.wait(0, { log: false }).then(() => {    if (options.log !== false) {      Cypress.log({        name: 'mount',        message: 'Mounted component',      })    }  })}// Cleanup between each testsetupHooks(cleanup)\n```\n\nThis is different for each library, but the concept is the same - identify how to mount or render a component in your library, and implement it in a function named `mount` in `index.mjs`.\n\nWhen a user configures Component Testing with your Framework Definition we automatically configure a `cy.mount` command using your `mount` function in the Component Testing `supportFile`:\n\n```\nimport { mount } from '@lmiller1990/cypress-ct-solid-js'Cypress.Commands.add('mount', mount)\n```\n\n## package.json[​](#packagejson \"Direct link to package.json\")\n\nThe final thing you need is a correctly configured `package.json`. This example was created using [our official template](https://github.com/cypress-io/cypress-ct-definition-template).\n\nThere are two fields of note:\n\n*   `name`: Your package name which must follow the `cypress-ct-*`/`@org/cypress-ct-*` convention\n*   `exports`: Object referencing the two files we created to comprise the Framework Definition. The `node` entry points to the Definition file, and the `default` entry points to the Mount Adapter:\n\n```\n{  \"name\": \"@lmiller1990/cypress-ct-solid-js\",  \"version\": \"0.0.4\",  \"description\": \"Example Framework Definition for Cypress and Solid.js\",  \"exports\": {    \"node\": \"./definition.cjs\",    \"default\": \"./index.mjs\"  },  \"files\": [    \"package.json\",    \"definition.cjs\",    \"index.mjs\"  ],  \"dependencies\": {    \"@cypress/mount-utils\": \"^4.0.0\"  },  \"devDependencies\": {    \"solid-js\": \"^1.6.0\"  },  \"peerDependencies\": {    \"solid-js\": \"^1.6.0\"    \"cypress\": \"^12.7.0\"  }}\n```\n\nIf you develop the Framework Definition file using TypeScript, for example by using [our official template](https://github.com/cypress-io/cypress-ct-definition-template), as long as you don't have any compile time errors, everything should work as expected. If you do run into unexpected behavior, please [file an issue](https://github.com/cypress-io/cypress/issues).\n\nMount Adapters can be more complex to test. In general, we recommend testing them in the same way users consume them - using Cypress Component Testing. A minimal test suite for a simple Solid.js Mount Adapter can be found [here](https://github.com/lmiller1990/cypress-ct-solid-js/tree/main/example-project). Alternatively, take a look at our official [React](https://github.com/cypress-io/cypress/tree/develop/npm/react) and [Angular](https://github.com/cypress-io/cypress/tree/develop/npm/angular) Mount Adapters, both of which have extensive test suites.\n\n## Publishing on npm[​](#Publishing-on-npm \"Direct link to Publishing on npm\")\n\nThat's it! Publish your Framework Definition on npm and start using it.\n\n## Available Framework Definitions[​](#Available-Framework-Definitions \"Direct link to Available Framework Definitions\")\n\nYou can find a list of available Framework Definitions [here](https://docs.cypress.io/guides/component-testing/overview#Community-Supported-Frameworks).\n\nIf you have created a Framework Definition we would be delighted to mention it in our documentation so other Cypress users on the same framework can find it. [Please submit a Pull Request](https://github.com/cypress-io/cypress-documentation/blob/main/CONTRIBUTING.md)!",
    "title": "Integrating with Cypress Component Testing | Cypress Documentation",
    "description": "This feature is only available in Cypress v12.7",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/component-testing/react/api",
    "markdown": "# React API | Cypress Documentation\n\n```\nimport { mount } from '@cypress/react'import { Stepper } from './Stepper'it('mounts', () => {  mount(<StepperComponent />)  cy.get('[data-cy=increment]').click()  cy.get('[data-cy=counter]').should('have.text', '1')}\n```",
    "title": "React API | Cypress Documentation",
    "description": "Methods",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/tooling/IDE-integration",
    "markdown": "# IDE Integration | Cypress Documentation\n\n## File Opener Preference[​](#File-Opener-Preference \"Direct link to File Opener Preference\")\n\nWhen clicking on a file path or an [error](https://docs.cypress.io/guides/guides/debugging#Errors) in the [command log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log), Cypress will attempt to open the file on your system. If the editor supports inline highlighting of the file, the file will open with the cursor located on the line and column of interest.\n\n![Open file in your IDE](https://docs.cypress.io/img/guides/core-concepts/cypress-app/open-file-in-IDE.gif)\n\nThe first time you click a file path, Cypress will prompt you to select which location you prefer to open the file. You can choose to open it in your:\n\n*   File system (e.g. Finder on MacOS, File Explore on Windows)\n*   An IDE located on your system\n*   A specified application path\n\ncaution\n\nCypress attempts to find available file editors on your system and display those as options. If your preferred editor is not listed, you can specify the (full) path to it by selecting **Other**. Cypress will make every effort to open the file, _but it is not guaranteed to work with every application_.\n\nAfter setting your file opener preference, any files will automatically open in your selected application without prompting you to choose. If you want to change your selection, you can do so in the **Settings** tab of Cypress by clicking under **File Opener Preference**.\n\n![screenshot of Cypress test-runner settings tab with file opener preference panel](https://docs.cypress.io/img/guides/IDE-integration/file-opener-preference-settings-tab.png)\n\n## Extensions & Plugins[​](#Extensions--Plugins \"Direct link to Extensions & Plugins\")\n\nThere are many third-party IDE extensions and plugins to help integrate your IDE with Cypress.\n\n### Visual Studio Code[​](#Visual-Studio-Code \"Direct link to Visual Studio Code\")\n\n*   [Cypress Fixture-IntelliSense](https://marketplace.visualstudio.com/items?itemName=JosefBiehler.cypress-fixture-intellisense): Supports your [cy.fixture()](https://docs.cypress.io/api/commands/fixture) by providing intellisense for existing fixtures.\n*   [Cypress Helper](https://marketplace.visualstudio.com/items?itemName=shevtsov.vscode-cy-helper): Various helpers and commands for integration with Cypress.\n*   [Cypress Snippets](https://marketplace.visualstudio.com/items?itemName=andrew-codes.cypress-snippets): Useful Cypress code snippets.\n*   [Cypress Snippets](https://marketplace.visualstudio.com/items?itemName=CliffSu.cypress-snippets): This extension includes the newest and most common cypress snippets.\n*   [Open Cypress](https://marketplace.visualstudio.com/items?itemName=tnrich.vscode-extension-open-cypress): Allows you to open Cypress specs and single `it()` blocks directly from VS Code.\n*   [Test Utils](https://marketplace.visualstudio.com/items?itemName=chrisbreiding.test-utils): Easily add or remove `.only` and `.skip` modifiers with keyboard shortcuts or the command palette.\n\n### IntelliJ Platform[​](#IntelliJ-Platform \"Direct link to IntelliJ Platform\")\n\n*   [JetBrains Aqua](https://www.jetbrains.com/aqua/): An IDE for UI Test Automation with comprehensive Cypress support. Features include autocompletion, in-IDE debugging, test search, and more.\n    \n*   [Test Automation plugin](https://plugins.jetbrains.com/plugin/20175-test-automation): The official plugin, developed and maintained by JetBrains, offering robust support for Cypress and compatible with IntelliJ IDEA, CLion, GoLand, PhpStorm, PyCharm, Rider, RubyMine, and WebStorm. It encompasses all the features found in JetBrains Aqua.\n    \n*   [Cypress Support](https://plugins.jetbrains.com/plugin/13819-intellij-cypress): Integrates Cypress under the common Intellij test framework.\n    \n\n## Intelligent Code Completion[​](#Intelligent-Code-Completion \"Direct link to Intelligent Code Completion\")\n\n### Writing Tests[​](#Writing-Tests \"Direct link to Writing Tests\")\n\n#### Features[​](#Features \"Direct link to Features\")\n\nIntelliSense is available for Cypress. It offers intelligent code suggestions directly in your IDE while writing tests. A typical IntelliSense popup shows command definition, a code example and a link to the full documentation page.\n\n##### Autocomplete while typing Cypress commands[​](#Autocomplete-while-typing-Cypress-commands \"Direct link to Autocomplete while typing Cypress commands\")\n\n##### Signature help when writing and hovering on Cypress commands[​](#Signature-help-when-writing-and-hovering-on-Cypress-commands \"Direct link to Signature help when writing and hovering on Cypress commands\")\n\n##### Autocomplete while typing assertion chains, including only showing DOM assertions if testing on a DOM element.[​](#Autocomplete-while-typing-assertion-chains-including-only-showing-DOM-assertions-if-testing-on-a-DOM-element \"Direct link to Autocomplete while typing assertion chains, including only showing DOM assertions if testing on a DOM element.\")\n\n#### Set up in your Dev Environment[​](#Set-up-in-your-Dev-Environment \"Direct link to Set up in your Dev Environment\")\n\nThis document assumes you have [installed Cypress](https://docs.cypress.io/guides/getting-started/installing-cypress).\n\nCypress comes with TypeScript [type declarations](https://github.com/cypress-io/cypress/tree/develop/cli/types) included. Modern text editors can use these type declarations to show IntelliSense inside spec files.\n\n##### Triple slash directives[​](#Triple-slash-directives \"Direct link to Triple slash directives\")\n\nThe simplest way to see IntelliSense when typing a Cypress command or assertion is to add a [triple-slash directive](http://www.typescriptlang.org/docs/handbook/triple-slash-directives.html) to the head of your JavaScript or TypeScript testing file. This will turn the IntelliSense on a per file basis. Copy the comment line below and paste it into your spec file.\n\n```\n/// <reference types=\"Cypress\" />\n```\n\nIf you write [custom commands](https://docs.cypress.io/api/cypress-api/custom-commands) and provide TypeScript definitions for them, you can use the triple slash directives to show IntelliSense, even if your project uses only JavaScript. For example, if your custom commands are written in `cypress/support/commands.js` and you describe them in `cypress/support/index.d.ts` use:\n\n```\n// type definitions for Cypress object \"cy\"/// <reference types=\"cypress\" />// type definitions for custom commands like \"createDefaultTodos\"/// <reference types=\"../support\" />\n```\n\nSee the [`cypress-example-todomvc`](https://github.com/cypress-io/cypress-example-todomvc#cypress-intellisense) repository for a working example.\n\nIf the triple slash directive does not work, please refer to your code editor in [TypeScript's Editor Support doc](https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support) and follow the instructions for your IDE to get [TypeScript support](https://docs.cypress.io/guides/tooling/typescript-support) and intelligent code completion configured in your developer environment first. TypeScript support is built in for [Visual Studio Code](https://code.visualstudio.com/), [Visual Studio](https://www.visualstudio.com/), and [WebStorm](https://www.jetbrains.com/webstorm/) - all other editors require extra setup.\n\n##### Reference type declarations via `jsconfig`[​](#Reference-type-declarations-via-jsconfig \"Direct link to Reference-type-declarations-via-jsconfig\")\n\nInstead of adding triple slash directives to each JavaScript spec file, some IDEs (like VS Code) understand a common `jsconfig.json` file in the root of the project. In that file, you can include the Cypress module and your test folders.\n\n```\n{  \"include\": [\"./node_modules/cypress\", \"cypress/**/*.js\"]}\n```\n\nThe Intelligent Code Completion should now show help for `cy` commands inside regular JavaScript spec files.\n\n##### Reference type declarations via `tsconfig`[​](#Reference-type-declarations-via-tsconfig \"Direct link to Reference-type-declarations-via-tsconfig\")\n\nAdding a [`tsconfig.json`](http://www.typescriptlang.org/docs/handbook/tsconfig-json.html) inside your [`cypress` folder](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Folder-structure) with the following configuration should get intelligent code completion working.\n\n```\n{  \"compilerOptions\": {    \"allowJs\": true,    \"types\": [\"cypress\"]  },  \"include\": [\"**/*.*\"]}\n```\n\n### See also[​](#See-also \"Direct link to See also\")\n\n*   [Adding custom properties to the global `window` with the right TypeScript type](https://github.com/bahmutov/test-todomvc-using-app-actions#intellisense)",
    "title": "IDE Integration | Cypress Documentation",
    "description": "File Opener Preference",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/continuous-integration/github-actions",
    "markdown": "# GitHub Actions | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to run Cypress tests with GitHub Actions as part of a CI/CD pipeline\n*   How to parallelize Cypress test runs within GitHub Actions\n*   How to cache build artifacts between installation jobs and worker jobs\n\nGitHub offers developers [Actions](https://github.com/features/actions) that provide a way to **automate, customize, and execute your software development workflows** within your GitHub repository. Detailed documentation is available in the [GitHub Action Documentation](https://docs.github.com/en/actions).\n\n## Cypress GitHub Action[​](#Cypress-GitHub-Action \"Direct link to Cypress GitHub Action\")\n\nWorkflows can be packaged and shared as [GitHub Actions](https://github.com/features/actions). GitHub maintains many, such as the [checkout](https://github.com/marketplace/actions/checkout) and [Upload/Download Artifact Actions](https://docs.github.com/en/actions/guides/storing-workflow-data-as-artifacts) actions used below.\n\nThe official [Cypress GitHub Action](https://github.com/marketplace/actions/cypress-io) is maintained by Cypress and our community to help ease the setup of Cypress in a GitHub Action. The action provides dependency installation (via npm, yarn, or pnpm), built-in caching of Node dependencies, and additional configuration options for advanced workflows.\n\n### Version Number Selection[​](#Version-Number-Selection \"Direct link to Version Number Selection\")\n\ntip\n\n**GitHub Action Version Number**\n\nWe recommend binding to the action's latest major version by specifying `v6` when using the action.\n\nFor Example:\n\n```\njobs:  cypress-run:    steps:      - uses: cypress-io/github-action@v6\n```\n\nAlternatively, as a mitigation strategy for unforeseen breaks, bind to a specific [release version tag](https://github.com/cypress-io/github-action/releases), for example `cypress-io/[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)`. Read the [Cypress GitHub Action documentation](https://github.com/cypress-io/github-action#action-version) for more information.\n\n## Basic Setup[​](#Basic-Setup \"Direct link to Basic Setup\")\n\nThe example below is a basic CI setup and job using the [Cypress GitHub Action](https://github.com/marketplace/actions/cypress-io) to run Cypress tests within the Electron browser. This GitHub Action configuration is placed within `.github/workflows/main.yml`.\n\n```\nname: Cypress Testson: pushjobs:  cypress-run:    runs-on: ubuntu-22.04    steps:      - name: Checkout        uses: actions/checkout@v4      # Install npm dependencies, cache them correctly      # and run all Cypress tests      - name: Cypress run        uses: cypress-io/github-action@v6        with:          build: npm run build          start: npm start\n```\n\n**How this action works:**\n\n*   On _push_ to this repository, this job will provision and start a GitHub-hosted Ubuntu Linux instance to run the outlined `steps` for the declared `cypress-run` job within the `jobs` section of the configuration.\n*   The [GitHub checkout Action](https://github.com/marketplace/actions/checkout) is used to check out our code from our GitHub repository.\n*   Finally, our Cypress GitHub Action will:\n    *   Install npm dependencies\n    *   Build the project (`npm run build`)\n    *   Start the project web server (`npm start`)\n    *   Run the Cypress tests within our GitHub repository within Electron.\n\n## Testing on GitHub with Installed Browsers[​](#Testing-on-GitHub-with-Installed-Browsers \"Direct link to Testing on GitHub with Installed Browsers\")\n\n[GitHub-hosted runners](https://github.com/actions/runner-images) offer images with pre-installed browsers to use for testing. The `ubuntu` and `windows` runners each include Google Chrome, Mozilla Firefox, and Microsoft Edge pre-installed. The `macos` runners additionally include Apple Safari. Refer to [GitHub Actions Runner Images](https://github.com/actions/runner-images/blob/main/README.md) for current details.\n\nUse the action's `browser` parameter to select the desired browser. To change the above example to select Chrome instead of the default browser Electron, add `browser: chrome` as follows.\n\n```\n- name: Cypress run  uses: cypress-io/github-action@v6  with:    build: npm run build    start: npm start    browser: chrome\n```\n\nFor more examples, see the action's [Browser](https://github.com/cypress-io/github-action#browser) section.\n\ncaution\n\nIf you are specifying a browser in a parallel job, see [Specifying Browsers in Parallel Builds](#Specifying-Browsers-in-Parallel-Builds) for more info on how to avoid errors during runs due to GitHub runner images being updated with the latest browsers.\n\n## Testing with Cypress Docker Images[​](#Testing-with-Cypress-Docker-Images \"Direct link to Testing with Cypress Docker Images\")\n\nGitHub Actions provides the option to specify a container image for the job. Cypress offers various [Docker Images](https://github.com/cypress-io/cypress-docker-images) for running Cypress locally and in CI.\n\nBelow we extend the previous example by adding the `container` attribute using a [Cypress Docker Image](https://github.com/cypress-io/cypress-docker-images) built with the version of Google Chrome embedded in the tag name of the Docker image shown as `chrome-xxx`. Specifying a browser version allows our tests to execute without any influence from browser version changes in the GitHub runner image.\n\n```\nname: Cypress Tests using Cypress Docker Imageon: pushjobs:  cypress-run:    runs-on: ubuntu-22.04    container:      image: cypress/browsers:node-20.14.0-chrome-126.0.6478.114-1-ff-127.0.1-edge-126.0.2592.61-1      options: --user 1001    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Cypress run        uses: cypress-io/github-action@v6        with:          build: npm run build          start: npm start          browser: chrome\n```\n\ncaution\n\nIf you are testing with Firefox, you must specify the non-root user `1001` as above. Refer to [Firefox not found](https://github.com/cypress-io/cypress-docker-images#firefox-not-found) for more information.\n\n## Caching Dependencies and Build Artifacts[​](#Caching-Dependencies-and-Build-Artifacts \"Direct link to Caching Dependencies and Build Artifacts\")\n\nWhen working with actions that have multiple jobs, it is recommended to have an initial \"install\" job that will download any dependencies and build your app, and then cache these assets for use later by subsequent jobs.\n\nThe Cypress GitHub Action will automatically cache and restore your Node dependencies for you.\n\nFor build assets, you will need to cache and restore them manually.\n\nThe `install` job below uses the [upload-artifact](https://github.com/marketplace/actions/upload-a-build-artifact) action and saves the state of the `build` directory for the `cypress-run` worker job.\n\nThe [download-artifact](https://github.com/marketplace/actions/download-a-build-artifact) action retrieves the `build` directory saved in the `install` job, as seen below in the `cypress-run` worker job.\n\n```\nname: Cypress Tests with Dependency and Artifact Cachingon: pushjobs:  install:    runs-on: ubuntu-22.04    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Cypress install        uses: cypress-io/github-action@v6        with:          # Disable running of tests within install job          runTests: false          build: npm run build      - name: Save build folder        uses: actions/upload-artifact@v4        with:          name: build          if-no-files-found: error          path: build  cypress-run:    runs-on: ubuntu-22.04    needs: install    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Download the build folder        uses: actions/download-artifact@v4        with:          name: build          path: build      - name: Cypress run        uses: cypress-io/github-action@v6        with:          start: npm start          browser: chrome\n```\n\nView GitHub's guide on [Storing workflow data as artifacts](https://docs.github.com/en/actions/guides/storing-workflow-data-as-artifacts) for more info.\n\n## Parallelization[​](#Parallelization \"Direct link to Parallelization\")\n\n[Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction) offers the ability to [parallelize and group test runs](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) along with additional insights and [analytics](https://docs.cypress.io/guides/cloud/analytics/overview) for Cypress tests.\n\nUsing parallelization with the Cypress GitHub Action requires setting up recording to [Cypress Cloud](https://on.cypress.io/cloud).\n\nGitHub Actions offers a [matrix strategy](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix) for declaring different job configurations for a single job definition. Jobs declared within a matrix strategy can run in parallel, which enables us to run multiples instances of Cypress at the same time, as we will see later in this section.\n\nBefore diving into an example of a parallelization setup, it is important to understand the two different types of GitHub Action jobs that we will declare:\n\n*   **Install Job**: A job that installs and caches dependencies that will be used by subsequent jobs later in the GitHub Action workflow.\n*   **Worker Job**: A job that handles the execution of Cypress tests and depends on the _install job_.\n\n### Install Job[​](#Install-Job \"Direct link to Install Job\")\n\nThe separation of installation from test running is necessary when running parallel jobs. It allows for the reuse of various build steps aided by caching.\n\nFirst, we'll define the `install` step that will be used by the worker jobs defined in the matrix strategy.\n\nFor the `steps`, notice that we pass `runTests: false` to the Cypress GitHub Action to instruct it only to install and cache Cypress and npm dependencies _without running the tests_.\n\nThe [upload-artifact](https://github.com/marketplace/actions/upload-a-build-artifact) action will save the state of the `build` directory for the worker jobs.\n\n```\nname: Cypress Testson: pushjobs:  install:    runs-on: ubuntu-22.04    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Cypress install        uses: cypress-io/github-action@v6        with:          # Disable running of tests within install job          runTests: false          build: npm run build      - name: Save build folder        uses: actions/upload-artifact@v4        with:          name: build          if-no-files-found: error          path: dist\n```\n\n### Worker Jobs[​](#Worker-Jobs \"Direct link to Worker Jobs\")\n\nNext, we define the worker job named \"cypress-run\" that will run Cypress tests as part of a parallelized matrix strategy.\n\nThe `download-artifact` action will retrieve the **dist** directory saved in the install job.\n\n```\nname: Cypress Testson: pushjobs:  install:  # ... omitted install job from above  cypress-run:    runs-on: ubuntu-22.04    needs: install    strategy:      # don't fail the entire matrix on failure      fail-fast: false      matrix:        # run copies of the current job in parallel        containers: [1, 2, 3, 4, 5]    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Download the build folder        uses: actions/download-artifact@v4        with:          name: build      - name: Cypress run        uses: cypress-io/github-action@v6        with:          record: true          parallel: true          group: 'UI-Chrome'          start: npm start\n```\n\ncaution\n\n**Ensure Correct Container**\n\nIf a Docker container was used in the install job, the same Docker container must also be used in the worker jobs.\n\n#### Setting up Parallelization[​](#Setting-up-Parallelization \"Direct link to Setting up Parallelization\")\n\nTo set up multiple containers to run in parallel, the matrix option of the strategy configuration can be set to containers: \\[1, 2, 3, 4, 5\\], where the number of items defined in the containers array will be how many instances of the job will start up.\n\nFor instance, `containers: [1, 2, 3, 4, 5]` will provision five worker instances to run in parallel. For our purposes, the array's values are arbitrary and aren't used in the steps.\n\n### Specifying Browsers in Parallel Builds[​](#Specifying-Browsers-in-Parallel-Builds \"Direct link to Specifying Browsers in Parallel Builds\")\n\nIf you specify a browser in parallel mode, we recommend using a [Cypress Docker image](#Testing-with-Cypress-Docker-Images) to pin the browser version used.\n\nWhen GitHub updates the browsers in their runner images, not all runners get the new version simultaneously. Your test run might fail if Cypress Cloud detects differences in the runners between parallel jobs. The Docker image helps ensure the browser is consistent during an image upgrade.\n\n## Using Cypress Cloud with GitHub Actions[​](#Using-Cypress-Cloud-with-GitHub-Actions \"Direct link to Using Cypress Cloud with GitHub Actions\")\n\nIn the GitHub Actions configuration, we have defined in the previous section, we are leveraging three useful features of [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction):\n\n1.  [Recording test results with the `record: true` option](https://on.cypress.io/how-do-i-record-runs) to [Cypress Cloud](https://on.cypress.io/cloud):\n    \n    *   In-depth and shareable [test reports](https://docs.cypress.io/guides/cloud/recorded-runs#Latest-Runs).\n    *   Visibility into test failures via quick access to [Test Replay](https://docs.cypress.io/guides/cloud/test-replay), error messages, stack traces, screenshots, videos, and contextual details.\n    *   [Integrating testing with the pull-request (PR) process](https://docs.cypress.io/guides/cloud/integrations/source-control/github) via [commit status check guards](https://docs.cypress.io/guides/cloud/integrations/source-control/github#Status-checks) and convenient [test report comments](https://docs.cypress.io/guides/cloud/integrations/source-control/github#Pull-request-comments).\n    *   [Detecting flaky tests](https://docs.cypress.io/guides/cloud/flaky-test-management) and surfacing them via [Slack alerts](https://docs.cypress.io/guides/cloud/flaky-test-management#Slack) or [GitHub PR status checks](https://docs.cypress.io/guides/cloud/flaky-test-management#GitHub).\n2.  [Parallelizing test runs](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization) and optimizing their execution via [intelligent load-balancing](https://docs.cypress.io/guides/cloud/smart-orchestration/load-balancing#Balance-strategy) of test specs across CI machines with the `parallel: true` option.\n    \n3.  Organizing and consolidating multiple `cypress run` calls by labeled groups into a single report within [Cypress Cloud](https://on.cypress.io/cloud). In the example above, we use the `group: \"UI-Chrome\"` option to organize all UI tests for the Chrome browser into a group labeled \"UI - Chrome\" in the [Cypress Cloud](https://on.cypress.io/cloud) report.\n    \n\n## Cypress Real World Example with GitHub Actions[​](#Cypress-Real-World-Example-with-GitHub-Actions \"Direct link to Cypress Real World Example with GitHub Actions\")\n\nA complete CI workflow against multiple browsers, viewports, and operating systems is available in the **Cypress Real World App**.\n\nClone the [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) and refer to the [.github/workflows/main.yml](https://github.com/cypress-io/cypress-realworld-app/blob/develop/.github/workflows/main.yml) file.\n\n![Cypress Real World App GitHub Actions Matrix](https://docs.cypress.io/img/guides/github-actions/rwa-run-matrix.png)\n\n## Common Problems and Solutions[​](#Common-Problems-and-Solutions \"Direct link to Common Problems and Solutions\")\n\n### Re-run jobs passing with empty tests[​](#Re-run-jobs-passing-with-empty-tests \"Direct link to Re-run jobs passing with empty tests\")\n\nWe recommend passing the `GITHUB_TOKEN` secret (created by the GH Action automatically) as an environment variable. This will allow the accurate identification of each build to avoid confusion when re-running a build.\n\n```\nname: Cypress testson: pushjobs:  cypress-run:    name: Cypress run    runs-on: ubuntu-22.04    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Cypress run        uses: cypress-io/github-action@v6        with:          record: true        env:          # pass GitHub token to detect new build vs re-run build          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}\n```\n\n### Pull requests commit message is `merge SHA into SHA`[​](#Pull-requests-commit-message-is-merge-SHA-into-SHA \"Direct link to Pull-requests-commit-message-is-merge-SHA-into-SHA\")\n\nYou can overwrite the commit message sent to Cypress Cloud by setting an environment variable. See [Issue #124](https://github.com/cypress-io/github-action/issues/124) for more details.\n\n```\nname: Cypress testson: pushjobs:  cypress-run:    name: Cypress run    runs-on: ubuntu-22.04    steps:      - name: Checkout        uses: actions/checkout@v4      - name: Cypress run        uses: cypress-io/github-action@v6        with:          record: true        env:          # overwrite commit message sent to Cypress Cloud          COMMIT_INFO_MESSAGE: ${{github.event.pull_request.title}}          # re-enable PR comment bot          COMMIT_INFO_SHA: ${{github.event.pull_request.head.sha}}\n```\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Test anything that runs in the browser with Cypress and GitHub Actions](https://www.youtube.com/watch?v=gokM_zEmWLA)",
    "title": "GitHub Actions | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/core-concepts/testing-types",
    "markdown": "# Testing Types | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   What is E2E Testing and Component Testing\n*   Considerations for each testing type\n*   How to choose which test type based on your scenario\n\n## End-to-End or Component Tests?[​](#End-to-End-or-Component-Tests \"Direct link to End-to-End or Component Tests?\")\n\nOne of the first decisions you will need to make on your testing journey is what type of test to create. Cypress offers two options: end-to-end and component tests. There are benefits and considerations for each choice, and the decision will depend on the needs of what you are currently trying to accomplish. In the end, you will probably have a combination of both types of tests for your app, but how do you choose right now?\n\nLet's go over each of these test types, the benefits they bring, things to consider, and scenarios for each.\n\n## What is E2E Testing?[​](#What-is-E2E-Testing \"Direct link to What is E2E Testing?\")\n\nE2E Testing is a technique that tests your app from the web browser through to the back end of your application, as well as testing integrations with third-party APIs and services. These types of tests are great at making sure your entire app is functioning as a cohesive whole.\n\nCypress runs end-to-end tests the same way users interact with your app by using a real browser, visiting URLs, viewing content, clicking on links and buttons, etc. Testing this way helps ensure your tests and the user's experience are the same.\n\nWriting end-to-end tests in Cypress can be done by developers building the application, specialized testing engineers, or a quality assurance team responsible for verifying an app is ready for release. Tests are written in code with an API that simulates the steps that a real user would take.\n\nEnd-to-end tests are great at verifying your app runs as intended, from the front end to the back end. However, end-to-end tests can be more difficult to set up, run, and maintain. There are often infrastructure needs in setting up a backend for testing purposes. Your team will need to develop a [strategy](https://docs.cypress.io/guides/end-to-end-testing/testing-your-app#Testing-strategies) on how to handle this complexity.\n\ntip\n\n### Benefits of end-to-end tests:[​](#Benefits-of-end-to-end-tests \"Direct link to Benefits of end-to-end tests:\")\n\n*   Ensure your app is functioning as a cohesive whole\n*   Tests match the user experience\n*   Can be written by developers or QA Teams\n*   Can be used for integration testing as well\n\ninfo\n\n### Considerations for end-to-end tests:[​](#Considerations-for-end-to-end-tests \"Direct link to Considerations for end-to-end tests:\")\n\n*   More difficult to set up, run, and maintain\n*   Provision testing infrastructure in CI\n*   Testing certain scenarios require more setup\n\nnote\n\n### Common scenarios for end-to-end tests:[​](#Common-scenarios-for-end-to-end-tests \"Direct link to Common scenarios for end-to-end tests:\")\n\n*   Validating critical workflows like authentication and purchasing\n*   Ensuring data is persisted and displayed through multiple screens\n*   Running Smoke Tests and System Checks before deployment\n\nTo learn more about end-to-end testing in Cypress, visit our guide on [Writing Your First End-to-end Test](https://docs.cypress.io/guides/end-to-end-testing/writing-your-first-end-to-end-test).\n\n## What is Component Testing?[​](#What-is-Component-Testing \"Direct link to What is Component Testing?\")\n\nModern web frameworks provide ways to write applications by breaking them into smaller logical units called components. Components can range from fairly small (like a button) to more complex (like a registration form).\n\nBecause of their nature, components tend to be easily testable, which is where Cypress Component Testing comes into play.\n\nComponent tests differ from end-to-end tests in that instead of visiting a URL to pull up an entire app, a component can be \"mounted\" and tested on its own. This allows you to focus on testing only the component's functionality and not worrying about other nuances with testing a component as part of the larger application.\n\nTypically, a component test is written by the developers working on the component. The code for the test lives alongside the component code, and it is common for tests to be coded simultaneously with the component, helping developers verify the required functionality while building it.\n\nOne thing to consider, though, is even if all your component tests pass, it does not mean your app is functioning properly. Component tests do nothing to ensure that all the layers of your app are working well together. Therefore, a well-tested app has a combination of end-to-end and component tests, with each set of tests specializing in what they do best.\n\ntip\n\n### Benefits of component tests:[​](#Benefits-of-component-tests \"Direct link to Benefits of component tests:\")\n\n*   Easier to test components in isolation\n*   Fast and reliable\n*   Easy to set up specific scenarios in tests\n*   Don't rely on any external system to run\n\ninfo\n\n### Considerations for component tests:[​](#Considerations-for-component-tests \"Direct link to Considerations for component tests:\")\n\n*   Do not ensure overall app quality\n*   Do not call into external APIs/Services\n*   Usually written by developers working on the component\n\nnote\n\n### Common scenarios for component tests:[​](#Common-scenarios-for-component-tests \"Direct link to Common scenarios for component tests:\")\n\n*   Testing a date picker works properly for a variety of scenarios\n*   That a form shows and hides specific sections based on input\n*   Testing components coming out of a design system\n*   Testing logic not tied to a component (like unit tests!)\n\nTo learn more about component testing in Cypress, visit our guide on [Testing Your Components with Cypress](https://docs.cypress.io/guides/component-testing/overview).\n\n## Testing Type Comparison[​](#Testing-Type-Comparison \"Direct link to Testing Type Comparison\")\n\n|     | E2E | Component |\n| --- | --- | --- |\n| What's Tested | All app layers | Individual component |\n| Characteristics | Comprehensive, slower, more susceptible to flake | Specialized, quick, reliable |\n| Used For | Verifying app works as a cohesive whole | Testing functionality of individual component |\n| Written By | Developers, QA Team, SDETs | Developers, Designers |\n| CI Infrastructure | Often requires complex setup | None needed |\n| Initialization Command | `cy.visit(url)` | `cy.mount(<MyComponent />)` |",
    "title": "Testing Types | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests",
    "markdown": "# Writing and Organizing Tests | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to organize your test and support files.\n*   What languages are supported in your test files.\n*   How Cypress handles unit tests vs integration tests.\n*   How to group your tests.\n\ntip\n\n**Best Practices**\n\nWe gave a \"Best Practices\" conference talk at AssertJS (February 2018). This video demonstrates how to approach breaking down your application and organizing your tests.\n\n[AssertJS - Cypress Best Practices](https://www.youtube.com/watch?v=5XQOK0v_YRE)\n\n## Folder structure[​](#Folder-structure \"Direct link to Folder structure\")\n\nAfter adding a new project, Cypress will automatically scaffold out a suggested folder structure. By default it will create:\n\n*   JavaScript\n*   TypeScript\n\n```\nE2E:/cypress.config.js/cypress/fixtures/example.json/cypress/support/commands.js/cypress/support/e2e.jsComponent:/cypress.config.js/cypress/fixtures/example.json/cypress/support/commands.js/cypress/support/component.js/cypress/support/component-index.htmlBoth:/cypress.config.js/cypress/fixtures/example.json/cypress/support/commands.js/cypress/support/e2e.js/cypress/support/component.js/cypress/support/component-index.html\n```\n\n### Configuring Folder Structure[​](#Configuring-Folder-Structure \"Direct link to Configuring Folder Structure\")\n\nWhile Cypress allows you to configure where your tests, fixtures, and support files are located, if you're starting your first project, we recommend you use the above structure.\n\nYou can modify the folder configuration in your configuration file. See the [Cypress configuration](https://docs.cypress.io/guides/references/configuration) for more detail.\n\ninfo\n\n**What files should I add to my '.gitignore file' ?**\n\nCypress will create a [`screenshotsFolder`](https://docs.cypress.io/guides/references/configuration#Screenshots) and a [`videosFolder`](https://docs.cypress.io/guides/references/configuration#Videos) to store the screenshots and videos taken during the testing of your application. Many users will opt to add these folders to their `.gitignore` file. Additionally, if you are storing sensitive environment variables in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration) or [`cypress.env.json`](https://docs.cypress.io/guides/guides/environment-variables#Option-2-cypressenvjson), these should also be ignored when you check into source control.\n\n### Spec files[​](#Spec-files \"Direct link to Spec files\")\n\nTest files are located in `cypress/e2e` by default, but can be [configured](https://docs.cypress.io/guides/references/configuration#e2e) to another directory. Test files may be written as:\n\n*   `.js`\n*   `.jsx`\n*   `.ts`\n*   `.tsx`\n*   `.coffee`\n*   `.cjsx`\n\nCypress also supports `ES2015` out of the box. You can use either `ES2015 modules` or `CommonJS modules`. This means you can `import` or `require` both **npm packages** and **local relative modules**.\n\nTo see an example of every command used in Cypress, open the [`2-advanced-examples` folder](https://github.com/cypress-io/cypress-example-kitchensink/tree/master/cypress/e2e/2-advanced-examples) within your `cypress/e2e` folder.\n\n### Fixture Files[​](#Fixture-Files \"Direct link to Fixture Files\")\n\nFixtures are used as external pieces of static data that can be used by your tests. Fixture files are located in `cypress/fixtures` by default, but can be [configured](https://docs.cypress.io/guides/references/configuration#Folders--Files) to another directory.\n\nYou would typically use them with the [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture) command and most often when you're stubbing [Network Requests](https://docs.cypress.io/guides/guides/network-requests).\n\n### Asset Files[​](#Asset-Files \"Direct link to Asset Files\")\n\nThere are some folders that may be generated after a test run, containing assets that were generated during the test run.\n\nYou may consider adding these folders to your `.gitignore` file to ignore checking these files into source control.\n\n#### Download Files[​](#Download-Files \"Direct link to Download Files\")\n\nAny files downloaded while testing an application's file download feature will be stored in the [`downloadsFolder`](https://docs.cypress.io/guides/references/configuration#Downloads) which is set to `cypress/downloads` by default.\n\n```\n/cypress  /downloads    - records.csv\n```\n\n#### Screenshot Files[​](#Screenshot-Files \"Direct link to Screenshot Files\")\n\nIf screenshots were taken via the [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot) command or automatically when a test fails, the screenshots are stored in the [`screenshotsFolder`](https://docs.cypress.io/guides/references/configuration#Screenshots) which is set to `cypress/screenshots` by default.\n\n```\n/cypress  /screenshots    /app.cy.js      - Navigates to main menu (failures).png\n```\n\nTo learn more about screenshots and settings available, see [Screenshots and Videos](https://docs.cypress.io/guides/guides/screenshots-and-videos#Screenshots)\n\n#### Video Files[​](#Video-Files \"Direct link to Video Files\")\n\nAny videos recorded of the run are stored in the [`videosFolder`](https://docs.cypress.io/guides/references/configuration#Videos) which is set to `cypress/videos` by default.\n\n```\n/cypress  /videos    - app.cy.js.mp4\n```\n\n#### Asset File Paths[​](#Asset-File-Paths \"Direct link to Asset File Paths\")\n\nGenerated screenshots and videos are saved inside their respective folders (`cypress/screenshots`, `cypress/videos`). The paths of the generated files will be stripped of any common ancestor paths shared between all spec files found by the `specPattern` option (or via the `--spec` command line option or `spec` module API option, if specified)\n\n**Example 1:**\n\n*   Spec file found\n    *   `cypress/e2e/path/to/file/one.cy.js`\n*   Common ancestor paths (calculated at runtime)\n    *   `cypress/e2e/path/to/file`\n*   Generated screenshot file\n    *   `cypress/screenshots/one.cy.js/your-screenshot.png`\n*   Generated video file\n    *   `cypress/videos/one.cy.js.mp4`\n\n**Example 2:**\n\n*   Spec files found\n    *   `cypress/e2e/path/to/file/one.cy.js`\n    *   `cypress/e2e/path/to/two.cy.js`\n*   Common ancestor paths (calculated at runtime)\n    *   `cypress/e2e/path/to/`\n*   Generated screenshot files\n    *   `cypress/screenshots/file/one.cy.js/your-screenshot.png`\n    *   `cypress/screenshots/two.cy.js/your-screenshot.png`\n*   Generated video files\n    *   `cypress/videos/file/one.cy.js.mp4`\n    *   `cypress/videos/two.cy.js.mp4`\n\n#### Assets in Cypress Cloud[​](#Assets-in-Cypress-Cloud \"Direct link to Assets in Cypress Cloud\")\n\n![View of Test Replay](https://docs.cypress.io/img/guides/cloud/test-replay/test-replay-ui.png)\n\nInstead of administering assets yourself, you can [save them to the cloud with Cypress Cloud](https://docs.cypress.io/guides/cloud/recorded-runs#Run-Details).\n\nReplay the test as it executed during the recorded run with full debug capability using [![](https://docs.cypress.io/img/guides/cloud/test-replay/replay-icon.svg) Test Replay](https://docs.cypress.io/guides/cloud/test-replay).\n\nScreenshots and videos are stored permanently, attached to their respective test results, and easily shared or browsed through our web interface. To learn more about videos and settings available, see [Screenshots and Videos](https://docs.cypress.io/guides/guides/screenshots-and-videos#Screenshots).\n\n### Plugins file[​](#Plugins-file \"Direct link to Plugins file\")\n\ncaution\n\n**Deprecated**\n\nConfiguring plugins via `cypress/plugins/index.js` is no longer supported as of Cypress version 10.0.0.\n\nWe recommend that you update your configuration. Please see the [plugins guide](https://docs.cypress.io/guides/tooling/plugins-guide) and the [migration guide](https://docs.cypress.io/guides/references/migration-guide) for more information on how to update your configuration.\n\nThe plugins file is a special file that executes in Node before the project is loaded, before the browser launches, and during your test execution. While the Cypress tests execute in the browser, the plugins file runs in the background Node process, giving your tests the ability to access the file system and the rest of the operating system by calling the [cy.task()](https://docs.cypress.io/api/commands/task) command.\n\nThe plugins file is a good place to define how you want to bundle the spec files via the [preprocessors](https://docs.cypress.io/api/plugins/preprocessors-api), how to find and launch the browsers via the [browser launch API](https://docs.cypress.io/api/plugins/browser-launch-api), and other cool things. Read our [plugins guide](https://docs.cypress.io/guides/tooling/plugins-guide) for more details and examples.\n\nThe initial imported plugins file can be [configured to another file](https://docs.cypress.io/guides/references/configuration#Folders--Files).\n\n### Support file[​](#Support-file \"Direct link to Support file\")\n\nTo include code before your test files, set the [`supportFile`](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) path. By default, [`supportFile`](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) is set to look for one of the following files:\n\n**Component:**\n\n*   `cypress/support/component.js`\n*   `cypress/support/component.jsx`\n*   `cypress/support/component.ts`\n*   `cypress/support/component.tsx`\n\n**E2E:**\n\n*   `cypress/support/e2e.js`\n*   `cypress/support/e2e.jsx`\n*   `cypress/support/e2e.ts`\n*   `cypress/support/e2e.tsx`\n\ndanger\n\nFor a given testing type, multiple matching `supportFile` files will result in an error when Cypress loads.\n\ninfo\n\n**supportFile per testing type**\n\nDepending on which [testing type](https://docs.cypress.io/guides/core-concepts/testing-types) you are using, you can configure your `supportFile` accordingly.\n\n*   [Component](https://docs.cypress.io/guides/references/configuration#component)\n*   [E2E](https://docs.cypress.io/guides/references/configuration#e2e)\n\nCypress automatically creates an example support file for each configured testing type, which has several commented out examples.\n\nThis file runs **before** every single spec file. We do this purely as a convenience mechanism so you don't have to import this file.\n\nBy default Cypress will automatically include type-specific support files. For E2E, the default is `cypress/support/e2e.{js,jsx,ts,tsx}`, and for Component Testing `cypress/support/component.{js,jsx,ts,tsx}`.\n\nThe support file is a great place to put reusable behavior such as [custom commands](https://docs.cypress.io/api/cypress-api/custom-commands) or global overrides that you want applied and available to all of your spec files.\n\nThe initial imported support file can be configured to another file or turned off completely using the [supportFile](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) configuration. From your support file you can `import` or `require` other files to keep things organized.\n\nYou can define behaviors in a `before` or `beforeEach` within any of the `cypress/support` files:\n\n```\nbeforeEach(() => {  cy.log('I run before every test in every spec file!!!!!!')})\n```\n\n![Global hooks for tests](https://docs.cypress.io/img/guides/core-concepts/global-hooks.png)\n\ninfo\n\n**Note:** This example assumes you are already familiar with Mocha [hooks](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Hooks).\n\n#### Execution[​](#Execution \"Direct link to Execution\")\n\nCypress executes the support file before the spec file. For example, when Cypress executes a spec file via `cypress open` or `cypress run`, it executes the files in the following order:\n\n**e2e example:**\n\n1.  `support/e2e.js` (your support file)\n2.  `e2e/spec-a.cy.js` (your spec file)\n\n**component example:**\n\n1.  `support/component.js` (your support file)\n2.  `components/Button/Button.cy.js` (your spec file)\n\n### Troubleshooting[​](#Troubleshooting \"Direct link to Troubleshooting\")\n\nIf Cypress does not find the spec files for some reason, you can troubleshoot its logic by opening or running Cypress with [debug logs](https://docs.cypress.io/guides/references/troubleshooting#Print-DEBUG-logs) enabled:\n\n```\nDEBUG=cypress:server:specs npx cypress open## orDEBUG=cypress:server:specs npx cypress run\n```\n\nCypress is built on top of [Mocha](https://docs.cypress.io/guides/references/bundled-libraries#Mocha) and [Chai](https://docs.cypress.io/guides/references/bundled-libraries#Chai). We support both Chai's `BDD` and `TDD` assertion styles. Tests you write in Cypress will mostly adhere to this style.\n\nIf you're familiar with writing tests in JavaScript, then writing tests in Cypress will be a breeze.\n\ninfo\n\nTo start writing tests for your app, follow our guides for writing your first [Component](https://docs.cypress.io/guides/component-testing/overview) or [End-to-End](https://docs.cypress.io/guides/end-to-end-testing/writing-your-first-end-to-end-test) test.\n\ninfo\n\nNeeding a low code approach to create tests? Use [Cypress Studio](https://docs.cypress.io/guides/references/cypress-studio) to record your browser interactions.\n\n### Test Structure[​](#Test-Structure \"Direct link to Test Structure\")\n\nThe test interface, borrowed from [Mocha](https://docs.cypress.io/guides/references/bundled-libraries#Mocha), provides `describe()`, `context()`, `it()` and `specify()`.\n\n`context()` is identical to `describe()` and `specify()` is identical to `it()`, so choose whatever terminology works best for you.\n\n```\n// -- Start: Our Application Code --function add(a, b) {  return a + b}function subtract(a, b) {  return a - b}function divide(a, b) {  return a / b}function multiply(a, b) {  return a * b}// -- End: Our Application Code --// -- Start: Our Cypress Tests --describe('Unit test our math functions', () => {  context('math', () => {    it('can add numbers', () => {      expect(add(1, 2)).to.eq(3)    })    it('can subtract numbers', () => {      expect(subtract(5, 12)).to.eq(-7)    })    specify('can divide numbers', () => {      expect(divide(27, 9)).to.eq(3)    })    specify('can multiply numbers', () => {      expect(multiply(5, 4)).to.eq(20)    })  })})// -- End: Our Cypress Tests --\n```\n\n### Hooks[​](#Hooks \"Direct link to Hooks\")\n\nCypress also provides hooks (borrowed from [Mocha](https://docs.cypress.io/guides/references/bundled-libraries#Mocha)).\n\nThese are helpful to set conditions that you want to run before a set of tests or before each test. They're also helpful to clean up conditions after a set of tests or after each test.\n\n```\nbefore(() => {  // root-level hook  // runs once before all tests})beforeEach(() => {  // root-level hook  // runs before every test block})afterEach(() => {  // runs after each test block})after(() => {  // runs once all tests are done})describe('Hooks', () => {  before(() => {    // runs once before all tests in the block  })  beforeEach(() => {    // runs before each test in the block  })  afterEach(() => {    // runs after each test in the block  })  after(() => {    // runs once after all tests in the block  })})\n```\n\n#### The order of hook and test execution is as follows:[​](#The-order-of-hook-and-test-execution-is-as-follows \"Direct link to The order of hook and test execution is as follows:\")\n\n*   All `before()` hooks run (once)\n*   Any `beforeEach()` hooks run\n*   Tests run\n*   Any `afterEach()` hooks run\n*   All `after()` hooks run (once)\n\n### Excluding and Including Tests[​](#Excluding-and-Including-Tests \"Direct link to Excluding and Including Tests\")\n\nTo run a specified suite or test, append `.only` to the function. All nested suites will also be executed. This gives us the ability to run one test at a time and is the recommended way to write a test suite.\n\n```\n// -- Start: Our Application Code --function fizzbuzz(num) {  if (num % 3 === 0 && num % 5 === 0) {    return 'fizzbuzz'  }  if (num % 3 === 0) {    return 'fizz'  }  if (num % 5 === 0) {    return 'buzz'  }}// -- End: Our Application Code --// -- Start: Our Cypress Tests --describe('Unit Test FizzBuzz', () => {  function numsExpectedToEq(arr, expected) {    // loop through the array of nums and make    // sure they equal what is expected    arr.forEach((num) => {      expect(fizzbuzz(num)).to.eq(expected)    })  }  it.only('returns \"fizz\" when number is multiple of 3', () => {    numsExpectedToEq([9, 12, 18], 'fizz')  })  it('returns \"buzz\" when number is multiple of 5', () => {    numsExpectedToEq([10, 20, 25], 'buzz')  })  it('returns \"fizzbuzz\" when number is multiple of both 3 and 5', () => {    numsExpectedToEq([15, 30, 60], 'fizzbuzz')  })})\n```\n\nTo skip a specified suite or test, append `.skip()` to the function. All nested suites will also be skipped.\n\n```\nit.skip('returns \"fizz\" when number is multiple of 3', () => {  numsExpectedToEq([9, 12, 18], 'fizz')})\n```\n\n### Test Isolation[​](#Test-Isolation \"Direct link to Test Isolation\")\n\ntip\n\n**Best Practice:** Tests should always be able to be run independently from one another **and still pass**.\n\nAs stated in our mission, we hold ourselves accountable to champion a testing process that actually works, and have built Cypress to guide developers towards writing independent tests from the start.\n\nWe do this by cleaning up test state and the browser context _before_ each test to ensure that the operation of one test does not affect another test later on. The goal for each test should be to **reliably pass** whether run in isolation or consecutively with other tests. Having tests that depend on the state of an earlier test can potentially cause nondeterministic test failures which makes debugging challenging.\n\nThe behavior of running tests in a clean browser context is described as `testIsolation`.\n\nThe test isolation is a global configuration and can be overridden for end-to-end testing at the `describe` level with the [`testIsolation`](https://docs.cypress.io/guides/references/configuration#e2e) option.\n\nTo learn more about this behavior and the trade-offs of disabling it, review our [Test Isolation guide](https://docs.cypress.io/guides/core-concepts/test-isolation).\n\n### Test Configuration[​](#Test-Configuration \"Direct link to Test Configuration\")\n\nIt is possible to apply [test configuration](https://docs.cypress.io/guides/references/configuration#Test-Configuration) values to a suite or test. Pass a configuration object to the test or suite function as the second argument.\n\nThis configuration will take effect during the suite or tests where they are set then return to their previous default values after the suite or tests are complete.\n\n#### Syntax[​](#Syntax \"Direct link to Syntax\")\n\n```\ndescribe(name, config, fn)context(name, config, fn)it(name, config, fn)specify(name, config, fn)\n```\n\n#### Allowed config values[​](#Allowed-config-values \"Direct link to Allowed config values\")\n\ncaution\n\n**Note:** Some configuration values are readonly and cannot be changed via test configuration. Be sure to review the list of [test configuration options](https://docs.cypress.io/guides/references/configuration#Test-Configuration).\n\n#### Suite configuration[​](#Suite-configuration \"Direct link to Suite configuration\")\n\nIf you want to target a suite of tests to run or be excluded when run in a specific browser, you can override the `browser` configuration within the suite configuration. The `browser` option accepts the same arguments as [Cypress.isBrowser()](https://docs.cypress.io/api/cypress-api/isbrowser).\n\nThe following suite of tests will be skipped if running tests in Chrome browsers.\n\n```\ndescribe('When NOT in Chrome', { browser: '!chrome' }, () => {  it('Shows warning', () => {    cy.get('[data-testid=\"browser-warning\"]').should(      'contain',      'For optimal viewing, use Chrome browser'    )  })  it('Links to browser compatibility doc', () => {    cy.get('a.browser-compat')      .should('have.attr', 'href')      .and('include', 'browser-compatibility')  })})\n```\n\nThe following suite of tests will only execute when running in the Firefox browser. It will overwrite the viewport resolution in one of the tests, and will merge any current environment variables with the provided ones.\n\n```\ndescribe(  'When in Firefox',  {    browser: 'firefox',    viewportWidth: 1024,    viewportHeight: 700,    env: {      DEMO: true,      API: 'http://localhost:9000',    },  },  () => {    it('Sets the expected viewport and API URL', () => {      expect(cy.config('viewportWidth')).to.equal(1024)      expect(cy.config('viewportHeight')).to.equal(700)      expect(cy.env('API')).to.equal('http://localhost:9000')    })    it(      'Uses the closest API environment variable',      {        env: {          API: 'http://localhost:3003',        },      },      () => {        expect(cy.env('API')).to.equal('http://localhost:3003')        // other environment variables remain unchanged        expect(cy.env('DEMO')).to.be.true      }    )  })\n```\n\n#### Single test configuration[​](#Single-test-configuration \"Direct link to Single test configuration\")\n\nYou can configure the number of retry attempts during `cypress run` or `cypress open`. See [Test Retries](https://docs.cypress.io/guides/guides/test-retries) for more information.\n\n```\nit('should redirect unauthenticated user to sign-in page', {    retries: {      runMode: 3,      openMode: 2    }  } () => {    // test code...  })})\n```\n\n### Dynamically Generate Tests[​](#Dynamically-Generate-Tests \"Direct link to Dynamically Generate Tests\")\n\nYou can dynamically generate tests using JavaScript.\n\n```\ndescribe('if your app uses jQuery', () => {  ;['mouseover', 'mouseout', 'mouseenter', 'mouseleave'].forEach((event) => {    it('triggers event: ' + event, () => {      // if your app uses jQuery, then we can trigger a jQuery      // event that causes the event callback to fire      cy.get('#with-jquery')        .invoke('trigger', event)        .get('[data-testid=\"messages\"]')        .should('contain', 'the event ' + event + 'was fired')    })  })})\n```\n\nThe code above will produce a suite with 4 tests:\n\n```\n> if your app uses jQuery  > triggers event: 'mouseover'  > triggers event: 'mouseout'  > triggers event: 'mouseenter'  > triggers event: 'mouseleave'\n```\n\n### Assertion Styles[​](#Assertion-Styles \"Direct link to Assertion Styles\")\n\nCypress supports both BDD (`expect`/`should`) and TDD (`assert`) style plain assertions. [Read more about plain assertions.](https://docs.cypress.io/guides/references/assertions)\n\n```\nit('can add numbers', () => {  expect(add(1, 2)).to.eq(3)})it('can subtract numbers', () => {  assert.equal(subtract(5, 12), -7, 'these numbers are equal')})\n```\n\nThe [.should()](https://docs.cypress.io/api/commands/should) command and its alias [.and()](https://docs.cypress.io/api/commands/and) can also be used to more easily chain assertions off of Cypress commands. [Read more about assertions.](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Assertions)\n\n```\ncy.wrap(add(1, 2)).should('equal', 3)\n```\n\n## Running tests[​](#Running-tests \"Direct link to Running tests\")\n\nYou can run a test by clicking on the spec filename. For example the [Cypress RealWorld App](https://github.com/cypress-io/cypress-example-realworld) has multiple test files, but below we run the \"new-transaction.spec.ts\" test file by clicking on it.\n\n![Running a single spec](https://docs.cypress.io/img/guides/core-concepts/run-single-spec.gif)\n\n## Test statuses[​](#Test-statuses \"Direct link to Test statuses\")\n\nAfter the Cypress spec completes every test has one of four statuses: **passed**, **failed**, **pending**, or **skipped**. The behavior of these statuses are inherited from the Mocha, since this is the test runner leveraged by Cypress.\n\n### Passed[​](#Passed \"Direct link to Passed\")\n\nPassed tests have successfully completed all their hooks and commands without failing any assertions. The test screenshot below shows a passed test:\n\n![Cypress with a single passed test](https://docs.cypress.io/img/guides/core-concepts/todo-mvc-passing-test.png)\n\nNote that a test can pass after several [test retries](https://docs.cypress.io/guides/guides/test-retries). In that case the Command Log shows some failed attempts, but ultimately the entire test finishes successfully.\n\n### Failed[​](#Failed \"Direct link to Failed\")\n\nGood news - the failed hook or test has found a problem. Could be much worse - it could be a user hitting this bug!\n\n![Cypress with a single failed test](https://docs.cypress.io/img/guides/core-concepts/todo-mvc-failing-test.png)\n\nAfter a test fails, the [Test Replay](https://docs.cypress.io/guides/cloud/test-replay) or screenshots and videos with Cypress Cloud can help find the problem so it can be fixed.\n\n### Pending[​](#Pending \"Direct link to Pending\")\n\nYou can write _placeholder_ tests in several ways as shown below, and Cypress knows NOT to run them. Additionally, you can conditionally specify which browser(s) and tests should run, including if the test should not run for the browser currently being tested, it is marked as _pending_.\n\nCypress marks all the tests below as _pending_.\n\n```\ndescribe('TodoMVC', () => {  it('is not written yet')  it.skip('adds 2 todos', function () {    cy.visit('/')    cy.get('[data-testid=\"new-todo\"]').as('new').type('learn testing{enter}')    cy.get('@new').type('be cool{enter}')    cy.get('[data-testid=\"todo-list\"] li').should('have.length', 100)  })  xit('another test', () => {    expect(false).to.true  })  it('only test chrome', { browser: 'chrome' }, () => {    cy.visit('/')    cy.contains('To Do')  })})\n```\n\nAll four tests above are marked _pending_ when Cypress finishes running the spec file.\n\n![Cypress with four pending test](https://docs.cypress.io/img/guides/core-concepts/todo-mvc-pending-tests.png)\n\nSo remember - if you (the test writer) knowingly skip a test using one of the above three ways, Cypress counts it as a _pending_ test.\n\n### Skipped[​](#Skipped \"Direct link to Skipped\")\n\nThe last test status is for tests that you _meant_ to run, but these tests were skipped due to some run-time error. For example, imagine a group of tests sharing the same `beforeEach` hook - where you visit the page in the `beforeEach` hook.\n\n```\n/// <reference types=\"cypress\" />describe('TodoMVC', () => {  beforeEach(() => {    cy.visit('/')  })  it('hides footer initially', () => {    cy.get('[data-testid=\"filters\"]').should('not.exist')  })  it('adds 2 todos', () => {    cy.get('[data-testid=\"new-todo\"]').as('new').type('learn testing{enter}')    cy.get('@new').type('be cool{enter}')    cy.get('[data-testid=\"todo-list\"] li').should('have.length', 2)  })})\n```\n\nIf the `beforeEach` hook completes and both tests finish, two tests are passing.\n\n![Cypress showing two passing tests](https://docs.cypress.io/img/guides/core-concepts/todo-mvc-2-tests-passing.png)\n\nBut what happens if a command inside the `beforeEach` hook fails? For example, let's pretend we want to visit a non-existent page `/does-not-exist` instead of the `/`. If we change our `beforeEach` to fail:\n\n```\nbeforeEach(() => {  cy.visit('/does-not-exist')})\n```\n\nWhen Cypress starts executing the first test, the `beforeEach` hook fails. Now the first test is marked as **failed**. BUT if the `beforeEach` hook failed once, why would we execute it _again_ before the second test? It would just fail the same way! So Cypress _skips_ the remaining tests in that block, because they would also fail due to the `beforeEach` hook failure.\n\n![Cypress showing one failed and one skipped test](https://docs.cypress.io/img/guides/core-concepts/todo-mvc-failed-and-skipped-tests.png)\n\nIf we collapse the test commands, we can see the empty box marking the skipped test \"adds 2 todos\".\n\n![Cypress showing one skipped test](https://docs.cypress.io/img/guides/core-concepts/todo-mvc-skipped-test.png)\n\nThe tests that were meant to be executed but were skipped due to some run-time problem are marked \"skipped\" by Cypress. This is typically observed when a `before`, `beforeEach` or `afterEach` hook fails.\n\n**Tip:** read the blog post [Writing Test Progress](https://glebbahmutov.com/blog/writing-tests-progress/) to learn how to use the pending tests to tracking the test strategy implementation.\n\n## Watching tests[​](#Watching-tests \"Direct link to Watching tests\")\n\nWhen running in using [cypress open](https://docs.cypress.io/guides/guides/command-line#cypress-open), Cypress watches the filesystem for changes to your spec files. Soon after adding or updating a test Cypress will reload it and run all of the tests in that spec file.\n\nThis makes for a productive development experience because you can add and edit tests as you're implementing a feature and the Cypress user interface will always reflect the results of your latest edits.\n\ninfo\n\nRemember to use [`.only`](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Excluding-and-Including-Tests) to limit which tests are run: this can be especially useful when you've got a lot of tests in a single spec file that you're constantly editing; consider also splitting your tests into smaller files each dealing with logically related behavior.\n\n### What is watched?[​](#What-is-watched \"Direct link to What is watched?\")\n\n#### Files[​](#Files \"Direct link to Files\")\n\n*   [Cypress configuration](https://docs.cypress.io/guides/references/configuration)\n*   [cypress.env.json](https://docs.cypress.io/guides/guides/environment-variables)\n\n#### Folders[​](#Folders \"Direct link to Folders\")\n\n*   E2E directory (`cypress/e2e/` by default)\n*   Support directory (`cypress/support/` by default)\n\nThe folder, the files within the folder, and all child folders and their files (recursively) are watched.\n\ninfo\n\nThose folder paths refer to the [default folder paths](https://docs.cypress.io/guides/references/configuration#Folders--Files). If you've configured Cypress to use different folder paths then the folders specific to your configuration will be watched.\n\n### What isn't watched?[​](#What-isnt-watched \"Direct link to What isn't watched?\")\n\nEverything else; this includes, but isn't limited to, the following:\n\n*   Your application code\n*   `node_modules`\n*   `cypress/fixtures/`\n\nIf you're developing using a modern JS-based web application stack then you've likely got support for some form of hot module replacement which is responsible for watching your application code—HTML, CSS, JS, etc.—and transparently reloading your application in response to changes.\n\n### Configuration[​](#Configuration \"Direct link to Configuration\")\n\nSet the [`watchForFileChanges`](https://docs.cypress.io/guides/references/configuration#Global) configuration property to `false` to disable file watching.\n\ncaution\n\n**Nothing** is watched during [cypress run](https://docs.cypress.io/guides/guides/command-line#cypress-run).\n\nThe `watchForFileChanges` property is only in effect when running Cypress using [cypress open](https://docs.cypress.io/guides/guides/command-line#cypress-open).\n\nThe component responsible for the file-watching behavior in Cypress is the [`webpack-preprocessor`](https://github.com/cypress-io/cypress/tree/develop/npm/webpack-preprocessor). This is the default file-watcher packaged with Cypress.\n\nIf you need further control of the file-watching behavior you can configure this preprocessor explicitly: it exposes options that allow you to configure behavior such as _what_ is watched and the delay before emitting an \"update\" event after a change.\n\nCypress also ships other [file-watching preprocessors](https://docs.cypress.io/plugins#preprocessors); you'll have to configure these explicitly if you want to use them.\n\n*   [Cypress Watch Preprocessor](https://github.com/cypress-io/cypress-watch-preprocessor)\n*   [Cypress webpack Preprocessor](https://github.com/cypress-io/cypress/tree/develop/npm/webpack-preprocessor)",
    "title": "Writing and Organizing Tests | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/core-concepts/introduction-to-cypress",
    "markdown": "# Introduction to Cypress | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How Cypress queries the DOM\n*   How Cypress manages subjects and chains of commands\n*   What assertions look like and how they work\n*   How timeouts are applied to commands\n\ntip\n\n**Important!**\n\n**This is the single most important guide** for understanding how to test with Cypress. Read it. Understand it. Ask questions about it so that we can improve it.\n\nAfter you're done, we suggest watching some of our [Tutorial Videos](https://docs.cypress.io/examples/tutorials).\n\n## Cypress Can Be Simple (Sometimes)[​](#Cypress-Can-Be-Simple-Sometimes \"Direct link to Cypress Can Be Simple (Sometimes)\")\n\nSimplicity is all about getting more done with less typing. Let's look at an example:\n\n*   End-to-End Test\n*   Component Test\n\n```\ndescribe('Post Resource', () => {  it('Creating a New Post', () => {    cy.visit('/posts/new') // 1.    cy.get(\"input.post-title\") // 2.      .type(\"My First Post\"); // 3.    cy.get(\"input.post-body\") // 4.      .type(\"Hello, world!\"); // 5.    cy.contains(\"Submit\") // 6.      .click(); // 7.    cy.get(\"h1\") // 8.      .should(\"contain\", \"My First Post\");  });});\n```\n\nCan you read this? If you did, it might sound something like this:\n\nnote\n\n1.  _Visit page at `/posts/new` (or mount the `PostBuilder` component)._\n2.  _Find the `<input>` with class `post-title`._\n3.  _Type \"My First Post\" into it._\n4.  _Find the `<input>` with class `post-body`._\n5.  _Type \"Hello, world!\" into it._\n6.  _Find the element containing the text `Submit`._\n7.  _Click it._\n8.  _Find the `h1` tag, ensure it contains the text \"My First Post\"._\n\nThis is a relatively straightforward test, but consider how much code has been covered by it, both on the client and the server!\n\nFor the remainder of this guide, we'll explore the basics of Cypress that make this example work. We'll demystify the rules Cypress follows so you can productively test your application to act as much like a user as possible, as well as discuss how to take shortcuts when it's useful.\n\n## Querying Elements[​](#Querying-Elements \"Direct link to Querying Elements\")\n\n### Cypress is Like jQuery[​](#Cypress-is-Like-jQuery \"Direct link to Cypress is Like jQuery\")\n\nIf you've used [jQuery](https://jquery.com/) before, you may be used to querying for elements like this:\n\nIn Cypress, querying elements is the same:\n\nIn fact, Cypress [bundles jQuery](https://docs.cypress.io/guides/references/bundled-libraries#Other-Library-Utilities) and exposes many of its DOM traversal methods to you so you can work with complex HTML structures with ease using APIs you're already familiar with.\n\n```\n// Each Cypress query is equivalent to its jQuery counterpart.cy.get('#main-content').find('.article').children('img[src^=\"/static\"]').first()\n```\n\ntip\n\n**Core Concept**\n\nCypress leverages jQuery's powerful selector engine to help make tests familiar and readable for modern web developers.\n\nInterested in the best practices for selecting elements? [Read here](https://docs.cypress.io/guides/references/best-practices#Selecting-Elements).\n\nAccessing the DOM elements returned from the query works differently, however:\n\n```\n// This is fine, jQuery returns the element synchronously.const $jqElement = $('.element')// This will not work! Cypress does not return the element synchronously.const $cyElement = cy.get('.element')\n```\n\nLet's look at why this is...\n\n### Cypress is _Not_ Like jQuery[​](#Cypress-is-Not-Like-jQuery \"Direct link to Cypress-is-Not-Like-jQuery\")\n\n**Question:** What happens when jQuery can't find any matching DOM elements from its selector?\n\n**Answer:** _Oops!_ It returns an empty jQuery collection. We've got a real object to work with, but it doesn't contain the element we wanted. So we start adding conditional checks and retrying our queries manually.\n\n```\n// $() returns immediately with an empty collection.const $myElement = $('.element').first()// Leads to ugly conditional checks// and worse - flaky tests!if ($myElement.length) {  doSomething($myElement)}\n```\n\n**Question:** What happens when Cypress can't find any matching DOM elements from its selector?\n\n**Answer:** _No big deal!_ Cypress automatically retries the query until either:\n\n#### 1\\. The element is found[​](#1-The-element-is-found \"Direct link to 1. The element is found\")\n\n```\ncy  // cy.get() looks for '#element', repeating the query until...  .get('#element')  // ...it finds the element!  // You can now work with it by using .then  .then(($myElement) => {    doSomething($myElement)  })\n```\n\n#### 2\\. A set timeout is reached[​](#2-A-set-timeout-is-reached \"Direct link to 2. A set timeout is reached\")\n\n```\ncy  // cy.get() looks for '#element-does-not-exist', repeating the query until...  // ...it doesn't find the element before its timeout.  // Cypress halts and fails the test.  .get('#element-does-not-exist')  // ...this code is never run...  .then(($myElement) => {    doSomething($myElement)  })\n```\n\nThis makes Cypress robust and immune to dozens of common problems that occur in other testing tools. Consider all the circumstances that could cause querying a DOM element to fail:\n\n*   The DOM has not loaded yet.\n*   Your framework hasn't finished bootstrapping.\n*   An XHR request hasn't responded.\n*   An animation hasn't completed.\n*   and on and on...\n\nBefore, you'd be forced to write custom code to protect against any and all of these issues: a nasty mashup of arbitrary waits, conditional retries, and null checks littering your tests. Not in Cypress! With built-in retrying and [customizable timeouts](https://docs.cypress.io/guides/references/configuration#Timeouts), Cypress sidesteps all of these flaky issues.\n\ntip\n\n**Core Concept**\n\nCypress wraps all DOM queries with robust retry-and-timeout logic that better suits how real web apps work. We trade a minor change in how we find DOM elements for a major stability upgrade to all of our tests. Banishing flake for good!\n\ninfo\n\nIn Cypress, when you want to interact with a DOM element directly, call [`.then()`](https://docs.cypress.io/api/commands/then) with a callback function that receives the element as its first argument. When you want to skip the retry-and-timeout functionality entirely and perform traditional synchronous work, use [`Cypress.$`](https://docs.cypress.io/api/utilities/$).\n\n### Querying by Text Content[​](#Querying-by-Text-Content \"Direct link to Querying by Text Content\")\n\nAnother way to locate things -- a more human way -- is to look them up by their content, by what the user would see on the page. For this, there's the handy [`cy.contains()`](https://docs.cypress.io/api/commands/contains) command, for example:\n\n```\n// Find an element in the document containing the text 'New Post'cy.contains('New Post')// Find an element within '.main' containing the text 'New Post'cy.get('.main').contains('New Post')\n```\n\nThis is helpful when writing tests from the perspective of a user interacting with your app. They only know that they want to click the button labeled \"Submit\". They have no idea that it has a `type` attribute of `submit`, or a CSS class of `my-submit-button`.\n\ncaution\n\n**Internationalization**\n\nIf your app is translated into multiple languages for i18n, make sure you consider the implications of using user-facing text to find DOM elements!\n\n### When Elements Are Missing[​](#When-Elements-Are-Missing \"Direct link to When Elements Are Missing\")\n\nAs we showed above, Cypress anticipates the asynchronous nature of web applications and doesn't fail immediately the first time an element is not found. Instead, Cypress gives your app a window of time to finish whatever it may be doing!\n\nThis is known as a `timeout`, and most commands can be customized with specific timeout periods ([the default timeout is 4 seconds](https://docs.cypress.io/guides/references/configuration#Timeouts)). These Commands will list a `timeout` option in their API documentation, detailing how to set the number of milliseconds you want to continue to try finding the element.\n\n```\n// Give this element 10 seconds to appearcy.get('.my-slow-selector', { timeout: 10000 })\n```\n\nYou can also set the timeout globally via the [configuration setting: `defaultCommandTimeout`](https://docs.cypress.io/guides/references/configuration#Timeouts).\n\ntip\n\n**Core Concept**\n\nTo match the behavior of web applications, Cypress is asynchronous and relies on timeouts to know when to stop waiting on an app to get into the expected state. Timeouts can be configured globally, or on a per-command basis.\n\ninfo\n\n**Timeouts and Performance**\n\nThere is a performance tradeoff here: **tests that have longer timeout periods take longer to fail**. Commands always proceed as soon as their expected criteria is met, so working tests will be performed as fast as your application allows. A test that fails due to timeout will consume the entire timeout period, by design. This means that while you _may_ want to increase your timeout period to suit specific parts of your app, you _don't_ want to make it \"extra long, just in case\".\n\nLater in this guide we'll go into much more detail about [Implicit Assertions](#Implicit-Assertions) and [Timeouts](#Timeouts).\n\n## Chains of Commands[​](#Chains-of-Commands \"Direct link to Chains of Commands\")\n\nIt's very important to understand the mechanism Cypress uses to chain commands together. It manages a Promise chain on your behalf, with each command yielding a 'subject' to the next command, until the chain ends or an error is encountered. The developer should not need to use Promises directly, but understanding how they work is helpful!\n\n### Interacting With Elements[​](#Interacting-With-Elements \"Direct link to Interacting With Elements\")\n\nAs we saw in the initial example, Cypress allows you to click on and type into elements on the page by using [`.click()`](https://docs.cypress.io/api/commands/click) and [`.type()`](https://docs.cypress.io/api/commands/type) action commands with a [`cy.get()`](https://docs.cypress.io/api/commands/get) or [`cy.contains()`](https://docs.cypress.io/api/commands/contains) query command. This is a great example of chaining in action. Let's see it again:\n\n```\ncy.get('textarea.post-body').type('This is an excellent post.')\n```\n\nWe're chaining [`.type()`](https://docs.cypress.io/api/commands/type) onto [`cy.get()`](https://docs.cypress.io/api/commands/get), telling it to type into the subject yielded from the [`cy.get()`](https://docs.cypress.io/api/commands/get) query, which will be a DOM element.\n\nHere are even more action commands Cypress provides to interact with your app:\n\n*   [`.blur()`](https://docs.cypress.io/api/commands/blur) - Make a focused DOM element blur.\n*   [`.focus()`](https://docs.cypress.io/api/commands/focus) - Focus on a DOM element.\n*   [`.clear()`](https://docs.cypress.io/api/commands/clear) - Clear the value of an input or textarea.\n*   [`.check()`](https://docs.cypress.io/api/commands/check) - Check checkbox(es) or radio(s).\n*   [`.uncheck()`](https://docs.cypress.io/api/commands/uncheck) - Uncheck checkbox(es).\n*   [`.select()`](https://docs.cypress.io/api/commands/select) - Select an `<option>` within a `<select>`.\n*   [`.dblclick()`](https://docs.cypress.io/api/commands/dblclick) - Double-click a DOM element.\n*   [`.rightclick()`](https://docs.cypress.io/api/commands/rightclick) - Right-click a DOM element.\n\nThese commands ensure [some guarantees](https://docs.cypress.io/guides/core-concepts/interacting-with-elements) about what the state of the elements should be prior to performing their actions.\n\nFor example, when writing a [`.click()`](https://docs.cypress.io/api/commands/click) command, Cypress ensures that the element is able to be interacted with (like a real user would). It will automatically wait until the element reaches an \"actionable\" state by:\n\n*   Not being hidden\n*   Not being covered\n*   Not being disabled\n*   Not animating\n\nThis also helps prevent flake when interacting with your application in tests. You can usually override this behavior with a `force` option.\n\n### Asserting About Elements[​](#Asserting-About-Elements \"Direct link to Asserting About Elements\")\n\nAssertions let you do things like ensuring an element is visible or has a particular attribute, CSS class, or state. Assertions are commands that enable you to describe the _desired_ state of your application. Cypress will automatically wait until your elements reach this state, or fail the test if the assertions don't pass. Here's a quick look at assertions in action:\n\n```\ncy.get(':checkbox').should('be.disabled')cy.get('form').should('have.class', 'form-horizontal')cy.get('input').should('not.have.value', 'US')\n```\n\nIn each of these examples, it's important to note that Cypress will automatically _wait_ until these assertions pass. This prevents you from having to know or care about the precise moment your elements eventually do reach this state.\n\nWe will learn more about [assertions](#Assertions) later in this guide.\n\n### Subject Management[​](#Subject-Management \"Direct link to Subject Management\")\n\nA new Cypress chain always starts with `cy.[command]`, where what is yielded by the `command` establishes what other commands can be called next (chained).\n\n#### All commands yield a value.[​](#All-commands-yield-a-value \"Direct link to All commands yield a value.\")\n\nEach command specifies what value it yields. For example,\n\n*   [`cy.clearCookies()`](https://docs.cypress.io/api/commands/clearcookies) yields `null`. You can chain off commands that yield `null`, as long as the next command doesn't expect to receive a subject.\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains) yields a DOM element, allowing further commands to be chained (assuming they expect a DOM subject) like [`.click()`](https://docs.cypress.io/api/commands/click) or even [`cy.contains()`](https://docs.cypress.io/api/commands/contains) again.\n*   [`.click()`](https://docs.cypress.io/api/commands/click) yields the same subject it was originally given.\n\n#### Some commands require a previous subject.[​](#Some-commands-require-a-previous-subject \"Direct link to Some commands require a previous subject.\")\n\n*   [`.click()`](https://docs.cypress.io/api/commands/click) requires a DOM element from the previous command.\n*   [`.its()`](https://docs.cypress.io/api/commands/its) requires a subject, but it can be of any type.\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains) behaves differently depending on the previous subject. If chained directly off of `cy`, or if the previous command yielded `null`, it will look at the entire document. But if the subject is a DOM element, it will only look inside that container.\n*   [`cy.clearCookies()`](https://docs.cypress.io/api/commands/clearcookies) does not require a previous subject - it can be chained off of anything, even [`.end()`](https://docs.cypress.io/api/commands/end).\n\n#### Examples:[​](#Examples \"Direct link to Examples:\")\n\nThis is actually much more intuitive than it sounds.\n\n```\ncy.clearCookies() // Yields null  .visit('/fixtures/dom.html') // Does not care about the previous subject.cy.get('.main-container') // Yields an array of matching DOM elements  .contains('Headlines') // Yields the first DOM element containing content  .click() // Yields same DOM element from previous command.\n```\n\ntip\n\n**Core Concept**\n\nCypress commands do not **return** their subjects, they **yield** them. Remember: Cypress commands are asynchronous and get queued for execution at a later time. During execution, subjects are yielded from one command to the next, and a lot of helpful Cypress code runs between each command to ensure everything is in order.\n\ninfo\n\n**Don't continue a chain after acting on the DOM**\n\nWhile it's possible in Cypress to act on the DOM and then continue chaining, this is usually unsafe, and can lead to stale elements. See the [Retry-ability Guide](https://docs.cypress.io/guides/core-concepts/retry-ability) for more details.\n\nBut the rule of thumb is simple: If you perform an action, like navigating the page, clicking a button or scrolling the viewport, end the chain of commands there and start fresh from `cy`.\n\ninfo\n\nTo work around the need to reference elements, Cypress has a feature [known as aliasing](https://docs.cypress.io/guides/core-concepts/variables-and-aliases). Aliasing helps you to **store** and **save** references for future use.\n\n#### Using [`.then()`](https://docs.cypress.io/api/commands/then) To Act On A Subject[​](#Using-then-To-Act-On-A-Subject \"Direct link to Using-then-To-Act-On-A-Subject\")\n\nWant to jump into the command flow and get your hands on the subject directly? No problem, add a [.then()](https://docs.cypress.io/api/commands/then) to your command chain. When the previous command resolves, it will call your callback function with the yielded subject as the first argument.\n\nIf you wish to continue chaining commands after your [`.then()`](https://docs.cypress.io/api/commands/then), you'll need to specify the subject you want to yield to those commands, which you can achieve with a return value other than `null` or `undefined`. Cypress will yield that to the next command for you.\n\n#### Let's look at an example:[​](#Lets-look-at-an-example \"Direct link to Let's look at an example:\")\n\n```\ncy  // Find the el with id 'some-link'  .get('#some-link')  .then(($myElement) => {    // ...massage the subject with some arbitrary code    // grab its href property    const href = $myElement.prop('href')    // strip out the 'hash' character and everything after it    return href.replace(/(#.*)/, '')  })  .then((href) => {    // href is now the new subject    // which we can work with now  })\n```\n\ntip\n\n**Core Concept**\n\nWe have many more examples and use cases of [cy.then()](https://docs.cypress.io/api/commands/then) in our [Core Concept Guide](https://docs.cypress.io/guides/core-concepts/variables-and-aliases) that teaches you how to properly deal with asynchronous code, when to use variables, and what aliasing is.\n\n#### Using Aliases to Refer to Previous Subjects[​](#Using-Aliases-to-Refer-to-Previous-Subjects \"Direct link to Using Aliases to Refer to Previous Subjects\")\n\nCypress has some added functionality for quickly referring back to past subjects called [Aliases](https://docs.cypress.io/guides/core-concepts/variables-and-aliases). It looks something like this:\n\n```\ncy.get('.my-selector')  .as('myElement') // sets the alias  .click()/* many more actions */cy.get('@myElement') // re-queries the DOM as before  .click()\n```\n\nThis lets us reuse our queries for more readable tests, and it automatically handles re-querying the DOM for us as it updates. This is particularly helpful when dealing with front end frameworks that do a lot of re-rendering!\n\n### Commands Are Asynchronous[​](#Commands-Are-Asynchronous \"Direct link to Commands Are Asynchronous\")\n\nIt is very important to understand that Cypress commands don't do anything at the moment they are invoked, but rather enqueue themselves to be run later. This is what we mean when we say Cypress commands are asynchronous.\n\n#### Take this short test, for example:[​](#Take-this-short-test-for-example \"Direct link to Take this short test, for example:\")\n\n*   End-to-End Test\n*   Component Test\n\n```\nit('hides the thing when it is clicked', () => {  cy.visit('/my/resource/path') // Nothing happens yet  cy.get(\".hides-when-clicked\") // Still nothing happening    .should(\"be.visible\") // Still absolutely nothing    .click() // Nope, nothing  cy.get('.hides-when-clicked') // Still nothing happening    .should('not.be.visible') // Definitely nothing happening yet})// Ok, the test function has finished executing...// We've queued all of these commands and now// Cypress will begin running them in order!\n```\n\nCypress doesn't kick off the browser automation until the test function exits.\n\n#### Mixing Async and Sync code[​](#Mixing-Async-and-Sync-code \"Direct link to Mixing Async and Sync code\")\n\nRemembering that Cypress commands run asynchronously is important if you are attempting to mix Cypress commands with synchronous code. Synchronous code will execute immediately - not waiting for the Cypress commands above it to execute.\n\n**Incorrect usage**\n\nIn the example below, the `el` evaluates immediately, before the `cy.visit()` has executed, so will always evaluate to an empty array.\n\n```\nit('does not work as we expect', () => {  cy.visit('/my/resource/path') // Nothing happens yet  cy.get('.awesome-selector') // Still nothing happening    .click() // Nope, nothing  // Cypress.$ is synchronous, so evaluates immediately  // there is no element to find yet because  // the cy.visit() was only queued to visit  // and did not actually visit the application  let el = Cypress.$('.new-el') // evaluates immediately as []  if (el.length) {    // evaluates immediately as 0    cy.get('.another-selector')  } else {    // this will always run    // because the 'el.length' is 0    // when the code executes    cy.get('.optional-selector')  }})// Ok, the test function has finished executing...// We've queued all of these commands and now// Cypress will begin running them in order!\n```\n\n**Correct usage**\n\nBelow is one way the code above could be rewritten in order to ensure the commands run as expected.\n\n```\nit('does not work as we expect', () => {  cy.visit('/my/resource/path') // Nothing happens yet  cy.get('.awesome-selector') // Still nothing happening    .click() // Nope, nothing    .then(() => {      // placing this code inside the .then() ensures      // it runs after the cypress commands 'execute'      let el = Cypress.$('.new-el') // evaluates after .then()      if (el.length) {        cy.get('.another-selector')      } else {        cy.get('.optional-selector')      }    })})// Ok, the test function has finished executing...// We've queued all of these commands and now// Cypress will begin running them in order!\n```\n\n**Incorrect usage**\n\nIn the example below, the check on the `username` value gets evaluated immediately, before the `cy.visit()` has executed, so will always evaluate to `undefined`.\n\n```\nit('test', () => {  let username = undefined // evaluates immediately as undefined  cy.visit('https://example.cypress.io') // Nothing happens yet  cy.get('.user-name') // Still, nothing happens yet    .then(($el) => {      // Nothing happens yet      // this line evaluates after the .then executes      username = $el.text()    })  // this evaluates before the .then() above  // so the username is still undefined  if (username) {    // evaluates immediately as undefined    cy.contains(username).click()  } else {    // this will always run    // because username will always    // evaluate to undefined    cy.contains('My Profile').click()  }})// Ok, the test function has finished executing...// We've queued all of these commands and now// Cypress will begin running them in order!\n```\n\n**Correct usage**\n\nBelow is one way the code above could be rewritten in order to ensure the commands run as expected.\n\n```\nit('test', () => {  let username = undefined // evaluates immediately as undefined  cy.visit('https://example.cypress.io') // Nothing happens yet  cy.get('.user-name') // Still, nothing happens yet    .then(($el) => {      // Nothing happens yet      // this line evaluates after the .then() executes      username = $el.text()      // evaluates after the .then() executes      // it's the correct value gotten from the $el.text()      if (username) {        cy.contains(username).click()      } else {        cy.get('My Profile').click()      }    })})// Ok, the test function has finished executing...// We've queued all of these commands and now// Cypress will begin running them in order!\n```\n\ntip\n\n**Core Concept**\n\nEach Cypress command (and chain of commands) returns immediately, having only been appended to a queue to be executed at a later time.\n\nYou purposefully **cannot** do anything useful with the return value from a command. Commands are enqueued and managed entirely behind the scenes.\n\nWe've designed our API this way because the DOM is a highly mutable object that constantly goes stale. For Cypress to prevent flake, and know when to proceed, we manage commands in a highly controlled deterministic way.\n\ninfo\n\n**Why can't I use async / await?**\n\nIf you're a modern JS programmer you might hear \"asynchronous\" and think: **why can't I just use `async/await`** instead of learning some proprietary API?\n\nCypress's APIs are built very differently from what you're likely used to: but these design patterns are incredibly intentional. We'll go into more detail later in this guide.\n\n#### Avoid loops[​](#Avoid-loops \"Direct link to Avoid loops\")\n\nUsing JavaScript loop commands like `while` can have unexpected effects. Let's say our application shows a random number on load.\n\n![Manually reloading the browser page until the number 7 appears](https://docs.cypress.io/img/guides/core-concepts/reload-page.gif)\n\nWe want the test to stop when it finds the number 7. If any other number is displayed the test reloads the page and checks again.\n\n**Note:** you can find this application and the correct test in our [Recipes](https://github.com/cypress-io/cypress-example-recipes#testing-the-dom).\n\n**Incorrect test**\n\nThe test written below WILL NOT work and most likely will crash your browser.\n\n```\nlet found7 = falsewhile (!found7) {  // this schedules an infinite number  // of \"cy.get...\" commands, eventually crashing  // before any of them have a chance to run  // and set found7 to true  cy.get('#result')    .should('not.be.empty')    .invoke('text')    .then(parseInt)    .then((number) => {      if (number === 7) {        found7 = true        cy.log('lucky **7**')      } else {        cy.reload()      }    })}\n```\n\nThe above test keeps adding more `cy.get('#result')` commands to the test chain without executing any! The chain of commands keeps growing, but never executes - since the test function never finishes running. The `while` loop never allows Cypress to start executing even the very first `cy.get(...)` command.\n\n**Correct test**\n\nWe need to give the test a chance to run a few commands before deciding if it needs to continue. Thus the correct test would use recursion.\n\n```\nconst checkAndReload = () => {  // get the element's text, convert into a number  cy.get('#result')    .should('not.be.empty')    .invoke('text')    .then(parseInt)    .then((number) => {      // if the expected number is found      // stop adding any more commands      if (number === 7) {        cy.log('lucky **7**')        return      }      // otherwise insert more Cypress commands      // by calling the function after reload      cy.wait(500, { log: false })      cy.reload()      checkAndReload()    })}cy.visit('public/index.html')checkAndReload()\n```\n\nThe test runs and correctly finishes.\n\n![Test reloads the page until the number 7 appears](https://docs.cypress.io/img/guides/core-concepts/lucky-7.gif)\n\nYou can see a short video going through this example at\n\n[https://www.youtube.com/watch?v=5Z8BaPNDfvA](https://www.youtube.com/watch?v=5Z8BaPNDfvA)\n\n### Commands Run Serially[​](#Commands-Run-Serially \"Direct link to Commands Run Serially\")\n\nAfter a test function is finished running, Cypress goes to work executing the commands that were enqueued using the `cy.*` command chains.\n\n#### Let's take another look at an example[​](#Lets-take-another-look-at-an-example \"Direct link to Let's take another look at an example\")\n\n*   End-to-End Test\n*   Component Test\n\n```\nit('hides the thing when it is clicked', () => {  cy.visit('/my/resource/path') // 1.  cy.get('.hides-when-clicked') // 2    .should('be.visible') // 3    .click() // 4  cy.get('.hides-when-clicked') // 5    .should('not.be.visible') // 6});\n```\n\nThe test above would cause an execution in this order:\n\n1.  Visit the URL (or mount the component).\n2.  Find an element by its selector.\n3.  Assert that the element is visible.\n4.  Perform a click action on that element.\n5.  Find an element by its selector.\n6.  Assert that the element is no longer visible.\n\nThese actions will always happen serially (one after the other), never in parallel (at the same time). Why?\n\nTo illustrate this, let's revisit that list of actions and expose some of the hidden **✨ magic ✨** Cypress does for us at each step:\n\n1.  Visit the URL ✨ **and wait for the page load event to fire after all external resources have loaded** ✨ (or mount the component ✨ **and wait for the component to finish mounting** ✨)\n2.  Find an element by its selector ✨ **and retry until it is found in the DOM** ✨\n3.  Assert that the element is visible ✨ **and retry until the assertion passes** ✨\n4.  Perform a click action on that element ✨ **after we wait for the element to reach an actionable state** ✨\n5.  Find an element by its selector ✨ **and retry until it is found in the DOM** ✨\n6.  Assert that the element is no longer visible ✨ **and retry until the assertion passes** ✨\n\nAs you can see, Cypress does a lot of extra work to ensure the state of the application matches what our commands expect about it. Each command may resolve quickly (so fast you won't see them in a pending state) but others may take seconds, or even dozens of seconds to resolve.\n\nWhile most commands time out after a few seconds, other specialized commands that expect particular things to take much longer like [`cy.visit()`](https://docs.cypress.io/api/commands/visit) will naturally wait longer before timing out.\n\nThese commands have their own particular timeout values which are documented in the [Cypress configuration](https://docs.cypress.io/guides/references/configuration).\n\ntip\n\n**Core Concept**\n\nAny waiting or retrying that is necessary to ensure a step was successful must complete before the next step begins. If they don't complete successfully before the timeout is reached, the test will fail.\n\n### The Cypress Command Queue[​](#The-Cypress-Command-Queue \"Direct link to The Cypress Command Queue\")\n\nWhile the API may look similar to Promises, with its `then()` syntax, Cypress commands and queries are not promises - they are serial commands passed into a central queue, to be executed asynchronously at a later date. These commands are designed to deliver deterministic, repeatable and consistent tests.\n\nAlmost all commands come with built-in **[retry-ability](https://docs.cypress.io/guides/core-concepts/retry-ability)**. Without **[retry-ability](https://docs.cypress.io/guides/core-concepts/retry-ability)**, assertions would randomly fail. This would lead to flaky, inconsistent results.\n\ninfo\n\nWhile Cypress does have a [`.then()`](https://docs.cypress.io/api/commands/then) command, Cypress commands are not Promises and cannot be `await`ed. If you'd like to learn more about handling asynchronous Cypress Commands please read our [Variables and Aliases Guide](https://docs.cypress.io/guides/core-concepts/variables-and-aliases).\n\nCommands also have some design choices that developers who are used to promise-based testing may find unexpected. They are intentional decisions on Cypress' part, not technical limitations.\n\n1.  You cannot **race** or run multiple commands at the same time (in parallel).\n2.  You cannot add a `.catch` error handler to a failed command.\n\nThe whole purpose of Cypress (and what makes it very different from other testing tools) is to create consistent, non-flaky tests that perform identically from one run to the next. Making this happen isn't free - there are some trade-offs we make that may initially seem unfamiliar to developers accustomed to working with Promises or other libraries.\n\nLet's take a look at each trade-off in depth:\n\n#### You cannot race or run multiple commands at the same time[​](#You-cannot-race-or-run-multiple-commands-at-the-same-time \"Direct link to You cannot race or run multiple commands at the same time\")\n\nCypress guarantees that it will execute all of its commands and queries _deterministically_ and identically every time they are run.\n\nA lot of Cypress commands _mutate_ the state of the browser in some way.\n\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) automatically gets + sets cookies to and from the remote server.\n*   [`cy.clearCookies()`](https://docs.cypress.io/api/commands/clearcookies) clears all of the browser cookies.\n*   [`.click()`](https://docs.cypress.io/api/commands/click) causes your application to react to click events.\n\nNone of the above commands are _idempotent_; they all cause side effects. Racing commands is not possible because commands must be run in a controlled, serial manner in order to create consistency. Because integration and e2e tests primarily mimic the actions of a real user, Cypress models its command execution model after a real user working step by step.\n\n#### You cannot add a `.catch` error handler to a failed command[​](#You-cannot-add-a-catch-error-handler-to-a-failed-command \"Direct link to You-cannot-add-a-catch-error-handler-to-a-failed-command\")\n\nIn Cypress there is no built in error recovery from a failed command. A command _eventually_ passes, or if it fails, all remaining commands are not executed, and the test as a whole fails.\n\nYou might be wondering:\n\n> How do I create conditional control flow, using if/else? So that if an element does (or doesn't) exist, I choose what to do?\n\nCypress does not support this type of conditional control flow because it leads to non-deterministic tests - different runs may behave differently, which makes them less consistent and useful for verifying your application's correctness. In general, there are only a handful of very specific situations where you can or should create control flow using Cypress commands.\n\nWith that said, as long as you are aware of the potential pitfalls with control flow, it is possible to do this in Cypress! You can read all about how to do [conditional testing](https://docs.cypress.io/guides/core-concepts/conditional-testing) here.\n\n## Assertions[​](#Assertions \"Direct link to Assertions\")\n\nAs we mentioned previously in this guide:\n\nnote\n\nAssertions describe the **desired** state of your **elements**, your **objects**, and your **application**.\n\nWhat makes Cypress unique from other testing tools is that assertions **automatically retry**. Think of them as **guards** - assertions describe what your application should look like, and Cypress will automatically **block, wait, and retry** until it reaches that state.\n\n### Asserting in English[​](#Asserting-in-English \"Direct link to Asserting in English\")\n\nLet's look at how you'd describe an assertion in English:\n\nnote\n\nAfter clicking on this `<button>`, I expect its class to be `active`.\n\nTo express this in Cypress you'd write:\n\n```\ncy.get('button').click()cy.get('button').should('have.class', 'active')\n```\n\nThis above test will pass even if the `.active` class is applied to the button asynchronously, after an indeterminate period of time or even if the button is removed from the DOM entirely for a while (replaced with a waiting spinner, for example).\n\n```\n// even though we are adding the class// after two seconds...// this test will still pass!$('button').on('click', (e) => {  setTimeout(() => {    $(e.target).addClass('active')  }, 2000)})\n```\n\nHere's another example.\n\nnote\n\nAfter making an HTTP request to my server, I expect the response body to equal `{name: 'Jane'}`\n\nTo express this with an assertion you'd write:\n\n```\ncy.request('/users/1').its('body').should('deep.eq', { name: 'Jane' })\n```\n\n### When To Assert?[​](#When-To-Assert \"Direct link to When To Assert?\")\n\nDespite the dozens of assertions Cypress makes available to you, sometimes the best test may make no assertions at all! How can this be? Aren't assertions a basic part of testing?\n\n#### Consider this example:[​](#Consider-this-example \"Direct link to Consider this example:\")\n\n*   End-to-End Test\n*   Component Test\n\n```\ncy.visit('/home')cy.get('.main-menu').contains('New Project').click()cy.get('.title').type('My Awesome Project')cy.get('form').submit()\n```\n\nWithout a single explicit assertion, there are dozens of ways this test can fail. Here's a few:\n\n*   The initial [`cy.mount()`](https://docs.cypress.io/api/commands/mount) or [`cy.visit()`](https://docs.cypress.io/api/commands/visit) could respond with something other than success.\n*   Any of the [`cy.get()`](https://docs.cypress.io/api/commands/get) queries could fail to find their elements in the DOM.\n*   The element we want to [`.click()`](https://docs.cypress.io/api/commands/click) on could be covered by another element.\n*   The input we want to [`.type()`](https://docs.cypress.io/api/commands/type) into could be disabled.\n*   Form submission could result in a non-success status code.\n*   The in-page JS (the application under test) or the component could throw an error.\n\ntip\n\n**Core Concept**\n\nWith Cypress, you don't have to write explicit assertions to have a useful test. Without a single `expect()` or `.should()`, a few lines of Cypress can ensure thousands of lines of code are working properly across the client and server.\n\nThis is because many commands have built in Implicit Assertions which offer you a high level of confidence that your application is working as expected.\n\n### Implicit Assertions[​](#Implicit-Assertions \"Direct link to Implicit Assertions\")\n\nMany commands have default, built-in assertions, or rather have requirements that may cause it to fail without needing an explicit assertion you've added.\n\n#### For instance:[​](#For-instance \"Direct link to For instance:\")\n\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) expects the page to send `text/html` content with a `200` status code.\n*   [`cy.request()`](https://docs.cypress.io/api/commands/request) expects the remote server to exist and provide a response.\n*   [`cy.contains()`](https://docs.cypress.io/api/commands/contains) expects the element with content to eventually exist in the DOM.\n*   [`cy.get()`](https://docs.cypress.io/api/commands/get) expects the element to eventually exist in the DOM.\n*   [`.find()`](https://docs.cypress.io/api/commands/find) also expects the element to eventually exist in the DOM.\n*   [`.type()`](https://docs.cypress.io/api/commands/type) expects the element to eventually be in a _typeable_ state.\n*   [`.click()`](https://docs.cypress.io/api/commands/click) expects the element to eventually be in an _actionable_ state.\n*   [`.its()`](https://docs.cypress.io/api/commands/its) expects to eventually find a property on the current subject.\n\nCertain commands may have a specific requirement that causes them to immediately fail without retrying, such as [`cy.request()`](https://docs.cypress.io/api/commands/request).\n\nOthers, such as DOM queries automatically [retry](https://docs.cypress.io/guides/core-concepts/retry-ability) and wait for their corresponding elements to exist before failing.\n\nAction commands automatically wait for their element to reach an [actionable state](https://docs.cypress.io/guides/core-concepts/interacting-with-elements) before failing.\n\ntip\n\n**Core Concept**\n\nAll DOM commands automatically wait for their elements to exist in the DOM.\n\nYou **never** need to write [`.should('exist')`](https://docs.cypress.io/api/commands/should) after querying the DOM.\n\nMost commands give you the flexibility to override or bypass the default ways they can fail, typically by passing a `{force: true}` option.\n\n#### Example #1: Existence and Actionability[​](#Example-1-Existence-and-Actionability \"Direct link to Example #1: Existence and Actionability\")\n\n```\ncy  // there is an implicit assertion that this  // button must exist in the DOM before proceeding  .get('button')  // before issuing the click, this button must be \"actionable\"  // it cannot be disabled, covered, or hidden from view.  .click()\n```\n\nCypress will automatically _wait_ for elements to pass their implicit assertions. See [Timeouts](#Timeouts) below for more on how timeouts are determined.\n\n#### Example #2: Reversing the Implicit Assertion[​](#Example-2-Reversing-the-Implicit-Assertion \"Direct link to Example #2: Reversing the Implicit Assertion\")\n\nMost of the time, when querying for elements, you expect them to eventually exist. But sometimes you wish to wait until they _don't_ exist.\n\nAll you have to do is add that assertion and Cypress will **skip** implicitly waiting for elements to exist.\n\n```\ncy.get('button.close').click()// now Cypress will wait until this// <button> is not in the DOMcy.get('button.close').should('not.exist')// and now make sure this #modal does not exist in the DOM// and automatically wait until it's gone!cy.get('#modal').should('not.exist')\n```\n\ntip\n\n**Core Concept**\n\nIf you want to disable the default existence assertion, you can add [`.should('not.exist')`](https://docs.cypress.io/api/commands/should) to any DOM command.\n\n#### Example #3: Other Implicit Assertions[​](#Example-3-Other-Implicit-Assertions \"Direct link to Example #3: Other Implicit Assertions\")\n\nOther commands have other implicit assertions not related to the DOM.\n\nFor instance, [`.its()`](https://docs.cypress.io/api/commands/its) requires that the property you're asking about exists on the object.\n\n```\n// create an empty objectconst obj = {}// set the 'foo' property after 1 secondsetTimeout(() => {  obj.foo = 'bar'}, 1000)// .its() will wait until the 'foo' property is on the objectcy.wrap(obj).its('foo')\n```\n\n### List of Assertions[​](#List-of-Assertions \"Direct link to List of Assertions\")\n\nCypress bundles [Chai](https://docs.cypress.io/guides/references/bundled-libraries#Chai), [Chai-jQuery](https://docs.cypress.io/guides/references/bundled-libraries#Chai-jQuery), and [Sinon-Chai](https://docs.cypress.io/guides/references/bundled-libraries#Sinon-Chai) to provide built-in assertions. You can see a comprehensive list of them in [the list of assertions reference](https://docs.cypress.io/guides/references/assertions). You can also [write your own assertions as Chai plugins](https://docs.cypress.io/examples/recipes#Fundamentals) and use them in Cypress.\n\n### Writing Assertions[​](#Writing-Assertions \"Direct link to Writing Assertions\")\n\nThere are two ways to write assertions in Cypress:\n\n1.  **As Cypress Commands:** Using [`.should()`](https://docs.cypress.io/api/commands/should) or [`.and()`](https://docs.cypress.io/api/commands/and).\n2.  **As Mocha Assertions:** Using `expect`.\n\n### Command Assertions[​](#Command-Assertions \"Direct link to Command Assertions\")\n\nUsing [`.should()`](https://docs.cypress.io/api/commands/should) or [`.and()`](https://docs.cypress.io/api/commands/and) commands is the preferred way of making assertions in Cypress. These are typical Cypress commands, which means they apply to the currently yielded subject in the command chain.\n\n```\n// The subject here is the first <tr>.// This asserts that the <tr> has an .active classcy.get('tbody tr:first').should('have.class', 'active')\n```\n\nYou can chain multiple assertions together using [`.and()`](https://docs.cypress.io/api/commands/and), which is another name for [`.should()`](https://docs.cypress.io/api/commands/should) that makes things more readable:\n\n```\ncy.get('#header a')  .should('have.class', 'active')  .and('have.attr', 'href', '/users')\n```\n\nBecause [`.should('have.class')`](https://docs.cypress.io/api/commands/should) does not change the subject, [`.and('have.attr')`](https://docs.cypress.io/api/commands/and) is executed against the same element. This is handy when you need to assert multiple things against a single subject quickly.\n\n### Mocha Assertions[​](#Mocha-Assertions \"Direct link to Mocha Assertions\")\n\nUsing `expect` allows you to assert on any JavaScript object, not just the current subject. This is probably how you're used to seeing assertions written in unit tests:\n\n```\n// the explicit subject here is the boolean: trueexpect(true).to.be.true\n```\n\nMocha assertions are great when you want to:\n\n*   Perform custom logic prior to making the assertion.\n*   Make multiple assertions against the same subject.\n\nThe [`.should()`](https://docs.cypress.io/api/commands/should) assertion allows us to pass a callback function that takes the yielded subject as its first argument. This works like [`.then()`](https://docs.cypress.io/api/commands/then), except Cypress automatically **waits and retries** for everything inside of the callback function to pass.\n\ninfo\n\n**Complex Assertions**\n\nThe example below is a use case where we are asserting across multiple elements. Using a [`.should()`](https://docs.cypress.io/api/commands/should) callback function is a great way to query from a **parent** into multiple children elements and assert something about their state.\n\nDoing so enables you to **block** and **guard** Cypress by ensuring the state of descendants matches what you expect without needing to query them individually with regular Cypress DOM commands.\n\n```\ncy.get('p').should(($p) => {  // massage our subject from a DOM element  // into an array of texts from all of the p's  let texts = $p.map((i, el) => {    return Cypress.$(el).text()  })  // jQuery map returns jQuery object  // and .get() converts this to an array  texts = texts.get()  // array should have length of 3  expect(texts).to.have.length(3)  // with this specific content  expect(texts).to.deep.eq([    'Some text from first p',    'More text from second p',    'And even more text from third p',  ])})\n```\n\ndanger\n\n**Make sure `.should()` is safe**\n\nWhen using a callback function with [`.should()`](https://docs.cypress.io/api/commands/should), be sure that the entire function can be executed multiple times without side effects. Cypress applies its [retry logic](https://docs.cypress.io/guides/core-concepts/retry-ability) to these functions: if there's a failure, it will repeatedly rerun the assertions until the timeout is reached. That means your code should be retry-safe. The technical term for this means your code must be **idempotent**.\n\n## Timeouts[​](#Timeouts \"Direct link to Timeouts\")\n\nAlmost all commands can time out in some way.\n\nAll assertions, whether they're the default ones or whether they've been added by you all share the same timeout values.\n\n### Applying Timeouts[​](#Applying-Timeouts \"Direct link to Applying Timeouts\")\n\nYou can modify a commands's timeout. This timeout affects both its default assertions (if any) and any specific assertions you've added.\n\nRemember because assertions are used to describe a condition of the previous commands - the `timeout` modification goes on the previous commands _not the assertions_.\n\n#### Example #1: Implicit Assertion[​](#Example-1-Implicit-Assertion \"Direct link to Example #1: Implicit Assertion\")\n\n```\n// because .get() has an implicit assertion// that this element exists, it can time out and failcy.get('.mobile-nav')\n```\n\nUnder the hood Cypress:\n\n*   Queries for the element `.mobile-nav`\n    \n    ✨**and waits up to 4 seconds for it to exist in the DOM**✨\n    \n\n#### Example #2: Additional Assertions[​](#Example-2-Additional-Assertions \"Direct link to Example #2: Additional Assertions\")\n\n```\n// we've added 2 assertions to our testcy.get('.mobile-nav').should('be.visible').and('contain', 'Home')\n```\n\nUnder the hood Cypress:\n\n*   Queries for the element `.mobile-nav`\n    \n    ✨**and waits up to 4 seconds for it to exist in the DOM**✨ ✨**and be visible**✨ ✨**and contain the text: Home**✨\n    \n\nThe _total_ amount of time Cypress will wait for _all_ of the assertions to pass is for the duration of the [cy.get()](https://docs.cypress.io/api/commands/get) `timeout` (which is 4 seconds).\n\nTimeouts can be modified per command and this will affect all implicit assertions and any assertions chained after that command.\n\n#### Example #3: Modifying Timeouts[​](#Example-3-Modifying-Timeouts \"Direct link to Example #3: Modifying Timeouts\")\n\n```\n// we've modified the timeout which affects the implicit// assertions as well as all explicit ones.cy.get('.mobile-nav', { timeout: 10000 })  .should('be.visible')  .and('contain', 'Home')\n```\n\nUnder the hood Cypress:\n\n*   Gets the element `.mobile-nav`\n    \n    ✨**and waits up to 10 seconds for it to exist in the DOM**✨ ✨**and be visible**✨ ✨**and contain the text: Home**✨\n    \n\nNotice that this timeout has flowed down to all assertions and Cypress will now wait _up to 10 seconds total_ for all of them to pass.\n\ndanger\n\nNote that you _never_ change the timeout inside the assertion. The `timeout` parameter **always** goes inside the command.\n\n```\n// 🚨 DOES NOT WORKcy.get('.selector').should('be.visible', { timeout: 1000 })// ✅ THE CORRECT WAYcy.get('.selector', { timeout: 1000 }).should('be.visible')\n```\n\nRemember, you are retrying the command with attached assertions, not just the assertions!\n\n### Default Values[​](#Default-Values \"Direct link to Default Values\")\n\nCypress offers several different timeout values based on the type of command.\n\nWe've set their default timeout durations based on how long we expect certain actions to take.\n\nFor instance:\n\n*   [`cy.visit()`](https://docs.cypress.io/api/commands/visit) loads a remote page and does not resolve _until all of the external resources complete their loading phase_. This may take awhile, so its default timeout is set to `60000ms`.\n*   [`cy.exec()`](https://docs.cypress.io/api/commands/exec) runs a system command such as _seeding a database_. We expect this to potentially take a long time, and its default timeout is set to `60000ms`.\n*   [`cy.wait()`](https://docs.cypress.io/api/commands/wait) actually uses 2 different timeouts. When waiting for a [routing alias](https://docs.cypress.io/guides/core-concepts/variables-and-aliases#Intercepts), we wait for a matching request for `5000ms`, and then additionally for the server's response for `30000ms`. We expect your application to make a matching request quickly, but we expect the server's response to potentially take much longer.\n\nThat leaves most other commands including all DOM queries to time out by default after 4000ms.",
    "title": "Introduction to Cypress | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/tooling/code-coverage",
    "markdown": "# Code Coverage | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to instrument your application code\n*   How to save the coverage information collected during end-to-end and unit tests\n*   How to use the code coverage reports to guide writing tests\n\n## Introduction[​](#Introduction \"Direct link to Introduction\")\n\nAs you write more and more end-to-end tests, you will find yourself wondering - do I need to write more tests? Are there parts of the application still untested? Are there parts of the application that perhaps are tested too much? One answer to those questions is to find out which lines of the application's source code were executed during end-to-end tests. If there are important sections of the application's logic that **were not** executed from the tests, then a new test should be added to ensure that part of our application logic is tested.\n\nComputing the source code lines that were executed during the test is done through **code coverage**. Code coverage requires inserting additional counters into your source code before running it. This step is called **instrumentation**. Instrumentation takes code that looks like this...\n\n```\n// add.jsfunction add(a, b) {  return a + b}module.exports = { add }\n```\n\n...and parses it to find all functions, statements, and branches and then inserts **counters** into the code. For the above code it might look like this:\n\n```\n// this object counts the number of times each// function and each statement is executedconst c = (window.__coverage__ = {  // \"f\" counts the number of times each function is called  // we only have a single function in the source code  // thus it starts with [0]  f: [0],  // \"s\" counts the number of times each statement is called  // we have 3 statements and they all start with 0  s: [0, 0, 0],})// the original code + increment statements// uses \"c\" alias to \"window.__coverage__\" object// the first statement defines the function,// let's increment itc.s[0]++function add(a, b) {  // function is called and then the 2nd statement  c.f[0]++  c.s[1]++  return a + b}// 3rd statement is about to be calledc.s[2]++module.exports = { add }\n```\n\nImagine we load the above instrumented source file from our test spec file. Immediately some counters will be incremented!\n\n```\n// add.cy.jsconst { add } = require('./add')// JavaScript engine has parsed and evaluated \"add.js\" source code// which ran some of the increment statements// __coverage__ has now// f: [0] - function \"add\" was NOT executed// s: [1, 0, 1] - first and third counters were incremented// but the statement inside function \"add\" was NOT executed\n```\n\nWe want to make sure every statement and function in the file `add.js` has been executed by our tests at least once. Thus we write a test:\n\n```\n// add.cy.jsconst { add } = require('./add')it('adds numbers', () => {  expect(add(2, 3)).to.equal(5)})\n```\n\nWhen the test calls `add(2, 3)`, the counter increments inside the \"add\" function are executed, and the coverage object becomes:\n\n```\n{  // \"f\" keeps count of times each function was called  // we only have a single function in the source code  // thus it starts with [0]  f: [1],  // \"s\" keeps count of times each statement was called  // we have 3 statements, and they all start with 0  s: [1, 1, 1]}\n```\n\nThis single test has achieved 100% code coverage - every function and every statement has been executed at least once. But, in real world applications, achieving 100% code coverage requires multiple tests.\n\nOnce the tests finish, the coverage object can be serialized and saved to disk so that a human-friendly report can be generated. The collected coverage information can also be sent to external services and help during pull request reviews.\n\ninfo\n\nIf you are unfamiliar with code coverage or want to learn more, take a look at the \"Understanding JavaScript Code Coverage\" blog post [Part 1](https://medium.com/engineering-semantics3/understanding-code-coverage-1074e8fccce0/) and [Part 2](https://medium.com/engineering-semantics3/understanding-javascript-code-coverage-part-2-9aedaa5119e5/).\n\nThis guide explains how to instrument the application source code using common tools. Then we show how to save the coverage information and generate reports using the [`@cypress/code-coverage`](https://github.com/cypress-io/code-coverage) Cypress plugin. After reading this guide you should be able to better target your tests using the code coverage information.\n\nThis guide explains how to find what parts of your application code are covered by Cypress tests so you can have 100% confidence that your tests aren't missing crucial parts of your application. The collected information can be sent to external services, automatically run during pull request reviews, and integrated into CI.\n\n## Instrumenting code[​](#Instrumenting-code \"Direct link to Instrumenting code\")\n\nCypress does not instrument your code - you need to do it yourself. The golden standard for JavaScript code instrumentation is the battle-hardened [Istanbul](https://istanbul.js.org/) and, luckily, it plays very nicely with the Cypress. You can instrument the code as a build step through one of two ways:\n\n*   Using the [nyc](https://github.com/istanbuljs/nyc) module - a command-line interface for the [Istanbul](https://istanbul.js.org/) library\n*   As part of your code transpilation pipeline using the [`babel-plugin-istanbul`](https://github.com/istanbuljs/babel-plugin-istanbul) tool.\n\n### Using NYC[​](#Using-NYC \"Direct link to Using NYC\")\n\nTo instrument the application code located in your `src` folder and save it in an `instrumented` folder use the following command:\n\n```\nnpx nyc instrument --compact=false src instrumented\n```\n\nWe are passing the `--compact=false` flag to generate human-friendly output.\n\nThe instrumentation takes your original code like this fragment...\n\n```\nconst store = createStore(reducer)render(  <Provider store={store}>    <App />  </Provider>,  document.getElementById('root'))\n```\n\n...and wraps each statement with additional counters that keep track of how many times each source line has been executed by the JavaScript runtime.\n\n```\nconst store = (cov_18hmhptych.s[0]++, createStore(reducer))cov_18hmhptych.s[1]++render(  <Provider store={store}>    <App />  </Provider>,  document.getElementById('root'))\n```\n\nNotice the calls to `cov_18hmhptych.s[0]++` and `cov_18hmhptych.s[1]++` that increment the statement counters. All counters and additional book-keeping information is stored in a single object attached to the browser's `window` object. We can see the counters if we serve the `instrumented` folder instead of `src` and open the application.\n\n![Code coverage object](https://docs.cypress.io/img/guides/code-coverage/coverage-object.png)\n\nIf we drill into the coverage object we can see the statements executed in each file. For example the file `src/index.js` has the following information:\n\n![Covered statements counters in a from the index file](https://docs.cypress.io/img/guides/code-coverage/coverage-statements.png)\n\nIn green, we highlighted the 4 statements present in that file. The first three statements were each executed once and the last statement was never executed (it probably was inside an `if` statement). By using the application, we can both increment the counters and flip some of the zero counters into positive numbers.\n\n### Using code transpilation pipeline[​](#Using-code-transpilation-pipeline \"Direct link to Using code transpilation pipeline\")\n\nInstead of using the `npx instrument` command, we can use [`babel-plugin-istanbul`](https://github.com/istanbuljs/babel-plugin-istanbul) to instrument the code as part of its transpilation. Add this plugin to the `.babelrc` file.\n\n```\n{  \"presets\": [\"@babel/preset-react\"],  \"plugins\": [\"transform-class-properties\", \"istanbul\"]}\n```\n\nWe can now serve the application and get instrumented code without an intermediate folder, but the result is the same instrumented code loaded by the browser, with the same `window.__coverage__` object keeping track of the original statements.\n\n![Bundled code and source mapped originals](https://docs.cypress.io/img/guides/code-coverage/source-map.png)\n\nA really nice feature of both [nyc](https://github.com/istanbuljs/nyc) and [`babel-plugin-istanbul`](https://github.com/istanbuljs/babel-plugin-istanbul) is that the source maps are generated automatically, allowing us to collect code coverage information, but also interact with the original, non-instrumented code in the Developer Tools. In the screenshot above the bundle (green arrow) has coverage counters, but the source mapped files in the green rectangle show the original code.\n\ninfo\n\nThe `nyc` and `babel-plugin-istanbul` only instrument the application code and not 3rd party dependencies from `node_modules`.\n\nTo handle code coverage collected during each test, we created a [`@cypress/code-coverage`](https://github.com/cypress-io/code-coverage) Cypress plugin. It merges coverage from each test and saves the combined result. It also calls `nyc` (its peer dependency) to generate static HTML reports for human consumption.\n\n### Install the plugin[​](#Install-the-plugin \"Direct link to Install the plugin\")\n\n```\nnpm install @cypress/code-coverage --save-dev\n```\n\nThen add the code below to the [supportFile](https://docs.cypress.io/guides/references/configuration#e2e) and [setupNodeEvents](https://docs.cypress.io/guides/tooling/plugins-guide#Using-a-plugin) function.\n\n```\n// cypress/support/e2e.jsimport '@cypress/code-coverage/support'\n```\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      require('@cypress/code-coverage/task')(on, config)      // include any other plugin code...      // It's IMPORTANT to return the config object      // with any changed environment variables      return config    },  },})\n```\n\nWhen you run the Cypress tests now, you should see a few commands after the tests finish. We have highlighted these commands using a green rectangle below.\n\n![coverage plugin commands](https://docs.cypress.io/img/guides/code-coverage/coverage-plugin-commands.png)\n\nAfter the tests complete, the final code coverage is saved to a `.nyc_output` folder. It is a JSON file from which we can generate a report in a variety of formats. The [`@cypress/code-coverage`](https://github.com/cypress-io/code-coverage) plugin generates the HTML report automatically - you can open the `coverage/index.html` page locally after the tests finish. You can also call `nyc report` to generate other reports, for example, sending the coverage information to 3rd party services.\n\n### See code coverage summary[​](#See-code-coverage-summary \"Direct link to See code coverage summary\")\n\nTo see the summary of the code coverage after tests run, run the command below.\n\n```\nnpx nyc report --reporter=text-summary========= Coverage summary =======Statements   : 76.3% ( 103/135 )Branches     : 65.31% ( 32/49 )Functions    : 64% ( 32/50 )Lines        : 81.42% ( 92/113 )==================================\n```\n\ninfo\n\n**Tip:** store the `coverage` folder as a build artifact on your continuous integration server. Because the report is a static HTML page, some CIs can show it right from their web applications. The screenshot below shows the coverage report stored on CircleCI. Clicking on `index.html` shows the report right in the browser.\n\n![coverage HTML report on CircleCI](https://docs.cypress.io/img/guides/code-coverage/circleci-coverage-report.png)\n\n## Code coverage as a guide[​](#Code-coverage-as-a-guide \"Direct link to Code coverage as a guide\")\n\nEven a single test can cover a lot of the application code. For example, let's run the following test that adds a few items, then marks one of them as completed.\n\n*   End-to-End Test\n*   Component Test\n\n```\nit('adds and completes todos', () => {  cy.visit('/')  cy.get('.new-todo')    .type('write code{enter}')    .type('write tests{enter}')    .type('deploy{enter}')  cy.get('.todo').should('have.length', 3)  cy.get('.todo').first().find('.toggle').check()  cy.get('.todo').first().should('have.class', 'completed')})\n```\n\nAfter running the test and opening the HTML report, we see 76% code coverage in our application.\n\n![Coverage report after a single test](https://docs.cypress.io/img/guides/code-coverage/single-test.png)\n\nEven better, we can drill down into the individual source files to see what code we missed. In our example application, the main state logic is in the `src/reducers/todos.js` file. Let's see the code coverage in this file:\n\n![Main application logic coverage](https://docs.cypress.io/img/guides/code-coverage/todos-coverage.png)\n\nNotice how the **ADD\\_TODO** action was executed 3 times - because our test has added 3 todo items, and the **COMPLETE\\_TODO** action was executed just once - because our test has marked 1 todo item as completed.\n\nThe source lines not covered marked in yellow (the switch cases the test missed) and red (regular statements) are a great guide for writing more end-to-end tests. We need tests that delete todo items, edit them, mark all of them as completed at once and clear completed items. When we cover every switch statement in `src/reducers/todos.js` we probably will achieve close to 100% code coverage. Even more importantly, we will cover the main features of the application the user is expected to use.\n\nWe can write more E2E tests.\n\n![Cypress passed more tests](https://docs.cypress.io/img/guides/code-coverage/more-tests.png)\n\nThe produced HTML report shows 99% code coverage\n\n![99 percent code coverage](https://docs.cypress.io/img/guides/code-coverage/almost-100.png)\n\nEvery source file but 1 is covered at 100%. We can have great confidence in our application, and safely refactor the code knowing that we have a robust set of end-to-end tests.\n\nIf possible, we advise implementing [visual testing](https://docs.cypress.io/guides/tooling/visual-testing) in addition to Cypress functional tests to avoid CSS and visual regressions.\n\n## Combining code coverage from parallel tests[​](#Combining-code-coverage-from-parallel-tests \"Direct link to Combining code coverage from parallel tests\")\n\nIf you execute Cypress tests in [parallel](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization), each machine ends up with a code coverage report that only shows a portion of the code exercised. Typically an external code coverage service would merge such partial reports for you. If you do want to merge the reports yourself:\n\n*   on every machine running Cypress tests, copy the produced code coverage report into a common folder under a unique name to avoid overwriting it\n*   after all E2E tests finish, combine the reports yourself using `nyc merge` command\n\nYou can find an example of merging partial reports in our [cypress-io/cypress-example-conduit-app](https://github.com/cypress-io/cypress-example-conduit-app)\n\n## E2E and unit code coverage[​](#E2E-and-unit-code-coverage \"Direct link to E2E and unit code coverage\")\n\nLet's look at the one file that has a \"missed\" line. It is the `src/selectors/index.js` file shown below.\n\n![Selectors file with a line not covered by end-to-end tests](https://docs.cypress.io/img/guides/code-coverage/selectors.png)\n\nThe source line not covered by the end-to-end tests shows an edge case NOT reachable from the UI. Yet this switch case is definitely worth testing - at least to avoid accidentally changing its behavior during future refactoring.\n\nWe can directly test this piece of code by importing the `getVisibleTodos` function from the Cypress spec file. In essence we are using Cypress as a unit testing tool (find more unit testing recipes [here](https://github.com/cypress-io/cypress-example-recipes#unit-testing)).\n\nHere is our test to confirm that the error is thrown.\n\n```\n// cypress/e2e/selectors.cy.jsimport { getVisibleTodos } from '../../src/selectors'describe('getVisibleTodos', () => {  it('throws an error for unknown visibility filter', () => {    expect(() => {      getVisibleTodos({        todos: [],        visibilityFilter: 'unknown-filter',      })    }).to.throw()  })})\n```\n\nThe test passes, even if there is no web application visited.\n\n![Unit test for selector](https://docs.cypress.io/img/guides/code-coverage/unit-test.png)\n\nPreviously we instrumented the application code (either using a build step or inserting a plugin into the Babel pipeline). In the example above, we are NOT loading an application, instead we are only running the test files by themselves.\n\nIf we want to collect the code coverage from the unit tests, we need to instrument the source code of _our spec files_. The simplest way to do this is to use the same `.babelrc` with [`babel-plugin-istanbul`](https://github.com/istanbuljs/babel-plugin-istanbul) and tell the Cypress built-in bundler to use `.babelrc` when bundling specs. One can use the [`@cypress/code-coverage`](https://github.com/cypress-io/code-coverage) plugin again to do this by adding the code below to the [setupNodeEvents](https://docs.cypress.io/guides/tooling/plugins-guide#Using-a-plugin) function.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      require('@cypress/code-coverage/task')(on, config)      // tell Cypress to use .babelrc file      // and instrument the specs files      // only the extra application files will be instrumented      // not the spec files themselves      on('file:preprocessor', require('@cypress/code-coverage/use-babelrc'))      return config    },  },})\n```\n\nFor reference, the `.babelrc` file is shared between the example application and the spec files, thus Cypress tests are transpiled the same way the application code is transpiled.\n\n```\n{  \"presets\": [\"@babel/preset-react\"],  \"plugins\": [\"transform-class-properties\", \"istanbul\"]}\n```\n\nWhen we run Cypress with [`babel-plugin-istanbul`](https://github.com/istanbuljs/babel-plugin-istanbul) included and inspect the `window.__coverage__` object in the **spec iframe**, we should see the coverage information for the application source files.\n\n![Code coverage in the unit test](https://docs.cypress.io/img/guides/code-coverage/code-coverage-in-unit-test.png)\n\nThe code coverage information in unit tests and end-to-end tests has the same format; the [`@cypress/code-coverage`](https://github.com/cypress-io/code-coverage) plugin automatically grabs both and saves the combined report. Thus we can see the code coverage from the `cypress/e2e/selectors.cy.js` file after running the test.\n\n![Selectors code coverage](https://docs.cypress.io/img/guides/code-coverage/unit-test-coverage.png)\n\nOur unit test is hitting the line we could not reach from the end-to-end tests, and if we execute all spec files - we will get 100% code coverage.\n\n![Full code coverage](https://docs.cypress.io/img/guides/code-coverage/100percent.png)\n\n## Full stack code coverage[​](#Full-stack-code-coverage \"Direct link to Full stack code coverage\")\n\nA complex application might have a Node back end with its own complex logic. From the front end web application, the calls to the API go through layers of code. It would be nice to track what back end code has been exercised during Cypress end-to-end tests.\n\nAre our end-to-end tests that are so effective at covering the web application code also covering the back end server code?\n\n**Long story short: yes.** You can collect the code coverage from the back end, and let the `@cypress/code-coverage` plugin merge it with the front end coverage, creating a single full stack report.\n\nYou can run your Node server and instrument it using nyc on the fly. Instead of the \"normal\" server start command, you can run the command `npm run start:coverage` defined in the `package.json` like this:\n\n```\n{  \"scripts\": {    \"start\": \"node server\",    \"start:coverage\": \"nyc --silent node server\"  }}\n```\n\nIn your server, insert another middleware from `@cypress/code-coverage`. If you use an Express server, include `middleware/express`:\n\n```\nconst express = require('express')const app = express()require('@cypress/code-coverage/middleware/express')(app)\n```\n\nIf your server uses hapi, include `middleware/hapi`\n\n```\nif (global.__coverage__) {  require('@cypress/code-coverage/middleware/hapi')(server)}\n```\n\n**Tip:** you can conditionally register the endpoint only if there is a global code coverage object, and you can [exclude the middleware code from the coverage numbers](https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md):\n\n```\n/* istanbul ignore next */if (global.__coverage__) {  require('@cypress/code-coverage/middleware/hapi')(server)}\n```\n\nFor any other server type, define a `GET /__coverage__` endpoint and return the `global.__coverage__` object.\n\n```\nif (global.__coverage__) {  // handle \"GET __coverage__\" requests  onRequest = (response) => {    response.sendJSON({ coverage: global.__coverage__ })  }}\n```\n\nIn order for the `@cypress/code-coverage` plugin to know that it should request the back end coverage, add the new endpoint to the Cypress configuration environment settings under `env.codeCoverage.url` key. For example, if the application back end is running at port 3000 and we are using the default \"GET /**coverage**\" endpoint, set the following:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  env: {    codeCoverage: {      url: 'http://localhost:3000/__coverage__',    },  },})\n```\n\nFrom now on, the front end code coverage collected during end-to-end tests will be merged with the code coverage from the instrumented back end code and saved in a single report. Here is an example report from the [cypress-io/cypress-example-conduit-app](https://github.com/cypress-io/cypress-example-conduit-app) example:\n\n![Combined code coverage report from front and back end code](https://docs.cypress.io/img/guides/code-coverage/full-coverage.png)\n\nYou can explore the above combined full stack coverage report at the [coveralls.io/github/cypress-io/cypress-example-conduit-app](https://coveralls.io/github/cypress-io/cypress-example-conduit-app) dashboard. You can also find full stack code coverage in our [RealWorld App](https://github.com/cypress-io/cypress-realworld-app).\n\nEven if you only want to measure the back end code coverage Cypress can help. Read the blog post [Back end Code Coverage from Cypress API tests](https://glebbahmutov.com/blog/backend-coverage/) for the full tutorial.\n\n## Videos[​](#Videos \"Direct link to Videos\")\n\nThere is a series of videos we have recorded showing code coverage in Cypress\n\n#### How to instrument react-scripts web application for code coverage[​](#How-to-instrument-react-scripts-web-application-for-code-coverage \"Direct link to How to instrument react-scripts web application for code coverage\")\n\n#### Get code coverage reports from Cypress tests[​](#Get-code-coverage-reports-from-Cypress-tests \"Direct link to Get code coverage reports from Cypress tests\")\n\n#### Excluding code from code coverage reports[​](#Excluding-code-from-code-coverage-reports \"Direct link to Excluding code from code coverage reports\")\n\n#### Check code coverage robustly using 3rd party tool[​](#Check-code-coverage-robustly-using-3rd-party-tool \"Direct link to Check code coverage robustly using 3rd party tool\")\n\n#### Adding code coverage badge to your project[​](#Adding-code-coverage-badge-to-your-project \"Direct link to Adding code coverage badge to your project\")\n\n#### Show code coverage in commit status check[​](#Show-code-coverage-in-commit-status-check \"Direct link to Show code coverage in commit status check\")\n\n#### Checking code coverage on pull request[​](#Checking-code-coverage-on-pull-request \"Direct link to Checking code coverage on pull request\")\n\n## Examples[​](#Examples \"Direct link to Examples\")\n\nYou can find full examples showing different code coverage setups in the following repositories:\n\n*   [cypress-io/cypress-realworld-app](https://github.com/cypress-io/cypress-realworld-app) or RWA is a full stack example application that demonstrates **best practices and scalable strategies with Cypress in practical and realistic scenarios**. The RWA achieves full code coverage with end-to-end tests [across multiple browsers](https://docs.cypress.io/guides/guides/cross-browser-testing) and [device sizes](https://docs.cypress.io/api/commands/viewport).\n*   [cypress-io/cypress-example-conduit-app](https://github.com/cypress-io/cypress-example-conduit-app) shows how to collect the coverage information from both back and front end code and merge it into a single report.\n*   [bahmutov/code-coverage-webpack-dev-server](https://github.com/bahmutov/code-coverage-webpack-dev-server) shows how to collect code coverage from an application that uses webpack-dev-server.\n*   [bahmutov/code-coverage-vue-example](https://github.com/bahmutov/code-coverage-vue-example) collects code coverage for Vue.js single file components.\n*   [lluia/cypress-typescript-coverage-example](https://github.com/lluia/cypress-typescript-coverage-example) shows coverage for a React App that uses TypeScript.\n*   [bahmutov/cypress-and-jest](https://github.com/bahmutov/cypress-and-jest) shows how to run Jest unit tests and Cypress unit tests, collecting code coverage from both test runners, and then produce a merged report.\n*   [rootstrap/react-redux-base](https://github.com/rootstrap/react-redux-base) shows an example with a realistic webpack config. Instruments the source code using `babel-plugin-istanbul` during tests.\n*   [skylock/cypress-angular-coverage-example](https://github.com/skylock/cypress-angular-coverage-example) shows an Angular 8 + TypeScript application with instrumentation done using `ngx-build-plus`.\n*   [bahmutov/testing-react](https://github.com/bahmutov/testing-react) shows how to get code coverage for a React application created using `CRA v3` without ejecting `react-scripts`.\n*   [bahmutov/next-and-cypress-example](https://github.com/bahmutov/next-and-cypress-example) shows how to get back end and front end coverage for a Next.js project. `middleware/nextjs.js`.\n*   [ericorruption/cypress-code-coverage-typescript-webpack-ts-loader](https://github.com/ericorruption/cypress-code-coverage-typescript-webpack-ts-loader) shows how to collect coverage for a TypeScript + webpack project using `ts-loader` instead of `babel-loader`.\n\nFind the full list of examples linked in [cypress-io/code-coverage#external-examples](https://github.com/cypress-io/code-coverage#external-examples).\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   The official [@cypress/code-coverage](https://github.com/cypress-io/code-coverage) plugin\n*   [Combined End-to-end and Unit Test Coverage](https://glebbahmutov.com/blog/combined-end-to-end-and-unit-test-coverage/)\n*   [Code Coverage by Parcel Bundler](https://glebbahmutov.com/blog/code-coverage-by-parcel/)\n*   [Code Coverage for End-to-end Tests](https://glebbahmutov.com/blog/code-coverage-for-e2e-tests/)",
    "title": "Code Coverage | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/core-concepts/test-isolation",
    "markdown": "# Test Isolation | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   What is test isolation\n*   How it impacts E2E Testing vs Component Testing\n*   Test isolation trade-offs\n\n## What is Test Isolation?[​](#What-is-Test-Isolation \"Direct link to What is Test Isolation?\")\n\ntip\n\n**Best Practice:** Tests should always be able to be run independently from one another **and still pass**.\n\nAs stated in our mission, we hold ourselves accountable to champion a testing process that actually works, and have built Cypress to guide developers towards writing independent tests from the start.\n\nWe do this by cleaning up state _before_ each test to ensure that the operation of one test does not affect another test later on. The goal for each test should be to **reliably pass** whether run in isolation or consecutively with other tests. Having tests that depend on the state of an earlier test can potentially cause nondeterministic test failures which make debugging challenging.\n\nCypress will start each test with a clean test slate by restoring and clearing all:\n\n*   [aliases](https://docs.cypress.io/api/commands/as)\n*   [clock mocks](https://docs.cypress.io/api/commands/clock)\n*   [intercepts](https://docs.cypress.io/api/commands/intercept)\n*   [spies](https://docs.cypress.io/api/commands/spy)\n*   [stubs](https://docs.cypress.io/api/commands/stub)\n*   [viewport changes](https://docs.cypress.io/api/commands/viewport)\n\nIn addition to a clean test slate, Cypress also believes in running tests in a clean browser context such that the application or component under test behaves consistently when run. This behavior is described as `testIsolation`.\n\nThe test isolation is a global configuration and can be overridden for end-to-end testing at the `describe` level with the [`testIsolation`](https://docs.cypress.io/guides/references/configuration#e2e) option.\n\n## Test Isolation in End-to-End Testing[​](#Test-Isolation-in-End-to-End-Testing \"Direct link to Test Isolation in End-to-End Testing\")\n\nCypress supports enabling or disabling test isolation in end-to-end testing to describe if a suite of tests should run in a clean browser context or not.\n\n### Test Isolation Enabled[​](#Test-Isolation-Enabled \"Direct link to Test Isolation Enabled\")\n\nWhen test isolation is enabled, Cypress resets the browser context _before_ each test by:\n\n*   clearing the dom state by visiting `about:blank`\n*   clearing [cookies](https://docs.cypress.io/api/cypress-api/cookies) in all domains\n*   clearing [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) in all domains\n*   clearing [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) in all domains\n\nBecause the test starts in a fresh browser context, you must re-visit your application and perform the series of interactions needed to build the dom and browser state for each test.\n\nAdditionally, the [`cy.session()`](https://docs.cypress.io/api/commands/session) command will inherit this configuration and will clear the page and current browser context when establishing a browser session. This is so tests can reliably pass when run standalone or in a randomized order.\n\n### Test Isolation Disabled[​](#Test-Isolation-Disabled \"Direct link to Test Isolation Disabled\")\n\nWhen test isolation is disabled, Cypress will not alter the browser context before the test starts. The page does not clear between tests and cookies, local storage and session storage will be available across tests in that suite. Additionally, the [`cy.session()`](https://docs.cypress.io/api/commands/session) command will only clear the current browser context when establishing the browser session - the current page is not cleared.\n\n### Quick Comparison[​](#Quick-Comparison \"Direct link to Quick Comparison\")\n\n| testIsolation | beforeEach test | cy.session() |\n| --- | --- | --- |\n| `true` | \\- clears page by visiting `about:blank`  <br>\\- clears cookies in all domains  <br>\\- local storage in all domains  <br>\\- session storage in all domains | \\- clears page by visiting `about:blank`  <br>\\- clears cookies in all domains  <br>\\- local storage in all domains  <br>\\- session storage in all domains |\n| `false` | does not alter the current browser context | \\- clears cookies in all domains  <br>\\- local storage in all domains  <br>\\- session storage in all domains |\n\n## Test Isolation in Component Testing[​](#Test-Isolation-in-Component-Testing \"Direct link to Test Isolation in Component Testing\")\n\nCypress does not support configuring the test isolation behavior in component testing.\n\nWhen running component tests, Cypress always resets the browser context _before_ each test by:\n\n*   unmounting the rendered component under test\n*   clearing [cookies](https://docs.cypress.io/api/cypress-api/cookies) in all domains\n*   clearing [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) in all domains\n*   clearing [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) in all domains\n\n## Test Isolation Trade-offs[​](#Test-Isolation-Trade-offs \"Direct link to Test Isolation Trade-offs\")\n\nIt is important to note that disabling test isolation may improve the overall performance of end-to-end tests, however, it can also cause state to \"leak\" between tests. This can make later tests dependent on the results of earlier tests, and potentially cause misleading test failures. It is important to be extremely mindful of how tests are written when using this mode, and ensure that tests continue to run independently of one another.\n\nThe best way to ensure your tests are independent is to add a `.only()` to your test and verify it can run successfully without the test before it.",
    "title": "Test Isolation | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/tooling/plugins-guide",
    "markdown": "# Plugins | Cypress Documentation\n\nPlugins enable you to tap into, modify, or extend the internal behavior of Cypress.\n\nNormally, as a user, all of your test code, your application, and Cypress commands are executed in the browser. But Cypress is also a Node process that plugins can use.\n\n> Plugins enable you to tap into the Node process running outside of the browser.\n\nPlugins are a \"seam\" for you to write your own custom code that executes during particular stages of the Cypress lifecycle.\n\ninfo\n\n**This is a brief overview**\n\nIf you want more details about how to write a plugin, we've written API docs that show you how to work with each plugin event.\n\nYou can [check out the API docs here](https://docs.cypress.io/api/plugins/writing-a-plugin).\n\n## Use Cases[​](#Use-Cases \"Direct link to Use Cases\")\n\n### Configuration[​](#Configuration \"Direct link to Configuration\")\n\nWith plugins, you can programmatically alter the resolved configuration and environment variables that come from the [Cypress configuration file](https://docs.cypress.io/guides/references/configuration), [`cypress.env.json`](https://docs.cypress.io/guides/guides/environment-variables#Option-2-cypressenvjson), the [command line](https://docs.cypress.io/guides/guides/command-line), or system environment variables.\n\nThis enables you to do things like:\n\n*   Use multiple environments with their own configurations\n*   Swap out environment variables based on an environment\n*   Read in configuration files using the built in `fs` lib\n*   Change the list of browsers used for testing\n*   Write your configuration in `yml`\n\nCheck out our [Configuration API docs](https://docs.cypress.io/api/plugins/configuration-api) which describe how to use this event.\n\n### Preprocessors[​](#Preprocessors \"Direct link to Preprocessors\")\n\nThe event `file:preprocessor` is used to customize how your test code is transpiled and sent to the browser. By default, Cypress handles ES2015+, TypeScript, and CoffeeScript, using webpack to package it for the browser.\n\nYou can use the `file:preprocessor` event to do things like:\n\n*   Add the latest ES\\* support.\n*   Write your test code in ClojureScript.\n*   Customize the Babel settings to add your own plugins.\n*   Customize the options for compiling TypeScript.\n*   Swap out webpack for Browserify or anything else.\n\nCheck out our [File Preprocessor API docs](https://docs.cypress.io/api/plugins/preprocessors-api) which describe how to use this event.\n\n### Run Lifecycle[​](#Run-Lifecycle \"Direct link to Run Lifecycle\")\n\nThe events [`before:run`](https://docs.cypress.io/api/plugins/before-run-api) and [`after:run`](https://docs.cypress.io/api/plugins/after-run-api) occur before and after a run, respectively.\n\nYou can use [`before:run`](https://docs.cypress.io/api/plugins/before-run-api) to do things like:\n\n*   Set up reporting on a run\n*   Start a timer for the run to time how long it takes\n\nYou can use [`after:run`](https://docs.cypress.io/api/plugins/after-run-api) to do things like:\n\n*   Finish up reporting on a run set up in `before:run`\n*   Stop the timer for the run set up in `before:run`\n\n### Spec Lifecycle[​](#Spec-Lifecycle \"Direct link to Spec Lifecycle\")\n\nThe events [`before:spec`](https://docs.cypress.io/api/plugins/before-spec-api) and [`after:spec`](https://docs.cypress.io/api/plugins/after-spec-api) run before and after a single spec is run, respectively.\n\nYou can use [`before:spec`](https://docs.cypress.io/api/plugins/before-spec-api) to do things like:\n\n*   Set up reporting on a spec running\n*   Start a timer for the spec to time how long it takes\n\nYou can use [`after:spec`](https://docs.cypress.io/api/plugins/after-spec-api) to do things like:\n\n*   Finish up reporting set up in `before:spec`\n*   Stop the timer for the spec set up in `before:spec`\n*   Delete the video recorded for the spec. This prevents it from taking time and computing resources for compressing and uploading the video. You can do this conditionally based on the results of the spec, such as if it passes (so videos for failing tests are preserved for debugging purposes).\n\nCheck out the [Before Spec API doc](https://docs.cypress.io/api/plugins/before-spec-api) and [After Spec API doc](https://docs.cypress.io/api/plugins/after-spec-api) which describe how to use these events.\n\n### Browser Launching[​](#Browser-Launching \"Direct link to Browser Launching\")\n\nThe event `before:browser:launch` can be used to modify the launch arguments for each particular browser.\n\nYou can use the `before:browser:launch` event to do things like:\n\n*   Load a Chrome extension\n*   Enable or disable experimental chrome features\n*   Control which Chrome components are loaded\n\nCheck out our [Browser Launch API docs](https://docs.cypress.io/api/plugins/browser-launch-api) which describe how to use this event.\n\n### Screenshot handling[​](#Screenshot-handling \"Direct link to Screenshot handling\")\n\nThe event `after:screenshot` is called after a screenshot is taken and saved to disk.\n\nYou can use the `after:screenshot` event to do things like:\n\n*   Save details about the screenshot\n*   Rename the screenshot\n*   Manipulate the screenshot image by resizing or cropping it\n\nCheck out our [After Screenshot API docs](https://docs.cypress.io/api/plugins/after-screenshot-api) which describe how to use this event.\n\n### cy.task[​](#cytask \"Direct link to cy.task\")\n\nThe event `task` is used in conjunction with the [`cy.task()`](https://docs.cypress.io/api/commands/task) command. It allows you to write arbitrary code in Node to accomplish tasks that aren't possible in the browser.\n\nYou can use the `task` event to do things like:\n\n*   Manipulating a database (seeding, reading, writing, etc.)\n*   Storing state in Node that you want persisted (since the driver is fully refreshed on visits)\n*   Performing parallel tasks (like making multiple http requests outside of Cypress)\n*   Running an external process (like spinning up a Webdriver instance of another browser like Safari or puppeteer)\n\n### Real World Example[​](#Real-World-Example \"Direct link to Real-World-Example\")\n\nThe [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) uses [tasks](https://docs.cypress.io/api/commands/task) to re-seed its database, and to filter/find test data for various testing scenarios.\n\ncaution\n\n⚠️ This code is part of the [setupNodeEvents](https://docs.cypress.io/guides/tooling/plugins-guide#Using-a-plugin) function and thus executes in the Node environment. You cannot call `Cypress` or `cy` commands in this function, but you do have the direct access to the file system and the rest of the operating system.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      on('task', {        async 'db:seed'() {          // seed database with test data          const { data } = await axios.post(`${testDataApiEndpoint}/seed`)          return data        },        // fetch test data from a database (MySQL, PostgreSQL, etc...)        'filter:database'(queryPayload) {          return queryDatabase(queryPayload, (data, attrs) =>            _.filter(data.results, attrs)          )        },        'find:database'(queryPayload) {          return queryDatabase(queryPayload, (data, attrs) =>            _.find(data.results, attrs)          )        },      })    },  },})\n```\n\nCheck out the [Real World App test suites](https://github.com/cypress-io/cypress-realworld-app/tree/develop/cypress/tests/ui) to see these tasks in action.\n\n## List of plugins[​](#List-of-plugins \"Direct link to List of plugins\")\n\nCypress maintains a curated list of plugins created by us and the community. You can `npm install` any of the plugins listed below:\n\n[Our curated list of Cypress plugins.](https://docs.cypress.io/plugins)\n\n## Installing plugins[​](#Installing-plugins \"Direct link to Installing plugins\")\n\nPlugins from our [official list](https://docs.cypress.io/plugins) are npm modules. This enables them to be versioned and updated separately without needing to update Cypress itself.\n\nYou can install any published plugin using npm:\n\n```\nnpm install <plugin name> --save-dev\n```\n\n## Using a plugin[​](#Using-a-plugin \"Direct link to Using a plugin\")\n\nThere are two ways to use a plugin in Cypress:\n\n1.  As of Cypress version 10.0.0, you will need to add your plugin to the [`setupNodeEvents`](https://docs.cypress.io/guides/references/configuration#setupNodeEvents) function in the [Cypress configuration](https://docs.cypress.io/guides/references/configuration).\n2.  If you're using an older version of Cypress, you can add your plugin to the (deprecated) [plugins file](https://docs.cypress.io/guides/references/legacy-configuration#Plugins).\n\nHere's an example of what this might look like:\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      // bind to the event we care about      on('<event>', (arg1, arg2) => {        // plugin stuff here      })    },  },})\n```\n\nFor information on writing plugins, please check out our [Writing a Plugin](https://docs.cypress.io/api/plugins/writing-a-plugin) guide.",
    "title": "Plugins | Cypress Documentation",
    "description": "Plugins enable you to tap into, modify, or extend the internal behavior of",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/tooling/typescript-support",
    "markdown": "# TypeScript | Cypress Documentation\n\nCypress ships with [official type declarations](https://github.com/cypress-io/cypress/tree/develop/cli/types) for [TypeScript](https://www.typescriptlang.org/). This allows you to write your tests in TypeScript.\n\n### Install TypeScript[​](#Install-TypeScript \"Direct link to Install TypeScript\")\n\nTo use TypeScript with Cypress, you will need TypeScript 4.0+. If you do not already have TypeScript installed as a part of your framework, you will need to install it:\n\n*   npm\n*   yarn\n\n```\nnpm install typescript --save-dev\n```\n\n### Configure tsconfig.json[​](#Configure-tsconfigjson \"Direct link to Configure tsconfig.json\")\n\nWe recommend creating a [`tsconfig.json`](http://www.typescriptlang.org/docs/handbook/tsconfig-json.html) inside your [`cypress` folder](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Folder-structure) with the following configuration:\n\n```\n{  \"compilerOptions\": {    \"target\": \"es5\",    \"lib\": [\"es5\", \"dom\"],    \"types\": [\"cypress\", \"node\"]  },  \"include\": [\"**/*.ts\"]}\n```\n\nThe `\"types\"` will tell the TypeScript compiler to only include type definitions from Cypress. This will address instances where the project also uses `@types/chai` or `@types/jquery`. Since [Chai](https://docs.cypress.io/guides/references/bundled-libraries#Chai) and [jQuery](https://docs.cypress.io/guides/references/bundled-libraries#Other-Library-Utilities) are namespaces (globals), incompatible versions will cause the package manager (`yarn` or `npm`) to nest and include multiple definitions and cause conflicts.\n\ncaution\n\nYou may have to restart your IDE's TypeScript server if the setup above does not appear to work. For example:\n\nVS Code (within a .ts or .js file):\n\n*   Open the command palette (Mac: `cmd+shift+p`, Windows: `ctrl+shift+p`)\n*   Type \"restart ts\" and select the \"TypeScript: Restart TS server.\" option\n\nIf that does not work, try restarting the IDE.\n\n### Processing your Cypress configuration and plugins[​](#Processing-your-Cypress-configuration-and-plugins \"Direct link to Processing your Cypress configuration and plugins\")\n\nCypress needs to be able to transpile your Cypress configuration and plugins written in TypeScript in order to make them executable within Cypress's Node.js runtime. To do this, Cypress will attempt to read the user's TypeScript and project configuration to apply the correct TypeScript loader to Cypress's Node.js runtime.\n\nIf your project is an `ESM` package (short for [ECMAScript Module](https://nodejs.org/api/esm.html#modules-ecmascript-modules)), Cypress attempts to apply the [ts-node/esm](https://github.com/TypeStrong/ts-node?tab=readme-ov-file#esm) Node.js loader to resolve the Cypress configuration and plugins. `ESM` is determined by Cypress if you have the `type: \"module\"` key-value pair present inside your project's `package.json`.\n\nOtherwise, regular [ts-node](https://github.com/TypeStrong/ts-node?tab=readme-ov-file#node-flags-and-other-tools) is required into Cypress's Node.js runtime. Since Node.js by itself can only interpret CommonJS files, Cypress attempts to make your TypeScript configuration compatible with Cypress' Node.js runtime. To do this, Cypress overrides the following configuration values found inside your project's `tsconfig.json`:\n\n```\n{  \"module\": \"commonjs\",  \"moduleResolution\": \"node\",  \"preserveValueImports\": false}\n```\n\nThis does not have an impact on your project or its TypeScript configuration settings. This override only happens within the context of the Cypress runtime.\n\n### Clashing Types with Jest[​](#Clashing-Types-with-Jest \"Direct link to Clashing Types with Jest\")\n\nYou may want to consider configuring your app with separate `tsconfig.json` to solve [clashing types with jest](https://docs.cypress.io/guides/tooling/typescript-support#Clashing-types-with-Jest). You will need to exclude `cypress.config.ts`, `cypress`, `node_modules` in your root `tsconfig.json` file.\n\n```\n{  \"exclude\": [\"cypress.config.ts\", \"cypress\", \"node_modules\"]}\n```\n\n### Types for Custom Commands[​](#Types-for-Custom-Commands \"Direct link to Types for Custom Commands\")\n\nWhen adding [custom commands](https://docs.cypress.io/api/cypress-api/custom-commands) to the `cy` object, you can manually add their types to avoid TypeScript errors.\n\nFor example if you add the command `cy.dataCy` into your [supportFile](https://docs.cypress.io/guides/references/configuration#Testing-Type-Specific-Options) like this:\n\n```\n// cypress/support/index.tsCypress.Commands.add('dataCy', (value) => {  return cy.get(`[data-cy=${value}]`)})\n```\n\nThen you can add the `dataCy` command to the global Cypress Chainable interface (so called because commands are chained together).\n\n```\n// cypress/support/index.tsdeclare global {  namespace Cypress {    interface Chainable {      /**       * Custom command to select DOM element by data-cy attribute.       * @example cy.dataCy('greeting')       */      dataCy(value: string): Chainable<JQuery<HTMLElement>>    }  }}\n```\n\ninfo\n\nA nice detailed JSDoc comment above the method type will be really appreciated by any users of your custom command.\n\ninfo\n\nTypes of all the parameters taken by the implementation callback are inferred automatically based on the declared interface. Thus, in the example above, the `value` will be of type `string` implicitly.\n\nIn your specs, you can now use the custom command as expected\n\n*   End-to-End Test\n*   Component Test\n\n```\nit('works', () => {  // from your cypress/e2e/spec.cy.ts  cy.visit('/')  // IntelliSense and TS compiler should  // not complain about unknown method  cy.dataCy('greeting')})\n```\n\n#### Adding child or dual commands[​](#Adding-child-or-dual-commands \"Direct link to Adding child or dual commands\")\n\nWhen you add a custom command with `prevSubject`, Cypress will infer the subject type automatically based on the specified `prevSubject`.\n\n```\n// cypress/support/index.tsdeclare global {  namespace Cypress {    interface Chainable {      /**       * Custom command to type a few random words into input elements       * @param count=3       * @example cy.get('input').typeRandomWords()       */      typeRandomWords(        count?: number,        options?: Partial<TypeOptions>      ): Chainable<JQuery<HTMLElement>>    }  }}\n```\n\n```\n// cypress/support/index.tsCypress.Commands.add(  'typeRandomWords',  { prevSubject: 'element' },  (subject /* :JQuery<HTMLElement> */, count = 3, options?) => {    return cy.wrap(subject).type(generateRandomWords(count), options)  })\n```\n\n#### Overwriting child or dual commands[​](#Overwriting-child-or-dual-commands \"Direct link to Overwriting child or dual commands\")\n\nWhen overwriting either built-in or custom commands which make use of `prevSubject`, you must specify generic parameters to help the type-checker to understand the type of the `prevSubject`.\n\n```\ninterface TypeOptions extends Cypress.TypeOptions {  sensitive: boolean}Cypress.Commands.overwrite<'type', 'element'>(  'type',  (originalFn, element, text, options?: Partial<TypeOptions>) => {    if (options && options.sensitive) {      // turn off original log      options.log = false      // create our own log with masked message      Cypress.log({        $el: element,        name: 'type',        message: '*'.repeat(text.length),      })    }    return originalFn(element, text, options)  })\n```\n\nAs you can see there are generic parameters `<'type', 'element'>` are used:\n\n1.  The first parameter is the command name, equal to first parameter passed to `Cypress.Commands.overwrite`.\n2.  The second parameter is the type of the `prevSubject` that is used by the original command. Possible values:\n    *   'element' infers it as `JQuery<HTMLElement>`\n    *   'window' infers it as `Window`\n    *   'document' infers it as `Document`\n    *   'optional' infers it as `unknown`\n\n#### Examples:[​](#Examples \"Direct link to Examples:\")\n\n*   See [Adding Custom Commands (TS)](https://github.com/cypress-io/cypress-example-recipes#fundamentals) example recipe.\n*   Example project [cypress-example-todomvc custom commands](https://github.com/cypress-io/cypress-example-todomvc#custom-commands) uses custom commands to avoid boilerplate code.\n\n### Types for custom assertions[​](#Types-for-custom-assertions \"Direct link to Types for custom assertions\")\n\nIf you extend Cypress assertions, you can extend the assertion types to make the TypeScript compiler understand the new methods. See the [Recipe: Adding Chai Assertions](https://docs.cypress.io/examples/recipes#Fundamentals) for instructions.\n\n### Types for plugins[​](#Types-for-plugins \"Direct link to Types for plugins\")\n\ncaution\n\n**Deprecated**\n\nConfiguring plugins via `cypress/plugins/index.js` is no longer supported as of Cypress version 10.0.0.\n\nWe recommend that you update your configuration. Please see the [plugins guide](https://docs.cypress.io/guides/tooling/plugins-guide) and the [migration guide](https://docs.cypress.io/guides/references/migration-guide) for more information on how to update your configuration.\n\nYou can utilize Cypress's type declarations in your [plugins file](https://docs.cypress.io/guides/tooling/plugins-guide) by annotating it like the following:\n\n```\n// cypress/plugins/index.ts/** * @type {Cypress.PluginConfig} */module.exports = (on, config) => {}\n```\n\n### Using an External Typings File[​](#Using-an-External-Typings-File \"Direct link to Using an External Typings File\")\n\nYou might find it easier to organize your types by moving them from the support file into an external [declaration (\\*.d.ts) file](https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html). To do so, create a new file, like _cypress.d.ts_, and cut the types for your custom commands/assertions from the _support_ file and into the new file. Below is an example of moving the custom `cy.mount` typings that come by default with a component testing app into a root level _cypress.d.ts_ file.\n\n*   cypress.d.ts\n\n```\nimport { mount } from 'cypress/react'// Augment the Cypress namespace to include type definitions for// your custom command.// Alternatively, can be defined in cypress/support/component.d.ts// with a <reference path=\"./component\" /> at the top of your spec.declare global {  namespace Cypress {    interface Chainable {      mount: typeof mount    }  }}\n```\n\nYou might need to include the _\\*.d.ts_ in the include options in any _tsconfig.json_ files in your project for TypeScript to pick up the new types:\n\n*   tsconfig.json\n\n```\n\"include\": [  \"src\",  \"./cypress.d.ts\"]\n```\n\n*   ./cypress/tsconfig.json\n\n```\n\"include\": [  \"**/*.ts\",  \"../cypress.d.ts\"]\n```\n\n### Set up your dev environment[​](#Set-up-your-dev-environment \"Direct link to Set up your dev environment\")\n\nPlease refer to your code editor in [TypeScript's Editor Support doc](https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support) and follow the instructions for your IDE to get TypeScript support and [intelligent code completion](https://docs.cypress.io/guides/tooling/IDE-integration#Intelligent-Code-Completion) configured in your developer environment before continuing. TypeScript support is built in for [Visual Studio Code](https://code.visualstudio.com/), [Visual Studio](https://www.visualstudio.com/), and [WebStorm](https://www.jetbrains.com/webstorm/) - all other editors require extra setup.\n\n### Clashing types with Jest[​](#Clashing-types-with-Jest \"Direct link to Clashing types with Jest\")\n\nIf you are using both Jest and Cypress in the same project, the TypeScript types registered globally by the two test runners can clash. For example, both Jest and Cypress provide the clashing types for the `describe` and `it` functions. Both Jest and Expect (bundled inside Cypress) provide the clashing types for the `expect` assertion, etc. There are two solutions to disentangle the types:\n\n1.  Configure a separate `tsconfig.json` for E2E tests. See our example [cypress-io/cypress-and-jest-typescript-example](https://github.com/cypress-io/cypress-and-jest-typescript-example) repo.\n2.  Remove Cypress global variables by using npm package [local-cypress](https://github.com/bahmutov/local-cypress). Read the blog post [How to Avoid Using Global Cypress Variables](https://glebbahmutov.com/blog/local-cypress/) for details.\n\n## History[​](#History \"Direct link to History\")\n\n| Version | Changes |\n| --- | --- |\n| [13.0.0](https://docs.cypress.io/guides/references/changelog#13-0-0) | Raised minimum required TypeScript version from 3.4+ to 4.0+ |\n| [10.0.0](https://docs.cypress.io/guides/references/changelog#10-0-0) | Update guide to cover TypeScript setup for component testing |\n| [5.0.0](https://docs.cypress.io/guides/references/changelog#5-0-0) | Raised minimum required TypeScript version from 2.9+ to 3.4+ |\n| [4.4.0](https://docs.cypress.io/guides/references/changelog#4-4-0) | Added support for TypeScript without needing your own transpilation through preprocessors. |\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [IDE Integration](https://docs.cypress.io/guides/tooling/IDE-integration)",
    "title": "TypeScript | Cypress Documentation",
    "description": "Cypress ships with",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/tooling/reporters",
    "markdown": "# Reporters | Cypress Documentation\n\nBecause Cypress is built on top of Mocha, that means any reporter built for Mocha can be used with Cypress. Here is a list of built in Mocha reporters.\n\n*   [Mocha's built-in reporters](https://mochajs.org/#reporters)\n\nBy default, Cypress uses the `spec` reporter to output information to `STDOUT`.\n\nWe've also added the two most common 3rd party reporters for Mocha. These are built into Cypress and you can use them without installing anything.\n\n*   [`teamcity`](https://github.com/cypress-io/mocha-teamcity-reporter)\n*   [`junit`](https://github.com/michaelleeallen/mocha-junit-reporter)\n\nFinally, we support creating your own custom reporters or using any kind of 3rd party reporter.\n\n## Custom reporter[​](#Custom-reporter \"Direct link to Custom reporter\")\n\n### Installed locally[​](#Installed-locally \"Direct link to Installed locally\")\n\nYou can load [custom Mocha reporters](https://mochajs.org/api/tutorial-custom-reporter.html) through a relative or absolute path. These can be specified in your Cypress configuration file or via the [command line](https://docs.cypress.io/guides/guides/command-line).\n\nFor example, if you have the following directory structure:\n\n```\n> my-project  > cypress  > src  > reporters    - custom.js\n```\n\nYou would specify the path to your custom reporter in either of the ways below.\n\n#### Cypress configuration[​](#Cypress-configuration \"Direct link to Cypress configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  reporter: 'reporters/custom.js',})\n```\n\n#### Command Line[​](#Command-Line \"Direct link to Command Line\")\n\n```\ncypress run --reporter reporters/custom.js\n```\n\n### Installed via npm[​](#Installed-via-npm \"Direct link to Installed via npm\")\n\nWhen using custom reporters via npm, specify the package name.\n\n#### Cypress configuration[​](#Cypress-configuration-1 \"Direct link to Cypress configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  reporter: 'mochawesome',})\n```\n\n#### Command line[​](#Command-line \"Direct link to Command line\")\n\n```\ncypress run --reporter mochawesome\n```\n\n## Reporter Options[​](#Reporter-Options \"Direct link to Reporter Options\")\n\nSome reporters accept options that customize their behavior. These can be specified in your Cypress configuration or via [command line](https://docs.cypress.io/guides/guides/command-line) options.\n\nReporter options differ depending on the reporter (and may not be supported at all). Refer to the documentation for the reporter you are using for details on which options are supported.\n\nThe below configuration will output the JUnit report to `STDOUT` and save it into an XML file.\n\n#### Cypress configuration[​](#Cypress-configuration-2 \"Direct link to Cypress configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  reporter: 'junit',  reporterOptions: {    mochaFile: 'results/my-test-output.xml',    toConsole: true,  },})\n```\n\n#### Command line[​](#Command-line-1 \"Direct link to Command line\")\n\n```\ncypress run --reporter junit \\  --reporter-options \"mochaFile=results/my-test-output.xml,toConsole=true\"\n```\n\n## Merging reports across spec files[​](#Merging-reports-across-spec-files \"Direct link to Merging reports across spec files\")\n\nEach spec file is processed completely separately during each `cypress run` execution. Thus each spec run _overwrites_ the previous report file. To preserve unique reports for each specfile, use the `[hash]` in the `mochaFile` filename.\n\nThe following configuration will create separate XML files in the `results` folder. You can then merge the reported output in a separate step using a 3rd party tool. For example, for the [Mochawesome](https://github.com/adamgruber/mochawesome) reporter, you can use the [mochawesome-merge](https://github.com/antontelesh/mochawesome-merge) tool.\n\n#### Cypress configuration[​](#Cypress-configuration-3 \"Direct link to Cypress configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  reporter: 'junit',  reporterOptions: {    mochaFile: 'results/my-test-output-[hash].xml',  },})\n```\n\n#### Command line[​](#Command-line-2 \"Direct link to Command line\")\n\n```\ncypress run --reporter junit \\  --reporter-options \"mochaFile=results/my-test-output-[hash].xml\"\n```\n\n## Multiple reporters[​](#Multiple-reporters \"Direct link to Multiple reporters\")\n\nOftentimes we see users wanting the ability to use multiple reporters. When running in CI, you might want to generate a report for `junit` and perhaps a `json` report. This is great, but by setting this reporter you won't receive any additional feedback while the tests are running!\n\nThe solution here is to use multiple reporters. You will have the benefit of both worlds.\n\nWe suggest using the npm module:\n\n[https://github.com/you54f/cypress-multi-reporters](https://github.com/you54f/cypress-multi-reporters)\n\nWe use multiple reporters for every single one of our internal projects.\n\nThe below examples were implemented in\n\n[https://github.com/cypress-io/cypress-example-circleci-orb](https://github.com/cypress-io/cypress-example-circleci-orb)\n\n.\n\n### Examples[​](#Examples \"Direct link to Examples\")\n\n#### Spec to `STDOUT`, save JUnit XML files[​](#Spec-to-STDOUT-save-JUnit-XML-files \"Direct link to Spec-to-STDOUT-save-JUnit-XML-files\")\n\nWe want to output a `spec` report to `STDOUT`, while saving a JUnit XML file for each spec file.\n\nWe need to install additional dependencies:\n\n*   [`cypress-multi-reporters`](https://github.com/you54f/cypress-multi-reporters): enables multiple reporters\n*   [`mocha-junit-reporter`](https://github.com/michaelleeallen/mocha-junit-reporter) the actual junit reporter, as we cannot use the `junit` reporter that comes with Cypress\n\n```\nnpm install cypress-multi-reporters mocha-junit-reporter --save-dev\n```\n\nSpecify your reporter and reporterOptions in your Cypress configuration or via the [command line](https://docs.cypress.io/guides/guides/command-line).\n\n#### Cypress configuration[​](#Cypress-configuration-4 \"Direct link to Cypress configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  reporter: 'cypress-multi-reporters',  reporterOptions: {    configFile: 'reporter-config.json',  },})\n```\n\n#### Command line[​](#Command-line-3 \"Direct link to Command line\")\n\n```\ncypress run --reporter cypress-multi-reporters \\  --reporter-options configFile=reporter-config.json\n```\n\nThen add the separate `reporter-config.json` file (defined in your configuration) to enable `spec` and `junit` reporters and direct the `junit` reporter to save separate XML files.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  reporterEnabled: 'spec, mocha-junit-reporter',  mochaJunitReporterReporterOptions: {    mochaFile: 'cypress/results/results-[hash].xml',  },})\n```\n\nWe recommend deleting all files from the `cypress/results` folder before running this command, since each run will output new XML files. For example, you can add the npm script commands below to your `package.json` then call `npm run report`.\n\n```\n{  \"scripts\": {    \"delete:reports\": \"rm cypress/results/* || true\",    \"prereport\": \"npm run delete:reports\",    \"report\": \"cypress run --reporter cypress-multi-reporters --reporter-options configFile=reporter-config.json\"  }}\n```\n\nIn case you want to combine generated XML files into a single one, [junit-report-merger](https://www.npmjs.com/package/junit-report-merger) can be added. For example, to combine all files into `cypress/results/combined-report.xml` the `combine:reports` script can be added.\n\n```\n{  \"scripts\": {    \"delete:reports\": \"rm cypress/results/* || true\",    \"combine:reports\": \"jrm cypress/results/combined-report.xml \\\"cypress/results/*.xml\\\"\",    \"prereport\": \"npm run delete:reports\",    \"report\": \"cypress run --reporter cypress-multi-reporters --reporter-options configFile=reporter-config.json\",    \"postreport\": \"npm run combine:reports\"  }}\n```\n\n#### Spec to `STDOUT`, produce a combined Mochawesome JSON file[​](#Spec-to-STDOUT-produce-a-combined-Mochawesome-JSON-file \"Direct link to Spec-to-STDOUT-produce-a-combined-Mochawesome-JSON-file\")\n\nThis example is shown in the branch `spec-and-single-mochawesome-json` in [https://github.com/cypress-io/cypress-example-circleci-orb](https://github.com/cypress-io/cypress-example-circleci-orb). We want to output a \"spec\" report to `STDOUT`, save an individual Mochawesome JSON file per test file, and then combine all JSON reports into a single report.\n\nWe need to install some additional dependencies.\n\n```\nnpm install mochawesome mochawesome-merge mochawesome-report-generator --save-dev\n```\n\nWe need to configure the reporter in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration) to skip the HTML report generation and save each individual JSON file in the `cypress/results` folder.\n\n#### Cypress configuration[​](#Cypress-configuration-5 \"Direct link to Cypress configuration\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  reporter: 'mochawesome',  reporterOptions: {    reportDir: 'cypress/results',    overwrite: false,    html: false,    json: true,  },})\n```\n\n#### Command line[​](#Command-line-4 \"Direct link to Command line\")\n\n```\ncypress run --reporter mochawesome \\  --reporter-options reportDir=\"cypress/results\",overwrite=false,html=false,json=true\n```\n\nOur run will generate files `cypress/results/mochawesome.json, cypress/results/mochawesome_001.json, ...`. Then we can combine them using the [mochawesome-merge](https://github.com/antontelesh/mochawesome-merge) utility.\n\n```\nnpx mochawesome-merge \"cypress/results/*.json\" > mochawesome.json\n```\n\nWe can now generate a combined HTML report from the `mochawesome.json` file using the [https://github.com/adamgruber/mochawesome-report-generator](https://github.com/adamgruber/mochawesome-report-generator):\n\n```\nnpx marge mochawesome.json\n```\n\nIt generates the beautiful standalone HTML report file `mochawesome-report/mochawesome.html` shown below. As you can see all test results, timing information, and even test bodies are included.\n\n![Mochawesome HTML report](https://docs.cypress.io/img/guides/reporters/mochawesome-report.png)\n\nFor more information, see [Integrating Mochawesome reporter with Cypress's](http://antontelesh.github.io/testing/2019/02/04/mochawesome-merge.html)\n\n## History[​](#History \"Direct link to History\")\n\n| Version | Changes |\n| --- | --- |\n| [4.4.2](https://docs.cypress.io/guides/references/changelog) | Custom Mocha reporters updated to use the version of Mocha bundled with Cypress. No need to install `mocha` separately to use custom reporters. |",
    "title": "Reporters | Cypress Documentation",
    "description": "Because Cypress is built on top of Mocha, that means any reporter built for",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/core-concepts/interacting-with-elements",
    "markdown": "# Interacting with Elements | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How Cypress calculates visibility\n*   How Cypress ensures elements are actionable\n*   How Cypress deals with animating elements\n*   How you can bypass these checks and force events\n\n## Actionability[​](#Actionability \"Direct link to Actionability\")\n\nSome commands in Cypress are for interacting with the DOM such as:\n\n*   [`.click()`](https://docs.cypress.io/api/commands/click)\n*   [`.dblclick()`](https://docs.cypress.io/api/commands/dblclick)\n*   [`.rightclick()`](https://docs.cypress.io/api/commands/rightclick)\n*   [`.type()`](https://docs.cypress.io/api/commands/type)\n*   [`.clear()`](https://docs.cypress.io/api/commands/clear)\n*   [`.check()`](https://docs.cypress.io/api/commands/check)\n*   [`.uncheck()`](https://docs.cypress.io/api/commands/uncheck)\n*   [`.select()`](https://docs.cypress.io/api/commands/select)\n*   [`.trigger()`](https://docs.cypress.io/api/commands/trigger)\n*   [`.selectFile()`](https://docs.cypress.io/api/commands/selectfile)\n\nWe call these \"action commands.\" These actions simulate a user interacting with your application. Under the hood, Cypress fires the events a browser would fire thus causing your application's event bindings to fire.\n\nPrior to issuing any of the commands, we check the current state of the DOM and take some actions to ensure the DOM element is \"ready\" to receive the action.\n\nCypress will watch the DOM - re-running the queries that yielded the current subject - until an element passes all of these checks for the duration of the [`defaultCommandTimeout`](https://docs.cypress.io/guides/references/configuration#Timeouts) (described in depth in the [Implicit Assertions](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Implicit-Assertions) core concept guide).\n\n**_Checks and Actions Performed_**\n\n*   [Scroll the element into view.](#Scrolling)\n*   [Ensure the element is not hidden.](#Visibility)\n*   [Ensure the element is not disabled.](#Disability)\n*   [Ensure the element is not detached.](#Detached)\n*   [Ensure the element is not readonly.](#Readonly)\n*   [Ensure the element is not animating.](#Animations)\n*   [Ensure the element is not covered.](#Covering)\n*   [Scroll the page if still covered by an element with fixed position.](#Scrolling)\n*   [Fire the event at the desired coordinates.](#Coordinates)\n\nWhenever Cypress cannot interact with an element, it could fail at any of the above steps. You will usually get an error explaining why the element was not found to be actionable.\n\n### Visibility[​](#Visibility \"Direct link to Visibility\")\n\nCypress checks a lot of things to determine an element's visibility. The following calculations factor in CSS translations and transforms.\n\n#### An element is considered hidden if:[​](#An-element-is-considered-hidden-if \"Direct link to An element is considered hidden if:\")\n\n*   Its `width` or `height` is `0`.\n*   Its CSS property (or ancestors) is `visibility: hidden`.\n*   Its CSS property (or ancestors) is `display: none`.\n*   Its CSS property is `position: fixed` and it's offscreen or covered up.\n*   Any of its ancestors **hides overflow**\\*\n    *   AND that ancestor has a `width` or `height` of `0`\n    *   AND an element between that ancestor and the element is `position: absolute`\n*   Any of its ancestors **hides overflow**\\*\n    *   AND that ancestor or an ancestor between it and that ancestor is its offset parent\n    *   AND it is positioned outside that ancestor's bounds\n*   Any of its ancestors **hides overflow**\\*\n    *   AND the element is `position: relative`\n    *   AND it is positioned outside that ancestor's bounds\n\n\\***hides overflow** means it has `overflow: hidden`, `overflow-x: hidden`, `overflow-y: hidden`, `overflow: scroll`, or `overflow: auto`\n\ninfo\n\n**Opacity**\n\nElements where the CSS property (or ancestors) is `opacity: 0` are considered hidden when [asserting on the element's visibility directly](https://docs.cypress.io/guides/references/assertions#Visibility).\n\nHowever elements where the CSS property (or ancestors) is `opacity: 0` are considered actionable and any commands used to interact with the hidden element will perform the action.\n\n### Disability[​](#Disability \"Direct link to Disability\")\n\nCypress checks whether the `disabled` property is `true` on a [form control](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled) element, such as `button` or `input`. Setting a `disabled` attribute on other elements will have no effect on a user's ability to interact with them, and won't impact Cypress actionability checks.\n\n### Detached[​](#Detached \"Direct link to Detached\")\n\nCypress checks whether an element you are making assertions on is still within the `document` of the application under test.\n\nWhen many applications rerender the DOM, they actually remove the DOM element and insert a new DOM element in its place with the newly change attributes. This is why it's important not to chain _action commands_ together - cypress can re-run queries to locate the fresh element, but it will [never re-run commands](https://docs.cypress.io/guides/core-concepts/retry-ability).\n\n### Readonly[​](#Readonly \"Direct link to Readonly\")\n\nCypress checks whether an element's `readonly` property is set during [.type()](https://docs.cypress.io/api/commands/type).\n\n### Animations[​](#Animations \"Direct link to Animations\")\n\nCypress will automatically determine if an element is animating and wait until it stops.\n\nTo calculate whether an element is animating we take a sample of the last positions it was at and calculate the element's slope. You might remember this from 8th grade algebra. 😉\n\nTo calculate whether an element is animating we check the current and previous positions of the element itself. If the distance exceeds the [`animationDistanceThreshold`](https://docs.cypress.io/guides/references/configuration#Actionability), then we consider the element to be animating.\n\nWhen coming up with this value, we did a few experiments to find a speed that \"feels\" too fast for a user to interact with. You can always [increase or decrease this threshold](https://docs.cypress.io/guides/references/configuration#Actionability).\n\nYou can also turn off our checks for animations with the configuration option [`waitForAnimations`](https://docs.cypress.io/guides/references/configuration#Actionability).\n\n### Covering[​](#Covering \"Direct link to Covering\")\n\nWe also ensure that the element we're attempting to interact with isn't covered by a parent element.\n\nFor instance, an element could pass all of the previous checks, but a giant dialog could be covering the entire screen making interacting with the element impossible for any real user.\n\ninfo\n\nWhen checking to see if the element is covered we always check its center coordinates.\n\nIf a _child_ of the element is covering it - that's okay. In fact we'll automatically issue the events we fire to that child.\n\nImagine you have a button:\n\n```\n<button>  <i class=\"fa fa-check\">  <span>Submit</span></button>\n```\n\nOftentimes either the `<i>` or `<span>` element is covering the exact coordinate we're attempting to interact with. In those cases, the event fires on the child. We even note this for you in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log).\n\n### Scrolling[​](#Scrolling \"Direct link to Scrolling\")\n\nBefore interacting with an element, we will _always_ scroll it into view (including any of its parent containers). Even if the element was visible without scrolling, we perform the scrolling algorithm in order to reproduce the same behavior every time the command is run.\n\ninfo\n\nThis scrolling logic only applies to [commands that are actionable above](#Actionability). **We do not scroll elements** into view when using DOM commands such as [cy.get()](https://docs.cypress.io/api/commands/get) or [.find()](https://docs.cypress.io/api/commands/find).\n\nBy default, the scrolling algorithm works by scrolling the top, leftmost point of the element we issued the command on to the top, leftmost scrollable point of its scrollable container.\n\nAfter scrolling the element, if we determine that it is still being covered up, we will continue to scroll and \"nudge\" the page until it becomes visible. This most frequently happens when you have `position: fixed` or `position: sticky` navigation elements which are fixed to the top of the page.\n\nOur algorithm _should_ always be able to scroll until the element is not covered.\n\nTo change the position in the viewport to where we scroll an element, you can use the [`scrollBehavior`](https://docs.cypress.io/guides/references/configuration#Actionability) configuration option. This can be useful if the element is covered up when aligned to the top of the viewport, or if you just prefer the element to be centered during scrolling of action commands. Accepted values are `'center'`, `'top'`, `'bottom'`, `'nearest'`, and `false`, with `false` disabling scrolling altogether.\n\n### Coordinates[​](#Coordinates \"Direct link to Coordinates\")\n\nAfter we verify the element is actionable, Cypress will then fire all of the appropriate events and corresponding default actions. Usually these events' coordinates are fired at the center of the element, but most commands enable you to change the position it's fired to.\n\n```\ncy.get('button').click({ position: 'topLeft' })\n```\n\nThe coordinates we fired the event at will generally be available when clicking the command in the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log).\n\n![Event coordinates](https://docs.cypress.io/img/guides/core-concepts/coords.png)\n\nAdditionally we'll display a red \"hitbox\" - which is a dot indicating the coordinates of the event.\n\n![Hitbox](https://docs.cypress.io/img/guides/core-concepts/hitbox.png)\n\n## Debugging[​](#Debugging \"Direct link to Debugging\")\n\nIt can be difficult to debug problems when elements are not considered actionable by Cypress.\n\nAlthough you _should_ see a nice error message, nothing beats visually inspecting and poking at the DOM yourself to understand the reason why.\n\nWhen you use the [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) to hover over a command, you'll notice that we will always scroll the element the command was applied to into view. Please note that this is _NOT_ using the same algorithms that we described above.\n\nIn fact we only ever scroll elements into view when actionable commands are running using the above algorithms. We _do not_ scroll elements into view on regular DOM queries like [`cy.get()`](https://docs.cypress.io/api/commands/get) or [`.find()`](https://docs.cypress.io/api/commands/find).\n\nThe reason we scroll an element into view when hovering over a snapshot is to help you to see which element(s) were found by that corresponding command. It's a purely visual feature and does not necessarily reflect what your page looked like when the command ran.\n\nIn other words, you cannot get a correct visual representation of what Cypress \"saw\" when looking at a previous snapshot.\n\nThe only way for you to \"see\" and debug why Cypress thought an element was not visible is to use a `debugger` statement.\n\nWe recommend placing `debugger` or using the [`.debug()`](https://docs.cypress.io/api/commands/debug) command directly BEFORE the action.\n\nMake sure your Developer Tools are open and you can get pretty close to \"seeing\" the calculations Cypress is performing.\n\nYou can also [bind to Events](https://docs.cypress.io/api/cypress-api/catalog-of-events) that Cypress fires as it's working with your element. Using a debugger with these events will give you a much lower level view into how Cypress works.\n\n```\n// break on a debugger before the action commandcy.get('button').debug().click()\n```\n\n## Forcing[​](#Forcing \"Direct link to Forcing\")\n\nWhile the above checks are super helpful at finding situations that would prevent your users from interacting with elements - sometimes they can get in the way!\n\nSometimes it's not worth trying to \"act like a user\" to get a robot to do the exact steps a user would to interact with an element.\n\nImagine you have a nested navigation structure where the user must hover over and move the mouse in a very specific pattern to reach the desired link.\n\nIs this worth trying to replicate when you're testing?\n\nMaybe not! For these scenarios, we give you an escape hatch to bypass all of the checks above and force events to happen!\n\nYou can pass `{ force: true }` to most action commands.\n\n```\n// force the click and all subsequent events// to fire even if this element isn't considered 'actionable'cy.get('button').click({ force: true })\n```\n\ninfo\n\n**What's the difference?**\n\nWhen you force an event to happen we will:\n\n*   Continue to perform all default actions\n*   Forcibly fire the event at the element\n\nWe will NOT perform these:\n\n*   Scroll the element into view\n*   Ensure it is visible\n*   Ensure it is not disabled\n*   Ensure it is not detached\n*   Ensure it is not readonly\n*   Ensure it is not animating\n*   Ensure it is not covered\n*   Fire the event at a descendent\n\nIn summary, `{ force: true }` skips the checks, and it will always fire the event at the desired element.\n\ncaution\n\n**force `.select()` disabled options**\n\nPassing `{ force: true }` to [.select()](https://docs.cypress.io/api/commands/select) will not override the actionability checks for selecting a disabled `<option>` or an option within a disabled `<optgroup>`. See [this issue](https://github.com/cypress-io/cypress/issues/107) for more detail.",
    "title": "Interacting with Elements | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/core-concepts/retry-ability",
    "markdown": "# Retry-ability | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How Cypress retries commands and assertions\n*   When commands are retried and when they are not\n*   How to address some situations of flaky tests\n\nA core feature of Cypress that assists with testing dynamic web applications is retry-ability. Like a good transmission in a car, it usually works without you noticing it. But understanding how it works will help you write faster tests with fewer run-time surprises.\n\ninfo\n\n**Test Retries**\n\nIf you are looking to retry tests a configured number of times when the test fails, check out our guide on [Test Retries](https://docs.cypress.io/guides/guides/test-retries).\n\n## Commands, Queries and Assertions[​](#Commands-Queries-and-Assertions \"Direct link to Commands, Queries and Assertions\")\n\nWhile all methods you chain off of `cy` in your Cypress tests are commands, it's important to understand the different rules by which they operate.\n\n*   **Queries** link up, retrying the entire chain together.\n*   **Assertions** are a type of query that's specially displayed in the command log.\n*   **Non-queries** only execute once.\n\nFor example, there are 5 queries, an action, and 2 assertions in the test below.\n\n```\nit('creates an item', () => {  // Non-query commands only execute once.  cy.visit('/')  // The .focused() query and .should() assertion link together,  // rerunning until the currently focused element has  // the 'new-todo' class  cy.focused().should('have.class', 'new-todo')  // The queries .get() and .find()  // link together, forming the subject for  // the non-query `.type()`.  cy.get('.header').find('.new-todo').type('todo A{enter}')  // Two queries and an assertion chained together  cy.get('.todoapp').find('.todo-list li').should('have.length', 1)})\n```\n\nThe [Command Log](https://docs.cypress.io/guides/core-concepts/cypress-app#Command-Log) shows all commands regardless of types, with passing assertions showing in green.\n\n![Cypress tests showing commands and assertions](https://docs.cypress.io/img/guides/retry-ability/command-assertions.png)\n\nLet's look at the last chain of commands:\n\n```\ncy.get('.todoapp') // query  .find('.todo-list li') // query  .should('have.length', 1) // assertion\n```\n\nBecause nothing is synchronous in modern web applications, Cypress can't query all the DOM elements matching `.todo-list li` and check if there is exactly one of them. There are many examples of why this would not work well.\n\n*   What if the application has not updated the DOM by the time these commands run?\n*   What if the application is waiting for its back end to respond before populating the DOM element?\n*   What if the application does some intensive computation before showing the results in the DOM?\n\nThus [`cy.get`](https://docs.cypress.io/api/commands/get) and [`cy.find()`](https://docs.cypress.io/api/commands/find) have to be smarter and expect the application to potentially update. `cy.get()` queries the application's DOM, finds the elements that match the selector, and then passes them to `.find('.todo-list li')`. `.find()` locates a new set of elements, and passes them to `.should()`. `.should()` then asserts on the list of found elements (in our case, that it has a length of 1).\n\n*   ✅ If the assertion passes, then `.should()` finishes successfully.\n*   🚨 If the assertion fails, then Cypress will requery the application's DOM again - starting from the top of the chain of linked queries. It will look for elements that match `.get().find()` again, and re-run the assertion. If the assertion still fails, Cypress continues retrying until the timeout is reached.\n\nRetry-ability allows the test to complete each command as soon as the assertion passes, without hard-coding waits. If your application takes a few milliseconds or even seconds to render each DOM element - no big deal, the test does not have to change at all. For example, let's introduce an artificial delay of 3 seconds when refreshing the application's UI below in an example TodoMVC model code:\n\n```\napp.TodoModel.prototype.addTodo = function (title) {  this.todos = this.todos.concat({    id: Utils.uuid(),    title: title,    completed: false,  })  // let's trigger the UI to render after 3 seconds  setTimeout(() => {    this.inform()  }, 3000)}\n```\n\nThe test still passes! `cy.get('.todo-list')` passes immediately - the `todo-list` exists - but `.should('have.length', 1)` shows the spinning indicator, meaning Cypress is still waiting for the assertion to pass.\n\n![Retrying assertion](https://docs.cypress.io/img/guides/retry-ability/retry-assertion.gif)\n\nWithin a few milliseconds after the DOM updates, the linked queries `.get().find()` locate an element and `.should('have.length', 1)` passes.\n\n## Multiple assertions[​](#Multiple-assertions \"Direct link to Multiple assertions\")\n\nQueries and assertions are always executed in order, and always retry 'from the top'. If you have multiple assertions, Cypress will retry until each passes before moving on to the next one.\n\nFor example, the following test has [`.should()`](https://docs.cypress.io/api/commands/should) and [`.and()`](https://docs.cypress.io/api/commands/and) assertions. `.and()` is an alias of the `.should()` command, so the second assertion is really a custom callback assertion in the form of the [`.should(cb)`](https://docs.cypress.io/api/commands/should#Function) function with 2 [`expect`](https://docs.cypress.io/guides/references/assertions#Chai) assertions inside of it.\n\n```\nit('creates two items', () => {  cy.visit('/')  cy.get('.new-todo').type('todo A{enter}')  cy.get('.new-todo').type('todo B{enter}')  cy.get('.todo-list li') // query    .should('have.length', 2) // assertion    .and(($li) => {      // 2 mocha assertions inside of the .and() assertion      expect($li.get(0).textContent, 'first item').to.equal('todo a')      expect($li.get(1).textContent, 'second item').to.equal('todo B')    })})\n```\n\nBecause the first expect statement (`expect($li.get(0).textContent, 'first item').to.equal('todo a')`) fails, the second statement is never reached. The `.and()` command fails after timing out, and the Command Log correctly shows that the first encountered assertion `should('have.length', 2)` passed, but the \"first item\" assertion failed.\n\n![Retrying multiple assertions](https://docs.cypress.io/img/guides/retry-ability/second-assertion-fails.gif)\n\n## Implicit Assertions[​](#Implicit-Assertions \"Direct link to Implicit Assertions\")\n\nOften a Cypress command has built-in assertions that will cause the command to be retried until they pass. For example, the [`.eq()`](https://docs.cypress.io/api/commands/eq) query will be retried even without any attached assertions until it finds an element with the given index.\n\n```\ncy.get('.todo-list li') // query  .should('have.length', 2) // assertion  .eq(3) // query\n```\n\n![Retrying built-in assertion](https://docs.cypress.io/img/guides/retry-ability/eq.gif)\n\nOnly queries can be retried, but most other commands still have built-in _waiting_ and assertions. For example, as described in the \"Assertions\" section of [.click()](https://docs.cypress.io/api/commands/click), the `click()` action command waits to click until the element becomes [actionable](https://docs.cypress.io/guides/core-concepts/interacting-with-elements#Actionability), including re-running the query chain leading up to it in case the page updates while we're waiting.\n\nCypress tries to act like a human user would using the browser.\n\n*   Can a user click on the element?\n*   Is the element invisible?\n*   Is the element behind another element?\n*   Does the element have the `disabled` attribute?\n\n[Action commands](https://docs.cypress.io/guides/core-concepts/interacting-with-elements) - such as `.click()` - automatically wait until multiple built-in assertions like these pass, and then it will attempt the action once.\n\n## Timeouts[​](#Timeouts \"Direct link to Timeouts\")\n\nBy default each command that retries does so for up to 4 seconds - the [`defaultCommandTimeout`](https://docs.cypress.io/guides/references/configuration#Timeouts) setting.\n\n### Increase time to retry[​](#Increase-time-to-retry \"Direct link to Increase time to retry\")\n\nYou can change the default timeout for _all commands_. See [Configuration: Overriding Options](https://docs.cypress.io/guides/references/configuration#Overriding-Options) for examples of overriding this option.\n\nFor example, to set the default command timeout to 10 seconds via the command line:\n\n```\ncypress run --config defaultCommandTimeout=10000\n```\n\nWe do not recommend changing the command timeout globally. Instead, pass the individual command's `{ timeout: ms }` option to retry for a different period of time. For example:\n\n```\n// we've modified the timeout which affects default + added assertionscy.get('[data-testid=\"mobile-nav\"]', { timeout: 10000 })  .should('be.visible')  .and('contain', 'Home')\n```\n\nCypress will retry for up to 10 seconds to find a visible element with `data-testid` attribute `mobile-nav` with text containing \"Home\". For more examples, read the [Timeouts](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Timeouts) section in the \"Introduction to Cypress\" guide.\n\n### Disable retry[​](#Disable-retry \"Direct link to Disable retry\")\n\nOverriding the timeout to `0` will essentially disable retrying the query, since it will spend 0 milliseconds retrying.\n\n```\n// check synchronously that the element does not exist (no retry)// for example just after a server-side rendercy.get('[data-testid=\"ssr-error\"]', { timeout: 0 }).should('not.exist')\n```\n\n## Only queries are retried[​](#Only-queries-are-retried \"Direct link to Only queries are retried\")\n\nAny command that isn't a query, such as `.click()`, will not \"chain together\" to form the subject for later commands the way queries do. Cypress will retry any queries _leading up to_ a command, and retry any assertions _after_ a command, but commands themselves only execute once. After they've executed, nothing leading up to them will retry.\n\nMost commands are not retried because they could potentially change the state of the application under test. For example, Cypress will not retry the [.click()](https://docs.cypress.io/api/commands/click) action command, because it could change something in the application. After the click occurs, Cypress will also not re-run any queries before `.click()`.\n\n### Actions should be at the end of chains, not the middle[​](#Actions-should-be-at-the-end-of-chains-not-the-middle \"Direct link to Actions should be at the end of chains, not the middle\")\n\nThe following test might have problems if:\n\n*   Your JS framework re-rendered asynchronously\n*   Your app code reacted to an event firing and removed the element\n\n#### Incorrectly chaining commands[​](#Incorrectly-chaining-commands \"Direct link to Incorrectly-chaining-commands\")\n\n```\ncy.get('.new-todo')  .type('todo A{enter}') // action  .type('todo B{enter}') // action after another action - bad  .should('have.class', 'active') // assertion after an action - bad\n```\n\n#### Correctly ending chains after an action[​](#Correctly-ending-chains-after-an-action \"Direct link to Correctly-ending-chains-after-an-action\")\n\nTo avoid these issues entirely, it is better to split up the above chain of commands.\n\n```\ncy.get('.new-todo').type('todo A{enter}')cy.get('.new-todo').type('todo B{enter}')cy.get('.new-todo').should('have.class', 'active')\n```\n\nWriting your tests in this way will help you avoid issues where the page rerenders in the middle of your test and Cypress loses track of which elements it's supposed to be operating or asserting on. Aliases - [`cy.as()`](https://docs.cypress.io/api/commands/as) - can help make this pattern less intrusive.\n\n```\ncy.get('.new-todo').as('new')cy.get('@new').type('todo A{enter}')cy.get('@new').type('todo B{enter}')cy.get('@new').should('have.class', 'active')\n```\n\ncaution\n\nVery rarely you may want to retry a command like `.click()`. We describe one case like that where the event listeners are attached to a modal popup only after a delay, thus causing default events fired during `.click()` to not register. In this special case you may want to \"keep clicking\" until the event registers, and the dialog disappears. Read about it in the [When Can the Test Click?](https://www.cypress.io/blog/2019/01/22/when-can-the-test-click/) blog post.\n\nBecause of the implicit assertions built into every command, and action commands in particular, you should rarely need this pattern.\n\nAs another example, when confirming that the button component invokes the `click` prop testing with the [cypress/react](https://github.com/cypress-io/cypress/tree/develop/npm/react) mounting library, the following test might or might not work:\n\n#### Incorrectly checking if the stub was called[​](#Incorrectly-checking-if-the-stub-was-called \"Direct link to Incorrectly-checking-if-the-stub-was-called\")\n\n```\nconst Clicker = ({ click }) => (  <div>    <button onClick={click}>Click me</button>  </div>)it('calls the click prop twice', () => {  const onClick = cy.stub()  cy.mount(<Clicker click={onClick} />)  cy.get('button')    .click()    .click()    .then(() => {      // works in this case, but not recommended      // because .click() and .then() do not retry      expect(onClick).to.be.calledTwice    })})\n```\n\nThe above example will fail if the component calls the `click` prop after a delay.\n\n```\nconst Clicker = ({ click }) => (  <div>    <button onClick={() => setTimeout(click, 500)}>Click me</button>  </div>)\n```\n\n![Expect fails the test without waiting for the delayed stub](https://docs.cypress.io/img/guides/retry-ability/delay-click.png)\n\nThe test finishes before the component calls the `click` prop twice, and without retrying the assertion `expect(onClick).to.be.calledTwice`.\n\nIt could also fail if React or another JavaScript library decided to rerender the DOM between clicks.\n\n#### Correctly waiting for the stub to be called[​](#Correctly-waiting-for-the-stub-to-be-called \"Direct link to Correctly-waiting-for-the-stub-to-be-called\")\n\nWe recommend aliasing the stub using the [`.as`](https://docs.cypress.io/api/commands/as) command and using `cy.get('@alias')` to run assertions.\n\n```\nit('calls the click prop', () => {  const onClick = cy.stub().as('clicker')  cy.mount(<Clicker click={onClick} />)  // Good practice 💡: Don't chain anything off of commands  cy.get('button').click()  cy.get('button').click()  // Good practice 💡: Reference the stub with an alias  cy.get('@clicker').should('have.been.calledTwice')})\n```\n\n![Retrying the assertions using a stub alias](https://docs.cypress.io/img/guides/retry-ability/click-twice.gif)\n\n### Use `.should()` with a callback[​](#Use-should-with-a-callback \"Direct link to Use-should-with-a-callback\")\n\nIf you are using commands, but need to retry the entire chain, consider rewriting the commands into a [.should(callbackFn)](https://docs.cypress.io/api/commands/should#Function).\n\nBelow is an example where the number value is set after a delay:\n\n```\n<div class=\"random-number-example\">  Random number: <span id=\"random-number\">🎁</span></div><script>  const el = document.getElementById('random-number')  setTimeout(() => {    el.innerText = Math.floor(Math.random() * 10 + 1)  }, 1500)</script>\n```\n\n![Random number](https://docs.cypress.io/img/guides/retry-ability/random-number.gif)\n\n### Incorrectly waiting for values[​](#Incorrectly-waiting-for-values \"Direct link to Incorrectly-waiting-for-values\")\n\nYou may want to write a test like below, to test that the number is between 1 and 10, although **this will not work as intended**. The test yields the following values, noted in the comments, before failing.\n\n```\n// WRONG: this test will not work as intendedcy.get('[data-testid=\"random-number\"]') // <div>🎁</div>  .invoke('text') // \"🎁\"  .then(parseFloat) // NaN  .should('be.gte', 1) // fails  .and('be.lte', 10) // never evaluates\n```\n\nUnfortunately, the [.then()](https://docs.cypress.io/api/commands/then) command breaks the chain of queries - nothing before it (such as fetching the text of the element) re-runs.\n\n![First attempt at writing the test](https://docs.cypress.io/img/guides/retry-ability/random-number-first-attempt.png)\n\n#### Correctly waiting for values[​](#Correctly-waiting-for-values \"Direct link to Correctly-waiting-for-values\")\n\nWe need to retry getting the element, invoking the `text()` method, calling the `parseFloat` function and running the `gte` and `lte` assertions. We can achieve this using the `.should(callbackFn)`.\n\n```\ncy.get('[data-testid=\"random-number\"]').should(($div) => {  // all the code inside here will retry  // until it passes or times out  const n = parseFloat($div.text())  expect(n).to.be.gte(1).and.be.lte(10)})\n```\n\nThe above test retries getting the element and invoking the text of the element to get the number. When the number is finally set in the application, then the `gte` and `lte` assertions pass and the test passes.\n\n![Random number using callback](https://docs.cypress.io/img/guides/retry-ability/random-number-callback.gif)\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   Read our blog posts about fighting [the test flake](https://cypress.io/blog/tag/flake/).\n*   You can add retry-ability to your own [custom commands](https://docs.cypress.io/api/cypress-api/custom-commands) and queries.\n*   You can retry any function with attached assertions using the 3rd party plugins [cypress-pipe](https://github.com/NicholasBoll/cypress-pipe) and [cypress-wait-until](https://github.com/NoriSte/cypress-wait-until).\n*   3rd party plugin [cypress-recurse](https://github.com/bahmutov/cypress-recurse) can be used to implement the [visual testing with retry-ability for canvas elements](https://glebbahmutov.com/blog/canvas-testing/)\n*   To learn how to enable Cypress' test retries functionality, which retries tests that fail, check out our official guide on [Test Retries](https://docs.cypress.io/guides/guides/test-retries).",
    "title": "Retry-ability | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/core-concepts/variables-and-aliases",
    "markdown": "# Variables and Aliases | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How to deal with async commands\n*   What Aliases are and how they simplify your code\n*   Why you rarely need to use variables with Cypress\n*   How to use Aliases for objects, elements and routes\n\n## Return Values[​](#Return-Values \"Direct link to Return Values\")\n\nNew users to Cypress may initially find it challenging to work with the asynchronous nature of our APIs.\n\ntip\n\n**Do not worry!**\n\nThere are many ways to reference, compare and utilize the objects that Cypress commands yield you.\n\nOnce you get the hang of async code you'll realize you can do everything you could do synchronously, without your code doing any backflips.\n\nThis guide explores many common patterns for writing good Cypress code that can handle even the most complex situations.\n\nAsynchronous APIs are here to stay in JavaScript. They are found everywhere in modern code. In fact, most new browser APIs are asynchronous and many core Node modules are asynchronous as well.\n\nThe patterns we'll explore below are useful in and outside of Cypress.\n\nThe first and most important concept you should recognize is...\n\ndanger\n\n**Return Values**\n\n**You cannot assign or work with the return values** of any Cypress command. Commands are enqueued and run asynchronously.\n\n```\n// this won't work the way you think it doesconst button = cy.get('button')const form = cy.get('form')button.click()\n```\n\n### Closures[​](#Closures \"Direct link to Closures\")\n\nTo access what each Cypress command yields you use [`.then()`](https://docs.cypress.io/api/commands/then).\n\n```\ncy.get('button').then(($btn) => {  // $btn is the object that the previous  // command yielded us})\n```\n\nIf you're familiar with [native Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises) the Cypress `.then()` works similarly. You can continue to nest more Cypress commands inside of the `.then()`.\n\nEach nested command has access to the work done in previous commands. This ends up reading very nicely.\n\n```\ncy.get('button').then(($btn) => {  // store the button's text  const txt = $btn.text()  // submit a form  cy.get('form').submit()  // compare the two buttons' text  // and make sure they are different  cy.get('button').should(($btn2) => {    expect($btn2.text()).not.to.eq(txt)  })})// these commands run after all of the// other previous commands have finishedcy.get(...).find(...).should(...)\n```\n\nThe commands outside of the `.then()` will not run until all of the nested commands finish.\n\ninfo\n\nBy using callback functions we've created a [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures). Closures enable us to keep references around to refer to work done in previous commands.\n\n### Debugging[​](#Debugging \"Direct link to Debugging\")\n\nUsing `.then()` functions is an excellent opportunity to use [`debugger`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger). This can help you understand the order in which commands are run. This also enables you to inspect the objects that Cypress yields you in each command.\n\n```\ncy.get('button').then(($btn) => {  // inspect $btn <object>  debugger  cy.get('[data-testid=\"countries\"]')    .select('USA')    .then(($select) => {      // inspect $select <object>      debugger      cy.clock().then(($clock) => {        // inspect $clock <object>        debugger        $btn // is still available        $select // is still available too      })    })})\n```\n\n### Variables[​](#Variables \"Direct link to Variables\")\n\nTypically in Cypress you hardly need to ever use `const`, `let`, or `var`. When using closures you'll always have access to the objects that were yielded to you without assigning them.\n\nThe one exception to this rule is when you are dealing with mutable objects (that change state). When things change state you often want to compare an object's previous value to the next value.\n\nHere's a great use case for a `const`.\n\n```\n<button>increment</button>you clicked button <span data-testid=\"num\">0</span> times\n```\n\n```\n// app codelet count = 0$('button').on('click', () => {  $('[data-testid=\"num\"]').text((count += 1))})\n```\n\n```\n// cypress test codecy.get('[data-testid=\"num\"]').then(($span) => {  // capture what num is right now  const num1 = parseFloat($span.text())  cy.get('button')    .click()    .then(() => {      // now capture it again      const num2 = parseFloat($span.text())      // make sure it's what we expected      expect(num2).to.eq(num1 + 1)    })})\n```\n\nThe reason for using `const` is because the `$span` object is mutable. Whenever you have mutable objects and you're trying to compare them, you'll need to store their values. Using `const` is a perfect way to do that.\n\nUsing `.then()` callback functions to access the previous command values is great—but what happens when you're running code in hooks like `before` or `beforeEach`?\n\n```\nbeforeEach(() => {  cy.get('button').then(($btn) => {    const text = $btn.text()  })})it('does not have access to text', () => {  // how do we get access to text ?!?!})\n```\n\nHow will we get access to `text`?\n\nWe could make our code do some ugly backflips using `let` to get access to it.\n\ndanger\n\n**Do not do this**\n\nThis code below is just for demonstration.\n\n```\ndescribe('a suite', () => {  // this creates a closure around  // 'text' so we can access it  let text  beforeEach(() => {    cy.get('button').then(($btn) => {      // redefine text reference      text = $btn.text()    })  })  it('does have access to text', () => {    // now text is available to us    // but this is not a great solution :(    text  })})\n```\n\nFortunately, you don't have to make your code do backflips. With Cypress, we can better handle these situations.\n\ntip\n\n**Introducing Aliases**\n\nAliases are a powerful construct in Cypress that have many uses. We'll explore each of their capabilities below.\n\nAt first, we'll use them to share objects between your hooks and your tests.\n\n### Sharing Context[​](#Sharing-Context \"Direct link to Sharing Context\")\n\nSharing context is the simplest way to use aliases.\n\nTo alias something you'd like to share use the [`.as()`](https://docs.cypress.io/api/commands/as) command.\n\nLet's look at our previous example with aliases.\n\n```\nbeforeEach(() => {  // alias the $btn.text() as 'text'  cy.get('button').invoke('text').as('text')})it('has access to text', function () {  this.text // is now available})\n```\n\nUnder the hood, aliasing basic objects and primitives utilizes Mocha's shared [`context`](https://github.com/mochajs/mocha/wiki/Shared-Behaviours) object: that is, aliases are available as `this.*`.\n\nMocha automatically shares contexts for us across all applicable hooks for each test. Additionally these aliases and properties are automatically cleaned up after each test.\n\n```\ndescribe('parent', () => {  beforeEach(() => {    cy.wrap('one').as('a')  })  context('child', () => {    beforeEach(() => {      cy.wrap('two').as('b')    })    describe('grandchild', () => {      beforeEach(() => {        cy.wrap('three').as('c')      })      it('can access all aliases as properties', function () {        expect(this.a).to.eq('one') // true        expect(this.b).to.eq('two') // true        expect(this.c).to.eq('three') // true      })    })  })})\n```\n\n#### Accessing Fixtures:[​](#Accessing-Fixtures \"Direct link to Accessing Fixtures:\")\n\nThe most common use case for sharing context is when dealing with [`cy.fixture()`](https://docs.cypress.io/api/commands/fixture).\n\nOften times you may load a fixture in a `beforeEach` hook but want to utilize the values in your tests.\n\n```\nbeforeEach(() => {  // alias the users fixtures  cy.fixture('users.json').as('users')})it('utilize users in some way', function () {  // access the users property  const user = this.users[0]  // make sure the header contains the first  // user's name  cy.get('header').should('contain', user.name)})\n```\n\ndanger\n\n**Watch out for async commands**\n\nDo not forget that **Cypress commands are async**!\n\nYou cannot use a `this.*` reference until the `.as()` command runs.\n\n```\nit('is not using aliases correctly', function () {  cy.fixture('users.json').as('users')  // nope this won't work  //  // this.users is not defined  // because the 'as' command has only  // been enqueued - it has not run yet  const user = this.users[0]})\n```\n\nThe same principles we introduced before apply to this situation. If you want to access what a command yields you have to do it in a closure using a [`.then()`](https://docs.cypress.io/api/commands/then).\n\n```\n// yup all goodcy.fixture('users.json').then((users) => {  // now we can avoid the alias altogether  // and use a callback function  const user = users[0]  // passes  cy.get('header').should('contain', user.name)})\n```\n\n#### Avoiding the use of `this`[​](#Avoiding-the-use-of-this \"Direct link to Avoiding-the-use-of-this\")\n\ncaution\n\n**Arrow Functions**\n\nAccessing aliases as properties with `this.*` will not work if you use [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) for your tests or hooks.\n\nThis is why all of our examples use the regular `function () {}` syntax as opposed to the lambda \"fat arrow\" syntax `() => {}`.\n\nInstead of using the `this.*` syntax, there is another way to access aliases.\n\nThe [`cy.get()`](https://docs.cypress.io/api/commands/get) command is capable of accessing aliases with a special syntax using the `@` character:\n\n```\nbeforeEach(() => {  // alias the users fixtures  cy.fixture('users.json').as('users')})it('utilize users in some way', function () {  // use the special '@' syntax to access aliases  // which avoids the use of 'this'  cy.get('@users').then((users) => {    // access the users argument    const user = users[0]    // make sure the header contains the first    // user's name    cy.get('header').should('contain', user.name)  })})\n```\n\nBy using [`cy.get()`](https://docs.cypress.io/api/commands/get) we avoid the use of `this`.\n\nKeep in mind that there are use cases for both approaches because they have one major difference.\n\nWhen using `this.users`, it is stored on the context when it is first evaluated. But when using `cy.get('@users')`, any queries are re-evaluated every time the alias is accessed.\n\n```\nconst favorites = { color: 'blue' }cy.wrap(favorites).its('color').as('favoriteColor')cy.then(function () {  favorites.color = 'red'})cy.get('@favoriteColor').then(function (aliasValue) {  expect(aliasValue).to.eql('red')  expect(this.favoriteColor).to.eql('blue')})\n```\n\nIn the second `.then()` block, `cy.get('@favoriteColor')` runs `cy.wrap(favorites).its('color')` fresh each time, but `this.favoriteColor` was set when the alias was first stored, back when our favorite color was blue.\n\n### Elements[​](#Elements \"Direct link to Elements\")\n\nAliases have other special characteristics when being used with DOM elements.\n\nAfter you alias DOM elements, you can then later access them for reuse.\n\n```\n// alias all of the tr's found in the table as 'rows'cy.get('table').find('tr').as('rows')\n```\n\nInternally, Cypress has made a reference to the `<tr>` collection returned as the alias \"rows\". To reference these same \"rows\" later, you can use the [`cy.get()`](https://docs.cypress.io/api/commands/get) command.\n\n```\n// Cypress returns the reference to the <tr>'s// which allows us to continue to chain commands// finding the 1st row.cy.get('@rows').first().click()\n```\n\nBecause we've used the `@` character in [`cy.get()`](https://docs.cypress.io/api/commands/get), instead of querying the DOM for elements, [`cy.get()`](https://docs.cypress.io/api/commands/get) looks for an existing alias called `rows` and returns the reference (if it finds it).\n\n#### Stale Elements:[​](#Stale-Elements \"Direct link to Stale Elements:\")\n\nIn many single-page applications, the JavaScript re-renders parts of the DOM constantly. This is why we always re-run queries when you fetch an alias, so you never end up with stale elements.\n\n```\n<ul id=\"todos\">  <li>    Walk the dog    <button class=\"edit\">edit</button>  </li>  <li>    Feed the cat    <button class=\"edit\">edit</button>  </li></ul>\n```\n\nLet's imagine when we click the `.edit` button that our `<li>` is re-rendered in the DOM. Instead of displaying the edit button it instead displays an `<input />` text field allowing you to edit the todo. The previous `<li>` has been _completely_ removed from the DOM and a new `<li>` is rendered in its place.\n\n```\ncy.get('[data-testid=\"todos\"] li').first().as('firstTodo')cy.get('@firstTodo').find('.edit').click()cy.get('@firstTodo')  .should('have.class', 'editing')  .find('input')  .type('Clean the kitchen')\n```\n\nEvery time we reference `@firstTodo`, Cypress re-runs the queries leading up to the alias definition.\n\nIn our case it would re-query the DOM using: `cy.get('#todos li').first()`. Everything works because the new `<li>` is found.\n\ncaution\n\n_Usually_, replaying previous commands will return what you expect, but not always. It is recommended that you **alias elements before running commands**.\n\n*   `cy.get('nav').find('header').find('[data-testid=\"user\"]').as('user').click()` (good)\n*   `cy.get('nav').find('header').find('[data-testid=\"user\"]').click().as('user')` (bad)\n\n### Intercepts[​](#Intercepts \"Direct link to Intercepts\")\n\nAliases can also be used with [cy.intercept()](https://docs.cypress.io/api/commands/intercept). Aliasing your intercepted routes enables you to:\n\n*   ensure your application makes the intended requests\n*   wait for your server to send the response\n*   access the actual request object for assertions\n\n![Alias commands](https://docs.cypress.io/img/guides/core-concepts/aliasing-routes.png)\n\nHere's an example of aliasing an intercepted route and waiting on it to complete.\n\n```\ncy.intercept('POST', '/users', { id: 123 }).as('postUser')cy.get('form').submit()cy.wait('@postUser').then(({ request }) => {  expect(request.body).to.have.property('name', 'Brian')})cy.contains('Successfully created user: Brian')\n```\n\n### Requests[​](#Requests \"Direct link to Requests\")\n\nAliases can also be used with [requests](https://docs.cypress.io/api/commands/request).\n\nHere's an example of aliasing a request and accessing its properties later.\n\n```\ncy.request('https://jsonplaceholder.cypress.io/comments').as('comments')// other test code herecy.get('@comments').should((response) => {  if (response.status === 200) {      expect(response).to.have.property('duration')    } else {      // whatever you want to check here    }  })})\n```\n\n### Aliases are reset before each test[​](#Aliases-are-reset-before-each-test \"Direct link to Aliases are reset before each test\")\n\n**Note:** all aliases are reset before each test. A common user mistake is to create aliases using the `before` hook. Such aliases work in the first test only!\n\n```\n// 🚨 THIS EXAMPLE DOES NOT WORKbefore(() => {  // notice this alias is created just once using \"before\" hook  cy.wrap('some value').as('exampleValue')})it('works in the first test', () => {  cy.get('@exampleValue').should('equal', 'some value')})// NOTE the second test is failing because the alias is resetit('does not exist in the second test', () => {  // there is not alias because it is created once before  // the first test, and is reset before the second test  cy.get('@exampleValue').should('equal', 'some value')})\n```\n\nThe solution is to create the aliases before each test using the `beforeEach` hook\n\n```\n// ✅ THE CORRECT EXAMPLEbeforeEach(() => {  // we will create a new alias before each test  cy.wrap('some value').as('exampleValue')})it('works in the first test', () => {  cy.get('@exampleValue').should('equal', 'some value')})it('works in the second test', () => {  cy.get('@exampleValue').should('equal', 'some value')})\n```\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Blog: Load Fixtures from Cypress Custom Commands](https://glebbahmutov.com/blog/fixtures-in-custom-commands/) explains how to load or import fixtures to be used in the Cypress custom commands.",
    "title": "Variables and Aliases | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/tooling/visual-testing",
    "markdown": "# Visual Testing | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   How visual testing complements functional testing\n*   How to implement visual diffing yourself or using 3rd party service\n*   How to ensure the application is in consistent state before capturing an image\n\n## Functional vs. visual testing[​](#Functional-vs-visual-testing \"Direct link to Functional vs. visual testing\")\n\nCypress is a _functional_ test runner. It drives the web application the way a user would, and checks if the app _functions_ as expected: if the expected message appears, an element is removed, or a CSS class is added after the appropriate user action. A typical Cypress test, for example, can check if a toggled \"Todo\" item gets a class of \"completed\" after the `.toggle` is checked:\n\n*   End-to-End Test\n*   Component Test\n\n```\nit('completes todo', () => {  cy.visit('/') // opens TodoMVC running at \"baseUrl\"  cy.get('.new-todo').type('write tests{enter}')  cy.contains('.todo-list li', 'write tests').find('.toggle').check()  cy.contains('.todo-list li', 'write tests').should('have.class', 'completed')})\n```\n\n![Passing Cypress functional test](https://docs.cypress.io/img/guides/visual-testing/completed-test.gif)\n\nCypress does NOT see how the page actually looks though. For example, Cypress will not see if the CSS class `completed` grays out the label element and adds a strike-through line.\n\n![Completed item style](https://docs.cypress.io/img/guides/visual-testing/completed-item.png)\n\nYou could technically write a functional test asserting the CSS properties using the [`have.css` assertion](https://docs.cypress.io/guides/references/assertions#CSS), but these may quickly become cumbersome to write and maintain, especially when visual styles rely on a lot of CSS styles.\n\n```\ncy.get('.completed').should('have.css', 'text-decoration', 'line-through')cy.get('.completed').should('have.css', 'color', 'rgb(217,217,217)')\n```\n\nYour visual styles may also rely on more than CSS, perhaps you want to ensure an SVG or image has rendered correctly or shapes were correctly drawn to a canvas.\n\nLuckily, Cypress gives a stable platform for [writing plugins](https://docs.cypress.io/guides/tooling/plugins-guide) that _can perform visual testing_.\n\nTypically such plugins take an image snapshot of the entire application under test or a specific element, and then compare the image to a previously approved baseline image. If the images are the same (within a set pixel tolerance), it is determined that the web application looks the same to the user. If there are differences, then there has been some change to the DOM layout, fonts, colors or other visual properties that needs to be investigated.\n\nFor example, one can use the [cypress-plugin-snapshots](https://github.com/meinaart/cypress-plugin-snapshots) plugin and catch the following visual regression:\n\n```\n.todo-list li.completed label {  color: #d9d9d9;  /* removed the line-through */}\n```\n\n```\nit('completes todo', () => {  cy.visit('/')  cy.get('.new-todo').type('write tests{enter}')  cy.contains('.todo-list li', 'write tests').find('.toggle').check()  cy.contains('.todo-list li', 'write tests').should('have.class', 'completed')  // run 'npm install cypress-plugin-snapshots --save'  // capture the element screenshot and  // compare to the baseline image  cy.get('.todoapp').toMatchImageSnapshot({    imageConfig: {      threshold: 0.001,    },  })})\n```\n\nThis open source plugin compares the baseline and the current images side by side if pixel difference is above the threshold; notice how the baseline image (_Expected result_) has the label text with the line through, while the new image (_Actual result_) does not have it.\n\n![Baseline vs current image](https://docs.cypress.io/img/guides/visual-testing/diff.png)\n\nLike most image comparison tools, the plugin also shows a difference view on mouse hover:\n\n![Highlighted changes](https://docs.cypress.io/img/guides/visual-testing/diff-2.png)\n\nThere are several published, open source plugins, listed in the\n\n[Visual Testing Plugins](https://docs.cypress.io/plugins#visual-testing) section, and several commercial companies have developed visual testing solutions on top of Cypress listed below.\n\n### Open source[​](#Open-source \"Direct link to Open source\")\n\nListed in the [Visual Testing Plugins](https://docs.cypress.io/plugins#visual-testing) section.\n\n### Applitools[​](#Applitools \"Direct link to Applitools\")\n\nFirst joint webinar with Applitools\n\nSecond joint webinar with Applitools with a focus on [Component Testing](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-Component-Testing)\n\n[https://applitools.com/](https://applitools.com/)\n\n| Resource | Description |\n| --- | --- |\n| [Official docs](https://applitools.com/cypress) | Applitools' Cypress documentation |\n| [Tutorial](https://applitools.com/tutorials/cypress.html) | Applitools' Cypress tutorial |\n| [Webinar](https://applitools.com/blog/cypress-applitools-end-to-end-testing) | _Creating a Flawless User Experience, End-to-End, Functional to Visual – Practical Hands-on Session_, a webinar recorded together with Cypress and Applitools |\n| [Blog](https://glebbahmutov.com/blog/testing-a-chart/) | Testing a chart with Cypress and Applitools |\n\n### Percy[​](#Percy \"Direct link to Percy\")\n\n[https://percy.io/](https://percy.io/)\n\n| Resource | Description |\n| --- | --- |\n| [Official docs](https://docs.percy.io/docs/cypress) | Percy's Cypress documentation |\n| [Tutorial](https://docs.percy.io/docs/cypress-tutorial) | Percy's Cypress tutorial |\n| [Webinar](https://www.youtube.com/watch?v=MXfZeE9RQDw) | _Cypress + Percy = End-to-end functional and visual testing for the web_, a webinar recorded together with Cypress and Percy.io |\n| [Blog](https://www.cypress.io/blog/2019/04/19/webinar-recording-cypress-io-percy-end-to-end-functional-and-visual-testing-for-the-web/) | The companion blog for the Cypress + Percy webinar |\n| [Slides](https://slides.com/bahmutov/visual-testing-with-percy) | The companion slides for the Cypress + Percy webinar |\n| [Blog](https://glebbahmutov.com/blog/testing-visually/) | Testing how an application renders a drawing with Cypress and Percy |\n\n### Happo[​](#Happo \"Direct link to Happo\")\n\n[https://happo.io/](https://happo.io/)\n\n| Resource | Description |\n| --- | --- |\n| [Official docs](https://docs.happo.io/docs/cypress) | Happo's Cypress documentation |\n| [Webinar](https://www.youtube.com/watch?v=C_p12IvN5HU) | _Keep your UI Sharp: Ensuring Functional and Visual Quality with Cypress.io + Happo.io_, a webinar recorded together with Cypress and Happo |\n| [Blog](https://www.cypress.io/blog/2020/05/27/webcast-recording-keep-your-ui-sharp/) | The companion blog for the Cypress + Happo webinar |\n\n### Chromatic[​](#Chromatic \"Direct link to Chromatic\")\n\nChromatic leverages your existing Cypress setup—configuration, mocking, and tests—to enable visual testing of your application's UI. With the Chromatic plugin installed, Chromatic captures an archive of your UI while your Cypress tests are running.\n\n[https://chromatic.com](https://chromatic.com/)\n\n| Resource | Description |\n| --- | --- |\n| [Official docs](https://www.chromatic.com/docs/cypress/setup/?utm_source=cypress_docs) | Chromatic's Cypress documentation |\n| [Blog](https://www.chromatic.com/blog/how-to-visual-test-with-cypress/?utm_source=cypress_docs) | Chromatic’s Cypress integration announcement and tutorial |\n\n## Best practices[​](#Best-practices \"Direct link to Best practices\")\n\nAs a general rule there are some best practices when visual testing.\n\n### Recognize the need for visual testing[​](#Recognize-the-need-for-visual-testing \"Direct link to Recognize the need for visual testing\")\n\nAssertions that verify style properties\\*\\*\n\n```\ncy.get('.completed').should('have.css', 'text-decoration', 'line-through')  .and('have.css', 'color', 'rgb(217,217,217)')cy.get('.user-info').should('have.css', 'display', 'none')...\n```\n\nIf your end-to-end tests become full of assertions checking visibility, color and other style properties, it might be time to start using visual diffing to verify the page appearance.\n\n### DOM state[​](#DOM-state \"Direct link to DOM state\")\n\ntip\n\n**Best Practice:** Take a snapshot after you confirm the page is done changing.\n\nFor example, if the snapshot command is `cy.mySnapshotCommand`:\n\n**Incorrect Usage**\n\n```\n// the web application takes time to add the new item,// sometimes it takes the snapshot BEFORE the new item appearscy.get('.new-todo').type('write tests{enter}')cy.mySnapshotCommand()\n```\n\n**Correct Usage**\n\n```\n// use a functional assertion to ensure// the web application has re-rendered the pagecy.get('.new-todo').type('write tests{enter}')cy.contains('.todo-list li', 'write tests')// great, the new item is displayed,// now we can take the snapshotcy.mySnapshotCommand()\n```\n\n### Timestamps[​](#Timestamps \"Direct link to Timestamps\")\n\ntip\n\n**Best Practice:** Control the timestamp inside the application under test.\n\nBelow we freeze the operating system's time to `Jan 1, 2018` using [cy.clock()](https://docs.cypress.io/api/commands/clock) to ensure all images displaying dates and times match.\n\n```\nconst now = new Date(2018, 1, 1)cy.clock(now)// ... testcy.mySnapshotCommand()\n```\n\n### Application state[​](#Application-state \"Direct link to Application state\")\n\ntip\n\n**Best Practice:** Use [cy.fixture()](https://docs.cypress.io/api/commands/fixture) and network mocking to set the application state.\n\nBelow we stub network calls using [cy.intercept()](https://docs.cypress.io/api/commands/intercept) to return the same response data for each XHR request. This ensures that the data displayed in our application images does not change.\n\n```\ncy.intercept('/api/items', { fixture: 'items' }).as('getItems')// ... actioncy.wait('@getItems')cy.mySnapshotCommand()\n```\n\n### Visual diff elements[​](#Visual-diff-elements \"Direct link to Visual diff elements\")\n\ntip\n\n**Best Practice:** Use visual diffing to check individual DOM elements rather than the entire page.\n\nTargeting specific DOM element will help avoid visual changes from component \"X\" breaking tests in other unrelated components.\n\n### Component testing[​](#Component-testing \"Direct link to Component testing\")\n\ntip\n\n**Best Practice:** Use [Component Testing](https://docs.cypress.io/guides/component-testing/overview) to test the individual components functionality in addition to end-to-end and visual tests.\n\nIf you are working on React components, read [Visual testing for React components using open source tools](https://glebbahmutov.com/blog/open-source-visual-testing-of-components/), browse [slides](https://slides.com/bahmutov/i-see-what-is-going-on), and watch the [companion videos](https://www.youtube.com/playlist?list=PLP9o9QNnQuAYhotnIDEUQNXuvXL7ZmlyZ).\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [After Screenshot API](https://docs.cypress.io/api/plugins/after-screenshot-api)\n*   [cy.screenshot()](https://docs.cypress.io/api/commands/screenshot)\n*   [Cypress.Screenshot](https://docs.cypress.io/api/cypress-api/screenshot-api)\n*   [Plugins](https://docs.cypress.io/guides/tooling/plugins-guide)\n*   [Visual Testing Plugins](https://docs.cypress.io/plugins#visual-testing)\n*   [Writing a Plugin](https://docs.cypress.io/api/plugins/writing-a-plugin)\n*   [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) is a full stack example application that demonstrates **best practices and scalable strategies with Cypress in practical and realistic scenarios**.\n*   Read the blog post [Debug a Flaky Visual Regression Test](https://www.cypress.io/blog/2020/10/02/debug-a-flaky-visual-regression-test/)\n*   Read the blog post [Canvas Visual Testing with Retries](https://glebbahmutov.com/blog/canvas-testing/)",
    "title": "Visual Testing | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/references/advanced-installation",
    "markdown": "# Advanced Installation | Cypress Documentation\n\n## Environment variables[​](#Environment-variables \"Direct link to Environment variables\")\n\n| Name | Description |\n| --- | --- |\n| `CYPRESS_INSTALL_BINARY` | [Destination of Cypress binary that's downloaded and installed](#Install-binary) |\n| `CYPRESS_CONNECT_RETRY_THRESHOLD` | Overrides the maximum number of retries when connecting to a browser. The default value is 62. |\n| `CYPRESS_DOWNLOAD_MIRROR` | [Downloads the Cypress binary through a mirror server](#Mirroring) |\n| `CYPRESS_DOWNLOAD_PATH_TEMPLATE` | [Allows generating a custom URL to download the Cypress binary from](#Download-path-template) |\n| `CYPRESS_CACHE_FOLDER` | [Changes the Cypress binary cache location](#Binary-cache) |\n| `CYPRESS_RUN_BINARY` | [Location of Cypress binary at run-time](#Run-binary) |\n| `CYPRESS_VERIFY_TIMEOUT` | Overrides the timeout duration for the `verify` command. The default value is 30000. |\n| ~CYPRESS\\_SKIP\\_BINARY\\_INSTALL~ | removed use `CYPRESS_INSTALL_BINARY=0` instead |\n| ~CYPRESS\\_BINARY\\_VERSION~ | removed use `CYPRESS_INSTALL_BINARY` instead |\n\n## Install binary[​](#Install-binary \"Direct link to Install binary\")\n\nUsing the `CYPRESS_INSTALL_BINARY` environment variable, you can control how Cypress is installed. To override what is installed, you set `CYPRESS_INSTALL_BINARY` alongside the `npm install` command.\n\n**This is helpful if you want to:**\n\n*   Install a version different than the default npm package.\n*   Specify an external URL (to bypass a corporate firewall).\n    \n    ```\n    CYPRESS_INSTALL_BINARY=https://company.domain.com/cypress.zip npm install cypress\n    ```\n    \n*   Specify a file to install locally instead of using the internet.\n    \n    ```\n    CYPRESS_INSTALL_BINARY=/local/path/to/cypress.zip npm install cypress\n    ```\n    \n\nIn all cases, the fact that the binary was installed from a custom location _is not saved in your `package.json` file_. Every repeated installation needs to use the same environment variable to install the same binary.\n\n### Skipping installation[​](#Skipping-installation \"Direct link to Skipping installation\")\n\nYou can also force Cypress to skip the installation of the binary application by setting `CYPRESS_INSTALL_BINARY=0`. This could be useful if you want to prevent Cypress from downloading the Cypress binary at the time of `npm install`.\n\n```\nCYPRESS_INSTALL_BINARY=0 npm install\n```\n\nNow Cypress will skip its install phase once the npm module is installed.\n\n## Binary cache[​](#Binary-cache \"Direct link to Binary cache\")\n\nAs of version `3.0`, Cypress downloads the matching Cypress binary to the global system cache, so that the binary can be shared between projects. By default, global cache folders are:\n\n*   **MacOS**: `~/Library/Caches/Cypress`\n*   **Linux**: `~/.cache/Cypress`\n*   **Windows**: `/AppData/Local/Cypress/Cache`\n\nTo override the default cache folder, set the environment variable `CYPRESS_CACHE_FOLDER`.\n\n```\nCYPRESS_CACHE_FOLDER=~/Desktop/cypress_cache npm install\n```\n\n```\nCYPRESS_CACHE_FOLDER=~/Desktop/cypress_cache npm run test\n```\n\nCypress will automatically replace the `~` with the user's home directory. So you can pass `CYPRESS_CACHE_FOLDER` as a string from CI configuration files, for example:\n\n```\nenvironment:  CYPRESS_CACHE_FOLDER: '~/.cache/Cypress'\n```\n\nSee also [Continuous Integration - Caching](https://docs.cypress.io/guides/continuous-integration/introduction#Caching) section in the documentation.\n\ncaution\n\n`CYPRESS_CACHE_FOLDER` will need to exist every time cypress is launched. To ensure this, consider exporting this environment variable. For example, in a `.bash_profile` (MacOS, Linux), or using `RegEdit` (Windows).\n\n## Run binary[​](#Run-binary \"Direct link to Run binary\")\n\nSetting the environment variable `CYPRESS_RUN_BINARY` overrides where the npm module finds the Cypress binary.\n\n`CYPRESS_RUN_BINARY` should be a path to an already unzipped binary executable. The Cypress commands `open`, `run`, and `verify` will then launch the provided binary.\n\n### Mac[​](#Mac \"Direct link to Mac\")\n\n```\nCYPRESS_RUN_BINARY=~/Downloads/Cypress.app/Contents/MacOS/Cypress cypress run\n```\n\n### Linux[​](#Linux \"Direct link to Linux\")\n\n```\nCYPRESS_RUN_BINARY=~/Downloads/Cypress/Cypress cypress run\n```\n\n### Windows[​](#Windows \"Direct link to Windows\")\n\n```\nCYPRESS_RUN_BINARY=~/Downloads/Cypress/Cypress.exe cypress run\n```\n\ncaution\n\nWe recommend **not exporting** the `CYPRESS_RUN_BINARY` environment variable, since it will affect every cypress module installed on your file system.\n\n## Download URLs[​](#Download-URLs \"Direct link to Download URLs\")\n\nIf you want to download a specific Cypress version for a given platform (Operating System), you can get it from our CDN.\n\nThe download server URL is `https://download.cypress.io`.\n\nWe currently have the following downloads available:\n\n*   Windows 64-bit (`?platform=win32&arch=x64`)\n*   Linux 64-bit (`?platform=linux`)\n*   macOS 64-bit (`?platform=darwin`)\n\nHere are the available download URLs:\n\nSee [https://download.cypress.io/desktop.json](https://download.cypress.io/desktop.json) for all available platforms.\n\n| Method | URL | Description |\n| --- | --- | --- |\n| `GET` | `/desktop` | Download Cypress at latest version (platform auto-detected) |\n| `GET` | `/desktop.json` | Returns JSON containing latest available CDN destinations |\n| `GET` | `/desktop?platform=p&arch=a` | Download Cypress for a specific platform and/or architecture |\n| `GET` | `/desktop/:version` | Download Cypress with a specified version |\n| `GET` | `/desktop/:version?platform=p&arch=a` | Download Cypress with a specified version and platform and/or architecture |\n\n**Example of downloading Cypress `12.17.4` for Windows 64-bit:**\n\n```\nhttps://download.cypress.io/desktop/12.17.4?platform=win32&arch=x64\n```\n\n## Mirroring[​](#Mirroring \"Direct link to Mirroring\")\n\nIf you choose to mirror the entire Cypress download site, you can specify `CYPRESS_DOWNLOAD_MIRROR` to set the download server URL from `https://download.cypress.io` to your own mirror.\n\nFor example:\n\n```\nCYPRESS_DOWNLOAD_MIRROR=\"https://www.example.com\" cypress install\n```\n\nCypress will then attempt to download a binary with this format: `https://www.example.com/desktop/:version?platform=p`\n\n## Download path template[​](#Download-path-template \"Direct link to Download path template\")\n\nStarting with Cypress 9.3.0, you can use the `CYPRESS_DOWNLOAD_PATH_TEMPLATE` environment variable to download the Cypress binary from a custom URL that's generated based on endpoint, version, platform and architecture.\n\n**The following replacements are supported:**\n\n*   `${endpoint}` is replaced with `https://download.cypress.io/desktop/:version`. If `CYPRESS_DOWNLOAD_MIRROR` is set, its value is used instead of `https://download.cypress.io` (note that the `/desktop` remains!)\n*   `${platform}` is replaced with the platform the installation is running on (e.g. `win32`, `linux`, `darwin`)\n*   `${arch}` is replaced with the architecture the installation is running on (e.g. `x64`, `arm64`)\n*   Starting with Cypress 10.6.0, `${version}` is replaced with the version number that's being installed (e.g. `10.11.0`)\n\n**Examples:**\n\nTo install the binary from a download mirror that matches the exact file structure of `https://cdn.cypress.io` (works for Cypress 9.3.0 or newer):\n\n```\nexport CYPRESS_DOWNLOAD_MIRROR=https://cypress-download.localexport CYPRESS_DOWNLOAD_PATH_TEMPLATE='${endpoint}/${platform}-${arch}/cypress.zip'# Example of a resulting URL: https://cypress-download.local/desktop/10.11.0/linux-x64/cypress.zip\n```\n\nTo install the binary from a download server with a custom file structure (works for Cypress 10.6.0 or newer):\n\n```\nexport CYPRESS_DOWNLOAD_PATH_TEMPLATE='https://software.local/cypress/${platform}/${arch}/${version}/cypress.zip'# Example of a resulting URL: https://software.local/cypress/linux/x64/10.11.0/cypress.zip\n```\n\nTo define `CYPRESS_DOWNLOAD_PATH_TEMPLATE` in `.npmrc`, put a backslash before every `$` (works for Cypress 9.5.3 or newer):\n\n```\nCYPRESS_DOWNLOAD_PATH_TEMPLATE=\\${endpoint}/\\${platform}-\\${arch}/cypress.zip\n```\n\nCypress can be configured to use the `ca` and `cafile` options from your npm config file to download the Cypress binary.\n\nFor example, to use the CA at `/home/person/certs/ca.crt` when downloading Cypress, add the following to your `.npmrc`:\n\n```\ncafile=/home/person/certs/ca.crt\n```\n\nIf neither `cafile` nor `ca` are set, Cypress looks at the system environment variable `NODE_EXTRA_CA_CERTS` and uses the corresponding certificate(s) as an extension for the trusted certificate authority when downloading the Cypress binary.\n\nNote that the npm config is used as a replacement, and the node environment variable is used as an extension.\n\n## Opt out of sending exception data to Cypress[​](#Opt-out-of-sending-exception-data-to-Cypress \"Direct link to Opt out of sending exception data to Cypress\")\n\nWhen an exception is thrown regarding Cypress, we send along the exception data to `https://api.cypress.io`. We solely use this information to help develop a better product.\n\nIf you would like to opt out of sending any exception data to Cypress, you can do so by setting `CYPRESS_CRASH_REPORTS=0` in your system environment variables.\n\n### Opt out on Linux or macOS[​](#Opt-out-on-Linux-or-macOS \"Direct link to Opt out on Linux or macOS\")\n\nTo opt out of sending exception data on Linux or macOS, run the following command in a terminal before installing Cypress:\n\n```\nexport CYPRESS_CRASH_REPORTS=0\n```\n\nTo make these changes permanent, you can add this command to your shell's `~/.profile` (`~/.zsh_profile`, `~/.bash_profile`, etc.) to run them on every login.\n\n### Opt out on Windows[​](#Opt-out-on-Windows \"Direct link to Opt out on Windows\")\n\nTo opt out of sending exception data on Windows, run the following command in the Command Prompt before installing Cypress:\n\n```\nset CYPRESS_CRASH_REPORTS=0\n```\n\nTo accomplish the same thing in PowerShell:\n\n```\n$env:CYPRESS_CRASH_REPORTS = \"0\"\n```\n\nTo save the `CYPRESS_CRASH_REPORTS` variable for use in all new shells, use `setx`:\n\n```\nsetx CYPRESS_CRASH_REPORTS 0\n```\n\n## Opt out of Cypress commercial messaging[​](#Opt-out-of-Cypress-commercial-messaging \"Direct link to Opt out of Cypress commercial messaging\")\n\nCypress may occasionally display messages in your CI logs related to our commercial offerings and how they could benefit you during your workflows.\n\nIf you would like to opt out of all commercial messaging, you can do so by setting `CYPRESS_COMMERCIAL_RECOMMENDATIONS=0` in your system environment variables.\n\n## Install pre-release version[​](#Install-pre-release-version \"Direct link to Install pre-release version\")\n\nIf you would like to install a pre-release version of Cypress to test out functionality that has not yet been released, here is how:\n\n1.  Open up the list of commits to `develop` on the Cypress repo: [https://github.com/cypress-io/cypress/commits/develop](https://github.com/cypress-io/cypress/commits/develop)\n2.  Find the commit that you would like to install the pre-release version of. Click the comment icon (highlighted in red below):\n    \n    ![Example of a commit for which pre-releases are available. Comment link highlighted in red.](https://docs.cypress.io/img/guides/install/develop-commit-comment-link.png)\n    \n3.  You should see several comments from the `cypress-bot` user with instructions for installing Cypress pre-releases. Pick the one that corresponds to your operating system and CPU architecture, and follow the instructions there to install the pre-release.\n\nCypress pre-releases are only available for 60 days after they are built. Do not rely on these being available past 60 days.\n\n## Windows Subsystem for Linux[​](#Windows-Subsystem-for-Linux \"Direct link to Windows Subsystem for Linux\")\n\nCypress requires an [X-server](https://en.wikipedia.org/wiki/X.Org_Server) (X11) to display the Cypress UI from a Windows Subsystem for Linux installation. This requirement is met by current versions of Windows Subsystem for Linux (WSL2) with X11 support being included through Windows Subsystem for Linux GUI (WSLg).\n\nRefer to [GitHub: Windows Subsystem for Linux GUI (WSLg)](https://github.com/microsoft/wslg) for installation instructions on Ubuntu and install the [prerequisite Linux packages](https://docs.cypress.io/guides/getting-started/installing-cypress#Linux-Prerequisites) before running Cypress.\n\nRefer to Microsoft Learn [Windows Subsystem for Linux Documentation](https://learn.microsoft.com/en-us/windows/wsl/) for additional information.\n\ninfo\n\nCypress.io does not specifically support the use of Cypress under Windows Subsystem for Linux (WSL). If you want to report an issue, please ensure that you can reproduce it without using WSL on one of the Cypress [supported operating systems](https://docs.cypress.io/guides/getting-started/installing-cypress#Operating-System).",
    "title": "Advanced Installation | Cypress Documentation",
    "description": "Environment variables",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/references/assertions",
    "markdown": "# Assertions | Cypress Documentation\n\nCypress bundles the popular [Chai](https://docs.cypress.io/guides/references/assertions#Chai) assertion library, as well as helpful extensions for [Sinon](https://docs.cypress.io/guides/references/assertions#Sinon-Chai) and [jQuery](https://docs.cypress.io/guides/references/assertions#Chai-jQuery), bringing you dozens of powerful assertions for free.\n\ninfo\n\n**New to Cypress?**\n\nThis document is only a reference to every assertion Cypress supports.\n\nIf you're looking to understand **how** to use these assertions please read about assertions in our [Introduction to Cypress](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Assertions) guide.\n\n## Chai[​](#Chai \"Direct link to Chai\")\n\n[https://github.com/chaijs/chai](https://github.com/chaijs/chai)\n\nThese chainers are available for BDD assertions (`expect`/`should`). Aliases listed can be used interchangeably with their original chainer. You can see the entire list of available BDD Chai assertions [here](http://chaijs.com/api/bdd/).\n\n| Chainer | Example |\n| --- | --- |\n| not | `.should('not.equal', 'Jane')`  <br>`expect(name).to.not.equal('Jane')` |\n| deep | `.should('deep.equal', { name: 'Jane' })`  <br>`expect(obj).to.deep.equal({ name: 'Jane' })` |\n| nested | `.should('have.nested.property', 'a.b[1]')`  <br>`.should('nested.include', {'a.b[1]': 'y'})`  <br>`expect({a: {b: 'x'}}).to.have.nested.property('a.b')`  <br>`expect({a: {b: 'x'}}).to.nested.include({'a.b': 'x'})` |\n| ordered | `.should('have.ordered.members', [1, 2])`  <br>`expect([1, 2]).to.have.ordered.members([1, 2])`  <br>`expect([1, 2]).not.to.have.ordered.members([2, 1])` |\n| any | `.should('have.any.keys', 'age')`  <br>`expect(arr).to.have.any.keys('age')` |\n| all | `.should('have.all.keys', 'name', 'age')`  <br>`expect(arr).to.have.all.keys('name', 'age')` |\n| a(_type_)  <br>**Aliases:** an | `.should('be.a', 'string')`  <br>`expect('test').to.be.a('string')` |\n| include(_value_)  <br>**Aliases:** contain, includes, contains | `.should('include', 2)`  <br>`expect([1,2,3]).to.include(2)` |\n| ok  | `.should('not.be.ok')`  <br>`expect(undefined).to.not.be.ok` |\n| true | `.should('be.true')`  <br>`expect(true).to.be.true` |\n| false | `.should('be.false')`  <br>`expect(false).to.be.false` |\n| null | `.should('be.null')`  <br>`expect(null).to.be.null` |\n| undefined | `.should('be.undefined')`  <br>`expect(undefined).to.be.undefined` |\n| exist | `.should('exist')`  <br>`expect(myVar).to.exist` |\n| empty | `.should('be.empty')`  <br>`expect([]).to.be.empty` |\n| arguments  <br>**Aliases:** Arguments | `.should('be.arguments')`  <br>`expect(arguments).to.be.arguments` |\n| equal(_value_)  <br>**Aliases:** equals, eq | `.should('equal', 42)`  <br>`expect(42).to.equal(42)` |\n| deep.equal(_value_) | `.should('deep.equal', { name: 'Jane' })`  <br>`expect({ name: 'Jane' }).to.deep.equal({ name: 'Jane' })` |\n| eql(_value_)  <br>**Aliases:** eqls | `.should('eql', { name: 'Jane' })`  <br>`expect({ name: 'Jane' }).to.eql({ name: 'Jane' })` |\n| greaterThan(_value_)  <br>**Aliases:** gt, above | `.should('be.greaterThan', 5)`  <br>`expect(10).to.be.greaterThan(5)` |\n| least(_value_)  <br>**Aliases:** gte | `.should('be.at.least', 10)`  <br>`expect(10).to.be.at.least(10)` |\n| lessThan(_value_)  <br>**Aliases:** lt, below | `.should('be.lessThan', 10)`  <br>`expect(5).to.be.lessThan(10)` |\n| most(_value_)  <br>**Aliases:** lte | `.should('have.length.of.at.most', 4)`  <br>`expect('test').to.have.length.of.at.most(4)` |\n| within(_start_, _finish_) | `.should('be.within', 5, 10)`  <br>`expect(7).to.be.within(5, 10)` |\n| instanceOf(_constructor_)  <br>**Aliases:** instanceof | `.should('be.instanceOf', Array)`  <br>`expect([1, 2, 3]).to.be.instanceOf(Array)` |\n| property(_name_, _\\[value\\]_) | `.should('have.property', 'name')`  <br>`expect(obj).to.have.property('name')` |\n| deep.property(_name_, _\\[value\\]_) | `.should('have.deep.property', 'tests[1]', 'e2e')`  <br>`expect(deepObj).to.have.deep.property('tests[1]', 'e2e')` |\n| ownProperty(_name_)  <br>**Aliases:** haveOwnProperty, own.property | `.should('have.ownProperty', 'length')`  <br>`expect('test').to.have.ownProperty('length')` |\n| ownPropertyDescriptor(_name_)  <br>**Aliases:** haveOwnPropertyDescriptor | `.should('have.ownPropertyDescriptor', 'a')`  <br>`expect({a: 1}).to.have.ownPropertyDescriptor('a')` |\n| lengthOf(_value_) | `.should('have.lengthOf', 4)`  <br>`expect('test').to.have.lengthOf(4)` |\n| match(_RegExp_)  <br>**Aliases:** matches | `.should('to.match', /^test/)`  <br>`expect('testing').to.match(/^test/)` |\n| string(_string_) | `.should('have.string', 'test')`  <br>`expect('testing').to.have.string('test')` |\n| keys(_key1_, _\\[key2\\]_, _\\[...\\]_)  <br>**Aliases:** key | `.should('have.keys', 'pass', 'fail')`  <br>`expect({ pass: 1, fail: 2 }).to.have.keys('pass', 'fail')` |\n| throw(_constructor_)  <br>**Aliases:** throws, Throw | `.should('throw', Error)`  <br>`expect(fn).to.throw(Error)` |\n| respondTo(_method_)  <br>**Aliases:** respondsTo | `.should('respondTo', 'getName')`  <br>`expect(obj).to.respondTo('getName')` |\n| itself | `.should('itself.respondTo', 'getName')`  <br>`expect(Foo).itself.to.respondTo('bar')` |\n| satisfy(_method_)  <br>**Aliases:** satisfies | `.should('satisfy', (num) => num > 0)`  <br>`expect(1).to.satisfy((num) => num > 0)` |\n| closeTo(_expected_, _delta_)  <br>**Aliases:** approximately | `.should('be.closeTo', 1, 0.5)`  <br>`expect(1.5).to.be.closeTo(1, 0.5)` |\n| members(_set_) | `.should('include.members', [3, 2])`  <br>`expect([1, 2, 3]).to.include.members([3, 2])` |\n| oneOf(_values_) | `.should('be.oneOf', [1, 2, 3])`  <br>`expect(2).to.be.oneOf([1,2,3])` |\n| change(_function_)  <br>**Aliases:** changes | `.should('change', obj, 'val')`  <br>`expect(fn).to.change(obj, 'val')` |\n| increase(_function_)  <br>**Aliases:** increases | `.should('increase', obj, 'val')`  <br>`expect(fn).to.increase(obj, 'val')` |\n| decrease(_function_)  <br>**Aliases:** decreases | `.should('decrease', obj, 'val')`  <br>`expect(fn).to.decrease(obj, 'val')` |\n\nThese getters are also available for BDD assertions. They don't actually do anything, but they enable you to write clear, english sentences.\n\n| Chainable getters |\n| --- |\n| `to`, `be`, `been`, `is`, `that`, `which`, `and`, `has`, `have`, `with`, `at`, `of`, `same` |\n\n## Chai-jQuery[​](#Chai-jQuery \"Direct link to Chai-jQuery\")\n\n[https://github.com/chaijs/chai-jquery](https://github.com/chaijs/chai-jquery)\n\nThese chainers are available when asserting about a DOM object.\n\nYou will commonly use these chainers after using DOM commands like: [`cy.get()`](https://docs.cypress.io/api/commands/get), [`cy.contains()`](https://docs.cypress.io/api/commands/contains), etc.\n\n| Chainers | Assertion |\n| --- | --- |\n| attr(_name_, _\\[value\\]_) | `.should('have.attr', 'bar')`  <br>`expect($el).to.have.attr('foo', 'bar')` |\n| prop(_name_, _\\[value\\]_) | `.should('have.prop', 'disabled', false)`  <br>`expect($el).to.have.prop('disabled', false)` |\n| css(_name_, _\\[value\\]_) | `.should('have.css', 'background-color', 'rgb(0, 0, 0)')`  <br>`expect($el).to.have.css('background-color', 'rgb(0, 0, 0)')` |\n| data(_name_, _\\[value\\]_) | `.should('have.data', 'foo', 'bar')`  <br>`expect($el).to.have.data('foo', 'bar')` |\n| class(_className_) | `.should('have.class', 'foo')`  <br>`expect($el).to.have.class('foo')` |\n| id(_id_) | `.should('have.id', 'foo')`  <br>`expect($el).to.have.id('foo')` |\n| html(_html_) | `.should('have.html', 'I love testing')`  <br>`expect($el).to.have.html('with Cypress')` |\n| text(_text_) | `.should('have.text', 'I love testing')`  <br>`expect($el).to.have.text('with Cypress')` |\n| value(_value_) | `.should('have.value', '[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)')`  <br>`expect($el).to.have.value('[[email protected]](https://docs.cypress.io/cdn-cgi/l/email-protection)')` |\n| visible | `.should('be.visible')`  <br>`expect($el).to.be.visible` |\n| hidden | `.should('be.hidden')`  <br>`expect($el).to.be.hidden` |\n| selected | `.should('be.selected')`  <br>`expect($option).not.to.be.selected` |\n| checked | `.should('be.checked')`  <br>`expect($input).not.to.be.checked` |\n| focus\\[ed\\] | `.should('have.focus')`  <br>`expect($input).not.to.be.focused`  <br>`expect($input).to.have.focus` |\n| enabled | `.should('be.enabled')`  <br>`expect($input).to.be.enabled` |\n| disabled | `.should('be.disabled')`  <br>`expect($input).to.be.disabled` |\n| empty | `.should('be.empty')`  <br>`expect($el).not.to.be.empty` |\n| exist | `.should('exist')`  <br>`expect($nonexistent).not.to.exist` |\n| match(_selector_) | `.should('match', ':empty')`  <br>`expect($emptyEl).to.match(':empty')` |\n| contain(_text_) | `.should('contain', 'text')`  <br>`expect($el).to.contain('text')` |\n| descendants(_selector_) | `.should('have.descendants', 'div')`  <br>`expect($el).to.have.descendants('div')` |\n\n## Sinon-Chai[​](#Sinon-Chai \"Direct link to Sinon-Chai\")\n\n[https://github.com/domenic/sinon-chai](https://github.com/domenic/sinon-chai)\n\nThese chainers are used on assertions with [`cy.stub()`](https://docs.cypress.io/api/commands/stub) and [`cy.spy()`](https://docs.cypress.io/api/commands/spy).\n\n| Sinon.JS property/method | Assertion |\n| --- | --- |\n| called | `.should('have.been.called')`  <br>`expect(spy).to.be.called` |\n| callCount | `.should('have.callCount', 3)`  <br>`expect(spy).to.have.callCount(n)` |\n| calledOnce | `.should('have.been.calledOnce')`  <br>`expect(spy).to.be.calledOnce` |\n| calledTwice | `.should('have.been.calledTwice')`  <br>`expect(spy).to.be.calledTwice` |\n| calledThrice | `.should('have.been.calledThrice')`  <br>`expect(spy).to.be.calledThrice` |\n| calledBefore | `.should('have.been.calledBefore', spy2)`  <br>`expect(spy1).to.be.calledBefore(spy2)` |\n| calledAfter | `.should('have.been.calledAfter', spy2)`  <br>`expect(spy1).to.be.calledAfter(spy2)` |\n| calledWithNew | `.should('have.been.calledWithNew')`  <br>`expect(spy).to.be.calledWithNew` |\n| alwaysCalledWithNew | `.should('have.always.been.calledWithNew')`  <br>`expect(spy).to.always.be.calledWithNew` |\n| calledOn | `.should('have.been.calledOn', context)`  <br>`expect(spy).to.be.calledOn(context)` |\n| alwaysCalledOn | `.should('have.always.been.calledOn', context)`  <br>`expect(spy).to.always.be.calledOn(context)` |\n| calledWith | `.should('have.been.calledWith', ...args)`  <br>`expect(spy).to.be.calledWith(...args)` |\n| alwaysCalledWith | `.should('have.always.been.calledWith', ...args)`  <br>`expect(spy).to.always.be.calledWith(...args)` |\n| calledOnceWith | `.should('have.been.calledOnceWith', ...args)`  <br>`expect(spy).to.be.calledOnceWith(...args)` |\n| calledWithExactly | `.should('have.been.calledWithExactly', ...args)`  <br>`expect(spy).to.be.calledWithExactly(...args)` |\n| alwaysCalledWithExactly | `.should('have.always.been.calledWithExactly', ...args)`  <br>`expect(spy).to.always.be.calledWithExactly(...args)` |\n| calledOnceWithExactly | `.should('have.been.calledOnceWithExactly', ...args)`  <br>`expect(spy).to.be.calledOnceWithExactly(...args)` |\n| calledWithMatch | `.should('have.been.calledWithMatch',...args)`  <br>`expect(spy).to.be.calledWithMatch(...args)` |\n| alwaysCalledWithMatch | `.should('have.always.been.calledWithMatch',...args)`  <br>`expect(spy).to.always.be.calledWithMatch(...args)` |\n| returned | `.should('have.returned', 'foo')`  <br>`expect(spy).to.have.returned(returnVal)` |\n| alwaysReturned | `.should('have.always.returned', 'foo')`  <br>`expect(spy).to.have.always.returned(returnVal)` |\n| threw | `.should('have.thrown', TypeError)`  <br>`expect(spy).to.have.thrown(errorObjOrErrorTypeStringOrNothing)` |\n| alwaysThrew | `.should('have.always.thrown', 'TypeError')`  <br>`expect(spy).to.have.always.thrown(errorObjOrErrorTypeStringOrNothing)` |\n\n## Adding New Assertions[​](#Adding-New-Assertions \"Direct link to Adding New Assertions\")\n\nBecause we are using `chai`, that means you can extend it however you'd like. Cypress will \"just work\" with new assertions added to `chai`. You can:\n\n*   Write your own `chai` assertions as [documented here](http://chaijs.com/api/plugins/).\n*   npm install any existing `chai` library and import into your test file or [support file](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Support-file).\n\n## Common Assertions[​](#Common-Assertions \"Direct link to Common Assertions\")\n\nHere is a list of common element assertions. Notice how we use these assertions (listed above) with [`.should()`](https://docs.cypress.io/api/commands/should). You may also want to read about how Cypress [retries](https://docs.cypress.io/guides/core-concepts/retry-ability) assertions.\n\n### Length[​](#Length \"Direct link to Length\")\n\n```\n// retry until we find 3 matching <li.selected>cy.get('li.selected').should('have.length', 3)\n```\n\n### Class[​](#Class \"Direct link to Class\")\n\n```\n// retry until this input does not have class disabledcy.get('form').find('input').should('not.have.class', 'disabled')\n```\n\n### Value[​](#Value \"Direct link to Value\")\n\n```\n// retry until this textarea has the correct valuecy.get('textarea').should('have.value', 'foo bar baz')\n```\n\n### Text Content[​](#Text-Content \"Direct link to Text Content\")\n\n```\n// assert the element's text content is exactly the given textcy.get('[data-testid=\"user-name\"]').should('have.text', 'Joe Smith')// assert the element's text includes the given substringcy.get('[data-testid=\"address\"]').should('include.text', 'Atlanta')// retry until this span does not contain 'click me'cy.get('a').parent('span.help').should('not.contain', 'click me')// the element's text should start with \"Hello\"cy.get('[data-testid=\"greeting\"]')  .invoke('text')  .should('match', /^Hello/)// use cy.contains to find an element with its text// matching the given regular expressioncy.contains('[data-testid=\"greeting\"]', /^Hello/)\n```\n\n### Visibility[​](#Visibility \"Direct link to Visibility\")\n\n```\n// retry until the element with// data-testid \"form-submit\" is visiblecy.get('[data-testid=\"form-submit\"]').should('be.visible')// retry until the list item with// text \"write tests\" is visiblecy.contains('[data-testid=\"todo\"] li', 'write tests').should('be.visible')\n```\n\n**Note:** if there are multiple elements, the assertions `be.visible` and `not.be.visible` act differently:\n\n```\n// retry until SOME elements are visiblecy.get('li').should('be.visible')// retry until EVERY element is invisiblecy.get('li.hidden').should('not.be.visible')\n```\n\nWatch the short video [\"Multiple elements and should('be.visible') assertion\"](https://www.youtube.com/watch?v=LxkrhUEE2Qk) that shows how to correctly check the visibility of elements.\n\n### Existence[​](#Existence \"Direct link to Existence\")\n\n```\n// retry until loading spinner no longer existscy.get('[data-testid=\"loading\"]').should('not.exist')\n```\n\n### State[​](#State \"Direct link to State\")\n\n```\n// retry until our radio is checkedcy.get(':radio').should('be.checked')\n```\n\n### CSS[​](#CSS \"Direct link to CSS\")\n\n```\n// retry until element has matching csscy.get('[data-testid=\"completed\"]').should(  'have.css',  'text-decoration',  'line-through')\n```\n\n```\n// retry while accordion css has the// \"display: none\" propertycy.get('[data-testid=\"accordion\"]').should('not.have.css', 'display', 'none')\n```\n\n### Disabled property[​](#Disabled-property \"Direct link to Disabled property\")\n\n```\n<input type=\"text\" data-testid=\"example-input\" disabled />\n```\n\n```\ncy.get('[data-testid=\"example-input\"]')  .should('be.disabled')  // let's enable this element from the test  .invoke('prop', 'disabled', false)cy.get('[data-testid=\"example-input\"]')  // we can use \"enabled\" assertion  .should('be.enabled')  // or negate the \"disabled\" assertion  .and('not.be.disabled')\n```\n\n## Negative assertions[​](#Negative-assertions \"Direct link to Negative assertions\")\n\nThere are positive and negative assertions. Examples of positive assertions are:\n\n```\ncy.get('[data-testid=\"todo-item\"]')  .should('have.length', 2)  .and('have.class', 'completed')\n```\n\nThe negative assertions have the \"not\" chainer prefixed to the assertion. Examples of negative assertions are:\n\n```\ncy.contains('first todo').should('not.have.class', 'completed')cy.get('[data-testid=\"loading\"]').should('not.be.visible')\n```\n\n#### False passing tests[​](#False-passing-tests \"Direct link to False-passing-tests\")\n\nNegative assertions may pass for reasons you weren't expecting. Let's say we want to test that a Todo list app adds a new Todo item after typing the Todo and pressing enter.\n\n**Positive assertions**\n\nWhen adding an element to the list and using a **positive assertion**, the test asserts a specific number of Todo items in our application.\n\nThe test below may still falsely pass if the application behaves unexpectedly, like adding a blank Todo, instead of adding the new Todo with the text \"Write tests\".\n\n```\ncy.get('[data-testid=\"todos\"]').should('have.length', 2)cy.get('[data-testid=\"new-todo\"]').type('Write tests{enter}')// using a positive assertion to check the// exact number of itemscy.get('[data-testid=\"todos\"]').should('have.length', 3)\n```\n\n**Negative assertions**\n\nBut when using a **negative assertion** in the test below, the test can falsely pass when the application behaves in multiple unexpected ways:\n\n*   The app deletes the entire list of Todo items instead of inserting the 3rd Todo\n*   The app deletes a Todo instead of adding a new Todo\n*   The app adds a blank Todo\n\n```\ncy.get('[data-testid=\"todos\"]').should('have.length', 2)cy.get('[data-testid=\"new-todo\"]').type('Write tests{enter}')// using negative assertion to check it's// not a number of itemscy.get('[data-testid=\"todos\"]').should('not.have.length', 2)\n```\n\n## Should callback[​](#Should-callback \"Direct link to Should callback\")\n\nIf built-in assertions are not enough, you can write your own assertion function and pass it as a callback to the `.should()` command. Cypress will automatically [retry](https://docs.cypress.io/guides/core-concepts/retry-ability) the callback function until it passes or the command times out. See the [`.should()`](https://docs.cypress.io/api/commands/should#Function) documentation.\n\n```\n<div class=\"main-abc123 heading-xyz987\">Introduction</div>\n```\n\n```\ncy.get('div').should(($div) => {  expect($div).to.have.length(1)  const className = $div[0].className  // className will be a string like \"main-abc123 heading-xyz987\"  expect(className).to.match(/heading-/)})\n```\n\n## Multiple assertions[​](#Multiple-assertions \"Direct link to Multiple assertions\")\n\nYou can attach multiple assertions to the same command.\n\n```\n<a  data-testid=\"assertions-link\"  class=\"active\"  href=\"https://on.cypress.io\"  target=\"_blank\">  Cypress Docs</a>\n```\n\n```\ncy.get('[data-testid=\"assertions-link\"]')  .should('have.class', 'active')  .and('have.attr', 'href')  .and('include', 'cypress.io')\n```\n\nNote that all chained assertions will use the same reference to the original subject. For example, if you wanted to test a loading element that first appears and then disappears, the following WILL NOT WORK because the same element cannot be visible and invisible at the same time:\n\n```\n// ⛔️ DOES NOT WORKcy.get('[data-testid=\"loading\"]').should('be.visible').and('not.be.visible')\n```\n\nInstead you should split the assertions and re-query the element:\n\n```\n// ✅ THE CORRECT WAYcy.get('[data-testid=\"loading\"]').should('be.visible')cy.get('[data-testid=\"loading\"]').should('not.be.visible')\n```\n\n## See also[​](#See-also \"Direct link to See also\")\n\n*   [Guide: Introduction to Cypress](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Assertions)\n*   [cypress-example-kitchensink Assertions](https://example.cypress.io/commands/assertions)\n*   [Cypress should callback](https://glebbahmutov.com/blog/cypress-should-callback/) blog post",
    "title": "Assertions | Cypress Documentation",
    "description": "Cypress bundles the popular Chai assertion",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/core-concepts/conditional-testing",
    "markdown": "# Conditional Testing | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   When conditional testing is a good choice for your tests\n*   Situations where conditional testing is impossible\n*   Strategies to handle common scenarios of conditional testing\n\n## Definition[​](#Definition \"Direct link to Definition\")\n\nConditional testing refers to the common programming pattern:\n\nMany of our users ask how to accomplish this seemingly simple idiom in Cypress.\n\nHere are some example use cases:\n\n*   How do I do something different whether an element does or doesn't exist?\n*   My application does A/B testing, how do I account for that?\n*   My users receive a \"welcome wizard\", but existing ones don't. Can I always close the wizard in case it's shown, and ignore it when it's not?\n*   Can I recover from failed Cypress commands like if a [cy.get()](https://docs.cypress.io/api/commands/get) doesn't find an element?\n*   I am trying to write dynamic tests that do something different based on the text on the page.\n*   I want to automatically find all `<a>` elements and based on which ones I find, I want to check that each link works.\n\nThe problem is - while first appearing simple, writing tests in this fashion often leads to flaky tests, random failures, and difficult to track down edge cases.\n\nLet's investigate why and how you can overcome these problems...\n\n## The problem[​](#The-problem \"Direct link to The problem\")\n\nThese days modern JavaScript applications are highly dynamic and mutable. Their state and the DOM are continuously changing over a period of time.\n\nThe problem with **conditional testing** is that it can only be used when the state has stabilized. In modern day applications, knowing when state is stable is oftentimes impossible.\n\nTo a human - if something changes 10ms or 100ms from now, we may not even notice this change and assume the state was always the same.\n\nTo a robot - even 10ms represents billions+ of clock cycles. The timescale difference is incredible.\n\nA human also has intuition. If you click a button and see a loading spinner, you will assume the state is in flux and will automatically wait for it to finish.\n\nA robot has no intuition - it will do exactly as it is programmed to do.\n\nTo illustrate this, let's take a straightforward example of trying to conditionally test unstable state.\n\n### The DOM is unstable[​](#The-DOM-is-unstable \"Direct link to The DOM is unstable\")\n\n```\n// your app code// random amount of timeconst random = Math.random() * 100// create a <button> elementconst btn = document.createElement('button')// attach it to the bodydocument.body.appendChild(btn)setTimeout(() => {  // add the class active after an indeterminate amount of time  btn.setAttribute('class', 'active')}, random)\n```\n\n```\n// your cypress test codeit('does something different based on the class of the button', () => {  // RERUN THIS TEST OVER AND OVER AGAIN  // AND IT WILL SOMETIMES BE TRUE, AND  // SOMETIMES BE FALSE.  cy.get('button').then(($btn) => {    if ($btn.hasClass('active')) {      // do something if it's active    } else {      // do something else    }  })})\n```\n\nDo you see the problem here? This test is non-deterministic. The `<button>` will sometimes have the class `active` and sometimes not. In **most** cases, you cannot rely on the state of the DOM to determine what you should conditionally do.\n\nThis is the heart of flaky tests. At Cypress we have designed our API to combat this type of flakiness at every step.\n\n## The situations[​](#The-situations \"Direct link to The situations\")\n\nThe **only** way to do conditional testing on the DOM is if you are 100% sure that the state has \"settled\" and there is no possible way for it to change.\n\nThat is it! In any other circumstance you will have flaky tests if you try to rely on the state of the DOM for conditional testing.\n\nLet's explore a few examples.\n\n### Server side rendering[​](#Server-side-rendering \"Direct link to Server side rendering\")\n\nIf your application is server side rendered without JavaScript that asynchronously modifies the DOM - congratulations, you can do conditional testing on the DOM!\n\nWhy? Because if the DOM is not going to change after the `load` event occurs, then it can accurately represent a stable state of truth.\n\nYou can safely skip down to the bottom where we provide examples of conditional testing.\n\n### Client side rendering[​](#Client-side-rendering \"Direct link to Client side rendering\")\n\nHowever, in most modern applications these days - when the `load` event occurs, usually nothing has rendered on the screen. It is usually at this moment that your scripts begin to load dynamic content and begin to render asynchronously.\n\nUnfortunately, it is not possible for you to use the DOM to do conditional testing. To do this would require you to know with 100% guarantee that your application has finished all asynchronous rendering and that there are no pending network requests, setTimeouts, intervals, postMessage, or async/await code.\n\nThis is difficult to do (if not impossible) without making changes to your application. You could use a library like [Zone.js](https://github.com/angular/angular/tree/master/packages/zone.js), but even that does not capture every async possibility.\n\nIn other words, you cannot do conditional testing safely if you want your tests to run 100% consistently.\n\nBut do not fret - there are better workarounds to still achieve conditional testing **without** relying on the DOM. You have to _anchor_ yourself to another piece of truth that is not mutable.\n\n## The strategies[​](#The-strategies \"Direct link to The strategies\")\n\nIf you are unable to guarantee that the DOM is stable - don't worry, there are other ways you can do conditional testing or work around the problems inherent with it.\n\n**You could:**\n\n*   Remove the need to ever do conditional testing.\n*   Force your application to behave deterministically.\n*   Check other sources of truth (like your server or database).\n*   Embed data into other places (cookies / local storage) you could read off.\n*   Add data to the DOM that you can read off to know how to proceed.\n\nLet's explore some examples of conditional testing that will pass or fail 100% of the time.\n\n### A/B campaign[\n\nEnd-to-End Only\n\n](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-E2E-Testing)[​](#AB-campaign \"Direct link to AB-campaign\")\n\nIn this example let's assume you visit your website and the content will be different based on which A/B campaign your server decides to send. Perhaps it is based on geo-location, IP address, time of day, locale, or other factors that are difficult to control. How can you write tests in this manner?\n\nControl which campaign gets sent, or provide a reliable means to know which one it is.\n\n#### Use URL query params:[​](#Use-URL-query-params \"Direct link to Use URL query params:\")\n\n```\n// tell your back end server which campaign you want sent// so you can deterministically know what it is ahead of timecy.visit('https://example.cypress.io?campaign=A')...cy.visit('https://example.cypress.io?campaign=B')...cy.visit('https://example.cypress.io?campaign=C')\n```\n\nNow there is not even a need to do conditional testing since you are able to know ahead of time what campaign was sent. Yes, this may require server side updates, but you have to make an untestable app testable if you want to test it!\n\n#### Use the server:[​](#Use-the-server \"Direct link to Use the server:\")\n\nAlternatively, if your server saves the campaign with a session, you could ask your server to tell you which campaign you are on.\n\n```\n// this sends us the session cookiescy.visit('https://example.cypress.io')// assuming this sends us back// the campaign informationcy.request('https://example.cypress.io/me')  .its('body.campaign')  .then((campaign) => {    // runs different cypress test code    // based on the type of campaign    return campaigns.test(campaign)  })\n```\n\n#### Use session cookies:[​](#Use-session-cookies \"Direct link to Use session cookies:\")\n\nAnother way to test this is if your server sent the campaign in a session cookie that you could read off.\n\n```\ncy.visit('https://example.cypress.io')cy.getCookie('campaign').then((campaign) => {  return campaigns.test(campaign)})\n```\n\n#### Embed data in the DOM:[​](#Embed-data-in-the-DOM \"Direct link to Embed data in the DOM:\")\n\nAnother valid strategy would be to embed data directly into the DOM - but do so in a way where this data is **always** present and query-able. It would have to be present 100% of the time, else this would not work.\n\n```\ncy.get('html')  .should('have.attr', 'data-campaign')  .then((campaign) => {    return campaigns.test(campaign)  })\n```\n\n### Welcome wizard[\n\nEnd-to-End Only\n\n](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-E2E-Testing)[​](#Welcome-wizard \"Direct link to Welcome-wizard\")\n\nIn this example, let's imagine you are running a bunch of tests and each time you load your application, it may show a \"Welcome Wizard\" modal.\n\nIn this situation, you want to close the wizard when it is present and ignore it if it is not.\n\nThe problem with this is that if the wizard renders asynchronously (as it likely does) you cannot use the DOM to conditionally dismiss it.\n\nOnce again - we will need another reliable way to achieve this without involving the DOM.\n\nThese patterns are pretty much the same as before:\n\n#### Use the URL to control it:[​](#Use-the-URL-to-control-it \"Direct link to Use the URL to control it:\")\n\n```\n// dont show the wizardcy.visit('https://example.cypress.io?wizard=0')\n```\n\n```\n// show the wizardcy.visit('https://example.cypress.io?wizard=1')\n```\n\nWe would likely need to update our client side code to check whether this query param is present. Now we know ahead of time whether it will or will not be shown.\n\n#### Use Cookies to know ahead of time:[​](#Use-Cookies-to-know-ahead-of-time \"Direct link to Use Cookies to know ahead of time:\")\n\nIn the case where you cannot control it, you can still conditionally dismiss it **if** you know whether it is going to be shown.\n\n```\ncy.visit('https://example.cypress.io')cy.getCookie('showWizard')  .then((val) => {    if (val) {      // dismiss the wizard conditionally by enqueuing these      // three additional commands      cy.get('#wizard').contains('Close').click()    }  })cy.get(...)    // more commands here  .should(...) // more commands here  .click()     // more commands here\n```\n\n#### Use your server or database:[​](#Use-your-server-or-database \"Direct link to Use your server or database:\")\n\nIf you store and/or persist whether to show the wizard on the server, then ask it.\n\n```\ncy.visit('https://example.cypress.io')cy.request('https://example.cypress.io/me')  .its('body.showWizard')  .then((val) => {    if (val) {      // dismiss the wizard conditionally by enqueuing these      // three additional commands      cy.get('#wizard').contains('Close').click()    }  })cy.get(...)    // more commands here  .should(...) // more commands here  .click()     // more commands here\n```\n\nAlternatively, if you are creating users, it might take less time to create the user and set whether you want the wizard to be shown ahead of time. That would avoid this check later.\n\n#### Embed data in DOM:[​](#Embed-data-in-DOM \"Direct link to Embed data in DOM:\")\n\nAnother valid strategy would be to embed data directly into the DOM but to do so in a way that the data is **always** present and query-able. The data would have to be present 100% of the time, otherwise this strategy would not work.\n\n```\ncy.get('html').should('have.attr', 'data-wizard').then((wizard) => {  if (wizard) {    // dismiss the wizard conditionally by enqueuing these    // three additional commands    cy.get('#wizard').contains('Close').click()  }})cy.get(...)    // more commands here  .should(...) // more commands here  .click()     // more commands here\n```\n\n### Element existence[​](#Element-existence \"Direct link to Element existence\")\n\nIn the case where you **are** trying to use the DOM to do conditional testing, you can utilize the ability to synchronously query for elements in Cypress to create control flow.\n\ncaution\n\nIn the event you did not read a word above and skipped down here, we will reiterate it one more time:\n\nYou cannot do conditional testing on the DOM unless you are either:\n\n*   Server side rendering with no asynchronous JavaScript.\n*   Using client side JavaScript that **only** ever does synchronous rendering.\n\nIt is crucial that you understand how your application works else you will write flaky tests.\n\nLet's imagine we have a scenario where our application may do two separate things that we are unable to control. In other words you tried every strategy above and for whatever reason you were unable to know ahead of time what your application will do.\n\nTesting this in Cypress is possible.\n\n```\n// app code$('button').on('click', (e) => {  // do something synchronously randomly  if (Math.random() < 0.5) {    // append an input    $('<input />').appendTo($('body'))  } else {    // or append a textarea    $('<textarea />').appendTo($('body'))  }})\n```\n\n```\n// click the button causing the new// elements to appearcy.get('button').click()cy.get('body')  .then(($body) => {    // synchronously query from body    // to find which element was created    if ($body.find('input').length) {      // input was found, do something else here      return 'input'    }    // else assume it was textarea    return 'textarea'  })  .then((selector) => {    // selector is a string that represents    // the selector we could use to find it    cy.get(selector).type(`found the element by selector ${selector}`)  })\n```\n\nWe will reiterate one more time. Had the `<input>` or the `<textarea>` been rendered asynchronously, you could not use the pattern above. You would have to involve arbitrary delays which will not work in every situation, will slow down your tests, and will still leave chances that your tests are flaky (and are an all-around anti-pattern).\n\nCypress is built around creating **reliable tests**. The secret to writing good tests is to provide as much \"state\" and \"facts\" to Cypress and to \"guard it\" from issuing new commands until your application has reached the desired state it needs to proceed.\n\nDoing conditional testing adds a huge problem - that the test writers themselves are unsure what the given state will be. In those situations, the only reliable way to have accurate tests is to embed this dynamic state in a reliable and consistent way.\n\nIf you are not sure if you have written a potentially flaky test, there is a way to figure it out. Repeat the test an excessive number of times, and then repeat by modifying the Developer Tools to throttle the Network and the CPU. This will create different loads that simulate different environments (like CI). If you've written a good test, it will pass or fail 100% of the time.\n\n```\nCypress._.times(100, (i) => {  it(`num ${i + 1} - test the thing conditionally`, () => {    // do the conditional bits 100 times  })})\n```\n\n### Dynamic text[​](#Dynamic-text \"Direct link to Dynamic text\")\n\nThe pattern of doing something conditionally based on whether or not certain text is present is identical to element existence above.\n\n#### Conditionally check whether an element has certain text:[​](#Conditionally-check-whether-an-element-has-certain-text \"Direct link to Conditionally check whether an element has certain text:\")\n\n```\n// this only works if there's 100% guarantee// body has fully rendered without any pending changes// to its statecy.get('body').then(($body) => {    // synchronously ask for the body's text    // and do something based on whether it includes    // another string    if ($body.text().includes('some string')) {      // yup found it      cy.get(...).should(...)    } else {      // nope not here      cy.get(...).should(...)    }  })\n```\n\n## Error Recovery[​](#Error-Recovery \"Direct link to Error Recovery\")\n\nMany of our users ask how they can recover from failed commands.\n\n> If I had error handling, I could try to find X and if X fails go find Y\n\nBecause error handling is a common idiom in most programming languages, and especially in Node, it seems reasonable to expect to do that in Cypress.\n\nHowever, this is really the same question as asking to do conditional testing, but wrapped up in a slightly different implementation detail.\n\nFor instance you may want to do this:\n\ndanger\n\nThe following code is not valid.\n\n```\n//! You cannot add error handling to Cypress commands//! This code is just for demonstration purposescy.get('button')  .contains('hello')  .catch((err) => {    // oh no the button wasn't found    // (or something else failed)    cy.get('somethingElse').click()  })\n```\n\nIf you've been reading along, then you should already have a grasp on why trying to implement conditional code with asynchronous rendering is not a good idea. If the test writer cannot accurately predict the given state of the system, then neither can Cypress. Error handling offers no additional proof this can be done deterministically.\n\nYou should think of failed commands in Cypress as akin to uncaught exceptions in server side code. It is not possible to try to recover in those scenarios because the system has transitioned to an unreliable state. Instead you generally always opt to crash and log. When Cypress fails the test - that is exactly what it is doing. Bailing out, skipping any remaining commands in the test, and logging out the failure.\n\nBut... for the sake of the argument, let's imagine for a moment you did have error handling in Cypress.\n\nEnabling this would mean that for every single command, it would recover from errors, but only after each applicable command timeout was reached. Since timeouts start at 4 seconds (and exceed from there), this means that it would only fail after a long, long time.\n\nLet's reimagine our \"Welcome Wizard\" example from before.\n\ndanger\n\nThe following code is not valid.\n\n```\n//! You cannot add error handling to Cypress commands.//! This code is just for demonstration purposesfunction keepCalmAndCarryOn () {  cy.get(...).should(...).click()}cy  .get('#wizard').contains('Close').click()  .catch((err) => {    // no problem, i guess the wizard didn't exist    // or something... no worries    keepCalmAndCarryOn()  })  .then(keepCalmAndCarryOn)\n```\n\nIn the **best** case scenario, we have wasted at LEAST 4 seconds waiting on the `<#wizard>` element to possibly exist before we errored and continued on.\n\nBut in the **worst** case scenario we have a situation where the `<#wizard>` **was** going to be rendered, but it didn't render within our given timeout. Let's assume this was due to a pending network request or WebSocket message or a queued timer, or anything else.\n\nIn this situation, not only did we wait a long period of time, but when the `<#wizard>` element was eventually shown it's likely caused an error downstream on other commands.\n\nIf you cannot accurately know the state of your application then no matter what programming idioms you have available - **you cannot write 100% deterministic tests**.",
    "title": "Conditional Testing | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/core-concepts/cypress-app",
    "markdown": "# Cypress App | Cypress Documentation\n\ninfo\n\n## What you'll learn[​](#What-youll-learn \"Direct link to What-youll-learn\")\n\n*   The names and purposes of the visual parts of Cypress\n*   How to use the Selector Playground for targeting elements\n*   How to debug tests using the built-in features of Cypress\n\n## Overview[​](#Overview \"Direct link to Overview\")\n\nThe Cypress desktop app has powerful features for creating, configuring, browsing, and most importantly running your tests. We'll touch on a few of the different functions before moving on to the Test Runner, the heart of the Cypress testing experience.\n\ninfo\n\n**Cypress Cloud integration**\n\nWhen you configure the open source Cypress app to record tests to [Cypress Cloud](https://docs.cypress.io/guides/cloud/introduction), you'll see data from your latest recorded runs directly in the Cypress app. This increased visibility into your test history allows you to debug your tests faster and more effectively, all within your local workflow.\n\nThe data used by these features is pulled from Cypress Cloud, so they will only reflect test results that were [recorded](https://docs.cypress.io/guides/cloud/getting-started#Set-up-a-project-to-record).\n\nIf you're not sure whether you're logged in, you can always check using the profile control in the top right of the window.\n\n### Launchpad[​](#Launchpad \"Direct link to Launchpad\")\n\n![The Launchpad](https://docs.cypress.io/img/guides/core-concepts/cypress-app/the-launchpad.png)\n\nThe Launchpad is your portal to Cypress, helping with onboarding, choosing a testing type and launching a browser.\n\nOnce you get comfortable with Cypress you might find you don't need the Launchpad any more. In this case [you can run `cypress open` with the `--browser` and `--component` or `--e2e` options](https://docs.cypress.io/guides/guides/command-line#cypress-open) to go straight to the Specs page.\n\n### Specs[​](#Specs \"Direct link to Specs\")\n\n![Specs](https://docs.cypress.io/img/guides/core-concepts/cypress-app/spec-explorer.png)\n\nOn choosing your browser in the Launchpad, you'll be presented with a list of your specs, their names, locations, and information about your latest recorded runs. Here you can launch specs by clicking them, create new blank or example specs, or search specs by name (handy for large test suites).\n\nWe've made the following spec data available directly on the Specs page:\n\n#### Last updated[​](#Last-updated \"Direct link to Last updated\")\n\nThis column tells you when the code of this spec was last updated, using local file data from git or your own filesystem. It surfaces the change history of your tests, so you can quickly find the most relevant specs as you’re browsing your project.\n\nThis column will vary from machine to machine, as it reflects the state of the code as stored on that computer.\n\n#### Latest runs[​](#Latest-runs \"Direct link to Latest runs\")\n\nThis column shows the last time the spec was run, and the last four returned statuses. Results are scoped to your current git branch if available, falling back to the default branch if not, then finally all branches.\n\nWith this intelligence you can monitor, run, and fix tests locally within CI workflows, and then further dig into your results by clicking through to Cypress Cloud.\n\nThe runs data is sourced from Cypress Cloud (see [note above](#Overview)) so it will be the same everywhere.\n\n#### Average duration[​](#Average-duration \"Direct link to Average duration\")\n\nThis column indicates the time taken to run the entire spec file, averaged over the last four runs, so that you can quickly identify and take action to improve the performance of your long-running tests.\n\nAgain, this analysis comes from Cypress Cloud.\n\n#### Flake annotation[​](#Flake-annotation \"Direct link to Flake annotation\")\n\ninfo\n\n**What is a flaky test?**\n\nA test is considered to be [flaky](https://docs.cypress.io/guides/cloud/flaky-test-management) when it can pass and fail across multiple retry attempts without any code changes.\n\nSpecs with flaky tests are flagged with an indicator beside the spec name. This means you can easily discern which areas of your application might result in an unreliable user experience.\n\nThe flake indicator will display if any tests in the given spec have been flaky in your latest runs (limited to 4). Hovering over the indicator will show a tooltip with the following analytics, based off the last **50** runs:\n\n*   Rate (flaky runs divided by total runs)\n*   Severity (flaky rate at a glance)\n*   Last flaky (how many runs ago)\n\nClicking on the flake indicator will take you to the spec’s [Flaky Test Analytics in Cypress Cloud](https://cloud.cypress.io/projects/7s5okt/analytics/flaky-tests).\n\n#### Running Specs[​](#Running-Specs \"Direct link to Running Specs\")\n\n![Specs](https://docs.cypress.io/img/guides/core-concepts/cypress-app/spec-page.png)\n\nTo run a spec, simply click the row with the spec you would like to run. You will be taken to the [Test Runner](#Test-Runner) and the spec will execute. You can narrow down the list of specs by typing into the search bar (1).\n\nIt is also possible to run multiple specs sequentially using the [`experimentalRunAllSpecs`](https://docs.cypress.io/guides/references/experiments#End-to-End-Testing) (2).\n\ncaution\n\n**Experimental Run All Specs**\n\n`experimentalRunAllSpecs` currently works with End to End Testing.\n\nRunning multiple specs sequentially is currently an [experimental feature](https://docs.cypress.io/guides/references/configuration#Experiments) and it may change in the future. There are some known limitations outlined in this [GitHub Discussion](https://github.com/cypress-io/cypress/discussions/21628).\n\nRunning a large number of specs sequentially can consume more resources.\n\n### Runs[​](#Runs \"Direct link to Runs\")\n\n![Recorded Runs](https://docs.cypress.io/img/guides/core-concepts/cypress-app/recorded-runs.jpg)\n\nThis screen shows detailed information about the most recently recorded [test runs](https://docs.cypress.io/guides/cloud/recorded-runs#Latest-Runs) to Cypress Cloud, showing the latest first.\n\nCypress uses Git to show runs for your branch. Ensure that version control is properly configured and that you are sending Git information to Cypress Cloud. If no runs are found for your current branch, all runs for your project are shown as a fallback.\n\nThe title of each run is taken from the [git commit message](https://www.educative.io/edpresso/git-commit-message-simply-explained) for that change, and clicking on it will take you to the corresponding run page in Cypress Cloud.\n\n### Debug[​](#Debug \"Direct link to Debug\")\n\n![Debug](https://docs.cypress.io/img/guides/core-concepts/cypress-app/debug-page.png)\n\nThe Debug page allows you to easily debug failed CI test runs from within the Cypress app. From this page, you can review, rerun, and debug failed CI test runs that are recorded to Cypress Cloud (see [note above](#Overview)) - all without leaving the Cypress app.\n\nThis feature eliminates the tedious process of switching between Cypress, your local editor, and CI output, in order to fix failed tests. It does this by enabling you to use the [Test Runner](#Test-Runner) to run only the tests that failed in your last recorded test run, as well as review the [Test Replay](https://docs.cypress.io/guides/cloud/test-replay) and other artifacts like screenshots, videos, and logs from your tests.\n\nThe Debug page shows the latest completed [test run](https://docs.cypress.io/guides/cloud/recorded-runs#Latest-Runs) that matches the `HEAD` commit (the commit currently checked out in the working directory) of your local project. Users can see and switch to relevant runs within the Debug page. If no run is found for your current commit, then Cypress shows the most recent run in your branch's history up until the current commit. The first **100** failed tests are listed, with a link to Cypress Cloud to review the full run.\n\nTo use this feature, you must ensure that git is properly configured for your project and that you are sending git information to Cypress Cloud. Under some environment setups (e.g. `docker`/`docker-compose`), you may have to pass git information using [custom environment variables](https://docs.cypress.io/guides/continuous-integration/introduction#Git-information).\n\n### Cloud Run Notifications[​](#Cloud-Run-Notifications \"Direct link to Cloud Run Notifications\")\n\n![App notification on macOS](https://docs.cypress.io/img/guides/cloud/runs/app-notification.jpg)\n\nYou can receive notifications in the Cypress app for recorded runs directly from Cypress Cloud. Learn more about [Cloud Run Notifications](https://docs.cypress.io/guides/cloud/recorded-runs#Notifications).\n\n## Test Runner[​](#Test-Runner \"Direct link to Test Runner\")\n\nAt the core of the app is the Test Runner itself. Cypress runs tests interactively, allowing you to see commands as they execute while also viewing the Application or Component Under Test, and exploring its DOM.\n\n![The Test Runner](https://docs.cypress.io/img/guides/core-concepts/cypress-app/test-runner.png)\n\n## Command Log[​](#Command-Log \"Direct link to Command Log\")\n\nThe left-hand side of the Test Runner is a visual representation of your test suite. Each test block is properly nested and each test, when clicked, displays every Cypress command executed within the test's block as well as any commands executed in relevant `before`, `beforeEach`, `afterEach`, and `after` hooks.\n\n![Cypress app](https://docs.cypress.io/img/guides/core-concepts/cypress-app/command-log.png)\n\n### Open files in your IDE[​](#Open-files-in-your-IDE \"Direct link to Open files in your IDE\")\n\nThere are some places in the Command Log that display a link to the relevant file where the code is located. Clicking on this link will open the file in your [preferred file opener](https://docs.cypress.io/guides/tooling/IDE-integration#File-Opener-Preference).\n\n![Open file in your IDE](https://docs.cypress.io/img/guides/core-concepts/cypress-app/open-file-in-IDE.gif)\n\n### Time traveling[​](#Time-traveling \"Direct link to Time traveling\")\n\nEach command, when hovered over, restores the Application or Component Under Test (right-hand side) to the state it was in when that command executed. This allows you to **time travel** back to previous states when testing.\n\ntip\n\nBy default, Cypress keeps **50** tests worth of snapshots and command data for time traveling. If you are seeing extremely high memory consumption in your browser, you may want to lower the `numTestsKeptInMemory` in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration#Global).\n\nIn the following example, hovering over the [`contains`](https://docs.cypress.io/api/commands/contains) command in the Command Log changes the state of the [AUT](#Application-Under-Test) preview:\n\n![Hovering over the contains tab highlights the dom element in the App in the Cypress app](https://docs.cypress.io/img/guides/core-concepts/cypress-app/first-test-hover-contains.png)\n\nCypress automatically travels back in time to a snapshot of when a hovered-over command resolved. Additionally, since [`cy.contains()`](https://docs.cypress.io/api/commands/contains) finds DOM elements on the page, Cypress also highlights the element and scrolls it into view (to the top of the page).\n\nAlso note that as we hover over the [`contains`](https://docs.cypress.io/api/commands/contains) command, Cypress reverts back to the URL that was present when the snapshot was taken.\n\n![The url address bar shows https://example.cypress.io/](https://docs.cypress.io/img/guides/core-concepts/cypress-app/first-test-url-revert.png)\n\n### Pinning snapshots[​](#Pinning-snapshots \"Direct link to Pinning snapshots\")\n\nEach command, when clicked on, displays extra information in the dev tools console. Clicking also **pins** the Application or Component Under Test (right-hand side) to its previous state, or **snapshot**, when the command executed.\n\nIn the following example, clicking on the `CLICK` command highlights it in purple, and does three other things worth noting:\n\n![A click on the click command in the Command Log with Cypress app labeled as 1, 2, 3](https://docs.cypress.io/img/guides/core-concepts/cypress-app/first-test-click-revert.png)\n\n#### 1\\. Pinned snapshots[​](#1-Pinned-snapshots \"Direct link to 1. Pinned snapshots\")\n\nWe have now **pinned** this snapshot. Hovering over other commands will not revert to them. This gives us a chance to manually inspect the DOM of our application under test at the time the snapshot was taken.\n\n#### 2\\. Event hitbox[​](#2-Event-hitbox \"Direct link to 2. Event hitbox\")\n\nSince [`.click()`](https://docs.cypress.io/api/commands/click) is an action command, that means we also see a red hitbox at the coordinates the event took place.\n\nThere is also a new menu panel. Some commands (like action commands) will take multiple snapshots: **before** and **after**. We can now cycle through these.\n\nThe **before** snapshot is taken prior to the click event firing. The **after** snapshot is taken immediately after the click event. Although this click event caused our browser to load a new page, it's not an instantaneous transition. Depending on how fast your page loaded, you may still see the same page, or a blank screen as the page is unloading and in transition.\n\nWhen a command causes an immediate visual change in our application, cycling between before and after will update our snapshot. We can see this in action by clicking the `TYPE` command in the Command Log. Now, clicking **before** will show us the input in a default state, showing the placeholder text. Click **after** will show us what the input looks like when the `TYPE` command has completed.\n\n### Page events[​](#Page-events \"Direct link to Page events\")\n\nIn addition to showing all the commands that were called, the command log also shows important events from your application or component when they occur. Notice these look different (they are gray and without a number).\n\n![Command log shows 'Page load --page loaded--' and 'New url https://example.cypress.io/'](https://docs.cypress.io/img/guides/core-concepts/cypress-app/first-test-page-load.png)\n\n**Cypress logs out page events for:**\n\n*   Network XHR Requests\n*   URL hash changes\n*   Page Loads\n*   Form Submissions\n\n### Instrument panel[​](#Instrument-panel \"Direct link to Instrument panel\")\n\nFor certain commands like [`cy.intercept()`](https://docs.cypress.io/api/commands/intercept), [`cy.stub()`](https://docs.cypress.io/api/commands/stub), and [`cy.spy()`](https://docs.cypress.io/api/commands/spy), an extra instrument panel is displayed above the test to give more information about the state of your tests.\n\n#### Routes[​](#Routes \"Direct link to Routes\")\n\n![Routes Instrument Panel](https://docs.cypress.io/img/guides/core-concepts/cypress-app/instrument-panel-routes.png)\n\n#### Stubs[​](#Stubs \"Direct link to Stubs\")\n\n![Stubs Instrument Panel](https://docs.cypress.io/img/guides/core-concepts/cypress-app/instrument-panel-stubs.png)\n\n#### Spies[​](#Spies \"Direct link to Spies\")\n\n![Spies Instrument Panel](https://docs.cypress.io/img/guides/core-concepts/cypress-app/instrument-panel-spies.png)\n\n## Preview pane[​](#Preview-pane \"Direct link to Preview pane\")\n\nThe right-hand side of the Test Runner is where the Application or Component Under Test is rendered.\n\n### Application Under Test[\n\nEnd-to-End Only\n\n](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-E2E-Testing)[​](#Application-Under-Test \"Direct link to Application-Under-Test\")\n\nIn [E2E Testing](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-E2E-Testing), the right-hand side of the Test Runner is used to display the Application Under Test (AUT): the application that was navigated to using a [`cy.visit()`](https://docs.cypress.io/api/commands/visit) or any subsequent routing calls made from the visited application.\n\nIn the example below, we wrote the following code in our test file:\n\n```\ncy.visit('https://example.cypress.io')cy.title().should('include', 'Kitchen Sink')\n```\n\nIn the corresponding application preview below, you can see `https://example.cypress.io` is being displayed in the right-hand side. Not only is the application visible, but it is fully interactive. You can open your developer tools to inspect elements as you would in your normal application. The DOM is completely available for debugging.\n\n![Application Under Test](https://docs.cypress.io/img/guides/core-concepts/cypress-app/application-under-test.png)\n\nThe AUT also displays in the size and orientation specified in your tests. You can change the size or orientation with the [`cy.viewport()`](https://docs.cypress.io/api/commands/viewport) command or in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration#Viewport). If the AUT does not fit within the current browser window, it is scaled appropriately to fit within the window.\n\nThe current size and scale of the AUT is displayed in the top right corner of the window.\n\nThe image below shows that our application is displaying at `1000px` width, `660px` height and scaled to `100%`.\n\n![Viewport Scaling](https://docs.cypress.io/img/guides/core-concepts/cypress-app/viewport-scaling.png)\n\ninfo\n\nThe right-hand side may also be used to display syntax errors in your spec file that prevent the tests from running.\n\n![Errors](https://docs.cypress.io/img/guides/core-concepts/cypress-app/aut-error-e2e.png)\n\ncaution\n\nInternally, the AUT renders within an iframe. This can sometimes cause unexpected behaviors [explained here.](https://docs.cypress.io/api/commands/window#Cypress-uses-2-different-windows)\n\n### Component Under Test[\n\nComponent Only\n\n](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-Component-Testing)[​](#Component-Under-Test \"Direct link to Component-Under-Test\")\n\nIn [Component testing](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-Component-Testing), the right-hand side of the Test Runner is used to display the Component Under Test (CUT): the component that was mounted using the [`cy.mount()`](https://docs.cypress.io/api/commands/mount) command.\n\nIn the following example, we have the following test in our spec file:\n\n*   React\n*   Vue\n\n```\nit('should have password input of type password', () => {  mount(<LoginForm />)  cy.contains('Password').find('input').should('have.attr', 'type', 'password')})\n```\n\nIn the corresponding Component Preview below, you can see the `LoginForm` component is being displayed in the right-hand side. Not only is the component visible, but it is fully interactable. You can open your developer tools to inspect elements as you would in your normal application. The DOM is completely available for debugging.\n\n![Cypress app showing mounted component and password assertion](https://docs.cypress.io/img/guides/core-concepts/component-under-test.png)\n\nThe CUT also displays in the size and orientation specified in your tests. You can change the size or orientation with the [`cy.viewport()`](https://docs.cypress.io/api/commands/viewport) command or in your [Cypress configuration](https://docs.cypress.io/guides/references/configuration#Viewport). If the CUT does not fit within the current browser window, it is scaled appropriately to fit within the window.\n\nThe current size and scale of the CUT is displayed in the top right corner of the window.\n\nThe image below shows that our application is displaying at `500px` width, `500px` height and scaled to `100%`.\n\n![Cypress app showing mounted component test viewport scale](https://docs.cypress.io/img/guides/core-concepts/cypress-app/viewport-scaling-ct.png)\n\ninfo\n\nThe right-hand side may also be used to display syntax errors in your spec file that prevent the tests from running.\n\n![Cypress app showing error as application under test](https://docs.cypress.io/img/guides/core-concepts/cypress-app/aut-error-ct.png)\n\ncaution\n\nInternally, the AUT renders within an iframe. This can sometimes cause unexpected behaviors [explained here.](https://docs.cypress.io/api/commands/window#Cypress-uses-2-different-windows)\n\n## Selector Playground[​](#Selector-Playground \"Direct link to Selector Playground\")\n\nThe Selector Playground is an interactive feature that helps you:\n\n*   Determine a unique selector for an element.\n*   See what elements match a given selector.\n*   See what element matches a string of text.\n\ninfo\n\nNeeding a low code approach to create tests? Use [Cypress Studio](https://docs.cypress.io/guides/references/cypress-studio) to record your browser interactions.\n\n### Uniqueness[​](#Uniqueness \"Direct link to Uniqueness\")\n\nCypress will automatically calculate a **unique selector** to use targeted element by running through a series of selector strategies.\n\n### Default Selector Priority[​](#Default-Selector-Priority \"Direct link to Default Selector Priority\")\n\n1.  `data-cy`\n2.  `data-test`\n3.  `data-testid`\n4.  `data-qa`\n5.  `id`\n6.  `class`\n7.  `tag`\n8.  `attributes`\n9.  `nth-child`\n\ntip\n\n**This is configurable**\n\nCypress allows you to control how a selector is determined.\n\nUse the [Cypress.SelectorPlayground](https://docs.cypress.io/api/cypress-api/selector-playground-api) API to control the selectors you want returned.\n\n### Best practices[​](#Best-practices \"Direct link to Best practices\")\n\nYou may find yourself struggling to write good selectors because:\n\n*   Your application or component uses dynamic ID's and class names\n*   Your tests break whenever there are CSS or content changes\n\nTo help with these common challenges, the Selector Playground automatically prefers certain `data-*` attributes when determining a unique selector.\n\nPlease read our [Best Practices guide](https://docs.cypress.io/guides/references/best-practices#Selecting-Elements) on helping you target elements and prevent tests from breaking on CSS or JS changes.\n\n### Finding selectors[​](#Finding-selectors \"Direct link to Finding selectors\")\n\nTo open the Selector Playground, click the button next to the URL at the top of the Test Runner. Hover over elements in your app to preview a unique selector for that element in the tooltip.\n\n![Opening selector playground and hovering over elements](https://docs.cypress.io/img/guides/core-concepts/cypress-app/open-selector-playground.gif)\n\nClick on the element and its selector will appear at the top. From there, you can copy it to your clipboard ( ) or print it to the console ( ).\n\n![Clicking an element, copying its selector to clipboard, printing it to the console](https://docs.cypress.io/img/guides/core-concepts/cypress-app/copy-selector-in-selector-playground.gif)\n\n### Running experiments[​](#Running-experiments \"Direct link to Running experiments\")\n\nThe box at the top that displays the selector is also a text input.\n\n#### Editing a selector[​](#Editing-a-selector \"Direct link to Editing a selector\")\n\nWhen you edit the selector, it will show you how many elements match and highlight those elements in your app.\n\n![Type a selector to see what elements it matches](https://docs.cypress.io/img/guides/core-concepts/cypress-app/typing-a-selector-to-find-in-playground.gif)\n\n#### Switching to contains[​](#Switching-to-contains \"Direct link to Switching to contains\")\n\nYou can also experiment with what [`cy.contains()`](https://docs.cypress.io/api/commands/contains) would yield given a string of text. Click on `cy.get` and switch to `cy.contains`.\n\nType in text to see which element it matches. Note that [`cy.contains()`](https://docs.cypress.io/api/commands/contains) only yields the first element that matches the text, even if multiple elements on the page contain the text.\n\n![Experiment with cy.contains](https://docs.cypress.io/img/guides/core-concepts/cypress-app/cy-contains-in-selector-playground.gif)\n\n#### Disabling highlights[​](#Disabling-highlights \"Direct link to Disabling highlights\")\n\nIf you would like to interact with your app while the Selector Playground is open, the element highlighting might get in the way. Toggling the highlighting off will allow you to interact with your app more easily.\n\n![Turn off highlighting](https://docs.cypress.io/img/guides/core-concepts/cypress-app/turn-off-highlight-in-selector-playground.gif)\n\n## Keyboard shortcuts[​](#Keyboard-shortcuts \"Direct link to Keyboard shortcuts\")\n\nThere are keyboard shortcuts to quickly perform common actions from within Cypress.\n\n| Key | Action |\n| --- | --- |\n| `r` | Rerun tests |\n| `s` | Stop tests |\n| `f` | Bring focus to 'specs' window |\n\n![Tooltips show keyboard shortcuts](https://docs.cypress.io/img/guides/core-concepts/cypress-app/keyboard-shortcuts.png)\n\n## Debugging[​](#Debugging \"Direct link to Debugging\")\n\nIn addition to the features already mentioned, Cypress comes with a host of debugging tools to help you understand a test. You can:\n\n*   See detailed information about [errors](#Errors) that occur.\n*   Receive additional [console output](#Console-output) about each command.\n*   [Pause commands](#Special-commands) and step through them iteratively.\n\n### Errors[​](#Errors \"Direct link to Errors\")\n\nCypress prints several pieces of information when an error occurs during a Cypress test.\n\n1.  **Error name**: This is the type of error (e.g. `AssertionError`, `CypressError`)\n2.  **Error message**: This generally tells you what went wrong. It can vary in length. Some are short like in the example, while some are long, and may tell you exactly how to fix the error.\n3.  **Learn more:** Some error messages contain a **Learn more** link that will take you to relevant Cypress documentation.\n4.  **Code frame file**: This is usually the top line of the stack trace and it shows the file, line number, and column number that is highlighted in the code frame below. Clicking on this link will open the file in your [preferred file opener](https://on.cypress.io/IDE-integration#File-Opener-Preference) and highlight the line and column in editors that support it.\n5.  **Code frame**: This shows a snippet of code where the failure occurred, with the relevant line and column highlighted.\n6.  **View stack trace**: Clicking this toggles the visibility of the stack trace. Stack traces vary in length. Clicking on a blue file path will open the file in your [preferred file opener](https://on.cypress.io/IDE-integration#File-Opener-Preference).\n7.  **Print to console button**: Click this to print the full error to your DevTools console. This will usually allow you to click on lines in the stack trace and open files in your DevTools.\n\n![example command failure error](https://docs.cypress.io/img/guides/core-concepts/cypress-app/command-failure-error.png)\n\n### Console output[​](#Console-output \"Direct link to Console output\")\n\nBesides commands being interactive, they also output additional debugging information to your console.\n\nOpen up your Dev Tools and click on the `GET` for the `.action-email` class selector.\n\n![Cypress app with get command pinned and console log open showing the yielded element](https://docs.cypress.io/img/guides/core-concepts/cypress-app/first-test-console-output.png)\n\n**We can see Cypress output additional information in the console:**\n\n*   Command (that was issued)\n*   Yielded (what was returned by this command)\n*   Elements (the number of elements found)\n*   Selector (the argument we used)\n\nWe can even expand what was returned and inspect each individual element or even right click and inspect them in the Elements panel!\n\n### Special commands[​](#Special-commands \"Direct link to Special commands\")\n\nIn addition to having a helpful UI, there are also special commands dedicated to the task of debugging, for example:\n\n*   [cy.pause()](https://docs.cypress.io/api/commands/pause)\n*   [cy.debug()](https://docs.cypress.io/api/commands/debug)\n\nIn the following example, we've added a [cy.pause()](https://docs.cypress.io/api/commands/pause) command to this test:\n\n```\ndescribe('My First Test', () => {  it('clicking \"type\" shows the right headings', () => {    cy.visit('https://example.cypress.io')    cy.pause()    cy.contains('type').click()    // Should be on a new URL which includes '/commands/actions'    cy.url().should('include', '/commands/actions')    // Get an input, type into it and verify that the value has been updated    cy.get('[data-testid=\"action-email\"]')      .type('[email protected]')      .should('have.value', '[email protected]')  })})\n```\n\nNow, when the test runs, Cypress provides us a UI (similar to debugger) to step forward through each command in the test.\n\n![Cypress app shows label saying 'Paused' with Command Log showing 'Pause'](https://docs.cypress.io/img/guides/core-concepts/cypress-app/first-test-paused.png)\n\nIn action:\n\n## History[​](#History \"Direct link to History\")\n\n| Version | Changes |\n| --- | --- |\n| [3.5.0](https://docs.cypress.io/guides/references/changelog#3-5-0) | Added keyboard shortcuts to Cypress |\n| [1.3.0](https://docs.cypress.io/guides/references/changelog#1-3-0) | Added Selector Playground |",
    "title": "Cypress App | Cypress Documentation",
    "description": "What you'll learn",
    "languageCode": "en"
  },
  {
    "url": "https://docs.cypress.io/guides/references/best-practices",
    "markdown": "# Best Practices | Cypress Documentation\n\n## Organizing Tests, Logging In, Controlling State[​](#Organizing-Tests-Logging-In-Controlling-State \"Direct link to Organizing-Tests-Logging-In-Controlling-State\")\n\ndanger\n\n**Anti-Pattern:** Sharing page objects, using your UI to log in, and not taking shortcuts.\n\ntip\n\n**Best Practice:** Test specs in isolation, programmatically log into your application, and take control of your application's state.\n\ntip\n\nWe gave a \"Best Practices\" conference talk at AssertJS (February 2018). This video demonstrates how to approach breaking down your application and organizing your tests.\n\n[AssertJS - Cypress Best Practices](https://www.youtube.com/watch?v=5XQOK0v_YRE)\n\nWe have several [Logging in recipes](https://github.com/cypress-io/cypress-example-recipes#logging-in-recipes) in our examples.\n\n## Selecting Elements[​](#Selecting-Elements \"Direct link to Selecting-Elements\")\n\ndanger\n\n**Anti-Pattern:** Using highly brittle selectors that are subject to change.\n\ntip\n\n**Best Practice:** Use `data-*` attributes to provide context to your selectors and isolate them from CSS or JS changes.\n\nEvery test you write will include selectors for elements. To save yourself a lot of headaches, you should write selectors that are resilient to changes.\n\nOftentimes we see users run into problems targeting their elements because:\n\n*   Your application may use dynamic classes or ID's that change\n*   Your selectors break from development changes to CSS styles or JS behavior\n\nLuckily, it is possible to avoid both of these problems.\n\n1.  Don't target elements based on CSS attributes such as: `id`, `class`, `tag`\n2.  Don't target elements that may change their `textContent`\n3.  Add `data-*` attributes to make it easier to target elements\n\n### How It Works[​](#How-It-Works \"Direct link to How It Works\")\n\nGiven a button that we want to interact with:\n\n```\n<button  id=\"main\"  class=\"btn btn-large\"  name=\"submission\"  role=\"button\"  data-cy=\"submit\">  Submit</button>\n```\n\nLet's investigate how we could target it:\n\n| Selector | Recommended | Notes |\n| --- | --- | --- |\n| `cy.get('button').click()` | Never | Worst - too generic, no context. |\n| `cy.get('.btn.btn-large').click()` | Never | Bad. Coupled to styling. Highly subject to change. |\n| `cy.get('#main').click()` | Sparingly | Better. But still coupled to styling or JS event listeners. |\n| `cy.get('[name=\"submission\"]').click()` | Sparingly | Coupled to the `name` attribute which has HTML semantics. |\n| `cy.contains('Submit').click()` | Depends | Much better. But still coupled to text content that may change. |\n| `cy.get('[data-cy=\"submit\"]').click()` | Always | Best. Isolated from all changes. |\n\nTargeting the element above by `tag`, `class` or `id` is very volatile and highly subject to change. You may swap out the element, you may refactor CSS and update ID's, or you may add or remove classes that affect the style of the element.\n\nInstead, adding the `data-cy` attribute to the element gives us a targeted selector that's only used for testing.\n\nThe `data-cy` attribute will not change from CSS style or JS behavioral changes, meaning it's not coupled to the **behavior** or **styling** of an element.\n\nAdditionally, it makes it clear to everyone that this element is used directly by test code.\n\ninfo\n\n**Did you know?**\n\nThe [Selector Playground](https://docs.cypress.io/guides/core-concepts/cypress-app#Selector-Playground) automatically follows these best practices.\n\nWhen determining a unique selector, it will automatically prefer elements with:\n\n*   `data-cy`\n*   `data-test`\n*   `data-testid`\n\n#### Real World Example[​](#Real-World-Example \"Direct link to Real-World-Example\")\n\nThe [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) uses two useful custom commands for selecting elements for testing:\n\n*   `getBySel` yields elements with a `data-test` attribute that **match** a specified selector.\n*   `getBySelLike` yields elements with a `data-test` attribute that **contains** a specified selector.\n\n```\n// cypress/support/commands.tsCypress.Commands.add('getBySel', (selector, ...args) => {  return cy.get(`[data-test=${selector}]`, ...args)})Cypress.Commands.add('getBySelLike', (selector, ...args) => {  return cy.get(`[data-test*=${selector}]`, ...args)})\n```\n\n### Text Content[​](#Text-Content \"Direct link to Text Content\")\n\nAfter reading the above rules you may be wondering:\n\n> If I should always use data attributes, then when should I use `cy.contains()`?\n\nA rule of thumb is to ask yourself this:\n\nIf the content of the element **changed** would you want the test to fail?\n\n*   If the answer is yes: then use [`cy.contains()`](https://docs.cypress.io/api/commands/contains)\n*   If the answer is no: then use a data attribute.\n\n**Example:**\n\nIf we looked at the `<html>` of our button again...\n\n```\n<button id=\"main\" class=\"btn btn-large\" data-cy=\"submit\">Submit</button>\n```\n\nThe question is: how important is the `Submit` text content to your test? If the text changed from `Submit` to `Save` - would you want the test to fail?\n\nIf the answer is **yes** because the word `Submit` is critical and should not be changed - then use [`cy.contains()`](https://docs.cypress.io/api/commands/contains) to target the element. This way, if it is changed, the test will fail.\n\nIf the answer is **no** because the text could be changed - then use [`cy.get()`](https://docs.cypress.io/api/commands/get) with data attributes. Changing the text to `Save` would then not cause a test failure.\n\n### Cypress and Testing Library[​](#Cypress-and-Testing-Library \"Direct link to Cypress and Testing Library\")\n\nCypress loves the Testing Library project. We use Testing Library internally, and our philosophy aligns closely with Testing Library's ethos and approach to writing tests. We strongly endorse their best practices.\n\nYou can use the [Cypress Testing Library](https://testing-library.com/docs/cypress-testing-library/intro/) package to use the familiar testing library methods (like `findByRole`, `findByLabelText`, etc...) to select elements in Cypress specs.\n\nIn particular, if you're looking for more resources to understand how we recommend you approach testing your components, look to: [Cypress Component Testing](https://docs.cypress.io/guides/component-testing/overview).\n\n## Assigning Return Values[​](#Assigning-Return-Values \"Direct link to Assigning-Return-Values\")\n\ndanger\n\n**Anti-Pattern:** Trying to assign the return value of Commands with `const`, `let`, or `var`.\n\nMany first time users look at Cypress code and think it runs synchronously.\n\nWe see new users commonly write code that looks like this:\n\n```\n// DONT DO THIS. IT DOES NOT WORK// THE WAY YOU THINK IT DOES.const a = cy.get('a')cy.visit('https://example.cypress.io')// nope, failsa.first().click()// Instead, do this.cy.get('a').as('links')cy.get('@links').first().click()\n```\n\ninfo\n\n**Did you know?**\n\nYou rarely have to ever use `const`, `let`, or `var` in Cypress. If you're using them, you will want to do some refactoring.\n\nIf you are new to Cypress and wanting to better understand how Commands work - [please read our Introduction to Cypress guide](https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#Chains-of-Commands).\n\nIf you're familiar with Cypress commands already, but find yourself using `const`, `let`, or `var` then you're typically trying to do one of two things:\n\n*   You're trying to **store and compare** values such as **text**, **classes**, **attributes**.\n*   You're trying to share **values** between tests and hooks like `before` and `beforeEach`.\n\nFor working with either of these patterns, please read our [Variables and Aliases guide](https://docs.cypress.io/guides/core-concepts/variables-and-aliases).\n\n## Visiting External Sites[​](#Visiting-External-Sites \"Direct link to Visiting-External-Sites\")\n\ndanger\n\n**Anti-Pattern:** Trying to visit or interact with sites or servers you do not control.\n\ntip\n\n**Best Practice:** Only test websites that you control. Try to avoid visiting or requiring a 3rd party server. If you choose, you may use [`cy.request()`](https://docs.cypress.io/api/commands/request) to talk to 3rd party servers via their APIs. If possible, cache results via [`cy.session()`](https://docs.cypress.io/api/commands/session) to avoid repeat visits.\n\nOne of the first things many of our users attempt to do is involve 3rd party servers or services in their tests.\n\nYou may want to access 3rd party services in several situations:\n\n1.  Testing log in when your app uses another provider via OAuth.\n2.  Verifying your server updates a 3rd party server.\n3.  Checking your email to see if your server sent a \"forgot password\" email.\n\nIf you choose, these situations can be tested with [`cy.visit()`](https://docs.cypress.io/api/commands/visit) and [`cy.origin()`](https://docs.cypress.io/api/commands/origin). However, you will only want to utilize these commands for resources in your control, either by controlling the domain or hosted instance. These use cases are common for:\n\n*   Authentication as a service platforms, such as Auth0, Okta, Microsoft, AWS Cognito, and others via username/password authentication. These domains and service instances are usually owned and controlled by you or your organization.\n*   CMS instances, such as a Contentful or Wordpress instance.\n*   Other types of services under a domain in which you control.\n\nOther services, such as social logins through popular media providers, are not recommended. Testing social logins may work, especially if run locally. However, we consider this a bad practice and do not recommend it because:\n\n*   It's incredibly time consuming and slows down your tests (unless using [`cy.session()`](https://docs.cypress.io/api/commands/session)).\n*   The 3rd party site may have changed or updated its content.\n*   The 3rd party site may be having issues outside of your control.\n*   The 3rd party site may detect you are testing via a script and block you.\n*   The 3rd party site might have policies against automated login, leading to banning of accounts.\n*   The 3rd party site might detect you are a bot, and provide mechanisms such as two-factor authentication, captchas, and other means to prevent automation. This is common with continuous integration platforms and general automation.\n*   The 3rd party site may be running A/B campaigns.\n\nLet's look at a few strategies for dealing with these situations.\n\n### When logging in[​](#When-logging-in \"Direct link to When logging in\")\n\nMany OAuth providers, especially social logins, run A/B experiments, which means that their login screen is dynamically changing. This makes automated testing difficult.\n\nMany OAuth providers also throttle the number of web requests you can make to them. For instance, if you try to test Google, Google will **automatically** detect that you are not a human and instead of giving you an OAuth login screen, they will make you fill out a captcha.\n\nAdditionally, testing through an OAuth provider is mutable - you will first need a real user on their service and then modifying anything on that user might affect other tests downstream.\n\n**Here are solutions you may choose to use to alleviate these problems:**\n\n1.  Use another platform that you control to log in with username and password via [`cy.origin()`](https://docs.cypress.io/api/commands/origin). This likely guarantees that you will not run into the problems listed above, while still being able to automate your login flow. You can reduce the amount of authentication requests by utilizing [`cy.session()`](https://docs.cypress.io/api/commands/session).\n2.  [Stub](https://docs.cypress.io/api/commands/stub) out the OAuth provider and bypass it using their UI altogether if [`cy.origin()`](https://docs.cypress.io/api/commands/origin) is not an option. You could trick your application into believing the OAuth provider has passed its token to your application.\n3.  If you **must** get a real token and [`cy.origin()`](https://docs.cypress.io/api/commands/origin) is not an option, you can use [`cy.request()`](https://docs.cypress.io/api/commands/request) and use the **programmatic** API that your OAuth provider provides. These APIs likely change **more** infrequently and you avoid problems like throttling and A/B campaigns.\n4.  Instead of having your test code bypass OAuth, you could also ask your server for help. Perhaps all an OAuth token does is generate a user in your database. Oftentimes OAuth is only useful initially and your server establishes its own session with the client. If that is the case, use [`cy.request()`](https://docs.cypress.io/api/commands/request) to get the session directly from your server and bypass the provider altogether if [`cy.origin()`](https://docs.cypress.io/api/commands/origin) is not an option.\n\n### 3rd party servers[​](#3rd-party-servers \"Direct link to 3rd party servers\")\n\nSometimes actions that you take in your application **may** affect another 3rd party application. These situations are not that common, but it is possible. Imagine your application integrates with GitHub and by using your application you can change data inside of GitHub.\n\nAfter running your test, instead of trying to [`cy.visit()`](https://docs.cypress.io/api/commands/visit) GitHub, you can use [`cy.request()`](https://docs.cypress.io/api/commands/request) to programmatically interact with GitHub's APIs directly.\n\nThis avoids ever needing to touch the UI of another application.\n\n### Verifying sent emails[​](#Verifying-sent-emails \"Direct link to Verifying sent emails\")\n\nTypically, when going through scenarios like user registration or forgotten passwords, your server schedules an email to be delivered.\n\n1.  If your application is running locally and is sending the emails directly through an SMTP server, you can use a temporary local test SMTP server running inside Cypress. Read the blog post [\"Testing HTML Emails using Cypress\"](https://www.cypress.io/blog/2021/05/11/testing-html-emails-using-cypress/) for details.\n2.  If your application is using a 3rd party email service, or you cannot stub the SMTP requests, you can use a test email inbox with an API access. Read the blog post [\"Full Testing of HTML Emails using SendGrid and Ethereal Accounts\"](https://www.cypress.io/blog/2021/05/24/full-testing-of-html-emails-using-ethereal-accounts/) for details.\n\nCypress can even load the received HTML email in its browser to verify the email's functionality and visual style:\n\n![The test finds and clicks the Confirm registration button](https://docs.cypress.io/img/guides/references/email-test.png \"The HTML email loaded during the test\")\n\n3.  In other cases, you should try using [`cy.request()`](https://docs.cypress.io/api/commands/request) command to query the endpoint on your server that tells you what email has been queued or delivered. That would give you a programmatic way to know without involving the UI. Your server would have to expose this endpoint.\n4.  You could also use `cy.request()` to a 3rd party email recipient server that exposes an API to read off emails. You will then need the proper authentication credentials, which your server could provide, or you could use environment variables. Some email services already provide [Cypress plugins](https://docs.cypress.io/plugins#email) to access emails.\n\n## Having Tests Rely On The State Of Previous Tests[​](#Having-Tests-Rely-On-The-State-Of-Previous-Tests \"Direct link to Having-Tests-Rely-On-The-State-Of-Previous-Tests\")\n\ndanger\n\n**Anti-Pattern:** Coupling multiple tests together.\n\ntip\n\n**Best Practice:** Tests should always be able to be run independently from one another **and still pass**.\n\nYou only need to do one thing to know whether you've coupled your tests incorrectly, or if one test is relying on the state of a previous one.\n\nChange `it` to [`it.only`](https://jestjs.io/docs/api#testonlyname-fn-timeout) on the test and refresh the browser.\n\nIf this test can run **by itself** and pass - congratulations you have written a good test.\n\nIf this is not the case, then you should refactor and change your approach.\n\nHow to solve this:\n\n*   Move repeated code in previous tests to `before` or `beforeEach` hooks.\n*   Combine multiple tests into one larger test.\n\nLet's imagine the following test that is filling out the form.\n\n*   End-to-End Test\n*   Component Test\n\n```\n// an example of what NOT TO DOdescribe('my form', () => {  it('visits the form', () => {    cy.visit('/users/new')  })  it('requires first name', () => {    cy.get('[data-testid=\"first-name\"]').type('Johnny')  })  it('requires last name', () => {    cy.get('[data-testid=\"last-name\"]').type('Appleseed')  })  it('can submit a valid form', () => {    cy.get('form').submit()  })})\n```\n\nWhat's wrong with the above tests? They are all coupled together!\n\nIf you were to change `it` to [`it.only`](https://jestjs.io/docs/api#testonlyname-fn-timeout) on any of the last three tests, they would fail. Each test requires the previous to run in a specific order in order to pass.\n\nHere's 2 ways we can fix this:\n\n### 1\\. Combine into one test[​](#1-Combine-into-one-test \"Direct link to 1. Combine into one test\")\n\n*   End-to-End Test\n*   Component Test\n\n```\n// a bit betterdescribe('my form', () => {  it('can submit a valid form', () => {    cy.visit('/users/new')    cy.log('filling out first name') // if you really need this    cy.get('[data-testid=\"first-name\"]').type('Johnny')    cy.log('filling out last name') // if you really need this    cy.get('[data-testid=\"last-name\"]').type('Appleseed')    cy.log('submitting form') // if you really need this    cy.get('form').submit()  })})\n```\n\nNow we can put an `.only` on this test and it will run successfully irrespective of any other test. The ideal Cypress workflow is writing and iterating on a single test at a time.\n\n### 2\\. Run shared code before each test[​](#2-Run-shared-code-before-each-test \"Direct link to 2. Run shared code before each test\")\n\n*   End-to-End Test\n*   Component Test\n\n```\ndescribe('my form', () => {  beforeEach(() => {    cy.visit('/users/new')    cy.get('[data-testid=\"first-name\"]').type('Johnny')    cy.get('[data-testid=\"last-name\"]').type('Appleseed')  })  it('displays form validation', () => {    // clear out first name    cy.get('[data-testid=\"first-name\"]').clear()    cy.get('form').submit()    cy.get('[data-testid=\"errors\"]').should('contain', 'First name is required')  })  it('can submit a valid form', () => {    cy.get('form').submit()  })})\n```\n\nThis above example is ideal because now we are resetting the state between each test and ensuring nothing in previous tests leaks into subsequent ones.\n\nWe're also paving the way to make it less complicated to write multiple tests against the \"default\" state of the form. That way each test stays lean but each can be run independently and pass.\n\n## Creating \"Tiny\" Tests With A Single Assertion[\n\nEnd-to-End Only\n\n](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-E2E-Testing)[​](#Creating-Tiny-Tests-With-A-Single-Assertion \"Direct link to Creating-Tiny-Tests-With-A-Single-Assertion\")\n\ndanger\n\n**Anti-Pattern:** Acting like you're writing unit tests.\n\ntip\n\n**Best Practice:** Add multiple assertions and don't worry about it\n\nWe've seen many users writing this kind of code:\n\n```\ndescribe('my form', () => {  beforeEach(() => {    cy.visit('/users/new')    cy.get('[data-testid=\"first-name\"]').type('johnny')  })  it('has validation attr', () => {    cy.get('[data-testid=\"first-name\"]').should(      'have.attr',      'data-validation',      'required'    )  })  it('has active class', () => {    cy.get('[data-testid=\"first-name\"]').should('have.class', 'active')  })  it('has formatted first name', () => {    cy.get('[data-testid=\"first-name\"]')      // capitalized first letter      .should('have.value', 'Johnny')  })})\n```\n\nWhile technically this runs fine - this is really excessive, and not performant.\n\nWhy you do this pattern in component and unit tests:\n\n*   When assertions failed you relied on the test's title to know what failed\n*   You were told that adding multiple assertions was bad and accepted this as truth\n*   There was no performance penalty splitting up multiple tests because they run really fast\n\nWhy you shouldn't do this in end-to-end tests:\n\n*   Writing integration tests is not the same as unit tests\n*   You will always know (and can visually see) which assertion failed in a large test\n*   Cypress runs a series of async lifecycle events that reset state between tests\n*   Resetting tests is much slower than adding more assertions\n\nIt is common for tests in Cypress to issue 30+ commands. Because nearly every command has an implicit assertion (and can therefore fail), even by limiting your assertions you're not saving yourself anything because **any single command could implicitly fail**.\n\nHow you should rewrite those tests:\n\n```\ndescribe('my form', () => {  beforeEach(() => {    cy.visit('/users/new')  })  it('validates and formats first name', () => {    cy.get('[data-testid=\"first-name\"]')      .type('johnny')      .should('have.attr', 'data-validation', 'required')      .and('have.class', 'active')      .and('have.value', 'Johnny')  })})\n```\n\n## Using `after` Or `afterEach` Hooks[​](#Using-after-Or-afterEach-Hooks \"Direct link to Using-after-Or-afterEach-Hooks\")\n\ndanger\n\n**Anti-Pattern:** Using `after` or `afterEach` hooks to clean up state.\n\ntip\n\n**Best Practice:** Clean up state **before** tests run.\n\nWe see many of our users adding code to an `after` or `afterEach` hook in order to clean up the state generated by the current test(s).\n\nWe most often see test code that looks like this:\n\n```\ndescribe('logged in user', () => {  beforeEach(() => {    cy.login()  })  afterEach(() => {    cy.logout()  })  it('tests', ...)  it('more', ...)  it('things', ...)})\n```\n\nLet's look at why this is not really necessary.\n\n### Dangling state is your friend[​](#Dangling-state-is-your-friend \"Direct link to Dangling state is your friend\")\n\nOne of the **best** parts of Cypress is its emphasis on debuggability. Unlike other testing tools - when your tests end - you are left with your working application at the exact point where your test finished.\n\nThis is an **excellent** opportunity for you to **use** your application in the state the tests finished! This enables you to write **partial tests** that drive your application step by step, writing your test and application code at the same time.\n\nWe have built Cypress to support this use case. In fact, Cypress **does not** clean up its own internal state when the test ends. We **want** you to have dangling state at the end of the test! Things like [stubs](https://docs.cypress.io/api/commands/stub), [spies](https://docs.cypress.io/api/commands/spy), even [intercepts](https://docs.cypress.io/api/commands/intercept) are **not** removed at the end of the test. This means your application will behave identically while it is running Cypress commands or when you manually work with it after a test ends.\n\nIf you remove your application's state after each test, then you instantly lose the ability to use your application in this mode. Logging out at the end would always leave you with the same login page at the end of the test. In order to debug your application or write a partial test, you would always be left commenting out your custom `cy.logout()` command.\n\n### It's all downside with no upside[​](#Its-all-downside-with-no-upside \"Direct link to It's all downside with no upside\")\n\nFor the moment, let's assume that for some reason your application desperately **needs** that last bit of `after` or `afterEach` code to run. Let's assume that if that code is not run - all is lost.\n\nThat is fine - but even if this is the case, it should not go in an `after` or `afterEach` hook. Why? So far we have been talking about logging out, but let's use a different example. Let's use the pattern of needing to reset your database.\n\n**The idea goes like this:**\n\n> After each test I want to ensure the database is reset back to 0 records so when the next test runs, it is run with a clean state.\n\n**With that in mind you write something like this:**\n\n```\nafterEach(() => {  cy.resetDb()})\n```\n\nHere is the problem: **there is no guarantee that this code will run.**\n\nIf, hypothetically, you have written this command because it **has** to run before the next test does, then the absolute **worst place** to put it is in an `after` or `afterEach` hook.\n\nWhy? Because if you refresh Cypress in the middle of the test - you will have built up partial state in the database, and your custom `cy.resetDb()` function **will never get called**.\n\nIf this state cleanup is **truly** required, then the next test will instantly fail. Why? Because resetting the state never happened when you refreshed Cypress.\n\n### State reset should go before each test[​](#State-reset-should-go-before-each-test \"Direct link to State reset should go before each test\")\n\nThe simplest solution here is to move your reset code to **before** the test runs.\n\nCode put in a `before` or `beforeEach` hook will **always** run prior to the test - even if you refreshed Cypress in the middle of an existing one!\n\nThis is also a great opportunity to use [root level hooks in mocha](https://github.com/mochajs/mochajs.github.io/blob/master/index.md#root-level-hooks).\n\nA great place to put this configuration is in the [supportFile](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Support-file), since it is loaded before any test files are evaluated.\n\n**Hooks you add to the root will always run on all suites!**\n\n```\n// cypress/support/e2e.js or cypress/support/component.jsbeforeEach(() => {  // now this runs prior to every test  // across all files no matter what  cy.resetDb()})\n```\n\n### Is resetting the state necessary?[​](#Is-resetting-the-state-necessary \"Direct link to Is resetting the state necessary?\")\n\nOne final question you should ask yourself is - is resetting the state even necessary? Remember, Cypress already automatically enforces [test isolation](https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Isolation) by clearing state before each test. Make sure you are not trying to clean up state that is already cleaned up by Cypress automatically.\n\nIf the state you are trying to clean lives on the server - by all means, clean that state. You will need to run these types of routines! But if the state is related to your application currently under test - you likely do not even need to clear it.\n\nThe only times you **ever** need to clean up state, is if the operations that one test runs affects another test downstream. In only those cases do you need state cleanup.\n\n#### Real World Example[​](#Real-World-Example-1 \"Direct link to Real-World-Example-1\")\n\nThe [Real World App (RWA)](https://github.com/cypress-io/cypress-realworld-app) resets and re-seeds its database via a custom [Cypress task](https://docs.cypress.io/api/commands/task) called `db:seed` in a `beforeEach` hook. This allows each test to start from a clean slate and a deterministic state. For example:\n\n```\n// cypress/tests/ui/auth.cy.tsbeforeEach(function () {  cy.task('db:seed')  // ...})\n```\n\nThe `db:seed` task is defined within the [setupNodeEvents](https://docs.cypress.io/guides/tooling/plugins-guide#Using-a-plugin) function of the project, and in this case sends a request to a dedicated back end API of the app to appropriately re-seed the database.\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  // setupNodeEvents can be defined in either  // the e2e or component configuration  e2e: {    setupNodeEvents(on, config) {      on('task', {        async 'db:seed'() {          // Send request to backend API to re-seed database with test data          const { data } = await axios.post(`${testDataApiEndpoint}/seed`)          return data        },        //...      })    },  },})\n```\n\nThe same practice above can be used for any type of database (PostgreSQL, MongoDB, etc.). In this example, a request is sent to a back end API, but you could also interact directly with your database with direct queries, custom libraries, etc. If you already have non-JavaScript methods of handling or interacting with your database, you can use [`cy.exec`](https://docs.cypress.io/api/commands/exec), instead of [`cy.task`](https://docs.cypress.io/api/commands/task), to execute any system command or script.\n\n## Unnecessary Waiting[​](#Unnecessary-Waiting \"Direct link to Unnecessary-Waiting\")\n\ndanger\n\n**Anti-Pattern:** Waiting for arbitrary time periods using [`cy.wait(Number)`](https://docs.cypress.io/api/commands/wait#Time).\n\ntip\n\n**Best Practice:** Use route aliases or assertions to guard Cypress from proceeding until an explicit condition is met.\n\nIn Cypress, you almost never need to use `cy.wait()` for an arbitrary amount of time. If you are finding yourself doing this, there is likely a much simpler way.\n\nLet's imagine the following examples:\n\n### Unnecessary wait for `cy.request()`[​](#Unnecessary-wait-for-cyrequest \"Direct link to Unnecessary-wait-for-cyrequest\")\n\nWaiting here is unnecessary since the [`cy.request()`](https://docs.cypress.io/api/commands/request) command will not resolve until it receives a response from your server. Adding the wait here only adds 5 seconds after the [`cy.request()`](https://docs.cypress.io/api/commands/request) has already resolved.\n\n```\ncy.request('http://localhost:8080/db/seed')cy.wait(5000) // <--- this is unnecessary\n```\n\n### Unnecessary wait for `cy.visit()`[\n\nEnd-to-End Only\n\n](https://docs.cypress.io/guides/core-concepts/testing-types#What-is-E2E-Testing)[​](#Unnecessary-wait-for-cyvisit \"Direct link to Unnecessary-wait-for-cyvisit\")\n\nWaiting for this is unnecessary because the [cy.visit()](https://docs.cypress.io/api/commands/visit) resolves once the page fires its `load` event. By that time all of your assets have been loaded including javascript, stylesheets, and html.\n\n```\ncy.visit('http://localhost/8080')cy.wait(5000) // <--- this is unnecessary\n```\n\n### Unnecessary wait for `cy.get()`[​](#Unnecessary-wait-for-cyget \"Direct link to Unnecessary-wait-for-cyget\")\n\nWaiting for the [`cy.get()`](https://docs.cypress.io/api/commands/get) below is unnecessary because [`cy.get()`](https://docs.cypress.io/api/commands/get) automatically retries until the table's `tr` has a length of 2.\n\nWhenever commands have an assertion they will not resolve until their associated assertions pass. This enables you to describe the state of your application without having to worry about when it gets there.\n\n```\ncy.intercept('GET', '/users', [{ name: 'Maggy' }, { name: 'Joan' }])cy.get('#fetch').click()cy.wait(4000) // <--- this is unnecessarycy.get('table tr').should('have.length', 2)\n```\n\nAlternatively a better solution to this problem is by waiting explicitly for an aliased route.\n\n```\ncy.intercept('GET', '/users', [{ name: 'Maggy' }, { name: 'Joan' }]).as(  'getUsers')cy.get('[data-testid=\"fetch-users\"]').click()cy.wait('@getUsers') // <--- wait explicitly for this route to finishcy.get('table tr').should('have.length', 2)\n```\n\n## Running Tests Intelligently[​](#Running-Tests-Intelligently \"Direct link to Running-Tests-Intelligently\")\n\nAs your test suite grows and takes longer to run, you may find yourself hitting performance bottlenecks on your CI system. We recommend integrating your source control system with your test suite such that merges are blocked until all your Cypress tests have passed. The downside of this is that longer test execution times slow the velocity at which branches may be merged and features may be shipped. This issue is compounded further if you have dependent chains of branches waiting to be merged.\n\nOne solution to this problem is **Smart Orchestration** with Cypress Cloud. Using a combination of [parallelization](https://docs.cypress.io/guides/cloud/smart-orchestration/parallelization), [load balancing](https://docs.cypress.io/guides/cloud/smart-orchestration/load-balancing#Balance-strategy), [Auto Cancellation](https://docs.cypress.io/guides/cloud/smart-orchestration/run-cancellation), and [Spec Prioritization](https://docs.cypress.io/guides/cloud/smart-orchestration/spec-prioritization), Smart Orchestration maximizes your available compute resources & minimizes waste.\n\n## Web Servers[​](#Web-Servers \"Direct link to Web-Servers\")\n\ndanger\n\n**Anti-Pattern:** Trying to start a web server from within Cypress scripts with [`cy.exec()`](https://docs.cypress.io/api/commands/exec) or [`cy.task()`](https://docs.cypress.io/api/commands/task).\n\ntip\n\n**Best Practice:** Start a web server prior to running Cypress.\n\nWe do NOT recommend trying to start your back end web server from within Cypress.\n\nAny command run by [cy.exec()](https://docs.cypress.io/api/commands/exec) or [cy.task()](https://docs.cypress.io/api/commands/task) has to exit eventually. Otherwise, Cypress will not continue running any other commands.\n\nTrying to start a web server from [cy.exec()](https://docs.cypress.io/api/commands/exec) or [cy.task()](https://docs.cypress.io/api/commands/task) causes all kinds of problems because:\n\n*   You have to background the process\n*   You lose access to it via terminal\n*   You don't have access to its `stdout` or logs\n*   Every time your tests run, you'd have to work out the complexity around starting an already running web server.\n*   You would likely encounter constant port conflicts\n\n**Why can't I shut down the process in an `after` hook?**\n\nBecause there is no guarantee that code running in an `after` will always run.\n\nWhile working in the Cypress Test Runner you can always restart / refresh while in the middle of a test. When that happens, code in an `after` won't execute.\n\n**What should I do then?**\n\nStart your web server before running Cypress and kill it after it completes.\n\nAre you trying to run in CI?\n\nWe have [examples showing you how to start and stop your web server](https://docs.cypress.io/guides/continuous-integration/introduction#Boot-your-server).\n\n## Setting a Global `baseUrl`[​](#Setting-a-Global-baseUrl \"Direct link to Setting-a-Global-baseUrl\")\n\ndanger\n\n**Anti-Pattern:** Using [cy.visit()](https://docs.cypress.io/api/commands/visit) without setting a `baseUrl`.\n\nBy adding a [baseUrl](https://docs.cypress.io/guides/references/configuration#Global) in your configuration Cypress will attempt to prefix the `baseUrl` any URL provided to commands like [cy.visit()](https://docs.cypress.io/api/commands/visit) and [cy.request()](https://docs.cypress.io/api/commands/request) that are not fully qualified domain name (FQDN) URLs.\n\nThis allows you to omit hard-coding fully qualified domain name (FQDN) URLs in commands. For example,\n\n```\ncy.visit('http://localhost:8080/index.html')\n```\n\ncan be shortened to\n\nNot only does this create tests that can easily switch between domains, i.e. running a dev server on `http://localhost:8080` vs a deployed production server domain, but adding a `baseUrl` can also save some time during the initial startup of your Cypress tests.\n\nWhen you start running your tests, Cypress does not know the url of the app you plan to test. So, Cypress initially opens on `https://localhost` + a random port.\n\n### Without `baseUrl` set, Cypress loads main window in `localhost` + random port[​](#Without-baseUrl-set-Cypress-loads-main-window-in-localhost--random-port \"Direct link to Without-baseUrl-set-Cypress-loads-main-window-in-localhost--random-port\")\n\n![Url address shows localhost:53927/__/#tests/integration/organizations/list_spec.coffee](https://docs.cypress.io/img/guides/references/cypress-loads-in-localhost-and-random-port.png)\n\nAs soon as it encounters a [cy.visit()](https://docs.cypress.io/api/commands/visit), Cypress then switches to the url of the main window to the url specified in your visit. This can result in a 'flash' or 'reload' when your tests first start.\n\nBy setting the `baseUrl`, you can avoid this reload altogether. Cypress will load the main window in the `baseUrl` you specified as soon as your tests start.\n\n### Cypress configuration file[​](#Cypress-configuration-file \"Direct link to Cypress configuration file\")\n\n*   cypress.config.js\n*   cypress.config.ts\n\n```\nconst { defineConfig } = require('cypress')module.exports = defineConfig({  e2e: {    baseUrl: 'http://localhost:8484',  },})\n```\n\n### With `baseUrl` set, Cypress loads main window in `baseUrl`[​](#With-baseUrl-set-Cypress-loads-main-window-in-baseUrl \"Direct link to With-baseUrl-set-Cypress-loads-main-window-in-baseUrl\")\n\n![Url address bar shows localhost:8484/__tests/integration/organizations/list_spec.coffee](https://docs.cypress.io/img/guides/references/cypress-loads-window-in-base-url-localhost.png)\n\nHaving a `baseUrl` set gives you the added bonus of seeing an error if your server is not running during `cypress open` at the specified `baseUrl`.\n\n![Cypress Launchpad with warning about how Cypress could not verify server set as the baseUrl is running](https://docs.cypress.io/img/guides/references/cypress-ensures-baseUrl-server-is-running.png)\n\nWe also display an error if your server is not running at the specified `baseUrl` during `cypress run` after several retries.\n\n![The terminal warns and retries when the url at your baseUrl is not running](https://docs.cypress.io/img/guides/references/cypress-verifies-server-is-running-during-cypress-run.png)\n\n### Usage of `baseUrl` in depth[​](#Usage-of-baseUrl-in-depth \"Direct link to Usage-of-baseUrl-in-depth\")\n\nThis [short video](https://www.youtube.com/watch?v=f5UaXuAc52c) explains in depth how to use `baseUrl` correctly.",
    "title": "Best Practices | Cypress Documentation",
    "description": "Real World Practices",
    "languageCode": "en"
  }
]