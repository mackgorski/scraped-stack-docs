[
  {
    "url": "https://docs.stripe.com/payments/bank-transfers/accept-a-payment?payment-ui=direct-api",
    "markdown": "# Accept a bank transfer | Stripe DocumentationThe Stripe Docs logo\n\nThe first time you accept a bank transfer payment from a customer, Stripe generates a virtual bank account for them, which you can then share with them directly. All future bank transfer payments from this customer get sent to this bank account. In some countries, Stripe also provides you with a unique transfer reference number that your customer should include with each transfer to make it easier to match the transfer against outstanding payments. Some countries have limits on the number of virtual bank account numbers that you can create for free.\n\nYou can find an overview of the common steps when accepting a bank transfer payment in the following sequence diagram:\n\nWith bank transfer payments, it’s possible that the customer sends you more or less than the expected payment amount. If the customer sends too little, Stripe partially funds an open payment intent. Invoices won’t be partially funded and remain open until incoming funds cover the full invoice amount.\n\nIf the customer sends more than the expected amount, Stripe attempts to reconcile the incoming funds against an open payment and keep the remaining excess amount in the customer cash balance. You can find more details on how Stripe handles reconciliation in the [reconciliation section](https://docs.stripe.com/payments/customer-balance/reconciliation) of our documentation.\n\nYou might have multiple open payments or invoices which can be paid with a bank transfer. In the default setup, Stripe attempts to [automatically reconcile](https://docs.stripe.com/payments/customer-balance/reconciliation) the bank transfer by using information like the transfer’s reference code or the amount transferred.\n\nYou can disable automatic reconciliation and [manually reconcile](https://docs.stripe.com/payments/customer-balance/reconciliation#cash-manual-reconciliation) payments and invoices yourself. You can override the automatic reconciliation behavior on a per-customer basis by setting [reconciliation mode](https://docs.stripe.com/api/customers/create#create_customer-cash_balance-settings-reconciliation_mode) to manual.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-a-customer)\n\nYou must associate a [Customer](https://docs.stripe.com/api/customers) object to reconcile each bank transfer payment. If you have an existing Customer object, you can skip this step. Otherwise, create a new Customer object.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[\n\n## Create and confirm a PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-create-and-confirm-payment-intent)\n\nA [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) is an object that represents your intent to collect payment from a customer and tracks the lifecycle of the payment process through each stage. Create and confirm a PaymentIntent on the server, specifying the amount and currency you want to collect. You must also populate the [customer parameter](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-customer) of the PaymentIntent creation request. Bank transfers aren’t available on PaymentIntents without a customer.\n\nBefore creating a Payment Intent, make sure to turn **Bank transfer** on in the [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) page of your Dashboard.\n\n#### Note\n\nWith [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d customer=  {{CUSTOMER_ID}}   \\  -d currency=usd \\  -d \"automatic_payment_methods[enabled]\"=true \\   --data-urlencode return_url=\"[https://example.com/return_url](https://example.com/return_url)\" \\  -d \"payment_method_data[type]\"=customer_balance \\  -d confirm=true`\n\nIn the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.\n\nIf the customer already has a balance high enough to cover the payment amount, the PaymentIntent immediately succeeds with a `succeeded` status. Customers can accrue a balance when they accidentally overpay for a transaction—a common occurrence with bank transfers. You must [reconcile customer balances within a certain period based on your location](https://docs.stripe.com/payments/customer-balance/reconciliation).\n\n[](#web-complete-bank-transfer)\n\nIf the customer balance isn’t high enough to cover the request amount, the PaymentIntent shows a `requires_action` status. The response has a `next_action` field containing a `type` value of `display_bank_transfer_instructions`. The `next_action[display_bank_transfer_instructions]` hash contains information to display to your customer so that they can complete the bank transfer.\n\n#### Note\n\nIn live mode, Stripe supplies each customer with a unique set of bank transfer details. In contrast, Stripe offers invalid bank transfer details to all customers in [test mode](https://docs.stripe.com/test-mode \"test mode\"). Unlike live mode, these invalid details might not always be unique.\n\n| Field | Description |\n| --- | --- |\n| [`type`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-type) | The type of bank transfer to use. Type must be `us_bank_transfer` in the US. |\n| [`reference`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-reference) | A unique reference code to identify the bank transfer. Instruct your customer to include this code in the reference field of their bank transfer. |\n| [`amount_remaining`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-amount_remaining) | The remaining amount that needs to be transferred to complete the payment. Instruct your customer to transfer this amount. This might be different from the PaymentIntent amount if pre-existing funds in the customer balance were applied to the PaymentIntent or if your customer underpaid. |\n| [`currency`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-currency) | The currency for the remaining amount. |\n| [`financial_addresses`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions) | List of financial addresses for US bank accounts. Types include `aba` and `swift`. See below for details. |\n| [`hosted_instructions_url`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-hosted_instructions_url) | A link to a hosted page that guides your customer through completing the transfer. |\n\n#### `aba` hash ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nExample of an `aba` hash:\n\n`{   \"aba\": {     \"account_number\": \"111222333444\",     \"bank_name\": \"Wells Fargo Bank, NA\",     \"routing_number\": \"444555666\"   },   \"supported_networks\": [     \"ach\",     \"domestic_wire_us\"   ],   \"type\": \"aba\" }`\n\n| Field | Value(s) | Description |\n| --- | --- | --- |\n| `type` | `aba` | The type of financial address. |\n| `supported_networks` | *   `ach`<br>*   `domestic_wire_us` | The list of networks supported by this address. |\n| `aba.account_number` | 111222333444 | The ABA account number. |\n| `aba.routing_number` | 444555666 | The ABA routing number. |\n| `aba.bank_name` | Wells Fargo Bank, NA | The name of the bank. |\n\n#### `swift` hash ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nExample of a `swift` hash:\n\n`{   \"swift\": {     \"account_number\": \"111222333444\",     \"bank_name\": \"Wells Fargo Bank, NA\",     \"swift_code\": \"AAAA-BB-CC-123\"   },   \"supported_networks\": [     \"swift\"   ],   \"type\": \"swift\" }`\n\n| Field | Value(s) | Description |\n| --- | --- | --- |\n| `type` | `swift` | The type of financial address. |\n| `supported_networks` | *   `swift` | The list of networks supported by this address. |\n| `swift.account_number` | 111222333444 | The SWIFT account number. |\n| `swift.swift_code` | AAAA-BB-CC-123 | The SWIFT code. |\n| `swift.bank_name` | Wells Fargo Bank, NA | The name of the bank. |\n\n#### Settlement timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter instructing your customer to initiate a transfer with their bank using the information you provide, it can take up to 5 days for the transfer to complete. The settlement timing depends on the banking rails that the transfer arrived through to Stripe:\n\n*   ACH transfers arrive within 1-3 business days.\n*   Domestic wire transfers (Fedwire) arrive on the same day (depending on whether the transfer is sent before the bank’s cut-off time).\n*   International wire transfers (SWIFT) arrive within 1-5 business days.\n\n[](#web-confirm-success)\n\nThe PaymentIntent stays in a `requires_action` status until funds arrive in the bank account. When funds are ready, the PaymentIntent status updates from `requires_action` to `succeeded`.\n\nYou need to set up your [webhook](https://docs.stripe.com/webhooks \"webhook\") endpoint to start receiving the `payment_intent.partially_funded` event.\n\nYou can [add a webhook from the Dashboard](https://dashboard.stripe.com/webhooks/create).\n\nAlternatively, you can use the [Webhook Endpoints API](https://docs.stripe.com/api/webhook_endpoints) to start receiving the [`payment_intent.partially_funded`](https://docs.stripe.com/api/events/types#event_types-payment_intent.partially_funded) event.\n\nStripe sends the following events during the payment funding flow when we update the PaymentIntent.\n\n| Event | Description | Next steps |\n| --- | --- | --- |\n| `payment_intent.requires_action` | Sent during confirmation when the customer balance doesn’t have sufficient funds to reconcile the PaymentIntent, the PaymentIntent transitions to `requires_action`. | Instruct your customer to send a bank transfer with the `amount_remaining`. |\n| `payment_intent.partially_funded` | The customer sent a bank transfer that was applied to the PaymentIntent, but wasn’t enough to complete the payment. This might happen because the customer transferred an insufficient amount (because of a mistaken underpayment or fees charged by their bank) or because a remaining customer balance was applied to this PaymentIntent. PaymentIntents that are partially funded aren’t reflected in your account balance until the payment is complete. | Instruct your customer to send another bank transfer with the new `amount_remaining` to complete the payment. If you want to complete the payment with the partially applied funds, you can update the `amount` and [confirm](https://docs.stripe.com/api/payment_intents/confirm) the PaymentIntent again. |\n| `payment_intent.succeeded` | The customer’s payment succeeded. | Fulfill the goods or services that the customer purchased. |\n\n#### Caution\n\nWhen you change the amount of a partially funded PaymentIntent, the funds are returned to the customer balance. If other PaymentIntents are open, Stripe funds those automatically. If the customer is configured for manual reconciliation, you need to [apply the funds](https://docs.stripe.com/api/payment_intents/apply_customer_balance) again.\n\nWe recommend [using webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to confirm the charge has succeeded and to notify the customer that the payment is complete.\n\n### Sample code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`require 'json'  # Using Sinatra post '/webhook' do   payload = request.body.read   event = nil    begin     event = Stripe::Event.construct_from(       JSON.parse(payload, symbolize_names: true)`\n\n### View pending payments in the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can view all pending bank transfer PaymentIntents in the [Dashboard](https://dashboard.stripe.com/payments) by applying the **Waiting on funding** filter to **Status** .\n\n[](#test-your-integration)\n\nYou can test your integration by simulating an incoming bank transfer using either the Dashboard or an HTTP request.\n\n### With the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo simulate a bank transfer using the Dashboard, navigate to the customer’s page in the Dashboard. Under **Payment methods**, click **Add** and select **Fund cash balance (testmode only)**.\n\n### With the Stripe API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can make an API call to simulate a bank transfer.\n\n`curl https://api.stripe.com/v1/test_helpers/customers/ic_xxxxxxxxx/fund_cash_balance \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d reference=REF-4242`\n\n[\n\n## Handling temporary availability issues![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handling-temporary-availability-issues)\n\nThe following error codes indicate temporary issues with the availability of the payment method:\n\n| Code | Description | Handling |\n| --- | --- | --- |\n| `payment_method_rate_limit_exceeded` | Too many requests were made in quick succession for this payment method, which has stricter limits than the [API-wide rate limits](https://docs.stripe.com/rate-limits). | These errors can persist for several API requests when many of your customers try to use the same payment method, such as during an ongoing sale on your website. In this case, ask your customers to choose a different payment method. |\n\n#### Caution\n\nIf you anticipate heavy usage in general or because of an upcoming event, contact us as soon as you know about it.",
    "title": "Accept a bank transfer | Stripe Documentation",
    "description": "Use the Payment Intents API to accept bank transfer payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/salesforce-cpq/setup",
    "markdown": "# Set up the Stripe Billing Connector for Salesforce CPQ\n\n## Configure and use the connector.\n\nThe Stripe Billing Connector for Salesforce CPQ syncs your products, prices, accounts, and orders from Salesforce to Stripe Billing. After you set up the connector and create data mappings, the service syncs this information from Salesforce and completes the collection and provisioning workflows in Stripe Billing.\n\n[](#install-connector)\n\nThe connector is a managed package that you install from the [Salesforce AppExchange](https://appexchange.salesforce.com/appxListingDetail?listingId=a0N3A00000FOm4xUAD) onto your Salesforce account.\n\nDuring the installation process, choose **Install for Admins Only**. Follow the on-screen prompts and approve third-party access. In Salesforce, search for “Stripe Billing Connector” to continue the setup process.\n\nIn the Stripe Billing Connector, follow the on-screen steps to:\n\n1.  Authorize access between your Salesforce environment and your Stripe account.\n2.  Define how data maps between Salesforce and Stripe.\n3.  Configure synchronization preferences.\n\n[](#data-map)\n\nUse the **Define Data Mapping** step to map the fields from the Salesforce objects to corresponding fields on the Stripe objects. For example, for a custom field that stores whether a price book entry is metered or licensed, specify that field to map to [recurring.usage\\_type](https://docs.stripe.com/api/prices/object#price_object-recurring-usage_type) on the Stripe `Price` object.\n\nThe connector automatically maps the following Salesforce objects to the corresponding Stripe objects:\n\nYou can also map information within Salesforce objects or to metadata fields within corresponding Stripe objects by [defining field defaults and custom mappings](https://docs.stripe.com/connectors/salesforce-cpq/field-mappings).\n\n[](#preferences)\n\nUse the **Configure Sync Preferences** step to specify:\n\n*   **Sync record retention**: The number of sync records retained in Salesforce.\n*   **Start date**: After you [enable live syncing](#activate-syncing), the connector begins to sync data for activated orders to Stripe on or after this date. You can specify a date in the past.\n*   **Sync filters**: Adds filters to determine when to sync Salesforce orders, accounts, products, and pricebook entries. By default, the connector syncs orders when `Status = Activated`, but you can customize this behavior for your workflows.\n\nAfter setup completes and you [activate live syncing](#activate-syncing) for your integration, newly activated orders automatically:\n\n*   Create or update a `Customer` object in Stripe for the account that corresponds to the order. The `id` on the Stripe customer is available as a custom field called `Stripe ID` on the Salesforce account.\n*   Create or update products and prices in Stripe for each product in the order.\n*   Create a subscription schedule in Stripe for the activated order.\n*   Create a `Sync Record` custom object in Salesforce to indicate the sync status and any errors that arise.\n\n### Sync limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   **Refunds**: Use the Stripe Dashboard link on the Salesforce object to issue refunds through Stripe.\n*   **Payment and subscription status**: Use the Stripe Dashboard link to see an order’s subscription status, payment information, and related invoices.\n*   **Taxes**: Tax information isn’t synced between Salesforce and Stripe. To collect taxes on an invoice, use [Stripe Tax](https://docs.stripe.com/tax) to automatically calculate and apply taxes to the subscription or Stripe invoice for an order.\n\n[](#activate-syncing)\n\nIn the final step of the post-installation flow, you can enable live syncing now, or enable it later. Live syncing allows your integration to pull activated Salesforce orders into Stripe in real time. You can enable or disable live syncing of orders any time on the **Sync Preferences** tab of the application.\n\nYou can manually sync individual orders to test your integration, even when live syncing is disabled.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Field defaults and custom mappings](https://docs.stripe.com/connectors/salesforce-cpq/field-mappings)\n*   [Accounts and contacts](https://docs.stripe.com/connectors/salesforce-cpq/accounts-contacts)\n*   [Products and prices](https://docs.stripe.com/connectors/salesforce-cpq/products-prices)",
    "title": "Set up the Stripe Billing Connector for Salesforce CPQ | Stripe Documentation",
    "description": "Configure and use the connector.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/salesforce-cpq/accounts-contacts",
    "markdown": "# Accounts and contacts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about syncing the Stripe customer objects for your corresponding Salesforce accounts.\n\nAfter you set up the Stripe Billing Connector for Salesforce CPQ and [map your data](https://docs.stripe.com/connectors/salesforce-cpq/field-mappings), Stripe creates a `Customer` object when an order finalizes. This happens when you associate an account and a primary contact with a quote from an activated order.\n\nIf you use a parent-child hierarchy for your Salesforce accounts, make sure that only the account that represents the billing entity (customer) correlates to an activated order. Stripe Billing doesn’t currently support separate billing and provisioning entities for subscriptions.\n\n## Field mappings for Stripe customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you configure the connector to create a Stripe `Customer` object for each Salesforce account, there isn’t a default mapping to a primary contact or order on the account. All customer fields are also optional.\n\nThe connector syncs a Salesforce account’s `Name` and `Description` fields to Stripe. To sync additional fields, you can [add field mappings](https://docs.stripe.com/connectors/salesforce-cpq/field-mappings) to customize the data that’s synced from Salesforce to Stripe.\n\n| Salesforce field (Account object) | Stripe customer | Notes |\n| --- | --- | --- |\n| Name | [Name](https://docs.stripe.com/api/customers/object#customer_object-name) |     |\n| Phone | [Phone](https://docs.stripe.com/api/customers/object#customer_object-phone) |     |\n| Description | [Description](https://docs.stripe.com/api/customers/object#customer_object-description) |     |\n|     | [Email](https://docs.stripe.com/api/customers/object#customer_object-email) | By default, the `Account` object in Salesforce doesn’t have an email field. You can create a subscription without a payment; however, you must supply an email address for collections. |\n| Billing street | [Address, line 1](https://docs.stripe.com/api/customers/object#customer_object-address-line1) | This address might affect the customer’s tax calculation, depending on your tax configuration. If the address is incomplete or differs from the billing address on the quote or order, you must provide a custom mapping for this data. |\n| Billing city | [Address, city](https://docs.stripe.com/api/customers/object#customer_object-address-city) |     |\n| Billing state | [Address, state](https://docs.stripe.com/api/customers/object#customer_object-address-state) |     |\n| Billing postal code | [Address, postal code](https://docs.stripe.com/api/customers/object#customer_object-address-postal_code) |     |\n| Billing country | [Address, country](https://docs.stripe.com/api/customers/object#customer_object-address-country) |     |\n| Phone | [Shipping, address, phone](https://docs.stripe.com/api/customers/object#customer_object-phone) |     |\n| Shipping street | [Shipping, address, line 1](https://docs.stripe.com/api/customers/object#customer_object-shipping-address-line1) |     |\n| Shipping city | [Shipping, address, city](https://docs.stripe.com/api/customers/object#customer_object-shipping-address-city) |     |\n| Shipping state | [Shipping, address, state](https://docs.stripe.com/api/customers/object#customer_object-shipping-address-state) |     |\n| Shipping postal code | [Shipping, address, postal code](https://docs.stripe.com/api/customers/object#customer_object-shipping-address-postal_code) |     |\n| Shipping country | [Shipping, address, country](https://docs.stripe.com/api/customers/object#customer_object-shipping-address-country) |     |\n\n## Update account data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAccount and contact information sync in real time. When you create or update accounts in Salesforce, the connector creates and updates the Stripe `Customer` objects with the latest information from Salesforce when an order syncs. Because Salesforce is the primary source for account and contact information, any updates you make to a `Customer` object in Stripe aren’t synced to the corresponding account in Salesforce.\n\nStripe doesn’t allow merging of accounts. If you want to merge any customers in Salesforce, you must do so before you sync the account to Stripe. `Customer` objects synced to Stripe must have a valid ID in the Stripe ID field on the account.\n\n## Delete accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDeleting accounts or account information in Salesforce won’t affect the data in Stripe. Any subscriptions in Stripe continue to bill and operate as normal. You can’t delete Salesforce accounts with active subscriptions.\n\nDeleting a customer in Stripe is irreversible, cancels all subscriptions, and deletes any saved payment methods. The best practice is to retain the customer unless you created it accidentally.\n\n## Merge accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSalesforce allows you to merge up to three Salesforce accounts. Merging deletes the dependent Salesforce accounts, and their dependent Salesforce records become the primary Salesforce account’s records.\n\nThe connector doesn’t sync these changes into Stripe. Any Stripe subscriptions that belong to the deleted Salesforce account still belong to the original Stripe customer that corresponds to the deleted Salesforce account.\n\n#### Note\n\nThe child account is the account that’s merged into the primary account.",
    "title": "Accounts and contacts | Stripe Documentation",
    "description": "Learn about syncing the Stripe customer objects for your corresponding Salesforce accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/salesforce-cpq/products-prices",
    "markdown": "# Products and prices | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about syncing your products and prices between Salesforce and Stripe.\n\nWhen you create products and prices in Salesforce, they don’t sync to Stripe immediately. Instead, the products and prices sync to Stripe when they’re used in an activated order. You don’t need to manually create this information in Stripe.\n\nSalesforce is the primary source for product and pricing information. This means all pricing, product descriptions, SKUs, and so on sync from Salesforce to Stripe. Any updates you make to this information in Stripe won’t update the related products and prices in Salesforce. Additionally, if you activate a new order in Salesforce using updated product or pricing information, this action updates corresponding changes you’ve made in Stripe.\n\n## Create prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPricing data can come from either the Salesforce `OrderItem` or the linked `PricebookEntry`. When creating the Stripe price, the connector checks for differences between these Salesforce objects and decides which one to use. If the `PricebookEntry` data differs from the `OrderItem` data, the connector uses the `OrderItem` to create the Stripe price. Otherwise, the connector uses the `PricebookEntry`.\n\n### Reuse Stripe prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe Billing Connector for Salesforce CPQ reuses the prices created from a `PricebookEntry` that the connector previously synced. The connector creates a new price for prices generated using the `OrderItem`. You can’t reuse order items because they’re unique, but you can reuse pricebook entries across multiple order items. In both cases, the corresponding Stripe price ID is written back to the Salesforce object.\n\n## Field mappings for products ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe Billing Connector for Salesforce CPQ creates a product in Stripe even if there isn’t relevant data in Salesforce. All product fields are optional.\n\n| Salesforce field (Product2 object) | Stripe product |\n| --- | --- |\n| Name | [Name](https://docs.stripe.com/api/products/object#product_object-name) |\n| Description | [Description](https://docs.stripe.com/api/products/object#product_object-description) |\n\n## Field mappings for prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector supports the following price types in Stripe:\n\n*   Licensed prices – If the Billing Type (`SBQQ_BillingType_c`) field in Salesforce is either None or Advanced, the connector creates a licensed price in Stripe.\n*   Metered or usage prices – If the Billing Type (`SBQQ_BillingType_c`) field in Salesforce is Arrears, the connector creates a metered or usage price.\n*   Decimal prices – If the decimal value of your price has more precision than 12 decimal places, the connector rounds your price to 12 decimals.\n*   One-time and recurring prices – The connector treats any product with populated subscription fields as a recurring price. Metered prices must be recurring, but you can have tiered one-time prices. If you want to create a one-time price, don’t set the following fields on the Salesforce product:\n    *   Subscription Pricing (`SBQQ__SubscriptionPricing__c`)\n    *   Subscription Type (`SBQQ__SubscriptionType__c`)\n    *   Subscription Term (`SBQQ__SubscriptionTerm__c`)\n    *   Billing Frequency (`SBQQ__BillingFrequency__c`)\n\n| Salesforce field (PricebookEntry object) | Stripe price | Notes | Required |\n| --- | --- | --- | --- |\n| Product | [Product](https://docs.stripe.com/api/products/object) | Maps the Stripe `Product` object that’s linked to the Salesforce `Product` and `Pricebook` objects with the corresponding `Price` object in Stripe. |     |\n| Description | [Description](https://docs.stripe.com/api/products/object#product_object-description) |     |     |\n| Unit price | [Unit amount decimal](https://docs.stripe.com/api/prices/object#price_object-unit_amount_decimal) | Represents the amount billed to the customer at the frequency specified in the `Billing Frequency` field. |     |\n| Billing frequency | [Recurring, interval count](https://docs.stripe.com/api/prices/create#create_price-recurring-interval_count) | Required for recurring prices only. Supported values include monthly, quarterly, semi annual, and annual. These values map to the integer-equivalent. |     |\n| Billing type | [Recurring, usage type](https://docs.stripe.com/api/prices/create#create_price-recurring-usage_type) | Required for recurring prices only. An Arrears value maps to metered. An Advanced value maps to licensed. |     |\n| CPQ global term unit setting | [Recurring, interval](https://docs.stripe.com/api/prices/create#create_price-recurring-interval) | Required for recurring prices only. This is chosen during setup and isn’t a field-level mapping. |     |\n| Currency | [Currency](https://docs.stripe.com/api/prices/create#create_price-currency) | If your Salesforce organization has multi-currency enabled, we map the `CurrencyIsoCode` on the `PricebookEntry` to a Stripe currency. Otherwise, we use the default currency from setup. |     |\n\n### Tiered pricing using consumption schedules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can configure tiered pricing in Stripe by setting up a Salesforce Consumption Schedule–and associated rates–for products in Salesforce. Stripe uses the consumption schedule to associate tiered pricing with the line items billed using metered or licensed billing. You can use only one consumption schedule per order line.\n\nStripe Billing requires an unbounded tier to exist, which means a consumption rate with no value for the upper bound. The connector doesn’t use the processing order on a consumption rate, or the billing term and billing term unit on the consumption schedule associated with the order product. The connector uses the billing frequency and subscription term on the order line instead.\n\nFor tiered pricing, the connector maps data from the following Salesforce objects:\n\n*   `OrderLine` – If the `OrderLine` data differs from the corresponding `PricebookEntry`, the connector uses the `OrderLine` data and creates a new `Price` object in Stripe.\n*   `PricebookEntry` – The connector uses this value if the pricing data matches the `OrderLine` and the consumption schedule and rate data aren’t customized on a per-customer basis.\n*   `Consumption Schedule` – Although Salesforce allows you to associate multiple consumption schedules with a product, the connector supports only one consumption schedule per order line.\n*   `Consumption Rate` – The connector uses the rate associated with a consumption schedule to define each tier entry in the Stripe price. You can have multiple rates for a consumption schedule.\n\n#### Note\n\nYou can’t customize the field mapping to generate the tiered pricing configuration in Stripe, or use custom fields for price or tier boundaries.\n\nIf you customize the consumption schedule and consumption rate data on a per-customer basis, Stripe creates a new `Price` object to represent the customized pricing. The new price appears in the Stripe ID field on the `Order Line` object in Salesforce.\n\nTo define a mapping for tiered pricing, add the following `PricebookEntry` to your prices field mapping. These fields are required.\n\n| Salesforce field (PricebookEntry object) | Stripe price | Notes |\n| --- | --- | --- |\n|     | [Billing scheme](https://docs.stripe.com/api/prices/create#create_price-billing_scheme) | Set to tiered when an order line in Salesforce has a consumption schedule associated with it. |\n\n| Salesforce consumption schedule | Stripe price | Notes |\n| --- | --- | --- |\n| Type | [Tiers mode](https://docs.stripe.com/api/prices/object#price_object-tiers_mode) | A slab type uses graduated. A range type uses volume. |\n\nEach consumption rate that’s associated with a consumption schedule results in an additional tiers entry on the Stripe `Price` object. These fields are required.\n\n| Salesforce consumption rate | Stripe price | Notes |\n| --- | --- | --- |\n| Upper bound | [Tiers, Up to](https://docs.stripe.com/api/prices/object#price_object-tiers-up_to) | Stripe doesn’t have a lower bound and assumes the lower bound value of the first tier is zero. If this value is empty in Salesforce, Stripe uses the inf value to indicate there isn’t a limit for the upper bound. |\n| Pricing method |     | A per unit value instructs the connector to use the `unit_amount_decimal` field when mapping the price. If the value is flat fee, the connector uses the `flat_amount_decimal` field for the price. |\n| Price | Tiers, [Flat amount decimal](https://docs.stripe.com/api/prices/object#price_object-tiers-flat_amount_decimal) or [Unit amount decimal](https://docs.stripe.com/api/prices/object#price_object-tiers-unit_amount_decimal) | The pricing type used depends on the `Pricing Method` field. |\n\n## Manually sync products and prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen testing in a Salesforce sandbox environment, you can manually sync your entire product catalog for inspection in your Stripe test account. The manual sync respects any product and price filters you set.\n\nUse the following buttons in the **Settings** section of the connector:\n\n*   **Sync all products** – Syncs all products (but not prices) to your Stripe test account, regardless of when they were last updated. This operation occurs in the background and can take a couple minutes to complete. If you delete any products in Salesforce, they aren’t deleted or archived in Stripe.\n    \n*   **Sync all pricebooks** – Syncs all products and prices to your Stripe test account, regardless of when they were last updated. This operation occurs in the background. If you delete any products or prices in Salesforce, they aren’t deleted or archived in Stripe. After you create a price and set a recurring billing schedule in Stripe, you can’t update these parameters and sync them from Salesforce. Attempting to do so results in sync errors.\n    \n\nIf you already synced a product or price to your Stripe account and want a new sync, you can delete the contents of the Stripe ID field on the Salesforce object in your Salesforce account. Then sync again to create a new resource in Stripe.\n\n## Customize product pricing on orders ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn the Salesforce CPQ, you can optionally customize the unit price of a product on a quote. If you customize the price, this causes the information to differ from the price that’s linked to the product on the activated order. In this case, the connector creates a unique price in Stripe to represent the customized price. The Stripe price ID appears on the Stripe ID field for the order.\n\nWhen you create a data mapping with a customized price for an order, the price appears on the order line level and not the Salesforce price book entry level. Pricing is considered customized if any of the related fields (for example, recurring fields, amount, or currency) differ between the price book entry price and the order line price.\n\n## Multi-currency support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your Salesforce organization has [multi-currency enabled](https://help.salesforce.com/s/articleView?id=sf.admin_enable_multicurrency.htm&type=5), the connector maps the `CurrencyIsoCode` on the `PricebookEntry` to the equivalent [Stripe currency](https://docs.stripe.com/currencies) during Stripe price creation. This makes sure subsequent [invoices](https://docs.stripe.com/api/invoices) are billed in the proper currency.\n\nWhen billing in multiple currencies, consider the following:\n\n##### Multiple currencies per Stripe customer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe supports one active currency per customer. This means each Stripe customer can’t have multiple active [subscriptions](https://docs.stripe.com/api/subscription) that use different currencies. For example, if a customer has an active [subscription](https://docs.stripe.com/api/subscription) that’s billed in USD, you must wait until that subscription ends before creating a new subscription in a different currency, such as GBP.\n\n##### Order amendments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll Salesforce order amendments must use the same currency as the original order. Orders and order amendments can’t have a mix of currencies among the order items.\n\n##### Exchange rates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe connector doesn’t handle currency conversion. It simply passes through the price and currency pair found on the `PricebookEntry`.",
    "title": "Products and prices | Stripe Documentation",
    "description": "Learn about syncing your products and prices between Salesforce and Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/salesforce-cpq/subscriptions",
    "markdown": "# Subscription orders | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about syncing your subscription orders between Salesforce and Stripe.\n\nThe Stripe Billing Connector for Salesforce CPQ creates a subscription schedule in Stripe for every activated order in Salesforce that has a subscription type. In a Salesforce order, each order line creates a subscription item (for a recurring product) or an invoice item in Stripe. Order lines can’t be split into multiple line items in Stripe.\n\nBy default, each subscription schedule in Stripe doesn’t automatically renew. To renew a subscription, do either of the following:\n\n*   Create an order amendment with a new subscription start date and term.\n*   Configure your integration to auto-renew all subscriptions.\n\n#### Note\n\nThe “native” quote object–distinct from the `CPQ Quote` object–in Salesforce isn’t used. The connector uses orders generated from the `CPQ Quote` object.\n\n## Determine which orders to sync ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector checks Salesforce every 90 seconds for updated orders since the last successful order sync.\n\nThe connector attempts to sync all orders that meet the following conditions:\n\n*   The order status is activated. You can remove or customize this default condition.\n*   The order type is new.\n*   At least one of the order lines is a subscription product. This means it’s set to `SBQQ_SubscriptionType_c`.\n\nIf all order lines are one-time purchase items, the connector creates a one-time invoice instead of a subscription.\n\n### Order dates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you set up the connector, you can choose a backfill date for orders. Only orders created after this date sync to Stripe.\n\nYou can backdate subscription start dates, which is the order start date used in Stripe. To prevent errors when activating the order, you must provide a start date on the quote and related order.\n\nYou can optionally provide a trial end date. If you don’t set a trial date, the customer won’t receive a trial period.\n\n### Order sync conditions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add custom conditions to the default sync conditions. These conditions are described using standard SOQL syntax.\n\nTo add custom conditions or remove default conditions, navigate to **Stripe Billing Setup** > **Sync Preferences** > **Custom Order Sync Conditions**.\n\n### Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe connector can’t sync orders with more than 100 recurring line items. An error appears in Salesforce if an order has more than 100 recurring lines.\n\nYou must specify quantities as an integer in Salesforce. Stripe doesn’t allow decimal quantities. An error appears in Salesforce if an order has a decimal quantity.\n\nAll line items in an order must have the same interval count and interval type. The interval count maps from `Billing Frequency`, by default. The interval type is daily or monthly. Stripe doesn’t allow different billing frequencies in the same order, which means you can’t have one line item billed every other month and another line item billed every month.\n\n### Exclude line items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, all line items (including zeroed line items) sync from Salesforce to Stripe. You can exclude certain line items from the subscription schedule that’s created in Stripe. For example, you can exclude line items that are for informational purposes only that you don’t want to display on the recurring invoice in Stripe.\n\nTo exclude line items, set `Skip Line Item in Stripe` on the order item to `true`.\n\nWhen this field is set to `true`, the connector skips the order item and excludes it from the line items of the subscription schedule phase in Stripe. The internal field name is `Skip_Line_Item__c` (not excluding the package prefix).\n\n## Subscription schedule mapping ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAn activated order in Salesforce creates a subscription schedule in Stripe. The fields map as follows.\n\n| Salesforce order field | Stripe subscription schedule field | Notes | Required |\n| --- | --- | --- | --- |\n| Quote, Start date (`SBQQ_StartDate_c`) | [Start date](https://docs.stripe.com/api/subscription_schedules/create#create_subscription_schedule-start_date) |     |     |\n| Quote, Subscription term | [Phases, Iterations](https://docs.stripe.com/api/subscription_schedules/create#create_subscription_schedule-phases-iterations) |     |     |\n|     | [End behavior](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-end_behavior) | The default value is `cancel`. If you want the subscription to auto-renew, you can configure this mapping in the data mapper. |     |\n| Payment term (`SBQQ_PaymentTerm_c`) | Default settings, Invoice\\_settings, [Days until due](https://docs.stripe.com/api/subscription_schedules/object#subscription_schedule_object-default_settings-invoice_settings-days_until_due) |     |     |\n\n## Line item mapping ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach line item of an activated order in Salesforce maps as follows. These fields are required.\n\nIf the unit price for an order item is different from the pricebook unit price, the connector uses the order item price and creates a new Stripe price.\n\n| Salesforce field (OrderItem object) | Stripe line item field | Notes |\n| --- | --- | --- |\n| Pricebook Entry, UnitPrice | [Price](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-price) | The Stripe price contains the exact unit amount specified on the pricebook item. If you use a custom field to represent the recurring price billed to the customer, you can configure this mapping. |\n| OrderItem, UnitPrice | [Price](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-price) | The Stripe price contains the exact unit amount specified on the order line item. If you use a custom field to represent the recurring price billed to the customer, you can configure this mapping. |\n| Quantity (`OrderItem.SBQQ_OrderedQuantity_c`) | [Quantity](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-quantity) | You must specify the quantity as an integer; otherwise, the quantity is forced to `1` and the price adjusts to represent the net amount of the line item cost. If the billing type is `arrears` (metered billing), the quantity isn’t set on the line item. Instead, you must report the quantity to Stripe before the end of the customer’s billing period. |\n\n## Subscription changes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can’t update an activated order in Salesforce, and any changes you make to an order in Salesforce won’t sync to Stripe. To adjust or partially cancel a subscription mid-cycle, you can use an [order amendment](https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments).\n\nBy default, subscription schedules won’t automatically renew. To update the renewal information, create an [order amendment](https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments) that’s associated with the original contract.\n\nYou can also customize this functionality to auto-renew by default, or manage the renew logic directly in Stripe.",
    "title": "Subscription orders | Stripe Documentation",
    "description": "Learn about syncing your subscription orders between Salesforce and Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/sources/best-practices",
    "markdown": "# Best practices for using Sources\n\n## Best practices for using SourcesDeprecated\n\n## Best practices to accept a variety of payment methods through a single integration.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently handle any local payment methods using the Sources API, you must [migrate them to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nWhile we don’t plan to remove support for card payments, we recommend replacing any use of the Sources API with the [PaymentMethods API](https://docs.stripe.com/api/payment_methods), which provides access to our latest features and payment method types.\n\nThe flexibility of the Sources API helps you minimize the changes required to support additional payment methods as you add them.\n\n## Typical flow for card payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn a typical checkout flow for [card payments](https://docs.stripe.com/sources/cards) (excluding 3D Secure), your integration collects the card information and creates a source, and uses it to make a charge request. Because it requires no additional action from the customer and card payments provide synchronous confirmation, we can immediately confirm if the payment is successful and that the funds are guaranteed—using [webhooks](https://docs.stripe.com/webhooks \"webhook\") isn’t necessary.\n\n## The required use of webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOther payment methods may require your customer to take [additional action](https://docs.stripe.com/sources#flow-for-customer-action) (for example, a redirect) before a source becomes `chargeable` and can be used to make a charge request (for example, [iDEAL](https://docs.stripe.com/sources/ideal)). This transition generally happens asynchronously and may even occur after the customer leaves your website. For these reasons your integration must rely on webhooks to determine when a source becomes chargeable before creating a charge.\n\nStripe sends the following webhook events to notify you about changes to the status of the source:\n\n| Event | Description | Suggested action |\n| --- | --- | --- |\n| `source.chargeable` | A Source object becomes `chargeable` after a customer has authenticated and verified a payment. | Create a Charge. |\n| `source.failed` | A Source object failed to become chargeable because your customer declined to authenticate the payment. | Cancel the order and (optionally) re-engage the customer in your payment flow. |\n| `source.canceled` | A Source object expired and you can’t use it to create a charge. | Cancel the order and (optionally) re-engage the customer in your payment flow. |\n\nSimilarly, when creating a charge, certain [asynchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) payment methods might require days for the funds to be confirmed and the charge to succeed, requiring webhooks to know when to confirm and eventually fulfill your orders.\n\nStripe sends the following webhook events to notify you about changes to the status of a charge:\n\n| Event | Description | Suggested action |\n| --- | --- | --- |\n| `charge.pending` | The Charge is pending (asynchronous payments only). | No action required. |\n| `charge.succeeded` | The Charge succeeded and the payment is complete. | Finalize the order and send a confirmation to the customer over email. |\n| `charge.failed` | The Charge has failed and the payment couldn’t be completed. | Cancel the order and (optionally) re-engage the customer in your payment flow. |\n\n## Building a flexible integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo ensure that your checkout process is flexible and ready to support multiple payment methods, we recommend the following approach:\n\n### Source creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating [Sources](https://docs.stripe.com/api#sources), record the source ID on your internal order representation so that you can retrieve the order when you receive and process `source.chargeable` webhooks. Make sure to index your order objects based on this `source` attribute for efficient lookup.\n\n### Charge creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDelivery of the `source.chargeable` webhook charges the Source. When receiving the webhook, retrieve your internal order representation by a look-up based on the received source ID and verify that the order is awaiting a payment.\n\nWhen making a charge request, use your internal order ID as an [idempotency key](https://docs.stripe.com/api#idempotent_requests) to avoid any possible race condition. Additionally, if the source is reusable and you want to reuse it, make sure to attach it to a [Customer](https://docs.stripe.com/api#customers) before charging it. Refer to the [Single-use or reusable](https://docs.stripe.com/sources#single-use-or-reusable) and [Sources & Customers](https://docs.stripe.com/sources/customers) guides to learn more about how to handle single-use and reusable Sources and how they interact with [Customers](https://docs.stripe.com/api/customers \"Customers\").\n\nSimilarly to source creation, record the charge ID on your internal order representation so that you can retrieve the order when you receive and process `charge.succeeded` webhooks.\n\n### Confirmation page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter your customer takes the required actions to authorize a payment (for example, they’ve followed a redirect) you should present a confirmation page that shows the state of the order. You can do this by polling the order internally.\n\nBecause webhook delivery latency isn’t guaranteed, if want to further streamline your confirmation page, you can poll for the status of the associated Source in your client-side code. When you detect that your Source has become `chargeable`, you can initiate a Charge creation using that Source without waiting for the `source.chargeable` webhook to arrive.\n\nBe aware that some types of Sources take minutes (or even days) to become `chargeable`. If you decide to poll the Source, we recommend that you time out at some point and tell the customer that their order is awaiting payment confirmation, then send them a payment confirmation email asynchronously. You can see our recommended customer-facing messaging for each Source status in the table below.\n\nClient-side polling stops if the customer leaves your page. This means that you **must also** integrate against the `source.chargeable` [webhook](#the-required-use-of-webhooks) to make sure you don’t lose track of your customer’s order.\n\nIf you’re using Stripe.js, you can use [stripe.retrieveSource()](https://docs.stripe.com/js#stripe-retrieve-source) to implement your own polling:\n\n`// In order-confirmation-page.js  const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``);  // After some amount of time, we should stop trying to resolve the order synchronously: const MAX_POLL_COUNT = 10; let pollCount = 0;  const pollForSourceStatus = async () => {   const {source} = await stripe.retrieveSource({id: SOURCE_ID, client_secret: CLIENT_SECRET})   if (source.status === 'chargeable') {     // Make a request to your server to charge the Source.     // Depending on the Charge status, show your customer the relevant message.   } else if (source.status === 'pending' && pollCount < MAX_POLL_COUNT) {     // Try again in a second, if the Source is still `pending`:     pollCount += 1;     setTimeout(pollForSourceStatus, 1000);   } else {     // Depending on the Source status, show your customer the relevant message.   } };  pollForSourceStatus();``\n\nThe table below contains recommendations for potential customer-facing messages you can show based on the Source’s status.\n\n| Status | Customer-facing messaging |\n| --- | --- |\n| Source is `chargeable` | Your order was received and is awaiting payment confirmation. |\n| Source is `canceled` | Your payment failed and your order couldn’t be processed. |\n| Source is `failed` | Your payment failed and your order couldn’t be processed. |\n| Source is still `pending` after polling for a while | Your order was received and is awaiting payment confirmation. |\n\nAfter you create a Charge (and if the user is still on your confirmation page), you can show the following messages based on the status of the Charge:\n\n| Status | Customer-facing messaging |\n| --- | --- |\n| Charge is `pending` | Your order was received and is awaiting payment confirmation. |\n| Charge is `failed` | Your payment failed and your order couldn’t be processed. |\n| Charge is `succeeded` | Your payment is confirmed and your order is complete. |\n\n### Order confirmation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnly confirm your order after you receive the `charge.succeeded` webhook (this may happen instantly, but it may not). Send an email to the customer at this stage because the payment confirmation can take days for asynchronous payments.\n\n### Cancellations and failures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nListen for the `source.canceled` and `source.failed` webhooks and make sure to cancel the order associated with the source concerned. If you follow the best practices above, you should never receive a `source.canceled` webhook for sources that were previously `chargeable` (as your `source.chargeable` handler should have created a charge immediately, preventing the source from getting canceled). You’ll still receive `source.canceled` webhooks for sources that were never `chargeable` and remained `pending`, generally an indication that your customer left your checkout flow early. You can also receive a `source.failed` webhook whenever the Customer refused the payment or a technical failure happened at the payment scheme level.\n\nYou should also listen for the `charge.failed` webhooks to make sure to cancel the order associated with the received charge.\n\nFor each of these events, we recommend that you notify your customer that their order failed and to invite them to re-engage in your payment flow, if desired.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Supported payment methods](https://docs.stripe.com/sources)\n*   [Sources API reference](https://docs.stripe.com/api#sources)\n*   [Considerations for Stripe Connect platforms](https://docs.stripe.com/sources/connect)",
    "title": "Best practices for using Sources | Stripe Documentation",
    "description": "Best practices to accept a variety of payment methods through a single integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments",
    "markdown": "# Subscription order amendments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about creating order amendments for your subscription orders.\n\nThe Stripe Billing Connector for Salesforce CPQ creates a subscription schedule in Stripe for every Salesforce order that’s synced with a subscription type. To modify an existing order, you create an order amendment. An order amendment in Salesforce results in a new subscription schedule phase on an existing subscription schedule in Stripe.\n\nDepending on your use case, you might need to create one of the following amendment types:\n\n*   [Insertion order](https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments#insertion-order)\n*   [Termination order](https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments#termination-order)\n*   [Prorated order](https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments#prorated-order)\n\n[](#insertion-order)\n\nTo adjust or partially cancel an activated order mid-cycle, you use an insertion order amendment. The connector updates the subscription schedule in Stripe with the new products and quantity of the order amendment in Salesforce. The connector uses the same mapping as the initial order integration.\n\n### Start and end dates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOrder amendments can’t have gaps between the start and end dates. To prevent any errors, the start date of the order amendment must be:\n\n*   On or before the end date of the previous order or order amendment, or\n*   The same start date as the previous initial order or order amendment\n\nAll order amendments must co-terminate with the initial order. The Salesforce CPQ uses the start date of a contract combined with the subscription term to calculate the end date. This means that all order amendments must have the same end date (start date and subscription term).\n\n### Order deltas ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAn order amendment includes only the delta from the previous order. The connector pulls all previous orders and aggregates all previous line items to determine what subscription items to include in the new subscription schedule phase. Stripe doesn’t reuse or connect the items from one phase of a subscription to items from a previous phase.\n\n### Order contracts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo modify a subscription in Stripe, you must connect an order and order amendment to the same contract. The Salesforce CPQ does this automatically for each order and order amendment that’s contracted.\n\nWe recommend contracting from the order in the Salesforce CPQ. Stripe doesn’t have a direct representation of the Salesforce `Contract` object.\n\n### Item prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUnless the order item price changes, Stripe uses the same `Price` object across subscription schedule phases.\n\n## Revise and terminate order lines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you partially or fully terminate a previous order line, this action creates a negative-quantity order line in Salesforce. Stripe doesn’t allow negative line items. If an order amendment removes a product or some quantity of a product from a subscription, the negative-quantity order lines aggregate with the previous order lines that they revise.\n\nFor example, an initial order has a line item with a quantity of 2. The order amendment decreases the quantity by 1. As a result, the new subscription schedule phase in Stripe has a single subscription item with a quantity of 1.\n\nFor positive-quantity order lines, the connector creates a unique subscription schedule phase item in Stripe.\n\nAll order items that modify an order line in a previous order amendment must exist on the previous subscription phase. In other words, if you skip a line item on an order, you must skip that line item on the order amendment if you revise the line item.\n\n## Multiple order lines with the same product and price ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe doesn’t allow multiple subscription schedule phase items with the same price ID. Salesforce doesn’t have this limitation.\n\nIf you use the same price on multiple order lines, the connector does the following:\n\n*   Duplicates the price in Stripe\n*   Adds the price to the subscription schedule phase\n*   Archives the price after it’s used (`active = false`)\n\nThe duplicated prices in Stripe contain the following metadata:\n\n*   `salesforce_duplicate = true`—Indicates that the price is a duplicate of another price\n*   `salesforce_auto_archive = true`—Auto-archives the price after use\n*   `salesforce_original_stripe_price_id = price_xyz`—Includes the ID of the price used for the duplicated price\n\n## Mid-month amendments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector requires that all order amendments co-terminate with the initial order. If the amendment order starts on a different day of the month than the initial order, you must:\n\n*   Set the end date on the amendment order.\n*   Set the subscription term to the number of whole months in the amendment order.\n\nExample of a mid-month order amendment:\n\n|     | Initial order | Order amendment |\n| --- | --- | --- |\n| **Start date** | January 1, 2022 | February 15, 2022 |\n| **End date** | December 31, 2022 | December 31, 2022 |\n| **Subscription term** | 12  | 10  |\n\n## Backdated amendments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector processes backdated amendments in current time. A backdated order amendment starts in the past, which means the latest phase on the subscription schedule won’t align with the start date on the order amendment.\n\nFor example, a customer wants to amend an existing subscription, and pushes the amendment order through the connector at a later date than its effective date.\n\n## Same-day amendments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector can process same-day amendments, such as the following scenarios:\n\n*   A subscription starts today, and the customer wants to amend their contract on the same day that it started.\n*   A subscription starts on a future date, and the customer wants to amend the order with a start and end date that’s the same as the original order.\n\n### Same-day amendments with an existing subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn this case, the connector treats the amendment as a prorated order amendment, with some differences:\n\n*   The end date of the previous phase uses a special `now` value, instead of midnight on the current day (which, in this example, already passed).\n*   The start date of the next phase (for example, the order amendment) uses a `now` value as well.\n*   The amounts of the prorated line items are equal to the full billing amount for the duration of the contract.\n\n### Same-day future amendments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a subscription hasn’t started, you can’t use the special `now` value in the same-day amendment when the subscription starts. In this case, the connector does the following:\n\n*   Collects any one-time line items from the order (initial or amendment) that shares the same order period (for example, the start and end dates)\n*   Adds these items to the new phase\n*   Removes the phase that represents the previous order\n\nStripe completely removes the subscription schedule phase metadata that’s associated with the previous order.\n\n## Insertion order amendment example ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nHere’s an example order amendment and how it maps to Stripe Billing.\n\n**Initial order**—The initial order combines the customer and subscription schedule into a single subscription phase in Stripe.\n\n**Order amendment**—On January 15, 2022, you create an order amendment in Salesforce for the initial order.\n\nThe initial order and order amendment have the following values:\n\n|     | Initial order | Order amendment |\n| --- | --- | --- |\n| **Start date** | January 1, 2022 | February 1, 2022 |\n| **Subscription term** | 12  | 11  |\n| **Line items** | One<br><br>Product A<br><br>*   Quantity: 10<br>*   Unit price: 10 USD<br>*   Billing term: Monthly | Two<br><br>Product A<br><br>*   Quantity: 6<br>*   Unit price: 10 USD<br><br>Product B<br><br>*   Quantity: 5<br>*   Unit price: 20 USD |\n\nIn the Salesforce CPQ, the order amendment represents Product A as an order line with quantity -4 (decrease of quantity 4). Because the unit price is the same, Stripe uses the same `Price` object on the subscription schedule phase item.\n\nAfter the order amendment activates, the subscription schedule updates to contain the following phases:\n\n|     | Phase 1 | Phase 2 |\n| --- | --- | --- |\n| **Start date** | January 1, 2022 | February 1, 2022 |\n| **End date** | February 1, 2022 | February 1, 2023 |\n| **Items** | Product A, Quantity: 10 | *   Product A, Quantity: 6, Same price<br>*   Product B, Quantity: 5 |\n\n[](#termination-order)\n\nTo fully cancel a contract, you use a termination order amendment. The order amendment sets the quantity of all line items on the order to 0.\n\nWhen this happens, the connector updates the end date of the last subscription schedule phase to the start date of the termination order amendment.\n\nTo fully terminate an order on the same day it starts, you [cancel](https://docs.stripe.com/api/subscription_schedules/cancel) the subscription schedule instead of modifying the previous phase.\n\n[](#prorated-order)\n\nA prorated order amendment has a start date that falls outside a billing cycle boundary, and an end date that isn’t equal to the billing frequency.\n\nFor example, an order lasts 1.5 years starting on month 6 that amends a 2-year contract, billed yearly. That order is a prorated order amendment. You bill the customer a prorated amount on the start date of the amendment for the portion of the order that doesn’t fall within the standard billing cycle.\n\nWhen you create a prorated order amendment in Salesforce, the connector does the following in Stripe for each order line to prorate:\n\n*   Creates a new price object to represent the prorated amount\n*   Adds an invoice item with the newly created price to the newly created phase to represent the prorated amount\n*   Updates the subscription item’s quantity to incorporate the amendment at the time it goes into effect, without billing for anything more than the prorated amount\n\nStripe Billing sends an invoice for the full product amount and quantity at the end of the billing cycle. In the example above, the billing cycle ends on month 12 and the invoice is for 120 USD x 2 = 240 USD.\n\nYou can’t prorate the following prices:\n\n*   Prices configured for metered billing—The amount due calculates after the end of the billing cycle.\n*   One-time, non-recurring prices—These bill immediately and don’t have a billing cycle associated with them.\n*   Tiered prices created from consumption schedules.\n\n## Prorated order amendment example ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nHere’s an example order amendment and how it’s represented in Stripe.\n\n| Phase 0 | Phase 1 at 6 months | Phase 1 at 12 months |\n| --- | --- | --- |\n| *   Duration: 0 to 6 months<br>*   Subscription items: Quantity: 1<br>*   Quantity: 1 | *   Duration: 6 to 24 months<br>*   Subscription items: Product A, Quantity: 2<br>*   Phase `proration_behavior` is set to none<br>*   Invoice items: Single item to represent that the 6-month prorated cost of the product is added to the phase | A third phase isn’t created. At month 12 of phase 1, a new invoice is created for the subscription item added in phase 1 at 6 months. |\n\nA single proration item in Stripe represents the prorated amount of the order item. This means a debit for the prorated time through the remainder of the billing cycle.\n\nThe Stripe Billing proration calculation creates two proration items:\n\n*   A credit for unused time on the old plan\n*   A debit for the prorated used time through the rest of the billing period\n\nYou won’t see the credit line item in Stripe when using the proration data that the Salesforce CPQ calculates.\n\n## Use CPQ-calculated prorations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen billing information exists in CPQ, the connector treats it as the source of truth. This allows other financial systems (such as Stripe) and financial reporting tools (such as NetSuite or QuickBooks) to reconcile proration and other financial data. By default, the connector uses `CPQ Subscription Prorate Precision` equal to `Month` to calculate proration. The connector also supports `CPQ Subscription Prorate Precision` equal to `Monthly and Daily`.\n\nIn some cases, amounts won’t match between Stripe and Salesforce because only Stripe does some calculations, and they don’t exist in CPQ. For example, data for taxes and metered billing only exist in Stripe.\n\n## Calculate prorated prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn Salesforce, a prorated line item contains the following information:\n\n*   Subscription term\n*   Unit amount (mapped to `unit_decimal_amount` in Stripe)\n*   Quantity\n*   Billing frequency (mapped to `recurring.interval` and `recurring.interval_count` in Stripe)\n*   Start date\n\n### Salesforce CPQ Month prorate precision ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo determine what portion of the order item to prorate when `CPQ Subscription Prorate Precision` is set to `Month`:\n\n1.  Calculate the months (terms) of the subscription that aren’t included in the billing cycle. Use the start date, subscription term, and billing frequency of the line item to determine this value.\n2.  Calculate the per-month cost of the line item. Divide the value that’s mapped to `unit_amount_decimal` by the subscription term.\n3.  Multiply the per-month cost (value from step 2) by the number of months that aren’t included in the billing cycle (value from step 1).\n\nFor example, a subscription has six months that aren’t included in the billing cycle. The per-month cost of the line item is 10 USD, which is calculated by dividing a 180 USD unit amount by an 18-month subscription term. Multiplying the per-month cost of 10 USD by six months results in 60 USD.\n\n### Salesforce CPQ Monthly and Daily prorate precision ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo determine what portion of the order item to prorate when `CPQ Subscription Prorate Precision` is set to `Monthly and Daily`:\n\n1.  Calculate the partial month (at the end of the term) of the subscription that isn’t included in the billing cycle. The partial month equals the number of days not included in the billing cycle.\n2.  Calculate the per-day cost of the line item. Divide the value that’s mapped to `unit_amount_decimal` by the number of days in a month. CPQ calculates the number of days in a month by dividing the number of days in a year by the number of months in a year (365 divided by 12).\n3.  Multiply the per-day cost (value from step 2) by the number of days that aren’t included in the billing cycle (value from step 1).\n\nThe connector calculates prorations based on the setting for `CPQ Subscription Prorate Precision`.\n\n## Calculate prorated prices with customized price fields ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTypically, `UnitPrice` maps to `unit_price_decimal` in Stripe. You can also use a custom field for the price. The connector assumes the custom field you specify is the price of the product for the entire billing cycle.\n\nFor example, you specify a custom price field of 120 USD, rather than using the 180 USD value for the `UnitPrice`. For a quarterly billing cycle, the cost per quarter is 30 USD, which is 120 USD divided by four quarters.\n\nFor a prorated order line, the connector expects the full amount of the billing cycle for the custom price field. The connector calculates the prorated amount from this value.\n\n## Represent prorations with unique prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA unique aspect of this approach is generating a Stripe `Price` object to represent the prorated amount. Each prorated amount creates a `Price` object in Stripe tied to the same product as the original fully billed price. In other words, two distinct `Price` objects are created to represent the proration line item and the non-prorated subscription line item.\n\nThe metadata of the `Price` object indicates they were created for this purpose: `salesforce_proration => true`\n\nThese prices are automatically archived (`active=false`) after use in a subscription.\n\n## How prorated invoice items are billed ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen the phase representing the prorated order amendment starts, a pending invoice item is added to the customer’s subscription.\n\nThe connector listens for newly created invoice items to determine if they represent prorated amounts. If they do, the connector creates and finalizes an invoice for the subscription. The invoice bills the customer for the prorated amount of their subscription.\n\nYou can’t specify which items in a subscription to bill—the subscription bills any pending invoice items attached to it.",
    "title": "Subscription order amendments | Stripe Documentation",
    "description": "Learn about creating order amendments for your subscription orders.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/salesforce-cpq/coupons",
    "markdown": "# Sync Stripe coupons | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to sync Stripe coupons between Salesforce and Stripe.\n\nThe Stripe Billing Connector for Salesforce CPQ enables you to add configurable, stackable coupons to your Stripe subscriptions and subscription items synced from Salesforce. For example, you can offer your customers a one-time discount of 10% off or 50 USD off for the first 3 months of their subscription.\n\n## Assign permission sets ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor coupons to work properly, you must assign the Salesforce user who adds and syncs orders to the Stripe Connector Coupon User permission set. To add a user to the permission set, they must have a Salesforce CPQ license.\n\n## Add a coupon to a Salesforce order or order item ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector exposes the following custom Salesforce objects that you can use together to add discounts to your Stripe subscriptions:\n\n| Salesforce object | Description |\n| --- | --- |\n| Quote Stripe Coupon | A Salesforce object representing a Stripe coupon. The `Quote Stripe Coupon` has a one-to-one field mapping with the [Stripe Coupon](https://docs.stripe.com/billing/subscriptions/coupons#coupons). |\n| Quote Stripe Coupon Association | A Salesforce junction object used to correlate a `Quote Stripe Coupon` to a `Quote`. |\n| Quote Line Stripe Coupon Association | A Salesforce junction object used to correlate a `Quote Stripe Coupon` to a `Quote Line`. |\n\nWhen a Salesforce order activates, the connector:\n\n1.  Identifies any `Quote Stripe Coupon` objects corresponding to the Salesforce order or order line\n2.  Serializes the `Quote Stripe Coupon` onto the corresponding Salesforce order or order line\n3.  Creates (or re-uses where possible) a Stripe coupon for each Salesforce coupon\n4.  Applies the coupons to the corresponding subscription or subscription item created in Stripe\n\n## Reuse Stripe coupons ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector reuses existing Stripe coupons if multiple orders or order items reuse the corresponding Salesforce coupon. Modifying the original Salesforce coupon creates a new Stripe coupon.\n\n## Custom mappings for coupons ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSimilar to other native Salesforce objects, you can use the data mapper to map the `Quote Stripe Coupon`. By default, the `Quote Stripe Coupon` is a one-to-one field mapping to the `Stripe Coupon`. You can also add custom metadata to the `Quote Stripe Coupon`.\n\n## Custom Apex triggers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe connector uses custom Apex triggers to serialize the `Quote_Stripe_Coupon__c` on the Salesforce order `after update`. If you have custom workflows that modify the `Quote_Stripe_Coupon__c`, make sure the trigger occurs `before update` to avoid race conditions between the workflows.\n\n## Multi-currency support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you enabled [multi-currency](https://help.salesforce.com/s/articleView?id=sf.admin_enable_multicurrency.htm&type=5) and you specify an amount off for the coupon, the connector maps the `CurrencyIsoCode` on the `Quote Stripe Coupon` to the equivalent [Stripe currency](https://docs.stripe.com/currencies) during Stripe coupon creation.",
    "title": "Sync Stripe coupons | Stripe Documentation",
    "description": "Learn how to sync Stripe coupons between Salesforce and Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/salesforce-cpq/evergreen-orders",
    "markdown": "# Evergreen subscription orders | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to sync your evergreen subscription orders between Salesforce and Stripe.\n\nThe Stripe Billing Connector for Salesforce CPQ supports syncing your evergreen orders to Stripe subscriptions. Evergreen orders are subscriptions in Salesforce that have no end date, as opposed to renewable orders, which are recurring subscriptions that have a set end date.\n\nThe connector examines `SBQQ_SubscriptionType__c` to determine if an order is Renewable or Evergreen. A Salesforce order with an `Evergreen` subscription type syncs into a Stripe subscription, regardless of the value for `SBQQ_ProductSubscriptionType__c`, which could be Renewable, or Renewable and Evergreen.\n\n## Requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSet the `collection_method` field to `send_invoice` and specify a value for `days_until_due` on the Stripe subscription. You can map to these fields in the data mapper.\n\nSet `SBQQ_DefaultSubscriptionTerm__c` on the Salesforce evergreen order to `1`. To prevent unexpected behavior on the invoices, make sure the evergreen order has a default subscription term equal to 1.\n\n## Cancel evergreen orders ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can cancel evergreen orders in Salesforce by making an order amendment with quantity zero and setting the cancellation date as the start date.\n\nTo cancel a Stripe subscription immediately, set the amendment start date to the current date. To cancel a Stripe subscription on a specific date, set the amendment start date to a date in the future.\n\nIf you cancel a subscription during a billing period, the subscription cancels immediately and the customer won’t receive a credit or refund for the remainder of the billing period.\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe connector doesn’t sync Salesforce orders that contain both evergreen and non-evergreen products.\n\nThe connector only supports canceling Salesforce evergreen orders with one product. Attempting to cancel a subset of the products in an evergreen order cancels the entire Stripe subscription. We recommend creating separate Salesforce evergreen orders for each product, if you want the ability to cancel orders in Stripe.\n\nYou must set the `collection_method` on a Stripe subscription to `send_invoice`. The default value is `charge_automatically`, but the connector doesn’t support collecting customer payment methods, which is necessary to charge automatically.",
    "title": "Evergreen subscription orders | Stripe Documentation",
    "description": "Learn how to sync your evergreen subscription orders between Salesforce and Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/salesforce-cpq/error-handling",
    "markdown": "# Error handling | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to handle errors when syncing Salesforce records using the connector.\n\nIf you encounter errors when using the Stripe Billing Connector for Salesforce CPQ to sync records from Salesforce to Stripe, use the following list to identify and resolve the errors. In most cases, you must modify the Salesforce record data, then manually sync the record to recover from the error.\n\n## Data errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below contains the errors you might encounter when syncing Salesforce orders and how to resolve them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Unsupported field value for `days_until_due`. | The mapped field value for `days_until_due` must be an integer or supported `CPQ Payment Term` value. | Update the mapped field value for `days_until_due` with an integer or a supported `CPQ Payment Term` value (for example, Net-15, Net-30, Net-45, Net-60, or Net-90). |\n| Required mappings were empty for the Stripe object. | The connector requires specific fields on the order and order items. | Navigate to the Stripe Billing app in Salesforce and open the data mapper. Make sure that you set all required fields under `Subscription Schedule`, `Subscription Item`, and `Price Order Item`. |\n| The order line was deleted or not activated. | The order item’s fields indicate that it was deleted or not activated. | Verify that all order items are activated and not deleted. |\n| The connector attempted to sync the amendment order when the initial order was skipped, because it didn’t match custom sync filters. | You can specify custom order filters in the Stripe Billing app in Salesforce. These filters determine whether or not to sync the Salesforce order. | You can’t sync amendment Salesforce orders before syncing the corresponding initial Salesforce order. This error indicates that the initial Salesforce order failed to sync because it didn’t pass the order filter criteria, even though the amendment Salesforce order passed. |\n\n## Amendment errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below contains the errors related to amendment orders and how to resolve them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Order amendments must co-terminate with the initial order. | The Salesforce amendment order must end on the same date as the initial Salesforce order. | Update the Salesforce order amendment so that the end date co-terminates with the initial order. This likely occurs when you update the subscription term. |\n| The Stripe subscription for the evergreen order has already been canceled and can’t be modified. | The connector synced an evergreen Salesforce amendment order that’s attempting to amend a canceled Stripe subscription. | The Salesforce amendment order can’t be synced. |\n| The Stripe subscription schedule has already been canceled and can’t be modified. | The connector synced a Salesforce amendment order that’s attempting to amend a canceled Stripe subscription schedule. | The Salesforce amendment order can’t be synced. |\n| Amendment orders must start on the same day of the month as the initial order. Enable the feature for non-anniversary amendments to sync amendments on any day of the month. | The Salesforce amendment order starts on a different day of the month than the initial order. | Update the Salesforce amendment order to start on the same day of the month as the initial Salesforce order, or contact support to enable non-anniversary amendments in your account. |\n| The amendment order subscription term doesn’t equal a number of whole months between the start and end date. | This occurs when a non-anniversary amendment is synced and the subscription term for the quote is unexpected. | Update the subscription term for the Salesforce amendment order to be a number of whole months between the start and end date of the Salesforce order. |\n| Unable to find the corresponding Stripe subscription schedule for the amendment order. | An amendment Salesforce order modifies an initial Salesforce order that previously synced. This error indicates that the corresponding Stripe subscription schedule created during the initial Salesforce order sync can’t be found because it was deleted. | The Salesforce amendment order can’t be synced. |\n| The backend prorated order amendment case isn’t supported. | A Salesforce amendment order modifies an initial order that was backend prorated, but the start dates don’t align. | The connector doesn’t support this use case. Contact [support](https://support.stripe.com/) for next steps. |\n\n## Quote errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below contains the errors related to CPQ quotes and how to resolve them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| There’s no CPQ quote associated with the Salesforce order. Orders pushed to Stripe must have a related CPQ quote. | All Salesforce orders need a corresponding CPQ quote. This error indicates that the connector couldn’t find a corresponding quote. | Regenerate the Salesforce order from a Salesforce CPQ quote. |\n| Unable to find the initial Salesforce CPQ quote associated with the order amendment. | All Salesforce orders that the connector syncs need an associated Salesforce CPQ quote. | Regenerate the Salesforce order from a Salesforce CPQ quote. |\n| You can’t specify the subscription term as a decimal value. | The subscription term represents the contract duration in number of months. This value can’t be a decimal. | Update the mapped subscription term with a whole number. |\n| Billing frequency isn’t a supported `CPQ Billing Frequency` option. | CPQ supports Monthly, Quarterly, Semiannual, and Annual as values for the `SBQQ__BillingFrequency__c` field. | Update the `CPQ Billing Frequency` field value to `Monthly`, `Quarterly`, `Semiannual`, or `Annual`. |\n\n## Price errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below contains the errors related to prices and how to resolve them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Found a corresponding Stripe price for the Salesforce price, but the price data has changed. | The Salesforce pricebook entry that’s linked to the order item previously synced, and the corresponding Stripe price data has changed. | Clear the Stripe ID from the Salesforce pricebook entry and sync the Salesforce order again. This results in a newly created Stripe price for the pricebook entry. |\n| More than one consumption schedule is linked to a pricebook, but there can only be one. | The connector found more than one consumption schedule linked to a pricebook, when there can only be one. | Delete one of the consumption schedules attached to the pricebook entry. |\n| The subscription term can’t be a decimal value. | The subscription term represents the contract duration in number of months. This value can’t be a decimal. | Update the mapped subscription term to a whole number. |\n| A decimal value was provided for the upper tier bound, but consumption rate tier bounds must be integers. | The connector found a decimal value for the upper tier bound of the Salesforce consumption rate. | Update the tier bound for the Salesforce consumption rate to an integer. |\n| The pricing method on the consumption rate isn’t supported. | The `SBQQ__PricingMethod__c` field accepts a value of `PerUnit` or `FlatFee`. | Update the `SBQQ__PricingMethod__c` field value to either `PerUnit` or `FlatFee`. |\n| The consumption schedule type isn’t supported. | The `Consumption Schedule Type` field accepts a value of `Range` or `Slab`. | Update the `Consumption Schedule Type` to either `Range` or `Slab`. |\n| The `unit_amount_decimal` field can’t be empty for Stripe price objects. | The connector found an empty value for the mapped Salesforce value, and prices can’t be empty. | Update the mapped Salesforce value to a positive integer. |\n| Unexpected `billing_scheme` value on Stripe price. | The billing scheme isn’t set to a valid value. | Update the billing scheme to either `per_unit` or `tiered`. |\n| The pricing interval isn’t supported. | The pricing interval isn’t set to a valid value. | Update the pricing interval to either `Month` or `Year`. |\n\n## Product errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below contains the errors related to Salesforce products and how to resolve them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| Product billing type isn’t a supported `CPQ Product Billing Type` option. | The product billing type (`SBQQ__BillingType__c`) accepts a value of `Advance` or `Arrears`. | Update the product’s `SBQQ__BillingType__c` field to either `Advance` or `Arrears`. |\n| Adding Salesforce products with a renewable type to evergreen orders isn’t supported. | Salesforce CPQ products accept a value of Renewable or Evergreen. | The connector doesn’t support both product types in a single Salesforce order. To sync the Salesforce order, you must remove one of the order items. |\n\n## Termination errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe table below contains the errors related to termination orders and how to resolve them.\n\n| Error | Description | Recommendation |\n| --- | --- | --- |\n| A termination order is processing, but more amendments are queued. | The connector is processing a termination order that cancels the subscription schedule, but there are more amendment orders to process. | To terminate a Salesforce order, you must delete or deactivate any amendment orders that are activated after the termination order. To amend a Salesforce order before terminating it, you must delete or deactivate the termination Salesforce order so the amendment order is processed, then sync the termination Salesforce order. |\n| Termination quantity is greater than the aggregate quantity for the order item. | You’re attempting to reduce an order item’s quantity by more than the existing quantity, resulting in a negative quantity. | Update the order item quantity to 0 or more. |\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Field defaults and custom mappings](https://docs.stripe.com/connectors/salesforce-cpq/field-mappings)\n*   [Products and prices](https://docs.stripe.com/connectors/salesforce-cpq/products-prices)\n*   [Order amendments](https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments)\n*   [Subscription orders](https://docs.stripe.com/connectors/salesforce-cpq/subscriptions)",
    "title": "Error handling | Stripe Documentation",
    "description": "Learn how to handle and recover from any errors you receive when syncing Salesforce records using the Stripe Billing Connector for Salesforce CPQ.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/paypal/accept-a-payment",
    "markdown": "# Accept a PayPal payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nStripe Checkout shows PayPal either as a standard payment method or as a standalone button, depending on which option is more likely to increase the conversion rate.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support PayPal payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable PayPal—it shows the differences between accepting a card payment and using PayPal.\n\n### Enable PayPal as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), do the following:\n\n1.  Add `paypal` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the same currency.\n\n`Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'paypal'],   line_items: [{     price_data: {       currency: 'usd',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })`\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nYou don’t need to connect your PayPal business account to test the integration. However, make sure to connect your PayPal and Stripe accounts when you’re ready to [activate live mode payments](https://docs.stripe.com/payments/paypal/connect-your-paypal-account).\n\nWhen testing your Checkout integration, select **PayPal** as the payment method and click **Pay**.\n\nTo simulate the most common integration and failure scenarios for PayPal payments, pass `email` values that match the patterns described in these [test scenarios](https://docs.stripe.com/payments/paypal/accept-a-payment?platform=web&ui=stripe-hosted#test-scenarios).\n\n### Test scenarios![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Email pattern | Scenario | Explanation |\n| --- | --- | --- |\n| `.*payee_account_restricted@.*` | Merchant account restricted | Capturing or authorizing a payment fails with a `payment_method_unexpected_state` error if your merchant account is restricted by PayPal. Provide an email matching this pattern at time of authorization to fail the authorization. |\n| `.*transaction_refused@.*` | Transaction refused | Capturing a payment fails with a `payment_method_provider_decline` error if the transaction is refused by PayPal. |\n| `.*instrument_declined@.*` | Payment instrument declined | Capturing a payment fails with a `payment_method_provider_decline` error if the instrument presented was either declined by the processor or bank, or it can’t be used for this payment. |\n| `.*lost_dispute@.*` | Lost dispute | On capture, the payment intent first succeeds only to be disputed. The dispute created is already lost and the merchant can’t submit evidence on the Stripe Dashboard. |\n| `.*authorization_expired@.*` | Manually capturing an authorized payment | Capturing an authorized payment fails with a `capture_charge_authorization_expired` error if the authorization has already expired. |",
    "title": "Accept a PayPal payment | Stripe Documentation",
    "description": "Learn how to accept PayPal payment, a digital wallet popular with businesses in Europe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/salesforce-cpq/mdq-products",
    "markdown": "# Multi-dimensional quoting (MDQ) products | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about syncing MDQ products between Salesforce and Stripe.\n\nThe Stripe Billing Connector for Salesforce CPQ enables you to create, manage, and bill for deals with annual price or quantity adjustments. Ramp deals can span a single year or multiple years, and are single subscriptions segmented into blocks of time. This provides sales representatives with detailed control over pricing specific units of time within a subscription.\n\n## Create MDQ products ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a multi-dimensional quoting (MDQ) product in Salesforce by adding a price dimension to the Price Dimensions related list for your product. The type determines how your segments appear: by year, quarter, or month. You can also allow users to edit a segment’s cost, quantity, or discounts. The connector doesn’t support MDQ products with custom segments.\n\nUsing the connector to sync a Salesforce order with an MDQ product results in a Stripe subscription schedule with a subscription schedule phase for each ramp. For example, a 3-year contract segmented by year results in a Stripe subscription schedule with three phases, one for each ramp year. Each phase has the `salesforce_segment_index` and `salesforce_segment_label` metadata so that you know which ramp the phase corresponds to.\n\n## Amend MDQ products ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMDQ ramps or segments produce multiple quote lines, one for each segment. When amending an original Salesforce order with MDQ products, the connector supports the following:\n\n*   Terminating the entire Salesforce order\n*   Adjusting the quantity of a Salesforce product in one or all of the ramps on the Salesforce order\n*   Adding a standard product to the Salesforce order\n*   Removing a standard product from the Salesforce order\n\nWhen amending an original Salesforce order with an MDQ product, you must set the `SBQQ__AmendmentStartDate__c` field on the contract equal to the `SBQQ__StartDate__c` field on the amendment quote. Otherwise, you can create and sync an [order amendment](https://docs.stripe.com/connectors/salesforce-cpq/subscription-order-amendments) as usual.\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConsider the following MDQ limitations:\n\n*   You can have one ramp schedule per Salesforce order.\n*   You can sync products with the same billing frequencies across each ramp.\n*   Ramps must be consecutive time periods.\n*   You can only amend current and future segments of an MDQ subscription. Past segments aren’t available.\n*   Don’t amend the ramp period. For example, you can’t change the ramp deal from yearly to monthly.\n*   Don’t shorten a ramp deal. To terminate an order, you must cancel the line items across all segments.",
    "title": "Multi-dimensional quoting (MDQ) products | Stripe Documentation",
    "description": "Learn about syncing MDQ products between Salesforce and Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/balance/balanace_object",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/no-code/customer-portal",
    "markdown": "# Set up the customer portal\n\n## Let your customers manage their own billing accounts with a portal that Stripe hosts.\n\nWhen you’re ready to offer your customers a way to self-serve their billing accounts, you can set up the customer portal. Use it to let your customers manage their billing information, subscriptions, and invoices as your business scales.\n\nStripe hosts the customer portal, which means you can use it even if you don’t have a website. You can also link users to it from an existing site or Stripe integration.\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register/).\n\n[](#create-product)\n\nTo create a product in the Dashboard:\n\n1.  Go to **More** > **Product catalog**.\n2.  Click **+Add product**.\n3.  Enter the **Name** of your product.\n4.  _(Optional)_ Add a **Description**. The description appears at checkout, on the [customer portal](https://docs.stripe.com/customer-management), and in [quotes](https://docs.stripe.com/quotes).\n5.  _(Optional)_ Add an **Image** of your product. Use a JPEG, PNG, or WEBP file that’s smaller than 2MB. The image appears at checkout.\n6.  _(Optional)_ If you’re using [Stripe Tax](https://docs.stripe.com/tax), select a **Tax code** for your product. See [tax codes](https://docs.stripe.com/tax/tax-codes) for more information about the appropriate category for your product.\n7.  _(Optional)_ Enter a **Statement descriptor**. This descriptor overrides any account descriptors for recurring payments. Choose something that your customers would recognize on a bank statement.\n8.  _(Optional)_ Enter a **Unit label**. This describes how you sell your product. For example, if you charge by the seat, enter “seat” so the line item includes “per seat” for the price. Unit labels appear at checkout, and in invoices, receipts, and the [customer portal](https://docs.stripe.com/billing/subscriptions/customer-portal \"customer portal\").\n\nFor more details about [get started with products and prices](https://docs.stripe.com/products-prices/getting-started).\n\n[](#set-up-customer-portal)\n\n1.  **Activate a customer portal link** On the [customer portal configuration](https://dashboard.stripe.com/settings/billing/portal) page, click **Activate link** in the **Ways to get started** section.\n    \n2.  **Configure the portal** Go to the [customer portal configuration](https://dashboard.stripe.com/settings/billing/portal) page and select your configuration options. Learn more about [configuration options](https://docs.stripe.com/customer-management/configure-portal).\n    \n3.  Make sure your customers have an [`email`](https://docs.stripe.com/api/customers/object#customer_object-email) set. If multiple customers have the same email address, Stripe selects the most recently created customer that has both that email and an active subscription.\n    \n    For security purposes:\n    \n    *   Customers can’t update their email address through this link.\n    *   If a customer doesn’t receive a one-time passcode after clicking the login link, make sure their email address matches the email address of an existing customer. To check, enter the email address in the search bar of your [Stripe dashboard](https://dashboard.stripe.com/).",
    "title": "Set up the customer portal | Stripe Documentation",
    "description": "Let your customers manage their own billing accounts with a portal that Stripe hosts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/salesforce-cpq/field-mappings",
    "markdown": "# Field defaults and custom mappings\n\n## Map corresponding fields from Salesforce objects to Stripe objects.\n\nWhen setting up the Stripe Billing Connector for Salesforce CPQ, you use the data mapper to map the fields from the Salesforce objects to corresponding fields on the Stripe objects.\n\nNot all objects have a Stripe ID field in the data mapper. For example, the subscription schedule phase item doesn’t have a Stripe ID, so you can’t add a Stripe ID custom field to the Salesforce order line. However, you can still configure the object in the data mapper.\n\nThe connector automatically maps the following objects:\n\n## Custom mappings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create a custom mapping based on the standard and custom fields you use in Salesforce.\n\n#### Examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   You use a custom field to identify if a pricebook entry is metered or licensed. You can map that custom field to [recurring.usage\\_type](https://docs.stripe.com/api/prices/object#price_object-recurring-usage_type) on the Stripe `Price` object.\n    \n*   You use a custom field for the tax ID number on a Salesforce account. You can map that custom field to the corresponding field in Stripe.\n    \n*   You want to identify all customers in your Stripe account that the connector created. You can add a custom metadata field called `Source` with a default value of `Salesforce` for the Stripe `Customer` object.\n    \n\nIf there’s a one-to-one relationship to map between the object and object type, you can use the path to a Salesforce field as the mapping source. For example, you can map a custom field from the account of a Salesforce order to a custom metadata field on a Stripe subscription schedule. However, if an account has multiple orders, you can’t create a mapping between the Salesforce account and an order field.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Accounts and contacts](https://docs.stripe.com/connectors/salesforce-cpq/accounts-contacts)\n*   [Products and prices](https://docs.stripe.com/connectors/salesforce-cpq/products-prices)\n*   [Subscription orders](https://docs.stripe.com/connectors/salesforce-cpq/subscriptions)\n*   [Error handling](https://docs.stripe.com/connectors/salesforce-cpq/error-handling)",
    "title": "Field defaults and custom mappings | Stripe Documentation",
    "description": "Map corresponding fields from Salesforce objects to Stripe objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout",
    "markdown": "# Stripe Checkout | Stripe DocumentationThe Stripe Docs logo\n\n## Build a low-code payment form and embed it on your site or host it on Stripe.\n\n[Checkout](https://stripe.com/payments/checkout) is a low-code payment integration that creates a customizable form for collecting payments. You can embed Checkout directly in your website or redirect customers to a Stripe-hosted payment page. It supports one-time payments and subscriptions and accepts over 40 local payment methods. For a full list of Checkout features, see [Built-in features and customizable features](https://docs.stripe.com/payments/checkout#features).\n\n[Explore Stripe Checkout](https://checkout.stripe.dev/)\n\nDon’t see your use case? [Let us know](mailto:checkout-feedback@stripe.com) how you’d like to use Checkout.\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/payments/checkout/how-checkout-works \"How Checkout works\")\n\n[How Checkout works](https://docs.stripe.com/payments/checkout/how-checkout-works \"How Checkout works\")\n\n[\n\nLearn how to add a checkout page to your website and collect payments.\n\n](https://docs.stripe.com/payments/checkout/how-checkout-works \"How Checkout works\")\n\n[](https://www.youtube.com/watch?v=TJCdUYQTLJU \"Watch a video tutorial\")\n\n[Watch a video tutorial](https://www.youtube.com/watch?v=TJCdUYQTLJU \"Watch a video tutorial\")\n\n[\n\nLearn how to implement Stripe Checkout for both e-commerce and subscription businesses.\n\n](https://www.youtube.com/watch?v=TJCdUYQTLJU \"Watch a video tutorial\")\n\n[](https://docs.stripe.com/checkout/quickstart \"Quickstart\")\n\n[Quickstart](https://docs.stripe.com/checkout/quickstart \"Quickstart\")\n\n[\n\nExplore a code sample of an integration with Stripe Checkout.\n\n](https://docs.stripe.com/checkout/quickstart \"Quickstart\")\n\n[](https://docs.stripe.com/payments/dashboard-payment-methods \"Enable global payment methods\")\n\n[Enable global payment methods](https://docs.stripe.com/payments/dashboard-payment-methods \"Enable global payment methods\")\n\n[\n\nTurn on different Checkout payment methods through the Dashboard.\n\n](https://docs.stripe.com/payments/dashboard-payment-methods \"Enable global payment methods\")\n\n[](https://docs.stripe.com/checkout/fulfillment \"Fulfill your orders\")\n\n[Fulfill your orders](https://docs.stripe.com/checkout/fulfillment \"Fulfill your orders\")\n\n[\n\nLearn how to fulfill orders after a customer completes their purchase.\n\n](https://docs.stripe.com/checkout/fulfillment \"Fulfill your orders\")\n\n## Customize Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/payments/checkout/customization \"Customize your integration\")\n\n[Customize your integration](https://docs.stripe.com/payments/checkout/customization \"Customize your integration\")\n\n[\n\nCustomize branding, language support, fonts, store policies, and so on.\n\n](https://docs.stripe.com/payments/checkout/customization \"Customize your integration\")\n\n[](https://docs.stripe.com/payments/checkout/custom-domains \"Use custom domains\")\n\n[Use custom domains](https://docs.stripe.com/payments/checkout/custom-domains \"Use custom domains\")\n\n[\n\nLearn how to bring your own custom domain to Stripe Checkout.\n\n](https://docs.stripe.com/payments/checkout/custom-domains \"Use custom domains\")\n\n[](https://docs.stripe.com/payments/checkout/custom-success-page \"Customize your success page\")\n\n[Customize your success page](https://docs.stripe.com/payments/checkout/custom-success-page \"Customize your success page\")\n\n[\n\nDisplay a custom confirmation page with your customer’s order information.\n\n](https://docs.stripe.com/payments/checkout/custom-success-page \"Customize your success page\")\n\n[](https://docs.stripe.com/payments/checkout/taxes \"Collect taxes\")\n\n[Collect taxes](https://docs.stripe.com/payments/checkout/taxes \"Collect taxes\")\n\n[\n\nCollect taxes for one-time payments and Subscriptions.\n\n](https://docs.stripe.com/payments/checkout/taxes \"Collect taxes\")\n\n[](https://docs.stripe.com/tax/checkout/tax-ids \"Collect tax IDs\")\n\n[Collect tax IDs](https://docs.stripe.com/tax/checkout/tax-ids \"Collect tax IDs\")\n\n[\n\nCollect VAT and other customer tax IDs in Checkout.\n\n](https://docs.stripe.com/tax/checkout/tax-ids \"Collect tax IDs\")\n\n[](https://docs.stripe.com/payments/checkout/phone-numbers \"Collect phone numbers\")\n\n[Collect phone numbers](https://docs.stripe.com/payments/checkout/phone-numbers \"Collect phone numbers\")\n\n[\n\nCollect phone numbers in Checkout.\n\n](https://docs.stripe.com/payments/checkout/phone-numbers \"Collect phone numbers\")\n\n[](https://docs.stripe.com/receipts?payment-ui=checkout \"Post-payment invoices\")\n\n[Post-payment invoices](https://docs.stripe.com/receipts?payment-ui=checkout \"Post-payment invoices\")\n\n[\n\nSend invoices to customers with Stripe Checkout.\n\n](https://docs.stripe.com/receipts?payment-ui=checkout \"Post-payment invoices\")\n\n[](https://docs.stripe.com/payments/save-and-reuse \"Set up future payments\")\n\n[Set up future payments](https://docs.stripe.com/payments/save-and-reuse \"Set up future payments\")\n\n[\n\nSave payment details and charge your customers later.\n\n](https://docs.stripe.com/payments/save-and-reuse \"Set up future payments\")\n\n## Boost revenue![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/payments/checkout/upsells \"Subscription upsells\")\n\n[Subscription upsells](https://docs.stripe.com/payments/checkout/upsells \"Subscription upsells\")\n\n[\n\nEnable customers to upgrade their subscription plan at checkout by using upsells.\n\n](https://docs.stripe.com/payments/checkout/upsells \"Subscription upsells\")\n\n[](https://docs.stripe.com/payments/checkout/cross-sells \"Cross-sells\")\n\n[Cross-sells](https://docs.stripe.com/payments/checkout/cross-sells \"Cross-sells\")\n\n[\n\nEnable customers to purchase complementary products at checkout by using cross-sells.\n\n](https://docs.stripe.com/payments/checkout/cross-sells \"Cross-sells\")\n\n[](https://docs.stripe.com/payments/checkout/abandoned-carts \"Recover abandoned carts\")\n\n[Recover abandoned carts](https://docs.stripe.com/payments/checkout/abandoned-carts \"Recover abandoned carts\")\n\n[\n\nRecover abandoned Checkout pages and boost revenue.\n\n](https://docs.stripe.com/payments/checkout/abandoned-carts \"Recover abandoned carts\")\n\n[](https://docs.stripe.com/payments/checkout/adaptive-pricing \"Automatically convert currencies with Adaptive Pricing\")\n\n[Automatically convert currencies with Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing \"Automatically convert currencies with Adaptive Pricing\")\n\n[\n\nAutomatically convert prices for selected international shoppers to increase conversion.\n\n](https://docs.stripe.com/payments/checkout/adaptive-pricing \"Automatically convert currencies with Adaptive Pricing\")\n\n[](https://docs.stripe.com/payments/checkout/manual-currency-prices \"Define manual currency prices\")\n\n[Define manual currency prices](https://docs.stripe.com/payments/checkout/manual-currency-prices \"Define manual currency prices\")\n\n[\n\nPresent prices in your customers’ local currencies during checkout.\n\n](https://docs.stripe.com/payments/checkout/manual-currency-prices \"Define manual currency prices\")\n\n[](https://docs.stripe.com/payments/checkout/analyze-conversion-funnel \"Analyzing your conversion funnel\")\n\n[Analyzing your conversion funnel](https://docs.stripe.com/payments/checkout/analyze-conversion-funnel \"Analyzing your conversion funnel\")\n\n[\n\nLearn how to analyze the conversion funnel of your Stripe Checkout page.\n\n](https://docs.stripe.com/payments/checkout/analyze-conversion-funnel \"Analyzing your conversion funnel\")\n\n## No-code options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/payments/checkout/pricing-table \"Pricing table\")\n\n[Pricing table](https://docs.stripe.com/payments/checkout/pricing-table \"Pricing table\")\n\n[\n\nDisplay a pricing table on your website and take customers directly to Stripe Checkout.\n\n](https://docs.stripe.com/payments/checkout/pricing-table \"Pricing table\")\n\n[](https://docs.stripe.com/payment-links \"Payment links\")\n\n[Payment links](https://docs.stripe.com/payment-links \"Payment links\")\n\n[\n\nEmbed or share a link to a Stripe payment page to accept payments without a website.\n\n](https://docs.stripe.com/payment-links \"Payment links\")\n\n## Additional features![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/payments/checkout/discounts \"Add discounts\")\n\n[Add discounts](https://docs.stripe.com/payments/checkout/discounts \"Add discounts\")\n\n[\n\nReduce the amount charged to a customer by discounting their subtotal with coupons and promotion codes.\n\n](https://docs.stripe.com/payments/checkout/discounts \"Add discounts\")\n\n[](https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=checkout \"Charge shipping\")\n\n[Charge shipping](https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=checkout \"Charge shipping\")\n\n[\n\nUse shipping rates and collect shipping addresses from your customers.\n\n](https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=checkout \"Charge shipping\")\n\n[](https://docs.stripe.com/payments/checkout/managing-limited-inventory \"Manage limited inventory with Checkout\")\n\n[Manage limited inventory with Checkout](https://docs.stripe.com/payments/checkout/managing-limited-inventory \"Manage limited inventory with Checkout\")\n\n[\n\nLearn how to manage inventory with time-limited purchase windows.\n\n](https://docs.stripe.com/payments/checkout/managing-limited-inventory \"Manage limited inventory with Checkout\")\n\n## Try a sample project![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://github.com/stripe-samples/checkout-one-time-payments \"One-time payments\")\n\n[One-time payments](https://github.com/stripe-samples/checkout-one-time-payments \"One-time payments\")\n\n[Web · Mobile web](https://github.com/stripe-samples/checkout-one-time-payments \"One-time payments\")\n\n[](https://github.com/stripe-samples/checkout-single-subscription \"Subscriptions\")\n\n[Subscriptions](https://github.com/stripe-samples/checkout-single-subscription \"Subscriptions\")\n\n[Web · Mobile web · Stripe Billing](https://github.com/stripe-samples/checkout-single-subscription \"Subscriptions\")\n\n[](https://docs.stripe.com/samples)\n\n[Browse our samples](https://docs.stripe.com/samples)\n\n## Built-in and customizable features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Checkout has the following built-in and customizable features:\n\n### Built-in features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   PayPal, Google Pay, Apple Pay, and Link\n*   Responsive mobile design\n*   SCA-ready\n*   CAPTCHAs\n*   PCI compliance\n*   Card validation\n*   Error messaging\n*   [Adjustable quantities](https://docs.stripe.com/payments/checkout/adjustable-quantity)\n*   [Automatic tax collection](https://docs.stripe.com/tax/checkout)\n*   International language support\n*   [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing)\n\n### Customizable features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   [Collect taxes](https://docs.stripe.com/payments/checkout/taxes)\n*   [Custom branding with colors, buttons, and font](https://docs.stripe.com/payments/checkout/customization)\n*   [Cross-sells](https://docs.stripe.com/payments/checkout/cross-sells)\n*   [Global payment methods](https://docs.stripe.com/payments/dashboard-payment-methods)\n*   [Subscription upsells](https://docs.stripe.com/payments/checkout/upsells)\n*   [Custom domains](https://docs.stripe.com/payments/checkout/custom-domains) (Stripe-hosted page only)\n*   [Email receipts](https://docs.stripe.com/receipts)\n*   [Apply discounts](https://docs.stripe.com/payments/checkout/discounts)\n*   [Custom success page](https://docs.stripe.com/payments/checkout/custom-success-page)\n*   [Recover abandoned carts](https://docs.stripe.com/payments/checkout/abandoned-carts)\n*   [Autofill payment details with Link](https://docs.stripe.com/payments/checkout/customization#link)\n*   [Collect Tax IDs](https://docs.stripe.com/tax/checkout/tax-ids)\n*   [Collect shipping information](https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout)\n*   [Collect phone numbers](https://docs.stripe.com/payments/checkout/phone-numbers)\n*   [Set the subscription billing cycle date](https://docs.stripe.com/payments/checkout/billing-cycle)\n\n#### Sign up to be notified of new features and updates.\n\nProvide your email to receive updates on new features and support for more use cases.\n\nRead our [privacy policy](https://stripe.com/privacy).",
    "title": "Stripe Checkout | Stripe Documentation",
    "description": "Build a low-code payment form and embed it on your site or host it on Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/accept-a-payment-synchronously",
    "markdown": "# Accept card payments without webhooks\n\n## Learn how to confirm a card payment on your server and handle card authentication requests.\n\n#### Caution\n\nFor a wider range of support and future proofing, use the [standard integration](https://docs.stripe.com/payments/accept-a-payment) for asynchronous payments.\n\nThis integration waits for the returned response from the client and finalizes a payment on the server, without using [webhooks](https://docs.stripe.com/webhooks \"webhook\") or processing offline events. While it may seem simpler, this integration is difficult to scale as your business grows and has several limitations:\n\n*   **Only supports cards**—You’ll have to write more code to support ACH and popular regional payment methods separately.\n*   **Double-charge risk**—By synchronously creating a new PaymentIntent each time your customer attempts to pay, you risk accidentally double-charging your customer. Be sure to follow [best practices](https://docs.stripe.com/error-low-level#idempotency).\n*   **Extra trip to client**—​​Cards with 3D Secure or those that are subject to regulations such as [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") require extra steps on the client. ​\n\nKeep these limitations in mind if you decide to use this integration. Otherwise, use the [standard integration](https://docs.stripe.com/payments/accept-a-payment).\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[\n\n## Collect card details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-collect-card-details)\n\nCollect card information on the client with Stripe.js and Stripe Elements. Elements is a set of prebuilt UI components for collecting and validating card number, postal code, and expiration date.\n\nA Stripe Element contains an iframe that securely sends the payment information to Stripe over an HTTPS connection. The checkout page address must also start with https:// rather than http:// for your integration to work.\n\nYou can test your integration without using HTTPS. [Enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\nInclude the [Stripe.js](https://docs.stripe.com/js) script in the head of every page on your site. Elements is automatically available as a feature of Stripe.js.\n\nIncluding the script on every page of your site lets you take advantage of Stripe’s [advanced fraud functionality](https://docs.stripe.com/radar) and ability to detect anomalous browsing behavior.\n\n### Build the payment form![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo securely collect card details from your customers, Elements creates UI components for you that are hosted by Stripe. They’re then placed into your payment form as an iframe. To determine where to insert these components, create empty DOM elements (containers) with unique IDs within your payment form.\n\n`<form id='payment-form'>   <label>     Card details     <!-- placeholder for Elements -->     <div id=\"card-element\"></div>   </label>   <button type=\"submit\">Submit Payment</button> </form>`\n\nNext, create an instance of the [Stripe object](https://docs.stripe.com/js#stripe-function), providing your publishable [API key](https://docs.stripe.com/keys) as the first parameter. Afterwards, create an instance of the [Elements object](https://docs.stripe.com/js#stripe-elements) and use it to [mount](https://docs.stripe.com/js#element-mount) a Card element in the relevant placeholder in the page.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const elements = stripe.elements(); // Set up Stripe.js and Elements to use in checkout form const style = {   base: {     color: \"#32325d\",     fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',     fontSmoothing: \"antialiased\",     fontSize: \"16px\",     \"::placeholder\": {       color: \"#aab7c4\"     }   },   invalid: {     color: \"#fa755a\",     iconColor: \"#fa755a\"   }, }; const cardElement = elements.create('card', {style}); cardElement.mount('#card-element');`\n\nThe `card` Element simplifies the form and minimizes the number of fields required by inserting a single, flexible input field that securely collects all necessary card details.\n\nOtherwise, combine `cardNumber`, `cardExpiry`, and `cardCvc` Elements for a flexible, multi-input card form.\n\n#### Note\n\nAlways collect a postal code to increase card acceptance rates and reduce fraud.\n\nThe [single line Card Element](https://docs.stripe.com/js/element/other_element?type=card) automatically collects and sends the customer’s postal code to Stripe. If you build your payment form with split Elements ([Card Number](https://docs.stripe.com/js/element/other_element?type=cardNumber), [Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry), [CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc)), add a separate input field for the customer’s postal code.\n\n### Create a PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFinally, use [stripe.createPaymentMethod](https://docs.stripe.com/js/payment_methods/create_payment_method) on your client to collect the card details and create a [PaymentMethod](https://docs.stripe.com/api/payment_methods) when the user clicks the submit button.\n\n`const form = document.getElementById('payment-form'); form.addEventListener('submit', async (event) => {   // We don't want to let default form submission happen here,   // which would refresh the page.   event.preventDefault();   const result = await stripe.createPaymentMethod({     type: 'card',     card: cardElement,     billing_details: {       // Include any additional collected billing details.       name: 'Jenny Rosen',     },   })   stripePaymentMethodHandler(result); });`\n\n[\n\n## Submit the PaymentMethod to your server![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-send-to-server)\n\nIf the [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") was created successfully, send its ID to your server.\n\n`const stripePaymentMethodHandler = async (result) => {   if (result.error) {     // Show error in payment form   } else {     // Otherwise send paymentMethod.id to your server (see Step 4)     const res = await fetch('/pay', {       method: 'POST',       headers: { 'Content-Type': 'application/json' },       body: JSON.stringify({         payment_method_id: result.paymentMethod.id,       }),     })     const paymentResponse = await res.json();     // Handle server response (see Step 4)     handleServerResponse(paymentResponse);   } }`\n\n[\n\n## Create a PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-payment-intent)\n\nSet up an endpoint on your server to receive the request. This endpoint will also be used [later](#confirm-payment) to handle cards that require an extra step of authentication.\n\n[Create a new PaymentIntent](https://docs.stripe.com/payments/payment-intents#creating-a-paymentintent) with the ID of the [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) created on your client. You can [confirm](https://docs.stripe.com/api/payment_intents/confirm \"confirm\") the PaymentIntent by setting the [confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm) property to true when the PaymentIntent is created or by calling [confirm](https://docs.stripe.com/api/payment_intents/confirm) after creation. [Separate authorization and capture](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method) is also supported for card payments.\n\nIf the payment requires additional actions such as 3D Secure authentication, the PaymentIntent’s status will be set to `requires_action`. If the payment failed, the status is set back to `requires_payment_method` and you should show an error to your user. If the payment doesn’t require any additional authentication then a charge is created and the PaymentIntent status is set to `succeeded`.\n\n#### Note\n\nOn versions of the API before [2019-02-11](https://docs.stripe.com/upgrades#2019-02-11), `requires_payment_method` appears as `requires_source` and `requires_action` appears as `requires_source_action`.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"payment_method\"=\"{{PAYMENT_METHOD_ID}}\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\" \\   -d \"confirmation_method\"=\"manual\" \\   -d \"confirm\"=\"true\"`\n\nIf you want to save the card to reuse later, create a [Customer](https://docs.stripe.com/api/customers/create) to store the [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") and pass the following additional parameters when creating the PaymentIntent:\n\n*   [customer](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-customer). Set to the ID of the [Customer](https://docs.stripe.com/api/customers \"Customers\").\n*   [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage). Set to `off_session` to tell Stripe that you plan to reuse this PaymentMethod for off-session payments when your customer is not present. Setting this property saves the PaymentMethod to the Customer after the PaymentIntent is confirmed and any required actions from the user are complete. See the code sample on [saving cards after a payment](https://github.com/stripe-samples/saving-card-after-payment/tree/master/without-webhooks) for more details.\n\n[\n\n## Handle any next actions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-handle-next-actions)\n\nWrite code to handle situations that require your customer to intervene. A payment normally succeeds after you confirm it on the server in [step 4](#create-payment-intent). However, when the PaymentIntent requires additional action from the customer, such as authenticating with [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\"), this code comes into play.\n\nUse [stripe.handleCardAction](https://docs.stripe.com/js/payment_intents/handle_card_action) to trigger the UI for handling customer action. If authentication succeeds, the PaymentIntent has a status of `requires_confirmation`. Confirm the PaymentIntent again on your server to finish the payment.\n\nWhile testing, use a [test card number](https://docs.stripe.com/testing#regulatory-cards) that requires authentication (for example, ) to force this flow. Using a card that doesn’t require authentication (for example, ) skips this part of the flow and completes at step 4.\n\n`const handleServerResponse = async (response) => {   if (response.error) {     // Show error from server on payment form   } else if (response.requires_action) {     // Use Stripe.js to handle the required card action     const { error: errorAction, paymentIntent } =       await stripe.handleCardAction(response.payment_intent_client_secret);     if (errorAction) {       // Show error from Stripe.js in payment form     } else {       // The card action has been handled       // The PaymentIntent can be confirmed again on the server       const serverResponse = await fetch('/pay', {         method: 'POST',         headers: { 'Content-Type': 'application/json' },         body: JSON.stringify({ payment_intent_id: paymentIntent.id })       });       handleServerResponse(await serverResponse.json());     }   } else {     // Show success message   } }`\n\n#### Note\n\n`stripe.handleCardAction` may take several seconds to complete. During that time, disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error, show it to the customer, re-enable the form, and hide the waiting indicator. If the customer must perform additional steps to complete the payment, such as authentication, Stripe.js walks them through that process.\n\n[\n\n## Confirm the PaymentIntent again![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#confirm-payment)\n\nThis code is only executed when a payment requires additional authentication—just like the handling in the previous step. The code itself isn’t optional because any payment could require this extra step.\n\nUsing the same endpoint you set up [above](#create-payment-intent), confirm the PaymentIntent again to finalize the payment and fulfill the order. Make sure this confirmation happens within one hour of the payment attempt. Otherwise, the payment fails and transitions back to `requires_payment_method`.\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/confirm \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\"`\n\n[\n\n## Test the integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-test-integration)\n\n​​Several test cards are available for you to use in test mode to make sure this integration is ready. Use them with any CVC and an expiration date in the future.\n\n| Number | Description |\n| --- | --- |\n|     | Succeeds and immediately processes the payment. |\n|     | Requires authentication. Stripe triggers a modal asking for the customer to authenticate. |\n|     | Always fails with a decline code of `insufficient_funds`. |\n\nFor the full list of test cards see our guide on [testing](https://docs.stripe.com/testing).",
    "title": "Accept card payments without webhooks | Stripe Documentation",
    "description": "Learn how to confirm a card payment on your server and handle card authentication requests.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/external_account_bank_accounts/object",
    "markdown": "# The External Bank Account object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    accountnullable stringExpandable\n    \n    The ID of the account that the bank account is associated with.\n    \n*   Name of the bank associated with the routing number (e.g., `WELLS FARGO`).\n    \n*   Two-letter ISO code representing the country the bank account is located in.\n    \n\n*   #### \n    \n    default\\_for\\_currencynullable boolean\n    \n    Whether this bank account is the default external account for its currency.\n    \n*   The last four digits of the bank account number.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    routing\\_numbernullable string\n    \n    The routing transit number for the bank account.\n    \n*   For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn’t had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a payout sent to this bank account fails, we’ll set the status to `errored` and will not continue to send [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) until the bank details are updated.\n    \n    For external accounts, possible values are `new`, `errored` and `verification_failed`. If a payout fails, the status is set to `errored` and scheduled payouts are stopped until account details are updated. In the US and India, if we can’t [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we’ll set the status to `verification_failed`. Other validations aren’t run against external accounts because they’re only used for payouts. This means the other statuses don’t apply.\n    \n\n### More attributes\n\n*   #### \n    \n    account\\_holder\\_namenullable string\n    \n*   #### \n    \n    account\\_holder\\_typenullable string\n    \n*   #### \n    \n    account\\_typenullable string\n    \n*   #### \n    \n    available\\_payout\\_methodsnullable array of enums\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    fingerprintnullable string\n    \n*   #### \n    \n    future\\_requirementsnullable object\n    \n*   #### \n    \n    requirementsnullable object\n    \n\nThe External Bank Account object\n\n```\n{  \"id\": \"ba_1N9DrD2eZvKYlo2C58f4DaIa\",  \"object\": \"bank_account\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"individual\",  \"account_type\": null,  \"available_payout_methods\": [    \"standard\"  ],  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtz\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [Create a bank account](https://docs.stripe.com/api/external_account_bank_accounts/create)\n\nWhen you create a new bank account, you must specify a [connected account](#accounts) to create it on. You can only specify connected accounts where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nIf the bank account’s owner has no other external account in the bank account’s currency, the new bank account will become the default for that currency. However, if the owner already has a bank account for that currency, the new account will become the default only if the `default_for_currency` parameter is set to `true`.\n\n### Parameters\n\n*   #### \n    \n    external\\_accountobject | stringRequired\n    \n    Either a token, like the ones returned by [Stripe.js](https://docs.stripe.com/js), or a dictionary containing a user’s bank account details (with the options shown below).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n\n### Returns\n\nReturns the bank account object\n\nPOST /v1/accounts/:id/external\\_accounts\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d external_account=btok_1NAiJy2eZvKYlo2Cnh6bIs9c\n```\n\n```\n{  \"id\": \"ba_1NAiJy2eZvKYlo2CvChQKz5k\",  \"object\": \"bank_account\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [Update a bank account](https://docs.stripe.com/api/external_account_bank_accounts/update)\n\nUpdates the metadata, account holder name, account holder type of a bank account belonging to a connected account and optionally sets it as the default for its currency. Other bank account details are not editable by design.\n\nYou can only update bank accounts when [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts).\n\nYou can re-enable a disabled bank account by performing an update call without providing any arguments or changes.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_holder\\_namestring\n    \n*   #### \n    \n    account\\_holder\\_typestring\n    \n\n### Returns\n\nReturns the bank account object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAiwl2eZvKYlo2CRdCLZSxO \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ba_1NAiwl2eZvKYlo2CRdCLZSxO\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"routing_number\": \"110000000\",  \"status\": \"new\",  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a bank account](https://docs.stripe.com/api/external_account_bank_accounts/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific bank account stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the bank account object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAinX2eZvKYlo2CpFGcuuEG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ba_1NAinX2eZvKYlo2CpFGcuuEG\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"customer\": null,  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [List all bank accounts](https://docs.stripe.com/api/external_account_bank_accounts/list)\n\nYou can see a list of the bank accounts that belong to a [connected account](https://docs.stripe.com/connect/accounts). Note that the 10 most recent external accounts are always available by default on the corresponding Stripe object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional bank accounts.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the bank accounts stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=bank_account\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ba_1NB1IV2eZvKYlo2CByiLrMWv\",      \"object\": \"bank_account\",      \"account_holder_name\": \"Jane Austen\",      \"account_holder_type\": \"company\",      \"account_type\": null,      \"bank_name\": \"STRIPE TEST BANK\",      \"country\": \"US\",      \"currency\": \"usd\",      \"fingerprint\": \"1JWtPxqbdX5Gamtc\",      \"last4\": \"6789\",      \"metadata\": {},      \"routing_number\": \"110000000\",      \"status\": \"new\",      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```",
    "title": "The External Bank Account object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/tokens/create_token?type=cvc_update",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/financial_account_features/object",
    "markdown": "# The FinancialAccount Feature object | Stripe API Reference\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    card\\_issuingnullable object\n    \n    Contains a Feature encoding the FinancialAccount’s ability to be used with the Issuing product, including attaching cards to and drawing funds from.\n    \n*   #### \n    \n    deposit\\_insurancenullable object\n    \n    Represents whether this FinancialAccount is eligible for deposit insurance. Various factors determine the insurance amount.\n    \n*   #### \n    \n    financial\\_addressesnullable object\n    \n    Contains Features that add FinancialAddresses to the FinancialAccount.\n    \n*   #### \n    \n    inbound\\_transfersnullable object\n    \n    Contains settings related to adding funds to a FinancialAccount from another Account with the same owner.\n    \n*   #### \n    \n    intra\\_stripe\\_flowsnullable object\n    \n    Represents the ability for this FinancialAccount to send money to, or receive money from other FinancialAccounts (for example, via OutboundPayment).\n    \n*   #### \n    \n    outbound\\_paymentsnullable object\n    \n    Contains Features related to initiating money movement out of the FinancialAccount to someone else’s bucket of money.\n    \n*   #### \n    \n    outbound\\_transfersnullable object\n    \n    Contains a Feature and settings related to moving money out of the FinancialAccount into another Account with the same owner.\n    \n\nThe FinancialAccount Feature object\n\n```\n{  \"object\": \"treasury.financial_account_features\",  \"card_issuing\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"deposit_insurance\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"financial_addresses\": {    \"aba\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"inbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"intra_stripe_flows\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"outbound_payments\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"outbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  }}\n```\n\n## [Update FinancialAccount Features](https://docs.stripe.com/api/treasury/financial_account_features/update)\n\nUpdates the Features associated with a FinancialAccount.\n\n### Parameters\n\n*   Encodes the FinancialAccount’s ability to be used with the Issuing product, including attaching cards to and drawing funds from the FinancialAccount.\n    \n*   Represents whether this FinancialAccount is eligible for deposit insurance. Various factors determine the insurance amount.\n    \n*   #### \n    \n    financial\\_addressesobject\n    \n    Contains Features that add FinancialAddresses to the FinancialAccount.\n    \n*   Contains settings related to adding funds to a FinancialAccount from another Account with the same owner.\n    \n*   Represents the ability for the FinancialAccount to send money to, or receive money from other FinancialAccounts (for example, via OutboundPayment).\n    \n*   Includes Features related to initiating money movement out of the FinancialAccount to someone else’s bucket of money.\n    \n*   Contains a Feature and settings related to moving money out of the FinancialAccount into another Account with the same owner.\n    \n\n### Returns\n\nA dictionary of Features associated with the given FinancialAccount. Each entry in the dictionary is a Feature object, which may contain child Features.\n\nPOST /v1/treasury/financial\\_accounts/:id/features\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1Mta0C2eZvKYlo2CaEtaPPFz/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"card_issuing[requested]\"=false\n```\n\n```\n{  \"object\": \"treasury.financial_account_features\",  \"deposit_insurance\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"financial_addresses\": {    \"aba\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"inbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"intra_stripe_flows\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"outbound_payments\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"outbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  }}\n```\n\n## [Retrieve FinancialAccount Features](https://docs.stripe.com/api/treasury/financial_account_features/retrieve)\n\nRetrieves Features information associated with the FinancialAccount.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary of Features associated with the given FinancialAccount. Each entry in the dictionary is a Feature object, which might contain child Features.\n\nGET /v1/treasury/financial\\_accounts/:id/features\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1Mta0C2eZvKYlo2CaEtaPPFz/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"treasury.financial_account_features\",  \"card_issuing\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"deposit_insurance\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"financial_addresses\": {    \"aba\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"inbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"intra_stripe_flows\": {    \"requested\": true,    \"status\": \"active\",    \"status_details\": []  },  \"outbound_payments\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  },  \"outbound_transfers\": {    \"ach\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    },    \"us_domestic_wire\": {      \"requested\": true,      \"status\": \"active\",      \"status_details\": []    }  }}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The FinancialAccount Feature object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/debit_reversals/object",
    "markdown": "# The DebitReversal object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   #### \n    \n    financial\\_accountnullable string\n    \n    The FinancialAccount to reverse funds from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   #### \n    \n    linked\\_flowsnullable object\n    \n    Other flows linked to a DebitReversal.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The rails used to reverse the funds.\n    \n*   The ReceivedDebit being reversed.\n    \n*   Status of the DebitReversal\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The network has resolved the DebitReversal against the user. |\n    | `processing`<br><br>The DebitReversal starting state. |\n    | `succeeded`<br><br>The network has resolved the DebitReversal in the users favour. A crediting Transaction is created. |\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [Create a DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals/create)\n\nReverses a ReceivedDebit and creates a DebitReversal object.\n\n### Parameters\n\n*   #### \n    \n    received\\_debitstringRequired\n    \n    The ReceivedDebit to reverse.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a DebitReversal object.\n\nPOST /v1/treasury/debit\\_reversals\n\n```\ncurl https://api.stripe.com/v1/treasury/debit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d received_debit=rd_1MtkMLLkdIwHu7ixoiUFN4qd\n```\n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [Retrieve a DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals/retrieve)\n\nRetrieves a DebitReversal object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a DebitReversal object.\n\nGET /v1/treasury/debit\\_reversals/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/debit_reversals/debrev_1MtkMLLkdIwHu7ixIcVctOKK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [List all DebitReversals](https://docs.stripe.com/api/treasury/debit_reversals/list)\n\nReturns a list of DebitReversals.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return DebitReversals for the ReceivedDebit ID.\n    \n*   Only return DebitReversals for a given resolution.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost`<br><br>DebitReversal was lost, and no Transactions will be created. |\n    | `won`<br><br>DebitReversal was won, and a crediting Transaction will be created. |\n    \n*   Only return DebitReversals for a given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The DebitReversal has been canceled before it has been sent to the network and no funds have been returned to the account. (Currently not supported). |\n    | `completed`<br><br>The network has provided a resolution for the DebitReversal. If won, a crediting Transaction is created. |\n    | `processing`<br><br>The DebitReversal starting state. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` DebitReversals, starting after DebitReversal `starting_after`. Each entry in the array is a separate DebitReversal object. If no more DebitReversals are available, the resulting array will be empty.\n\nGET /v1/treasury/debit\\_reversals\n\n```\ncurl -G https://api.stripe.com/v1/treasury/debit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkMLLkdIwHu7ixrkGP4bqB \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/debit_reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",      \"object\": \"treasury.debit_reversal\",      \"amount\": 1000,      \"created\": 1680755021,      \"currency\": \"usd\",      \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",      \"linked_flows\": null,      \"livemode\": false,      \"metadata\": {},      \"network\": \"ach\",      \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",      \"status\": \"processing\",      \"status_transitions\": {        \"completed_at\": null      },      \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The DebitReversal object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/transactions/object",
    "markdown": "# The Transaction object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   The change made to each of the FinancialAccount’s sub-balances by the Transaction.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    entriesnullable objectExpandable\n    \n    A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints.\n    \n*   The FinancialAccount associated with this object.\n    \n*   ID of the flow that created the Transaction.\n    \n*   #### \n    \n    flow\\_detailsnullable objectExpandable\n    \n    Details of the flow that created the Transaction.\n    \n*   Type of the flow that created the Transaction.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `credit_reversal`<br><br>The Transaction is associated with a CreditReversal. |\n    | `debit_reversal`<br><br>The Transaction is associated with a DebitReversal. |\n    | `inbound_transfer`<br><br>The Transaction is associated with an InboundTransfer. |\n    | `issuing_authorization`<br><br>The Transaction is associated with an Issuing authorization. |\n    | `other`<br><br>The Transaction is associated with some other money movement not listed above. |\n    | `outbound_payment`<br><br>The Transaction is associated with an OutboundPayment. |\n    | `outbound_transfer`<br><br>The Transaction is associated with an OutboundTransfer. |\n    | `received_credit`<br><br>The Transaction is associated with a ReceivedCredit. |\n    | `received_debit`<br><br>The Transaction is associated with a ReceivedDebit. |\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Status of the Transaction.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `open`<br><br>The initial state for all Transactions. The Transaction results in updates to the sub-balance amounts, but the current balance is not affected until the Transaction posts. |\n    | `posted`<br><br>Funds have successfully entered or left the account. The current balance was affected. |\n    | `void`<br><br>The Transaction never impacted the balance. For example, a Transaction would enter this state if an OutboundPayment was initiated but then canceled before the funds left the account. |\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n\n```\n{  \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",  \"object\": \"treasury.transaction\",  \"amount\": -100,  \"balance_impact\": {    \"cash\": -100,    \"inbound_pending\": 0,    \"outbound_pending\": 100  },  \"created\": 1680755802,  \"currency\": \"usd\",  \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",  \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",  \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"status\": \"open\",  \"status_transitions\": {    \"posted_at\": null,    \"void_at\": null  }}\n```\n\n## [Retrieve a Transaction](https://docs.stripe.com/api/treasury/transactions/retrieve)\n\nRetrieves the details of an existing Transaction.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Transaction object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/transactions/trxn_1MtkYw2eZvKYlo2ClMGIO54z \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",  \"object\": \"treasury.transaction\",  \"amount\": -100,  \"balance_impact\": {    \"cash\": -100,    \"inbound_pending\": 0,    \"outbound_pending\": 100  },  \"created\": 1680755802,  \"currency\": \"usd\",  \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",  \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",  \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"status\": \"open\",  \"status_transitions\": {    \"posted_at\": null,    \"void_at\": null  }}\n```\n\n## [List all Transactions](https://docs.stripe.com/api/treasury/transactions/list)\n\nRetrieves a list of Transaction objects.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return Transactions that were created during the given date interval.\n    \n*   The results are in reverse chronological order by `created` or `posted_at`. The default is `created`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `created`<br><br>Timestamp describing when the Transaction was created. |\n    | `posted_at`<br><br>Timestamp describing when the Transaction was posted. |\n    \n*   Only return Transactions that have the given status: `open`, `posted`, or `void`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `open`<br><br>The initial state for all Transactions. The Transaction results in updates to the sub-balance amounts, but the current balance is not affected until the Transaction posts. |\n    | `posted`<br><br>Funds have successfully entered or left the account. The current balance was affected. |\n    | `void`<br><br>The Transaction never impacted the balance. For example, a Transaction would enter this state if an OutboundPayment was initiated but then canceled before the funds left the account. |\n    \n*   A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Transactions, starting after Transaction `starting_after`. Each entry in the array is a separate Transaction object. If no more Transactions are available, the resulting array will be empty.\n\nGET /v1/treasury/transactions\n\n```\ncurl -G https://api.stripe.com/v1/treasury/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkYw2eZvKYlo2CrqmzUo3O \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",      \"object\": \"treasury.transaction\",      \"amount\": -100,      \"balance_impact\": {        \"cash\": -100,        \"inbound_pending\": 0,        \"outbound_pending\": 100      },      \"created\": 1680755802,      \"currency\": \"usd\",      \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",      \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",      \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",      \"flow_type\": \"outbound_transfer\",      \"livemode\": false,      \"status\": \"open\",      \"status_transitions\": {        \"posted_at\": null,        \"void_at\": null      }    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Transaction object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/fraud_classification/create",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/disputes/prevention/fraud-types",
    "markdown": "# Common types of online fraud\n\n## Learn about the different kinds of fraud and what your liability is.\n\nA payment is considered fraudulent when the cardholder didn’t authorize it. Most fraudulent payments are made using stolen cards or card numbers. When a cardholder is notified that the payment has been made or they review their card statement, they contact their card issuer to dispute it.\n\nOnline fraud is fundamentally different to fraud that occurs at brick-and-mortar businesses as it’s harder to be certain that the person you’re selling to is who they say they’re. Some fraudsters adopt more sophisticated methods than just trying to make purchases on a stolen card. When accepting payments online, it’s important to be aware of the different kinds of fraud and what your liability is.\n\n## Suspected fraud ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s machine learning system continuously monitors all payments processed by our users. In rare cases, you might receive a notification from Stripe that we suspect a payment is fraudulent after the card issuer authorizes it. This can occur if we detect subsequent activity on the card that now suggests it’s being used fraudulently.\n\nAlthough we notify you as soon as we become aware of any suspicious activity, it might be several days after a payment is made. Keep in mind that this prediction isn’t a guarantee that a payment is fraudulent—only that we have reason to believe it is.\n\nWe provide this information to you to make sure that you can make an informed decision and take action where necessary (for example, contact the customer or place their order on hold). If you have any concerns about the payment after reviewing it, consider [refunding it immediately](https://docs.stripe.com/disputes/prevention/best-practices#consider-proactively-refunding-suspicious-payments) to proactively prevent a dispute and avoid a dispute fee.\n\n#### Caution\n\nWhile a customer can’t dispute fully refunded payments, they can dispute partially refunded payments. Card network rules even allow for a payment that was partially refunded to be disputed for the full payment amount.\n\n## Stolen cards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis type of fraud makes use of stolen credit or card details to make a purchase online. The fraudster may be in possession of a physical card, but it’s more likely that the cardholder’s details were stolen electronically. A business ships goods or provides service to the fraudster, with the assumption that the payment is legitimate.\n\nIf a cardholder hasn’t realized yet that their card is lost or stolen (and so hasn’t notified the card issuer), you can still process payments successfully. Even if a payment isn’t declined, this doesn’t mean that it was authorized.\n\nAfter the cardholder discovers the fraudulent use of their card, they dispute the payment with the card issuer. If the dispute is resolved in favor of the cardholder, the business suffers a loss equal to the amount of the payment, and the cost of any goods or services already provided. The business is also subject to a dispute fee.\n\n### Overpayment fraud ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOverpayment fraud (also known as a [payout](https://docs.stripe.com/payouts \"payout\") scam) is a variant of stolen card fraud. The fraudster presents themselves as requiring the services of a third-party service in connection with the purchase. The fraudster then offers to pay the seller the cost of the goods, an extra sum for the fraudulent third-party, and often an additional convenience (tip) for accommodating the request. The fraud being committed here is that the third-party service doesn’t exist—the fraudster has taken the additional funds while the seller is left with a dispute.\n\nFor example, an online antique business may be approached by a fraudster claiming to live overseas. They request that the business use their preferred freight company, who they ask the business to make payment to. Using stolen card information, the fraudster pays the business for the goods and fake freight fee, and includes a gratuity for the seller as an incentive.\n\nThe business complies and pays the fee to this fake freight company but no shipment ever occurs because there is no legitimate shipper. The actual cardholder discovers the unauthorized payment and disputes it with their card issuer. The payment is automatically refunded and a dispute fee deducted, even though they’ve already paid out funds separately to a fraudulent third-party.\n\n## Card testing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis is the practice of testing a card (or multiple cards) on one site to see if it’s still valid before using it on another site to make a fraudulent payment. Sites with free text fields, such as donation sites and “pay what you like” e-commerce businesses, are predominately the targets of card testing. Implementing [CAPTCHA](http://captcha.net/) or rate-limiting charges can help combat this type of fraud. To learn more see, [Protect yourself from card testing](https://docs.stripe.com/disputes/prevention/card-testing).\n\n## Alternative refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn this form of fraud, the fraudster deliberately pays more than was required, then contacts the business, and claims they accidentally entered the wrong amount. The fraudster requests a partial refund to rectify this, but claims they have closed the card that was used and would like a refund sent using an alternative method that is outside of the card network (for example, check or wire transfer).\n\nFor example, a fraudster donates 500 USD to a charity and contacts them shortly after to say that it should have been a 50 USD donation. The fraudster asks for the return of 450 USD using a different method, so no refund is made back to the original card. When the legitimate cardholder disputes the fraudulent payment, the charity isn’t only responsible for the disputed amount, they have also lost the amount sent using the alternative method.\n\nNever refund payments using a different method than the one originally used. If a card has legitimately been closed, you can still perform a refund. The customer should then contact that card issuer to arrange the funds to be retrieved.\n\n## Marketplace fraud ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you run a marketplace business (such as a [Connect](https://docs.stripe.com/connect \"Connect\") platform) where your users are responsible for providing service to your customers, this type of fraud occurs when a fraudulent business takes payments without providing the services or goods to customers.\n\nFor example, a marketplace that connects buyers and sellers can run the risk of a seller taking payment from the buyer and not sending the goods. In such cases, if the funds can’t be recovered from the seller, [responsibility](https://docs.stripe.com/connect/account-balances#accounting-for-negative-balances) for the disputed amount and fee is ultimately on the platform.\n\n## Friendly fraud ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFriendly fraud—also known as “first-party misuse” or “first-party fraud”—occurs when a legitimate cardholder makes a purchase, but then disputes it at a later date. This can either be accidental, because they didn’t recognize the transaction on their statement, or deliberate (for example, due to buyer’s remorse or as an attempt to fraudulently obtain merchandise without paying).\n\nIt can be difficult to know whether friendly fraud has occurred, especially in digital sales. For those selling physical goods, shipping to a verified billing address and requiring signature on delivery can help combat this. In addition, having clear return policies prominently displayed at checkout to which the customer must agree prior to making a purchase can also help.\n\n[Visa Compelling Evidence 3.0](https://docs.stripe.com/disputes/categories#visa-ce-30) established new rules to challenge friendly fraud by showing previous non-fraud transactions with the same cardholder within a specified period. Stripe supports Visa CE 3.0 by identifying qualifying transactions in your history on our platform to determine eligibility for evidence submission under the Visa CE 3.0 rules. We then pre-populate the dispute response with most of the required evidence you need to significantly increase your likelihood of overturning the dispute in your favor.",
    "title": "Common types of online fraud | Stripe Documentation",
    "description": "Learn about the different kinds of fraud and what your liability is.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/inbound_transfers/object",
    "markdown": "# The InboundTransfer object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Returns `true` if the InboundTransfer is able to be canceled.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    failure\\_detailsnullable object\n    \n    Details about this InboundTransfer’s failure. Only set when status is `failed`.\n    \n*   The FinancialAccount that received the funds.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   Other flows linked to a InboundTransfer.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    origin\\_payment\\_methodstring\n    \n    The origin payment method to be debited for an InboundTransfer.\n    \n*   #### \n    \n    origin\\_payment\\_method\\_detailsnullable object\n    \n    Details about the PaymentMethod for an InboundTransfer.\n    \n*   Returns `true` if the funds for an InboundTransfer were returned after the InboundTransfer went to the `succeeded` state.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    Statement descriptor shown when funds are debited from the source. Not all payment networks support `statement_descriptor`.\n    \n*   Status of the InboundTransfer: `processing`, `succeeded`, `failed`, and `canceled`. An InboundTransfer is `processing` if it is created and pending. The status changes to `succeeded` once the funds have been “confirmed” and a `transaction` is created and posted. The status changes to `failed` if the transfer fails.\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\n## [Create an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/create)\n\nCreates an InboundTransfer.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to send funds to.\n    \n*   #### \n    \n    origin\\_payment\\_methodstringRequired\n    \n    The origin payment method to be debited for the InboundTransfer.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    The complete description that appears on your customers’ statements. Maximum 10 characters.\n    \n\n### Returns\n\nReturns an InboundTransfer object if there were no issues with InboundTransfer creation. The status of the created InboundTransfer object is initially marked as `processing`.\n\nPOST /v1/treasury/inbound\\_transfers\n\n```\ncurl https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaD72eZvKYlo2CYKM3DnUI \\  -d amount=10000 \\  -d currency=usd \\  -d origin_payment_method=pm_1KMDdkGPnV27VyGeAgGz8bsi \\  -d description=\"InboundTransfer from my bank account\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [Retrieve an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/retrieve)\n\nRetrieves the details of an existing InboundTransfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an InboundTransfer object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/inbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": true,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"failed_at\": null,    \"succeeded_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```\n\n## [List all InboundTransfers](https://docs.stripe.com/api/treasury/inbound_transfers/list)\n\nReturns a list of InboundTransfers sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` InboundTransfers, starting after InboundTransfer `starting_after`. Each entry in the array is a separate InboundTransfer object. If no more InboundTransfers are available, the resulting array is empty.\n\nGET /v1/treasury/inbound\\_transfers\n\n```\ncurl -G https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaDM2eZvKYlo2CvXrQknN4 \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/inbound_transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",      \"object\": \"treasury.inbound_transfer\",      \"amount\": 10000,      \"cancelable\": true,      \"created\": 1680716025,      \"currency\": \"usd\",      \"description\": \"InboundTransfer from my bank account\",      \"failure_details\": null,      \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgYYdf7K2aE6NpN7tVDs9F1hxjKU9i3In9yfJWRBNJycDGlZZ22xgY_IuRs_jih19J4q6c4yUsv0SimaA57pww\",      \"linked_flows\": {        \"received_debit\": null      },      \"livemode\": false,      \"metadata\": {},      \"origin_payment_method\": \"pm_1KMDdkGPnV27VyGeAgGz8bsi\",      \"origin_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": \"San Francisco\",            \"country\": \"US\",            \"line1\": \"1234 Fake Street\",            \"line2\": null,            \"postal_code\": \"94102\",            \"state\": \"CA\"          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"account_holder_type\": \"company\",          \"account_type\": \"checking\",          \"bank_name\": \"STRIPE TEST BANK\",          \"fingerprint\": \"AP24Iso0btGp4N10\",          \"last4\": \"6789\",          \"network\": \"ach\",          \"routing_number\": \"110000000\"        }      },      \"returned\": false,      \"statement_descriptor\": \"transfer\",      \"status\": \"processing\",      \"status_transitions\": {        \"failed_at\": null,        \"succeeded_at\": null      },      \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"    }    {...}    {...}  ],}\n```\n\n## [Cancel an InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/cancel)\n\nCancels an InboundTransfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the InboundTransfer object if the cancellation succeeded. Returns an error if the InboundTransfer has already been canceled or cannot be canceled.\n\nPOST /v1/treasury/inbound\\_transfers/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/treasury/inbound_transfers/ibt_1MtaDN2eZvKYlo2CxcxF1Qwi/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ibt_1MtaDN2eZvKYlo2CxcxF1Qwi\",  \"object\": \"treasury.inbound_transfer\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716025,  \"currency\": \"usd\",  \"description\": \"InboundTransfer from my external bank account\",  \"failure_details\": null,  \"financial_account\": \"fa_1MtaDM2eZvKYlo2CvXrQknN4\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKPnhtqEGMgZDF2WUT346NpP69bYKokqfNLTOb3qE8__DQL-vkc_p012AyYJYihh7UHvcsjvgXTDDkgEdUmHTimDXsAT0qA\",  \"linked_flows\": {    \"received_debit\": null  },  \"livemode\": false,  \"metadata\": {},  \"origin_payment_method\": \"pm_1MtaDN2eZvKYlo2CObQW5Wkv\",  \"origin_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"returned\": false,  \"statement_descriptor\": \"transfer\",  \"status\": \"canceled\",  \"status_transitions\": {    \"posted_at\": null,    \"failed_at\": null,    \"canceled_at\": 1680716025,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaDM2eZvKYlo2CKxgPNzLa\"}\n```",
    "title": "The InboundTransfer object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/received_debits/object",
    "markdown": "# The ReceivedDebit object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    failure\\_codenullable enum\n    \n    Reason for the failure. A ReceivedDebit might fail because the FinancialAccount doesn’t have sufficient funds, is closed, or is frozen.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_closed`<br><br>Funds can’t be pulled from a closed FinancialAccount. |\n    | `account_frozen`<br><br>Funds can’t be pulled from a frozen FinancialAccount. |\n    | `insufficient_funds`<br><br>The FinancialAccount doesn’t have a sufficient balance. |\n    | `other`<br><br>Funds can’t be pulled from the FinancialAccount for other reasons. |\n    \n*   #### \n    \n    financial\\_accountnullable string\n    \n    The FinancialAccount that funds were pulled from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Details about how a ReceivedDebit was created.\n    \n*   Other flows linked to a ReceivedDebit.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The network used for the ReceivedDebit.\n    \n*   #### \n    \n    reversal\\_detailsnullable object\n    \n    Details describing when a ReceivedDebit might be reversed.\n    \n*   Status of the ReceivedDebit. ReceivedDebits are created with a status of either `succeeded` (approved) or `failed` (declined). The failure reason can be found under the `failure_code`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedDebit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedDebit was approved. |\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```\n\n## [Retrieve a ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits/retrieve)\n\nRetrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ReceivedDebit object.\n\nGET /v1/treasury/received\\_debits/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/received_debits/rd_1MtkUY2eZvKYlo2CT9SYD1AF \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```\n\n## [List all ReceivedDebits](https://docs.stripe.com/api/treasury/received_debits/list)\n\nReturns a list of ReceivedDebits.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount that funds were pulled from.\n    \n*   Only return ReceivedDebits that have the given status: `succeeded` or `failed`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedDebit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedDebit was approved. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` ReceivedDebits, starting after ReceivedDebit `starting_after`. Each entry in the array is a separate ReceivedDebit object. If no more ReceivedDebits are available, the resulting array will be empty.\n\nGET /v1/treasury/received\\_debits\n\n```\ncurl -G https://api.stripe.com/v1/treasury/received_debits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkUY2eZvKYlo2CY3s6OQyK \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/received_debits\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",      \"object\": \"treasury.received_debit\",      \"amount\": 1000,      \"created\": 1680755530,      \"currency\": \"usd\",      \"description\": \"Stripe Test\",      \"failure_code\": null,      \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",      \"initiating_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": null,            \"country\": null,            \"line1\": null,            \"line2\": null,            \"postal_code\": null,            \"state\": null          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"bank_name\": \"STRIPE TEST BANK\",          \"last4\": \"6789\",          \"routing_number\": \"110000000\"        }      },      \"linked_flows\": {        \"debit_reversal\": null,        \"inbound_transfer\": null,        \"issuing_authorization\": null,        \"issuing_transaction\": null,        \"payout\": null      },      \"livemode\": false,      \"network\": \"ach\",      \"reversal_details\": {        \"deadline\": 1681084800,        \"restricted_reason\": null      },      \"status\": \"succeeded\",      \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"    }    {...}    {...}  ],}\n```\n\n## [Test mode: Create a ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedDebit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_debits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_debits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkUY2eZvKYlo2CY3s6OQyK \\  -d network=ach\n```\n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The ReceivedDebit object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/received_credits/object",
    "markdown": "# The ReceivedCredit object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    failure\\_codenullable enum\n    \n    Reason for the failure. A ReceivedCredit might fail because the receiving FinancialAccount is closed or frozen.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_closed`<br><br>Funds can’t be sent to a closed FinancialAccount. |\n    | `account_frozen`<br><br>Funds can’t be sent to a frozen FinancialAccount. |\n    | `other`<br><br>Funds can’t be sent to FinancialAccount for other reasons. |\n    \n*   #### \n    \n    financial\\_accountnullable string\n    \n    The FinancialAccount that received the funds.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Details about the PaymentMethod used to send a ReceivedCredit.\n    \n*   Other flows linked to a ReceivedCredit.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The rails used to send the funds.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `ach` |\n    | `card` |\n    | `stripe` |\n    | `us_domestic_wire` |\n    \n*   #### \n    \n    reversal\\_detailsnullable object\n    \n    Details describing when a ReceivedCredit may be reversed.\n    \n*   Status of the ReceivedCredit. ReceivedCredits are created either `succeeded` (approved) or `failed` (declined). If a ReceivedCredit is declined, the failure reason can be found in the `failure_code` field.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedCredit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedCredit was approved. |\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\nThe ReceivedCredit object\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [Retrieve a ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits/retrieve)\n\nRetrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ReceivedCredit object.\n\nGET /v1/treasury/received\\_credits/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/received_credits/rc_1MtkSr2eZvKYlo2CcysvUbEw \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [List all ReceivedCredits](https://docs.stripe.com/api/treasury/received_credits/list)\n\nReturns a list of ReceivedCredits.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount that received the funds.\n    \n*   Only return ReceivedCredits described by the flow.\n    \n*   Only return ReceivedCredits that have the given status: `succeeded` or `failed`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedCredit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedCredit was approved. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` ReceivedCredits, starting after ReceivedCredit `starting_after`. Each entry in the array is a separate ReceivedCredit object. If no more ReceivedCredits are available, the resulting array will be empty.\n\nGET /v1/treasury/received\\_credits\n\n```\ncurl -G https://api.stripe.com/v1/treasury/received_credits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkSr2eZvKYlo2CsJozwFWD \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/received_credits\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",      \"object\": \"treasury.received_credit\",      \"amount\": 1000,      \"created\": 1680755425,      \"currency\": \"usd\",      \"description\": \"Stripe Test\",      \"failure_code\": null,      \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",      \"initiating_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": null,            \"country\": null,            \"line1\": null,            \"line2\": null,            \"postal_code\": null,            \"state\": null          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"bank_name\": \"STRIPE TEST BANK\",          \"last4\": \"6789\",          \"routing_number\": \"110000000\"        }      },      \"linked_flows\": {        \"credit_reversal\": null,        \"issuing_authorization\": null,        \"issuing_transaction\": null,        \"source_flow\": null,        \"source_flow_type\": null      },      \"livemode\": false,      \"network\": \"ach\",      \"reversal_details\": {        \"deadline\": 1681084800,        \"restricted_reason\": null      },      \"status\": \"succeeded\",      \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"    }    {...}    {...}  ],}\n```\n\n## [Test mode: Create a ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to send funds to.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedCredit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_credits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_credits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkSr2eZvKYlo2CsJozwFWD \\  -d network=ach\n```\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The ReceivedCredit object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/revenue-recognition/data-import/apple-app-store",
    "markdown": "# Stripe Connector for the Apple App Store\n\n## Manage your revenue recognition in Stripe by importing data from the Apple App Store.\n\nThe [Stripe Connector for the Apple App Store](https://docs.stripe.com/stripe-data/import-external-data/connectors/apple-app-store) lets you automatically import subscription purchases from the Apple App Store into [Stripe Revenue Recognition](https://docs.stripe.com/revenue-recognition).\n\nThe benefits of using Revenue Recognition for the Apple App Store are:\n\n*   **Near real-time availability**: Set up daily, automated imports from the Apple App Store. This minimizes manual work and reduces corrections at month-end.\n*   **Increased accuracy**: Improve recognition accuracy by considering time zone differences.\n*   **Improved refund treatment**: Associate refunds with original purchases, and generate more accurate refund journal entries that adjust deferred revenue instead of treating refunds as negative line items.\n*   **Audit by subscribers**: Break down numbers on a per subscriber basis for easier audits.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo import data from the Apple App Store, [set up](https://docs.stripe.com/stripe-data/import-external-data/connectors/apple-app-store) the Stripe Connector for the Apple App Store. Stripe populates the data in your Revenue Recognition reports within 72 hours.\n\n### Backfill historical data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you onboard, the connector backfills up to 1 year of historical data.\n\n### Handle Apple transactions previously imported through manual data import ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you previously imported data from the Apple App Store using the Revenue Recognition [data import](https://docs.stripe.com/revenue-recognition/data-import#general-import) feature, you want to avoid double-counting Apple revenue upon switching to the automated connector.\n\nTo migrate from manual data imports to the connector, [delete](https://docs.stripe.com/revenue-recognition/data-import/manage-imported-data#transactions-deletion) all Apple transactions from the past year that you manually uploaded using data import CSVs. The connector replaces these transactions with the entries it generates during import.\n\n#### Note\n\nBecause the connector only backfills up to 1 year of historical data, we recommend keeping your data import CSV uploads for Apple transactions that occurred more than 1 year ago.\n\n## Examples ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Subscription purchase ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA subscriber purchases 1 unit of a News Plan Monthly subscription on December 3. The subscription is valid for 1 month, which means the service period is December 3 to January 3. The customer pays 32 USD, but the developer receives 31 USD.\n\nThe developer proceeds count toward revenue rather than customer price, because the customer price also includes taxes and Apple commissions. Revenue is billed and paid in full on December 3. Stripe recognizes most of the revenue in December, and a smaller portion in January.\n\nAt the end of January, the summary might look like this:\n\n| Account | December | January |\n| --- | --- | --- |\n| External Asset | +31 |     |\n| Revenue | +28 | +3  |\n| Deferred Revenue | +3  | \\-3 |\n\n### Subscription refund ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA subscriber purchases a 3-month subscription on January 2. The service period is January 2 to April 2. The customer pays 91 USD, but the developer receives 90 USD. On February 1, the customer receives a full refund.\n\nDuring a full refund:\n\n*   The customer receives their money back.\n*   Recognized revenue is offset by the refunds in a contra revenue account.\n*   The unused portion of the subscription revenue is cleared from the deferred revenue.\n\nThe refund reduces the external assets balance by 90 USD. The customer received 30 days of service, so you add 30 USD to the external refunds balance. The remainder of the deferred revenue–60 USD in this example–is also cleared.\n\nAt the end of April, the summary might look like this:\n\n| Account | December | January |\n| --- | --- | --- |\n| Revenue | +30 |     |\n| Deferred Revenue | +60 | \\-60 |\n| External Asset | +90 | \\-90 |\n| External Refunds |     | +30 |\n\n### Free trial ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe doesn’t generate journal entries for free trials.\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe most detailed level of reporting that Stripe can provide is audit by subscriber. We can’t provide an audit by invoice view because the financial reports from the Apple App Store don’t include invoice IDs.\n\nStripe also can’t book tax liability and Apple commissions because Apple doesn’t provide this data.",
    "title": "Stripe Connector for the Apple App Store | Stripe Documentation",
    "description": "Manage your revenue recognition in Stripe by importing data from the Apple App Store.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/mobile/ios/basic",
    "markdown": "# iOS basic integration | Stripe DocumentationThe Stripe Docs logo\n\n## iOS basic integrationDeprecated\n\n## Accept cards and Apple Pay with the iOS SDK's prebuilt UI.\n\n#### Note\n\nWe created an improved [payments UI](https://docs.stripe.com/payments/accept-a-payment?platform=ios) for mobile apps with features such as additional payment methods and SwiftUI support. We recommend using it for your integration instead of this one.\n\nIf you want to migrate but are unable to, please [let us know](https://github.com/stripe/stripe-ios/issues).\n\nUse this integration if you want a prebuilt UI that:\n\n*   Accepts credit cards and Apple Pay\n*   Saves and displays cards for reuse\n*   Supports [limited customization](#theming) of fonts and colors\n*   Displays full-screen view controllers to collect payment details, shipping address, and shipping method:\n\nThese view controllers are also available to use individually—see the steps below for more details. This integration requires both server and client-side steps to implement.\n\n#### Note\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#setup-ios)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis integration requires endpoints on your server that talk to the Stripe API. Use our official libraries for access to the Stripe API from your server:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Stripe iOS SDK](https://github.com/stripe/stripe-ios) is open source, [fully documented](https://stripe.dev/stripe-ios/index.html), and compatible with apps supporting iOS 13 or above.\n\nTo install the SDK, follow these steps:\n\n1.  In Xcode, select **File** > **Add Packages…** and enter `https://github.com/stripe/stripe-ios-spm` as the repository URL.\n2.  Select the latest version number from our [releases page](https://github.com/stripe/stripe-ios/releases).\n3.  Add the **Stripe** product to the [target of your app](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app).\n\nConfigure the SDK with your Stripe [publishable key](https://dashboard.stripe.com/test/apikeys) on app start. This enables your app to make requests to the Stripe API.\n\n`import UIKit import Stripe  @main class AppDelegate: UIResponder, UIApplicationDelegate {      func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {         StripeAPI.defaultPublishableKey =` \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n        `// do any other necessary launch configuration         return true     } }`\n\n#### Note\n\nUse your [test mode](https://docs.stripe.com/keys#obtain-api-keys) keys while you test and develop, and your [live mode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your app.\n\n[\n\n## Set up an ephemeral key![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#ephemeral-key)\n\nIn order for the SDK to save and retrieve credit cards for later use, create a single Stripe [Customer](https://docs.stripe.com/api/customers \"Customers\") object for each of your users. When you create a new user or account on your server, create a corresponding Customer object at the same time, even if you don’t collect payment information from your users when they sign up. This ensures that your application has a matching Customer for each user.\n\nFor security, the Customer API is not directly accessible from the client. Instead, your server provides the SDK with an ephemeral key—a short-lived API key with restricted access to the Customer API. You can think of an ephemeral key as a session, authorizing the SDK to retrieve and update a specific Customer object for the duration of the session.\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo provide an ephemeral key to the SDK, you’ll need to expose a new API endpoint on your backend. This endpoint should create an ephemeral key for the current Stripe customer, and return the key’s unmodified response as JSON. When the SDK requests an ephemeral key, it will specify the version of the Stripe API that it expects the response to come from. Your endpoint must accept an `api_version` parameter, and use the specified API version when creating the ephemeral key. This ensures that the SDK always receives the correct ephemeral key response from your backend. Consult our [Example Backend](https://github.com/stripe/example-mobile-backend/blob/9ac448f8b5d49175d26c7b77fd6bd3c88703e838/web.rb#L25-L40) to see this in practice.\n\n`curl https://api.stripe.com/v1/ephemeral_keys \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -H \"Stripe-Version: {{API_VERSION}}\"`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn your app, conform to the [STPCustomerEphemeralKeyProvider](https://stripe.dev/stripe-ios/docs/Protocols/STPCustomerEphemeralKeyProvider.html) protocol by implementing its [createCustomerKeyWithAPIVersion](https://stripe.dev/stripe-ios/docs/Protocols/STPCustomerEphemeralKeyProvider.html#/c:objc(pl)STPCustomerEphemeralKeyProvider(im)createCustomerKeyWithAPIVersion:completion:) method. This method requests an ephemeral key from the endpoint you created on the backend.\n\nWhen implementing this method, be sure to pass the `apiVersion` parameter along to your ephemeral keys endpoint. Consult the [API client](https://github.com/stripe/stripe-ios/tree/master/Example/Basic%20Integration/Basic%20Integration/MyAPIClient.swift) in our example app to see this in practice.\n\n`import Stripe  class MyAPIClient: NSObject, STPCustomerEphemeralKeyProvider {      func createCustomerKey(withAPIVersion apiVersion: String, completion: @escaping STPJSONResponseCompletionBlock) {         let url = self.baseURL.appendingPathComponent(\"ephemeral_keys\")         var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: false)!         urlComponents.queryItems = [URLQueryItem(name: \"api_version\", value: apiVersion)]         var request = URLRequest(url: urlComponents.url!)         request.httpMethod = \"POST\"         let task = URLSession.shared.dataTask(with: request, completionHandler: { (data, response, error) in             guard let response = response as? HTTPURLResponse,                 response.statusCode == 200,                 let data = data,                 let json = ((try? JSONSerialization.jsonObject(with: data, options: []) as? [String : Any]) as [String : Any]??) else {                 completion(nil, error)                 return             }             completion(json, nil)         })         task.resume()     } }`\n\n[\n\n## Set up an STPCustomerContext![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-customer-context)\n\nNext, initialize an [STPCustomerContext](http://stripe.dev/stripe-ios/docs/Classes/STPCustomerContext.html) with the `STPCustomerEphemeralKeyProvider` you created in the previous step.\n\nA `CustomerSession` talks to your backend to retrieve an ephemeral key for your Customer with its `STPCustomerEphemeralKeyProvider`, and uses that key to manage retrieving and updating the Customer’s payment methods on your behalf.\n\n`// MyAPIClient implements STPCustomerEphemeralKeyProvider (see above) let customerContext = STPCustomerContext(keyProvider: MyAPIClient())`\n\nTo reduce load times, preload your customer’s information by initializing `STPCustomerContext` before they enter your payment flow.\n\nIf your current user logs out of the app and a new user logs in, create a new instance of `STPCustomerContext` or clear the cached customer using the provided [clearCachedCustomer](https://stripe.dev/stripe-ios/docs/Classes/STPCustomerContext.html#/c:objc(cs)STPCustomerContext(im)clearCache) method. On your backend, create and return a new ephemeral key for the Customer object associated with the new user.\n\n[\n\n## Set up an STPPaymentContext![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#initialize-payment-context)\n\nOnce you’ve set up your customer context, you can use it to initialize [STPPaymentContext](https://stripe.dev/stripe-ios/docs/Classes/STPPaymentContext.html), the core class of the integration. Conform a class to [STPPaymentContextDelegate](https://stripe.dev/stripe-ios/docs/Protocols/STPPaymentContextDelegate.html) and assign it to the payment context’s `delegate` and `hostViewController` properties. We recommend using your app’s checkout screen `UIViewController`. In the next steps, you will implement the `STPPaymentContext` delegate methods.\n\nYou should also set the payment context’s `paymentAmount` property, which will be displayed to your user in the Apple Pay dialog (you can change this later, if the amount of the user’s purchase changes).\n\n`init() {     self.paymentContext = STPPaymentContext(customerContext: customerContext)     super.init(nibName: nil, bundle: nil)     self.paymentContext.delegate = self     self.paymentContext.hostViewController = self     self.paymentContext.paymentAmount = 5000 // This is in cents, that is, 50 USD }`\n\n[\n\n## Handle the user's payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-payment-method)\n\nIn your checkout screen, add a button to let the customer enter or change their payment method. When tapped, use `STPPaymentContext` to push or present an [STPPaymentOptionsViewController](https://stripe.dev/stripe-ios/docs/Classes/STPPaymentOptionsViewController.html) on the payment context’s `hostViewController`.\n\n`// If you prefer a modal presentation func choosePaymentButtonTapped() {     self.paymentContext.presentPaymentOptionsViewController() }  // If you prefer a navigation transition func choosePaymentButtonTapped() {     self.paymentContext.pushPaymentOptionsViewController() }`\n\n`STPPaymentOptionsViewController` uses `STPCustomerContext` to display a Customer’s payment methods. If there are no stored payment methods or the **Add New Card** button is tapped, `STPAddCardViewController` is displayed. You can also initialize and display these view controllers without using `STPPaymentContext`.\n\n### `- paymentContextDidChange:`\n\nThis [STPPaymentContext delegate method](https://stripe.dev/stripe-ios/docs/Protocols/STPPaymentContextDelegate.html#/c:objc(pl)STPPaymentContextDelegate(im)paymentContextDidChange:) triggers when the content of the payment context changes, like when the user selects a new payment method or enters shipping information. This is a good place to update your UI:\n\n`func paymentContextDidChange(_ paymentContext: STPPaymentContext) {     self.activityIndicator.animating = paymentContext.loading     self.paymentButton.enabled = paymentContext.selectedPaymentOption != nil     self.paymentLabel.text = paymentContext.selectedPaymentOption?.label     self.paymentIcon.image = paymentContext.selectedPaymentOption?.image }`\n\n[\n\n## Handle the user's shipping info![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-shipping-info)\n\nIf your user needs to enter or change their shipping address and shipping method, `STPPaymentContext` can do this for you automatically. `STPPaymentContext` will save shipping info to the Stripe customer when your user updates their information, and automatically prefill the shipping view controller for future purchases. Note that you should not rely on the shipping information stored on the Stripe customer for order fulfillment, as your user may change this information if they make multiple purchases. We recommend adding shipping information when you create a [PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-shipping) object (which can also help prevent fraud), or when saving it to your own database. When presenting the shipping view controller, you can specify whether you’d like it presented modally, or pushed onto a `UINavigationController` stack:\n\n`// If you prefer a modal presentation func shippingButtonTapped() {     self.paymentContext.presentShippingViewController() }  // If you prefer a navigation transition func shippingButtonTapped() {     self.paymentContext.pushShippingViewController() }`\n\nThis sets up and presents an [STPShippingAddressViewController](http://stripe.dev/stripe-ios/docs/Classes/STPShippingAddressViewController.html) on the payment context’s `hostViewController`. Once the user enters a valid shipping address, they’re taken to an [STPShippingMethodsViewController](http://stripe.dev/stripe-ios/docs/Classes/STPShippingMethodsViewController.html). After they select a shipping method, both view controllers are dismissed or popped off the `hostViewController`’s stack.\n\n### `- paymentContext:didUpdateShippingAddress:completion:`\n\nThis method is called after your user enters a shipping address. Validate the returned `address` and determine the shipping methods available for that address.\n\nIf the address is valid, call the provided `completion` block with a status of `STPShippingStatusValid`, `nil` for the error argument, an array of shipping methods, and a selected shipping method. If you don’t need to collect a shipping method, pass `nil` for the shipping methods and selected shipping method. If the address is invalid, call the `completion` block with a status of `STPShippingStatusInvalid`, an error object describing the issue with the address, and `nil` for the shipping methods and selected shipping method. Note that providing an error object is optional—if you omit it, the user sees an alert with the message “Invalid Shipping Address.”\n\n`func paymentContext(_ paymentContext: STPPaymentContext, didUpdateShippingAddress address: STPAddress, completion: @escaping STPShippingMethodsCompletionBlock) {     let upsGround = PKShippingMethod()     upsGround.amount = 0     upsGround.label = \"UPS Ground\"     upsGround.detail = \"Arrives in 3-5 days\"     upsGround.identifier = \"ups_ground\"     let fedEx = PKShippingMethod()     fedEx.amount = 5.99     fedEx.label = \"FedEx\"     fedEx.detail = \"Arrives tomorrow\"     fedEx.identifier = \"fedex\"      if address.country == \"US\" {         completion(.valid, nil, [upsGround, fedEx], upsGround)     }     else {         completion(.invalid, nil, nil, nil)     } }`\n\n[\n\n## Submit the payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#submit-payment)\n\nWhen your user is ready to pay (for example, they tap the **Buy** button) call `requestPayment` on your payment context. It displays any required UI (such as the Apple Pay dialog) and calls the appropriate methods on its delegate as your user finishes their payment.\n\n`func payButtonTapped() {     self.paymentContext.requestPayment() }`\n\n### `- paymentContext:didCreatePaymentResult:completion:`\n\nThis method is called when the customer has successfully selected a payment method. Submit the payment to Stripe using a [Payment Intent](https://docs.stripe.com/payments/payment-intents). Stripe uses this payment object to track and handle all the states of the payment until the payment completes.\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn your server, make an endpoint that creates a `PaymentIntent` with an amount and currency and returns its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") to your client.\n\nAlways decide how much to charge on the server side, a trusted environment, as opposed to the client. This prevents malicious customers from being able to choose their own prices.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn the client, implement this delegate method to:\n\n1.  Request a `PaymentIntent` from your server.\n2.  Assemble a [STPPaymentIntentParams](https://stripe.dev/stripe-ios/stripe-payments/Classes/STPPaymentIntentParams.html) object with the `PaymentIntent` client secret from your server and the [paymentMethod](https://stripe.dev/stripe-ios/docs/Classes/STPPaymentResult.html#/c:objc(cs)STPPaymentResult(py)paymentMethod) provided by the delegate method.\n3.  Call the [STPPaymentHandler confirmPayment](https://stripe.dev/stripe-ios/stripe-payments/Classes/STPPaymentHandler.html#/c:@M@StripePayments@objc(cs)STPPaymentHandler(im)confirmPayment:withAuthenticationContext:completion:) method to [confirm](https://docs.stripe.com/api/payment_intents/confirm \"confirm\") the payment, passing the `STPPaymentContext` as the [authenticationContext](https://stripe.dev/stripe-ios/stripe-payments/Protocols/STPAuthenticationContext.html).\n\n`func paymentContext(_ paymentContext: STPPaymentContext,   didCreatePaymentResult paymentResult: STPPaymentResult,   completion: @escaping STPErrorBlock) {     // Request a PaymentIntent from your backend     MyAPIClient.sharedClient.createPaymentIntent(products: self.products, shippingMethod: paymentContext.selectedShippingMethod) { result in         switch result {         case .success(let clientSecret):             // Assemble the PaymentIntent parameters             let paymentIntentParams = STPPaymentIntentParams(clientSecret: clientSecret)             paymentIntentParams.paymentMethodId = paymentResult.paymentMethod.stripeId              // Confirm the PaymentIntent             STPPaymentHandler.shared().confirmPayment(paymentIntentParams, with: paymentContext) { status, paymentIntent, error in                 switch status {                 case .succeeded:                     // Your backend asynchronously fulfills the customer's order, for example, via webhook                     completion(.success, nil)                 case .failed:                     completion(.error, error) // Report error                 case .canceled:                     completion(.userCancellation, nil) // Customer canceled                 @unknown default:                     completion(.error, nil)                 }             }         case .failure(let error):             completion(.error, error) // Report error from your API             break         }     } }`\n\nYou must call the provided `completion` block with the appropriate `STPPaymentStatus` (`.success`, `.error`, or .`userCancellation`) when the customer’s payment is finished.\n\n### `- paymentContext:didFinishWithStatus:error:`\n\nThis method is called after the previous method, when any auxiliary UI that has been displayed (such as the Apple Pay dialog) has been dismissed. You should inspect the returned `status` and show an appropriate message to your user. For example:\n\n`func paymentContext(_ paymentContext: STPPaymentContext,   didFinishWithStatus status: STPPaymentStatus,   error: Error?) {      switch status {     case .error:         self.showError(error)     case .success:         self.showReceipt()     case .userCancellation:         return // Do nothing     } }`\n\n### `- paymentContext:didFailToLoadWithError:`\n\nThis method is called in the rare case that the payment context’s initial loading call fails, usually due to lack of internet connectivity. You should dismiss your checkout page when this occurs and invite the user to try again. You can also optionally attempt to try again by calling `retryLoading` on the payment context.\n\n`func paymentContext(_ paymentContext: STPPaymentContext,   didFailToLoadWithError error: Error) {     self.navigationController?.popViewController(animated: true)     // Show the error to your user, and so on }`\n\n[\n\n## Test the integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#test)\n\n​​Several test cards are available for you to use in test mode to make sure this integration is ready. Use them with any CVC and an expiration date in the future.\n\n| Number | Description |\n| --- | --- |\n|     | Succeeds and immediately processes the payment. |\n|     | Requires authentication. Stripe triggers a modal asking for the customer to authenticate. |\n|     | Always fails with a decline code of `insufficient_funds`. |\n\nFor the full list of test cards see our guide on [testing](https://docs.stripe.com/testing).",
    "title": "iOS basic integration | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/mobile/android/basic",
    "markdown": "# Android basic integration | Stripe DocumentationThe Stripe Docs logo\n\n## Android basic integrationDeprecated\n\n## Accept cards with the Android SDK's prebuilt UI.\n\n#### Note\n\nWe created an improved [payments UI](https://docs.stripe.com/payments/accept-a-payment?platform=android) for mobile apps with support for additional payment methods. We recommend using it for your integration instead of this one.\n\nIf you want to migrate but are unable to, please [let us know](https://github.com/stripe/stripe-android/issues).\n\nUse this integration if you want a prebuilt UI that:\n\n*   Accepts credit cards and other payment methods\n*   Saves and displays cards for reuse\n*   Can be [customized to fit your app’s look and feel](#customize-ui) using an Android theme\n*   Launches full-screen activities to collect payment details, shipping address, and shipping method\n*   Allows your customer to choose Google Pay as a payment method\n\nThese activities [can also be used individually](#use-individual-activities). This integration requires both server and client-side steps to implement.\n\n#### Note\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis integration requires endpoints on your server that talk to the Stripe API. Use our official libraries for access to the Stripe API from your server:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Stripe Android SDK](https://github.com/stripe/stripe-android) is open source and [fully documented](https://stripe.dev/stripe-android/).\n\nTo install the SDK, add `stripe-android` to the `dependencies` block of your [`app/build.gradle`](https://developer.android.com/studio/build/dependencies) file:\n\n`apply plugin: 'com.android.application'  android { ... }  dependencies {   // ...    // Stripe Android SDK   implementation 'com.stripe:stripe-android:20.48.0' }`\n\nConfigure the SDK with your Stripe [publishable key](https://dashboard.stripe.com/apikeys) so that it can make requests to the Stripe API, such as in your `Application` subclass:\n\n`import com.stripe.android.PaymentConfiguration  class MyApp : Application() {     override fun onCreate() {         super.onCreate()         PaymentConfiguration.init(             applicationContext,`\n            \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n        `)     } }`\n\n#### Note\n\nUse your [test mode](https://docs.stripe.com/keys#obtain-api-keys) keys while you test and develop, and your [live mode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your app.\n\n[\n\n## Set up an ephemeral key![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-ephemeral-key)\n\nIn order for the SDK to save and retrieve credit cards for later use, create a single Stripe [Customer](https://docs.stripe.com/api/customers \"Customers\") object for each of your users. When you create a new user or account on your server, create a corresponding Customer object at the same time, even if you don’t collect payment information from your users when they sign up. This ensures that your application has a matching Customer for each user.\n\nFor security, the Customer API is not directly accessible from the client. Instead, your server provides the SDK with an ephemeral key—a short-lived API key with restricted access to the Customer API. You can think of an ephemeral key as a session, authorizing the SDK to retrieve and update a specific Customer object s for the duration of the session.\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo provide an ephemeral key to the SDK, expose a new API endpoint on your backend. This endpoint should create an ephemeral key for the current Stripe customer, and return the key’s unmodified response as JSON. When the SDK requests an ephemeral key, it will specify the version of the Stripe API that it expects the response to come from. Your endpoint must accept an `api_version` parameter, and use the specified API version when creating the ephemeral key. This ensures that the SDK always receives the correct ephemeral key response from your backend. Consult our [Example Backend](https://github.com/stripe/example-mobile-backend/blob/9ac448f8b5d49175d26c7b77fd6bd3c88703e838/web.rb#L25-L40) to see this in practice.\n\n`curl https://api.stripe.com/v1/ephemeral_keys \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -H \"Stripe-Version: {{API_VERSION}}\"`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you’ve added an ephemeral key endpoint to your backend, you’ll need a way for your Android app to communicate with this endpoint. In your app, make your API client class implement the [`EphemeralKeyProvider`](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-ephemeral-key-provider/index.html) interface, which defines a single method, [createEphemeralKey()](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-ephemeral-key-provider/create-ephemeral-key.html). When implementing this method, pass the `apiVersion` parameter along to your ephemeral keys endpoint. Consult our [Example App](https://github.com/stripe/stripe-android/blob/master/example/src/main/java/com/stripe/example/service/ExampleEphemeralKeyProvider.kt) to see this in practice.\n\nExampleEphemeralKeyProvider.java\n\n`public class ExampleEphemeralKeyProvider implements EphemeralKeyProvider {     private final BackendApi backendApi =         RetrofitFactory.instance.create(BackendApi.class);     private final CompositeDisposable compositeDisposable =         new CompositeDisposable();      @Override     public void createEphemeralKey(             @NonNull @Size(min = 4) String apiVersion,             @NonNull final EphemeralKeyUpdateListener keyUpdateListener) {         final Map<String, String> apiParamMap = new HashMap<>();         apiParamMap.put(\"api_version\", apiVersion);          // Using RxJava2 for handling asynchronous responses         compositeDisposable.add(backendApi.createEphemeralKey(apiParamMap)                 .subscribeOn(Schedulers.io())                 .observeOn(AndroidSchedulers.mainThread())                 .subscribe(                         response -> {                             try {                                 final String rawKey = response.string();                                 keyUpdateListener.onKeyUpdate(rawKey);                             } catch (IOException ignored) {                             }                         }));     } }`\n\n[\n\n## Set up a CustomerSession![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-customer-session)\n\nAfter creating an `EphemeralKeyProvider`, initialize a [`CustomerSession`](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/index.html). A `CustomerSession` talks to your backend to retrieve an ephemeral key for your Customer with its `EphemeralKeyProvider`, and uses that key to manage retrieving and updating the Customer’s payment methods on your behalf.\n\nYou can also use `CustomerSession` with your own custom UI to [retrieve](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/retrieve-current-customer.html) or [refresh](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/update-current-customer.html) the Customer, and [list](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/get-payment-methods.html) their payment methods, [attach](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/attach-payment-method.html) a payment method, or [detach](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-customer-session/detach-payment-method.html) a payment method.\n\n`public class StoreActivity extends Activity {     @Override     protected void onCreate(@Nullable Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         CustomerSession.initCustomerSession(             this,             new ExampleEphemeralKeyProvider()         );     } }`\n\nTo reduce load times, preload your customer’s information by initializing `CustomerSession` before they enter your payment flow.\n\nIf your current user logs out of the app, clear the current `CustomerSession` singleton by calling `CustomerSession.endCustomerSession()`. When a new user logs in, re-initialize the instance. On your backend, create and return a new ephemeral key for the Customer object associated with the new user.\n\n[\n\n## Set up a PaymentSession![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-payment-session)\n\nThe core of this integration is the [`PaymentSession`](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/index.html) class. It uses `CustomerSession` to launch full-screen activities to collect and store payment information, and can also be used to collect shipping info. Think of it as the data source for your checkout activity—it handles asynchronously retrieving the data you need, and notifies its `PaymentSessionListener` when your UI should change.\n\nTo work with `PaymentSession`, you’ll need to:\n\n1.  Create a `PaymentSessionConfig` object\n2.  Implement a `PaymentSessionListener`\n\n### PaymentSessionConfig![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `PaymentSessionConfig` object is created using a [Builder](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session-config/-builder/index.html). All of the `Builder`’s fields are optional. See the [API reference](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session-config/-builder/index.html) for details on each method.\n\n``public StoreActivity extends AppCompatActivity {      @NonNull     private PaymentSessionConfig createPaymentSessionConfig() {         return PaymentSessionConfig.Builder()              // hide the phone field on the shipping information form             .setHiddenShippingInfoFields(                 ShippingInfoWidget.CustomizableShippingField.PHONE_FIELD             )              // make the address line 2 field optional             .setOptionalShippingInfoFields(                 ShippingInfoWidget.CustomizableShippingField.ADDRESS_LINE_TWO_FIELD             )              // specify an address to pre-populate the shipping information form             .setPrepopulatedShippingInfo(ShippingInformation(                 new Address.Builder()                     .setLine1(\"123 Market St\")                     .setCity(\"San Francisco\")                     .setState(\"CA\")                     .setPostalCode(\"94107\")                     .setCountry(\"US\")                     .build(),                 \"Jenny Rosen\",                 \"4158675309\"             ))              // collect shipping information             .setShippingInfoRequired(true)              // collect shipping method             .setShippingMethodsRequired(true)              // specify the payment method types that the customer can use;             // defaults to PaymentMethod.Type.Card             .setPaymentMethodTypes(                 Arrays.asList(PaymentMethod.Type.Card)             )              // only allow US and Canada shipping addresses             .setAllowedShippingCountryCodes(new HashSet<>(                 Arrays.asList(\"US\", \"CA\")             ))              // specify a layout to display under the payment collection form             .setAddPaymentMethodFooter(R.layout.add_payment_method_footer)              // specify the shipping information validation delegate             .setShippingInformationValidator(new AppShippingInformationValidator())              // specify the shipping methods factory delegate             .setShippingMethodsFactory(new AppShippingMethodsFactory())              // if `true`, will show \"Google Pay\" as an option on the             // Payment Methods selection screen             .setShouldShowGooglePay(true)              .build();     }      private static class AppShippingInformationValidator         extends PaymentSessionConfig.ShippingInformationValidator {          @Override         public boolean isValid(             @NonNull ShippingInformation shippingInformation         ) {             final Address address = shippingInformation.getAddress();             return address != null && Locale.US.country == address.getCountry();         }          @NonNull         public String getErrorMessage(             @NonNull ShippingInformation shippingInformation         ) {             return \"A US address is required\";         }     }      private static class AppShippingMethodsFactory         extends PaymentSessionConfig.ShippingMethodsFactory {          @Override         public List<ShippingMethod> create(             @NonNull ShippingInformation shippingInformation         ) {             returns Arrays.asList(                 new ShippingMethod(                     \"UPS Ground\",                     \"ups-ground\",                     0,                     \"USD\",                     \"Arrives in 3-5 days\"                 ),                 new ShippingMethod(                     \"FedEx\",                     \"fedex\",                     599,                     \"USD\",                     \"Arrives tomorrow\"                 )             );         }     } }``\n\n### PaymentSessionListener![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter creating the `PaymentSessionConfig`, you’ll need to implement `PaymentSessionListener`.\n\nMyPaymentSessionListener.java\n\n``public class MyPaymentSessionListener         implements PaymentSession.PaymentSessionListener {     // Called whenever the PaymentSession's data changes,     // For example, when the user selects a new `PaymentMethod` or enters shipping info.     @Override     public void onPaymentSessionDataChanged(@NonNull PaymentSessionData data) {         if (data.getUseGooglePay()) {             // customer intends to pay with Google Pay         } else {             final PaymentMethod paymentMethod = data.getPaymentMethod();             if (paymentMethod != null) {                 // Display information about the selected payment method             }         }          // Update your UI here with other data         if (data.isPaymentReadyToCharge()) {             // Use the data to complete your charge - see below.         }     }      @Override     public void onCommunicatingStateChanged(boolean isCommunicating) {     }      @Override     public void onError(int errorCode, @NotNull String errorMessage) {     } }``\n\nThis method should also check for whether or not the payment data is complete, according to the `PaymentSessionConfig` specified. If you receive an update for which `PaymentSessionData#isPaymentReadyToCharge()` returns true, you can immediately send a message to your server to complete the charge.\n\n#### `void onCommunicatingStateChanged(boolean isCommunicating)`\n\nThis method is called whenever the network communication state has changed. We recommend showing a spinner or infinite progress bar when it is set to `true`\n\nMyPaymentSessionListener.java\n\n`public class MyPaymentSessionListener         implements PaymentSession.PaymentSessionListener {     @Override     public void onCommunicatingStateChanged(boolean isCommunicating) {         if (isCommunicating) {             // update UI to indicate that network communication is in progress         } else {             // update UI to indicate that network communication has completed         }     } }`\n\n#### `void onError(int errorCode, @Nullable String errorMessage)`\n\nThis method is called whenever an error occurs when connecting to the Stripe API. Make sure users can see the error messages, so display them in an alert dialog.\n\n### Initialize a PaymentSession![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHaving created your `PaymentSessionConfig` and `PaymentSessionListener`, you can now [initialize](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/init.html) the `PaymentSession`. In the below example, we use anonymous classes to create our listener and config for simplicity.\n\n`public class HostActivity extends Activity {     private PaymentSession paymentSession;     private Button startPaymentFlowButton;      @Override     protected void onCreate(@Nullable Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         paymentSession = new PaymentSession(             this,             new PaymentSessionConfig.Builder()                 .setPrepopulatedShippingInfo(getDefaultShippingInfo())                 .build()         );         setupPaymentSession();     }      private void setupPaymentSession() {         paymentSession.init(             new PaymentSession.PaymentSessionListener() {                 @Override                 public void onCommunicatingStateChanged(                     boolean isCommunicating                 ) {                     // update UI, such as hiding or showing a progress bar                 }                  @Override                 public void onError(                     int errorCode,                     @Nullable String errorMessage                 ) {                     // handle error                 }                  @Override                 public void onPaymentSessionDataChanged(                     @NonNull PaymentSessionData data                 ) {                     final PaymentMethod paymentMethod = data.getPaymentMethod();                     // use paymentMethod                 }             }         );         startPaymentFlowButton.setEnabled(true);     }      @Override     protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {         super.onActivityResult(requestCode, resultCode, data);         if (data != null) {             paymentSession.handlePaymentData(requestCode, resultCode, data);         }     }      @NonNull     private ShippingInformation getDefaultShippingInfo() {         // optionally specify default shipping address         return new ShippingInformation();     } }`\n\n[\n\n## Collect the customer's payment and shipping details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#collect-details)\n\nOnce the `PaymentSession` has been initialized, you can use it to make the following calls.\n\n#### `void presentPaymentMethodSelection()`\n\nThis method starts the `PaymentMethodsActivity` to allow the customer to choose a saved payment method, using `CustomerSession` as its data source. If the **Add new card** button is tapped, or there are no existing payment methods, `AddPaymentMethodActivity` is launched to add a credit card.\n\n#### `void presentShippingFlow()`\n\nThis method presents the PaymentFlowActivity to allow the user to enter shipping information, if such information is required according to your `PaymentSessionConfig`.\n\n[\n\n## Complete the payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#complete-the-payment)\n\nOnce `PaymentSession#isPaymentReadyToCharge()` returns `true`, submit the payment to Stripe using a [Payment Intent](https://docs.stripe.com/payments/payment-intents). Stripe uses this payment object to track and handle all the states of the payment—even when the bank requires customer intervention, like additional card authentication—until the payment completes.\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn your server, make an endpoint that creates a `PaymentIntent` with an amount and currency and returns its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") to your client.\n\nAlways decide how much to charge on the server side, a trusted environment, as opposed to the client. This prevents malicious customers from being able to choose their own prices.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  Request a `PaymentIntent` from your server\n2.  Assemble a [ConfirmPaymentIntentParams](https://stripe.dev/stripe-android/payments-core/com.stripe.android.model/-confirm-payment-intent-params/index.html) object with the `PaymentIntent` client secret from your server and the id of `PaymentSessionData#paymentMethod` obtained from `PaymentSessionListenerImpl#onPaymentSessionDataChanged()`.\n3.  Call the [Stripe confirmPayment](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-stripe/confirm-payment.html) method to confirm the payment.\n\n`public class CheckoutActivity extends Activity {     private void confirmPayment(         @NonNull String clientSecret,         @NonNull String paymentMethodId     ) {         stripe.confirmPayment(             this,             ConfirmPaymentIntentParams.createWithPaymentMethodId(                 paymentMethodId,                 clientSecret             )         );     } }`\n\nWhen the payment completes, `onSuccess` is called and the value of the returned PaymentIntent’s `status` is `Succeeded`. Any other value indicates the payment was not successful. Inspect [lastPaymentError](https://stripe.dev/stripe-android/payments-core/com.stripe.android.model/-payment-intent/index.html#com.stripe.android.model/PaymentIntent/lastPaymentError/#/PointingToDeclaration/) to determine the cause. End the payment session by calling `PaymentSession#onCompleted()`.\n\n[\n\n## Manage PaymentSession in a host Activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#manage)\n\nIn order to get updates for the `PaymentSessionData` object and to handle state during Activity lifecycle, you’ll need to hook up your `PaymentSession` instance to a few key parts of your host Activity lifecycle. The first is in `onActivityResult()`\n\n`public class HostActivity extends Activity {     @Override     protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {         super.onActivityResult(requestCode, resultCode, data);         paymentSession.handlePaymentData(requestCode, resultCode, data);     } }`\n\nThis is all you need to do to get updates from the various activities launched by `PaymentSession`. Any updates to the data are reported to the [PaymentSessionListener](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/-payment-session-listener/index.html) argument to [PaymentSession#init()](https://stripe.dev/stripe-android/payments-core/com.stripe.android/-payment-session/init.html).\n\n`public class HostActivity extends Activity {     private PaymentSession paymentSession;      // Can also be re-initialized in onRestoreInstanceState     @Override     public void onCreate(@Nullable Bundle savedInstanceState) {         super.onCreate(savedInstanceState);          // other onCreate logic          // Create the PaymentSession         paymentSession = new PaymentSession(             this,             createPaymentSessionConfig()         );          // Attach your listener         paymentSession.init(createPaymentSessionListener());     }      @NonNull     private PaymentSession.PaymentSessionListener createPaymentSessionListener() {         return new PaymentSession.PaymentSessionListener() {             @Override             public void onCommunicatingStateChanged(                 boolean isCommunicating             ) {                 // update UI, such as hiding or showing a progress bar             }              @Override             public void onError(                 int errorCode,                 @NotNull String errorMessage             ) {                 // handle error             }              @Override             public void onPaymentSessionDataChanged(                 @NotNull PaymentSessionData data             ) {                 data.getPaymentMethod();             }         };     }      @NonNull     private PaymentSessionConfig createPaymentSessionConfig() {         return new PaymentSessionConfig.Builder()                 .build();     } }`\n\n[\n\n## Test the integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#test)\n\n​​Several test cards are available for you to use in test mode to make sure this integration is ready. Use them with any CVC and an expiration date in the future.\n\n| Number | Description |\n| --- | --- |\n|     | Succeeds and immediately processes the payment. |\n|     | Requires authentication. Stripe triggers a modal asking for the customer to authenticate. |\n|     | Always fails with a decline code of `insufficient_funds`. |\n\nFor the full list of test cards see our guide on [testing](https://docs.stripe.com/testing).",
    "title": "Android basic integration | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/dashboard/managing-individual-accounts",
    "markdown": "# Manage individual accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Stripe Dashboard to manage connected accounts.\n\nYou can use the [Stripe Dashboard](https://dashboard.stripe.com/connect/accounts/overview) to inspect, support, and better understand your platform’s [connected accounts](https://docs.stripe.com/connect/accounts).\n\n## Create accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPlatforms in France can’t create connected accounts in the Dashboard. Due to French regulations, you can only create connected accounts using Stripe-hosted onboarding.\n\nThis feature allows you to onboard connected accounts without writing code and to test before integrating. The user creating the account must be an [Administrator or Developer](https://docs.stripe.com/get-started/account/teams/roles), and the account must have a completed [platform profile](https://dashboard.stripe.com/connect/settings/profile).\n\nTo create a new account, click the **\\+ Create** button on the [Connected accounts](https://dashboard.stripe.com/connect/accounts/overview) page, then select the account type and country.\n\nIf you select the [Express](https://docs.stripe.com/connect/express-accounts) or [Standard](https://docs.stripe.com/connect/standard-accounts) account type, Stripe provides a one-time link for the account holder to complete the onboarding flow and emails you after the account successfully connects. Selecting the [Custom](https://docs.stripe.com/connect/custom-accounts) account type creates the account immediately, and you can [finish onboarding](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#updating-accounts) it on the Account details page. You can’t currently create accounts [without types](https://docs.stripe.com/connect/migrate-to-controller-properties) from the Stripe Dashboard.\n\n![Create an account in the Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/create-account.474100e68f8c8df37bc4b5fac9e04583.png)\n\nCreate an account in the Dashboard\n\n## Find accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo find a specific connected account, you can [search in the Dashboard](https://docs.stripe.com/dashboard/search) using criteria such as its name, email, or [metadata](https://docs.stripe.com/dashboard/search#metadata-searches). Alternatively, you can [view a list of accounts](https://docs.stripe.com/connect/dashboard/viewing-all-accounts) on the [Connected accounts](https://dashboard.stripe.com/connect/accounts/overview) page and click an account to open its account details page.\n\nBy default, the account details page opens on the **Overview** tab of the Activity section, which provides a detailed breakdown of recent transactions and other activity on the account.\n\n![Connect account activity](https://b.stripecdn.com/docs-statics-srv/assets/activity.3f57e0c746be14db9fc46bbf0e6e5d46.png)\n\nConnect account activity\n\nA banner at the top of the page alerts you when you or the connected account must take action to prevent or remove restrictions on the account’s capabilities. Such restrictions can result from open onboarding, verification, or risk requirements.\n\n![A banner in the connected account details page saying to update this account to avoid an interruption in payouts, with a button to view details](https://b.stripecdn.com/docs-statics-srv/assets/connected-account-detail-actions-required-overview-banner.e0aca7bf27cc14c26492d1b89f970322.png)\n\n#### Note\n\n## View and unblock support cases ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nView support cases your connected accounts have opened with Stripe and help unblock those cases by providing additional context.\n\nThe **Activity** section of a connected account’s details page contains a list of support cases raised by the connected account.\n\n![Support cases](https://b.stripecdn.com/docs-statics-srv/assets/support-cases.efdce627307f4ead05ea96e5f2079733.png)\n\nYou can view support cases from the last 90 days created from any connected account with access to either the full Stripe Dashboard or Express Dashboard. Connected accounts with Stripe Dashboard access who have the following exceptions are not included:\n\n*   Connected accounts who are or have been connected to multiple platforms\n*   Connected accounts who are also platform accounts\n*   Connected accounts who have opted out of sharing their cases.\n\nClick on any conversation in the **Support Cases** section to open the support case details page containing the detailed conversation between the connected account and Stripe.\n\n![Send Stripe Support an email](https://b.stripecdn.com/docs-statics-srv/assets/stripe-support-email.1d56ea6297510ab80f728b808e613972.png)\n\nYou can use the **Send Stripe Support an email** functionality for an existing support case to privately add any additional context that would help Stripe resolve the issue. These messages aren’t visible to the connected account.\n\n## Identify and remediate issues on the Actions required tab ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe **Actions required** tab displays details about any open requirements on the account. Each row corresponds to a `requirement`, `future_requirement`, or information request from Stripe.\n\n![A screenshot of the Actions required tab showing two actions needed to restore functionality to this connected account.](https://b.stripecdn.com/docs-statics-srv/assets/connected-account-detail-actions-required-tab.f2729f77993262a4e073ef45db4e2128.png)\n\nThe Due Date is the [current deadline](https://docs.stripe.com/api/accounts/object#account_object-requirements-current_deadline) of the corresponding requirement. The following table describes the action statuses.\n\n| Requirement | Issue status |\n| --- | --- |\n| Information request from Stripe | _Various_ |\n| `requirement` in `past_due` | Past due |\n| `requirement` in `currently_due` | Currently due |\n| `future_requirement` | Future requirement |\n| `requirement` in `eventually_due` | Due later |\n\nClicking on a requirement opens a dialog with possible remediation paths for that requirement. To take action, click one of the paths.\n\nAvailable paths depend on the requirement and the account type. They can include submitting information on behalf of the account, sending the account a link that they can use to submit information, or contacting Stripe Support.\n\n### Submit the information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDepending on the issue type, this path opens a dialog or form where you can enter and submit the required information.\n\n### Send a remediation link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis path generates an account-specific remediation link that you can copy and send to the account. The link takes them to a page where they can submit the required information.\n\nFor more information about remediation links, see the [remediation link process walkthrough](https://docs.stripe.com/connect/dashboard/remediation-links).\n\n### Contact Support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo remediate some issues, you must contact Stripe. This path opens a pre-filled form that you can use to submit a ticket to Stripe Support.\n\n## Update account information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe capabilities of connected accounts change over time depending on their verification status. If your platform is responsible for [collecting updated information](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) from a connected account (including Custom accounts) when requirements change, you can:\n\n*   Update its account information, contact information, and business details in the **Profile** section of the account details page.\n*   Update its [payout](https://docs.stripe.com/payouts \"payout\") schedule in the **Overview** tab of the Activity section under **Account balances**.\n\n### Change the account representative![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can call the [Accounts API](https://docs.stripe.com/api/accounts/update) to change the account representative. For more information, see the [required verification information page](https://docs.stripe.com/connect/required-verification-information#change-verification-info).\n\n### Managing business owners ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can add, edit, and remove business owners on the connected account details page. To add a new owner, click **\\+ Add owner**. To edit an existing owner, click the overflow menu ().\n\n### Update capabilities ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can manage an account’s [capabilities](https://docs.stripe.com/connect/account-capabilities) by clicking **Edit** in the **Capabilities** section.\n\n![Manage connected account capabilities](https://b.stripecdn.com/docs-statics-srv/assets/edit-capabilities.59a5314539722cc15753c851fa2e1fda.png)\n\nManage connected account capabilities\n\n## Send funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFunds sent to connected accounts come from your platform’s balance. You can add additional funds to your balance by clicking **Add to balance** in the **Balances** section.\n\nTo execute the transfer, go to your **Balances** section and click the **Transfers** tab. Click **New** to open the dialog for sending funds to connected accounts.\n\nFor accounts where your platform is liable for negative balances (including Custom and Express accounts), you can send money directly to a connected account’s bank or debit card. To send funds, a user must have at least [Administrator privileges](https://docs.stripe.com/get-started/account/teams/roles).\n\n## Pull funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Beta\n\nPulling funds is a US-exclusive beta feature. Both the platform’s country and the connected account’s country must be `US`.\n\nYou can pull funds from connected accounts using the **Pull funds** button in the **Account balances** section.\n\n![Pull funds from a connected account](https://b.stripecdn.com/docs-statics-srv/assets/pullfunds.91aed365ffb0bcc44510f00fa64d5761.png)\n\nPull funds from a connected account\n\nFor accounts where your platform is liable for negative balances (including Custom and Express accounts), you can pull money from a connected account’s Stripe balance directly to your platform balance. Pulling funds is restricted to users with at least [Administrator privileges](https://docs.stripe.com/get-started/account/teams/roles).\n\n## Remove accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![Remove connected account from platform](https://b.stripecdn.com/docs-statics-srv/assets/remove_account.2b00800b90522e6b2a46dd8827e1fa7b.png)\n\nRemove a connected account\n\nYou can remove and disconnect any connected account with access to the full Stripe Dashboard from your platform. A removed account no longer appears in your connected accounts list, and you can’t process payments or make API calls for it. You also lose any platform-controlled settings on the removed account, and they aren’t reinstated if the account reconnects later.\n\nRemoving an account only disconnects it from your platform. It still functions as a normal Stripe account.",
    "title": "Manage individual accounts | Stripe Documentation",
    "description": "Use the Stripe Dashboard to manage connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/3d-secure",
    "markdown": "# Cardholder authentication using 3D Secure\n\n## Learn about 3D Secure, an additional layer of authentication used by businesses to combat fraud.\n\n## How 3D Secure works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[3D Secure (3DS)](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") uses multi-factor authentication to reduce fraud for online transactions where a card isn’t physically present. 3DS is triggered by businesses in online checkout flows, and requires multi-factor authentication (usually through SMS or email-based one-time passcode that Stripe sends) to complete.\n\n## Example of a 3D Secure flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![A Stripe checkout page with the payment information filled out, including the Pay button](https://b.stripecdn.com/docs-statics-srv/assets/3ds-flow-1-checkout-page.039294e0dee3a6dede8ea8a32185aae5.png)\n\nStep 1: The customer enters their card details.\n\n![A dialog that displays a loading animation after clicking the Pay button, which now says Processing.](https://b.stripecdn.com/docs-statics-srv/assets/3ds-flow-3-challenge-flow.9052a220f336bbdb75a51799622c6477.png)\n\nStep 2: The acquirer requests 3DS verification. If the Stripe issuing card is enrolled in 3DS, the cardholder sees a prompt to complete an additional verification step.\n\nAs shown above, the additional 3D Secure step at checkout typically involves showing the cardholder an authentication page from their Issuer, where the cardholder sees a prompt to enter a verification code sent to their phone or email.\n\n## Why 3DS is important![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn most cases, businesses are responsible for online fraud losses in card-not-present transactions. To protect themselves, businesses can trigger 3DS verification to reduce the chances of accepting a fraudulent transaction. Even if a business triggers 3DS verification, the cardholder only needs to complete the step if your Stripe cards are enrolled in 3DS. In the UK and EU, 3DS is the standard for implementing the regulatory requirements of [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) (SCA).\n\n## Liability shift![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a business triggers 3DS verification, liability for fraud shifts from the business to the issuer in most cases. This applies whether or not your Issuing cards are enrolled in 3DS, meaning issuers can take on increased liability without any additional verification.\n\n## 3DS Enrollment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **US**: 3DS enrollment in the US is optional, and your cards won’t be enrolled in 3DS unless you contact support to request enrollment. As part of our [best practices](https://docs.stripe.com/issuing/manage-fraud) for managing transaction fraud, we recommend enrolling your cards in 3DS early in your Issuing program’s life cycle. While enrollment does increase friction for a subset of your cardholder transactions, it helps to significantly reduce the risk of potential losses because of transaction fraud with online, card-not-present transactions. After you request enrollment, we enroll all active cards associated with your account and automatically enroll all cards created going forward.\n    *   Cardholders without a phone number or email on file won’t be enrolled in 3DS. After requesting enrollment, you can add contact information to [Cardholder objects](https://docs.stripe.com/api/issuing/cardholders/object), to auto-enroll those cards. Conversely, removing the contact info for a cardholder results in the card being unenrolled from 3DS.\n*   **UK and EU**: Upon creation, cards are enrolled in 3DS by default because of local regulations.\n    *   To allow the implementation of SCA over 3DS and comply with local regulations, all cards issued within the EU and UK require a valid phone number on file.\n\n## 3DS Authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a 3DS authentication request comes through for your [cardholder](https://docs.stripe.com/api#create_issuing_cardholder), Stripe sends them either a text message or an email containing a one-time verification code.\n\nThe method of authentication depends on the contact information provided for the cardholder. In the UK and EU markets supported by Stripe Issuing, cardholders must have a phone number on file to authenticate with a one-time text message verification code. In the US, the phone number or email on file will be used to authenticate cardholders, but if both the phone number and email are present, then the phone number will be used for authentication. Otherwise, the authentication request uses whichever contact information is available. To enable us to best secure you and your cardholders, we recommend keeping phone numbers and email addresses up to date for cardholders. This enables us to contact them during authentication. You can update your cardholders’ information by changing the field to its new value through the API or Dashboard.\n\nIn the UK and EU, cardholders might also see an additional security question. The cardholder sees a list of transactions on the card, and they can select the transactions they recognize. If the cardholder is using the card for the first time, they select the option indicating they don’t recognize any of the presented transactions.\n\n![A dialog showing a sample security question with choices of payment history. The header has a Your Bank placeholder logo and Card Network placeholder logo. The security question says, From the following list please identify a recent payment you have made using this card. There are 5 options with payment information of whether or not the payment was online, the purchase amount, and the merchant name. The last option says None of the above. There is a blurple button at the bottom that says Verify.](https://b.stripecdn.com/docs-statics-srv/assets/3ds-issuing-knowledge-factor-netcetera.37258cc6c8e63cadf3dbb9b22f94d786.png)\n\nThe list of transactions the cardholder is presented with.\n\n## Choose the 3D Secure language![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [preferred\\_locales](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-preferred_locales) field of the Cardholder object determines the display language of the 3DS flow. The default 3DS language is English.\n\nTo pick a 3DS language for a cardholder, use the API to set their `preferred_locales` to an array of preferred languages, in order of preference. If you want, you can provide one language only. The supported languages are English (`en`), French (`fr`), German (`de`), Italian (`it`), and Spanish (`es`).\n\n`curl https://api.stripe.com/v1/issuing/cardholders \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d type=individual \\  -d name=\"Jane D. Rocket\" \\   --data-urlencode email=\"jane@example.com\" \\  -d \"preferred_locales[]\"=fr \\  -d \"preferred_locales[]\"=en \\  -d \"billing[address][line1]\"=\"1234 Main Street\" \\  -d \"billing[address][city]\"=\"San Francisco\" \\  -d \"billing[address][state]\"=CA \\  -d \"billing[address][country]\"=US \\  -d \"billing[address][postal_code]\"=94111`\n\nIn the US, Stripe also supports authentication through a native iOS and Android application. If you want to use this functionality, [please reach out to support](https://support.stripe.com/contact).\n\nRegardless of the authentication method used, if a cardholder can’t complete three consecutive 3DS attempts in a short period of time, it disables 3DS on their cards for 60 minutes.\n\n## Exemptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCertain types of low-risk payments might be exempt from SCA. Exemptions limit friction for low-risk payments by reducing the frequency of customer authentication. By default, Stripe might claim the following exemptions for 3DS-eligible cards to limit the friction associated with transactions it deems low risk or low value:\n\n| Type | Meaning |\n| --- | --- |\n| transaction\\_risk\\_analysis (US only) | An issuer (such as Stripe) can do a real-time risk analysis to determine whether or not to claim a low-risk exemption to a transaction. |\n| low\\_value\\_transaction | Transactions below 30 GBP/EUR (or equivalent converted amount) are considered “low value” and might be exempt from SCA. If the exemption has been used five times since the cardholder’s last successful authentication or if the sum of previously exempted payments exceeds 100 GBP or EUR, then the exemption doesn’t apply, and the cardholder must be authenticated. |\n\n#### Note\n\nAcquirers can also request exemptions, and Stripe might honor them. In these scenarios, loss liability stays with the acquirer and doesn’t shift to the issuer.\n\nWhen an issuer-claimed exemption is applied, the [Authorization object](https://docs.stripe.com/api/issuing/authorizations) looks like this:\n\n`{   \"object\": \"issuing.authorization\",   ...   \"verification_data\" : {     ...     \"authentication_exemption\": {       \"type\": \"low_value_transaction\",       \"claimed_by\": \"issuer\"     },     ...   },   ... }`\n\nConversely, when an acquirer-claimed exemption is applied, the [Authorization object](https://docs.stripe.com/api/issuing/authorizations) looks like this:\n\n`{   \"object\": \"issuing.authorization\",   ...   \"verification_data\" : {     ...     \"authentication_exemption\": {       \"type\": \"low_value_transaction\",       \"claimed_by\": \"acquirer\"     },     ...   },   ... }`\n\nIf you’re based in the UK or EU and your use case only requires virtual cards, you can contact Stripe Support to discuss whether a Secure Corporate Payment (SCP) exemption is applicable to your program.\n\n## Managing fraud through 3DS ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe includes details about a 3DS attempt through the API in the authorization endpoint. Use the `three_d_secure` hash in the [verification\\_data](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-verification_data) hash to determine if an authorization was successfully authenticated. If you maintain your own authorization logic, we suggest using these values as key inputs that determine whether to approve or reject an authorization.\n\nAdditionally, if the business didn’t attempt 3DS, the `three_d_secure` field is null. If 3DS was exempted, then the `authentication_exemption` is present and the `three_d_secure` field is null. An authorization can’t contain both `three_d_secure` and `authentication_exemption`.\n\nYou can find guidelines on what the values represent and how you can use them to combat fraud in the table below.\n\n| Result | Meaning | Suggested action |\n| --- | --- | --- |\n| attempt\\_acknowledged | The business attempted to authenticate the authorization, but the card isn’t enrolled or couldn’t reach Stripe. | There is insufficient evidence to determine if the authorization is fraudulent or not. |\n| authenticated | The shopper was successfully verified as the cardholder as they entered the correct verification code sent to their phone. The online purchase was legitimate and not fraudulent. | Approve the transaction. |\n| failed | The cardholder wasn’t authenticated as the shopper which could mean the cardholder is not the actor making the purchase. | Decline the transaction. |\n| required | The authorization was declined because regulatory requirements mandated an authentication for this transaction but it wasn’t submitted correctly by the merchant, and they didn’t claim an applicable exemption. | Decline the transaction. |\n\n#### Note\n\nIf the card is enrolled in 3DS, when `verification_data.three_d_secure` isn’t present, 3D Secure wasn’t attempted by the merchant on an authorization.\n\n## How to test 3DS ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the Stripe Payments API to test 3DS.\n\n### Create a PaymentMethod with your issued card![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can [create a PaymentMethod](https://docs.stripe.com/api#create_payment_method) using your own issued card by running the following command:\n\n`curl https://api.stripe.com/v1/payment_methods \\   -u` \n\n`pk_test_TYooMQauvdEDq54NiTphI7jx`\n\n`: \\   -d type=card \\   -d \"card[number]\"=YOUR_ISSUED_CARD_NUMBER \\   -d \"card[exp_month]\"=YOUR_ISSUED_CARD_EXPIRATION_MONTH \\   -d \"card[exp_year]\"=YOUR_ISSUED_CARD_EXPIRATION_YEAR \\   -d \"card[cvc]\"=YOUR_ISSUED_CARD_CVC`\n\nReplace the following values:\n\n*   `YOUR_ISSUED_CARD_NUMBER` with the card number of your issued card\n*   `YOUR_ISSUED_CARD_CVC` with the CVC of your issued card\n*   `YOUR_ISSUED_CARD_EXPIRATION_MONTH` with the expiration month of your issued card\n*   `YOUR_ISSUED_CARD_EXPIRATION_YEAR` with the expiration year of your issued card\n\n### Create a PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can [create a PaymentIntent](https://docs.stripe.com/api#create_payment_intent) by running the following command:\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=15000 \\   -d currency=usd \\   -d \"payment_method_types[]\"=card \\   -d \"payment_method_options[card][request_three_d_secure]\"=any \\   -d \"capture_method\"=manual`\n\nThis command creates a PaymentIntent that initiates a 3D Secure authentication request. Use the `payment_method_options[card][request_three_d_secure]=any` parameter to perform 3D Secure authentication. The amount must be large enough to warrant a challenge. This example uses 150 USD.\n\nThe `\"capture_method\"=manual` parameter enables manual capture for the PaymentIntent, which means the funds are authorized but not captured yet.\n\n### Confirm the PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can [confirm the PaymentIntent](https://docs.stripe.com/api#confirm_payment_intent) by running the following command:\n\n`curl https://api.stripe.com/v1/payment_intents/pi_XXX/confirm \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d payment_method=pm_XXX \\   -d return_url=[https://www.example.com](https://www.example.com/)`\n\nReplace `pi_XXX` with your PaymentIntent ID and `pm_XXX` with your PaymentMethod ID. After confirming the PaymentIntent, the response you receive contains the `next_action` field. That field includes a URL that you can use to redirect the user to complete 3DS authentication.\n\nAfter completing the 3DS challenge and payment authorization, you can [cancel the PaymentIntent](https://docs.stripe.com/api#cancel_payment_intent) without capturing funds.\n\n`curl https://api.stripe.com/v1/payment_intents/pi_XXX/cancel \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"cancellation_reason\"=abandoned`\n\nReplace `pi_XXX` with your PaymentIntent ID.",
    "title": "Cardholder authentication using 3D Secure | Stripe Documentation",
    "description": "Learn about 3D Secure, an additional layer of authentication used by businesses to combat fraud.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/controls/fraud-challenges",
    "markdown": "# Fraud challenges | Stripe DocumentationThe Stripe Docs logo\n\n## Fraud challengesBeta\n\n## Learn about fraud challenges, an additional layer of verification for authorizations.\n\nTurn on fraud challenges to:\n\n*   Minimize accidental blocks on transactions that appear fraudulent, but are in fact legitimate\n*   Conduct additional verification on authorizations Stripe deems high risk\n*   Conduct additional verification on authorizations you determine require it\n\nFraud challenges allow your cardholders to retry non-fraudulent transactions that would otherwise be blocked by fraud controls. When fraud challenges are enabled and a transaction is declined for fraud, Stripe sends the cardholder an SMS message. They can verify whether the transaction was fraudulent by replying to the message. All cardholders with an associated phone number can use fraud challenges.\n\n## High-risk transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe blocks transactions above a certain risk level. The risk level of a transaction is determined by the network you’re using. High-risk authorizations are identified by a value of `suspected_fraud` in the [`request_history.reason`](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-request_history-reason) field, and won’t trigger [`issuing.authorization_request` webhooks](https://docs.stripe.com/issuing/controls/real-time-authorizations) when declined.\n\n## Fraud challenge flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe starts sending fraud challenges on high-risk authorizations as soon as you enable the feature in your [card issuing settings](https://dashboard.stripe.com/settings/issuing/authorizations).\n\nYou can see fraud challenge activity with the [Authorizations API](https://docs.stripe.com/api/issuing/authorizations). Declined authorizations that were fraud-challenged have a value in the [fraud\\_challenges](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-fraud_challenges) field. Subsequent authorizations that the cardholder verifies as genuine have a value of `true` in the [verified\\_by\\_fraud\\_challenge](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-verified_by_fraud_challenge) field.\n\nThe following shows an example of a fraud-challenged and declined authorization:\n\n`{   \"id\": \"iauth_1CmMk2IyNTgGDVfzFKlCm0gU\",   \"object\": \"issuing_authorization\",   \"approved\": false,   ...   \"fraud_challenges\": [{     \"channel\": \"sms\",     \"status\": \"pending\"   }] }`\n\nThis example shows a subsequent authorization that has been verified by the cardholder:\n\n`{   \"id\": \"iauth_1CmMk28Jx923VfJJwMCejmX\",   \"object\": \"issuing_authorization\",   \"approved\": true,   ...   \"verified_by_fraud_challenge\": true }`\n\n#### Note\n\nVerified, genuine authorizations trigger `issuing_authorization.request` webhooks. If you use [real-time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations), consider `verified_by_fraud_challenge` when deciding whether to approve an authorization. If your cardholder has explicitly confirmed a transaction as genuine, we recommend that you don’t apply any of your own risk controls.\n\nTo use fraud challenges, make sure that:\n\n*   The phone number associated with your cardholder is valid and correct\n*   Existing transaction decline logic in any `issuing_authorization.request` webhook handler doesn’t conflict with fraud challenges\n\n### Cardholder flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour cardholders might receive a challenge and contact your company’s customer service to learn more. Make sure your internal teams are prepared to answer questions that they might receive from your customers about these challenges.\n\nWhen a cardholder receives a fraud challenge, they can override the declined transaction by verifying that the suspicious transaction is legitimate and initiated by them. Fraud challenges are only available to cardholders with an associated [phone number](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-phone_number).\n\nThe cardholder verifies the override with a one-time SMS prompt with the following language:\n\n> Did you attempt a _\\[amount\\]_ transaction at _\\[merchant\\]_? Reply YES if you did, or NO if not. Reply STOP to opt out\n\nIf the cardholder replies “YES”, they receive the following:\n\n> Thanks, please wait a moment and try again.\n\nTo complete the purchase, the cardholder needs to initiate the transaction a second time. After retrying, they won’t receive the SMS prompt, and Stripe will not block the transaction for being high-risk. If the cardholder instead replies “NO”, they receive the following:\n\n> This transaction was declined. We recommend you cancel your card and request a new one. Review your account for other suspicious transactions.\n\nCardholders can reply “STOP” to opt out of fraud challenges, and “START” to opt back in again.\n\n## Trigger fraud challenges yourself ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo send fraud challenges on authorizations that haven’t been blocked by Stripe, use [real-time authorization webhooks](https://docs.stripe.com/issuing/controls/real-time-authorizations). To trigger challenges in scenarios where you detect spending that appears suspicious and want additional verification (for example, a cardholder using their card out of the country), decline the `issuing_authorization.request` webhook and include the `send_fraud_challenges` field with the `[\"sms\"]` value.\n\nHere’s an example of how to trigger a fraud challenge in a webhook response:\n\n`// This example sets up an endpoint using the Express framework. // Watch this video to get started: [https://youtu.be/rPR2aJ6XnAc](https://youtu.be/rPR2aJ6XnAc)  const express = require('express'); const bodyParser = require('body-parser'); const app = express();  app.use(bodyParser.urlencoded({ extended: true }));  const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  // Replace with a real secret. You can find your endpoint's secret in your webhook settings. webhookSecret = 'whsec_...'  app.post('/authorization_requests', (request, response) => {   const sig = request.headers['stripe-signature'];   const event = stripe.webhooks.constructEvent(request.body, sig, webhookSecret);    if (event.type === 'issuing_authorization.request') {     const auth = event.data.object;      response.status(200).json({       approved: false,       send_fraud_challenges: ['sms']     });   } });  app.listen(4242);`\n\nFraud challenges that you trigger yourself in webhook responses are sent even if the automatic sending of fraud challenges is disabled in your [Issuing settings](https://dashboard.stripe.com/settings/issuing/authorizations).\n\n## Fraud challenges for Connect platforms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use [Connect](https://docs.stripe.com/issuing/connect) with Stripe Issuing, turning on fraud challenges enables it for all cardholders across all connected accounts.\n\n## Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFraud challenges are only available to cardholders with phone numbers in the following countries. Attempts to send fraud challenges to other phone numbers, or to cardholders who are physically outside of these countries, won’t be delivered.\n\nFraud challenges that can’t be delivered because of an unsupported country code have a [status](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-fraud_challenges-status) of `undeliverable`.\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFraud challenge text messages are not sent to cardholders in test mode. To help you integrate with fraud challenges, Stripe provides helper APIs for simulating a fraud challenge flow, including sending and responding to a challenge.\n\nUse helper APIs to [create a test mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_create). The risk level of the authorization you create is controllable: you can create a high-risk authorization by overriding the default risk assessment with a high fraud risk level.\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2300 \\  -d card=  {{CARD_ID}}   \\  -d \"risk_assessment[fraud_risk][risk_level]\"=high \\  -d \"risk_assessment[fraud_risk][fraud_score]\"=95`\n\nThis authorization will be declined, with a `reason` of `suspected_fraud` in its [request\\_history](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-request_history). If fraud challenges are turned on, then a fraud challenge is created for this high-risk test mode authorization. See [Before you begin](#prerequisites) for the steps required to turn on fraud challenges.\n\nAlternatively, you can test fraud challenges by issuing a challenge yourself. To induce a fraud challenge in test mode, create a test mode authorization without a risk assessment override, and then respond to an `issuing_authorization.request` webhook. This method does not require fraud challenges to be turned on in your Issuing settings. Read more about how to [trigger fraud challenges yourself](#define-your-own-logic) in webhook responses.\n\n### Step 2: Simulate a response to the fraud challenge![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter inducing a test mode fraud challenge, you can simulate a cardholder’s response using another helper API. Call the [test mode fraud challenge response](https://docs.stripe.com/api/issuing/authorization/respond) method, passing the ID of the authorization you created in step 1, and a `confirmed` parameter.\n\nProvide `confirmed=true` to simulate the cardholder responding “yes, I made this transaction, and it isn’t fraudulent”. Provide `confirmed=false` to simulate a response of “no, I did not make this transaction, it is fraudulent”.\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations/`\n\n`{{AUTHORIZATION_ID}}`\n\n`/fraud_challenges/respond \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d confirmed=true`\n\n### Step 3: Try the high-risk authorization again![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you simulated a response of “yes, I made this transaction” (`confirmed=true`), then you can try the high-risk test mode authorization again. This time, the authorization shouldn’t be declined, because you have simulated a scenario where the cardholder has indicated that the original, declined transaction is actually legitimate.\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2300 \\  -d card=  {{CARD_ID}}   \\  -d \"risk_assessment[fraud_risk][risk_level]\"=high \\  -d \"risk_assessment[fraud_risk][fraud_score]\"=95`\n\nThis new authorization shouldn’t be declined for `suspected_fraud`, and instead be approved. It might also be declined for other reasons (such as an insufficient test mode balance), look at the authorization’s [request\\_history](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-request_history) to learn more.\n\nAdditionally, this new authorization’s [verified\\_by\\_fraud\\_challenge](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-verified_by_fraud_challenge) field will be `true`. This indicates that the cardholder has previously completed a fraud challenge for a similar authorization (as simulated in step 2).\n\nIf you’re triggering fraud challenges yourself in a `issuing_authorization.request` webhook handler, then pay attention to the `verified_by_fraud_challenge` field. Stripe recommends that you don’t trigger a fraud challenge on authorizations that have been verified by a previous fraud challenge.",
    "title": "Fraud challenges | Stripe Documentation",
    "description": "Learn about fraud challenges, an additional layer of verification for authorizations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/funding_instructions",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/connect/custom/hosted-onboarding",
    "markdown": "# Stripe hosted onboarding for Custom accounts\n\n## Let Stripe collect identity verification information for your Custom connected accounts.\n\n[Connect Onboarding for Custom Accounts](https://stripe.com/connect/onboarding) is a web form hosted by Stripe that takes care of collecting identity verification information from users. It dynamically adjusts the information that it collects to reflect the connected account’s capabilities, country, and business type. [Connect](https://docs.stripe.com/connect \"Connect\") Onboarding is the recommended solution to collect identity verification information for Custom accounts, and ensures that your flow is optimized for:\n\n*   Mobile browsers\n*   Accessibility\n*   Internationalization and localization\n*   Conversion rate\n*   Intelligently requesting requirements based on what’s already provided on the account\n\nHere’s what the form looks like for Stripe’s sample integration, [Rocket Deliveries](https://rocketdeliveries.io/):\n\n![Screenshot of Connect Onboarding form](https://b.stripecdn.com/docs-statics-srv/assets/hosted_onboarding_form.37ff5a6f7d39a33ebda671e33419971c.png)\n\n## How to use Connect Onboarding for Custom Accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Navigate to your [onboarding settings](https://dashboard.stripe.com/settings/connect/onboarding-interface) to customize the visual appearance of the form. You must provide the name, color, and icon of your brand. You must [collect bank account details within the form](https://dashboard.stripe.com/settings/connect/payouts/onboarding), either manually or instantly with [Stripe Financial Connections](https://docs.stripe.com/financial-connections).\n2.  Create a new account and get the account ID, or use an existing account ID (in the form of `acct_XXXXXXXX`).\n3.  If you have information about the account holder (like their name, address, or other details), you can proactively provide this through the [account create or update methods](https://docs.stripe.com/api/accounts). The more information provide through the API, the less information Connect Onboarding prompts your user for.\n4.  Call the [Account Links](https://docs.stripe.com/api/account_links) with the following parameters (see the [API ref](https://docs.stripe.com/api/account_links) for more):\n    *   `account`\n    *   `refresh_url`\n    *   `return_url`\n    *   `type`\n    *   `collection_options` (optional)\n5.  In the onboarding flow for your own platform, redirect your user to the `url` returned by [Account Links](https://docs.stripe.com/api/account_links).\n6.  Handle additional account states, redirecting your user back into the Connect Onboarding flow if necessary. To handle user-initiated updates to information they’ve already provided, create a way for your user to get a new redirect to the Connect Onboarding form from your platform’s Dashboard.\n\n[](#info-to-collect)\n\nConnect Onboarding for Custom Accounts supports upfront or incremental onboarding. Upfront onboarding collects the `eventually_due` requirements for the account, while incremental onboarding collects the `currently_due` requirements. For the advantages and disadvantages of each, see [the onboarding flows documentation](https://docs.stripe.com/connect/identity-verification#onboarding-flows).\n\nThe `currently_due` requirements request only the user information needed for verification at this specific point in time; the `eventually_due` requirements include a more complete set of questions that we’ll eventually need to collect.\n\nBased on the needs of your platform, pass either `currently_due` or `eventually_due` as the value of the `collection_options.fields` parameter in your calls to [Account Links](https://docs.stripe.com/api/account_links). Here’s an example request:\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\   --data-urlencode refresh_url=\"[https://example.com/reauth](https://example.com/reauth)\" \\   --data-urlencode return_url=\"[https://example.com/return](https://example.com/return)\" \\  -d type=account_onboarding \\  -d \"collection_options[fields]\"=eventually_due`\n\n[](#redirect)\n\nThe response to your [Account Links](https://docs.stripe.com/api/account_links) request includes a value for the key `url`. Redirect your user to this link to send them into the flow. You can only use your Account Link URLs one time because they grant access to the account holder’s personal information. Authenticate the user in your application before redirecting them to this URL. If you enable **Collect bank account information for payouts** in your [payout onboarding settings](https://dashboard.stripe.com/settings/connect/payouts/onboarding), or if the `treasury` capability is requested, the user must set up additional authentication with Stripe before entering the onboarding flow.\n\n#### Security tip\n\nDon’t email, text, or otherwise send account link URLs outside of your platform application. Instead, provide them to the authenticated account holder within your application.\n\n[](#return)\n\nConnect Onboarding requires you to pass both a `return_url` and `refresh_url` to handle all cases in which the user will be redirected back to your platform. It’s important that you implement these correctly to provide the best experience for your user.\n\n#### Note\n\nYou can use HTTP for your `return_url` and `refresh_url` while you’re in test mode (for example, to test with localhost), but for live mode only HTTPS is accepted. Be sure you’ve swapped any testing URLs for HTTPS URLs before going live.\n\n#### return\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe will issue a redirect back to this URL when the user completes the Connect Onboarding flow, or clicks Save for later at any point in the flow. It does **not** mean that all information has been collected, or that there are no outstanding requirements on the account. It only means the flow was entered and exited properly.\n\nNo state is passed with this URL. After a user is redirected to your `return_url`, check the state of the `requirements` attribute on their account. You can either listen to `account.updated` webhooks or retrieve the [Account](https://docs.stripe.com/api/accounts) object and inspect the state of its `requirements` attribute. See more details in Step 4 below.\n\n#### refresh\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour user will be redirected to the `refresh_url` in these cases:\n\n*   The link is expired (a few minutes went by since the link was created)\n*   The link was already visited (the user refreshed the page or clicked the **back**/**forward** button)\n*   The link was shared in a third-party application such as a messaging client that attempts to access the URL to preview it. Many clients automatically visit links which cause them to become expired\n\nYour `refresh_url` should trigger a method on your server to call [Account Links](https://docs.stripe.com/api/account_links) again, with the same parameters, and redirect the user back into the Connect Onboarding flow to create a seamless experience.\n\n[](#new-reqs-due)\n\nSet up your integration to listen for changes to account requirements, if you haven’t already done so. We recommend [using webhooks to do so](https://docs.stripe.com/connect/handling-api-verification#verification-process). You can test handling new requirements (and how they may disable charges and [payouts](https://docs.stripe.com/payouts \"payout\")) with our [test mode trigger cards](https://docs.stripe.com/connect/testing#trigger-cards).\n\nWhen [upcoming requirements updates](https://support.stripe.com/user/questions/onboarding-requirements-updates) affect your connected accounts, we’ll notify you.\n\nIf you use embedded or Stripe-hosted onboarding, you can proactively collect information to fulfill [future requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements). For embedded onboarding, include the `collectionOptions` attribute in the [embedded onboarding component](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding). For Stripe-hosted onboarding, specify the `collection_options` parameter when [creating account links](https://docs.stripe.com/api/account_links/create#create_account_link-collection_options).\n\nBased on the verification needs of your application, send the user back into Connect Onboarding as necessary to satisfy `currently_due` or `eventually_due` requirements as described in step 1. You can use this as a signal of _when_ to send your user back into the flow. Keep in mind that using Connect Onboarding means you don’t really need to worry about _what_ the requirements are – sending the user back into Connect Onboarding means it will collect the right information.\n\nFor example, if your user mistypes their information and they can’t be verified, they could be asked to provide an Identity Document (for example, a Driver’s License in the United States). Sending this user into Connect Onboarding prompts them to upload such a document to ensure they become verified.\n\n[](#user-updates)\n\nMost Connect Onboarding usage discussed thus far has been about prompting the user to provide new information. Connect Onboarding also supports user-initiated updates to the information they’ve already provided in the `type` parameter of the [Account Link](https://docs.stripe.com/api/account_links). `type` accepts one of two values: `account_onboarding` or `account_update`.\n\n#### account\\_onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis value for `type` provides a form for inputting outstanding requirements. Use it when you’re onboarding a new user, or when an existing user has new requirements; such as when a user had already provided enough information, but you requested a new capability that needs additional info. Send the user to the form in this mode to just collect the new information you need.\n\n#### account\\_update![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis value for `type` displays the attributes that are already populated on the account object and allows your user to edit previously provided information. Provide an access point in your platform website to a `type=account_update` Account Link for users to make updates themselves (for example, when their address changes). Consider framing the link as “edit my profile” or “update my verification information.”\n\n## Supported browsers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHosted onboarding supports the same set of browsers that the [Stripe Dashboard currently supports](https://docs.stripe.com/dashboard/basics#browser-compatibility):\n\n*   The last 20 major versions of Chrome and Firefox\n*   The last two major versions of Safari and Edge\n*   The last two major versions of mobile Safari on iOS\n\nHosted onboarding isn’t supported when embedded through webviews. It’s only supported in standalone browsers.",
    "title": "Stripe hosted onboarding for Custom accounts | Stripe Documentation",
    "description": "Let Stripe collect identity verification information for your Custom connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/funding_instructions/list",
    "markdown": "# List all funding instructions | Stripe API Reference\n\nRetrieve all applicable funding instructions for an Issuing balance.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns all funding instructions for an Issuing balance\n\nGET /v1/issuing/funding\\_instructions\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/issuing/funding_instructions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/funding_instructions\",  \"has_more\": false,  \"data\": [    {      \"object\": \"funding_instructions\",      \"bank_transfer\": {        \"country\": \"DE\",        \"financial_addresses\": [          {            \"iban\": {              \"account_holder_name\": \"Stripe Technology Europe Limited\",              \"bic\": \"SXPYDEHH\",              \"country\": \"DE\",              \"iban\": \"DE00000000000000000001\"            },            \"supported_networks\": [              \"sepa\"            ],            \"type\": \"iban\"          }        ],        \"type\": \"eu_bank_transfer\"      },      \"currency\": \"eur\",      \"funding_type\": \"bank_transfer\",      \"livemode\": false    }  ]}\n```\n\n## [Simulate a top up](https://docs.stripe.com/api/issuing/funding_instructions/fund)Test helper\n\nSimulates an external bank transfer and adds funds to an Issuing balance. This method can only be called in test mode.\n\n### Parameters\n\n*   The amount to top up\n    \n*   The currency to top up\n    \n\n### Returns\n\nReturns testmode funding instructions for an Issuing balance\n\nPOST /v1/test\\_helpers/issuing/fund\\_balance\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/fund_balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=4242 \\  -d currency=eur\n```\n\n```\n{  \"object\": \"funding_instructions\",  \"bank_transfer\": {    \"country\": \"DE\",    \"financial_addresses\": [      {        \"iban\": {          \"account_holder_name\": \"Stripe Technology Europe Limited\",          \"bic\": \"SXPYDEHH\",          \"country\": \"DE\",          \"iban\": \"DE00000000000000000001\"        },        \"supported_networks\": [          \"sepa\"        ],        \"type\": \"iban\"      }    ],    \"type\": \"eu_bank_transfer\"  },  \"currency\": \"eur\",  \"funding_type\": \"bank_transfer\",  \"livemode\": false}\n```\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all funding instructions | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/topups/create",
    "markdown": "# Create a top-up | Stripe API Reference\n\nTop up the balance of an account\n\n### Parameters\n\n*   A positive integer representing how much to transfer.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns the top-up object.\n\n```\ncurl https://api.stripe.com/v1/topups \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=2000 \\  -d currency=usd \\  -d description=\"Top-up for Jenny Rosen\" \\  -d statement_descriptor=Top-up\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```\n\n## [Update a top-up](https://docs.stripe.com/api/topups/update)\n\nUpdates the metadata of a top-up. Other top-up details are not editable by design.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe newly updated top-up object if the call succeeded. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null,  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Retrieve a top-up](https://docs.stripe.com/api/topups/retrieve)\n\nRetrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a top-up if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```\n\n## [List all top-ups](https://docs.stripe.com/api/topups/list)\n\nReturns a list of top-ups.\n\n### Parameters\n\n*   Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary containing the `data` property, which is an array of separate top-up objects. The number of top-ups in the array is limited to the number designated in `limit`. If no more top-ups are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/topups \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/topups\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",      \"object\": \"topup\",      \"amount\": 2000,      \"balance_transaction\": null,      \"created\": 123456789,      \"currency\": \"usd\",      \"description\": \"Top-up for Jenny Rosen\",      \"expected_availability_date\": 123456789,      \"failure_code\": null,      \"failure_message\": null,      \"livemode\": false,      \"source\": null,      \"statement_descriptor\": \"Top-up\",      \"status\": \"pending\",      \"transfer_group\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a top-up](https://docs.stripe.com/api/topups/cancel)\n\nCancels a top-up. Only pending top-ups can be canceled.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the canceled top-up. If the top-up is already canceled or can’t be canceled, an error is returned.\n\nPOST /v1/topups/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"canceled\",  \"transfer_group\": null}\n```",
    "title": "Create a top-up | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/cards/object",
    "markdown": "# The Card object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    cancellation\\_reasonnullable enum\n    \n    The reason why the card was canceled.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `design_rejected`<br><br>The design of this card was rejected by Stripe for violating our [partner guidelines](https://docs.stripe.com/issuing/cards/physical#design-review). |\n    | `lost`<br><br>The card was lost. |\n    | `stolen`<br><br>The card was stolen. |\n    \n\n*   Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK.\n    \n*   The expiration month of the card.\n    \n*   The expiration year of the card.\n    \n*   The last 4 digits of the card number.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `canceled`<br><br>The card will decline authorizations, and no authorization object will be recorded. This status is permanent. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n*   The type of the card.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n\n### More attributes\n\n*   #### \n    \n    cvcnullable stringExpandable\n    \n\n*   #### \n    \n    numbernullable stringExpandable\n    \n*   #### \n    \n    personalization\\_designnullable stringExpandable\n    \n*   #### \n    \n    replaced\\_bynullable stringExpandable\n    \n*   #### \n    \n    replacement\\_fornullable stringExpandable\n    \n*   #### \n    \n    replacement\\_reasonnullable enum\n    \n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Create a card](https://docs.stripe.com/api/issuing/cards/create)\n\nCreates an Issuing `Card` object.\n\n### Parameters\n\n*   The currency for the card.\n    \n*   The type of card to issue. Possible values are `physical` or `virtual`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n*   The [Cardholder](https://docs.stripe.com/api#issuing_cardholder_object) object with which the card will be associated.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n\n### More parameters\n\n*   #### \n    \n    personalization\\_designstring\n    \n\n### Returns\n\nReturns an Issuing `Card` object if creation succeeds.\n\n```\ncurl https://api.stripe.com/v1/issuing/cards \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d cardholder=ich_1MsKAB2eZvKYlo2C3eZ2BdvK \\  -d currency=usd \\  -d type=virtual\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Update a card](https://docs.stripe.com/api/issuing/cards/update)\n\nUpdates the specified Issuing `Card` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Reason why the `status` of this card is `canceled`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost`<br><br>The card was lost. |\n    | `stolen`<br><br>The card was stolen. |\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Dictates whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `canceled`<br><br>The card will decline authorizations, and no authorization object will be recorded. This status is permanent. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n\n### More parameters\n\n*   #### \n    \n    shippingobjectPreview feature\n    \n\n### Returns\n\nReturns an updated Issuing `Card` object if a valid identifier was provided.\n\nPOST /v1/issuing/cards/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/issuing/cards/retrieve)\n\nRetrieves an Issuing `Card` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Card` object if a valid identifier was provided. When requesting the ID of a card that has been deleted, a subset of the card’s information will be returned, including a `deleted` property, which will be true.\n\nGET /v1/issuing/cards/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [List all cards](https://docs.stripe.com/api/issuing/cards/list)\n\nReturns a list of Issuing `Card` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return cards belonging to the Cardholder with the provided ID.\n    \n*   Only return cards that have the given type. One of `virtual` or `physical`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate Issuing `Card` object. If no more cards are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/cards \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/cards\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",      \"object\": \"issuing.card\",      \"brand\": \"Visa\",      \"cancellation_reason\": null,      \"cardholder\": {        \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",        \"object\": \"issuing.cardholder\",        \"billing\": {          \"address\": {            \"city\": \"Anytown\",            \"country\": \"US\",            \"line1\": \"123 Main Street\",            \"line2\": null,            \"postal_code\": \"12345\",            \"state\": \"CA\"          }        },        \"company\": null,        \"created\": 1680415995,        \"email\": null,        \"individual\": null,        \"livemode\": false,        \"metadata\": {},        \"name\": \"John Doe\",        \"phone_number\": null,        \"requirements\": {          \"disabled_reason\": \"requirements.past_due\",          \"past_due\": [            \"individual.card_issuing.user_terms_acceptance.ip\",            \"individual.card_issuing.user_terms_acceptance.date\",            \"individual.first_name\",            \"individual.last_name\"          ]        },        \"spending_controls\": {          \"allowed_categories\": [],          \"blocked_categories\": [],          \"spending_limits\": [],          \"spending_limits_currency\": null        },        \"status\": \"active\",        \"type\": \"individual\"      },      \"created\": 1681163868,      \"currency\": \"usd\",      \"exp_month\": 8,      \"exp_year\": 2024,      \"last4\": \"4242\",      \"livemode\": false,      \"metadata\": {},      \"replaced_by\": null,      \"replacement_for\": null,      \"replacement_reason\": null,      \"shipping\": null,      \"spending_controls\": {        \"allowed_categories\": null,        \"blocked_categories\": null,        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"virtual\",      \"wallets\": {        \"apple_pay\": {          \"eligible\": false,          \"ineligible_reason\": \"missing_cardholder_contact\"        },        \"google_pay\": {          \"eligible\": false,          \"ineligible_reason\": \"missing_cardholder_contact\"        },        \"primary_account_identifier\": null      }    }    {...}    {...}  ],}\n```",
    "title": "The Card object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/accounts/create",
    "markdown": "# Create an account | Stripe API Reference\n\nWith [Connect](https://docs.stripe.com/connect), you can create Stripe accounts for your users. To do this, you’ll first need to [register your platform](https://dashboard.stripe.com/account/applications/settings).\n\nIf you’ve already collected information for your connected accounts, you [can prefill that information](https://docs.stripe.com/connect/best-practices#onboarding) when creating the account. Connect Onboarding won’t ask for the prefilled information during account onboarding. You can prefill any information on the account.\n\n### Parameters\n\n*   #### \n    \n    capabilitiesobjectRequired conditionally\n    \n    Each key of the dictionary represents a capability, and each capability maps to its settings (for example, whether it has been requested or not). Each capability is inactive until you have provided its specific requirements and Stripe has verified them. An account might have some of its requested capabilities be active and some be inactive.\n    \n    Required when [account.controller.stripe\\_dashboard.type](https://docs.stripe.com/api/accounts/create#create_account-controller-dashboard-type) is `none`, which includes Custom accounts.\n    \n\n*   A hash of configuration describing the account controller’s attributes.\n    \n*   #### \n    \n    countrystringdefault is your own country\n    \n    The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you’re creating an account is legally represented in Canada, you would use `CA` as the country for the account being created. Available countries include [Stripe’s global markets](https://stripe.com/global) as well as countries where [cross-border payouts](https://stripe.com/docs/connect/cross-border-payouts) are supported.\n    \n*   The email address of the account holder. This is only to make the account easier to identify to you. If [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, Stripe doesn’t email the account without your consent.\n    \n*   Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. Once you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions), this property can only be updated for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The type of Stripe account to create. May be one of `custom`, `express` or `standard`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds.\n\n```\ncurl https://api.stripe.com/v1/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d country=US \\  --data-urlencode email=\"jenny.rosen@example.com\" \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[stripe_dashboard][type]\"=express\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Update an account](https://docs.stripe.com/api/accounts/update)\n\nUpdates a [connected account](https://docs.stripe.com/connect/accounts) by setting the values of the parameters passed. Any parameters not provided are left unchanged.\n\nFor accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, you can update any information on the account.\n\nFor accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, you can update all information until you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions) to start Connect onboarding, after which some properties can no longer be updated.\n\nTo update your own account, use the [Dashboard](https://dashboard.stripe.com/settings/account). Refer to our [Connect](https://docs.stripe.com/connect/updating-accounts) documentation to learn more about updating accounts.\n\n### Parameters\n\n*   Each key of the dictionary represents a capability, and each capability maps to its settings (for example, whether it has been requested or not). Each capability is inactive until you have provided its specific requirements and Stripe has verified them. An account might have some of its requested capabilities be active and some be inactive.\n    \n    Required when [account.controller.stripe\\_dashboard.type](https://docs.stripe.com/api/accounts/create#create_account-controller-dashboard-type) is `none`, which includes Custom accounts.\n    \n\n*   The email address of the account holder. This is only to make the account easier to identify to you. If [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, Stripe doesn’t email the account without your consent.\n    \n*   Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. Once you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions), this property can only be updated for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds. If the account ID does not exist or another issue occurs, this call raises [an error](#errors). Some validations will not raise an error but will instead populate the [`requirements.errors`](#account_object-requirements-errors) array.\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1Nv0FGQ9RKHgCVdK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Retrieve account](https://docs.stripe.com/api/accounts/retrieve)\n\nRetrieves the details of an account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds. If the account ID does not exist, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1Nv0FGQ9RKHgCVdK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [List all connected accounts](https://docs.stripe.com/api/accounts/list)\n\nReturns a list of accounts connected to your platform via [Connect](https://docs.stripe.com/connect). If you’re not a platform, the list is empty.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` accounts, starting after account `starting_after`. Each entry in the array is a separate [`Account`](#account_object) object. If no more accounts are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",      \"object\": \"account\",      \"business_profile\": {        \"annual_revenue\": null,        \"estimated_worker_count\": null,        \"mcc\": null,        \"name\": null,        \"product_description\": null,        \"support_address\": null,        \"support_email\": null,        \"support_phone\": null,        \"support_url\": null,        \"url\": null      },      \"business_type\": null,      \"capabilities\": {},      \"charges_enabled\": false,      \"controller\": {        \"fees\": {          \"payer\": \"application\"        },        \"is_controller\": true,        \"losses\": {          \"payments\": \"application\"        },        \"requirement_collection\": \"stripe\",        \"stripe_dashboard\": {          \"type\": \"express\"        },        \"type\": \"application\"      },      \"country\": \"US\",      \"created\": 1695830751,      \"default_currency\": \"usd\",      \"details_submitted\": false,      \"email\": \"jenny.rosen@example.com\",      \"external_accounts\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"      },      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"login_links\": {        \"object\": \"list\",        \"total_count\": 0,        \"has_more\": false,        \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",        \"data\": []      },      \"metadata\": {},      \"payouts_enabled\": false,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"disabled_reason\": \"requirements.past_due\",        \"errors\": [],        \"eventually_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"past_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"pending_verification\": []      },      \"settings\": {        \"bacs_debit_payments\": {          \"display_name\": null,          \"service_user_number\": null        },        \"branding\": {          \"icon\": null,          \"logo\": null,          \"primary_color\": null,          \"secondary_color\": null        },        \"card_issuing\": {          \"tos_acceptance\": {            \"date\": null,            \"ip\": null          }        },        \"card_payments\": {          \"decline_on\": {            \"avs_failure\": false,            \"cvc_failure\": false          },          \"statement_descriptor_prefix\": null,          \"statement_descriptor_prefix_kanji\": null,          \"statement_descriptor_prefix_kana\": null        },        \"dashboard\": {          \"display_name\": null,          \"timezone\": \"Etc/UTC\"        },        \"invoices\": {          \"default_account_tax_ids\": null        },        \"payments\": {          \"statement_descriptor\": null,          \"statement_descriptor_kana\": null,          \"statement_descriptor_kanji\": null        },        \"payouts\": {          \"debit_negative_balances\": true,          \"schedule\": {            \"delay_days\": 2,            \"interval\": \"daily\"          },          \"statement_descriptor\": null        },        \"sepa_debit_payments\": {}      },      \"tos_acceptance\": {        \"date\": null,        \"ip\": null,        \"user_agent\": null      },      \"type\": \"none\"    }    {...}    {...}  ],}\n```\n\n## [Delete an account](https://docs.stripe.com/api/accounts/delete)\n\nWith [Connect](https://docs.stripe.com/connect), you can delete accounts you manage.\n\nTest-mode accounts can be deleted at any time.\n\nLive-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all [balances](https://docs.stripe.com/api/balance/balanace_object) are zero.\n\nIf you want to delete your own account, use the [account information tab in your account settings](https://dashboard.stripe.com/settings/account) instead.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter if the call succeeds. If the account ID does not exist, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"deleted\": true}\n```",
    "title": "Create an account | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/ach-debit/migrating-from-another-processor",
    "markdown": "# Migrating from another processor | Stripe DocumentationThe Stripe Docs logo\n\n## Migrate verified bank accounts from another payment processor with the Payment Methods API.\n\nIf you have verified bank accounts that you’ve used to process ACH Direct Debit payments on another processor, you can migrate them to Stripe to begin accepting payments.\n\nYou and Stripe both share responsibility for maintaining proof of authorization to debit, as well as verification of the bank account.\n\n[](#ach-data-migration)\n\nStripe works with you and your current payment processor to migrate data into your Stripe account. After the import completes, Stripe provides you with a CSV or JSON Mapping File to help you match the old customer IDs to the imported Stripe object IDs.\n\nTo request this option, submit an [intake form](https://support.stripe.com/contact/email?topic=migrations) and select the ACH payment type.\n\n[](#manual-bank-account-migration)\n\nIf you choose to migrate yourself, Stripe temporarily allows you to bypass bank account verification. To request this temporary capability, contact [Stripe support](https://support.stripe.com/contact) and include details about how your business:\n\n*   Collects authorization from customers\n*   Verifies customer bank accounts\n\nAfter Stripe enables this option, process each bank account and create a [SetupIntent](https://docs.stripe.com/api/setup_intents) for each account:\n\n1.  Create a new [Customer object](https://docs.stripe.com/api/customers) or retrieve an existing one to associate with this bank account.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n1.  Create and confirm a SetupIntent with your saved bank account details and the date of your customer’s original authorization to debit the account.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=us_bank_account \\  -d customer={{CUSTOMER_ID}} \\   -d confirm=true \\  -d \"payment_method_options[us_bank_account][verification_method]\"=skip \\  -d \"payment_method_data[type]\"=us_bank_account \\  -d \"payment_method_data[billing_details][name]\"={{ACCOUNT_HOLDER_NAME}} \\   -d \"payment_method_data[billing_details][routing_number]\"={{ROUTING_NUMBER}} \\   -d \"payment_method_data[billing_details][account_number]\"={{ACCOUNT_NUMBER}} \\   -d \"payment_method_data[billing_details][account_holder_type]\"=individual \\  -d \"mandate_data[customer_acceptance][type]\"=offline \\  -d \"mandate_data[customer_acceptance][accepted_at]\"=1692821946`\n\n1.  Retrieve and store the [PaymentMethod ID](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-payment_method) from the response to use for [future payments](https://docs.stripe.com/payments/ach-debit/set-up-payment#web-future-payments). You can also retrieve it by [listing](https://docs.stripe.com/api/payment_methods/list) all PaymentMethods for the customer.",
    "title": "Migrating from another processor | Stripe Documentation",
    "description": "Migrate verified bank accounts from another payment processor with the Payment Methods API.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/capabilities/object",
    "markdown": "# The Capability object | Stripe API Reference\n\n### Attributes\n\n*   The identifier for the capability.\n    \n*   The account for which the capability enables functionality.\n    \n*   Whether the capability has been requested.\n    \n*   Information about the requirements for the capability, including what information needs to be collected, and by when.\n    \n*   The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active` |\n    | `disabled` |\n    | `inactive` |\n    | `pending` |\n    | `unrequested` |\n    \n\n### More attributes\n\n*   #### \n    \n    future\\_requirementsobject\n    \n*   #### \n    \n    requested\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"card_payments\",  \"object\": \"capability\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"requested\": true,  \"requested_at\": 1688491010,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"status\": \"inactive\"}\n```\n\n## [Update an Account Capability](https://docs.stripe.com/api/capabilities/update)\n\nUpdates an existing Account Capability. Request or remove a capability by updating its `requested` parameter.\n\n### Parameters\n\n*   To request a new capability for an account, pass true. There can be a delay before the requested capability becomes active. If the capability has any activation requirements, the response includes them in the `requirements` arrays.\n    \n    If a capability isn’t permanent, you can remove it from the account by passing false. Some capabilities are permanent after they’ve been requested. Attempting to remove a permanent capability returns an error.\n    \n\n### Returns\n\nReturns an Account Capability object.\n\nPOST /v1/accounts/:id/capabilities/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities/card_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d requested=true\n```\n\n```\n{  \"id\": \"card_payments\",  \"object\": \"capability\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"requested\": true,  \"requested_at\": 1688491010,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"status\": \"inactive\"}\n```\n\n## [Retrieve an Account Capability](https://docs.stripe.com/api/capabilities/retrieve)\n\nRetrieves information about the specified Account Capability.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Account Capability object.\n\nGET /v1/accounts/:id/capabilities/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities/card_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_payments\",  \"object\": \"capability\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"requested\": true,  \"requested_at\": 1688491010,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"status\": \"inactive\"}\n```\n\n## [List all account capabilities](https://docs.stripe.com/api/capabilities/list)\n\nReturns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary with a `data` property that contains an array of the capabilities of this account. Each entry in the array is a separate capability object.\n\nGET /v1/accounts/:id/capabilities\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/capabilities\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_payments\",      \"object\": \"capability\",      \"account\": \"acct_1032D82eZvKYlo2C\",      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"requested\": true,      \"requested_at\": 1693951912,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"status\": \"inactive\"    }  ]}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Capability object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/account_links/object",
    "markdown": "# The Account Link object | Stripe API Reference\n\n### Attributes\n\n*   The timestamp at which this account link will expire.\n    \n*   The URL for the account link.\n    \n\n### More attributes\n\n```\n{  \"object\": \"account_link\",  \"created\": 1680577733,  \"expires_at\": 1680578033,  \"url\": \"https://connect.stripe.com/setup/c/acct_1Mt0CORHFI4mz9Rw/TqckGNUHg2mG\"}\n```\n\n## [Create an account link](https://docs.stripe.com/api/account_links/create)\n\nCreates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.\n\n### Parameters\n\n*   The identifier of the account to create an account link for.\n    \n*   The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_onboarding`<br><br>Provides a form for inputting outstanding requirements. Send the user to the form in this mode to just collect the new information you need. |\n    | `account_update`<br><br>Displays the fields that are already populated on the account object, and allows your user to edit previously provided information. Consider framing this as “edit my profile” or “update my verification information”. |\n    \n*   #### \n    \n    refresh\\_urlstringRequired\n    \n    The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link’s URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user.\n    \n*   The URL that the user will be redirected to upon leaving or completing the linked flow.\n    \n\n### More parameters\n\n### Returns\n\nReturns an account link object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/account_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=acct_1Mt0CORHFI4mz9Rw \\  --data-urlencode refresh_url=\"https://example.com/reauth\" \\  --data-urlencode return_url=\"https://example.com/return\" \\  -d type=account_onboarding\n```\n\n```\n{  \"object\": \"account_link\",  \"created\": 1680577733,  \"expires_at\": 1680578033,  \"url\": \"https://connect.stripe.com/setup/c/acct_1Mt0CORHFI4mz9Rw/TqckGNUHg2mG\"}\n```\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Account Link object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/ach-debit/blocked-bank-accounts",
    "markdown": "# Blocked bank accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to unblock ACH debit bank accounts and avoid future payment failures from blocked accounts.\n\nBank accounts can become blocked for reasons other than insufficient funds, and can become blocked for legitimate reasons or because of an error. You can minimize the chances of an account being blocked, and you can take actions to unblock accounts if you understand the underlying reasons.\n\n## Reasons for blocked bank accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen ACH Debits are returned for reasons other than insufficient funds (for example, an account is closed or frozen), NACHA rules require originators of an ACH Debit to review and confirm the bank account or take other action before reinitiating a debit. To comply with these Rules, Stripe blocks certain bank accounts until we can confirm that the issue causing the returns has been resolved. In addition to ensuring compliance with the NACHA rules, this process helps businesses reduce fraud and avoid repeated dispute and return fees. We don’t block bank accounts because of past insufficient funds returns.\n\n## Minimizing blocked customer bank accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can minimize the risk of dealing with blocked customer bank accounts by taking a few preventative steps. To minimize this risk, we recommend that you:\n\n*   **Verify accounts using Financial Connections Instant Verification**—This helps confirm accurate account details and verify account ownership.\n*   **Prevent accidental disputes**—Use clear [statement descriptors](https://support.stripe.com/questions/update-business-name-shown-on-customer-bank-statements) for your business name that customers can easily recognize on their bank statements, which minimizes the chance that a confused customer unintentionally disputes your payments.\n*   **Reduce bank auto-blocks**—Some banks and business accounts automatically reject ACH Debits attempts from unknown entities. To prevent this, have your customer provide [Stripe Company IDs](https://support.stripe.com/questions/ach-direct-debit-company-ids-for-stripe) to their bank to enable debits initiated by Stripe.\n\n## Identifying blocked accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn the Dashboard, ACH Debits that failed because blocked accounts are labeled `blocked` with an error message. When attempting to confirm a Payment Intent or Setup Intent, these blocked requests return an `HTTP 402` status and contain the `bank_account_unusable` error code. [Payment Intents](https://docs.stripe.com/api/payment_intents) also generate a failed charge, while [Setup Intents](https://docs.stripe.com/api/setup_intents) create a failed Setup Attempt instead.\n\n### Payment method status details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter creating a US bank account payment method, the [us\\_bank\\_account.status\\_details.blocked](https://docs.stripe.com/api/payment_methods/object#payment_method_object-us_bank_account-status_details-blocked) field renders if the account is blocked. You must make requests using a secret key for the field to appear.\n\nYou can access the [network\\_code](https://docs.stripe.com/api/payment_methods/object#payment_method_object-us_bank_account-status_details-blocked-network_code) and [reason properties](https://docs.stripe.com/api/payment_methods/object#payment_method_object-us_bank_account-status_details-blocked-reason) inside the PaymentMethod object to understand the details behind each block. The `network_code` contains the raw ACH return code associated with a previous failed payment or dispute made with this account, while the `reason` is a summary category that corresponds with the code’s semantic meaning.\n\nFor more information on removing blocks, consult the section on [handling blocked bank accounts](https://docs.stripe.com/payments/ach-debit/blocked-bank-accounts#block-category-table) below for each `reason` value. When Stripe removes the block, the `us_bank_account.status_details.blocked` field stops rendering on all previously affected payment methods.\n\n### Listening to status changes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe sends the [payment\\_method.automatically\\_updated](https://docs.stripe.com/api/events/types#event_types-payment_method.automatically_updated) event for all saved payment methods when a blockable ACH return is received. This also includes any verified customer bank accounts that were created using the Stripe [legacy ACH integration](https://docs.stripe.com/payments/ach-debit/migrating-from-charges).\n\nConsuming these events can provide advance notice if your business model relies on recurring payments that need to be processed before a certain date. Inspect the event data for the `us_bank_account.status_details.blocked` field, then work with your customer to unblock or switch bank accounts before initiating future payments.\n\nYou receive equivalent events when the block is removed, indicating that payment methods can be reused immediately, if an active mandate exists or you recollect one.\n\n## Handling blocked bank accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a customer’s account becomes blocked, the action you take depends on the reason the account was blocked. You can identify the `reason` code on the blocked payment method.\n\n| Block category | Reason | Recommended action |\n| --- | --- | --- |\n| Bank-initiated failures | *   `bank_account_closed`<br>*   `bank_account_frozen`<br>*   `bank_account_invalid_details`<br>*   `bank_account_restricted` | Contact the customer to make sure their bank account is still valid, and that other information associated with the account is current and correct. If the customer’s bank account is no longer valid or active, ask them to update their payment method for future debits.<br><br>If, after contacting the customer, you believe the bank account was blocked in error, please contact [Stripe Support](https://support.stripe.com/contact). We’ll request additional information (proof that the account is open and debitable) to verify that the issue that caused the account to be blocked has been resolved. After we confirm this information, we can unblock the account for future use. |\n| Customer-initiated disputes | *   `debit_not_authorized` | When a customer disputes a payment as unauthorized, contact them before attempting any additional debits. After their first dispute, Stripe revokes the associated mandate and requires them to accept a new mandate authorization before additional debits can be attempted. If they dispute a second payment, the bank account is blocked.<br><br>Some bank accounts have anti-fraud tools that automatically reject debit attempts from unknown entities. You can typically identify these blocks with an R29 `network_code`. If you see an R29, contact your customer and confirm that they’ve asked their bank to allow ACH Debits from the [Stripe Company IDs](https://support.stripe.com/questions/ach-direct-debit-company-ids-for-stripe) before attempting additional debits.<br><br>If, after contacting the customer, you believe they unintentionally disputed these payments, contact [Stripe Support](https://support.stripe.com/contact). We’ll request additional information to verify that the accountholder authorized the payment and that the issue causing prior disputes has been resolved. After we confirm this information, we can unblock the account for future use. |\n| Other | *   `bank_account_unusable` | This can occur for bank accounts that are blocked due to activity with other Stripe users. For these accounts, contact [Stripe Support](https://support.stripe.com/contact) to inquire about possible resolution steps. |",
    "title": "Blocked bank accounts | Stripe Documentation",
    "description": "Learn how to unblock ACH debit bank accounts and avoid future payment failures from blocked accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/authorizations/object",
    "markdown": "# The Authorization object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different.\n    \n*   Whether the authorization has been approved.\n    \n*   Card associated with this authorization.\n    \n*   #### \n    \n    cardholdernullable stringExpandable\n    \n    The cardholder to whom this authorization belongs.\n    \n*   The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The current status of the authorization in its lifecycle.\n    \n    Possible enum values\n    \n    `closed`\n    \n    The authorization was declined or [captured](https://docs.stripe.com/issuing/purchases/transactions) through one or more [transactions](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-transactions).\n    \n    `pending`\n    \n    The authorization was created and is awaiting approval or was approved and is awaiting [capture](https://docs.stripe.com/issuing/purchases/transactions).\n    \n    `reversed`\n    \n    The authorization was reversed by the merchant or expired without capture.\n    \n\n### More attributes\n\n*   #### \n    \n    amount\\_detailsnullable object\n    \n\n*   #### \n    \n    balance\\_transactionsarray of objects\n    \n\n*   #### \n    \n    network\\_datanullable object\n    \n*   #### \n    \n    pending\\_requestnullable object\n    \n*   #### \n    \n    request\\_historyarray of objects\n    \n*   #### \n    \n    tokennullable stringPreview featureExpandable\n    \n*   #### \n    \n    transactionsarray of objects\n    \n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Update an authorization](https://docs.stripe.com/api/issuing/authorizations/update)\n\nUpdates the specified Issuing `Authorization` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated Issuing `Authorization` object if a valid identifier was provided.\n\nPOST /v1/issuing/authorizations/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Retrieve an authorization](https://docs.stripe.com/api/issuing/authorizations/retrieve)\n\nRetrieves an Issuing `Authorization` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Authorization` object if a valid identifier was provided.\n\nGET /v1/issuing/authorizations/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [List all authorizations](https://docs.stripe.com/api/issuing/authorizations/list)\n\nReturns a list of Issuing `Authorization` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return authorizations that belong to the given card.\n    \n*   Only return authorizations that belong to the given cardholder.\n    \n*   Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` authorizations, starting after authorization `starting_after`. Each entry in the array is a separate Issuing `Authorization` object. If no more authorizations are available, the resulting array will be empty.\n\nGET /v1/issuing/authorizations\n\n```\ncurl -G https://api.stripe.com/v1/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/authorizations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",      \"object\": \"issuing.authorization\",      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"authorization_method\": \"online\",      \"balance_transactions\": [],      \"card\": {        \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",        \"object\": \"issuing.card\",        \"brand\": \"Visa\",        \"cancellation_reason\": null,        \"cardholder\": {          \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",          \"object\": \"issuing.cardholder\",          \"billing\": {            \"address\": {              \"city\": \"San Francisco\",              \"country\": \"US\",              \"line1\": \"123 Main Street\",              \"line2\": null,              \"postal_code\": \"94111\",              \"state\": \"CA\"            }          },          \"company\": null,          \"created\": 1626425119,          \"email\": \"jenny.rosen@example.com\",          \"individual\": null,          \"livemode\": false,          \"metadata\": {},          \"name\": \"Jenny Rosen\",          \"phone_number\": \"+18008675309\",          \"redaction\": null,          \"requirements\": {            \"disabled_reason\": null,            \"past_due\": []          },          \"spending_controls\": {            \"allowed_categories\": [],            \"blocked_categories\": [],            \"spending_limits\": [],            \"spending_limits_currency\": null          },          \"status\": \"active\",          \"type\": \"individual\"        },        \"created\": 1626425206,        \"currency\": \"usd\",        \"exp_month\": 6,        \"exp_year\": 2024,        \"last4\": \"8693\",        \"livemode\": false,        \"metadata\": {},        \"redaction\": null,        \"replaced_by\": null,        \"replacement_for\": null,        \"replacement_reason\": null,        \"shipping\": null,        \"spending_controls\": {          \"allowed_categories\": null,          \"blocked_categories\": null,          \"spending_limits\": [            {              \"amount\": 50000,              \"categories\": [],              \"interval\": \"daily\"            }          ],          \"spending_limits_currency\": \"usd\"        },        \"status\": \"active\",        \"type\": \"virtual\",        \"wallets\": {          \"apple_pay\": {            \"eligible\": true,            \"ineligible_reason\": null          },          \"google_pay\": {            \"eligible\": true,            \"ineligible_reason\": null          },          \"primary_account_identifier\": null        }      },      \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"created\": 1630657706,      \"currency\": \"usd\",      \"livemode\": false,      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"merchant_data\": {        \"category\": \"computer_software_stores\",        \"category_code\": \"5734\",        \"city\": \"SAN FRANCISCO\",        \"country\": \"US\",        \"name\": \"STRIPE\",        \"network_id\": \"1234567890\",        \"postal_code\": \"94103\",        \"state\": \"CA\"      },      \"metadata\": {        \"order_id\": \"6735\"      },      \"network_data\": null,      \"pending_request\": null,      \"redaction\": null,      \"request_history\": [        {          \"amount\": 382,          \"amount_details\": {            \"atm_fee\": null          },          \"approved\": false,          \"created\": 1630657706,          \"currency\": \"usd\",          \"merchant_amount\": 382,          \"merchant_currency\": \"usd\",          \"reason\": \"verification_failed\",          \"reason_message\": null        }      ],      \"status\": \"closed\",      \"transactions\": [],      \"verification_data\": {        \"address_line1_check\": \"not_provided\",        \"address_postal_code_check\": \"not_provided\",        \"cvc_check\": \"mismatch\",        \"expiry_check\": \"match\"      },      \"wallet\": null    }    {...}    {...}  ],}\n```\n\n## [Approve an authorization](https://docs.stripe.com/api/issuing/authorizations/approve)\n\n\\[Deprecated\\] Approves a pending Issuing `Authorization` object. This request should be made within the timeout window of the [real-time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations) flow. This method is deprecated. Instead, [respond directly to the webhook request to approve an authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling).\n\n### Parameters\n\n*   If the authorization’s `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://docs.stripe.com/api/issuing/authorizations/decline) to decline an authorization request).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an approved Issuing `Authorization` object.\n\nPOST /v1/issuing/authorizations/:id/approve\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/authorizations/iauth_1MvSKeLkdIwHu7ixKr8rO1HV/approve \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1MvSKeLkdIwHu7ixKr8rO1HV\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1MvSKeLkdIwHu7ixFANTvxgn\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Anytown\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"12345\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1680415995,      \"email\": null,      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"John Doe\",      \"phone_number\": null,      \"requirements\": {        \"disabled_reason\": \"requirements.past_due\",        \"past_due\": [          \"individual.card_issuing.user_terms_acceptance.ip\",          \"individual.card_issuing.user_terms_acceptance.date\",          \"individual.first_name\",          \"individual.last_name\"        ]      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1681162380,    \"currency\": \"usd\",    \"exp_month\": 8,    \"exp_year\": 2024,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {},    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_cardholder_contact\"      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_cardholder_contact\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": null,  \"created\": 1681162380,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\"  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": {    \"amount\": 700,    \"amount_details\": {      \"atm_fee\": null    },    \"currency\": \"usd\",    \"is_amount_controllable\": false,    \"merchant_amount\": 700,    \"merchant_currency\": \"usd\"  },  \"request_history\": [],  \"status\": \"pending\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```",
    "title": "The Authorization object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/ach-debit/sec-codes",
    "markdown": "# Overview of ACH SEC codes\n\n## Learn about different types of customer authorizations for ACH Direct Debit.\n\nA Standard Entry Class (SEC) code is a three letter code that describes how a customer or business authorized an ACH transaction. SEC codes are defined and maintained by [Nacha](https://www.nacha.org/newrules), the governing body for the ACH network.\n\nBusinesses must make sure that the correct code is used when initiating debit transactions to make sure they comply with ACH Direct Debit rules and appropriate authorization evidence in the event of a dispute. The business is responsible under the ACH Direct Debit rules for indicating the appropriate SEC code for each ACH transaction.\n\nStripe currently supports four types of SEC codes for ACH Debits. If you don’t specify a mandate collection method, Stripe defaults to using WEB for consumer bank accounts and CCD for business bank accounts.\n\nThe mandate requirements under ACH Direct Debit rules and applicable law vary based on the type of mandate collected. The information on this page relating to your compliance with ACH mandate requirements is for your general guidance, and isn’t legal advice. If you’re unsure of the applicable mandate requirements, consult with a professional about your obligations.\n\n## WEB (Internet Initiated/Mobile Entry) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis code is used to initiate entries to a consumer’s account when the internet or a mobile device is used to initiate the transaction. WEB is the default unless you indicate otherwise. Refunds processed for WEB transactions use the PPD SEC code.\n\n## CCD (Corporate Credit or Debit Entry) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis code is used to facilitate business-to-business payments and is applied to charges to all PaymentMethods that have `account_holder_type=company`, regardless of the authorization type.\n\n## PPD (Prearranged Payment and Deposit) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis code is used to initiate entries to a consumer’s account, based on standing or single-entry authorization from that customer in writing. Your customer’s authorization must be in writing and signed or otherwise authenticated (that is, confirm the customer’s identity and agreement such as using a phone for a previously provided written authorization). Authorizations need to include information required for [online mandates](https://docs.stripe.com/payments/ach-debit#mandates-for-online-custom-payment-forms) and you must provide a copy of the authorization to your customer.\n\nTo initiate a PPD debit, you must create a mandate with offline customer acceptance. You can do so by confirming a PaymentIntent or a SetupIntent with offline customer acceptance and providing a `collection_method=paper` mandate option as shown below:\n\n`curl https://api.stripe.com/v1/payment_intents/`\n\n`{{PAYMENT_INTENT_ID}}`\n\n`/confirm \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"mandate_data[customer_acceptance][type]\"=offline \\  -d \"mandate_data[customer_acceptance][accepted_at]\"=1647448692 \\  -d \"payment_method_options[us_bank_account][mandate_options][collection_method]\"=paper`\n\n## TEL (Telephone-Initiated Entry) Beta ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis code is used to initiate debit transactions to a consumer’s account when authorization is given over the telephone. TEL debits are currently in private beta. Contact Stripe Support if you initiate bank debits to consumer accounts over the telephone.\n\n### Requirements for Telephone-initiated payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your business accepts ACH payments over the telephone, Stripe supports single TEL ACH debit transactions. Don’t use a TEL entry where a standing authorization is in place or to support a recurring transaction. TEL entries have their own Nacha requirements that you need to meet prior to accepting and processing these payments.\n\n#### Existing relationship![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can only use a TEL entry if:\n\n*   You and the customer have an existing relationship, which means that:\n    *   You and the customer have a written agreement in place for the provision of goods or services; or\n    *   Your customer has purchased goods or services from you within the past 2 years; or\n*   You don’t have an existing relationship with the customer, but the customer initiated the telephone call to you.\n\nYour customer’s pre-existing relationship with one of your affiliates is not sufficient to be an existing relationship between you and your customer.\n\n#### Verifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must establish and implement commercially reasonable procedures to verify the identity of the customer (for example, name, address, and telephone number). Additionally, you must establish and implement commercially reasonable procedures to verify that the routing numbers provided by your customers are valid.\n\nYour customer’s explicit oral authorization is needed prior to you initiating a debit entry to their account. Authorizations need to include information required for [online mandates](https://docs.stripe.com/payments/ach-debit#mandates-for-online-custom-payment-forms), along with a telephone number available to your customer for inquiries.\n\nIn addition, you must capture authorization by either an audio recording of the customer’s oral authorization (in accordance with applicable state law regarding the recording of calls) or providing written notice to the customer of their authorization _before_ the first debit of their bank account.\n\nSample script\n\nTo confirm your payment, I understand that you, {{customer’s name}} authorize {{business name}} to debit you on {{debit date}} for the amount of {{amount}} for {{service provided}}. The account information you’ve provided me is as follows: Bank Name: {{bank name}}. Bank ABA Routing Number: {{routing number}}. Bank Account Type: {{checking/savings}}. Bank Account Number: {{account number}}. Is this information correct?\n\nAs of today’s date, {{date}}, this debit authorization is valid and will remain in effect until you, {{customer name}}, notify {{business name}} of its cancellation by calling {{customer support phone number}}\n\nFor single TEL entries, if you provide a written notice instead of audio recording the authorization, you should indicate how you will provide that notice (for example, emails and mailed letters).",
    "title": "Overview of ACH SEC codes | Stripe Documentation",
    "description": "Learn about different types of customer authorizations for ACH Direct Debit.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/setup_intents/collect_bank_account_for_setup",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/expand/use-cases",
    "markdown": "# Use cases for expanding responses\n\n## Learn how the expand attribute helps you perform common tasks.\n\n## See the Stripe fee for a given payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSometimes, you might want to check the processing fees for a payment. You can only see these Stripe fees after the payment goes through and the balance transaction is created. This [balance transaction](https://docs.stripe.com/api/balance_transactions/object#balance_transaction_object-fee_details) is created automatically in the background, and the `charge.updated` event will show the fees.\n\nInstead of looking up the balance transaction separately, you can retrieve it in a single call using `expand`. For example:\n\n`curl https://api.stripe.com/v1/payment_intents/pi_1Gpl8kLHughnNhxyIb1RvRTu \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"expand[]\"=\"latest_charge.balance_transaction\" \\   -G`\n\nUsers on API version [2022-08-01](https://docs.stripe.com/upgrades#2022-08-01) or older:\n\n`curl https://api.stripe.com/v1/payment_intents/pi_1Gpl8kLHughnNhxyIb1RvRTu \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"expand[]\"=\"charges.data.balance_transaction\" \\   -G`\n\n#### Note\n\nA payment intent must be [captured](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method#capture-funds) and have a [status](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-status) of `succeeded` for the Stripe fees to be available.\n\n## See the charges included in a payout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEvery automatic [payout](https://docs.stripe.com/payouts \"payout\") is tied to historical changes to the balance of your Stripe account. The API records these historical changes as [balance transactions](https://docs.stripe.com/api/balance_transactions/object), which you can retrieve using [List Balance Transactions](https://docs.stripe.com/api/balance_transactions/list). From a list of balance transactions, you can expand the [source](https://docs.stripe.com/api/balance_transactions/object#balance_transaction_object-source) property to gather information on what triggered the change to the account balance (Charge, Refund, Transfer, and so on). For example:\n\n`curl https://api.stripe.com/v1/balance_transactions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d payout=po_1Gl3ZLLHughnNhxyDrOia0vI \\   -d type=charge \\   -d \"expand[]\"=\"data.source\" \\   -G`\n\n#### Note\n\nYou can only retrieve balance transaction history on _automatic_ payouts. If you have manual payouts enabled, you must track transaction history on your own.\n\nIf you’re using [Connect](https://docs.stripe.com/connect \"Connect\") with destination charges, you can retrieve the same information on behalf of your connected accounts. One difference is that destination charges involve both a transfer and a linked payment (in the form of a Charge object) to move funds to a connected account. So when listing the balance transactions bundled in your connected account’s payouts, each balance transaction’s source is linked to the transfer’s payment rather than the originating Charge. To retrieve the originating Charge, you need to expand a payment’s linked transfer through the [source\\_transfer](https://docs.stripe.com/api/charges/object#charge_object-source_transfer) property; and from there, expand the transfer’s [source\\_transaction](https://docs.stripe.com/api/transfers/object#transfer_object-source_transaction) property:\n\n`curl https://api.stripe.com/v1/balance_transactions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d payout=po_1G7bnaD2wdkPsFGzdVOqU44u \\   -d type=payment \\   -d \"expand[]\"=\"data.source.source_transfer.source_transaction\" \\   -H \"Stripe-Account: acct_1G7PaoD2wdkPsFGz\" \\   -G`",
    "title": "Use cases for expanding responses | Stripe Documentation",
    "description": "Learn how the expand attribute helps you perform common tasks.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/setup_intents/confirm_us_bank_account_setup",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/payment_intents/verify_microdeposits_for_payment",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/tokens/create_token?type=bank_account",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/connect/dashboard/viewing-all-accounts",
    "markdown": "# View all accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to view all of your connected accounts, and filter them by verification status, balance, volume, and other attributes.\n\nThe [accounts overview](https://dashboard.stripe.com/connect/accounts/overview) page provides multiple ways to view your connected accounts. By default, the **All accounts** tab is selected. However, the other tabs organize accounts according to their status. Each tab includes the number of accounts with that status. When you select a tab, the results in your accounts list update automatically. You can then narrow these results further by using the filter feature on each tab.\n\n## Status tabs and workflows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSelecting different status tabs on the account overview page automatically updates the filters and columns displayed. The interactive table below provides an overview and description of the columns associated with each tab. You can sort many of the columns listed below can also by clicking on the column heading in the Dashboard.\n\nThis tab is displayed by default, and is commonly used to see a high-level view of all your connected accounts.\n\n| Column | Description |\n| --- | --- |\n| Accounts | The name of the account. |\n| Status | The [account status](https://docs.stripe.com/connect/dashboard#status-badges). |\n| Balance | The total of pending and available balances, converted to your platform’s default currency. |\n| Volume | The total gross volume on the account, converted to your platform’s default currency. This is only displayed for connected accounts that don’t have access to the full Stripe Dashboard (including Custom and Express accounts) and connected accounts with [platform controls](https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts). |\n| Type | Account type (Standard, Express, Custom, or [None](https://docs.stripe.com/connect/migrate-to-controller-properties)). |\n| Country (icon) | An icon representing the account’s country. |\n| Connected | The date the account connected to your platform. |\n\n## Filters ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach tab provides a list of accounts based on a shared status, but you can use filters to narrow the results further. When you apply a new filter, the account list updates automatically.\n\n![screenshot of sample filter](https://b.stripecdn.com/docs-statics-srv/assets/filters.09676e78aad7739ba40cc52c335c523e.png)\n\nFilter accounts by country",
    "title": "View all accounts | Stripe Documentation",
    "description": "Learn how to view all of your connected accounts, and filter them by verification status, balance, volume, and other attributes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/treasury/transaction_entries/object",
    "markdown": "# The TransactionEntry object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The current impact of the TransactionEntry on the FinancialAccount’s balance.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   When the TransactionEntry will impact the FinancialAccount’s balance.\n    \n*   The FinancialAccount associated with this object.\n    \n*   Token of the flow associated with the TransactionEntry.\n    \n*   #### \n    \n    flow\\_detailsnullable objectExpandable\n    \n    Details of the flow associated with the TransactionEntry.\n    \n*   Type of the flow associated with the TransactionEntry.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `credit_reversal`<br><br>The Transaction is associated with a CreditReversal. |\n    | `debit_reversal`<br><br>The Transaction is associated with a DebitReversal. |\n    | `inbound_transfer`<br><br>The Transaction is associated with an InboundTransfer. |\n    | `issuing_authorization`<br><br>The Transaction is associated with an Issuing authorization. |\n    | `other`<br><br>The Transaction is associated with some other money movement not listed above. |\n    | `outbound_payment`<br><br>The Transaction is associated with an OutboundPayment. |\n    | `outbound_transfer`<br><br>The Transaction is associated with an OutboundTransfer. |\n    | `received_credit`<br><br>The Transaction is associated with a ReceivedCredit. |\n    | `received_debit`<br><br>The Transaction is associated with a ReceivedDebit. |\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    transactionstringExpandable\n    \n    The Transaction associated with this object.\n    \n*   The specific money movement that generated the TransactionEntry.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `credit_reversal`<br><br>The TransactionEntry was generated by a CreditReversal. |\n    | `credit_reversal_posting`<br><br>The TransactionEntry was generated by a posted CreditReversal. |\n    | `debit_reversal`<br><br>The TransactionEntry was generated by a DebitReversal. |\n    | `inbound_transfer`<br><br>The TransactionEntry was generated by an InboundTransfer. |\n    | `inbound_transfer_return`<br><br>The TransactionEntry was generated by an InboundTransferReturn. |\n    | `issuing_authorization_hold`<br><br>The TransactionEntry was generated by an Issuing authorization hold. |\n    | `issuing_authorization_release`<br><br>The TransactionEntry was generated by an Issuing authorization release. |\n    | `other`<br><br>The TransactionEntry was generated by some other money movement. |\n    | `outbound_payment`<br><br>The TransactionEntry was generated by an OutboundPayment. |\n    | `outbound_payment_cancellation`<br><br>The TransactionEntry was generated by a cancelled OutboundPayment. |\n    | Show 10 more |\n    \n\nThe TransactionEntry object\n\n```\n{  \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",  \"object\": \"treasury.transaction_entry\",  \"balance_impact\": {    \"cash\": 0,    \"inbound_pending\": 0,    \"outbound_pending\": -1000  },  \"created\": 1680756271,  \"currency\": \"usd\",  \"effective_at\": 1680756271,  \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",  \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",  \"type\": \"outbound_transfer\"}\n```\n\n## [Retrieve a TransactionEntry](https://docs.stripe.com/api/treasury/transaction_entries/retrieve)\n\nRetrieves a TransactionEntry object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a TransactionEntry object.\n\nGET /v1/treasury/transaction\\_entries/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/transaction_entries/trxne_1MtkgV2eZvKYlo2CmofEnIwJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",  \"object\": \"treasury.transaction_entry\",  \"balance_impact\": {    \"cash\": 0,    \"inbound_pending\": 0,    \"outbound_pending\": -1000  },  \"created\": 1680756271,  \"currency\": \"usd\",  \"effective_at\": 1680756271,  \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",  \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",  \"type\": \"outbound_transfer\"}\n```\n\n## [List all TransactionEntries](https://docs.stripe.com/api/treasury/transaction_entries/list)\n\nRetrieves a list of TransactionEntry objects.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return TransactionEntries that were created during the given date interval.\n    \n*   The results are in reverse chronological order by `created` or `effective_at`. The default is `created`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `created`<br><br>Timestamp describing when the TransactionEntry was created. |\n    | `effective_at`<br><br>Timestamp describing when the TransactionEntry was effective. |\n    \n*   Only return TransactionEntries associated with this Transaction.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` TransactionEntries, starting after TransactionEntry `starting_after`. Each entry in the array is a separate TransactionEntry object. If no more TransactionEntries are available, the resulting array is empty.\n\nGET /v1/treasury/transaction\\_entries\n\n```\ncurl -G https://api.stripe.com/v1/treasury/transaction_entries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkgV2eZvKYlo2CdxyvnHeQ \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/transaction_entries\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",      \"object\": \"treasury.transaction_entry\",      \"balance_impact\": {        \"cash\": 0,        \"inbound_pending\": 0,        \"outbound_pending\": -1000      },      \"created\": 1680756271,      \"currency\": \"usd\",      \"effective_at\": 1680756271,      \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",      \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",      \"flow_type\": \"outbound_transfer\",      \"livemode\": false,      \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",      \"type\": \"outbound_transfer\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The TransactionEntry object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/checklist/website",
    "markdown": "# Website checklist | Stripe DocumentationThe Stripe Docs logo\n\n## Make sure your website aligns with card network standards and e-commerce best practices.\n\nThis page contains a list of the common elements—such as accurate product descriptions, clear policies, and proper security features—that each business on Stripe should address on its website. Adhering to these recommendations reduces the risk of customer confusion and disputes. It also helps you meet Stripe’s standards and the standards set by the credit card networks.\n\nOur [Stripe Shop Terms of Use](https://stripe.com/stripe-shop/legal) are available under the [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/). To ensure compliance with card network rules, feel free to use the Stripe Shop Terms as a starting point as you build your site.\n\n*   A description of what you are selling\n    \n    Besides only listing the name of the product or service, you can help customers with their purchasing decision by providing detailed text descriptions of what you’re selling. For physical goods, include multiple pictures and information about material, colors, and other details. This is also an important measure to protect against potential disputes: setting the right expectations up front gives your customers a clear idea of what they get for their money.\n    \n    If we review your website and find that it isn’t clear what you’re selling, we may contact you with recommendations for improving the description.\n    \n*   To support international purchasers, clearly display the currency associated with the prices on your site. Listing only the currency symbol may not be enough, so be as explicit as possible when showing prices.\n    \n*   Customer service contact information\n    \n    Make sure your customers can find multiple contact methods on your site, including direct communication channels, such as email addresses, phone numbers, and live chat (something besides contact forms). Low-friction communication is key to providing a good customer experience and heading off misunderstandings early on, helping to avoid disputes.\n    \n    ​​If we review your website and can’t find a clear way to contact you, we may ask that you add some contact options to the site.\n    \n*   Your fulfillment policies\n    \n    Your customers should be able to determine how you fulfill orders. Some examples of policies that may be relevant for your business include:\n    \n    *   Refund policy — Describe under what conditions customers can receive a refund.\n    *   Delivery policy — Describe how and where goods are shipped, and on what timeline.\n    *   Return policy – Describe under what conditions customers can return purchased goods.\n    *   Cancellation policy — Describe under what conditions customers can cancel subscriptions or reservations.\n    \n    Being clear and fair in these policies goes a long way toward building customer trust, and it can also provide you with protection against disputes. If we review your website and can’t find information on your fulfillment policies, we may request that you add some additional content about order fulfillment.\n    \n*   Legal or export restrictions applicable to your business\n    \n    Certain products and services are subject to restrictions. Properly disclosing any applicable restrictions and how they may impact your customers helps build trust with them.\n    \n*   Your website's privacy policy\n    \n    Consumer data privacy is now a priority for legislation and governments around the world. Clearly explaining your website’s privacy policy helps you both comply with privacy laws and helps your customers understand how their data is protected, used, or disclosed.\n    \n*   If you have a physical address, listing it on your website adds credibility for your business.\n    \n*   The terms of any promotions you are offering\n    \n    Clearly disclose the conditions of any promotion, discount, or trial that you offer to customers. Display a link or disclaimer text so that it’s visible when customers agree to participate. Transparency around these conditions can help avoid confusion and disputes.\n    \n*   The security of your website and customer payment information\n    \n    Make sure that your customers know that you comply with the PCI standards. You can learn more about what [PCI compliance](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\") means for Stripe by reading about [integration security](https://docs.stripe.com/security). Ensure that your website (especially your payment form) uses HTTPS and other security best practices and is not susceptible to [card testing](https://docs.stripe.com/disputes/prevention/card-testing). You must also explain that your customer’s payment information is handled safely when doing business with you.\n    \n*   The logos of the credit cards you accept\n    \n    You can reduce friction in the checkout process by displaying the brand logos of the credit cards that you accept, making it clear to customers that you accept their preferred card.\n    \n\n## Card network policies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThese guidelines are based on the rules published by the card networks. As an online merchant, it’s your responsibility to ensure that you’re compliant with these rules, including the [Visa Rules and Regulations](https://usa.visa.com/dam/VCOM/download/about-visa/visa-rules-public.pdf), the [Mastercard Rules](https://www.mastercard.us/en-us/business/overview/support/rules.html), the [American Express Merchant Operating Guide](http://www.americanexpress.com/merchantopguide), and the Discover Network Rules (please [contact Discover](https://www.discover.com/contact-us/) for a copy).",
    "title": "Website checklist | Stripe Documentation",
    "description": "Make sure your website aligns with card network standards and e-commerce best practices.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/dashboard/review-actionable-accounts",
    "markdown": "# Review actionable accounts | Stripe DocumentationThe Stripe Docs logo\n\nThe [Accounts to review tab](https://dashboard.stripe.com/connect/accounts_to_review) in your Connect Dashboard helps you monitor the risk and onboarding status of all of your connected accounts. From there, you can:\n\n*   **Proactively monitor your accounts**: Monitor the status of your accounts with any open risk, onboarding, or verification requirements. View any risk or onboarding restrictions that impact your accounts or that will impact them in the future.\n*   **Identify the exact requirements needed**: Understand an account status quickly, without needing to look through webhook logs. View clear instructions on how to resolve open requirements and take action.\n*   **Export a list of accounts**: Download a CSV list of accounts, including remediation links that your accounts with open requirements can use to submit information and resolve issues.\n\n## View all accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Accounts to review tab](https://dashboard.stripe.com/connect/accounts_to_review) in your Connect Dashboard provides a list of all your connected accounts with open risk, verification, and onboarding requirements.\n\n![The Accounts to review page showing connected accounts that need action.](https://b.stripecdn.com/docs-statics-srv/assets/accounts-to-review-listview.56a3016b917811e060e006ab8216bcfe.png)\n\nTo view the accounts in a particular status, select the corresponding tab:\n\n| Tab | Description |\n| --- | --- |\n| Actions required | Active accounts with open risk, onboarding, or verification requirements from Stripe or from your platform. |\n| In review | Active accounts that Stripe is reviewing submitted information for or is conducting an account review of, regardless of whether any account capabilities are restricted. |\n| Rejected | All accounts that have been rejected by Stripe or by your platform. |\n\nIn the **Actions required** and **In review** tabs, you can toggle the **Restrictions** column between restrictions and information needed by clicking the gear in its heading.\n\n#### Note\n\nWithin each tab, you can customize the filters to narrow the list of connected accounts that are most relevant to you. You can filter by:\n\n*   Payments capability status\n*   Payouts capability status\n*   Issuing capability status\n*   Account status\n*   Verification requirement\n*   Volume\n*   Information needed\n*   Last payout date\n*   Connected date\n*   Last activity\n\nYou can see all accounts in the currently selected status by removing the default filters.\n\n![A tooltip showing additional filters on the Accounts to review page, including Payments capability status and Payouts capability status.](https://b.stripecdn.com/docs-statics-srv/assets/filters.2f75daf69b8b149699fcd5737e45c3f8.png)\n\nYou can sort the accounts list by total volume, due date, or information needed. In the **Rejected** tab, you can also sort by accounts with any ongoing appeals.\n\n#### Note\n\nThe **Total volume** column displays “Unavailable” for connected accounts with Stripe Dashboard access where you don’t have [platform controls](https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts) enabled. Filtering by volume always excludes them. You can identify these accounts by filtering the list by platform controls.\n\nDepending on a connected account’s configuration, you can take action on it in the **Action required** list or **In review** list by clicking the account’s overflow menu . You can take the following actions:\n\n*   Open the **Actions required** tab on the account activity page.\n*   Reject the account.\n*   Pause or resume payouts for the account.\n*   Pause or resume payments for the account.\n*   Generate a [remediation link](https://docs.stripe.com/connect/dashboard/remediation-links) that the account can use to take required actions.\n\n![A dropdown menu showing the ability to reject the connected account, resume payouts, or resume payments](https://b.stripecdn.com/docs-statics-srv/assets/action-reject-account.27a99b4970cc2de5c2f4d0dcbcd05b71.png)\n\n## Export a list of accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can download a CSV list of all accounts in the current view by clicking **Export** in the top-right corner of the page. It opens a dialog that lets you select the fields to include:\n\n*   Account ID\n*   Business name\n*   Representative email\n*   Account status\n*   Earliest due date\n*   Payment status\n*   Payout status\n*   Issuing status\n*   Verification update\n*   Information needed\n*   Remediation link\n*   Total volume (USD) (in minor units)\n*   Last payout date\n*   Connected date\n*   Last activity\n\nYou can import the list into another system or use it to [send remediation links to your connected accounts](https://docs.stripe.com/connect/dashboard/remediation-links). A connected account can use a remediation link to submit information for open requirements.\n\n## Use Stripe Sigma to identify accounts with open requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use [Stripe Sigma](https://docs.stripe.com/stripe-data), it can identify accounts that have open `requirements` or `future_requirements`. For information about querying for Connect information with Sigma, see [Query Connect data](https://docs.stripe.com/stripe-data/query-connect-data).\n\n## Review individual accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo investigate the open requirements for an account on the **Accounts to review** tab, click the account. That opens the [Actions required](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#actions-required) tab on that account’s details page, where you can identify specific requirements and take action.",
    "title": "Review actionable accounts | Stripe Documentation",
    "description": "View connected accounts with open risk, onboarding, and compliance requirements.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/online-payments",
    "markdown": "# Online payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Stripe's integration choices for accepting online payments.\n\n[](#recommended-integrations)\n\n[](https://docs.stripe.com/payment-links \"Stripe Payment Links\")\n\n[No code](https://docs.stripe.com/payment-links \"Stripe Payment Links\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/link.f0b2a66175b477e86a89e39eba75fb6c.svg)](https://docs.stripe.com/payment-links \"Stripe Payment Links\")\n\nEmbed or share a link to a Stripe payment page to accept payments without a website.\n\n[](https://docs.stripe.com/checkout/quickstart \"Stripe Checkout\")\n\n[Recommended](https://docs.stripe.com/checkout/quickstart \"Stripe Checkout\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4abfc4af6b46ecac81ce96bc8ff0213e.svg)](https://docs.stripe.com/checkout/quickstart \"Stripe Checkout\")\n\nSend your customers to a checkout page to pay. Embed it directly in your site or redirect to a Stripe-hosted payment page.\n\n[](https://docs.stripe.com/payments/quickstart \"Stripe Elements\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/elements.750bc8af6d17414b54dc09ae8acb8efb.svg)](https://docs.stripe.com/payments/quickstart \"Stripe Elements\")\n\nIntegrate customizable UI components into your website or mobile app to collect payment information from customers.\n\n#### Optimize your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo optimize your integration and increase revenue, select the recommended integration that meets your business needs, add [payment methods](https://docs.stripe.com/payments/payment-methods/overview), and add [Link](https://docs.stripe.com/payments/link).\n\n[](#explore-no-code)\n\n[](https://docs.stripe.com/invoicing/dashboard \"Invoices\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/invoices.405bc8d8d7eece255bcf29d2cafeb6cd.svg)](https://docs.stripe.com/invoicing/dashboard \"Invoices\")\n\nIdeal for:Sending an invoice to a specific customerHow it works:Stripe emails your customer an invoice for one-time or recurring payments and a link they can use to pay the invoice online.\n\n[](https://support.stripe.com/questions/enter-customer-payment-information-manually-into-stripe-for-mail-or-telephone-orders \"Manual payments\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/manual-payments.48966b7c7d511bbc10af871cb4979db1.svg)](https://support.stripe.com/questions/enter-customer-payment-information-manually-into-stripe-for-mail-or-telephone-orders \"Manual payments\")\n\nIdeal for:Small payment volumeHow it works:Manually enter payment details in the Dashboard to charge a customer for one-time or recurring payments.\n\n[](#integrate-platform-plugin)\n\nStripe partners with thousands of popular platforms and supports plugins to bring Stripe payments into your website. See [all of our integration solutions](https://stripe.partners/) in our online directory.",
    "title": "Online payments | Stripe Documentation",
    "description": "Learn about Stripe's integration choices for accepting online payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=embedded-form",
    "markdown": "# Accept a payment | Stripe DocumentationThe Stripe Docs logo\n\n## Securely accept payments online.\n\nBuild a payment form or use a prebuilt checkout page to start accepting online payments.\n\nEmbed a prebuilt payment form on your site using [Stripe Checkout](https://docs.stripe.com/payments/checkout). See how this integration [compares to Stripe’s other integration types](https://docs.stripe.com/payments/accept-a-payment/web/compare-integrations).\n\n![Embedded Checkout preview](https://b.stripecdn.com/docs-statics-srv/assets/24497bda4950e0dbe2ce4ec7e86176b7.png)![Embedded Checkout preview](https://b.stripecdn.com/docs-statics-srv/assets/dd4994836fd7d37c5a3a0f54c00a1169.png)\n\n### Integration effort\n\n### Integration type\n\nEmbed prebuilt payment form on your site\n\n### UI customization\n\nUse the [branding settings](https://dashboard.stripe.com/settings/branding/checkout) in the Stripe Dashboard to match Checkout to your site design.\n\n[](#set-up-stripe)\n\nFirst, [register](https://dashboard.stripe.com/register) for a Stripe account.\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-checkout-session)\n\nFrom your server, create a [Checkout Session](https://docs.stripe.com/api/checkout/sessions \"checkout session\") and set the [ui\\_mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-ui_mode) to `embedded`. You can configure the [Checkout Session](https://docs.stripe.com/api/checkout/sessions/create) with [line items](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items) to include and options such as [currency](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-currency).\n\nTo return customers to a custom page that you host on your website, specify that page’s URL in the [return\\_url](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-return_url) parameter. Include the `{CHECKOUT_SESSION_ID}` template variable in the URL to retrieve the session’s status on the return page. Checkout automatically substitutes the variable with the Checkout Session ID before redirecting.\n\nRead more about [configuring the return page](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=embedded-form#return-page) and other options for [customizing redirect behavior](https://docs.stripe.com/payments/checkout/custom-redirect-behavior).\n\nAfter you create the Checkout Session, use the `client_secret` returned in the response to [mount Checkout](#mount-checkout).\n\n`# This example sets up an endpoint using the Sinatra framework. # To learn more about Sinatra, watch this video: [https://youtu.be/8aA9Enb8NVc.](https://youtu.be/8aA9Enb8NVc) require 'json' require 'sinatra' require 'stripe'  # Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/create-checkout-session' do   session = Stripe::Checkout::Session.create({     line_items: [{       price_data: {         currency: 'usd',         product_data: {           name: 'T-shirt',         },         unit_amount: 2000,       },       quantity: 1,     }],     mode: 'payment',     ui_mode: 'embedded',     return_url: '[https://example.com/checkout/return?session_id={CHECKOUT_SESSION_ID}](https://example.com/checkout/return?session_id={CHECKOUT_SESSION_ID})'   })    {clientSecret: session.client_secret}.to_json end`\n\n[](#mount-checkout)\n\nCheckout is available as part of [Stripe.js](https://docs.stripe.com/js). Include the Stripe.js script on your page by adding it to the head of your HTML file. Next, create an empty DOM node (container) to use for mounting.\n\n`<head>   <script src=\"[https://js.stripe.com/v3/](https://js.stripe.com/v3/)\"></script> </head> <body>   <div id=\"checkout\">     <!-- Checkout will insert the payment form here -->   </div> </body>`\n\nInitialize Stripe.js with your publishable API key.\n\nCreate an asynchronous `fetchClientSecret` function that makes a request to your server to create the Checkout Session and retrieve the client secret. Pass this function into `options` when you create the Checkout instance:\n\n`// Initialize Stripe.js const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  initialize();  // Fetch Checkout Session and retrieve the client secret async function initialize() {   const fetchClientSecret = async () => {     const response = await fetch(\"/create-checkout-session\", {       method: \"POST\",     });     const { clientSecret } = await response.json();     return clientSecret;   };    // Initialize Checkout   const checkout = await stripe.initEmbeddedCheckout({     fetchClientSecret,   });    // Mount Checkout   checkout.mount('#checkout'); }`\n\nCheckout renders in an iframe that securely sends payment information to Stripe over an HTTPS connection.\n\n#### Common mistake\n\nAvoid placing Checkout within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\n### Customize appearance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomize Checkout to match the design of your site by setting the background color, button color, border radius, and fonts in your account’s [branding settings](https://dashboard.stripe.com/settings/branding).\n\nBy default, Checkout renders with no external padding or margin. We recommend using a container element such as a div to apply your desired margin (for example, 16px on all sides).\n\n[](#return-page)\n\nAfter your customer attempts payment, Stripe redirects them to a return page that you host on your site. When you created the Checkout Session, you specified the URL of the return page in the [return\\_url](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-return_url) parameter. Read more about other options for [customizing redirect behavior](https://docs.stripe.com/payments/checkout/custom-redirect-behavior).\n\nWhen rendering your return page, retrieve the Checkout Session status using the Checkout Session ID in the URL. Handle the result according to the session status as follows:\n\n*   `complete`: The payment succeeded. Use the information from the Checkout Session to render a success page.\n*   `open`: The payment failed or was canceled. Remount Checkout so that your customer can try again.\n\n`get '/session-status' do   session = Stripe::Checkout::Session.retrieve(params[:session_id])    {status: session.status, customer_email:  session.customer_details.email}.to_json end`\n\n``const session = await fetch(`/session_status?session_id=${session_id}`) if (session.status == 'open') {   // Remount embedded Checkout } else if (session.status == 'complete') {   // Show success page   // Optionally use session.payment_status or session.customer_email   // to customize the success page }``\n\n#### Redirect-based payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring payment, some payment methods redirect the customer to an intermediate page, such as a bank authorization page. When they complete that page, Stripe redirects them to your return page.\n\nLearn more about [redirect-based payment methods and redirect behavior](https://docs.stripe.com/payments/checkout/custom-redirect-behavior#redirect-based-payment-methods).\n\n[](#testing)\n\nTo test your embedded payment form integration:\n\n1.  Create an embedded Checkout Session and mount Checkout on your page.\n2.  Fill out the payment details with a method from the table below.\n    *   Enter any future date for card expiry.\n    *   Enter any 3-digit number for CVC.\n    *   Enter any billing postal code.\n3.  Click **Pay**. You’re redirected to your `return_url`.\n4.  Go to the Dashboard and look for the payment on the [payments page](https://dashboard.stripe.com/test/payments?status%5B0%5D=successful). If your payment succeeded, you’ll see it in that list.\n5.  Click your payment to see more details, like a Checkout summary with billing information and the list of purchased items. You can use this information to fulfill the order.\n\nLearn more about [testing your integration](https://docs.stripe.com/testing).\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Add discounts](https://docs.stripe.com/payments/checkout/discounts)\n*   [Collect taxes](https://docs.stripe.com/payments/checkout/taxes)\n*   [Collect tax IDs](https://docs.stripe.com/tax/checkout/tax-ids)\n*   [Add shipping](https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout)\n*   [Customize your branding](https://docs.stripe.com/payments/checkout/customization)",
    "title": "Accept a payment | Stripe Documentation",
    "description": "Securely accept payments online.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/checkout/subscriptions/update-payment-details",
    "markdown": "# Update payment details | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to update the payment method used for future invoices.\n\nUse the following steps to create a Checkout page that collects your customer’s payment details and returns a Payment Method. Then use the Stripe REST APIs to update the payment method used for future [invoices](https://docs.stripe.com/api/invoices \"invoices\").\n\n#### Note\n\nThis guide uses Checkout to update subscription payment methods. You can instead implement the [Billing customer portal](https://docs.stripe.com/customer-management) to provide a Stripe-hosted dashboard for your customers to manage their subscriptions and billing details.\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[\n\n## Create a Checkout Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-checkout-session)\n\nTo create a setup mode Session, use the `mode` parameter with a value of `setup` when creating the Session. See the [Checkout Session API reference](https://docs.stripe.com/api/checkout/sessions/create) for a complete list of parameters that you can use for Session creation.\n\nAppend the `{CHECKOUT_SESSION_ID}` template variable to the `success_url` to get access to the Session ID after your customer successfully completes a Checkout Session.\n\nFinally, use the [`setup_intent_data.metadata`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-setup_intent_data-metadata) dictionary to pass your customer’s existing Stripe `subscription_id` to the Checkout Session. Note that there other ways to pass this data to your server, but we’ll use metadata for this guide.\n\n[\n\n## Redirect to Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#redirect-checkout)\n\nCheckout relies on [Stripe.js](https://docs.stripe.com/payments/elements), Stripe’s foundational JavaScript library for building payment flows.\n\nTo get started, include the following script tag on your website—always load it directly from **https://js.stripe.com**. You can’t include it in a bundle or host it yourself. See [Stripe samples](https://github.com/stripe-samples) for examples.\n\n`npm install @stripe/stripe-js`\n\nNext, create an instance of the [Stripe object](https://docs.stripe.com/js#stripe-function) by providing your publishable [API key](https://docs.stripe.com/keys) as the first parameter:\n\n`import {loadStripe} from '@stripe/stripe-js';  const stripe = await loadStripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\nTo use Checkout on your website, you must add a snippet of code that includes the Session `id` from the [previous step](#create-checkout-session). When your customer is ready to save or update their payment method, call [redirectToCheckout](https://docs.stripe.com/js#stripe-redirect-to-checkout) and provide the Session `id` as a parameter.\n\n``const checkoutButton = document.getElementById('checkout-button');  checkoutButton.addEventListener('click', () => {   stripe.redirectToCheckout({     // Make the id field from the Checkout Session creation API response     // available to this file, so you can provide it as argument here     // instead of the {{CHECKOUT_SESSION_ID}} placeholder.     sessionId: '{{CHECKOUT_SESSION_ID}}'   })   // If `redirectToCheckout` fails due to a browser or network   // error, display the localized error message to your customer   // using `error.message`. });``\n\nThis code is typically invoked from an event handler that triggers in response to an action taken by your customer, such as clicking on a payment button.\n\n[\n\n## Retrieve the Checkout Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#retrieve-checkout-session)\n\nAfter a customer successfully completes their Checkout Session, you need to retrieve the Session object. There are two ways to do this:\n\n*   **Asynchronously**: Handle `checkout.session.completed` [webhooks](https://docs.stripe.com/webhooks \"webhook\"), which contain a Session object. Learn more about [setting up webhooks](https://docs.stripe.com/webhooks).\n*   **Synchronously**: Obtain the Session ID from the `success_url` when a user redirects back to your site. Use the Session ID to [retrieve](https://docs.stripe.com/api/checkout/sessions/retrieve) the Session object.\n\n`curl https://api.stripe.com/v1/checkout/sessions/cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nThe right choice depends on your tolerance for dropoff, as customers may not always reach the `success_url` after a successful payment. It’s possible for them close their browser tab before the redirect occurs. Handling webhooks prevents your integration from being susceptible to this form of dropoff.\n\nAfter you have retrieved the Session object, get the value of the `setup_intent` key, which is the ID for the SetupIntent created during the Checkout Session. A [SetupIntent](https://docs.stripe.com/payments/setup-intents) is an object used to set up the customer’s bank account information for future payments.\n\nExample `checkout.session.completed` payload:\n\n`{   \"id\": \"evt_1Ep24XHssDVaQm2PpwS19Yt0\",   \"object\": \"event\",   \"api_version\": \"2019-03-14\",   \"created\": 1561420781,   \"data\": {     \"object\": {       \"id\": \"cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\",       \"object\": \"checkout.session\",       \"billing_address_collection\": null,       \"client_reference_id\": null,       \"customer\": \"cus_FOsk5sbh3ZQpAU\",       \"customer_email\": null,       \"display_items\": [],       \"mode\": \"setup\",       \"setup_intent\": \"seti_1EzVO3HssDVaQm2PJjXHmLlM\",       \"submit_type\": null,       \"subscription\": null,       \"success_url\": \"[https://example.com/success](https://example.com/success)\"     }   },   \"livemode\": false,   \"pending_webhooks\": 1,   \"request\": {     \"id\": null,     \"idempotency_key\": null   },   \"type\": \"checkout.session.completed\" }`\n\nNote the `setup_intent` ID for the next step.\n\n[\n\n## Retrieve the SetupIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#retrieve-setup-intent)\n\nUsing the `setup_intent` ID, retrieve the SetupIntent object using the [/v1/setup\\_intents/:id](https://docs.stripe.com/api/setup_intents/retrieve) endpoint.\n\n`curl https://api.stripe.com/v1/setup_intents/seti_1EzVO3HssDVaQm2PJjXHmLlM \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nExample response:\n\n`{   \"id\": \"seti_1EzVO3HssDVaQm2PJjXHmLlM\",   \"object\": \"setup_intent\",   \"application\": null,   \"cancellation_reason\": null,   \"client_secret\": null,   \"created\": 1561420781,   \"customer\": \"cus_FOsk5sbh3ZQpAU\",   \"description\": null,   \"last_setup_error\": null,   \"livemode\": false,   \"metadata\": {     \"subscription_id\": \"sub_8epEF0PuRhmltU\"   },   \"next_action\": null,   \"on_behalf_of\": null,   \"payment_method\": \"pm_1F0c9v2eZvKYlo2CJDeTrB4n\",   \"payment_method_types\": [     \"card\"   ],   \"status\": \"succeeded\",   \"usage\": \"off_session\" }`\n\nNote the `customer` ID, `subscription_id`, and `payment_method` ID for the next steps.\n\n#### Note\n\nIf you’re requesting this information synchronously from the Stripe API (as opposed to handling webhooks), you can combine the previous step with this step by [expanding](https://docs.stripe.com/api/expanding_objects) the SetupIntent object in the request to the /v1/checkout/session endpoint. Doing this prevents you from having to make two network requests to access the newly created PaymentMethod ID.\n\n[\n\n## Set a default payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-default-payment-method)\n\nThere are two ways to ensure that a payment method is used for future invoices:\n\n*   Set it as the Customer’s `invoice_settings.default_payment_method`\n*   Set it as the Subscription’s `default_payment_method`\n\nSetting `invoice_settings.default_payment_method` on the Customer will cause all future invoices for that customer to be paid with the specified payment method.\n\nSetting `default_payment_method` on the Subscription will cause all future invoices for that subscription to be paid with the specified payment method, overriding any `invoice_settings.default_payment_method` set on the associated Customer.\n\n### Set `invoice_settings.default_payment_method` on the Customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsing the customer ID and the PaymentMethod ID you retrieved, set the `invoice_settings.default_payment_method` for the Customer using the [/v1/customers/:id](https://docs.stripe.com/api/customers/update) endpoint.\n\n`curl https://api.stripe.com/v1/customers/cus_FOsk5sbh3ZQpAU \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"invoice_settings[default_payment_method]\"=pm_1F0c9v2eZvKYlo2CJDeTrB4n`\n\nAll future invoices for this customer will now charge the new PaymentMethod created with the setup mode Checkout Session.\n\n### Set `default_payment_method` on the Subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsing the subscription ID and the PaymentMethod ID you retrieved, set the `default_payment_method` for the subscription using the [/v1/subscriptions/:id](https://docs.stripe.com/api/subscriptions/update) endpoint.\n\n`curl https://api.stripe.com/v1/subscriptions/sub_8epEF0PuRhmltU \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\" \\   -d \"default_payment_method\"=\"pm_1F0c9v2eZvKYlo2CJDeTrB4n\"`\n\nAll future invoices for this subscription will now charge the new PaymentMethod created with the setup mode Checkout Session, overriding any `invoice_settings.default_payment_method` set on the associated Customer.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCongrats! You can now set a default payment method for future invoices. When testing your integration with your test API key, you can use a [test card number](https://docs.stripe.com/testing#cards) to ensure that it works correctly.\n\n*   [Test Cards](https://docs.stripe.com/testing#cards)",
    "title": "Update payment details | Stripe Documentation",
    "description": "Learn how to update the payment method used for future invoices.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/deprecated/redirect_to_checkout",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/amazon-pay/accept-a-payment",
    "markdown": "# Accept a payment with Amazon Pay\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nAmazon Pay is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Customers are redirected from your website or app, authorize the payment with Amazon, then return to your website or app. You get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) of whether the payment succeeded or failed.\n\n[](#compatibility)\n\nTo support Amazon Pay payments, a Checkout Session must satisfy all of the following conditions:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency.\n    *   If you have line items in different currencies, create separate Checkout Sessions for each currency.\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nThis guide describes how to enable Amazon Pay and shows the differences between accepting a card payment and using Amazon Pay.\n\n### Enable Amazon Pay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `amazon_pay` to the list of `payment_method_types`.\n2.  Make sure all `line_items` use the same currency.\n\n`Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'amazon_pay'],   line_items: [{     price_data: {       currency: 'usd',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })`\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Amazon Pay as the payment method and click the **Pay** button.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/merchant_checkout_amazon_pay_visible.4ee046f5f5cb1d06c4661de229ca6fcd.png)",
    "title": "Accept a payment with Amazon Pay | Stripe Documentation",
    "description": "Learn how to set up your integration with Amazon Pay.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/amazon-pay/set-up-future-payments",
    "markdown": "# Set up future Amazon Pay payments\n\nThis guide describes how to save Amazon Pay payment details using [Checkout](https://docs.stripe.com/payments/checkout), our fully hosted checkout page.\n\nLearn how to [set up a subscription with Amazon Pay](https://docs.stripe.com/billing/subscriptions/amazon-pay) to create recurring payments after saving a payment method in Checkout.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-permissions)\n\nIf you save your customer’s payment method for future use, you need permission. Creating an agreement (sometimes called a mandate) up front allows you to save your customer’s payment details and charge them when they’re not actively using your website or app.\n\nAdd terms to your website or app that state how you plan to save your customer’s payment method details, and let them opt in. If you plan to charge your customer when they’re offline, make sure that your terms also include the following:\n\n*   The customer’s permission for you to initiate a payment or a series of payments on their behalf for specified transactions\n*   The anticipated frequency (that is, one-time or recurring) and timing of payments\n*   How you determine the payment amount\n*   Your cancellation policy, if you’re setting up the payment method for a subscription service\n\nMake sure that you keep a record of your customer’s written agreement to these terms.\n\n[](#web-create-customer)\n\nTo reuse an Amazon Pay payment method for future payments, attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a [Customer object](https://docs.stripe.com/api/customers) when your customer creates an account with your business, and associate the ID of the Customer object with your own internal representation of that customer. Alternatively, you can create a new Customer before saving a payment method for future payments.\n\nCreate a new Customer or retrieve an existing Customer to associate with this payment. Include the following code on your server to create a new Customer:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode description=\"My First Test Customer (created for API docs)\"`\n\n[](#web-create-checkout-session)\n\nYour customer must authorize you to use their Amazon account for future payments through Stripe Checkout. This allows you to accept Amazon payments. Add a checkout button to your website that calls a server-side endpoint to create a [Checkout Session](https://docs.stripe.com/api/checkout/sessions).\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Checkout Session in `setup` mode to collect the required information. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) that the response returns.\n\n[](#web-test-integration)\n\nSelect Amazon Pay as the payment method, then click **Continue to Amazon Pay**. You can test the successful setup case by authenticating the SetupIntent on the redirect page. The SetupIntent transitions from requires\\_action to succeeded.",
    "title": "Set up future Amazon Pay payments | Stripe Documentation",
    "description": "Learn how to save Amazon Pay details and charge your customers later.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/apple-pay/apple-pay-recurring",
    "markdown": "# Manage recurring payments on Apple Pay\n\n## Improve authorization rates for recurring Apple Pay transactions.\n\n## Checkout and Elements optimize automatically![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Checkout](https://docs.stripe.com/payments/checkout) and [Elements](https://docs.stripe.com/payments/elements) automatically optimize the best practices recommended in this guide.\n\n## How recurring Apple Pay payments work![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo make recurring payments, some businesses need to save the Apple Pay payment method on file when a user is on-session then make the recurring payments later when the user is off-session. The first on-session payment is often called a customer initiated transaction (CIT), and the later recurring payments are often called merchant initiated transactions (MIT). Two examples of recurring payments (or MIT) are:\n\n*   Subscriptions where users get billed on a fixed frequency.\n*   Recurring off-session payments where the billing frequency is inconsistent, or where customers can vary the frequency.\n\nWhen users interact with the Apple Pay payment sheet, to keep the PAN (the original card number) private, Apple Pay processes a card PAN and generates a Device Primary Account Number (DPAN) or [Merchant Token](https://developer.apple.com/apple-pay/merchant-tokens/) (MPAN) depending on the device OS version and integration. DPANs are tied to the specific Apple device, and can be unintentionally deactivated if a user switches to a new device (for example, an iPhone or an iPad) and adds the same card on it. MPAN is the newly introduced more reliable option for recurring payments. MPANs are not deactivated when users switch their devices, and comes with better visibility and lifecycle management features.\n\nBeyond these differences, MPAN and DPAN behave similarly.\n\nWhen a DPAN (or an MPAN) generates, it also comes with an expiring one-time use cryptogram. Stripe needs to conduct the CIT and send both the DPAN (or MPAN) and cryptogram to the authorization network as soon as possible before the cryptogram expires. This expiration mechanism adds a layer of security to Apple Pay Wallets, but failing to trigger the CIT in time is often the root cause of authorization failures.\n\nWhen the first CIT using the cryptogram fails, subsequent MITs using the same [Card](https://docs.stripe.com/api/cards/object) will likely also fail because they are internally linked to the CIT. These recurring payment failures lead to the low authorization success rate.\n\n## Improve authorization for your API integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo implement recurring Apple Pay transactions using the API:\n\n1.  Save the DPAN (or MPAN) and cryptogram in a `Card`.\n2.  Initiate a CIT to consume the cryptogram before its expiration. Send a 0 USD validation or a charge transaction to the authorization network, and keep a record of the returned network transaction.\n3.  Reuse the payment method for future off-session MITs. Stripe sends the DPAN (or MPAN) and the network transaction ID of the original CIT to the authorization network to improve authorization rate.\n\nConsume cryptograms as soon as they are created using the following recommendations.\n\n### Use subscriptions for free trials![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a customer signs up for a free trial, they’re not charged until the free trial period ends. To make sure you consume the DPAN (or MPAN) cryptogram before it expires, use [Stripe Subscriptions](https://docs.stripe.com/subscriptions). The Subscription creates a [SetupIntent](https://docs.stripe.com/api/setup_intents) that generates a 0 USD validation with the authorization network. This acts as the CIT, consuming the cryptogram immediately, rather than delaying the first transaction until after the free trial, when the cryptogram has expired.\n\nYou can also [create a SetupIntent](https://docs.stripe.com/api/setup_intents/create) directly to save the [Apple Pay PaymentMethod](https://docs.stripe.com/api/payment_methods/object#payment_method_object-card-wallet-apple_pay) for future usage. SetupIntent confirmation initiates the same CIT 0 USD validation to consume the cryptogram. Then you can use the authorized [Apple Pay PaymentMethod](https://docs.stripe.com/api/payment_methods/object#payment_method_object-card-wallet-apple_pay) to create a Subscription later.\n\n### Create a SetupIntent for Tokens API integrations Legacy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe discourage using the legacy Tokens and Charges APIs for recurring Apple Pay payments. It causes the cryptogram expiration authorization failure described in this document. The Tokens API doesn’t trigger the authorization request in time to consume the cryptogram. Additionally, the Charges API doesn’t support the following features, many of which are required for credit card compliance:\n\n*   Merchants in India\n*   Bank requests for card authentication\n*   Strong Customer Authentication\n\n**For these reasons, we recommend migrating to the PaymentIntents and the SetupIntents APIs.**\n\nIf you’re using the legacy [Tokens](https://docs.stripe.com/api/tokens) to create an Apple Pay payment token and then calling [Charges](https://docs.stripe.com/api/charges) later to charge the user when the trial ends, you can improve your authorization rate following these steps.\n\n1.  Create a Payment Method immediately after you create the token.\n    \n    `curl https://api.stripe.com/v1/payment_method \\   -u` \n    \n    `sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n    \n    `: \\   -d \"type\"=\"card\" \\   -d \"card[token]\"=\"tok_123\"`\n    \n2.  Immediately create a [SetupIntent](https://docs.stripe.com/api/setup_intents) with the new PaymentMethod to perform a 0 USD validation transaction.\n\nCompleting these two steps performs the CIT and sends the cryptogram to the network for authorization before it expires. If you’re using Stripe.js, you can combine these steps by calling [stripe.confirmCardSetup with token](https://docs.stripe.com/js/setup_intents/confirm_card_setup#stripe_confirm_card_setup-token).\n\nYou can now make off-session MIT payments using the saved Apple Pay payment method. If you’re using PaymentIntents, set [off\\_session=true](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session) to indicate that the customer isn’t in your checkout flow.\n\n### Set up off-session payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re setting up deferred off-session Apple Pay payments and aiming to collect payment information for future off-session uses, such as a hotel reservation, see Apple Pay’s [list of supported payment types](https://developer.apple.com/apple-pay/planning/).\n\nApple Pay supports [usage=off\\_session](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) payments using DPANs (or MPANs) when the customer is outside of the checkout flow. However, they have a slightly higher risk because they don’t get a liability shift from the network and might get lower authorization rates than average.\n\nApple Pay terms forbid using a saved payment method for [usage=on\\_session](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) payments. If the customer is in the flow, you’re required to have them authorize and generate a new cryptogram for that transaction.\n\nApple Pay supports incremental authorizations only when you increase the amount of an authorized charge before capturing it.\n\nYou can initiate a CIT for your Tokens API integration in either of the following ways:\n\n*   [Create a SetupIntent](https://docs.stripe.com/api/setup_intents/create) as described in the free trial scenario to initiate a 0 USD validation that creates a reusable DPAN (or MPAN) based payment method for off-session payments.\n*   Create a PaymentIntent with [setup\\_future\\_usage=off\\_session](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage).\n\nYou can now make off-session MIT payments using the saved payment method. If you’re using PaymentIntents, set [off\\_session=true](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session) to indicate that the customer isn’t in your checkout flow.",
    "title": "Manage recurring payments on Apple Pay | Stripe Documentation",
    "description": "Improve authorization rates for recurring Apple Pay transactions.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/apple-pay/best-practices",
    "markdown": "# Apple Pay Best Practices | Stripe DocumentationThe Stripe Docs logo\n\n## Follow these best practices to make the most of your Apple Pay integration.\n\nIn a normal checkout flow, your customers usually need to enter their card information, billing and shipping address, email, or phone number. With Apple Pay, customers can provide this information by authorizing a payment with Touch ID, or by double-clicking the side button of their Apple Watch.\n\nApple Pay can help boost metrics like conversion rate, new user acquisition, and purchase frequency, while reducing risk and the overall cost of payment acceptance. Consider implementing the following best practices to further improve the checkout experience for your customers using Apple Pay.\n\n## Implement an express checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can provide your app users and website visitors with more opportunities to make a purchase by adding Apple Pay to product detail pages, product list views, or search results pages. As Apple Pay enables new and existing customers to make a purchase with a single tap you can convert more prospects into actual customers.\n\n*   For customers who have set up Apple Pay, display the **Apple Pay** button on product detail pages, product list view pages, or on search results pages.\n*   Ask the customer for all mandatory information about their order (for example, size, color, quantity, and so on) before showing the Apple Pay button.\n*   Never display the Apple Pay button in a disabled state. Instead, highlight incomplete product selections if the customer selects the Apple Pay button before completing them.\n*   If you already display an **Express Checkout** button in your checkout, consider replacing it with the Apple Pay button to help avoid user confusion.\n\n## Remove or move registration until after the purchase is complete![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApple Pay enables customers to seamlessly create new accounts after making their first purchase. By postponing the option to create an account until after the transaction, customers are more likely to complete their purchase.\n\n*   For Apple Pay–ready customers, remove any mandatory sign-up from the beginning of the payment process.\n*   Don’t request any customer information that Apple Pay provides during the payment request (for example, customer name or address information).\n*   Only request the information you need as part of the transaction request. For example, don’t request a shipping address if you’re not shipping anything (for example, services, digital goods).\n*   Request any additional information needed to create an account (for example, password) on the payment confirmation page, after the payment is complete.\n\n## Default to Apple Pay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your customer is on an Apple Pay-enabled device, consider offering Apple Pay as the default payment method. This can boost your checkout conversion for both new and existing users.\n\n*   For new customers that have Apple Pay set up on their device, skip the payment method selection page in the checkout flow so they can complete their purchase quickly.\n*   Pre-select Apple Pay in the payment method selector to reduce the number of steps a customer needs to perform.\n*   Show the Apple Pay button for a stronger call to action.\n\n## Offer to set up Apple Pay within your app or website![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Apple Pay API allows you to identify customers with an Apple Pay-capable device who haven’t added a card to Wallet yet. You can then offer these users the opportunity to set up Apple Pay from within your app.\n\nYou might consider displaying a **Set Up Apple Pay** button:\n\n*   Next to any other payment options on the payment method selection page during checkout for capable devices\n*   Next to any other payment options on the payment method management page in the customer’s account settings\n*   In any messages to your users that request they add or update their payment information (for example, emails prompting them to update expired card information)\n\nIf you already support other payment methods that give the option to set up an account during the checkout process, always display a **Set Up Apple Pay** button for capable devices.\n\n## Communicate Apple Pay acceptance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you’ve integrated Apple Pay as a supported payment method, let your Apple Pay-ready customers know. You may also want to consider setting it as the default payment method in your app or website.\n\n*   Add the Apple Pay mark next to other payment marks in your checkout.\n*   When you add support for Apple Pay to your app or website, use a banner or additional messaging before the checkout process to announce that you now accept Apple Pay.\n*   When you add support for Apple Pay to your app or website, announce it through your marketing channels (email, notification, social media, and so on).\n*   Make the banner or additional messaging actionable so that your customers can start using Apple Pay in your app or website with only a tap. If you don’t have this capability, let your customers know how they can start using Apple Pay.\n*   Update the screenshots and description of your Apple Pay-ready app within the App Store to reflect Apple Pay acceptance.\n\n## Apple Pay Certificate Renewal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApple sends notifications to the team agent of the Apple Developer Account at 30 days, 15 days, and 7 days prior to the upcoming expiration date of the certificate. The certificate is valid for 25 months from activation. You’ll need to generate a new certificate and activate it before your current one expires to avoid any disruptions.\n\nGo to the [iOS certificate settings](https://dashboard.stripe.com/settings/ios_certificates) in the Dashboard, click **Add new application**, and follow the guide there.\n\nDownload a new CSR from Stripe for creating the new certificate, and never use the older CSR that you downloaded from Stripe. Upload the new certificate to Stripe before activating it on the Apple Developer Account. Apple uses the new public key to encrypt the Apple Pay token approximately 5 minutes after you click **Activate** in the portal. Make sure you have both the old and new certificate in the Stripe Dashboard before activating the new certificate so that either of the certificates can be used during transition.\n\nYou don’t need to update your app after you’ve replaced the certificate. We recommend running an ApplePay transaction with test mode API keys to make sure the integration is working as expected.\n\n## Always test on updates to your Apple Pay integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore applying changes that update your integration or switch your Apple Merchant ID, verify that you’re able to create tokens and use them to complete payments successfully.\n\n## Best practice for Apple Pay recurring transaction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you accept Apple Pay payments, we recommend configuring the Apple Pay interface to return a merchant token to enable merchant initiated transactions (MIT) such as recurring and deferred payments and automatic reloads. Merchant tokens (MPANs) connect your business with your customer’s Apple Wallet payment method, so they work across multiple devices and keep payment information active in a new device even when its removed from a lost or stolen device. See [ApplePay merchant tokens](https://docs.stripe.com/apple-pay/merchant-tokens?pay-element=ece) for integration details and [Apple Pay Recurring Transactions](https://docs.stripe.com/apple-pay/apple-pay-recurring) for direct API integration recommendations to prevent recurring authorization failures due to cryptogram expiration.",
    "title": "Apple Pay Best Practices | Stripe Documentation",
    "description": "Follow these best practices to make the most of your Apple Pay integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/apple-pay/cartes-bancaires",
    "markdown": "# Cartes Bancaires with Apple Pay\n\n[](#ios-add-cartes-bancaires-to-enabled-networks)\n\nWhen your app starts, configure the SDK with Cartes Bancaires as an enabled Apple Pay network.\n\n`StripeAPI.additionalEnabledApplePayNetworks = [.cartesBancaires]`\n\n[](#ios-test-apple-pay)\n\nWallet in iOS can’t save Stripe test cards information. Instead, Stripe recognizes when you’re using your test API keys and provides a successful test card token for you to use. This allows you to make test payments using a live card without any charges being applied. Make sure you test using a Cartes Bancaires card obtained from one of the [Apple Pay participating banks](https://support.apple.com/en-us/109516).\n\n#### Note\n\nOnly add Cartes Bancaires to the list of enabled networks if the transaction is on-session, in Euros and isn’t setting up future off-session transactions. If you pass Cartes Bancaires as an enabled network but the card provided isn’t a Cartes Bancaires card, Stripe processes the transaction with Visa or Mastercard as normal.",
    "title": "Cartes Bancaires with Apple Pay | Stripe Documentation",
    "description": "Learn more about Cartes Bancaires with Apple Pay and how to integrate it.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/apple-pay/disputes-refunds",
    "markdown": "# Apple Pay liability shift, disputes, and refunds\n\n## Learn how to manage disputed or refunded Apple Pay payments.\n\nPost payment activities can include disputes and refunds. When these use cases happen, learn how to address disputed payments, understand the nuances of liability shifts for Apple Pay charges, and manage refunds effectively.\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsers must authenticate payments with their Apple Pay accounts, helping to reduce the risk of fraud or unrecognized payments. However, users can still dispute transactions after they complete payment. You can submit evidence to contest a dispute directly. The dispute process is the same as that for card payments. Learn about how to [manage disputes](https://docs.stripe.com/disputes/responding).\n\n## Liability shift for Apple Pay charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApple Pay supports [liability shift](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments) globally for all the major networks with the following exceptions:\n\n*   For Visa, liability shift is supported globally for devices running iOS 16.2 and above.\n*   For Visa, liability shift support is only available for cards issued in Europe for devices running on versions below iOS 16.2.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can partially or fully refund any successful Apple Pay payment. The refund process is the same as that for card payments. See [Refund and cancel payments](https://docs.stripe.com/refunds) for instructions on initiating or managing refunds.",
    "title": "Apple Pay liability shift, disputes, and refunds | Stripe Documentation",
    "description": "Learn how to manage disputed or refunded Apple Pay payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/appendix/payment_item_object",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/payment_request/create",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-methods/pmd-registration?dashboard-or-api=api",
    "markdown": "# Register domains for payment methods\n\n## Register and verify domains to use payment methods (including Link, Apple Pay, and Google Pay) in Elements or Checkout's embeddable payment form.\n\nTo use certain payment methods with [Elements](https://docs.stripe.com/payments/elements \"Stripe Elements\") or [Checkout’s embeddable payment form](https://docs.stripe.com/payments/checkout/how-checkout-works?payment-ui=embedded-form), you must register every web domain that will show the payment method. This includes registering top-level domains and subdomains. For example, if you have the domain **yourdomain.com** and subdomains like **shop.yourdomain.com** and **www.yourdomain.com**, this guide explains how to register them.\n\nAfter you register a domain, that domain is ready for use with other payment methods that you might enable in the future.\n\nThe following payment methods require registration:\n\n*   Google Pay\n*   Link\n*   PayPal\n*   Apple Pay (additional verification step required)\n\n#### Apple Pay and merchant validation\n\nThe Apple Pay documentation describes their process of “merchant validation,\" which Stripe handles for you behind the scenes. You don’t need to create an Apple Merchant ID or CSR. Instead, follow the steps in this guide.\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou also need to register domains for testing. When testing locally, you can use a tool such as [ngrok](https://ngrok.com/) to get an HTTPS domain. You can either register in test mode, or register in live mode and the domain will also be registered in test mode automatically. Remember to register your domains in live mode before going live.\n\n## Register your domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo register a domain, do the following:\n\n`curl https://api.stripe.com/v1/payment_method_domains \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d domain_name=\"example.com\"`\n\nRepeat for all domains that you need to register.\n\n### Using an iframe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   When using an iframe, its origin must match the top-level origin, except in Safari 17+. Two pages have the same origin if the protocol, host (full domain name), and port (if specified) are the same for both pages.\n*   When using a cross-origin iframe in Safari 17+ you must specify the `allow=“payment”` attribute. To enable Apple Pay, you must also register the source domain that the iframe loads.\n\n## Verify ownership of your domain with Apple Pay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring registration, Stripe automatically attempts to verify ownership of your domain with Apple. If the domain isn’t already verified, register your domain and then follow these steps to verify your registered domain with Apple Pay.\n\n1.  Download the [domain association file](https://stripe.com/files/apple-pay/apple-developer-merchantid-domain-association).\n2.  Host it at `/.well-known/apple-developer-merchantid-domain-association` on your site. For example, if you register `https://yourdomain.com`, make that file available at `https://yourdomain.com/.well-known/apple-developer-merchantid-domain-association`.\n\n`curl -X POST https://api.stripe.com/v1/payment_method_domains/{{PAYMENT_METHOD_DOMAIN_ID}}/validate \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nStripe performs an initial domain verification, with requests originating from one of our [webhook IPs](https://docs.stripe.com/ips#webhook-notifications).\n\n## Manage your domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing the [PaymentMethodDomain API](https://docs.stripe.com/api/payment_method_domains/object) you can do the following:\n\n*   Retrieve a domain.\n*   See a list of all of your domains.\n*   Enable or disable a domain. If a domain is disabled, the payment methods no longer appear in Elements or Checkout’s embeddable payment form on that domain.\n\nThis sample shows how to disable a domain:\n\n`curl https://api.stripe.com/v1/payment_method_domains/{{PAYMENT_METHOD_DOMAIN_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d enabled=false`\n\n## Register your domain while using Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnect platforms must register all domains where Elements or Checkout’s embeddable payment form displays the payment methods listed above. The domain where the charge is being run needs to be registered for the user running the charge.\n\nIf the platform creates [direct charges](https://docs.stripe.com/connect/direct-charges), use your platform’s secret key to authenticate the request and set the Stripe-Account header to your connected account’s Stripe ID.\n\nIf the platform creates [destination charges](https://docs.stripe.com/connect/destination-charges) or [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), use your platform’s secret key to authenticate the request and omit the Stripe-Account header.\n\nLearn more about [Making API calls for connected accounts](https://docs.stripe.com/connect/authentication).\n\n`curl https://api.stripe.com/v1/payment_method_domains \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d domain_name=\"example.com\"`",
    "title": "Register domains for payment methods | Stripe Documentation",
    "description": "Register and verify domains to use payment methods (including Link, Apple Pay, and Google Pay) in Elements or Checkout's embeddable payment form.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/link/payment-request-button-link",
    "markdown": "# Link in the Payment Request Button\n\n## Let your customers check out faster with Link and the Payment Request Button.\n\n#### Caution\n\nStripe no longer recommends using the Payment Request Button as part of your Web Elements integration. To integrate Link, use one of our preferred Elements: the Link Authentication Element, Express Checkout Element, or Payment Element.\n\nWhen new customers come to your site, they can use [Link](https://docs.stripe.com/payments/link/what-is-link) in the [Payment Request Button](https://docs.stripe.com/stripe-js/elements/payment-request-button) to pay with their saved payment details. With Link, they don’t need to manually enter their payment information.\n\nAdditionally, Link is fully compatible with the other features you receive from card payments (for example, subscriptions), and there’re no additional fees. To turn Link off or on, go to your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).\n\n![User paying for Link using the Payment Request Button](https://b.stripecdn.com/docs-statics-srv/assets/link-in-prb-pay.addb77c45640c8f3f3c872d40ade0aaa.png)\n\nCompleting payment using Link with the Payment Request Button\n\n## Returning Link customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReturning customers can authenticate by clicking the **Link** button and entering an SMS or email code. After they authenticate, Link loads their previously saved payment details, allowing them to make payments with a single click. If they previously authenticated their account in the last 90 days, either on your site or through a different Link-enabled business, they can pay instantly without re-authenticating. New Link customers are prompted to save their information in a Link account when they click the **Link** button.\n\n## Link and Connect platforms ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLink is automatically available through the Payment Request Button to any connected accounts that access the Payment Request Button through a Connect platform integration.\n\n*   If you’re a Connect platform, you can manage Link for your connected accounts through [payment method settings](https://dashboard.stripe.com/settings/payment_methods).\n*   If you’re a connected account processing payments through a Connect platform, your platform manages Link for you when payments are processed through the platform. For payments processed without a platform, you can use the [payment method settings](https://dashboard.stripe.com/settings/payment_methods). in your Dashboard to manage Link for the Payment Request Button.",
    "title": "Link in the Payment Request Button | Stripe Documentation",
    "description": "Let your customers check out faster with Link and the Payment Request Button.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/link/checkout-link",
    "markdown": "# Link with Checkout | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nDon’t store real user data in [test mode](https://docs.stripe.com/test-mode \"test mode\") Link accounts. Treat them as if they’re publicly available, because these test accounts are associated with your publishable key.\n\nCurrently, Link only works with credit cards, debit cards, and qualified US bank account purchases. Link requires [domain registration](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n\nYou can create test mode accounts for Link using any valid email address. The following table shows the fixed one-time passcode values that Stripe accepts for authenticating test mode accounts:\n\n| Value | Outcome |\n| --- | --- |\n| Any other 6 digits not listed below | Success |\n| 000001 | Error, code invalid |\n| 000002 | Error, code expired |\n| 000003 | Error, max attempts exceeded |\n\n### Multiple funding sources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs Stripe adds additional funding source support, you don’t need to update your integration. Stripe automatically supports them with the same transaction settlement time and guarantees as card and bank account payments.",
    "title": "Link with Checkout | Stripe Documentation",
    "description": "Use Link with Stripe's prebuilt checkout page.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/google-pay/disputes-refunds",
    "markdown": "# Google Pay liability shift, disputes, and refunds\n\n## Learn how to manage disputed or refunded Google Pay payments.\n\nPost payment activities can include disputes and refunds. When these use cases happen, learn how to address disputed payments, understand the nuances of liability shifts for Google Pay charges, and manage refunds effectively.\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsers must authenticate payments with their Google Pay accounts, helping to reduce the risk of fraud or unrecognized payments. However, users can still dispute transactions after they complete payment. You can submit evidence to contest a dispute directly. The dispute process is the same as that for card payments. Learn how to [manage disputes](https://docs.stripe.com/disputes/responding).\n\n## Liability shift for Google Pay charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nGoogle Pay supports [liability shift](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments) globally. This is true automatically for users on Stripe-hosted products and using Stripe.js. For Visa transactions outside of a Stripe-hosted product, you must enable liability shift in the Google Pay & Wallet Console. To do so, navigate to your _**Google Pay & Wallet Console**_, select _**Google Pay API**_ in the navigation bar on the left, and then enable _**Fraud Liability Protection for Visa Device Tokens**_ for liability shift protection.\n\nThere are three use cases of Google Pay transactions:\n\n1.  If the user adds a card to the Google Pay app using their mobile device, this card is saved as a Device Primary Account Number (DPAN), and it supports liability shift by default.\n2.  If the user adds a card to Chrome or a Google property (for example, YouTube or Play), this card is saved as a Funding Primary Account Number (FPAN). Liability shift is supported for all major networks, including Visa, globally when [3D Secure](https://docs.stripe.com/payments/3d-secure) is performed. You can customize [Stripe Radar rules](https://docs.stripe.com/radar/rules#request-3d-secure) to request activation of 3D Secure.\n3.  If the user selects Google Pay as the payment method on an e-commerce site or in an app that pays with Google Pay, the cards are saved as e-commerce tokens that represent the cards on file. Neither liability shift nor 3D Secure are supported for e-commerce tokens at this time.\n\nFor Sigma users, the `charges` table contains a `card_token_type` field that indicates the Google Pay transaction type. An FPAN transaction sets the `card_token_type` to `fpan`. DPAN and ecommerce token transactions set the `card_token_type` to `dpan_or_ecommerce_token`.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can partially or fully refund any successful Google Pay payment. The refund process is the same as that for card payments. See [Refund and cancel payments](https://docs.stripe.com/refunds) for instructions on initiating or managing refunds.",
    "title": "Google Pay liability shift, disputes, and refunds | Stripe Documentation",
    "description": "Learn how to manage disputed or refunded Google Pay payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/elements_object/express_checkout_element_confirm_event",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/promotion_codes/object",
    "markdown": "# The Promotion Code object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.\n    \n*   Hash describing the coupon for this promotion code.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    expires\\_atnullable timestamp\n    \n\n*   #### \n    \n    max\\_redemptionsnullable integer\n    \n\nThe Promotion Code object\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```\n\n## [Create a promotion code](https://docs.stripe.com/api/promotion_codes/create)\n\nA promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.\n\n### Parameters\n\n*   The coupon for this promotion code.\n    \n*   The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for a specific customer. If left blank, we will generate one automatically.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns the promotion code object.\n\n```\ncurl https://api.stripe.com/v1/promotion_codes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d coupon=nVJYDOag\n```\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```\n\n## [Update a promotion code](https://docs.stripe.com/api/promotion_codes/update)\n\nUpdates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nThe updated promotion code object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/promotion\\_codes/:id\n\n```\ncurl https://api.stripe.com/v1/promotion_codes/promo_1MiM6KLkdIwHu7ixrIaX4wgn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```\n\n## [Retrieve a promotion code](https://docs.stripe.com/api/promotion_codes/retrieve)\n\nRetrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing `code` use [list](https://docs.stripe.com/api/promotion_codes/list) with the desired `code`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a promotion code if a valid promotion code ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/promotion\\_codes/:id\n\n```\ncurl https://api.stripe.com/v1/promotion_codes/promo_1MiM6KLkdIwHu7ixrIaX4wgn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```\n\n## [List all promotion codes](https://docs.stripe.com/api/promotion_codes/list)\n\nReturns a list of your promotion codes.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` promotion codes, starting after promotion code `starting_after`. Each entry in the array is a separate promotion code object. If no more promotion codes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/promotion_codes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/promotion_codes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",      \"object\": \"promotion_code\",      \"active\": true,      \"code\": \"A1H1Q1MG\",      \"coupon\": {        \"id\": \"nVJYDOag\",        \"object\": \"coupon\",        \"amount_off\": null,        \"created\": 1678040164,        \"currency\": null,        \"duration\": \"repeating\",        \"duration_in_months\": 3,        \"livemode\": false,        \"max_redemptions\": null,        \"metadata\": {},        \"name\": null,        \"percent_off\": 25.5,        \"redeem_by\": null,        \"times_redeemed\": 0,        \"valid\": true      },      \"created\": 1678040164,      \"customer\": null,      \"expires_at\": null,      \"livemode\": false,      \"max_redemptions\": null,      \"metadata\": {},      \"restrictions\": {        \"first_time_transaction\": false,        \"minimum_amount\": null,        \"minimum_amount_currency\": null      },      \"times_redeemed\": 0    }    {...}    {...}  ],}\n```",
    "title": "The Promotion Code object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/sources/multibanco",
    "markdown": "# Multibanco payments with Sources | Stripe DocumentationThe Stripe Docs logo\n\n## Multibanco payments with SourcesBeta\n\n## Use Sources to accept payments using Multibanco, the most popular payment method in Portugal.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently integrate with Multibanco using the Sources API, you must [migrate to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nFor information about integrating Multibanco with the current APIs, see [Multibanco payments](https://docs.stripe.com/payments/multibanco).\n\nStripe users in Europe and the United States can accept Multibanco payments from customers in Portugal using [Sources](https://docs.stripe.com/sources)—a single integration path for creating payments using any supported method.\n\nDuring the payment process, a [Source](https://docs.stripe.com/api#sources) object is created and your customer is either redirected to the Multibanco website, your website, or a Multibanco ATM to send the funds. After completing this, your integration uses the source to make a charge request and complete the payment.\n\nMultibanco is a [push](https://docs.stripe.com/sources#pull-or-push-of-funds)\\-based, [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) method of payment. This means your customer takes action to send the amount to you through a [receiver](https://docs.stripe.com/sources#flow-for-customer-action). The pushing of funds may take as little as a few minutes or at most seven days, since your customer must do this outside of your checkout flow. Once the funds have been received the amount is immediately available to be charged. Upon charge, there is immediate confirmation about the success or failure of a payment.\n\n[](#create-source)\n\nA `Source` object is either created client-side using [Stripe.js](https://docs.stripe.com/payments/elements) or server-side using the [Source creation endpoint](https://docs.stripe.com/api#create_source), with the following parameters:\n\n| Parameter | Value |\n| --- | --- |\n| `type` | **multibanco** |\n| `amount` | A positive integer in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) representing the amount to charge the customer (for example, **1099** for a 10.99 EUR payment). |\n| `currency` | **eur** (Multibanco must always use Euros) |\n| `redirect[return_url]` | The URL the customer should be redirected to after the authorization process. |\n| `owner[email]` | The full email address of the customer. |\n\nTo create a source with [Stripe.js](https://docs.stripe.com/payments/elements), first include the library within your website and set your [publishable API key](https://dashboard.stripe.com/apikeys). Once included, use the following `createSource` method to create a source client-side:\n\n`stripe.createSource({   type: 'multibanco',   amount: 1099,   currency: 'eur',   owner: {     name: 'Jenny Rosen',     email: 'jenny.rosen@example.com',   },   redirect: {     return_url: '__TOKEN_PLACEHOLDER_0__',   }, }).then(function(result) {   // handle result.error or result.source });`\n\nUsing either method, Stripe returns a `Source` object containing the relevant details for the method of payment used. Information specific to Multibanco is provided within the `multibanco` subhash.\n\n`{   \"id\": \"src_16xhynE8WzK49JbAs9M21jaR\",   \"object\": \"source\",   \"amount\": 1099,   \"client_secret\": \"src_client_secret_UfwvW2WHpZ0s3QEn9g5x7waU\",   \"created\": 1445277809,   \"currency\": \"eur\",   \"flow\": \"receiver\",   \"livemode\": true,   \"owner\": {`\n\n### Source creation in mobile applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re building an iOS or Android app, you can implement sources using our mobile SDKs. Refer to our sources documentation for [iOS](https://docs.stripe.com/mobile/ios/sources) or [Android](https://docs.stripe.com/mobile/android/sources) to learn more.\n\n[](#customer-action)\n\nWhen creating a source, its status is initially set to `pending` and cannot yet be used to make a charge request. To pay with Multibanco, your customers will need to initiate a transfer of funds from their bank account using reference and entity numbers provided by you and either their computer, phone, or local ATM.\n\nPortuguese merchants will often display these details within their checkout flow after the customer has confirmed their purchase and by including them in an order confirmation email.\n\nYou may also redirect your customer to a Multibanco-hosted page that will display these details for you, by using the URL provided within the`redirect[url]` attribute of the `Source` object. Multibanco then redirects them back to the URL provided as a value of `redirect[return_url]`, regardless of whether funds have been sent or not.\n\nWhen the customer does send funds, the `Source` object’s status will transition to `chargeable`, allowing you to charge the source and complete the transaction. If you don’t do this, the status will transition to `canceled` after six hours.\n\nStripe populates the `redirect[return_url]` with the following GET parameters when returning your customer to your website:\n\n*   `source`: a string representing the original ID of the `Source` object\n*   `livemode`: indicates if this is a live payment, either `true` or `false`\n*   `client_secret`: used to confirm that the returning customer is the same one who triggered the creation of the source (source IDs are not considered secret)\n\nYou may include any other GET parameters you may need when specifying `redirect[return_url]`. Do not use the above as parameter names yourself as these would be overridden with the values we populate.\n\n### Mobile applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo integrate Multibanco within a mobile application, provide your application URI scheme as the `redirect[return_url]` value. By doing so, your customers are returned to your app after completing authorization. Refer to our Sources documentation for [iOS](https://docs.stripe.com/mobile/ios/sources) or [Android](https://docs.stripe.com/mobile/android/sources) to learn more.\n\n### Testing the redirect and payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a `Source` object using your test API keys, the test payment is fulfilled with a three second delay. Use one of the following test email addresses when you need to test Multibanco payments under different conditions.\n\n| Email | Description |\n| --- | --- |\n| `{any_prefix}+fill_never@{any_domain}` | Funds are never sent to the receiver address. |\n| `{any_prefix}+fill_now@{any_domain}` | The next time that the receiver is retrieved after creation, it has received the full amount. |\n\nThe URL returned in the `redirect[url]` field of takes you to a sample payment page. Returning from this page takes you to the URL specified in `redirect[return_url]`.\n\n[](#charge-request)\n\nOnce the customer has pushed the funds, the source’s `status` transitions to `chargeable` and it can be used to make a charge request. This transition happens asynchronously and may occur after the customer was redirected back to your website.\n\nIt may take minutes, hours, or days for a customer to send the funds after following and returning from the redirect.\n\nFor this reason it is essential that your integration rely on [webhooks](https://docs.stripe.com/webhooks \"webhook\") to determine when the source becomes chargeable in order to create a charge. Please refer to our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n### Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following webhook events are sent to notify you about changes to the source’s status:\n\n| Event | Description |\n| --- | --- |\n| `source.chargeable` | A `Source` object becomes `chargeable` after a customer has authenticated and verified a payment. |\n| `source.failed` | A `Source` object failed to become chargeable as your customer declined to authenticate the payment. |\n| `source.canceled` | A `Source` object expired and cannot be used to create a charge. |\n\n### Make a charge request using the source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnce the source is chargeable, from your `source.chargeable` webhook handler, you can make a charge request using the source ID as the value for the `source` parameter to complete the payment.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=\"1099\" \\   -d currency=\"eur\" \\   -d source=src_18eYalAHEMiOZZp1l9ZTjSU0`\n\nMultibanco Sources are [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and cannot be used for recurring or additional payments. Refer to our [Sources & Customers](https://docs.stripe.com/sources/customers) guide for more information on how single-use Sources interact with [Customers](https://docs.stripe.com/api/customers \"Customers\").\n\n[](#charge-confirmation)\n\nSince Multibanco is a [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) payment method and the customer has already sent funds, unless there is an unexpected error, the [Charge](https://docs.stripe.com/api#charge_object) will immediately succeed.\n\nYou will also receive the following webhook event as the charge is created:\n\n| Event | Description |\n| --- | --- |\n| `charge.succeeded` | The charge succeeded and the payment is complete. |\n\nWe recommend that you rely on the `charge.succeeded` webhook event to notify your customer that the payment process has been completed and their order is confirmed. Please refer to our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n### Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is extremely low with Multibanco as the customer has to push funds from their bank account. As such, there is no dispute process that can result in a chargeback and funds withdrawn from your Stripe account.\n\n### Mispayments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs a customer can make a payment at any time directly through the ATM, it is possible, although unlikely, for a customer to supply funds to a canceled or expired source. In these cases, Stripe automatically initiates the refund process for the mispaid amount as described above.\n\n### Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments made with Multibanco can only be submitted for refund within 180 days from the date of the original charge. After 180 days, it is no longer possible to refund the charge.\n\nMultibanco payments can be refunded through either the [Dashboard](https://dashboard.stripe.com/test/payments) or [API](https://docs.stripe.com/api#create_refund). Multibanco does not itself provide any facility for refunds, and so Stripe handles this by creating an IBAN credit transfer. We contact the customer at the email address provided during source creation, and a credit is sent to the customer once they’ve supplied their account information. No interaction from the merchant is required beyond the initial refund request.\n\nSome users may want to manage the collection of the refund IBAN details themselves. Multibanco refunds require the customer’s IBAN number, account holder name, and the full address including street, city, country, and postal code. Please [contact us](https://support.stripe.com/email) to learn more about this option.\n\n### Sources expiration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA `chargeable` Multibanco source must be charged within six hours of becoming `chargeable`. If it is not, its status is automatically transitioned to `canceled` and your integration receives a `source.canceled` webhook event. Once a chargeable source is canceled, the customer’s authenticated Multibanco payment is refunded automatically—no money is moved into your account. For this reason, make sure the order is canceled on your end and the customer is notified when you receive the `source.canceled` event.\n\nAdditionally, `pending` sources are canceled after seven days if they are not used to receive funds. This ensures that all sources eventually transition out of their `pending` state to the `canceled` state if they are not used.",
    "title": "Multibanco payments with Sources | Stripe Documentation",
    "description": "Use Sources to accept payments using Multibanco, the most popular payment method in Portugal.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/coupons/object",
    "markdown": "# The Coupon object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    amount\\_offnullable integer\n    \n    Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.\n    \n\n*   One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `forever`<br><br>Applies to all charges from a subscription with this coupon applied. |\n    | `once`<br><br>Applies to the first charge from a subscription with this coupon applied. |\n    | `repeating`<br><br>Applies to charges in the first `duration_in_months` months from a subscription with this coupon applied. |\n    \n*   #### \n    \n    duration\\_in\\_monthsnullable integer\n    \n    If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Name of the coupon displayed to customers on for instance invoices or receipts.\n    \n*   #### \n    \n    percent\\_offnullable float\n    \n    Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent\\_off of 50 will make a $100 invoice $50 instead.\n    \n\n### More attributes\n\n*   #### \n    \n    applies\\_tonullable objectExpandable\n    \n\n*   #### \n    \n    currency\\_optionsnullable objectExpandable\n    \n\n*   #### \n    \n    max\\_redemptionsnullable integer\n    \n*   #### \n    \n    redeem\\_bynullable timestamp\n    \n\n```\n{  \"id\": \"jMT0WJUD\",  \"object\": \"coupon\",  \"amount_off\": null,  \"created\": 1678037688,  \"currency\": null,  \"duration\": \"repeating\",  \"duration_in_months\": 3,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"name\": null,  \"percent_off\": 25.5,  \"redeem_by\": null,  \"times_redeemed\": 0,  \"valid\": true}\n```\n\n## [Create a coupon](https://docs.stripe.com/api/coupons/create)\n\nYou can create coupons easily via the [coupon management](https://dashboard.stripe.com/coupons) page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.\n\nA coupon has either a `percent_off` or an `amount_off` and `currency`. If you set an `amount_off`, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of 100 USD will have a final total of 0 USD if a coupon with an `amount_off` of 20000 is applied to it and an invoice with a subtotal of 300 USD will have a final total of 100 USD if a coupon with an `amount_off` of 20000 is applied to it.\n\n### Parameters\n\n*   A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed).\n    \n*   Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed).\n    \n*   Specifies how long the discount will be in effect if used on a subscription. Defaults to `once`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `forever`<br><br>Applies to all charges from a subscription with this coupon applied. |\n    | `once`<br><br>Applies to the first charge from a subscription with this coupon applied. |\n    | `repeating`<br><br>Applies to charges in the first `duration_in_months` months from a subscription with this coupon applied. |\n    \n*   #### \n    \n    duration\\_in\\_monthsinteger\n    \n    Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.\n    \n*   A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed).\n    \n\n### More parameters\n\n### Returns\n\nReturns the coupon object.\n\n```\ncurl https://api.stripe.com/v1/coupons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d duration=repeating \\  -d duration_in_months=3 \\  -d percent_off=\"25.5\"\n```\n\n```\n{  \"id\": \"jMT0WJUD\",  \"object\": \"coupon\",  \"amount_off\": null,  \"created\": 1678037688,  \"currency\": null,  \"duration\": \"repeating\",  \"duration_in_months\": 3,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"name\": null,  \"percent_off\": 25.5,  \"redeem_by\": null,  \"times_redeemed\": 0,  \"valid\": true}\n```\n\n## [Update a coupon](https://docs.stripe.com/api/coupons/update)\n\nUpdates the metadata of a coupon. Other coupon details (currency, duration, amount\\_off) are, by design, not editable.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.\n    \n\n### More parameters\n\n### Returns\n\nThe newly updated coupon object if the call succeeded. Otherwise, this call raises [an error](#errors), such as if the coupon has been deleted.\n\n```\ncurl https://api.stripe.com/v1/coupons/jMT0WJUD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"jMT0WJUD\",  \"object\": \"coupon\",  \"amount_off\": null,  \"created\": 1678037688,  \"currency\": null,  \"duration\": \"repeating\",  \"duration_in_months\": 3,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": null,  \"percent_off\": 25.5,  \"redeem_by\": null,  \"times_redeemed\": 0,  \"valid\": true}\n```\n\n## [Retrieve a coupon](https://docs.stripe.com/api/coupons/retrieve)\n\nRetrieves the coupon with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a coupon if a valid coupon ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/coupons/jMT0WJUD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"jMT0WJUD\",  \"object\": \"coupon\",  \"amount_off\": null,  \"created\": 1678037688,  \"currency\": null,  \"duration\": \"repeating\",  \"duration_in_months\": 3,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"name\": null,  \"percent_off\": 25.5,  \"redeem_by\": null,  \"times_redeemed\": 0,  \"valid\": true}\n```\n\n## [List all coupons](https://docs.stripe.com/api/coupons/list)\n\nReturns a list of your coupons.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` coupons, starting after coupon `starting_after`. Each entry in the array is a separate coupon object. If no more coupons are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/coupons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/coupons\",  \"has_more\": false,  \"data\": [    {      \"id\": \"jMT0WJUD\",      \"object\": \"coupon\",      \"amount_off\": null,      \"created\": 1678037688,      \"currency\": null,      \"duration\": \"repeating\",      \"duration_in_months\": 3,      \"livemode\": false,      \"max_redemptions\": null,      \"metadata\": {},      \"name\": null,      \"percent_off\": 25.5,      \"redeem_by\": null,      \"times_redeemed\": 0,      \"valid\": true    }    {...}    {...}  ],}\n```",
    "title": "The Coupon object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/kr-card/accept-a-payment",
    "markdown": "# Accept a payment using local cards in Korea\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nIntegrating with Korean cards lets South Korea-based customers pay using all local issuer-branded cards issued by South Korean card issuers.\n\nWhen a customer makes a payment, they are redirected to the checkout page of our local processor partner to authenticate and authorize the payment. After the customer authorizes the payment, Stripe redirects them back to your site.\n\n[](#compatibility)\n\n[A Checkout Session](https://docs.stripe.com/payments/checkout/how-checkout-works) must satisfy all of the following conditions to support Korean payment methods:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Korean won (currency code `krw`).\n*   The minimum amount accepted is 100 KRW.\n\n[](#accept-a-kr-card-payment)\n\nEnable Korean cards by making the following updates to your integration.\n\nWhen creating a [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you must do the following:\n\n*   Add `kr_card` to the list of `payment_method_types`.\n*   Make sure all `line_items` use the `krw` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'kr_card'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `kr_card`, all line items must have currency: krw       currency: 'krw',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n[](#test-integration)\n\nWhile testing your Checkout integration, select **Local cards** and click **Pay**. This redirects you to a Stripe-hosted page where you have the choice to authorize or fail the payment. If you authorize the payment, the PaymentIntent switches from `requires_action` to `succeeded`. Failing the test payment makes the PaymentIntent switch from `requires_action` to `requires_payment_method`. Learn more about how to [test](https://docs.stripe.com/testing#redirects) redirect-based payment methods.",
    "title": "Accept a payment using local cards in Korea | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/cards/object",
    "markdown": "# The Card object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    address\\_citynullable string\n    \n    City/District/Suburb/Town/Village.\n    \n*   #### \n    \n    address\\_countrynullable string\n    \n    Billing address country, if provided when creating card.\n    \n*   #### \n    \n    address\\_line1nullable string\n    \n    Address line 1 (Street address/PO Box/Company name).\n    \n*   #### \n    \n    address\\_line2nullable string\n    \n    Address line 2 (Apartment/Suite/Unit/Building).\n    \n*   #### \n    \n    address\\_statenullable string\n    \n    State/County/Province/Region.\n    \n*   #### \n    \n    address\\_zipnullable string\n    \n    ZIP or postal code.\n    \n*   #### \n    \n    address\\_zip\\_checknullable string\n    \n    If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.\n    \n*   Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.\n    \n*   Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.\n    \n*   If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn’t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).\n    \n*   Two-digit number representing the card’s expiration month.\n    \n*   Four-digit number representing the card’s expiration year.\n    \n*   #### \n    \n    fingerprintnullable string\n    \n    Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n    \n    _As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card—one for India and one for the rest of the world._\n    \n*   Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.\n    \n*   The last four digits of the card.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Cardholder name.\n    \n\n### More attributes\n\n*   #### \n    \n    accountnullable stringExpandableAvailable conditionally\n    \n*   #### \n    \n    address\\_line1\\_checknullable string\n    \n*   #### \n    \n    available\\_payout\\_methodsnullable array of enums\n    \n*   #### \n    \n    currencynullable enumAvailable conditionally\n    \n*   #### \n    \n    dynamic\\_last4nullable string\n    \n*   #### \n    \n    tokenization\\_methodnullable string\n    \n*   #### \n    \n    walletnullable objectPreview feature\n    \n\n```\n{  \"id\": \"card_1MvoiELkdIwHu7ixOeFGbN9D\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"customer\": \"cus_NhD8HD2bY8dP3V\",  \"cvc_check\": null,  \"dynamic_last4\": null,  \"exp_month\": 4,  \"exp_year\": 2024,  \"fingerprint\": \"mToisGZ01V71BCos\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [Create a card](https://docs.stripe.com/api/cards/create)\n\nWhen you create a new credit card, you must specify a customer or recipient on which to create it.\n\nIf the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should [update the customer](https://docs.stripe.com/api#update_customer) to have a new `default_source`.\n\n### Parameters\n\n*   #### \n    \n    sourceobject | stringRequired\n    \n    A token, like the ones returned by [Stripe.js](https://docs.stripe.com/js) or a dictionary containing a user’s card details (with the options shown below). Stripe will automatically validate the card.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the `Card` object.\n\nPOST /v1/customers/:id/sources\n\n```\ncurl https://api.stripe.com/v1/customers/cus_9s6XGDTHzA66Po/sources \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d source=tok_visa\n```\n\n```\n{  \"id\": \"card_1NGTaT2eZvKYlo2CZWSctn5n\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"customer\": \"cus_9s6XGDTHzA66Po\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [Update a card](https://docs.stripe.com/api/cards/update)\n\nUpdates a specified card for a given customer.\n\n### Parameters\n\n*   City/District/Suburb/Town/Village.\n    \n*   Billing address country, if provided when creating card.\n    \n*   Address line 1 (Street address/PO Box/Company name).\n    \n*   Address line 2 (Apartment/Suite/Unit/Building).\n    \n*   State/County/Province/Region.\n    \n*   ZIP or postal code.\n    \n*   Two digit number representing the card’s expiration month.\n    \n*   Four digit number representing the card’s expiration year.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Cardholder name.\n    \n\n### Returns\n\nPOST /v1/customers/:id/sources/:id\n\n```\ncurl https://api.stripe.com/v1/customers/acct_1032D82eZvKYlo2C/sources/card_1NBLeN2eZvKYlo2CIq1o7Pzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Jenny Rosen\"\n```\n\n```\n{  \"id\": \"card_1NBLeN2eZvKYlo2CIq1o7Pzs\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/cards/retrieve)\n\nYou can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Card` object.\n\nGET /v1/customers/:id/cards/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NhD8HD2bY8dP3V/cards/card_1MvoiELkdIwHu7ixOeFGbN9D \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1MvoiELkdIwHu7ixOeFGbN9D\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"customer\": \"cus_NhD8HD2bY8dP3V\",  \"cvc_check\": null,  \"dynamic_last4\": null,  \"exp_month\": 4,  \"exp_year\": 2024,  \"fingerprint\": \"mToisGZ01V71BCos\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [List all cards](https://docs.stripe.com/api/cards/list)\n\nYou can see a list of the cards belonging to a customer. Note that the 10 most recent sources are always available on the `Customer` object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional cards.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the cards stored on the customer.\n\nGET /v1/customers/:id/cards\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NhD8HD2bY8dP3V/cards \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NhD8HD2bY8dP3V/cards\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_1MvoiELkdIwHu7ixOeFGbN9D\",      \"object\": \"card\",      \"address_city\": null,      \"address_country\": null,      \"address_line1\": null,      \"address_line1_check\": null,      \"address_line2\": null,      \"address_state\": null,      \"address_zip\": null,      \"address_zip_check\": null,      \"brand\": \"Visa\",      \"country\": \"US\",      \"customer\": \"cus_NhD8HD2bY8dP3V\",      \"cvc_check\": null,      \"dynamic_last4\": null,      \"exp_month\": 4,      \"exp_year\": 2024,      \"fingerprint\": \"mToisGZ01V71BCos\",      \"funding\": \"credit\",      \"last4\": \"4242\",      \"metadata\": {},      \"name\": null,      \"tokenization_method\": null,      \"wallet\": null    }    {...}    {...}  ],}\n```",
    "title": "The Card object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/kakao-pay/accept-a-payment",
    "markdown": "# Accept a payment using Kakao Pay in Korea\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nIntegrating with [Kakao Pay](https://www.kakaopay.com/) enables South Korea-based customers to pay using this popular local payment method.\n\nWhen a customer makes a payment, they are redirected to the checkout page of our local processor partner to authenticate and authorize the payment. After the customer authorizes the payment, Stripe redirects them back to your site.\n\n[](#compatibility)\n\n[A Checkout Session](https://docs.stripe.com/payments/checkout/how-checkout-works) must satisfy all of the following conditions to support Korean payment methods:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Korean won (currency code `krw`).\n*   The minimum amount accepted is 100 KRW, and the maximum amount accepted is 2,000,000 KRW.\n\n[](#accept-a-kakao-pau-payment)\n\nEnable Kakao Pay by making the following updates to your integration.\n\nWhen creating a [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you must do the following:\n\n*   Add `kakao_pay` to the list of `payment_method_types`.\n*   Make sure all `line_items` use the `krw` currency.\n*   Provide the buyer’s email address.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'kakao_pay'],   payment_method_data: {     kakao_pay: {},     billing_details: {       email: \"jane.diaz@stripe.com\"     }   line_items: [{     price_data: {       currency: 'usd',       # To accept `kakao_pay`, all line items must have currency: krw       currency: 'krw',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n[](#test-integration)\n\nWhile testing your Checkout integration, select **Kakao Pay** and click **Pay**. This redirects you to a Stripe-hosted page where you have the choice to authorize or fail the payment. If you authorize the payment, the PaymentIntent switches from `requires_action` to `succeeded`. Failing the test payment makes the PaymentIntent switch from `requires_action` to `requires_payment_method`. Learn more about how to [test](https://docs.stripe.com/testing#redirects) redirect-based payment methods.",
    "title": "Accept a payment using Kakao Pay in Korea | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/naver-pay/accept-a-payment",
    "markdown": "# Accept a payment using Naver Pay in Korea\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nIntegrating with [Naver Pay](https://pay.naver.com/) enables South Korea-based customers to pay using this popular local payment method.\n\nWhen a customer makes a payment, we redirect them to our local processor partner’s checkout page to authenticate and authorize the payment. After the customer authorizes the payment, we redirect them back to your site.\n\nCustomers can optionally use their Naver Pay points to pay for their purchase.\n\n[](#compatibility)\n\n[A Checkout Session](https://docs.stripe.com/payments/checkout/how-checkout-works) must satisfy all of the following conditions to support Korean payment methods:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Korean won (currency code `krw`).\n*   The minimum amount accepted is 100 KRW, and the maximum amount accepted is 2,000,000 KRW.\n\n[](#accept-a-naver-pay-payment)\n\nEnable Naver Pay by making the following updates to your integration.\n\nWhen creating a [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you must do the following:\n\n*   Add `naver_pay` to the list of `payment_method_types`.\n*   Make sure all `line_items` use the `krw` currency.\n*   Specify either `point` or `card` to use Naver Pay points or card, respectively.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'naver_pay'],   payment_method_data: {     naver_pay: {       funding: 'point' # or card   },   line_items: [{     price_data: {       currency: 'usd',       # To accept `naver_pay`, all line items must have currency: krw       currency: 'krw',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n[](#test-integration)\n\nWhile testing your Checkout integration, select **Naver Pay** and click **Pay**. This redirects you to a Stripe-hosted page where you have the choice to authorize or fail the payment. If you authorize the payment, the PaymentIntent switches from `requires_action` to `succeeded`. Failing the test payment makes the PaymentIntent switch from `requires_action` to `requires_payment_method`. Learn more about how to [test](https://docs.stripe.com/testing#redirects) redirect-based payment methods.",
    "title": "Accept a payment using Naver Pay in Korea | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/pay-by-bank",
    "markdown": "# Pay by Bank payments | Stripe DocumentationThe Stripe Docs logo\n\nYou can refund Pay by Bank payments for up to 730 days (2 years) after the original payment. You can refund part of the original payment or the entire amount of the original payment. Refunds are free of charge but the processing fees for the original payment are non-refundable.\n\nStripe sends the refund back to the same bank account that initiated the payment. Refunds usually happen the same day but happen the next day if the refund was initiated after the cutoff time (5pm London time). We’ll notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the status of the [Refund](https://docs.stripe.com/api/refunds/object) object transitions to `succeeded`.\n\nA refund can fail if the customer’s bank can’t process it correctly (for example, the bank account is closed). In the rare instance that a refund fails, the status of the Refund object transitions to `failed`. We’ll return the amount of the refund to your Stripe balance. You’ll then need to arrange an alternative way of providing your customer with a refund.",
    "title": "Pay by Bank payments | Stripe Documentation",
    "description": "Learn about Pay by Bank, a new real-time payment method in the UK powered by Open Banking.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payto",
    "markdown": "# PayTo payments | Stripe DocumentationThe Stripe Docs logo\n\n## PayTo paymentsInvite only\n\n## Learn about PayTo, a real-time payment method in Australia.\n\nPayTo is a real-time payment method in Australia for accepting one-time and recurring payments. When paying with PayTo, customers [authenticate and approve](https://docs.stripe.com/payments/payment-methods#customer-actions) agreements using their mobile banking app.\n\nYou get [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed. Stripe typically sends a notification of the final status of the payment within 30 seconds of the agreement authorization.\n\n*   **Customer locations**\n    \n    Australia\n    \n*   **Presentment currency**\n    \n    AUD\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Real-time payments\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    [Standard payout timing](https://docs.stripe.com/payouts#payout-speed) applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds and partial refunds**\n    \n    Yes, yes\n    \n\n## Payment flows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers pay with PayTo by using one of the following methods:\n\n*   **PayID**: Customers can provide a PayID, a unique identifier linked to a customer’s bank account, to initiate agreement authorization.\n    \n*   **Account and BSB Numbers**: Customers can provide their bank account details to initiate agreement authorization.\n    \n\nIn both cases, customers receive a request from their bank to authorize the PayTo agreement. This request typically surfaces through a push notification or by email.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayTo is only available [on the Payment Element](https://docs.stripe.com/payments/payto/accept-a-payment?ui=elements) or [through a direct API integration](https://docs.stripe.com/payments/payto/accept-a-payment?ui=direct-api). It isn’t available in any other Stripe-hosted UIs or through [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods).\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRefund PayTo payments by calling the [Stripe Refunds API](https://docs.stripe.com/api/refunds) or using the Dashboard. You can refund a PayTo payment up to 2 years after the original payment. Customers typically receive refunds in their bank accounts within 2 days, but some banks might take up to 10 days to process a PayTo refund.\n\nPayTo supports full and partial refunds. You can also issue multiple partial refunds up to the amount of the original charge.\n\nFor PayTo payments made using PayID, Stripe sends an email to the customer to collect their bank account details before processing the refund.\n\n## PayTo with Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with PayTo to process payments on behalf of a connected account. Connect users can use PayTo with the following charge types:\n\n### Enable PayTo for connected accounts that use the Stripe Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReach out to your Stripe representative to enable PayTo for connected accounts that use the Stripe Dashboard or [email us](mailto:payto-support@stripe.com). These connect accounts must onboard manually.\n\n### Enable PayTo for connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo onboard connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe, request the `payto_payments` capability using the [Capabilities API](https://docs.stripe.com/api/capabilities). For more details, follow the instructions to [enable payment methods for your connected accounts](https://docs.stripe.com/connect/account-capabilities).\n\n## Transaction limits and other considerations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAcross the banks, PayTo performs best for recurring transactions, and transactions below 1,000 AUD. PayTo performance might vary depending on the buyer’s bank, their account type, and the frequency of payments. Each bank can enforce additional measures to manage risk and prevent fraud.\n\nSee the documentation linked below for more details on bank-specific considerations.",
    "title": "PayTo payments | Stripe Documentation",
    "description": "Learn about PayTo, a real-time payment method in Australia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payco/accept-a-payment",
    "markdown": "# Accept a payment using PayCo in Korea\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nIntegrating with [PayCo](https://www.payco.com/) enables South Korea-based customers to pay using this popular local payment method.\n\nWhen a customer makes a payment, we redirect them to our local processor partner’s checkout page to authenticate and authorize the payment. After the customer authorizes the payment, we redirect them back to your site.\n\n[](#compatibility)\n\n[A Checkout Session](https://docs.stripe.com/payments/checkout/how-checkout-works) must satisfy all of the following conditions to support Korean payment methods:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Korean won (currency code `krw`).\n*   The minimum amount accepted is 100 KRW, and the maximum amount accepted is 2,000,000 KRW.\n\n[](#accept-a-payco-payment)\n\nEnable PayCo by making the following updates to your integration.\n\nWhen creating a [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you must do the following:\n\n*   Add `payco` to the list of `payment_method_types`.\n*   Make sure all `line_items` use the `krw` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'payco'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `payco`, all line items must have currency: krw       currency: 'krw',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n[](#test-integration)\n\nWhile testing your Checkout integration, select **PayCo** and click **Pay**. This redirects you to a Stripe-hosted page where you have the choice to authorize or fail the payment. If you authorize the payment, the PaymentIntent switches from `requires_action` to `succeeded`. Failing the test payment makes the PaymentIntent switch from `requires_action` to `requires_payment_method`. Learn more about how to [test](https://docs.stripe.com/testing#redirects) redirect-based payment methods.",
    "title": "Accept a payment using PayCo in Korea | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/dashboard/customize-iban-country",
    "markdown": "# Customize the IBAN country | Stripe DocumentationThe Stripe Docs logo\n\n## Customize the country of the IBAN when using bank transfers.\n\nThere are multiple ways you can collect payment for your [invoice](https://docs.stripe.com/api/invoices \"invoices\"), one of which is [Bank Transfer](https://docs.stripe.com/invoicing/bank-transfer). With this payment method, customers pay the invoice by transferring funds to a bank account, at which point Stripe reconciles the funds. The invoice provides the bank account details, and an International Bank Account Number (IBAN).\n\nIn general, it’s the merchant’s location that governs the country of the IBAN. If the merchant is part of the Single Euro Payments Area (SEPA), however, you can configure the IBAN country to one of the following: `DE`, `ES`, `FR`, `IE` or `NL`.\n\n1.  Follow the steps in the [Create an invoice](https://docs.stripe.com/invoicing/dashboard#create-invoice) section. Choose **Bank transfer** as a payment method.\n    \n    #### Note\n    \n    Manage your default payment method preferences in [Settings](https://dashboard.stripe.com/settings/billing/invoice).\n    \n2.  Select the country of your choice from the **European IBAN country** drop-down menu (`DE`, `ES`, `FR`, `IE` or `NL`).",
    "title": "Customize the IBAN country | Stripe Documentation",
    "description": "Customize the country of the IBAN when using bank transfers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/payment_intents/handle_next_action",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/link/express-checkout-element-link",
    "markdown": "# Link in the Express Checkout Element\n\n`const appearance = { /* appearance */ } const options = { /* options */ } const elements = stripe.elements({   mode: 'payment',   amount: 1099,   currency: 'usd',   appearance, }) const expressCheckoutElement = elements.create('expressCheckout', options) expressCheckoutElement.mount('#express-checkout-element')`",
    "title": "Link in the Express Checkout Element | Stripe Documentation",
    "description": "Let customers check out faster with Link and the Express Checkout Element.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/grabpay/accept-a-payment",
    "markdown": "# Accept a GrabPay payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nGrabPay is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method. Customers pay with GrabPay by redirecting from your website to GrabPay to authorize the payment. After that, they will automatically be redirected back to your website. You will get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\nAssets such as logos and payment buttons are provided in the [branding guidelines](https://docs.stripe.com/payments/grabpay#branding-guidelines) section.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support GrabPay payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n*   The `sgd` currency is supported for businesses based in Singapore.\n*   The `myr` currency is supported for businesses based in Malaysia.\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) Checkout integration.\n\nThis guides you through enabling GrabPay and shows the differences between accepting a card payment and using GrabPay.\n\n### Enable GrabPay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `grabpay` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the same currency\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'grabpay'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `grabpay`, all line items must have currency: sgd, myr       currency: 'sgd',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select GrabPay as the payment method and click the **Pay** button.",
    "title": "Accept a GrabPay payment | Stripe Documentation",
    "description": "Learn how to accept GrabPay, a common payment method in Southeast Asia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/wechat-pay/accept-a-payment",
    "markdown": "# Accept a WeChat Pay payment\n\n**Supported business locations**: AU, AT, BE, BG, CA, CY, CZ, DK, EE, FI, FR, DE, GR, HK, HU, IE, IT, JP, LV, LT, LU, MT, NL, NO, PL, PT, RO, SG, SK, SI, ES, SE, CH, GB, US\n\n**Supported currencies**: `aud, cad, cny, eur, gbp, hkd, jpy, sgd, usd, dkk, nok, sek, chf`\n\n**Presentment currencies**: `aud, cad, cny, eur, gbp, hkd, jpy, sgd, usd, dkk, nok, sek, chf`\n\n**Payment mode**: Yes\n\n**Setup mode**: Not yet\n\n**Subscription mode**: Not yet\n\nA Checkout Session must satisfy all of the following conditions to support WeChat Pay payments:",
    "title": "Accept a WeChat Pay payment | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/visa-checkout",
    "markdown": "# Stripe payments with Visa Checkout\n\n## Stripe payments with Visa CheckoutDeprecated\n\n## Accept payments via Visa Checkout in your existing Stripe integration.\n\n#### Warning\n\nVisa terminated support for [Visa Checkout](https://usa.visa.com/pay-with-visa/visa-checkout.html) in favor of [Secure Remote Commerce](https://docs.stripe.com/secure-remote-commerce), which delivers unified online checkout supporting multiple of card brands. Stripe doesn’t support new Visa Checkout integrations and existing Visa Checkout integrations must migrate to Secure Remote Commerce as soon as possible.\n\nVisa Checkout is a third-party service that stores payment and shipping information for its users in order to streamline the checkout process. Instead of entering payment information on your checkout page, users can click the Visa Checkout button instead. Your Stripe integration receives a unique ID that it can use to create a charge against the payment information stored in the user’s Visa Checkout account.\n\n## Integrating the Visa Checkout button ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo get started, generate your **Visa Checkout API key** in the [Dashboard](https://dashboard.stripe.com/account/payments/settings). There are two keys, a sandbox key that you can use in test mode, and a production key that works in live mode.\n\nTo use Visa Checkout on your website, add the following script tag to the end of your document’s body tag:\n\nTo display the Visa Checkout button, use the following image:\n\nTo initialize the button, add an `onVisaCheckoutReady` function that invokes `V.init`:\n\n`function onVisaCheckoutReady() {   V.init({     apikey: '{{VISA_CHECKOUT_ID}}',     paymentRequest:{       subtotal: '10.00',       currencyCode: 'USD'     },     settings: {       displayName: 'My Website'     }   }); }`\n\nThe Visa Checkout JavaScript SDK automatically invokes the `onVisaCheckoutReady` function when it finishes loading. The `paymentRequest` property accepted by `V.init` requires the following parameters:\n\n| Parameter | Description |\n| --- | --- |\n| `subtotal` | The amount of the transaction, expressed in decimal format |\n| `currencyCode` | The currency in which to perform the transaction |\n\nBy default, American Express, MasterCard, Visa, and Discover card brands are accepted, all shipping and billing countries are also enabled.\n\nFor more details about the `V.init` function and the parameters that it accepts, [refer](https://developer.visa.com/images2/products/visa_checkout/VisaCheckoutMerchantDocs.zip) to Visa’s documentation. There are optional `paymentRequest` properties that support a range of other features, including promotions, discounts, and taxes. There are also optional `settings` properties that allow you to control the shipping information options.\n\n## Completing the payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen the user clicks the Visa Checkout button on your checkout page, it opens a lightbox where they can select an existing payment method from their account or input a new one. When the user completes the process, the Visa Checkout JavaScript SDK in the browser emits a `payment.success` event with a unique ID that your application can use to complete the transaction.\n\nThe following code shows how to handle the `payment.success` event and [confirm](https://docs.stripe.com/api/payment_intents/confirm) the [PaymentIntent](https://docs.stripe.com/api/payment_intents) you created at the beginning of the checkout flow. See [accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web) to learn how to manage your checkout flow using Payment Intents.\n\n`// PaymentIntent client secret passed from server-side. // See: https://stripe.com/docs/payments/accept-a-payment?platform=web // for more information on how to do this. const clientSecret = '{{CLIENT_SECRET}}';  V.on('payment.success', async (payment) => {   const intent = await stripe.confirmCardPayment(clientSecret, {     payment_method: {       card: {         visa_checkout: {           callid: payment.callid,         },       },     },   });   // Perform logic for payment completion here });`\n\n## Testing Visa Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo test your integration against Visa Checkout’s sandbox, create a new Visa Checkout user account during the checkout process on your website. Configure the account to use the test card number **4242 4242 4242 4242**, a random three-digit CVC number, and any expiration date in the future. Complete the checkout process as normal. If everything works correctly, Visa Checkout redirects you back to your application, which creates the charge as expected.",
    "title": "Stripe payments with Visa Checkout | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/masterpass",
    "markdown": "# Masterpass guide | Stripe DocumentationThe Stripe Docs logo\n\n## Masterpass guideDeprecated\n\n## Accept payments via Masterpass in your existing Stripe integration.\n\n#### Warning\n\nMastercard plans to deprecate Masterpass in favor of [Secure Remote Commerce](https://docs.stripe.com/secure-remote-commerce), which delivers unified online checkout supporting a number of card brands. Stripe doesn’t support new Masterpass integrations and existing integrations must migrate to Secure Remote Commerce as soon as possible.\n\nMasterpass is a third-party service that stores payment and shipping information for its users in order to streamline the checkout process. Instead of entering payment information on your checkout page, users can click the Masterpass button instead. Your Stripe integration receives a unique transaction ID that it can use to create a charge against the payment information stored in the user’s Masterpass account.\n\n## Integrating the Masterpass button ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo get started, generate your Masterpass **Checkout ID** in the [Dashboard](https://dashboard.stripe.com/account/payments/settings) and configure your sandbox and production callback URLs.\n\nTo use Masterpass on your website, add the following script tag to your HTML document:\n\nTo display the Masterpass button, use the following image:\n\nAttach a click handler to the image and use it to invoke the `masterpass.checkout` function with the desired parameters:\n\n`let button = document.getElementById(\"mpbutton\");  button.addEventListener(\"click\", ev =>   masterpass.checkout({     checkoutId: \"{MASTERPASS_CHECKOUT_ID}\",     allowedCardTypes: [\"master\", \"amex\", \"visa\"],     amount: \"10.00\",     currency: \"USD\",     cartId: \"{UNIQUE_ID}\",     callbackUrl: \"{CALLBACK_URL}\"   }));`\n\nThe `masterpass.checkout` function requires the following parameters:\n\n| Parameter | Description |\n| --- | --- |\n| `checkoutId` | The Checkout ID for your Masterpass project, copied from the [Dashboard](https://dashboard.stripe.com/account/payments/settings) |\n| `allowedCardTypes` | A list of the Masterpass-compatible payment providers that you want to support |\n| `amount` | The amount of the transaction, expressed in decimal format |\n| `currency` | The currency in which to perform the transaction |\n| `cartId` | A unique string that you generate to identify the purchase |\n| `callbackUrl` | (Optional) Overrides the default `callbackUrl` configured when activating Masterpass. |\n\nFor more details about the `masterpass.checkout` function and the parameters that it accepts, [refer](https://developer.mastercard.com/documentation/masterpass-merchant-integration-v7/7#standard-checkout1) to Mastercard’s documentation.\n\n## Completing the payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen the user clicks the Masterpass button on your checkout page, it takes them to the Masterpass website where they can select an existing payment method from their account or input a new one. When the user completes the process, Masterpass redirects them to the callback URL that you configured when activating Masterpass, or the specified callback URL when invoking `masterpass.checkout` function. It appends an `oauth_verifier` URL query parameter that your application can use to complete the transaction.\n\nIn the route handler for the redirect destination, extract the URL query parameter and use it to [confirm](https://docs.stripe.com/api/payment_intents/confirm) the [PaymentIntent](https://docs.stripe.com/api/payment_intents) that you have created at the beginning of the checkout flow. See [accept a payment](https://docs.stripe.com/payments/accept-a-payment) to learn how to manage your checkout flow using Payment Intents.\n\nThe following code example demonstrates how to confirm a PaymentIntent with Masterpass in Node.js with the Express framework:\n\n`app.get('/callback', async (req, res) => {   // retrieve the PaymentIntent ID created at the beginning of the checkout flow.   const payment_intent_id = '{{PAYMENT_INTENT_ID}}';    const payment_intent = await stripe.paymentIntents.confirm(payment_intent_id, {     amount: 1000,     currency: 'usd',     payment_method_data: {       type: 'card',       card: {         masterpass: {           cart_id: '{{UNIQUE_ID}}',           transaction_id: req.query.oauth_verifier,         },       },     },   });    res.send('<h1>Charge succeeded</h1>'); });`\n\nUse the Masterpass sandbox environment in Stripe’s test mode, and the Masterpass production environment in Stripe’s live mode. When creating the source, be sure to use the same unique value for the `cart_id` property that you used on your checkout page.\n\n## Testing Masterpass ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo test your Masterpass integration against Mastercard’s sandbox, create a new Masterpass user account during the checkout process on your website. Configure the account to use one of the [test cards](https://developer.mastercard.com/page/masterpass-sandbox-testing-guidelines#new-web-experience) from the Masterpass documentation. Complete the checkout process as normal, selecting the test card as your Masterpass payment method. If everything works correctly, Masterpass redirects you back to your application, which creates the charge as expected.",
    "title": "Masterpass guide | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/revolut-pay/accept-a-payment",
    "markdown": "# Accept a payment with Revolut Pay\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nRevolut Pay is a [reusable](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Customers pay by being redirected from your website or app, authorizing the payment with Revolut Pay, then returning to your website or app. You get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) of whether the payment succeeded or failed.\n\n[](#compatibility)\n\nTo support Revolut Pay payments, a Checkout Session must satisfy all of the following conditions:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency.\n    *   If you have line items in different currencies, create separate Checkout Sessions for each currency.\n\nRecurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are supported.\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nThis guide describes how to enable Revolut Pay and shows the differences between accepting a card payment and using Revolut Pay.\n\n### Enable Revolut Pay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `revolut_pay` to the list of `payment_method_types`.\n2.  Make sure all `line_items` use the same currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'revolut_pay'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `revolut_pay`, all line items must have currency: eur, gbp       currency: 'gbp',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Revolut Pay as the payment method and click the **Pay** button.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/merchant_checkout_revolut_pay_visible.de0ad2427b3548dda777da6fc9b421dc.png)",
    "title": "Accept a payment with Revolut Pay | Stripe Documentation",
    "description": "Learn about Revolut Pay, a digital wallet payment method used in the United Kingdom and the European Union.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/revolut-pay/set-up-future-payments",
    "markdown": "# Set up future Revolut Pay payments\n\nThis guide covers how to save a Revolut Pay payment details using [Checkout](https://docs.stripe.com/payments/checkout), our fully hosted checkout page.\n\nLearn how to [set up a subscription with Revolut Pay](https://docs.stripe.com/billing/subscriptions/revolut-pay) to create recurring payments after saving a payment method in Checkout.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-permissions)\n\nIf you save your customer’s payment method for future use, you need permission. Creating an agreement (sometimes called a mandate) up front allows you to save your customer’s payment details, and potentially charge your customer when they’re not actively using your website or app.\n\nAdd terms to your website or app that state how you plan to save your customer’s payment method details, and let your customer opt in. If you plan to charge your customer when they’re offline, make sure that your terms also cover the following:\n\n*   The customer’s permission to your initiating a payment or a series of payments on their behalf for specified transactions\n*   The anticipated frequency (that is, one-time or recurring) and timing of payments\n*   How you determine the payment amount\n*   Your cancellation policy, if you’re setting the payment method up for a subscription service\n\nMake sure that you keep a record of your customer’s written agreement to these terms.\n\n[](#web-create-customer)\n\nTo reuse a Revolut Pay payment method for future payments, attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a [Customer object](https://docs.stripe.com/api/customers) when your customer creates an account with your business, and associate the ID of the Customer object with your own internal representation of a customer. Alternatively, you can create a new Customer before saving a payment method for future payments.\n\nCreate a new Customer or retrieve an existing Customer to associate with this payment. Include the following code on your server to create a new Customer:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode description=\"My First Test Customer (created for API docs)\"`\n\n[](#web-create-checkout-session)\n\nYour customer must authorize you to use their Revolut account for future payments through Stripe Checkout. This allows you to accept Revolut payments. Add a checkout button to your website that calls a server-side endpoint to create a [Checkout Session](https://docs.stripe.com/api/checkout/sessions).\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Checkout Session in `setup` mode to collect the required information. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) that the response returns.\n\n[](#web-test-integration)\n\nSelect Revolut Pay as the payment method, then click **Continue to Revolut Pay**. You can test the successful setup case by authenticating the SetupIntent on the redirect page. The SetupIntent transitions from requires\\_action to succeeded.",
    "title": "Set up future Revolut Pay payments | Stripe Documentation",
    "description": "Learn how to save Revolut Pay details and charge your customers later.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/payment-method-available-countries",
    "markdown": "# Country availability for payment methods\n\n## Review countries supported by each payment method.\n\nSome payment methods are only available in certain countries. You can review country availability below, or use the [capabilities API](https://docs.stripe.com/connect/required-verification-information) to query if an account is eligible to use a payment method.\n\n### ACH Direct Debit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Affirm![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Afterpay Clearpay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Apple Pay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Bacs Direct Debit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Bancontact![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Bank Transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### BECS Debit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Boleto![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### BLIK![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Canadian pre-authorized debit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Cartes Bancaires![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Cash App Pay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### EPS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### FPX![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Giropay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Google Pay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### GrabPay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### iDEAL![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### JCB Japan![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Klarna![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Konbini![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### MobilePay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Multibanco![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### OXXO![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### P24![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Pay by Bank![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### PayNow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Pix![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### PromptPay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### SEPA Debit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Sofort![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Swish![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWas this page helpful?\n\nYesNo\n\nNeed help? [Contact Support](https://support.stripe.com/).\n\nJoin our [early access program](https://insiders.stripe.dev/).\n\nCheck out our [product changelog](https://stripe.com/blog/changelog).\n\nQuestions? [Contact Sales](https://stripe.com/contact/sales).\n\nPowered by [Markdoc](https://markdoc.dev/)\n\nSign up for developer updates:\n\nYou can unsubscribe at any time. Read our [privacy policy](https://stripe.com/privacy).",
    "title": "Country availability for payment methods | Stripe Documentation",
    "description": "Review countries supported by each payment method.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/acss-debit/custom-pad-agreement",
    "markdown": "# Custom Canadian pre-authorized debit mandate agreements\n\n#### Caution\n\nIt is unlikely your business needs to create a custom mandate agreement. By default, the Stripe.js library provides an all-in-one solution for your customers to provide and verify their bank account and accept a valid mandate.\n\n## Do you need a custom mandate agreement?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHere are some reasons _not to_ create a custom mandate agreement:\n\n*   You want to send customized emails\n*   You want to specify custom payment schedule terms\n\nIt is possible to send customized emails using the same mandate agreement text provided in the customer payment details collection solution. Simply match the same text provided by Stripe in your own emails.\n\nIf you want to specify a custom payment schedule, this can be done using the Stripe API. The mandate agreement automatically displayed to your customers will use the payment schedule terms you provide.\n\nHere are some reasons you might want to create a custom mandate agreement:\n\n*   You want to obtain authorization from your customer to not send debit notification emails\n*   You want to provide different or additional cancellation or recourse terms that satisfy [Payments Canada rules](https://www.payments.ca/sites/default/files/h1eng.pdf)\n\nThe mandate agreement provided by default is specifically written to serve the needs of almost all businesses on Stripe. It uses the most flexible timelines for confirmation and cancellation allowed by Canadian banks and satisfies all requirements given by the [Payments Canada Rules for pre-authorized debits](https://www.payments.ca/sites/default/files/h1eng.pdf). Though there are very few reasons to create a custom agreement, not all businesses are the same. This page will help your business create a valid mandate agreement that will protect both you and your customers.\n\n## Background![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to collecting a customer’s name and bank account information, you must collect specific debit mandate (often called a pre-authorized debit agreement). This mandate gives your business authorization to debit the customer’s bank account on a specified schedule. Your business must present and collect a mandate agreement with clear and specific terms for one-time or recurring debits that meets the requirements given by the [Payments Canada rules](https://www.payments.ca/sites/default/files/h1eng.pdf).\n\nParts of the agreement will be pre-defined based on the mandate you create [with the Stripe API](https://docs.stripe.com/payments/acss-debit/accept-a-payment#web-create-payment-intent) (for example the `interval_description` defining your payment timeline or triggers) and existing information about your customers. This page will guide you through the remaining required parts of a mandate agreement, but your business will ultimately be responsible for any disputes arising from its contents.\n\nAfter your customer accepts the mandate agreement, you can immediately debit the first payment due from your customer’s account. You must send your customer confirmation of the accepted mandate agreement, including collected payment details. The mandate agreement must include terms that allow you to immediately debit the bank account and send the confirmation within 5 days after your customer has accepted the mandate agreement. By default, Stripe sends a [customizable agreement confirmation email](https://docs.stripe.com/payments/acss-debit#mandate-and-debit-notification-emails) matching the [sample below](#sample-pre-authorized-debit-agreement).\n\nPre-debit notification emails informing your customer that a charge is being made and the amount of the charge is a requirement, as well. However, the time limit for these can be modified or they can be waived entirely in the agreement.\n\n## Mandate agreement requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA properly formatted PAD mandate agreement must include the following information in order to meet regulatory requirements:\n\n| Requirement | Description | Example Text |\n| --- | --- | --- |\n| Business Contact Information | The mandate agreement must contain accurate contact information that the customer can use to contact your business by a method of communication your customer uses. | Rocket Rides<br><br>Attn: Billing Department<br><br>123 First Avenue<br><br>Toronto, ON<br><br>M2J 3R7<br><br>Email: billing@rocket-rides.com |\n| Date of Agreement Acceptance | Somewhere in the agreement presented to customer, the date of the agreement acceptance must be shown. | Accepted on: April 8, 2024 |\n| Pre-authorized debit Type | This value is determined by the type of transaction for which you are collecting this mandate agreement. It must be based on the mandate object `transaction_type` value. | *   Personal<br>*   Business |\n| Authority to Debit Account with Variable Amounts | A clear statement outlining your customer’s agreement that your business is authorized to debit the account given. | By clicking \\[“submit application”, “submit” or “I accept”\\], you accept this agreement and authorize _Rocket Rides_ to debit the specified bank account for any amount owed for charges resulting from the use of services or purchase of products. |\n| Payment Schedule or Triggers | Required only if [Mandate](https://docs.stripe.com/api/mandates) `payment_schedule` is `interval` or `combined`.<br><br>The mandate agreement must display the [Mandate](https://docs.stripe.com/api/mandates) `interval_description` value, which should contain an explicit schedule of payments or triggering events for debits. | *   On the 5th of every month or the next business day.<br>*   On April 30, 2020.<br>*   When issued invoices become due.<br>*   When your RocketBucks balance goes below $20. |\n| Sporadic Authorization | Required only if [Mandate](https://docs.stripe.com/api/mandates) `payment_schedule` is `sporadic` or `combined`.<br><br>The mandate agreement must state that your business will obtain authorization (such as providing a username and password) from your customer for each sporadic payment you process. | _Rocket Rides_ may debit the specified account for sporadic payments only after obtaining your authorization. |\n| Modification of PAD Confirmation Period | In order to improve the speed with which you can do business, Stripe performs verification on customer bank accounts that allows your business to begin debiting after a PAD is accepted so long as the Customer has agreed to this in the mandate agreement. | You agree that any payment due will be debited from your account immediately upon acceptance of this PAD agreement and that confirmation of this PAD agreement will be sent within five calendar days after acceptance. |\n| Modification of Pre-Notification Period | Stripe supports the ability to send required pre-debit notification emails to your customer (or provide webhooks that notify you to send them) when debits are initiated. Your customer must agree to waive the pre-notification period. This text must be bolded, highlighted or underlined in the mandate agreement text.<br><br>Pre-notifications are required if not expressly waived. If you opt out of sending these emails, the text for waiving the pre-notification must be included instead, also bolded, highlighted or underlined. | *   **You waive the right to receive pre-notification and prior confirmation of the amount or timing of any PAD.**<br>*   **You additionally agree that you don’t require advance notice of the amount or timing of any PAD before Rocket Rides processes the debit.** |\n| Recourse / Reimbursement Statement | The mandate agreement must contain this exact text in its entirety. | You have certain recourse rights if any debit doesn’t comply with this PAD agreement. For example, you have the right to receive reimbursement for any debit that isn’t authorized or isn’t consistent with this PAD Agreement. To obtain more information on your recourse rights, contact your financial institution or visit [www.payments.ca](https://www.payments.ca/). |\n| Cancellation of Agreement | A statement outlining a customer’s ability to revoke their authorization at any time, specifying an amount of notice required by your business. | You can amend or cancel this authorization at any time by providing the business with thirty days’ prior notice at _billing@rocket-rides.com_. To obtain a sample cancellation form, or further information on canceling a PAD agreement, contact your financial institution or visit [www.payments.ca](https://www.payments.ca/). |\n| Notice of Use of a Payment Service Provider | The mandate agreement must disclose Stripe as the payment service provider. | _Rocket Rides_ partners with [Stripe](http://stripe.com/) to provide payment processing. |\n\nThis sample document illustrates what a complete mandate agreement might look like, both in your payment flow and in the confirmation email sent to your customers.\n\n123 First Avenue  \nToronto, ON  \nM2J 3R7  \nEmail: billing@rocket-rides.com\n\nPre-authorized debit agreement\n\n  \n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| Date | April 30, 2020 | Type | Business |\n| Account Holder |     | Email |     |\n| Institution |     | Transit |     |\n| Account # |     |     |     |\n\nBy clicking submit, you accept this agreement and authorize _Rocket Rides_ to debit the specified bank account for any amount owed for charges resulting from the use of services or purchase of products.\n\n  \n\nPayments will be debited from the specified account according to the following schedule:  \n`On the 5th of every month`\n\nDisplaying payment schedules or triggers is only required if `payment_schedule` is `interval` or `combined`\n\n_Rocket Rides_ may debit the specified account for sporadic payments only after obtaining your authorization\n\nDisplaying terms for sporadic payments is only required if `payment_schedule` is `sporadic` or `combined`\n\nWhere a scheduled debit date is not a business day, _Rocket Rides_ will debit on the next business day.\n\nYou agree that any payment due will be debited from your account immediately upon acceptance of this PAD agreement and that confirmation of this PAD agreement will be sent within five calendar days after acceptance. You waive the right to receive pre-notification and prior confirmation of the amount or timing of any PAD. You further agree that you don't require advance notice of the amount or timing of any PAD before Rocket Rides processes the debit.\n\nYou have certain recourse rights if any debit doesn't comply with this PAD agreement. For example, you have the right to receive reimbursement for any debit that isn't authorized or isn't consistent with this PAD Agreement. To obtain more information on your recourse rights, contact your financial institution or visit [www.payments.ca](https://www.payments.ca/).\n\nYou can amend or cancel this authorization at any time by providing the business with thirty days' prior notice at billing@rocket-rides.com. To obtain a sample cancellation form, or further information on cancelling a PAD agreement, please contact your financial institution or visit [www.payments.ca](https://www.payments.ca/).\n\n_Rocket Rides_ partners with [Stripe](https://stripe.com/) to provide payment processing.",
    "title": "Custom Canadian pre-authorized debit mandate agreements | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/acss-debit/set-up-payment",
    "markdown": "# Save details for future payments with pre-authorized debit in Canada\n\n## Learn how to save payment method details for future Canadian pre-authorized debit payments.\n\nYou can use the [Setup Intents API](https://docs.stripe.com/payments/setup-intents) to collect payment method details in advance, with the final amount or payment date determined later. This is useful for:\n\n*   Saving payment methods to a wallet to streamline future purchases\n*   Collecting surcharges after fulfilling a service\n*   Starting a free trial for a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\")\n\n### Presentment currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost bank accounts in Canada hold Canadian dollars (CAD), with a small number of accounts in other currencies, including US dollars (USD). It is possible to accept PAD payments in either CAD or USD, but choosing the correct currency for your customer is important to avoid payment failures.\n\nUnlike many card-based payment methods, you might not be able to successfully debit a CAD account in USD or debit a USD account in CAD. Most often, attempting to do so results in a delayed payment failure that takes up to five business days.\n\nTo avoid these failures, it is safest to set up PAD bank accounts in CAD unless you are confident your customer’s account accepts USD debits.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-customer)\n\nTo reuse a bank account for future payments, it must be attached to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nYou should create a Customer object when your customer creates an account with your business. Associating the ID of the Customer object with your own internal representation of a customer enables you to retrieve and use the stored payment method details later. If your customer hasn’t created an account, you can still create a Customer object now and associate it with your internal representation of the customer’s account later.\n\nCreate a new Customer or retrieve an existing Customer to associate with these payment details. Include the following code on your server to create a new Customer.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#web-create-setup-intent)\n\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent to set up a customer’s payment method for future payments. The `SetupIntent` tracks the steps of this set-up process.\n\nIn order to use Canadian pre-authorized debits, you must obtain authorization from your customer for one-time and recurring debits using a pre-authorized debit agreement (see [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates)). The [Mandate](https://docs.stripe.com/api/mandates) object records this agreement and authorization.\n\nCreate a SetupIntent on your server with [payment\\_method\\_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types) set to `acss_debit` and specify the Customer’s [id](https://docs.stripe.com/api/customers/object#customer_object-id). In order to define a payment schedule on the [Mandate](https://docs.stripe.com/api/mandates) for this SetupIntent, also include the following parameters:\n\n| Parameter | Value | Required? |\n| --- | --- | --- |\n| `payment_method_options[acss_debit][currency]` | Currency to use for future payments with this payment method. Must match the customer’s bank account currency. Accepted values are `cad` or `usd`. | Yes |\n| `payment_method_options[acss_debit][mandate_options][payment_schedule]` | The mandate payment schedule. Accepted values are `interval`, `sporadic`, or `combined`. See the [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates) overview to help you select the right schedule for your business. | Yes |\n| `payment_method_options[acss_debit][mandate_options][interval_description]` | Text description of the interval of payment schedule. See the [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates) overview to help you construct the right interval description for your business. | If `payment_schedule` specified as `interval` or `combined` |\n| `payment_method_options[acss_debit][mandate_options][transaction_type]` | The type of the mandate you are creating, either `personal` (if your customer is an individual) or `business` (if your customer is a business). | Yes |\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=acss_debit \\  -d customer={{CUSTOMER_ID}} \\   -d \"payment_method_options[acss_debit][currency]\"=cad \\  -d \"payment_method_options[acss_debit][mandate_options][payment_schedule]\"=interval \\  -d \"payment_method_options[acss_debit][mandate_options][interval_description]\"=\"First day of every month\" \\  -d \"payment_method_options[acss_debit][mandate_options][transaction_type]\"=personal`\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SetupIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the SetupIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[\n\n## Collect payment method details and mandate acknowledgement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-collect-mandate-and-submit)\n\nWhen a customer clicks to pay with Canadian pre-authorized debit, we recommend you use Stripe.js to submit the payment to Stripe. [Stripe.js](https://docs.stripe.com/payments/elements) is our foundational JavaScript library for building payment flows. It will automatically handle integration complexities, and enables you to easily extend your integration to other payment methods in the future.\n\nInclude the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\nRather than sending the entire PaymentIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") from the previous step. This is different from your API keys that authenticate Stripe API requests.\n\nThe client secret should still be handled carefully because it can complete the charge. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.confirmAcssDebitSetup](https://docs.stripe.com/js/setup_intents/confirm_acss_debit_setup) to collect bank account details and verification, confirm the mandate, and complete the setup when the user submits the form. Including the customer’s email address and the account holder’s name in the `billing_details` property of the `payment_method` parameter is required to create a PAD payment method.\n\n`const form = document.getElementById('payment-form'); const accountholderName = document.getElementById('accountholder-name'); const email = document.getElementById('email'); const submitButton = document.getElementById('submit-button'); const clientSecret = submitButton.dataset.secret;  form.addEventListener('submit', async (event) => {   event.preventDefault();    const {setupIntent, error} = await stripe.confirmAcssDebitSetup(     clientSecret,     {       payment_method: {         billing_details: {           name: accountholderName.value,           email: email.value,         },       },     }   );    if (error) {     // Inform the customer that there was an error.     console.log(error.message);   } else {       // Handle next step based on SetupIntent's status.       console.log(\"SetupIntent ID: \" + setupIntent.id);       console.log(\"SetupIntent status: \" + setupIntent.status);   } });`\n\nStripe.js then loads an on-page modal UI that handles bank account details collection and verification, presents a hosted mandate agreement and collects authorization.\n\n#### Note\n\n`stripe.confirmAcssDebitSetup` may take several seconds to complete. During that time, disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error, show it to the customer, re-enable the form, and hide the waiting indicator.\n\nIf successful, Stripe returns a [SetupIntent](https://docs.stripe.com/api/setup_intents/object) object, with one of the following possible statuses:\n\n| Status | Description | Next step |\n| --- | --- | --- |\n| `succeeded` | The bank account has been instantly verified or verification was not necessary. | No action needed |\n| `requires_action` | Further action needed to complete bank account verification. | Step 5: [Verifying bank accounts with micro-deposits](#web-verify-with-microdeposits) |\n\nAfter successfully confirming the SetupIntent, an email confirmation of the mandate and collected bank account details must be sent to your customer. Stripe handles these by default, but you can choose to [send custom notifications](https://docs.stripe.com/payments/acss-debit#mandate-and-debit-notification-emails) if you prefer.\n\n#### Note\n\nMandate confirmation emails will not be sent to the customer’s email address when testing the integration.\n\nIf the customer chooses to close the modal without completing the verification flow, Stripe.js returns the following error:\n\n`{   \"error\": {     \"type\": \"validation_error\",     \"code\": \"incomplete_payment_details\",     \"message\": \"Please provide complete payment details.\"   } }`\n\n[](#web-verify-with-microdeposits)\n\nNot all customers can verify the bank account instantly. This step only applies if your customer has elected to opt out of the instant verification flow in the previous step.\n\nIn this case, Stripe automatically sends two micro-deposits to the customer’s bank account. These deposits take one to two business days to appear on the customer’s online statement and have statement descriptors that include `ACCTVERIFY`.\n\nThe result of the `stripe.confirmAcssDebitSetup` method call is a SetupIntent in the `requires_action` state. The SetupIntent contains a `next_action` field that contains some useful information for completing the verification.\n\nStripe notifies your customer at the [billing email](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details-email) when the deposits are expected to arrive. The email includes a link to a Stripe-hosted verification page where they can confirm the amounts of the deposits and complete verification.\n\nThere is a limit of three failed verification attempts. If this limit is exceeded, the bank account can no longer be verified. In addition, there is a timeout for micro-deposit verifications of 10 days. If micro-deposits are not verified in that time, the PaymentIntent reverts to requiring new payment method details. Clear messaging about what these micro-deposits are and how you use them can help your customers avoid verification issues.\n\n### Optional: Custom email and verification page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you choose to send [custom email notifications](https://docs.stripe.com/payments/acss-debit#mandate-and-debit-notification-emails), you have to email your customer instead. To do this, you can use the `verify_with_microdeposits[hosted_verification_url]` URL in the `next_action` object to direct your customer to complete the verification process.\n\nIf you are sending custom emails and don’t want to use the Stripe hosted verification page, you can create a form on your site for your customers to relay these amounts to you and verify the bank account using [Stripe.js](https://docs.stripe.com/js/payment_intents/verify_microdeposits_for_payment).\n\n`stripe.verifyMicrodepositsForSetup(clientSecret, {   amounts: [32, 45], });`\n\nWhen the bank account is successfully verified, Stripe returns the [SetupIntent object](https://docs.stripe.com/api/setup_intents/object), with a `status` of `succeeded`, and sends a `setup_intent.succeeded` webhook event.\n\nVerification can fail for several reasons. The failure may happen synchronously as a direct error response, or asynchronously through a `setup_intent.payment_failed` webhook event (shown in the following examples).\n\n`{   \"error\": {     \"code\": \"payment_method_microdeposit_verification_amounts_mismatch\",     \"message\": \"The amounts provided do not match the amounts that were sent to the bank account. You have {attempts_remaining} verification attempts remaining.\",     \"type\": \"invalid_request_error\"   } }`\n\n| Error Code | Synchronous or asynchronous | Message | Status Change |\n| --- | --- | --- | --- |\n| `payment_method_microdeposit_failed` | Synchronously, or asynchronously through webhook event | Microdeposits failed. Please check the account, institution and transit numbers provided | `status` is `requires_payment_method`, and `last_setup_error` is set. |\n| `payment_method_microdeposit_verification_amounts_mismatch` | Synchronously | The amounts provided do not match the amounts that were sent to the bank account. You have {attempts\\_remaining} verification attempts remaining. | Unchanged |\n| `payment_method_microdeposit_verification_attempts_exceeded` | Synchronously, and asynchronously through webhook event | Exceeded number of allowed verification attempts | `status` is `requires_payment_method`, and `last_setup_error` is set. |\n| `payment_method_microdeposit_verification_timeout` | Asynchronously through webhook event | Microdeposit timeout. Customer hasn’t verified their bank account within the required 10 day period. | `status` is `requires_payment_method`, and `last_setup_error` is set. |\n\n[](#web-test-integration)\n\n### Receive micro-deposit verification email![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn order to receive the micro-deposit verification email in test mode after collecting the bank account details and accepting a mandate, provide an email in the `payment_method[billing_details][email]` field in the form of `{any_prefix}+test_email@{any_domain}` when confirming the payment method details.\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers you can use to make sure your integration for manually-entered bank accounts is ready for production. All test accounts that automatically succeed or fail the payment must be verified using the test micro-deposit amounts below before they can be completed.\n\n| Institution Number | Transit Number | Account Number | Scenario |\n| --- | --- | --- | --- |\n| `000` | `11000` | `000123456789` | Succeeds the payment immediately after micro-deposits are verified. |\n| `000` | `11000` | `900123456789` | Succeeds the payment with a three-minute delay after micro-deposits are verified. |\n| `000` | `11000` | `000222222227` | Fails the payment immediately after micro-deposits are verified. |\n| `000` | `11000` | `900222222227` | Fails the payment with a three-minute delay after micro-deposits are verified. |\n| `000` | `11000` | `000666666661` | Fails to send verification micro-deposits. |\n\nTo mimic successful or failed bank account verifications in test mode, use these meaningful amounts for micro-deposits:\n\n| Micro-deposit Values | Scenario |\n| --- | --- |\n| `32` and `45` | Successfully verifies the account. |\n| Any other number combinations | Fails account verification. |",
    "title": "Save details for future payments with pre-authorized debit in Canada | Stripe Documentation",
    "description": "Learn how to save payment method details for future Canadian pre-authorized debit payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/fpx/accept-a-payment",
    "markdown": "# Accept an FPX payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nFPX is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method. Customers pay with FPX by redirecting from your website, sending you payment, then returning to your website where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support FPX payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable FPX—it shows the differences between accepting a card payment and using FPX.\n\n### Enable FPX as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `fpx` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `myr` currency\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'fpx'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `fpx`, all line items must have currency: myr       currency: 'myr',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n### Confirmation page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFPX requires showing your customer their transaction information after they’ve completed their payment. Follow the [custom success page](https://docs.stripe.com/payments/checkout/custom-success-page) guide to learn how to customize your success page.\n\nWhen customizing, you’ll need to retrieve the Charge object directly from the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge) object using the PaymentIntent ID from your Checkout Session and display the following information on your `success_url` page.\n\n| Information | Source of information |\n| --- | --- |\n| Transaction Date & Time | `created` from the `Charge` object. |\n| Amount | `amount` from the `Charge` object. |\n| Seller Order No. | `statement_descriptor` from the `Charge` object. |\n| FPX Transaction ID | `payment_method_details[fpx][transaction_id]` from the `Charge` object. |\n| Buyer Bank Name | `payment_method_details[fpx][bank]` from the `Charge` object |\n| Transaction Status | `status` from the `Charge` object |\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select FPX as the payment method and click the **Pay** button.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for FPX is up to 60 days after the original payment.\n\nThere is no dispute process—customers authenticate with their bank.",
    "title": "Accept an FPX payment | Stripe Documentation",
    "description": "Learn how to accept FPX, a common payment method in Malaysia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/bancontact/accept-a-payment",
    "markdown": "# Accept a Bancontact payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nBancontact is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay with Bancontact by redirecting from your website, authorizing the payment, then returning to your website where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n#### Note\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Bancontact payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Euro (currency code `eur`).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable Bancontact—shows the differences between accepting a card payment and using Bancontact.\n\n### Enable Bancontact as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `bancontact` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `eur` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'bancontact'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `bancontact`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nThere are no special test numbers required for Bancontact.\n\nWhen testing your Checkout integration, select Bancontact as the payment method and click the **Pay** button.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for Bancontact is up to 180 days after the original payment.\n\nThere is no dispute process—customers authenticate with their bank.",
    "title": "Accept a Bancontact payment | Stripe Documentation",
    "description": "Learn how to accept Bancontact, a common payment method in Belgium.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/bancontact/set-up-payment",
    "markdown": "# Use Bancontact to set up future SEPA Direct Debit payments\n\nBancontact is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) each payment. With this integration, Stripe charges your customer 0.02 EUR through Bancontact to collect their bank details. After your customer authenticates the payment, Stripe refunds the payment and stores your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) in a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) payment method. You can then use the SEPA Direct Debit [PaymentMethod](https://docs.stripe.com/api/payment_methods) to [accept payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment) or [set up a subscription](https://docs.stripe.com/billing/subscriptions/sepa-debit).\n\nYou can use [Checkout in setup mode](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) to collect payment details and set up future SEPA Direct Debit payments using Bancontact.\n\n[](#create-retrieve-customer)\n\nTo set up future SEPA Direct Debit payments using Bancontact, you must attach the SEPA Direct Debit payment method to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a `Customer` object when your customer creates an account with your business. You can retrieve and use a customer’s stored payment method details later if you associate the ID of the `Customer` object with your own internal representation of the customer.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#setup-a-payment)\n\nThis guide builds on the foundational [set up future payments](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) Checkout integration and describes how to enable Bancontact—it shows the differences between setting up future payments for cards and using Bancontact.\n\n### Enable Bancontact as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to add `bancontact` to the list of `payment_method_types`.\n\n[](#charge-sepa-pm)\n\nWhen you need to charge your customer again, create a new PaymentIntent. Find the ID of the SEPA Direct Debit payment method by [retrieving](https://docs.stripe.com/api/setup_intents/retrieve) the SetupIntent and [expanding](https://docs.stripe.com/api/expanding_objects) the `latest_attempt` field where you will find the `generated_sepa_debit` ID inside of `payment_method_details`.\n\n`curl -G https://api.stripe.com/v1/setup_intents/{{SETUP_INTENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=latest_attempt`\n\nCreate a PaymentIntent with the SEPA Direct Debit and Customer IDs.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=sepa_debit \\  -d amount=1099 \\  -d currency=eur \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method={{SEPA_DEBIT_PAYMENT_METHOD_ID}} \\   -d confirm=true`\n\n[](#testing)\n\nWhen testing your Checkout integration, select Bancontact as the payment method and click the **Pay** button.",
    "title": "Use Bancontact to set up future SEPA Direct Debit payments | Stripe Documentation",
    "description": "Learn how to save bank details from a Bancontact payment and charge your customers later with SEPA Direct Debit.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/bancontact/save-during-payment",
    "markdown": "# Save bank details during a Bancontact payment\n\n## Learn how to save your customer's IBAN bank details from a Bancontact payment.\n\n#### Caution\n\nBancontact is a popular [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method in Belgium where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay with Bancontact by redirecting from your website, authorizing the payment, then returning to your website where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\nYou can use Bancontact to save your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) bank details into a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"). You can then use the SEPA Direct Debit PaymentMethod to [accept payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment) or [set up a subscription](https://docs.stripe.com/billing/subscriptions/sepa-debit). This reduces friction for your customer as they don’t have to enter their IBAN again. You also receive their verified name and validated IBAN.\n\n#### Caution\n\nAccepting Bancontact payments consists of creating a [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object to track a payment, collecting payment method details and mandate acknowledgement, and submitting the payment to Stripe for processing. Stripe uses the PaymentIntent to track and handle all the states of the payment until the payment completes. Use the ID of the SEPA Direct Debit [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") collected from your initial Bancontact PaymentIntent to create future payments.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-customer)\n\nCreate a [Customer](https://docs.stripe.com/api/customers \"Customers\") when they create an account with your business and associate it with your internal representation of their account. This enables you to retrieve and use their saved payment method details later.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#web-create-payment-intent)\n\nCreate a `PaymentIntent` on your server and specify the `amount` to collect, the `eur` currency, the customer ID, and off\\_session as an argument for [setup future usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage). If you have an existing [Payment Intents](https://docs.stripe.com/payments/payment-intents) integration, add `bancontact` to the list of [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=eur \\  -d \"payment_method_types[]\"=bancontact \\  -d customer={{CUSTOMER_ID}} \\   -d setup_future_usage=off_session`\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the PaymentIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[](#web-collect-payment-method-details)\n\nCreate a payment form on your client to collect the required billing details from the customer.\n\n​​To process SEPA Direct Debit payments, you must collect a mandate agreement from your customer. Display the following standard authorization text for your customer to implicitly sign the mandate.\n\nReplace _Rocket Rides_ with your company name.\n\nAuthorization text template\n\nBy providing your payment information and confirming this payment, you authorise (A)\n\nRocket Rides\n\nReplace this with your company name\n\nand Stripe, our payment service provider, to send instructions to your bank to debit your account and (B) your bank to debit your account in accordance with those instructions. As part of your rights, you are entitled to a refund from your bank under the terms and conditions of your agreement with your bank. A refund must be claimed within 8 weeks starting from the date on which your account was debited. Your rights are explained in a statement that you can obtain from your bank. You agree to receive notifications for future debits up to 2 days before they occur.\n\n​​Setting up a payment method or confirming a PaymentIntent creates the accepted mandate. As the customer has implicitly signed the mandate, you must communicate these terms in your form or through email.\n\n| Field | Value |\n| --- | --- |\n| `name` | The full name (first and last) of the customer. |\n| `email` | The customer’s email. |\n\n`<form id=\"payment-form\">   <div class=\"form-row\">     <label for=\"name\">       Name     </label>     <input id=\"name\" name=\"name\" required>   </div>    <div class=\"form-row\">     <label for=\"email\">       Email     </label>     <input id=\"email\" name=\"email\" required>   </div>    <button id=\"submit-button\">Pay with Bancontact</button>    <!-- Display mandate acceptance text. -->   <div id=\"mandate-acceptance\">     By providing your payment information and confirming this payment, you     authorise (A) Rocket Rides and Stripe, our payment service provider, to     send instructions to your bank to debit your account and (B) your bank to     debit your account in accordance with those instructions. As part of your     rights, you are entitled to a refund from your bank under the terms and     conditions of your agreement with your bank. A refund must be claimed     within 8 weeks starting from the date on which your account was debited.     Your rights are explained in a statement that you can obtain from your     bank. You agree to receive notifications for future debits up to 2 days     before they occur.   </div>   <!-- Used to display form errors. -->   <div id=\"error-message\" role=\"alert\"></div> </form>`\n\n[](#web-submit-payment)\n\nCreate a payment on the client side with the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent. The client secret is different from your API keys that authenticate Stripe API requests. It should be handled carefully because it can complete the charge. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\nCall [stripe.confirmBancontactPayment](https://docs.stripe.com/js/payment_intents/confirm_bancontact_payment) to redirect your customer to Bancontact’s website or app to complete the payment. Include a [return\\_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url) to redirect your customer after they complete the payment. You must also provide the customer’s full name and email in `billing_details`.\n\n`var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); var accountholderName = document.getElementById('name'); var accountholderEmail = document.getElementById('email');  // Redirects away from the client const {error} = await stripe.confirmBancontactPayment(   '{{PAYMENT_INTENT_CLIENT_SECRET}}',   {     payment_method: {       billing_details: {         name: accountholderName.value,         email: accountholderEmail.value,       },     },     return_url: 'https://example.com/checkout/complete',   } );  if (error) {   // Inform the customer that there was an error. }`\n\nWhen your customer submits a payment, Stripe redirects them to the `return_url` and includes the following URL query parameters. The return page can use them to get the status of the PaymentIntent so it can display the payment status to the customer.\n\nWhen you specify the `return_url`, you can also append your own query parameters for use on the return page.\n\n| Parameter | Description |\n| --- | --- |\n| `payment_intent` | The unique identifier for the `PaymentIntent`. |\n| `payment_intent_client_secret` | The [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` object. |\n\nWhen the customer is redirected back to your site, you can use the `payment_intent_client_secret` to query for the PaymentIntent and display the transaction status to your customer.\n\n[](#web-charge-sepa-pm)\n\nWhen you need to charge your customer again, create a new PaymentIntent. Find the ID of the SEPA Direct Debit payment method by [retrieving](https://docs.stripe.com/api/payment_intents/retrieve) the previous PaymentIntent and [expanding](https://docs.stripe.com/api/expanding_objects) the `latest_charge` field where you will find the `generated_sepa_debit` ID inside of `payment_method_details`.\n\n`curl -G https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=latest_charge`\n\nThe SEPA Direct Debit payment method ID is the `generated_sepa_debit` ID under [payment\\_method\\_details](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-ideal) in the response.\n\n`{   \"latest_charge\": {     \"payment_method_details\": {       \"bancontact\": {         \"bank_code\": \"VAPE\",         \"bank_name\": \"VAN DE PUT & CO\",         \"bics\": \"VAPEBE22\",         \"iban_last4\": \"7061\",         \"generated_sepa_debit\": \"pm_1GrddXGf98efjktuBIi3ag7aJQ\",         \"preferred_language\": \"en\",         \"verified_name\": \"Jenny Rosen\"       },       \"type\": \"bancontact\"     },   },   \"payment_method_options\": {     \"bancontact\": {}`\n\nCreate a PaymentIntent with the SEPA Direct Debit and Customer IDs.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=sepa_debit \\  -d amount=1099 \\  -d currency=eur \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method={{SEPA_DEBIT_PAYMENT_METHOD_ID}} \\   -d confirm=true`\n\n[](#test-your-integration)\n\nSet `payment_method.billing_details.email` to one of the following values to test the PaymentIntent status transitions. You can include your own custom text at the beginning of the email address followed by an underscore. For example, `test_1_generatedSepaDebitIntentsFail@example.com` results in a SEPA Direct Debit PaymentMethod that always fails when used with a PaymentIntent.\n\n| Email Address | Description |\n| --- | --- |\n| `generatedSepaDebitIntentsSucceed@example.com` | The PaymentIntent status transitions from `processing` to `succeeded`. |\n| `generatedSepaDebitIntentsSucceedDelayed@example.com` | The PaymentIntent status transitions from `processing` to `succeeded` after three minutes. |\n| `generatedSepaDebitIntentsFail@example.com` | The PaymentIntent status transitions from `processing` to `requires_payment_method`. |\n| `generatedSepaDebitIntentsFailDelayed@example.com` | The PaymentIntent status transitions from `processing` to `requires_payment_method` after three minutes. |\n| `generatedSepaDebitIntentsSucceedDisputed@example.com` | The PaymentIntent status transitions from `processing` to `succeeded`, but a dispute is created immediately. |\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Accept a SEPA Direct Debit payment](https://docs.stripe.com/payments/sepa-debit/accept-a-payment)\n*   [Set up a subscription with SEPA Direct Debit in the EU](https://docs.stripe.com/billing/subscriptions/sepa-debit)",
    "title": "Save bank details during a Bancontact payment | Stripe Documentation",
    "description": "Learn how to save your customer's IBAN bank details from a Bancontact payment.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/paynow/accept-a-payment",
    "markdown": "# Accept a PayNow payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nPayNow is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method. Customers pay with PayNow by scanning the QR code that they see during Checkout. Completing the payment redirects customers back to your website.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support PayNow payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency, and must be in `sgd`.\n*   You can only use one-time line items (PayNow Checkout Sessions don’t support recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans).\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) Checkout integration.\n\nThis guides you through enabling PayNow and shows the differences between accepting a card payment and using PayNow.\n\n### Enable PayNow as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `paynow` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the same currency\n\n`Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['paynow'],   # or you can take multiple payment methods with   # payment_method_types: ['card', 'paynow', ...]   line_items: [{     price_data: {       currency: 'sgd',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })`\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select PayNow as the payment method and click the **Generate QR code** button, which creates and renders a QR code.\n\nIn test mode, scan the QR code with a QR code scanning application on your mobile device. The QR code payload contains a URL which brings you to a Stripe-hosted PayNow test payment page where you can either authorize or fail the test payment.\n\nIn live mode, you will be able to scan the QR code using a preferred banking app or payment app that supports PayNow.",
    "title": "Accept a PayNow payment | Stripe Documentation",
    "description": "Learn how to accept payments with PayNow, a funds transfer service popular in Singapore.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/eps/accept-a-payment",
    "markdown": "# Accept an EPS payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nEPS is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay with EPS by redirecting from your website, authorizing the payment, then returning to your website where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n#### Note\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support EPS payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to enable EPS—it shows the differences between accepting a card payment and using EPS.\n\n### Enable EPS as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `eps` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `eur` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'eps'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `eps`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select EPS as the payment method and click the **Pay** button.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for EPS is up to 180 days after the original payment.\n\nThere is no dispute process—customers authenticate with their bank.",
    "title": "Accept an EPS payment | Stripe Documentation",
    "description": "Learn how to accept EPS, a common payment method in Austria.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/twint/accept-a-payment",
    "markdown": "# TWINT payments | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nTWINT is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method used in Switzerland. It allows customers to [authenticate and approve](https://docs.stripe.com/payments/payment-methods#customer-actions) payments using an approved TWINT mobile app.\n\nYou get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support TWINT:\n\n*   You must express [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items in Swiss Franc (currency code `chf`).\n\n[](#accept-a-twint-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nEnable TWINT by making the following updates to your card payment integration.\n\nWhen creating a [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you must:\n\n*   Add `twint` to the list of `payment_method_types`.\n*   Make sure all `line_items` use the `chf` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'twint'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `twint`, all line items must have currency: chf       currency: 'chf',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select ‘TWINT’ as the payment method and click **Pay**.",
    "title": "TWINT payments | Stripe Documentation",
    "description": "Learn how to accept TWINT, a popular payment method in Switzerland.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/giropay/accept-a-payment",
    "markdown": "# Accept a giropay payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\ngiropay is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay with giropay by redirecting from your website, authorizing the payment, then returning to your website where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed. Because giropay is a single use payment method, it isn’t compatible with [SetupIntents](https://docs.stripe.com/api/setup_intents).\n\n#### Note\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support giropay payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable giropay—it shows the differences between accepting a card payment and using giropay.\n\n### Enable giropay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `giropay` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `eur` currency\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'giropay'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `giropay`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select giropay as the payment method and click the **Pay** button.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for giropay is up to 180 days after the original payment.\n\nThere is no dispute process—customers authenticate with their bank.",
    "title": "Accept a giropay payment | Stripe Documentation",
    "description": "Learn how to accept giropay, a common payment method in Germany.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/p24/accept-a-payment",
    "markdown": "# Accept a Przelewy24 payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\n[Przelewy24](https://www.przelewy24.pl/) is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay with Przelewy24 by redirecting from your website, authorizing the payment, then returning to your website where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Przelewy24 payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?ui=stripe-hosted) Checkout integration.\n\nUse this guide to learn how to enable Przelewy24—it shows the differences between accepting a card payment and using Przelewy24.\n\n### Enable Przelewy24 as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `p24` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the same currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'p24'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `p24`, all line items must have currency: eur, pln       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Przelewy24 as the payment method and click the **Pay** button.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for Przelewy24 is up to 180 days after the original payment.\n\nThere is no dispute process—customers authenticate with their bank.",
    "title": "Accept a Przelewy24 payment | Stripe Documentation",
    "description": "Learn how to accept Przelewy24 (P24), the most popular payment method in Poland.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/afterpay-clearpay/accept-a-payment",
    "markdown": "# Accept an Afterpay or Clearpay payment\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nAfterpay is a [single use](https://docs.stripe.com/payments/payment-methods#usage), [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Customers are redirected to the Afterpay site, where they agree to the terms of an installment plan. When the customer accepts the terms, Afterpay guarantees that the funds are available to the customer and transfers the funds to your Stripe account. The customer repays Afterpay directly over time.\n\n#### Note\n\nBefore you start the integration, make sure your account is eligible for Afterpay by navigating to your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Afterpay payments:\n\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n*   You must express [Prices](https://docs.stripe.com/api/prices \"Prices\") in your domestic currency.\n*   Shipping addresses must be provided.\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?ui=stripe-hosted) Checkout integration.\n\nUse this guide to learn how to enable Afterpay—it shows the differences between accepting a card payment and using Afterpay.\n\n### Enable Afterpay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `afterpay_clearpay` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use your domestic currency.\n3.  Collect shipping addresses by adding your country to `shipping_address_collection[allowed_countries]`. If you don’t collect shipping addresses with Checkout, provide the shipping address using `payment_intent_data[shipping]`.\n\n`Stripe::Checkout::Session.create({       mode: 'payment',       payment_method_types: ['card'],       payment_method_types: ['card', 'afterpay_clearpay'],       line_items: [{         price_data: {           currency: 'usd',           product_data: {             name: 'T-shirt',           },           # Make sure the total amount fits within Afterpay transaction amount limits:           # [https://stripe.com/docs/payments/afterpay-clearpay#collection-schedule](https://stripe.com/docs/payments/afterpay-clearpay#collection-schedule)           unit_amount: 2000,         },         quantity: 1,       }],       shipping_address_collection: {         # Specify which shipping countries Checkout should provide as options for shipping locations         allowed_countries: ['AU', 'CA', 'GB', 'NZ', 'US'],       },       # If you already have the shipping address, provide it in payment_intent_data:       # payment_intent_data: {       #   shipping: {       #     name: 'Jenny Rosen',       #     address: {       #       line1: '1234 Main Street',       #       city: 'San Francisco',       #       state: 'CA',       #       country: 'US',       #       postal_code: '94111',       #     },       #   },       # },       success_url: '[https://example.com/success](https://example.com/success)',       cancel_url: '[https://example.com/cancel](https://example.com/cancel)',     })`\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Use a method such as webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to handle order fulfillment, instead of relying on your customer to return to the payment status page.\n\nThe following events are sent when the payment status changes:\n\n| Event Name | Description | Next steps |\n| --- | --- | --- |\n| [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) | The customer successfully authorized the payment by submitting the Checkout form. | Wait for the payment to succeed or fail. |\n| [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) | The customer’s payment succeeded. The `PaymentIntent` transitions to `succeeded`. | Fulfill the goods or services that the customer purchased. |\n| [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types#event_types-payment_intent.payment_failed) | The customer’s payment was declined, or failed for some other reason. The `PaymentIntent` returns to the `requires_payment_method` status. | Email the customer to request that they place a new order. |\n\nLearn more about [fulfilling orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Afterpay as the payment method and click the **Pay** button.\n\nTest your Afterpay integration with your test API keys by viewing the redirect page. You can test the successful payment case by authenticating the payment on the redirect page. The PaymentIntent will transition from `requires_action` to `succeeded`.\n\nTo test the case where the user fails to authenticate, use your test API keys and view the redirect page. On the redirect page, click **Fail test payment**. The PaymentIntent will transition from `requires_action` to `requires_payment_method`.\n\nFor [manual capture](#manual-capture) PaymentIntents in testmode, the uncaptured PaymentIntent will auto-expire 10 minutes after successful authorization.\n\n[](#failed-payments)\n\nAfterpay takes into account multiple factors when deciding to accept or decline a transaction (for example, length of time buyer has been using Afterpay, outstanding amount customer has to repay, value of the current order).\n\nYou should always present additional payment options such as `card` in your checkout flow, as Afterpay payments have a higher rate of decline than many payment methods. In these cases, the [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) is detached and the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object’s status automatically transitions to `requires_payment_method`.\n\nFor an Afterpay [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) with a status of `requires_action`, customers need to complete the payment within 3 hours after you redirect them to the Afterpay site (this doesn’t apply to declined payments). If they take no action within 3 hours, the [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) detaches and the object status for the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) automatically transitions to `requires_payment_method`.\n\nIn these cases, inform your customer to try again with a different payment option presented in your checkout flow.\n\n[](#error-codes)\n\nThese are the common error codes and corresponding recommended actions:\n\n| Error Code | Recommended Action |\n| --- | --- |\n| `invalid_amount_too_small` | Enter an amount within Afterpay’s [default transactions limits](https://docs.stripe.com/payments/afterpay-clearpay#collection-schedule) for the country. |\n| `invalid_amount_too_large` | Enter an amount within Afterpay’s [default transactions limits](https://docs.stripe.com/payments/afterpay-clearpay#collection-schedule) for the country. |\n| `payment_intent_invalid_currency` | Enter the appropriate currency. Afterpay only supports [domestic transactions](https://docs.stripe.com/payments/afterpay-clearpay#collection-schedule). |\n| `missing_required_parameter` | Check the error message for more information about the required parameter. |\n| `nonexistent_country` | Enter a valid [two-letter ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) for the `country` property in the shipping and billing details. |\n| `payment_intent_redirect_confirmation_without_return_url` | Provide a `return_url` when confirming a PaymentIntent with Afterpay. |",
    "title": "Accept an Afterpay or Clearpay payment | Stripe Documentation",
    "description": "Learn how to accept Afterpay (also known as Clearpay in the UK), a payment method in the US, CA, UK, AU, and NZ.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/affirm/accept-a-payment",
    "markdown": "# Accept an Affirm payment | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept Affirm, a buy now and pay later payment method.\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nAffirm is a [single use](https://docs.stripe.com/payments/payment-methods#usage), [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Customers are redirected to the Affirm site, where they agree to the terms of an installment plan. When the customer accepts the terms, funds are guaranteed and transferred to your Stripe account. The customer repays Affirm directly over time.\n\n#### Note\n\nBefore you start the integration, make sure your account is eligible for Affirm by navigating to your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Affirm payments:\n\n*   You can only use one-time line items. Affirm doesn’t support recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans.\n*   Express all [Prices](https://docs.stripe.com/api/prices \"Prices\") in your domestic currency.\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?ui=stripe-hosted) Checkout integration.\n\nUse this guide to learn how to enable Affirm—it shows the differences between accepting a card payment and using Affirm.\n\n### Enable Affirm as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `affirm` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use your domestic currency.\n3.  We recommend collecting shipping addresses by adding your country to `shipping_address_collection[allowed_countries]`. If you don’t want to collect shipping addresses with Checkout, you can also provide the shipping address using `payment_intent_data[shipping]`. Doing so helps with loan acceptance rates.\n\n`Stripe::Checkout::Session.create({       mode: 'payment',       payment_method_types: ['card'],       payment_method_types: ['card', 'affirm'],       line_items: [{         price_data: {           currency: 'usd',           product_data: {             name: 'T-shirt',           },           # Make sure the total amount fits within Affirm's transaction amount limits           unit_amount: 5000,         },         quantity: 1,       }],       shipping_address_collection: {         # Shipping address is optional but recommended to pass in         # Specify which shipping countries Checkout should provide as options for shipping locations         allowed_countries: ['CA', 'US'],       },       # If you already have the shipping address, provide it in payment_intent_data:       # payment_intent_data: {       #   shipping: {       #     name: 'Jenny Rosen',       #     address: {       #       line1: '1234 Main Street',       #       city: 'San Francisco',       #       state: 'CA',       #       country: 'US',       #       postal_code: '94111',       #     },       #   },       # },       success_url: '[https://example.com/success](https://example.com/success)',       cancel_url: '[https://example.com/cancel](https://example.com/cancel)',     })`\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Use a method such as webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to handle order fulfillment, instead of relying on your customer to return to the payment status page.\n\nThe following events are sent when the payment status changes:\n\n| Event Name | Description | Next steps |\n| --- | --- | --- |\n| [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) | The customer successfully authorized the payment by submitting the Checkout form. | Wait for the payment to succeed or fail. |\n| [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) | The customer’s payment succeeded. The `PaymentIntent` transitions to `succeeded`. | Fulfill the goods or services that the customer purchased. |\n| [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types#event_types-payment_intent.payment_failed) | The customer’s payment was declined, or failed for some other reason. The `PaymentIntent` returns to the `requires_payment_method` status. | Email the customer to request that they place a new order. |\n\nLearn more about [fulfilling orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Affirm as the payment method and click the **Pay** button.\n\nTest your Affirm integration with your test API keys by viewing the redirect page. You can test the successful payment case by authenticating the payment on the redirect page. The PaymentIntent transitions from `requires_action` to `succeeded`.\n\nTo test the case where the user fails to authenticate, use your test API keys and view the redirect page. On the redirect page, close the Affirm modal window and verify that payment failed. The PaymentIntent transitions from `requires_action` to `requires_payment_method`.\n\nFor [manual capture](#manual-capture) PaymentIntents in testmode, the uncaptured PaymentIntent auto-expires 10 minutes after successful authorization.\n\n[](#failed-payments)\n\nAffirm takes into account multiple factors when deciding to accept or decline a transaction (for example, the length of time buyer has used Affirm, the outstanding amount the customer has to repay, and the value of the current order).\n\nAlways present additional payment options such as `card` in your checkout flow, as Affirm payments have a higher rate of decline than many payment methods. In these cases, the [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) is detached and the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object’s status automatically transitions to `requires_payment_method`.\n\nOther than a payment being declined, for an Affirm [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) with a status of `requires_action`, customers need to complete the payment within 12 hours after you redirect them to the Affirm site. If the customer takes no action within 12 hours, the [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) is detached and the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object’s status automatically transitions to `requires_payment_method`.\n\nIn these cases, inform your customer to try again with a different payment option presented in your checkout flow.\n\n[](#error-codes)\n\nThese are the common error codes and corresponding recommended actions:\n\n| Error code | Recommended action |\n| --- | --- |\n| `invalid_amount_too_small` | Enter an amount within Affirm’s [default transaction limits](https://docs.stripe.com/payments/affirm), for the country. |\n| `invalid_amount_too_large` | Enter an amount within Affirm’s [default transaction limits](https://docs.stripe.com/payments/affirm), for the country. |\n| `missing_required_parameter` | Check the error message for more information on the required parameter. |\n| `nonexistent_country` | Enter a valid [two-letter ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) for the `country` property in the shipping and billing details. |\n| `payment_intent_invalid_currency` | Enter the appropriate currency. Affirm only supports payments in your local currency. |\n| `payment_intent_redirect_confirmation_without_return_url` | Provide a `return_url` when confirming a PaymentIntent with Affirm. |\n| `payment_method_invalid_parameter` | Check the error message for more information on the parameter. |",
    "title": "Accept an Affirm payment | Stripe Documentation",
    "description": "Learn how to accept Affirm, a buy now and pay later payment method.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/afterpay-clearpay/site-messaging",
    "markdown": "# Display Afterpay or Clearpay messaging\n\n## Display Afterpay or Clearpay messagingDeprecated\n\n## Inform customers that you accept payments with Afterpay (also known as Clearpay in the UK).\n\n#### Caution\n\nThe content in this topic refers to a Legacy feature. We recommend that you use the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) to dynamically show your customers relevant buy now, pay later payment options for a given purchase. Stripe continues to maintain continuity for the `afterpayClearpayMessage` Element, but has halted new feature development.\n\nLet your customers know you accept payments with Afterpay by including the Afterpay messaging Element on your site. We suggest adding the messaging Element to your product, cart, and payment pages. The [afterpayClearpayMessage](https://docs.stripe.com/js/elements_object/create_element?type=afterpayClearpayMessage) Element takes care of:\n\n*   Calculating and displaying the installments amount\n*   Displaying the Afterpay information modal\n*   Localizing text and currencies\n\nThe Making of Prince of Persia: Journals 1985-1993\n\nJordan Mechner\n\n## Include the Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse Stripe Elements to include the [afterpayClearpayMessage](https://docs.stripe.com/js/elements_object/create_element?type=afterpayClearpayMessage) Element on your site.\n\nIf you haven’t already, include the Stripe.js script on your page by adding it to the `head` of your HTML file:\n\nCreate a placeholder element on your page where you want to mount the messaging Element:\n\n`<div id=\"afterpay-clearpay-message\"></div>`\n\nOn your product, cart, and payment pages, include the following code to create an instance of Stripe.js and mount the messaging Element:\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const elements = stripe.elements();  const options = {   amount: 1000, // $10.00 USD   currency: 'USD' };  const afterpayClearpayMessageElement =   elements.create('afterpayClearpayMessage', options);  afterpayClearpayMessageElement.mount('#afterpay-clearpay-message');`\n\n## Customize the message![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are many options available to customize the appearance and contents of the messaging Element. See the [API reference](https://docs.stripe.com/js/elements_object/create_element?type=afterpayClearpayMessage) for the full list of options.\n\n#### Badge logo![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet `logoType` to `'badge'` and use the `badgeTheme` option to choose between the following styles:\n\n| black-on-mint | black-on-white | mint-on-black | white-on-black |\n| --- | --- | --- | --- |\n|     |     |     |     |\n\n#### Lockup logo![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet `logoType` to `'lockup'` and use the `lockupTheme` option to choose between the following styles:\n\n#### Note\n\nClearpay branding is displayed automatically based on the `locale` option. See [Locale and currency](#locale-and-currency) for details.\n\n### Style with CSS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the configuration options, use CSS to style the messaging to better fit the look and feel of your site. You can customize the `font-family`, `font-size`, and `color` of the messaging:\n\nCSS\n\n`.AfterpayMessage {   font-family: monospace;   font-size: 14px;   color: blue; }`\n\nYou can also control the size of the logo by setting its `width` and `height`:\n\nCSS\n\n`.AfterpayMessage-logoSvg {   width: 80px;   height: auto; }`\n\n## Handle ineligible items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can’t use Afterpay for certain [prohibited business categories](https://docs.stripe.com/payments/afterpay-clearpay#prohibited-business-categories). If you sell items in these categories, you can still display the messaging Element to clearly indicate Afterpay isn’t available.\n\nUse the `isEligible` or `isCartEligible` options to indicate that the current product or cart isn’t eligible:\n\n|     |     |\n| --- | --- |\n| isEligible: false |     |\n| isCartEligible: false |     |\n\nAfterpay also has [default transactions limits](https://docs.stripe.com/payments/afterpay-clearpay#collection-schedule) for each country. When the provided `amount` exceeds these limits, the Element automatically displays ineligible price range messaging. You can customize this message by hiding the lower or upper limit with `showLowerLimit` and `showUpperLimit`.\n\n|     |     |\n| --- | --- |\n| (default) |     |\n| showLowerLimit: false |     |\n| showUpperLimit: false |     |\n\n## Locale and currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfterpay and clearpay support the following locales and currencies:\n\nSupported locales: `en-US`, `en-CA`, `en-AU`, `en-NZ`, `en-GB`\n\nSupported currencies: `USD`, `CAD`, `AUD`, `NZD`, `GBP`\n\nAfterpay’s messaging always the appropriate number of installments a user can pay based on their locale and country. For more information, see [payment collection](https://docs.stripe.com/payments/afterpay-clearpay#collection-schedule).\n\nSet the locale of your message by passing the `locale` option into the `options` parameter of the [elements group](https://docs.stripe.com/js/elements_object/create) used to create the `afterpayClearpayMessage` Element. You can then define your `currency` by passing it to the [element.create](https://docs.stripe.com/js/elements_object/create_element?type=afterpayClearpayMessage) options directly.\n\nJavaScript\n\n`const elements = stripe.elements({   locale: 'en-GB' });  const options = {   amount: 1000, // £10.00   currency: 'GBP' };  const afterpayClearpayMessageElement =   elements.create('afterpayClearpayMessage', options);  afterpayClearpayMessageElement.mount('#afterpay-clearpay-message');`",
    "title": "Display Afterpay or Clearpay messaging | Stripe Documentation",
    "description": "Inform customers that you accept payments with Afterpay (also known as Clearpay in the UK).",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/affirm/site-messaging",
    "markdown": "# Display Affirm messaging | Stripe DocumentationThe Stripe Docs logo\n\n## Display Affirm messagingDeprecated\n\n## Increase conversion by informing customers that you offer Affirm ahead of checkout.\n\n#### Caution\n\nThe content in this topic refers to a Legacy feature. We recommend that you use the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) to dynamically show your customers relevant buy now, pay later payment options for a given purchase. Stripe continues to maintain continuity for the `affirmMessage` Element, but has halted new feature development.\n\nLet your customers know you accept payments with Affirm by including the Affirm messaging Element on your site. We suggest adding the messaging Element to your product, cart, and payment pages. The Affirm messaging Element takes care of:\n\n*   Calculating and displaying the installments amount\n*   Displaying the Affirm information modal\n\nThe Making of Prince of Persia: Journals 1985-1993\n\nJordan Mechner\n\n## Include the Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Caution\n\nAffirm’s minimum transaction amount is 50 USD or 50 CAD. The promotional message isn’t rendered if the amount parameter is set to a number less than 50 USD or 50 CAD.\n\nUse Stripe Elements to include the [affirmMessage](https://docs.stripe.com/js/elements_object/create_element?type=affirmMessage) Element on your site.\n\nIf you haven’t already, include the Stripe.js script on your page by adding it to the `head` of your HTML file:\n\nCreate a placeholder element on your page where you want to mount the messaging Element:\n\n`<div id=\"affirm-message\"></div>`\n\nOn your product, cart, and payment pages, include the following code to create an instance of Stripe.js and mount the messaging Element:\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const elements = stripe.elements();  const options = {   amount: 5000, // $50.00 USD   currency: 'USD' };  const affirmMessageElement =   elements.create('affirmMessage', options);  affirmMessageElement.mount('#affirm-message');`\n\n## Customize the message![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are many options available to customize the appearance and contents of the messaging Element. See the [API reference](https://docs.stripe.com/js/elements_object/create_element?type=affirmMessage) for the full list of options.\n\n### Logo color![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `logoColor` option to choose between the following styles:\n\n### Style with CSS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAdditional configuration options allow you to use CSS to style the messaging to better fit the look and feel of your site. You can customize the `fontColor`, `fontSize`, and `textAlign` of the messaging:\n\nCode Example\n\n`const options = {   amount: 5000,   currency: 'USD',   fontColor: '#5B63FF',   logoColor: 'black',   fontSize: '16px',   textAlign: 'center', };  const affirmMessageElement = elements.create('affirmMessage', options);`",
    "title": "Display Affirm messaging | Stripe Documentation",
    "description": "Increase conversion by informing customers that you offer Affirm ahead of checkout.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/klarna/accept-a-payment",
    "markdown": "# Accept a Klarna payment | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept Klarna, a global buy now, pay later payment method.\n\n#### Beta\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nKlarna is a [single use](https://docs.stripe.com/payments/payment-methods#usage), [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Customers are redirected to a Klarna page, where they select among multiple payment options (immediate full payment, payment in installments, or deferred payment). When the customer accepts the terms, Klarna guarantees that the funds are available to the customer and transfers the funds to your Stripe account. The customer repays Klarna according to their selected payment option.\n\n#### Note\n\nBefore you start the integration, make sure your account is eligible for Klarna by navigating to your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Klarna payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable Klarna—it shows the differences between accepting a card payment and using Klarna.\n\n### Enable Klarna as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `klarna` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the same currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'klarna'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `klarna`, all line items must have currency: eur, dkk, gbp, nok, sek, usd, czk, ron, aud, nzd, cad, pln, chf       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Klarna as the payment method and click the **Pay** button. In test mode, you can then simulate different outcomes within Klarna’s redirect.\n\nBelow, we have specially selected test data for the currently supported customer countries. In test mode, Klarna approves or denies a transaction based on the supplied email address.\n\n|     | Approved | Denied |\n| --- | --- | --- |\n| Date of Birth | 10-07-1970 | 03-05-1994 |\n| First Name | Test | John |\n| Last Name | Person-au | snow |\n| Street | Wharf St | Silverwater Rd |\n| House number | 4   | 1-5 |\n| Postal Code | 4877 | 2128 |\n| City | Port Douglas | Silverwater |\n| Region | QLD | NSW |\n| Phone | +61473752244 | +61473763254 |\n| Email | customer@email.au | customer+denied@email.au |\n\nFor production testing, you can use an amount of `3500` in your local currency to test all Klarna payment options besides Financing. For example, if you want to test “Pay in 3” in Italy, you can use a transaction of 35.00 EUR.\n\n### Two-step authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAny six digit number is a valid two-step authentication code. Use `999999` for authentication to fail.\n\n### Repayment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInside the Klarna flow, you can use the following test values to try various repayment types:\n\n| Type | Value |\n| --- | --- |\n| Direct Debit | DE11520513735120710131 |\n| Bank transfer | Demo Bank |\n| Credit Card | *   Number: 4111 1111 1111 1111<br>*   CVV: 123<br>*   Expiration: any valid date in the future |",
    "title": "Accept a Klarna payment | Stripe Documentation",
    "description": "Learn how to accept Klarna, a global buy now, pay later payment method.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/klarna/disputes",
    "markdown": "# Respond to disputes | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to respond to Klarna disputes using the Dashboard or API.\n\nYou can counter wrongful chargeback disputes in the Stripe Dashboard or with the API. You must [submit evidence](https://docs.stripe.com/payments/klarna/disputes#evidence-submission) to counter chargeback disputes.\n\n### Dispute types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlmost all disputes begin as inquiry disputes, except for fraudulent transaction disputes, which escalate immediately to chargeback disputes. You must contact your customer directly and attempt to resolve the inquiry dispute within 21 days. During this period, you can’t submit evidence to Klarna in the Stripe Dashboard or with the API. You can close the inquiry, accepting the customer’s dispute, by issuing a refund equal to the amount the customer is disputing. Confirm this amount is correct with the customer before issuing the refund. You aren’t charged a dispute fee for transactions refunded during the inquiry stage.\n\nIf you fail to resolve the dispute within this 21 day time frame, the inquiry dispute automatically becomes a chargeback dispute. Stripe withholds the disputed funds and the associated [dispute fee](https://stripe.com/pricing/local-payment-methods#klarna) from your account for chargeback disputes.\n\nFor chargeback disputes, you can counter the dispute by submitting one single round of evidence in the Stripe Dashboard or with the API. You have 12 days to submit this evidence from the creation date of the chargeback dispute. If you counter the dispute, Klarna evaluates your evidence and decides the final outcome. If you win the dispute, Stripe releases the withheld funds to your account. If you lose the dispute, Stripe debits the withheld funds, including the [dispute fee](https://stripe.com/pricing/local-payment-methods#klarna). Klarna then returns the disputed amount to the customer.\n\n### Funds flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**You resolve the inquiry dispute without chargeback escalation**\n\nStripe doesn’t withhold funds for resolved inquiry disputes, and we don’t apply any dispute fees.\n\n**You win the chargeback dispute after escalation:**\n\nWhen a chargeback dispute is created, Stripe withholds the disputed funds, including the dispute fee, until Klarna informs us about the dispute outcome. If you win the dispute, we immediately release the funds to your account, and don’t charge a dispute fee.\n\n**You lose the chargeback dispute after escalation:**\n\nWhen a chargeback dispute is created, Stripe withholds the funds, including the dispute fee, until Klarna informs us about the dispute outcome. If you lose the dispute, we release the funds to Klarna and charge the [dispute fee](https://stripe.com/pricing/local-payment-methods#klarna).\n\n### Email-based disputes versus Dashboard and API disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPrior to November 15 2023, Stripe only supported disputes for Klarna through emails directly from Klarna to you. Now, Klarna disputes are managed in the Stripe Dashboard and with the API. This table highlights key differences between the old email-based disputes process and the new Dashboard and API process:\n\n| Email disputes | Dashboard and API disputes |\n| --- | --- |\n| You don’t receive notifications from Klarna and Stripe for inquiry disputes. | Stripe notifies you in the Dashboard, API, and by email when an inquiry is opened. |\n| You can submit multiple rounds of evidence for a chargeback dispute. | You can only submit a single round of structured evidence for a chargeback dispute. |\n| You have 14 days to submit counter evidence from the creation date of the chargeback dispute. | You have 12 days to submit counter evidence from the creation date of the chargeback dispute. |\n| Dispute lifecycle management must be built by you on top of the emails you receive from Klarna. | You can manage the entire dispute life cycle and track the status in a single place using the Dashboard or API. |\n| Stripe doesn’t withhold funds when Klarna creates a chargeback dispute. | Stripe withholds the disputed funds when Klarna creates a chargeback dispute. |\n\nWhen an inquiry dispute starts off as an email dispute, it persists as an email dispute, even after onboarding to use the Dashboard or API for new disputes. If you lose an email dispute, it displays as lost in the Dashboard, you receive a webhook, and Stripe applies the [dispute fee](https://stripe.com/pricing/local-payment-methods#klarna).\n\n## Evidence submission![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo submit evidence against a chargeback dispute, use either the Dashboard or API:\n\n## Submit evidence![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Navigate to the [Disputes Dashboard](https://dashboard.stripe.com/disputes), and click the **Needs Response** tab.\n2.  Click the disputed payment. If you want to counter the dispute, click **Counter dispute**.\n3.  Select the reason why you should win the dispute, and click **Next**.\n4.  Enter and attach all the applicable supporting evidence. The `recommended` label indicates the best documents for the type of dispute.\n5.  After entering all the evidence, verify the information is correct by selecting the checkbox.\n6.  Click **Submit Evidence**.\n\nFor additional guidance on how to submit evidence, see [Responding to disputes](https://docs.stripe.com/disputes/responding).\n\nIf you fail to submit evidence, Klarna will rule the dispute in favor of the customer.\n\n## Guidelines![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow these guidelines to submit the most relevant evidence for both Dashboard and API disputes.\n\n| Stripe dispute reason | Guidelines |\n| --- | --- |\n| Product not received | *   Attach all the shipping details, such as the tracking number, carrier, shipped date, and customer communication. |\n| Credit not processed | *   If you receive the returned product, attach the date when the customer initiated the return and any other information related to the return.<br>*   If the customer confirms that the dispute is for a partial order, share the customer communication and the return order amount.<br>*   If the return hasn’t been received, share when the customer initiated the return and note that the return hasn’t yet been received.<br>*   If the customer didn’t communicate or failed to reply to your request, document in the evidence when your team attempted to contact the customer, the number of attempts made, and the lack of response received.<br>*   If you fully or partially refunded the payment prior to it becoming a chargeback dispute, attach the refund details. |\n| Fraudulent | *   Share the shipping policy as an attachment or link to your shipping policy. |\n| General | *   If the customer confirms that the price is incorrect, attach all the supporting documents against the claim, such as order details.<br>*   If you fully or partially refunded the payment prior to it becoming a chargeback dispute, attach the refund details. |\n\n[](#create-test-disputes)\n\nYou can simulate dispute creation in test mode by creating a transaction in test mode using the following email addresses and phone numbers in the given Klarna checkout region. A dispute automatically opens on the transaction. You can submit evidence on the dispute, but you can’t simulate the final dispute outcome in test mode.\n\nBelow, we have specially selected test data for the currently supported customer countries.\n\n| Stripe dispute reason | Klarna dispute reason | Email | Phone number |\n| --- | --- | --- | --- |\n| Credit not processed | Return | `customer+disputed-return@email.au` | `+61491574118` |\n| Product not received | Goods not received | `customer+disputed-goods_not_received@email.au` | `+61491574632` |\n| Duplicate | Already paid | `customer+disputed-already_paid@email.au` | `+61491575254` |\n| Product unacceptable | Faulty goods | `customer+disputed-faulty_goods@email.au` | `+61491575789` |\n| General | Incorrect invoice | `customer+disputed-incorrect_invoice@email.au` | `+61491575789` |\n| General | High risk order | `customer+disputed-high_risk_order@email.au` | `+61491576801` |\n| Fraudulent | Unauthorized purchase | `customer+disputed-unauthorized_purchase@email.au` | `+61491577426` |\n\n## Dispute API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA [Dispute object](https://docs.stripe.com/api/issuing/disputes/object) contains a dispute type and Klarna dispute reason. These parameters are useful for countering a dispute.\n\n### Type![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Status](https://docs.stripe.com/api/disputes/object#dispute_object-status) parameter indicates the dispute type. The following table explains the dispute status and the state of the dispute.\n\n| Status | Dispute type | Description |\n| --- | --- | --- |\n| `warning_needs_response` | Inquiry | The inquiry is open and the business can issue a refund. |\n| `warning_closed` | Inquiry | The inquiry is closed. |\n| `needs_response` | Chargeback | The chargeback is open and the business can submit evidence. |\n| `under_review` | Chargeback | The chargeback is open and the evidence is submitted to Klarna. |\n| `lost` | Chargeback | The chargeback is closed and the business lost the dispute. |\n| `won` | Chargeback | The Chargeback is closed and the business won the dispute. |\n\n### Klarna reason![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Klarna reason is mapped to [Stripe dispute reason](https://docs.stripe.com/disputes/categories?card-network=klarna) and displayed in the Dashboard as `Network Reason Code`.\n\nThe Stripe reason is available in the Dispute object as [reason](https://docs.stripe.com/api/disputes/object#dispute_object-reason) and the Klarna reason is available in [payment\\_method\\_details.klarna.reason\\_code](https://docs.stripe.com/api/disputes/object#dispute_object-payment_method_details-klarna-reason_code). The data is available in the API and webhook.",
    "title": "Respond to disputes | Stripe Documentation",
    "description": "Learn how to respond to Klarna disputes using the Dashboard or API.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/zip/accept-a-payment",
    "markdown": "# Accept a Zip payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nZip is an Australia-based BNPL payment method that allows customers to split purchases over a series of payments.\n\nCustomers authenticate a payment on Zip website and there is immediate notification about the success or failure of a payment.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Zip payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Australian Dollar (currency code `aud`).\n\n[](#accept-a-Zip-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nMake the following updates to your card payment integration to enable Zip.\n\n### Enable Zip as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `zip` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `aud` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'zip'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `zip`, all line items must have currency: aud       currency: 'aud',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Zip as the payment method and click **Pay**.",
    "title": "Accept a Zip payment | Stripe Documentation",
    "description": "Learn how to accept Zip, the popular buy now, pay later payment method in Australia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/swish/accept-a-payment",
    "markdown": "# Swish payments | Stripe DocumentationThe Stripe Docs logo\n\nSwish is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method used in Sweden. It allows customers to [authenticate and approve](https://docs.stripe.com/payments/payment-methods#customer-actions) payments using the Swish mobile app and the Swedish BankID mobile app.\n\nYou get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nUse this guide to enable Swish on [Checkout](https://docs.stripe.com/payments/checkout), our hosted checkout form, and learn the differences between accepting a card payment and a Swish payment.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Swish payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in SEK.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) Checkout integration.\n\n### Enable Swish as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `swish` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the `sek` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'swish'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `swish`, all line items must have currency: sek       currency: 'sek',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#failed-payments)\n\nSwish uses multiple data points to decide when to decline a transaction (for example, there aren’t enough funds in the customer’s bank account, or the customer has clicked **Cancel** in the app).\n\nIn these cases, the [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) is detached and the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object’s status automatically transitions to `requires_payment_method`.\n\nOther than a payment being declined, for a Swish [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) with a status of `requires_action`, customers must complete the payment within 3 minutes. If no action is taken after 3 minutes, the [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) is detached and the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object’s status automatically transitions to `requires_payment_method`.",
    "title": "Swish payments | Stripe Documentation",
    "description": "Learn how to accept Swish, a popular payment method in Sweden.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/promptpay/accept-a-payment",
    "markdown": "# Accept a PromptPay payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nPromptPay is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers pay with PromptPay by scanning the QR code that they see during checkout. Completing the payment redirects customers back to your website.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support PromptPay payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (PromptPay Checkout Sessions don’t support recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans).\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) Checkout integration.\n\nThis guides you through enabling PromptPay and shows the differences between accepting a card payment and using PromptPay.\n\n### Enable PromptPay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `promptpay` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the same currency\n\n`Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['promptpay'],    # or you can take multiple payment methods with   # payment_method_types: ['card', 'promptpay', ...]   line_items: [{     price_data: {       currency: 'thb',       product_data: {         name: 'เสื้อยืด',       },       unit_amount: 1000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })`\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select PromptPay as the payment method and click the **Generate QR code** button, which creates and renders a QR code.\n\nIn test mode, scan the QR code with a QR code scanning application on your mobile device. The QR code payload contains a URL which brings you to a Stripe-hosted PromptPay test payment page where you can either authorize or fail the test payment.\n\nIn live mode, you will be able to scan the QR code using a preferred banking app or payment app that supports PromptPay.",
    "title": "Accept a PromptPay payment | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/currencies/settlement-fees",
    "markdown": "# Settling in additional currencies | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how paying out funds in currencies other than your primary currency affects your processing fees.\n\nInternational businesses might need to settle and pay out funds in different currencies. The processing fees you pay depend on how you settle funds internationally.\n\n## Settling in a different currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you settle funds to your Stripe account in a currency other than the primary currency of your Stripe account country, Stripe applies processing fees in that currency. Use the table below to see the acquiring fees for card usage in each currency.\n\nLoading a table of settlement fees\n\n## Payouts in a different currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAny payouts from your Stripe account in a currency other than the primary currency of the country of the recipient bank account incur a fee. Certain payouts to non-domestic bank accounts also incur a fee. For more information on payout fees, see our [payout docs](https://docs.stripe.com/payouts).",
    "title": "Settling in additional currencies | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/multibanco/accept-a-payment",
    "markdown": "# Accept a Multibanco payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, [migrate to the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nMultibanco is a voucher-based payment method in Portugal. If your business is based in Europe or the United States, you can accept Multibanco payments from customers in Portugal using the [Payment Intents API](https://docs.stripe.com/payments/payment-intents).\n\nTo complete a transaction, customers receive a voucher that includes Multibanco entity and reference numbers. Customers use these voucher details to make a payment outside your checkout flow through online banking or from an ATM.\n\nPayment confirmation might be delayed by several days due to the initiation of a bank transfer when a customer pays for a Multibanco voucher. Bank transfers can encounter delays, particularly over weekends, contributing to the delay in payment confirmation.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Multibanco:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency (EUR).\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nEnable Multibanco by making the following updates to your card payment integration.\n\n### Enable Multibanco as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `multibanco` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the `eur` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'multibanco'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `multibanco`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Redirect to Stripe-hosted voucher page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nUnlike card payments, the customer won’t be redirected to the [success\\_url](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-success_url) with a Multibanco payment.\n\nAfter submitting the Checkout form successfully, the customer is redirected to the `hosted_voucher_url`. The customer can reference the hosted page’s payment instructions for details on how to complete their payment. You can view the page on both desktop and mobile platforms, and it’s also printable.\n\nStripe sends a [payment\\_intent.requires\\_action](https://docs.stripe.com/api/events/types#event_types-payment_intent.requires_action) event when a Multibanco voucher is created successfully. If you need to send an email with the voucher’s payment instructions link, locate the PaymentIntent at `data.object` on the `requires_action` event, and extract the `hosted_voucher_url` at [next\\_action.multibanco\\_display\\_details.hosted\\_voucher\\_url](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-multibanco_display_details-hosted_voucher_url) on the PaymentIntent.\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause Multibanco is a [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method, you need to use a method such as [webhooks](https://docs.stripe.com/webhooks \"webhook\") to monitor the payment status and handle order fulfillment. Learn more about [setting up webhooks and fulfilling orders](https://docs.stripe.com/checkout/fulfillment).\n\nThe following events are sent when the payment status changes:\n\n| Event name | Description | Next steps |\n| --- | --- | --- |\n| [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) | The customer has successfully submitted the Checkout form. Stripe has generated a Multibanco voucher. | Wait for the customer to pay the Multibanco voucher. |\n| [checkout.session.async\\_payment\\_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded) | The customer has successfully paid the Multibanco voucher. The `PaymentIntent` transitions to `succeeded`. | Fulfill the goods or services that the customer purchased. |\n| [checkout.session.async\\_payment\\_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed) | The Multibanco voucher has expired, or the payment has failed for some other reason. The `PaymentIntent` returns to a status of `requires_payment_method`. | Contact the customer by email and request that they place a new order. |\n\n[](#test-the-integration)\n\nWhen testing your Checkout integration, select Multibanco as the payment method, then click **Pay**. Provide the following email patterns in the Checkout form to test different scenarios:\n\n| Email | Description |\n| --- | --- |\n| `{any_prefix}@{any_domain}` | Simulates a Multibanco voucher that a customer pays. The `payment_intent.succeeded` webhook arrives after about 3 minutes.<br><br>Example: jenny@example.com |\n| `{any_prefix}succeed_immediately@{any_domain}` | Simulates a Multibanco voucher that a customer pays immediately. The `payment_intent.succeeded` webhook arrives within several seconds.<br><br>Example: succeed\\_immediately@example.com |\n| `{any_prefix}expire_immediately@{any_domain}` | Simulates a Multibanco voucher that expires immediately. The `payment_intent.payment_failed` webhook arrives within several seconds.<br><br>Example: expire\\_immediately@example.com |\n| `{any_prefix}expire_with_delay@{any_domain}` | Simulates a Multibanco voucher that expires before a customer pays. The `payment_intent.payment_failed` webhook arrives after about 3 minutes.<br><br>Example: expire\\_with\\_delay@example.com |\n| `{any_prefix}fill_never@{any_domain}` | Simulates a Multibanco voucher that never succeeds. The `payment_intent.payment_failed` webhook arrives after 11 days, which mimics behavior in live mode. Learn about Multibanco [expiration](https://docs.stripe.com/payments/multibanco/accept-a-payment#expiration).<br><br>Example: fill\\_never@example.com |\n\n[](#expiration)\n\nMultibanco vouchers expire at the `expires_at` UNIX timestamp in [next\\_action.multibanco\\_display\\_details.expires\\_at](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-multibanco_display_details-expires_at), which is 7 days after you create the voucher. Customers can’t pay a Multibanco voucher after it expires. After expiration, the PaymentIntent’s status transitions from `requires_action` to `processing`, and Stripe sends a [payment\\_intent.processing](https://docs.stripe.com/api/events/types#event_types-payment_intent.processing) event.\n\nThe PaymentIntent remains in the `processing` status for a maximum buffer period of 4 days to allow for potential completed payment notification delays caused by bank-transfer delays. If the Multibanco payment doesn’t complete within the buffer period, the PaymentIntent’s status transitions to `requires_payment_method` and Stripe sends a [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types#event_types-payment_intent.payment_failed) event. If you receive the customer’s funds after the buffer period, Stripe automatically initiates a refund process for the mispaid amount.\n\n[](#cancelation)\n\nYou can cancel Multibanco vouchers using [Cancel a PaymentIntent](https://docs.stripe.com/api/payment_intents/cancel). After cancelation, Stripe sends a [payment\\_intent.canceled](https://docs.stripe.com/api/events/types#event_types-payment_intent.canceled) event.\n\nIf a customer’s funds are received for a canceled Multibanco voucher, Stripe automatically initiates a refund process for the mispaid amount.\n\n#### Note\n\nCanceling a pending payment invalidates the original voucher instructions. When you cancel a pending Multibanco payment, inform your customer.\n\nWhen you successfully reconfirm a PaymentIntent in status `requires_action`, Stripe creates new voucher instructions and a new `hosted_voucher_url`. You must provide them to your customer.",
    "title": "Accept a Multibanco payment | Stripe Documentation",
    "description": "Learn how to accept the Multibanco payment method.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/multicapture",
    "markdown": "# Capture a payment multiple times\n\n## Capture a PaymentIntent multiple times, up to the authorized amount.\n\nMulticapture allows you to [capture a PaymentIntent](https://docs.stripe.com/api/payment_intents/capture) multiple times for a single authorization, up to the full [amount of the PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-amount). You can use it when you have orders with multiple shipments, and want to capture funds as you fulfill parts of the order.\n\n#### IC+ feature\n\nMulticapture is part of the functionality we offer to users on [IC+ pricing](https://support.stripe.com/questions/understanding-blended-interchange-pricing \"IC+\"). If you’re on blended Stripe pricing and want access to this feature, contact [Stripe Support](https://support.stripe.com/).\n\n## Availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using multicapture, be aware of the following restrictions:\n\n*   Multicapture is only supported for online card payments\n*   Only available with Amex, Visa, Discover, and Mastercard\n*   [Separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) fund flows using [source\\_transaction](https://docs.stripe.com/api/transfers/create#create_transfer-source_transaction) aren’t supported\n*   Stripe allows you to capture up to 50 times for a single [PaymentIntent](https://docs.stripe.com/api/payment_intents)\n\n#### Beta\n\nAccess to multicapture for Cartes Bancaires is a new feature, and currently limited to beta users. Reach out [here](#) to gain access.\n\n## Best practices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhere sending separate shipments for one order, proactively notify your end customer with the details of each shipment to avoid inquiries and chargebacks from customers because of confusion with seeing multiple transactions on their bank statement. Here are some best practices for doing so:\n\n*   Inform the customer of the estimated delivery date and transaction amount for each shipment at the time of checkout, before purchase.\n*   Notify your customer upon each shipment, along with the transaction amount.\n*   Disclose your full refund and cancellation policy.\n\nThese best practices might be required under applicable network rules, depending on the network.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when using multicapture. Consult the rules for the card networks that you want to use this feature with to make sure your sales comply with all applicable rules, which vary by network. For example, most card networks restrict multicapture usage to card-not-present transactions for the sale of goods that ship separately. Certain card networks permit multicapture for businesses based on their industry (for example, travel), while some don’t permit multicapture for installment or deposit workflows.\n\nThe information provided on this page relating to your compliance with these requirements is for your general guidance, and isn’t legal, tax, accounting, or other professional advice. Consult with a professional if you’re unsure about your obligations.\n\n[\n\n## Create and confirm an uncaptured PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-and-confirm)\n\nTo indicate that you want separate authorization and capture, specify the [capture\\_method](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) as `manual` when creating the PaymentIntent. To learn more about separate authorization and capture, see [how to place a hold on a payment method](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method).\n\nUse the `if_available` or `never` parameters to request multicapture for this payment.\n\n*   `if_available`: The created PaymentIntent will allow multiple captures, if the payment method supports it.\n    \n*   `never`: The created PaymentIntent won’t allow for multiple captures\n    \n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d payment_method=pm_card_visa \\  -d confirm=true \\  -d capture_method=manual \\  -d \"expand[]\"=latest_charge \\  -d \"payment_method_options[card][request_multicapture]\"=if_available`\n\nIn the response, the `payment_method_details.card.multicapture.status` field on the [latest\\_charge](https://docs.stripe.com/api/charges/object) contains `available` or `unavailable` based on the customer’s payment method.\n\n`// PaymentIntent Response {   \"id\": \"pi_xxx\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 1000,   \"amount_received\": 0,   ...   // if latest_charge is expanded   \"latest_charge\": {       \"id\": \"ch_xxx\",       \"object\": \"charge\",       \"amount\": 1000,       \"amount_captured\": 0,       \"amount_refunded\": 0,       \"payment_method_details\": {         \"card\": {           \"multicapture\": {               \"status\": \"available\" // or \"unavailable\"           }         }       }       ...     }   ... }`\n\n[](#capture-payment-intent)\n\nFor a PaymentIntent in a [requires\\_capture state](https://docs.stripe.com/payments/paymentintents/lifecycle) where multicapture is `available`, specifying the optional `final_capture` parameter to be `false` tells Stripe not to release the remaining uncaptured funds when calling the capture API. For example, if you confirm a 10 USD payment intent, capturing 7 USD with `final_capture=false` keeps the remaining 3 USD authorized.\n\n`curl https://api.stripe.com/v1/payment_intents/pi_xxx/capture \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount_to_capture=700 \\  -d final_capture=false \\  -d \"expand[]\"=latest_charge`\n\nIn the PI capture response, the [amount\\_capturable](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_capturable) and [amount\\_received](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_received) fields update accordingly.\n\n`// PaymentIntent Response {   \"id\": \"pi_ANipwO3zNfjeWODtRPIg\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 300, // 1000 - 700 = 300   \"amount_received\": 700,   // if latest_charge is expanded   \"latest_charge\": {       \"id\": \"ch_xxx\",       \"object\": \"charge\",       \"amount\": 1000,       \"amount_captured\": 700,       \"amount_refunded\": 0,       ...     }   ... }`\n\n[](#final-capture)\n\nThe PaymentIntent remains in a `requires_capture` state until you do one of the following:\n\n*   Set `final_capture` to `true`\n*   Make a capture without the `final_capture` parameter (because `final_capture` defaults to `true`)\n*   The authorization window expires.\n\nAt this point, Stripe releases any remaining funds and transitions the PaymentIntent to a `succeeded` state.\n\n`curl https://api.stripe.com/v1/payment_intents/pi_xxx/capture \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount_to_capture=200 \\  -d final_capture=true \\  -d \"expand[]\"=latest_charge`\n\nIn the PI capture response, the [amount\\_capturable](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_capturable) and [amount\\_received](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_received) fields will be updated accordingly.\n\n`// PaymentIntent Response {   \"id\": \"pi_ANipwO3zNfjeWODtRPIg\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 0, // not 100 due to final_capture=true   \"amount_received\": 900, // 700 + 200 = 900   // if latest_charge is expanded   \"latest_charge\": {       \"id\": \"ch_xxx\",       \"object\": \"charge\",       \"amount\": 1000,       \"amount_captured\": 900,       \"amount_refunded\": 0,       ...     }   ... }`\n\nUncaptured PaymentIntents transition to `canceled`, while partially captured PaymentIntents transition to `succeeded`.\n\n[](#test-your-integration)\n\nUse a Stripe test card with any CVC, postal code, and future expiration date to test multicapture payments.\n\n| Number | Payment Method | Description |\n| --- | --- | --- |\n|     | `pm_card_visa` | This test card support multicapture. |\n\n[](#refunds)\n\nFor a PaymentIntent in `requires_capture` state, you can [refund](https://docs.stripe.com/api/refunds) any number of times up to the total captured amount minus the total refunded amount, which is the [amount\\_received](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_received) - [amount\\_refunded](https://docs.stripe.com/api/charges/object#charge_object-amount_refunded). The [charge.refunded](https://docs.stripe.com/api/charges/object#charge_object-refunded) field transitions to true only when the final capture has been performed and the entire [amount\\_received](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_received) is refunded.\n\nStripe doesn’t support partial refunds with [refund\\_application\\_fee=true](https://docs.stripe.com/api/refunds/create#create_refund-refund_application_fee) or [reverse\\_transfer=true](https://docs.stripe.com/api/refunds/create#create_refund-reverse_transfer). Instead, you can perform partial fee refunds by manually performing partial fee refunds and transfer reversals using the [application fee refund](https://docs.stripe.com/api/fee_refunds) and [transfer reversal](https://docs.stripe.com/api/transfer_reversals) endpoints. After using the application fee refund or transfer reversal endpoints, Stripe doesn’t support any further refunds with refund\\_application\\_fee=true or reverse\\_transfer=true respectively.\n\n[](#connect)\n\nMulticapture supports all Connect use cases, with the exception of [Separate Charges and Transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) with the [source\\_transaction](https://docs.stripe.com/api/transfers/create#create_transfer-source_transaction) parameter. The [application\\_fee\\_amount](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-application_fee_amount) and [transfer\\_data\\[amount\\]](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-transfer_data-amount) parameters have some additional validations. Consider the following validations when implementing multicapture with Connect:\n\n*   Setting `application_fee_amount` or `transfer_data[amount]` on the first capture makes it required for all subsequent captures. Each `application_fee_amount` and `transfer_data[amount]` passed at capture time overrides the values passed in on PaymentIntent creation, confirmation, and update.\n*   Stripe doesn’t support partial refunds on multicapture payments with refund\\_application\\_fee=true or reverse\\_transfer=true. You can perform partial fee refunds or transfer reversals using the [application fee refund](https://docs.stripe.com/api/fee_refunds) and [transfer reversal](https://docs.stripe.com/api/transfer_reversals) endpoints.\n\n[](#multicapture-webhooks)\n\n### Charge updated webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe send a [charge.updated](https://docs.stripe.com/api/events/types#event_types-charge.updated) webhook each time you capture a payment.\n\nFor example, on the first capture of a destination charge multicapture payment with an `application_fee_amount`, we update these fields from empty to non-empty values.\n\n`// charge.updated {   \"data\": {     \"id\": \"ch_xxx\",     \"object\": \"charge\",     \"amount\": 1000,     \"balance_transaction\": \"txn_xxx\", // applicable to all charges     \"transfer\": \"tr_xxx\",             // applicable to destination charges only     \"application_fee\": \"fee_xxx\",     // applicable to Connect only     ...   },   \"previous_attributes\": {     \"balance_transaction\": null, // applicable to all charges     \"transfer\": null,            // applicable to destination charges only     \"application_fee\": null,     // applicable to Connect only   } }`\n\n### payment\\_intent.amount\\_capturable\\_updated![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe send [payment\\_intent.amount\\_capturable\\_updated](https://docs.stripe.com/api/events/types#event_types-payment_intent.amount_capturable_updated) on every capture, regardless of amount\\_to\\_capture and final\\_capture values.\n\nFor example, if we capture 1 USD from a PaymentIntent with an amount of 10 USD, the PaymentIntent’s amount\\_capturable field updates to 9 USD.\n\n`// payment_intent.amount_capturable_updated {   \"data\": {     \"id\": \"pi_xxx\",     \"object\": \"payment_intent\",     \"amount\": 1000,     \"amount_capturable\": 900 // 1000 - 100 = 900      ...   },   \"previous_attributes\": {     \"amount_capturable\": 1000   } }`\n\n### Charge captured events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe send a [charge.captured](https://docs.stripe.com/api/events/types#event_types-charge.captured) event for final captures or at the end of the authorization window to reverse the authorization of the uncaptured amount. The [captured](https://docs.stripe.com/api/charges/object#charge_object-captured) field for a charge only becomes `true` after a final capture or authorization reversal.\n\nFor example, if we do a capture with `amount=0` and `final_capture=true`, the [captured](https://docs.stripe.com/api/charges/object#charge_object-captured) attribute on the charge changes from false to true.\n\n`// charge.captured {   \"data\": {     \"id\": \"ch_xxx\",     \"object\": \"charge\",     \"captured\": true         ...   },   \"previous_attributes\": {     \"captured\": false   } }`\n\n### Refund webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMulticapture refund webhooks are no different than non-multicapture refund webhooks.\n\nDuring each partial refund, we’ll send a [charge.refunded](https://docs.stripe.com/api/events/types#event_types-charge.refunded) event. For connected accounts, we’ll additionally send [application\\_fee.refunded](https://docs.stripe.com/api/events/types#event_types-application_fee.refunded) events when we refund application fees and [transfer.reversed](https://docs.stripe.com/api/events/types#event_types-transfer.reversed) events when we reverse transfers.",
    "title": "Capture a payment multiple times | Stripe Documentation",
    "description": "Capture a PaymentIntent multiple times, up to the authorized amount.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/overcapture",
    "markdown": "# Capture more than the authorized amount on a payment\n\n## Use overcapture to capture more than the authorized amount for a PaymentIntent.\n\nOvercapture allows you to capture with an amount that’s higher than the authorized amount for a card payment. Unlike [incremental authorizations](https://docs.stripe.com/payments/incremental-authorization), overcapture doesn’t result in additional authorizations with the card networks. When you overcapture a PaymentIntent, your customer won’t see any immediate updates on their credit card statement. After the captured amount settles, the initial pending authorization gets updated with the final captured amount.\n\n## Availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using overcapture, be aware of the following restrictions:\n\n*   Only available with Visa, Mastercard, American Express, or Discover.\n*   Only eligible for online card payments. For in-person card payments see how to [collect tips](https://docs.stripe.com/terminal/features/collecting-tips/overview).\n*   Card brands limit the amount that you can overcapture (generally calculated as a percentage of the authorized amount), and impose additional constraints, including country, card type, and merchant category restrictions (see below).\n\n#### IC+ feature\n\nWe offer overcapture to users on [IC+ pricing](https://support.stripe.com/questions/understanding-blended-interchange-pricing \"IC+\"). If you’re on standard Stripe pricing and want access to this feature, learn more at [support.stripe.com](https://support.stripe.com/).\n\n### Availability by card network, merchant country, and merchant category ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Card brand | Merchant country | Merchant category | Percent limit |\n| --- | --- | --- | --- |\n| **Visa**\\* | Global | Taxicabs and limousines; eating places and restaurants; drinking places (alcoholic beverages); fast food restaurants; beauty and barber shops; health and beauty spas | +20% |\n|     | Global | Car rentals | Greater of +15% or +75 USD (or local currency equivalent) |\n|     | Global | Lodging; cruise lines | +15% |\n|     | Global\\*\\* | All other merchant categories | +15% |\n| **Mastercard** | US\\*\\*\\* | Eating places and restaurants; fast food restaurants | +30% |\n| **American Express** | Global\\*\\*\\*\\* | Eating places and restaurants; drinking places (alcoholic beverages); fast food restaurants | +30% |\n|     | Global | Taxicabs and limousines; beauty and barber shops; health and beauty spas | +20% |\n|     | Global | Lodging; car rentals; truck and utility trailer rentals; motor home and recreational vehicle rentals; grocery stores; retail stores | +15% |\n| **Discover** | Global | Taxicabs and limousines; eating places and restaurants; drinking places (alcoholic beverages); fast food restaurants; beauty and barber shops; health and beauty spas | +20% |\n|     | Global | Lodging; car rentals | +15% |\n\n### Networks with limited support (beta)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Overcapture with Strong Customer Authentication (SCA)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you and the cardholder are in a country that has Strong Customer Authentication (SCA) requirements, keep in mind the limitations of overcapture availability.\n\n*   Under SCA requirements, you generally need to authenticate an amount that’s greater than or equal to the amount that you eventually capture. For this reason, you need to authenticate and authorize for the highest estimated amount that you plan to capture, rather than using overcapture as outlined elsewhere on this page. Subsequently, you can capture up to the full amount authenticated, depending on the total amount for the goods or services provided. If you find it necessary to capture an amount beyond the originally authorized and authenticated amount, you must cancel the original payment and create a new one with the correct amount. However, there are some exceptions to this requirement (see below).\n*   There are a number of [transaction exemptions](https://support.stripe.com/questions/transaction-exemptions-for-strong-customer-authentication-%28sca%29) for SCA where overcapture might be permissible. For example, merchant-initiated transactions (MIT) where the customer isn’t physically present during the checkout flow are potentially exempt. See [when to categorize a transaction as MIT](https://support.stripe.com/questions/merchant-initiated-transactions-(mits)-when-to-categorize-a-transaction-as-mit).\n\nYou need to familiarize yourself with the complete documentation to gain a comprehensive understanding of overcapture and SCA requirements. See our [SCA guide](https://stripe.com/guides/strong-customer-authentication) for more information.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when using overcapture. Make sure to review the rules for the card networks that you plan to use this feature with to make sure your sales comply with the applicable rules, which vary by network. For example, some card networks don’t allow overcapture for transactions where the final transaction amount should be known at the time of authorization.\n\nThe information provided on this page relating to your compliance with these requirements is for your general guidance, and isn’t legal, tax, accounting, or other professional advice. Consult with a professional if you’re unsure about your obligations.\n\n[](#confirm-payment-intent)\n\nYou can only perform overcapture on uncaptured payments after [PaymentIntent confirmation](https://docs.stripe.com/api/payment_intents/confirm). To indicate you want to separate the authorization and capture, specify the [capture\\_method](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) as `manual` when creating the PaymentIntent. To learn more about separate authorization and capture, see [how to place a hold on a payment method](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method).\n\nYou must specify the PaymentIntents you plan to overcapture by using `if_available` with the [request\\_overcapture](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-request_overcapture) parameter.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d payment_method=pm_card_visa \\  -d confirm=true \\  -d capture_method=manual \\  -d \"expand[]\"=latest_charge \\  -d \"payment_method_options[card][request_overcapture]\"=if_available`\n\nLook at the [overcapture.status](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-overcapture) field on the [latest\\_charge](https://docs.stripe.com/api/charges/object) in the PaymentIntent confirmation response to determine if overcapture is available for the payment based on [availability](#availability). If `available`, the [maximum\\_amount\\_capturable](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-overcapture-maximum_amount_capturable) field indicates the maximum amount capturable for the PaymentIntent. If `unavailable`, the maximum\\_amount\\_capturable is the amount authorized.\n\n`// PaymentIntent response {   \"id\": \"pi_xxx\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 1000,   \"amount_received\": 0,   \"status\": \"requires_capture\",   ...   // if latest_charge is expanded   \"latest_charge\": {       \"id\": \"ch_xxx\",       \"object\": \"charge\",       \"payment_method_details\": {         \"card\": {           \"amount_authorized\": 1000           \"overcapture\": {               \"status\": \"available\", // or \"unavailable\"               \"maximum_amount_capturable\": 1200           }         }       }       ...     }   ... }`\n\n[](#capture-payment-intent)\n\nTo capture more than the currently authorized amount on a PaymentIntent, use the [capture](https://docs.stripe.com/api/payment_intents/capture) endpoint and provide an [amount\\_to\\_capture](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-amount_to_capture) up to the [maximum\\_amount\\_capturable](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-overcapture).\n\nIf you need to capture an amount larger than the `maximum_amount_capturable`, perform an [incremental authorization](https://docs.stripe.com/payments/incremental-authorization) to increase the authorized amount, where available.\n\n`curl https://api.stripe.com/v1/payment_intents/pi_xxx/capture \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount_to_capture=1200 \\  -d \"expand[]\"=latest_charge`\n\nThe [amount\\_capturable](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_capturable) and [amount\\_received](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_received) fields update accordingly in the PaymentIntent capture response for a successful overcapture. The captured PaymentIntent that returns has an updated [amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount) to reflect the total monetary amount moved for this payment. Use the [amount\\_authorized](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-amount_authorized) field on the associated Charge to reference the initial amount authorized for a successfully overcaptured payment.\n\n`// PaymentIntent response {   \"id\": \"pi_xxx\",   \"object\": \"payment_intent\",   \"amount\": 1200,   \"amount_capturable\": 0,   \"amount_received\": 1200,   \"status\": \"succeeded\",   ...   // if latest_charge is expanded   \"latest_charge\": {       \"id\": \"ch_xxx\",       \"object\": \"charge\",       \"payment_method_details\": {         \"card\": {           \"amount_authorized\": 1000,           \"overcapture\": {               \"maximum_amount_capturable\": 1200,               \"status\": \"available\" // or \"unavailable\"           }         }       }       ...     }   ... }`\n\n## Test your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse any of the below Stripe test cards with any CVC and future expiration date to request and perform overcaptures while in test mode. If overcapture is available on payments for a given network in test mode, it is also available in live mode.\n\n| Card brand | Number | Payment method |\n| --- | --- | --- |\n| Visa |     | `pm_card_visa` |\n| Mastercard |     | `pm_card_mastercard` |\n| Amex |     | `pm_card_amex` |\n| Discover |     | `pm_card_discover` |",
    "title": "Capture more than the authorized amount on a payment | Stripe Documentation",
    "description": "Use overcapture to capture more than the authorized amount for a PaymentIntent.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/extended-authorization",
    "markdown": "# Place an extended hold on an online card payment\n\n## Learn how to use extended authorizations to capture online card payments up to 30 days after authorization.\n\nExtended authorizations have a longer authorization validity period, which allows you to hold customer funds for longer than standard authorization validity windows. For most card networks, the default authorization validity period is 7 days for online payments and 2 days for in-person [Terminal](https://docs.stripe.com/terminal) payments, whereas extended validity periods can go up to 30 days depending on the card network. For more information about authorization validity windows, see [place a hold on a payment method](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method).\n\n## Availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using extended authorizations, be aware of the following restrictions:\n\n*   They’re only available with Visa, Mastercard, American Express, and Discover.\n*   Certain card brands have merchant category restrictions. Refer to the network availability table below.\n*   This page describes extended authorizations for online card payments. For in-person card payments using extended authorizations, refer to the [Terminal documentation](https://docs.stripe.com/terminal/features/extended-authorizations).\n*   Checkout doesn’t support extended authorizations.\n\n#### IC+ Feature\n\nWe offer extended authorizations to users on [IC+](https://support.stripe.com/questions/understanding-blended-interchange-pricing \"IC+\") pricing. If you’re on blended Stripe pricing and want access to this feature, you learn more at [support.stripe.com](https://support.stripe.com/).\n\n### Availability by card network and merchant category![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery card network has different rules that determine which payments have extended authorizations available, and how long they’re valid. The following table shows the validity windows and transaction types that extended authorization is available for using Visa, Mastercard, American Express, and Discover. However, we recommend that you rely on the [capture\\_before field](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-capture_before) to confirm the validity window for any given payment because these rules can change without prior notice.\n\n| Card brand | Merchant category | Extended authorization validity window |\n| --- | --- | --- |\n| **Visa** | Hotel, lodging, vehicle rental, and cruise line | 30 days\\* |\n| **Mastercard** (not including Maestro and Cirrus cards) | All merchant categories | 30 days |\n| **American Express** | Lodging and vehicle rental | 30 days\\*\\* |\n| **Discover** | Airline, bus charter/tour, car rental, cruise line, local/suburban commuter, passenger transportation including ferries, hotel, lodging, and passenger railway | 30 days |\n\n\\* The exact extended authorization window for Visa is 29 days and 18 hours, to allow time for clearing processes.  \n\\*\\* While your validity window is extended to 30 days, you must capture the authorized funds no later than the end of the duration of your customer’s stay or rental.\n\n### Networks with limited support (beta)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Recent changes to availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Best Practices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers see their funds held longer when you use extended authorizations. Use clear [statement descriptors](https://docs.stripe.com/get-started/account/statement-descriptors) to avoid increased disputes from unrecognized payments.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when using extended authorization. Consult the network specifications for the card networks that you plan to accept using this feature with to make sure your sales are compliant with the applicable rules, which vary by network. For instance, for many networks extended validity windows are only for cases where you don’t know the final amount that you’ll capture at the time of authorization.\n\nThe information provided on this page relating to your compliance with these requirements is for your general guidance, and is not legal, tax, accounting, or other professional advice. Consult with a professional if you’re unsure about your obligations.\n\nBy default, an authorization for an online card payment is valid for 7 days for most card networks. To increase the validity period, you can request an extended authorization by using `if_available` with the [request\\_extended\\_authorization](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-request_extended_authorization) parameter.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d payment_method=pm_card_visa \\  -d confirm=true \\  -d capture_method=manual \\  -d \"expand[]\"=latest_charge \\  -d \"payment_method_options[card][request_extended_authorization]\"=if_available`\n\nRely on the [capture\\_before field](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-capture_before) to confirm the validity window for a given payment. The validity window won’t change after the PaymentIntent is confirmed. To determine if the authorization is extended after confirming the PaymentIntent, look at the [extended\\_authorization.status field](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-extended_authorization-status) on the associated Charge.\n\n`// PaymentIntent response {   \"id\": \"pi_xxx\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 1000,   \"amount_received\": 0,   \"status\": \"requires_capture\",   ...   // if latest_charge is expanded   \"latest_charge\": {       \"id\": \"ch_xxx\",       \"object\": \"charge\",       \"payment_method_details\": {         \"card\": {           \"amount_authorized\": 1000,           \"capture_before\": 1696524701,           \"extended_authorization\": {               \"status\": \"enabled\", // or \"disabled\"           }         }       }       ...     }   ... }`\n\n## Test your integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse any of the below Stripe test cards with any CVC and future expiration date to request extended authorizations while in test mode. If extended authorizations are available on payments for a given network in test mode, they’re also available in live mode.\n\n| Card brand | Number | Payment method |\n| --- | --- | --- |\n| Visa |     | `pm_card_visa` |\n| Mastercard |     | `pm_card_mastercard` |\n| Amex |     | `pm_card_amex` |\n| Discover |     | `pm_card_discover` |",
    "title": "Place an extended hold on an online card payment | Stripe Documentation",
    "description": "Learn how to use extended authorizations to capture online card payments up to 30 days after authorization.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/incremental-authorization",
    "markdown": "# Increment an authorization | Stripe DocumentationThe Stripe Docs logo\n\n## Increase an existing authorization on a confirmed PaymentIntent before you capture it.\n\nIncremental authorization allows you to increase the authorized amount on a confirmed PaymentIntent before you capture it. Before capture, each incremental authorization appears on the credit card statement as an additional pending entry (for example, a 10 USD authorization incremented to 15 USD appears as separate 10 USD and 5 USD pending entries). After capture, the pending authorizations are removed, and the total captured amount appears as one final entry.\n\n## Availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using incremental authorizations, be aware of the following restrictions:\n\n*   Not currently available if you and the cardholder are in a country with [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication#impacted-businesses) requirements or similar authentication requirements.\n*   Only available with Visa, Mastercard, or Discover.\n*   Certain card brands have merchant category restrictions (see below).\n\nFor learning more about incremental authorization and in-person payments made using Terminal, see [Incremental Authorizations](https://docs.stripe.com/terminal/features/incremental-authorizations).\n\n#### IC+ feature\n\nWe offer incremental authorizations to users on [IC+](https://support.stripe.com/questions/understanding-blended-interchange-pricing \"IC+\") pricing. If you’re on standard Stripe pricing and want access to this feature, learn more at [support.stripe.com](https://support.stripe.com/).\n\n#### Availability by card network and merchant category![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse incremental authorizations on payments that fulfill the criteria below. You can find your user category in the [Dashboard](https://dashboard.stripe.com/settings/update/company/update).\n\nAttempting to perform an incremental authorization on a payment that doesn’t fulfill the below criteria results in an error.\n\n| Card brand | Merchant country | Payment type | Merchant category |\n| --- | --- | --- | --- |\n| **Visa** | Global | All card payment types | All user categories |\n| **Mastercard** | Global\\* | All card payment types | All user categories |\n| **Discover** | Global | All card payment types | Car rental, hotels, local/suburban commuter, passenger transportation, including ferries, passenger railways, bus lines-charter, tour, steamship/cruise lines, boat rentals & lease, grocery stores and supermarkets, electric vehicle charging, eating places and restaurants, drinking places (alcoholic beverages), hotels, motels, resorts, trailer parks & campgrounds, equip/tool/furn/appl rental & leasing, automobile rental agency, truck and utility trailer rentals, motor home and rec vehicle rentals, parking lots, parking meters, and garages, amusement parks, circuses, fortune tell, recreation services (not classified) |\n| **Discover** | Global | Card not present | Taxicabs and limousines |\n\n\\* Excludes MX users and JPY transactions for JP users\n\n### Networks with limited support (beta)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Best practices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using incremental authorization, proactively notify your end customer with the details of any authorizations for estimated amounts, which might be followed by incremental authorizations that increase those amounts. Here are some best practices for doing so:\n\n*   Disclose that an authorization is for an estimated amount and that subsequent authorization requests might follow at the time of checkout, before purchase.\n*   Base estimated amounts on a genuine estimate of what the total transaction amount will be.\n\nThese best practices might be required under applicable network rules, depending on the network.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when using incremental authorization. Consult the network rules for the card networks that you plan to use this feature with to make sure your sales comply with applicable rules, which vary by network. For example, most card networks restrict how you can calculate estimated amounts included in the initial authorization, and prohibit the use of incremental authorizations for transactions where the transaction amount should be known at the time of authorization (for example, charges for recurring subscriptions).\n\nThe information provided on this page relating to your compliance with these requirements is for your general guidance, and isn’t legal, tax, accounting, or other professional advice. Consult with a professional if you’re unsure about your obligations.\n\n[](#confirm-payment-intent)\n\nYou can use the `request_incremental_authorization` parameter to specify the PaymentIntents you plan to increment.\n\nAll PaymentIntents are incrementable by default. Use the `if_available` or `never` parameters to determine when to start incrementing a PaymentIntent:\n\n*   `if_available`: The created PaymentIntent allows for future increments based on [incremental authorization support availability](#availability).\n    \n*   `never`: The created PaymentIntent doesn’t allow for future increments.\n    \n\nYou can only perform incremental authorizations on uncaptured payments after [PaymentIntent confirmation](https://docs.stripe.com/api/payment_intents/confirm). To adjust the amount of a payment before confirmation, use [update method](https://docs.stripe.com/api/payment_intents/update) instead.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d payment_method=pm_card_debit_incrementalAuthAuthorized \\  -d confirm=true \\  -d capture_method=manual \\  -d \"expand[]\"=latest_charge \\  -d \"payment_method_options[card][request_incremental_authorization]\"=if_available`\n\nIn the PaymentIntent confirmation response, the [payment\\_method\\_details](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details) field on the [latest\\_charge](https://docs.stripe.com/api/charges/object) contains `available` or `unavailable` based on the customer’s payment method and [the availability criteria mentioned above](#availability), which determines whether a PaymentIntent is eligible for incremental authorization or not. (If you didn’t request incremental authorization in your PaymentIntent confirmation request, it will be `unavailable`.)\n\n`// PaymentIntent Response {   \"id\": \"pi_ANipwO3zNfjeWODtRPIg\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 1000,   \"amount_received\": 0,   ...   // if latest_charge is expanded   {     \"latest_charge\": {         \"amount\": 1000,         \"payment_method_details\": {           \"card\": {             \"incremental_authorization\": {                 \"status\": \"available\" // or \"unavailable\"             }           }         }         ...       }   }  }`\n\n[](#increment-authorization)\n\nTo increase the authorized amount on a PaymentIntent, use the [increment\\_authorization](https://docs.stripe.com/api/payment_intents/increment_authorization) endpoint and provide the updated total [authorization amount](https://docs.stripe.com/api/payment_intents/increment_authorization#increment_authorization-amount) to increment to, which must be greater than the original authorized amount. This attempts to authorize for a higher amount on your customer’s card. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.\n\nYou have a maximum of 10 incremental authorization attempts per PaymentIntent.\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/increment_authorization \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1500`\n\nIf the incremental authorization succeeds, it returns the PaymentIntent object with the updated amount. If the authorization fails, it returns a [card\\_declined](https://docs.stripe.com/error-codes#card-declined) error instead. The PaymentIntent object remains capturable for the previously authorized amount. Any potential updates to other PaymentIntent fields (for example, [application\\_fee\\_amount](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-application_fee_amount), [transfer\\_data](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-transfer_data), [metadata](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-metadata), [description](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-description), and [statement\\_descriptor](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-statement_descriptor)) aren’t saved if the incremental authorization fails.\n\nThe underlying Charge object for the PaymentIntent contains an [amount\\_updates](https://docs.stripe.com/api/charges/object#charge_object-amount_updates) array field that’s appended with the results of the incremental authorization. It shows whether the authorization succeeded or failed, and any details associated with the result.\n\nIncremental authorization has a maximum cap of either +500 USD (or local equivalent) or +500% of the previously authorized amount (whichever is higher) for each individual increment.\n\n[](#capture-payment-intent)\n\nWhether you increase the authorized amount on a PaymentIntent with an incremental authorization or not, you need to capture the funds before the initial authorization expires–incremental authorizations don’t extend [the validity period](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method). To capture the authorized amount on a PaymentIntent with prior incremental authorizations, use the [capture endpoint](https://docs.stripe.com/api/payment_intents/capture) as usual.\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/capture \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\nIf the incremental authorization succeeds, it returns the captured PaymentIntent object with the updated amount. If the authorization fails, it returns a [card\\_declined error](https://docs.stripe.com/error-codes#card-declined) instead. The PaymentIntent isn’t captured, but it remains capturable for the previously authorized amount. Any potential updates to other PaymentIntent fields (for example, [application\\_fee\\_amount](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-application_fee_amount), [transfer\\_data](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-transfer_data), [metadata](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-metadata), [description](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-description) and [statement\\_descriptor](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-statement_descriptor)) aren’t saved if the incremental authorization fails.\n\n[](#test-your-integration)\n\nUse the incremental authorization Stripe test card with any CVC, postal code, and future expiration to trigger incremental authorization while in test mode:\n\n1.  First create the PaymentIntent using the test card in the [create and confirm PaymentIntent step](#confirm-payment-intent) above.\n    \n2.  Perform the incremental authorization with the parameters specified in the [perform an incremental authorization step](#increment-authorization) above, and use the test card to trigger an incremental authorization.\n    \n\n| Number | Payment Method | Description |\n| --- | --- | --- |\n|     | `pm_card_debit_incrementalAuthAuthorized` | This increases the authorization amount to the amount provided in the request. |",
    "title": "Increment an authorization | Stripe Documentation",
    "description": "Increase an existing authorization on a confirmed PaymentIntent before you capture it.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/sofort/save-during-payment",
    "markdown": "# Save bank details during a Sofort payment\n\n## Learn how to save your customer's IBAN bank details from a Sofort payment.\n\n#### Warning\n\nOur financial partners are in the process of deprecating Sofort. New businesses can’t accept Sofort payments. For more information read our [support page](https://support.stripe.com/questions/sofort-is-being-deprecated-as-a-standalone-payment-method).\n\n#### Caution\n\nSofort is a [single use](https://docs.stripe.com/payments/payment-methods#usage), [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay with Sofort by redirecting from your website to their bank’s portal to authenticate the payment. It typically takes 2 to 14 days to receive notification of success or failure.\n\nYou can use Sofort to save your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) bank details into a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"). You can then use the SEPA Direct Debit PaymentMethod to [accept payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment) or [set up a subscription](https://docs.stripe.com/billing/subscriptions/sepa-debit). This reduces friction for your customer as they don’t have to enter their IBAN again. You also receive their verified name and validated IBAN.\n\n#### Caution\n\nAccepting Sofort payments consists of creating a [PaymentIntent](https://docs.stripe.com/api/payment_intents) object to track a payment, collecting payment method information and mandate acknowledgement, and submitting the payment to Stripe for processing. Stripe uses the PaymentIntent to track and handle all the states of the payment until the payment completes. Use the ID of the SEPA Direct Debit [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") collected from your initial Sofort PaymentIntent to create PaymentIntents for future payments.\n\n[](#set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-customer)\n\nCreate a [Customer](https://docs.stripe.com/api/customers \"Customers\") when they create an account with your business and associate it with your internal representation of their account. This enables you to retrieve and use their saved payment method details later.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#create-payment-intent)\n\nCreate a `PaymentIntent` on your server and specify the `amount` to collect, the `eur` currency, the customer ID, and off\\_session as an argument for [setup future usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage). If you have an existing [Payment Intents](https://docs.stripe.com/payments/payment-intents) integration, add `sofort` to the list of [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=eur \\  -d \"payment_method_types[]\"=sofort \\  -d customer={{CUSTOMER_ID}} \\   -d setup_future_usage=off_session`\n\nThe PaymentIntent includes the payment method ID and a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), which is used on the client side to securely complete the payment process instead of passing the entire PaymentIntent object.\n\n[](#collect-payment-method-details)\n\nCreate a payment form on your client to collect the required billing details from the customer.\n\n​​To process SEPA Direct Debit payments, you must collect a mandate agreement from your customer. Display the following standard authorization text for your customer to implicitly sign the mandate.\n\nReplace _Rocket Rides_ with your company name.\n\nAuthorization text template\n\nBy providing your payment information and confirming this payment, you authorise (A)\n\nRocket Rides\n\nReplace this with your company name\n\nand Stripe, our payment service provider, to send instructions to your bank to debit your account and (B) your bank to debit your account in accordance with those instructions. As part of your rights, you are entitled to a refund from your bank under the terms and conditions of your agreement with your bank. A refund must be claimed within 8 weeks starting from the date on which your account was debited. Your rights are explained in a statement that you can obtain from your bank. You agree to receive notifications for future debits up to 2 days before they occur.\n\n​​Setting up a payment method or confirming a PaymentIntent creates the accepted mandate. As the customer has implicitly signed the mandate, you must communicate these terms in your form or through email.\n\n| Field | Value |\n| --- | --- |\n| `name` | The full name (first and last) of the customer. |\n| `email` | The customer’s email. |\n\n`<form id=\"payment-form\">   <div class=\"form-row\">     <label for=\"name\">       Name     </label>     <input id=\"name\" name=\"name\" required>   </div>    <div class=\"form-row\">     <label for=\"email\">       Email     </label>     <input id=\"email\" name=\"email\" required>   </div>    <button id=\"submit-button\">Pay with Sofort</button>    <!-- Display mandate acceptance text. -->   <div id=\"mandate-acceptance\">     By providing your payment information and confirming this payment, you     authorise (A) Rocket Rides and Stripe, our payment service provider, to     send instructions to your bank to debit your account and (B) your bank to     debit your account in accordance with those instructions. As part of your     rights, you are entitled to a refund from your bank under the terms and     conditions of your agreement with your bank. A refund must be claimed     within 8 weeks starting from the date on which your account was debited.     Your rights are explained in a statement that you can obtain from your     bank. You agree to receive notifications for future debits up to 2 days     before they occur.   </div>   <!-- Used to display form errors. -->   <div id=\"error-message\" role=\"alert\"></div> </form>`\n\n[](#submit-payment)\n\nRather than sending the entire PaymentIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) from [step 3](#web-create-payment-intent). This is different from your API keys that authenticate Stripe API requests.\n\nThe client secret should still be handled carefully because it can complete the charge. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.confirmSofortPayment](https://docs.stripe.com/js/payment_intents/confirm_sofort_payment) to handle the redirect away from your page and to complete the payment. Add a [return\\_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url) to this function to indicate where Stripe should redirect the user after they complete the payment on their bank’s website or mobile application.\n\nInclude your customer’s name and email address in `payment_method[billing_details]`. They will be used when generating the SEPA Direct Debit PaymentMethod.\n\n`var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); var accountholderName = document.getElementById('name'); var accountholderEmail = document.getElementById('email');  // Redirects away from the client const {error} = await stripe.confirmSofortPayment(   '{{PAYMENT_INTENT_CLIENT_SECRET}}',   {     payment_method: {       sofort: {         country: \"DE\"       },       billing_details: {         name: accountholderName.value,         email: accountholderEmail.value,       },     },     return_url: 'https://example.com/checkout/complete',   } );  if (error) {   // Inform the customer that there was an error. }`\n\nWhen your customer submits a payment, Stripe redirects them to the `return_url` and includes the following URL query parameters. The return page can use them to get the status of the PaymentIntent so it can display the payment status to the customer.\n\nWhen you specify the `return_url`, you can also append your own query parameters for use on the return page.\n\n| Parameter | Description |\n| --- | --- |\n| `payment_intent` | The unique identifier for the `PaymentIntent`. |\n| `payment_intent_client_secret` | The [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` object. |\n\nWhen the customer is redirected back to your site, you can use the `payment_intent_client_secret` to query for the PaymentIntent and display the transaction status to your customer.\n\n[](#charge-sepa-pm)\n\nWhen you need to charge your customer again, create a new PaymentIntent. Find the ID of the SEPA Direct Debit payment method by [retrieving](https://docs.stripe.com/api/payment_intents/retrieve) the previous PaymentIntent and [expanding](https://docs.stripe.com/api/expanding_objects) the `latest_charge` field where you will find the `generated_sepa_debit` ID inside of `payment_method_details`.\n\n`curl -G https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=latest_charge`\n\nThe SEPA Direct Debit payment method ID is the `generated_sepa_debit` ID under [payment\\_method\\_details](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-sofort) in the response.\n\n`{   \"latest_charge\": {     \"payment_method_details\": {       \"sofort\": {         \"bank_code\": \"VAPE\",         \"bank_name\": \"VAN DE PUT & CO\",         \"bics\": \"VAPEBE22\",         \"iban_last4\": \"7061\",         \"generated_sepa_debit\": \"pm_1GrddXGf98efjktuBIi3ag7aJQ\",         \"preferred_language\": \"en\",         \"verified_name\": \"Jenny Rosen\"       },       \"type\": \"sofort\"     },   },   \"payment_method_options\": {     \"sofort\": {}`\n\nCreate a PaymentIntent with the SEPA Direct Debit and Customer IDs.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=sepa_debit \\  -d amount=1099 \\  -d currency=eur \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method={{SEPA_DEBIT_PAYMENT_METHOD_ID}} \\   -d confirm=true`\n\n[](#test-your-integration)\n\nSet `payment_method.billing_details.email` to one of the following values to test the PaymentIntent status transitions. You can include your own custom text at the beginning of the email address followed by an underscore. For example, `test_1_generatedSepaDebitIntentsFail@example.com` results in a SEPA Direct Debit PaymentMethod that will always fail when used with a PaymentIntent.\n\n| Email Address | Description |\n| --- | --- |\n| generatedSepaDebitIntentsSucceedAustria@example.com | The SEPA Direct Debit PaymentIntent status transitions from `processing` to `succeeded`. |\n| generatedSepaDebitIntentsSucceedDelayedAustria@example.com | The SEPA Direct Debit PaymentIntent status transitions from `processing` to `succeeded` after three minutes. |\n| generatedSepaDebitIntentsFailAustria@example.com | The SEPA Direct Debit PaymentIntent status transitions from `processing` to `requires_payment_method`. |\n| generatedSepaDebitIntentsFailDelayedAustria@example.com | The SEPA Direct Debit PaymentIntent status transitions from `processing` to `requires_payment_method` after three minutes. |\n| generatedSepaDebitIntentsSucceedDisputedAustria@example.com | The SEPA Direct Debit PaymentIntent status transitions from `processing` to `succeeded`, but a dispute is created immediately. |\n\n[](#fulfillment)\n\nAs Sofort is a [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method, the PaymentIntent’s status remains in a [payment\\_intent.processing](https://docs.stripe.com/api/events/types#event_types-payment_intent.processing) state for up to 14 days from its creation (also known as the cutoff date). In test mode, the PaymentIntent’s status remains in the processing state for three minutes to simulate this.\n\n*   Stripe recommends fulfilling purchases during the processing state. On average, you can expect approximately 0.2% of Sofort payment attempts to fail after entering the processing state. This only applies to Sofort payments due to its low payment failure rate and doesn’t apply to other [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment methods.\n*   You may prefer to fulfill orders only after receiving the [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event. Stripe sends this event after the payment attempt is confirmed and the funds are guaranteed.\n*   If a customer doesn’t pay, Stripe sends the [payment\\_intent.failed](https://docs.stripe.com/api/events/types#event_types-payment_intent.failed) event and the PaymentIntent returns to a status of `requires_payment_method`.\n\nUse the Dashboard, a custom [webhook](https://docs.stripe.com/webhooks \"webhook\"), or a partner solution to receive these events and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\n### Manually![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Stripe Dashboard to view all your Stripe payments, send email receipts, handle payouts, or retry failed payments.\n\n*   [View your test payments in the Dashboard](https://dashboard.stripe.com/test/payments)\n\n### Custom code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild a webhook handler to listen for events and build custom asynchronous payment flows. Test and debug your webhook integration locally with the Stripe CLI.\n\n*   [Build a custom webhook](https://docs.stripe.com/payments/handling-payment-events#build-your-own-webhook)\n\n### Prebuilt apps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHandle common business events, like [automation](https://stripe.partners/?f_category=automation) or [marketing and sales](https://stripe.partners/?f_category=marketing-and-sales), by integrating a partner application.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Accept a SEPA Direct Debit payment](https://docs.stripe.com/payments/sepa-debit/accept-a-payment)\n*   [Set up a subscription with SEPA Direct Debit in the EU](https://docs.stripe.com/billing/subscriptions/sepa-debit)",
    "title": "Save bank details during a Sofort payment | Stripe Documentation",
    "description": "Learn how to save your customer's IBAN bank details from a Sofort payment.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/sofort/set-up-payment",
    "markdown": "# Use Sofort to set up future SEPA Direct Debit payments\n\nSofort is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) each payment. With this integration, Stripe charges your customer 1 EUR through Sofort in order to collect their bank details. After your customer authenticates the payment, Stripe refunds the payment and store your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) in a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) payment method. You can then use the SEPA Direct Debit [PaymentMethod](https://docs.stripe.com/api/payment_methods) to [accept payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment) or [set up a subscription](https://docs.stripe.com/billing/subscriptions/sepa-debit).\n\nYou can use [Checkout in setup mode](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) to collect payment details and set up future SEPA Direct Debit payments using Sofort.\n\n[](#create-retrieve-customer)\n\nTo set up future SEPA Direct Debit payments using Sofort, you must attach the SEPA Direct Debit payment method to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a `Customer` object when your customer creates an account with your business. You can retrieve and use a customer’s stored payment method details later, if you associate the ID of the `Customer` object with your own internal representation of the customer.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#setup-a-payment)\n\nThis guide builds on the foundational [set up future payments](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) Checkout integration and describes how to enable Sofort—it shows the differences between setting up future payments for cards and using Sofort.\n\n### Enable Sofort as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to add `sofort` to the list of `payment_method_types`.\n\n[](#charge-sepa-pm)\n\nWhen you need to charge your customer again, create a new PaymentIntent. Find the ID of the SEPA Direct Debit payment method by [retrieving](https://docs.stripe.com/api/setup_intents/retrieve) the SetupIntent and [expanding](https://docs.stripe.com/api/expanding_objects) the `latest_attempt` field where you will find the `generated_sepa_debit` ID inside of `payment_method_details`.\n\n`curl -G https://api.stripe.com/v1/setup_intents/{{SETUP_INTENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=latest_attempt`\n\nCreate a PaymentIntent with the SEPA Direct Debit and Customer IDs.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=sepa_debit \\  -d amount=1099 \\  -d currency=eur \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method={{SEPA_DEBIT_PAYMENT_METHOD_ID}} \\   -d confirm=true`\n\n[](#testing)\n\nWhen testing your Checkout integration, select Sofort as the payment method and click the **Pay** button.",
    "title": "Use Sofort to set up future SEPA Direct Debit payments | Stripe Documentation",
    "description": "Learn how to save bank details from a Sofort payment and charge your customers later with SEPA Direct Debit.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/blik/accept-a-payment",
    "markdown": "# BLIK payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept BLIK, a common payment method in Poland.\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nBLIK is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payments. When customers want to pay online using BLIK, they request a six-digit code from their banking application and enter it into the payment collection form.\n\nThe bank sends a push notification to your customer’s mobile phone asking to authorize the payment inside their banking application. The BLIK code is valid for 2 minutes; customers have 60 seconds to authorize the payment after starting a payment. After 60 seconds, it times out and they must request a new BLIK code. Customers typically approve BLIK payments in less than 10 seconds.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support BLIK payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Złoty (currency code `pln`).\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?ui=stripe-hosted) Checkout integration.\n\nUse this guide to learn how to enable BLIK—it shows the differences between accepting a card payment and using BLIK.\n\n### Enable BLIK as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `blik` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the `pln` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'blik'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `blik`, all line items must have currency: pln       currency: 'pln',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### What customers see![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInside their Banking app, customers see four lines related to each BLIK transaction:\n\n*   If you provided a value for `description` when creating the PaymentIntent, the first two lines display it (max 70 characters).\n*   If you provided a value for `statement_descriptor` (typically, an order ID), line 3 displays it (max 22 characters).\n*   The fourth line automatically populates with the URL of your website.\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select BLIK as the payment method and click the **Pay** button.\n\nUse test mode to test a successful payment by entering any 6-digit code (such as `123456`) in the payment form.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for BLIK is up to 13 months after the original payment.\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") can dispute a payment through their bank up to 13 months after the original payment and there’s no appeal process.\n\nLearn more about [BLIK disputes](https://docs.stripe.com/payments/blik#disputed-payments).",
    "title": "BLIK payments | Stripe Documentation",
    "description": "Learn how to accept BLIK, a common payment method in Poland.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/cash_balance_transactions/object",
    "markdown": "# The Cash Balance Transaction object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    adjusted\\_for\\_overdraftnullable object\n    \n    If this is a `type=adjusted_for_overdraft` transaction, contains information about what caused the overdraft, which triggered this transaction.\n    \n*   #### \n    \n    applied\\_to\\_paymentnullable object\n    \n    If this is a `type=applied_to_payment` transaction, contains information about how funds were applied.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   The customer whose available cash balance changed as a result of this transaction.\n    \n*   The total available cash balance for the specified currency after this transaction was applied. Represented in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   If this is a `type=funded` transaction, contains information about the funding.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The amount by which the cash balance changed, represented in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal). A positive value represents funds being added to the cash balance, a negative value represents funds being removed from the cash balance.\n    \n*   #### \n    \n    refunded\\_from\\_paymentnullable object\n    \n    If this is a `type=refunded_from_payment` transaction, contains information about the source of the refund.\n    \n*   #### \n    \n    transferred\\_to\\_balancenullable object\n    \n    If this is a `type=transferred_to_balance` transaction, contains the balance transaction linked to the transfer.\n    \n*   The type of the cash balance transaction. New types may be added in future. See [Customer Balance](https://docs.stripe.com/payments/customer-balance#types) to learn more about these types.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `adjusted_for_overdraft`<br><br>A cash balance transaction type: `adjusted_for_overdraft` |\n    | `applied_to_payment`<br><br>A cash balance transaction type: `applied_to_payment` |\n    | `funded`<br><br>A cash balance transaction type: `funded` |\n    | `funding_reversed`<br><br>A cash balance transaction type: `funding_reversed` |\n    | `refunded_from_payment`<br><br>A cash balance transaction type: `refunded_from_payment` |\n    | `return_canceled`<br><br>A cash balance transaction type: `return_canceled` |\n    | `return_initiated`<br><br>A cash balance transaction type: `return_initiated` |\n    | `transferred_to_balance`<br><br>A cash balance transaction type: `transferred_to_balance` |\n    | `unapplied_from_payment`<br><br>A cash balance transaction type: `unapplied_from_payment` |\n    \n*   #### \n    \n    unapplied\\_from\\_paymentnullable object\n    \n    If this is a `type=unapplied_from_payment` transaction, contains information about how funds were unapplied.\n    \n\nThe Cash Balance Transaction object\n\n```\n{  \"id\": \"ccsbtxn_1Na16B2eZvKYlo2CUhyw3dsF\",  \"object\": \"customer_cash_balance_transaction\",  \"created\": 1690829143,  \"currency\": \"eur\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"ending_balance\": 10000,  \"funded\": {    \"bank_transfer\": {      \"eu_bank_transfer\": {        \"bic\": \"BANKDEAAXXX\",        \"iban_last4\": \"7089\",        \"sender_name\": \"Sample Business GmbH\"      },      \"reference\": \"Payment for Invoice 28278FC-155\",      \"type\": \"eu_bank_transfer\"    }  },  \"livemode\": false,  \"net_amount\": 5000,  \"type\": \"funded\"}\n```\n\n## [Retrieve a cash balance transaction](https://docs.stripe.com/api/cash_balance_transactions/retrieve)\n\nRetrieves a specific cash balance transaction, which updated the customer’s [cash balance](https://docs.stripe.com/payments/customer-balance).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a cash balance transaction object if a valid identifier was provided.\n\nGET /v1/customers/:id/cash\\_balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_9s6XKzkNRiz8i3/cash_balance_transactions/ccsbtxn_1Na16B2eZvKYlo2CUhyw3dsF \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ccsbtxn_1Na16B2eZvKYlo2CUhyw3dsF\",  \"object\": \"customer_cash_balance_transaction\",  \"created\": 1690829143,  \"currency\": \"eur\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"ending_balance\": 10000,  \"funded\": {    \"bank_transfer\": {      \"eu_bank_transfer\": {        \"bic\": \"BANKDEAAXXX\",        \"iban_last4\": \"7089\",        \"sender_name\": \"Sample Business GmbH\"      },      \"reference\": \"Payment for Invoice 28278FC-155\",      \"type\": \"eu_bank_transfer\"    }  },  \"livemode\": false,  \"net_amount\": 5000,  \"type\": \"funded\"}\n```\n\n## [List cash balance transactions](https://docs.stripe.com/api/cash_balance_transactions/list)\n\nReturns a list of transactions that modified the customer’s [cash balance](https://docs.stripe.com/payments/customer-balance).\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cash balance transactions, starting after item `starting_after`. Each entry in the array is a separate cash balance transaction object. If no more items are available, the resulting array will be empty.\n\nGET /v1/customers/:id/cash\\_balance\\_transactions\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_9s6XKzkNRiz8i3/cash_balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_9s6XKzkNRiz8i3/cash_balance_transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ccsbtxn_1Na16B2eZvKYlo2CUhyw3dsF\",      \"object\": \"customer_cash_balance_transaction\",      \"created\": 1690829143,      \"currency\": \"eur\",      \"customer\": \"cus_9s6XKzkNRiz8i3\",      \"ending_balance\": 10000,      \"funded\": {        \"bank_transfer\": {          \"eu_bank_transfer\": {            \"bic\": \"BANKDEAAXXX\",            \"iban_last4\": \"7089\",            \"sender_name\": \"Sample Business GmbH\"          },          \"reference\": \"Payment for Invoice 28278FC-155\",          \"type\": \"eu_bank_transfer\"        }      },      \"livemode\": false,      \"net_amount\": 5000,      \"type\": \"funded\"    }    {...}    {...}  ],}\n```\n\n## [Fund a test mode cash balance](https://docs.stripe.com/api/cash_balance_transactions/fund_cash_balance)Test helper\n\nCreate an incoming testmode bank transfer\n\n### Parameters\n\n*   Amount to be used for this test cash balance transaction. A positive integer representing how much to fund in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to fund $1.00 or 100 to fund ¥100, a zero-decimal currency).\n    \n\n### More parameters\n\n### Returns\n\nReturns a specific cash balance transaction, which funded the customer’s [cash balance](https://docs.stripe.com/payments/customer-balance).\n\nPOST /v1/test\\_helpers/customers/:id/fund\\_cash\\_balance\n\n```\ncurl https://api.stripe.com/v1/test_helpers/customers/cus_9s6XKzkNRiz8i3/fund_cash_balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=5000 \\  -d currency=eur\n```\n\n```\n{  \"id\": \"ccsbtxn_1NlhIV2eZvKYlo2CKwRcXkii\",  \"object\": \"customer_cash_balance_transaction\",  \"created\": 1693612963,  \"currency\": \"eur\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"ending_balance\": 10000,  \"funded\": {    \"bank_transfer\": {      \"eu_bank_transfer\": {        \"bic\": \"BANKDEAAXXX\",        \"iban_last4\": \"7089\",        \"sender_name\": \"Sample Business GmbH\"      },      \"reference\": \"Payment for Invoice 28278FC-155\",      \"type\": \"eu_bank_transfer\"    }  },  \"livemode\": false,  \"net_amount\": 5000,  \"type\": \"funded\"}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Cash Balance Transaction object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-methods/bank-transfers/reversals-us",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/alma/accept-a-payment",
    "markdown": "# Accept a payment with Alma\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nAlma is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers choose to pay between 2, 3, or 4 installments. Customers are redirected from your website or app, authorize the payment with Alma, then return to your website or app. You get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) of whether the payment succeeded or failed.\n\n[](#compatibility)\n\nTo support Alma payments, a Checkout Session must satisfy all of the following conditions:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency.\n    *   If you have line items in different currencies, create separate Checkout Sessions for each currency.\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nThis guide describes how to enable Alma and shows the differences between accepting a card payment and using Alma.\n\n### Enable Alma as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `alma` to the list of `payment_method_types`.\n2.  Make sure all `line_items` use the same currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'alma'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `alma`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Alma as the payment method and click the **Pay** button.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/merchant_checkout_alma_visible.267e88e1e3ef1ac2708a9f5d39292f78.png)",
    "title": "Accept a payment with Alma | Stripe Documentation",
    "description": "Learn how to setup your integration with Alma.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/billie/accept-a-payment",
    "markdown": "# Accept a payment with Billie\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nBillie is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method that offers businesses Pay by Invoice where they offer payment terms ranging from 7-120 days. Customers are redirected from your website or app, authorize the payment with Billie, then return to your website or app. You get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) of whether the payment succeeded or failed.\n\n[](#compatibility)\n\nTo support Billie payments, a Checkout Session must satisfy all of the following conditions:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency.\n    *   If you have line items in different currencies, create separate Checkout Sessions for each currency.\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nThis guide describes how to enable Billie and shows the differences between accepting a card payment and using Billie.\n\n### Enable Billie as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `billie` to the list of `payment_method_types`.\n2.  Make sure all `line_items` use the same currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'billie'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `billie`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Billie as the payment method and click the **Pay** button.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/merchant_checkout_billie_visible.47ad1871cd235bf8664ff95e77d01ee9.png)",
    "title": "Accept a payment with Billie | Stripe Documentation",
    "description": "Learn how to setup your integration with Billie.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/flexible-features-migration",
    "markdown": "# Migrate to latest flexible payment scenarios\n\n## Adapt your beta advanced payment scenarios to the general release.\n\nStripe now supports several flexible payment scenarios for non-card-present transactions. If you’ve already integrated the private beta version of any of these features, this guide provides details to upgrade to the general release. For new integrations, use see the following guides for the features that interest you:\n\n*   [Increment an Authorization](https://docs.stripe.com/payments/incremental-authorization)\n*   [Capture more than the Authorized Amount](https://docs.stripe.com/payments/overcapture)\n*   [Place an Extended Hold on an Online Card Payment](https://docs.stripe.com/payments/extended-authorization)\n*   [Capture a Payment Multiple Times](https://docs.stripe.com/payments/multicapture)\n\nWe’ve incorporated the following feedback-driven improvements to these features:\n\n*   Detailed control over the features at the [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"PaymentIntent\") level.\n*   Clearer expectations regarding feature availability and usage after a [confirmation](https://docs.stripe.com/api/payment_intents/confirm \"confirm\") phase.\n\nEach of the flexible payment features has different requirements from its private beta integration. Choose the feature you need to upgrade and refer to the note at the top for changes and requirements specific to that feature.\n\n#### Changes from beta\n\nThe first step of this integration is now mandatory.\n\n[](#request-incremental-auth)\n\nYour [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"PaymentIntent\") must include a request for incremental authorization before confirmation.\n\n#### Warning\n\nThis formerly optional step is now mandatory.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d payment_method=pm_card_debit_incrementalAuthAuthorized \\  -d confirm=true \\  -d capture_method=manual \\  -d \"expand[]\"=latest_charge \\  -d \"payment_method_options[card][request_incremental_authorization_support]\"=true`\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d payment_method=pm_card_debit_incrementalAuthAuthorized \\  -d confirm=true \\  -d capture_method=manual \\  -d \"expand[]\"=latest_charge \\  -d \"payment_method_options[card][request_incremental_authorization]\"=if_available`\n\nThe response now returns the status of the incremental authorization request in the `payment_method_details.card.incremental_authorization.status` property of the [latest\\_charge](https://docs.stripe.com/api/charges/object). The status values is `available` or `unavailable` depending on the customer’s payment method.\n\n`// PaymentIntent Response {   \"id\": \"pi_ANipwO3zNfjeWODtRPIg\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 1000,   \"amount_received\": 0,   ...   // if latest_charge is expanded   {     \"latest_charge\": {         \"amount\": 1000,         \"payment_method_details\": {           \"card\": {             \"incremental_authorization_supported\": true // or false           }         }         ...       }   } }`\n\n`// PaymentIntent Response {   \"id\": \"pi_ANipwO3zNfjeWODtRPIg\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 1000,   \"amount_received\": 0,   ...   // if latest_charge is expanded   {     \"latest_charge\": {         \"amount\": 1000,         \"payment_method_details\": {           \"card\": {             \"incremental_authorization\": {                 \"status\": \"available\" // or \"unavailable\"             }           }         }         ...       }   } }`\n\n[](#use-incremental-auth)\n\n**No changes have been made to this step in comparison to the beta version.**\n\n`curl https://api.stripe.com/v1/payment_intents/pi_ANipwO3zNfjeWODtRPIg/increment_authorization \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1500`\n\n## Choose how to capture more than initially authorized amount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTwo of the flexible payment features allow you to capture an amount larger than initially authorized:\n\n*   Over capture up to a certain limit ([Capture more than the authorized amount on a payment](https://docs.stripe.com/payments/overcapture))\n*   Increment the existing authorization and then capture the newly authorized amount ([Increment an authorization](https://docs.stripe.com/payments/incremental-authorization))\n\nThe example below showcases how these features can complement each other in the generally available version.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d payment_method=pm_card_visa \\  -d confirm=true \\  -d capture_method=manual \\  -d \"expand[]\"=latest_charge \\  -d \"payment_method_options[card][request_incremental_authorization]\"=if_available \\  -d \"payment_method_options[card][request_overcapture]\"=if_available`\n\n`// PaymentIntent Response {   \"object\": \"payment_intent\",   \"amount\": 1000,   ...   // if latest_charge is expanded   {     \"latest_charge\": {       \"payment_method_details\": {         \"card\": {           \"incremental_authorization\": {               \"status\": \"available\" // or \"unavailable\"           },           \"overcapture\": {               \"status\": \"available\", // or \"unavailable\"               \"maximum_capturable_amount\": 1200           }         }       }       ...     }   } }`\n\nUpon [confirmation](https://docs.stripe.com/api/payment_intents/confirm \"confirm\") of the PaymentIntent, if both features are available, you have options on the next steps to capture a larger amount than initially authorized:\n\n1.  Overcapture if the desired amount is equal or below the `maximum_capturable_amount`.\n2.  Perform an incremental authorization to the desired amount, then capture.",
    "title": "Migrate to latest flexible payment scenarios | Stripe Documentation",
    "description": "Adapt your beta advanced payment scenarios to the general release.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/satispay/accept-a-payment",
    "markdown": "# Accept a payment with Satispay\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nSatispay is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Customers pay by being redirected from your website or app, authorizing the payment with Satispay, then returning to your website or app. You get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) of whether the payment succeeded or failed.\n\n[](#compatibility)\n\nTo support Satispay payments, a Checkout Session must satisfy all of the following conditions:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency.\n    *   If you have line items in different currencies, create separate Checkout Sessions for each currency.\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nThis guide describes how to enable Satispay and shows the differences between accepting a card payment and using Satispay.\n\n### Enable Satispay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `satispay` to the list of `payment_method_types`.\n2.  Make sure all `line_items` use the same currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'satispay'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `satispay`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Satispay as the payment method and click the **Pay** button.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/merchant_checkout_satispay_visible.46054947bd1f4e146118175beb32d470.png)",
    "title": "Accept a payment with Satispay | Stripe Documentation",
    "description": "Learn how to setup your integration with Satispay.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/build-a-two-step-confirmation-legacy",
    "markdown": "# Build two-step confirmation | Stripe DocumentationThe Stripe Docs logo\n\n## Collect payment details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode, amount, and currency. These values determine which payment methods are shown to your customer.\n\nThen, create an instance of the Payment Element and mount it to the container DOM node.\n\n`const options = {   mode: 'payment',   amount: 1099,   currency: 'usd',   paymentMethodCreation: 'manual',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).",
    "title": "Build two-step confirmation | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/save-card-without-authentication",
    "markdown": "# Save a card without bank authentication\n\n​​Stripe allows you to collect card details and charge your customer at a later time. ​​In some regions, banks require a second form of authentication such as entering a code sent to a phone. ​​The extra step decreases conversion if your customer isn’t actively using your website or application because they aren’t available to authenticate the purchase.\n\n​​If you primarily do business in the US and Canada, banks don’t require authentication, so you can follow this simpler integration. This integration will be non-compliant in countries that require authentication for saving cards (for example, India) so building this integration means that expanding to other countries or adding other payment methods will require significant changes. Learn how to [save cards that require authentication](https://docs.stripe.com/payments/save-and-reuse).\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. For instance, if you want to save their payment method for future use, such as charging them when they’re not actively using your website or app. Add terms to your website or app that state how you plan to save payment method details and allow customers to opt in. If you want to charge them when they’re offline, make sure your terms include the following:\n\n*   The customer’s agreement to your initiating a payment or a series of payments on their behalf for specified transactions.\n*   The anticipated timing and frequency of payments (for example, if the charges are for scheduled installments, subscription payments, or unscheduled top-ups).\n*   How you determine the payment amount.\n*   Your cancellation policy, if the payment method is for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\n[](#web-collect-card-details)\n\nBefore starting this guide, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nBuild a checkout page to collect your customer’s card details. Use [Stripe Elements](https://docs.stripe.com/payments/elements), a UI library that helps you build custom payment forms. To get started with Elements, include the Stripe.js library with the following script on your checkout page.\n\nAlways load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nTo best leverage Stripe’s [advanced fraud functionality](https://docs.stripe.com/radar), include this script on every page on your site, not just the checkout page. Including the script on every page [allows Stripe to detect suspicious behavior](https://docs.stripe.com/disputes/prevention/advanced-fraud-detection) that might indicate fraud when users browse your website.\n\n### Add Elements to your page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo securely collect card details from your customers, Elements creates UI components for you hosted by Stripe. They’re then placed into your payment form, rather than you creating them directly. To determine where to insert these components, create empty DOM elements (containers) with unique IDs within your payment form.\n\n`<input id=\"cardholder-name\" type=\"text\"> <!-- placeholder for Elements --> <div id=\"card-element\"></div> <div id=\"card-result\"></div> <button id=\"card-button\">Save Card</button>`\n\nNext, create an instance of the [Stripe object](https://docs.stripe.com/js#stripe-function), providing your publishable [API key](https://docs.stripe.com/keys) as the first parameter. After, create an instance of the [Elements object](https://docs.stripe.com/js#stripe-elements) and use it to mount a `card` element in the DOM.\n\nThe `card` Element simplifies the payment form and minimizes the number of required fields by inserting a single, flexible input field that securely collects all necessary card details.\n\nOtherwise, combine `cardNumber`, `cardExpiry`, and `cardCvc` Elements for a flexible, multi-input card form.\n\n#### Note\n\nAlways collect a postal code to increase card acceptance rates and reduce fraud.\n\nThe [single line Card Element](https://docs.stripe.com/js/element/other_element?type=card) automatically collects and sends the customer’s postal code to Stripe. If you build your payment form with split Elements ([Card Number](https://docs.stripe.com/js/element/other_element?type=cardNumber), [Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry), [CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc)), add a separate input field for the customer’s postal code.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const elements = stripe.elements(); const cardElement = elements.create('card'); cardElement.mount('#card-element');`\n\nA Stripe Element contains an iframe that securely sends the payment information to Stripe over an HTTPS connection. The checkout page address must also start with `https://` rather than `http://` for your integration to work.\n\nYou can test your integration without using HTTPS. [Enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n`const cardholderName = document.getElementById('cardholder-name'); const cardButton = document.getElementById('card-button'); const resultContainer = document.getElementById('card-result');  cardButton.addEventListener('click', async (ev) => {   const {paymentMethod, error} = await stripe.createPaymentMethod({       type: 'card',       card: cardElement,       billing_details: {         name: cardholderName.value,       },     }   );    if (error) {     // Display error.message in your UI.     resultContainer.textContent = error.message;   } else {     // You have successfully created a new PaymentMethod     resultContainer.textContent = \"Created payment method: \" + paymentMethod.id;   } });`\n\nSend the resulting [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") ID to your server.\n\n[](#web-setup)\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-save-card)\n\nSave the card by attaching the PaymentMethod to a [Customer](https://docs.stripe.com/api/customers \"Customers\"). You can use the Customer object to store other information about your customer, such as shipping details and email address.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_method={{PAYMENT_METHOD_ID}}`\n\nIf you have an existing Customer, you can attach the PaymentMethod to that object instead.\n\n`curl https://api.stripe.com/v1/payment_methods/{{PAYMENT_METHOD_ID}}/attach \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}    `\n\nAt this point, associate the Customer ID and the PaymentMethod ID with your own internal representation of a customer, if you have one.\n\n[](#web-charge-card)\n\nWhen you’re ready, fetch the PaymentMethod and Customer IDs to charge. You can do this by either storing the IDs of both in your database, or by using the Customer ID to look up all the Customer’s available PaymentMethods.\n\n`curl -G https://api.stripe.com/v1/payment_methods \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d type=card`\n\nUse the PaymentMethod ID and the Customer ID to create a new PaymentIntent. Set [error\\_on\\_requires\\_action](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-error_on_requires_action) to true to decline payments that require any actions from your customer, such as two-factor authentication.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method={{PAYMENT_METHOD_ID}} \\   -d error_on_requires_action=true \\  -d confirm=true`\n\nWhen a payment attempt fails, the request also fails with a 402 HTTP status code and Stripe throws an error. You need to notify your customer to return to your application (for example, by sending an email) to complete the payment. Check the code of the [Error](https://docs.stripe.com/api/errors/handling) raised by the Stripe API library or check the [last\\_payment\\_error.decline\\_code](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error-decline_code) on the PaymentIntent to inspect why the card issuer declined the payment.\n\n[\n\n## Handle any card errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-handle-errors)\n\nNotify your customer that the payment failed and direct them to the payment form you made in Step 1 where they can enter new card details. Send that new PaymentMethod ID to your server to [attach](https://docs.stripe.com/api/payment_methods/attach) to the Customer object and make the payment again.\n\nAlternatively, you can create a PaymentIntent and save a card all in one API call if you have already created a Customer.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method={{PAYMENT_METHOD_ID}} \\   -d error_on_requires_action=true \\  -d confirm=true \\  -d setup_future_usage=on_session`\n\nSetting [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage) to `on_session` indicates to Stripe that you wish to save the card for later, without triggering unnecessary authentication.\n\n[](#web-test-integration)\n\nStripe provides [test cards](https://docs.stripe.com/testing) you can use in test mode to simulate different cards’ behavior. Use these cards with any CVC, postal code, and expiry date in the future.\n\n| Number | Description |\n| --- | --- |\n|     | Succeeds and immediately processes the payment. |\n|     | Always fails with a decline code of `insufficient_funds`. |\n|     | Requires authentication, which in this integration will decline with a code of `authentication_required`. |\n\n## Upgrade your integration to handle card authentication ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis integration **declines cards that require authentication during payment**. If you start seeing many payments in the Dashboard listed as `Failed`, then it’s time to [upgrade your integration](https://docs.stripe.com/payments/payment-intents/upgrade-to-handle-actions). Stripe’s global integration handles these payments instead of automatically declining.",
    "title": "Save a card without bank authentication | Stripe Documentation",
    "description": "Collect card details and charge your customer at a later time.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/payment_methods/create_payment_method",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/finalize-payments-on-the-server-legacy",
    "markdown": "# Finalize payments on the server\n\n## Finalize payments on the serverLegacy\n\n## Build an integration where you render the Payment Element before you create a PaymentIntent or SetupIntent, then confirm the Intent from your server.\n\n#### Warning\n\nThe Payment Element allows you to accept multiple payment methods using a single integration. In this integration, you’ll build a custom payment flow where you render the Payment Element, create the [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"), and confirm the payment from your server.\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[\n\n## Enable payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#enable-payment-methods)\n\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the Automated Clearing Settlement System (ACSS).\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[\n\n## Collect payment details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-collect-payment-details)\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode, amount, and currency. These values determine which payment methods are shown to your customer.\n\nThen, create an instance of the Payment Element and mount it to the container DOM node.\n\n`const options = {   mode: 'payment',   amount: 1099,   currency: 'usd',   paymentMethodCreation: 'manual',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n[\n\n## Create the PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-pm)\n\nWhen the customer submits your payment form, you can create a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") to send to your server for additional validation or business logic prior to confirmation.\n\n#### Caution\n\nYou must immediately use a created PaymentMethod to confirm a PaymentIntent and attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\") if you intend to use it in the future.\n\n`const form = document.getElementById('payment-form'); const submitBtn = document.getElementById('submit');  const handleError = (error) => {   const messageContainer = document.querySelector('#error-message');   messageContainer.textContent = error.message;   submitBtn.disabled = false; }  form.addEventListener('submit', async (event) => {   // We don't want to let default form submission happen here,   // which would refresh the page.   event.preventDefault();    // Prevent multiple form submissions   if (submitBtn.disabled) {     return;   }    // Disable form submission while loading   submitBtn.disabled = true;    // Trigger form validation and wallet collection   const {error: submitError} = await elements.submit();   if (submitError) {     handleError(submitError);     return;   }    // Create the PaymentMethod using the details collected by the Payment Element   const {error, paymentMethod} = await stripe.createPaymentMethod({     elements,     params: {       billing_details: {         name: 'Jenny Rosen',       }     }   });    if (error) {     // This point is only reached if there's an immediate error when     // creating the PaymentMethod. Show the error to your customer (for example, payment details incomplete)     handleError(error);     return;   }    // Create the PaymentIntent   const res = await fetch(\"/create-confirm-intent\", {     method: \"POST\",     headers: {\"Content-Type\": \"application/json\"},     body: JSON.stringify({       paymentMethodId: paymentMethod.id,     }),   });    const data = await res.json();    // Handle any next actions or errors. See the Handle any next actions step for implementation.   handleServerResponse(data); });`\n\n[\n\n## Create and submit the payment to Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#submit-payment)\n\nWhen the customer submits your payment form, use a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") to facilitate the confirmation and payment process. Create a PaymentIntent on your server with an `amount` and `currency` specified. In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. To prevent malicious customers from choosing their own prices, always decide how much to charge on the server-side (a trusted environment) and not the client.\n\nYou can use the PaymentMethod sent by your client to create and confirm the PaymentIntent in a single request.\n\n#### Note\n\nWhen confirming an Intent from the server, pass `mandate_data` to acknowledge that you’ve shown the customer the proper [terms](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-terms) for collecting their payment details. To make sure you display the proper terms, all [Elements](https://docs.stripe.com/js/elements_object/create) options should match your Intent options (for example,`setup_future_usage`, `amount`, and `currency`).\n\n`const stripe = require(\"stripe\")(`\n\n`\"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"`\n\n``); const express = require('express'); const app = express();  app.set('trust proxy', true); app.use(express.json()); app.use(express.static(\".\"));  app.post('/create-confirm-intent', async (req, res) => {   try {     const intent = await stripe.paymentIntents.create({       confirm: true,       amount: 1099,       currency: 'usd',       // In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.       automatic_payment_methods: {enabled: true},       payment_method: req.body.paymentMethodId, // the PaymentMethod ID sent by your client       use_stripe_sdk: true,       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',       mandate_data: {         customer_acceptance: {           type: \"online\",           online: {             ip_address: req.ip,             user_agent: req.get(\"user-agent\"),           },         },       },     });     res.json({       client_secret: intent.client_secret,       status: intent.status     });   } catch (err) {     res.json({       error: err     })   } });  app.listen(3000, () => {   console.log('Running on port 3000'); });``\n\n[\n\n## Handle any next actions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#next-actions)\n\nWhen the PaymentIntent requires additional action from the customer, such as authenticating with 3D Secure or redirecting to a different site, you need to trigger those actions. Use `stripe.handleNextAction` to trigger the UI for handling customer action and completing the payment.\n\n`const handleServerResponse = async (response) => {   if (response.error) {     // Show error from server on payment form   } else if (response.status === \"requires_action\") {     // Use Stripe.js to handle the required next action     const {       error,       paymentIntent     } = await stripe.handleNextAction({       clientSecret: response.clientSecret     });      if (error) {       // Show error from Stripe.js in payment form     } else {       // Actions handled, show success message     }   } else {     // No actions needed, show success message   } }`\n\n[\n\n## Disclose Stripe to your customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).",
    "title": "Finalize payments on the server | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/forwarding-third-party-processors",
    "markdown": "# Use Payment Element across multiple processors\n\n## Learn how to collect card details with Payment Element and use them with a third-party processor.\n\nUse [Payment Element](https://docs.stripe.com/payments/payment-element) to build a custom payment flow that allows you to collect card details, create a [PaymentMethod](https://docs.stripe.com/api/payment_methods), and [forward](https://docs.stripe.com/api/forwarding/request) the payment method to a third-party processor.\n\n#### Request access\n\nTo gain access to use Stripe’s forwarding service, contact [Stripe support](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F).\n\n[](#create-payment-method)\n\nUse a Payment Element to collect payment details. If you’re not integrated with the Payment Element, learn how to [get started](https://docs.stripe.com/payments/accept-a-payment). After the customer submits your payment form, call [stripe.createPaymentMethod](https://docs.stripe.com/js/payment_methods/create_payment_method) to create a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"). Pass the PaymentMethod ID to the ForwardingRequest endpoint on your server.\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const options = {     mode: 'payment',     amount: 1099,     currency: 'usd',     paymentMethodCreation: 'manual',     // Fully customizable with appearance API.     appearance: {         theme: 'stripe'     } };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');  const form = document.getElementById('payment-form'); const submitBtn = document.getElementById('submit');  const handleError = (error) => {     const messageContainer = document.querySelector('#error-message');     messageContainer.textContent = error.message;     submitBtn.disabled = false; }  form.addEventListener('submit', async (event) => {     // We don't want to let default form submission happen here,     // which would refresh the page.     event.preventDefault();      // Prevent multiple form submissions     if (submitBtn.disabled) {         return;     }      // Disable form submission while loading     submitBtn.disabled = true;      // Trigger form validation and wallet collection     const { error: submitError } = await elements.submit();     if (submitError) {         handleError(submitError);         return;     }      // Create the PaymentMethod using the details collected by the Payment Element     const { error, paymentMethod } = await stripe.createPaymentMethod({         elements,         params: {             billing_details: {                 name: 'John Doe',             }         }     });      if (error) {         // This point is only reached if there's an immediate error when         // creating the PaymentMethod. Show the error to your customer (for example, payment details incomplete)         handleError(error);         return;     }      // Call the ForwardingRequest endpoint on your server     const res = await fetch(\"/create-forwarding-request\", {         method: \"POST\",         headers: { \"Content-Type\": \"application/json\" },         body: JSON.stringify({             paymentMethodId: paymentMethod.id,         }),     });     const data = await res.json();      // Handle the response or errors     handleServerResponse(data); });`\n\n[](#create-forwarding-request)\n\nContact Stripe support to [configure](https://docs.stripe.com/payments/vault-and-forward#configuring) your destination endpoint and begin forwarding transactions. Send the card details to this test endpoint before you connect your integration with your third-party processor.\n\n`const stripe = require(\"stripe\")(`\n\n`\"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"`\n\n`); const express = require('express'); const app = express();  app.set('trust proxy', true); app.use(express.json()); app.use(express.static(\".\"));  app.post('/create-forwarding-request', async (req, res) => {     try {         const forwardedReq = await stripe.forwarding.requests.create(             {                 payment_method: req.body.paymentMethodId,                 url: '{{DESTINATION_ENDPOINT}}',                 request: {                     headers: [{                         name: 'Destination-API-Key',                         value: '{{DESTINATION_API_KEY}}'                     },{                         name: 'Destination-Idempotency-Key',                         value: '{{DESTINATION_IDEMPOTENCY_KEY}}'                     }],                     body: JSON.stringify({                         \"amount\": {                             \"currency\": \"USD\",                             \"value\": 1099                         },                         \"reference\": \"Your order number\",                         \"card\": {                             \"number\": \"\",                             \"exp_month\": \"\",                             \"exp_year\": \"\",                             \"cvc\": \"\",                             \"name\": \"\",                         }                     })                 },                 replacements: ['card_number', 'card_expiry', 'card_cvc', 'cardholder_name'],             }         );          if (forwardedReq.response_details.status != 200) {             // Return error based on third-party API response code         } else {             // Parse and handle the third-party API response             const forwardedResult = JSON.parse(forwardedReq.response_details.body);             res.json({                 status: forwardedReq.response_details.status             });         }     } catch (err) {         res.json({             error: err         });     } });  app.listen(3000, () => {     console.log('Running on port 3000'); });`\n\n[\n\n## Handle the Response![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-response)\n\nAfter you send the request, you must handle the response.\n\n`const handleServerResponse = async (response) => {   if (response.error) {     // Show error on payment form   } else if (response.status != 200) {     // Show error based on response code   } else {      // Parse the response body to render your payment form   } }`",
    "title": "Use Payment Element across multiple processors | Stripe Documentation",
    "description": "Learn how to collect card details with Payment Element and use them with a third-party processor.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/forwarding-token-vault",
    "markdown": "# Forward card details to your own token vault\n\nTo receive Primary Account Numbers (PANs) from the Vault and Forward API, your token vault must comply with the following specifications.\n\n### PCI compliance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMake sure that your vault is PCI compliant and provide a valid PCI Attestation of Compliance Stripe support. You must refresh this Attestation annually.\n\n### API Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour vault must contain HTTPS-based APIs that accept JSON and return JSON responses; other formats, such as XML or ISO 8583, aren’t supported.\n\nMake sure that the API contains a single, static URL. Configure this in the Vault and Forward API for security measures. Don’t change it between requests.\n\n### Authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Vault and Forward API to authenticate with your vault using HTTP header based authentication schemes, including bearer tokens.\n\nMake sure that every forwarded API call includes the authentication header to authenticate with your vault.\n\nWe don’t support client certificate authentication.\n\nYou can include additional headers in the forwarded request to your vault. However, you must verify that the configuration for your vault explicitly supports these headers. Reach out to Stripe support before you begin your integration to verify that the required additional headers are properly configured. Additionally, make sure that the headers don’t include any sensitive information, except for the bearer token.\n\n### Request body![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMake sure that your vault receives a JSON object with the following shape.\n\n`{   \"card\": {     \"number\": \"4242424242424242\",     \"exp_month\": \"12\",     \"exp_year\": \"2023\",     \"name\": \"John Doe\",     \"cvc\": \"123\"   },   \"metadata\": {     // Put your additional fields here   } }`\n\nYou can include additional fields as needed under the metadata key in this request. We pass them through without any additional processing.\n\nThe Vault and Forward API places the decrypted data into the following fields:\n\n| Field name | Type | Description |\n| --- | --- | --- |\n| `number` | String | The 15- or 16- digit PAN of the card |\n| `exp_month` | String | The month of the card expiry |\n| `exp_year` | String | The four-digit year of the card expiry |\n| `name` | String | The cardholder name |\n| `cvc` | String | The card verification value. This only becomes available for the first API request to Stripe after tokenization. We remove this information from our system after a short time period. Don’t store this value. |\n\nYou don’t need to support all of these fields in your vault. The Vault and Forward API places values into the request only if they’re present in the request body that you send to the Vault and Forward API. Additionally, you can include additional fields in the request body, which the Vault and Forward API passes to the receiving endpoint.\n\n### Response body![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Vault and Forward API doesn’t require any response body from your vault. If you provide a body, we return it to the caller of the Vault and Forward API. Don’t include any sensitive fields in your response.\n\n### Response codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Vault and Forward API treats any response as a “success” and returns the same response code sent by the token vault endpoint back to the caller through Stripe. For example, when the upstream returns a status code of `400` to Stripe, the Vault and Forward API responds with a status code of `200`. The response body includes the upstream’s `400` response and error message.",
    "title": "Forward card details to your own token vault | Stripe Documentation",
    "description": "Learn how to update your in-house vault with card details stored on Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/transfers/object",
    "markdown": "# The Transfer object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount in cents to be transferred.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destinationnullable stringExpandable\n    \n    ID of the Stripe account the transfer was sent to.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    destination\\_paymentnullable stringExpandable\n    \n\n*   #### \n    \n    source\\_transactionnullable stringExpandable\n    \n*   #### \n    \n    source\\_typenullable string\n    \n*   #### \n    \n    transfer\\_groupnullable string\n    \n\n```\n{  \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"object\": \"transfer\",  \"amount\": 400,  \"amount_reversed\": 0,  \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",  \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",  \"livemode\": false,  \"metadata\": {},  \"reversals\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"  },  \"reversed\": false,  \"source_transaction\": null,  \"source_type\": \"card\",  \"transfer_group\": \"ORDER_95\"}\n```\n\n## [Create a transfer](https://docs.stripe.com/api/transfers/create)\n\nTo send funds from your Stripe account to a connected account, you create a new transfer object. Your [Stripe balance](#balance) must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.\n\n### Parameters\n\n*   #### \n    \n    destinationstringRequired\n    \n*   A positive integer in cents representing how much to transfer.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns a transfer object if there were no initial errors with the transfer creation (e.g., insufficient funds).\n\n```\ncurl https://api.stripe.com/v1/transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=400 \\  -d currency=usd \\  -d destination=acct_1MTfjCQ9PRzxEwkZ \\  -d transfer_group=ORDER_95\n```\n\n```\n{  \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"object\": \"transfer\",  \"amount\": 400,  \"amount_reversed\": 0,  \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",  \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",  \"livemode\": false,  \"metadata\": {},  \"reversals\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"  },  \"reversed\": false,  \"source_transaction\": null,  \"source_type\": \"card\",  \"transfer_group\": \"ORDER_95\"}\n```\n\n## [Update a transfer](https://docs.stripe.com/api/transfers/update)\n\nUpdates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request accepts only metadata as an argument.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the transfer object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"object\": \"transfer\",  \"amount\": 400,  \"amount_reversed\": 0,  \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",  \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"reversals\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"  },  \"reversed\": false,  \"source_transaction\": null,  \"source_type\": \"card\",  \"transfer_group\": \"ORDER_95\"}\n```\n\n## [Retrieve a transfer](https://docs.stripe.com/api/transfers/retrieve)\n\nRetrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a transfer object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"object\": \"transfer\",  \"amount\": 400,  \"amount_reversed\": 0,  \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",  \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",  \"livemode\": false,  \"metadata\": {},  \"reversals\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"  },  \"reversed\": false,  \"source_transaction\": null,  \"source_type\": \"card\",  \"transfer_group\": \"ORDER_95\"}\n```\n\n## [List all transfers](https://docs.stripe.com/api/transfers/list)\n\nReturns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.\n\n### Parameters\n\n*   Only return transfers for the destination specified by this account ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` transfers, starting after transfer `starting_after`. Each entry in the array is a separate transfer object. If no more transfers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",      \"object\": \"transfer\",      \"amount\": 400,      \"amount_reversed\": 0,      \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",      \"created\": 1678043844,      \"currency\": \"usd\",      \"description\": null,      \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",      \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",      \"livemode\": false,      \"metadata\": {},      \"reversals\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"      },      \"reversed\": false,      \"source_transaction\": null,      \"source_type\": \"card\",      \"transfer_group\": \"ORDER_95\"    }    {...}    {...}  ],}\n```",
    "title": "The Transfer object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/elements_object/create_address_element",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/elements_object/create_express_checkout_element",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/forwarding/request/object",
    "markdown": "# The ForwardingRequest object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.\n    \n*   #### \n    \n    replacementsarray of enums\n    \n    The field kinds to be replaced in the forwarded request.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `card_cvc`<br><br>Replace the card cvc field |\n    | `card_expiry`<br><br>Replace the card expiry fields like month and year |\n    | `card_number`<br><br>Replace the card number field |\n    | `cardholder_name`<br><br>Replace the cardholder name field |\n    \n*   #### \n    \n    request\\_contextnullable object\n    \n    Context about the request from Stripe’s servers to the destination endpoint.\n    \n*   #### \n    \n    request\\_detailsnullable object\n    \n    The request that was sent to the destination endpoint. We redact any sensitive fields.\n    \n*   #### \n    \n    response\\_detailsnullable object\n    \n    The response that the destination endpoint returned to us. We redact any sensitive fields.\n    \n*   The destination URL for the forwarded request. Must be supported by the config.\n    \n\nThe ForwardingRequest object\n\n```\n{  \"id\": \"fwdreq_123\",  \"object\": \"forwarding.request\",  \"created\": 1234567890,  \"livemode\": false,  \"payment_method\": \"pm_456\",  \"request_details\": {    \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",    \"headers\": [      {        \"name\": \"Destination-API-Key\",        \"value\": \"{{DESTINATION_API_KEY}}\"      },      {        \"name\": \"Destination-Idempotency-Key\",        \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"      },      {        \"name\": \"Content-Type\",        \"value\": \"application/json\"      }    ],    \"http_method\": \"POST\"  },  \"request_context\": {    \"destination_ip_address\": \"35.190.113.80\",    \"destination_duration\": 234  },  \"response_details\": {    \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",    \"headers\": [      {        \"name\": \"Content-Type\",        \"value\": \"application/json;charset=UTF-8\"      }    ],    \"status\": 200  },  \"url\": \"https://endpoint-url/v1/payments\",  \"replacements\": [    \"card_number\",    \"card_expiry\",    \"card_cvc\",    \"cardholder_name\"  ]}\n```\n\n## [Create a ForwardingRequest](https://docs.stripe.com/api/forwarding/forwarding_requests/create)\n\nCreates a ForwardingRequest object.\n\n### Parameters\n\n*   #### \n    \n    payment\\_methodstringRequired\n    \n    The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.\n    \n*   #### \n    \n    replacementsarray of enumsRequired\n    \n    The field kinds to be replaced in the forwarded request.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `card_cvc`<br><br>Replace the card cvc field |\n    | `card_expiry`<br><br>Replace the card expiry fields like month and year |\n    | `card_number`<br><br>Replace the card number field |\n    | `cardholder_name`<br><br>Replace the cardholder name field |\n    \n*   The request body and headers to be sent to the destination endpoint.\n    \n*   The destination URL for the forwarded request. Must be supported by the config.\n    \n\n### Returns\n\nReturns a ForwardingRequest object.\n\nPOST /v1/forwarding/requests\n\n```\ncurl https://api.stripe.com/v1/forwarding/requests \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode url=\"https://endpoint-url/v1/payments\" \\  -d payment_method=pm_card_visa \\  -d \"replacements[0]\"=card_number \\  -d \"replacements[1]\"=card_expiry \\  -d \"replacements[2]\"=card_cvc \\  -d \"replacements[3]\"=cardholder_name \\  --data-urlencode \"request[body]\"=\"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"\\\",\\\"expiryMonth\\\":\\\"\\\",\\\"expiryYear\\\":\\\"\\\",\\\"cvc\\\":\\\"\\\",\\\"holderName\\\":\\\"\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\" \\  -d \"request[headers][0][name]\"=Destination-API-Key \\  -d \"request[headers][0][value]\"={{DESTINATION_API_KEY}} \\  -d \"request[headers][1][name]\"=Destination-Idempotency-Key \\  -d \"request[headers][1][value]\"={{DESTINATION_IDEMPOTENCY_KEY}}\n```\n\n```\n{  \"id\": \"fwdreq_123\",  \"object\": \"forwarding.request\",  \"created\": 1234567890,  \"livemode\": false,  \"payment_method\": \"pm_456\",  \"request_details\": {    \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",    \"headers\": [      {        \"name\": \"Destination-API-Key\",        \"value\": \"{{DESTINATION_API_KEY}}\"      },      {        \"name\": \"Destination-Idempotency-Key\",        \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"      },      {        \"name\": \"Content-Type\",        \"value\": \"application/json\"      }    ],    \"http_method\": \"POST\"  },  \"request_context\": {    \"destination_ip_address\": \"35.190.113.80\",    \"destination_duration\": 234  },  \"response_details\": {    \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",    \"headers\": [      {        \"name\": \"Content-Type\",        \"value\": \"application/json;charset=UTF-8\"      }    ],    \"status\": 200  },  \"url\": \"https://endpoint-url/v1/payments\",  \"replacements\": [    \"card_number\",    \"card_expiry\",    \"card_cvc\",    \"cardholder_name\"  ]}\n```\n\n## [Retrieve a ForwardingRequest](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)\n\nRetrieves a ForwardingRequest object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ForwardingRequest object.\n\nGET /v1/forwarding/requests/:id\n\n```\ncurl https://api.stripe.com/v1/forwarding/requests/fwdreq_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fwdreq_123\",  \"object\": \"forwarding.request\",  \"created\": 1234567890,  \"livemode\": false,  \"payment_method\": \"pm_456\",  \"request_details\": {    \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",    \"headers\": [      {        \"name\": \"Destination-API-Key\",        \"value\": \"{{DESTINATION_API_KEY}}\"      },      {        \"name\": \"Destination-Idempotency-Key\",        \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"      },      {        \"name\": \"Content-Type\",        \"value\": \"application/json\"      }    ],    \"http_method\": \"POST\"  },  \"request_context\": {    \"destination_ip_address\": \"35.190.113.80\",    \"destination_duration\": 234  },  \"response_details\": {    \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",    \"headers\": [      {        \"name\": \"Content-Type\",        \"value\": \"application/json;charset=UTF-8\"      }    ],    \"status\": 200  },  \"url\": \"https://endpoint-url/v1/payments\",  \"replacements\": [    \"card_number\",    \"card_expiry\",    \"card_cvc\",    \"cardholder_name\"  ]}\n```\n\n## [List all ForwardingRequests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)\n\nLists all ForwardingRequest objects.\n\n### Parameters\n\n*   Similar to other List endpoints, filters results based on created timestamp. You can pass gt, gte, lt, and lte timestamp values.\n    \n*   A pagination cursor to fetch the previous page of the list. The value must be a ForwardingRequest ID.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A pagination cursor to fetch the next page of the list. The value must be a ForwardingRequest ID.\n    \n\n### Returns\n\nReturns a list of ForwardingRequest objects.\n\nGET /v1/forwarding/requests\n\n```\ncurl -G https://api.stripe.com/v1/forwarding/requests \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/forwarding/requests\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fwdreq_123\",      \"object\": \"forwarding.request\",      \"created\": 1234567890,      \"livemode\": false,      \"payment_method\": \"pm_456\",      \"request_details\": {        \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",        \"headers\": [          {            \"name\": \"Destination-API-Key\",            \"value\": \"{{DESTINATION_API_KEY}}\"          },          {            \"name\": \"Destination-Idempotency-Key\",            \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"          },          {            \"name\": \"Content-Type\",            \"value\": \"application/json\"          }        ],        \"http_method\": \"POST\"      },      \"request_context\": {        \"destination_ip_address\": \"35.190.113.80\",        \"destination_duration\": 234      },      \"response_details\": {        \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",        \"headers\": [          {            \"name\": \"Content-Type\",            \"value\": \"application/json;charset=UTF-8\"          }        ],        \"status\": 200      },      \"url\": \"https://endpoint-url/v1/payments\",      \"replacements\": [        \"card_number\",        \"card_expiry\",        \"card_cvc\",        \"cardholder_name\"      ]    }    {...}    {...}  ],}\n```",
    "title": "The ForwardingRequest object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/finalize-payments-on-the-server-legacy?type=payment",
    "markdown": "# Finalize payments on the server\n\n## Finalize payments on the serverLegacy\n\n## Build an integration where you render the Payment Element before you create a PaymentIntent or SetupIntent, then confirm the Intent from your server.\n\n#### Warning\n\nThe Payment Element allows you to accept multiple payment methods using a single integration. In this integration, you’ll build a custom payment flow where you render the Payment Element, create the [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"), and confirm the payment from your server.\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[\n\n## Enable payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#enable-payment-methods)\n\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the Automated Clearing Settlement System (ACSS).\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[\n\n## Collect payment details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-collect-payment-details)\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode, amount, and currency. These values determine which payment methods are shown to your customer.\n\nThen, create an instance of the Payment Element and mount it to the container DOM node.\n\n`const options = {   mode: 'payment',   amount: 1099,   currency: 'usd',   paymentMethodCreation: 'manual',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n[\n\n## Create the PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-pm)\n\nWhen the customer submits your payment form, you can create a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") to send to your server for additional validation or business logic prior to confirmation.\n\n#### Caution\n\nYou must immediately use a created PaymentMethod to confirm a PaymentIntent and attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\") if you intend to use it in the future.\n\n`const form = document.getElementById('payment-form'); const submitBtn = document.getElementById('submit');  const handleError = (error) => {   const messageContainer = document.querySelector('#error-message');   messageContainer.textContent = error.message;   submitBtn.disabled = false; }  form.addEventListener('submit', async (event) => {   // We don't want to let default form submission happen here,   // which would refresh the page.   event.preventDefault();    // Prevent multiple form submissions   if (submitBtn.disabled) {     return;   }    // Disable form submission while loading   submitBtn.disabled = true;    // Trigger form validation and wallet collection   const {error: submitError} = await elements.submit();   if (submitError) {     handleError(submitError);     return;   }    // Create the PaymentMethod using the details collected by the Payment Element   const {error, paymentMethod} = await stripe.createPaymentMethod({     elements,     params: {       billing_details: {         name: 'Jenny Rosen',       }     }   });    if (error) {     // This point is only reached if there's an immediate error when     // creating the PaymentMethod. Show the error to your customer (for example, payment details incomplete)     handleError(error);     return;   }    // Create the PaymentIntent   const res = await fetch(\"/create-confirm-intent\", {     method: \"POST\",     headers: {\"Content-Type\": \"application/json\"},     body: JSON.stringify({       paymentMethodId: paymentMethod.id,     }),   });    const data = await res.json();    // Handle any next actions or errors. See the Handle any next actions step for implementation.   handleServerResponse(data); });`\n\n[\n\n## Create and submit the payment to Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#submit-payment)\n\nWhen the customer submits your payment form, use a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") to facilitate the confirmation and payment process. Create a PaymentIntent on your server with an `amount` and `currency` specified. In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. To prevent malicious customers from choosing their own prices, always decide how much to charge on the server-side (a trusted environment) and not the client.\n\nYou can use the PaymentMethod sent by your client to create and confirm the PaymentIntent in a single request.\n\n#### Note\n\nWhen confirming an Intent from the server, pass `mandate_data` to acknowledge that you’ve shown the customer the proper [terms](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-terms) for collecting their payment details. To make sure you display the proper terms, all [Elements](https://docs.stripe.com/js/elements_object/create) options should match your Intent options (for example,`setup_future_usage`, `amount`, and `currency`).\n\n`const stripe = require(\"stripe\")(`\n\n`\"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"`\n\n``); const express = require('express'); const app = express();  app.set('trust proxy', true); app.use(express.json()); app.use(express.static(\".\"));  app.post('/create-confirm-intent', async (req, res) => {   try {     const intent = await stripe.paymentIntents.create({       confirm: true,       amount: 1099,       currency: 'usd',       // In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.       automatic_payment_methods: {enabled: true},       payment_method: req.body.paymentMethodId, // the PaymentMethod ID sent by your client       use_stripe_sdk: true,       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',       mandate_data: {         customer_acceptance: {           type: \"online\",           online: {             ip_address: req.ip,             user_agent: req.get(\"user-agent\"),           },         },       },     });     res.json({       client_secret: intent.client_secret,       status: intent.status     });   } catch (err) {     res.json({       error: err     })   } });  app.listen(3000, () => {   console.log('Running on port 3000'); });``\n\n[\n\n## Handle any next actions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#next-actions)\n\nWhen the PaymentIntent requires additional action from the customer, such as authenticating with 3D Secure or redirecting to a different site, you need to trigger those actions. Use `stripe.handleNextAction` to trigger the UI for handling customer action and completing the payment.\n\n`const handleServerResponse = async (response) => {   if (response.error) {     // Show error from server on payment form   } else if (response.status === \"requires_action\") {     // Use Stripe.js to handle the required next action     const {       error,       paymentIntent     } = await stripe.handleNextAction({       clientSecret: response.clientSecret     });      if (error) {       // Show error from Stripe.js in payment form     } else {       // Actions handled, show success message     }   } else {     // No actions needed, show success message   } }`\n\n[\n\n## Disclose Stripe to your customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).",
    "title": "Finalize payments on the server | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/elements_object/create",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/element/other_element?type=cardCvc",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/elements_object/create_link_authentication_element",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/get-started/data-migrations/pan-export",
    "markdown": "# Request a payment data export\n\n## Securely export sensitive payment data.\n\nWe believe our customers own the sensitive data they entrust to Stripe. We make sure that you have access to this data—even if you’re moving elsewhere. If you decide to leave Stripe for another payment processor, we’ll work with your new processor’s team to securely transfer your credit card data.\n\nTo meet [PCI compliance](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\") obligations, we can only transfer your card data to another PCI DSS Level 1-compliant payment processor. Stripe requires the following information about the processor receiving the data:\n\n*   The processor’s current PCI Attestation of Compliance (AOC), or their listing on [Visa’s Global Registry of Service Providers](https://usa.visa.com/splisting/splistingindex.html).\n    \n*   The processor’s PGP public encryption key, which must be 4096 bits or greater in length. This key must be hosted over HTTPS on one of the processor’s domain names referenced in their AOC or Visa Registry listing.\n    \n\nAfter you [let us know](https://support.stripe.com/contact?email=true&subject=Migration+away+from+Stripe) who your new payment processor is, we can usually confirm if they meet these requirements.\n\n## Migratable data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe can help you migrate your customer card information to a new payment processor. To do this securely, Stripe prepares an encrypted JSON export file containing your data, including the card details of your customers, email addresses, and any attached [metadata](https://docs.stripe.com/api#metadata). We then arrange a secure transfer with your new processor, who uses this file to import the data into their system. You can start the migration process by [contacting us](https://support.stripe.com/contact?email=true&subject=Migration+away+from+Stripe) with the name of your new payment processor.\n\n`{   \"customers\": [     {       \"id\": \"cus_abc123def456\",       \"email\": \"jenny.rosen@example.com\",       \"description\": \"Jenny Rosen\",       \"default_source\": \"card_edf214abc789\",       \"metadata\": {         \"color_preference\": \"turquoise\",         ...       },       \"cards\": [         {           \"id\": \"card_edf214abc789\",           \"number\":\"4242424242424242\",           \"name\": \"Jenny Rosen\",           \"exp_month\": 1,           \"exp_year\": 2020,           \"address_line1\": \"123 Main St.\",           \"address_line2\": null,           \"address_city\": \"Springfield\",           \"address_state\": \"MA\",           \"address_zip\": \"01101\",           \"address_country\": \"US\"         },         ...       ]     },     ...   ] }`\n\nStripe doesn’t export your account’s payment history, subscriptions, or other objects. Instead, use the API or Dashboard to retrieve this information. You can continue to access your data through the Dashboard and API after you stop processing payments with us, as long as you don’t close or delete your account.",
    "title": "Request a payment data export | Stripe Documentation",
    "description": "Securely export sensitive payment data.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/mx-installments",
    "markdown": "# Accept installment card payments in Mexico\n\n## Learn about credit card payments using an installment plan.\n\nInstallments (meses sin intereses) are a type of credit card payment in Mexico that allows customers to split purchases over multiple billing statements. You receive the full amount (minus a fee) as if it were a normal charge, and the customer’s bank handles collecting the money over time.\n\nStripe supports installment payments for Stripe Mexico accounts using the Payment Intents and Payment Methods APIs, Checkout, Invoicing, Payment Element, and Payment Links.\n\nGet started with accepting [installments](https://docs.stripe.com/payments/meses-sin-intereses/accept-a-payment).\n\n## Connect compatibility ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with installments to process payments on behalf of connected accounts. As a platform, you can set the default installment configuration for your connected accounts in Mexico. Standard connected accounts can override these settings in the Dashboard.\n\n## Connectors and plugins ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA variety of connectors and plugins that integrate with Stripe also support installments. These connectors provide no-code and low-code solutions for accepting a wide range of local payment methods using Stripe, including installments.\n\nFor example, the [latest version of the Stripe Connector for Adobe Commerce](https://docs.stripe.com/connectors/adobe-commerce/install#upgrade) has built-in support for accepting payments with installments. For information regarding setup instructions and features for specific plugins, contact the plugin developers directly.\n\nIf you use a plugin that doesn’t yet support installments, you can [contact our support team](https://support.stripe.com/) to let us know, and we’ll do our best to see if we can enable installments for that plugin.\n\n## Fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you accept a payment with installments, an additional fee is added to the standard credit card transaction fee. The fee varies according to the number of installments, or months, applied to the transaction.\n\n| **Installment Plan Duration** | **Default Minimum Transaction Amount** | **Additional Fee %** |\n| --- | --- | --- |\n| 3 months | 300.00 MXN | 5%  |\n| 6 months | 600.00 MXN | 7.5% |\n| 9 months | 900.00 MXN | 10% |\n| 12 months | 1,200.00 MXN | 12.5% |\n| 18 months | 1,800.00 MXN | 17.5% |\n| 24 months | 2,400.00 MXN | 22.5% |\n\n## Requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThere are restrictions on which transactions and cards can use meses sin intereses. You don’t need to implement these rules yourself. Stripe automatically determines meses sin intereses eligibility after you set up the payment method.\n\n*   Stripe only supports installments for Stripe Mexico accounts.\n*   The payment method must be a credit card issued in Mexico.\n*   The card must be a consumer card–installments don’t support corporate cards.\n*   The card must be issued by one of our [supported issuers](https://docs.stripe.com/payments/mx-installments#supported-cards).\n*   The currency value must be MXN (pesos).\n*   The total payment amount must be above a [minimum transaction amount](https://docs.stripe.com/payments/mx-installments#fees). Stripe provides a minimum transaction amount based on the number of months in the plan selected. You can specify which installment plans you want to enable and define your own custom minimum and maximum transaction amounts by [configuring custom installment settings](https://docs.stripe.com/payments/meses-sin-intereses/accept-a-payment#custom-settings) in the Dashboard.\n\n## Supported cards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can accept payments in Installments on cards from the following issuers:\n\n*   Afirme\n*   American Express\n*   BanBajío\n*   Banjercito\n*   BBVA\n*   Banca Mifel\n*   Banco Azteca\n*   Banco Famsa\n*   Banco Invex\n*   Banco Multiva\n*   Banorte\n*   Banregio\n*   Citibanamex (3-, 6-, 9-, and 12-month plans only)\n*   Falabella\n*   Hey Banco\n*   HSBC\n*   Inbursa\n*   Konfio\n*   Liverpool\n*   NanoPay\n*   Nubank\n*   RappiCard\n*   Santander\n*   Scotiabank",
    "title": "Accept installment card payments in Mexico | Stripe Documentation",
    "description": "Learn about credit card payments using an installment plan.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/element/other_element?type=cardExpiry",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/element/link_authentication_element",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/card-element",
    "markdown": "# Card Element quickstart | Stripe DocumentationThe Stripe Docs logo\n\nSearch the docs or ask a question",
    "title": "Card Element quickstart | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/customize-payment-methods",
    "markdown": "# Customize payment methods | Stripe DocumentationThe Stripe Docs logo\n\n## Choose how the Payment Element displays payment methods.\n\nThe Payment Element supports many payment methods. It displays the payment methods you have enabled, hides any that won’t work for the current transaction, and sorts them dynamically for the best conversion rates.\n\nYou can customize its behavior in these ways:\n\n*   [Enable different payment methods](#enable-different-payment-methods).\n*   [Sort payment methods](#sort-payment-methods) differently than the default.\n\n## Enable different payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can specify [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) to enable different payment methods by selecting them [in the Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe enables this functionality by default in the latest version of the API. This allows Stripe to pull your payment method preferences from the Dashboard to dynamically show the most relevant payment methods to your customers. Alternatively, you can [list payment methods manually using payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n\nThere’s one situation where the Payment Element overrides your choice. It hides payment methods that don’t support the current payment. For instance, in a recurring payment for 10 JPY, the Payment Element hides methods that don’t support JPY or recurring payments.\n\n## Sort payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element uses dynamic ordering to optimize which payment methods appear for each user. With the [paymentMethodOrder](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-paymentMethodOrder) parameter, you can override the default order for payment methods in the Payment Element, including Apple Pay and Google Pay.\n\nPayment methods that you specify in `paymentMethodOrder` are shown first, followed by any additional payment methods. If you specify payment method types that Stripe wouldn’t show, they’re ignored.\n\n`elements.create('payment', {   paymentMethodOrder: ['apple_pay', 'google_pay', 'card', 'klarna'] });`\n\nYou can include Apple Pay (`apple_pay`) and Google Pay (`google_pay`) when setting the order for payment methods in addition to a full list of [payment method types](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).\n\nRegulations in [Finland](https://support.stripe.com/questions/payment-method-legislation-in-finland) and [Sweden](https://support.stripe.com/questions/payment-method-legislation-in-sweden) require that debit payment methods must be presented before credit payment methods at checkout in those countries.\n\n## Filter card brands![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen your customers pay with a card through the Payment Element, you can control which card brands you accept and which ones you don’t. This applies to both the card input field and Apple Pay or Google Pay.\n\n#### Note",
    "title": "Customize payment methods | Stripe Documentation",
    "description": "Choose how the Payment Element displays payment methods.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-element/migration-ct",
    "markdown": "# Migrate to Confirmation Tokens | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to migrate your existing \"create payment method\" integration to a \"create confirmation token\" integration.\n\nUse this guide to learn how to finalize payments on the server by using a [ConfirmationToken](https://docs.stripe.com/api/confirmation_tokens/object) instead of a [PaymentMethod](https://docs.stripe.com/api/payment_methods) to send data collected from your client to your server.\n\nA `ConfirmationToken` holds a superset of the data found on a `PaymentMethod`, such as shipping information, and enables new features as we build them.\n\n[](#client-side)\n\nInstead of calling [stripe.createPaymentMethod](https://docs.stripe.com/js/payment_methods/create_payment_method_elements), call [stripe.createConfirmationToken](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token) to create a `ConfirmationToken` object. Pass this ConfirmationToken to the server to confirm the PaymentIntent.\n\nThe `stripe.createConfirmationToken` method accepts the same parameters as `stripe.createPaymentMethod` (through [params.payment\\_method\\_data](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token#create_confirmation_token-options-params-payment_method_data)), plus additional [shipping](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token#create_confirmation_token-options-params-shipping) and [return\\_url](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token#create_confirmation_token-options-params-return_url) parameters.\n\n`// Create the PaymentMethod using the details collected by the Payment Element. const {error, paymentMethod} = await stripe.createPaymentMethod({   elements,   params: {     billing_details: {       name: 'Jenny Rosen',     }   } });  if (error) {   // This point is only reached if there's an immediate error when creating the PaymentMethod.   // Show the error to your customer (for example, payment details incomplete)   handleError(error);   return; }  // Create the PaymentIntent const res = await fetch(\"/create-confirm-intent\", {   method: \"POST\",   headers: {\"Content-Type\": \"application/json\"},   body: JSON.stringify({     paymentMethodId: paymentMethod.id,   }), });`\n\n`// Create the ConfirmationToken using the details collected by the Payment Element and additional shipping information. Provide shipping and return_url if you don't want to provide it when confirming the intent on the server const {error, confirmationToken} = await stripe.createConfirmationToken({   elements,   params: {     payment_method_data: {        billing_details: {          name: 'Jenny Rosen',        }     },     // Remove shipping if you're collecting it using Address Element or don't require it     shipping: {       name: 'Jenny Rosen',       address: {         line1: '1234 Main Street',         city: 'San Francisco',         state: 'CA',         country: 'US',         postal_code: '94111',       },     },     return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',   } });  if (error) {   // This point is only reached if there's an immediate error when creating the ConfirmationToken.   // Show the error to your customer (for example, payment details incomplete)   handleError(error);   return; }  // Create the PaymentIntent const res = await fetch(\"/create-confirm-intent\", {   method: \"POST\",   headers: {\"Content-Type\": \"application/json\"},   body: JSON.stringify({     confirmationTokenId: confirmationToken.id,   }), });`\n\n[](#server-side)\n\nYou pass the ConfirmationToken to the server to confirm the [PaymentIntent](https://docs.stripe.com/api/payment_intents), rather than passing a [PaymentMethod](https://docs.stripe.com/api/payment_methods) as you did before. The properties stored on the `ConfirmationToken` are applied to the Intent when its ID is provided to the [confirmation\\_token](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirmation_token) parameter at confirmation time.\n\n#### Note\n\nIf you already provide [shipping](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token#create_confirmation_token-options-params-shipping) and [return\\_url](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token#create_confirmation_token-options-params-return_url) on the ConfirmationToken, you don’t need to provide those fields again when confirming the PaymentIntent.\n\n``app.post('/create-confirm-intent', async (req, res) => {   try {     const intent = await stripe.paymentIntents.create({       confirm: true,       amount: 1099,       currency: 'usd',       // In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.       automatic_payment_methods: {enabled: true},       use_stripe_sdk: true,       // the PaymentMethod ID sent by your client       payment_method: req.body.paymentMethodId,       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',       mandate_data: {         customer_acceptance: {           type: \"online\",           online: {             ip_address: req.ip,             user_agent: req.get(\"user-agent\"),           },         },       },       shipping: {         name: 'Jenny Rosen',         address: {           line1: '1234 Main Street',           city: 'San Francisco',           state: 'CA',           country: 'US',           postal_code: '94111',         },       }     });     res.json({       client_secret: intent.client_secret,       status: intent.status     });   } catch (err) {     res.json({       error: err     })   } });``\n\n``app.post('/create-confirm-intent', async (req, res) => {   try {     const intent = await stripe.paymentIntents.create({       confirm: true,       amount: 1099,       currency: 'usd',       // In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.       automatic_payment_methods: {enabled: true},       use_stripe_sdk: true,       // the ConfirmationToken ID sent by your client that already has the shipping, mandate_data, and return_url data       confirmation_token: req.body.confirmationTokenId,     });     res.json({       client_secret: intent.client_secret,       status: intent.status     });   } catch (err) {     res.json({       error: err     })   } });``\n\nAny parameters provided directly to the PaymentIntent or SetupIntent at confirmation time, such as `shipping` override corresponding properties on the ConfirmationToken.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Design an integration](https://docs.stripe.com/payments/payment-element/design-an-integration)",
    "title": "Migrate to Confirmation Tokens | Stripe Documentation",
    "description": "Learn how to migrate your existing \"create payment method\" integration to a \"create confirmation token\" integration.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/review-changelog",
    "markdown": "# App review requirements changelog | Stripe DocumentationThe Stripe Docs logo\n\n## Track updates to the requirements for the app review process.\n\nUse the following changelog to track changes to the requirements needed to publish your app.\n\n## October 31, 2022 ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNew requirements:\n\n*   Use the same app name for both the [app listing](https://docs.stripe.com/stripe-apps/listing-guidelines) and [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest).\n*   Include any obvious app limitations in the app description (for example, the app doesn’t work in specific countries).\n*   Always submit new app versions from the same account. If this isn’t possible, you must contact [Stripe Support](https://support.stripe.com/?contact=true) to find alternatives.\n*   Create a clear path for users to unauthenticate the app from within the Stripe Dashboard UI.\n*   All links and buttons that redirect to an external URL must use the [external icon](https://docs.stripe.com/stripe-apps/components/icon).\n\nRemoved requirement:\n\n*   Apps need to have a cancel catch in the settings page.",
    "title": "App review requirements changelog | Stripe Documentation",
    "description": "Track updates to the requirements for the app review process.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/listing-guidelines",
    "markdown": "# App listing guidelines | Stripe DocumentationThe Stripe Docs logo\n\nName35 characters max. Must not contain any of the following words or names: `Stripe`, `app`, `free`, `paid`.Appears alongside your app logo throughout the Marketplace and on your app listing page.EmailWorldIcon logoImage must be high-resolution, at least 300x300 pixels, 1:1 aspect ratio (square), .PNG or .JPG format, and under 10MB.Appears alongside your app name throughout the App Marketplace and on your app listing page.Built by80 characters max.Name of the individual or organization that built and maintains the app.EmailWorld, IncCategorySelect the category that best describes your app.If another category is more appropriate, Stripe adjusts it and notifies you during app review.\n\n*   Support\n*   Sales\n\nSubtitle80 characters max.Appears alongside your app name throughout the Marketplace and on your app listing page. This is a concise phrase summarizing the value of app.See and edit a customer’s support history from the Stripe DashboardAbout1000 characters max.Briefly describe what your company does, who your products are for, and the value they deliver for people. An ideal description is one to two sentences, overviewing your main product or overall company, followed by a brief description of your Stripe app. Avoid hyperbole, marketing jargon, keyword stuffing or unprovable claims (for example, “The world’s best support product”).EmailWorld is an email delivery service for growing e-commerce businesses. The EmailWorld app brings our advanced messaging capabilities into Stripe so you can reach your audience in just a few clicks.Works with_Automatically populated_Your app manifest automatically populates this, which lets users know what parts of the Stripe Dashboard your [app drawer](https://docs.stripe.com/stripe-apps/design#available-surfaces) works with.\n\n*   Payments\n*   Customers\n\nFeaturesAdd up to three key app features that highlight specific use cases of your app.Each feature should explain how the app interacts with and enhances Stripe, and not describe your company overall.﹂Title80 characters max.Appears alongside your key feature visual and description. This is a concise phrase summarizing the use case a user can achieve with your app, in plain language.Get email insights on Stripe customers﹂Description300 characters max.A concise description of the feature. A good description touches on two things: both a clear **description** of how the feature actually works, and also the **benefit** someone experiences as a result of using it.View email activity, such as opens and clicks, as it relates to your Stripe customers. Now you can assess how well your campaigns lead to sales without having to toggle between tabs.﹂ImageMust be high-resolution, a minimum of 1600 pixels wide (no height minimum), PNG or JPG format, and 10MB or less.Use the [Figma UI toolkit](https://docs.stripe.com/stripe-apps/design#figma-ui-toolkit) to design and export a high quality feature image. Show your app in the context of the Stripe Dashboard. Don’t use screenshots showing real customer data or screenshots of your app in test mode.PricingCommunicate whether your app is free or requires a paid subscription.\n\n*   Free\n*   Free trial available\n*   Paid subscription required\n\nPricing pageRequired if your app requires a paid subscription.Provide a link to a pricing page that explains your pricing model to a prospective user.Support channelAt least one support channel is required.Provide up to two support channels. This way, users can quickly identify the best support channel for their needs and contact you to troubleshoot any issues.\n\n*   `help@helptable.com`\n*   `helptable.com/support`\n\nBased inSelect each location where your company has headquarters.United StatesSupported languagesEnglish is pre-selected and required. Stripe can only support English at this time. If you’d like to support additional languages, reach out to Stripe.EnglishPrivacy policyProvide a link to your privacy policy. This is a URL where users can read the privacy policy for both your company and your app.`emailworld.com/privacy-policy`Terms of service_Optional_Provide a link to your Terms of Service. This needs to be a URL where users can read the terms of service for both your company and your and app.Company website_Optional_Provide a link to your company’s website.FAQ page_Optional_Provide a link to your app’s FAQ page.Technical documentation_Optional_Provide a link to your app’s technical documentation page. The documentation should explain everything from installing your Stripe app to how to get the most out of its features.Permissions_Automatically populated_Your app manifest automatically populates this. This lets users know which permissions the app requires.",
    "title": "App listing guidelines | Stripe Documentation",
    "description": "Follow the specifications and guidelines to define the contents of your app listing page before publishing to the App Marketplace.",
    "languageCode": "en-US"
  }
]