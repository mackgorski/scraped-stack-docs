[
  {
    "url": "https://www.prisma.io/docs",
    "markdown": "# Prisma Documentation\n\nPrisma ORM works seamlessly across most popular databases and service providers. Refer to our [Database features matrix](https://www.prisma.io/docs/orm/reference/database-features) for information about supported features and types for each database.  \nTo explore supported databases for Accelerate, visit the\n\n[prerequisites section](https://www.prisma.io/docs/accelerate/getting-started#prerequisites). For Pulse, see the [database setup documentation](https://www.prisma.io/docs/pulse/database-setup).",
    "title": "Prisma Documentation",
    "description": "Get started with Prisma in the official documentation, and learn more about all Prisma's features with reference documentation, guides, and more.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/reference/database-features",
    "markdown": "# Database features matrix | Prisma Documentation\n\nThis page gives an overview of the features which are provided by the databases that Prisma ORM supports. Additionally, it explains how each of these features can be used in Prisma ORM with pointers to further documentation.\n\n> **Note**: If a feature is not supported natively by the database, it's also not available in Prisma ORM.\n\n## Relational database features[​](https://www.prisma.io/docs/orm/reference/database-features#relational-database-features \"Direct link to Relational database features\")\n\nThis section describes which database features exist on the relational databases that are currently supported by Prisma ORM. The **Prisma schema** column indicates how a certain feature can be represented in the [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema) and links to its documentation. Note that database features can be used in **Prisma Client** even though they might not yet be representable in the Prisma schema.\n\n### Constraints[​](https://www.prisma.io/docs/orm/reference/database-features#constraints \"Direct link to Constraints\")\n\n| Constraint | PostgreSQL | Microsoft SQL Server | MySQL | SQLite | CockroachDB | Prisma schema | Prisma Client | Prisma Migrate |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| `PRIMARY KEY` | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | [`@id` and `@@id`](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-an-id-field) | ✔️  | ✔️  |\n| `FOREIGN KEY` | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | [Relation fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relation-fields) | ✔️  | ✔️  |\n| `UNIQUE` | ✔️  | ✔️† | ✔️  | ✔️  | ✔️  | [`@unique` and `@@unique`](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-a-unique-field) | ✔️  | ✔️  |\n| `CHECK` | ✔️  | ✔️  | ✔️\\* | ✔️  | ✔️  | Not yet | ✔️  | Not yet |\n| `NOT NULL` | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | [`?`](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#type-modifiers) | ✔️  | ✔️  |\n| `DEFAULT` | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | [`@default`](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-a-default-value) | ✔️  | ✔️  |\n\n*   \\*In [MySQL 8 and higher](https://dev.mysql.com/doc/refman/8.0/en/create-table-check-constraints.html)\n*   † [Caveats apply when using the `UNIQUE` constraint with Microsoft SQL Server](https://www.prisma.io/docs/orm/overview/databases/sql-server#data-model-limitations)\n\n### Referential Actions (Delete and Update behaviors for foreign key references)[​](https://www.prisma.io/docs/orm/reference/database-features#referential-actions-delete-and-update-behaviors-for-foreign-key-references \"Direct link to Referential Actions (Delete and Update behaviors for foreign key references)\")\n\n| Deletion behavior | PostgreSQL | Microsoft SQL Server | MySQL | SQLite | CockroachDB | Prisma schema | Prisma Client | Prisma Migrate |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| `CASCADE` | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | **✔️**† | ✔️  | **✔️**† |\n| `RESTRICT` | ✔️  | No  | ✔️  | ✔️  | ✔️  | **✔️**† | ✔️  | **✔️**† |\n| `NO ACTION` | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | **✔️**† | ✔️  | **✔️**† |\n| `SET DEFAULT` | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | **✔️**† | ✔️  | **✔️**† |\n| `SET NULL` | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | **✔️**† | ✔️  | **✔️**† |\n\n*   † In [2.26.0](https://github.com/prisma/prisma/releases/tag/2.26.0) and later you can define [referential actions](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions) on your relation fields. Referential actions determine what should happen to a record when a related record is deleted or updated.\n\n### Indexes[​](https://www.prisma.io/docs/orm/reference/database-features#indexes \"Direct link to Indexes\")\n\n| Index | PostgreSQL | Microsoft SQL Server | MySQL | SQLite | CockroachDB | Prisma schema | Prisma Client | Prisma Migrate |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| `UNIQUE` | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | [`@unique` and `@@unique`](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-a-unique-field) | ✔️  | ✔️  |\n| `USING` | ✔️  | No  | No  | No  | ✔️  | [`type`](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#configuring-the-access-type-of-indexes-with-type-postgresql)† | ✔️  | ✔️† |\n| `WHERE` | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | Not yet | ✔️  | Not yet |\n| `(expression)` | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | Not yet | ✔️  | Not yet |\n| `INCLUDE` | ✔️  | ✔️  | No  | No  | ✔️  | Not yet | ✔️  | Not yet |\n\n*   † Available in preview in 3.6.0 and later and in general availability in 4.0.0 and later, with the PostgreSQL connector only.\n\nAlgorithm specified via `USING`:\n\n| Index type (Algorithm) | PostgreSQL | Microsoft SQL Server | MySQL | SQLite | CockroachDB | Prisma schema | Prisma Client | Prisma Migrate |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| B-tree | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | ✔️† | ✔️  | Not yet |\n| Hash | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | ✔️† | ✔️  | Not yet |\n| GiST | ✔️  | ✔️  | No  | No  | ✔️  | ✔️† | ✔️\\* | Not yet |\n| GIN | ✔️  | ✔️  | No  | No  | ✔️  | ✔️† | ✔️\\* | Not yet |\n| BRIN | ✔️  | ✔️  | No  | No  | ✔️  | ✔️† | ✔️\\* | Not yet |\n| SP-GiST | ✔️  | ✔️  | No  | No  | ✔️  | ✔️† | ✔️\\* | Not yet |\n\n*   \\* Only available if natively supported by database.\n*   † Available with the PostgreSQL connector only in Prisma ORM versions `4.0.0` and later.\n\n### Misc[​](https://www.prisma.io/docs/orm/reference/database-features#misc \"Direct link to Misc\")\n\n| Feature | PostgreSQL | Microsoft SQL Server | MySQL | SQLite | CockroachDB | Prisma schema | Prisma Client | Prisma Migrate |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| Autoincrementing IDs | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | [`autoincrement()`](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-a-default-value) | ✔️  | ✔️  |\n| Arrays | ✔️  | No  | No  | No  | ✔️  | [`[]`](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#type-modifiers) | ✔️\\* | ✔️\\* |\n| Enums | ✔️  | No  | ✔️  | No  | ✔️  | [`enum`](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-enums) | ✔️\\* | ✔️\\* |\n| Native database types | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | Not yet |\n| SQL Views | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  | Not yet | Not yet | Not yet |\n| JSON support | ✔️  | **✔️**† | ✔️  | No  | ✔️‡ | ✔️\\* | ✔️\\* | ✔️\\* |\n| Fuzzy/Phrase full text search | ✔️  | ✔️  | ✔️  | No  | ✔️  | Not yet | Not yet | Not yet |\n| Table inheritance | ✔️  | ✔️  | No  | No  | ✔️  | Not yet | ✔️\\* | Not yet |\n| Authorization and user management | ✔️  | ✔️  | ✔️  | No  | ✔️  | Not yet | Not yet | Not yet |\n\n*   \\* Only available if natively supported by database.\n*   † Only supports JSON through SQL functions, but doesn't have a JSON column type. Therefore client JSON operations are not supported.\n*   ‡ JSON arrays are not yet supported: see the [CockroachDB connector page](https://www.prisma.io/docs/orm/overview/databases/cockroachdb) for details\n\n## NoSQL database features[​](https://www.prisma.io/docs/orm/reference/database-features#nosql-database-features \"Direct link to NoSQL database features\")\n\nThis section describes which database features exist on the NoSQL databases that are currently supported by Prisma ORM.\n\n### MongoDB[​](https://www.prisma.io/docs/orm/reference/database-features#mongodb \"Direct link to MongoDB\")\n\nThe following table lists common MongoDB features and describes the level of support offered by Prisma ORM:\n\n| Feature | Supported by Prisma ORM | Notes |\n| --- | --- | --- |\n| Embedded documents | ✔️  |     |\n| Transactions | ✔️  |     |\n| Indexes | ✔️ with caveats | Indexes can only be introspected if the field they refer to includes at least some data. |\n| Autoincrementing IDs | No  |     |\n| Compound IDs | No  | MongoDB does not support composite IDs (`@@id`) |\n| Generated `ObjectId` | ✔️  | See: [Defining IDs for MongoDB](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-ids-in-mongodb) |\n| Arrays | ✔️  |     |\n| Enums | ✔️  | Implemented at Prisma ORM level |\n| Native database types | ✔️  | See: [Field mapping reference](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-scalar-types) |\n| JSON support | ✔️  | Advanced `Json` field filtering is not yet supported. |\n| DBrefs | No  |     |\n| Change streams | No  |     |\n| Direct access to the aggregation pipeline | No  |     |",
    "title": "Database features matrix | Prisma Documentation",
    "description": "Learn which database features are supported in Prisma ORM and how they map to the different Prisma ORM tools.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/pulse/api-reference",
    "markdown": "# Pulse: API reference | Prisma Documentation\n\nThe Pulse API reference documentation on this page is based on the following schema:\n\n```\nmodel User {  id    Int     @id @default(autoincrement())  name  String?  email String  @unique}\n```\n\n## `stream()`[​](https://www.prisma.io/docs/pulse/api-reference#stream \"Direct link to stream\")\n\n`stream()` returns an [async iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) that receives all database change events related to the table you call this method on.\n\n```\nconst stream = await prisma.user.stream();\n```\n\nBecause an async iterable is returned, you can use a [`for await...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of) loop to wait for and receive events:\n\n```\nfor await (let event of subscription) {  console.log(event);}\n```\n\n### Notes[​](https://www.prisma.io/docs/pulse/api-reference#notes \"Direct link to Notes\")\n\n*   Usage of `stream()` requires [event persistence](https://www.prisma.io/docs/pulse/database-events#event-persistence) to be enabled in your Pulse project.\n*   `stream()` guarantees that all events will be delivered at least once and in the right order.\n\n### Options[​](https://www.prisma.io/docs/pulse/api-reference#options \"Direct link to Options\")\n\nYou can pass an object with configuration options to `stream()`. The object has the following fields:\n\n| Name | Description |\n| --- | --- |\n| `name` | The name of the stream. Providing this option enables \"resumability\" and will make sure you receive events later if your stream isn't active at the time when the event actually happened (e.g. because your server was down). |\n| `create` | An object to specify filters for the create events to be received. If you leave the object empty with `create: {}`, you will receive _all_ create events. You can filter on any scalar field of your model. |\n| `update` | An object with an `after` field to specify filters for the update events to be received. If you leave the object empty with `update: {}`, you will receive _all_ update events. The filter is applied to the values of the record _after_ an update has been performed. You can filter on any scalar field of your model. |\n| `delete` | An object to specify filters for the delete events to be received. You can filter on any scalar field of your model. |\n\n### Return type[​](https://www.prisma.io/docs/pulse/api-reference#return-type \"Direct link to Return type\")\n\nWhen called with no filter arguments, the `stream()` method returns the following type:\n\n```\nconst stream: PulseSubscription<  | PulseCreateEvent<{      id: number;      name: string | null;      email: string;    }>  | PulseUpdateEvent<{      id: number;      name: string | null;      email: string;    }>  | PulseDeleteEvent<{      id: number;      name: string | null;      email: string;    }>> = await prisma.user.stream();\n```\n\nDepending on the arguments you provide, the return type may change. For example, if you filter for only `create` events, the type will get adjusted:\n\n```\nconst stream: PulseSubscription<  PulseCreateEvent<{    id: number;    email: string;    name: string | null;  }>> = await prisma.user.stream({  create: {},});\n```\n\n### Examples[​](https://www.prisma.io/docs/pulse/api-reference#examples \"Direct link to Examples\")\n\n#### Use a `name` to be able to \"resume\" the stream[​](https://www.prisma.io/docs/pulse/api-reference#use-a-name-to-be-able-to-resume-the-stream \"Direct link to use-a-name-to-be-able-to-resume-the-stream\")\n\n```\nconst stream = await prisma.user.stream({  name: \"all-user-events\",});\n```\n\nLearn more about resuming streams [here](https://www.prisma.io/docs/pulse/database-events#resuming-event-streams)\n\n#### Filter for new `User` records with a non-null value for `name`[​](https://www.prisma.io/docs/pulse/api-reference#filter-for-new-user-records-with-a-non-null-value-for-name \"Direct link to filter-for-new-user-records-with-a-non-null-value-for-name\")\n\n```\nconst stream = await prisma.user.stream({  create: {    name: { not: null },  },});\n```\n\n#### Filter for updated `User` records where the `email` ends with `@prisma.io` after the update[​](https://www.prisma.io/docs/pulse/api-reference#filter-for-updated-user-records-where-the-email-ends-with-prismaio-after-the-update \"Direct link to filter-for-updated-user-records-where-the-email-ends-with-prismaio-after-the-update\")\n\n```\nconst stream = await prisma.user.stream({  update: {    after: {      email: { endsWith: \"@prisma.io\" },    },  },});\n```\n\n#### Filter for deleted `User` records where the `email` contains `hello`[​](https://www.prisma.io/docs/pulse/api-reference#filter-for-deleted-user-records-where-the-email-contains-hello \"Direct link to filter-for-deleted-user-records-where-the-email-contains-hello\")\n\n```\nconst stream = await prisma.user.stream({  delete: {    email: { contains: \"hello\" },  },});\n```\n\n## `subscribe()`[​](https://www.prisma.io/docs/pulse/api-reference#subscribe \"Direct link to subscribe\")\n\n`subscribe()` returns an [async iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) that receives all database change events related to the table you call this method on.\n\n```\nconst subscription = await prisma.user.subscribe();\n```\n\nBecause an async iterable is returned, you can use a [`for await...of`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of) loop to wait for and receive events:\n\n```\nfor await (let event of subscription) {  console.log(event);}\n```\n\n### Notes[​](https://www.prisma.io/docs/pulse/api-reference#notes-1 \"Direct link to Notes\")\n\n*   `subscribe()` guarantees that all events will be delivered at most once. There are no guarantees about the order in which the events arrive.\n*   Events delivered with `subscribe()` are _ephemeral_, meaning they won't be delivered if your subscription isn't active during the time when the event happens in the database (e.g. because your server is down).\n\n### Options[​](https://www.prisma.io/docs/pulse/api-reference#options-1 \"Direct link to Options\")\n\nYou can pass an object with configuration options to `subscribe()`. The object has the following fields:\n\n| Name | Description |\n| --- | --- |\n| `create` | An object to specify filters for the create events to be received. If you leave the object empty with `create: {}`, you will receive _all_ create events. You can filter on any scalar field of your model. |\n| `update` | An object with an `after` field to specify filters for the update events to be received. If you leave the object empty with `update: {}`, you will receive _all_ update events. The filter is applied to the values of the record _after_ an update has been performed. You can filter on any scalar field of your model. |\n| `delete` | An object to specify filters for the delete events to be received. You can filter on any scalar field of your model. |\n\n### Return type[​](https://www.prisma.io/docs/pulse/api-reference#return-type-1 \"Direct link to Return type\")\n\nWhen called with no filter arguments, the `subscribe()` method returns the following type:\n\n```\nconst subscription: PulseSubscription<  | PulseCreateEvent<{      id: number;      name: string | null;      email: string;    }>  | PulseUpdateEvent<{      id: number;      name: string | null;      email: string;    }>  | PulseDeleteEvent<{      id: number;      name: string | null;      email: string;    }>> = await prisma.user.subscribe();\n```\n\nDepending on the arguments you provide, the return type may change. For example, if you filter for only `create` events, the type will get adjusted:\n\n```\nconst subscription: PulseSubscription<  PulseCreateEvent<{    id: number;    email: string;    name: string | null;  }>> = await prisma.user.subscribe({  create: {},});\n```\n\n### Examples[​](https://www.prisma.io/docs/pulse/api-reference#examples-1 \"Direct link to Examples\")\n\n#### Filter for new `User` records with a non-null value for `name`[​](https://www.prisma.io/docs/pulse/api-reference#filter-for-new-user-records-with-a-non-null-value-for-name-1 \"Direct link to filter-for-new-user-records-with-a-non-null-value-for-name-1\")\n\n```\nconst subscription = await prisma.user.subscribe({  create: {    name: { not: null },  },});\n```\n\n#### Filter for updated `User` records where the `email` ends with `@prisma.io` after the update[​](https://www.prisma.io/docs/pulse/api-reference#filter-for-updated-user-records-where-the-email-ends-with-prismaio-after-the-update-1 \"Direct link to filter-for-updated-user-records-where-the-email-ends-with-prismaio-after-the-update-1\")\n\n```\nconst subscription = await prisma.user.subscribe({  update: {    after: {      email: { endsWith: \"@prisma.io\" },    },  },});\n```\n\n#### Filter for deleted `User` records where the `email` contains `hello`[​](https://www.prisma.io/docs/pulse/api-reference#filter-for-deleted-user-records-where-the-email-contains-hello-1 \"Direct link to filter-for-deleted-user-records-where-the-email-contains-hello-1\")\n\n```\nconst subscription = await prisma.user.subscribe({  delete: {    email: { contains: \"hello\" },  },});\n```\n\n## `stream()` vs `subscribe()`[​](https://www.prisma.io/docs/pulse/api-reference#stream-vs-subscribe \"Direct link to stream-vs-subscribe\")\n\nFor the majority of use cases, `stream()` is the recommended option because it can provide guarantees for events to arrive on the consumer-side. Note though that because `stream()` requires event persistence to be enabled, this has implications for [event storage and costs](https://www.prisma.io/pricing).\n\nSee a [more detailed comparison](https://www.prisma.io/docs/pulse/database-events#event-delivery-semantics-in-prisma-pulse).\n\n## `stop()`[​](https://www.prisma.io/docs/pulse/api-reference#stop \"Direct link to stop\")\n\nAllows you to explicitly stop streams and subscriptions and close the connection. This is needed to ensure that the limited number of subscriptions allowed per table is not exhausted.\n\n### For `stream()`[​](https://www.prisma.io/docs/pulse/api-reference#for-stream \"Direct link to for-stream\")\n\n```\n// Create the streamconst stream = await prisma.user.stream();// ... Use the stream// Stop the streamstream.stop();\n```\n\n### For `subscribe()`[​](https://www.prisma.io/docs/pulse/api-reference#for-subscribe \"Direct link to for-subscribe\")\n\n```\n// Create the subscriptionconst subscription = await prisma.user.subscribe();// ... Use the subscription// Stop the subscriptionsubscription.stop();\n```\n\n## `PulseCreateEvent<User>`[​](https://www.prisma.io/docs/pulse/api-reference#pulsecreateeventuser \"Direct link to pulsecreateeventuser\")\n\nAn object of type `PulseCreateEvent` is returned by any `create` event that happens in the database.\n\n### Type[​](https://www.prisma.io/docs/pulse/api-reference#type \"Direct link to Type\")\n\nA `PulseCreateEvent` has the following fields:\n\n| Name | Type | Example value | Description |\n| --- | --- | --- | --- |\n| `id` | `string` | `01HYBEER1JPSBVPG2NQADNQTA6` | A unique identifier / idempotency key following the [ULID](https://github.com/ulid/spec#specification) specification. |\n| `modelName` | `string` | `User` | The name of the model affected by this event. This is a model name from your Prisma schema. |\n| `action` | `string` | `create` | The kind of write-operation performed in the database: `create` |\n| `created` | `User` | See `created` in the example below. | An object with the values of the record was just created. |\n\nThe type of the event is generic to the fields of your model. In the case, of the `User` model above, it looks as follows:\n\n```\nPulseCreateEvent<{  id: number;  email: string;  name: string | null;}>;\n```\n\n### Example[​](https://www.prisma.io/docs/pulse/api-reference#example \"Direct link to Example\")\n\nHere is an example:\n\n```\n{  action: 'create',  created: { id: 3, email: 'jane@prisma.io', name: 'Jane Doe' },  id: '0/2A5A590',  modelName: 'User'}\n```\n\n## `PulseUpdateEvent<User>`[​](https://www.prisma.io/docs/pulse/api-reference#pulseupdateeventuser \"Direct link to pulseupdateeventuser\")\n\nAn object of type `PulseUpdateEvent` is returned by any `delete` event that happens in the database.\n\n### Type[​](https://www.prisma.io/docs/pulse/api-reference#type-1 \"Direct link to Type\")\n\nA `PulseUpdateEvent` has the following fields:\n\n| Name | Type | Example value | Description |\n| --- | --- | --- | --- |\n| `id` | `string` | `01HYBEER1JPSBVPG2NQADNQTA6` | A unique identifier / idempotency key following the [ULID](https://github.com/ulid/spec#specification) specification. |\n| `modelName` | `string` | `User` | The name of the model affected by this event. This is a model name from your Prisma schema. |\n| `action` | `string` | `update` | The kind of write-operation performed in the database: `update` |\n| `before` | `User` | `null` | An object with the _old_ values of the record that was just updated. This only works with when the [`REPLICA IDENTITY`](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#replica-identity) in your database is set to `FULL`. Otherwise the value will always be `null`. |\n| `after` | `User` | See `after` in the example below. | An object with the _new_ values of the record that was just updated. |\n\nThe type of the event is generic to the fields of your model. In the case, of the `User` model above, it looks as follows:\n\n```\nPulseUpdateEvent<{  id: number;  email: string;  name: string | null;}>;\n```\n\n### Example[​](https://www.prisma.io/docs/pulse/api-reference#example-1 \"Direct link to Example\")\n\n_Without_ having set the `REPLICA IDENDITY` to `FULL`:\n\n```\n{  action: 'update',  after: { id: 2, email: 'doe@prisma.io', name: 'Jane Doe' },  before: null,  id: '0/2A5A248',  modelName: 'User'}\n```\n\n_With_ having set the `REPLICA IDENDITY` to `FULL`:\n\n```\n{  action: 'update',  after: { id: 2, email: 'support@prisma.io', name: 'Jane Doe' },  before: { id: 2, email: 'support@prisma.io', name: null },  id: '0/2A5A248',  modelName: 'User'}\n```\n\n## `PulseDeleteEvent<User>`[​](https://www.prisma.io/docs/pulse/api-reference#pulsedeleteeventuser \"Direct link to pulsedeleteeventuser\")\n\n### Type[​](https://www.prisma.io/docs/pulse/api-reference#type-2 \"Direct link to Type\")\n\nA `PulseDeleteEvent` has the following fields:\n\n| Name | Type | Example value | Description |\n| --- | --- | --- | --- |\n| `id` | `string` | `01HYBEER1JPSBVPG2NQADNQTA6` | A unique identifier / idempotency key following the [ULID](https://github.com/ulid/spec#specification) specification. |\n| `modelName` | `string` | `User` | The name of the model affected by this event. This is a model name from your Prisma schema. |\n| `action` | `string` | `delete` | The kind of write-operation performed in the database: `create`, `update` or `delete`. |\n| `deleted` | `User` | `{ id: 3 }` | An object with the values of the record that was just deleted. This only works with when the [`REPLICA IDENTITY`](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#replica-identity) in your database is set to `FULL`. Otherwise the object will only carry an `id` field. |\n\nThe type of the event is generic to the fields of your model. In the case, of the `User` model above, it looks as follows:\n\n```\nPulseDeleteEvent<{  id: number;  email: string;  name: string | null;}>;\n```\n\n### Example[​](https://www.prisma.io/docs/pulse/api-reference#example-2 \"Direct link to Example\")\n\n_Without_ having set the `REPLICA IDENDITY` to `FULL`:\n\n```\n {  action: 'delete',  deleted: { id: 1 },  id: '0/2A5A398',  modelName: 'User'}\n```\n\n_With_ having set the `REPLICA IDENDITY` to `FULL`:\n\n```\n {  action: 'delete',  deleted: { id: 42, email: 'doe@prisma.io', name: 'Jane Doe' },  id: '0/2A5A398',  modelName: 'User'}\n```",
    "title": "Pulse: API reference | Prisma Documentation",
    "description": "API reference documentation for Pulse.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/opensearch.xml",
    "markdown": null,
    "title": "",
    "description": null,
    "languageCode": null
  },
  {
    "url": "https://www.prisma.io/docs/pulse/database-setup",
    "markdown": "# Prisma Pulse: Database setup | Prisma Documentation\n\n## General database instruction[​](https://www.prisma.io/docs/pulse/database-setup#general-database-instruction \"Direct link to General database instruction\")\n\nPrisma Pulse requires your database to be configured in a specific way. To get your database ready for Prisma Pulse, follow the general database instructions [here](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions).\n\ninfo\n\nPrisma Pulse requires a publicly accessible PostgreSQL (**version 12+**) database with [logical replication](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#enable-logical-replication) enabled.\n\n## Provider specific instructions[​](https://www.prisma.io/docs/pulse/database-setup#provider-specific-instructions \"Direct link to Provider specific instructions\")\n\n*   [AWS RDS](https://www.prisma.io/docs/pulse/database-setup/aws-rds)\n*   [Railway](https://www.prisma.io/docs/pulse/database-setup/railway)\n*   [Supabase](https://www.prisma.io/docs/pulse/database-setup/supabase)\n*   [Neon](https://www.prisma.io/docs/pulse/database-setup/neon)",
    "title": "Prisma Pulse: Database setup | Prisma Documentation",
    "description": "Learn about configuring your database to use with Prisma Pulse",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started",
    "markdown": "# Get started with Prisma | Prisma Documentation\n\nWelcome 👋\n\nExplore our products that make it easy to build and scale data-driven applications:\n\n[**Prisma ORM**](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma) is a next-generation Node.js and TypeScript ORM that unlocks a new level of developer experience when working with databases thanks to its intuitive data model, automated migrations, type-safety & auto-completion.\n\n[**Prisma Accelerate**](https://www.prisma.io/docs/accelerate/what-is-accelerate) is a global database cache with scalable connection pooling to make your queries fast.\n\n[**Prisma Pulse**](https://www.prisma.io/docs/pulse/what-is-pulse) allows you to react to database changes with type-safe model subscriptions.\n\n## Prisma ORM[​](https://www.prisma.io/docs/getting-started#-prisma-orm \"Direct link to -prisma-orm\")\n\nAdd Prisma ORM to your application in a few minutes to start modeling your data, run schema migrations and query your database.\n\n### Explore quickly with a SQLite database[​](https://www.prisma.io/docs/getting-started#explore-quickly-with-a-sqlite-database \"Direct link to Explore quickly with a SQLite database\")\n\n_These options don't require you to have your own database running._\n\n### Choose an option to get started with your own database[​](https://www.prisma.io/docs/getting-started#choose-an-option-to-get-started-with-your-own-database \"Direct link to Choose an option to get started with your own database\")\n\n_Select one of these options if you want to connect Prisma ORM to your own database._\n\n*   New database\n*   Existing database\n\nSet up Prisma ORM **from scratch** with your favorite database and learn basic workflows like data modeling, querying, and migrations.\n\n[![](https://www.prisma.io/docs/img/technologies/postgresqlsimple.svg)](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql)[![](https://www.prisma.io/docs/img/technologies/mysqlsimple.svg)](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql)[![](https://www.prisma.io/docs/img/technologies/sqlserver.svg)](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver)[![](https://www.prisma.io/docs/img/technologies/planetscale.svg)![](https://www.prisma.io/docs/img/technologies/planetscaledark.svg)](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale)[![](https://www.prisma.io/docs/img/technologies/cockroachdbdark.svg)](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb)[![](https://www.prisma.io/docs/img/technologies/mongodbsimple.svg)](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-typescript-mongodb)\n\n## Prisma Accelerate[​](https://www.prisma.io/docs/getting-started#-prisma-accelerate \"Direct link to -prisma-accelerate\")\n\nMake your database queries faster by scaling your database connections and caching database results at the edge with Prisma Accelerate.\n\n  \n[\n\n###### Speed Test\n\nRun the speed test to see how Prisma Accelerate can make your app faster.\n\n](https://accelerate-speed-test.prisma.io/)\n\n## Prisma Pulse[​](https://www.prisma.io/docs/getting-started#-prisma-pulse \"Direct link to -prisma-pulse\")\n\nBuild real-time applications by subscribing to data changes in your database using Prisma Pulse.",
    "title": "Get started with Prisma | Prisma Documentation",
    "description": "Build data-driven applications with ease using Prisma ORM, add connection pooling or global caching with Prisma Accelerate or subscribe to database changes in real-time with Prisma Pulse.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm",
    "markdown": "# ORM | Prisma Documentation\n\n[Prisma ORM](https://github.com/prisma/prisma) is a Node.js and TypeScript ORM with an intuitive data model, automated migrations, type-safety, and auto-completion.\n\n## In this section[​](https://www.prisma.io/docs/orm#in-this-section \"Direct link to In this section\")\n\n[\n\n## ORM\n\n](https://www.prisma.io/docs/orm)\n\n[\n\n## Overview\n\n](https://www.prisma.io/docs/orm/overview)\n\n[\n\n## Prisma Schema\n\n](https://www.prisma.io/docs/orm/prisma-schema)\n\n[\n\n## Prisma Client\n\n](https://www.prisma.io/docs/orm/prisma-client)\n\n[\n\n## Prisma Migrate\n\n](https://www.prisma.io/docs/orm/prisma-migrate)\n\n[\n\n## Tools\n\n](https://www.prisma.io/docs/orm/tools)\n\n[\n\n## Reference\n\n](https://www.prisma.io/docs/orm/reference)\n\n[\n\n## More\n\n](https://www.prisma.io/docs/orm/more)",
    "title": "ORM | Prisma Documentation",
    "description": "ORM",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/overview/databases/postgresql",
    "markdown": "# PostgreSQL database connector | Prisma Documentation\n\nThe PostgreSQL data source connector connects Prisma ORM to a [PostgreSQL](https://www.postgresql.org/) database server.\n\nBy default, the PostgreSQL connector contains a database driver responsible for connecting to your database. You can use a [driver adapter](https://www.prisma.io/docs/orm/overview/databases/database-drivers#driver-adapters) (Preview) to connect to your database using a JavaScript database driver from Prisma Client.\n\n## Example[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#example \"Direct link to Example\")\n\nTo connect to a PostgreSQL database server, you need to configure a [`datasource`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources) block in your [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema):\n\nschema.prisma\n\n```\ndatasource db {  provider = \"postgresql\"  url      = env(\"DATABASE_URL\")}\n```\n\nThe fields passed to the `datasource` block are:\n\n*   `provider`: Specifies the `postgresql` data source connector.\n*   `url`: Specifies the [connection URL](https://www.prisma.io/docs/orm/overview/databases/postgresql#connection-url) for the PostgreSQL database server. In this case, an [environment variable is used](https://www.prisma.io/docs/orm/prisma-schema/overview#accessing-environment-variables-from-the-schema) to provide the connection URL.\n\n## Using the `node-postgres` driver[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#using-the-node-postgres-driver \"Direct link to using-the-node-postgres-driver\")\n\nAs of [`v5.4.0`](https://github.com/prisma/prisma/releases/tag/5.4.0), you can use Prisma ORM with database drivers from the JavaScript ecosystem (instead of using Prisma ORM's built-in drivers). You can do this by using a [driver adapter](https://www.prisma.io/docs/orm/overview/databases/database-drivers).\n\nFor PostgreSQL, [`node-postgres`](https://node-postgres.com/) (`pg`) is one of the most popular drivers in the JavaScript ecosystem. It can be used with any PostgreSQL database that's accessed via TCP.\n\nThis section explains how you can use it with Prisma ORM and the `@prisma/adapter-pg` driver adapter.\n\n### 1\\. Enable the `driverAdapters` Preview feature flag[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#1-enable-the-driveradapters-preview-feature-flag \"Direct link to 1-enable-the-driveradapters-preview-feature-flag\")\n\nSince driver adapters are currently in [Preview](https://www.prisma.io/docs/orm/more/releases#preview), you need to enable its feature flag on the `datasource` block in your Prisma schema:\n\n```\n// schema.prismagenerator client {  provider        = \"prisma-client-js\"  previewFeatures = [\"driverAdapters\"]}datasource db {  provider = \"postgresql\"  url      = env(\"DATABASE_URL\")}\n```\n\nOnce you have added the feature flag to your schema, re-generate Prisma Client:\n\n### 2\\. Install the dependencies[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#2-install-the-dependencies \"Direct link to 2. Install the dependencies\")\n\nNext, install the `pg` package and Prisma ORM's driver adapter:\n\n```\nnpm install pgnpm install @prisma/adapter-pg\n```\n\n### 3\\. Instantiate Prisma Client using the driver adapter[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#3-instantiate-prisma-client-using-the-driver-adapter \"Direct link to 3. Instantiate Prisma Client using the driver adapter\")\n\nFinally, when you instantiate Prisma Client, you need to pass an instance of Prisma ORM's driver adapter to the `PrismaClient` constructor:\n\n```\nimport { Pool } from 'pg'import { PrismaPg } from '@prisma/adapter-pg'import { PrismaClient } from '@prisma/client'const connectionString = `${process.env.DATABASE_URL}`const pool = new Pool({ connectionString })const adapter = new PrismaPg(pool)const prisma = new PrismaClient({ adapter })\n```\n\nNotice that this code requires the `DATABASE_URL` environment variable to be set to your PostgreSQL connection string. You can learn more about the connection string below.\n\n### Notes[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#notes \"Direct link to Notes\")\n\n#### Specifying a PostgreSQL schema[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#specifying-a-postgresql-schema \"Direct link to Specifying a PostgreSQL schema\")\n\nYou can specify a [PostgreSQL schema](https://www.postgresql.org/docs/current/ddl-schemas.html) by passing in the `schema` option when instantiating `PrismaPg`:\n\n```\nconst adapter = new PrismaPg(pool, {  schema: 'myPostgresSchema'})\n```\n\n## Connection details[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#connection-details \"Direct link to Connection details\")\n\n### Connection URL[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#connection-url \"Direct link to Connection URL\")\n\nPrisma ORM follows the connection URL format specified by [PostgreSQL's official guidelines](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING), but does not support all arguments and includes additional arguments such as `schema`. Here's an overview of the components needed for a PostgreSQL connection URL:\n\n![Structure of the PostgreSQL connection URL](https://www.prisma.io/docs/assets/images/postgresql-connection-string-0615c67fb90a50fb3b0c72c345a41eb6.png)\n\n#### Base URL and path[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#base-url-and-path \"Direct link to Base URL and path\")\n\nHere is an example of the structure of the _base URL_ and the _path_ using placeholder values in uppercase letters:\n\n```\npostgresql://USER:PASSWORD@HOST:PORT/DATABASE\n```\n\nThe following components make up the _base URL_ of your database, they are always required:\n\n| Name | Placeholder | Description |\n| --- | --- | --- |\n| Host | `HOST` | IP address/domain of your database server, e.g. `localhost` |\n| Port | `PORT` | Port on which your database server is running, e.g. `5432` |\n| User | `USER` | Name of your database user, e.g. `janedoe` |\n| Password | `PASSWORD` | Password for your database user |\n| Database | `DATABASE` | Name of the [database](https://www.postgresql.org/docs/12/manage-ag-overview.html) you want to use, e.g. `mydb` |\n\n#### Arguments[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#arguments \"Direct link to Arguments\")\n\nA connection URL can also take arguments. Here is the same example from above with placeholder values in uppercase letters for three _arguments_:\n\n```\npostgresql://USER:PASSWORD@HOST:PORT/DATABASE?KEY1=VALUE&KEY2=VALUE&KEY3=VALUE\n```\n\nThe following arguments can be used:\n\n| Argument name | Required | Default | Description |\n| --- | --- | --- | --- |\n| `schema` | **Yes** | `public` | Name of the [schema](https://www.postgresql.org/docs/12/ddl-schemas.html) you want to use, e.g. `myschema` |\n| `connection_limit` | No  | `num_cpus * 2 + 1` | Maximum size of the [connection pool](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/databases-connections/connection-pool) |\n| `connect_timeout` | No  | `5` | Maximum number of seconds to wait for a new connection to be opened, `0` means no timeout |\n| `pool_timeout` | No  | `10` | Maximum number of seconds to wait for a new connection from the pool, `0` means no timeout |\n| `sslmode` | No  | `prefer` | Configures whether to use TLS. Possible values: `prefer`, `disable`, `require` |\n| `sslcert` | No  |     | Path of the server certificate. Certificate paths are [resolved relative to the `./prisma folder`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources#securing-database-connections) |\n| `sslidentity` | No  |     | Path to the PKCS12 certificate |\n| `sslpassword` | No  |     | Password that was used to secure the PKCS12 file |\n| `sslaccept` | No  | `accept_invalid_certs` | Configures whether to check for missing values in the certificate. Possible values: `accept_invalid_certs`, `strict` |\n| `host` | No  |     | Points to a directory that contains a socket to be used for the connection |\n| `socket_timeout` | No  |     | Maximum number of seconds to wait until a single query terminates |\n| `pgbouncer` | No  | `false` | Configure the Engine to [enable PgBouncer compatibility mode](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/databases-connections/pgbouncer) |\n| `statement_cache_size` | No  | `500` | Since 2.1.0: Specifies the number of [prepared statements](https://www.prisma.io/docs/orm/overview/databases/postgresql#prepared-statement-caching) cached per connection |\n| `application_name` | No  |     | Since 3.3.0: Specifies a value for the application\\_name configuration parameter |\n| `channel_binding` | No  | `prefer` | Since 4.8.0: Specifies a value for the channel\\_binding configuration parameter |\n| `options` | No  |     | Since 3.8.0: Specifies command line options to send to the server at connection start |\n\nAs an example, if you want to connect to a schema called `myschema`, set the connection pool size to `5` and configure a timeout for queries of `3` seconds. You can use the following arguments:\n\n```\npostgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=myschema&connection_limit=5&socket_timeout=3\n```\n\n### Configuring an SSL connection[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#configuring-an-ssl-connection \"Direct link to Configuring an SSL connection\")\n\nYou can add various parameters to the connection URL if your database server uses SSL. Here's an overview of the possible parameters:\n\n*   `sslmode=(disable|prefer|require)`:\n    *   `prefer` (default): Prefer TLS if possible, accept plain text connections.\n    *   `disable`: Do not use TLS.\n    *   `require`: Require TLS or fail if not possible.\n*   `sslcert=<PATH>`: Path to the server certificate. This is the root certificate used by the database server to sign the client certificate. You need to provide this if the certificate doesn't exist in the trusted certificate store of your system. For Google Cloud this likely is `server-ca.pem`. Certificate paths are [resolved relative to the `./prisma folder`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources#securing-database-connections)\n*   `sslidentity=<PATH>`: Path to the PKCS12 certificate database created from client cert and key. This is the SSL identity file in PKCS12 format which you will generate using the client key and client certificate. It combines these two files in a single file and secures them via a password (see next parameter). You can create this file using your client key and client certificate by using the following command (using `openssl`):\n    \n    ```\n    openssl pkcs12 -export -out client-identity.p12 -inkey client-key.pem -in client-cert.pem\n    ```\n    \n*   `sslpassword=<PASSWORD>`: Password that was used to secure the PKCS12 file. The `openssl` command listed in the previous step will ask for a password while creating the PKCS12 file, you will need to provide that same exact password here.\n*   `sslaccept=(strict|accept_invalid_certs)`:\n    *   `strict`: Any missing value in the certificate will lead to an error. For Google Cloud, especially if the database doesn't have a domain name, the certificate might miss the domain/IP address, causing an error when connecting.\n    *   `accept_invalid_certs` (default): Bypass this check. Be aware of the security consequences of this setting.\n\nYour database connection URL will look similar to this:\n\n```\npostgresql://USER:PASSWORD@HOST:PORT/DATABASE?sslidentity=client-identity.p12&sslpassword=mypassword&sslcert=rootca.cert\n```\n\n### Connecting via sockets[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#connecting-via-sockets \"Direct link to Connecting via sockets\")\n\nTo connect to your PostgreSQL database via sockets, you must add a `host` field as a _query parameter_ to the connection URL (instead of setting it as the `host` part of the URI). The value of this parameter then must point to the directory that contains the socket, e.g.: `postgresql://USER:PASSWORD@localhost/database?host=/var/run/postgresql/`\n\nNote that `localhost` is required, the value itself is ignored and can be anything.\n\n> **Note**: You can find additional context in this [GitHub issue](https://github.com/prisma/prisma-client-js/issues/437#issuecomment-592436707).\n\n## Type mapping between PostgreSQL and Prisma schema[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#type-mapping-between-postgresql-and-prisma-schema \"Direct link to Type mapping between PostgreSQL and Prisma schema\")\n\nThese two tables show the type mapping between PostgreSQL and Prisma schema. First [how Prisma ORM scalar types are translated into PostgreSQL database column types](https://www.prisma.io/docs/orm/overview/databases/postgresql#mapping-between-prisma-orm-scalar-types-and-postgresql-database-column-types), and then [how PostgreSQL database column types relate to Prisma ORM scalar and native types](https://www.prisma.io/docs/orm/overview/databases/postgresql#mapping-between-postgresql-database-column-types-to-prisma-orm-scalar-and-native-types).\n\n> Alternatively, see [Prisma schema reference](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-scalar-types) for type mappings organized by Prisma type.\n\n### Mapping between Prisma ORM scalar types and PostgreSQL database column types[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#mapping-between-prisma-orm-scalar-types-and-postgresql-database-column-types \"Direct link to Mapping between Prisma ORM scalar types and PostgreSQL database column types\")\n\nThe PostgreSQL connector maps the [scalar types](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#scalar-fields) from the Prisma ORM [data model](https://www.prisma.io/docs/orm/prisma-schema/data-model/models) as follows to database column types:\n\n| Prisma ORM | PostgreSQL |\n| --- | --- |\n| `String` | `text` |\n| `Boolean` | `boolean` |\n| `Int` | `integer` |\n| `BigInt` | `bigint` |\n| `Float` | `double precision` |\n| `Decimal` | `decimal(65,30)` |\n| `DateTime` | `timestamp(3)` |\n| `Json` | `jsonb` |\n| `Bytes` | `bytea` |\n\n### Mapping between PostgreSQL database column types to Prisma ORM scalar and native types[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#mapping-between-postgresql-database-column-types-to-prisma-orm-scalar-and-native-types \"Direct link to Mapping between PostgreSQL database column types to Prisma ORM scalar and native types\")\n\n*   When [introspecting](https://www.prisma.io/docs/orm/prisma-schema/introspection) a PostgreSQL database, the database types are mapped to Prisma ORM types according to the following table.\n*   When [creating a migration](https://www.prisma.io/docs/orm/prisma-migrate) or [prototyping your schema](https://www.prisma.io/docs/orm/prisma-migrate/workflows/prototyping-your-schema) the table is also used - in the other direction.\n\n| PostgreSQL (Type \\| Aliases) | Supported | Prisma ORM | Native database type attribute | Notes |\n| --- | --- | --- | --- | --- |\n| `bigint` \\| `int8` | ✔️  | `BigInt` | `@db.BigInt`\\* | \\*Default mapping for `BigInt` - no type attribute added to schema. |\n| `boolean` \\| `bool` | ✔️  | `Bool` | `@db.Boolean`\\* | \\*Default mapping for `Bool` - no type attribute added to schema. |\n| `timestamp with time zone` \\| `timestamptz` | ✔️  | `DateTime` | `@db.Timestamptz(x)` |     |\n| `time without time zone` \\| `time` | ✔️  | `DateTime` | `@db.Time(x)` |     |\n| `time with time zone` \\| `timetz` | ✔️  | `DateTime` | `@db.Timetz(x)` |     |\n| `numeric(p,s)` \\| `decimal(p,s)` | ✔️  | `Decimal` | `@db.Decimal(x, y)` |     |\n| `real` \\| `float`, `float4` | ✔️  | `Float` | `@db.Real` |     |\n| `double precision` \\| `float8` | ✔️  | `Float` | `@db.DoublePrecision`\\* | \\*Default mapping for `Float` - no type attribute added to schema. |\n| `smallint` \\| `int2` | ✔️  | `Int` | `@db.SmallInt` |     |\n| `integer` \\| `int`, `int4` | ✔️  | `Int` | `@db.Int`\\* | \\*Default mapping for `Int` - no type attribute added to schema. |\n| `smallserial` \\| `serial2` | ✔️  | `Int` | `@db.SmallInt @default(autoincrement())` |     |\n| `serial` \\| `serial4` | ✔️  | `Int` | `@db.Int @default(autoincrement())` |     |\n| `bigserial` \\| `serial8` | ✔️  | `Int` | `@db.BigInt @default(autoincrement()` |     |\n| `character(n)` \\| `char(n)` | ✔️  | `String` | `@db.Char(x)` |     |\n| `character varying(n)` \\| `varchar(n)` | ✔️  | `String` | `@db.VarChar(x)` |     |\n| `money` | ✔️  | `Decimal` | `@db.Money` |     |\n| `text` | ✔️  | `String` | `@db.Text`\\* | \\*Default mapping for `String` - no type attribute added to schema. |\n| `timestamp` | ✔️  | `DateTime` | `@db.TimeStamp`\\* | \\*Default mapping for `DateTime` - no type attribute added to schema. |\n| `date` | ✔️  | `DateTime` | `@db.Date` |     |\n| `enum` | ✔️  | `Enum` | N/A |     |\n| `inet` | ✔️  | `String` | `@db.Inet` |     |\n| `bit(n)` | ✔️  | `String` | `@Bit(x)` |     |\n| `bit varying(n)` | ✔️  | `String` | `@VarBit` |     |\n| `oid` | ✔️  | `Int` | `@db.Oid` |     |\n| `uuid` | ✔️  | `String` | `@db.Uuid` |     |\n| `json` | ✔️  | `Json` | `@db.Json` |     |\n| `jsonb` | ✔️  | `Json` | `@db.JsonB`\\* | \\*Default mapping for `Json` - no type attribute added to schema. |\n| `bytea` | ✔️  | `Bytes` | `@db.ByteA`\\* | \\*Default mapping for `Bytes` - no type attribute added to schema. |\n| `xml` | ✔️  | `String` | `@db.Xml` |     |\n| Array types | ✔️  | `[]` |     |     |\n| `citext` | ✔️\\* | `String` | `@db.Citext` | \\* Only available if [Citext extension is enabled](https://www.prisma.io/docs/orm/prisma-schema/data-model/unsupported-database-features#enable-postgresql-extensions-for-native-database-functions). |\n| `interval` | Not yet | `Unsupported` |     |     |\n| `cidr` | Not yet | `Unsupported` |     |     |\n| `macaddr` | Not yet | `Unsupported` |     |     |\n| `tsvector` | Not yet | `Unsupported` |     |     |\n| `tsquery` | Not yet | `Unsupported` |     |     |\n| `int4range` | Not yet | `Unsupported` |     |     |\n| `int8range` | Not yet | `Unsupported` |     |     |\n| `numrange` | Not yet | `Unsupported` |     |     |\n| `tsrange` | Not yet | `Unsupported` |     |     |\n| `tstzrange` | Not yet | `Unsupported` |     |     |\n| `daterange` | Not yet | `Unsupported` |     |     |\n| `point` | Not yet | `Unsupported` |     |     |\n| `line` | Not yet | `Unsupported` |     |     |\n| `lseg` | Not yet | `Unsupported` |     |     |\n| `box` | Not yet | `Unsupported` |     |     |\n| `path` | Not yet | `Unsupported` |     |     |\n| `polygon` | Not yet | `Unsupported` |     |     |\n| `circle` | Not yet | `Unsupported` |     |     |\n| Composite types | Not yet | n/a |     |     |\n| Domain types | Not yet | n/a |     |     |\n\n[Introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection) adds native database types that are **not yet supported** as [`Unsupported`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unsupported) fields:\n\nschema.prisma\n\n```\nmodel Device {  id   Int                   @id @default(autoincrement())  name String  data Unsupported(\"circle\")}\n```\n\n## Prepared statement caching[​](https://www.prisma.io/docs/orm/overview/databases/postgresql#prepared-statement-caching \"Direct link to Prepared statement caching\")\n\nA [prepared statement](https://www.postgresql.org/docs/current/sql-prepare.html) is a feature that can be used to optimize performance. A prepared statement is parsed, compiled, and optimized only once and then can be executed directly multiple times without the overhead of parsing the query again.\n\nBy caching prepared statements, Prisma Client's [query engine](https://www.prisma.io/docs/orm/more/under-the-hood/engines) does not repeatedly compile the same query which reduces database CPU usage and query latency.\n\nFor example, here is the generated SQL for two different queries made by Prisma Client:\n\n```\nSELECT * FROM user WHERE name = \"John\";SELECT * FROM user WHERE name = \"Brenda\";\n```\n\nThe two queries after parameterization will be the same, and the second query can skip the preparing step, saving database CPU and one extra roundtrip to the database. Query after parameterization:\n\n```\nSELECT * FROM user WHERE name = $1\n```\n\nEvery database connection maintained by Prisma Client has a separate cache for storing prepared statements. The size of this cache can be tweaked with the `statement_cache_size` parameter in the connection string. By default, Prisma Client caches 500 statements per connection.\n\nDue to the nature of pgBouncer, if the `pgbouncer` parameter is set to `true`, the prepared statement cache is automatically disabled for that connection.",
    "title": "PostgreSQL database connector | Prisma Documentation",
    "description": "This page explains how Prisma can connect to a PostgreSQL database using the PostgreSQL database connector.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/overview/databases/mysql",
    "markdown": "# MySQL database connector | Prisma Documentation\n\n## MySQL/MariaDB\n\nThe MySQL data source connector connects Prisma ORM to a [MySQL](https://www.mysql.com/) or [MariaDB](https://mariadb.org/) database server.\n\nBy default, the MySQL connector contains a database driver responsible for connecting to your database. You can use a [driver adapter](https://www.prisma.io/docs/orm/overview/databases/database-drivers#driver-adapters) (Preview) to connect to your database using a JavaScript database driver from Prisma Client.\n\n## Example[​](https://www.prisma.io/docs/orm/overview/databases/mysql#example \"Direct link to Example\")\n\nTo connect to a MySQL database server, you need to configure a [`datasource`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources) block in your [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema):\n\nschema.prisma\n\n```\ndatasource db {  provider = \"mysql\"  url      = env(\"DATABASE_URL\")}\n```\n\nThe fields passed to the `datasource` block are:\n\n*   `provider`: Specifies the `mysql` data source connector, which is used both for MySQL and MariaDB.\n*   `url`: Specifies the [connection URL](https://www.prisma.io/docs/orm/overview/databases/mysql#connection-url) for the MySQL database server. In this case, an [environment variable is used](https://www.prisma.io/docs/orm/prisma-schema/overview#accessing-environment-variables-from-the-schema) to provide the connection URL.\n\n## Connection details[​](https://www.prisma.io/docs/orm/overview/databases/mysql#connection-details \"Direct link to Connection details\")\n\n### Connection URL[​](https://www.prisma.io/docs/orm/overview/databases/mysql#connection-url \"Direct link to Connection URL\")\n\nHere's an overview of the components needed for a MySQL connection URL:\n\n![Structure of the MySQL connection URL](https://www.prisma.io/docs/assets/images/mysql-connection-string-a271692bb82d53b5bbba7a490ffacf36.png)\n\n#### Base URL and path[​](https://www.prisma.io/docs/orm/overview/databases/mysql#base-url-and-path \"Direct link to Base URL and path\")\n\nHere is an example of the structure of the _base URL_ and the _path_ using placeholder values in uppercase letters:\n\n```\nmysql://USER:PASSWORD@HOST:PORT/DATABASE\n```\n\nThe following components make up the _base URL_ of your database, they are always required:\n\n| Name | Placeholder | Description |\n| --- | --- | --- |\n| Host | `HOST` | IP address/domain of your database server, e.g. `localhost` |\n| Port | `PORT` | Port on which your database server is running, e.g. `5432` (default is `3306`, or no port when using Unix socket) |\n| User | `USER` | Name of your database user, e.g. `janedoe` |\n| Password | `PASSWORD` | Password for your database user |\n| Database | `DATABASE` | Name of the [database](https://dev.mysql.com/doc/refman/8.0/en/creating-database.html) you want to use, e.g. `mydb` |\n\n#### Arguments[​](https://www.prisma.io/docs/orm/overview/databases/mysql#arguments \"Direct link to Arguments\")\n\nA connection URL can also take arguments. Here is the same example from above with placeholder values in uppercase letters for three _arguments_:\n\n```\nmysql://USER:PASSWORD@HOST:PORT/DATABASE?KEY1=VALUE&KEY2=VALUE&KEY3=VALUE\n```\n\nThe following arguments can be used:\n\n| Argument name | Required | Default | Description |\n| --- | --- | --- | --- |\n| `connection_limit` | No  | `num_cpus * 2 + 1` | Maximum size of the [connection pool](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/databases-connections/connection-pool) |\n| `connect_timeout` | No  | `5` | Maximum number of seconds to wait for a new connection to be opened, `0` means no timeout |\n| `pool_timeout` | No  | `10` | Maximum number of seconds to wait for a new connection from the pool, `0` means no timeout |\n| `sslcert` | No  |     | Path to the server certificate. Certificate paths are [resolved relative to the `./prisma folder`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources#securing-database-connections) |\n| `sslidentity` | No  |     | Path to the PKCS12 certificate |\n| `sslpassword` | No  |     | Password that was used to secure the PKCS12 file |\n| `sslaccept` | No  | `accept_invalid_certs` | Configures whether to check for missing values in the certificate. Possible values: `accept_invalid_certs`, `strict` |\n| `socket` | No  |     | Points to a directory that contains a socket to be used for the connection |\n| `socket_timeout` | No  |     | Number of seconds to wait until a single query terminates |\n\nAs an example, if you want to set the connection pool size to `5` and configure a timeout for queries of `3` seconds, you can use the following arguments:\n\n```\nmysql://USER:PASSWORD@HOST:PORT/DATABASE?connection_limit=5&socket_timeout=3\n```\n\n### Configuring an SSL connection[​](https://www.prisma.io/docs/orm/overview/databases/mysql#configuring-an-ssl-connection \"Direct link to Configuring an SSL connection\")\n\nYou can add various parameters to the connection URL if your database server uses SSL. Here's an overview of the possible parameters:\n\n*   `sslcert=<PATH>`: Path to the server certificate. This is the root certificate used by the database server to sign the client certificate. You need to provide this if the certificate doesn't exist in the trusted certificate store of your system. For Google Cloud this likely is `server-ca.pem`. Certificate paths are [resolved relative to the `./prisma folder`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources#securing-database-connections)\n    \n*   `sslidentity=<PATH>`: Path to the PKCS12 certificate database created from client cert and key. This is the SSL identity file in PKCS12 format which you will generate using the client key and client certificate. It combines these two files in a single file and secures them via a password (see next parameter). You can create this file using your client key and client certificate by using the following command (using `openssl`):\n    \n    ```\n    openssl pkcs12 -export -out client-identity.p12 -inkey client-key.pem -in client-cert.pem\n    ```\n    \n*   `sslpassword=<PASSWORD>`: Password that was used to secure the PKCS12 file. The `openssl` command listed in the previous step will ask for a password while creating the PKCS12 file, you will need to provide that same exact password here.\n    \n*   `sslaccept=(strict|accept_invalid_certs)`:\n    \n    *   `strict`: Any missing value in the certificate will lead to an error. For Google Cloud, especially if the database doesn't have a domain name, the certificate might miss the domain/IP address, causing an error when connecting.\n    *   `accept_invalid_certs` (default): Bypass this check. Be aware of the security consequences of this setting.\n\nYour database connection URL will look similar to this:\n\n```\nmysql://USER:PASSWORD@HOST:PORT/DATABASE?sslidentity=client-identity.p12&sslpassword=mypassword&sslcert=rootca.cert\n```\n\n### Connecting via sockets[​](https://www.prisma.io/docs/orm/overview/databases/mysql#connecting-via-sockets \"Direct link to Connecting via sockets\")\n\nTo connect to your MySQL/MariaDB database via a socket, you must add a `socket` field as a _query parameter_ to the connection URL (instead of setting it as the `host` part of the URI). The value of this parameter then must point to the directory that contains the socket, e.g. on a default installation of MySQL/MariaDB on Ubuntu or Debian use: `mysql://USER:PASSWORD@HOST/DATABASE?socket=/run/mysqld/mysqld.sock`\n\nNote that `localhost` is required, the value itself is ignored and can be anything.\n\n> **Note**: You can find additional context in this [GitHub issue](https://github.com/prisma/prisma-client-js/issues/437#issuecomment-592436707).\n\n## Type mapping between MySQL to Prisma schema[​](https://www.prisma.io/docs/orm/overview/databases/mysql#type-mapping-between-mysql-to-prisma-schema \"Direct link to Type mapping between MySQL to Prisma schema\")\n\nThe MySQL connector maps the [scalar types](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#scalar-fields) from the Prisma ORM [data model](https://www.prisma.io/docs/orm/prisma-schema/data-model/models) as follows to native column types:\n\n> Alternatively, see [Prisma schema reference](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-scalar-types) for type mappings organized by Prisma ORM type.\n\n### Native type mapping from Prisma ORM to MySQL[​](https://www.prisma.io/docs/orm/overview/databases/mysql#native-type-mapping-from-prisma-orm-to-mysql \"Direct link to Native type mapping from Prisma ORM to MySQL\")\n\n| Prisma ORM | MySQL | Notes |\n| --- | --- | --- |\n| `String` | `VARCHAR(191)` |     |\n| `Boolean` | `BOOLEAN` | In MySQL `BOOLEAN` is a synonym for `TINYINT(1)` |\n| `Int` | `INT` |     |\n| `BigInt` | `BIGINT` |     |\n| `Float` | `DOUBLE` |     |\n| `Decimal` | `DECIMAL(65,30)` |     |\n| `DateTime` | `DATETIME(3)` | Currently, Prisma ORM does not support zero dates (`0000-00-00`, `00:00:00`) in MySQL |\n| `Json` | `JSON` | Supported in MySQL 5.7+ only |\n| `Bytes` | `LONGBLOB` |     |\n\n### Native type mapping from Prisma ORM to MariaDB[​](https://www.prisma.io/docs/orm/overview/databases/mysql#native-type-mapping-from-prisma-orm-to-mariadb \"Direct link to Native type mapping from Prisma ORM to MariaDB\")\n\n| Prisma ORM | MariaDB | Notes |\n| --- | --- | --- |\n| `String` | `VARCHAR(191)` |     |\n| `Boolean` | `BOOLEAN` | In MariaDB `BOOLEAN` is a synonym for `TINYINT(1)` |\n| `Int` | `INT` |     |\n| `BigInt` | `BIGINT` |     |\n| `Float` | `DOUBLE` |     |\n| `Decimal` | `DECIMAL(65,30)` |     |\n| `DateTime` | `DATETIME(3)` |     |\n| `Json` | `LONGTEXT` | See [https://mariadb.com/kb/en/json-data-type/](https://mariadb.com/kb/en/json-data-type/) |\n| `Bytes` | `LONGBLOB` |     |\n\n### Native type mappings[​](https://www.prisma.io/docs/orm/overview/databases/mysql#native-type-mappings \"Direct link to Native type mappings\")\n\nWhen introspecting a MySQL database, the database types are mapped to Prisma ORM according to the following table:\n\n| MySQL | Prisma ORM | Supported | Native database type attribute | Notes |\n| --- | --- | --- | --- | --- |\n| `serial` | `BigInt` | ✔️  | `@db.UnsignedBigInt @default(autoincrement())` |     |\n| `bigint` | `BigInt` | ✔️  | `@db.BigInt` |     |\n| `bigint unsigned` | `BigInt` | ✔️  | `@db.UnsignedBigInt` |     |\n| `bit` | `Bytes` | ✔️  | `@db.Bit(x)` | `bit(1)` maps to `Boolean` - all other `bit(x)` map to `Bytes` |\n| `boolean` \\| `tinyint(1)` | `Boolean` | ✔️  | `@db.TinyInt(1)` |     |\n| `varbinary` | `Bytes` | ✔️  | `@db.VarBinary` |     |\n| `longblob` | `Bytes` | ✔️  | `@db.LongBlob` |     |\n| `tinyblob` | `Bytes` | ✔️  | `@db.TinyBlob` |     |\n| `mediumblob` | `Bytes` | ✔️  | `@db.MediumBlob` |     |\n| `blob` | `Bytes` | ✔️  | `@db.Blob` |     |\n| `binary` | `Bytes` | ✔️  | `@db.Binary` |     |\n| `date` | `DateTime` | ✔️  | `@db.Date` |     |\n| `datetime` | `DateTime` | ✔️  | `@db.DateTime` |     |\n| `timestamp` | `DateTime` | ✔️  | `@db.TimeStamp` |     |\n| `time` | `DateTime` | ✔️  | `@db.Time` |     |\n| `decimal(a,b)` | `Decimal` | ✔️  | `@db.Decimal(x,y)` |     |\n| `numeric(a,b)` | `Decimal` | ✔️  | `@db.Decimal(x,y)` |     |\n| `enum` | `Enum` | ✔️  | N/A |     |\n| `float` | `Float` | ✔️  | `@db.Float` |     |\n| `double` | `Float` | ✔️  | `@db.Double` |     |\n| `smallint` | `Int` | ✔️  | `@db.SmallInt` |     |\n| `smallint unsigned` | `Int` | ✔️  | `@db.UnsignedSmallInt` |     |\n| `mediumint` | `Int` | ✔️  | `@db.MediumInt` |     |\n| `mediumint unsigned` | `Int` | ✔️  | `@db.UnsignedMediumInt` |     |\n| `int` | `Int` | ✔️  | `@db.Int` |     |\n| `int unsigned` | `Int` | ✔️  | `@db.UnsignedInt` |     |\n| `tinyint` | `Int` | ✔️  | `@db.TinyInt(x)` | `tinyint(1)` maps to `Boolean` all other `tinyint(x)` map to `Int` |\n| `tinyint unsigned` | `Int` | ✔️  | `@db.UnsignedTinyInt(x)` | `tinyint(1) unsigned` **does not** map to `Boolean` |\n| `year` | `Int` | ✔️  | `@db.Year` |     |\n| `json` | `Json` | ✔️  | `@db.Json` | Supported in MySQL 5.7+ only |\n| `char` | `String` | ✔️  | `@db.Char(x)` |     |\n| `varchar` | `String` | ✔️  | `@db.VarChar(x)` |     |\n| `tinytext` | `String` | ✔️  | `@db.TinyText` |     |\n| `text` | `String` | ✔️  | `@db.Text` |     |\n| `mediumtext` | `String` | ✔️  | `@db.MediumText` |     |\n| `longtext` | `String` | ✔️  | `@db.LongText` |     |\n| `set` | `Unsupported` | Not yet |     |     |\n| `geometry` | `Unsupported` | Not yet |     |     |\n| `point` | `Unsupported` | Not yet |     |     |\n| `linestring` | `Unsupported` | Not yet |     |     |\n| `polygon` | `Unsupported` | Not yet |     |     |\n| `multipoint` | `Unsupported` | Not yet |     |     |\n| `multilinestring` | `Unsupported` | Not yet |     |     |\n| `multipolygon` | `Unsupported` | Not yet |     |     |\n| `geometrycollection` | `Unsupported` | Not yet |     |     |\n\n[Introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection) adds native database types that are **not yet supported** as [`Unsupported`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unsupported) fields:\n\nschema.prisma\n\n```\nmodel Device {  id   Int                   @id @default(autoincrement())  name String  data Unsupported(\"circle\")}\n```\n\n## Engine[​](https://www.prisma.io/docs/orm/overview/databases/mysql#engine \"Direct link to Engine\")\n\nIf you are using a version of MySQL where MyISAM is the default engine, you must specify `ENGINE = InnoDB;` when you create a table. If you introspect a database that uses a different engine, relations in the Prisma Schema are not created (or lost, if the relation already existed).\n\n## Permissions[​](https://www.prisma.io/docs/orm/overview/databases/mysql#permissions \"Direct link to Permissions\")\n\nA fresh new installation of MySQL/MariaDB has by default only a `root` database user. Do not use `root` user in your Prisma configuration, but instead create a database and database user for each application. On most Linux hosts (e.g. Ubuntu) you can simply run this as the Linux `root` user (which automatically has database `root` access as well):\n\n```\nmysql -e \"CREATE DATABASE IF NOT EXISTS $DB_PRISMA;\"mysql -e \"GRANT ALL PRIVILEGES ON $DB_PRISMA.* TO $DB_USER@'%' IDENTIFIED BY '$DB_PASSWORD';\"\n```\n\nThe above is enough to run the `prisma db pull` and `prisma db push` commands. In order to also run `prisma migrate` commands these permissions need to be granted:\n\n```\nmysql -e \"GRANT CREATE, DROP, REFERENCES, ALTER ON *.* TO $DB_USER@'%';\"\n```",
    "title": "MySQL database connector | Prisma Documentation",
    "description": "This page explains how Prisma can connect to a MySQL or MariaDB database using the MySQL database connector.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/accelerate",
    "markdown": "# Prisma Accelerate | Prisma Documentation\n\n[Prisma Accelerate](https://www.prisma.io/data-platform/accelerate) is a managed connection pooler with global caching that helps speed up database queries. With Accelerate, you can easily configure connection pooling and choose the right cache strategy for your app.\n\n[\n\n###### Get started\n\nSet up connection pooling and global caching for your app in 5 minutes.\n\n](https://www.prisma.io/docs/accelerate/getting-started)[\n\n###### Examples\n\nExplore our ready-to-run examples using Accelerate.\n\n](https://github.com/prisma/prisma-examples?tab=readme-ov-file#prisma-accelerate)\n\n  \n[\n\n###### Speed Test\n\nRun the speed test to see how Prisma Accelerate can make your app faster.\n\n](https://accelerate-speed-test.prisma.io/)\n\n## Supported databases[​](https://www.prisma.io/docs/accelerate#supported-databases \"Direct link to Supported databases\")\n\nAccelerate works with the database you already have, whether it is publicly accessible, or via an IP allowlist.\n\n[![](https://www.prisma.io/docs/img/technologies/postgresqlsimple.svg)](https://www.prisma.io/docs/accelerate/getting-started)[![](https://www.prisma.io/docs/img/technologies/mysqlsimple.svg)](https://www.prisma.io/docs/accelerate/getting-started)[![](https://www.prisma.io/docs/img/technologies/mariadb.svg)![](https://www.prisma.io/docs/img/technologies/mariadbdark.svg)](https://www.prisma.io/docs/accelerate/getting-started)[![](https://www.prisma.io/docs/img/technologies/planetscale.svg)![](https://www.prisma.io/docs/img/technologies/planetscaledark.svg)](https://www.prisma.io/docs/accelerate/getting-started)[![](https://www.prisma.io/docs/img/technologies/cockroachdbdark.svg)](https://www.prisma.io/docs/accelerate/getting-started)[![](https://www.prisma.io/docs/img/technologies/mongodbsimple.svg)](https://www.prisma.io/docs/accelerate/getting-started)\n\n  \n\n## In this section[​](https://www.prisma.io/docs/accelerate#in-this-section \"Direct link to In this section\")\n\n[](https://www.prisma.io/docs/accelerate)\n\n[\n\n## What is Accelerate\n\n](https://www.prisma.io/docs/accelerate/what-is-accelerate)\n\n[\n\n## Getting started\n\n](https://www.prisma.io/docs/accelerate/getting-started)\n\n[\n\n## Connection Pooling\n\n](https://www.prisma.io/docs/accelerate/connection-pooling)\n\n[\n\n## Caching\n\n](https://www.prisma.io/docs/accelerate/caching)\n\n[\n\n## API Reference\n\n](https://www.prisma.io/docs/accelerate/api-reference)\n\n[\n\n## Limitations\n\n](https://www.prisma.io/docs/accelerate/limitations)\n\n[\n\n## Evaluating\n\n](https://www.prisma.io/docs/accelerate/evaluating)\n\n[\n\n## Local development\n\n](https://www.prisma.io/docs/accelerate/local-development)\n\n[\n\n## FAQ\n\n](https://www.prisma.io/docs/accelerate/faq)\n\n[\n\n## Troubleshooting\n\n](https://www.prisma.io/docs/accelerate/troubleshoot)\n\n[\n\n## Feedback\n\n](https://www.prisma.io/docs/accelerate/feedback)",
    "title": "Prisma Accelerate | Prisma Documentation",
    "description": "Prisma Accelerate is a global database cache with built-in connection pooling that helps improve database performance in Serverless and Edge applications.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/pulse",
    "markdown": "# Prisma Pulse | Prisma Documentation\n\n[Prisma Pulse](https://www.prisma.io/data-platform/pulse) lets you subscribe to any changes in your database easily and in a type-safe way using Prisma Client, enabling you to trigger events and actions in real-time.\n\n[\n\n###### Get started\n\nAdd Pulse to your app in minutes to stream database changes to your app in real-time.\n\n](https://www.prisma.io/docs/pulse/getting-started)[\n\n###### Examples\n\nExplore our ready-to-run examples using Pulse.\n\n](https://github.com/prisma/prisma-examples?tab=readme-ov-file#prisma-pulse)\n\n  \n\n## Supported databases and providers[​](https://www.prisma.io/docs/pulse#supported-databases-and-providers \"Direct link to Supported databases and providers\")\n\nPulse works with your existing database and providers.\n\n[![](https://www.prisma.io/docs/img/technologies/postgresqlsimple.svg)](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions)\n\n[![](https://www.prisma.io/docs/img/technologies/gcp.svg)](https://www.prisma.io/docs/pulse/database-setup)[![](https://www.prisma.io/docs/img/technologies/aws.svg)![](https://www.prisma.io/docs/img/technologies/awsdark.svg)](https://www.prisma.io/docs/pulse/database-setup/aws-rds)[![](https://www.prisma.io/docs/img/technologies/supabase.svg)](https://www.prisma.io/docs/pulse/database-setup/supabase)[![](https://www.prisma.io/docs/img/technologies/neon.svg)](https://www.prisma.io/docs/pulse/database-setup/neon)[![](https://www.prisma.io/docs/img/technologies/railway.svg)![](https://www.prisma.io/docs/img/technologies/railway-dark.svg)](https://www.prisma.io/docs/pulse/database-setup/railway)\n\n  \n\n## In this section[​](https://www.prisma.io/docs/pulse#in-this-section \"Direct link to In this section\")\n\n[](https://www.prisma.io/docs/pulse)\n\n[\n\n## What is Pulse\n\n](https://www.prisma.io/docs/pulse/what-is-pulse)\n\n[\n\n## Getting started\n\n](https://www.prisma.io/docs/pulse/getting-started)\n\n[\n\n## Database setup\n\n](https://www.prisma.io/docs/pulse/database-setup)\n\n[\n\n## Database events\n\n](https://www.prisma.io/docs/pulse/database-events)\n\n[\n\n## API reference\n\n](https://www.prisma.io/docs/pulse/api-reference)\n\n[\n\n## Known limitations\n\n](https://www.prisma.io/docs/pulse/known-limitations)\n\n[\n\n## FAQ\n\n](https://www.prisma.io/docs/pulse/faq)\n\n[\n\n## Feedback\n\n](https://www.prisma.io/docs/pulse/feedback)",
    "title": "Prisma Pulse | Prisma Documentation",
    "description": "Prisma Pulse enables real-time database events with type-safe Prisma Client subscriptions.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/overview/databases/sqlite",
    "markdown": "# SQLite database connector | Prisma Documentation\n\nThe SQLite data source connector connects Prisma ORM to a [SQLite](https://www.sqlite.org/) database file. These files always have the file ending `.db` (e.g.: `dev.db`).\n\nBy default, the SQLite connector contains a database driver responsible for connecting to your database. You can use a [driver adapter](https://www.prisma.io/docs/orm/overview/databases/database-drivers#driver-adapters) (Preview) to connect to your database using a JavaScript database driver from Prisma Client.\n\n## Example[​](https://www.prisma.io/docs/orm/overview/databases/sqlite#example \"Direct link to Example\")\n\nTo connect to a SQLite database file, you need to configure a [`datasource`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources) block in your [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema):\n\nschema.prisma\n\n```\ndatasource db {  provider = \"sqlite\"  url      = \"file:./dev.db\"}\n```\n\nThe fields passed to the `datasource` block are:\n\n*   `provider`: Specifies the `sqlite` data source connector.\n*   `url`: Specifies the [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls) for the SQLite database. The connection URL always starts with the prefix `file:` and then contains a file path pointing to the SQLite database file. In this case, the file is located in the same directory and called `dev.db`.\n\n## Type mapping between SQLite to Prisma schema[​](https://www.prisma.io/docs/orm/overview/databases/sqlite#type-mapping-between-sqlite-to-prisma-schema \"Direct link to Type mapping between SQLite to Prisma schema\")\n\nThe SQLite connector maps the [scalar types](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#scalar-fields) from the [data model](https://www.prisma.io/docs/orm/prisma-schema/data-model/models) to native column types as follows:\n\n> Alternatively, see [Prisma schema reference](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-scalar-types) for type mappings organized by Prisma ORM type.\n\n### Native type mapping from Prisma ORM to SQLite[​](https://www.prisma.io/docs/orm/overview/databases/sqlite#native-type-mapping-from-prisma-orm-to-sqlite \"Direct link to Native type mapping from Prisma ORM to SQLite\")\n\n| Prisma ORM | SQLite |\n| --- | --- |\n| `String` | `TEXT` |\n| `Boolean` | `BOOLEAN` |\n| `Int` | `INTEGER` |\n| `BigInt` | `INTEGER` |\n| `Float` | `REAL` |\n| `Decimal` | `DECIMAL` |\n| `DateTime` | `NUMERIC` |\n| `Json` | Not supported |\n| `Bytes` | `BLOB` |\n\n## Rounding errors on big numbers[​](https://www.prisma.io/docs/orm/overview/databases/sqlite#rounding-errors-on-big-numbers \"Direct link to Rounding errors on big numbers\")\n\nSQLite is a loosely-typed database. If your Schema has a field of type `Int`, then Prisma ORM prevents you from inserting a value larger than an integer. However, nothing prevents the database from directly accepting a bigger number. These manually-inserted big numbers cause rounding errors when queried.\n\nTo avoid this problem, Prisma ORM 4.0.0 and later checks numbers on the way out of the database to verify that they fit within the boundaries of an integer. If a number does not fit, then Prisma ORM throws a P2023 error, such as:\n\n```\nInconsistent column data: Conversion failed:Value 9223372036854775807 does not fit in an INT column,try migrating the 'int' column type to BIGINT\n```\n\n## Connection details[​](https://www.prisma.io/docs/orm/overview/databases/sqlite#connection-details \"Direct link to Connection details\")\n\n### Connection URL[​](https://www.prisma.io/docs/orm/overview/databases/sqlite#connection-url \"Direct link to Connection URL\")\n\nThe connection URL of a SQLite connector points to a file on your file system. For example, the following two paths are equivalent because the `.db` is in the same directory:\n\nschema.prisma\n\n```\ndatasource db {  provider = \"sqlite\"  url      = \"file:./dev.db\"}\n```\n\nis the same as:\n\nschema.prisma\n\n```\ndatasource db {  provider = \"sqlite\"  url      = \"file:dev.db\"}\n```\n\nYou can also target files from the root or any other place in your file system:\n\nschema.prisma\n\n```\ndatasource db {  provider = \"sqlite\"  url      = \"file:/Users/janedoe/dev.db\"}\n```",
    "title": "SQLite database connector | Prisma Documentation",
    "description": "This page explains how Prisma can connect to a SQLite database using the SQLite database connector.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/overview/databases/sql-server",
    "markdown": "# Microsoft SQL Server | Prisma Documentation\n\nThe Microsoft SQL Server data source connector connects Prisma ORM to a [Microsoft SQL Server](https://docs.microsoft.com/en-us/sql/sql-server/?view=sql-server-ver15) database server.\n\n## Example[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#example \"Direct link to Example\")\n\nTo connect to a Microsoft SQL Server database, you need to configure a [`datasource`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources) block in your [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema):\n\nschema.prisma\n\n```\ndatasource db {  provider = \"sqlserver\"  url      = env(\"DATABASE_URL\")}\n```\n\nThe fields passed to the `datasource` block are:\n\n*   `provider`: Specifies the `sqlserver` data source connector.\n*   `url`: Specifies the [connection URL](https://www.prisma.io/docs/orm/overview/databases/sql-server#connection-details) for the Microsoft SQL Server database. In this case, an [environment variable is used](https://www.prisma.io/docs/orm/prisma-schema/overview#accessing-environment-variables-from-the-schema) to provide the connection URL.\n\n## Connection details[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#connection-details \"Direct link to Connection details\")\n\nThe connection URL used to connect to an Microsoft SQL Server database follows the [JDBC standard](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15).\n\nThe following example uses SQL authentication (username and password) with an enabled TLS encrypted connection:\n\n```\nsqlserver://HOST[:PORT];database=DATABASE;user=USER;password=PASSWORD;encrypt=true\n```\n\nwarning\n\nNote: If you are using any of the following characters in your connection string, [you will need to escape them](https://learn.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver16#escaping-values-in-the-connection-url).\n\n```\n:\\=;/[]{}  # these are characters that will need to be escaped\n```\n\nTo escape these characters, use curly braces `{}` around values that contain special characters. As an example:\n\n```\nsqlserver://HOST[:PORT];database=DATABASE;user={MyServer/MyUser};password={ThisIsA:SecurePassword;};encrypt=true\n```\n\n### Arguments[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#arguments \"Direct link to Arguments\")\n\n| Argument name | Required | Default | Comments |\n| --- | --- | --- | --- |\n| *   `database`<br>*   `initial catalog` | No  | `master` | The database to connect to. |\n| *   `username`<br>*   `user`<br>*   `uid`<br>*   `userid` | No - see Comments |     | SQL Server login (such as `sa`) _or_ a valid Windows (Active Directory) username if `integratedSecurity` is set to `true` (Windows only). |\n| *   `password`<br>*   `pwd` | No - see Comments |     | Password for SQL Server login _or_ Windows (Active Directory) username if `integratedSecurity` is set to `true` (Windows only). |\n| `encrypt` | No  | `true` | Configures whether to use TLS all the time, or only for the login procedure, possible values: `true` (use always), `false` (only for login credentials). |\n| `integratedSecurity` | No  |     | Enables [Windows authentication (integrated security)](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/authentication-in-sql-server), possible values: `true`, `false`, `yes`, `no`. If set to `true` or `yes` and `username` and `password` are present, login is performed through Windows Active Directory. If login details are not given via separate arguments, the current logged in Windows user is used to login to the server. |\n| `connectionLimit` | No  | `num_cpus * 2 + 1` | Maximum size of the [connection pool](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/databases-connections/connection-pool) |\n| `connectTimeout` | No  | `5` | Maximum number of seconds to wait for a new connection |\n| `schema` | No  | `dbo` | Added as a prefix to all the queries if schema name is not the default. |\n| *   `loginTimeout`<br>*   `connectTimeout`<br>*   `connectionTimeout` | No  |     | Number of seconds to wait for login to succeed. |\n| `socketTimeout` | No  |     | Number of seconds to wait for each query to succeed. |\n| `isolationLevel` | No  |     | Sets [transaction isolation level](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-transaction-isolation-level-transact-sql?view=sql-server-ver15). |\n| `poolTimeout` | No  | `10` | Maximum number of seconds to wait for a new connection from the pool. If all connections are in use, the database will return a `PoolTimeout` error after waiting for the given time. |\n| *   `ApplicationName`<br>*   `Application Name`<br><br>(case insensitive) | No  |     | Sets the application name for the connection. Since version 2.28.0. |\n| `trustServerCertificate` | No  | `false` | Configures whether to trust the server certificate. |\n| `trustServerCertificateCA` | No  |     | A path to a certificate authority file to be used instead of the system certificates to authorize the server certificate. Must be either in `pem`, `crt` or `der` format. Cannot be used together with `trustServerCertificate` parameter. |\n\n### Using [integrated security](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/authentication-in-sql-server) (Windows only)[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#using-integrated-security-windows-only \"Direct link to using-integrated-security-windows-only\")\n\nThe following example uses the currently logged in Windows user to log in to Microsoft SQL Server:\n\n```\nsqlserver://localhost:1433;database=sample;integratedSecurity=true;trustServerCertificate=true;\n```\n\nThe following example uses a specific Active Directory user to log in to Microsoft SQL Server:\n\n```\nsqlserver://localhost:1433;database=sample;integratedSecurity=true;username=prisma;password=aBcD1234;trustServerCertificate=true;\n```\n\n#### Connect to a named instance[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#connect-to-a-named-instance \"Direct link to Connect to a named instance\")\n\nThe following example connects to a named instance of Microsoft SQL Server (`mycomputer\\sql2019`) using integrated security:\n\n```\nsqlserver://mycomputer\\sql2019;database=sample;integratedSecurity=true;trustServerCertificate=true;\n```\n\n## Type mapping between Microsoft SQL Server to Prisma schema[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#type-mapping-between-microsoft-sql-server-to-prisma-schema \"Direct link to Type mapping between Microsoft SQL Server to Prisma schema\")\n\nFor type mappings organized by Prisma ORM type, refer to the [Prisma schema reference](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-scalar-types) documentation.\n\n## Supported versions[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#supported-versions \"Direct link to Supported versions\")\n\nSee [Supported databases](https://www.prisma.io/docs/orm/reference/supported-databases).\n\n## Limitations and known issues[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#limitations-and-known-issues \"Direct link to Limitations and known issues\")\n\n### Prisma Migrate caveats[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#prisma-migrate-caveats \"Direct link to Prisma Migrate caveats\")\n\nPrisma Migrate is supported in [2.13.0](https://github.com/prisma/prisma/releases/tag/2.13.0) and later with the following caveats:\n\n#### Database schema names[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#database-schema-names \"Direct link to Database schema names\")\n\nSQL Server does not have an equivalent to the PostgreSQL `SET search_path` command familiar from PostgreSQL. This means that when you create migrations, you must define the same schema name in the connection URL that is used by the production database. For most of the users this is `dbo` (the default value). However, if the production database uses another schema name, all the migration SQL must be either edited by hand to reflect the production _or_ the connection URL must be changed before creating migrations (for example: `schema=name`).\n\n#### Cyclic references[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#cyclic-references \"Direct link to Cyclic references\")\n\nCircular references can occur between models when each model references another, creating a closed loop. When using a Microsoft SQL Server database, Prisma ORM will show a validation error if the [referential action](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions) on a relation is set to something other than [`NoAction`](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#noaction).\n\nSee [Special rules for referential actions in SQL Server](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions/special-rules-for-referential-actions) for more information.\n\n#### Destructive changes[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#destructive-changes \"Direct link to Destructive changes\")\n\nCertain migrations will cause more changes than you might expect. For example:\n\n*   Adding or removing `autoincrement()`. This cannot be achieved by modifying the column, but requires recreating the table (including all constraints, indices, and foreign keys) and moving all data between the tables.\n*   Additionally, it is not possible to delete all the columns from a table (possible with PostgreSQL or MySQL). If a migration needs to recreate all table columns, it will also re-create the table.\n\n#### Shared default values are not supported[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#shared-default-values-are-not-supported \"Direct link to Shared default values are not supported\")\n\nIn some cases, user might want to define default values as shared objects:\n\ndefault\\_objects.sql\n\n```\nCREATE DEFAULT catcat AS 'musti';CREATE TABLE cats (    id INT IDENTITY PRIMARY KEY,    name NVARCHAR(1000));sp_bindefault 'catcat', 'dbo.cats.name';\n```\n\nUsing the stored procedure `sp_bindefault`, the default value `catcat` can be used in more than one table. The way Prisma ORM manages default values is per table:\n\ndefault\\_per\\_table.sql\n\n```\nCREATE TABLE cats (    id INT IDENTITY PRIMARY KEY,    name NVARCHAR(1000) CONSTRAINT DF_cat_name DEFAULT 'musti');\n```\n\nThe last example, when introspected, leads to the following model:\n\nschema.prisma\n\n```\nmodel cats {  id   Int     @id @default(autoincrement())  name String? @default(\"musti\")}\n```\n\nAnd the first doesn't get the default value introspected:\n\nschema.prisma\n\n```\nmodel cats {  id   Int     @id @default(autoincrement())  name String?}\n```\n\nIf using Prisma Migrate together with shared default objects, changes to them must be done manually to the SQL.\n\n### Data model limitations[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#data-model-limitations \"Direct link to Data model limitations\")\n\n#### Cannot use column with `UNIQUE` constraint and filtered index as foreign key[​](https://www.prisma.io/docs/orm/overview/databases/sql-server#cannot-use-column-with-unique-constraint-and-filtered-index-as-foreign-key \"Direct link to cannot-use-column-with-unique-constraint-and-filtered-index-as-foreign-key\")\n\nMicrosoft SQL Server [only allows one `NULL` value in a column that has a `UNIQUE` constraint](https://docs.microsoft.com/en-us/sql/relational-databases/tables/unique-constraints-and-check-constraints?view=sql-server-ver15#Unique). For example:\n\n*   A table of users has a column named `license_number`\n*   The `license_number` field has a `UNIQUE` constraint\n*   The `license_number` field only allows **one** `NULL` value\n\nThe standard way to get around this issue is to create a filtered unique index that excludes `NULL` values. This allows you to insert multiple `NULL` values. If you do not create an index in the database, you will get an error if you try to insert more than one `null` value into a column with Prisma Client.\n\n_However_, creating an index makes it impossible to use `license_number` as a foreign key in the database (or a relation scalar field in corresponding Prisma Schema)",
    "title": "Microsoft SQL Server | Prisma Documentation",
    "description": "This page explains how Prisma can connect to a Microsoft SQL Server database using the Microsoft SQL Server database connector.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/accelerate/what-is-accelerate",
    "markdown": "# What is Accelerate | Prisma Documentation\n\n[Accelerate](https://www.prisma.io/data-platform/accelerate) is a global database cache available in 300 locations that you can use to achieve up to 1000x faster database queries.\n\nIts main features are:\n\n*   a global cache\n*   scalable connection pool for serverless and edge applications\n*   usage of Prisma Client at the edge (e.g. in Cloudflare Workers or Vercel Edge Functions)\n\nThe goal of Accelerate is to improve response times and reduce database load. It works by caching data at the edge using established caching patterns that you control.\n\nWhile Accelerate is beneficial for all types of applications, being at the edge provides additional benefits to edge function environments like [Vercel Edge Functions](https://vercel.com/docs/concepts/functions/edge-functions), [Cloudflare Workers](https://workers.cloudflare.com/), and [Deno Deploy](https://deno.com/deploy). Cache hits can be served from data centers near the user regardless of the region of the database.\n\n## See Accelerate in action[​](https://www.prisma.io/docs/accelerate/what-is-accelerate#see-accelerate-in-action \"Direct link to See Accelerate in action\")\n\nWe built a small sample application, [Accelerate Speed Test](https://accelerate-speed-test.prisma.io/). The app compares the performance of cached and uncached queries side by side. The app is [open source](https://github.com/prisma/accelerate-speed-test) and you can clone it to try it yourself.\n\n![Screenshot of the Accelerate Speed Test app showing cached query performance](https://www.prisma.io/docs/assets/images/accelerate-3d29c60f63228fcc48218396505a5bb6.png)",
    "title": "What is Accelerate | Prisma Documentation",
    "description": "Learn about Accelerate, a global cache and serverless connection pool that makes your database queries faster.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/overview/databases/cockroachdb",
    "markdown": "# CockroachDB | Prisma Documentation\n\nThis guide discusses the concepts behind using Prisma ORM and CockroachDB, explains the commonalities and differences between CockroachDB and other database providers, and leads you through the process for configuring your application to integrate with CockroachDB.\n\ninfo\n\nThe CockroachDB connector is generally available in versions `3.14.0` and later. It was first added as a [Preview feature](https://www.prisma.io/docs/orm/reference/preview-features) in version [`3.9.0`](https://github.com/prisma/prisma/releases/tag/3.9.0) with support for Introspection, and Prisma Migrate support was added in [`3.11.0`](https://github.com/prisma/prisma/releases/tag/3.11.0).\n\n## What is CockroachDB?[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#what-is-cockroachdb \"Direct link to What is CockroachDB?\")\n\nCockroachDB is a distributed database that is designed for scalability and high availability. Features include:\n\n*   **Compatibility with PostgreSQL:** CockroachDB is compatible with PostgreSQL, allowing interoperability with a large ecosystem of existing products\n*   **Built-in scaling:** CockroachDB comes with automated replication, failover and repair capabilities to allow easy horizontal scaling of your application\n\n## Commonalities with other database providers[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#commonalities-with-other-database-providers \"Direct link to Commonalities with other database providers\")\n\nCockroachDB is largely compatible with PostgreSQL, and can mostly be used with Prisma ORM in the same way. You can still:\n\n*   model your database with the [Prisma Schema Language](https://www.prisma.io/docs/orm/prisma-schema)\n*   connect to your database, using Prisma ORM's [`cockroachdb` database connector](https://www.prisma.io/docs/orm/overview/databases/cockroachdb)\n*   use [Introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection) for existing projects if you already have a CockroachDB database\n*   use [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate) to migrate your database schema to a new version\n*   use [Prisma Client](https://www.prisma.io/docs/orm/prisma-client) in your application to query your database in a type safe way based on your Prisma Schema\n\n## Differences to consider[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#differences-to-consider \"Direct link to Differences to consider\")\n\nThere are some CockroachDB-specific differences to be aware of when working with Prisma ORM's `cockroachdb` connector:\n\n*   **Cockroach-specific native types:** Prisma ORM's `cockroachdb` database connector provides support for CockroachDB's native data types. To learn more, see [How to use CockroachDB's native types](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#how-to-use-cockroachdbs-native-types).\n    \n*   **Creating database keys:** Prisma ORM allows you to generate a unique identifier for each record using the [`autoincrement()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#autoincrement) function. For more information, see [How to use database keys with CockroachDB](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#how-to-use-database-keys-with-cockroachdb).\n    \n\n## How to use Prisma ORM with CockroachDB[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#how-to-use-prisma-orm-with-cockroachdb \"Direct link to How to use Prisma ORM with CockroachDB\")\n\nThis section provides more details on how to use CockroachDB-specific features.\n\n### How to use CockroachDB's native types[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#how-to-use-cockroachdbs-native-types \"Direct link to How to use CockroachDB's native types\")\n\nCockroachDB has its own set of native [data types](https://www.cockroachlabs.com/docs/stable/data-types.html) which are supported in Prisma ORM. For example, CockroachDB uses the `STRING` data type instead of PostgreSQL's `VARCHAR`.\n\nAs a demonstration of this, say you create a `User` table in your CockroachDB database using the following SQL command:\n\n```\nCREATE TABLE public.\"Post\" (  \"id\" INT8 NOT NULL,  \"title\" VARCHAR(200) NOT NULL,  CONSTRAINT \"Post_pkey\" PRIMARY KEY (\"id\" ASC),  FAMILY \"primary\" (\"id\", \"title\"));\n```\n\nAfter introspecting your database with `npx prisma db pull`, you will have a new `Post` model in your Prisma Schema:\n\nschema.prisma\n\n```\nmodel Post {  id    BigInt @id  title String @db.String(200)}\n```\n\nNotice that the `title` field has been annotated with `@db.String(200)` — this differs from PostgreSQL where the annotation would be `@db.VarChar(200)`.\n\nFor a full list of type mappings, see our [connector documentation](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#type-mapping-between-cockroachdb-and-the-prisma-schema).\n\n### How to use database keys with CockroachDB[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#how-to-use-database-keys-with-cockroachdb \"Direct link to How to use database keys with CockroachDB\")\n\nWhen generating unique identifiers for records in a distributed database like CockroachDB, it is best to avoid using sequential IDs – for more information on this, see CockroachDB's [blog post on choosing index keys](https://cockroachlabs.com/blog/how-to-choose-db-index-keys).\n\nInstead, Prisma ORM provides the [`autoincrement()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#autoincrement) attribute function, which uses CockroachDB's [`unique_rowid()` function](https://www.cockroachlabs.com/docs/stable/serial.html) for generating unique identifiers. For example, the following `User` model has an `id` primary key, generated using the `autoincrement()` function:\n\nschema.prisma\n\n```\nmodel User {  id   BigInt @id @default(autoincrement())  name String}\n```\n\nFor compatibility with existing databases, you may sometimes still need to generate a fixed sequence of integer key values. In these cases, you can use Prisma ORM's inbuilt [`sequence()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#sequence) function for CockroachDB. For a list of available options for the `sequence()` function, see our [reference documentation](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#sequence).\n\nFor more information on generating database keys, see CockroachDB's [Primary key best practices](https://www.cockroachlabs.com/docs/v21.2/schema-design-table#primary-key-best-practices) guide.\n\n## Example[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#example \"Direct link to Example\")\n\nTo connect to a CockroachDB database server, you need to configure a [`datasource`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources) block in your [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema):\n\nschema.prisma\n\n```\ndatasource db {  provider = \"cockroachdb\"  url      = env(\"DATABASE_URL\")}\n```\n\nThe fields passed to the `datasource` block are:\n\n*   `provider`: Specifies the `cockroachdb` data source connector.\n*   `url`: Specifies the [connection URL](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#connection-details) for the CockroachDB database server. In this case, an [environment variable is used](https://www.prisma.io/docs/orm/prisma-schema/overview#accessing-environment-variables-from-the-schema) to provide the connection URL.\n\ninfo\n\nWhile `cockroachdb` and `postgresql` connectors are similar, it is mandatory to use the `cockroachdb` connector instead of `postgresql` when connecting to a CockroachDB database from version 5.0.0.\n\n## Connection details[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#connection-details \"Direct link to Connection details\")\n\nCockroachDB uses the PostgreSQL format for its connection URL. See the [PostgreSQL connector documentation](https://www.prisma.io/docs/orm/overview/databases/postgresql#connection-details) for details of this format, and the optional arguments it takes.\n\n## Differences between CockroachDB and PostgreSQL[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#differences-between-cockroachdb-and-postgresql \"Direct link to Differences between CockroachDB and PostgreSQL\")\n\nThe following table lists differences between CockroachDB and PostgreSQL:\n\n| Issue | Area | Notes |\n| --- | --- | --- |\n| By default, the `INT` type is an alias for `INT8` in CockroachDB, whereas in PostgreSQL it is an alias for `INT4`. This means that Prisma ORM will introspect an `INT` column in CockroachDB as `BigInt`, whereas in PostgreSQL Prisma ORM will introspect it as `Int`. | Schema | For more information on the `INT` type, see the [CockroachDB documentation](https://www.cockroachlabs.com/docs/stable/int.html#considerations-for-64-bit-signed-integers) |\n| When using `@default(autoincrement())` on a field, CockroachDB will automatically generate 64-bit integers for the row IDs. These integers will be increasing but not consecutive. This is in contrast to PostgreSQL, where generated row IDs are consecutive and start from 1. | Schema | For more information on generated values, see the [CockroachDB documentation](https://www.cockroachlabs.com/docs/stable/serial.html#generated-values-for-modes-rowid-and-virtual_sequence) |\n| The `@default(autoincrement())` attribute can only be used together with the `BigInt` field type. | Schema | For more information on generated values, see the [CockroachDB documentation](https://www.cockroachlabs.com/docs/stable/serial.html#generated-values-for-modes-rowid-and-virtual_sequence) |\n\n## Type mapping limitations in CockroachDB[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#type-mapping-limitations-in-cockroachdb \"Direct link to Type mapping limitations in CockroachDB\")\n\nThe CockroachDB connector maps the [scalar types](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#scalar-fields) from the Prisma ORM [data model](https://www.prisma.io/docs/orm/prisma-schema/data-model/models) to native column types. These native types are mostly the same as for PostgreSQL — see the [Native type mapping from Prisma ORM to CockroachDB](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#native-type-mapping-from-prisma-orm-to-cockroachdb) for details. However, there are some limitations:\n\n| CockroachDB (Type \\| Aliases) | Prisma ORM | Supported | Native database type attribute | Notes |\n| --- | --- | --- | --- | --- |\n| `money` | `Decimal` | Not yet | `@db.Money` | Supported in PostgreSQL but [not currently in CockroachDB](https://github.com/cockroachdb/cockroach/issues/41578) |\n| `xml` | `String` | Not yet | `@db.Xml` | Supported in PostgreSQL but [not currently in CockroachDB](https://github.com/cockroachdb/cockroach/issues/43355) |\n| `jsonb` arrays | `Json[]` | Not yet | N/A | `Json[]` supported in PostgreSQL but [not currently in CockroachDB](https://github.com/cockroachdb/cockroach/issues/23468) |\n\n## Other limitations[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#other-limitations \"Direct link to Other limitations\")\n\nThe following table lists any other current known limitations of CockroachDB compared to PostgreSQL:\n\n| Issue | Area | Notes |\n| --- | --- | --- |\n| Primary keys are named `primary` instead of `TABLE_pkey`, the Prisma ORM default. | Introspection | This means that they are introspected as `@id(map: \"primary\")`. This will be [fixed in CockroachDB 22.1](https://github.com/cockroachdb/cockroach/pull/70604). |\n| Foreign keys are named `fk_COLUMN_ref_TABLE` instead of `TABLE_COLUMN_fkey`, the Prisma ORM default. | Introspection | This means that they are introspected as `@relation([...], map: \"fk_COLUMN_ref_TABLE\")`. This will be [fixed in CockroachDB 22.1](https://github.com/cockroachdb/cockroach/pull/70658) |\n| Index types `Hash`, `Gist`, `SpGist` or `Brin` are not supported. | Schema | In PostgreSQL, Prisma ORM allows [configuration of indexes](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#configuring-the-access-type-of-indexes-with-type-postgresql) to use the different index access method. CockroachDB only currently supports `BTree` and `Gin`. |\n| Pushing to `Enum` types not supported | Client | Pushing to `Enum` types (e.g. `data: { enum { push: \"A\" }, }`) is currently [not supported in CockroachDB](https://github.com/cockroachdb/cockroach/issues/71388) |\n| Searching on `String` fields without a full text index not supported | Client | Searching on `String` fields without a full text index (e.g. `where: { text: { search: \"cat & dog\", }, },`) is currently [not supported in CockroachDB](https://github.com/cockroachdb/cockroach/issues/7821) |\n| Integer division not supported | Client | Integer division (e.g. `data: { int: { divide: 10, }, }`) is currently [not supported in CockroachDB](https://github.com/cockroachdb/cockroach/issues/41448) |\n| Limited filtering on `Json` fields | Client | Currently CockroachDB [only supports](https://github.com/cockroachdb/cockroach/issues/49144) `equals` and `not` filtering on `Json` fields |\n\n## Type mapping between CockroachDB and the Prisma schema[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#type-mapping-between-cockroachdb-and-the-prisma-schema \"Direct link to Type mapping between CockroachDB and the Prisma schema\")\n\nThe CockroachDB connector maps the [scalar types](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#scalar-fields) from the Prisma ORM [data model](https://www.prisma.io/docs/orm/prisma-schema/data-model/models) as follows to native column types:\n\n> Alternatively, see the [Prisma schema reference](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-scalar-types) for type mappings organized by Prisma ORM type.\n\n### Native type mapping from Prisma ORM to CockroachDB[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#native-type-mapping-from-prisma-orm-to-cockroachdb \"Direct link to Native type mapping from Prisma ORM to CockroachDB\")\n\n| Prisma ORM | CockroachDB |\n| --- | --- |\n| `String` | `STRING` |\n| `Boolean` | `BOOL` |\n| `Int` | `INT4` |\n| `BigInt` | `INT8` |\n| `Float` | `FLOAT8` |\n| `Decimal` | `DECIMAL(65,30)` |\n| `DateTime` | `TIMESTAMP(3)` |\n| `Json` | `JSONB` |\n| `Bytes` | `BYTES` |\n\n### Mapping from CockroachDB to Prisma ORM types on Introspection[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#mapping-from-cockroachdb-to-prisma-orm-types-on-introspection \"Direct link to Mapping from CockroachDB to Prisma ORM types on Introspection\")\n\nWhen introspecting a CockroachDB database, the database types are mapped to Prisma ORM according to the following table:\n\n| CockroachDB (Type \\| Aliases) | Prisma ORM | Supported | Native database type attribute | Notes |\n| --- | --- | --- | --- | --- |\n| `INT` \\| `BIGINT`, `INTEGER` | `BigInt` | ✔️  | `@db.Int8` |     |\n| `BOOL` \\| `BOOLEAN` | `Bool` | ✔️  | `@db.Bool`\\* |     |\n| `TIMESTAMP` \\| `TIMESTAMP WITHOUT TIME ZONE` | `DateTime` | ✔️  | `@db.Timestamp(x)` |     |\n| `TIMESTAMPTZ` \\| `TIMESTAMP WITH TIME ZONE` | `DateTime` | ✔️  | `@db.Timestamptz(x)` |     |\n| `TIME` \\| `TIME WITHOUT TIME ZONE` | `DateTime` | ✔️  | `@db.Time(x)` |     |\n| `TIMETZ` \\| `TIME WITH TIME ZONE` | `DateTime` | ✔️  | `@db.Timetz(x)` |     |\n| `DECIMAL(p,s)` \\| `NUMERIC(p,s)`, `DEC(p,s)` | `Decimal` | ✔️  | `@db.Decimal(x, y)` |     |\n| `REAL` \\| `FLOAT4`, `FLOAT` | `Float` | ✔️  | `@db.Float4` |     |\n| `DOUBLE PRECISION` \\| `FLOAT8` | `Float` | ✔️  | `@db.Float8` |     |\n| `INT2` \\| `SMALLINT` | `Int` | ✔️  | `@db.Int2` |     |\n| `INT4` | `Int` | ✔️  | `@db.Int4` |     |\n| `CHAR(n)` \\| `CHARACTER(n)` | `String` | ✔️  | `@db.Char(x)` |     |\n| `\"char\"` | `String` | ✔️  | `@db.CatalogSingleChar` | Internal type for CockroachDB catalog tables, not meant for end users. |\n| `STRING` \\| `TEXT`, `VARCHAR` | `String` | ✔️  | `@db.String` |     |\n| `DATE` | `DateTime` | ✔️  | `@db.Date` |     |\n| `ENUM` | `enum` | ✔️  | N/A |     |\n| `INET` | `String` | ✔️  | `@db.Inet` |     |\n| `BIT(n)` | `String` | ✔️  | `@Bit(x)` |     |\n| `VARBIT(n)` \\| `BIT VARYING(n)` | `String` | ✔️  | `@VarBit` |     |\n| `OID` | `Int` | ✔️  | `@db.Oid` |     |\n| `UUID` | `String` | ✔️  | `@db.Uuid` |     |\n| `JSONB` \\| `JSON` | `Json` | ✔️  | `@db.JsonB` |     |\n| Array types | `[]` | ✔️  |     |     |\n\n[Introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection) adds native database types that are **not yet supported** as [`Unsupported`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unsupported) fields:\n\nschema.prisma\n\n```\nmodel Device {  id       BigInt                  @id @default(autoincrement())  interval Unsupported(\"INTERVAL\")}\n```\n\n## More on using CockroachDB with Prisma ORM[​](https://www.prisma.io/docs/orm/overview/databases/cockroachdb#more-on-using-cockroachdb-with-prisma-orm \"Direct link to More on using CockroachDB with Prisma ORM\")\n\nThe fastest way to start using CockroachDB with Prisma ORM is to refer to our Getting Started documentation:\n\n*   [Start from scratch](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb)\n*   [Add to existing project](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-cockroachdb)\n\nThese tutorials will take you through the process of connecting to CockroachDB, migrating your schema, and using Prisma Client.\n\nFurther reference information is available in the [CockroachDB connector documentation](https://www.prisma.io/docs/orm/overview/databases/cockroachdb).",
    "title": "CockroachDB | Prisma Documentation",
    "description": "Guide to CockroachDB",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/pulse/what-is-pulse",
    "markdown": "# What is Pulse | Prisma Documentation\n\n## Overview[​](https://www.prisma.io/docs/pulse/what-is-pulse#overview \"Direct link to Overview\")\n\n[Prisma Pulse](https://www.prisma.io/data-platform/pulse) facilitates the implementation of event-driven workflows and architectures by providing managed infrastructure that captures databases events and distributes them to your applications.\n\nIt lets you subscribe to any changes happening in your database using [Prisma Client](https://www.prisma.io/docs/orm/prisma-client) to power **real-time use cases** in your applications, such as:\n\n*   chat and messaging\n*   sending onboarding emails\n*   data syncing (e.g. into a search index)\n*   social collaboration\n*   notifying users\n*   updating inventories\n*   managing payments\n*   live games, quizzes and polls\n*   ... and many other functionalities that require real-time updates\n\nPrisma Pulse integrates with [Prisma ORM](https://www.prisma.io/docs/orm) and lets you subscribe to database changes easily _and_ in a type-safe way using Prisma Client.\n\nHere's the brief overview of how Pulse works:\n\n### 1\\. Stream database change events with Prisma Client[​](https://www.prisma.io/docs/pulse/what-is-pulse#1-stream-database-change-events-with-prisma-client \"Direct link to 1. Stream database change events with Prisma Client\")\n\nIn your application, use Prisma Client to stream _all_ changes that are happening on the `User` table from the database:\n\n```\n// stream all changes from the `User` tableconst stream = await prisma.user.stream();// wait for new events to arrivefor await (let event of stream) {  // log the details about an event to the terminal  console.log(`Something happened in the database: `);  console.log(event);}\n```\n\n### 2\\. A database event happens[​](https://www.prisma.io/docs/pulse/what-is-pulse#2-a-database-event-happens \"Direct link to 2. A database event happens\")\n\nA change is made to the table we've previously subscribed to. In this case, a new row is added to the `User` table.\n\n![](https://www.prisma.io/docs/assets/images/user-insert-6850514d6dc1fd0656a41c3874f8f762.png)\n\nThis change can happen from anywhere: the same app that uses Prisma Client to subscribe to changes, a different application or microservice, a database GUI, Prisma Studio, or any other SQL client (like `psql`).\n\n### 3\\. The database event is propagated to all subscribers[​](https://www.prisma.io/docs/pulse/what-is-pulse#3-the-database-event-is-propagated-to-all-subscribers \"Direct link to 3. The database event is propagated to all subscribers\")\n\nPrisma Pulse propagates the event to all subscribers. In this case, the application from step 1. receives the event and logs its value to the terminal:\n\n```\nSomething happened in the database:{  \"action\": \"create\",  \"created\": {    \"id\": 1,    \"email\": \"test@prisma.io\",    \"name\": \"test\"  }}\n```\n\n## Why Prisma Pulse?[​](https://www.prisma.io/docs/pulse/what-is-pulse#why-prisma-pulse \"Direct link to Why Prisma Pulse?\")\n\nBuilding real-time functionality based on changes that occur in your database can be very complicated. Common approaches like _polling_, implementing _application-level updates_ or using _additional infrastructure_ (like Apache Kafka or RabbitMQ) either don't scale, are very costly or come with substantial development and maintenance overhead.\n\nInstead, Prisma Pulse is based on the idea of _unidirectional data flow_ which is implemented via [Change Data Capture](https://en.wikipedia.org/wiki/Change_data_capture) (CDC). CDC gets rid of the deficiencies of the previously mentioned approaches and solves the problem of reacting to database events in a robust and elegant manner.\n\nHere is an overview of the main features Prisma Pulse provides:\n\n*   Reacting to database changes with type-safe model subscriptions\n*   Unidirectional data flow via Change Data Capture\n*   Great DX integrated with usage of Prisma ORM (easy setup, development and maintenance)\n*   Works with your existing database\n*   Insights dashboard lets you view and understand all database events captured by Pulse\n*   Enable, disable and manage Pulse via the [Platform CLI](https://www.prisma.io/docs/platform/platform-cli)\n\n## How does Prisma Pulse work?[​](https://www.prisma.io/docs/pulse/what-is-pulse#how-does-prisma-pulse-work \"Direct link to How does Prisma Pulse work?\")\n\nPrisma Pulse uses CDC to efficiently observe and capture database changes as they occur. By monitoring the database's transaction log (e.g. the Write-Ahead-Log in PostgreSQL), Prisma Pulse identifies database change events like _inserts_, _updates_, and _deletes_ without impacting the database's performance.\n\nThe captured events are processed, evaluated, and distributed to all Prisma Client instances that subscribed to them:\n\n![What is Pulse](https://www.prisma.io/docs/assets/images/unidirectional-data-flow-90de54896adf65182925e162fd655f62.png)\n\n## What can you build with Prisma Pulse?[​](https://www.prisma.io/docs/pulse/what-is-pulse#what-can-you-build-with-prisma-pulse \"Direct link to What can you build with Prisma Pulse?\")\n\nPrisma Pulse can power real-time functionality like chat, notifications, data broadcast, data synchronization, and more. It's ideal for ensuring data consistency in distributed systems, enhancing real-time user experiences.\n\n![Prisma Pulse use-cases](https://www.prisma.io/docs/assets/images/pulse-usecase-f57607aec3f738a0d235775f622f0af7.png)\n\n## Example projects[​](https://www.prisma.io/docs/pulse/what-is-pulse#example-projects \"Direct link to Example projects\")\n\nHere are a few example projects using Prisma Pulse:\n\n| Project | Description |\n| --- | --- |\n| [starter](https://github.com/prisma/prisma-examples/tree/latest/pulse/starter) | Minimal Pulse starter project |\n| [email-with-resend](https://github.com/prisma/prisma-examples/tree/latest/pulse/email-with-resend) | Send onboarding emails to new users via Resend |\n| [fullstack-leaderboard](https://github.com/prisma/prisma-examples/tree/latest/pulse/fullstack-leaderboard) | A live leaderboard (built with Next.js) |\n| [fullstack-simple-chat](https://github.com/prisma/prisma-examples/tree/latest/pulse/fullstack-simple-chat) | A simple chat app (built with Next.js & Express) |\n| [cron-job-data-sync-with-typesense](https://github.com/prisma/prisma-examples/tree/latest/pulse/product-search-with-typesense) | A cron job that syncs data into Typesense (built with Hono.js) |",
    "title": "What is Pulse | Prisma Documentation",
    "description": "Learn about Pulse, a managed Change Data Capture service that lets you build real-time applications with ease.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/overview/databases/mongodb",
    "markdown": "# MongoDB database connector | Prisma Documentation\n\nThis guide discusses the concepts behind using Prisma ORM and MongoDB, explains the commonalities and differences between MongoDB and other database providers, and leads you through the process for configuring your application to integrate with MongoDB using Prisma ORM.\n\n## What is MongoDB?[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#what-is-mongodb \"Direct link to What is MongoDB?\")\n\n[MongoDB](https://www.mongodb.com/) is a NoSQL database that stores data in [BSON](https://bsonspec.org/) format, a JSON-like document format designed for storing data in key-value pairs. It is commonly used in JavaScript application development because the document model maps easily to objects in application code, and there is built in support for high availability and horizontal scaling.\n\nMongoDB stores data in collections that do not need a schema to be defined in advance, as you would need to do with tables in a relational database. The structure of each collection can also be changed over time. This flexibility can allow rapid iteration of your data model, but it does mean that there are a number of differences when using Prisma ORM to work with your MongoDB database.\n\n## Commonalities with other database providers[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#commonalities-with-other-database-providers \"Direct link to Commonalities with other database providers\")\n\nSome aspects of using Prisma ORM with MongoDB are the same as when using Prisma ORM with a relational database. You can still:\n\n*   model your database with the [Prisma Schema Language](https://www.prisma.io/docs/orm/prisma-schema)\n*   connect to your database, using the [`mongodb` database connector](https://www.prisma.io/docs/orm/overview/databases)\n*   use [Introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection) for existing projects if you already have a MongoDB database\n*   use [`db push`](https://www.prisma.io/docs/orm/prisma-migrate/workflows/prototyping-your-schema) to push changes in your schema to the database\n*   use [Prisma Client](https://www.prisma.io/docs/orm/prisma-client) in your application to query your database in a type safe way based on your Prisma Schema\n\n## Differences to consider[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#differences-to-consider \"Direct link to Differences to consider\")\n\nMongoDB's document-based structure and flexible schema means that using Prisma ORM with MongoDB differs from using it with a relational database in a number of ways. These are some areas where there are differences that you need to be aware of:\n\n*   **Defining IDs**: MongoDB documents have an `_id` field (that often contains an [ObjectID](https://www.mongodb.com/docs/manual/reference/bson-types/#std-label-objectid)). Prisma ORM does not support fields starting with `_`, so this needs to be mapped to a Prisma ORM field using the `@map` attribute. For more information, see [Defining IDs in MongoDB](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-ids-in-mongodb).\n    \n*   **Migrating existing data to match your Prisma schema**: In relational databases, all your data must match your schema. If you change the type of a particular field in your schema when you migrate, all the data must also be updated to match. In contrast, MongoDB does not enforce any particular schema, so you need to take care when migrating. For more information, see [How to migrate old data to new schemas](https://www.prisma.io/docs/orm/overview/databases/mongodb#how-to-migrate-existing-data-to-match-your-prisma-schema).\n    \n*   **Introspection and Prisma ORM relations**: When you introspect an existing MongoDB database, you will get a schema with no relations and will need to add the missing relations in manually. For more information, see [How to add in missing relations after Introspection](https://www.prisma.io/docs/orm/overview/databases/mongodb#how-to-add-in-missing-relations-after-introspection).\n    \n*   **Filtering for `null` and missing fields**: MongoDB makes a distinction between setting a field to `null` and not setting it at all, which is not present in relational databases. Prisma ORM currently does not express this distinction, which means that you need to be careful when filtering for `null` and missing fields. For more information, see [How to filter for `null` and missing fields](https://www.prisma.io/docs/orm/overview/databases/mongodb#how-to-filter-for-null-and-missing-fields)\n    \n*   **Enabling replication**: Prisma ORM uses [MongoDB transactions](https://www.mongodb.com/docs/manual/core/transactions/) internally to avoid partial writes on nested queries. When using transactions, MongoDB requires replication of your data set to be enabled. To do this, you will need to configure a [replica set](https://www.mongodb.com/docs/manual/replication/) — this is a group of MongoDB processes that maintain the same data set. Note that it is still possible to use a single database, by creating a replica set with only one node in it. If you use MongoDB's [Atlas](https://www.mongodb.com/atlas/database) hosting service, the replica set is configured for you, but if you are running MongoDB locally you will need to set up a replica set yourself. For more information, see MongoDB's [guide to deploying a replica set](https://www.mongodb.com/docs/manual/tutorial/deploy-replica-set/).\n    \n\n## How to use Prisma ORM with MongoDB[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#how-to-use-prisma-orm-with-mongodb \"Direct link to How to use Prisma ORM with MongoDB\")\n\nThis section provides instructions for how to carry out tasks that require steps specific to MongoDB.\n\n### How to migrate existing data to match your Prisma schema[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#how-to-migrate-existing-data-to-match-your-prisma-schema \"Direct link to How to migrate existing data to match your Prisma schema\")\n\nMigrating your database over time is an important part of the development cycle. During development, you will need to update your Prisma schema (for example, to add new fields), then update the data in your development environment’s database, and eventually push both the updated schema and the new data to the production database.\n\ninfo\n\nWhen using MongoDB, be aware that the “coupling” between your schema and the database is purposefully designed to be less rigid than with SQL databases; MongoDB will not enforce the schema, so you have to verify data integrity.\n\nThese iterative tasks of updating the schema and the database can result in inconsistencies between your schema and the actual data in the database. Let’s look at one scenario where this can happen, and then examine several strategies for you and your team to consider for handling these inconsistencies.\n\n**Scenario**: you need to include a phone number for users, as well as an email. You currently have the following `User` model in your `schema.prisma` file:\n\nprisma/schema.prisma\n\n```\nmodel User {  id    String @id @default(auto()) @map(\"_id\") @db.ObjectId  email String}\n```\n\nThere are a number of strategies you could use for migrating this schema:\n\n*   **\"On-demand\" updates**: with this strategy, you and your team have agreed that updates can be made to the schema as needed. However, in order to avoid migration failures due to inconsistencies between the data and schema, there is agreement in the team that any new fields added are explicitly defined as optional.\n    \n    In our scenario above, you can add an optional `phoneNumber` field to the `User` model in your Prisma schema:\n    \n    prisma/schema.prisma\n    \n    ```\n    model User {  id          String  @id @default(auto()) @map(\"_id\") @db.ObjectId  email       String  phoneNumber String?}\n    ```\n    \n    Then regenerate your Prisma Client using the `npx prisma generate` command. Next, update your application to reflect the new field, and redeploy your app.\n    \n    As the `phoneNumber` field is optional, you can still query the old users where the phone number has not been defined. The records in the database will be updated \"on demand\" as the application's users begin to enter their phone number in the new field.\n    \n    Another option is to add a default value on a required field, for example:\n    \n    prisma/schema.prisma\n    \n    ```\n    model User {  id          String @id @default(auto()) @map(\"_id\") @db.ObjectId  email       String  phoneNumber String @default(\"000-000-0000\")}\n    ```\n    \n    Then when you encounter a missing `phoneNumber`, the value will be coerced into `000-000-0000`.\n    \n*   **\"No breaking changes\" updates**: this strategy builds on the first one, with further consensus amongst your team that you don't rename or delete fields, only add new fields, and always define the new fields as optional. This policy can be reinforced by adding checks in the CI/CD process to verify that there are no backwards-incompatible changes to the schema.\n    \n*   **\"All-at-once\" updates**: this strategy is similar to traditional migrations in relational databases, where all data is updated to reflect the new schema. In the scenario above, you would create a script to add a value for the phone number field to all existing users in your database. You can then make the field a required field in the application because the schema and the data are consistent.\n    \n\n### How to add in missing relations after Introspection[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#how-to-add-in-missing-relations-after-introspection \"Direct link to How to add in missing relations after Introspection\")\n\nAfter introspecting an existing MongoDB database, you will need to manually add in relations between models. MongoDB does not have the concept of defining relations via foreign keys, as you would in a relational database. However, if you have a collection in MongoDB with a \"foreign-key-like\" field that matches the ID field of another collection, Prisma ORM will allow you to emulate relations between the collections.\n\nAs an example, take a MongoDB database with two collections, `User` and `Post`. The data in these collections has the following format, with a `userId` field linking users to posts:\n\n`User` collection:\n\n*   `_id` field with a type of `objectId`\n*   `email` field with a type of `string`\n\n`Post` collection:\n\n*   `_id` field with a type of `objectId`\n*   `title` field with a type of `string`\n*   `userId` with a type of `objectID`\n\nOn introspection with `db pull`, this is pulled in to the Prisma Schema as follows:\n\nprisma/schema.prisma\n\n```\nmodel Post {  id     String @id @default(auto()) @map(\"_id\") @db.ObjectId  title  String  userId String @db.ObjectId}model User {  id    String @id @default(auto()) @map(\"_id\") @db.ObjectId  email String}\n```\n\nThis is missing the relation between the `User` and `Post` models. To fix this, manually add a `user` field to the `Post` model with a `@relation` attribute using `userId` as the `fields` value, linking it to the `User` model, and a `posts` field to the `User` model as the back relation:\n\nprisma/schema.prisma\n\n```\nmodel Post {  id     String @id @default(auto()) @map(\"_id\") @db.ObjectId  title  String  userId String @db.ObjectId  user   User   @relation(fields: [userId], references: [id])}model User {  id    String @id @default(auto()) @map(\"_id\") @db.ObjectId  email String  posts Post[]}\n```\n\nFor more information on how to use relations in Prisma ORM, see [our documentation](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations).\n\n### How to filter for `null` and missing fields[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#how-to-filter-for-null-and-missing-fields \"Direct link to how-to-filter-for-null-and-missing-fields\")\n\nTo understand how MongoDB distinguishes between `null` and missing fields, consider the example of a `User` model with an optional `name` field:\n\n```\nmodel User {  id    String  @id @default(auto()) @map(\"_id\") @db.ObjectId  email String  name  String?}\n```\n\nFirst, try creating a record with the `name` field explicitly set to `null`. Prisma ORM will return `name: null` as expected:\n\n```\nconst createNull = await prisma.user.create({  data: {    email: 'user1@prisma.io',    name: null,  },})console.log(createNull)\n```\n\nIf you check your MongoDB database directly, you will also see a new record with `name` set to `null`:\n\n```\n{  \"_id\": \"6242c4af032bc76da250b207\",  \"email\": \"user1@prisma.io\",  \"name\": null}\n```\n\nNext, try creating a record without explicitly setting the `name` field:\n\n```\nconst createMissing = await prisma.user.create({  data: {    email: 'user2@prisma.io',  },})console.log(createMissing)\n```\n\nPrisma ORM still returns `name: null`, but if you look in the database directly you will see that the record has no `name` field defined at all:\n\n```\n{  \"_id\": \"6242c4af032bc76da250b208\",  \"email\": \"user2@prisma.io\"}\n```\n\nPrisma ORM returns the same result in both cases, because we currently don't have a way to specify this difference in MongoDB between fields that are `null` in the underlying database, and fields that are not defined at all — see [this Github issue](https://github.com/prisma/prisma/issues/12555) for more information.\n\nThis means that you currently have to be careful when filtering for `null` and missing fields. Filtering for records with `name: null` will only return the first record, with the `name` explicitly set to `null`:\n\n```\nconst findNulls = await prisma.user.findMany({  where: {    name: null,  },})console.log(findNulls)\n```\n\nThis is because `name: null` is checking for equality, and a non-existing field isn't equal to `null`.\n\nTo include missing fields as well, use the [`isSet` filter](https://www.prisma.io/docs/orm/reference/prisma-client-reference#isset) to explicitly search for fields which are either `null` or not set. This will return both records:\n\n```\nconst findNullOrMissing = await prisma.user.findMany({  where: {    OR: [      {        name: null,      },      {        name: {          isSet: false,        },      },    ],  },})console.log(findNullOrMissing)\n```\n\n## More on using MongoDB with Prisma ORM[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#more-on-using-mongodb-with-prisma-orm \"Direct link to More on using MongoDB with Prisma ORM\")\n\nThe fastest way to start using MongoDB with Prisma ORM is to refer to our Getting Started documentation:\n\n*   [Start from scratch](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-typescript-mongodb)\n*   [Add to existing project](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb-typescript-mongodb)\n\nThese tutorials will take you through the process of connecting to MongoDB, pushing schema changes, and using Prisma Client.\n\nFurther reference information is available in the [MongoDB connector documentation](https://www.prisma.io/docs/orm/overview/databases/mongodb).\n\nFor more information on how to set up and manage a MongoDB database, see the [Prisma Data Guide](https://www.prisma.io/dataguide#mongodb).\n\n## Example[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#example \"Direct link to Example\")\n\nTo connect to a MongoDB server, configure the [`datasource`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources) block in your [Prisma Schema](https://www.prisma.io/docs/orm/prisma-schema):\n\nschema.prisma\n\n```\ndatasource db {  provider = \"mongodb\"  url      = env(\"DATABASE_URL\")}\n```\n\nThe fields passed to the `datasource` block are:\n\n*   `provider`: Specifies the `mongodb` data source connector.\n*   `url`: Specifies the [connection URL](https://www.prisma.io/docs/orm/overview/databases/mongodb#connection-url) for the MongoDB server. In this case, an [environment variable is used](https://www.prisma.io/docs/orm/more/development-environment/environment-variables) to provide the connection URL.\n\nwarning\n\nThe MongoDB database connector uses transactions to support nested writes. Transactions **require** a [replica set](https://docs.mongodb.com/manual/tutorial/deploy-replica-set/) deployment. The easiest way to deploy a replica set is with [Atlas](https://docs.atlas.mongodb.com/getting-started/). It's free to get started.\n\n## Connection details[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#connection-details \"Direct link to Connection details\")\n\n### Connection URL[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#connection-url \"Direct link to Connection URL\")\n\nThe MongoDB connection URL can be configured in different ways depending on how you are hosting your database. The standard configuration is made up of the following components:\n\n![Structure of the MongoDB connection URL](https://www.prisma.io/docs/assets/images/mongodb-beadc3582d1870f7ba1b97d6835ec2b8.png)\n\n#### Base URL and path[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#base-url-and-path \"Direct link to Base URL and path\")\n\nThe base URL and path sections of the connection URL are made up of your authentication credentials followed by the host (and optionally, a port number) and database.\n\n```\nmongodb://USERNAME:PASSWORD@HOST/DATABASE\n```\n\nThe following components make up the _base URL_ of your database:\n\n| Name | Placeholder | Description |\n| --- | --- | --- |\n| User | `USERNAME` | Name of your database user, e.g. `janedoe` |\n| Password | `PASSWORD` | Password for your database user |\n| Host | `HOST` | The host where a [`mongod`](https://docs.mongodb.com/manual/reference/program/mongod/#mongodb-binary-bin.mongod) instance is running. If you are running a sharded cluster this will a [`mongos`](https://docs.mongodb.com/manual/reference/program/mongos/#mongodb-binary-bin.mongos) instance. This can be a hostname, IP address or UNIX domain socket. |\n| Port | `PORT` | Port on which your database server is running, e.g. `1234`. If none is provided the default `27017` is used. |\n| Database | `DATABASE` | Name of the database to use. If none is specified but the `authSource` option is set then the `authSource` database name is used. If neither the database in the connection string nor the `authSource` option is specified then it defaults to `admin` |\n\n#### Arguments[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#arguments \"Direct link to Arguments\")\n\nA connection URL can also take arguments. The following example sets three arguments:\n\n*   An `ssl` connection\n*   A `connectTimeoutMS`\n*   And the `maxPoolSize`\n\n```\nmongodb://USERNAME:PASSWORD@HOST/DATABASE?ssl=true&connectTimeoutMS=5000&maxPoolSize=50\n```\n\nRefer to the [MongoDB connection string documentation](https://docs.mongodb.com/manual/reference/connection-string/#connection-string-options) for a complete list of connection string arguments. There are no Prisma ORM-specific arguments.\n\n## Using `ObjectId`[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#using-objectid \"Direct link to using-objectid\")\n\nIt is common practice for the `_id` field of a MongoDB document to contain an [ObjectId](https://docs.mongodb.com/manual/reference/bson-types/#std-label-objectid):\n\n```\n{  \"_id\": { \"$oid\": \"60d599cb001ef98000f2cad2\" },  \"createdAt\": { \"$date\": { \"$numberLong\": \"1624611275577\" } },  \"email\": \"ella@prisma.io\",  \"name\": \"Ella\",  \"role\": \"ADMIN\"}\n```\n\nAny field (most commonly IDs and relation scalar fields) that maps to an `ObjectId` in the underlying database:\n\n*   Must be of type `String` or `Bytes`\n*   Must include the `@db.ObjectId` attribute\n*   Can optionally use `@default(auto())` to auto-generate a valid `ObjectId` on document creation\n\nHere is an example that uses `String`:\n\n```\nmodel User {  id String @id @default(auto()) @map(\"_id\") @db.ObjectId  // Other fields}\n```\n\nAnd here is another example that uses `Bytes`:\n\n```\nmodel User {  id Bytes @id @default(auto()) @map(\"_id\") @db.ObjectId  // Other fields}\n```\n\nSee also: [Defining ID fields in MongoDB](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-ids-in-mongodb)\n\n### Generating `ObjectId`[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#generating-objectid \"Direct link to generating-objectid\")\n\nTo generate a valid `ObjectId` (for testing purposes or to manually set an ID field value) in your application, use the [`bson`](https://www.npmjs.com/package/bson) package.\n\n```\nimport { ObjectId } from 'bson'const id = new ObjectId()\n```\n\n## Differences to connectors for relational databases[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#differences-to-connectors-for-relational-databases \"Direct link to Differences to connectors for relational databases\")\n\nThis section covers ways in which the MongoDB connector differs from Prisma ORM connectors for relational databases.\n\n### No support for Prisma Migrate[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#no-support-for-prisma-migrate \"Direct link to No support for Prisma Migrate\")\n\nCurrently, there are no plans to add support for [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate) as MongoDB projects do not rely on internal schemas where changes need to be managed with an extra tool. Management of `@unique` indexes is realized through `db push`.\n\n### No support for `@@id` and `autoincrement()`[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#no-support-for-id-and-autoincrement \"Direct link to no-support-for-id-and-autoincrement\")\n\nThe [`@@id`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#id-1) attribute (an ID for multiple fields) is not supported because primary keys in MongoDB are always on the `_id` field of a model.\n\nThe [`autoincrement()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generate-autoincrementing-integers-as-ids-relational-databases-only) function (which creates incrementing `@id` values) is not supported because `autoincrement()` does not work with the `ObjectID` type that the `_id` field has in MongoDB.\n\n### Cyclic references and referential actions[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#cyclic-references-and-referential-actions \"Direct link to Cyclic references and referential actions\")\n\nIf you have cyclic references in your models, either from self-relations or a cycle of relations between models, and you use [referential actions](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions), you must set a referential action of `NoAction` to prevent an infinite loop of actions.\n\nSee [Special rules for referential actions](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions/special-rules-for-referential-actions) for more details.\n\n### Replica set configuration[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#replica-set-configuration \"Direct link to Replica set configuration\")\n\nMongoDB only allows you to start a transaction on a replica set. Prisma ORM uses transactions internally to avoid partial writes on nested queries. This means we inherit the requirement of needing a replica set configured.\n\nWhen you try to use Prisma ORM's MongoDB connector on a deployment that has no replica set configured, Prisma ORM shows the message `Error: Transactions are not supported by this deployment`. The full text of the error message is the following:\n\n```\nPrismaClientUnknownRequestError2 [PrismaClientUnknownRequestError]:Invalid `prisma.post.create()` invocation in/index.ts:9:21   6 await prisma.$connect()   7   8 // Create the first post→  9 await prisma.post.create(  Error in connector: Database error. error code: unknown, error message: Transactions are not supported by this deployment    at cb (/node_modules/@prisma/client/runtime/index.js:34804:17)    at processTicksAndRejections (internal/process/task_queues.js:97:5) {  clientVersion: '3.xx.0'}\n```\n\nTo resolve this, we suggest you change your deployment to one with a replica set configured.\n\nOne simple way for this is to use [MongoDB Atlas](https://www.mongodb.com/cloud/atlas) to launch a free instance that has replica set support out of the box.\n\nThere's also an option to run the replica set locally with this guide: [https://docs.mongodb.com/manual/tutorial/convert-standalone-to-replica-set](https://docs.mongodb.com/manual/tutorial/convert-standalone-to-replica-set)\n\n## Type mapping between MongoDB and the Prisma schema[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#type-mapping-between-mongodb-and-the-prisma-schema \"Direct link to Type mapping between MongoDB and the Prisma schema\")\n\nThe MongoDB connector maps the [scalar types](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#scalar-fields) from the Prisma ORM [data model](https://www.prisma.io/docs/orm/prisma-schema/data-model/models) to MongoDB's native column types as follows:\n\n> Alternatively, see [Prisma schema reference](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-scalar-types) for type mappings organized by Prisma type.\n\n### Native type mapping from Prisma ORM to MongoDB[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#native-type-mapping-from-prisma-orm-to-mongodb \"Direct link to Native type mapping from Prisma ORM to MongoDB\")\n\n| Prisma ORM | MongoDB |\n| --- | --- |\n| `String` | `string` |\n| `Boolean` | `bool` |\n| `Int` | `int` |\n| `BigInt` | `long` |\n| `Float` | `double` |\n| `Decimal` | [Currently unsupported](https://github.com/prisma/prisma/issues/12637) |\n| `DateTime` | `timestamp` |\n| `Bytes` | `binData` |\n| `Json` |     |\n\nMongoDB types that are currently unsupported:\n\n*   `Decimal128`\n*   `Undefined`\n*   `DBPointer`\n*   `Null`\n*   `Symbol`\n*   `MinKey`\n*   `MaxKey`\n*   `Object`\n*   `Javascript`\n*   `JavascriptWithScope`\n*   `Regex`\n\n### Mapping from MongoDB to Prisma ORM types on Introspection[​](https://www.prisma.io/docs/orm/overview/databases/mongodb#mapping-from-mongodb-to-prisma-orm-types-on-introspection \"Direct link to Mapping from MongoDB to Prisma ORM types on Introspection\")\n\nWhen introspecting a MongoDB database, Prisma ORM uses the relevant [scalar types](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#scalar-fields). Some special types also get additional native type annotations:\n\n| MongoDB (Type \\| Aliases) | Prisma ORM | Supported | Native database type attribute | Notes |\n| --- | --- | --- | --- | --- |\n| `objectId` | `String` | ✔️  | `@db.ObjectId` |     |\n\n[Introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection) adds native database types that are **not yet supported** as [`Unsupported`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unsupported) fields:\n\nschema.prisma\n\n```\nmodel Example {  id    String                           @id @default(auto()) @map(\"_id\") @db.ObjectId  name  String  regex Unsupported(\"RegularExpression\")}\n```",
    "title": "MongoDB database connector | Prisma Documentation",
    "description": "How Prisma can connect to a MongoDB database using the MongoDB database connector.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/overview/prisma-in-your-stack",
    "markdown": "# How Prisma ORM fits into your stack\n\nPrisma ORM provides a fully type-safe API and simplified database access. You can use Prisma ORM tools to build a GraphQL or REST API, or as part of a fullstack application - the extent to which you incorporate Prisma ORM is up to you.\n\n## In this section[​](https://www.prisma.io/docs/orm/overview/prisma-in-your-stack#in-this-section \"Direct link to In this section\")\n\n[\n\n## REST\n\n](https://www.prisma.io/docs/orm/overview/prisma-in-your-stack/rest)\n\n[\n\n## GraphQL\n\n](https://www.prisma.io/docs/orm/overview/prisma-in-your-stack/graphql)\n\n[\n\n## Fullstack\n\n](https://www.prisma.io/docs/orm/overview/prisma-in-your-stack/fullstack)\n\n[\n\n## Is Prisma ORM an ORM?\n\n](https://www.prisma.io/docs/orm/overview/prisma-in-your-stack/is-prisma-an-orm)",
    "title": "How Prisma ORM fits into your stack | Prisma Documentation",
    "description": "How Prisma ORM fits into your stack",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/overview/databases/planetscale",
    "markdown": "# PlanetScale | Prisma Documentation\n\nPrisma and [PlanetScale](https://planetscale.com/) together provide a development arena that optimizes rapid, type-safe development of data access applications, using Prisma's ORM and PlanetScale's highly scalable MySQL-based platform.\n\nThis document discusses the concepts behind using Prisma ORM and PlanetScale, explains the commonalities and differences between PlanetScale and other database providers, and leads you through the process for configuring your application to integrate with PlanetScale.\n\n## What is PlanetScale?[​](https://www.prisma.io/docs/orm/overview/databases/planetscale#what-is-planetscale \"Direct link to What is PlanetScale?\")\n\nPlanetScale uses the [Vitess](https://vitess.io/) database clustering system to provide a MySQL-compatible database platform. Features include:\n\n*   **Enterprise scalability.** PlanetScale provides a highly available production database cluster that supports scaling across multiple database servers. This is particularly useful in a serverless context, as it avoids the problem of having to [manage connection limits](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/databases-connections#serverless-environments-faas).\n*   **Database branches.** PlanetScale allows you to create [branches of your database schema](https://planetscale.com/docs/concepts/branching), so that you can test changes on a development branch before applying them to your production database.\n*   **Support for [non-blocking schema changes](https://planetscale.com/docs/concepts/nonblocking-schema-changes).** PlanetScale provides a workflow that allows users to update database schemas without locking the database or causing downtime.\n\n## Commonalities with other database providers[​](https://www.prisma.io/docs/orm/overview/databases/planetscale#commonalities-with-other-database-providers \"Direct link to Commonalities with other database providers\")\n\nMany aspects of using Prisma ORM with PlanetScale are just like using Prisma ORM with any other relational database. You can still:\n\n*   model your database with the [Prisma Schema Language](https://www.prisma.io/docs/orm/prisma-schema)\n*   use Prisma ORM's existing [`mysql` database connector](https://www.prisma.io/docs/orm/overview/databases/mysql) in your schema, along with the [connection string PlanetScale provides you](https://planetscale.com/docs/concepts/connection-strings)\n*   use [Introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection) for existing projects if you already have a database schema in PlanetScale\n*   use [`db push`](https://www.prisma.io/docs/orm/prisma-migrate/workflows/prototyping-your-schema) to push changes in your schema to the database\n*   use [Prisma Client](https://www.prisma.io/docs/orm/prisma-client) in your application to talk to the database server at PlanetScale\n\n## Differences to consider[​](https://www.prisma.io/docs/orm/overview/databases/planetscale#differences-to-consider \"Direct link to Differences to consider\")\n\nPlanetScale's branching model and design for scalability means that there are also a number of differences to consider. You should be aware of the following points when deciding to use PlanetScale with Prisma ORM:\n\n*   **Branching and deploy requests.** PlanetScale provides two types of database branches: _development branches_, which allow you to test out schema changes, and _production branches_, which are protected from direct schema changes. Instead, changes must be first created on a development branch and then deployed to production using a deploy request. Production branches are highly available and include automated daily backups. To learn more, see [How to use branches and deploy requests](https://www.prisma.io/docs/orm/overview/databases/planetscale#how-to-use-branches-and-deploy-requests).\n    \n*   **Referential actions and integrity.** To support scaling across multiple database servers, PlanetScale [by default does not use foreign key constraints](https://planetscale.com/docs/learn/operating-without-foreign-key-constraints), which are normally used in relational databases to enforce relationships between data in different tables, and asks users to handle this manually in their applications. However, you can explicitly [enable them in the PlanetScale database settings](https://planetscale.com/docs/concepts/foreign-key-constraints). If you don't enable these explicitly, you can still maintain these relationships in your data and allow the use of [referential actions](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions) by using Prisma ORM's ability to [emulate relations in Prisma Client](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/relation-mode#emulate-relations-in-prisma-orm-with-the-prisma-relation-mode) with the `prisma` relation mode. For more information, see [How to emulate relations in Prisma Client](https://www.prisma.io/docs/orm/overview/databases/planetscale#option-1-emulate-relations-in-prisma-client).\n    \n*   **Creating indexes on foreign keys.** When [emulating relations in Prisma ORM](https://www.prisma.io/docs/orm/overview/databases/planetscale#option-1-emulate-relations-in-prisma-client) (i.e. when _not_ using foreign key constraints on the database-level), you will need to create dedicated indexes on foreign keys. In a standard MySQL database, if a table has a column with a foreign key constraint, an index is automatically created on that column. When PlanetScale is configured to not use foreign key constraints, these indexes are [currently](https://github.com/prisma/prisma/issues/10611) not created when Prisma Client emulates relations, which can lead to issues with queries not being well optimized. To avoid this, you can create indexes in Prisma ORM. For more information, see [How to create indexes on foreign keys](https://www.prisma.io/docs/orm/overview/databases/planetscale#2-create-indexes-on-foreign-keys).\n    \n*   **Making schema changes with `db push`.** When you merge a development branch into your production branch, PlanetScale will automatically compare the two schemas and generate its own schema diff. This means that Prisma ORM's [`prisma migrate`](https://www.prisma.io/docs/orm/prisma-migrate) workflow, which generates its own history of migration files, is not a natural fit when working with PlanetScale. These migration files may not reflect the actual schema changes run by PlanetScale when the branch is merged.\n    \n    warning\n    \n    We recommend not using `prisma migrate` when making schema changes with PlanetScale. Instead, we recommend that you use the `prisma db push` command.\n    \n    For an example of how this works, see [How to make schema changes with `db push`](https://www.prisma.io/docs/orm/overview/databases/planetscale#how-to-make-schema-changes-with-db-push)\n    \n*   **Introspection**. When you introspect on an existing database and you have _not_ enabled [foreign key constraints in your PlanetScale database](https://www.prisma.io/docs/orm/overview/databases/planetscale#option-2-enable-foreign-key-constraints-in-the-planetscale-database-settings), you will get a schema with no relations, as they are usually defined based on foreign keys that connect tables. In that case, you will need to add the missing relations in manually. For more information, see [How to add in missing relations after Introspection](https://www.prisma.io/docs/orm/overview/databases/planetscale#how-to-add-in-missing-relations-after-introspection).\n    \n\n## How to use branches and deploy requests[​](https://www.prisma.io/docs/orm/overview/databases/planetscale#how-to-use-branches-and-deploy-requests \"Direct link to How to use branches and deploy requests\")\n\nWhen connecting to PlanetScale with Prisma ORM, you will need to use the correct connection string for your branch. The connection URL for a given database branch can be found from your PlanetScale account by going to the overview page for the branch and selecting the 'Connect' dropdown. In the 'Passwords' section, generate a new password and select 'Prisma' from the dropdown to get the Prisma format for the connection URL. See Prisma ORM's [Getting Started guide](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-planetscale) for more details of how to connect to a PlanetScale database.\n\nEvery PlanetScale database is created with a branch called `main`, which is initially a development branch that you can use to test schema changes on. Once you are happy with the changes you make there, you can [promote it](https://planetscale.com/docs/concepts/branching#promote-a-branch-to-production) to become a production branch. Note that you can only push new changes to a development branch, so further changes will need to be created on a separate development branch and then later deployed to production using a [deploy request](https://planetscale.com/docs/concepts/branching#2.-create-a-deploy-request).\n\nIf you try to push to a production branch, you will get the [error message](https://www.prisma.io/docs/orm/reference/error-reference#p3022) `Direct execution of DDL (Data Definition Language) SQL statements is disabled on this database.`\n\n## How to use relations (and enable referential integrity) with PlanetScale[​](https://www.prisma.io/docs/orm/overview/databases/planetscale#how-to-use-relations-and-enable-referential-integrity-with-planetscale \"Direct link to How to use relations (and enable referential integrity) with PlanetScale\")\n\n### Option 1: Emulate relations in Prisma Client[​](https://www.prisma.io/docs/orm/overview/databases/planetscale#option-1-emulate-relations-in-prisma-client \"Direct link to Option 1: Emulate relations in Prisma Client\")\n\n#### 1\\. Set `relationMode = \"prisma\"`[​](https://www.prisma.io/docs/orm/overview/databases/planetscale#1-set-relationmode--prisma \"Direct link to 1-set-relationmode--prisma\")\n\nPlanetScale does not use foreign key constraints in its database schema by default. However, Prisma ORM relies on foreign key constraints in the underlying database to enforce referential integrity between models in your Prisma schema.\n\nIn Prisma ORM versions 3.1.1 and later, you can [emulate relations in Prisma Client with the `prisma` relation mode](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/relation-mode#emulate-relations-in-prisma-orm-with-the-prisma-relation-mode), which avoids the need for foreign key constraints in the database.\n\nTo enable emulation of relations in Prisma Client, set the `relationMode` field to `\"prisma\"` in the `datasource` block:\n\nschema.prisma\n\n```\ndatasource db {  provider     = \"mysql\"  url          = env(\"DATABASE_URL\")  relationMode = \"prisma\"}\n```\n\ninfo\n\nThe ability to set the relation mode was introduced as part of the `referentialIntegrity` preview feature in Prisma ORM version 3.1.1, and is generally available in Prisma ORM versions 4.8.0 and later.\n\nThe `relationMode` field was renamed in Prisma ORM version 4.5.0, and was previously named `referentialIntegrity`.\n\nIf you use relations in your Prisma schema with the default `\"foreignKeys\"` option for the `relationMode` field, PlanetScale will error and Prisma ORM output the [P3021 error message](https://www.prisma.io/docs/orm/reference/error-reference#p3021) when it tries to create foreign keys. (In versions before 2.27.0 it will output a raw database error.)\n\n#### 2\\. Create indexes on foreign keys[​](https://www.prisma.io/docs/orm/overview/databases/planetscale#2-create-indexes-on-foreign-keys \"Direct link to 2. Create indexes on foreign keys\")\n\nWhen [you emulate relations in Prisma Client](https://www.prisma.io/docs/orm/overview/databases/planetscale#option-1-emulate-relations-in-prisma-client), you need to create your own indexes. As an example of a situation where you would want to add an index, take this schema for a blog with posts and comments:\n\nschema.prisma\n\n```\nmodel Post {  id       Int       @id @default(autoincrement())  title    String  content  String  likes    Int       @default(0)  comments Comment[]}model Comment {  id      Int    @id @default(autoincrement())  comment String  postId  Int  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)}\n```\n\nThe `postId` field in the `Comment` model refers to the corresponding `id` field in the `Post` model. However this is not implemented as a foreign key in PlanetScale, so the column doesn't have an automatic index. This means that some queries may not be well optimized. For example, if you query for all comments with a certain post `id`, PlanetScale may have to do a full table lookup. This could be slow, and also expensive because PlanetScale's billing model charges for the number of rows read.\n\nTo avoid this, you can define an index on the `postId` field using [Prisma ORM's `@@index` argument](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#index):\n\nschema.prisma\n\n```\nmodel Post {  id       Int       @id @default(autoincrement())  title    String  content  String  likes    Int       @default(0)  comments Comment[]}model Comment {  id      Int    @id @default(autoincrement())  comment String  postId  Int  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)  @@index([postId])}\n```\n\nYou can then add this change to your schema [using `db push`](https://www.prisma.io/docs/orm/overview/databases/planetscale#how-to-make-schema-changes-with-db-push).\n\nIn versions 4.7.0 and later, Prisma ORM warns you if you have a relation with no index on the relation scalar field. For more information, see [Index validation](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/relation-mode#index-validation).\n\n### Option 2: Enable foreign key constraints in the PlanetScale database settings[​](https://www.prisma.io/docs/orm/overview/databases/planetscale#option-2-enable-foreign-key-constraints-in-the-planetscale-database-settings \"Direct link to Option 2: Enable foreign key constraints in the PlanetScale database settings\")\n\nSupport for foreign key constraints in PlanetScale databases has been Generally Available since February 2024. Follow the instructions in the [PlanetScale documentation](https://planetscale.com/docs/concepts/foreign-key-constraints) to enable them in your database.\n\nYou can then use Prisma ORM and define relations in your Prisma schema without the need for extra configuration.\n\nIn that case, you can define a relation as with other database that supports foreign key constraints, for example:\n\nschema.prisma\n\n```\nmodel Post {  id       Int       @id @default(autoincrement())  title    String  content  String  likes    Int       @default(0)  comments Comment[]}model Comment {  id      Int    @id @default(autoincrement())  comment String  postId  Int  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)}\n```\n\nWith this approach, it is _not_ necessary to:\n\n*   set `relationMode = \"prisma\"` in your Prisma schema\n*   define additional indexes on foreign keys\n\nAlso, introspection will automatically create relation fields in your Prisma schema because it can detect the foreign key constraints in the database.\n\n## How to make schema changes with `db push`[​](https://www.prisma.io/docs/orm/overview/databases/planetscale#how-to-make-schema-changes-with-db-push \"Direct link to how-to-make-schema-changes-with-db-push\")\n\nTo use `db push` with PlanetScale, you will first need to [enable emulation of relations in Prisma Client](https://www.prisma.io/docs/orm/overview/databases/planetscale#option-1-emulate-relations-in-prisma-client). Pushing to your branch without referential emulation enabled will give the [error message](https://www.prisma.io/docs/orm/reference/error-reference#p3021) `Foreign keys cannot be created on this database.`\n\nAs an example, let's say you decide to decide to add a new `excerpt` field to the blog post schema above. You will first need to [create a new development branch and connect to it](https://www.prisma.io/docs/orm/overview/databases/planetscale#how-to-use-branches-and-deploy-requests).\n\nNext, add the following to your `schema.prisma` file:\n\nschema.prisma\n\n```\nmodel Post {  id       Int       @id @default(autoincrement())  title    String  content  String  excerpt  String?  likes    Int       @default(0)  comments Comment[]}model Comment {  id      Int    @id @default(autoincrement())  comment String  postId  Int  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)  @@index([postId])}\n```\n\nTo push these changes, navigate to your project directory in your terminal and run\n\nOnce you are happy with your changes on your development branch, you can open a deploy request to deploy these to your production branch.\n\nFor more examples, see PlanetScale's tutorial on [automatic migrations with Prisma ORM](https://planetscale.com/docs/prisma/automatic-prisma-migrations) using `db push`.\n\n## How to add in missing relations after Introspection[​](https://www.prisma.io/docs/orm/overview/databases/planetscale#how-to-add-in-missing-relations-after-introspection \"Direct link to How to add in missing relations after Introspection\")\n\n> **Note**: This section is only relevant if you use `relationMode = \"prisma\"` to emulate foreign key constraints with Prisma ORM. If you enabled foreign key constraints in your PlanetScale database, you can ignore this section.\n\nAfter introspecting with `npx prisma db pull`, the schema you get may be missing some relations. For example, the following schema is missing a relation between the `User` and `Post` models:\n\nschema.prisma\n\n```\nmodel Post {  id        Int      @id @default(autoincrement())  createdAt DateTime @default(now())  title     String   @db.VarChar(255)  content   String?  authorId  Int  @@index([authorId])}model User {  id    Int     @id @default(autoincrement())  email String  @unique  name  String?}\n```\n\nIn this case you need to add the relation in manually:\n\nschema.prisma\n\n```\nmodel Post {  id        Int      @id @default(autoincrement())  createdAt DateTime @default(now())  title     String   @db.VarChar(255)  content   String?  author    User     @relation(fields: [authorId], references: [id])  authorId  Int  @@index([authorId])}model User {  id    Int     @id @default(autoincrement())  email String  @unique  name  String?  posts Post[]}\n```\n\nFor a more detailed example, see the [Getting Started guide for PlanetScale](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/introspection-typescript-planetscale).\n\n## How to use the PlanetScale serverless driver with Prisma ORM (Preview)[​](https://www.prisma.io/docs/orm/overview/databases/planetscale#how-to-use-the-planetscale-serverless-driver-with-prisma-orm-preview \"Direct link to How to use the PlanetScale serverless driver with Prisma ORM (Preview)\")\n\nThe [PlanetScale serverless driver](https://planetscale.com/docs/tutorials/planetscale-serverless-driver) provides a way of communicating with your database and executing queries over HTTP.\n\nYou can use Prisma ORM along with the PlanetScale serverless driver using the [`@prisma/adapter-planetscale`](https://www.npmjs.com/package/@prisma/adapter-planetscale) driver adapter. The driver adapter allows you to communicate with your database over HTTP.\n\ninfo\n\nThis feature is available in Preview from Prisma ORM versions 5.4.2 and later.\n\nTo get started, enable the `driverAdapters` Preview feature flag:\n\n```\ngenerator client {  provider        = \"prisma-client-js\"  previewFeatures = [\"driverAdapters\"]}\n```\n\nGenerate Prisma Client:\n\ninfo\n\nEnsure you update the host value in your connection string to `aws.connect.psdb.cloud`. You can learn more about this [here](https://planetscale.com/docs/tutorials/planetscale-serverless-driver#add-and-use-the-planetscale-serverless-driver-for-javascript-to-your-project).\n\n```\nDATABASE_URL='mysql://johndoe:strongpassword@aws.connect.psdb.cloud/clear_nightsky?sslaccept=strict'\n```\n\nInstall the Prisma ORM adapter for PlanetScale, PlanetScale serverless driver and `undici` packages:\n\n```\nnpm install @prisma/adapter-planetscale @planetscale/database undici\n```\n\ninfo\n\nWhen using a Node.js version below 18, you must provide a custom fetch function implementation. We recommend the `undici` package on which Node's built-in fetch is based. Node.js versions 18 and later include a built-in global `fetch` function, so you don't have to install an extra package.\n\nUpdate your Prisma Client instance to use the PlanetScale serverless driver:\n\n```\nimport { Client } from '@planetscale/database'import { PrismaPlanetScale } from '@prisma/adapter-planetscale'import { PrismaClient } from '@prisma/client'import dotenv from 'dotenv'import { fetch as undiciFetch } from 'undici'dotenv.config()const connectionString = `${process.env.DATABASE_URL}`const client = new Client({ url: connectionString, fetch: undiciFetch })const adapter = new PrismaPlanetScale(client)const prisma = new PrismaClient({ adapter })\n```\n\nYou can then use Prisma Client as you normally would with full type-safety. Prisma Migrate, introspection, and Prisma Studio will continue working as before using the connection string defined in the Prisma schema.\n\n## More on using PlanetScale with Prisma ORM[​](https://www.prisma.io/docs/orm/overview/databases/planetscale#more-on-using-planetscale-with-prisma-orm \"Direct link to More on using PlanetScale with Prisma ORM\")\n\nThe fastest way to start using PlanetScale with Prisma ORM is to refer to our Getting Started documentation:\n\n*   [Start from scratch](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale)\n*   [Add to existing project](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-planetscale)\n\nThese tutorials will take you through the process of connecting to PlanetScale, pushing schema changes, and using Prisma Client.\n\nFor further tips on best practices when using Prisma ORM and PlanetScale together, watch our video:",
    "title": "PlanetScale | Prisma Documentation",
    "description": "Guide to PlanetScale",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-client/queries/crud",
    "markdown": "# CRUD (Reference) | Prisma Documentation\n\nThis page describes how to perform CRUD operations with your generated Prisma Client API. CRUD is an acronym that stands for:\n\n*   [Create](https://www.prisma.io/docs/orm/prisma-client/queries/crud#create)\n*   [Read](https://www.prisma.io/docs/orm/prisma-client/queries/crud#read)\n*   [Update](https://www.prisma.io/docs/orm/prisma-client/queries/crud#update)\n*   [Delete](https://www.prisma.io/docs/orm/prisma-client/queries/crud#delete)\n\nRefer to the [Prisma Client API reference documentation](https://www.prisma.io/docs/orm/reference/prisma-client-reference) for detailed explanations of each method.\n\n## Example schema[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#example-schema \"Direct link to Example schema\")\n\nAll examples are based on the following schema:\n\nExpand for sample schema\n\n*   Relational databases\n*   MongoDB\n\n```\ndatasource db {  provider = \"postgresql\"  url      = env(\"DATABASE_URL\")}generator client {  provider = \"prisma-client-js\"}model ExtendedProfile {  id        Int    @id @default(autoincrement())  biography String  user      User   @relation(fields: [userId], references: [id])  userId    Int    @unique}model User {  id           Int              @id @default(autoincrement())  name         String?  email        String           @unique  profileViews Int              @default(0)  role         Role             @default(USER)  coinflips    Boolean[]  posts        Post[]  profile      ExtendedProfile?}model Post {  id         Int        @id @default(autoincrement())  title      String  published  Boolean    @default(true)  author     User       @relation(fields: [authorId], references: [id])  authorId   Int  comments   Json?  views      Int        @default(0)  likes      Int        @default(0)  categories Category[]}model Category {  id    Int    @id @default(autoincrement())  name  String @unique  posts Post[]}enum Role {  USER  ADMIN}\n```\n\nFor **relational databases**, use `db push` command to push the example schema to your own database\n\nFor **MongoDB**, ensure your data is in a uniform shape and matches the model defined in the Prisma schema.\n\n## Create[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#create \"Direct link to Create\")\n\n### Create a single record[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#create-a-single-record \"Direct link to Create a single record\")\n\nThe following query creates ([`create()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create)) a single user with two fields:\n\n```\nconst user = await prisma.user.create({  data: {    email: 'elsa@prisma.io',    name: 'Elsa Prisma',  },})\n```\n\nThe user's `id` is auto-generated, and your schema determines [which fields are mandatory](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#optional-and-mandatory-fields).\n\n#### Create a single record using generated types[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#create-a-single-record-using-generated-types \"Direct link to Create a single record using generated types\")\n\nThe following example produces an identical result, but creates a `UserCreateInput` variable named `user` _outside_ the context of the `create()` query. After completing a simple check (\"Should posts be included in this `create()` query?\"), the `user` variable is passed into the query:\n\n```\nimport { PrismaClient, Prisma } from '@prisma/client'const prisma = new PrismaClient()async function main() {  let includePosts: boolean = false  let user: Prisma.UserCreateInput  // Check if posts should be included in the query  if (includePosts) {    user = {      email: 'elsa@prisma.io',      name: 'Elsa Prisma',      posts: {        create: {          title: 'Include this post!',        },      },    }  } else {    user = {      email: 'elsa@prisma.io',      name: 'Elsa Prisma',    }  }  // Pass 'user' object into query  const createUser = await prisma.user.create({ data: user })}main()\n```\n\nFor more information about working with generated types, see: [Generated types](https://www.prisma.io/docs/orm/prisma-client/type-safety).\n\n### Create multiple records[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#create-multiple-records \"Direct link to Create multiple records\")\n\nPrisma Client supports bulk inserts as a GA feature in [2.20.0](https://github.com/prisma/prisma/releases/2.20.0) and later.\n\nThe following [`createMany()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#createmany) query creates multiple users and skips any duplicates (`email` must be unique):\n\n```\nconst createMany = await prisma.user.createMany({  data: [    { name: 'Bob', email: 'bob@prisma.io' },    { name: 'Bobo', email: 'bob@prisma.io' }, // Duplicate unique key!    { name: 'Yewande', email: 'yewande@prisma.io' },    { name: 'Angelique', email: 'angelique@prisma.io' },  ],  skipDuplicates: true, // Skip 'Bobo'})\n```\n\nwarning\n\nNote `skipDuplicates` is not supported when using MongoDB, SQLServer, or SQLite.\n\n`createMany()` uses a single `INSERT INTO` statement with multiple values, which is generally more efficient than a separate `INSERT` per row:\n\n```\nBEGININSERT INTO \"public\".\"User\" (\"id\",\"name\",\"email\",\"profileViews\",\"role\",\"coinflips\",\"testing\",\"city\",\"country\") VALUES (DEFAULT,$1,$2,$3,$4,DEFAULT,DEFAULT,DEFAULT,$5), (DEFAULT,$6,$7,$8,$9,DEFAULT,DEFAULT,DEFAULT,$10), (DEFAULT,$11,$12,$13,$14,DEFAULT,DEFAULT,DEFAULT,$15), (DEFAULT,$16,$17,$18,$19,DEFAULT,DEFAULT,DEFAULT,$20) ON CONFLICT DO NOTHINGCOMMITSELECT \"public\".\"User\".\"country\", \"public\".\"User\".\"city\", \"public\".\"User\".\"email\", SUM(\"public\".\"User\".\"profileViews\"), COUNT(*) FROM \"public\".\"User\" WHERE 1=1 GROUP BY \"public\".\"User\".\"country\", \"public\".\"User\".\"city\", \"public\".\"User\".\"email\" HAVING AVG(\"public\".\"User\".\"profileViews\") >= $1 ORDER BY \"public\".\"User\".\"country\" ASC OFFSET $2\n```\n\n> **Note**: Multiple `create()` statements inside a `$transaction` results in multiple `INSERT` statements.\n\nThe following video demonstrates how to use `createMany()` and [faker.js](https://github.com/faker-js/faker/) to seed a database with sample data:\n\n### Create records and connect or create related records[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#create-records-and-connect-or-create-related-records \"Direct link to Create records and connect or create related records\")\n\nSee [Working with relations > Nested writes](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#nested-writes) for information about creating a record and one or more related records at the same time.\n\n### Create and return multiple records[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#create-and-return-multiple-records \"Direct link to Create and return multiple records\")\n\ninfo\n\nThis feature is available in Prisma ORM version 5.14.0 and later for PostgreSQL, CockroachDB and SQLite.\n\nYou can use `createManyAndReturn()` in order to create many records and return the resulting objects.\n\n```\nconst users = await prisma.user.createManyAndReturn({  data: [    { name: 'Alice', email: 'alice@prisma.io' },    { name: 'Bob', email: 'bob@prisma.io' },  ],})\n```\n\nwarning\n\n`relationLoadStrategy: join` is not available when using `createManyAndReturn()`.\n\n## Read[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#read \"Direct link to Read\")\n\n### Get record by ID or unique identifier[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#get-record-by-id-or-unique-identifier \"Direct link to Get record by ID or unique identifier\")\n\nThe following queries return a single record ([`findUnique()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findunique)) by unique identifier or ID:\n\n```\n// By unique identifierconst user = await prisma.user.findUnique({  where: {    email: 'elsa@prisma.io',  },})// By IDconst user = await prisma.user.findUnique({  where: {    id: 99,  },})\n```\n\nIf you are using the MongoDB connector and your underlying ID type is `ObjectId`, you can use the string representation of that `ObjectId`:\n\n```\n// By IDconst user = await prisma.user.findUnique({  where: {    id: '60d5922d00581b8f0062e3a8',  },})\n```\n\n### Get all records[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#get-all-records \"Direct link to Get all records\")\n\nThe following [`findMany()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findmany) query returns _all_ `User` records:\n\n```\nconst users = await prisma.user.findMany()\n```\n\nYou can also [paginate your results](https://www.prisma.io/docs/orm/prisma-client/queries/pagination).\n\n### Get the first record that matches a specific criteria[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#get-the-first-record-that-matches-a-specific-criteria \"Direct link to Get the first record that matches a specific criteria\")\n\nThe following [`findFirst()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findfirst) query returns the _most recently created user_ with at least one post that has more than 100 likes:\n\n1.  Order users by descending ID (largest first) - the largest ID is the most recent\n2.  Return the first user in descending order with at least one post that has more than 100 likes\n\n```\nconst findUser = await prisma.user.findFirst({  where: {    posts: {      some: {        likes: {          gt: 100,        },      },    },  },  orderBy: {    id: 'desc',  },})\n```\n\n### Get a filtered list of records[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#get-a-filtered-list-of-records \"Direct link to Get a filtered list of records\")\n\nPrisma Client supports [filtering](https://www.prisma.io/docs/orm/prisma-client/queries/filtering-and-sorting) on record fields and related record fields.\n\n#### Filter by a single field value[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#filter-by-a-single-field-value \"Direct link to Filter by a single field value\")\n\nThe following query returns all `User` records with an email that ends in `\"prisma.io\"`:\n\n```\nconst users = await prisma.user.findMany({  where: {    email: {      endsWith: 'prisma.io',    },  },})\n```\n\n#### Filter by multiple field values[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#filter-by-multiple-field-values \"Direct link to Filter by multiple field values\")\n\nThe following query uses a combination of [operators](https://www.prisma.io/docs/orm/reference/prisma-client-reference#filter-conditions-and-operators) to return users whose name start with `E` _or_ administrators with at least 1 profile view:\n\n```\nconst users = await prisma.user.findMany({  where: {    OR: [      {        name: {          startsWith: 'E',        },      },      {        AND: {          profileViews: {            gt: 0,          },          role: {            equals: 'ADMIN',          },        },      },    ],  },})\n```\n\nThe following query returns users with an email that ends with `prisma.io` _and_ have at least _one_ post (`some`) that is not published:\n\n```\nconst users = await prisma.user.findMany({  where: {    email: {      endsWith: 'prisma.io',    },    posts: {      some: {        published: false,      },    },  },})\n```\n\nSee [Working with relations](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries) for more examples of filtering on related field values.\n\n### Select a subset of fields[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#select-a-subset-of-fields \"Direct link to Select a subset of fields\")\n\nThe following `findUnique()` query uses `select` to return the `email` and `name` fields of a specific `User` record:\n\n```\nconst user = await prisma.user.findUnique({  where: {    email: 'emma@prisma.io',  },  select: {    email: true,    name: true,  },})\n```\n\nFor more information about including relations, refer to:\n\n*   [Select fields](https://www.prisma.io/docs/orm/prisma-client/queries/select-fields)\n*   [Relation queries](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries)\n\nThe following query uses a nested `select` to return:\n\n*   The user's `email`\n*   The `likes` field of each post\n\n```\nconst user = await prisma.user.findUnique({  where: {    email: 'emma@prisma.io',  },  select: {    email: true,    posts: {      select: {        likes: true,      },    },  },})\n```\n\nFor more information about including relations, see [Select fields and include relations](https://www.prisma.io/docs/orm/prisma-client/queries/select-fields).\n\n### Select distinct field values[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#select-distinct-field-values \"Direct link to Select distinct field values\")\n\nSee [Select `distinct`](https://www.prisma.io/docs/orm/prisma-client/queries/aggregation-grouping-summarizing#select-distinct) for information about selecting distinct field values.\n\nThe following query returns all `ADMIN` users and includes each user's posts in the result:\n\n```\nconst users = await prisma.user.findMany({  where: {    role: 'ADMIN',  },  include: {    posts: true,  },})\n```\n\nFor more information about including relations, see [Select fields and include relations](https://www.prisma.io/docs/orm/prisma-client/queries/select-fields).\n\n#### Include a filtered list of relations[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#include-a-filtered-list-of-relations \"Direct link to Include a filtered list of relations\")\n\nSee [Working with relations](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#filter-a-list-of-relations) to find out how to combine [`include`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#include) and `where` for a filtered list of relations - for example, only include a user's published posts.\n\n## Update[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#update \"Direct link to Update\")\n\n### Update a single record[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#update-a-single-record \"Direct link to Update a single record\")\n\nThe following query uses [`update()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update) to find and update a single `User` record by `email`:\n\n```\nconst updateUser = await prisma.user.update({  where: {    email: 'viola@prisma.io',  },  data: {    name: 'Viola the Magnificent',  },})\n```\n\n### Update multiple records[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#update-multiple-records \"Direct link to Update multiple records\")\n\nThe following query uses [`updateMany()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#updatemany) to update all `User` records that contain `prisma.io`:\n\n```\nconst updateUsers = await prisma.user.updateMany({  where: {    email: {      contains: 'prisma.io',    },  },  data: {    role: 'ADMIN',  },})\n```\n\n### Update _or_ create records[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#update-or-create-records \"Direct link to update-or-create-records\")\n\nThe following query uses [`upsert()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#upsert) to update a `User` record with a specific email address, or create that `User` record if it does not exist:\n\n```\nconst upsertUser = await prisma.user.upsert({  where: {    email: 'viola@prisma.io',  },  update: {    name: 'Viola the Magnificent',  },  create: {    email: 'viola@prisma.io',    name: 'Viola the Magnificent',  },})\n```\n\ninfo\n\nFrom version 4.6.0, Prisma Client carries out upserts with database native SQL commands where possible. [Learn more](https://www.prisma.io/docs/orm/reference/prisma-client-reference#database-upserts).\n\nPrisma Client does not have a `findOrCreate()` query. You can use `upsert()` as a workaround. To make `upsert()` behave like a `findOrCreate()` method, provide an empty `update` parameter to `upsert()`.\n\nwarning\n\nA limitation to using `upsert()` as a workaround for `findOrCreate()` is that `upsert()` will only accept unique model fields in the `where` condition. So it's not possible to use `upsert()` to emulate `findOrCreate()` if the `where` condition contains non-unique fields.\n\n### Update a number field[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#update-a-number-field \"Direct link to Update a number field\")\n\nUse [atomic number operations](https://www.prisma.io/docs/orm/reference/prisma-client-reference#atomic-number-operations) to update a number field **based on its current value** - for example, increment or multiply. The following query increments the `views` and `likes` fields by `1`:\n\n```\nconst updatePosts = await prisma.post.updateMany({  data: {    views: {      increment: 1,    },    likes: {      increment: 1,    },  },})\n```\n\n### Connect and disconnect related records[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#connect-and-disconnect-related-records \"Direct link to Connect and disconnect related records\")\n\nRefer to [Working with relations](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries) for information about disconnecting ([`disconnect`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#disconnect)) and connecting ([`connect`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#connect)) related records.\n\n## Delete[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#delete \"Direct link to Delete\")\n\n### Delete a single record[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#delete-a-single-record \"Direct link to Delete a single record\")\n\nThe following query uses [`delete()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#delete) to delete a single `User` record:\n\n```\nconst deleteUser = await prisma.user.delete({  where: {    email: 'bert@prisma.io',  },})\n```\n\nAttempting to delete a user with one or more posts result in an error, as every `Post` requires an author - see [cascading deletes](https://www.prisma.io/docs/orm/prisma-client/queries/crud#cascading-deletes-deleting-related-records).\n\n### Delete multiple records[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#delete-multiple-records \"Direct link to Delete multiple records\")\n\nThe following query uses [`deleteMany()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#deletemany) to delete all `User` records where `email` contains `prisma.io`:\n\n```\nconst deleteUsers = await prisma.user.deleteMany({  where: {    email: {      contains: 'prisma.io',    },  },})\n```\n\nAttempting to delete a user with one or more posts result in an error, as every `Post` requires an author - see [cascading deletes](https://www.prisma.io/docs/orm/prisma-client/queries/crud#cascading-deletes-deleting-related-records).\n\n### Delete all records[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#delete-all-records \"Direct link to Delete all records\")\n\nThe following query uses [`deleteMany()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#deletemany) to delete all `User` records:\n\n```\nconst deleteUsers = await prisma.user.deleteMany({})\n```\n\nBe aware that this query will fail if the user has any related records (such as posts). In this case, you need to [delete the related records first](https://www.prisma.io/docs/orm/prisma-client/queries/crud#cascading-deletes-deleting-related-records).\n\nThe following query uses [`delete()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#delete) to delete a single `User` record:\n\n```\nconst deleteUser = await prisma.user.delete({  where: {    email: 'bert@prisma.io',  },})\n```\n\nHowever, the example schema includes a **required relation** between `Post` and `User`, which means that you cannot delete a user with posts:\n\n```\nThe change you are trying to make would violate the required relation 'PostToUser' between the `Post` and `User` models.\n```\n\nTo resolve this error, you can:\n\n*   Make the relation optional:\n    \n    ```\n    model Post {  id       Int   @id @default(autoincrement())  author   User? @relation(fields: [authorId], references: [id])  authorId Int?  author   User  @relation(fields: [authorId], references: [id])  authorId Int}\n    ```\n    \n*   Change the author of the posts to another user before deleting the user.\n    \n*   Delete a user and all their posts with two separate queries in a transaction (all queries must succeed):\n    \n    ```\n    const deletePosts = prisma.post.deleteMany({  where: {    authorId: 7,  },})const deleteUser = prisma.user.delete({  where: {    id: 7,  },})const transaction = await prisma.$transaction([deletePosts, deleteUser])\n    ```\n    \n\n### Delete all records from all tables[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#delete-all-records-from-all-tables \"Direct link to Delete all records from all tables\")\n\nSometimes you want to remove all data from all tables but keep the actual tables. This can be particularly useful in a development environment and whilst testing.\n\nThe following shows how to delete all records from all tables with Prisma Client and with Prisma Migrate.\n\n#### Deleting all data with `deleteMany()`[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#deleting-all-data-with-deletemany \"Direct link to deleting-all-data-with-deletemany\")\n\nWhen you know the order in which your tables should be deleted, you can use the [`deleteMany`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#deletemany) function. This is executed synchronously in a [`$transaction`](https://www.prisma.io/docs/orm/prisma-client/queries/transactions) and can be used with all types of databases.\n\n```\nconst deletePosts = prisma.post.deleteMany()const deleteProfile = prisma.profile.deleteMany()const deleteUsers = prisma.user.deleteMany()// The transaction runs synchronously so deleteUsers must run last.await prisma.$transaction([deleteProfile, deletePosts, deleteUsers])\n```\n\n✅ **Pros**:\n\n*   Works well when you know the structure of your schema ahead of time\n*   Synchronously deletes each tables data\n\n❌ **Cons**:\n\n*   When working with relational databases, this function doesn't scale as well as having a more generic solution which looks up and `TRUNCATE`s your tables regardless of their relational constraints. Note that this scaling issue does not apply when using the MongoDB connector.\n\n> **Note**: The `$transaction` performs a cascading delete on each models table so they have to be called in order.\n\n#### Deleting all data with raw SQL / `TRUNCATE`[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#deleting-all-data-with-raw-sql--truncate \"Direct link to deleting-all-data-with-raw-sql--truncate\")\n\nIf you are comfortable working with raw SQL you can perform a `TRUNCATE` on a table by utilizing [`$executeRawUnsafe`](https://www.prisma.io/docs/orm/prisma-client/queries/raw-database-access/raw-queries#executerawunsafe).\n\nIn the following examples, the first tab shows how to perform a `TRUNCATE` on a Postgres database by using a `$queryRaw` look up that maps over the table and `TRUNCATES` all tables in a single query.\n\nThe second tab shows performing the same function but with a MySQL database. In this instance the constraints must be removed before the `TRUNCATE` can be executed, before being reinstated once finished. The whole process is run as a `$transaction`\n\n*   PostgreSQL\n*   MySQL\n\n```\nconst tablenames = await prisma.$queryRaw<  Array<{ tablename: string }>>`SELECT tablename FROM pg_tables WHERE schemaname='public'`const tables = tablenames  .map(({ tablename }) => tablename)  .filter((name) => name !== '_prisma_migrations')  .map((name) => `\"public\".\"${name}\"`)  .join(', ')try {  await prisma.$executeRawUnsafe(`TRUNCATE TABLE ${tables} CASCADE;`)} catch (error) {  console.log({ error })}\n```\n\n✅ **Pros**:\n\n*   Scalable\n*   Very fast\n\n❌ **Cons**:\n\n*   Can't undo the operation\n*   Using reserved SQL key words as tables names can cause issues when trying to run a raw query\n\n#### Deleting all records with Prisma Migrate[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#deleting-all-records-with-prisma-migrate \"Direct link to Deleting all records with Prisma Migrate\")\n\nIf you use Prisma Migrate, you can use `migrate reset`, this will:\n\n1.  Drop the database\n2.  Create a new database\n3.  Apply migrations\n4.  Seed the database with data\n\n## Advanced query examples[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#advanced-query-examples \"Direct link to Advanced query examples\")\n\n### Create a deeply nested tree of records[​](https://www.prisma.io/docs/orm/prisma-client/queries/crud#create-a-deeply-nested-tree-of-records \"Direct link to Create a deeply nested tree of records\")\n\n*   A single `User`\n*   Two new, related `Post` records\n*   Connect or create `Category` per post\n\n```\nconst u = await prisma.user.create({  include: {    posts: {      include: {        categories: true,      },    },  },  data: {    email: 'emma@prisma.io',    posts: {      create: [        {          title: 'My first post',          categories: {            connectOrCreate: [              {                create: { name: 'Introductions' },                where: {                  name: 'Introductions',                },              },              {                create: { name: 'Social' },                where: {                  name: 'Social',                },              },            ],          },        },        {          title: 'How to make cookies',          categories: {            connectOrCreate: [              {                create: { name: 'Social' },                where: {                  name: 'Social',                },              },              {                create: { name: 'Cooking' },                where: {                  name: 'Cooking',                },              },            ],          },        },      ],    },  },})\n```",
    "title": "CRUD (Reference) | Prisma Documentation",
    "description": "How to perform CRUD with Prisma Client.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/more/migrating-to-prisma",
    "markdown": "# Migrate to Prisma ORM from other ORMs\n\n## In this section[​](https://www.prisma.io/docs/orm/more/migrating-to-prisma#in-this-section \"Direct link to In this section\")\n\n[\n\n## Migrate from TypeORM\n\n](https://www.prisma.io/docs/orm/more/migrating-to-prisma/migrate-from-typeorm)\n\n[\n\n## Migrate from Sequelize\n\n](https://www.prisma.io/docs/orm/more/migrating-to-prisma/migrate-from-sequelize)\n\n[\n\n## Migrate from Mongoose\n\n](https://www.prisma.io/docs/orm/more/migrating-to-prisma/migrate-from-mongoose)\n\n[\n\n## Migrate from Drizzle\n\n](https://www.prisma.io/docs/orm/more/migrating-to-prisma/migrate-from-drizzle)",
    "title": "Migrate to Prisma ORM from other ORMs | Prisma Documentation",
    "description": "How to migrate to Prisma ORM from other ORMs and query builders.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-client/deployment",
    "markdown": "# Deploy a Node.js application with Prisma\n\n## Deployment\n\nThis section describes how to deploy Node.js applications that use Prisma Client and TypeScript to various platforms.\n\n## In this section[​](https://www.prisma.io/docs/orm/prisma-client/deployment#in-this-section \"Direct link to In this section\")\n\n[](https://www.prisma.io/docs/orm/prisma-client/deployment/deploy-prisma)\n\n[\n\n## Traditional servers\n\n](https://www.prisma.io/docs/orm/prisma-client/deployment/traditional)\n\n[\n\n## Serverless functions\n\n](https://www.prisma.io/docs/orm/prisma-client/deployment/serverless)\n\n[\n\n## Edge functions\n\n](https://www.prisma.io/docs/orm/prisma-client/deployment/edge)\n\n[\n\n## Module bundlers\n\n](https://www.prisma.io/docs/orm/prisma-client/deployment/module-bundlers)\n\n[\n\n## Deploying database changes\n\n](https://www.prisma.io/docs/orm/prisma-client/deployment/deploy-database-changes-with-prisma-migrate)\n\n[\n\n## Deploy migrations from a local environment\n\n](https://www.prisma.io/docs/orm/prisma-client/deployment/deploy-migrations-from-a-local-environment)\n\n[\n\n## Caveats when deploying to AWS platforms\n\n](https://www.prisma.io/docs/orm/prisma-client/deployment/caveats-when-deploying-to-aws-platforms)\n\n[\n\n## Deploy to a different OS\n\n](https://www.prisma.io/docs/orm/prisma-client/deployment/deploy-to-a-different-os)",
    "title": "Deploy a Node.js application with Prisma | Prisma Documentation",
    "description": "How to deploy a Node.js application that uses Prisma Client and TypeScript to various cloud platforms.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/accelerate/getting-started",
    "markdown": "# Getting started with Prisma Accelerate\n\n## Prerequisites[​](https://www.prisma.io/docs/accelerate/getting-started#prerequisites \"Direct link to Prerequisites\")\n\nTo get started with Accelerate, you will need the following:\n\n*   A [Prisma Data Platform workspace](https://console.prisma.io/).\n*   A project that uses [Prisma Client](https://www.prisma.io/docs/orm/prisma-client) `4.16.1` or higher. If your project is using interactive transactions, you need to use `5.1.1` or higher. (We always recommend using the latest version of Prisma.)\n*   A hosted PostgreSQL, MySQL/MariaDB, PlanetScale, CockroachDB, or MongoDB database.\n\n## 1\\. Enable Accelerate[​](https://www.prisma.io/docs/accelerate/getting-started#1-enable-accelerate \"Direct link to 1. Enable Accelerate\")\n\nNavigate to your Prisma Data Platform project, choose an environment, and enable Accelerate by providing your database connection string and selecting the region nearest your database.\n\ninfo\n\nIf you require IP allowlisting or firewall configurations with trusted IP addresses, enable Static IP for enhanced security\n\n## 2\\. Add Accelerate to your application[​](https://www.prisma.io/docs/accelerate/getting-started#2-add-accelerate-to-your-application \"Direct link to 2. Add Accelerate to your application\")\n\n### 2.1. Update your database connection string[​](https://www.prisma.io/docs/accelerate/getting-started#21-update-your-database-connection-string \"Direct link to 2.1. Update your database connection string\")\n\nOnce enabled, you'll be prompted to generate an API key that you'll use in your new Accelerate connection string to authenticate requests.\n\nReplace your direct database url with your new Accelerate connection string.\n\n.env\n\n```\n# New Accelerate connection string with generated API_KEYDATABASE_URL=\"prisma://accelerate.prisma-data.net/?api_key=__API_KEY__\"# Previous (direct) database connection string# DATABASE_URL=\"postgresql://user:password@host:port/db_name?schema=public\"\n```\n\nYour updated connection string will be used as the datasource `url` in your Prisma schema file;\n\n```\ndatasource db {  provider = \"postgresql\"  url      = env(\"DATABASE_URL\")}\n```\n\nPrisma Migrate and Introspection do not work with a `prisma://` connection string. In order to continue using these features add a new variable to the `.env` file named `DIRECT_DATABASE_URL` whose value is the direct database connection string:\n\n.env\n\n```\nDATABASE_URL=\"prisma://accelerate.prisma-data.net/?api_key=__API_KEY__\"DIRECT_DATABASE_URL=\"postgresql://user:password@host:port/db_name?schema=public\"\n```\n\nThen in your Prisma schema's `datasource` block add a field named `directUrl` with the following:\n\n```\ndatasource db {  provider  = \"postgresql\"  url       = env(\"DATABASE_URL\")  directUrl = env(\"DIRECT_DATABASE_URL\")}\n```\n\nMigrations and introspections will use the `directUrl` connection string rather than the one defined in `url` when this configuration is provided.\n\n> `directUrl` is useful for you to carry out migrations and introspections. However, you don't need `directUrl` to use Accelerate in your application.\n\n### 2.2. Install the Accelerate Prisma Client extension[​](https://www.prisma.io/docs/accelerate/getting-started#22-install-the-accelerate-prisma-client-extension \"Direct link to 2.2. Install the Accelerate Prisma Client extension\")\n\nInstall the latest version of Prisma Client and Accelerate Prisma Client extension\n\n```\nnpm install @prisma/client@latest @prisma/extension-accelerate\n```\n\n### 2.3. Generate Prisma Client for Accelerate[​](https://www.prisma.io/docs/accelerate/getting-started#23-generate-prisma-client-for-accelerate \"Direct link to 2.3. Generate Prisma Client for Accelerate\")\n\nIf you're using Prisma version `5.2.0` or greater, Prisma Client will automatically determine how it should connect to the database depending on the protocol in the database connection string. If the connection string in the `DATABASE_URL` starts with `prisma://`, Prisma Client will try to connect to your database using Prisma Accelerate.\n\nWhen using Prisma Accelerate in long-running application servers, such as a server deployed on AWS EC2, you can generate the Prisma Client by executing the following command:\n\nWhen using Prisma Accelerate in a Serverless or an Edge application, we recommend you to run the following command to generate Prisma Client:\n\n```\nnpx prisma generate --no-engine\n```\n\ninfo\n\nThe `--no-engine` flag prevents a Query Engine file from being included in the generated Prisma Client, this ensures the bundle size of your application remains small.\n\nwarning\n\nIf your Prisma version is below `5.2.0`, generate Prisma Client with the `--accelerate` option:\n\n```\nnpx prisma generate --accelerate\n```\n\nIf your Prisma version is below `5.0.0`, generate Prisma Client with the `--data-proxy` option:\n\n### 2.4. Extend your Prisma Client instance with the Accelerate extension[​](https://www.prisma.io/docs/accelerate/getting-started#24-extend-your-prisma-client-instance-with-the-accelerate-extension \"Direct link to 2.4. Extend your Prisma Client instance with the Accelerate extension\")\n\nAdd the following to extend your existing Prisma Client instance with the Accelerate extension:\n\n```\nimport { PrismaClient } from '@prisma/client'import { withAccelerate } from '@prisma/extension-accelerate'const prisma = new PrismaClient().$extends(withAccelerate())\n```\n\nIf you are going to deploy to an edge runtime (like Cloudflare Workers, Vercel Edge Functions, Deno Deploy, or Supabase Edge Functions), use our edge client instead:\n\n```\nimport { PrismaClient } from '@prisma/client/edge'import { withAccelerate } from '@prisma/extension-accelerate'const prisma = new PrismaClient().$extends(withAccelerate())\n```\n\nIf VS Code does not recognize the `$extends` method, refer to [this section](https://www.prisma.io/docs/accelerate/faq#vs-code-does-not-recognize-the-extends-method) on how to resolve the issue.\n\ninfo\n\nIf you are using [Prisma Middleware](https://www.prisma.io/docs/orm/prisma-client/client-extensions/middleware) in your application, make sure they are added before any Prisma Client extensions (like Accelerate). For example:\n\n```\nconst prisma = new PrismaClient().$use(middleware).$extends(withAccelerate())\n```\n\n### 2.5. Use Accelerate in your database queries[​](https://www.prisma.io/docs/accelerate/getting-started#25-use-accelerate-in-your-database-queries \"Direct link to 2.5. Use Accelerate in your database queries\")\n\nThe `withAccelerate` extension primarily does two things:\n\n*   Gives you access to the `cacheStrategy` field within each applicable model method that allows you to define a cache strategy per-query.\n*   Routes all of your queries through a connection pooler.\n\n#### No cache strategy to only use connection pool[​](https://www.prisma.io/docs/accelerate/getting-started#no-cache-strategy-to-only-use-connection-pool \"Direct link to No cache strategy to only use connection pool\")\n\nIf you simply want to take advantage of Accelerate's connection pooling feature without applying a cache strategy, you may run your query the same way you would have without Accelerate.\n\nBy enabling Accelerate and supplying the Accelerate connection string, your queries now use the connection pooler by default.\n\n#### Define a cache strategy[​](https://www.prisma.io/docs/accelerate/getting-started#define-a-cache-strategy \"Direct link to Define a cache strategy\")\n\nUpdate a query with the new `cacheStrategy` property which allows you to define a cache strategy for that specific query:\n\n```\nconst user = await prisma.user.findMany({  where: {    email: {      contains: 'alice@prisma.io',    },  },  cacheStrategy: { swr: 60, ttl: 60 },})\n```\n\nIn the example above, `swr: 60` and `ttl: 60` means Accelerate will serve cached data for 60 seconds and then another 60 seconds while Accelerate fetches fresh data in the background.\n\nYou should now see improved performance for your cached queries.\n\ninfo\n\nAs of Prisma version `5.2.0` you can use Prisma Studio with the Accelerate connection string.",
    "title": "Getting started with Prisma Accelerate | Prisma Documentation",
    "description": "Learn how to get up and running with Prisma Accelerate.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/platform/about",
    "markdown": "# Console: About | Prisma Documentation\n\n## Overview[​](https://www.prisma.io/docs/platform/about#overview \"Direct link to Overview\")\n\nThe [Console](http://console.prisma.io/) enables you to manage and configure your projects that use Prisma Data Platform (PDP) products, and helps you integrate them into your application:\n\n*   [Accelerate](https://www.prisma.io/docs/accelerate/what-is-accelerate): Global database cache with scalable connection pooling\n*   [Pulse](https://www.prisma.io/docs/pulse/what-is-pulse): A managed Change Data Capture (CDC) service that enables real-time database subscriptions\n\n## Concepts[​](https://www.prisma.io/docs/platform/about#concepts \"Direct link to Concepts\")\n\nThe Console workflows are based on four main concepts:\n\n*   [**User account**](https://www.prisma.io/docs/platform/about#user-account): In order to use PDP products, you need to have a PDP user account. A _user_ will typically create one user account to manage all their workspaces, projects and environments. The _user_ can also be invited to join other workspaces to collaborate on the projects in that workspace.\n*   [**Workspaces**](https://www.prisma.io/docs/platform/about#workspace): A user account can belong to multiple workspaces. A workspace typically represents a _team_ of individuals working together on one or more projects. **Billing is on a workspace level**, i.e. the invoice for a workspace at the end of the month captures all costs associated with the projects in a given workspace.\n*   [**Projects**](https://www.prisma.io/docs/platform/about#project): A project belongs to a workspace. It typically represents the _application_ or _service_ a team is working on.\n*   [**Environments**](https://www.prisma.io/docs/platform/about#environment): An environment belongs to a project. It typically maps to a _development stage_, like `Development`, `Staging` or `Production`. **API keys are provisioned on the environment level**, and products are configured per environment as well (e.g. the database connection string used for Accelerate).\n\nHere is a visual illustration of how these concepts relate to each other:\n\n![](https://www.prisma.io/docs/assets/images/pdp-concepts-e43bf8521cd94c56e296fc3851a92866.png)\n\n### User account[​](https://www.prisma.io/docs/platform/about#user-account \"Direct link to User account\")\n\nA user account is the prerequisite for any interactions with PDP products. You can use it to manage your workspaces (and their projects). A user account can be invited to collaborate on workspaces created by other users as well.\n\nIf you need to delete your user account, go [here](https://www.prisma.io/docs/platform/support#deleting-your-pdp-account).\n\n### Workspace[​](https://www.prisma.io/docs/platform/about#workspace \"Direct link to Workspace\")\n\nYou can create several workspaces. A workspace is an isolated space to host projects. A workspace can have multiple user accounts associated with it so that multiple users can collaborate on the the projects in the workspace.\n\nIn each workspace, you can:\n\n*   view and manage all projects (and their environments) in that workspace.\n*   manage billing, i.e. select a [subscription plan](https://prisma.io/pricing?utm_source=docs&utm_medium=platform-docs), configure payment methods, or view the invoice history.\n*   view the usage of your enabled PDP products across all projects in that workspace.\n*   invite other users to collaborate in the workspace.\n\n### Project[​](https://www.prisma.io/docs/platform/about#project \"Direct link to Project\")\n\nIn each workspace, you can create several projects. A project typically represents an application (a product or service). You typically have one [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema) per project.\n\nIn each project, you can:\n\n*   view and manage all environments in that project.\n\nThe number of project you can create in a workspace depends on the [subscription plan](https://prisma.io/pricing?utm_source=docs&utm_medium=platform-docs) configured in that workspace.\n\n### Environment[​](https://www.prisma.io/docs/platform/about#environment \"Direct link to Environment\")\n\nAn environment is an isolated space to provision PDP products for a given project. Environments typically map to development stages, like `Development`, `Staging` or `Production`. When a new project is created, it will have a _default_ environment called `Production`.\n\nIn each environment, you can:\n\n*   enable, disable and configure PDP products (Pulse, Accelerate, ...).\n*   generate API keys.\n*   for **Accelerate**:\n    *   set your database connection string.\n    *   configure the _region_ where Accelerate's connection pool is running.\n    *   change the connection pool size.\n    *   enable static IP.\n*   for **Pulse**:\n    *   set your database connection string (of a [Pulse-compatible database](https://www.prisma.io/docs/pulse/database-setup)).\n    *   configure the _region_ where Pulse is running.\n    *   configure database replication.\n\nThe number of environments you can create in a project depends on the [subscription plan](https://prisma.io/pricing?utm_source=docs&utm_medium=platform-docs) configured in your workspace.\n\n## Billing[​](https://www.prisma.io/docs/platform/about#billing \"Direct link to Billing\")\n\nThe [subscription plan](https://prisma.io/pricing?utm_source=docs&utm_medium=platform-docs) you select in your workspace determines how many projects and environments you can create in that workspace:\n\n|     | **Starter** | **Pro** | **Business** | **Enterprise** |\n| --- | --- | --- | --- | --- |\n| **Projects** | 5   | 10  | 15  | Custom |\n| **Environments** | 2 / project | 6 / project | 12 / project | Custom |\n\n### Per-workspace billing[​](https://www.prisma.io/docs/platform/about#per-workspace-billing \"Direct link to Per-workspace billing\")\n\nBilling is set up on a per-workspace basis:\n\n*   A subscription plan is selected per workspace. That means, a user account can belong to multiple workspaces where each workspace uses a different plan.\n*   A payment method is selected per workspace. That means, a user account can belong to multiple workspaces where each workspace has a different payment method.\n\nAt the end of a billing period, your selected payment method will be charged with the incurred costs of products across _all_ projects (and their environments) in that workspace.\n\nYou can configure all billing details in the **Billing** section of your workspace.\n\n### Prorated billing[​](https://www.prisma.io/docs/platform/about#prorated-billing \"Direct link to Prorated billing\")\n\nAll base plan prices are prorated, which means you're only billed for the duration of your subscription to a specific plan. In addition, you're also billed for any usage costs you've incurred during your subscription.\n\nFor example:\n\n*   if you subscribe to our **Pro** plan on the 15th day of a month, you'll only be charged the base plan price for the days left in that month.\n*   if you downgrade your subscription plan (e.g. from **Business** to **Pro**) after 10 days of a 30-day month, you'll be charged for 10 days of the base price of the **Business** plan and 20 days for the base price of the **Pro** plan.\n\nVisit our [pricing page](https://prisma.io/pricing?utm_source=docs&utm_medium=platform-docs) for more details.\n\n### Downgrading a subscription plan[​](https://www.prisma.io/docs/platform/about#downgrading-a-subscription-plan \"Direct link to Downgrading a subscription plan\")\n\nIf you downgrade a subscription plan, you may need to delete some of your projects and/or their environments in order to adhere to the [limits](https://www.prisma.io/docs/platform/about#environment) of the newly selected plan.\n\nFor example, if your workspace is on a **Business** plan and currently has 14 (out of 15) projects, you will need to delete at least 4 projects to adhere to the project limit of the **Pro** plan. Additionally, you need to make sure that the remaining projects don't have more than 6 environments per project to adhere to the environment limit of the **Pro** plan.\n\n## Programmatic access via the Platform CLI[​](https://www.prisma.io/docs/platform/about#programmatic-access-via-the-platform-cli \"Direct link to Programmatic access via the Platform CLI\")\n\nIn addition to the web interface of the Console, the Prisma CLI provides another way to interact with your PDP account and manage PDP products.\n\nThis can be useful if you need programmatic access, e.g. for integrating it into CI workflows.\n\nRead more about the [Prisma CLI](https://www.prisma.io/docs/platform/platform-cli).\n\n## API keys[​](https://www.prisma.io/docs/platform/about#api-keys \"Direct link to API keys\")\n\nAn API key is required to authenticate requests from your Prisma Client to products such as Prisma Accelerate and Prisma Pulse.\n\nAPIs keys are _not_ product-specific, meaning you can use the same API key for both Accelerate and Pulse when used in the same environment.\n\nYou may generate multiple API keys per environment and manage those via the **API Keys** section in an environment.",
    "title": "Console: About | Prisma Documentation",
    "description": "Learn about the Console to integrate the Prisma Data Platform products.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/pulse/getting-started",
    "markdown": "# Getting started with Prisma Pulse\n\n## Prerequisites[​](https://www.prisma.io/docs/pulse/getting-started#prerequisites \"Direct link to Prerequisites\")\n\ninfo\n\nPrisma Pulse currently supports PostgreSQL. We'd love to hear [which databases](https://tally.so/r/wLbb8G) you would like to see supported next.\n\nTo get started with Pulse, you will need the following:\n\n*   A [Prisma Data Platform](https://console.prisma.io/) account\n*   The **connection string** of a Pulse-ready database (if you don't have one yet, you can [configure your existing database](https://www.prisma.io/docs/pulse/database-setup) or [use a Railway template](https://railway.app/template/pulse-pg?referralCode=VQ09uv))\n\n## 1\\. Enable Pulse in the Platform Console[​](https://www.prisma.io/docs/pulse/getting-started#1-enable-pulse-in-the-platform-console \"Direct link to 1. Enable Pulse in the Platform Console\")\n\n### 1.1. Choose the environment you want to enable Pulse for[​](https://www.prisma.io/docs/pulse/getting-started#11-choose-the-environment-you-want-to-enable-pulse-for \"Direct link to 1.1. Choose the environment you want to enable Pulse for\")\n\nOpen the [Platform Console](https://console.prisma.io/), navigate to your workspace of choice, then select the project and choose the environment in which you want to enable Pulse.\n\nIf you don't have a project yet in your workspace, you can create a new one.\n\n### 1.2. Enable Pulse[​](https://www.prisma.io/docs/pulse/getting-started#12-enable-pulse \"Direct link to 1.2. Enable Pulse\")\n\nIn the project environment of your choice, click the **Enable Pulse** button.\n\n### 1.3. Configure Pulse[​](https://www.prisma.io/docs/pulse/getting-started#13-configure-pulse \"Direct link to 1.3. Configure Pulse\")\n\nThe Pulse **Setup** screen requires you to:\n\n1.  provide your **Database connection string**\n2.  select a **Region** where Pulse should be hosted\n3.  decide whether you want to use the **Automatic setup** for [**Database replication**](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#enable-logical-replication) (only available on paid plans)\n4.  make sure **Event persistence** is enabled to use delivery guarantees with [`.stream()`](https://www.prisma.io/docs/pulse/api-reference#stream) (or disable it if you want to use [`.subscribe()`](https://www.prisma.io/docs/pulse/api-reference#subscribe) for fully ephemeral events without delivery guarantees)\n\nWhen you're done with that, click the **Enable Pulse** button at the bottom of the screen. This will test the connectivity to your database.\n\n### 1.4. Generate an API key[​](https://www.prisma.io/docs/pulse/getting-started#14-generate-an-api-key \"Direct link to 1.4. Generate an API key\")\n\ninfo\n\nIf you already have an API key for your current environment, you can skip this step und use the existing API key for using Prisma Pulse.\n\nYou can generate an API key by clicking the **Generate API key** button. Store the API key in a secure location or add it to the `.env` file of your project:\n\n.env\n\n```\nPULSE_API_KEY=\"your_secure_pulse_api_key\"\n```\n\nYou won't be able to access the same API key again afterwards.\n\n## 2\\. Add Pulse to your application[​](https://www.prisma.io/docs/pulse/getting-started#2-add-pulse-to-your-application \"Direct link to 2. Add Pulse to your application\")\n\nWith Pulse enabled, proceed with these steps to integrate Pulse into your application. You can also utilize our [example repository](https://github.com/prisma/prisma-examples/tree/latest/pulse/starter) on GitHub as a reference guide.\n\n### 2.1. Install the Pulse Client extension[​](https://www.prisma.io/docs/pulse/getting-started#21-install-the-pulse-client-extension \"Direct link to 2.1. Install the Pulse Client extension\")\n\nInstall the Pulse extension:\n\n```\nnpm install @prisma/extension-pulse@latest\n```\n\n### 2.2. Extend your Prisma Client instance with the Pulse extension[​](https://www.prisma.io/docs/pulse/getting-started#22-extend-your-prisma-client-instance-with-the-pulse-extension \"Direct link to 2.2. Extend your Prisma Client instance with the Pulse extension\")\n\nAdd the following to extend your existing Prisma Client instance with the Prisma Pulse extension:\n\n```\nimport { PrismaClient } from '@prisma/client'import { withPulse } from '@prisma/extension-pulse'const prisma = new PrismaClient().$extends(  withPulse({ apiKey: process.env.PULSE_API_KEY }))\n```\n\nwarning\n\nYou may need to [configure your `tsconfig.json`](https://www.prisma.io/docs/pulse/faq#how-to-configure-tsconfigjson-with-the-pulse-extension) if you see the following error message:\n\n```\nCannot find module '@prisma/extension-pulse' or its corresponding type declarations.\n```\n\n### 2.3. Create your first Pulse stream[​](https://www.prisma.io/docs/pulse/getting-started#23-create-your-first-pulse-stream \"Direct link to 2.3. Create your first Pulse stream\")\n\nWith the Pulse extension applied, you can use Pulse's `.stream()` method on any model defined in your Prisma Schema to stream data change events.\n\nIn the below example, it is assumed that your Prisma schema has a `User` model. A stream is created for the `User` model that listens for _any_ change event on that table:\n\n*   Stream\n*   Prisma schema\n\n```\nimport { PrismaClient } from '@prisma/client'import { withPulse } from '@prisma/extension-pulse'const prisma = new PrismaClient().$extends(  withPulse({ apiKey: process.env.PULSE_API_KEY }))async function main() {  const stream = await prisma.user.stream()  for await (const event of stream) {    console.log('just received an event:', event)  }}main()\n```\n\n## 3\\. Test your stream[​](https://www.prisma.io/docs/pulse/getting-started#3-test-your-stream \"Direct link to 3. Test your stream\")\n\nAfter running the code snippet above, you can test the stream by _creating_, _updating_ or _deleting_ a `User` record in your database.\n\nYou can do that using Prisma Studio (by running `npx prisma studio`) or by using any other database client of your choice (like [Postico](https://eggerapps.at/postico2/) or `psql`).\n\nIf everything worked, you should see the event being logged to the terminal where you can the code snippet from above. 🎉\n\n## Next steps[​](https://www.prisma.io/docs/pulse/getting-started#next-steps \"Direct link to Next steps\")\n\nYou can try out more filters on your Pulse stream, for example:\n\n**Stream only `create` events**:\n\n```\nconst stream = await prisma.user.stream({  create: { },})\n```\n\n**Stream only `update` events**:\n\n```\nconst stream = await prisma.user.stream({  update: { },})\n```\n\n**Stream only `delete` events**:\n\n```\nconst stream = await prisma.user.stream({  delete: { },})\n```\n\nPulse offers even more fine-grained filters than these. You can explore these in the [API reference](https://www.prisma.io/docs/pulse/api-reference).\n\n## Need help?[​](https://www.prisma.io/docs/pulse/getting-started#need-help \"Direct link to Need help?\")\n\nReach out to us in the `#help-and-questions` channel on our [Discord](https://pris.ly/discord), or connect with our community to see how others are using Pulse.",
    "title": "Getting started with Prisma Pulse | Prisma Documentation",
    "description": "Learn how to get up and running with Prisma Pulse.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/platform/platform-cli/commands",
    "markdown": "# Platform CLI: Commands | Prisma Documentation\n\nThis document describes the Prisma Data Platform's integrated Prisma CLI commands, arguments, and options.\n\n## Getting started[​](https://www.prisma.io/docs/platform/platform-cli/commands#getting-started \"Direct link to Getting started\")\n\nTo get started, ensure you have the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli) updated to version `5.10.0` or later. This is necessary to access the Platform through the Prisma CLI.\n\ninfo\n\n💡 When using commands, always start with `prisma platform` and include the `--early-access` flag to enable the use of the Prisma Data Platform whilst still in early access.\n\n## Authentication[​](https://www.prisma.io/docs/platform/platform-cli/commands#authentication \"Direct link to Authentication\")\n\n### `platform`[​](https://www.prisma.io/docs/platform/platform-cli/commands#platform \"Direct link to platform\")\n\n#### `auth login`[​](https://www.prisma.io/docs/platform/platform-cli/commands#auth-login \"Direct link to auth-login\")\n\nOpens a browser window that allows you to log into your Prisma Data Platform account or create a new one.\n\n```\nnpx prisma platform auth login --early-access\n```\n\n#### `auth logout`[​](https://www.prisma.io/docs/platform/platform-cli/commands#auth-logout \"Direct link to auth-logout\")\n\nLogs out of your Prisma Data Platform account.\n\n```\nnpx prisma platform auth logout --early-access\n```\n\n#### `auth show`[​](https://www.prisma.io/docs/platform/platform-cli/commands#auth-show \"Direct link to auth-show\")\n\nDisplays information about the currently authenticated user.\n\n```\nnpx prisma platform auth show --early-access\n```\n\n### Workspace Management[​](https://www.prisma.io/docs/platform/platform-cli/commands#workspace-management \"Direct link to Workspace Management\")\n\n### `platform`[​](https://www.prisma.io/docs/platform/platform-cli/commands#platform-1 \"Direct link to platform-1\")\n\n#### `workspace show`[​](https://www.prisma.io/docs/platform/platform-cli/commands#workspace-show \"Direct link to workspace-show\")\n\nLists all workspaces available to your account.\n\n```\nnpx prisma platform workspace show --early-access\n```\n\n### Project Management[​](https://www.prisma.io/docs/platform/platform-cli/commands#project-management \"Direct link to Project Management\")\n\n### `platform`[​](https://www.prisma.io/docs/platform/platform-cli/commands#platform-2 \"Direct link to platform-2\")\n\n#### `project show`[​](https://www.prisma.io/docs/platform/platform-cli/commands#project-show \"Direct link to project-show\")\n\nLists all projects within the specified workspace.\n\n```\nnpx prisma platform project show \\--workspace $INSERT_WORKSPACE_ID \\--early-access\n```\n\n##### Arguments[​](https://www.prisma.io/docs/platform/platform-cli/commands#arguments \"Direct link to Arguments\")\n\n| Argument | Type | Required | Description |\n| --- | --- | --- | --- |\n| `--workspace` `-w` | `string` | yes | The workspace id.<br><br>**Hint:** You can view your workspace ids with the [`workspace show`](https://www.prisma.io/docs/platform/platform-cli/commands#workspace-show) command. |\n\n#### `project create`[​](https://www.prisma.io/docs/platform/platform-cli/commands#project-create \"Direct link to project-create\")\n\nCreates a new project within the specified workspace.\n\n```\nnpx prisma platform project create \\--workspace $INSERT_WORKSPACE_ID \\--name \"INSERT_PROJECT_NAME\" \\--early-access\n```\n\n##### Arguments[​](https://www.prisma.io/docs/platform/platform-cli/commands#arguments-1 \"Direct link to arguments-1\")\n\n| Argument | Type | Required | Description |\n| --- | --- | --- | --- |\n| `--workspace` `-w` | `string` | yes | The workspace `id`.<br><br>**Hint:** You can view your workspace ids with the [`workspace show`](https://www.prisma.io/docs/platform/platform-cli/commands#workspace-show) command. |\n| `--name` `-n` | `string` | no  | The display name for the project.<br><br>If omitted, a default project name will be generated for you. |\n\n#### `project delete`[​](https://www.prisma.io/docs/platform/platform-cli/commands#project-delete \"Direct link to project-delete\")\n\nDeletes the specified project.\n\n```\nnpx prisma platform project delete \\--project $INSERT_PROJECT_ID \\--early-access\n```\n\n##### Arguments[​](https://www.prisma.io/docs/platform/platform-cli/commands#arguments-2 \"Direct link to arguments-2\")\n\n| Argument | Type | Required | Description |\n| --- | --- | --- | --- |\n| `--project` `-p` | `string` | yes | The project `id`.<br><br>**Hint:** You can view your project ids with the [`project show`](https://www.prisma.io/docs/platform/platform-cli/commands#project-show) command. |\n\n### Environment Management[​](https://www.prisma.io/docs/platform/platform-cli/commands#environment-management \"Direct link to Environment Management\")\n\n### `platform`[​](https://www.prisma.io/docs/platform/platform-cli/commands#platform-3 \"Direct link to platform-3\")\n\n#### `environment show`[​](https://www.prisma.io/docs/platform/platform-cli/commands#environment-show \"Direct link to environment-show\")\n\nLists all environments within the specified project.\n\n```\nnpx prisma platform environment show \\--project $INSERT_PROJECT_ID \\--early-access\n```\n\n##### Arguments[​](https://www.prisma.io/docs/platform/platform-cli/commands#arguments-3 \"Direct link to Arguments\")\n\n| Argument | Type | Required | Description |\n| --- | --- | --- | --- |\n| `--project` `-p` | `string` | yes | The project `id`.<br><br>**Hint:** You can view your project ids with the [`project show`](https://www.prisma.io/docs/platform/platform-cli/commands#project-show) command. |\n\n#### `environment create`[​](https://www.prisma.io/docs/platform/platform-cli/commands#environment-create \"Direct link to environment-create\")\n\nCreates a new environment within the specified project.\n\n```\nnpx prisma platform environment create \\--project $INSERT_PROJECT_ID \\--name $INSERT_ENVIRONMENT_NAME \\--early-access\n```\n\n##### Arguments[​](https://www.prisma.io/docs/platform/platform-cli/commands#arguments-4 \"Direct link to arguments-4\")\n\n| Argument | Type | Required | Description |\n| --- | --- | --- | --- |\n| `--project` `-p` | `string` | yes | The project `id`.<br><br>**Hint:** You can view your project ids with the [`project show`](https://www.prisma.io/docs/platform/platform-cli/commands#project-show) command. |\n| `--name` `-n` | `string` | no  | The display name for the environment.<br><br>If omitted, a default environment name will be generated for you. |\n\n#### `environment delete`[​](https://www.prisma.io/docs/platform/platform-cli/commands#environment-delete \"Direct link to environment-delete\")\n\nDeletes the specified environment.\n\n```\nnpx prisma platform environment delete \\--environment $INSERT_ENVIRONMENT_ID \\--early-access\n```\n\n##### Arguments[​](https://www.prisma.io/docs/platform/platform-cli/commands#arguments-5 \"Direct link to arguments-5\")\n\n| Argument | Type | Required | Description |\n| --- | --- | --- | --- |\n| `--environment` `-e` | `string` | yes | The environment `id`.<br><br>**Hint:** You can view your environment ids with the [`environment show`](https://www.prisma.io/docs/platform/platform-cli/commands#environment-show) command. |\n\n### API Key Management[​](https://www.prisma.io/docs/platform/platform-cli/commands#api-key-management \"Direct link to API Key Management\")\n\n### `platform`[​](https://www.prisma.io/docs/platform/platform-cli/commands#platform-4 \"Direct link to platform-4\")\n\n#### `apikey show`[​](https://www.prisma.io/docs/platform/platform-cli/commands#apikey-show \"Direct link to apikey-show\")\n\nLists all API keys for the specified environment.\n\n```\nnpx prisma platform apikey show \\--environment $INSERT_ENVIRONMENT_ID \\--early-access\n```\n\n##### Arguments[​](https://www.prisma.io/docs/platform/platform-cli/commands#arguments-6 \"Direct link to Arguments\")\n\n| Argument | Type | Required | Description |\n| --- | --- | --- | --- |\n| `--environment` `-e` | `string` | yes | The environment `id`.<br><br>**Hint:** You can view your environment ids with the [`environment show`](https://www.prisma.io/docs/platform/platform-cli/commands#environment-show) command. |\n\n#### `apikey create`[​](https://www.prisma.io/docs/platform/platform-cli/commands#apikey-create \"Direct link to apikey-create\")\n\nCreates a new API key for the specified project.\n\n```\nnpx prisma platform apikey create \\--environment $INSERT_ENVIRONMENT_ID \\--name $INSERT_API_KEY_NAME \\--early-access\n```\n\n##### Arguments[​](https://www.prisma.io/docs/platform/platform-cli/commands#arguments-7 \"Direct link to arguments-7\")\n\n| Argument | Type | Required | Description |\n| --- | --- | --- | --- |\n| `--environment` `-e` | `string` | yes | The environment `id`.<br><br>**Hint:** You can view your environment ids with the [`environment show`](https://www.prisma.io/docs/platform/platform-cli/commands#environment-show) command. |\n| `--name` `-n` | `string` | no  | The display name for the API key.<br><br>If omitted, a default API key name will be generated for you. |\n\n#### `apikey delete`[​](https://www.prisma.io/docs/platform/platform-cli/commands#apikey-delete \"Direct link to apikey-delete\")\n\nDeletes the specified API Key.\n\n```\nnpx prisma platform apikey delete \\--apikey $INSERT_API_KEY_ID \\--early-access\n```\n\n##### Arguments[​](https://www.prisma.io/docs/platform/platform-cli/commands#arguments-8 \"Direct link to arguments-8\")\n\n| Argument | Type | Required | Description |\n| --- | --- | --- | --- |\n| `--apikey` | `string` | yes | The API key `id`.<br><br>**Hint**: You can view your API key ids with the [`apikey show`](https://www.prisma.io/docs/platform/platform-cli/commands#apikey-show) command. |\n\n### Prisma Accelerate[​](https://www.prisma.io/docs/platform/platform-cli/commands#prisma-accelerate \"Direct link to Prisma Accelerate\")\n\n### `platform`[​](https://www.prisma.io/docs/platform/platform-cli/commands#platform-5 \"Direct link to platform-5\")\n\n#### `accelerate enable`[​](https://www.prisma.io/docs/platform/platform-cli/commands#accelerate-enable \"Direct link to accelerate-enable\")\n\nEnables Prisma Accelerate for the specified environment.\n\n```\nnpx prisma platform accelerate enable \\--environment $INSERT_ENVIRONMENT_ID \\--url \"postgresql://username:password@host:port/database\" \\--region $INSERT_CONNECTION_POOL_REGION \\--apikey true \\--early-access\n```\n\n##### Arguments[​](https://www.prisma.io/docs/platform/platform-cli/commands#arguments-9 \"Direct link to arguments-9\")\n\n| Argument | Type | Required | Description |\n| --- | --- | --- | --- |\n| `--environment` `-e` | `string` | yes | The environment `id`.<br><br>**Hint:** You can view your environment ids with the [`environment show`](https://www.prisma.io/docs/platform/platform-cli/commands#environment-show) command. |\n| `--url` | `string` | yes | Your database connection string. |\n| `--region` | `string` | no  | The region for Prisma Accelerate’s managed connection pool.<br><br>View the list of available regions [here](https://www.prisma.io/docs/accelerate/faq#what-regions-is-accelerates-connection-pool-available-in).<br><br>**Hint**: Select the region _nearest_ your database for optimal latency. |\n| `--apikey` | `boolean` | no  | If yes, a new API key will be generated for the associated environment. |\n\n#### `accelerate disable`[​](https://www.prisma.io/docs/platform/platform-cli/commands#accelerate-disable \"Direct link to accelerate-disable\")\n\nDisables Prisma Accelerate for the specified environment.\n\n```\nnpx prisma platform accelerate disable \\--environment $INSERT_ENVIRONMENT_ID \\--early-access\n```\n\n##### Arguments[​](https://www.prisma.io/docs/platform/platform-cli/commands#arguments-10 \"Direct link to arguments-10\")\n\n| Argument | Type | Required | Description |\n| --- | --- | --- | --- |\n| `--environment` `-e` | `string` | yes | The environment `id`.<br><br>**Hint:** You can view your environment ids with the [`environment show`](https://www.prisma.io/docs/platform/platform-cli/commands#environment-show) command. |\n\n### Prisma Pulse[​](https://www.prisma.io/docs/platform/platform-cli/commands#prisma-pulse \"Direct link to Prisma Pulse\")\n\n### `platform`[​](https://www.prisma.io/docs/platform/platform-cli/commands#platform-6 \"Direct link to platform-6\")\n\n#### `pulse enable`[​](https://www.prisma.io/docs/platform/platform-cli/commands#pulse-enable \"Direct link to pulse-enable\")\n\nEnables Prisma Pulse for the specified environment.\n\n```\nnpx prisma platform pulse enable \\--environment $INSERT_ENVIRONMENT_ID \\--url \"postgresql://username:password@host:port/database\" \\--region $INSERT_REGION \\--apikey true \\--early-access\n```\n\n##### Arguments[​](https://www.prisma.io/docs/platform/platform-cli/commands#arguments-11 \"Direct link to arguments-11\")\n\n| Argument | Type | Required | Description |\n| --- | --- | --- | --- |\n| `--environment` `-e` | `string` | yes | The environment `id`.<br><br>**Hint:** You can view your environment ids with the [`environment show`](https://www.prisma.io/docs/platform/platform-cli/commands#environment-show) command. |\n| `--url` | `string` | yes | Your database connection string. |\n| `--region` | `string` | no  | The region for Prisma Pulse. |\n| `--apikey` | `boolean` | no  | If yes, a new API key will be generated for the associated environment. |\n\n#### `pulse disable`[​](https://www.prisma.io/docs/platform/platform-cli/commands#pulse-disable \"Direct link to pulse-disable\")\n\nDisables Prisma Pulse for the specified environment.\n\n```\nnpx prisma platform pulse disable \\--environment $INSERT_ENVIRONMENT_ID \\--early-access\n```\n\n##### Arguments[​](https://www.prisma.io/docs/platform/platform-cli/commands#arguments-12 \"Direct link to arguments-12\")\n\n| Argument | Type | Required | Description |\n| --- | --- | --- | --- |\n| `--environment` `-e` | `string` | yes | The environment `id`.<br><br>**Hint:** You can view your environment ids with the [`environment show`](https://www.prisma.io/docs/platform/platform-cli/commands#environment-show) command. |\n\n## Help[​](https://www.prisma.io/docs/platform/platform-cli/commands#help \"Direct link to Help\")\n\nHave a question? Let us know, we’re here to help. Reach out to us on [Discord](https://pris.ly/discord).",
    "title": "Platform CLI: Commands | Prisma Documentation",
    "description": "This document describes the Prisma Data Platform's integrated Prisma CLI commands, arguments, and options.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-schema",
    "markdown": "# Prisma schema | Prisma Documentation\n\n## In this section[​](https://www.prisma.io/docs/orm/prisma-schema#in-this-section \"Direct link to In this section\")\n\n[\n\n## Overview\n\n](https://www.prisma.io/docs/orm/prisma-schema/overview)\n\n[\n\n## Data model\n\n](https://www.prisma.io/docs/orm/prisma-schema/data-model)\n\n[\n\n## Introspection\n\n](https://www.prisma.io/docs/orm/prisma-schema/introspection)\n\n[\n\n## PostgreSQL extensions\n\n](https://www.prisma.io/docs/orm/prisma-schema/postgresql-extensions)",
    "title": "Prisma schema | Prisma Documentation",
    "description": "Learn everything you need to know about the Prisma schema.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/tools/prisma-studio",
    "markdown": "# Prisma Studio | Prisma Documentation\n\nPrisma Studio is a visual editor for the data in your database. Note that Prisma Studio is not open source but you can still create issues in the [`prisma/studio`](https://github.com/prisma/studio) repo.\n\nRun `npx prisma studio` in your terminal.\n\n## Models (tables or collections)[​](https://www.prisma.io/docs/orm/tools/prisma-studio#models-tables-or-collections \"Direct link to Models (tables or collections)\")\n\nWhen you first open Prisma Studio, you see a list of all models defined in your Prisma schema file.\n\ninfo\n\nThe term **model** refers to the data model definitions that you add to the Prisma schema file. Depending on the database that you use, a model definition, such as `model User`, refers to a **table** in a relational database (PostgreSQL, MySQL, SQL Server, SQLite, CockroachDB) or a **collection** in MongoDB.\n\nFor more information, see [Defining models](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-models).\n\nYou can select a model and its data opens in a new tab.\n\n![Prisma Studio - Models view](https://www.prisma.io/docs/assets/images/01-models-view-0d645052848ae1fd491dbbfb4cdd3b51.png)\n\n### Open and close models[​](https://www.prisma.io/docs/orm/tools/prisma-studio#open-and-close-models \"Direct link to Open and close models\")\n\nTo open another model, click the **+** button.\n\nTo close a model, click the the **x** button in the model tab.\n\n![Prisma Studio - Open and close models](https://www.prisma.io/docs/assets/images/02-open-close-models-871ac0d74792848d4fa61278d4fc8186.png)\n\n### Icons of data types in models[​](https://www.prisma.io/docs/orm/tools/prisma-studio#icons-of-data-types-in-models \"Direct link to Icons of data types in models\")\n\nThe data type for each field is indicated with an icon in the header.\n\nThe table below lists all data types and their identifying icon.\n\n| Field data type | Description |\n| --- | --- |\n|     | Text |\n|     | Integer |\n|     | Date-time |\n|     | Boolean |\n|     | Pre-defined list of values (`enum` data type) |\n|     | List of related records from another model |\n|     | The `{}` symbol can refer to one of the two types of fields.<br><br>• Relation field  <br>• JSON field |\n\n### Keyboard shortcuts in models[​](https://www.prisma.io/docs/orm/tools/prisma-studio#keyboard-shortcuts-in-models \"Direct link to Keyboard shortcuts in models\")\n\nWhen you open a model, a number of keyboard shortcuts are available to browse and manipulate the data in the model.\n\ninfo\n\n**Note**\n\nWith Prisma Studio open, you can open the keyboard shortcuts modal by pressing Cmd ⌘+/ on macOS or Ctrl+/ on Windows.\n\n![Prisma Studio - Keyboard shortcuts](https://www.prisma.io/docs/assets/images/03-model-view-keyboard-shortcuts-cf3c1a80d976056949b574738cd5b13a.png)\n\n## Edit data[​](https://www.prisma.io/docs/orm/tools/prisma-studio#edit-data \"Direct link to Edit data\")\n\nIn the model view, you can edit data directly in the model cells. You can copy and paste values in cells. You can add new records as well as delete existing records.\n\nYou must confirm every edit operation (add, edit, or delete). You confirm added and edited records with the **Save change** button. When you select records and click **Delete records**, you confirm the deletion in a dialog box.\n\nYou can accumulate multiple added records and edited cells, which you can then finalize with the **Save changes** button.\n\nYou can select multiple records and delete them at once with the **Delete records** button. When you delete multiple records, the operation completes immediately (after you confirm it).\n\nIn addition, if you have any accumulated added or edited records and then decide to delete records, the deletion also force-saves the accumulated edits.\n\nYou can discard any accumulated changes with the **Discard changes** button.\n\n### Copy and paste[​](https://www.prisma.io/docs/orm/tools/prisma-studio#copy-and-paste \"Direct link to Copy and paste\")\n\nYou can copy the value of any table cell using:\n\n*   Cmd ⌘ + C   on macOS\n*   Ctrl + C     on Windows\n\nTo paste in another cell, first double-click the cell to enter edit mode, and then use:\n\n*   Cmd ⌘ + V   on macOS\n*   Ctrl + V     on Windows\n\n### Add a record[​](https://www.prisma.io/docs/orm/tools/prisma-studio#add-a-record \"Direct link to Add a record\")\n\n1.  In the model view, click **Add record**.\n    \n2.  Based on the data allowed in each field, type the data for the record.\n    \n    | Field data type | Description |\n    | --- | --- |\n    |     | Text |\n    |     | Integer<br><br>If such a field has `autoincrement()` pre-filled, do not edit the cell and do not add a number manually. |\n    |     | Date-time<br><br>Date-time fields contain a long string of numbers, letters, and others. As a best practice, copy the value of another date-time cell and modify it as necessary before pasting in the field. |\n    |     | Boolean<br><br>Select `true` or `false`. |\n    |     | Pre-defined list<br><br>Double-click a cell in the field and select one of the pre-defined options. |\n    |     | List of related records from another model<br><br>It typically refers to a list of records that exist in another model in the database. If you are adding a new record and records from the related model do not yet exist, you do not need to enter anything in the current model. |\n    |     | The `{}` symbol can refer to one of the two types of fields.<br><br>• Relation field  <br>• JSON field<br><br>**Relation with a model defined separately in the database**<br><br>Typically, you need to select the same value as any of the previous records  <br>Click the name of the model to see the list of values which you can then select for the related field.<br><br>**JSON field**<br><br>Double-click the field to edit the JSON data. As a best practice, validate the edited JSON data in a validator and paste it back in the cell. |\n    \n3.  (Optional) If you are unhappy with your changes, click **Discard changes** and start over.\n    \n4.  Click **Save 1 change**.\n    \n\n### Edit a record[​](https://www.prisma.io/docs/orm/tools/prisma-studio#edit-a-record \"Direct link to Edit a record\")\n\n1.  Double-click a cell with existing data to edit.\n2.  (Optional) If you are unhappy with your changes, click **Discard changes** and start over.\n3.  Click **Save 1 change**.\n\n### Delete a record[​](https://www.prisma.io/docs/orm/tools/prisma-studio#delete-a-record \"Direct link to Delete a record\")\n\n1.  From the left column, select the check box for the record you want to delete.\n2.  Click **Delete 1 record**.\n3.  Click **Delete** in the confirmation dialog.\n\n### Edit multiple records at once[​](https://www.prisma.io/docs/orm/tools/prisma-studio#edit-multiple-records-at-once \"Direct link to Edit multiple records at once\")\n\nYou can add multiple records, edit multiple cells and, thus, accumulate multiple edits.\n\nIn the end, click **Save changes** to finalize them.\n\nwarning\n\n**Warning**\n\nDeleting a record is a separate operation that cannot be accumulated. If you delete a record while having unsaved edits, the delete operation first force-saves the unsaved edits and then completes.\n\n![Prisma Studio - Save multiple data edits](https://www.prisma.io/docs/assets/images/04-save-multiple-changes-6e28e7ffbfa4552d64862559d0fa87e9.png)\n\n## Filters[​](https://www.prisma.io/docs/orm/tools/prisma-studio#filters \"Direct link to Filters\")\n\n### Filter data[​](https://www.prisma.io/docs/orm/tools/prisma-studio#filter-data \"Direct link to Filter data\")\n\nUse the **Filters** menu to filter data in the model by adding conditions.\n\nIn the **Filters** menu, the first condition that you add is the `where` clause.\n\nWhen you add multiple conditions, Prisma Studio filters the results so that all conditions apply in combination. Each new condition indicates this with the `and` operator, which appears in front.\n\n**Steps**\n\n1.  Click **Filters** to open the **Filters** menu.\n    \n    info\n    \n    **Note**  \n    Click **Filters** again if you want to hide the menu.\n    \n2.  Click **Add a new filter**.\n    \n3.  Configure the condition.\n    \n    1.  Select the field by which you want to filter.\n    2.  Select a comparison operator.\n        *   **equals**\n        *   **in**\n        *   **notin**\n        *   **lt**\n        *   **lte**\n        *   **gt**\n        *   **gte**\n        *   **not**\n    3.  Type the value you want to use for the condition.  \n        **Step result**: **Prisma Studio** updates the data in the model immediately, based on the condition.\n4.  To add a new filter, click **Add a new filter** and repeat the steps above.\n    \n5.  To remove a filter, click the **x** button on the right.\n    \n    ![Prisma Studio - add and remove filters](https://www.prisma.io/docs/assets/images/05-add-remove-filters-cd82f0d5197d01244ce09f115cd247eb.png)\n6.  To remove all filters, click **Clear all**.\n    \n\n**Result**\n\n*   The data in the model is filtered based on the combination of all conditions you add.\n*   In the **Filters** menu, the default value of **None** changes to display the number of filters you add.\n\n### Show and hide fields[​](https://www.prisma.io/docs/orm/tools/prisma-studio#show-and-hide-fields \"Direct link to Show and hide fields\")\n\nYou can select which fields to view or hide by using the **Fields** menu.\n\ninfo\n\n**What is a field?**  \n\nA **field** is a property of a model which you add in the data model definitions in the Prisma schema file. Depending on the database that you use, a field, such as the `title` field in `model User { title String }`, refers to a **column** in a relational database (PostgreSQL, MySQL, SQL Server, SQLite, CockroachDB) or a **document field** in MongoDB.  \nFor more information, see [Defining fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-fields).\n\n**Steps**\n\n1.  Click the **Fields** menu.\n2.  Select only the fields you want to see and deselect any fields you want to hide. ![Prisma Studio - show and hide fields](https://www.prisma.io/docs/assets/images/06-show-hide-fields-9a7acc7c9199d941005ba91e12950167.png)\n\n**Result**\n\nThe model is immediately filtered to hide the data from any fields you have deselected.\n\nAlso, the **Fields** menu shows the number of fields that are currently selected.\n\n### Show and hide records[​](https://www.prisma.io/docs/orm/tools/prisma-studio#show-and-hide-records \"Direct link to Show and hide records\")\n\nYou can also select to show or skip a specific number of records in the model view.\n\ninfo\n\n**What is a record?**  \n\nA **record** refers to a **row of data in a table** in a relational database (PostgreSQL, MySQL, SQL Server, SQLite, CockroachDB) or a **document** in MongoDB.\n\n**Steps**\n\n1.  Click the **Showing** menu.\n2.  In the **Take** box, specify the maximum number of records that you want the model view to show.\n3.  In the **Skip** box, specify how many of the first records you want to hide. ![Prisma Studio - Show and hide records](https://www.prisma.io/docs/assets/images/07-show-hide-records-80641d3c28949c3f85eb9718f293598b.png)\n\n**Result**\n\nThe model is immediately filtered to show or hide records based on your selection.\n\nThe **Showing** menu indicates how many records are shown out of how many available records are in the model.\n\n## Sort data[​](https://www.prisma.io/docs/orm/tools/prisma-studio#sort-data \"Direct link to Sort data\")\n\nClick a field title to sort by the field data.\n\nThe first click sorts the data in ascending order, the second - in descending order.\n\n![Prisma Studio - Sort data](https://www.prisma.io/docs/assets/images/08-model-sort-87dfdc2d0d4d7aaa265c90f80f503298.png)\n\n## Troubleshooting[​](https://www.prisma.io/docs/orm/tools/prisma-studio#troubleshooting \"Direct link to Troubleshooting\")\n\n### Terminal: Failed to run script / Error in Prisma Client request[​](https://www.prisma.io/docs/orm/tools/prisma-studio#terminal-failed-to-run-script--error-in-prisma-client-request \"Direct link to Terminal: Failed to run script / Error in Prisma Client request\")\n\nCaching issues may cause Prisma Studio to use an older version of the query engine. You may see the following error:\n\n```\nError in request:  PrismaClientKnownRequestError: Failed to validate the query Error occurred during query validation & transformation\n```\n\nTo resolve, delete the following folders:\n\n*   `~/.cache/prisma` on macOS and Linux\n*   `%AppData%/Prisma/Studio` on Windows",
    "title": "Prisma Studio | Prisma Documentation",
    "description": "Prisma Studio is a visual database editor.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/tools/prisma-cli",
    "markdown": "# Prisma CLI | Prisma Documentation\n\nThe Prisma command line interface (CLI) is the primary way to interact with your Prisma project from the command line. It can initialize new project assets, generate Prisma Client, and analyze existing database structures through introspection to automatically create your application models.\n\n## Command reference[​](https://www.prisma.io/docs/orm/tools/prisma-cli#command-reference \"Direct link to Command reference\")\n\nSee [Prisma CLI command reference](https://www.prisma.io/docs/orm/reference/prisma-cli-reference) for a complete list of commands.\n\n## Installation[​](https://www.prisma.io/docs/orm/tools/prisma-cli#installation \"Direct link to Installation\")\n\nThe Prisma CLI is typically installed locally as a **development dependency**, that's why the `--save-dev` (npm) and `--dev` (Yarn) options are used in the commands below.\n\ninfo\n\nWe **recommend that you install the Prisma CLI locally** in your project's `package.json` to avoid version conflicts that can happen with a global installation.\n\n### npm[​](https://www.prisma.io/docs/orm/tools/prisma-cli#npm \"Direct link to npm\")\n\nInstall with [npm](https://www.npmjs.com/):\n\n```\nnpm install prisma --save-dev\n```\n\n### Yarn[​](https://www.prisma.io/docs/orm/tools/prisma-cli#yarn \"Direct link to Yarn\")\n\nInstall with [yarn](https://yarnpkg.com/):\n\n### pnpm[​](https://www.prisma.io/docs/orm/tools/prisma-cli#pnpm \"Direct link to pnpm\")\n\nInstall with [pnpm](https://pnpm.io/):\n\n```\npnpm install prisma --save-dev\n```\n\n### Bun[​](https://www.prisma.io/docs/orm/tools/prisma-cli#bun \"Direct link to Bun\")\n\nInstall with [Bun](https://bun.sh/):\n\nGlobal installation (Not recommended)\n\n*   **npm**\n\nInstall with npm:\n\n*   **Yarn**\n\nInstall with Yarn:\n\n*   **pnpm**\n\nInstall with pnpm:\n\n```\npnpm install prisma --global\n```\n\n*   **Bun**\n\nInstall with [Bun](https://bun.sh/):\n\n## Usage[​](https://www.prisma.io/docs/orm/tools/prisma-cli#usage \"Direct link to Usage\")\n\nIf you installed Prisma as a development dependency, you need to prefix the `prisma` command with your package runner.\n\n### npm[​](https://www.prisma.io/docs/orm/tools/prisma-cli#npm-1 \"Direct link to npm\")\n\n### Yarn[​](https://www.prisma.io/docs/orm/tools/prisma-cli#yarn-1 \"Direct link to Yarn\")\n\n### pnpm[​](https://www.prisma.io/docs/orm/tools/prisma-cli#pnpm-1 \"Direct link to pnpm\")\n\n### Bun[​](https://www.prisma.io/docs/orm/tools/prisma-cli#bun-1 \"Direct link to Bun\")\n\n## Synopsis[​](https://www.prisma.io/docs/orm/tools/prisma-cli#synopsis \"Direct link to Synopsis\")\n\nThe `prisma` command can be called from command line once installed. When called without arguments, it will display its command usage and help document:\n\nYou can get additional help on any of the `prisma` commands by adding the `--help` flag after the command.\n\n## Exit codes[​](https://www.prisma.io/docs/orm/tools/prisma-cli#exit-codes \"Direct link to Exit codes\")\n\nAll `prisma` CLI commands return the following codes when they exit:\n\n*   exit code 0 when a command runs successfully\n*   exit code 1 when a command errors\n*   exit code 130 when the CLI receives a signal interrupt (SIGINT) message or if the user cancels a prompt. This exit code is available in Prisma ORM versions 4.3.0 and later.\n\n## Telemetry[​](https://www.prisma.io/docs/orm/tools/prisma-cli#telemetry \"Direct link to Telemetry\")\n\nThe term **telemetry** refers to the collection of certain usage data to help _improve the quality of a piece of software_. Prisma uses telemetry in two contexts:\n\n*   when it collects CLI usage data\n*   when it submits CLI error reports\n\nThis page describes the overall telemetry approach for Prisma, what kind of data is collected and how to opt-out of data collection.\n\n### Why does Prisma collect metrics?[​](https://www.prisma.io/docs/orm/tools/prisma-cli#why-does-prisma-collect-metrics \"Direct link to Why does Prisma collect metrics?\")\n\nTelemetry helps us better understand _how many users_ are using our products and _how often_ they are using our products. Unlike many telemetry services, our telemetry implementation is intentionally limited in scope and is actually useful for the developer:\n\n*   **Limited in scope**: We use telemetry to answer one question: how many monthly active developers are using Prisma CLI?\n*   **Provides value**: Our telemetry service also checks for version updates and offers security notices.\n\n### When is data collected?[​](https://www.prisma.io/docs/orm/tools/prisma-cli#when-is-data-collected \"Direct link to When is data collected?\")\n\nData is collected in two scenarios that are described below.\n\n#### Usage data[​](https://www.prisma.io/docs/orm/tools/prisma-cli#usage-data \"Direct link to Usage data\")\n\nInvocations of the `prisma` CLI and general usage of Studio results in data being sent to the telemetry server at [https://checkpoint.prisma.io](https://checkpoint.prisma.io/). Note that:\n\n*   The data does **not** include your schema or the data in your database\n*   Prisma only sends information after you execute a CLI command\n\nHere is an overview of the data that's being submitted:\n\n| Field | Attributes | Description |\n| --- | --- | --- |\n| `product` | _string_ | Name of the product (e.g. `prisma`) |\n| `version` | _string_ | Currently installed version of the product (e.g. `1.0.0-rc0`) |\n| `arch` | _string_ | Client's operating system architecture (e.g. `amd64`). |\n| `os` | _string_ | Client's operating system (e.g. `darwin`). |\n| `node_version` | _string_ | Client's node version (e.g. `v12.12.0`). |\n| `signature` | _string_ | Random, non-identifiable signature UUID (e.g. `91b014df3-9dda-4a27-a8a7-15474fd899f8`) |\n| `user_agent` | _string_ | User agent of the checkpoint client (e.g. `prisma/js-checkpoint`) |\n| `timestamp` | _string_ | When the request was made in RFC3339 format (e.g. `2019-12-12T17:45:56Z`) |\n\nYou can opt-out of this behavior by setting the `CHECKPOINT_DISABLE` environment variable to `1`, e.g.:\n\n```\nexport CHECKPOINT_DISABLE=1\n```\n\n#### Error reporting[​](https://www.prisma.io/docs/orm/tools/prisma-cli#error-reporting \"Direct link to Error reporting\")\n\nPrisma potentially collects error data when there is a crash in the CLI.\n\nBefore an error report is submitted, there will _always_ be a prompt asking you to confirm or deny the submission of the error report! Error reports are never submitted without your explicit consent!\n\n### How to opt-out of data collection?[​](https://www.prisma.io/docs/orm/tools/prisma-cli#how-to-opt-out-of-data-collection \"Direct link to How to opt-out of data collection?\")\n\n#### Usage data[​](https://www.prisma.io/docs/orm/tools/prisma-cli#usage-data-1 \"Direct link to Usage data\")\n\nYou can opt-out of usage data collection by setting the `CHECKPOINT_DISABLE` environment variable to `1`, e.g.:\n\n```\nexport CHECKPOINT_DISABLE=1\n```\n\n#### Error reporting[​](https://www.prisma.io/docs/orm/tools/prisma-cli#error-reporting-1 \"Direct link to Error reporting\")\n\nYou can opt-out of data collection by responding to the interactive prompt with _no_.",
    "title": "Prisma CLI | Prisma Documentation",
    "description": "The Prisma command line interface (CLI) is the primary way to interact with your Prisma project from the command line.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-client",
    "markdown": "# Prisma Client | Prisma Documentation\n\n[\n\n## Debugging & troubleshooting\n\n](https://www.prisma.io/docs/orm/prisma-client/debugging-and-troubleshooting)",
    "title": "Prisma Client | Prisma Documentation",
    "description": "Prisma Client is an auto-generated, type-safe query builder generated based on the models and attributes of your Prisma schema.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-migrate",
    "markdown": "# Prisma Migrate | Database, Schema, SQL Migration Tool\n\n[\n\n## Understanding Prisma Migrate\n\n](https://www.prisma.io/docs/orm/prisma-migrate/understanding-prisma-migrate)",
    "title": "Prisma Migrate | Database, Schema, SQL Migration Tool | Prisma Documentation",
    "description": "Prisma Migrate is a database migration tool available via the Prisma CLI that integrates with Prisma schema for data modeling.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/accelerate/api-reference",
    "markdown": "# Accelerate: API Reference | Prisma Documentation\n\nThe Accelerate API reference documentation is based on the following schema:\n\n```\nmodel User {  id    Int     @id @default(autoincrement())  name  String?  email String  @unique}\n```\n\nAll example are based on the `User` model.\n\n## `cacheStrategy`[​](https://www.prisma.io/docs/accelerate/api-reference#cachestrategy \"Direct link to cachestrategy\")\n\nWith the Accelerate extension for Prisma Client, you can use the `cacheStrategy` parameter for model queries and use the [`ttl`](https://www.prisma.io/docs/accelerate/caching#time-to-live-ttl) and [`swr`](https://www.prisma.io/docs/accelerate/caching#stale-while-revalidate-swr) parameters to define a cache strategy for Accelerate. The Accelerate extension requires that you install Prisma Client version `4.10.0`.\n\n### Options[​](https://www.prisma.io/docs/accelerate/api-reference#options \"Direct link to Options\")\n\nThe `cacheStrategy` parameter takes an option with the following keys:\n\n| Option | Example | Type | Required | Description |\n| --- | --- | --- | --- | --- |\n| `swr` | `60` | `Int` | No  | The stale-while-revalidate time in seconds. |\n| `ttl` | `60` | `Int` | No  | The time-to-live time in seconds. |\n\n### Examples[​](https://www.prisma.io/docs/accelerate/api-reference#examples \"Direct link to Examples\")\n\nAdd a caching strategy to a query that defines a 60-second stale-while-revalidate value and 60-second time-to-live value:\n\n```\nawait prisma.user.findMany({  where: {    email: {      contains: 'alice@prisma.io',    },  },  cacheStrategy: { swr: 60, ttl: 60 },})\n```\n\n### Supported Prisma Client operations[​](https://www.prisma.io/docs/accelerate/api-reference#supported-prisma-client-operations \"Direct link to Supported Prisma Client operations\")\n\nThe following is a list of all read query operations and support `cacheStrategy`:\n\n*   [`findUnique()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findunique)\n*   [`findUniqueOrThrow()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#finduniqueorthrow)\n*   [`findFirst()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findfirst)\n*   [`findFirstOrThrow()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findfirstorthrow)\n*   [`findMany()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findmany)\n*   [`count()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#count)\n*   [`aggregate()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#aggregate)\n*   [`groupBy()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#groupby)\n\ninfo\n\nThe `cacheStrategy` parameter is not supported on any write operations, such as `create()`.\n\n## `withAccelerateInfo`[​](https://www.prisma.io/docs/accelerate/api-reference#withaccelerateinfo \"Direct link to withaccelerateinfo\")\n\nAny query that supports the `cacheStrategy` can append `withAccelerateInfo()` to wrap the response data and include additional information about the Accelerate response.\n\nTo retrieve the status of the response, use:\n\n```\nconst { data, info } = await prisma.user  .count({    cacheStrategy: { ttl: 60, swr: 600 },    where: { myField: 'value' },  })  .withAccelerateInfo()console.dir(info)\n```\n\ninfo\n\nNotice the `info` property of the response object. This is where the request information is stored.\n\n### Return type[​](https://www.prisma.io/docs/accelerate/api-reference#return-type \"Direct link to Return type\")\n\nThe `info` object is of type `AccelerateInfo` and follows the interface below:\n\n```\ninterface AccelerateInfo {  cacheStatus: 'ttl' | 'swr' | 'miss' | 'none'  lastModified: Date  region: string  requestId: string  signature: string}\n```\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `cacheStatus` | `\"ttl\" \\| \"swr\" \\| \"miss\" \\| \"none\"` | The cache status of the response.  <br><br>*   `ttl` indicates a cache hit within the `ttl` duration and no database query was executed<br>*   `swr` indicates a cache hit within the `swr` duration and the data is being refreshed by Accelerate in the background<br>*   `miss` indicates that both `ttl` and `swr` have expired and the database query was executed by the request<br>*   `none` indicates that no cache strategy was specified and the database query was executed by the request |\n| `lastModified` | `Date` | The date the response was last refreshed. |\n| `region` | `String` | The data center region that received the request. |\n| `requestId` | `String` | Unique identifier of the request. Useful for troubleshooting. |\n| `signature` | `String` | The unique signature of the Prisma operation. |\n\n## Errors[​](https://www.prisma.io/docs/accelerate/api-reference#errors \"Direct link to Errors\")\n\nPrisma Accelerate-related errors start with `P6xxx`.\n\nYou can find the full error code reference for Prisma Accelerate [here](https://www.prisma.io/docs/orm/reference/error-reference#prisma-accelerate).",
    "title": "Accelerate: API Reference | Prisma Documentation",
    "description": "API reference documentation for Accelerate.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/reference/prisma-cli-reference",
    "markdown": "# Prisma CLI reference | Prisma Documentation\n\nThis document describes the Prisma CLI commands, arguments, and options.\n\n## Commands[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#commands \"Direct link to Commands\")\n\n### `version` (`-v`)[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#version--v \"Direct link to version--v\")\n\nThe `version` command outputs information about your current `prisma` version, platform, and engine binaries.\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#options \"Direct link to Options\")\n\nThe `version` command recognizes the following options to modify its behavior:\n\n| Option | Required | Description |\n| --- | --- | --- |\n| `--json` | No  | Outputs version information in JSON format. |\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples \"Direct link to Examples\")\n\n##### Output version information[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#output-version-information \"Direct link to Output version information\")\n\n##### Output version information (`-v`)[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#output-version-information--v \"Direct link to output-version-information--v\")\n\n##### Output version information as JSON[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#output-version-information-as-json \"Direct link to Output version information as JSON\")\n\n### `init`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#init \"Direct link to init\")\n\nBootstraps a fresh Prisma ORM project within the current directory.\n\nThe `init` command does not interpret any existing files. Instead, it creates a `prisma` directory containing a bare-bones `schema.prisma` file within your current directory.\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#arguments \"Direct link to Arguments\")\n\n| Argument | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--datasource-provider` | No  | Specifies the value for the `provider` field in the `datasource` block. Options are `sqlite`, `postgresql`, `mysql`, `sqlserver`, `mongodb` and `cockroachdb`. | `postgresql` |\n| `--url` | No  | Define a custom datasource url. |     |\n| `--generator-provider` | No  | Define the generator provider to use. | `prisma-client-js` |\n| `--preview-feature` | No  | Define the [Preview features](https://www.prisma.io/docs/orm/reference/preview-features) to use. To define multiple Preview features, you have to provide the flag multiple times for each Preview feature. [See example](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#run-prisma-init---preview-feature) |     |\n| `--output` | No  | Specifies the [output location for the generated client](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client#using-a-custom-output-path). | `node_modules/.prisma/client` |\n| `--with-model` | No  | Adds a simple `User` model to the initial Prisma schema. Available since version `5.14.0`. |     |\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-1 \"Direct link to Examples\")\n\n##### Run `prisma init`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#run-prisma-init \"Direct link to run-prisma-init\")\n\n##### Run `prisma init --datasource-provider sqlite`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#run-prisma-init---datasource-provider-sqlite \"Direct link to run-prisma-init---datasource-provider-sqlite\")\n\n```\nprisma init --datasource-provider sqlite\n```\n\nThe command output contains helpful information on how to use the generated files and begin using Prisma ORM with your project.\n\n#### Run `prisma init --preview-feature`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#run-prisma-init---preview-feature \"Direct link to run-prisma-init---preview-feature\")\n\n```\nprisma init --preview-feature multiSchema\n```\n\nShow\n\nPrisma schema\n\nresults\n\n```\nprisma init --preview-feature multiSchema --preview-feature metrics\n```\n\nShow\n\nPrisma schema\n\nresults\n\n#### Generated Assets[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#generated-assets \"Direct link to Generated Assets\")\n\n**`prisma/schema.prisma`**\n\nAn initial `schema.prisma` file to define your schema in:\n\n```\n// This is your Prisma schema file,// learn more about it in the docs: https://pris.ly/d/prisma-schemadatasource db {  provider = \"sqlite\"  url      = env(\"DATABASE_URL\")}generator client {  provider = \"prisma-client-js\"}\n```\n\n**`.env`**\n\nA file to define environment variables for your project:\n\n```\n# Environment variables declared in this file are automatically made available to Prisma.# See the documentation for more detail: https://pris.ly/d/prisma-schema#using-environment-variables# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.# See the documentation for all the connection string options: https://pris.ly/d/connection-stringsDATABASE_URL=\"file:./dev.db\"\n```\n\n##### Run `prisma init --url mysql://user:password@localhost:3306/mydb`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#run-prisma-init---url-mysqluserpasswordlocalhost3306mydb \"Direct link to run-prisma-init---url-mysqluserpasswordlocalhost3306mydb\")\n\n```\nprisma init --url mysql://user:password@localhost:3306/mydb\n```\n\nThe command output contains helpful information on how to use the generated files and begin using Prisma with your project.\n\n#### Generated Assets[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#generated-assets-1 \"Direct link to Generated Assets\")\n\n**`prisma/schema.prisma`**\n\nA minimal `schema.prisma` file to define your schema in:\n\n```\n// This is your Prisma schema file,// learn more about it in the docs: https://pris.ly/d/prisma-schemadatasource db {  provider = \"mysql\"  url      = env(\"DATABASE_URL\")}generator client {  provider = \"prisma-client-js\"}\n```\n\n**`.env`**\n\nA file to define environment variables for your project:\n\n```\n# Environment variables declared in this file are automatically made available to Prisma.# See the documentation for more detail: https://pris.ly/d/prisma-schema#using-environment-variables# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.# See the documentation for all the connection string options: https://pris.ly/d/connection-stringsDATABASE_URL=\"mysql://user:password@localhost:3306/mydb\"\n```\n\n### `generate`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#generate \"Direct link to generate\")\n\nThe `generate` command generates assets like Prisma Client based on the [`generator`](https://www.prisma.io/docs/orm/prisma-schema/overview/generators) and [`data model`](https://www.prisma.io/docs/orm/prisma-schema/data-model/models) blocks defined in your `prisma/schema.prisma` file.\n\nThe `generate` command is most often used to generate Prisma Client with the `prisma-client-js` generator. This does three things:\n\n1.  Searches the current directory and parent directories to find the applicable `npm` project. It will create a `package.json` file in the current directory if it cannot find one.\n2.  Installs the `@prisma/client` into the `npm` project if it is not already present.\n3.  Inspects the current directory to find a Prisma Schema to process. It will then generate a customized [Prisma Client](https://github.com/prisma/prisma-client-js) for your project.\n\n#### Prerequisites[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#prerequisites \"Direct link to Prerequisites\")\n\nTo use the `generate` command, you must add a generator definition in your `schema.prisma` file. The `prisma-client-js` generator, used to generate Prisma Client, can be added by including the following in your `schema.prisma` file:\n\n```\ngenerator client {  provider = \"prisma-client-js\"}\n```\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#options-1 \"Direct link to Options\")\n\n| Option | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--data-proxy` | No  | The `generate` command will generate Prisma Client for use with [Prisma Accelerate](https://www.prisma.io/docs/accelerate) prior to Prisma 5.0.0. Mutually exclusive with `--accelerate` and `--no-engine`. |     |\n| `--accelerate` | No  | The `generate` command will generate Prisma Client for use with [Prisma Accelerate](https://www.prisma.io/docs/accelerate). Mutually exclusive with `--data-proxy` and `--no-engine`. Available in Prisma 5.1.0 and later. |     |\n| `--no-engine` | No  | The `generate` command will generate Prisma Client without an accompanied engine for use with [Prisma Accelerate](https://www.prisma.io/docs/accelerate). Mutually exclusive with `--data-proxy` and `--accelerate`. Available in Prisma ORM 5.2.0 and later. |     |\n| `--no-hints` | No  | The `generate` command will generate Prisma Client without usage hints being printed to the terminal. Available in Prisma ORM 5.16.0 and later. |     |\n| `--allow-no-models` | No  | The `generate` command will generate Prisma Client without generating any models. |     |\n| `--watch` | No  | The `generate` command will continue to watch the `schema.prisma` file and re-generate Prisma Client on file changes. |     |\n\nwarning\n\n**Deprecation Warning**\n\nAs of Prisma 5.2.0, `--data-proxy` and `--accelerate` are deprecated in favor of `--no-engine` as Prisma Client no longer requires an option to work with Prisma Accelerate. All options are available and work similarly, but we recommend `--no-engine` as it prevents an engine from being downloaded which will greatly impact the size of apps deployed to serverless and edge functions.\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#arguments-1 \"Direct link to Arguments\")\n\n| Argument | Required | Description | Default |     |\n| --- | --- | --- | --- | --- |\n| `--schema` | No  | Specifies the path to the desired `schema.prisma` file to be processed instead of the default path. Both absolute and relative paths are supported. | `./schema.prisma`, `./prisma/schema.prisma` |     |\n| `--generator` | No  | Specifies which generator to use to generate assets. This option may be provided multiple times to include multiple generators. By default, all generators in the target schema will be run. |     |     |\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-2 \"Direct link to Examples\")\n\n##### Generate Prisma Client using the default `schema.prisma` path[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#generate-prisma-client-using-the-default-schemaprisma-path \"Direct link to generate-prisma-client-using-the-default-schemaprisma-path\")\n\n##### Generate Prisma Client using a non-default `schema.prisma` path[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#generate-prisma-client-using-a-non-default-schemaprisma-path \"Direct link to generate-prisma-client-using-a-non-default-schemaprisma-path\")\n\n```\nprisma generate --schema=./alternative/schema.prisma\n```\n\n##### Continue watching the `schema.prisma` file for changes to automatically re-generate Prisma Client[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#continue-watching-the-schemaprisma-file-for-changes-to-automatically-re-generate-prisma-client \"Direct link to continue-watching-the-schemaprisma-file-for-changes-to-automatically-re-generate-prisma-client\")\n\n##### Run the `generate` command with only a specific generator[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#run-the-generate-command-with-only-a-specific-generator \"Direct link to run-the-generate-command-with-only-a-specific-generator\")\n\n```\nprisma generate --generator client\n```\n\n##### Run the `generate` command with multiple specific generators[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#run-the-generate-command-with-multiple-specific-generators \"Direct link to run-the-generate-command-with-multiple-specific-generators\")\n\n```\nprisma generate --generator client --generator zod_schemas\n```\n\n#### Generated Assets[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#generated-assets-2 \"Direct link to Generated Assets\")\n\nThe `prisma-client-js` generator creates a customized client for working with your database within the `./node_modules/.prisma/client` directory by default - you can [customize the output folder](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client#using-a-custom-output-path).\n\n### `introspect`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#introspect \"Direct link to introspect\")\n\nwarning\n\n**Deprecation warning**  \nFrom Prisma ORM 3.0.0 onwards, the `prisma introspect` command is deprecated and replaced with the [`prisma db pull`](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#db-pull) command.\n\n### `validate`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#validate \"Direct link to validate\")\n\nValidates the [Prisma Schema Language](https://www.prisma.io/docs/orm/prisma-schema) of the Prisma schema file.\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#arguments-2 \"Direct link to Arguments\")\n\n| Argument | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--schema` | No  | Specifies the path to the desired `schema.prisma` file to be processed instead of the default path. Both absolute and relative paths are supported. | `./schema.prisma`, `./prisma/schema.prisma` |\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-3 \"Direct link to Examples\")\n\n##### Validate a schema without errors[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#validate-a-schema-without-errors \"Direct link to Validate a schema without errors\")\n\n##### Validate a schema with validation errors[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#validate-a-schema-with-validation-errors \"Direct link to Validate a schema with validation errors\")\n\n### `format`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#format \"Direct link to format\")\n\nFormats the Prisma schema file, which includes validating, formatting, and persisting the schema.\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#arguments-3 \"Direct link to Arguments\")\n\n| Argument | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--schema` | No  | Specifies the path to the desired `schema.prisma` file to be processed instead of the default path. Both absolute and relative paths are supported. | `./schema.prisma`, `./prisma/schema.prisma` |\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-4 \"Direct link to Examples\")\n\n##### Validate a schema without errors[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#validate-a-schema-without-errors-1 \"Direct link to Validate a schema without errors\")\n\n##### Formatting a schema with validation errors[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#formatting-a-schema-with-validation-errors \"Direct link to Formatting a schema with validation errors\")\n\n### `debug`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#debug \"Direct link to debug\")\n\nPrints information for debugging and bug reports.\n\ninfo\n\nThis is available from version 5.6.0 and newer.\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#arguments-4 \"Direct link to Arguments\")\n\n| Argument | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--schema` | No  | Specifies the path to the desired `schema.prisma` file to be processed instead of the default path. Both absolute and relative paths are supported. | `./schema.prisma`, `./prisma/schema.prisma` |\n| `--help` / `--h` | No  | Displays the help message |     |\n\n#### Example[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#example \"Direct link to Example\")\n\nIf you're using an older version of Prisma, you can use this command by running:\n\n## `db`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#db \"Direct link to db\")\n\n### `db pull`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#db-pull \"Direct link to db-pull\")\n\nThe `db pull` command connects to your database and adds Prisma models to your Prisma schema that reflect the current database schema.\n\nwarning\n\n**Warning**: The command will overwrite the current `schema.prisma` file with the new schema. Some manual changes or customization can be lost. Be sure to back up your current `schema.prisma` file (or commit your current state to version control to be able to revert any changes) before running `db pull` if it contains important modifications.\n\ninfo\n\nIntrospection with the `db pull` command on the [MongoDB connector](https://www.prisma.io/docs/orm/overview/databases/mongodb) samples the data instead of reading a schema.\n\n#### Prerequisites[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#prerequisites-1 \"Direct link to Prerequisites\")\n\nBefore using the `db pull` command, you must define a valid [`datasource`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources) within your `schema.prisma` file.\n\nFor example, the following `datasource` defines a SQLite database file within the current directory:\n\n```\ndatasource db {  provider = \"sqlite\"  url      = \"file:my-database.db\"}\n```\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#options-2 \"Direct link to Options\")\n\n| Option | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--force` | No  | Force overwrite of manual changes made to schema. The generated schema will be based on the introspected schema only. |     |\n| `--print` | No  | Prints the created `schema.prisma` to the screen instead of writing it to the filesystem. |     |\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#arguments-5 \"Direct link to Arguments\")\n\n| Argument | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--schema` | No  | Specifies the path to the desired `schema.prisma` file to be processed instead of the default path. Both absolute and relative paths are supported. | `./schema.prisma`, `./prisma/schema.prisma` |\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-5 \"Direct link to Examples\")\n\n##### Analyze the database and write its schema to the `schema.prisma` file[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#analyze-the-database-and-write-its-schema-to-the-schemaprisma-file \"Direct link to analyze-the-database-and-write-its-schema-to-the-schemaprisma-file\")\n\n##### Specify an alternative `schema.prisma` file to read and write to[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#specify-an-alternative-schemaprisma-file-to-read-and-write-to \"Direct link to specify-an-alternative-schemaprisma-file-to-read-and-write-to\")\n\n```\nprisma db pull --schema=./alternative/schema.prisma\n```\n\n##### Display the generated `schema.prisma` file instead of writing it to the filesystem[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#display-the-generated-schemaprisma-file-instead-of-writing-it-to-the-filesystem \"Direct link to display-the-generated-schemaprisma-file-instead-of-writing-it-to-the-filesystem\")\n\n### `db push`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#db-push \"Direct link to db-push\")\n\nThe `db push` command pushes the state of your Prisma schema to the database without using migrations. It creates the database if the database does not exist.\n\nThis command is a good choice when you do not need to version schema changes, such as during prototyping and local development.\n\nSee also:\n\n*   [Conceptual overview of `db push` and when to use it over Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate/workflows/prototyping-your-schema)\n*   [Schema prototyping with `db push`](https://www.prisma.io/docs/orm/prisma-migrate/workflows/prototyping-your-schema)\n\n#### Prerequisites[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#prerequisites-2 \"Direct link to Prerequisites\")\n\nBefore using the `db push` command, you must define a valid [datasource](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources) within your `schema.prisma` file.\n\nFor example, the following `datasource` defines a SQLite database file within the current directory:\n\n```\ndatasource db {  provider = \"sqlite\"  url      = \"file:my-database.db\"}\n```\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#options-3 \"Direct link to Options\")\n\n| Options | Required | Description |\n| --- | --- | --- |\n| `--skip-generate` | No  | Skip generation of artifacts such as Prisma Client |\n| `--force-reset` | No  | Resets the database and then updates the schema - useful if you need to start from scratch due to unexecutable migrations. |\n| `--accept-data-loss` | No  | Ignore data loss warnings. This option is required if as a result of making the schema changes, data may be lost. |\n| `--help` / `--h` | No  | Displays the help message |\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#arguments-6 \"Direct link to Arguments\")\n\n| Argument | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--schema` | No  | Specifies the path to the desired schema.prisma file to be processed instead of the default path. Both absolute and relative paths are supported. | `./schema.prisma`  <br>`./prisma/schema.prisma` |\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-6 \"Direct link to Examples\")\n\nPush the schema:\n\nPush the schema, accepting data loss:\n\n```\nprisma db push --accept-data-loss\n```\n\nPush the schema with a custom schema location:\n\n```\nprisma db push --schema=/tmp/schema.prisma\n```\n\n### `db seed`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#db-seed \"Direct link to db-seed\")\n\n`db seed` changed from Preview to Generally Available (GA) in 3.0.1.\n\nSee [Seeding your database](https://www.prisma.io/docs/orm/prisma-migrate/workflows/seeding)\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#options-4 \"Direct link to Options\")\n\n| Options | Required | Description |\n| --- | --- | --- |\n| `--help` / `--h` | No  | Displays the help message |\n| `--` | No  | Allows the use of custom arguments defined in a seed file |\n\nThe `--` argument/ [delimiter](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html#tag_12_02)/ double-dash is available from version 4.15.0 or later.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-7 \"Direct link to Examples\")\n\n### `db execute`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#db-execute \"Direct link to db-execute\")\n\ninfo\n\nThe `db execute` command is Generally Available in versions 3.13.0 and later. If you're using a version between 3.9.0 and 3.13.0, it is available behind a `--preview-feature` CLI flag.\n\nwarning\n\nThis command is currently not supported on [MongoDB](https://www.prisma.io/docs/orm/overview/databases/mongodb).\n\nThis command applies a SQL script to the database without interacting with the Prisma migrations table. The script takes two inputs:\n\n*   the SQL script, which can be provided either on standard input or in a file\n*   the data source, which can either be the URL of the data source or the path to your Prisma schema file\n\nThe output of the command is connector-specific, and is not meant for returning data, but only to report success or failure.\n\nSee also:\n\n*   [Migration troubleshooting in production](https://www.prisma.io/docs/orm/prisma-migrate/workflows/patching-and-hotfixing#fixing-failed-migrations-with-migrate-diff-and-db-execute)\n\n#### Prerequisites[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#prerequisites-3 \"Direct link to Prerequisites\")\n\nBefore using the `db execute` command, if you do not use the `--url` option you must define a valid [`datasource`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources) within your `schema.prisma` file.\n\nFor example, the following `datasource` defines a SQLite database file within the current directory:\n\n```\ndatasource db {  provider = \"sqlite\"  url      = \"file:my-database.db\"}\n```\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#options-5 \"Direct link to Options\")\n\nOne of the following data source inputs is required:\n\n| Options | Description |\n| --- | --- |\n| `--url` | URL of the data source to run the command on |\n| `--schema` | Path to a Prisma schema file, uses the URL in the `datasource` block |\n\nOne of the following script inputs is required:\n\n| Options | Description |\n| --- | --- |\n| `--stdin` | Use the terminal standard input as the script to be executed |\n| `--file` | Path to a file. The content will be sent as the script to be executed |\n\nOther options:\n\n| Options | Required | Description |\n| --- | --- | --- |\n| `--help` | No  | Displays the help message. |\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-8 \"Direct link to Examples\")\n\n*   Take the content of a SQL file located at `./script.sql` and execute it on the database specified by the URL in the `datasource` block of your `schema.prisma` file:\n    \n    ```\n    prisma db execute --file ./script.sql --schema schema.prisma\n    ```\n    \n*   Take the SQL script from standard input and execute it on the database specified by the data source URL given in the `DATABASE_URL` environment variable:\n    \n    ```\n    echo 'TRUNCATE TABLE dev;' | prisma db execute --stdin --url=\"$DATABASE_URL\"\n    ```\n    \n\n## Prisma Migrate[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#prisma-migrate \"Direct link to Prisma Migrate\")\n\nPrisma Migrate changed from Preview to Generally Available (GA) in 2.19.0.\n\ninfo\n\n**Does not apply for MongoDB**  \nInstead of `migrate dev` and related commands, [`db push`](https://www.prisma.io/docs/orm/prisma-migrate/workflows/prototyping-your-schema) is used for [MongoDB](https://www.prisma.io/docs/orm/overview/databases/mongodb).\n\n### `migrate dev`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#migrate-dev \"Direct link to migrate-dev\")\n\n**For use in development environments only, requires shadow database**\n\nThe `migrate dev` command:\n\n1.  Reruns the existing migration history in the [shadow database](https://www.prisma.io/docs/orm/prisma-migrate/understanding-prisma-migrate/shadow-database) in order to detect schema drift (edited or deleted migration file, or a manual changes to the database schema)\n2.  Applies pending migrations to the shadow database (for example, new migrations created by colleagues)\n3.  Generates a new migration from any changes you made to the Prisma schema before running `migrate dev`\n4.  Applies all unapplied migrations to the development database and updates the `_prisma_migrations` table\n5.  Triggers the generation of artifacts (for example, Prisma Client)\n\nSee also:\n\n*   [Conceptual overview of Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate)\n*   [Developing with Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate)\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#options-6 \"Direct link to Options\")\n\n| Option | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--create-only` | No  | Creates a new migration based on the changes in the schema but does not apply that migration. Run `migrate dev` to apply migration. |     |\n| `--skip-seed` | No  | Skip triggering seed |     |\n| `--skip-generate` | No  | Skip triggering generators (for example, Prisma Client) |     |\n| `--name` / `-n` | No  | Name the migration (e.g. `prisma migrate dev --name added_job_title`) |     |\n| `--help` / `-h` | No  | Displays the help message |     |\n\ninfo\n\nIf a [schema drift](https://www.prisma.io/docs/orm/prisma-migrate/understanding-prisma-migrate/shadow-database#detecting-schema-drift) is detected while running `prisma migrate dev` using `--create-only`, you will be prompted to reset your database.\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#arguments-7 \"Direct link to Arguments\")\n\n| Argument | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--name` | No  | The name of the migration. If no name is provided, the CLI will prompt you. |     |\n| `--schema` | No  | Specifies the path to the desired schema.prisma file to be processed instead of the default path. Both absolute and relative paths are supported. | `./schema.prisma`  <br>`./prisma/schema.prisma` |\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-9 \"Direct link to Examples\")\n\nApply all migrations, then create and apply any new migrations:\n\nApply all migrations and create a new migration if there are schema changes, but do not apply it:\n\n```\nprisma migrate dev --create-only\n```\n\n### `migrate reset`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#migrate-reset \"Direct link to migrate-reset\")\n\n**For use in development environments only**\n\nThis command:\n\n1.  Drops the database/schema if possible, or performs a soft reset if the environment does not allow deleting databases/schemas\n2.  Creates a new database/schema with the same name if the database/schema was dropped\n3.  Applies all migrations\n4.  Runs seed scripts\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#options-7 \"Direct link to Options\")\n\n| Option | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--force` | No  | Skip the confirmation prompt |     |\n| `--skip-generate` | No  | Skip triggering generators (for example, Prisma Client) |     |\n| `--skip-seed` | No  | Skip triggering seed |     |\n| `--help` / `--h` | No  | Displays the help message |     |\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#arguments-8 \"Direct link to Arguments\")\n\n| Argument | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--schema` | No  | Specifies the path to the desired schema.prisma file to be processed instead of the default path. Both absolute and relative paths are supported. | `./schema.prisma`  <br>`./prisma/schema.prisma` |\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-10 \"Direct link to Examples\")\n\n### `migrate deploy`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#migrate-deploy \"Direct link to migrate-deploy\")\n\nThe `migrate deploy` command applies all pending migrations, and creates the database if it does not exist. Primarily used in non-development environments. This command:\n\n*   Does **not** look for drift in the database or changes in the Prisma schema\n*   Does **not** reset the database or generate artifacts\n*   Does **not** rely on a shadow database\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#options-8 \"Direct link to Options\")\n\n| Option | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--help` / `--h` | No  | Displays the help message |     |\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#arguments-9 \"Direct link to Arguments\")\n\n| Argument | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--schema` | No  | Specifies the path to the desired schema.prisma file to be processed instead of the default path. Both absolute and relative paths are supported. | `./schema.prisma`  <br>`./prisma/schema.prisma` |\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-11 \"Direct link to Examples\")\n\n### `migrate resolve`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#migrate-resolve \"Direct link to migrate-resolve\")\n\nThe `migrate resolve` command allows you to solve migration history issues in production by marking a failed migration as already applied (supports baselining) or rolled back.\n\nNote that this command can only be used with a failed migration. If you try to use it with a successful migration you will receive an error.\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#options-9 \"Direct link to Options\")\n\n| Option | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--help` / `--h` | No  | Displays the help message |     |\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#arguments-10 \"Direct link to Arguments\")\n\n| Argument | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--applied` | No\\* | Record a specific migration as applied - for example `--applied \"20201231000000_add_users_table\"` |     |\n| `--rolled-back` | No\\* | Record a specific migration as rolled back - for example `--rolled-back \"20201231000000_add_users_table\"` | `./schema.prisma`  <br>`./prisma/schema.prisma` |\n| `--schema` | No  | Specifies the path to the desired schema.prisma file to be processed instead of the default path. Both absolute and relative paths are supported. | `./schema.prisma`  <br>`./prisma/schema.prisma` |\n\nYou must specify either `--rolled-back` _or_ `--applied`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-12 \"Direct link to Examples\")\n\n```\nprisma migrate resolve --applied 20201231000000_add_users_table\n```\n\n```\nprisma migrate resolve --rolled-back 20201231000000_add_users_table\n```\n\n### `migrate status`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#migrate-status \"Direct link to migrate-status\")\n\nThe `prisma migrate status` command looks up the migrations in `./prisma/migrations/*` folder and the entries in the `_prisma_migrations` table and compiles information about the state of the migrations in your database.\n\nFor example:\n\n```\nStatus3 migrations found in prisma/migrationsYour local migration history and the migrations table from your database are different:The last common migration is: 20201127134938_new_migrationThe migration have not yet been applied:20201208100950_test_migrationThe migrations from the database are not found locally in prisma/migrations:20201208100950_new_migration\n```\n\nIn versions 4.3.0 and later, `prisma migrate status` exits with exit code 1 in the following cases:\n\n*   a database connection error occurs\n*   there are migration files in the `migrations` directory that have not been applied to the database\n*   the migration history in the `migrations` directory has diverged from the state of the database\n*   no migration table is found\n*   failed migrations are found\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#options-10 \"Direct link to Options\")\n\n| Option | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--help` / `--h` | No  | Displays the help message |     |\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#arguments-11 \"Direct link to Arguments\")\n\n| Argument | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--schema` | No  | Specifies the path to the desired schema.prisma file to be processed instead of the default path. Both absolute and relative paths are supported. | `./schema.prisma`  <br>`./prisma/schema.prisma` |\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-13 \"Direct link to Examples\")\n\n### `migrate diff`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#migrate-diff \"Direct link to migrate-diff\")\n\ninfo\n\nThe `migrate diff` command is Generally Available in versions 3.13.0 and later. If you're using a version between 3.9.0 and 3.13.0, it is available behind a `--preview-feature` CLI flag.\n\nwarning\n\nThis command is only partially supported for [MongoDB](https://www.prisma.io/docs/orm/overview/databases/mongodb). See the command options below for details.\n\nThis command compares two database schema sources and outputs a description of a migration taking the first to the state of the second.\n\nThe output can be given either as a human-readable summary (the default) or an executable script.\n\nwarning\n\nThe `migrate diff` command can only compare database features that are [supported by Prisma](https://www.prisma.io/docs/orm/reference/database-features). If two databases differ only in unsupported features, such as views or triggers, then `migrate diff` will not show any difference between them.\n\nThe format of the command is:\n\n```\nprisma migrate diff --from-... <source1> --to-... <source2>\n```\n\nwhere the `--from-...` and `--to-...` options are selected based on the type of database schema source. The supported types of sources are:\n\n*   live databases\n*   migration histories\n*   Prisma schema data models\n*   an empty schema\n\nBoth schema sources must use the same database provider. For example, a diff comparing a PostgreSQL data source with a SQLite data source is not supported.\n\nSee also:\n\n*   [Migration troubleshooting in production](https://www.prisma.io/docs/orm/prisma-migrate/workflows/patching-and-hotfixing#fixing-failed-migrations-with-migrate-diff-and-db-execute)\n\n#### Prerequisites[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#prerequisites-4 \"Direct link to Prerequisites\")\n\nBefore using the `migrate diff` command, if you are using the `--from-schema-datasource` or `--to-schema-datasource` you must define a valid [`datasource`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources) within your `schema.prisma` file.\n\nFor example, the following `datasource` defines a SQLite database file within the current directory:\n\n```\ndatasource db {  provider = \"sqlite\"  url      = \"file:my-database.db\"}\n```\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#options-11 \"Direct link to Options\")\n\nOne of the following `--from-...` options is required:\n\n| Options | Description | Notes |\n| --- | --- | --- |\n| `--from-url` | A data source URL |     |\n| `--from-migrations` | Path to the Prisma Migrate migrations directory | Not supported in MongoDB |\n| `--from-schema-datamodel` | Path to a Prisma schema file, uses the data model for the diff |     |\n| `--from-schema-datasource` | Path to a Prisma schema file, uses the URL in the `datasource` block for the diff |     |\n| `--from-empty` | Assume that you the data model you are migrating from is empty |     |\n| `--from-local-d1` | Path to a local D1 instance ([learn more](https://www.prisma.io/docs/orm/overview/databases/cloudflare-d1#migration-workflows)) | Available since [5.12.0](https://github.com/prisma/prisma/releases/tag/5.12.0) |\n\nOne of the following `--to-...` options is required:\n\n| Options | Description | Notes |\n| --- | --- | --- |\n| `--to-url` | A data source URL |     |\n| `--to-migrations` | Path to the Prisma Migrate migrations directory | Not supported in MongoDB |\n| `--to-schema-datamodel` | Path to a Prisma schema file, uses the data model for the diff |     |\n| `--to-schema-datasource` | Path to a Prisma schema file, uses the URL in the `datasource` block for the diff |     |\n| `--to-empty` | Assume that you the data model you are migrating to is empty |     |\n| `--to-local-d1` | Path to a local D1 instance ([learn more](https://www.prisma.io/docs/orm/overview/databases/cloudflare-d1#migration-workflows)) | Available since [5.12.0](https://github.com/prisma/prisma/releases/tag/5.12.0) |\n\nOther options:\n\n| Options | Required | Description | Notes |\n| --- | --- | --- | --- |\n| `--shadow-database-url` | No  | URL for the shadow database | Only required if using `--to-migrations` or `--from-migrations` |\n| `--script` | No  | Outputs a SQL script instead of the default human-readable summary | Not supported in MongoDB |\n| `-o`, `--output` | No  | Writes to a file instead of stdout | Available since [5.12.1](https://github.com/prisma/prisma/releases/tag/5.12.1) |\n| `--exit-code` | No  | Change the exit code behavior to signal if the diff is empty or not (Empty: 0, Error: 1, Not empty: 2). Default behavior is Success: 0, Error: 1. |     |\n| `--help` | No  | Displays the help message. |     |\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-14 \"Direct link to Examples\")\n\n*   Compare two databases specified by their data source URL, and output the default human-readable summary:\n    \n    ```\n    prisma migrate diff \\  --from-url \"$DATABASE_URL\" \\  --to-url \"postgresql://login:password@localhost:5432/db2\"\n    ```\n    \n*   Compare the state of a database with a URL of `$DATABASE_URL` to the schema defined by the migrations in the `./prisma/migrations` directory, and output the differences to a script `script.sql`:\n    \n    ```\n    prisma migrate diff \\ --from-url \"$DATABASE_URL\" \\ --to-migrations ./prisma/migrations \\ --shadow-database-url $SHADOW_DATABASE_URL \\ --script > script.sql\n    ```\n    \n\n## Prisma Data Platform[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#prisma-data-platform \"Direct link to Prisma Data Platform\")\n\n### `platform` ([Early Access](https://www.prisma.io/docs/platform/maturity-levels#early-access))[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#platform-early-access \"Direct link to platform-early-access\")\n\nThe `platform` command provides access to the Prisma Data Platform through the Prisma CLI starting in version `5.10.0` or later.\n\n*   **Authentication**:\n    \n    *   `platform auth login`: Opens a browser window for login or account creation.\n    *   `platform auth logout`: Logs out of the platform.\n    *   `platform auth show`: Displays information about the currently authenticated user.\n*   **Workspace Management**:\n    \n    *   `platform workspace show`: Lists all workspaces available to your account.\n*   **Project Management**:\n    \n    *   `platform project show`: Lists all projects within the specified workspace.\n    *   `platform project create`: Creates a new project within the specified workspace.\n    *   `platform project delete`: Deletes the specified project.\n*   **Environment Management**:\n    \n    *   `platform environment show`: Lists all environments for the specified project.\n    *   `platform environment create`: Creates a new environment within the specified project.\n    *   `platform environment delete`: Deletes the specified environment.\n*   **API Key Management**:\n    \n    *   `platform apikey show`: Lists all API keys for the specified environment.\n    *   `platform apikey create`: Creates a new API key for the specified environment.\n    *   `platform apikey delete`: Deletes the specified API key.\n*   **Prisma Accelerate**:\n    \n    *   `platform accelerate enable`: Enables Prisma Accelerate for the specified environment.\n    *   `platform accelerate disable`: Disables Prisma Accelerate for the specified environment.\n*   **Prisma Pulse**:\n    \n    *   `platform pulse enable`: Enables Prisma Pulse for the specified environment.\n    *   `platform pulse disable`: Disables Prisma Pulse for the specified environment.\n\nYou can find the complete list of available commands with the arguments [here](https://www.prisma.io/docs/platform/platform-cli/commands).\n\n## Studio[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#studio \"Direct link to Studio\")\n\n### `studio`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#studio-1 \"Direct link to studio-1\")\n\nThe `studio` command allows you to interact with and manage your data interactively. It does this by starting a local web server with a web app configured with your project's data schema and records.\n\n#### Prerequisites[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#prerequisites-5 \"Direct link to Prerequisites\")\n\nBefore using the `studio` command, you must define a valid [`datasource`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources) within your `schema.prisma` file.\n\nFor example, the following `datasource` defines a SQLite database file within the current directory:\n\n```\ndatasource db {  provider = \"sqlite\"  url      = \"file:my-database.db\"}\n```\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#options-12 \"Direct link to Options\")\n\nThe `studio` command recognizes the following options:\n\n| Option | Required | Description | Default |\n| --- | --- | --- | --- |\n| `-b`, `--browser` | No  | The browser to auto-open Studio in. | `<your-default-browser>` |\n| `-h`, `--help` | No  | Show all available options and exit |     |\n| `-p`, `--port` | No  | The port number to start Studio on. | 5555 |\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#arguments-12 \"Direct link to Arguments\")\n\n| Argument | Required | Description | Default |\n| --- | --- | --- | --- |\n| `--schema` | No  | Specifies the path to the desired schema.prisma file to be processed instead of the default path. Both absolute and relative paths are supported. | `./schema.prisma`  <br>`./prisma/schema.prisma` |\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#examples-15 \"Direct link to Examples\")\n\n#### Start Studio on the default port and open a new browser tab to it[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#start-studio-on-the-default-port-and-open-a-new-browser-tab-to-it \"Direct link to Start Studio on the default port and open a new browser tab to it\")\n\n#### Start Studio on a different port and open a new browser tab to it[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#start-studio-on-a-different-port-and-open-a-new-browser-tab-to-it \"Direct link to Start Studio on a different port and open a new browser tab to it\")\n\n```\nprisma studio --port 7777\n```\n\n#### Start Studio and open a Firefox tab to it[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#start-studio-and-open-a-firefox-tab-to-it \"Direct link to Start Studio and open a Firefox tab to it\")\n\n```\nprisma studio --browser firefox\n```\n\n#### Start Studio without opening a new browser tab to it[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#start-studio-without-opening-a-new-browser-tab-to-it \"Direct link to Start Studio without opening a new browser tab to it\")\n\n```\nprisma studio --browser none\n```\n\n## `package.json` entry options[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#packagejson-entry-options \"Direct link to packagejson-entry-options\")\n\n### `schema`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#schema \"Direct link to schema\")\n\nThe path to the desired `schema.prisma` file can be specified with the `prisma.schema` entry in the `package.json` file. The path defines the file the Prisma CLI should use when you run any of the CLI commands. Both absolute and relative paths are supported.\n\n\"package.json\"\n\n```\n{  \"name\": \"my-project\",  \"version\": \"1.0.0\",  \"prisma\": {    \"schema\": \"./custom-path-to-schema/schema.prisma\"  }}\n```\n\nThis is available from version 2.7.0 and later.\n\n### `seed`[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#seed \"Direct link to seed\")\n\nThe command used to populate the datasource is specified in the `prisma.seed` entry in the `package.json` file. It is used when `prisma db seed` is invoked or triggered.\n\nSee [Seeding your database](https://www.prisma.io/docs/orm/prisma-migrate/workflows/seeding)\n\n\"package.json\"\n\n```\n{  \"name\": \"my-project\",  \"version\": \"1.0.0\",  \"prisma\": {    \"seed\": \"node ./prisma/seed.js\"  }}\n```\n\nThis is available from version 3.0.1 and later.\n\n## Using a HTTP proxy for the CLI[​](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#using-a-http-proxy-for-the-cli \"Direct link to Using a HTTP proxy for the CLI\")\n\nPrisma CLI supports [custom HTTP proxies](https://github.com/prisma/prisma/issues/506). This is particularly relevant when being behind a corporate firewall.\n\nTo activate usage of the proxy, provide either of the following environment variables:\n\n*   [`HTTP_PROXY`](https://www.prisma.io/docs/orm/reference/environment-variables-reference#http_proxy) or `http_proxy`: Proxy URL for http traffic, for example `http://localhost:8080`\n*   [`HTTPS_PROXY`](https://www.prisma.io/docs/orm/reference/environment-variables-reference#https_proxy) or `https_proxy`: Proxy URL for https traffic, for example `https://localhost:8080`",
    "title": "Prisma CLI reference | Prisma Documentation",
    "description": "This page gives an overview of all available Prisma CLI commands, explains their options and shows numerous usage examples.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/reference/error-reference",
    "markdown": "# Errors | Prisma Documentation\n\n## Error message reference\n\nFor more information about how to work with exceptions and error codes, see [Handling exceptions and errors](https://www.prisma.io/docs/orm/prisma-client/debugging-and-troubleshooting/handling-exceptions-and-errors).\n\n## Prisma Client error types[​](https://www.prisma.io/docs/orm/reference/error-reference#prisma-client-error-types \"Direct link to Prisma Client error types\")\n\nPrisma Client throws different kinds of errors. The following lists the exception types, and their documented data fields:\n\n### `PrismaClientKnownRequestError`[​](https://www.prisma.io/docs/orm/reference/error-reference#prismaclientknownrequesterror \"Direct link to prismaclientknownrequesterror\")\n\nPrisma Client throws a `PrismaClientKnownRequestError` exception if the query engine returns a known error related to the request - for example, a unique constraint violation.\n\n| **Property** | **Description** |\n| --- | --- |\n| `code` | A Prisma-specific [error code](https://www.prisma.io/docs/orm/reference/error-reference#error-codes). |\n| `meta` | Additional information about the error - for example, the field that caused the error: `{ target: [ 'email' ] }` |\n| `message` | Error message associated with [error code](https://www.prisma.io/docs/orm/reference/error-reference#error-codes). |\n| `clientVersion` | Version of Prisma Client (for example, `2.19.0`) |\n\n### `PrismaClientUnknownRequestError`[​](https://www.prisma.io/docs/orm/reference/error-reference#prismaclientunknownrequesterror \"Direct link to prismaclientunknownrequesterror\")\n\nPrisma Client throws a `PrismaClientUnknownRequestError` exception if the query engine returns an error related to a request that does not have an error code.\n\n| **Property** | **Description** |\n| --- | --- |\n| `message` | Error message associated with [error code](https://www.prisma.io/docs/orm/reference/error-reference#error-codes). |\n| `clientVersion` | Version of Prisma Client (for example, `2.19.0`) |\n\n### `PrismaClientRustPanicError`[​](https://www.prisma.io/docs/orm/reference/error-reference#prismaclientrustpanicerror \"Direct link to prismaclientrustpanicerror\")\n\nPrisma Client throws a `PrismaClientRustPanicError` exception if the underlying engine crashes and exits with a non-zero exit code. In this case, Prisma Client or the whole Node process must be restarted.\n\n| **Property** | **Description** |\n| --- | --- |\n| `message` | Error message associated with [error code](https://www.prisma.io/docs/orm/reference/error-reference#error-codes). |\n| `clientVersion` | Version of Prisma Client (for example, `2.19.0`) |\n\n### `PrismaClientInitializationError`[​](https://www.prisma.io/docs/orm/reference/error-reference#prismaclientinitializationerror \"Direct link to prismaclientinitializationerror\")\n\nPrisma Client throws a `PrismaClientInitializationError` exception if something goes wrong when the query engine is started and the connection to the database is created. This happens either:\n\n*   When `prisma.$connect()` is called OR\n*   When the first query is executed\n\nErrors that can occur include:\n\n*   The provided credentials for the database are invalid\n*   There is no database server running under the provided hostname and port\n*   The port that the query engine HTTP server wants to bind to is already taken\n*   A missing or inaccessible environment variable\n*   The query engine binary for the current platform could not be found (`generator` block)\n\n| **Property** | **Description** |\n| --- | --- |\n| `errorCode` | A Prisma-specific error code. |\n| `message` | Error message associated with [error code](https://www.prisma.io/docs/orm/reference/error-reference#error-codes). |\n| `clientVersion` | Version of Prisma Client (for example, `2.19.0`) |\n\n### `PrismaClientValidationError`[​](https://www.prisma.io/docs/orm/reference/error-reference#prismaclientvalidationerror \"Direct link to prismaclientvalidationerror\")\n\nPrisma Client throws a `PrismaClientValidationError` exception if validation fails - for example:\n\n*   Missing field - for example, an empty `data: {}` property when creating a new record\n*   Incorrect field type provided (for example, setting a `Boolean` field to `\"Hello, I like cheese and gold!\"`)\n\n| **Property** | **Description** |\n| --- | --- |\n| `message` | Error message. |\n| `clientVersion` | Version of Prisma Client (for example, `2.19.0`) |\n\n## Error codes[​](https://www.prisma.io/docs/orm/reference/error-reference#error-codes \"Direct link to Error codes\")\n\n### Common[​](https://www.prisma.io/docs/orm/reference/error-reference#common \"Direct link to Common\")\n\n#### `P1000`[​](https://www.prisma.io/docs/orm/reference/error-reference#p1000 \"Direct link to p1000\")\n\n\"Authentication failed against database server at `{database_host}`, the provided database credentials for `{database_user}` are not valid. Please make sure to provide valid database credentials for the database server at `{database_host}`.\"\n\n#### `P1001`[​](https://www.prisma.io/docs/orm/reference/error-reference#p1001 \"Direct link to p1001\")\n\n\"Can't reach database server at `{database_host}`:`{database_port}` Please make sure your database server is running at `{database_host}`:`{database_port}`.\"\n\n#### `P1002`[​](https://www.prisma.io/docs/orm/reference/error-reference#p1002 \"Direct link to p1002\")\n\n\"The database server at `{database_host}`:`{database_port}` was reached but timed out. Please try again. Please make sure your database server is running at `{database_host}`:`{database_port}`. \"\n\n#### `P1003`[​](https://www.prisma.io/docs/orm/reference/error-reference#p1003 \"Direct link to p1003\")\n\n\"Database {database\\_file\\_name} does not exist at {database\\_file\\_path}\"\n\n\"Database `{database_name}.{database_schema_name}` does not exist on the database server at `{database_host}:{database_port}`.\"\n\n\"Database `{database_name}` does not exist on the database server at `{database_host}:{database_port}`.\"\n\n#### `P1008`[​](https://www.prisma.io/docs/orm/reference/error-reference#p1008 \"Direct link to p1008\")\n\n\"Operations timed out after `{time}`\"\n\n#### `P1009`[​](https://www.prisma.io/docs/orm/reference/error-reference#p1009 \"Direct link to p1009\")\n\n\"Database `{database_name}` already exists on the database server at `{database_host}:{database_port}`\"\n\n#### `P1010`[​](https://www.prisma.io/docs/orm/reference/error-reference#p1010 \"Direct link to p1010\")\n\n\"User `{database_user}` was denied access on the database `{database_name}`\"\n\n#### `P1011`[​](https://www.prisma.io/docs/orm/reference/error-reference#p1011 \"Direct link to p1011\")\n\n\"Error opening a TLS connection: {message}\"\n\n#### `P1012`[​](https://www.prisma.io/docs/orm/reference/error-reference#p1012 \"Direct link to p1012\")\n\n**Note:** If you get error code P1012 after you upgrade Prisma ORM to version 4.0.0 or later, see the [version 4.0.0 upgrade guide](https://www.prisma.io/docs/orm/more/upgrade-guides/upgrading-versions/upgrading-to-prisma-4#upgrade-your-prisma-schema). A schema that was valid before version 4.0.0 might be invalid in version 4.0.0 and later. The upgrade guide explains how to update your schema to make it valid.\n\n\"{full\\_error}\"\n\nPossible P1012 error messages:\n\n*   \"Argument `{}` is missing.\"\n*   \"Function `{}` takes arguments, but received .\"\n*   \"Argument `{}` is missing in attribute `@{}`.\"\n*   \"Argument `{}` is missing in data source block `{}`.\"\n*   \"Argument `{}` is missing in generator block `{}`.\"\n*   \"Error parsing attribute `@{}`: \"\n*   \"Attribute `@{}` is defined twice.\"\n*   \"The model with database name `{}` could not be defined because another model with this name exists: `{}`\"\n*   \"`{}` is a reserved scalar type name and can not be used.\"\n*   \"The `{}` cannot be defined because a with that name already exists.\"\n*   \"Key `{}` is already defined in .\"\n*   \"Argument `{}` is already specified as unnamed argument.\"\n*   \"Argument `{}` is already specified.\"\n*   \"No such argument.\"\"\n*   \"Field `{}` is already defined on model `{}`.\"\n*   \"Field `{}` in model `{}` can't be a list. The current connector does not support lists of primitive types.\"\n*   \"The index name `{}` is declared multiple times. With the current connector index names have to be globally unique.\"\n*   \"Value `{}` is already defined on enum `{}`.\"\n*   \"Attribute not known: `@{}`.\"\n*   \"Function not known: `{}`.\"\n*   \"Datasource provider not known: `{}`.\"\n*   \"shadowDatabaseUrl is the same as url for datasource `{}`. Please specify a different database as shadow database.\"\n*   \"The preview feature `{}` is not known. Expected one of: \"\n*   \"`{}` is not a valid value for .\"\n*   \"Type `{}` is neither a built-in type, nor refers to another model, custom type, or enum.\"\n*   \"Type `{}` is not a built-in type.\"\n*   \"Unexpected token. Expected one of: \"\n*   \"Environment variable not found: .\"\n*   \"Expected a value, but received value `{}`.\"\n*   \"Expected a value, but failed while parsing `{}`: .\"\n*   \"Error validating model `{}`: \"\n*   \"Error validating field `{}` in model `{}`: \"\n*   \"Error validating datasource `{datasource}`: {message}\"\n*   \"Error validating enum `{}`: \"\n*   \"Error validating: \"\n\n#### `P1013`[​](https://www.prisma.io/docs/orm/reference/error-reference#p1013 \"Direct link to p1013\")\n\n\"The provided database string is invalid. {details}\"\n\n#### `P1014`[​](https://www.prisma.io/docs/orm/reference/error-reference#p1014 \"Direct link to p1014\")\n\n\"The underlying {kind} for model `{model}` does not exist.\"\n\n#### `P1015`[​](https://www.prisma.io/docs/orm/reference/error-reference#p1015 \"Direct link to p1015\")\n\n\"Your Prisma schema is using features that are not supported for the version of the database.  \nDatabase version: {database\\_version}  \nErrors:  \n{errors}\"\n\n#### `P1016`[​](https://www.prisma.io/docs/orm/reference/error-reference#p1016 \"Direct link to p1016\")\n\n\"Your raw query had an incorrect number of parameters. Expected: `{expected}`, actual: `{actual}`.\"\n\n#### `P1017`[​](https://www.prisma.io/docs/orm/reference/error-reference#p1017 \"Direct link to p1017\")\n\n\"Server has closed the connection.\"\n\n### Prisma Client (Query Engine)[​](https://www.prisma.io/docs/orm/reference/error-reference#prisma-client-query-engine \"Direct link to Prisma Client (Query Engine)\")\n\n#### `P2000`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2000 \"Direct link to p2000\")\n\n\"The provided value for the column is too long for the column's type. Column: {column\\_name}\"\n\n#### `P2001`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2001 \"Direct link to p2001\")\n\n\"The record searched for in the where condition (`{model_name}.{argument_name} = {argument_value}`) does not exist\"\n\n#### `P2002`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2002 \"Direct link to p2002\")\n\n\"Unique constraint failed on the {constraint}\"\n\n#### `P2003`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2003 \"Direct link to p2003\")\n\n\"Foreign key constraint failed on the field: `{field_name}`\"\n\n#### `P2004`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2004 \"Direct link to p2004\")\n\n\"A constraint failed on the database: `{database_error}`\"\n\n#### `P2005`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2005 \"Direct link to p2005\")\n\n\"The value `{field_value}` stored in the database for the field `{field_name}` is invalid for the field's type\"\n\n#### `P2006`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2006 \"Direct link to p2006\")\n\n\"The provided value `{field_value}` for `{model_name}` field `{field_name}` is not valid\"\n\n#### `P2007`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2007 \"Direct link to p2007\")\n\n\"Data validation error `{database_error}`\"\n\n#### `P2008`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2008 \"Direct link to p2008\")\n\n\"Failed to parse the query `{query_parsing_error}` at `{query_position}`\"\n\n#### `P2009`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2009 \"Direct link to p2009\")\n\n\"Failed to validate the query: `{query_validation_error}` at `{query_position}`\"\n\n#### `P2010`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2010 \"Direct link to p2010\")\n\n\"Raw query failed. Code: `{code}`. Message: `{message}`\"\n\n#### `P2011`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2011 \"Direct link to p2011\")\n\n\"Null constraint violation on the {constraint}\"\n\n#### `P2012`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2012 \"Direct link to p2012\")\n\n\"Missing a required value at `{path}`\"\n\n#### `P2013`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2013 \"Direct link to p2013\")\n\n\"Missing the required argument `{argument_name}` for field `{field_name}` on `{object_name}`.\"\n\n#### `P2014`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2014 \"Direct link to p2014\")\n\n\"The change you are trying to make would violate the required relation '{relation\\_name}' between the `{model_a_name}` and `{model_b_name}` models.\"\n\n#### `P2015`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2015 \"Direct link to p2015\")\n\n\"A related record could not be found. {details}\"\n\n#### `P2016`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2016 \"Direct link to p2016\")\n\n\"Query interpretation error. {details}\"\n\n#### `P2017`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2017 \"Direct link to p2017\")\n\n\"The records for relation `{relation_name}` between the `{parent_name}` and `{child_name}` models are not connected.\"\n\n#### `P2018`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2018 \"Direct link to p2018\")\n\n\"The required connected records were not found. {details}\"\n\n#### `P2019`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2019 \"Direct link to p2019\")\n\n\"Input error. {details}\"\n\n#### `P2020`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2020 \"Direct link to p2020\")\n\n\"Value out of range for the type. {details}\"\n\n#### `P2021`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2021 \"Direct link to p2021\")\n\n\"The table `{table}` does not exist in the current database.\"\n\n#### `P2022`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2022 \"Direct link to p2022\")\n\n\"The column `{column}` does not exist in the current database.\"\n\n#### `P2023`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2023 \"Direct link to p2023\")\n\n\"Inconsistent column data: {message}\"\n\n#### `P2024`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2024 \"Direct link to p2024\")\n\n\"Timed out fetching a new connection from the connection pool. (More info: [http://pris.ly/d/connection-pool](http://pris.ly/d/connection-pool) (Current connection pool timeout: {timeout}, connection limit: {connection\\_limit})\"\n\n#### `P2025`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2025 \"Direct link to p2025\")\n\n\"An operation failed because it depends on one or more records that were required but not found. {cause}\"\n\n#### `P2026`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2026 \"Direct link to p2026\")\n\n\"The current database provider doesn't support a feature that the query used: {feature}\"\n\n#### `P2027`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2027 \"Direct link to p2027\")\n\n\"Multiple errors occurred on the database during query execution: {errors}\"\n\n#### `P2028`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2028 \"Direct link to p2028\")\n\n\"Transaction API error: {error}\"\n\n#### `P2029`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2029 \"Direct link to p2029\")\n\n\"Query parameter limit exceeded error: {message}\"\n\n#### `P2030`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2030 \"Direct link to p2030\")\n\n\"Cannot find a fulltext index to use for the search, try adding a @@fulltext(\\[Fields...\\]) to your schema\"\n\n#### `P2031`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2031 \"Direct link to p2031\")\n\n\"Prisma needs to perform transactions, which requires your MongoDB server to be run as a replica set. See details: [https://pris.ly/d/mongodb-replica-set](https://pris.ly/d/mongodb-replica-set)\"\n\n#### `P2033`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2033 \"Direct link to p2033\")\n\n\"A number used in the query does not fit into a 64 bit signed integer. Consider using `BigInt` as field type if you're trying to store large integers\"\n\n#### `P2034`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2034 \"Direct link to p2034\")\n\n\"Transaction failed due to a write conflict or a deadlock. Please retry your transaction\"\n\n#### `P2035`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2035 \"Direct link to p2035\")\n\n\"Assertion violation on the database: {database\\_error}\"\n\n#### `P2036`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2036 \"Direct link to p2036\")\n\n\"Error in external connector (id {id})\"\n\n#### `P2037`[​](https://www.prisma.io/docs/orm/reference/error-reference#p2037 \"Direct link to p2037\")\n\n\"Too many database connections opened: {message}\"\n\n### Prisma Migrate (Schema Engine)[​](https://www.prisma.io/docs/orm/reference/error-reference#prisma-migrate-schema-engine \"Direct link to Prisma Migrate (Schema Engine)\")\n\nwarning\n\nThe Schema Engine was previously called Migration Engine. This change was introduced in version [5.0.0](https://github.com/prisma/prisma/releases/tag/5.0.0).\n\n#### `P3000`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3000 \"Direct link to p3000\")\n\n\"Failed to create database: {database\\_error}\"\n\n#### `P3001`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3001 \"Direct link to p3001\")\n\n\"Migration possible with destructive changes and possible data loss: {migration\\_engine\\_destructive\\_details}\"\n\n#### `P3002`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3002 \"Direct link to p3002\")\n\n\"The attempted migration was rolled back: {database\\_error}\"\n\n#### `P3003`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3003 \"Direct link to p3003\")\n\n\"The format of migrations changed, the saved migrations are no longer valid. To solve this problem, please follow the steps at: [https://pris.ly/d/migrate](https://pris.ly/d/migrate)\"\n\n#### `P3004`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3004 \"Direct link to p3004\")\n\n\"The `{database_name}` database is a system database, it should not be altered with prisma migrate. Please connect to another database.\"\n\n#### `P3005`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3005 \"Direct link to p3005\")\n\n\"The database schema is not empty. Read more about how to baseline an existing production database: [https://pris.ly/d/migrate-baseline](https://pris.ly/d/migrate-baseline)\"\n\n#### `P3006`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3006 \"Direct link to p3006\")\n\n\"Migration `{migration_name}` failed to apply cleanly to the shadow database.  \n{error\\_code}Error:  \n{inner\\_error}\"\n\n#### `P3007`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3007 \"Direct link to p3007\")\n\n\"Some of the requested preview features are not yet allowed in schema engine. Please remove them from your data model before using migrations. (blocked: {list\\_of\\_blocked\\_features})\"\n\n#### `P3008`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3008 \"Direct link to p3008\")\n\n\"The migration `{migration_name}` is already recorded as applied in the database.\"\n\n#### `P3009`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3009 \"Direct link to p3009\")\n\n\"migrate found failed migrations in the target database, new migrations will not be applied. Read more about how to resolve migration issues in a production database: [https://pris.ly/d/migrate-resolve](https://pris.ly/d/migrate-resolve)  \n{details}\"\n\n#### `P3010`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3010 \"Direct link to p3010\")\n\n\"The name of the migration is too long. It must not be longer than 200 characters (bytes).\"\n\n#### `P3011`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3011 \"Direct link to p3011\")\n\n\"Migration `{migration_name}` cannot be rolled back because it was never applied to the database. Hint: did you pass in the whole migration name? (example: \"20201207184859\\_initial\\_migration\")\"\n\n#### `P3012`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3012 \"Direct link to p3012\")\n\n\"Migration `{migration_name}` cannot be rolled back because it is not in a failed state.\"\n\n#### `P3013`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3013 \"Direct link to p3013\")\n\n\"Datasource provider arrays are no longer supported in migrate. Please change your datasource to use a single provider. Read more at [https://pris.ly/multi-provider-deprecation](https://pris.ly/multi-provider-deprecation)\"\n\n#### `P3014`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3014 \"Direct link to p3014\")\n\n\"Prisma Migrate could not create the shadow database. Please make sure the database user has permission to create databases. Read more about the shadow database (and workarounds) at [https://pris.ly/d/migrate-shadow](https://pris.ly/d/migrate-shadow).\n\nOriginal error: {error\\_code}  \n{inner\\_error}\"\n\n#### `P3015`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3015 \"Direct link to p3015\")\n\n\"Could not find the migration file at {migration\\_file\\_path}. Please delete the directory or restore the migration file.\"\n\n#### `P3016`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3016 \"Direct link to p3016\")\n\n\"The fallback method for database resets failed, meaning Migrate could not clean up the database entirely. Original error: {error\\_code}  \n{inner\\_error}\"\n\n#### `P3017`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3017 \"Direct link to p3017\")\n\n\"The migration {migration\\_name} could not be found. Please make sure that the migration exists, and that you included the whole name of the directory. (example: \"20201207184859\\_initial\\_migration\")\"\n\n#### `P3018`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3018 \"Direct link to p3018\")\n\n\"A migration failed to apply. New migrations cannot be applied before the error is recovered from. Read more about how to resolve migration issues in a production database: [https://pris.ly/d/migrate-resolve](https://pris.ly/d/migrate-resolve)\n\nMigration name: {migration\\_name}\n\nDatabase error code: {database\\_error\\_code}\n\nDatabase error:  \n{database\\_error} \"\n\n#### `P3019`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3019 \"Direct link to p3019\")\n\n\"The datasource provider `{provider}` specified in your schema does not match the one specified in the migration\\_lock.toml, `{expected_provider}`. Please remove your current migration directory and start a new migration history with prisma migrate dev. Read more: [https://pris.ly/d/migrate-provider-switch](https://pris.ly/d/migrate-provider-switch)\"\n\n#### `P3020`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3020 \"Direct link to p3020\")\n\n\"The automatic creation of shadow databases is disabled on Azure SQL. Please set up a shadow database using the `shadowDatabaseUrl` datasource attribute.  \nRead the docs page for more details: [https://pris.ly/d/migrate-shadow](https://pris.ly/d/migrate-shadow)\"\n\n#### `P3021`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3021 \"Direct link to p3021\")\n\n\"Foreign keys cannot be created on this database. Learn more how to handle this: [https://pris.ly/d/migrate-no-foreign-keys](https://pris.ly/d/migrate-no-foreign-keys)\"\n\n#### `P3022`[​](https://www.prisma.io/docs/orm/reference/error-reference#p3022 \"Direct link to p3022\")\n\n\"Direct execution of DDL (Data Definition Language) SQL statements is disabled on this database. Please read more here about how to handle this: [https://pris.ly/d/migrate-no-direct-ddl](https://pris.ly/d/migrate-no-direct-ddl)\"\n\n### `prisma db pull`[​](https://www.prisma.io/docs/orm/reference/error-reference#prisma-db-pull \"Direct link to prisma-db-pull\")\n\n#### `P4000`[​](https://www.prisma.io/docs/orm/reference/error-reference#p4000 \"Direct link to p4000\")\n\n\"Introspection operation failed to produce a schema file: {introspection\\_error}\"\n\n#### `P4001`[​](https://www.prisma.io/docs/orm/reference/error-reference#p4001 \"Direct link to p4001\")\n\n\"The introspected database was empty.\"\n\n#### `P4002`[​](https://www.prisma.io/docs/orm/reference/error-reference#p4002 \"Direct link to p4002\")\n\n\"The schema of the introspected database was inconsistent: {explanation}\"\n\n### Prisma Accelerate[​](https://www.prisma.io/docs/orm/reference/error-reference#prisma-accelerate \"Direct link to Prisma Accelerate\")\n\nPrisma Accelerate-related errors start with `P6xxx`.\n\n#### `P6000` (`ServerError`)[​](https://www.prisma.io/docs/orm/reference/error-reference#p6000-servererror \"Direct link to p6000-servererror\")\n\nGeneric error to catch all other errors.\n\n#### `P6001` (`InvalidDataSource`)[​](https://www.prisma.io/docs/orm/reference/error-reference#p6001-invaliddatasource \"Direct link to p6001-invaliddatasource\")\n\nThe URL is malformed; for instance, it does not use the `prisma://` protocol.\n\nThe API Key in the connection string is invalid.\n\n#### `P6003` (`PlanLimitReached`)[​](https://www.prisma.io/docs/orm/reference/error-reference#p6003-planlimitreached \"Direct link to p6003-planlimitreached\")\n\nThe included usage of the current plan has been exceeded. This can only occur on the [free plan](https://www.prisma.io/pricing).\n\n#### `P6004` (`QueryTimeout`)[​](https://www.prisma.io/docs/orm/reference/error-reference#p6004-querytimeout \"Direct link to p6004-querytimeout\")\n\nThe global timeout of Accelerate has been exceeded. You can find the limit [here](https://www.prisma.io/docs/accelerate/limitations#query-timeout-limit).\n\n> Also see the [troubleshooting guide](https://www.prisma.io/docs/accelerate/troubleshoot#p6004-querytimeout) for more information.\n\n#### `P6005` (`InvalidParameters`)[​](https://www.prisma.io/docs/orm/reference/error-reference#p6005-invalidparameters \"Direct link to p6005-invalidparameters\")\n\nThe user supplied invalid parameters. Currently only relevant for transaction methods. For example, setting a timeout that is too high. You can find the limit [here](https://www.prisma.io/docs/accelerate/limitations#interactive-transactions-query-timeout-limit).\n\n#### `P6006` (`VersionNotSupported`)[​](https://www.prisma.io/docs/orm/reference/error-reference#p6006-versionnotsupported \"Direct link to p6006-versionnotsupported\")\n\nThe chosen Prisma version is not compatible with Accelerate. This may occur when a user uses an unstable development version that we occasionally prune.\n\n#### `P6008` (`ConnectionError|EngineStartError`)[​](https://www.prisma.io/docs/orm/reference/error-reference#p6008-connectionerrorenginestarterror \"Direct link to p6008-connectionerrorenginestarterror\")\n\nThe engine failed to start. For example, it couldn't establish a connection to the database.\n\n> Also see the [troubleshooting guide](https://www.prisma.io/docs/accelerate/troubleshoot#p6008-connectionerrorenginestarterror) for more information.\n\nThe global response size limit of Accelerate has been exceeded. You can find the limit [here](https://www.prisma.io/docs/accelerate/limitations#response-size-limit).\n\n#### `P6009` (`ResponseSizeLimitExceeded`)[​](https://www.prisma.io/docs/orm/reference/error-reference#p6009-responsesizelimitexceeded \"Direct link to p6009-responsesizelimitexceeded\")\n\nThe global response size limit of Accelerate has been exceeded. You can find the limit [here](https://www.prisma.io/docs/accelerate/limitations#response-size-limit).\n\n> Also see the [troubleshooting guide](https://www.prisma.io/docs/accelerate/troubleshoot#p6009-responsesizelimitexceeded) for more information.\n\n#### `P6010` (`ProjectDisabledError`)[​](https://www.prisma.io/docs/orm/reference/error-reference#p6010-projectdisablederror \"Direct link to p6010-projectdisablederror\")\n\nYour accelerate project is disabled. Please [enable](https://www.prisma.io/docs/accelerate/getting-started#1-enable-accelerate) it again to use it.\n\n### Prisma Pulse[​](https://www.prisma.io/docs/orm/reference/error-reference#prisma-pulse \"Direct link to Prisma Pulse\")\n\nPrisma Pulse-related errors start with `P61xx`.\n\n#### `P6100` (`ServerError`) – HTTP Status `500`[​](https://www.prisma.io/docs/orm/reference/error-reference#p6100-servererror--http-status-500 \"Direct link to p6100-servererror--http-status-500\")\n\nAn unexpected server error occurred. This can happen due to a technical issue within the Prisma Pulse or its infrastructure. For any incidents related to Prisma Pulse, you can refer to our status page [here](https://www.prisma-status.com/) and reach out to our support team through one of our available [channels](https://www.prisma.io/docs/platform/support) to report your issue.\n\n#### `P6101` (`DatasourceError`) – HTTP Status `400`[​](https://www.prisma.io/docs/orm/reference/error-reference#p6101-datasourceerror--http-status-400 \"Direct link to p6101-datasourceerror--http-status-400\")\n\nReasons:\n\n1.  The datasource is not reachable by Prisma Pulse. The Console will validate the connection when enabling Pulse to reduce the likelihood of this error. However, the datasource may become unavailable after the configuration step, resulting in this error.\n2.  The datasource is reachable, but did not meet the requirements for Prisma Pulse. The Console will validate the configuration when enabling Pulse to reduce the likelihood of this error. However, the datasource may change after the configuration step, resulting in this error.\n\n#### `P6102` (`Unauthorized`) – HTTP Status `400`[​](https://www.prisma.io/docs/orm/reference/error-reference#p6102-unauthorized--http-status-400 \"Direct link to p6102-unauthorized--http-status-400\")\n\nThe API key is invalid.\n\n#### `P6103` (`ProjectDisabledError`) – HTTP Status `400`[​](https://www.prisma.io/docs/orm/reference/error-reference#p6103-projectdisablederror--http-status-400 \"Direct link to p6103-projectdisablederror--http-status-400\")\n\nPrisma Pulse is not enabled for the configured API key.\n\n#### `P6104` (`AccountHoldError`) – HTTP Status `400`[​](https://www.prisma.io/docs/orm/reference/error-reference#p6104-accountholderror--http-status-400 \"Direct link to p6104-accountholderror--http-status-400\")\n\nYour Prisma Data Platform account has been blocked, potentially due to exceeding the usage limit included in your current plan. Please review the error message for further information.\n\nIf you require further assistance, please get in touch with us via one of our support [channels](https://www.prisma.io/docs/platform/support).\n\n#### `P6105` (`VersionNotSupported`) – HTTP Status `400`[​](https://www.prisma.io/docs/orm/reference/error-reference#p6105-versionnotsupported--http-status-400 \"Direct link to p6105-versionnotsupported--http-status-400\")\n\nThe Prisma version of the project is not compatible with Prisma Pulse.",
    "title": "Errors | Prisma Documentation",
    "description": "Prisma Client, Migrate, Introspection error message reference",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/reference/prisma-schema-reference",
    "markdown": "# Prisma Schema API | Prisma Documentation\n\n## Prisma schema reference\n\n## `datasource`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#datasource \"Direct link to datasource\")\n\nDefines a [data source](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources) in the Prisma schema.\n\n### Fields[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#fields \"Direct link to Fields\")\n\nA `datasource` block accepts the following fields:\n\nName\n\nRequired\n\nType\n\nDescription\n\n`provider`\n\n**Yes**\n\nString (`postgresql`, `mysql`, `sqlite`, `sqlserver`, `mongodb`, `cockroachdb`)\n\nDescribes which data source connectors to use.\n\n`url`\n\n**Yes**\n\nString (URL)\n\nConnection URL including authentication info. Most connectors use [the syntax provided by the database](https://www.prisma.io/docs/orm/reference/connection-urls#format).\n\n`shadowDatabaseUrl`\n\nNo\n\nString (URL)\n\nConnection URL to the shadow database used by Prisma Migrate. Allows you to use a cloud-hosted database as the shadow database.\n\n`directUrl`\n\nNo\n\nString (URL)\n\nConnection URL for direct connection to the database.\n\nIf you use a connection pooler URL in the `url` argument (for example, if you use [Prisma Accelerate](https://www.prisma.io/docs/accelerate) or pgBouncer), Prisma CLI commands that require a direct connection to the database use the URL in the `directUrl` argument.\n\nThe `directUrl` property is supported by Prisma Studio from version 5.1.0 upwards.\n\n`relationMode`\n\nNo\n\nString (`foreignKeys`, `prisma`)\n\nSets whether [referential integrity](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/relation-mode) is enforced by foreign keys in the database or emulated in the Prisma Client.\n\nIn preview in versions 3.1.1 and later. The field is named `relationMode` in versions 4.5.0 and later, and was previously named `referentialIntegrity`.\n\n`extensions`\n\nNo\n\nList of strings (PostgreSQL extension names)\n\nAllows you to [represent PostgreSQL extensions in your schema](https://www.prisma.io/docs/orm/prisma-schema/postgresql-extensions#how-to-represent-postgresql-extensions-in-your-prisma-schema). Available in preview for PostgreSQL only in Prisma ORM versions 4.5.0 and later.\n\nThe following providers are available:\n\n*   [`sqlite`](https://www.prisma.io/docs/orm/overview/databases/sqlite)\n*   [`postgresql`](https://www.prisma.io/docs/orm/overview/databases/postgresql)\n*   [`mysql`](https://www.prisma.io/docs/orm/overview/databases/mysql)\n*   [`sqlserver`](https://www.prisma.io/docs/orm/overview/databases/sql-server)\n*   [`mongodb`](https://www.prisma.io/docs/orm/overview/databases/mongodb)\n*   [`cockroachdb`](https://www.prisma.io/docs/orm/overview/databases/cockroachdb)\n\n*   You can only have **one** `datasource` block in a schema.\n*   `datasource db` is convention - however, you can give your data source any name - for example, `datasource mysql` or `datasource data`.\n\n### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples \"Direct link to Examples\")\n\n#### Specify a PostgreSQL data source[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-postgresql-data-source \"Direct link to Specify a PostgreSQL data source\")\n\nIn this example, the target database is available with the following credentials:\n\n*   User: `johndoe`\n*   Password: `mypassword`\n*   Host: `localhost`\n*   Port: `5432`\n*   Database name: `mydb`\n*   Schema name: `public`\n\n```\ndatasource db {  provider = \"postgresql\"  url      = \"postgresql://johndoe:mypassword@localhost:5432/mydb?schema=public\"}\n```\n\nLearn more about PostgreSQL connection strings [here](https://www.prisma.io/docs/orm/overview/databases/postgresql).\n\n#### Specify a PostgreSQL data source via an environment variable[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-postgresql-data-source-via-an-environment-variable \"Direct link to Specify a PostgreSQL data source via an environment variable\")\n\nIn this example, the target database is available with the following credentials:\n\n*   User: `johndoe`\n*   Password: `mypassword`\n*   Host: `localhost`\n*   Port: `5432`\n*   Database name: `mydb`\n*   Schema name: `public`\n\n```\ndatasource db {  provider = \"postgresql\"  url      = env(\"DATABASE_URL\")}\n```\n\nWhen running a Prisma CLI command that needs the database connection URL (e.g. `prisma generate`), you need to make sure that the `DATABASE_URL` environment variable is set.\n\nOne way to do so is by creating a [`.env`](https://github.com/motdotla/dotenv) file with the following contents. Note that the file must be in the same directory as your `schema.prisma` file to automatically picked up the Prisma CLI.\n\n```\nDATABASE_URL=postgresql://johndoe:mypassword@localhost:5432/mydb?schema=public\n```\n\n#### Specify a MySQL data source[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-mysql-data-source \"Direct link to Specify a MySQL data source\")\n\nIn this example, the target database is available with the following credentials:\n\n*   User: `johndoe`\n*   Password: `mypassword`\n*   Host: `localhost`\n*   Port: `3306`\n*   Database name: `mydb`\n\n```\ndatasource db {  provider = \"mysql\"  url      = \"mysql://johndoe:mypassword@localhost:3306/mydb\"}\n```\n\nLearn more about MySQL connection strings [here](https://www.prisma.io/docs/orm/overview/databases/mysql).\n\n#### Specify a MongoDB data source[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-mongodb-data-source \"Direct link to Specify a MongoDB data source\")\n\n*   User: `root`\n*   Password: `password`\n*   Host: `cluster1.test1.mongodb.net`\n*   Port: N/A\n*   Database name: `testing`\n\n```\ndatasource db {  provider = \"mongodb\"  url      = \"mongodb+srv://root:password@cluster1.test1.mongodb.net/testing?retryWrites=true&w=majority\"}\n```\n\nLearn more about MongoDB connection strings [here](https://www.prisma.io/docs/orm/overview/databases/mongodb).\n\n#### Specify a SQLite data source[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-sqlite-data-source \"Direct link to Specify a SQLite data source\")\n\nIn this example, the target database is located in a file called `dev.db`:\n\n```\ndatasource db {  provider = \"sqlite\"  url      = \"file:./dev.db\"}\n```\n\nLearn more about SQLite connection strings [here](https://www.prisma.io/docs/orm/overview/databases/sqlite).\n\n#### Specify a CockroachDB data source[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-cockroachdb-data-source \"Direct link to Specify a CockroachDB data source\")\n\nIn this example, the target database is available with the following credentials:\n\n*   User: `johndoe`\n*   Password: `mypassword`\n*   Host: `localhost`\n*   Port: `26257`\n*   Database name: `mydb`\n*   Schema name: `public`\n\n```\ndatasource db {  provider = \"cockroachdb\"  url      = \"postgresql://johndoe:mypassword@localhost:26257/mydb?schema=public\"}\n```\n\nThe format for connection strings is the same as for PostgreSQL. Learn more about PostgreSQL connection strings [here](https://www.prisma.io/docs/orm/overview/databases/postgresql).\n\n## `generator`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generator \"Direct link to generator\")\n\nDefines a [generator](https://www.prisma.io/docs/orm/prisma-schema/overview/generators) in the Prisma schema.\n\n### Fields[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#fields-1 \"Direct link to Fields\")\n\nA `generator` block accepts the following fields:\n\nName\n\nRequired\n\nType\n\nDescription\n\n`provider`\n\n**Yes**\n\nString (file path) or Enum (`prisma-client-js`)\n\nDescribes which [generator](https://www.prisma.io/docs/orm/prisma-schema/overview/generators) to use. This can point to a file that implements a generator or specify a built-in generator directly.\n\n`output`\n\nNo\n\nString (file path)\n\nDetermines the location for the generated client, [learn more](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client#using-a-custom-output-path). **Default**: `node_modules/.prisma/client`\n\n`previewFeatures`\n\nNo\n\nList of Enums\n\nUse intellisense to see list of currently available Preview features (`Ctrl+Space` in Visual Studio Code) **Default**: none\n\n`engineType`\n\nNo\n\nEnum (`library` or `binary`)\n\nDefines the [query engine](https://www.prisma.io/docs/orm/more/under-the-hood/engines) type to download and use. **Default**: `library`\n\n`binaryTargets`\n\nNo\n\nList of Enums (see below)\n\nSpecify the OS on which the Prisma Client will run to ensure compatibility of the [query engine](https://www.prisma.io/docs/orm/more/under-the-hood/engines). **Default**: `native`\n\n#### `binaryTargets` options[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#binarytargets-options \"Direct link to binarytargets-options\")\n\nThe following tables list all supported operating systems with the name of platform to specify in [`binaryTargets`](https://www.prisma.io/docs/orm/prisma-schema/overview/generators#binary-targets).\n\nUnless specified otherwise, the default supported CPU architecture is x86\\_64.\n\n##### macOS[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#macos \"Direct link to macOS\")\n\nBuild OS\n\nPrisma engine build name\n\nmacOS Intel x86\\_64\n\n`darwin`\n\nmacOS ARM64\n\n`darwin-arm64`\n\n##### Windows[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#windows \"Direct link to Windows\")\n\nBuild OS\n\nPrisma engine build name\n\nWindows\n\n`windows`\n\n##### Linux (Alpine on x86\\_64 architectures)[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#linux-alpine-on-x86_64-architectures \"Direct link to Linux (Alpine on x86_64 architectures)\")\n\nBuild OS\n\nPrisma engine build name\n\nOpenSSL\n\nAlpine (3.17 and newer)\n\n`linux-musl-openssl-3.0.x`\\*\n\n3.0.x\n\nAlpine (3.16 and older)\n\n`linux-musl`\n\n1.1.x\n\n\\* Available in Prisma ORM versions 4.8.0 and later.\n\n##### Linux (Alpine on ARM64 architectures)[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#linux-alpine-on-arm64-architectures \"Direct link to Linux (Alpine on ARM64 architectures)\")\n\nBuild OS\n\nPrisma engine build name\n\nOpenSSL\n\nAlpine (3.17 and newer)\n\n`linux-musl-arm64-openssl-3.0.x`\\*\n\n3.0.x\n\nAlpine (3.16 and older)\n\n`linux-musl-arm64-openssl-1.1.x`\\*\n\n1.1.x\n\n\\* Available in Prisma ORM versions 4.10.0 and later.\n\n##### Linux (Debian), x86\\_64[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#linux-debian-x86_64 \"Direct link to Linux (Debian), x86_64\")\n\nBuild OS\n\nPrisma engine build name\n\nOpenSSL\n\nDebian 8 (Jessie)\n\n`debian-openssl-1.0.x`\n\n1.0.x\n\nDebian 9 (Stretch)\n\n`debian-openssl-1.1.x`\n\n1.1.x\n\nDebian 10 (Buster)\n\n`debian-openssl-1.1.x`\n\n1.1.x\n\nDebian 11 (Bullseye)\n\n`debian-openssl-1.1.x`\n\n1.1.x\n\nDebian 12 (Bookworm)\n\n`debian-openssl-3.0.x`\n\n3.0.x\n\n##### Linux (Ubuntu), x86\\_64[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#linux-ubuntu-x86_64 \"Direct link to Linux (Ubuntu), x86_64\")\n\nBuild OS\n\nPrisma engine build name\n\nOpenSSL\n\nUbuntu 14.04 (trusty)\n\n`debian-openssl-1.0.x`\n\n1.0.x\n\nUbuntu 16.04 (xenial)\n\n`debian-openssl-1.0.x`\n\n1.0.x\n\nUbuntu 18.04 (bionic)\n\n`debian-openssl-1.1.x`\n\n1.1.x\n\nUbuntu 19.04 (disco)\n\n`debian-openssl-1.1.x`\n\n1.1.x\n\nUbuntu 20.04 (focal)\n\n`debian-openssl-1.1.x`\n\n1.1.x\n\nUbuntu 21.04 (hirsute)\n\n`debian-openssl-1.1.x`\n\n1.1.x\n\nUbuntu 22.04 (jammy)\n\n`debian-openssl-3.0.x`\n\n3.0.x\n\nUbuntu 23.04 (lunar)\n\n`debian-openssl-3.0.x`\n\n3.0.x\n\n##### Linux (CentOS), x86\\_64[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#linux-centos-x86_64 \"Direct link to Linux (CentOS), x86_64\")\n\nBuild OS\n\nPrisma engine build name\n\nOpenSSL\n\nCentOS 7\n\n`rhel-openssl-1.0.x`\n\n1.0.x\n\nCentOS 8\n\n`rhel-openssl-1.1.x`\n\n1.1.x\n\n##### Linux (Fedora), x86\\_64[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#linux-fedora-x86_64 \"Direct link to Linux (Fedora), x86_64\")\n\nBuild OS\n\nPrisma engine build name\n\nOpenSSL\n\nFedora 28\n\n`rhel-openssl-1.1.x`\n\n1.1.x\n\nFedora 29\n\n`rhel-openssl-1.1.x`\n\n1.1.x\n\nFedora 30\n\n`rhel-openssl-1.1.x`\n\n1.1.x\n\nFedora 36\n\n`rhel-openssl-3.0.x`\n\n3.0.x\n\nFedora 37\n\n`rhel-openssl-3.0.x`\n\n3.0.x\n\nFedora 38\n\n`rhel-openssl-3.0.x`\n\n3.0.x\n\n##### Linux (Linux Mint), x86\\_64[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#linux-linux-mint-x86_64 \"Direct link to Linux (Linux Mint), x86_64\")\n\nBuild OS\n\nPrisma engine build name\n\nOpenSSL\n\nLinux Mint 18\n\n`debian-openssl-1.0.x`\n\n1.0.x\n\nLinux Mint 19\n\n`debian-openssl-1.1.x`\n\n1.1.x\n\nLinux Mint 20\n\n`debian-openssl-1.1.x`\n\n1.1.x\n\nLinux Mint 21\n\n`debian-openssl-3.0.x`\n\n3.0.x\n\n##### Linux (Arch Linux), x86\\_64[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#linux-arch-linux-x86_64 \"Direct link to Linux (Arch Linux), x86_64\")\n\nBuild OS\n\nPrisma engine build name\n\nOpenSSL\n\nArch Linux 2019.09.01\n\n`debian-openssl-1.1.x`\n\n1.1.x\n\nArch Linux 2023.04.23\n\n`debian-openssl-3.0.x`\n\n3.0.x\n\n##### Linux ARM64 (all major distros but Alpine)[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#linux-arm64-all-major-distros-but-alpine \"Direct link to Linux ARM64 (all major distros but Alpine)\")\n\nBuild OS\n\nPrisma engine build name\n\nOpenSSL\n\nLinux ARM64 glibc-based distro\n\n`linux-arm64-openssl-1.0.x`\n\n1.0.x\n\nLinux ARM64 glibc-based distro\n\n`linux-arm64-openssl-1.1.x`\n\n1.1.x\n\nLinux ARM64 glibc-based distro\n\n`linux-arm64-openssl-3.0.x`\n\n3.0.x\n\n### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-1 \"Direct link to Examples\")\n\n#### Specify the `prisma-client-js` generator with the default `output`, `previewFeatures`, `engineType` and `binaryTargets`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-the-prisma-client-js-generator-with-the-default-output-previewfeatures-enginetype-and-binarytargets \"Direct link to specify-the-prisma-client-js-generator-with-the-default-output-previewfeatures-enginetype-and-binarytargets\")\n\n```\ngenerator client {  provider = \"prisma-client-js\"}\n```\n\nNote that the above `generator` definition is **equivalent** to the following because it uses the default values for `output`, `engineType` and `binaryTargets` (and implicitly `previewFeatures`):\n\n```\ngenerator client {  provider      = \"prisma-client-js\"  output        = \"node_modules/.prisma/client\"  engineType    = \"library\"  binaryTargets = [\"native\"]}\n```\n\n#### Specify a custom `output` location for Prisma Client[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-custom-output-location-for-prisma-client \"Direct link to specify-a-custom-output-location-for-prisma-client\")\n\nThis example shows how to define a custom `output` location of the generated asset to override the default one.\n\n```\ngenerator client {  provider = \"prisma-client-js\"  output   = \"../src/generated/client\"}\n```\n\n#### Specify custom `binaryTargets` to ensure compatibility with the OS[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-custom-binarytargets-to-ensure-compatibility-with-the-os \"Direct link to specify-custom-binarytargets-to-ensure-compatibility-with-the-os\")\n\nThis example shows how to configure Prisma Client to run on `Ubuntu 19.04 (disco)` based on the table [above](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#linux-ubuntu-x86_64).\n\n```\ngenerator client {  provider      = \"prisma-client-js\"  binaryTargets = [\"debian-openssl-1.1.x\"]}\n```\n\n#### Specify a `provider` pointing to some custom generator implementation[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-provider-pointing-to-some-custom-generator-implementation \"Direct link to specify-a-provider-pointing-to-some-custom-generator-implementation\")\n\nThis example shows how to use a custom generator that's located in a directory called `my-generator`.\n\n```\ngenerator client {  provider = \"./my-generator\"}\n```\n\n## `model`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model \"Direct link to model\")\n\nDefines a Prisma [model](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-models) .\n\n*   Every record of a model must be _uniquely_ identifiable. You must define _at least_ one of the following attributes per model:\n    *   [`@unique`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unique)\n    *   [`@@unique`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unique-1)\n    *   [`@id`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#id)\n    *   [`@@id`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#id-1)\n\n#### Naming conventions[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#naming-conventions \"Direct link to Naming conventions\")\n\n*   Model names must adhere to the following regular expression: `[A-Za-z][A-Za-z0-9_]*`\n*   Model names must start with a letter and are typically spelled in [PascalCase](https://wiki.c2.com/?PascalCase)\n*   Model names should use the singular form (for example, `User` instead of `user`, `users` or `Users`)\n*   Prisma ORM has a number of **reserved words** that are being used by Prisma ORM internally and therefore cannot be used as a model name. You can find the reserved words [here](https://github.com/prisma/prisma/blob/main/packages/client/src/generation/generateClient.ts#L376) and [here](https://github.com/prisma/prisma-engines/blob/main/psl/parser-database/src/names/reserved_model_names.rs#L44).\n\n> **Note**: You can use the [`@@map` attribute](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map-1) to map a model (for example, `User`) to a table with a different name that does not match model naming conventions (for example, `users`).\n\n#### Order of fields[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#order-of-fields \"Direct link to Order of fields\")\n\n*   In version 2.3.0 and later, introspection lists model fields in the same order as the corresponding columns in the database. Relation fields are listed after scalar fields.\n\n### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-2 \"Direct link to Examples\")\n\n#### A model named `User` with two scalar fields[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#a-model-named-user-with-two-scalar-fields \"Direct link to a-model-named-user-with-two-scalar-fields\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  email String  @unique // `email` can not be optional because it's the only unique field on the model  name  String?}\n```\n\n## `model` fields[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-fields \"Direct link to model-fields\")\n\n[Fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-fields) are properties of models.\n\n#### Naming conventions[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#naming-conventions-1 \"Direct link to Naming conventions\")\n\n*   Must start with a letter\n*   Typically spelled in camelCase\n*   Must adhere to the following regular expression: `[A-Za-z][A-Za-z0-9_]*`\n\n> **Note**: You can use the [`@map` attribute](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map) to [map a field name to a column](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/custom-model-and-field-names) with a different name that does not match field naming conventions: e.g. `myField @map(\"my_field\")`.\n\n## `model` field scalar types[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-scalar-types \"Direct link to model-field-scalar-types\")\n\nThe _data source connector_ determines what _native database type_ each of Prisma ORM scalar type maps to. Similarly, the _generator_ determines what _type in the target programming language_ each of these types map to.\n\nPrisma models also have [model field types](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations) that define relations between models.\n\n### `String`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string \"Direct link to string\")\n\nVariable length text.\n\n#### Default type mappings[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-type-mappings \"Direct link to Default type mappings\")\n\nConnector\n\nDefault mapping\n\nPostgreSQL\n\n`text`\n\nSQL Server\n\n`nvarchar(1000)`\n\nMySQL\n\n`varchar(191)`\n\nMongoDB\n\n`String`\n\nSQLite\n\n`TEXT`\n\nCockroachDB\n\n`STRING`\n\n#### PostgreSQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#postgresql \"Direct link to PostgreSQL\")\n\nNative database type\n\nNative database type attribute\n\nNotes\n\n`text`\n\n`@db.Text`\n\n`char(x)`\n\n`@db.Char(x)`\n\n`varchar(x)`\n\n`@db.VarChar(x)`\n\n`bit(x)`\n\n`@db.Bit(x)`\n\n`varbit`\n\n`@db.VarBit`\n\n`uuid`\n\n`@db.Uuid`\n\n`xml`\n\n`@db.Xml`\n\n`inet`\n\n`@db.Inet`\n\n`citext`\n\n`@db.Citext`\n\nOnly available if [Citext extension is enabled](https://www.prisma.io/docs/orm/prisma-schema/data-model/unsupported-database-features#enable-postgresql-extensions-for-native-database-functions).\n\n#### MySQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mysql \"Direct link to MySQL\")\n\nNative database type\n\nNative database type attribute\n\n`VARCHAR(x)`\n\n`@db.VarChar(x)`\n\n`TEXT`\n\n`@db.Text`\n\n`CHAR(x)`\n\n`@db.Char(x)`\n\n`TINYTEXT`\n\n`@db.TinyText`\n\n`MEDIUMTEXT`\n\n`@db.MediumText`\n\n`LONGTEXT`\n\n`@db.LongText`\n\nYou can use Prisma Migrate to map `@db.Bit(1)` to `String`:\n\n```\nmodel Model {  /* ... */  myField String @db.Bit(1)}\n```\n\n#### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb \"Direct link to MongoDB\")\n\n`String`\n\nNative database type attribute\n\nNotes\n\n`@db.String`\n\n`@db.ObjectId`\n\nRequired if the underlying BSON type is `OBJECT_ID` (ID fields, relation scalars)\n\n#### Microsoft SQL Server[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#microsoft-sql-server \"Direct link to Microsoft SQL Server\")\n\nNative database type\n\nNative database type attribute\n\n`char(x)`\n\n`@db.Char(x)`\n\n`nchar(x)`\n\n`@db.NChar(x)`\n\n`varchar(x)`\n\n`@db.VarChar(x)`\n\n`nvarchar(x)`\n\n`@db.NVarChar(x)`\n\n`text`\n\n`@db.Text`\n\n`ntext`\n\n`@db.NText`\n\n`xml`\n\n`@db.Xml`\n\n`uniqueidentifier`\n\n`@db.UniqueIdentifier`\n\n#### SQLite[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#sqlite \"Direct link to SQLite\")\n\n`TEXT`\n\n#### CockroachDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cockroachdb \"Direct link to CockroachDB\")\n\nNative database type\n\nNative database type attribute\n\nNotes\n\n`STRING(x)` | `TEXT(x)` | `VARCHAR(x)`\n\n`@db.String(x)`\n\n`CHAR(x)`\n\n`@db.Char(x)`\n\n`\"char\"`\n\n`@db.CatalogSingleChar`\n\n`BIT(x)`\n\n`@db.Bit(x)`\n\n`VARBIT`\n\n`@db.VarBit`\n\n`UUID`\n\n`@db.Uuid`\n\n`INET`\n\n`@db.Inet`\n\nNote that the `xml` and `citext` types supported in PostgreSQL are not currently supported in CockroachDB.\n\n#### Clients[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#clients \"Direct link to Clients\")\n\nPrisma Client JS\n\n`string`\n\n### `Boolean`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#boolean \"Direct link to boolean\")\n\nTrue or false value.\n\n#### Default type mappings[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-type-mappings-1 \"Direct link to Default type mappings\")\n\nConnector\n\nDefault mapping\n\nPostgreSQL\n\n`boolean`\n\nSQL Server\n\n`tinyint`\n\nMySQL\n\n`TINYINT(1)`\n\nMongoDB\n\n`Bool`\n\nSQLite\n\n`INTEGER`\n\nCockroachDB\n\n`BOOL`\n\n#### PostgreSQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#postgresql-1 \"Direct link to PostgreSQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`boolean`\n\n`@db.Boolean`\n\n#### MySQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mysql-1 \"Direct link to MySQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`TINYINT(1)`\n\n`@db.TinyInt(1)`\n\n`TINYINT` maps to `Int` if the max length is greater than 1 (for example, `TINYINT(2)`) _or_ the default value is anything other than `1`, `0`, or `NULL`\n\n`BIT(1)`\n\n`@db.Bit`\n\n#### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-1 \"Direct link to MongoDB\")\n\n`Bool`\n\n#### Microsoft SQL Server[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#microsoft-sql-server-1 \"Direct link to Microsoft SQL Server\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`bit`\n\n`@db.Bit`\n\n#### SQLite[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#sqlite-1 \"Direct link to SQLite\")\n\n`INTEGER`\n\n#### CockroachDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cockroachdb-1 \"Direct link to CockroachDB\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`BOOL`\n\n`@db.Bool`\n\n#### Clients[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#clients-1 \"Direct link to Clients\")\n\nPrisma Client JS\n\n`boolean`\n\n### `Int`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#int \"Direct link to int\")\n\n#### Default type mappings[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-type-mappings-2 \"Direct link to Default type mappings\")\n\nConnector\n\nDefault mapping\n\nPostgreSQL\n\n`integer`\n\nSQL Server\n\n`int`\n\nMySQL\n\n`INT`\n\nMongoDB\n\n`Int`\n\nSQLite\n\n`INTEGER`\n\nCockroachDB\n\n`INT`\n\n#### PostgreSQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#postgresql-2 \"Direct link to PostgreSQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`integer` | `int`, `int4`\n\n`@db.Integer`\n\n`smallint` | `int2`\n\n`@db.SmallInt`\n\n`smallserial` | `serial2`\n\n`@db.SmallInt @default(autoincrement())`\n\n`serial` | `serial4`\n\n`@db.Int @default(autoincrement())`\n\n`oid`\n\n`@db.Oid`\n\n#### MySQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mysql-2 \"Direct link to MySQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`INT`\n\n`@db.Int`\n\n`INT UNSIGNED`\n\n`@db.UnsignedInt`\n\n`SMALLINT`\n\n`@db.SmallInt`\n\n`SMALLINT UNSIGNED`\n\n`@db.UnsignedSmallInt`\n\n`MEDIUMINT`\n\n`@db.MediumInt`\n\n`MEDIUMINT UNSIGNED`\n\n`@db.UnsignedMediumInt`\n\n`TINYINT`\n\n`@db.TinyInt`\n\n`TINYINT` maps to `Int` if the max length is greater than 1 (for example, `TINYINT(2)`) _or_ the default value is anything other than `1`, `0`, or `NULL`. `TINYINT(1)` maps to `Boolean`.\n\n`TINYINT UNSIGNED`\n\n`@db.UnsignedTinyInt`\n\n`TINYINT(1) UNSIGNED` maps to `Int`, not `Boolean`\n\n`YEAR`\n\n`@db.Year`\n\n#### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-2 \"Direct link to MongoDB\")\n\n`Int`\n\nNative database type attribute\n\nNotes\n\n`@db.Int`\n\n`@db.Long`\n\n#### Microsoft SQL Server[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#microsoft-sql-server-2 \"Direct link to Microsoft SQL Server\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`int`\n\n`@db.Int`\n\n`smallint`\n\n`@db.SmallInt`\n\n`tinyint`\n\n`@db.TinyInt`\n\n`bit`\n\n`@db.Bit`\n\n#### SQLite[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#sqlite-2 \"Direct link to SQLite\")\n\n`INTEGER`\n\n#### CockroachDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cockroachdb-2 \"Direct link to CockroachDB\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`INTEGER` | `INT` | `INT8`\n\n`@db.Int8`\n\nNote that this differs from PostgreSQL, where `integer` and `int` are aliases for `int4` and map to `@db.Integer`\n\n`INT4`\n\n`@db.Int4`\n\n`INT2` | `SMALLINT`\n\n`@db.Int2`\n\n`SMALLSERIAL` | `SERIAL2`\n\n`@db.Int2 @default(autoincrement())`\n\n`SERIAL` | `SERIAL4`\n\n`@db.Int4 @default(autoincrement())`\n\n`SERIAL8` | `BIGSERIAL`\n\n`@db.Int8 @default(autoincrement())`\n\n#### Clients[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#clients-2 \"Direct link to Clients\")\n\nPrisma Client JS\n\n`number`\n\n### `BigInt`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#bigint \"Direct link to bigint\")\n\n`BigInt` is available in version [2.17.0](https://github.com/prisma/prisma/releases/tag/2.17.0) and later.\n\n#### Default type mappings[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-type-mappings-3 \"Direct link to Default type mappings\")\n\nConnector\n\nDefault mapping\n\nPostgreSQL\n\n`bigint`\n\nSQL Server\n\n`int`\n\nMySQL\n\n`BIGINT`\n\nMongoDB\n\n`Long`\n\nSQLite\n\n`INTEGER`\n\nCockroachDB\n\n`INTEGER`\n\n#### PostgreSQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#postgresql-3 \"Direct link to PostgreSQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`bigint` | `int8`\n\n`@db.BigInt`\n\n`bigserial` | `serial8`\n\n`@db.BigInt @default(autoincrement())`\n\n#### MySQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mysql-3 \"Direct link to MySQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`BIGINT`\n\n`@db.BigInt`\n\n`SERIAL`\n\n`@db.UnsignedBigInt @default(autoincrement())`\n\n#### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-3 \"Direct link to MongoDB\")\n\n`Long`\n\n#### Microsoft SQL Server[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#microsoft-sql-server-3 \"Direct link to Microsoft SQL Server\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`bigint`\n\n`@db.BigInt`\n\n#### SQLite[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#sqlite-3 \"Direct link to SQLite\")\n\n`INTEGER`\n\n#### CockroachDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cockroachdb-3 \"Direct link to CockroachDB\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`BIGINT` | `INT` | `INT8`\n\n`@db.Int8`\n\nNote that this differs from PostgreSQL, where `int` is an alias for `int4`\n\n`bigserial` | `serial8`\n\n`@db.Int8 @default(autoincrement())`\n\n#### Clients[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#clients-3 \"Direct link to Clients\")\n\nClient\n\nType\n\nDescription\n\nPrisma Client JS\n\n[`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt)\n\nSee [examples of working with `BigInt`](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types#working-with-bigint)\n\n### `Float`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#float \"Direct link to float\")\n\nFloating point number.\n\n> `Float` maps to `Double` in [2.17.0](https://github.com/prisma/prisma/releases/tag/2.17.0) and later - see [release notes](https://github.com/prisma/prisma/releases/tag/2.17.0) and [Video: Changes to the default mapping of Float in Prisma ORM 2.17.0](https://www.youtube.com/watch?v=OsuGP_xNHco&amp%3Bab_channel=Prisma) for more information about this change.\n\n#### Default type mappings[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-type-mappings-4 \"Direct link to Default type mappings\")\n\nConnector\n\nDefault mapping\n\nPostgreSQL\n\n`double precision`\n\nSQL Server\n\n`float(53)`\n\nMySQL\n\n`DOUBLE`\n\nMongoDB\n\n`Double`\n\nSQLite\n\n`REAL`\n\nCockroachDB\n\n`DOUBLE PRECISION`\n\n#### PostgreSQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#postgresql-4 \"Direct link to PostgreSQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`double precision`\n\n`@db.DoublePrecision`\n\n`real`\n\n`@db.Real`\n\n#### MySQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mysql-4 \"Direct link to MySQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`FLOAT`\n\n`@db.Float`\n\n`DOUBLE`\n\n`@db.Double`\n\n#### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-4 \"Direct link to MongoDB\")\n\n`Double`\n\n#### Microsoft SQL Server[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#microsoft-sql-server-4 \"Direct link to Microsoft SQL Server\")\n\nNative database types\n\nNative database type attribute\n\n`float`\n\n`@db.Float`\n\n`money`\n\n`@db.Money`\n\n`smallmoney`\n\n`@db.SmallMoney`\n\n`real`\n\n`@db.Real`\n\n#### SQLite connector[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#sqlite-connector \"Direct link to SQLite connector\")\n\n`REAL`\n\n#### CockroachDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cockroachdb-4 \"Direct link to CockroachDB\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`DOUBLE PRECISION` | `FLOAT8`\n\n`@db.Float8`\n\n`REAL` | `FLOAT4` | `FLOAT`\n\n`@db.Float4`\n\n#### Clients[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#clients-4 \"Direct link to Clients\")\n\nPrisma Client JS\n\n`number`\n\n### `Decimal`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#decimal \"Direct link to decimal\")\n\n#### Default type mappings[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-type-mappings-5 \"Direct link to Default type mappings\")\n\nConnector\n\nDefault mapping\n\nPostgreSQL\n\n`decimal(65,30)`\n\nSQL Server\n\n`decimal(32,16)`\n\nMySQL\n\n`DECIMAL(65,30)`\n\nMongoDB\n\n[Not supported](https://github.com/prisma/prisma/issues/12637)\n\nSQLite\n\n`DECIMAL`\n\nCockroachDB\n\n`DECIMAL`\n\n#### PostgreSQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#postgresql-5 \"Direct link to PostgreSQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`decimal` | `numeric`\n\n`@db.Decimal(p, s)`†\n\n`money`\n\n`@db.Money`\n\n*   † `p` (precision), the maximum total number of decimal digits to be stored. `s` (scale), the number of decimal digits that are stored to the right of the decimal point.\n\n#### MySQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mysql-5 \"Direct link to MySQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`DECIMAL` | `NUMERIC`\n\n`@db.Decimal(p, s)`†\n\n*   † `p` (precision), the maximum total number of decimal digits to be stored. `s` (scale), the number of decimal digits that are stored to the right of the decimal point.\n\n#### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-5 \"Direct link to MongoDB\")\n\n[Not supported](https://github.com/prisma/prisma/issues/12637).\n\n#### Microsoft SQL Server[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#microsoft-sql-server-5 \"Direct link to Microsoft SQL Server\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`decimal` | `numeric`\n\n`@db.Decimal(p, s)`†\n\n*   † `p` (precision), the maximum total number of decimal digits to be stored. `s` (scale), the number of decimal digits that are stored to the right of the decimal point.\n\n#### SQLite[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#sqlite-4 \"Direct link to SQLite\")\n\n`DECIMAL` (changed from `REAL` in 2.17.0)\n\n#### CockroachDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cockroachdb-5 \"Direct link to CockroachDB\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`DECIMAL` | `DEC` | `NUMERIC`\n\n`@db.Decimal(p, s)`†\n\n`money`\n\nNot yet\n\nPostgreSQL's `money` type is not yet supported by CockroachDB\n\n*   † `p` (precision), the maximum total number of decimal digits to be stored. `s` (scale), the number of decimal digits that are stored to the right of the decimal point.\n\n#### Clients[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#clients-5 \"Direct link to Clients\")\n\nClient\n\nType\n\nDescription\n\nPrisma Client JS\n\n[`Decimal`](https://mikemcl.github.io/decimal.js/)\n\nSee [examples of working with `Decimal`](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types#working-with-decimal)\n\n### `DateTime`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#datetime \"Direct link to datetime\")\n\n*   Prisma Client returns all `DateTime` as native [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) objects.\n*   Currently, Prisma ORM [does not support](https://github.com/prisma/prisma/issues/5006) [zero dates](https://dev.mysql.com/doc/refman/8.3/en/date-and-time-types.html#:~:text=The%20following%20table%20shows%20the%20format%20of%20the%20%E2%80%9Czero%E2%80%9D%20value%20for%20each%20type) (`0000-00-00 00:00:00`, `0000-00-00`, `00:00:00`) in MySQL.\n\n#### Default type mappings[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-type-mappings-6 \"Direct link to Default type mappings\")\n\nConnector\n\nDefault mapping\n\nPostgreSQL\n\n`timestamp(3)`\n\nSQL Server\n\n`datetime2`\n\nMySQL\n\n`DATETIME(3)`\n\nMongoDB\n\n`Timestamp`\n\nSQLite\n\n`NUMERIC`\n\nCockroachDB\n\n`TIMESTAMP`\n\n#### PostgreSQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#postgresql-6 \"Direct link to PostgreSQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`timestamp(x)`\n\n`@db.Timestamp(x)`\n\n`timestamptz(x)`\n\n`@db.Timestamptz(x)`\n\n`date`\n\n`@db.Date`\n\n`time(x)`\n\n`@db.Time(x)`\n\n`timetz(x)`\n\n`@db.Timetz(x)`\n\n#### MySQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mysql-6 \"Direct link to MySQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`DATETIME(x)`\n\n`@db.DateTime(x)`\n\n`DATE(x)`\n\n`@db.Date(x)`\n\n`TIME(x)`\n\n`@db.Time(x)`\n\n`TIMESTAMP(x)`\n\n`@db.Timestamp(x)`\n\nYou can also use MySQL's `YEAR` type with `Int`:\n\n#### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-6 \"Direct link to MongoDB\")\n\n`Timestamp`\n\n#### Microsoft SQL Server[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#microsoft-sql-server-6 \"Direct link to Microsoft SQL Server\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`date`\n\n`@db.Date`\n\n`time`\n\n`@db.Time`\n\n`datetime`\n\n`@db.DateTime`\n\n`datetime2`\n\n`@db.DateTime2`\n\n`smalldatetime`\n\n`@db.SmallDateTime`\n\n`datetimeoffset`\n\n`@db.DateTimeOffset`\n\n#### SQLite[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#sqlite-5 \"Direct link to SQLite\")\n\n`NUMERIC` or `STRING`. If the underlying data type is `STRING`, you must use one of the following formats:\n\n*   [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) (`1996-12-19T16:39:57-08:00`)\n*   [RFC 2822](https://tools.ietf.org/html/rfc2822#section-3.3) (`Tue, 1 Jul 2003 10:52:37 +0200`)\n\n#### CockroachDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cockroachdb-6 \"Direct link to CockroachDB\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`TIMESTAMP(x)`\n\n`@db.Timestamp(x)`\n\n`TIMESTAMPTZ(x)`\n\n`@db.Timestamptz(x)`\n\n`DATE`\n\n`@db.Date`\n\n`TIME(x)`\n\n`@db.Time(x)`\n\n`TIMETZ(x)`\n\n`@db.Timetz(x)`\n\n#### Clients[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#clients-6 \"Direct link to Clients\")\n\nPrisma Client JS\n\n`Date`\n\n### `Json`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#json \"Direct link to json\")\n\nA JSON object.\n\n#### Default type mappings[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-type-mappings-7 \"Direct link to Default type mappings\")\n\nConnector\n\nDefault mapping\n\nPostgreSQL\n\n`jsonb`\n\nSQL Server\n\n[Not supported](https://github.com/prisma/prisma/issues/7417)\n\nMySQL\n\n`JSON`\n\nMongoDB\n\n[A valid `BSON` object (Relaxed mode)](https://docs.mongodb.com/manual/reference/mongodb-extended-json/)\n\nSQLite\n\nNot supported\n\nCockroachDB\n\n`JSONB`\n\n#### PostgreSQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#postgresql-7 \"Direct link to PostgreSQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`json`\n\n`@db.Json`\n\n`jsonb`\n\n`@db.JsonB`\n\n#### MySQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mysql-7 \"Direct link to MySQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`JSON`\n\n`@db.Json`\n\n#### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-7 \"Direct link to MongoDB\")\n\n[A valid `BSON` object (Relaxed mode)](https://docs.mongodb.com/manual/reference/mongodb-extended-json/)\n\n#### Microsoft SQL Server[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#microsoft-sql-server-7 \"Direct link to Microsoft SQL Server\")\n\nMicrosoft SQL Server does not have a specific data type for JSON - however, there are a number of [built-in functions for reading and modifying JSON](https://docs.microsoft.com/en-us/sql/relational-databases/json/json-data-sql-server?view=sql-server-ver15#extract-values-from-json-text-and-use-them-in-queries).\n\nNative database types\n\nNative database type attribute\n\n`JSON`\n\n`@db.NVarChar`\n\n#### SQLite[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#sqlite-6 \"Direct link to SQLite\")\n\nNot supported\n\n#### CockroachDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cockroachdb-7 \"Direct link to CockroachDB\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`JSON` | `JSONB`\n\n`@db.JsonB`\n\n#### Clients[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#clients-7 \"Direct link to Clients\")\n\nPrisma Client JS\n\n`object`\n\n### `Bytes`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#bytes \"Direct link to bytes\")\n\n`Bytes` is available in version [2.17.0](https://github.com/prisma/prisma/releases/tag/2.17.0) and later.\n\n#### Default type mappings[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-type-mappings-8 \"Direct link to Default type mappings\")\n\nConnector\n\nDefault mapping\n\nPostgreSQL\n\n`bytea`\n\nSQL Server\n\n`varbinary`\n\nMySQL\n\n`LONGBLOB`\n\nMongoDB\n\n`BinData`\n\nSQLite\n\n`BLOB`\n\nCockroachDB\n\n`BYTES`\n\n#### PostgreSQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#postgresql-8 \"Direct link to PostgreSQL\")\n\nNative database types\n\nNative database type attribute\n\n`bytea`\n\n`@db.ByteA`\n\n#### MySQL[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mysql-8 \"Direct link to MySQL\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`LONGBLOB`\n\n`@db.LongBlob`\n\n`BINARY`\n\n`@db.Binary`\n\n`VARBINARY`\n\n`@db.VarBinary`\n\n`TINYBLOB`\n\n`@db.TinyBlob`\n\n`BLOB`\n\n`@db.Blob`\n\n`MEDIUMBLOB`\n\n`@db.MediumBlob`\n\n`BIT`\n\n`@db.Bit`\n\n#### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-8 \"Direct link to MongoDB\")\n\n`BinData`\n\nNative database type attribute\n\nNotes\n\n`@db.ObjectId`\n\nRequired if the underlying BSON type is `OBJECT_ID` (ID fields, relation scalars)\n\n`@db.BinData`\n\n#### Microsoft SQL Server[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#microsoft-sql-server-8 \"Direct link to Microsoft SQL Server\")\n\nNative database types\n\nNative database type attribute\n\nNotes\n\n`binary`\n\n`@db.Binary`\n\n`varbinary`\n\n`@db.VarBinary`\n\n`image`\n\n`@db.Image`\n\n#### SQLite[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#sqlite-7 \"Direct link to SQLite\")\n\n`BLOB`\n\n#### CockroachDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cockroachdb-8 \"Direct link to CockroachDB\")\n\nNative database types\n\nNative database type attribute\n\n`BYTES` | `BYTEA` | `BLOB`\n\n`@db.Bytes`\n\n#### Clients[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#clients-8 \"Direct link to Clients\")\n\nClient\n\nType\n\nDescription\n\nPrisma Client JS\n\n[`Buffer`](https://nodejs.org/api/buffer.html)\n\nSee [examples of working with `Buffer`](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types#working-with-bytes)\n\n### `Unsupported`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unsupported \"Direct link to unsupported\")\n\nwarning\n\n**Not supported by MongoDB**  \nThe [MongoDB connector](https://www.prisma.io/docs/orm/overview/databases/mongodb) does not support the `Unsupported` type.\n\nThe `Unsupported` type was introduced in [2.17.0](https://github.com/prisma/prisma/releases/tag/2.17.0) and allows you to represent data types in the Prisma schema that are not supported by Prisma Client. Fields of type `Unsupported` can be created during Introspection with `prisma db pull` or written by hand, and created in the database with Prisma Migrate or `db push`.\n\n*   Fields with `Unsupported` types are not available in the generated client.\n    \n*   If a model contains a **required** `Unsupported` type, `prisma.model.create(..)`, `prisma.model.update(...)` and `prisma.model.upsert(...)` are not available in Prisma Client.\n    \n*   When you introspect a database that contains unsupported types, Prisma ORM will provide the following warning:\n    \n    ```\n    *** WARNING ***These fields are not supported by Prisma Client, because Prisma does not currently support their types.* Model \"Post\", field: \"circle\", original data type: \"circle\"\n    ```\n    \n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-3 \"Direct link to Examples\")\n\n```\nmodel Star {  id       Int                    @id @default(autoincrement())  position Unsupported(\"circle\")?  example1 Unsupported(\"circle\")  circle   Unsupported(\"circle\")? @default(dbgenerated(\"'<(10,4),11>'::circle\"))}\n```\n\n## `model` field type modifiers[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-type-modifiers \"Direct link to model-field-type-modifiers\")\n\n### `[]` modifier[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#-modifier \"Direct link to -modifier\")\n\nMakes a field a list.\n\n*   Cannot be optional (for example `Post[]?`).\n\n##### Relational databases[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#relational-databases \"Direct link to Relational databases\")\n\n*   Scalar lists (arrays) are only supported in the data model if your database natively supports them. Currently, scalar lists are therefore only supported when using PostgreSQL or CockroachDB (since MySQL and SQLite don't natively support scalar lists).\n\n##### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-9 \"Direct link to MongoDB\")\n\n*   Scalar lists are supported\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-4 \"Direct link to Examples\")\n\n##### Define a scalar list[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#define-a-scalar-list \"Direct link to Define a scalar list\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id             Int      @id @default(autoincrement())  favoriteColors String[]}\n```\n\n##### Define a scalar list with a default value[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#define-a-scalar-list-with-a-default-value \"Direct link to Define a scalar list with a default value\")\n\nAvailable in version 4.0.0 and later.\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id             Int      @id @default(autoincrement())  favoriteColors String[] @default([\"red\", \"blue\", \"green\"])}\n```\n\n### `?` modifier[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#-modifier-1 \"Direct link to -modifier-1\")\n\nMakes a field optional.\n\n*   Cannot be used with a list field (for example, `Posts[]`)\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-5 \"Direct link to Examples\")\n\n##### Optional `name` field[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#optional-name-field \"Direct link to optional-name-field\")\n\n```\nmodel User {  id   Int     @id @default(autoincrement())  name String?}\n```\n\n## Attributes[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attributes \"Direct link to Attributes\")\n\nAttributes modify the behavior of a [field](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-fields) or block (e.g. [models](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model)). There are two ways to add attributes to your data model:\n\n*   _Field_ attributes are prefixed with `@`\n*   _Block_ attributes are prefixed with `@@`\n\nSome attributes take arguments. Arguments in attributes are always named, but in most cases the argument _name_ can be omitted.\n\n> **Note**: The leading underscore in a signature means the _argument name_ can be omitted.\n\n### `@id`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#id \"Direct link to id\")\n\nDefines a single-field ID on the model.\n\n##### General[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#general \"Direct link to General\")\n\n*   Cannot be defined on a relation field\n*   Cannot be optional\n\n##### Relational databases[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#relational-databases-1 \"Direct link to Relational databases\")\n\n*   Corresponding database construct: `PRIMARY KEY`\n    \n*   Can be annotated with a [`@default`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default) attribute that uses [functions](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attribute-functions) to auto-generate an ID:\n    \n    *   [`autoincrement()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#autoincrement)\n    *   [`cuid()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cuid)\n    *   [`uuid()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#uuid)\n*   Can be defined on any scalar field (`String`, `Int`, `enum`)\n    \n\n##### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-10 \"Direct link to MongoDB\")\n\n*   Corresponding database construct: [Any valid BSON type, except arrays](https://docs.mongodb.com/manual/core/document/#the-_id-field)\n    \n*   Every model must define an `@id` field\n    \n*   The [underlying ID field name is always `_id`](https://docs.mongodb.com/manual/core/document/#the-_id-field), and must be mapped with `@map(\"_id\")`\n    \n*   Can be defined on any scalar field (`String`, `Int`, `enum`) unless you want to use `ObjectId` in your database\n    \n*   To use an [`ObjectId`](https://docs.mongodb.com/manual/reference/method/ObjectId/) as your ID, you must:\n    \n    *   Use the `String` or `Bytes` field type\n        \n    *   Annotate your field with `@db.ObjectId`:\n        \n        ```\n        id   String  @db.ObjectId  @map(\"_id\")\n        ```\n        \n    *   Optionally, annotate your field with a [`@default`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default) attribute that uses [the `auto()` function](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#auto) to auto-generate an `ObjectId`\n        \n        ```\n        id   String  @db.ObjectId  @map(\"_id\") @default(auto())\n        ```\n        \n*   [`cuid()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cuid) and [`uuid()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#uuid) are supported but do not generate a valid `ObjectId` - use `auto()` instead for `@id`\n    \n*   `autoincrement()` is **not supported**\n    \n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#arguments \"Direct link to Arguments\")\n\nName\n\nRequired\n\nType\n\nDescription\n\n`map`\n\n**No**\n\n`String`\n\nThe name of the underlying primary key constraint in the database.\n\nNot supported for MySQL or MongoDB.\n\n`length`\n\n**No**\n\n`number`\n\nAllows you to specify a maximum length for the subpart of the value to be indexed.\n\nMySQL only. In preview in versions 3.5.0 and later, and in general availability in versions 4.0.0 and later.\n\n`sort`\n\n**No**\n\n`String`\n\nAllows you to specify in what order the entries of the ID are stored in the database. The available options are `Asc` and `Desc`.\n\nSQL Server only. In preview in versions 3.5.0 and later, and in general availability in versions 4.0.0 and later.\n\n`clustered`\n\n**No**\n\n`Boolean`\n\nDefines whether the ID is clustered or non-clustered. Defaults to `true`.\n\nSQL Server only. In preview in versions 3.13.0 and later, and in general availability in versions 4.0.0 and later.\n\n#### Signature[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#signature \"Direct link to Signature\")\n\n```\n@id(map: String?, length: number?, sort: String?, clustered: Boolean?)\n```\n\n> **Note**: Before version 4.0.0, or 3.5.0 with the `extendedIndexes` Preview feature enabled, the signature was:\n\n> **Note**: Before version 3.0.0, the signature was:\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-6 \"Direct link to Examples\")\n\nIn most cases, you want your database to create the ID. To do this, annotate the ID field with the `@default` attribute and initialize the field with a [function](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attribute-functions).\n\n##### Generate autoincrementing integers as IDs (Relational databases only)[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generate-autoincrementing-integers-as-ids-relational-databases-only \"Direct link to Generate autoincrementing integers as IDs (Relational databases only)\")\n\n```\nmodel User {  id   Int    @id @default(autoincrement())  name String}\n```\n\n##### Generate `ObjectId` as IDs (MongoDB only)[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generate-objectid-as-ids-mongodb-only \"Direct link to generate-objectid-as-ids-mongodb-only\")\n\n```\nmodel User {  id   String @id @default(auto()) @map(\"_id\") @db.ObjectId  name String}\n```\n\n##### Generate `cuid()` values as IDs[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generate-cuid-values-as-ids \"Direct link to generate-cuid-values-as-ids\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id   String @id @default(cuid())  name String}\n```\n\n##### Generate `uuid()` values as IDs[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generate-uuid-values-as-ids \"Direct link to generate-uuid-values-as-ids\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id   String @id @default(uuid())  name String}\n```\n\n##### Single-field IDs _without_ default values[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#single-field-ids-without-default-values \"Direct link to single-field-ids-without-default-values\")\n\nIn the following example, `id` does not have a default value:\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id   String @id  name String}\n```\n\nNote that in the above case, you _must_ provide your own ID values when creating new records for the `User` model using Prisma Client, e.g.:\n\n```\nconst newUser = await prisma.user.create({  data: {    id: 1,    name: 'Alice',  },})\n```\n\n###### Specify an ID on relation scalar field without a default value[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-an-id-on-relation-scalar-field-without-a-default-value \"Direct link to Specify an ID on relation scalar field without a default value\")\n\nIn the following example, `authorId` is a both a relation scalar and the ID of `Profile`:\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel Profile {  authorId Int    @id  author   User   @relation(fields: [authorId], references: [id])  bio      String}model User {  id      Int      @id  email   String   @unique  name    String?  profile Profile?}\n```\n\nIn this scenario, you cannot create a `Profile` only - you must use Prisma Client's [nested writes](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#nested-writes) create a `User` **or** connect the profile to an existing user.\n\nThe following example creates a user and a profile:\n\n```\nconst userWithProfile = await prisma.user.create({  data: {    id: 3,    email: 'bob@prisma.io',    name: 'Bob Prismo',    profile: {      create: {        bio: \"Hello, I'm Bob Prismo and I love apples, blue nail varnish, and the sound of buzzing mosquitoes.\",      },    },  },})\n```\n\nThe following example connects a new profile to a user:\n\n```\nconst profileWithUser = await prisma.profile.create({  data: {    bio: \"Hello, I'm Bob and I like nothing at all. Just nothing.\",    author: {      connect: {        id: 22,      },    },  },})\n```\n\n### `@@id`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#id-1 \"Direct link to id-1\")\n\nwarning\n\n**Not supported by MongoDB**  \nThe [MongoDB connector](https://www.prisma.io/docs/orm/overview/databases/mongodb) does not support composite IDs.\n\nDefines a multi-field ID (composite ID) on the model.\n\n*   Corresponding database type: `PRIMARY KEY`\n*   Can be annotated with a [`@default`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default) attribute that uses [functions](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attribute-functions) to auto-generate an ID\n*   Cannot be optional\n*   Can be defined on any scalar field (`String`, `Int`, `enum`)\n*   Cannot be defined on a relation field\n*   The name of the composite ID field in Prisma Client has the following pattern: `field1_field2_field3`\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#arguments-1 \"Direct link to Arguments\")\n\nName\n\nRequired\n\nType\n\nDescription\n\n`fields`\n\n**Yes**\n\n`FieldReference[]`\n\nA list of field names - for example, `[\"firstname\", \"lastname\"]`\n\n`name`\n\n**No**\n\n`String`\n\nThe name that Prisma Client will expose for the argument covering all fields, e.g. `fullName` in `fullName: { firstName: \"First\", lastName: \"Last\"}`\n\n`map`\n\n**No**\n\n`String`\n\nThe name of the underlying primary key constraint in the database.\n\nNot supported for MySQL.\n\n`length`\n\n**No**\n\n`number`\n\nAllows you to specify a maximum length for the subpart of the value to be indexed.\n\nMySQL only. In preview in versions 3.5.0 and later, and in general availability in versions 4.0.0 and later.\n\n`sort`\n\n**No**\n\n`String`\n\nAllows you to specify in what order the entries of the ID are stored in the database. The available options are `Asc` and `Desc`.\n\nSQL Server only. In preview in versions 3.5.0 and later, and in general availability in versions 4.0.0 and later.\n\n`clustered`\n\n**No**\n\n`Boolean`\n\nDefines whether the ID is clustered or non-clustered. Defaults to `true`.\n\nSQL Server only. In preview in versions 3.13.0 and later, and in general availability in versions 4.0.0 and later.\n\nThe name of the `fields` argument on the `@@id` attribute can be omitted:\n\n```\n@@id(fields: [title, author])@@id([title, author])\n```\n\n#### Signature[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#signature-1 \"Direct link to Signature\")\n\n```\n@@id(_ fields: FieldReference[], name: String?, map: String?)\n```\n\n> **Note**: Until version 3.0.0, the signature was:\n> \n> ```\n> @@id(_ fields: FieldReference[])\n> ```\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-7 \"Direct link to Examples\")\n\n##### Specify a multi-field ID on two `String` fields (Relational databases only)[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-multi-field-id-on-two-string-fields-relational-databases-only \"Direct link to specify-a-multi-field-id-on-two-string-fields-relational-databases-only\")\n\n```\nmodel User {  firstName String  lastName  String  email     String  @unique  isAdmin   Boolean @default(false)  @@id([firstName, lastName])}\n```\n\nWhen you create a user, you must provide a unique combination of `firstName` and `lastName`:\n\n```\nconst user = await prisma.user.create({  data: {    firstName: 'Alice',    lastName: 'Smith',  },})\n```\n\nTo retrieve a user, use the generated composite ID field (`firstName_lastName`):\n\n```\nconst user = await prisma.user.findUnique({  where: {    firstName_lastName: {      firstName: 'Alice',      lastName: 'Smith',    },  },})\n```\n\n##### Specify a multi-field ID on two `String` fields and one `Boolean` field (Relational databases only)[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-multi-field-id-on-two-string-fields-and-one-boolean-field-relational-databases-only \"Direct link to specify-a-multi-field-id-on-two-string-fields-and-one-boolean-field-relational-databases-only\")\n\n```\nmodel User {  firstName String  lastName  String  email     String  @unique  isAdmin   Boolean @default(false)  @@id([firstName, lastName, isAdmin])}\n```\n\nWhen creating new `User` records, you now must provide a unique combination of values for `firstName`, `lastName` and `isAdmin`:\n\n```\nconst user = await prisma.user.create({  data: {    firstName: 'Alice',    lastName: 'Smith',    isAdmin: true,  },})\n```\n\n##### Specify a multi-field ID that includes a relation field (Relational databases only)[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-multi-field-id-that-includes-a-relation-field-relational-databases-only \"Direct link to Specify a multi-field ID that includes a relation field (Relational databases only)\")\n\n```\nmodel Post {  title     String  published Boolean @default(false)  author    User    @relation(fields: [authorId], references: [id])  authorId  Int  @@id([authorId, title])}model User {  id    Int     @default(autoincrement())  email String  @unique  name  String?  posts Post[]}\n```\n\nWhen creating new `Post` records, you now must provide a unique combination of values for `authorId` (foreign key) and `title`:\n\n```\nconst post = await prisma.post.create({  data: {    title: 'Hello World',    author: {      connect: {        email: 'alice@prisma.io',      },    },  },})\n```\n\n### `@default`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default \"Direct link to default\")\n\nDefines a [default value for a field](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-a-default-value).\n\n*   Default values that cannot yet be represented in the Prisma schema are represented by the [`dbgenerated()` function](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#dbgenerated) when you use [introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection).\n*   Default values are not allowed on relation fields in the Prisma schema. Note however that you can still define default values on the fields backing a relation (the ones listed in the `fields` argument in the `@relation` attribute). A default value on the field backing a relation will mean that relation is populated automatically for you.\n*   Default values can be used with [scalar lists](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-scalar-lists-arrays) in databases that natively support them.\n\n##### Relational databases[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#relational-databases-2 \"Direct link to Relational databases\")\n\n*   Corresponding database construct: `DEFAULT`\n*   Default values can be a static value (`4`, `\"hello\"`) or one of the following [functions](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attribute-functions):\n    *   [`autoincrement()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#autoincrement)\n    *   [`sequence()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#sequence) (CockroachDB only)\n    *   [`dbgenerated(...)`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#dbgenerated)\n    *   [`cuid()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cuid)\n    *   [`uuid()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#uuid)\n    *   [`now()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#now)\n*   Default values that cannot yet be represented in the Prisma schema are represented by the [`dbgenerated(...)` function](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#dbgenerated) when you use [introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection).\n*   Default values are not allowed on relation fields in the Prisma schema. Note however that you can still define default values on the fields backing a relation (the ones listed in the `fields` argument in the `@relation` attribute). A default value on the field backing a relation will mean that relation is populated automatically for you.\n*   Default values can be used with [scalar lists](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-scalar-lists-arrays) in databases that natively support them.\n*   JSON data. Note that JSON needs to be enclosed with double-quotes inside the `@default` attribute, e.g.: `@default(\"[]\")`. If you want to provide a JSON object, you need to enclose it with double-quotes and then escape any internal double quotes using a backslash, e.g.: `@default(\"{ \\\"hello\\\": \\\"world\\\" }\")`.\n\n##### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-11 \"Direct link to MongoDB\")\n\n*   Default values can be a static value (`4`, `\"hello\"`) or one of the following [functions](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attribute-functions):\n    *   [`auto()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#auto) (can only be used with `@db.ObjectId` to generate an `ObjectId` in MongoDB)\n    *   [`cuid()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cuid)\n    *   [`uuid()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#uuid)\n    *   [`now()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#now)\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#arguments-2 \"Direct link to Arguments\")\n\nName\n\nRequired\n\nType\n\nDescription\n\n`value`\n\n**Yes**\n\nAn expression (e.g. `5`, `true`, `now()`)\n\n`map`\n\n**No**\n\nString\n\n**SQL Server only.**\n\nThe name of the `value` argument on the `@default` attribute can be omitted:\n\n```\nid Int @id @default(value: autoincrement())id Int @id @default(autoincrement())\n```\n\n#### Signature[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#signature-2 \"Direct link to Signature\")\n\n```\n@default(_ value: Expression, map: String?)\n```\n\n> **Note**: Until version 3.0.0, the signature was:\n> \n> ```\n> @default(_ value: Expression)\n> ```\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-8 \"Direct link to Examples\")\n\n##### Default value for an `Int`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-value-for-an-int \"Direct link to default-value-for-an-int\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  email        String @unique  profileViews Int    @default(0)}\n```\n\n##### Default value for a `Float`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-value-for-a-float \"Direct link to default-value-for-a-float\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  email  String @unique  number Float  @default(1.1)}\n```\n\n##### Default value for `Decimal`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-value-for-decimal \"Direct link to default-value-for-decimal\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  email  String  @unique  number Decimal @default(22.99)}\n```\n\n##### Default value for `BigInt`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-value-for-bigint \"Direct link to default-value-for-bigint\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  email  String @unique  number BigInt @default(34534535435353)}\n```\n\n##### Default value for a `String`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-value-for-a-string \"Direct link to default-value-for-a-string\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  email String @unique  name  String @default(\"\")}\n```\n\n##### Default value for a `Boolean`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-value-for-a-boolean \"Direct link to default-value-for-a-boolean\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  email   String  @unique  isAdmin Boolean @default(false)}\n```\n\n##### Default value for a `DateTime`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-value-for-a-datetime \"Direct link to default-value-for-a-datetime\")\n\nNote that static default values for `DateTime` are based on the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  email String   @unique  data  DateTime @default(\"2020-03-19T14:21:00+02:00\")}\n```\n\n##### Default value for a `Bytes`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-value-for-a-bytes \"Direct link to default-value-for-a-bytes\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  email  String @unique  secret Bytes  @default(\"SGVsbG8gd29ybGQ=\")}\n```\n\n##### Default value for an `enum`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-value-for-an-enum \"Direct link to default-value-for-an-enum\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id      Int      @id @default(autoincrement())  email   String   @unique  name    String?  role    Role     @default(USER)  posts   Post[]  profile Profile?}\n```\n\n##### Default values for scalar lists[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default-values-for-scalar-lists \"Direct link to Default values for scalar lists\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id             Int      @id @default(autoincrement())  posts          Post[]  favoriteColors String[] @default([\"red\", \"yellow\", \"purple\"])  roles          Role[]   @default([USER, DEVELOPER])}enum Role {  USER  DEVELOPER  ADMIN}\n```\n\n### `@unique`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unique \"Direct link to unique\")\n\nDefines a unique constraint for this field.\n\n##### General[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#general-1 \"Direct link to General\")\n\n*   A field annotated with `@unique` can be optional or required\n*   A field annotated with `@unique` _must_ be required if it represents the only unique constraint on a model without an `@id` / `@@id`\n*   A model can have any number of unique constraints\n*   Can be defined on any scalar field\n*   **Cannot** be defined on a relation field\n\n##### Relational databases[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#relational-databases-3 \"Direct link to Relational databases\")\n\n*   Corresponding database construct: `UNIQUE`\n*   `NULL` values are considered to be distinct (multiple rows with `NULL` values in the same column are allowed)\n*   Adding a unique constraint automatically adds a corresponding _unique index_ to the specified column(s).\n\n##### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-12 \"Direct link to MongoDB\")\n\n*   Enforced by a [unique index in MongoDB](https://docs.mongodb.com/manual/core/index-unique/)\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#arguments-3 \"Direct link to Arguments\")\n\nName\n\nRequired\n\nType\n\nDescription\n\n`map`\n\n**No**\n\n`String`\n\n`length`\n\n**No**\n\n`number`\n\nAllows you to specify a maximum length for the subpart of the value to be indexed.\n\nMySQL only. In preview in versions 3.5.0 and later, and in general availability in versions 4.0.0 and later.\n\n`sort`\n\n**No**\n\n`String`\n\nAllows you to specify in what order the entries of the constraint are stored in the database. The available options are `Asc` and `Desc`.\n\nIn preview in versions 3.5.0 and later, and in general availability in versions 4.0.0 and later.\n\n`clustered`\n\n**No**\n\n`Boolean`\n\nDefines whether the constraint is clustered or non-clustered. Defaults to `false`.\n\nSQL Server only. In preview in versions 3.13.0 and later, and in general availability in versions 4.0.0 and later.\n\n*   ¹ Can be required by some of the index and field types.\n\n#### Signature[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#signature-3 \"Direct link to Signature\")\n\n```\n@unique(map: String?, length: number?, sort: String?)\n```\n\n> **Note**: Before version 4.0.0, or 3.5.0 with the `extendedIndexes` Preview feature enabled, the signature was:\n\n> **Note**: Before version 3.0.0, the signature was:\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-9 \"Direct link to Examples\")\n\n##### Specify a unique attribute on a required `String` field[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-unique-attribute-on-a-required-string-field \"Direct link to specify-a-unique-attribute-on-a-required-string-field\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  email String @unique  name  String}\n```\n\n##### Specify a unique attribute on an optional `String` field[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-unique-attribute-on-an-optional-string-field \"Direct link to specify-a-unique-attribute-on-an-optional-string-field\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id    Int     @id @default(autoincrement())  email String? @unique  name  String}\n```\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel Post {  author    User    @relation(fields: [authorId], references: [id])  authorId  Int     @unique  title     String  published Boolean @default(false)}model User {  id    Int     @id @default(autoincrement())  email String? @unique  name  String  Post  Post[]}\n```\n\n##### Specify a unique attribute with `cuid()` values as default values[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-unique-attribute-with-cuid-values-as-default-values \"Direct link to specify-a-unique-attribute-with-cuid-values-as-default-values\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  token String @unique @default(cuid())  name  String}\n```\n\n### `@@unique`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unique-1 \"Direct link to unique-1\")\n\nDefines a compound [unique constraint](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-a-unique-field) for the specified fields.\n\n##### General[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#general-2 \"Direct link to General\")\n\n*   All fields that make up the unique constraint **must** be mandatory fields. The following model is **not** valid because `id` could be `null`:\n    \n    ```\n    model User {  firstname Int  lastname  Int  id        Int?  @@unique([firstname, lastname, id])}\n    ```\n    \n    The reason for this behavior is that all connectors consider `null` values to be distinct, which means that two rows that _look_ identical are considered unique:\n    \n    ```\n     firstname  | lastname | id -----------+----------+------ John       | Smith    | null John       | Smith    | null\n    ```\n    \n*   A model can have any number of `@@unique` blocks\n    \n\n##### Relational databases[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#relational-databases-4 \"Direct link to Relational databases\")\n\n*   Corresponding database construct: `UNIQUE`\n*   A `@@unique` block is required if it represents the only unique constraint on a model without an `@id` / `@@id`\n*   Adding a unique constraint automatically adds a corresponding _unique index_ to the specified column(s)\n\n##### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-13 \"Direct link to MongoDB\")\n\n*   Enforced by a [compound index in MongoDB](https://docs.mongodb.com/manual/core/index-compound/) - you must create this index yourself\n*   A `@@unique` block cannot be used as the only unique identifier for a model - MongoDB requires an `@id` field\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#arguments-4 \"Direct link to Arguments\")\n\nName\n\nRequired\n\nType\n\nDescription\n\n`fields`\n\n**Yes**\n\n`FieldReference[]`\n\nA list of field names - for example, `[\"firstname\", \"lastname\"]`. Fields must be mandatory - see remarks.\n\n`name`\n\n**No**\n\n`String`\n\nThe name of the unique combination of fields - defaults to `fieldName1_fieldName2_fieldName3`\n\n`map`\n\n**No**\n\n`String`\n\n`length`\n\n**No**\n\n`number`\n\nAllows you to specify a maximum length for the subpart of the value to be indexed.\n\nMySQL only. In preview in versions 3.5.0 and later, and in general availability in versions 4.0.0 and later.\n\n`sort`\n\n**No**\n\n`String`\n\nAllows you to specify in what order the entries of the constraint are stored in the database. The available options are `Asc` and `Desc`.\n\nIn preview in versions 3.5.0 and later, and in general availability in versions 4.0.0 and later.\n\n`clustered`\n\n**No**\n\n`Boolean`\n\nDefines whether the constraint is clustered or non-clustered. Defaults to `false`.\n\nSQL Server only. In preview in versions 3.13.0 and later, and in general availability in versions 4.0.0 and later.\n\nThe name of the `fields` argument on the `@@unique` attribute can be omitted:\n\n```\n@@unique(fields: [title, author])@@unique([title, author])@@unique(fields: [title, author], name: \"titleAuthor\")\n```\n\nThe `length` and `sort` arguments are added to the relevant field names:\n\n```\n@@unique(fields: [title(length:10), author])@@unique([title(sort: Desc), author(sort: Asc)])\n```\n\n#### Signature[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#signature-4 \"Direct link to Signature\")\n\n> ```\n> @@unique(_ fields: FieldReference[], name: String?, map: String?)\n> ```\n\n> **Note**: Before version 4.0.0, or before version 3.5.0 with the `extendedIndexes` Preview feature enabled, the signature was:\n> \n> ```\n> @@unique(_ fields: FieldReference[], name: String?, map: String?)\n> ```\n\n> **Note**: Before version 3.0.0, the signature was:\n> \n> ```\n> @@unique(_ fields: FieldReference[], name: String?)\n> ```\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-10 \"Direct link to Examples\")\n\n##### Specify a multi-field unique attribute on two `String` fields[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-multi-field-unique-attribute-on-two-string-fields \"Direct link to specify-a-multi-field-unique-attribute-on-two-string-fields\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id        Int     @default(autoincrement())  firstName String  lastName  String  isAdmin   Boolean @default(false)  @@unique([firstName, lastName])}\n```\n\nTo retrieve a user, use the generated field name (`firstname_lastname`):\n\n```\nconst user = await prisma.user.findUnique({  where: {    firstName_lastName: {      firstName: 'Alice',      lastName: 'Smith',      isAdmin: true,    },  },})\n```\n\n##### Specify a multi-field unique attribute on two `String` fields and one `Boolean` field[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-multi-field-unique-attribute-on-two-string-fields-and-one-boolean-field \"Direct link to specify-a-multi-field-unique-attribute-on-two-string-fields-and-one-boolean-field\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id        Int     @default(autoincrement())  firstName String  lastName  String  isAdmin   Boolean @default(false)  @@unique([firstName, lastName, isAdmin])}\n```\n\n##### Specify a multi-field unique attribute that includes a relation field[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-multi-field-unique-attribute-that-includes-a-relation-field \"Direct link to Specify a multi-field unique attribute that includes a relation field\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel Post {  id        Int     @default(autoincrement())  author    User    @relation(fields: [authorId], references: [id])  authorId  Int  title     String  published Boolean @default(false)  @@unique([authorId, title])}model User {  id    Int    @id @default(autoincrement())  email String @unique  posts Post[]}\n```\n\n##### Specify a custom `name` for a multi-field unique attribute[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-a-custom-name-for-a-multi-field-unique-attribute \"Direct link to specify-a-custom-name-for-a-multi-field-unique-attribute\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id        Int     @default(autoincrement())  firstName String  lastName  String  isAdmin   Boolean @default(false)  @@unique(fields: [firstName, lastName, isAdmin], name: \"admin_identifier\")}\n```\n\nTo retrieve a user, use the custom field name (`admin_identifier`):\n\n```\nconst user = await prisma.user.findUnique({  where: {    admin_identifier: {      firstName: 'Alice',      lastName: 'Smith',      isAdmin: true,    },  },})\n```\n\n### `@@index`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#index \"Direct link to index\")\n\nDefines an index in the database.\n\n##### Relational databases[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#relational-databases-5 \"Direct link to Relational databases\")\n\n*   Corresponding database construct: `INDEX`\n*   There are some additional index configuration options that cannot be provided via the Prisma schema yet. These include:\n    *   PostgreSQL and CockroachDB:\n        *   Define index fields as expressions (e.g. `CREATE INDEX title ON public.\"Post\"((lower(title)) text_ops);`)\n        *   Define partial indexes with `WHERE`\n        *   Create indexes concurrently with `CONCURRENTLY`\n\ninfo\n\nWhile you cannot configure these option in your Prisma schema, you can still configure them on the database-level directly.\n\n##### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-14 \"Direct link to MongoDB\")\n\n*   In version `3.12.0` and later, you can define an index on a field of a [composite type](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-composite-types) using the syntax `@@index([compositeType.field])`. See [Defining composite type indexes](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-composite-type-indexes) for more details.\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#arguments-5 \"Direct link to Arguments\")\n\nName\n\nRequired\n\nType\n\nDescription\n\n`fields`\n\n**Yes**\n\n`FieldReference[]`\n\nA list of field names - for example, `[\"firstname\", \"lastname\"]`\n\n`name`\n\n**No**\n\n`String`\n\nThe name that Prisma Client will expose for the argument covering all fields, e.g. `fullName` in `fullName: { firstName: \"First\", lastName: \"Last\"}`\n\n`map`\n\n**No**\n\n`map`\n\nThe name of the index in the underlying database (Prisma generates an index name that respects identifier length limits if you do not specify a name. Prisma uses the following naming convention: `tablename.field1_field2_field3_unique`)\n\n`length`\n\n**No**\n\n`number`\n\nAllows you to specify a maximum length for the subpart of the value to be indexed.\n\nMySQL only. In preview in versions 3.5.0 and later, and in general availability in versions 4.0.0 and later.\n\n`sort`\n\n**No**\n\n`String`\n\nAllows you to specify in what order the entries of the index or constraint are stored in the database. The available options are `asc` and `desc`.\n\nIn preview in versions 3.5.0 and later, and in general availability in versions 4.0.0 and later.\n\n`clustered`\n\n**No**\n\n`Boolean`\n\nDefines whether the index is clustered or non-clustered. Defaults to `false`.\n\nSQL Server only. In preview in versions 3.5.0 and later, and in general availability in versions 4.0.0 and later.\n\n`type`\n\n**No**\n\n`identifier`\n\nAllows you to specify an index access method. Defaults to `BTree`.\n\nPostgreSQL and CockroachDB only. In preview with the `Hash` index access method in versions 3.6.0 and later, and with the `Gist`, `Gin`, `SpGist` and `Brin` methods added in 3.14.0. In general availability in versions 4.0.0 and later.\n\n`ops`\n\n**No**\n\n`identifier` or a `function`\n\nAllows you to define the index operators for certain index types.\n\nPostgreSQL only. In preview in versions 3.14.0 and later, and in general availability in versions 4.0.0 and later.\n\nThe _name_ of the `fields` argument on the `@@index` attribute can be omitted:\n\n```\n@@index(fields: [title, author])@@index([title, author])\n```\n\nThe `length` and `sort` arguments are added to the relevant field names:\n\n```\n@@index(fields: [title(length:10), author])@@index([title(sort: Asc), author(sort: Desc)])\n```\n\n#### Signature[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#signature-5 \"Direct link to Signature\")\n\n```\n@@index(_ fields: FieldReference[], map: String?)\n```\n\n> **Note**: Until version 3.0.0, the signature was:\n> \n> ```\n> @@index(_ fields: FieldReference[], name: String?)\n> ```\n> \n> The old `name` argument will still be accepted to avoid a breaking change.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-11 \"Direct link to Examples\")\n\nAssume you want to add an index for the `title` field of the `Post` model\n\n##### Define a single-column index (Relational databases only)[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#define-a-single-column-index-relational-databases-only \"Direct link to Define a single-column index (Relational databases only)\")\n\n```\nmodel Post {  id      Int     @id @default(autoincrement())  title   String  content String?  @@index([title])}\n```\n\n##### Define a multi-column index (Relational databases only)[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#define-a-multi-column-index-relational-databases-only \"Direct link to Define a multi-column index (Relational databases only)\")\n\n```\nmodel Post {  id      Int     @id @default(autoincrement())  title   String  content String?  @@index([title, content])}\n```\n\n##### Define an index with a name (Relational databases only)[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#define-an-index-with-a-name-relational-databases-only \"Direct link to Define an index with a name (Relational databases only)\")\n\n```\nmodel Post {  id      Int     @id @default(autoincrement())  title   String  content String?  @@index(fields: [title, content], name: \"main_index\")}\n```\n\n##### Define an index on a composite type field (Relational databases only)[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#define-an-index-on-a-composite-type-field-relational-databases-only \"Direct link to Define an index on a composite type field (Relational databases only)\")\n\n```\ntype Address {  street String  number Int}model User {  id      Int     @id  email   String  address Address  @@index([address.number])}\n```\n\n### `@relation`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#relation \"Direct link to relation\")\n\nDefines meta information about the relation. [Learn more](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#the-relation-attribute).\n\n##### Relational databases[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#relational-databases-6 \"Direct link to Relational databases\")\n\n*   Corresponding database constructs: `FOREIGN KEY` / `REFERENCES`\n\n##### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-15 \"Direct link to MongoDB\")\n\n*   If your model's primary key is of type `ObjectId` in the underlying database, both the primary key _and_ the foreign key must have the `@db.ObjectId` attribute\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#arguments-6 \"Direct link to Arguments\")\n\nName\n\nType\n\nRequired\n\nDescription\n\nExample\n\n`name`\n\n`String`\n\nSometimes (e.g. to disambiguate a relation)\n\nDefines the name of the relationship. In an m-n-relation, it also determines the name of the underlying relation table.\n\n`\"CategoryOnPost\"`, `\"MyRelation\"`\n\n`fields`\n\n`FieldReference[]`\n\nOn [annotated](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relation-fields) relation fields\n\nA list of [fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-fields) of the _current_ model\n\n`[\"authorId\"]`, `[\"authorFirstName, authorLastName\"]`\n\n`references`\n\n`FieldReference[]`\n\nOn [annotated](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relation-fields) relation fields\n\nA list of [fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-fields) of the model on _the other side of the relation_\n\n`[\"id\"]`, `[\"firstName, lastName\"]`\n\n`map`\n\n`String`\n\nNo\n\nDefines a [custom name](https://www.prisma.io/docs/orm/prisma-schema/data-model/database-mapping#constraint-and-index-names) for the foreign key in the database.\n\n`[\"id\"]`, `[\"firstName, lastName\"]`\n\n`onUpdate`\n\nEnum. See [Types of referential actions](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#types-of-referential-actions) for values.\n\nNo\n\nDefines the [referential action](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions) to perform when a referenced entry in the referenced model is being updated.\n\n`Cascade`, `NoAction`\n\n`onDelete`\n\nEnum. See [Types of referential actions](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#types-of-referential-actions) for values.\n\nNo\n\nDefines the [referential action](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions) to perform when a referenced entry in the referenced model is being deleted.\n\n`Cascade`, `NoAction`\n\nThe name of the `name` argument on the `@relation` attribute can be omitted (`references` is required):\n\n```\n@relation(name: \"UserOnPost\", references: [id])@relation(\"UserOnPost\", references: [id])// or@relation(name: \"UserOnPost\")@relation(\"UserOnPost\")\n```\n\n#### Signature[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#signature-6 \"Direct link to Signature\")\n\n```\n@relation(_ name: String?, fields: FieldReference[]?, references: FieldReference[]?, onDelete: ReferentialAction?, onUpdate: ReferentialAction?, map: String?)\n```\n\nWith SQLite, the signature changes to:\n\n```\n@relation(_ name: String?, fields: FieldReference[]?, references: FieldReference[]?, onDelete: ReferentialAction?, onUpdate: ReferentialAction?)\n```\n\n> **Note**: Until version 3.0.0, the signature was:\n> \n> ```\n> @relation(_ name: String?, fields: FieldReference[]?, references: FieldReference[]?)\n> ```\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-12 \"Direct link to Examples\")\n\nSee: [The `@relation` attribute](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#the-relation-attribute).\n\n### `@map`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map \"Direct link to map\")\n\nMaps a field name or enum value from the Prisma schema to a column or document field with a different name in the database. If you do not use `@map`, the Prisma field name matches the column name or document field name exactly.\n\n> See [Using custom model and field names](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/custom-model-and-field-names) to see how `@map` and `@@map` changes the generated Prisma Client.\n\n##### General[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#general-3 \"Direct link to General\")\n\n*   `@map` **does not** rename the columns / fields in the database\n*   `@map` **does** [change the field names in the generated client](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map-the-firstname-field-to-a-column-called-first_name)\n\n##### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-16 \"Direct link to MongoDB\")\n\nYour `@id` field must include `@map(\"_id\")`. For example:\n\n```\nmodel User {  id String @default(auto()) @map(\"_id\") @db.ObjectId}\n```\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#arguments-7 \"Direct link to Arguments\")\n\nName\n\nType\n\nRequired\n\nDescription\n\nExample\n\n`name`\n\n`String`\n\n**Yes**\n\nThe database column (relational databases) or document field (MongoDB) name.\n\n`\"comments\"`, `\"someFieldName\"`\n\nThe name of the `name` argument on the `@map` attribute can be omitted:\n\n```\n@map(name: \"is_admin\")@map(\"users\")\n```\n\n#### Signature[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#signature-7 \"Direct link to Signature\")\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-13 \"Direct link to Examples\")\n\n##### Map the `firstName` field to a column called `first_name`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map-the-firstname-field-to-a-column-called-first_name \"Direct link to map-the-firstname-field-to-a-column-called-first_name\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id        Int    @id @default(autoincrement())  firstName String @map(\"first_name\")}\n```\n\nThe generated client:\n\n```\nawait prisma.user.create({  data: {    firstName: 'Yewande', // first_name --> firstName  },})\n```\n\n##### Map an enum named `ADMIN` to a database enum named `admin`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map-an-enum-named-admin-to-a-database-enum-named-admin \"Direct link to map-an-enum-named-admin-to-a-database-enum-named-admin\")\n\n```\nenum Role {  ADMIN    @map(\"admin\")  CUSTOMER}\n```\n\n### `@@map`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map-1 \"Direct link to map-1\")\n\nMaps the Prisma schema model name to a table (relational databases) or collection (MongoDB) with a different name, or an enum name to a different underlying enum in the database. If you do not use `@@map`, the model name matches the table (relational databases) or collection (MongoDB) name exactly.\n\n> See [Using custom model and field names](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/custom-model-and-field-names) to see how `@map` and `@@map` changes the generated Prisma Client.\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#arguments-8 \"Direct link to Arguments\")\n\nName\n\nType\n\nRequired\n\nDescription\n\nExample\n\n`name`\n\n`String`\n\n**Yes**\n\nThe database table (relational databases) or collection (MongoDB) name.\n\n`\"comments\"`, `\"someTableOrCollectionName\"`\n\nThe name of the `name` argument on the `@@map` attribute can be omitted\n\n```\n@@map(name: \"users\")@@map(\"users\")\n```\n\n#### Signature[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#signature-8 \"Direct link to Signature\")\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-14 \"Direct link to Examples\")\n\n##### Map the `User` model to a database table/collection named `users`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map-the-user-model-to-a-database-tablecollection-named-users \"Direct link to map-the-user-model-to-a-database-tablecollection-named-users\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id   Int    @id @default(autoincrement())  name String  @@map(\"users\")}\n```\n\nThe generated client:\n\n```\nawait prisma.user.create({  // users --> user  data: {    name: 'Yewande',  },})\n```\n\n##### Map the `Role` enum to a native enum in the database named `_Role` its values to lowercase values in the database[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map-the-role-enum-to-a-native-enum-in-the-database-named-_role-its-values-to-lowercase-values-in-the-database \"Direct link to map-the-role-enum-to-a-native-enum-in-the-database-named-_role-its-values-to-lowercase-values-in-the-database\")\n\n```\nenum Role {  ADMIN    @map(\"admin\")  CUSTOMER @map(\"customer\")  @@map(\"_Role\")}\n```\n\n### `@updatedAt`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#updatedat \"Direct link to updatedat\")\n\nAutomatically stores the time when a record was last updated. If you do not supply a time yourself, Prisma Client will automatically set the value for fields with this attribute.\n\n*   Compatible with [`DateTime`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#datetime) fields\n*   Implemented at Prisma ORM level\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#arguments-9 \"Direct link to Arguments\")\n\nN/A\n\n#### Signature[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#signature-9 \"Direct link to Signature\")\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-15 \"Direct link to Examples\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel Post {  id        String   @id  updatedAt DateTime @updatedAt}\n```\n\n### `@ignore`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#ignore \"Direct link to ignore\")\n\nAdd `@ignore` to a field that you want to exclude from Prisma Client (for example, a field that you do not want Prisma Client users to update). Ignored fields are excluded from the generated Prisma Client. The model's `create` method is disabled when doing this for _required_ fields with no `@default` (because the database cannot create an entry without that data).\n\n*   In [2.17.0](https://github.com/prisma/prisma/releases/tag/2.17.0) and later, Prisma ORM automatically adds `@ignore` to fields that _refer to_ invalid models when you introspect.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-16 \"Direct link to Examples\")\n\nThe following example demonstrates manually adding `@ignore` to exclude the `email` field from Prisma Client:\n\nschema.prisma\n\n```\nmodel User {  id    Int    @id  name  String  email String @ignore // this field will be excluded}\n```\n\n### `@@ignore`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#ignore-1 \"Direct link to ignore-1\")\n\nAdd `@@ignore` to a model that you want to exclude from Prisma Client (for example, a model that you do not want Prisma users to update). Ignored models are excluded from the generated Prisma Client.\n\n*   In [2.17.0](https://github.com/prisma/prisma/releases/tag/2.17.0) and later, Prisma ORM adds `@@ignore` to an invalid model. (It also adds [`@ignore`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#ignore) to relations pointing to such a model)\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-17 \"Direct link to Examples\")\n\nIn the following example, the `Post` model is invalid because it does not have a unique identifier. Use `@@ignore` to exclude it from the generated Prisma Client API:\n\nschema.prisma\n\n```\n/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.model Post {  id       Int  @default(autoincrement()) // no unique identifier  author   User @relation(fields: [authorId], references: [id])  authorId Int  @@ignore}\n```\n\nIn the following example, the `Post` model is invalid because it does not have a unique identifier, and the `posts` relation field on `User` is invalid because it refers to the invalid `Post` model. Use `@@ignore` on the `Post` model and `@ignore` on the `posts` relation field in `User` to exclude both the model and the relation field from the generated Prisma Client API:\n\nschema.prisma\n\n```\n/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.model Post {  id       Int  @default(autoincrement()) // no unique identifier  author   User @relation(fields: [authorId], references: [id])  authorId Int  @@ignore}model User {  id    Int     @id @default(autoincrement())  name  String?  posts Post[]  @ignore}\n```\n\n### `@@schema`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#schema \"Direct link to schema\")\n\nwarning\n\nTo use this attribute, you must have the [`multiSchema`](https://github.com/prisma/prisma/issues/1122#issuecomment-1231773471) preview feature enabled. Multiple database schema support is currently available with the PostgreSQL, CockroachDB, and SQL Server connectors.\n\nAdd `@@schema` to a model to specify which schema in your database should contain the table associated with that model.\n\n#### Arguments[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#arguments-10 \"Direct link to Arguments\")\n\nName\n\nType\n\nRequired\n\nDescription\n\nExample\n\n`name`\n\n`String`\n\n**Yes**\n\nThe name of the database schema.\n\n`\"base\"`, `\"auth\"`\n\nThe name of the `name` argument on the `@@schema` attribute can be omitted\n\n```\n@@schema(name: \"auth\")@@schema(\"auth\")\n```\n\n#### Signature[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#signature-10 \"Direct link to Signature\")\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-18 \"Direct link to Examples\")\n\n##### Map the `User` model to a database schema named `auth`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map-the-user-model-to-a-database-schema-named-auth \"Direct link to map-the-user-model-to-a-database-schema-named-auth\")\n\n```\ngenerator client {  provider        = \"prisma-client-js\"  previewFeatures = [\"multiSchema\"]}datasource db {  provider = \"postgresql\"  url      = env(\"DATABASE_URL\")  schemas  = [\"auth\"]}model User {  id   Int    @id @default(autoincrement())  name String  @@schema(\"auth\")}\n```\n\ninfo\n\nFor more information about using the `multiSchema` feature, refer to [this guide](https://www.prisma.io/docs/orm/prisma-schema/data-model/multi-schema).\n\n## Attribute functions[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attribute-functions \"Direct link to Attribute functions\")\n\n### `auto()`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#auto \"Direct link to auto\")\n\nwarning\n\nThis function is available on MongoDB only.\n\nRepresents **default values** that are automatically generated by the database.\n\n##### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-17 \"Direct link to MongoDB\")\n\nUsed to generate an `ObjectId` for `@id` fields:\n\n```\nid  String  @map(\"_id\") @db.ObjectId @default(auto())\n```\n\n##### Relational databases[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#relational-databases-7 \"Direct link to Relational databases\")\n\nThe `auto()` function is not available on relational databases.\n\n#### Example[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#example \"Direct link to Example\")\n\n##### Generate `ObjectId` (MongoDB only)[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generate-objectid-mongodb-only \"Direct link to generate-objectid-mongodb-only\")\n\n```\nmodel User {  id   String  @id @default(auto()) @map(\"_id\") @db.ObjectId  name String?}\n```\n\n### `autoincrement()`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#autoincrement \"Direct link to autoincrement\")\n\nwarning\n\n**Not supported by MongoDB**  \nThe [MongoDB connector](https://www.prisma.io/docs/orm/overview/databases/mongodb) does not support the `autoincrement()` function.\n\nCreate a sequence of integers in the underlying database and assign the incremented values to the ID values of the created records based on the sequence.\n\n*   Compatible with `Int` on most databases (`BigInt` on CockroachDB)\n    \n*   Implemented on the database-level, meaning that it manifests in the database schema and can be recognized through introspection. Database implementations:\n    \n    Database\n    \n    Implementation\n    \n    PostgreSQL\n    \n    [`SERIAL`](https://www.postgresql.org/docs/9.1/datatype-numeric.html#DATATYPE-SERIAL) type\n    \n    MySQL\n    \n    [`AUTO_INCREMENT`](https://dev.mysql.com/doc/refman/8.0/en/example-auto-increment.html) attribute\n    \n    SQLite\n    \n    [`AUTOINCREMENT`](https://www.sqlite.org/autoinc.html) keyword\n    \n    CockroachDB\n    \n    [`SERIAL`](https://www.postgresql.org/docs/9.1/datatype-numeric.html#DATATYPE-SERIAL) type\n    \n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-19 \"Direct link to Examples\")\n\n##### Generate autoincrementing integers as IDs (Relational databases only)[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generate-autoincrementing-integers-as-ids-relational-databases-only-1 \"Direct link to Generate autoincrementing integers as IDs (Relational databases only)\")\n\n```\nmodel User {  id   Int    @id @default(autoincrement())  name String}\n```\n\n### `sequence()`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#sequence \"Direct link to sequence\")\n\nCreate a sequence of integers in the underlying database and assign the incremented values to the values of the created records based on the sequence.\n\n#### Optional arguments[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#optional-arguments \"Direct link to Optional arguments\")\n\nArgument\n\nExample\n\n`virtual`\n\n`@default(sequence(virtual))`  \nVirtual sequences are sequences that do not generate monotonically increasing values and instead produce values like those generated by the built-in function `unique_rowid()`.\n\n`cache`\n\n`@default(sequence(cache: 20))`  \nThe number of sequence values to cache in memory for reuse in the session. A cache size of `1` means that there is no cache, and cache sizes of less than `1` are not valid.\n\n`increment`\n\n`@default(sequence(increment: 4))`  \nThe new value by which the sequence is incremented. A negative number creates a descending sequence. A positive number creates an ascending sequence.\n\n`minValue`\n\n`@default(sequence(minValue: 10))`  \nThe new minimum value of the sequence.\n\n`maxValue`\n\n`@default(sequence(maxValue: 3030303))`  \nThe new maximum value of the sequence.\n\n`start`\n\n`@default(sequence(start: 2))`  \nThe value the sequence starts at, if it's restarted or if the sequence hits the `maxValue`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-20 \"Direct link to Examples\")\n\n##### Generate sequencing integers as IDs[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generate-sequencing-integers-as-ids \"Direct link to Generate sequencing integers as IDs\")\n\n```\nmodel User {  id   Int    @id @default(sequence(maxValue: 4294967295))  name String}\n```\n\n### `cuid()`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cuid \"Direct link to cuid\")\n\nGenerate a globally unique identifier based on the [`cuid`](https://github.com/ericelliott/cuid) spec.\n\n*   Compatible with `String`\n*   Implemented by Prisma ORM and therefore not \"visible\" in the underlying database schema. You can still use `cuid()` when using [introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection) by [manually changing your Prisma schema](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/custom-model-and-field-names) and [generating Prisma Client](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client), in that case the values will be generated by Prisma's [query engine](https://www.prisma.io/docs/orm/more/under-the-hood/engines).\n*   Since the length of `cuid()` output is undefined per the cuid creator, a safe field size is 30 characters, in order to allow for enough characters for very large values. If you set the field size as less than 30, and then a larger value is generated by `cuid()`, you might see Prisma Client errors such as `Error: The provided value for the column is too long for the column's type.`\n\n##### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-18 \"Direct link to MongoDB\")\n\n*   `cuid()` does not generate a valid `ObjectId` - [use the `@db.ObjectId` syntax](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generate-objectid-as-ids-mongodb-only) if you want to use `ObjectId` in the underlying database. However, you can still use `cuid()` if your `_id` field is not of type `ObjectId`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-21 \"Direct link to Examples\")\n\n##### Generate `cuid()` values as IDs[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generate-cuid-values-as-ids-1 \"Direct link to generate-cuid-values-as-ids-1\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id   String @id @default(cuid())  name String}\n```\n\n### `uuid()`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#uuid \"Direct link to uuid\")\n\nGenerate a globally unique identifier based on the [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) spec, version 4 (random).\n\n*   Compatible with `String`\n*   Implemented by Prisma ORM and therefore not \"visible\" in the underlying database schema. You can still use `uuid()` when using [introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection) by [manually changing your Prisma schema](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/custom-model-and-field-names) and [generating Prisma Client](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client), in that case the values will be generated by Prisma ORM's [query engine](https://www.prisma.io/docs/orm/more/under-the-hood/engines).\n\n##### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-19 \"Direct link to MongoDB\")\n\n*   `uuid()` does not generate a valid `ObjectId` - [use the `@db.ObjectId` syntax](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generate-objectid-as-ids-mongodb-only) if you want to use `ObjectId` in the underlying database. However, you can still use `uuid()` if your `_id` field is not of type `ObjectId`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-22 \"Direct link to Examples\")\n\n##### Generate `uuid()` values as IDs[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#generate-uuid-values-as-ids-1 \"Direct link to generate-uuid-values-as-ids-1\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id   String @id @default(uuid())  name String}\n```\n\n### `now()`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#now \"Direct link to now\")\n\nSet a timestamp of the time when a record is created.\n\n##### General[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#general-4 \"Direct link to General\")\n\n*   Compatible with [`DateTime`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#datetime)\n\n##### Relational databases[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#relational-databases-8 \"Direct link to Relational databases\")\n\n*   Implemented on the database-level, meaning that it manifests in the database schema and can be recognized through introspection. Database implementations:\n    \n    Database\n    \n    Implementation\n    \n    PostgreSQL\n    \n    [`CURRENT_TIMESTAMP`](https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-CURRENT) and aliases like `now()`\n    \n    MySQL\n    \n    [`CURRENT_TIMESTAMP`](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_current-timestamp) and aliases like `now()`\n    \n    SQLite\n    \n    `CURRENT_TIMESTAMP` and aliases like `date('now')`\n    \n    CockroachDB\n    \n    [`CURRENT_TIMESTAMP`](https://www.cockroachlabs.com/docs/stable/functions-and-operators#special-syntax-forms) and aliases like `now()`\n    \n\n##### MongoDB[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb-20 \"Direct link to MongoDB\")\n\n*   Implemented at Prisma ORM level\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-23 \"Direct link to Examples\")\n\n##### Set current timestamp value when a record is created[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#set-current-timestamp-value-when-a-record-is-created \"Direct link to Set current timestamp value when a record is created\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id        String   @id  createdAt DateTime @default(now())}\n```\n\n### `dbgenerated(...)`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#dbgenerated \"Direct link to dbgenerated\")\n\nRepresents **default values** that cannot be expressed in the Prisma schema (such as `random()`).\n\n##### Relational databases[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#relational-databases-9 \"Direct link to Relational databases\")\n\n*   Compatible with any scalar type\n    \n*   Can not be an empty string `dbgenerated(\"\")` in [2.21.0](https://github.com/prisma/prisma/releases/tag/2.21.0) and later\n    \n*   Accepts a `String` value in [2.17.0](https://github.com/prisma/prisma/releases/tag/2.17.0) and later, which allows you to:\n    \n    *   [Set default values for `Unsupported` types](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#set-default-value-for-unsupported-type)\n    *   [Override default value behavior for supported types](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#override-default-value-behavior-for-supported-types)\n*   String values in `dbgenerated(...)` might not match what the DB returns as the default value, because values such as strings may be explicitly cast (e.g. `'hello'::STRING`). When a mismatch is present, Prisma Migrate indicates a migration is still needed. You can use `prisma db pull` to infer the correct value to resolve the discrepancy. ([Related issue](https://github.com/prisma/prisma/issues/14917))\n    \n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-24 \"Direct link to Examples\")\n\n##### Set default value for `Unsupported` type[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#set-default-value-for-unsupported-type \"Direct link to set-default-value-for-unsupported-type\")\n\n```\ncircle     Unsupported(\"circle\")?   @default(dbgenerated(\"'<(10,4),11>'::circle\"))\n```\n\n##### Override default value behavior for supported types[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#override-default-value-behavior-for-supported-types \"Direct link to Override default value behavior for supported types\")\n\nYou can also use `dbgenerated(...)` to set the default value for supported types. For example, in PostgreSQL you can generate UUIDs at the database level rather than rely on Prisma ORM's `uuid()`:\n\n```\nmodel User {  id   String  @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid  id   String  @id @default(uuid()) @db.Uuid  test String?}\n```\n\n## Attribute argument types[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attribute-argument-types \"Direct link to Attribute argument types\")\n\n### `FieldReference[]`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#fieldreference \"Direct link to fieldreference\")\n\nAn array of [field](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-fields) names: `[id]`, `[firstName, lastName]`\n\n### `String`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string-1 \"Direct link to string-1\")\n\nA variable length text in double quotes: `\"\"`, `\"Hello World\"`, `\"Alice\"`\n\n### `Expression`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#expression \"Direct link to expression\")\n\nAn expression that can be evaluated by Prisma ORM: `42.0`, `\"\"`, `Bob`, `now()`, `cuid()`\n\n## `enum`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#enum \"Direct link to enum\")\n\nDefines an [enum](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-enums) .\n\n*   Enums are natively supported by [PostgreSQL](https://www.postgresql.org/docs/current/datatype-enum.html) and [MySQL](https://dev.mysql.com/doc/refman/8.0/en/enum.html)\n*   Enums are implemented and enforced at Prisma ORM level in MongoDB\n\n### Naming conventions[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#naming-conventions-2 \"Direct link to Naming conventions\")\n\n*   Enum names must start with a letter (they are typically spelled in [PascalCase](http://wiki.c2.com/?PascalCase))\n*   Enums must use the singular form (e.g. `Role` instead of `role`, `roles` or `Roles`).\n*   Must adhere to the following regular expression: `[A-Za-z][A-Za-z0-9_]*`\n\n### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-25 \"Direct link to Examples\")\n\n#### Specify an `enum` with two possible values[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-an-enum-with-two-possible-values \"Direct link to specify-an-enum-with-two-possible-values\")\n\n*   Relational databases\n*   MongoDB\n\n```\nenum Role {  USER  ADMIN}model User {  id   Int  @id @default(autoincrement())  role Role}\n```\n\n#### Specify an `enum` with two possible values and set a default value[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#specify-an-enum-with-two-possible-values-and-set-a-default-value \"Direct link to specify-an-enum-with-two-possible-values-and-set-a-default-value\")\n\n*   Relational databases\n*   MongoDB\n\n```\nenum Role {  USER  ADMIN}model User {  id   Int  @id @default(autoincrement())  role Role @default(USER)}\n```\n\n## `type`[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#type \"Direct link to type\")\n\nwarning\n\nComposite types are available **for MongoDB only**.\n\ninfo\n\nComposite types are available in versions 3.12.0 and later, and in versions 3.10.0 and later if you enable the `mongodb` Preview feature flag.\n\nDefines a [composite type](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-composite-types) .\n\n### Naming conventions[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#naming-conventions-3 \"Direct link to Naming conventions\")\n\nType names must:\n\n*   start with a letter (they are typically spelled in [PascalCase](http://wiki.c2.com/?PascalCase))\n*   adhere to the following regular expression: `[A-Za-z][A-Za-z0-9_]*`\n\n### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#examples-26 \"Direct link to Examples\")\n\n#### Define a `Product` model with a list of `Photo` composite types[​](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#define-a-product-model-with-a-list-of-photo-composite-types \"Direct link to define-a-product-model-with-a-list-of-photo-composite-types\")\n\n```\nmodel Product {  id     String  @id @default(auto()) @map(\"_id\") @db.ObjectId  name   String  photos Photo[]}type Photo {  height Int  width  Int  url    String}\n```",
    "title": "Prisma Schema API | Prisma Documentation",
    "description": "API reference documentation for the Prisma Schema Language (PSL).",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/reference/prisma-client-reference",
    "markdown": "# Prisma Client API | Prisma Documentation\n\n## Prisma Client API reference\n\nThe Prisma Client API reference documentation is based on the following schema:\n\n```\nmodel User {  id           Int              @id @default(autoincrement())  name         String?  email        String           @unique  profileViews Int              @default(0)  role         Role             @default(USER)  coinflips    Boolean[]  posts        Post[]  city         String  country      String  profile      ExtendedProfile?  pets         Json}model ExtendedProfile {  id     Int     @id @default(autoincrement())  userId Int?    @unique  bio    String?  User   User?   @relation(fields: [userId], references: [id])}model Post {  id        Int     @id @default(autoincrement())  title     String  published Boolean @default(true)  author    User    @relation(fields: [authorId], references: [id])  authorId  Int  comments  Json  views     Int     @default(0)  likes     Int     @default(0)}enum Role {  USER  ADMIN}\n```\n\nAll example generated types (such as `UserSelect` and `UserWhereUniqueInput`) are based on the `User` model.\n\n## `PrismaClient`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#prismaclient \"Direct link to prismaclient\")\n\nThis section describes the `PrismaClient` constructor and its parameters.\n\n*   Parameters are validated at runtime.\n\n### `datasources`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#datasources \"Direct link to datasources\")\n\nProgrammatically overrides properties of the `datasource` block in the `schema.prisma` file - for example, as part of an integration test. See also: [Data sources](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources)\n\nFrom version 5.2.0 and upwards, you can also use the [`datasourceUrl`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#datasourceurl) property to programmatically override the database connection string.\n\n#### Properties[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#properties \"Direct link to Properties\")\n\nExample property\n\nExample value\n\nDescription\n\n`db`\n\n`{ url: 'file:./dev_qa.db' }`\n\nThe database [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls).\n\n*   You must re-generate Prisma Client each time you add or rename a data source. Datasource names are included in the generated client.\n*   If you named your `datasource` block something else in the schema, replace `db` with the name of your `datasource` block.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples \"Direct link to Examples\")\n\n##### Programmatically override a datasource `url`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#programmatically-override-a-datasource-url \"Direct link to programmatically-override-a-datasource-url\")\n\n```\nimport { PrismaClient } from '@prisma/client'const prisma = new PrismaClient({  datasources: {    db: {      url: 'file:./dev_qa.db',    },  },})\n```\n\nBased on the following `datasource` block:\n\n```\ndatasource db {  provider = \"sqlite\"  url      = env(\"DATABASE_URL\")}\n```\n\n### `datasourceUrl`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#datasourceurl \"Direct link to datasourceurl\")\n\nProgrammatically overrides the [`datasource`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#datasources) block in the `schema.prisma` file.\n\n#### Property[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#property \"Direct link to Property\")\n\nOption\n\nExample value\n\nDescription\n\nDatabase connection string\n\n`'file:./dev_qa.db'`\n\nThe database [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls).\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-1 \"Direct link to Examples\")\n\n```\nimport { PrismaClient } from '@prisma/client'const prisma = new PrismaClient({  datasourceUrl: 'postgresql://johndoe:randompassword@localhost:5432/mydb',})\n```\n\n### `log`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#log \"Direct link to log\")\n\nDetermines the type and level of logging. See also: [Logging](https://www.prisma.io/docs/orm/prisma-client/observability-and-logging/logging)\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options \"Direct link to Options\")\n\nOption\n\nExample\n\nArray of log levels\n\n`[ \"info\", \"query\" ]`\n\nArray of log definitions\n\n`[ { level: \"info\", emit: \"event\" }, { level: \"warn\", emit: \"stdout\" }]`\n\n##### Log levels[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#log-levels \"Direct link to Log levels\")\n\nName\n\nExample\n\n`query`\n\nLogs all queries run by Prisma.\n\nFor relational databases this logs all SQL queries. Example:  \n`prisma:query SELECT \"public\".\"User\".\"id\", \"public\".\"User\".\"email\" FROM \"public\".\"User\" WHERE (\"public\".\"User\".\"id\") IN (SELECT \"t0\".\"id\" FROM \"public\".\"User\" AS \"t0\" INNER JOIN \"public\".\"Post\" AS \"j0\" ON (\"j0\".\"authorId\") = (\"t0\".\"id\") WHERE (\"j0\".\"views\" > $1 AND \"t0\".\"id\" IS NOT NULL)) OFFSET $2`\n\nFor MongoDB this logs queries using the [`mongosh` shell](https://docs.mongodb.com/mongodb-shell/#mongodb-binary-bin.mongosh) format. Example:  \n`prisma:query db.User.deleteMany({ _id: ( $in: [ “6221ce49f756b0721fc00542”, ], }, })`\n\n`info`\n\nExample:  \n`prisma:info Started http server on http://127.0.0.1:58471`\n\n`warn`\n\nWarnings.\n\n`error`\n\nErrors.\n\n##### Emit formats[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#emit-formats \"Direct link to Emit formats\")\n\nName\n\nDescription\n\n`stdout`\n\nSee: [stdout](https://en.wikipedia.org/wiki/Standard_streams)\n\n`event`\n\nRaises an event that you can subscribe to.\n\n##### Event types[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#event-types \"Direct link to Event types\")\n\nThe `query` event type:\n\nindex.d.ts\n\n```\nexport type QueryEvent = {  timestamp: Date  query: string // Query sent to the database  params: string // Query parameters  duration: number // Time elapsed (in milliseconds) between client issuing query and database responding - not only time taken to run query  target: string}\n```\n\nNote that for MongoDB, the `params` and `duration` fields will be undefined.\n\nAll other log level event types:\n\nindex.d.ts\n\n```\nexport type LogEvent = {  timestamp: Date  message: string  target: string}\n```\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-2 \"Direct link to Examples\")\n\n##### Log `query` and `info` to `stdout`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#log-query-and-info-to-stdout \"Direct link to log-query-and-info-to-stdout\")\n\n```\nimport { PrismaClient } from '@prisma/client'const prisma = new PrismaClient({ log: ['query', 'info'] })async function main() {  const countUsers = await prisma.user.count({})}main()  .then(async () => {    await prisma.$disconnect()  })  .catch(async (e) => {    console.error(e)    await prisma.$disconnect()    process.exit(1)  })\n```\n\n##### Log a `query` event to console[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#log-a-query-event-to-console \"Direct link to log-a-query-event-to-console\")\n\n```\nimport { PrismaClient } from '@prisma/client'const prisma = new PrismaClient({  log: [{ level: 'query', emit: 'event' }],})prisma.$on('query', (e) => {  console.log(e)})async function main() {  const countUsers = await prisma.user.count({})}main()  .then(async () => {    await prisma.$disconnect()  })  .catch(async (e) => {    console.error(e)    await prisma.$disconnect()    process.exit(1)  })\n```\n\n##### Log `info`, `warn`, and `error` events to console[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#log-info-warn-and-error-events-to-console \"Direct link to log-info-warn-and-error-events-to-console\")\n\n```\nimport { PrismaClient } from '@prisma/client'const prisma = new PrismaClient({  log: [    { level: 'warn', emit: 'event' },    { level: 'info', emit: 'event' },    { level: 'error', emit: 'event' },  ],})prisma.$on('warn', (e) => {  console.log(e)})prisma.$on('info', (e) => {  console.log(e)})prisma.$on('error', (e) => {  console.log(e)})async function main() {  const countUsers = await prisma.user.count({})}main()  .then(async () => {    await prisma.$disconnect()  })  .catch(async (e) => {    console.error(e)    await prisma.$disconnect()    process.exit(1)  })\n```\n\n### `errorFormat`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#errorformat \"Direct link to errorformat\")\n\nDetermines the level and formatting of errors returned by Prisma Client.\n\n#### Error formats[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#error-formats \"Direct link to Error formats\")\n\nName\n\nDescription\n\n`undefined`\n\nIf it's not defined, the default is colorless.\n\n`pretty`\n\nEnables pretty error formatting.\n\n`colorless` (default)\n\nEnables colorless error formatting.\n\n`minimal`\n\nEnables minimal error formatting.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-3 \"Direct link to Examples\")\n\n##### No error formatting[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#no-error-formatting \"Direct link to No error formatting\")\n\n```\nconst prisma = new PrismaClient({  // Defaults to colorless})\n```\n\n##### `pretty` error formatting[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#pretty-error-formatting \"Direct link to pretty-error-formatting\")\n\n```\nconst prisma = new PrismaClient({  errorFormat: 'pretty',})\n```\n\n##### `colorless` error formatting[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#colorless-error-formatting \"Direct link to colorless-error-formatting\")\n\n```\nconst prisma = new PrismaClient({  errorFormat: 'colorless',})\n```\n\n##### `minimal` error formatting[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#minimal-error-formatting \"Direct link to minimal-error-formatting\")\n\n```\nconst prisma = new PrismaClient({  errorFormat: 'minimal',})\n```\n\n### `adapter`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#adapter \"Direct link to adapter\")\n\nDefines an instance of a [driver adapter](https://www.prisma.io/docs/orm/overview/databases/database-drivers#driver-adapters). See also [Database drivers](https://www.prisma.io/docs/orm/overview/databases/database-drivers) .\n\ninfo\n\nThis is available from version 5.4.0 and newer behind the `driverAdapters` feature flag.\n\n#### Example[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#example \"Direct link to Example\")\n\nThe example below uses the [Neon driver adapter](https://www.prisma.io/docs/orm/overview/databases/neon#how-to-use-neons-serverless-driver-with-prisma-orm-preview)\n\n```\nimport { Pool, neonConfig } from '@neondatabase/serverless'import { PrismaNeon } from '@prisma/adapter-neon'import { PrismaClient } from '@prisma/client'import dotenv from 'dotenv'import ws from 'ws'dotenv.config()neonConfig.webSocketConstructor = wsconst connectionString = `${process.env.DATABASE_URL}`const pool = new Pool({ connectionString })const adapter = new PrismaNeon(pool)const prisma = new PrismaClient({ adapter })\n```\n\n### `rejectOnNotFound`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#rejectonnotfound \"Direct link to rejectonnotfound\")\n\ninfo\n\n**Note**: `rejectOnNotFound` was removed in v5.0.0.\n\n**Deprecated:** `rejectOnNotFound` is deprecated in v4.0.0. From v4.0.0, use the queries [`findUniqueOrThrow`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#finduniqueorthrow) or [`findFirstOrThrow`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findfirstorthrow).\n\nUse the `rejectOnNotFound` parameter to configure `findUnique()` and/or `findFirst` to throw an error if the record was not found. By default, both operations return `null` if the record is not found.\n\n*   You can configure `rejectOnNotFound` on a per-request level for both [`findUnique()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findunique) and [`findFirst`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findfirst)\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-1 \"Direct link to Options\")\n\nOption\n\nDescription\n\n`RejectOnNotFound`\n\nEnable globally (`true` / `false`) _or_ throw a custom error.\n\n`RejectPerOperation`\n\nEnable per operation (`true` / `false`) _or_ throw a custom error per operation, per model.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-4 \"Direct link to Examples\")\n\n##### Enable globally for `findUnique()` and `findFirst`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#enable-globally-for-findunique-and-findfirst \"Direct link to enable-globally-for-findunique-and-findfirst\")\n\n```\nconst prisma = new PrismaClient({  rejectOnNotFound: true,})\n```\n\n##### Enable globally for a specific operation[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#enable-globally-for-a-specific-operation \"Direct link to Enable globally for a specific operation\")\n\n```\nconst prisma = new PrismaClient({  rejectOnNotFound: {    findUnique: true,  },})\n```\n\n##### Throw a custom error per model and operation if record is not found[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#throw-a-custom-error-per-model-and-operation-if-record-is-not-found \"Direct link to Throw a custom error per model and operation if record is not found\")\n\n```\nconst prisma = new PrismaClient({  rejectOnNotFound: {    findFirst: {      User: (err) => new Error('User error'),      Post: (err) => new Error('Post error!'),    },    findUnique: {      User: (err) => new Error('User error'),      Post: (err) => new Error('Post error!'),    },  },})\n```\n\n### `transactionOptions`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#transactionoptions \"Direct link to transactionoptions\")\n\ninfo\n\n**Note**: `transactionOptions` was introduced in v5.10.0.\n\nAllows to set [transaction options](https://www.prisma.io/docs/orm/prisma-client/queries/transactions#transaction-options) globally on the constructor level.\n\n*   The transaction levels can be overridden on a per-transaction level.\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-2 \"Direct link to Options\")\n\nOption\n\nDescription\n\n`maxWait`\n\nThe maximum amount of time Prisma Client will wait to acquire a transaction from the database. The default value is 2 seconds.\n\n`timeout`\n\nThe maximum amount of time the interactive transaction can run before being canceled and rolled back. The default value is 5 seconds.\n\n`isolationLevel`\n\nSets the [transaction isolation level](https://www.prisma.io/docs/orm/prisma-client/queries/transactions#transaction-isolation-level). By default this is set to the value currently configured in your database. The available can vary depending on the database you use.\n\n#### Example[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#example-1 \"Direct link to Example\")\n\n```\nconst prisma = new PrismaClient({  transactionOptions: {    isolationLevel: Prisma.TransactionIsolationLevel.Serializable,    maxWait: 5000, // default: 2000    timeout: 10000, // default: 5000  },})\n```\n\n## Model queries[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#model-queries \"Direct link to Model queries\")\n\nUse model queries to perform CRUD operations on your models. See also: [CRUD](https://www.prisma.io/docs/orm/prisma-client/queries/crud)\n\n### `findUnique()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findunique \"Direct link to findunique\")\n\n`findUnique()` query lets you retrieve a single database record:\n\n*   By _ID_\n*   By a _unique_ attribute\n\n`findUnique()` replaced `findOne` in version [2.12.0](https://github.com/prisma/prisma/releases/tag/2.12.0).\n\n*   Prisma Client's dataloader [automatically batches `findUnique()` queries](https://www.prisma.io/docs/orm/prisma-client/queries/query-optimization-performance#solving-n1-in-graphql-with-findunique-and-prisma-clients-dataloader) with the same `select` and `where` parameters.\n*   If you want the query to throw an error if the record is not found, then consider using [`findUniqueOrThrow`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#finduniqueorthrow) instead.\n*   You cannot use [filter conditions](https://www.prisma.io/docs/orm/reference/prisma-client-reference#filter-conditions-and-operators) (e.g. `equals`, `contains`, `not`) to filter fields of the [JSON](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#json) data type. Using filter conditions will likely result in a `null` response for that field.\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-3 \"Direct link to Options\")\n\nName\n\nExample type (`User`)\n\nRequired\n\nDescription\n\n`where`\n\n`UserWhereUniqueInput`\n\n**Yes**\n\nWraps all _unique_ fields of a model so that individual records can be selected.  \nFrom version 4.5.0, this type wraps all fields of a model. [Learn more](https://www.prisma.io/docs/orm/reference/prisma-client-reference#filter-on-non-unique-fields-with-userwhereuniqueinput)\n\n`select`\n\n`XOR<UserSelect, null>`\n\nNo\n\n[Specifies which properties to include](https://www.prisma.io/docs/orm/prisma-client/queries/select-fields) on the returned object.\n\n`include`\n\n`XOR<UserInclude, null>`\n\nNo\n\n[Specifies which relations should be eagerly loaded](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries) on the returned object.\n\n`omit`\n\n`XOR<UserOmit, null>`\n\nNo\n\nSpecifies which properties to exclude on the returned object. In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.13.0\n\n`relationLoadStrategy`\n\n`'join'` or `'query'`\n\nNo\n\n**Default: `join`**. Specifies the [load strategy](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#relation-load-strategies-preview) for a relation query. Only available in combination with `include` (or `select` on a relation field). In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.9.0.\n\n`rejectOnNotFound` (deprecated)\n\n`RejectOnNotFound`\n\nNo\n\nIf true, throw a `NotFoundError: No User found error`. You can also [configure `rejectOnNotFound` globally](https://www.prisma.io/docs/orm/reference/prisma-client-reference#rejectonnotfound).  \n**Note:** `rejectOnNotFound`is deprecated in v4.0.0. From v4.0.0, use [`findUniqueOrThrow`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#finduniqueorthrow) instead.\n\n#### Return type[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-type \"Direct link to Return type\")\n\nReturn type\n\nExample\n\nDescription\n\nJavaScript object (typed)\n\n`User`\n\nJavaScript object (plain)\n\n`{ title: \"Hello world\" }`\n\nUse `select` and `include` to determine which fields to return.\n\n`null`\n\n`null`\n\nRecord not found\n\nError\n\nIf `rejectOnNotFound` is true, `findUnique()` throws an error (`NotFoundError` by default, [customizable globally](https://www.prisma.io/docs/orm/reference/prisma-client-reference#rejectonnotfound)) instead of returning `null`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-5 \"Direct link to Examples\")\n\n##### Get the `User` record with an `id` of `42`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-the-user-record-with-an-id-of-42 \"Direct link to get-the-user-record-with-an-id-of-42\")\n\n```\nconst result = await prisma.user.findUnique({  where: {    id: 42,  },})\n```\n\n##### Get the `User` record with an `email` of `alice@prisma.io`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-the-user-record-with-an-email-of-aliceprismaio \"Direct link to get-the-user-record-with-an-email-of-aliceprismaio\")\n\n```\nconst result = await prisma.user.findUnique({  where: {    email: 'alice@prisma.io',  },})\n```\n\n##### Get the `User` record with `firstName` of `Alice` and `lastName` of `Smith` (`@@unique`)[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-the-user-record-with-firstname-of-alice-and-lastname-of-smith-unique \"Direct link to get-the-user-record-with-firstname-of-alice-and-lastname-of-smith-unique\")\n\nExpand for example User model with a @@unique block\n\n```\nmodel User {  firstName String  lastName  String  @@unique(fields: [firstName, lastName], name: \"fullname\")}\n```\n\n```\nconst result = await prisma.user.findUnique({  where: {    fullname: {      // name property of @@unique attribute - default is firstname_lastname      firstName: 'Alice',      lastName: 'Smith',    },  },})\n```\n\n##### Get the `User` record with `firstName` of `Alice` and `lastName` of `Smith` (`@@id`)[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-the-user-record-with-firstname-of-alice-and-lastname-of-smith-id \"Direct link to get-the-user-record-with-firstname-of-alice-and-lastname-of-smith-id\")\n\nExpand for example User model with an @@id block\n\n```\nmodel User {  firstName String  lastName  String  @@id([firstName, lastName])}\n```\n\n```\nconst result = await prisma.user.findUnique({  where: {    firstName_lastName: {      firstName: 'Alice',      lastName: 'Smith',    },  },})\n```\n\n### `findUniqueOrThrow()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#finduniqueorthrow \"Direct link to finduniqueorthrow\")\n\ninfo\n\nWe introduced `findUniqueOrThrow` in v4.0.0. It replaces the [`rejectOnNotFound`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#rejectonnotfound) option. `rejectOnNotFound` is deprecated in v4.0.0.\n\n`findUniqueOrThrow` retrieves a single data record in the same way as [`findUnique()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findunique). However, if the query does not find a record, it returns `NotFoundError: No User found error`.\n\n`findUniqueOrThrow` differs from `findUnique()` as follows:\n\n*   Its return type is non-nullable. For example, `post.findUnique()` can return `post` or `null`, but `post.findUniqueOrThrow()` always returns `post`.\n    \n*   It is not compatible with sequential operations in the [`$transaction` API](https://www.prisma.io/docs/orm/prisma-client/queries/transactions#the-transaction-api). If the query returns `NotFoundError`, then the API will not roll back any operations in the array of calls. As a workaround, you can use interactive transactions with the `$transaction` API, as follows:\n    \n    ```\n     $transaction(async (prisma) => {   await prisma.model.create({ data: { ... });   await prisma.model.findUniqueOrThrow(); })\n    ```\n    \n\n### `findFirst()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findfirst \"Direct link to findfirst\")\n\n`findFirst` returns the first record in a list that matches your criteria.\n\n*   If you want the query to throw an error if the record is not found, then consider using [`findFirstOrThrow`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findfirstorthrow) instead.\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-4 \"Direct link to Options\")\n\nName\n\nExample type (`User`)\n\nRequired\n\nDescription\n\n`select`\n\n`XOR<UserSelect, null>`\n\nNo\n\n[Specifies which properties to include](https://www.prisma.io/docs/orm/prisma-client/queries/select-fields) on the returned object.\n\n`include`\n\n`XOR<UserInclude, null>`\n\nNo\n\n[Specifies which relations should be eagerly loaded](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries) on the returned object.\n\n`omit`\n\n`XOR<UserOmit, null>`\n\nNo\n\nSpecifies which properties to exclude on the returned object. In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.13.0.\n\n`relationLoadStrategy`\n\n`'join'` or `'query'`\n\nNo\n\n**Default: `join`**. Specifies the [load strategy](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#relation-load-strategies-preview) for a relation query. Only available in combination with `include` (or `select` on a relation field). In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.9.0.\n\n`where`\n\n`UserWhereInput`\n\nNo\n\nWraps _all_ model fields in a type so that the list can be filtered by any property.\n\n`orderBy`\n\n`XOR<Enumerable<User`  \n`OrderByInput>,UserOrderByInput>`\n\nNo\n\nLets you order the returned list by any property.\n\n`cursor`\n\n`UserWhereUniqueInput`\n\nNo\n\nSpecifies the position for the list (the value typically specifies an `id` or another unique value).\n\n`take`\n\n`number`\n\nNo\n\nSpecifies how many objects should be returned in the list. When used with `findFirst`, `take` is implicitly `1` or `-1`. `findFirst` is only affected by whether the value is positive or negative - any negative value reverses the list.\n\n`skip`\n\n`number`\n\nNo\n\nSpecifies how many of the returned objects in the list should be skipped.\n\n`distinct`\n\n`Enumerable<UserDistinct`  \n`FieldEnum>`\n\nNo\n\nLets you filter out duplicate rows by a specific field - for example, return only distinct `Post` titles.\n\n`rejectOnNotFound` (deprecated)\n\n`RejectOnNotFound`\n\nNo\n\nIf true, throw a `NotFoundError: No User found error`. You can also [configure `rejectOnNotFound` globally](https://www.prisma.io/docs/orm/reference/prisma-client-reference#rejectonnotfound).  \n**Note:** `rejectOnNotFound`is deprecated in v4.0.0. From v4.0.0, use [`findFirstOrThrow`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findfirstorthrow) instead.\n\n#### Return type[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-type-1 \"Direct link to Return type\")\n\nReturn type\n\nExample\n\nDescription\n\nJavaScript object (typed)\n\n`User`\n\nSpecifies which properties to include on the returned object.\n\nJavaScript object (plain)\n\n`{ title: \"Hello world\" }`\n\nUse `select` and `include` to determine which fields to return.\n\n`null`\n\n`null`\n\nRecord not found\n\nError\n\nIf `rejectOnNotFound` is true, `findUnique()` throws an error (`NotFoundError` by default, [customizable globally](https://www.prisma.io/docs/orm/reference/prisma-client-reference#rejectonnotfound)) instead of returning `null`.\n\n*   `findFirst` calls `findMany` behind the scenes and accepts the same query options.\n*   Passing in a negative `take` value when you use a `findFirst` query reverses the order of the list.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-6 \"Direct link to Examples\")\n\nSee [Filter conditions and operators](https://www.prisma.io/docs/orm/reference/prisma-client-reference#filter-conditions-and-operators) for examples of how to filter results.\n\n##### Get the first `User` record where the `name` is `Alice`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-the-first-user-record-where-the-name-is-alice \"Direct link to get-the-first-user-record-where-the-name-is-alice\")\n\n```\nconst user = await prisma.user.findFirst({  where: { name: 'Alice' },})\n```\n\n##### Get the first `Post` record where the `title` starts with `A test`, reverse the list with `take`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-the-first-post-record-where-the-title-starts-with-a-test-reverse-the-list-with-take \"Direct link to get-the-first-post-record-where-the-title-starts-with-a-test-reverse-the-list-with-take\")\n\n```\nimport { PrismaClient } from '@prisma/client'const prisma = new PrismaClient({})async function main() {  const a = await prisma.post.create({    data: {      title: 'A test 1',    },  })  const b = await prisma.post.create({    data: {      title: 'A test 2',    },  })  const c = await prisma.post.findFirst({    where: {      title: {        startsWith: 'A test',      },    },    orderBy: {      title: 'asc',    },    take: -1, // Reverse the list  })}main()\n```\n\n### `findFirstOrThrow()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findfirstorthrow \"Direct link to findfirstorthrow\")\n\ninfo\n\nWe introduced `findFirstOrThrow` in v4.0.0. It replaces the [`rejectOnNotFound`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#rejectonnotfound) option. `rejectOnNotFound` is deprecated in v4.0.0.\n\n`findFirstOrThrow` retrieves the first record in a list in the same way as [`findFirst`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findfirst). However, if the query does not find a record, it returns `NotFoundError: No User found error`.\n\n`findFirstOrThrow` differs from `findFirst` as follows:\n\n*   Its return type is non-nullable. For example, `post.findFirst()` can return `post` or `null`, but `post.findFirstOrThrow` always returns `post`.\n    \n*   It is not compatible with sequential operations in the [`$transaction` API](https://www.prisma.io/docs/orm/prisma-client/queries/transactions#the-transaction-api). If the query returns `NotFoundError`, then the API will not roll back any operations in the array of calls. As a workaround, you can use interactive transactions with the `$transaction` API, as follows:\n    \n    ```\n    prisma.$transaction(async (tx) => {  await tx.model.create({ data: { ... });  await tx.model.findFirstOrThrow();})\n    ```\n    \n\n### `findMany()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findmany \"Direct link to findmany\")\n\n`findMany` returns a list of records.\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-5 \"Direct link to Options\")\n\nName\n\nType\n\nRequired\n\nDescription\n\n`select`\n\n`XOR<PostSelect, null>`\n\nNo\n\n[Specifies which properties to include](https://www.prisma.io/docs/orm/prisma-client/queries/select-fields) on the returned object.\n\n`include`\n\n`XOR<PostInclude, null>`\n\nNo\n\n[Specifies which relations should be eagerly loaded](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries) on the returned object.\n\n`omit`\n\n`XOR<PostOmit, null>`\n\nNo\n\nSpecifies which properties to exclude on the returned object. In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.13.0\n\n`relationLoadStrategy`\n\n`'join'` or `'query'`\n\nNo\n\n**Default: `join`**. Specifies the [load strategy](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#relation-load-strategies-preview) for a relation query. Only available in combination with `include` (or `select` on a relation field). In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.9.0.\n\n`where`\n\n`UserWhereInput`\n\nNo\n\nWraps _all_ model fields in a type so that the list can be filtered by any property.\n\n`orderBy`\n\n`XOR<Enumerable<PostOrder`  \n`ByInput>, PostOrderByInput>`\n\nNo\n\nLets you order the returned list by any property.\n\n`cursor`\n\n`UserWhereUniqueInput`\n\nNo\n\nSpecifies the position for the list (the value typically specifies an `id` or another unique value).\n\n`take`\n\n`number`\n\nNo\n\nSpecifies how many objects should be returned in the list (as seen from the _beginning_ (positive value) or _end_ (negative value) **either** of the list **or** from the `cursor` position if mentioned)\n\n`skip`\n\n`number`\n\nNo\n\nSpecifies how many of the returned objects in the list should be skipped.\n\n`distinct`\n\n`Enumerable<UserDistinctFieldEnum>`\n\nNo\n\nLets you filter out duplicate rows by a specific field - for example, return only distinct `Post` titles.\n\n#### Return type[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-type-2 \"Direct link to Return type\")\n\nReturn type\n\nExample\n\nDescription\n\nJavaScript array object (typed)\n\n`User[]`\n\nJavaScript array object (plain)\n\n`[{ title: \"Hello world\" }]`\n\nUse `select` and `include` to determine which fields to return.\n\nEmpty array\n\n`[]`\n\nNo matching records found.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-7 \"Direct link to Examples\")\n\nSee [Filter conditions and operators](https://www.prisma.io/docs/orm/reference/prisma-client-reference#filter-conditions-and-operators) for examples of how to filter results.\n\n##### Get all `User` records where the `name` is `Alice`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-user-records-where-the-name-is-alice \"Direct link to get-all-user-records-where-the-name-is-alice\")\n\n```\nconst user = await prisma.user.findMany({  where: { name: 'Alice' },})\n```\n\n### `create()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create \"Direct link to create\")\n\n`create` creates a new database record.\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-6 \"Direct link to Options\")\n\nName\n\nType\n\nRequired\n\nDescription\n\n`data`\n\n`XOR<UserCreateInput,`  \n`UserUncheckedCreateInput>`\n\n**Yes**\n\nWraps all the model fields in a type so that they can be provided when creating new records. It also includes relation fields which lets you perform (transactional) nested inserts. Fields that are marked as optional or have default values in the datamodel are optional.\n\n[`select`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select)\n\n`XOR<UserSelect, null>`\n\nNo\n\n[Specifies which properties to include](https://www.prisma.io/docs/orm/prisma-client/queries/select-fields) on the returned object.\n\n[`include`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#include)\n\n`XOR<UserInclude, null>`\n\nNo\n\n[Specifies which relations should be eagerly loaded](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries) on the returned object.\n\n[`omit`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#omit-preview)\n\n`XOR<UserOmit, null>`\n\nNo\n\nSpecifies which properties to exclude on the returned object. In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.13.0\n\n`relationLoadStrategy`\n\n`'join'` or `'query'`\n\nNo\n\n**Default: `join`**. Specifies the [load strategy](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#relation-load-strategies-preview) for a relation query. Only available in combination with `include` (or `select` on a relation field). In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.9.0.\n\n#### Return type[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-type-3 \"Direct link to Return type\")\n\nReturn type\n\nExample\n\nDescription\n\nJavaScript object (typed)\n\n`User`\n\nJavaScript object (plain)\n\n`{ name: \"Alice Wonderland\" }`\n\nUse `select` and `include` to determine which fields to return.\n\n*   You can also perform a nested [`create`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-1) - for example, add a `User` and two `Post` records at the same time.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-8 \"Direct link to Examples\")\n\n##### Create a single new record with the only required field `email`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-a-single-new-record-with-the-only-required-field-email \"Direct link to create-a-single-new-record-with-the-only-required-field-email\")\n\n```\nconst user = await prisma.user.create({  data: { email: 'alice@prisma.io' },})\n```\n\n##### Create multiple new records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-multiple-new-records \"Direct link to Create multiple new records\")\n\nIn most cases, you can carry out batch inserts with the [`createMany()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#createmany) or [`createManyAndReturn()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#createmanyandreturn) queries. However, [there are scenarios where `create()` is the best option to insert multiple records](https://www.prisma.io/docs/orm/reference/prisma-client-reference#remarks-10).\n\nThe following example results in **two** `INSERT` statements:\n\n```\nimport { Prisma, PrismaClient } from '@prisma/client'const prisma = new PrismaClient({ log: ['query'] })async function main() {  let users: Prisma.UserCreateInput[] = [    {      email: 'ariana@prisma.io',      name: 'Ari',      profileViews: 20,      coinflips: [true, false, false],      role: 'ADMIN',    },    {      email: 'elsa@prisma.io',      name: 'Elsa',      profileViews: 20,      coinflips: [true, false, false],      role: 'ADMIN',    },  ]  await Promise.all(    users.map(async (user) => {      await prisma.user.create({        data: user,      })    })  )}main()  .then(async () => {    await prisma.$disconnect()  })  .catch(async (e) => {    console.error(e)    await prisma.$disconnect()    process.exit(1)  })\n```\n\n### `update()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update \"Direct link to update\")\n\n`update` updates an existing database record.\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-7 \"Direct link to Options\")\n\nName\n\nType\n\nRequired\n\nDescription\n\n`data`\n\n`XOR<UserUpdateInput`  \n`UserUncheckedUpdateInput>`\n\n**Yes**\n\nWraps all the fields of the model so that they can be provided when updating an existing record. Fields that are marked as optional or have default values in the datamodel are optional.\n\n`where`\n\n`UserWhereUniqueInput`\n\n**Yes**\n\nWraps all _unique_ fields of a model so that individual records can be selected.  \nFrom version 4.5.0, this type wraps all fields of a model. [Learn more](https://www.prisma.io/docs/orm/reference/prisma-client-reference#filter-on-non-unique-fields-with-userwhereuniqueinput)\n\n[`select`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select)\n\n`XOR<UserSelect, null>`\n\nNo\n\n[Specifies which properties to include](https://www.prisma.io/docs/orm/prisma-client/queries/select-fields) on the returned object.\n\n[`include`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#include)\n\n`XOR<UserInclude, null>`\n\nNo\n\n[Specifies which relations should be eagerly loaded](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries) on the returned object.\n\n[`omit`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#omit-preview)\n\n`XOR<UserOmit, null>`\n\nNo\n\nSpecifies which properties to exclude on the returned object. In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.13.0.\n\n`relationLoadStrategy`\n\n`'join'` or `'query'`\n\nNo\n\n**Default: `join`**. Specifies the [load strategy](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#relation-load-strategies-preview) for a relation query. Only available in combination with `include` (or `select` on a relation field). In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.9.0.\n\n#### Return type[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-type-4 \"Direct link to Return type\")\n\nReturn type\n\nExample\n\nDescription\n\nJavaScript object (typed)\n\n`User`\n\nJavaScript object (plain)\n\n`{ name: \"Alice Wonderland\" }`\n\nUse `select` and `include` to determine which fields to return.\n\n`RecordNotFound` exception\n\nException is thrown if record does not exist.\n\n*   To perform arithmetic operations on update (add, subtract, multiply, divide), use [atomic updates](https://www.prisma.io/docs/orm/reference/prisma-client-reference#atomic-number-operations) to prevent race conditions.\n*   You can also perform a nested [`update`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-1) - for example, update a user and that user's posts at the same time.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-9 \"Direct link to Examples\")\n\n##### Update the `email` of the `User` record with `id` of `1` to `alice@prisma.io`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-the-email-of-the-user-record-with-id-of-1-to-aliceprismaio \"Direct link to update-the-email-of-the-user-record-with-id-of-1-to-aliceprismaio\")\n\n```\nconst user = await prisma.user.update({  where: { id: 1 },  data: { email: 'alice@prisma.io' },})\n```\n\n### `upsert()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#upsert \"Direct link to upsert\")\n\ninfo\n\nThis section covers the usage of the `upsert()` operation. To learn about using [nested upsert queries](https://www.prisma.io/docs/orm/reference/prisma-client-reference#upsert-1) within `update()`, reference the linked documentation.\n\n`upsert` does the following:\n\n*   If an existing database record satisfies the `where` condition, it updates that record\n*   If no database record satisfies the `where` condition, it creates a new database record\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-8 \"Direct link to Options\")\n\nName\n\nType\n\nRequired\n\nDescription\n\n`create`\n\n`XOR<UserCreateInput,`  \n`UserUncheckedCreateInput>`\n\n**Yes**\n\nWraps all the fields of the model so that they can be provided when creating new records. It also includes relation fields which lets you perform (transactional) nested inserts. Fields that are marked as optional or have default values in the datamodel are optional.\n\n`update`\n\n`XOR<UserUpdateInput,`  \n`UserUncheckedUpdateInput>`\n\n**Yes**\n\nWraps all the fields of the model so that they can be provided when updating an existing record. Fields that are marked as optional or have default values in the datamodel are optional.\n\n`where`\n\n`UserWhereUniqueInput`\n\n**Yes**\n\nWraps all _unique_ fields of a model so that individual records can be selected.  \nFrom version 4.5.0, this type wraps all fields of a model. [Learn more](https://www.prisma.io/docs/orm/reference/prisma-client-reference#filter-on-non-unique-fields-with-userwhereuniqueinput)\n\n[`select`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select)\n\n`XOR<UserSelect, null>`\n\nNo\n\n[Specifies which properties to include](https://www.prisma.io/docs/orm/prisma-client/queries/select-fields) on the returned object.\n\n[`include`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#include)\n\n`XOR<UserInclude, null>`\n\nNo\n\n[Specifies which relations should be eagerly loaded](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries) on the returned object.\n\n[`omit`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#omit-preview)\n\n`XOR<UserOmit, null>`\n\nNo\n\nSpecifies which properties to exclude on the returned object. In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.13.0\n\n`relationLoadStrategy`\n\n`'join'` or `'query'`\n\nNo\n\n**Default: `join`**. Specifies the [load strategy](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#relation-load-strategies-preview) for a relation query. Only available in combination with `include` (or `select` on a relation field). In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.9.0.\n\n#### Return type[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-type-5 \"Direct link to Return type\")\n\nReturn type\n\nExample\n\nDescription\n\nJavaScript object (typed)\n\n`User`\n\nJavaScript object (plain)\n\n`{ name: \"Alice Wonderland\" }`\n\nUse `select` and `include` to determine which fields to return.\n\n*   To perform arithmetic operations on update (add, subtract, multiply, divide), use [atomic updates](https://www.prisma.io/docs/orm/reference/prisma-client-reference#atomic-number-operations) to prevent race conditions.\n*   If two or more upsert operations happen at the same time and the record doesn't already exist, then a race condition might happen. As a result, one or more of the upsert operations might throw a unique key constraint error. Your application code can catch this error and retry the operation. [Learn more](https://www.prisma.io/docs/orm/reference/prisma-client-reference#unique-key-constraint-errors-on-upserts).\n*   From version 4.6.0, Prisma ORM hands over upsert queries to the database where possible. [Learn more](https://www.prisma.io/docs/orm/reference/prisma-client-reference#database-upserts).\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-10 \"Direct link to Examples\")\n\n##### Update (if exists) or create a new `User` record with an `email` of `alice@prisma.io`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-if-exists-or-create-a-new-user-record-with-an-email-of-aliceprismaio \"Direct link to update-if-exists-or-create-a-new-user-record-with-an-email-of-aliceprismaio\")\n\n```\nconst user = await prisma.user.upsert({  where: { id: 1 },  update: { email: 'alice@prisma.io' },  create: { email: 'alice@prisma.io' },})\n```\n\n#### Unique key constraint errors on upserts[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#unique-key-constraint-errors-on-upserts \"Direct link to Unique key constraint errors on upserts\")\n\n##### Problem[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#problem \"Direct link to Problem\")\n\nIf multiple upsert operations happen at the same time and the record doesn't already exist, then one or more of the operations might return a [unique key constraint error](https://www.prisma.io/docs/orm/reference/error-reference#p2002).\n\n##### Cause[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#cause \"Direct link to Cause\")\n\nWhen Prisma Client does an upsert, it first checks whether that record already exists in the database. To make this check, Prisma Client performs a read operation with the `where` clause from the upsert operation. This has two possible outcomes, as follows:\n\n*   If the record does not exist, then Prisma Client creates that record.\n*   If the record exists, then Prisma Client updates it.\n\nWhen your application tries to perform two or more concurrent upsert operations, then a race condition might happen where two or more operations do not find the record and therefore try to create that record. In this situation, one of the operations successfully creates the new record but the other operations fail and return a unique key constraint error.\n\n##### Solution[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#solution \"Direct link to Solution\")\n\nHandle the P2002 error in your application code. When it occurs, retry the upsert operation to update the row.\n\n#### Database upserts[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#database-upserts \"Direct link to Database upserts\")\n\nWhere possible, Prisma Client hands over an `upsert` query to the database. This is called a _database upsert_.\n\nDatabase upserts have the following advantages:\n\n*   They are faster than upserts handled by Prisma Client\n*   [Unique key constraint errors](https://www.prisma.io/docs/orm/reference/prisma-client-reference#unique-key-constraint-errors-on-upserts) cannot happen\n\nPrisma Client uses a database upsert automatically when [specific criteria](https://www.prisma.io/docs/orm/reference/prisma-client-reference#database-upsert-query-criteria) are met. When these criteria are not met, Prisma Client handles the `upsert`.\n\nTo use a database upsert, Prisma Client sends the SQL construction [`INSERT ... ON CONFLICT SET .. WHERE`](https://www.prisma.io/dataguide/postgresql/inserting-and-modifying-data/insert-on-conflict) to the database.\n\n##### Database upsert prerequisites[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#database-upsert-prerequisites \"Direct link to Database upsert prerequisites\")\n\nPrisma Client can use database upserts if your stack meets the following criteria:\n\n*   You use Prisma ORM version 4.6.0 or later\n*   Your application uses a CockroachDB, PostgreSQL, or SQLite data source\n\n##### Database upsert query criteria[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#database-upsert-query-criteria \"Direct link to Database upsert query criteria\")\n\nPrisma Client uses a database upsert for an `upsert` query when the query meets the following criteria:\n\n*   There are no nested queries in the `upsert`'s `create` and `update` [options](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-7)\n*   The query does _not_ include a selection that uses a [nested read](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#nested-reads)\n*   The query modifies only one model\n*   There is only one unique field in the `upsert`'s `where` option\n*   The unique field in the `where` option and the unique field in the `create` option have the same value\n\nIf your query does not meet these criteria, then Prisma Client handles the upsert itself.\n\n##### Database upsert examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#database-upsert-examples \"Direct link to Database upsert examples\")\n\nThe following examples use this schema:\n\n```\nmodel User {  id           Int    @id  profileViews Int  userName     String @unique  email        String  @@unique([id, profileViews])}\n```\n\nThe following `upsert` query meets all of the criteria, so Prisma Client uses a database upsert.\n\n```\nprisma.user.upsert({  where: {    userName: 'Alice',  },  create: {    id: 1,    profileViews: 1,    userName: 'Alice',    email: 'alice@prisma.io',  },  update: {    email: 'updated@example.com',  },})\n```\n\nIn this situation, Prisma uses the following SQL query:\n\n```\nINSERT INTO \"public\".\"User\" (\"id\",\"profileViews\",\"userName\",\"email\") VALUES ($1,$2,$3,$4)ON CONFLICT (\"userName\") DO UPDATESET \"email\" = $5 WHERE (\"public\".\"User\".\"userName\" = $6 AND 1=1) RETURNING \"public\".\"User\".\"id\", \"public\".\"User\".\"profileViews\", \"public\".\"User\".\"userName\", \"public\".\"User\".\"email\"\n```\n\nThe following query has multiple unique values in the `where` clause, so Prisma Client does _not_ use a database upsert:\n\n```\nprisma.User.upsert({  where: {    userName: 'Alice',    profileViews: 1,    id: 1,  },  create: {    id: 1,    profileViews: 1,    userName: 'Alice',    email: 'alice@prisma.io',  },  update: {    email: 'updated@example.com',  },})\n```\n\nIn the following query, the values for `userName` in the `where` and `create` options are different, so Prisma Client does _not_ use a database upsert.\n\n```\nprisma.User.upsert({  where: {    userName: 'Alice',  },  create: {    id: 1,    profileViews: 1,    userName: 'AliceS',    email: 'alice@prisma.io',  },  update: {    email: 'updated@example.com',  },})\n```\n\nIn the following query, the selection on the `title` field in `posts` is a nested read, so Prisma Client does _not_ use a database upsert.\n\n```\nprisma.user.upsert({  select: {    email: true,    id: true,    posts: {      select: {        title: true,      },    },  },  where: {    userName: 'Alice',  },  create: {    id: 1,    profileViews: 1,    userName: 'Alice',    email: 'alice@prisma.io',  },  update: {    email: 'updated@example.com',  },})\n```\n\n### `delete()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#delete \"Direct link to delete\")\n\n`delete` deletes an existing database record. You can delete a record:\n\n*   By _ID_\n*   By a _unique_ attribute\n\nTo delete records that match a certain criteria, use [`deleteMany`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#deletemany) with a filter.\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-9 \"Direct link to Options\")\n\nName\n\nType\n\nRequired\n\nDescription\n\n`where`\n\n`UserWhereUniqueInput`\n\n**Yes**\n\nWraps all _unique_ fields of a model so that individual records can be selected.  \nFrom version 4.5.0, this type wraps all fields of a model. [Learn more](https://www.prisma.io/docs/orm/reference/prisma-client-reference#filter-on-non-unique-fields-with-userwhereuniqueinput)\n\n[`select`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select)\n\n`XOR<UserSelect, null>`\n\nNo\n\n[Specifies which properties to include](https://www.prisma.io/docs/orm/prisma-client/queries/select-fields) on the returned object.\n\n[`include`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#include)\n\n`XOR<UserInclude, null>`\n\nNo\n\n[Specifies which relations should be eagerly loaded](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries) on the returned object.\n\n[`omit`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#omit-preview)\n\n`XOR<UserOmit, null>`\n\nNo\n\nSpecifies which properties to exclude on the returned object. In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.13.0\n\n`relationLoadStrategy`\n\n`'join'` or `'query'`\n\nNo\n\n**Default: `join`**. Specifies the [load strategy](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#relation-load-strategies-preview) for a relation query. Only available in combination with `include` (or `select` on a relation field). In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.9.0.\n\n#### Return type[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-type-6 \"Direct link to Return type\")\n\nReturn type\n\nExample\n\nDescription\n\nJavaScript object (typed)\n\n`User`\n\nThe `User` record that was deleted.\n\nJavaScript object (plain)\n\n`{ name: \"Alice Wonderland\" }`\n\nData from the `User` record that was deleted. Use `select` and `include` to determine which fields to return.\n\n`RecordNotFound` exception\n\nThrows an exception if record does not exist.\n\n*   To delete multiple records based on some criteria (for example, all `User` records with a `prisma.io` email address, use `deleteMany`)\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-11 \"Direct link to Examples\")\n\n##### Delete the `User` record with an `id` of `1`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#delete-the-user-record-with-an-id-of-1 \"Direct link to delete-the-user-record-with-an-id-of-1\")\n\n```\nconst user = await prisma.user.delete({  where: { id: 1 },})\n```\n\n##### Delete the `User` record where `email` equals `else@prisma.io`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#delete-the-user-record-where-email-equals-elseprismaio \"Direct link to delete-the-user-record-where-email-equals-elseprismaio\")\n\nThe following query deletes a specific user record and uses `select` to return the `name` and `email` of the deleted user:\n\n```\nconst deleteUser = await prisma.user.delete({  where: {    email: 'elsa@prisma.io',  },  select: {    email: true,    name: true,  },})\n```\n\n### `createMany()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#createmany \"Direct link to createmany\")\n\n`createMany` creates multiple records in a transaction.\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-10 \"Direct link to Options\")\n\nName\n\nType\n\nRequired\n\nDescription\n\n`data`\n\n`Enumerable<UserCreateManyInput>`\n\n**Yes**\n\nWraps all the model fields in a type so that they can be provided when creating new records. Fields that are marked as optional or have default values in the datamodel are optional.\n\n`skipDuplicates?`\n\n`boolean`\n\nNo\n\nDo not insert records with unique fields or ID fields that already exist. Only supported by databases that support [`ON CONFLICT DO NOTHING`](https://www.postgresql.org/docs/9.5/sql-insert.html#SQL-ON-CONFLICT). This excludes MongoDB and SQLServer\n\n#### Return type[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-type-7 \"Direct link to Return type\")\n\nReturn type\n\nExample\n\nDescription\n\n`BatchPayload`\n\n`{ count: 3 }`\n\nA count of the number of records created.\n\n*   As of Prisma ORM version 5.12.0, `createMany()` is now supported by SQLite.\n*   The `skipDuplicates` option is not supported by MongoDB, SQLServer, or SQLite.\n*   You **cannot** create or connect relations by using nested `create`, `createMany`, `connect`, `connectOrCreate` queries inside a top-level `createMany()` query.\n*   You can use a nested [`createMany`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#createmany-1) query inside an [`update()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update) or [`create()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create) query - for example, add a `User` and two `Post` records with a nested `createMany` at the same time.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-12 \"Direct link to Examples\")\n\n##### Create several new users[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-several-new-users \"Direct link to Create several new users\")\n\n```\nconst users = await prisma.user.createMany({  data: [    { name: 'Sonali', email: 'sonali@prisma.io' },    { name: 'Alex', email: 'alex@prisma.io' },  ],})\n```\n\n### `createManyAndReturn()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#createmanyandreturn \"Direct link to createmanyandreturn\")\n\n`createManyAndReturn` creates multiple records and returns the resulting objects.\n\ninfo\n\n`createManyAndReturn()` is only available in Prisma ORM version 5.14.0 and up. `createManyAndReturn()` is only available for PostgreSQL, CockroachDB, and SQLite.\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-11 \"Direct link to Options\")\n\nName\n\nType\n\nRequired\n\nDescription\n\n`data`\n\n`Enumerable<UserCreateManyInput>`\n\n**Yes**\n\nWraps all the model fields in a type so that they can be provided when creating new records. Fields that are marked as optional or have default values in the datamodel are optional.\n\n[`select`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select)\n\n`XOR<UserSelect, null>`\n\nNo\n\n[Specifies which properties to include](https://www.prisma.io/docs/orm/prisma-client/queries/select-fields) on the returned objects.\n\n[`omit`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#omit-preview)\n\n`XOR<UserOmit, null>`\n\nNo\n\nSpecifies which properties to exclude on the returned objects. In [Preview](https://www.prisma.io/docs/orm/more/releases#preview) since 5.13.0. Mutually exclusive with `select`.\n\n[`include`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#include)\n\n`XOR<UserInclude, null>`\n\nNo\n\n[Specifies which relations should be eagerly loaded](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries) on the returned objects.\n\n`skipDuplicates?`\n\n`boolean`\n\nNo\n\nDo not insert records with unique fields or ID fields that already exist. Only supported by databases that support [`ON CONFLICT DO NOTHING`](https://www.postgresql.org/docs/9.5/sql-insert.html#SQL-ON-CONFLICT). This excludes MongoDB and SQLServer\n\n*   The `skipDuplicates` option is not supported by SQLite.\n*   You **cannot** create or connect relations by using nested `create`, `createMany`, `connect`, `connectOrCreate` queries inside a top-level `createManyAndReturn()` query.\n*   When relations are included via `include`, a separate query is generated per relation.\n*   `relationLoadStrategy: join` is not supported.\n\n#### Return type[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-type-8 \"Direct link to Return type\")\n\nReturn type\n\nExample\n\nDescription\n\nJavaScript array object (typed)\n\n`User[]`\n\nJavaScript array object (plain)\n\n`[{ name: \"Sonali\" }]`\n\nUse `select`, `omit` and `include` to determine which fields to return.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-13 \"Direct link to Examples\")\n\n##### Create and return several new users[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-and-return-several-new-users \"Direct link to Create and return several new users\")\n\n```\nconst users = await prisma.user.createManyAndReturn({  data: [    { name: 'Sonali', email: 'sonali@prisma.io' },    { name: 'Alex', email: 'alex@prisma.io' },  ],})\n```\n\n### `updateMany()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#updatemany \"Direct link to updatemany\")\n\n`updateMany` updates a batch of existing database records in bulk and returns the number of updated records.\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-12 \"Direct link to Options\")\n\nName\n\nType\n\nRequired\n\nDescription\n\n`data`\n\n`XOR<UserUpdateManyMutationInput,`  \n`UserUncheckedUpdateManyInput>`\n\n**Yes**\n\nWraps all the fields of the model so that they can be provided when updating an existing record. Fields that are marked as optional or have default values in the datamodel are optional on `data`.\n\n`where`\n\n`UserWhereInput`\n\nNo\n\nWraps _all_ fields of a model so that the list can be filtered by any property. If you do not filter the list, all records will be updated.\n\n#### Return type[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-type-9 \"Direct link to Return type\")\n\nReturn type\n\nExample\n\nDescription\n\n`BatchPayload`\n\n`{ count: 4 }`\n\nThe count of updated records.\n\n```\nexport type BatchPayload = {  count: number}\n```\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-14 \"Direct link to Examples\")\n\n##### Update all `User` records where the `name` is `Alice` to `ALICE`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-all-user-records-where-the-name-is-alice-to-alice \"Direct link to update-all-user-records-where-the-name-is-alice-to-alice\")\n\n```\nconst updatedUserCount = await prisma.user.updateMany({  where: { name: 'Alice' },  data: { name: 'ALICE' },})\n```\n\n##### Update all `User` records where the `email` contains `prisma.io` and at least one related `Post` has more than 10 likes[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-all-user-records-where-the-email-contains-prismaio-and-at-least-one-related-post-has-more-than-10-likes \"Direct link to update-all-user-records-where-the-email-contains-prismaio-and-at-least-one-related-post-has-more-than-10-likes\")\n\n```\nconst updatedUserCount = await prisma.user.updateMany({  where: {    email: {      contains: 'prisma.io',    },    posts: {      some: {        likes: {          gt: 10,        },      },    },  },  data: {    role: 'USER',  },})\n```\n\n### `deleteMany()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#deletemany \"Direct link to deletemany\")\n\n`deleteMany` deletes multiple records in a transaction.\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-13 \"Direct link to Options\")\n\nName\n\nType\n\nRequired\n\nDescription\n\n`where`\n\n`UserWhereInput`\n\nNo\n\nWraps _all_ fields of a model so that the list can be filtered by any field.\n\n#### Return type[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-type-10 \"Direct link to Return type\")\n\nReturn type\n\nExample\n\nDescription\n\n`BatchPayload`\n\n`{ count: 4 }`\n\nThe count of deleted records.\n\n```\nexport type BatchPayload = {  count: number}\n```\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-15 \"Direct link to Examples\")\n\n##### Delete all `User` records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#delete-all-user-records \"Direct link to delete-all-user-records\")\n\n```\nconst deletedUserCount = await prisma.user.deleteMany({})\n```\n\n##### Delete all `User` records where the `name` is `Alice`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#delete-all-user-records-where-the-name-is-alice \"Direct link to delete-all-user-records-where-the-name-is-alice\")\n\n```\nconst deletedUserCount = await prisma.user.deleteMany({  where: { name: 'Alice' },})\n```\n\nSee [Filter conditions and operators](https://www.prisma.io/docs/orm/reference/prisma-client-reference#filter-conditions-and-operators) for examples of how to filter the records to delete.\n\n### `count()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#count \"Direct link to count\")\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-14 \"Direct link to Options\")\n\nName\n\nType\n\nRequired\n\nDescription\n\n`where`\n\n`UserWhereInput`\n\nNo\n\nWraps _all_ model fields in a type so that the list can be filtered by any property.\n\n`orderBy`\n\n`XOR<Enumerable<PostOrder`  \n`ByInput>, PostOrderByInput>`\n\nNo\n\nLets you order the returned list by any property.\n\n`cursor`\n\n`UserWhereUniqueInput`\n\nNo\n\nSpecifies the position for the list (the value typically specifies an `id` or another unique value).\n\n`take`\n\n`number`\n\nNo\n\nSpecifies how many objects should be returned in the list (as seen from the _beginning_ (positive value) or _end_ (negative value) **either** of the list **or** from the `cursor` position if mentioned)\n\n`skip`\n\n`number`\n\nNo\n\nSpecifies how many of the returned objects in the list should be skipped.\n\n#### Return type[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-type-11 \"Direct link to Return type\")\n\nReturn type\n\nExample\n\nDescription\n\n`number`\n\n`29`\n\nThe count of records.\n\n`UserCountAggregateOutputType`\n\n`{ _all: 27, name: 10 }`\n\nReturned if `select` is used.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-16 \"Direct link to Examples\")\n\n##### Count all `User` records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#count-all-user-records \"Direct link to count-all-user-records\")\n\n```\nconst result = await prisma.user.count()\n```\n\n##### Count all `User` records with at least one published `Post`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#count-all-user-records-with-at-least-one-published-post \"Direct link to count-all-user-records-with-at-least-one-published-post\")\n\n```\nconst result = await prisma.user.count({  where: {    post: {      some: {        published: true,      },    },  },})\n```\n\n##### Use `select` to perform three separate counts[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#use-select-to-perform-three-separate-counts \"Direct link to use-select-to-perform-three-separate-counts\")\n\nThe following query returns:\n\n*   A count of all records (`_all`)\n*   A count of all records with non-`null` `name` fields\n*   A count of all records with non-`null` `city` fields\n\n```\nconst c = await prisma.user.count({  select: {    _all: true,    city: true,    name: true,  },})\n```\n\n### `aggregate()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#aggregate \"Direct link to aggregate\")\n\nSee also: [Aggregation, grouping, and summarizing](https://www.prisma.io/docs/orm/prisma-client/queries/aggregation-grouping-summarizing#aggregate)\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-15 \"Direct link to Options\")\n\nName\n\nType\n\nRequired\n\nDescription\n\n`where`\n\n`UserWhereInput`\n\nNo\n\nWraps _all_ model fields in a type so that the list can be filtered by any property.\n\n`orderBy`\n\n`XOR<Enumerable<UserOrderByInput>,`  \n`UserOrderByInput>`\n\nNo\n\nLets you order the returned list by any property.\n\n`cursor`\n\n`UserWhereUniqueInput`\n\nNo\n\nSpecifies the position for the list (the value typically specifies an `id` or another unique value).\n\n`take`\n\n`number`\n\nNo\n\nSpecifies how many objects should be returned in the list (as seen from the _beginning_ (positive value) or _end_ (negative value) **either** of the list **or** from the `cursor` position if mentioned)\n\n`skip`\n\n`number`\n\nNo\n\nSpecifies how many of the returned objects in the list should be skipped.\n\n`_count`\n\n`true`\n\nNo\n\nReturns a count of matching records or non-`null` fields.\n\n`_avg`\n\n`UserAvgAggregateInputType`\n\nNo\n\nReturns an average of all values of the specified field.\n\n`_sum`\n\n`UserSumAggregateInputType`\n\nNo\n\nReturns the sum of all values of the specified field.\n\n`_min`\n\n`UserMinAggregateInputType`\n\nNo\n\nReturns the smallest available value of the specified field.\n\n`_max`\n\n`UserMaxAggregateInputType`\n\nNo\n\nReturns the largest available value of the specified field.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-17 \"Direct link to Examples\")\n\n##### Return `_min`, `_max`, and `_count` of `profileViews` of all `User` records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-_min-_max-and-_count-of-profileviews-of-all-user-records \"Direct link to return-_min-_max-and-_count-of-profileviews-of-all-user-records\")\n\n```\nconst minMaxAge = await prisma.user.aggregate({  _count: {    _all: true,  },  _max: {    profileViews: true,  },  _min: {    profileViews: true,  },})\n```\n\n##### Return `_sum` of all `profileViews` for all `User` records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-_sum-of-all-profileviews-for-all-user-records \"Direct link to return-_sum-of-all-profileviews-for-all-user-records\")\n\n```\nconst setValue = await prisma.user.aggregate({  _sum: {    profileViews: true,  },})\n```\n\n### `groupBy()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#groupby \"Direct link to groupby\")\n\nSee also: [Aggregation, grouping, and summarizing](https://www.prisma.io/docs/orm/prisma-client/queries/aggregation-grouping-summarizing#group-by)\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#options-16 \"Direct link to Options\")\n\nName\n\nType\n\nRequired\n\nDescription\n\n`where`\n\n`UserWhereInput`\n\nNo\n\nWraps _all_ model fields in a type so that the list can be filtered by any property.\n\n`orderBy`\n\n`XOR<Enumerable<UserOrderByInput>,`  \n`UserOrderByInput>`\n\nNo\n\nLets you order the returned list by any property that is also present in `by`.\n\n`by`\n\n`Array<UserScalarFieldEnum>` | `string`\n\nNo\n\nSpecifies the field or combination of fields to group records by.\n\n`having`\n\n`UserScalarWhereWithAggregatesInput`\n\nNo\n\nAllows you to filter groups by an aggregate value - for example, only return groups _having_ an average age less than 50.\n\n`take`\n\n`number`\n\nNo\n\nSpecifies how many objects should be returned in the list (as seen from the _beginning_ (positive value) or _end_ (negative value) **either** of the list **or** from the `cursor` position if mentioned)\n\n`skip`\n\n`number`\n\nNo\n\nSpecifies how many of the returned objects in the list should be skipped.\n\n`_count`\n\n`true` | `UserCountAggregateInputType`\n\nNo\n\nReturns a count of matching records or non-`null` fields.\n\n`_avg`\n\n`UserAvgAggregateInputType`\n\nNo\n\nReturns an average of all values of the specified field.\n\n`_sum`\n\n`UserSumAggregateInputType`\n\nNo\n\nReturns the sum of all values of the specified field.\n\n`_min`\n\n`UserMinAggregateInputType`\n\nNo\n\nReturns the smallest available value of the specified field.\n\n`_max`\n\n`UserMaxAggregateInputType`\n\nNo\n\nReturns the largest available value of the specified field.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-18 \"Direct link to Examples\")\n\n##### Group by `country`/`city` where the average `profileViews` is greater than `200`, and return the `_sum` of `profileViews` for each group[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#group-by-countrycity-where-the-average-profileviews-is-greater-than-200-and-return-the-_sum-of-profileviews-for-each-group \"Direct link to group-by-countrycity-where-the-average-profileviews-is-greater-than-200-and-return-the-_sum-of-profileviews-for-each-group\")\n\nThe query also returns a count of `_all` records in each group, and all records with non-`null` `city` field values in each group.\n\n```\nconst groupUsers = await prisma.user.groupBy({  by: ['country', 'city'],  _count: {    _all: true,    city: true,  },  _sum: {    profileViews: true,  },  orderBy: {    country: 'desc',  },  having: {    profileViews: {      _avg: {        gt: 200,      },    },  },})\n```\n\n### `findRaw()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findraw \"Direct link to findraw\")\n\nSee: [Raw database access (`findRaw()`)](https://www.prisma.io/docs/orm/prisma-client/queries/raw-database-access/raw-queries#findraw).\n\n### `aggreagateRaw()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#aggreagateraw \"Direct link to aggreagateraw\")\n\nSee: [Raw database access (`aggreagateRaw()`)](https://www.prisma.io/docs/orm/prisma-client/queries/raw-database-access/raw-queries#aggregateraw).\n\n## Model query options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#model-query-options \"Direct link to Model query options\")\n\n### `select`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select \"Direct link to select\")\n\n`select` defines which fields are included in the object that Prisma Client returns. See: [Select fields and include relations](https://www.prisma.io/docs/orm/prisma-client/queries/select-fields) .\n\n*   You cannot combine `select` and `include` on the same level.\n*   In [3.0.1](https://github.com/prisma/prisma/releases/3.0.1) and later, you can [select a `_count` of relations](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select-a-_count-of-relations).\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-19 \"Direct link to Examples\")\n\n##### Select the `name` and `profileViews` fields of a single `User` record[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select-the-name-and-profileviews-fields-of-a-single-user-record \"Direct link to select-the-name-and-profileviews-fields-of-a-single-user-record\")\n\n```\nconst result = await prisma.user.findUnique({  where: { id: 1 },  select: {    name: true,    profileViews: true,  },})\n```\n\n##### Select the `email` and `role` fields of a multiple `User` records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select-the-email-and-role-fields-of-a-multiple-user-records \"Direct link to select-the-email-and-role-fields-of-a-multiple-user-records\")\n\n```\nconst result = await prisma.user.findMany({  select: {    email: true,    role: true,  },})\n```\n\n##### Select a `_count` of relations[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select-a-_count-of-relations \"Direct link to select-a-_count-of-relations\")\n\n```\nconst usersWithCount = await prisma.user.findMany({  select: {    _count: {      select: { posts: true },    },  },})\n```\n\n##### Select the 'id' and 'title' fields of related `Post` records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select-the-id-and-title-fields-of-related-post-records \"Direct link to select-the-id-and-title-fields-of-related-post-records\")\n\n```\nconst result = await prisma.user.findMany({  select: {    id: true,    name: true,    posts: {      select: {        id: true,        title: true,      },    },  },})\n```\n\n##### `include` inside `select`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#include-inside-select \"Direct link to include-inside-select\")\n\n```\nconst result = await prisma.user.findMany({  select: {    id: true,    name: true,    posts: {      include: {        author: true,      },    },  },})\n```\n\n#### Generated types for `select`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#generated-types-for-select \"Direct link to generated-types-for-select\")\n\nThe following example demonstrates how to use the [`validator`](https://www.prisma.io/docs/orm/prisma-client/type-safety/prisma-validator) with `select`:\n\n```\nconst selectNameEmailNotPosts = Prisma.validator<Prisma.UserSelect>()({  name: true,  email: true,  posts: false,})\n```\n\n### `include`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#include \"Direct link to include\")\n\n`include` defines which relations are included in the result that Prisma Client returns. See: [Select fields and include relations](https://www.prisma.io/docs/orm/prisma-client/queries/select-fields) .\n\n*   In [3.0.1](https://github.com/prisma/prisma/releases/3.0.1) and later, you can [`include` a `_count` of relations](https://www.prisma.io/docs/orm/reference/prisma-client-reference#include-a-_count-of-relations)\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-20 \"Direct link to Examples\")\n\n##### Include the `posts` and `profile` relation when loading `User` records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#include-the-posts-and-profile-relation-when-loading-user-records \"Direct link to include-the-posts-and-profile-relation-when-loading-user-records\")\n\n```\nconst users = await prisma.user.findMany({  include: {    posts: true, // Returns all fields for all posts    profile: true, // Returns all Profile fields  },})\n```\n\n##### Include the `posts` relation on the returned objects when creating a new `User` record with two `Post` records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#include-the-posts-relation-on-the-returned-objects-when-creating-a-new-user-record-with-two-post-records \"Direct link to include-the-posts-relation-on-the-returned-objects-when-creating-a-new-user-record-with-two-post-records\")\n\n```\nconst user = await prisma.user.create({  data: {    email: 'alice@prisma.io',    posts: {      create: [        { title: 'This is my first post' },        { title: 'Here comes a second post' },      ],    },  },  include: { posts: true }, // Returns all fields for all posts})\n```\n\n#### Generated types for `include`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#generated-types-for-include \"Direct link to generated-types-for-include\")\n\nThe following example demonstrates how to use the [`validator`](https://www.prisma.io/docs/orm/prisma-client/type-safety/prisma-validator) with `include`:\n\n```\nconst includePosts = Prisma.validator<Prisma.UserInclude>()({  posts: true,})\n```\n\n##### Include a `_count` of relations[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#include-a-_count-of-relations \"Direct link to include-a-_count-of-relations\")\n\n```\nconst usersWithCount = await prisma.user.findMany({  include: {    _count: {      select: { posts: true },    },  },})\n```\n\n### `omit` (Preview)[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#omit-preview \"Direct link to omit-preview\")\n\n`omit` defines which fields are excluded in the object that Prisma Client returns.\n\nBecause the `omit` option is currently in Preview, you need to enable it via the `omitApi` preview feature flag in your Prisma schema file:\n\n```\ngenerator client {  provider        = \"prisma-client-js\"  previewFeatures = [\"omitApi\"]}\n```\n\nAfter adding this flag, you need to run `prisma generate` again to re-generate Prisma Client.\n\n*   You cannot combine `omit` and `select` since they serve opposite purposes\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-21 \"Direct link to Examples\")\n\n##### Omit the `password` field from all `User` records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#omit-the-password-field-from-all-user-records \"Direct link to omit-the-password-field-from-all-user-records\")\n\n```\nconst result = await prisma.user.findMany({  omit: {    password: true,  },})\n```\n\n##### Omit the `title` fields from all `User`'s `posts` relation[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#omit-the-title-fields-from-all-users-posts-relation \"Direct link to omit-the-title-fields-from-all-users-posts-relation\")\n\n```\nconst results = await prisma.user.findMany({  omit: {    password: true,  },  include: {    posts: {      omit: {        title: true,      },    },  },})\n```\n\n#### Generated types for `omit`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#generated-types-for-omit \"Direct link to generated-types-for-omit\")\n\nThe following example demonstrates how to use the [`validator`](https://www.prisma.io/docs/orm/prisma-client/type-safety/prisma-validator) with `omit`:\n\n```\nconst omitPassword = Prisma.validator<Prisma.UserOmit>()({  password: true,})\n```\n\n### `relationLoadStrategy` (Preview)[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#relationloadstrategy-preview \"Direct link to relationloadstrategy-preview\")\n\n`relationLoadStrategy` specifies how a relation should be loaded from the database. It has two possible values:\n\n*   `join` (default): Uses a database-level `LATERAL JOIN` (PostgreSQL) or correlated subqueries (MySQL) and fetches all data with a single query to the database.\n*   `query`: Sends multiple queries to the database (one per table) and joins them on the application level.\n\n> **Note**: Once `relationLoadStrategy` moves from [Preview](https://www.prisma.io/docs/orm/more/releases#preview) into [General Availability](https://www.prisma.io/docs/orm/more/releases#generally-available-ga), `join` will universally become the default for all relation queries.\n\nYou can learn more about join strategies [here](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#relation-load-strategies-preview).\n\nBecause the `relationLoadStrategy` option is currently in Preview, you need to enable it via the `relationJoins` preview feature flag in your Prisma schema file:\n\n```\ngenerator client {  provider        = \"prisma-client-js\"  previewFeatures = [\"relationJoins\"]}\n```\n\nAfter adding this flag, you need to run `prisma generate` again to re-generate Prisma Client. This feature is currently available on PostgreSQL, CockroachDB and MySQL.\n\n*   In most situations, the default `join` strategy will be more effective. Use `query` if you want to save resources on your database server or if you profiling shows that the application-level join is more performant.\n*   You can only specify the `relationLoadStrategy` on the top-level in your query. The top-level choice will affect all nested sub-queries.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-22 \"Direct link to Examples\")\n\n##### Load the `posts` relation via a database-level JOIN when using `include`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#load-the-posts-relation-via-a-database-level-join-when-using-include \"Direct link to load-the-posts-relation-via-a-database-level-join-when-using-include\")\n\n```\nconst users = await prisma.user.findMany({  relationLoadStrategy: 'join',  include: {    posts: true,  },})\n```\n\n##### Load the `posts` relation via a database-level JOIN when using `select`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#load-the-posts-relation-via-a-database-level-join-when-using-select \"Direct link to load-the-posts-relation-via-a-database-level-join-when-using-select\")\n\n```\nconst users = await prisma.user.findMany({  relationLoadStrategy: 'join',  select: {    posts: true,  },})\n```\n\n### `where`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#where \"Direct link to where\")\n\n`where` defines one or more [filters](https://www.prisma.io/docs/orm/reference/prisma-client-reference#filter-conditions-and-operators), and can be used to filter on record properties (like a user's email address) or related record properties (like a user's top 10 most recent post titles).\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-23 \"Direct link to Examples\")\n\n```\nconst results = await prisma.user.findMany({  where: {    email: {      endsWith: 'prisma.io',    },  },})\n```\n\n#### Generated types for `where`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#generated-types-for-where \"Direct link to generated-types-for-where\")\n\nThe following examples demonstrate how to use the [`validator`](https://www.prisma.io/docs/orm/prisma-client/type-safety/prisma-validator) with `where`:\n\n*   `UserWhereInput`\n    \n    ```\n    // UserWhereInputconst whereNameIs = Prisma.validator<Prisma.UserWhereInput>()({  name: 'Rich',})// It can be combined with conditional operators tooconst whereNameIs = Prisma.validator<Prisma.UserWhereInput>()({  name: 'Rich',  AND: [    {      email: {        contains: 'rich@boop.com',      },    },  ],})\n    ```\n    \n*   `UserWhereUniqueInput` This type works by exposing any unique fields on the model. A field assigned `@id` is considered unique, as is one assigned `@unique`.\n    \n    From version 4.5.0, this type exposes all fields on the model. This means that when you filter for a single record based on a unique field, you can check additional non-unique and unique fields at the same time. [Learn more](https://www.prisma.io/docs/orm/reference/prisma-client-reference#filter-on-non-unique-fields-with-userwhereuniqueinput).\n    \n    ```\n    // UserWhereUniqueInputconst whereEmailIsUnique = Prisma.validator<Prisma.UserWhereUniqueInput>()({  email: 'rich@boop.com',})\n    ```\n    \n*   `PostScalarWhereInput`\n    \n    ```\n    const whereScalarTitleIs = Prisma.validator<Prisma.PostScalarWhereInput>()({  title: 'boop',})\n    ```\n    \n*   `PostUpdateWithWhereUniqueWithoutAuthorInput` - This type accepts a unique `where` field (an `@id` or another assigned `@unique`) and updates any field on the `Post` model except the `Author`. The `Author` is the scalar field on the `Post` model.\n    \n    ```\n    const updatePostByIdWithoutAuthor =  Prisma.validator<Prisma.PostUpdateWithWhereUniqueWithoutAuthorInput>()({    where: {      id: 1,    },    data: {      content: 'This is some updated content',      published: true,      title: 'This is a new title',    },  })\n    ```\n    \n*   `PostUpsertWithWhereUniqueWithoutAuthorInput` - This type will update the `Post` records title field where the id matches, if it doesn't exist it will create it instead.\n    \n    ```\n    const updatePostTitleOrCreateIfNotExist =  Prisma.validator<Prisma.PostUpsertWithWhereUniqueWithoutAuthorInput>()({    where: {      id: 1,    },    update: {      title: 'This is a new title',    },    create: {      id: 1,      title: 'If the title doesnt exist, then create one with this text',    },  })\n    ```\n    \n*   `PostUpdateManyWithWhereWithoutAuthorInput` - This type will update all `Post` records where published is set to false.\n    \n    ```\n    const publishAllPosts =  Prisma.validator<Prisma.PostUpdateManyWithWhereWithoutAuthorInput>()({    where: {      published: {        equals: false,      },    },    data: {      published: true,    },  })\n    ```\n    \n\n### `orderBy`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#orderby \"Direct link to orderby\")\n\nSorts a list of records. See also: [Sorting](https://www.prisma.io/docs/orm/prisma-client/queries/filtering-and-sorting)\n\n*   In [2.16.0](https://github.com/prisma/prisma/releases/2.16.0) and later, you can [order by relation fields](https://www.prisma.io/docs/orm/reference/prisma-client-reference#sort-post-by-the-related-user-records-name) - for example, order posts by the author's name.\n    \n*   In [3.5.0](https://github.com/prisma/prisma/releases/3.5.0) and later, in PostgreSQL you can [order by relevance](https://www.prisma.io/docs/orm/reference/prisma-client-reference#sort-post-by-relevance-of-the-title). For details, see [Sort by relevance](https://www.prisma.io/docs/orm/prisma-client/queries/filtering-and-sorting#sort-by-relevance-postgresql-and-mysql).\n    \n*   In [4.1.0](https://github.com/prisma/prisma/releases/4.1.0) and later, you can [sort `null` records first or last](https://www.prisma.io/docs/orm/reference/prisma-client-reference#sort-post-by-the-related-user-records-name-with-null-records-first). For details, see [Sort with nulls first or last](https://www.prisma.io/docs/orm/prisma-client/queries/filtering-and-sorting#sort-with-null-records-first-or-last).\n    \n\n#### Inputs for `sort` argument[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#inputs-for-sort-argument \"Direct link to inputs-for-sort-argument\")\n\nName\n\nDescription\n\n`asc`\n\nSort ascending (A → Z)\n\n`desc`\n\nSort descending (Z → A)\n\n#### Inputs for `nulls` argument[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#inputs-for-nulls-argument \"Direct link to inputs-for-nulls-argument\")\n\nNote:\n\n*   This argument is optional.\n*   It is for use on optional [scalar](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#scalar-fields) fields only. If you try to sort by nulls on a required or [relation](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#relation-fields) field, Prisma Client throws a [P2009 error](https://www.prisma.io/docs/orm/reference/error-reference#p2009).\n*   It is available in version 4.1.0 and later, as a preview feature. See [sort with nulls first or last](https://www.prisma.io/docs/orm/prisma-client/queries/filtering-and-sorting#sort-with-null-records-first-or-last) for details of how to enable the feature.\n\nName\n\nDescription\n\n`first`\n\nSort with `null` values first.\n\n`last`\n\nSort with `null` values last.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-24 \"Direct link to Examples\")\n\n##### Sort `User` by `email` field[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#sort-user-by-email-field \"Direct link to sort-user-by-email-field\")\n\nThe following example returns all `User` records sorted by `email` ascending:\n\n```\nconst users = await prisma.user.findMany({  orderBy: {    email: 'asc',  },})\n```\n\nThe following example returns all `User` records sorted by `email` descending:\n\n```\nconst users = await prisma.user.findMany({  orderBy: {    email: 'desc',  },})\n```\n\nThe following query orders posts by user name:\n\n```\nconst posts = await prisma.post.findMany({  orderBy: {    author: {      name: 'asc',    },  },})\n```\n\nThe following query orders posts by user name, with `null` records first:\n\n```\nconst posts = await prisma.post.findMany({  orderBy: {    author: {      name: { sort: 'asc', nulls: 'first' },    },  },})\n```\n\n#### Sort `Post` by relevance of the title[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#sort-post-by-relevance-of-the-title \"Direct link to sort-post-by-relevance-of-the-title\")\n\nwarning\n\nThis feature is available from version 3.5.0 onwards in PostgreSQL and MySQL only. You'll need to use the `fullTextSearch` preview flag to enable this feature.\n\nThe following query orders posts by relevance of the search term `'database'` to the title:\n\n```\nconst posts = await prisma.post.findMany({  orderBy: {    _relevance: {      fields: ['title'],      search: 'database',      sort: 'asc'    },})\n```\n\n#### Sort `User` by the `posts` count[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#sort-user-by-the-posts-count \"Direct link to sort-user-by-the-posts-count\")\n\nThe following query orders users by post count:\n\n```\nconst getActiveusers = await prisma.user.findMany({  orderBy: {    posts: {      count: 'desc',    },  },})\n```\n\n##### Sort `User` by multiple fields - `email` _and_ `role`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#sort-user-by-multiple-fields---email-and-role \"Direct link to sort-user-by-multiple-fields---email-and-role\")\n\nThe following example sorts users by two fields - first `email`, then `role`:\n\n```\nconst users = await prisma.user.findMany({  select: {    email: true,    role: true,  },  orderBy: [    {      email: 'desc',    },    {      role: 'desc',    },  ],})\n```\n\nThe order of sorting parameters matters - the following query sorts by `role`, then `email`. Not the difference in the results:\n\n```\nconst users = await prisma.user.findMany({  select: {    email: true,    role: true,  },  orderBy: [    {      role: 'desc',    },    {      email: 'desc',    },  ],})\n```\n\n##### Sort `User` by `email`, select `name` and `email`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#sort-user-by-email-select-name-and-email \"Direct link to sort-user-by-email-select-name-and-email\")\n\nThe following example returns all the `name` and `email` fields of all `User` records, sorted by `email`:\n\n```\nconst users3 = await prisma.user.findMany({  orderBy: {    email: 'asc',  },  select: {    name: true,    email: true,  },})\n```\n\n##### Sort `User` records by `email` and sort nested `Post` records by `title`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#sort-user-records-by-email-and-sort-nested-post-records-by-title \"Direct link to sort-user-records-by-email-and-sort-nested-post-records-by-title\")\n\nThe following example:\n\n*   Returns all `User` records sorted by `email`\n*   For each `User` record, returns the `title` field of all nested `Post` records sorted by `title`\n\n```\nconst usersWithPosts = await prisma.user.findMany({  orderBy: {    email: 'asc',  },  include: {    posts: {      select: {        title: true,      },      orderBy: {        title: 'asc',      },    },  },})\n```\n\n##### Sort one user's nested list of `Post` records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#sort-one-users-nested-list-of-post-records \"Direct link to sort-one-users-nested-list-of-post-records\")\n\nThe following example retrieves a single `User` record by ID, as well as a list of nested `Post` records sorted by `title`:\n\n```\nconst userWithPosts = await prisma.user.findUnique({  where: {    id: 1,  },  include: {    posts: {      orderBy: {        title: 'desc',      },      select: {        title: true,        published: true,      },    },  },})\n```\n\n##### Sort by `enum`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#sort-by-enum \"Direct link to sort-by-enum\")\n\nThe following sorts all `User` records by `role` (an `enum`):\n\n```\nconst sort = await prisma.user.findMany({  orderBy: {    role: 'desc',  },  select: {    email: true,    role: true,  },})\n```\n\n#### Generated types for `orderBy`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#generated-types-for-orderby \"Direct link to generated-types-for-orderby\")\n\nThe following examples demonstrate how to use the [`validator`](https://www.prisma.io/docs/orm/prisma-client/type-safety/prisma-validator) with `orderBy`:\n\n*   `UserOrderByInput`\n    \n    ```\n    const orderEmailsByDescending = Prisma.validator<Prisma.UserOrderByInput>()({  email: 'desc',})\n    ```\n    \n\n### `distinct`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#distinct \"Direct link to distinct\")\n\nDeduplicate a list of records from [`findMany`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findmany) or [`findFirst`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findfirst). See also: [Aggregation, grouping, and summarizing](https://www.prisma.io/docs/orm/prisma-client/queries/aggregation-grouping-summarizing#select-distinct)\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-25 \"Direct link to Examples\")\n\n##### Select distinct on a single field[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select-distinct-on-a-single-field \"Direct link to Select distinct on a single field\")\n\nThe following example returns all distinct `city` fields, and selects only the `city` and `country` fields:\n\n```\nconst distinctCities = await prisma.user.findMany({  select: {    city: true,    country: true,  },  distinct: ['city'],})\n```\n\n##### Select distinct on multiple fields[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select-distinct-on-multiple-fields \"Direct link to Select distinct on multiple fields\")\n\nThe following example returns all distinct `city` _and_ `country` field combinations, and selects only the `city` and `country` fields:\n\n```\nconst distinctCitiesAndCountries = await prisma.user.findMany({  select: {    city: true,    country: true,  },  distinct: ['city', 'country'],})\n```\n\nNote that there is now a \"Paris, Denmark\" in addition to \"Paris, France\":\n\n##### Select distinct in combination with a filter[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select-distinct-in-combination-with-a-filter \"Direct link to Select distinct in combination with a filter\")\n\nThe following example returns all distinct `city` _and_ `country` field combinations where the user's email contains `\"prisma.io\"`, and selects only the `city` and `country` fields:\n\n```\nconst distinctCitiesAndCountries = await prisma.user.findMany({  where: {    email: {      contains: 'prisma.io',    },  },  select: {    city: true,    country: true,  },  distinct: ['city', 'country'],})\n```\n\n## Nested queries[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#nested-queries \"Direct link to Nested queries\")\n\n### `create`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-1 \"Direct link to create-1\")\n\nA nested `create` query adds a new related record or set of records to a parent record. See: [Working with relations](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries)\n\n*   `create` is available as a nested query when you `create()` (`prisma.user.create(...)`) a new parent record or `update()` (`prisma.user.update(...)`) an existing parent record.\n*   You can use a nested `create` _or_ a nested [`createMany`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#createmany-1) to create multiple related records. If you require the [`skipDuplicates` query option](https://www.prisma.io/docs/orm/reference/prisma-client-reference#nested-createmany-options) you should use `createMany`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-26 \"Direct link to Examples\")\n\n##### Create a new `User` record with a new `Profile` record[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-a-new-user-record-with-a-new-profile-record \"Direct link to create-a-new-user-record-with-a-new-profile-record\")\n\n```\nconst user = await prisma.user.create({  data: {    email: 'alice@prisma.io',    profile: {      create: { bio: 'Hello World' },    },  },})\n```\n\n##### Create a new `Profile` record with a new `User` record[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-a-new-profile-record-with-a-new-user-record \"Direct link to create-a-new-profile-record-with-a-new-user-record\")\n\n```\nconst user = await prisma.profile.create({  data: {    bio: 'Hello World',    user: {      create: { email: 'alice@prisma.io' },    },  },})\n```\n\n##### Create a new `User` record with a new `Post` record[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-a-new-user-record-with-a-new-post-record \"Direct link to create-a-new-user-record-with-a-new-post-record\")\n\n```\nconst user = await prisma.user.create({  data: {    email: 'alice@prisma.io',    posts: {      create: { title: 'Hello World' },    },  },})\n```\n\n##### Create a new `User` record with two new `Post` records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-a-new-user-record-with-two-new-post-records \"Direct link to create-a-new-user-record-with-two-new-post-records\")\n\nBecause it's a one-to-many relation, you can also create multiple `Post` records at once by passing an array to `create`:\n\n```\nconst user = await prisma.user.create({  data: {    email: 'alice@prisma.io',    posts: {      create: [        {          title: 'This is my first post',        },        {          title: 'Here comes a second post',        },      ],    },  },})\n```\n\nNote: You can also use a nested [`createMany`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#createmany-1) to achieve the same result.\n\n##### Update an existing `User` record by creating a new `Profile` record[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-creating-a-new-profile-record \"Direct link to update-an-existing-user-record-by-creating-a-new-profile-record\")\n\n```\nconst user = await prisma.user.update({  where: { email: 'alice@prisma.io' },  data: {    profile: {      create: { bio: 'Hello World' },    },  },})\n```\n\n##### Update an existing `User` record by creating a new `Post` record[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-creating-a-new-post-record \"Direct link to update-an-existing-user-record-by-creating-a-new-post-record\")\n\n```\nconst user = await prisma.user.update({  where: { email: 'alice@prisma.io' },  data: {    posts: {      create: { title: 'Hello World' },    },  },})\n```\n\n### `createMany`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#createmany-1 \"Direct link to createmany-1\")\n\nA nested `createMany` query adds a new set of records to a parent record. See: [Working with relations](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries)\n\n*   `createMany` is available as a nested query when you `create()` (`prisma.user.create(...)`) a new parent record or `update()` (`prisma.user.update(...)`) an existing parent record.\n    *   Available in the context of a one-to-many relation — for example, you can `prisma.user.create(...)` a user and use a nested `createMany` to create multiple posts (posts have one user).\n    *   **Not** available in the context of a many-to-many relation — for example, you **cannot** `prisma.post.create(...)` a post and use a nested `createMany` to create categories (many posts have many categories).\n*   You cannot nest an additional `create` or `createMany`.\n*   Allows setting foreign keys directly — for example, setting the `categoryId` on a post.\n*   As of Prisma ORM version 5.12.0, nested `createMany` is supported by SQLite.\n*   You can use a nested `create` _or_ a nested `createMany` to create multiple related records - [if you do not need the `skipDuplicates` query option, you should probably use `create`](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#create-a-single-record-and-multiple-related-records).\n\n#### Options[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#nested-createmany-options \"Direct link to Options\")\n\nName\n\nType\n\nRequired\n\nDescription\n\n`data`\n\n`Enumerable<UserCreateManyInput>`\n\n**Yes**\n\nWraps all the model fields in a type so that they can be provided when creating new records. Fields that are marked as optional or have default values in the datamodel are optional.\n\n`skipDuplicates?`\n\n`boolean`\n\nNo\n\nDo not insert records with unique fields or ID fields that already exist. Only supported by databases that support [`ON CONFLICT DO NOTHING`](https://www.postgresql.org/docs/9.5/sql-insert.html#SQL-ON-CONFLICT). This excludes MongoDB and SQLServer\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-27 \"Direct link to Examples\")\n\n##### Update a `User` and multiple new related `Post` records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-a-user-and-multiple-new-related-post-records \"Direct link to update-a-user-and-multiple-new-related-post-records\")\n\n```\nconst user = await prisma.user.update({  where: {    id: 9,  },  data: {    name: 'Elliott',    posts: {      createMany: {        data: [{ title: 'My first post' }, { title: 'My second post' }],      },    },  },})\n```\n\n### `set`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#set \"Direct link to set\")\n\n`set` overwrites the value of a relation - for example, replacing a list of `Post` records with a different list. See: [Working with relations](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries)\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-28 \"Direct link to Examples\")\n\n##### Update an existing `User` record by disconnecting any previous `Post` records and connecting two other existing ones[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-disconnecting-any-previous-post-records-and-connecting-two-other-existing-ones \"Direct link to update-an-existing-user-record-by-disconnecting-any-previous-post-records-and-connecting-two-other-existing-ones\")\n\n```\nconst user = await prisma.user.update({  where: { email: 'alice@prisma.io' },  data: {    posts: {      set: [{ id: 32 }, { id: 42 }],    },  },})\n```\n\n### `connect`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#connect \"Direct link to connect\")\n\nA nested `connect` query connects a record to an existing related record by specifying an ID or unique identifier. See: [Working with relations](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries)\n\n*   `connect` is available as a nested query when you create a new parent record or update an existing parent record.\n    \n*   If the related record does not exist, Prisma Client throws an exception:\n    \n    ```\n    The required connected records were not found. Expected 1 records to be connected, found 0.\n    ```\n    \n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-29 \"Direct link to Examples\")\n\n##### Create a new `Profile` record and connect it to an existing `User` record via unique field[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-a-new-profile-record-and-connect-it-to-an-existing-user-record-via-unique-field \"Direct link to create-a-new-profile-record-and-connect-it-to-an-existing-user-record-via-unique-field\")\n\n```\nconst user = await prisma.profile.create({  data: {    bio: 'Hello World',    user: {      connect: { email: 'alice@prisma.io' },    },  },})\n```\n\n##### Create a new `Profile` record and connect it to an existing `User` record via an ID field[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-a-new-profile-record-and-connect-it-to-an-existing-user-record-via-an-id-field \"Direct link to create-a-new-profile-record-and-connect-it-to-an-existing-user-record-via-an-id-field\")\n\n```\nconst user = await prisma.profile.create({  data: {    bio: 'Hello World',    user: {      connect: { id: 42 }, // sets userId of Profile record    },  },})\n```\n\nIn [2.11.0](https://github.com/prisma/prisma/releases/2.11.0) and later, you can set the foreign key directly:\n\n```\nconst user = await prisma.profile.create({  data: {    bio: 'Hello World',    userId: 42,  },})\n```\n\n##### Create a new `Post` record and connect it to an existing `User` record[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-a-new-post-record-and-connect-it-to-an-existing-user-record \"Direct link to create-a-new-post-record-and-connect-it-to-an-existing-user-record\")\n\n```\nconst user = await prisma.post.create({  data: {    title: 'Hello World',    author: {      connect: { email: 'alice@prisma.io' },    },  },})\n```\n\n##### Update an existing `User` record by connecting it to an existing `Profile` record[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-connecting-it-to-an-existing-profile-record \"Direct link to update-an-existing-user-record-by-connecting-it-to-an-existing-profile-record\")\n\n```\nconst user = await prisma.user.update({  where: { email: 'alice@prisma.io' },  data: {    profile: {      connect: { id: 24 },    },  },})\n```\n\n##### Update an existing `User` record by connecting it to two existing `Post` records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-connecting-it-to-two-existing-post-records \"Direct link to update-an-existing-user-record-by-connecting-it-to-two-existing-post-records\")\n\n```\nconst user = await prisma.user.update({  where: { email: 'alice@prisma.io' },  data: {    posts: {      connect: [{ id: 24 }, { id: 42 }],    },  },})\n```\n\n### `connectOrCreate`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#connectorcreate \"Direct link to connectorcreate\")\n\n`connectOrCreate` _either_ connects a record to an existing related record by ID or unique identifier _or_ creates a new related record if the record does not exist. See: [Working with relations](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries)\n\n*   Multiple `connectOrCreate` queries that run _as concurrent transactions_ can result in a **race condition**. Consider the following example, where two queries attempt to `connectOrCreate` a blog post tag named `computing` at the same time (tag names must be unique):\n    \n    *   Query A\n    *   Query B\n    \n    ```\n    const createPost = await prisma.post.create({  data: {    title: 'How to create a compiler',    content: '...',    author: {      connect: {        id: 9,      },    },    tags: {      connectOrCreate: {        create: {          name: 'computing',        },        where: {          name: 'computing',        },      },    },  },})\n    ```\n    \n    If query A and query B overlap in the following way, query A results in an exception:\n    \n    Query A (Fail ❌)\n    \n    Query B (Success ✅)\n    \n    Query hits server, starts transaction A\n    \n    Query hits server, starts transaction B\n    \n    Find record where `tagName` equals `computing`, record not found\n    \n    Find record where `tagName` equals `computing`, record not found\n    \n    Create record where `tagName` equals `computing` and connect\n    \n    Create record where `tagName` equals `computing`\n    \n    Unique violation, record already created by transaction B\n    \n    To work around this scenario, we recommend catching the unique violation exception (`PrismaClientKnownRequestError`, error `P2002`) and retrying failed queries.\n    \n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-30 \"Direct link to Examples\")\n\n##### Create a new `Profile` record, then connect it to an existing `User` record _or_ create a new `User`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-a-new-profile-record-then-connect-it-to-an-existing-user-record-or-create-a-new-user \"Direct link to create-a-new-profile-record-then-connect-it-to-an-existing-user-record-or-create-a-new-user\")\n\nThe following example:\n\n1.  Creates a `Profile`\n2.  Attempts to connect the profile to a `User` where the email address is `alice@prisma.io`\n3.  Creates a new user if a matching user does not exist\n\n```\nconst user = await prisma.profile.create({  data: {    bio: 'The coolest Alice on the planet',    user: {      connectOrCreate: {        where:  { email: 'alice@prisma.io' },        create: { email: 'alice@prisma.io'}    },  },})\n```\n\n##### Create a new `Post` record and connect it to an existing `User` record, _or_ create a new `User`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-a-new-post-record-and-connect-it-to-an-existing-user-record-or-create-a-new-user \"Direct link to create-a-new-post-record-and-connect-it-to-an-existing-user-record-or-create-a-new-user\")\n\n```\nconst user = await prisma.post.create({  data: {    title: 'Hello World',    author: {      connectOrCreate: {        where: { email: 'alice@prisma.io' },        create: { email: 'alice@prisma.io' },      },    },  },})\n```\n\n##### Update an existing `User` record by connecting it to an existing `Profile` record, _or_ creating a new `Profile` record[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-connecting-it-to-an-existing-profile-record-or-creating-a-new-profile-record \"Direct link to update-an-existing-user-record-by-connecting-it-to-an-existing-profile-record-or-creating-a-new-profile-record\")\n\nThe following example:\n\n1.  Attempts to connect the user to a `Profile` with an `id` of `20`\n2.  Creates a new profile if a matching profile does not exist\n\n```\nconst updateUser = await prisma.user.update({  where: { email: 'alice@prisma.io' },  data: {    profile: {      connectOrCreate: {        where: { id: 20 },        create: {          bio: 'The coolest Alice in town',        },      },    },  },})\n```\n\n##### Update an existing `User` record by connect it to two existing `Post` records, or creating two new `Post` records[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-connect-it-to-two-existing-post-records-or-creating-two-new-post-records \"Direct link to update-an-existing-user-record-by-connect-it-to-two-existing-post-records-or-creating-two-new-post-records\")\n\n```\nconst user = await prisma.user.update({  where: { email: 'alice@prisma.io' },  data: {    posts: {      connectOrCreate: [        {          where: { id: 32 },          create: { title: 'This is my first post' },        },        {          where: { id: 19 },          create: { title: 'This is my second post' },        },      ],    },  },})\n```\n\n### `disconnect`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#disconnect \"Direct link to disconnect\")\n\nA nested `disconnect` query breaks the connection between a parent record and a related record, but does not delete either record. See: [Working with relations](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries)\n\n*   `disconnect` is only available if the relation is optional.\n    \n*   If the relationship you are attempting to disconnect does not exist:\n    \n    *   ([In 2.21.0 and later](https://github.com/prisma/prisma/releases/tag/2.21.0)), the operation does nothing\n        \n    *   (Before [2.21.0](https://github.com/prisma/prisma/releases/tag/2.21.0)) Prisma Client throws an exception if the provided ID or unique identifier is not connected:\n        \n        ```\n        The records for relation `PostToUser` between the `User` and `Post` models are not connected.\n        ```\n        \n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-31 \"Direct link to Examples\")\n\n##### Update an existing `User` record by disconnecting the `Profile` record it's connected to[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-disconnecting-the-profile-record-its-connected-to \"Direct link to update-an-existing-user-record-by-disconnecting-the-profile-record-its-connected-to\")\n\n```\nconst user = await prisma.user.update({  where: { email: 'bob@prisma.io' },  data: {    profile: {      disconnect: true,    },  },})\n```\n\n##### Update an existing `User` record by disconnecting two `Post` records it's connected to[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-disconnecting-two-post-records-its-connected-to \"Direct link to update-an-existing-user-record-by-disconnecting-two-post-records-its-connected-to\")\n\n```\nconst user = await prisma.user.update({  where: { email: 'alice@prisma.io' },  data: {    posts: {      disconnect: [{ id: 44 }, { id: 46 }],    },  },})\n```\n\n### `update`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-1 \"Direct link to update-1\")\n\nA nested `update` query updates one or more related records where the parent record's ID is `n`. See: [Working with relations](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#update-a-specific-related-record)\n\n*   Nested `update` queries are only available in the context of a top-level `update` query (for example, `prisma.user.update(...)`).\n    \n*   If the parent record does not exist, Prisma Client throws an exception:\n    \n    ```\n    AssertionError(\"Expected a valid parent ID to be present for nested update to-one case.\")\n    ```\n    \n*   If the related record that you want to update does not exist, Prisma Client throws an exception:\n    \n    ```\n    AssertionError(\"Expected a valid parent ID to be present for nested update to-one case.\")\n    ```\n    \n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-32 \"Direct link to Examples\")\n\n##### Update an existing `User` record by updating the `Profile` record it's connected to[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-updating-the-profile-record-its-connected-to \"Direct link to update-an-existing-user-record-by-updating-the-profile-record-its-connected-to\")\n\n```\nconst user = await prisma.user.update({  where: { email: 'alice@prisma.io' },  data: {    profile: {      update: { bio: 'Hello World' },    },  },})\n```\n\n##### Update an existing `User` record by updating two `Post` records it's connected to[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-updating-two-post-records-its-connected-to \"Direct link to update-an-existing-user-record-by-updating-two-post-records-its-connected-to\")\n\n```\nconst user = await prisma.user.update({  where: { email: 'alice@prisma.io' },  data: {    posts: {      update: [        {          data: { published: true },          where: { id: 32 },        },        {          data: { published: true },          where: { id: 23 },        },      ],    },  },})\n```\n\n### `upsert`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#upsert-1 \"Direct link to upsert-1\")\n\ninfo\n\nThis section covers the usage of nested upsert within `update()`. To learn about the [`upsert()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#upsert) operation, reference the linked documentation.\n\nA nested `upsert` query updates a related record if it exists, or creates a new related record.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-33 \"Direct link to Examples\")\n\n##### Update an existing `User` record by updating the `Profile` record it's connected to or creating a new one (_upsert_)[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-updating-the-profile-record-its-connected-to-or-creating-a-new-one-upsert \"Direct link to update-an-existing-user-record-by-updating-the-profile-record-its-connected-to-or-creating-a-new-one-upsert\")\n\n```\nconst user = await prisma.user.update({  where: { email: 'alice@prisma.io' },  data: {    profile: {      upsert: {        create: { bio: 'Hello World' },        update: { bio: 'Hello World' },      },    },  },})\n```\n\n##### Update an existing `User` record by updating two `Post` record it's connected to or creating new ones (_upsert_)[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-updating-two-post-record-its-connected-to-or-creating-new-ones-upsert \"Direct link to update-an-existing-user-record-by-updating-two-post-record-its-connected-to-or-creating-new-ones-upsert\")\n\n```\nconst user = await prisma.user.update({  where: { email: 'alice@prisma.io' },  data: {    posts: {      upsert: [        {          create: { title: 'This is my first post' },          update: { title: 'This is my first post' },          where: { id: 32 },        },        {          create: { title: 'This is my second post' },          update: { title: 'This is my second post' },          where: { id: 23 },        },      ],    },  },})\n```\n\n### `delete`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#delete-1 \"Direct link to delete-1\")\n\nA nested `delete` query deletes a related record. The parent record is not deleted.\n\n*   `delete` is only available if the relation is optional.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-34 \"Direct link to Examples\")\n\n##### Update an existing `User` record by deleting the `Profile` record it's connected to[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-deleting-the-profile-record-its-connected-to \"Direct link to update-an-existing-user-record-by-deleting-the-profile-record-its-connected-to\")\n\n```\nconst user = await prisma.user.update({  where: { email: 'alice@prisma.io' },  data: {    profile: {      delete: true,    },  },})\n```\n\n##### Update an existing `User` record by deleting two `Post` records it's connected to[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-an-existing-user-record-by-deleting-two-post-records-its-connected-to \"Direct link to update-an-existing-user-record-by-deleting-two-post-records-its-connected-to\")\n\n```\nconst user = await prisma.user.update({  where: { email: 'alice@prisma.io' },  data: {    posts: {      delete: [{ id: 34 }, { id: 36 }],    },  },})\n```\n\n### `updateMany`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#updatemany-1 \"Direct link to updatemany-1\")\n\nA nested `updateMany` updates a list of related records and supports filtering - for example, you can update a user's unpublished posts.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-35 \"Direct link to Examples\")\n\n##### Update all unpublished posts belonging to a specific user[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-all-unpublished-posts-belonging-to-a-specific-user \"Direct link to Update all unpublished posts belonging to a specific user\")\n\n```\nconst result = await prisma.user.update({  where: {    id: 2,  },  data: {    posts: {      updateMany: {        where: {          published: false,        },        data: {          likes: 0,        },      },    },  },})\n```\n\n### `deleteMany`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#deletemany-1 \"Direct link to deletemany-1\")\n\nA nested `deleteMany` deletes related records and supports filtering. For example, you can delete a user's posts while updating other properties of that user.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-36 \"Direct link to Examples\")\n\n##### Delete all posts belonging to a specific user as part of an update[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#delete-all-posts-belonging-to-a-specific-user-as-part-of-an-update \"Direct link to Delete all posts belonging to a specific user as part of an update\")\n\n```\nconst result = await prisma.user.update({  where: {    id: 2,  },  data: {    name: 'Updated name',    posts: {      deleteMany: {},    },  },})\n```\n\n## Filter conditions and operators[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#filter-conditions-and-operators \"Direct link to Filter conditions and operators\")\n\ninfo\n\n*   From version 4.3.0, you can also use these operators to compare _fields_ in the same model [with the `<model>.fields` property](https://www.prisma.io/docs/orm/reference/prisma-client-reference#compare-columns-in-the-same-table).\n*   In versions before 4.3.0, you can compare fields in the same model [with raw queries](https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles/comparing-columns-through-raw-queries).\n\n### `equals`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#equals \"Direct link to equals\")\n\nValue equals `n`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-37 \"Direct link to Examples\")\n\n##### Return all users where `name` equals `\"Eleanor\"`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-all-users-where-name-equals-eleanor \"Direct link to return-all-users-where-name-equals-eleanor\")\n\n```\nconst result = await prisma.user.findMany({  where: {    name: {      equals: 'Eleanor',    },  },})\n```\n\nYou can also exclude the `equals`:\n\n```\nconst result = await prisma.user.findMany({  where: {    name: 'Eleanor',  },})\n```\n\n### `not`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#not \"Direct link to not\")\n\nValue does not equal `n`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-38 \"Direct link to Examples\")\n\n##### Return all users where `name` does **not** equal `\"Eleanor\"`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-all-users-where-name-does-not-equal-eleanor \"Direct link to return-all-users-where-name-does-not-equal-eleanor\")\n\n```\nconst result = await prisma.user.findMany({  where: {    name: {      not: 'Eleanor',    },  },})\n```\n\nwarning\n\n`not` will return all items that do not match a given value. However, if the column is nullable, `NULL` values will not be returned. If you require null values to be returned, use an [`OR`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#or) operator to include `NULL` values.\n\n##### Return all users where `name` does **not** equal `\"Eleanor\"` **including** users where `name` is `NULL`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#return-all-users-where-name-does-not-equal-eleanor-including-users-where-name-is-null \"Direct link to return-all-users-where-name-does-not-equal-eleanor-including-users-where-name-is-null\")\n\n```\nawait prisma.user.findMany({  where: {    OR: [      { name: { not: 'Eleanor' } },      { name: null }    ]  }})\n```\n\n### `in`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#in \"Direct link to in\")\n\nValue `n` exists in list.\n\nnote\n\n`null` values are not returned. For example, if you combine `in` and `NOT` to return a user whose name is _not_ in the list, users with `null` value names are not returned.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-39 \"Direct link to Examples\")\n\n##### Get `User` records where the `id` can be found in the following list: `[22, 91, 14, 2, 5]`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-user-records-where-the-id-can-be-found-in-the-following-list-22-91-14-2-5 \"Direct link to get-user-records-where-the-id-can-be-found-in-the-following-list-22-91-14-2-5\")\n\n```\nconst getUser = await prisma.user.findMany({  where: {    id: { in: [22, 91, 14, 2, 5] },  },})\n```\n\n##### Get `User` records where the `name` can be found in the following list: `['Saqui', 'Clementine', 'Bob']`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-user-records-where-the-name-can-be-found-in-the-following-list-saqui-clementine-bob \"Direct link to get-user-records-where-the-name-can-be-found-in-the-following-list-saqui-clementine-bob\")\n\n```\nconst getUser = await prisma.user.findMany({  where: {    name: { in: ['Saqui', 'Clementine', 'Bob'] },  },})\n```\n\n##### Get `User` records where `name` is **not** present in the list[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-user-records-where-name-is-not-present-in-the-list \"Direct link to get-user-records-where-name-is-not-present-in-the-list\")\n\nThe following example combines `in` and [`NOT`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#not). You can also use [`notIn`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#notin).\n\n```\nconst getUser = await prisma.user.findMany({  where: {    NOT: {      name: { in: ['Saqui', 'Clementine', 'Bob'] },    },  },})\n```\n\n##### Get a `User` record where at least one `Post` has at least one specified `Category`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-a-user-record-where-at-least-one-post-has-at-least-one-specified-category \"Direct link to get-a-user-record-where-at-least-one-post-has-at-least-one-specified-category\")\n\n```\nconst getUser = await prisma.user.findMany({  where: {    // Find users where..    posts: {      some: {        // ..at least one (some) posts..        categories: {          some: {            // .. have at least one category ..            name: {              in: ['Food', 'Introductions'], // .. with a name that matches one of the following.            },          },        },      },    },  },})\n```\n\n### `notIn`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#notin \"Direct link to notin\")\n\nValue `n` does not exist in list.\n\n*   `null` values are not returned.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-40 \"Direct link to Examples\")\n\n##### Get `User` records where the `id` can **not** be found in the following list: `[22, 91, 14, 2, 5]`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-user-records-where-the-id-can-not-be-found-in-the-following-list-22-91-14-2-5 \"Direct link to get-user-records-where-the-id-can-not-be-found-in-the-following-list-22-91-14-2-5\")\n\n```\nconst getUser = await prisma.user.findMany({  where: {    id: { notIn: [22, 91, 14, 2, 5] },  },})\n```\n\n### `lt`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#lt \"Direct link to lt\")\n\nValue `n` is less than `x`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-41 \"Direct link to Examples\")\n\n##### Get all `Post` records where `likes` is less than `9`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-likes-is-less-than-9 \"Direct link to get-all-post-records-where-likes-is-less-than-9\")\n\n```\nconst getPosts = await prisma.post.findMany({  where: {    likes: {      lt: 9,    },  },})\n```\n\n### `lte`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#lte \"Direct link to lte\")\n\nValue `n` is less than _or_ equal to `x`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-42 \"Direct link to Examples\")\n\n##### Get all `Post` records where `likes` is less or equal to `9`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-likes-is-less-or-equal-to-9 \"Direct link to get-all-post-records-where-likes-is-less-or-equal-to-9\")\n\n```\nconst getPosts = await prisma.post.findMany({  where: {    likes: {      lte: 9,    },  },})\n```\n\n### `gt`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#gt \"Direct link to gt\")\n\nValue `n` is greater than `x`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-43 \"Direct link to Examples\")\n\n##### Get all `Post` records where `likes` is greater than `9`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-likes-is-greater-than-9 \"Direct link to get-all-post-records-where-likes-is-greater-than-9\")\n\n```\nconst getPosts = await prisma.post.findMany({  where: {    likes: {      gt: 9,    },  },})\n```\n\n### `gte`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#gte \"Direct link to gte\")\n\nValue `n` is greater than _or_ equal to `x`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-44 \"Direct link to Examples\")\n\n##### Get all `Post` records where `likes` is greater than or equal to `9`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-likes-is-greater-than-or-equal-to-9 \"Direct link to get-all-post-records-where-likes-is-greater-than-or-equal-to-9\")\n\n```\nconst getPosts = await prisma.post.findMany({  where: {    likes: {      gte: 9,    },  },})\n```\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-45 \"Direct link to Examples\")\n\n##### Get all `Post` records where `date_created` is greater than March 19th, 2020[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-date_created-is-greater-than-march-19th-2020 \"Direct link to get-all-post-records-where-date_created-is-greater-than-march-19th-2020\")\n\n```\nconst result = await prisma.post.findMany({  where: {    date_created: {      gte: new Date(        '2020-03-19T14:21:00+0200'      ) /* Includes time offset for UTC */,    },  },})\n```\n\n### `contains`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#contains \"Direct link to contains\")\n\nValue `n` contains `x`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-46 \"Direct link to Examples\")\n\n##### Count all `Post` records where `content` contains `databases`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#count-all-post-records-where-content-contains-databases \"Direct link to count-all-post-records-where-content-contains-databases\")\n\n```\nconst result = await prisma.post.count({  where: {    content: {      contains: 'databases',    },  },})\n```\n\n##### Count all `Post` records where `content` **does not** contain `databases`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#count-all-post-records-where-content-does-not-contain-databases \"Direct link to count-all-post-records-where-content-does-not-contain-databases\")\n\n```\nconst result = await prisma.post.count({  where: {    NOT: {      content: {        contains: 'databases',      },    },  },})\n```\n\n### `search`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#search \"Direct link to search\")\n\nUse [Full-Text Search](https://www.prisma.io/docs/orm/prisma-client/queries/full-text-search) to search within a `String` field.\n\nFull-Text Search is currently in **Preview** and only available for **PostgreSQL** and **MySQL**. To use `search`, you'll need to enable the `fullTextSearch` preview feature.\n\n```\ngenerator client {  provider        = \"prisma-client-js\"  previewFeatures = [\"fullTextSearch\"]}\n```\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-47 \"Direct link to Examples\")\n\n##### Find all posts with a title that contains `cat` or `dog`.[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#find-all-posts-with-a-title-that-contains-cat-or-dog \"Direct link to find-all-posts-with-a-title-that-contains-cat-or-dog\")\n\n```\nconst result = await prisma.post.findMany({  where: {    title: {      search: 'cat | dog',    },  },})\n```\n\n##### Find all posts with a title that contains `cat` and `dog`.[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#find-all-posts-with-a-title-that-contains-cat-and-dog \"Direct link to find-all-posts-with-a-title-that-contains-cat-and-dog\")\n\n```\nconst result = await prisma.post.findMany({  where: {    title: {      search: 'cat & dog',    },  },})\n```\n\n##### Find all posts with a title that doesn't contain `cat`.[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#find-all-posts-with-a-title-that-doesnt-contain-cat \"Direct link to find-all-posts-with-a-title-that-doesnt-contain-cat\")\n\n```\nconst result = await prisma.post.findMany({  where: {    title: {      search: '!cat',    },  },})\n```\n\n### `mode`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#mode \"Direct link to mode\")\n\n*   Supported by the PostgreSQL and MongoDB connectors only\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-48 \"Direct link to Examples\")\n\n##### Get all `Post` records where `title` contains `prisma`, in a case insensitive way[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-title-contains-prisma-in-a-case-insensitive-way \"Direct link to get-all-post-records-where-title-contains-prisma-in-a-case-insensitive-way\")\n\n```\nconst result = await prisma.post.findMany({  where: {    title: {      contains: 'prisma',      mode: 'insensitive',    },  },})\n```\n\n### `startsWith`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#startswith \"Direct link to startswith\")\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-49 \"Direct link to Examples\")\n\n##### Get all `Post` records where `title` starts with `Pr` (such as `Prisma`)[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-title-starts-with-pr-such-as-prisma \"Direct link to get-all-post-records-where-title-starts-with-pr-such-as-prisma\")\n\n```\nconst result = await prisma.post.findMany({  where: {    title: {      startsWith: 'Pr',    },  },})\n```\n\n### `endsWith`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#endswith \"Direct link to endswith\")\n\n#### Get all `User` records where `email` ends with `prisma.io`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-user-records-where-email-ends-with-prismaio \"Direct link to get-all-user-records-where-email-ends-with-prismaio\")\n\n```\nconst result = await prisma.user.findMany({  where: {    email: {      endsWith: 'prisma.io',    },  },})\n```\n\n### `AND`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#and \"Direct link to and\")\n\nAll conditions must return `true`. Alternatively, pass a list of objects into the `where` clause - the [`AND` operator is not required](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-the-content-field-contains-prisma-and-published-is-false-no-and).\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-50 \"Direct link to Examples\")\n\n##### Get all `Post` records where the `content` field contains `Prisma` and `published` is `false`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-the-content-field-contains-prisma-and-published-is-false \"Direct link to get-all-post-records-where-the-content-field-contains-prisma-and-published-is-false\")\n\n```\nconst result = await prisma.post.findMany({  where: {    AND: [      {        content: {          contains: 'Prisma',        },      },      {        published: {          equals: false,        },      },    ],  },})\n```\n\n##### Get all `Post` records where the `content` field contains `Prisma` and `published` is `false` (no `AND`)[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-the-content-field-contains-prisma-and-published-is-false-no-and \"Direct link to get-all-post-records-where-the-content-field-contains-prisma-and-published-is-false-no-and\")\n\nThe following format returns the same results as the previous example **without** the `AND` operator:\n\n```\nconst result = await prisma.post.findMany({  where: {    content: {      contains: 'Prisma',    },    published: {      equals: false,    },  },})\n```\n\n##### Get all `Post` records where the `title` field contains `Prisma` or `databases`, and `published` is `false`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-the-title-field-contains-prisma-or-databases-and-published-is-false \"Direct link to get-all-post-records-where-the-title-field-contains-prisma-or-databases-and-published-is-false\")\n\nThe following example combines `OR` and `AND`:\n\n```\nconst result = await prisma.post.findMany({  where: {    OR: [      {        title: {          contains: 'Prisma',        },      },      {        title: {          contains: 'databases',        },      },    ],    AND: {      published: false,    },  },})\n```\n\n### `OR`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#or \"Direct link to or\")\n\nOne or more conditions must return `true`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-51 \"Direct link to Examples\")\n\n##### Get all `Post` records where the `title` field contains `Prisma` or `databases`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-the-title-field-contains-prisma-or-databases \"Direct link to get-all-post-records-where-the-title-field-contains-prisma-or-databases\")\n\n```\nconst result = await prisma.post.findMany({  where: {    OR: [      {        title: {          contains: 'Prisma',        },      },      {        title: {          contains: 'databases',        },      },    ],  },})\n```\n\n##### Get all `Post` records where the `title` field contains `Prisma` or `databases`, but not `SQL`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-the-title-field-contains-prisma-or-databases-but-not-sql \"Direct link to get-all-post-records-where-the-title-field-contains-prisma-or-databases-but-not-sql\")\n\nThe following example combines `OR` and `NOT`:\n\n```\nconst result = await prisma.post.findMany({  where: {    OR: [      {        title: {          contains: 'Prisma',        },      },      {        title: {          contains: 'databases',        },      },    ],    NOT: {      title: {        contains: 'SQL',      },    },  },})\n```\n\n##### Get all `Post` records where the `title` field contains `Prisma` or `databases`, and `published` is `false`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-the-title-field-contains-prisma-or-databases-and-published-is-false-1 \"Direct link to get-all-post-records-where-the-title-field-contains-prisma-or-databases-and-published-is-false-1\")\n\nThe following example combines `OR` and `AND`:\n\n```\nconst result = await prisma.post.findMany({  where: {    OR: [      {        title: {          contains: 'Prisma',        },      },      {        title: {          contains: 'databases',        },      },    ],    AND: {      published: false,    },  },})\n```\n\n### `NOT`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#not-1 \"Direct link to not-1\")\n\nAll conditions must return `false`.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-52 \"Direct link to Examples\")\n\n##### Get all `Post` records where the `title` field contains `Prisma` or `databases`, but not `SQL`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-the-title-field-contains-prisma-or-databases-but-not-sql-1 \"Direct link to get-all-post-records-where-the-title-field-contains-prisma-or-databases-but-not-sql-1\")\n\n```\nconst result = await prisma.post.findMany({  where: {    OR: [      {        title: {          contains: 'Prisma',        },      },      {        title: {          contains: 'databases',        },      },    ],    NOT: {      title: {        contains: 'SQL',      },    },  },})\n```\n\n##### Get all `Post` records where the `title` field contains `Prisma` or `databases`, but not `SQL`, and the related `User` record' email address does not contain `sarah`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-the-title-field-contains-prisma-or-databases-but-not-sql-and-the-related-user-record-email-address-does-not-contain-sarah \"Direct link to get-all-post-records-where-the-title-field-contains-prisma-or-databases-but-not-sql-and-the-related-user-record-email-address-does-not-contain-sarah\")\n\n```\nconst result = await prisma.post.findMany({  where: {    OR: [      {        title: {          contains: 'Prisma',        },      },      {        title: {          contains: 'databases',        },      },    ],    NOT: {      title: {        contains: 'SQL',      },    },    user: {      NOT: {        email: {          contains: 'sarah',        },      },    },  },  include: {    user: true,  },})\n```\n\n## Relation filters[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#relation-filters \"Direct link to Relation filters\")\n\n### `some`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#some \"Direct link to some\")\n\nReturns all records where **one or more** (\"some\") _related_ records match filtering criteria.\n\n*   You can use `some` without parameters to return all records with at least one relation\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-53 \"Direct link to Examples\")\n\n##### Get all `User` records where _some_ posts mention `Prisma`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-user-records-where-some-posts-mention-prisma \"Direct link to get-all-user-records-where-some-posts-mention-prisma\")\n\n```\nconst result = await prisma.user.findMany({  where: {    post: {      some: {        content: {          contains: \"Prisma\"        }      }    }  }}\n```\n\n### `every`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#every \"Direct link to every\")\n\nReturns all records where **all** (\"every\") _related_ records match filtering criteria.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-54 \"Direct link to Examples\")\n\n##### Get all `User` records where _all_ posts are published[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-user-records-where-all-posts-are-published \"Direct link to get-all-user-records-where-all-posts-are-published\")\n\n```\nconst result = await prisma.user.findMany({  where: {    post: {      every: {        published: true      },    }  }}\n```\n\n### `none`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#none \"Direct link to none\")\n\nReturns all records where **zero** _related_ records match filtering criteria.\n\n*   You can use `none` without parameters to [return all records with no relations](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-user-records-with-zero-posts)\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-55 \"Direct link to Examples\")\n\n##### Get all `User` records with zero posts[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-user-records-with-zero-posts \"Direct link to get-all-user-records-with-zero-posts\")\n\n```\nconst result = await prisma.user.findMany({  where: {    post: {        none: {} // User has no posts    }  }}\n```\n\n##### Get all `User` records with zero published posts[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-user-records-with-zero-published-posts \"Direct link to get-all-user-records-with-zero-published-posts\")\n\n```\nconst result = await prisma.user.findMany({  where: {    post: {        none: {          published: true        }    }  }}\n```\n\n### `is`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#is \"Direct link to is\")\n\nReturns all records where related record matches filtering criteria (for example, user's name `is` Bob).\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-56 \"Direct link to Examples\")\n\n##### Get all `Post` records where user's name is `\"Bob\"`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-users-name-is-bob \"Direct link to get-all-post-records-where-users-name-is-bob\")\n\n```\nconst result = await prisma.post.findMany({  where: {    user: {        is: {          name: \"Bob\"        },    }  }}\n```\n\n### `isNot`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#isnot \"Direct link to isnot\")\n\nReturns all records where related record matches filtering criteria (for example, user's name `isNot` Bob).\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-57 \"Direct link to Examples\")\n\n##### Get all `Post` records where user's name is NOT `\"Bob\"`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#get-all-post-records-where-users-name-is-not-bob \"Direct link to get-all-post-records-where-users-name-is-not-bob\")\n\n```\nconst result = await prisma.post.findMany({  where: {    user: {        isNot: {          name: \"Bob\"        },    }  }}\n```\n\n## Scalar list methods[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#scalar-list-methods \"Direct link to Scalar list methods\")\n\n### `set`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#set-1 \"Direct link to set-1\")\n\nUse `set` to overwrite the value of a scalar list field.\n\n*   `set` is optional - you can set the value directly:\n    \n    ```\n    tags: ['computers', 'books']\n    ```\n    \n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-58 \"Direct link to Examples\")\n\n##### Set the value of `tags` to a list of string values[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#set-the-value-of-tags-to-a-list-of-string-values \"Direct link to set-the-value-of-tags-to-a-list-of-string-values\")\n\n```\nconst setTags = await prisma.post.update({  where: {    id: 9,  },  data: {    tags: {      set: ['computing', 'books'],    },  },})\n```\n\n##### Set `tags` to a list of values _without_ using the `set` keyword[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#set-tags-to-a-list-of-values-without-using-the-set-keyword \"Direct link to set-tags-to-a-list-of-values-without-using-the-set-keyword\")\n\n```\nconst setTags = await prisma.post.update({  where: {    id: 9,  },  data: {    tags: ['computing', 'books'],  },})\n```\n\n#### Set the value of `tags` to a single string value[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#set-the-value-of-tags-to-a-single-string-value \"Direct link to set-the-value-of-tags-to-a-single-string-value\")\n\n```\nconst setTags = await prisma.post.update({  where: {    id: 9,  },  data: {    tags: {      set: 'computing',    },  },})\n```\n\n### `push`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#push \"Direct link to push\")\n\n`push` is available in version [2.20.0](https://github.com/prisma/prisma/releases/2.20.0) and later. Use `push` to add _one_ value or _multiple_ values to a scalar list field.\n\n*   Available for PostgreSQL and MongoDB only.\n*   You can push a list of values or only a single value.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-59 \"Direct link to Examples\")\n\n##### Add a `computing` item to the `tags` list[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#add-a-computing-item-to-the-tags-list \"Direct link to add-a-computing-item-to-the-tags-list\")\n\n```\nconst addTag = await prisma.post.update({  where: {    id: 9,  },  data: {    tags: {      push: 'computing',    },  },})\n```\n\n```\nconst addTag = await prisma.post.update({  where: {    id: 9,  },  data: {    tags: {      push: ['computing', 'genetics'],    },  },})\n```\n\n### `unset`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#unset \"Direct link to unset\")\n\nwarning\n\nThis method is available on MongoDB only in versions [3.11.1](https://github.com/prisma/prisma/releases/tag/3.11.1) and later.\n\nUse `unset` to unset the value of a scalar list. Unlike `set: null`, `unset` removes the list entirely.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-60 \"Direct link to Examples\")\n\n##### Unset the value of `tags`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#unset-the-value-of-tags \"Direct link to unset-the-value-of-tags\")\n\n```\nconst setTags = await prisma.post.update({  where: {    id: 9,  },  data: {    tags: {      unset: true,    },  },})\n```\n\n## Scalar list filters[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#scalar-list-filters \"Direct link to Scalar list filters\")\n\nScalar list filters allow you to filter by the contents of a list / array field.\n\nwarning\n\nAvailable for:\n\n*   PostgreSQL in versions [2.15.0](https://github.com/prisma/prisma/releases/tag/2.15.0) and later\n*   CockroachDB in versions [3.9.0](https://github.com/prisma/prisma/releases/tag/3.9.0) and later\n*   MongoDB in versions [3.11.0](https://github.com/prisma/prisma/releases/tag/3.11.0) and later\n\n*   Scalar list / array filters [ignore `NULL` values](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-scalar-lists-arrays#null-values-in-arrays) . Using `isEmpty` or `NOT` does not return records with `NULL` value lists / arrays, and `{ equals: null }` results in an error.\n\n### `has`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#has \"Direct link to has\")\n\nThe given value exists in the list.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-61 \"Direct link to Examples\")\n\nThe following query returns all `Post` records where the `tags` list includes `\"databases\"`:\n\n```\nconst posts = await client.post.findMany({  where: {    tags: {      has: 'databases',    },  },})\n```\n\nThe following query returns all `Post` records where the `tags` list **does not** include `\"databases\"`:\n\n```\nconst posts = await client.post.findMany({  where: {    NOT: {      tags: {        has: 'databases',      },    },  },})\n```\n\n### `hasEvery`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#hasevery \"Direct link to hasevery\")\n\nEvery value exists in the list.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-62 \"Direct link to Examples\")\n\nThe following query returns all `Post` records where the `tags` list includes _at least_ `\"databases\"` _and_ `\"typescript\"`:\n\n```\nconst posts = await prisma.post.findMany({  where: {    tags: {      hasEvery: ['databases', 'typescript'],    },  },})\n```\n\n### `hasSome`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#hassome \"Direct link to hassome\")\n\nAt least one value exists in the list.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-63 \"Direct link to Examples\")\n\nThe following query returns all `Post` records where the `tags` list includes `\"databases\"` _or_ `\"typescript\"`:\n\n```\nconst posts = await prisma.post.findMany({  where: {    tags: {      hasSome: ['databases', 'typescript'],    },  },})\n```\n\n### `isEmpty`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#isempty \"Direct link to isempty\")\n\nThe list is empty.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-64 \"Direct link to Examples\")\n\nThe following query returns all `Post` records that have no tags:\n\n```\nconst posts = await prisma.post.findMany({  where: {    tags: {      isEmpty: true,    },  },})\n```\n\n### `isSet`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#isset \"Direct link to isset\")\n\nwarning\n\nThis filter is available on MongoDB only in versions [3.11.1](https://github.com/prisma/prisma/releases/tag/3.11.1) and later.\n\nFilter lists to include only results that have been set (either set to a value, or explicitly set to `null`). Setting this filter to `true` will exclude undefined results that are not set at all.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-65 \"Direct link to Examples\")\n\nThe following query returns all `Post` records where the `tags` have been set to either `null` or a value:\n\n```\nconst posts = await prisma.post.findMany({  where: {    tags: {      isSet: true,    },  },})\n```\n\n### `equals`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#equals-1 \"Direct link to equals-1\")\n\nThe list matches the given value exactly.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-66 \"Direct link to Examples\")\n\nThe following query returns all `Post` records where the `tags` list includes `\"databases\"` and `\"typescript\"` only:\n\n```\nconst posts = await prisma.post.findMany({  where: {    tags: {      equals: ['databases', 'typescript'],    },  },})\n```\n\n## Composite type methods[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#composite-type-methods \"Direct link to Composite type methods\")\n\nwarning\n\nAvailable for MongoDB only in Prisma `3.10.0` and later.\n\nComposite type methods allow you to create, update and delete [composite types](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/composite-types).\n\n### `set`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#set-2 \"Direct link to set-2\")\n\nUse `set` to overwrite the value of a composite type.\n\n*   The `set` keyword is optional - you can set the value directly:\n    \n    ```\n    photos: [  { height: 100, width: 200, url: '1.jpg' },  { height: 100, width: 200, url: '2.jpg' },]\n    ```\n    \n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-67 \"Direct link to Examples\")\n\n##### Set the `shippingAddress` composite type within a new `order`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#set-the-shippingaddress-composite-type-within-a-new-order \"Direct link to set-the-shippingaddress-composite-type-within-a-new-order\")\n\n```\nconst order = await prisma.order.create({  data: {    // Normal relation    product: { connect: { id: 'some-object-id' } },    color: 'Red',    size: 'Large',    // Composite type    shippingAddress: {      set: {        street: '1084 Candycane Lane',        city: 'Silverlake',        zip: '84323',      },    },  },})\n```\n\n##### Set an optional composite type to `null`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#set-an-optional-composite-type-to-null \"Direct link to set-an-optional-composite-type-to-null\")\n\n```\nconst order = await prisma.order.create({  data: {    // Embedded optional type, set to null    billingAddress: {      set: null,    },  },})\n```\n\n### `unset`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#unset-1 \"Direct link to unset-1\")\n\nUse `unset` to unset the value of a composite type. Unlike `set: null`, this removes the field entirely from the MongoDB document.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-68 \"Direct link to Examples\")\n\n##### Remove the `billingAddress` from an `order`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#remove-the-billingaddress-from-an-order \"Direct link to remove-the-billingaddress-from-an-order\")\n\n```\nconst order = await prisma.order.update({  where: {    id: 'some-object-id',  },  data: {    billingAddress: {      // Unset the billing address      // Removes \"billingAddress\" field from order      unset: true,    },  },})\n```\n\n### `update`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-2 \"Direct link to update-2\")\n\nUse `update` to update fields within a required composite type.\n\nThe `update` method cannot be used on optional types. Instead, use [upsert](https://www.prisma.io/docs/orm/reference/prisma-client-reference#upsert-2)\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-69 \"Direct link to Examples\")\n\n##### Update the zip field of a `shippingAddress` composite type[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-the-zip-field-of-a-shippingaddress-composite-type \"Direct link to update-the-zip-field-of-a-shippingaddress-composite-type\")\n\n```\nconst order = await prisma.order.update({  where: {    id: 'some-object-id',  },  data: {    shippingAddress: {      // Update just the zip field      update: {        zip: '41232',      },    },  },})\n```\n\n### `upsert`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#upsert-2 \"Direct link to upsert-2\")\n\nUse `upsert` to update an existing optional composite type if it exists, and otherwise set the composite type.\n\nThe `upsert` method cannot be used on required types. Instead, use [update](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update-2)\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-70 \"Direct link to Examples\")\n\n##### Create a new `billingAddress` if it doesn't exist, and otherwise update it[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create-a-new-billingaddress-if-it-doesnt-exist-and-otherwise-update-it \"Direct link to create-a-new-billingaddress-if-it-doesnt-exist-and-otherwise-update-it\")\n\n```\nconst order = await prisma.order.update({  where: {    id: 'some-object-id',  },  data: {    billingAddress: {      // Create the address if it doesn't exist,      // otherwise update it      upsert: {        set: {          street: '1084 Candycane Lane',          city: 'Silverlake',          zip: '84323',        },        update: {          zip: '84323',        },      },    },  },})\n```\n\n### `push`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#push-1 \"Direct link to push-1\")\n\nUse `push` to push values to the end of a list of composite types.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-71 \"Direct link to Examples\")\n\n##### Add a new photo to the `photos` list[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#add-a-new-photo-to-the-photos-list \"Direct link to add-a-new-photo-to-the-photos-list\")\n\n```\nconst product = prisma.product.update({  where: {    id: 10,  },  data: {    photos: {      // Push a photo to the end of the photos list      push: [{ height: 100, width: 200, url: '1.jpg' }],    },  },})\n```\n\n## Composite type filters[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#composite-type-filters \"Direct link to Composite type filters\")\n\nwarning\n\nAvailable for MongoDB only in Prisma `3.11.0` and later.\n\nComposite type filters allow you to filter the contents of [composite types](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/composite-types).\n\n### `equals`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#equals-2 \"Direct link to equals-2\")\n\nUse `equals` to filter results by matching a composite type or a list of composite types. Requires all required fields of the composite type to match.\n\nWhen matching optional fields, you need to distinguish between undefined (missing) fields of the document, and fields that have been explicitly set to `null`:\n\n*   If you omit an optional field, it will match undefined fields, but not fields that have been set to `null`\n*   If you filter for `null` values of an optional field with `equals: { ... exampleField: null ... }`, then it will match only documents where the field has been set to `null`, and not undefined fields\n\nThe ordering of fields and lists matters when using `equals`:\n\n*   For fields, `{ \"a\": \"1\", \"b\": \"2\" }` and `{ \"b\": \"2\", \"a\": \"1\" }` are not considered equal\n*   For lists, `[ { \"a\": 1 }, { \"a\": 2 } ]` and `[ { \"a\": 2 }, { \"a\": 1 } ]` are not considered equal\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-72 \"Direct link to Examples\")\n\n##### Find orders that exactly match the given `shippingAddress`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#find-orders-that-exactly-match-the-given-shippingaddress \"Direct link to find-orders-that-exactly-match-the-given-shippingaddress\")\n\n```\nconst orders = await prisma.order.findMany({  where: {    shippingAddress: {      equals: {        street: '555 Candy Cane Lane',        city: 'Wonderland',        zip: '52337',      },    },  },})\n```\n\n##### Find products with photos that match all of a list of `url`s[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#find-products-with-photos-that-match-all-of-a-list-of-urls \"Direct link to find-products-with-photos-that-match-all-of-a-list-of-urls\")\n\n```\nconst product = prisma.product.findMany({  where: {    equals: {      photos: [{ url: '1.jpg' }, { url: '2.jpg' }],    },  },})\n```\n\n### `is`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#is-1 \"Direct link to is-1\")\n\nUse `is` to filter results by matching specific fields within composite types.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-73 \"Direct link to Examples\")\n\n##### Find orders with a `shippingAddress` that matches the given street name[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#find-orders-with-a-shippingaddress-that-matches-the-given-street-name \"Direct link to find-orders-with-a-shippingaddress-that-matches-the-given-street-name\")\n\n```\nconst orders = await prisma.order.findMany({  where: {    shippingAddress: {      is: {        street: '555 Candy Cane Lane',      },    },  },})\n```\n\n### `isNot`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#isnot-1 \"Direct link to isnot-1\")\n\nUse `isNot` to filter results for composite type fields that do not match.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-74 \"Direct link to Examples\")\n\n##### Find orders with a `shippingAddress` that does not match the given zip code[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#find-orders-with-a-shippingaddress-that-does-not-match-the-given-zip-code \"Direct link to find-orders-with-a-shippingaddress-that-does-not-match-the-given-zip-code\")\n\n```\nconst orders = await prisma.order.findMany({  where: {    shippingAddress: {      isNot: {        zip: '52337',      },    },  },})\n```\n\n### `isEmpty`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#isempty-1 \"Direct link to isempty-1\")\n\nUse `isEmpty` to filter results for an empty list of composite types.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-75 \"Direct link to Examples\")\n\n##### Find products with no photos[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#find-products-with-no-photos \"Direct link to Find products with no photos\")\n\n```\nconst product = prisma.product.findMany({  where: {    photos: {      isEmpty: true,    },  },})\n```\n\n### `every`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#every-1 \"Direct link to every-1\")\n\nUse `every` to filter for lists of composite types where every item in the list matches the condition\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-76 \"Direct link to Examples\")\n\n##### Find the first product where every photo has a `height` of `200`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#find-the-first-product-where-every-photo-has-a-height-of-200 \"Direct link to find-the-first-product-where-every-photo-has-a-height-of-200\")\n\n```\nconst product = prisma.product.findFirst({  where: {    photos: {      every: {        { height: 200 },      }    }  },})\n```\n\n### `some`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#some-1 \"Direct link to some-1\")\n\nUse `some` to filter for lists of composite types where one or more items in the list match the condition.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-77 \"Direct link to Examples\")\n\n##### Find the first product where one or more photos have a `url` of `2.jpg`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#find-the-first-product-where-one-or-more-photos-have-a-url-of-2jpg \"Direct link to find-the-first-product-where-one-or-more-photos-have-a-url-of-2jpg\")\n\n```\nconst product = prisma.product.findFirst({  where: {    photos: {      some: {        { url: \"2.jpg\" },      }    }  },})\n```\n\n### `none`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#none-1 \"Direct link to none-1\")\n\nUse `none` to filter for lists of composite types where no items in the list match the condition.\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-78 \"Direct link to Examples\")\n\n##### Find the first product where no photos have a `url` of `2.jpg`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#find-the-first-product-where-no-photos-have-a-url-of-2jpg \"Direct link to find-the-first-product-where-no-photos-have-a-url-of-2jpg\")\n\n```\nconst product = prisma.product.findFirst({  where: {    photos: {      none: {        { url: \"2.jpg\" },      }    }  },})\n```\n\n## Atomic number operations[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#atomic-number-operations \"Direct link to Atomic number operations\")\n\nAtomic operations on update is available for number field types (`Float` and `Int`). This feature allows you to update a field based on its **current** value (such as _subtracting_ or _dividing_) without risking a race condition.\n\nOverview: Race conditions\n\nA race conditions occurs when two or more operations must be done in sequence in order to complete a task. In the following example, two clients try to increase the same field (`postCount`) by one:\n\nClient\n\nOperation\n\nValue\n\nClient 1\n\n**Get** field value\n\n`21`\n\nClient 2\n\n**Get** field value\n\n`21`\n\nClient 2\n\n**Set** field value\n\n`22`\n\nClient 1\n\n**Set** field value\n\n`22` ✘\n\nThe value _should_ be `23`, but the two clients did not read and write to the `postCount` field in sequence. Atomic operations on update combine read and write into a single operation, which prevents a race condition:\n\nClient\n\nOperation\n\nValue\n\nClient 1\n\n**Get and set** field value\n\n`21` → `22`\n\nClient 2\n\n**Get and set** field value\n\n`22` → `23` ✔\n\n### Operators[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#operators \"Direct link to Operators\")\n\nOption\n\nDescription\n\n`increment`\n\nAdds `n` to the current value.\n\n`decrement`\n\nSubtacts `n` from the current value.\n\n`multiply`\n\nMultiplies the current value by `n`.\n\n`divide`\n\nDivides the current value by `n`.\n\n`set`\n\nSets the current field value. Identical to `{ myField : n }`.\n\n*   You can only perform **one** atomic update per field, per query.\n*   If a field is `null`, it will not be updated by `increment`, `decrement`, `multiply`, or `divide`.\n\n### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-79 \"Direct link to Examples\")\n\n#### Increment all `view` and `likes` fields of all `Post` records by `1`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#increment-all-view-and-likes-fields-of-all-post-records-by-1 \"Direct link to increment-all-view-and-likes-fields-of-all-post-records-by-1\")\n\n```\nconst updatePosts = await prisma.post.updateMany({  data: {    views: {      increment: 1,    },    likes: {      increment: 1,    },  },})\n```\n\n#### Set all `views` fields of all `Post` records to `0`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#set-all-views-fields-of-all-post-records-to-0 \"Direct link to set-all-views-fields-of-all-post-records-to-0\")\n\n```\nconst updatePosts = await prisma.post.updateMany({  data: {    views: {      set: 0,    },  },})\n```\n\nCan also be written as:\n\n```\nconst updatePosts = await prisma.post.updateMany({  data: {    views: 0,  },})\n```\n\n## `Json` filters[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#json-filters \"Direct link to json-filters\")\n\nFor use cases and advanced examples, see: [Working with `Json` fields](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-json-fields).\n\nwarning\n\nSupported by [PostgreSQL](https://www.prisma.io/docs/orm/overview/databases/postgresql) and [MySQL](https://www.prisma.io/docs/orm/overview/databases/mysql) with different syntaxes for the `path` option. PostgreSQL does not support filtering on object key values in arrays.\n\nThe examples in this section assumes that the value of the `pet` field is:\n\n```\n{  \"favorites\": {    \"catBreed\": \"Turkish van\",    \"dogBreed\": \"Rottweiler\",    \"sanctuaries\": [\"RSPCA\", \"Alley Cat Allies\"],    \"treats\": [      { \"name\": \"Dreamies\", \"manufacturer\": \"Mars Inc\" },      { \"name\": \"Treatos\", \"manufacturer\": \"The Dog People\" }    ]  },  \"fostered\": {    \"cats\": [\"Bob\", \"Alice\", \"Svetlana the Magnificent\", \"Queenie\"]  },  \"owned\": {    \"cats\": [\"Elliott\"]  }}\n```\n\n*   The implementation of `Json` filtering [differs between database connectors](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-json-fields)\n*   Filtering is case sensitive in PostgreSQL and does not yet support `mode`\n\n### `path`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#path \"Direct link to path\")\n\n`path` represents the location of a specific key. The following query returns all users where the nested `favourites` > `dogBreed` key equals `\"Rottweiler\"`.\n\n*   PostgreSQL\n*   MySQL\n\n```\nconst getUsers = await prisma.user.findMany({  where: {    pets: {      path: ['favorites', 'dogBreed'],      equals: 'Rottweiler',    },  },})\n```\n\nThe following query returns all users where the nested `owned` > `cats` array contains `\"Elliott\"`.\n\n*   PostgreSQL\n*   MySQL\n\n```\nconst getUsers = await prisma.user.findMany({  where: {    pets: {      path: ['owned', 'cats'],      array_contains: ['Elliott'],    },  },})\n```\n\nwarning\n\nFiltering by the key values of objects inside an array (below) is only supported by the MySQL connector.\n\nThe following query returns all users where the nested `favorites` > `treats` array contains an object where the `name` value is `\"Dreamies\"`:\n\n```\nconst getUsers = await prisma.user.findMany({  where: {    pets: {      path: '$.favorites.treats[*].name',      array_contains: 'Dreamies',    },  },})\n```\n\n### `string_contains`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#string_contains \"Direct link to string_contains\")\n\nThe following query returns all users where the nested `favorites` > `catBreed` key value contains `\"Van\"`:\n\n*   PostgreSQL\n*   MySQL\n\n```\nconst getUsers = await prisma.user.findMany({  where: {    pets: {      path: ['favorites', 'catBreed'],      string_contains: 'Van',    },  },})\n```\n\n### `string_starts_with`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#string_starts_with \"Direct link to string_starts_with\")\n\nThe following query returns all users where the nested `favorites` > `catBreed` key value starts with `\"Turkish\"`:\n\n*   PostgreSQL\n*   MySQL\n\n```\nconst getUsers = await prisma.user.findMany({  where: {    pets: {      path: ['favorites', 'catBreed'],      string_starts_with: 'Turkish',    },  },})\n```\n\n### `string_ends_with`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#string_ends_with \"Direct link to string_ends_with\")\n\nThe following query returns all users where the nested `favorites` > `catBreed` key value ends with `\"Van\"`:\n\n*   PostgreSQL\n*   MySQL\n\n```\nconst getUsers = await prisma.user.findMany({  where: {    pets: {      path: ['favorites', 'catBreed'],      string_ends_with: 'Van',    },  },})\n```\n\n### `array_contains`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#array_contains \"Direct link to array_contains\")\n\nThe following query returns all users where the `sanctuaries` array contains the value `\"RSPCA\"`:\n\n*   PostgreSQL\n*   MySQL\n\n```\nconst getUsers = await prisma.user.findMany({  where: {    pets: {      path: ['sanctuaries'],      array_contains: ['RSPCA'],    },  },})\n```\n\ninfo\n\n**Note**: In PostgreSQL, the value of `array_contains` must be an array and not a string, even if the array only contains a single value.\n\nThe following query returns all users where the `sanctuaries` array contains _all_ the values in the given array:\n\n*   PostgreSQL\n*   MySQL\n\n```\nconst getUsers = await prisma.user.findMany({  where: {    pets: {      path: ['sanctuaries'],      array_contains: ['RSPCA', 'Alley Cat Allies'],    },  },})\n```\n\n### `array_starts_with`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#array_starts_with \"Direct link to array_starts_with\")\n\nThe following query returns all users where the `sanctuaries` array starts with the value `\"RSPCA\"`:\n\n*   PostgreSQL\n*   MySQL\n\n```\nconst getUsers = await prisma.user.findMany({  where: {    pets: {      path: ['sanctuaries'],      array_starts_with: 'RSPCA',    },  },})\n```\n\n### `array_ends_with`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#array_ends_with \"Direct link to array_ends_with\")\n\nThe following query returns all users where the `sanctuaries` array ends with the value `\"Alley Cat Allies\"`:\n\n*   PostgreSQL\n*   MySQL\n\n```\nconst getUsers = await prisma.user.findMany({  where: {    pets: {      path: ['sanctuaries'],      array_ends_with: 'Alley Cat Allies',    },  },})\n```\n\n## Client methods[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#client-methods \"Direct link to Client methods\")\n\n**Note:** Client-level methods are prefixed by `$`.\n\n*   `$on` and `$use` client methods do not exist on extended client instances which are extended using [`$extends`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#extends)\n\nwarning\n\nIn [extended clients](https://www.prisma.io/docs/orm/prisma-client/client-extensions), Client methods do not necessarily exist. If you are extending your client, make sure to check for existence before using Client methods like `$transaction` or `$connect`.\n\nIn addition, if you are using `$on` or `$use`, you will need to use these client methods before extending your client as these methods do not exist on extended clients. For `$use` specifically we recommend transitioning [to use query extensions](https://www.prisma.io/docs/orm/prisma-client/client-extensions/query).\n\n### `$disconnect()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#disconnect-1 \"Direct link to disconnect-1\")\n\nThe `$disconnect()` method closes the database connections that were established when `$connect` was called and stops the process that was running Prisma ORM's query engine. See [Connection management](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/databases-connections/connection-management) for an overview of `$connect()` and `$disconnect()`.\n\n*   `$disconnect()` returns a `Promise`, so you should call it inside an `async` function with the `await` keyword.\n\n### `$connect()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#connect-1 \"Direct link to connect-1\")\n\nThe `$connect()` method establishes a physical connection to the database via Prisma ORM's query engine. See [Connection management](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/databases-connections/connection-management) for an overview of `$connect()` and `$disconnect()`.\n\n*   `$connect()` returns a `Promise`, so you should call it inside an `async` function with the `await` keyword.\n\n### `$on()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#on \"Direct link to on\")\n\nwarning\n\n`$on` is not available in [extended clients](https://www.prisma.io/docs/orm/prisma-client/client-extensions). Please either migrate to client extensions or use the `$on` method prior to extending your client.\n\nThe `$on()` method allows you to subscribe to [logging events](https://www.prisma.io/docs/orm/reference/prisma-client-reference#log) or the [exit hook](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/databases-connections/connection-management#exit-hooks).\n\n### `$use()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#use \"Direct link to use\")\n\nThe `$use()` method adds [middleware](https://www.prisma.io/docs/orm/prisma-client/client-extensions/middleware) :\n\n```\nprisma.$use(async (params, next) => {  console.log('This is middleware!')  // Modify or interrogate params here  return next(params)})\n```\n\n#### `next`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#next \"Direct link to next\")\n\n`next` represents the \"next level\" in the middleware stack, which could be the next middleware or the Prisma Query, depending on [where in the stack you are](https://www.prisma.io/docs/orm/prisma-client/client-extensions/middleware#running-order-and-the-middleware-stack).\n\n#### `params`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#params \"Direct link to params\")\n\n`params` is an object with information to use in your middleware.\n\nParameter\n\nDescription\n\n`action`\n\nThe query type - for example, `create` or `findMany`.\n\n`args`\n\nArguments that were passed into the query - for example, `where`, `data`, or `orderBy`\n\n`dataPath`\n\nPopulated if you use the [fluent API](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#fluent-api).\n\n`model`\n\nThe model type - for example, `Post` or `User`.\n\n`runInTransaction`\n\nReturns `true` if the query ran in the context of a [transaction](https://www.prisma.io/docs/orm/reference/prisma-client-reference#transaction).\n\ntip\n\nIf you need the `model` property as a string, use: `String(params.model)`\n\nExample parameter values:\n\n```\n{  args: { where: { id: 15 } },  dataPath: [ 'select', 'author', 'select', 'posts' ],  runInTransaction: false,  action: 'findMany',  model: 'Post'}\n```\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-80 \"Direct link to Examples\")\n\nSee [middleware examples](https://www.prisma.io/docs/orm/prisma-client/client-extensions/middleware#samples) .\n\n### `$queryRaw`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#queryraw \"Direct link to queryraw\")\n\nSee: [Raw database access (`$queryRaw`)](https://www.prisma.io/docs/orm/prisma-client/queries/raw-database-access/raw-queries#queryraw).\n\n### `$queryRawUnsafe()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#queryrawunsafe \"Direct link to queryrawunsafe\")\n\nSee: [Raw database access (`$queryRawUnsafe()`)](https://www.prisma.io/docs/orm/prisma-client/queries/raw-database-access/raw-queries#queryrawunsafe).\n\n### `$executeRaw`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#executeraw \"Direct link to executeraw\")\n\nSee: [Raw database access (`$executeRaw`)](https://www.prisma.io/docs/orm/prisma-client/queries/raw-database-access/raw-queries#executeraw).\n\n### `$executeRawUnsafe()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#executerawunsafe \"Direct link to executerawunsafe\")\n\nSee: [Raw database access (`$executeRawUnsafe()`)](https://www.prisma.io/docs/orm/prisma-client/queries/raw-database-access/raw-queries#executerawunsafe).\n\n### `$runCommandRaw()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#runcommandraw \"Direct link to runcommandraw\")\n\nSee: [Raw database access (`$runCommandRaw()`)](https://www.prisma.io/docs/orm/prisma-client/queries/raw-database-access/raw-queries#runcommandraw).\n\n### `$transaction()`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#transaction \"Direct link to transaction\")\n\nSee: [Transactions](https://www.prisma.io/docs/orm/prisma-client/queries/transactions).\n\n### `$metrics`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#metrics \"Direct link to metrics\")\n\nPrisma Client metrics give you a detailed insight into how Prisma Client interacts with your database. You can use this insight to help diagnose performance issues with your application. Learn more: [Metrics](https://www.prisma.io/docs/orm/prisma-client/observability-and-logging/metrics).\n\nPrisma Client metrics has the following methods:\n\n*   `$metrics.json()`: [Retrieves Prisma Client metrics in JSON format](https://www.prisma.io/docs/orm/prisma-client/observability-and-logging/metrics#retrieve-metrics-in-json-format).\n*   `$metrics.prometheus()`: [Retrieves Prisma Client metrics in Prometheus format](https://www.prisma.io/docs/orm/prisma-client/observability-and-logging/metrics#retrieve-metrics-in-prometheus-format).\n\n### `$extends`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#extends \"Direct link to extends\")\n\nWith `$extends`, you can create and use Prisma Client extensions to add functionality to Prisma Client in the following ways:\n\n*   `model`: add custom methods to your models\n*   `client`: add custom methods to your client\n*   `query`: create custom Prisma Client queries\n*   `result`: add custom fields to your query results\n\nLearn more: [Prisma Client extensions](https://www.prisma.io/docs/orm/prisma-client/client-extensions).\n\n## Utility types[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#utility-types \"Direct link to Utility types\")\n\nUtility types are helper functions and types that live on the `Prisma` namespace. They are useful for keeping your application type safe.\n\n### `Prisma.validator`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#prismavalidator \"Direct link to prismavalidator\")\n\nThe `validator` helps you create re-usable query parameters based on your schema models while making sure that the objects you create are valid. See also: [Using `Prisma.validator`](https://www.prisma.io/docs/orm/prisma-client/type-safety/prisma-validator)\n\nThere are two ways you can use the `validator`:\n\n#### Using generated Prisma Client types[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#using-generated-prisma-client-types \"Direct link to Using generated Prisma Client types\")\n\nUsing types provides a type-level approach to validate data:\n\n```\nPrisma.validator<GeneratedType>({ args })\n```\n\n#### Using a \"selector\"[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#using-a-selector \"Direct link to Using a \"selector\"\")\n\nWhen using the selector pattern, you use an existing Prisma Client instance to create a validator. This pattern allows you to select the model, operation, and query option to validate against.\n\nYou can also use an instance of Prisma Client that has been extended using a [Prisma Client extension](https://www.prisma.io/docs/orm/prisma-client/client-extensions).\n\n```\nPrisma.validator(  PrismaClientInstance,  '<model>',  '<operation>',  '<query option>')({ args })\n```\n\n#### Examples[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#examples-81 \"Direct link to Examples\")\n\nThe following example shows how you can extract and validate the input for the `create` operation you can reuse within your app:\n\n```\nimport { Prisma } from '@prisma/client'const validateUserAndPostInput = (name, email, postTitle) => {  return Prisma.validator<Prisma.UserCreateInput>()({    name,    email,    posts: {      create: {        title: postTitle,      },    },  })}\n```\n\nHere is an alternative syntax for the same operation:\n\n```\nimport { Prisma } from '@prisma/client'import prisma from './prisma'const validateUserAndPostInput = (name, email, postTitle) => {  return Prisma.validator(    prisma,    'user',    'create',    'data'  )({    name,    email,    posts: {      create: {        title: postTitle,      },    },  })}\n```\n\n## Compare columns in the same table[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#compare-columns-in-the-same-table \"Direct link to Compare columns in the same table\")\n\nYou can compare columns in the same table directly, for non-unique filters.\n\nThis feature was moved to general availability in version 5.0.0 and was available via the `fieldReference` Preview feature from Prisma ORM versions 4.3.0 to 4.16.2.\n\nTo compare columns in the same table, use the `<model>.fields` property. In the following example, the query returns all records where the value in the `prisma.product.quantity` field is less than or equal to the value in the `prisma.product.warnQuantity` field.\n\n```\nprisma.product.findMany({  where: { quantity: { lte: prisma.product.fields.warnQuantity } },})\n```\n\ninfo\n\n`fields` is a special property of every model. It contains the list of fields for that model.\n\n### Considerations[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#considerations \"Direct link to Considerations\")\n\n#### Fields must be of the same type[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#fields-must-be-of-the-same-type \"Direct link to Fields must be of the same type\")\n\nYou can only make comparisons on fields of the same type. For example, the following causes an error:\n\n```\nawait prisma.order.findMany({  where: {    id: { equals: prisma.order.fields.due },    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    // Type error: id is a string, while amountDue is an integer  },})\n```\n\n#### Fields must be in the same model[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#fields-must-be-in-the-same-model \"Direct link to Fields must be in the same model\")\n\nYou can only make comparisons with the `fields` property on fields in the same model. The following example does not work:\n\n```\nawait prisma.order.findMany({  where: {    id: { equals: prisma.user.fields.name },    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    // Type error: name is a field on the User model, not Order  },})\n```\n\nHowever, you can compare fields in separate models with [standard queries](https://www.prisma.io/docs/orm/reference/prisma-client-reference#model-queries).\n\n#### In `groupBy` model queries, put your referenced fields in the `by` argument[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#in-groupby-model-queries-put-your-referenced-fields-in-the-by-argument \"Direct link to in-groupby-model-queries-put-your-referenced-fields-in-the-by-argument\")\n\nIf you use the [groupBy](https://www.prisma.io/docs/orm/reference/prisma-client-reference#groupby) model query with the `having` option, then you must put your referenced fields in the `by` argument.\n\nThe following example works:\n\n```\nprisma.user.groupBy({  by: ['id', 'name'],  having: { id: { equals: prisma.user.fields.name } },})\n```\n\nThe following example does not work, because `name` is not in the `by` argument:\n\n```\nprisma.user.groupBy({  by: ['id'],  having: { id: { equals: prisma.user.fields.name } },  // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  // name is not in the 'by' argument})\n```\n\n#### Search for fields in scalar lists[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#search-for-fields-in-scalar-lists \"Direct link to Search for fields in scalar lists\")\n\nIf your data source supports scalar lists (for example in PostgreSQL), then you can search for all records where a specific field is in a list of fields. To do so, reference the scalar list with the [`in`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#in) and [`notIn`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#notin) filters. For example:\n\n```\nawait prisma.user.findMany({  where: {    // find all users where 'name' is in a list of tags    name: { in: prisma.user.fields.tags },  },})\n```\n\n## Filter on non-unique fields with `UserWhereUniqueInput`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#filter-on-non-unique-fields-with-userwhereuniqueinput \"Direct link to filter-on-non-unique-fields-with-userwhereuniqueinput\")\n\nFrom version 5.0.0, the generated type `UserWhereUniqueInput` on [`where`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#where) exposes all fields on the model, not just unique fields. This was available under the [`extendedWhereUnique` Preview flag](https://www.prisma.io/docs/orm/reference/preview-features/client-preview-features#preview-features-promoted-to-general-availability) between versions 4.5.0 to 4.16.2\n\nYou must specify at least one unique field in your `where` statement [outside of boolean operators](https://www.prisma.io/docs/orm/reference/prisma-client-reference#boolean-operators-with-userwhereuniqueinput), and you can specify any number of additional unique and non-unique fields. You can use this to add filters to any operation that returns a single record. For example, you can use this feature for the following:\n\n*   [Optimistic concurrency control on updates](https://www.prisma.io/docs/orm/reference/prisma-client-reference#optimistic-concurrency-control-on-updates)\n*   [Permission checks](https://www.prisma.io/docs/orm/reference/prisma-client-reference#permission-checks)\n*   [Soft deletes](https://www.prisma.io/docs/orm/reference/prisma-client-reference#soft-deletes)\n\nFrom version 4.6.0, you can use this feature to filter on optional [one-to-one nested reads](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#nested-reads).\n\n### Optimistic concurrency control on updates[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#optimistic-concurrency-control-on-updates \"Direct link to Optimistic concurrency control on updates\")\n\nYou can filter on non-unique fields to perform [optimistic concurrency control](https://www.prisma.io/docs/orm/prisma-client/queries/transactions#optimistic-concurrency-control) on `update` operations.\n\nTo perform optimistic concurrency control, we recommend that you use a `version` field to check whether the data in a record or related record has changed while your code executes. Before version 4.5.0, you could not evaluate the `version` field in an `update` operation, because the field is non-unique. From version 4.5.0, you can evaluate the `version` field.\n\nIn the following example, `updateOne` and `updateTwo` first read the same record and then attempt to update it. The database only executes these updates if the value in `version` is the same as the value when it did the initial read. When the database executes the first of these updates (which might be `updateOne` or `updateTwo`, depending on timing), it increments the value in `version`. This means that the database does not execute the second update because the value in `version` has changed.\n\n```\nmodel User {  id      Int    @id @default(autoincrement())  email   String @unique  city    String  version Int}\n```\n\n```\nfunction updateOne() {  const user = await prisma.user.findUnique({ id: 1 })  await prisma.user.update({    where: { id: user.id, version: user.version },    data: { city: 'Berlin', version: { increment: 1 } },  })}function updateTwo() {  const user = await prisma.user.findUnique({ id: 1 })  await prisma.user.update({    where: { id: user.id, version: user.version },    data: { city: 'New York', version: { increment: 1 } },  })}function main() {  await Promise.allSettled([updateOne(), updateTwo()])}\n```\n\n### Permission checks[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#permission-checks \"Direct link to Permission checks\")\n\nYou can filter on non-unique fields to check permissions during an update.\n\nIn the following example, a user wants to update a post title. The `where` statement checks the value in `authorId` to confirm that the user is the author of the post. The application only updates the post title if the user is the post author.\n\n```\nawait prisma.post.update({  where: { id: 1, authorId: 1 },  data: { title: 'Updated post title' },})\n```\n\n### Soft deletes[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#soft-deletes \"Direct link to Soft deletes\")\n\nYou can filter on non-unique fields to handle soft deletes.\n\nIn the following example, we do not want to return a post if it is soft-deleted. The operation only returns the post if the value in `isDeleted` is `false`.\n\n```\nprisma.Post.findUnique({ where: { id: postId, isDeleted: false } })\n```\n\n### `UserWhereUniqueInput` considerations[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#userwhereuniqueinput-considerations \"Direct link to userwhereuniqueinput-considerations\")\n\n#### Boolean operators with `UserWhereUniqueInput`[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#boolean-operators-with-userwhereuniqueinput \"Direct link to boolean-operators-with-userwhereuniqueinput\")\n\nWith `UserWhereUniqueInput`, you must specify at least one unique field outside of the boolean operators `AND`, `OR`, `NOT`. You can still use these boolean operators in conjunction with any other unique fields or non-unique fields in your filter.\n\nIn the following example, we test `id`, a unique field, in conjunction with `email`. This is valid.\n\n```\nawait prisma.user.update({  where: { id: 1, OR: [{ email: \"bob@prisma.io\" }, { email: \"alice@prisma.io\" }] },        // ^^^ Valid: the expression specifies a unique field (`id`) outside of any boolean operators  data: { ... }})// SQL equivalent:// WHERE id = 1 AND (email = \"bob@prisma.io\" OR email = \"alice@prisma.io\")\n```\n\nThe following example is not valid, because there is no unique field outside of any boolean operators:\n\n```\nawait prisma.user.update({  where: { OR: [{ email: \"bob@prisma.io\" }, { email: \"alice@prisma.io\" }] },        // ^^^ Invalid: the expressions does not contain a unique field outside of boolean operators  data: { ... }})\n```\n\n#### One-to-one relations[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#one-to-one-relations \"Direct link to One-to-one relations\")\n\nFrom version 4.5.0, you can filter on non-unique fields in the following operations on [one-to-one relations](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/one-to-one-relations):\n\n*   Nested update\n*   Nested upsert\n*   Nested disconnect\n*   Nested delete\n\nPrisma Client automatically uses a unique filter to select the appropriate related record. As a result, you do not need to specify a unique filter in your `where` statement with a `WhereUniqueInput` [generated type](https://www.prisma.io/docs/orm/reference/prisma-client-reference#generated-types-for-where). Instead, the `where` statement has a `WhereInput` generated type. You can use this to filter without the restrictions of `WhereUniqueInput`.\n\n##### Nested update example[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#nested-update-example \"Direct link to Nested update example\")\n\n```\nawait prisma.user.update({  where: { id: 1, },  data: {    to_one: {      // Before Prisma version 4.5.0      update: { field: \"updated\" }      // From Prisma version 4.5.0, you can also do the following:      update: { where: { /*WhereInput*/ }, data: { field: \"updated\" } } }    }  }})\n```\n\n##### Nested upsert example[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#nested-upsert-example \"Direct link to Nested upsert example\")\n\n```\nawait prisma.user.update({  where: { id: 1, },  data: {    to_one: {      upsert: {        where: { /* WhereInput */ } // new argument from Prisma 4.5.0        create: { /* CreateInput */ },        update: { /* CreateInput */ },      }    }  }})\n```\n\n##### Nested disconnect example[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#nested-disconnect-example \"Direct link to Nested disconnect example\")\n\n```\nawait prisma.user.update({  where: { id: 1, },  data: {    to_one: {      // Before Prisma version 4.5.0      disconnect: true      // From Prisma version 4.5.0, you can also do the following:      disconnect: { /* WhereInput */ }    }  }})\n```\n\n##### Nested delete example[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#nested-delete-example \"Direct link to Nested delete example\")\n\n```\nawait prisma.user.update({  where: { id: 1, },  data: {    to_one: {      // Before Prisma version 4.5.0      delete: true      // From Prisma version 4.5.0, you can also do the following:      delete: { /* WhereInput */ }    }  }})\n```\n\n## `PrismaPromise` behavior[​](https://www.prisma.io/docs/orm/reference/prisma-client-reference#prismapromise-behavior \"Direct link to prismapromise-behavior\")\n\nAll Prisma Client queries return an instance of `PrismaPromise`. This is a [\"thenable\"](https://masteringjs.io/tutorials/fundamentals/thenable), meaning a `PrismaPromise` only executes when you call `await` or `.then()` or `.catch()`. This behavior is different from a regular JavaScript [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise), which starts executing immediately.\n\nFor example:\n\n```\nconst findPostOperation = prisma.post.findMany({}) // Query not yet executedfindPostOperation.then() // Prisma Client now executes the query// orawait findPostOperation // Prisma Client now executes the query\n```\n\nWhen using the [`$transaction` API](https://www.prisma.io/docs/orm/prisma-client/queries/transactions#the-transaction-api), this behavior makes it possible for Prisma Client to pass all the queries on to the query engine as a single transaction.",
    "title": "Prisma Client API | Prisma Documentation",
    "description": "API reference documentation for Prisma Client.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/more",
    "markdown": "# More | Prisma Documentation\n\n[\n\n## ORM releases and maturity levels\n\n](https://www.prisma.io/docs/orm/more/releases)",
    "title": "More | Prisma Documentation",
    "description": "Learn more about Prisma ORM.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/more/under-the-hood",
    "markdown": "# Under the hood | Prisma Documentation\n\nThis page gives an overview of the Prisma ORM internals and how it works \"under the hood\".\n\nNote that **this page does not contain any practical information that is relevant for _using_ Prisma ORM**. It rather aims at providing a _mental model_ for what the Prisma ORM toolkit _actually_ is and how the different tools that are available to developers are structured.\n\nIf you're new to using Prisma ORM, be sure to check out the [Quickstart](https://www.prisma.io/docs/getting-started/quickstart) and [Introduction](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma) pages first.\n\n## In this section[​](https://www.prisma.io/docs/orm/more/under-the-hood#in-this-section \"Direct link to In this section\")\n\n[\n\n## Engines\n\n](https://www.prisma.io/docs/orm/more/under-the-hood/engines)",
    "title": "Under the hood | Prisma Documentation",
    "description": "Learn about Prisma ORM internals and how it works \"under the hood\". Prisma ORM tools are based on an engine-layer which manages the communication with the database.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/more/upgrade-guides",
    "markdown": "# Upgrade guides | Prisma Documentation\n\n[\n\n## Upgrading to use Preview features\n\n](https://www.prisma.io/docs/orm/more/upgrade-guides/upgrading-to-use-preview-features)",
    "title": "Upgrade guides | Prisma Documentation",
    "description": "Learn how to upgrade Prisma ORM versions.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/more/help-and-troubleshooting",
    "markdown": "# Help & troubleshooting | Prisma Documentation\n\n## In this section[​](https://www.prisma.io/docs/orm/more/help-and-troubleshooting#in-this-section \"Direct link to In this section\")\n\n[\n\n## Creating bug reports\n\n](https://www.prisma.io/docs/orm/more/help-and-troubleshooting/creating-bug-reports)\n\n[\n\n## Help articles\n\n](https://www.prisma.io/docs/orm/more/help-and-troubleshooting/help-articles)",
    "title": "Help & troubleshooting | Prisma Documentation",
    "description": "Help & troubleshooting in Prisma ORM projects.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/more/development-environment",
    "markdown": "# Development environment | Prisma Documentation\n\nThis section describes using `env` variables, editors, and workspaces in your development environment.\n\n## In this section[​](https://www.prisma.io/docs/orm/more/development-environment#in-this-section \"Direct link to In this section\")\n\n[\n\n## Environment variables\n\n](https://www.prisma.io/docs/orm/more/development-environment/environment-variables)\n\n[\n\n## Editor setup\n\n](https://www.prisma.io/docs/orm/more/development-environment/editor-setup)",
    "title": "Development environment | Prisma Documentation",
    "description": "Using env vars, editors and workspaces in your development environment",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/more/comparisons",
    "markdown": "# Comparing Prisma ORM to other ORMs and ODMs.\n\nFind out how Prisma ORM compares to ORMs and ODMs in the Node.js and TypeScript ecosystem.\n\nFor a comprehensive overview of the most popular database libraries, read this article: [Top Node.js ORMs, Query Builders & Database Libraries in 2022](https://www.prisma.io/dataguide/database-tools/top-nodejs-orms-query-builders-and-database-libraries).\n\n## In this section[​](https://www.prisma.io/docs/orm/more/comparisons#in-this-section \"Direct link to In this section\")\n\n[\n\n## TypeORM\n\n](https://www.prisma.io/docs/orm/more/comparisons/prisma-and-typeorm)\n\n[\n\n## Sequelize\n\n](https://www.prisma.io/docs/orm/more/comparisons/prisma-and-sequelize)\n\n[\n\n## Mongoose\n\n](https://www.prisma.io/docs/orm/more/comparisons/prisma-and-mongoose)\n\n[\n\n## Drizzle\n\n](https://www.prisma.io/docs/orm/more/comparisons/prisma-and-drizzle)",
    "title": "Comparing Prisma ORM to other ORMs and ODMs. | Prisma Documentation",
    "description": "Learn how Prisma ORM compares to other ORMs, ODMs, and database libraries, like TypeORM, Sequelize and Mongoose.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/more/releases",
    "markdown": "# ORM releases and maturity levels\n\nThis page explains the release process of Prisma ORM, how it's versioned and how to deal with breaking changes that might happen throughout releases.\n\n## Releases[​](https://www.prisma.io/docs/orm/more/releases#releases \"Direct link to Releases\")\n\nPrisma ORM releases typically happen every three weeks. Note that this is _not_ a hard rule – releases might be postponed for internal reasons.\n\n[Check out all the releases notes in GitHub](https://github.com/prisma/prisma/releases).\n\n## Product maturity levels[​](https://www.prisma.io/docs/orm/more/releases#product-maturity-levels \"Direct link to Product maturity levels\")\n\nA release can include products or features at different maturity levels. Maturity level describes a product or feature's completeness and what users can expect in terms of breaking changes.\n\n> **Note**: As of version [2.13.0](https://github.com/prisma/prisma/releases/2.13.0), 'Experimental' is no longer part of the product maturity scale.\n\n### Early Access[​](https://www.prisma.io/docs/orm/more/releases#early-access \"Direct link to Early Access\")\n\nIf a feature or product is **Early Access**:\n\n*   We have validated a problem and are considering a solution to it but are not certain whether that solution is complete or a perfect fit.\n*   We want to gather more feedback and adjust the solution as necessary, knowing that users are prepared for significant breaking changes\n\nWe don't recommend using Early Access features or products in production.\n\n### Preview[​](https://www.prisma.io/docs/orm/more/releases#preview \"Direct link to Preview\")\n\nIf a feature or product is a **Preview**:\n\n*   We have validated the feature or product in terms of direction and surface.\n*   Users can count on the feature or product and associated API to be mostly stable unless stated otherwise in the release notes and documentation.\n*   There are no significant known issues, although minor bugs may exist.\n*   We welcome feedback on these to make the solution stable as quickly as possible.\n\nPreviews are typically available behind a feature flag or require some form of opt-in (for example, by providing a `--preview-feature` flag in the CLI or [adding them to a `previewFeatures` property in the `generator` block](https://www.prisma.io/docs/orm/reference/preview-features/cli-preview-features) for Prisma Client in your Prisma schema).\n\nWe don't recommend using Preview features or products in production.\n\nSee also: [All currently available Preview features](https://www.prisma.io/docs/orm/reference/preview-features).\n\n### Generally Available (GA)[​](https://www.prisma.io/docs/orm/more/releases#generally-available-ga \"Direct link to Generally Available (GA)\")\n\nIf a feature or product is **Generally Available**:\n\n*   The solution has been tested for some time and we received enough feedback to consider it stable and ready for production use.\n*   There should be no bugs in 99% of cases (completely bug-free software cannot be guaranteed)\n\n## Roadmap[​](https://www.prisma.io/docs/orm/more/releases#roadmap \"Direct link to Roadmap\")\n\nOur roadmap helps us share our current priorities: what we are currently working on and what we are planning to work on in the near term. This reflects our _current plans_ today, and the content is subject to change at any time. Actual results and plans may differ as a result of changing our product strategy or reacting to demands from our user base.\n\nYou can [check out the full roadmap here](https://pris.ly/roadmap).\n\n## Versioning[​](https://www.prisma.io/docs/orm/more/releases#versioning \"Direct link to Versioning\")\n\nPrisma ORM's release scheme adheres to Semantic Versioning ([SemVer](https://semver.org/)) starting with version `3.x.x`.\n\n### Prisma ORM and Semantic Versioning (SemVer)[​](https://www.prisma.io/docs/orm/more/releases#prisma-orm-and-semantic-versioning-semver \"Direct link to Prisma ORM and Semantic Versioning (SemVer)\")\n\n#### How does SemVer versioning work?[​](https://www.prisma.io/docs/orm/more/releases#how-does-semver-versioning-work \"Direct link to How does SemVer versioning work?\")\n\nSemantic Versioning (SemVer) uses the following rules for version upgrade (quoted from the [SemVer](https://semver.org/) spec):\n\n_Given a version number `MAJOR.MINOR.PATCH`, increment the:_\n\n1.  _`MAJOR` version when you make incompatible API changes,_\n2.  _`MINOR` version when you add functionality in a backward compatible manner, and_\n3.  _`PATCH` version when you make backward compatible bug fixes._\n\n#### How does Prisma ORM versioning follow SemVer?[​](https://www.prisma.io/docs/orm/more/releases#how-does-prisma-orm-versioning-follow-semver \"Direct link to How does Prisma ORM versioning follow SemVer?\")\n\nBeginning with version `3.x.x`, Prisma ORM adheres strictly to the [SemVer](https://semver.org/) versioning scheme.\n\nHere is a brief overview of how Prisma ORM's follows SemVer:\n\n*   Breaking changes in stable surface (i.e. [General Availability](https://www.prisma.io/docs/orm/more/releases#generally-available-ga)) will only be introduced in new `MAJOR` releases.\n*   Breaking changes can still be rolled out in `MINOR` but only for opt-in Preview and Early Access features that are not active by default (e.g. via a Preview feature flag or a specific opt-in option or new CLI command).\n*   Opt-in breaking changes, i.e. Preview and Early Access, released in `MINOR`, will only be promoted to General Availability (no requirement for opt-in) in new `MAJOR` releases.\n\nGiven a version number `MAJOR.MINOR.PATCH`, Prisma ORM's version number is incremented as follows:\n\n1.  `MAJOR` version is incremented when major product updates **with breaking changes** are released to General Availability.\n2.  `MINOR` version is incremented when product updates adding backward compatible new functionality are released. Features with breaking changes may only be introduced if they are **opt-in**, i.e. Early Access and Preview.\n3.  `PATCH` version is incremented when functionality bugs are fixed and are always **backward compatible**.\n\n> **Note:** Up until version `2.28.0`, Prisma ORM did not follow SemVer versioning strictly. This means that releases in the `2.MINOR.PATCH` range, `MINOR` versions may have included breaking changes. To learn more about Prisma ORM's adoption of SemVer, check out the [blog post](https://www.prisma.io/blog/prisma-adopts-semver-strictly).",
    "title": "ORM releases and maturity levels | Prisma Documentation",
    "description": "Learn about the release process, versioning, and maturity of Prisma ORM components and how to deal with breaking changes that might happen throughout releases.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-schema/data-model/relations",
    "markdown": "# Relations (Reference) | Prisma Documentation\n\nA relation is a _connection_ between two models in the Prisma schema. For example, there is a one-to-many relation between `User` and `Post` because one user can have many blog posts.\n\nThe following Prisma schema defines a one-to-many relation between the `User` and `Post` models. The fields involved in defining the relation are highlighted:\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id    Int    @id @default(autoincrement())  posts Post[]}model Post {  id       Int  @id @default(autoincrement())  author   User @relation(fields: [authorId], references: [id])  authorId Int // relation scalar field  (used in the `@relation` attribute above)}\n```\n\nAt a Prisma ORM level, the `User` / `Post` relation is made up of:\n\n*   Two [relation fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relation-fields): `author` and `posts`. Relation fields define connections between models at the Prisma ORM level and **do not exist in the database**. These fields are used to generate Prisma Client.\n*   The scalar `authorId` field, which is referenced by the `@relation` attribute. This field **does exist in the database** - it is the foreign key that connects `Post` and `User`.\n\nAt a Prisma ORM level, a connection between two models is **always** represented by a [relation field](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relation-fields) on **each side** of the relation.\n\n## Relations in the database[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relations-in-the-database \"Direct link to Relations in the database\")\n\n### Relational databases[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relational-databases \"Direct link to Relational databases\")\n\nThe following entity relationship diagram defines the same one-to-many relation between the `User` and `Post` tables in a **relational database**:\n\n![A one-to-many relationship between a user and posts table.](https://www.prisma.io/docs/assets/images/one-to-many-9fd7879c7dbeeb3a0409b55ba7f8ccd9.png)\n\nIn SQL, you use a _foreign key_ to create a relation between two tables. Foreign keys are stored on **one side** of the relation. Our example is made up of:\n\n*   A foreign key column in the `Post` table named `authorId`.\n*   A primary key column in the `User` table named `id`. The `authorId` column in the `Post` table references the `id` column in the `User` table.\n\nIn the Prisma schema, the foreign key / primary key relationship is represented by the `@relation` attribute on the `author` field:\n\n```\nauthor     User        @relation(fields: [authorId], references: [id])\n```\n\n> **Note**: Relations in the Prisma schema represent relationships that exist between tables in the database. If the relationship does not exist in the database, it does not exist in the Prisma schema.\n\n### MongoDB[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#mongodb \"Direct link to MongoDB\")\n\nFor MongoDB, Prisma ORM currently uses a [normalized data model design](https://docs.mongodb.com/manual/core/data-model-design/), which means that documents reference each other by ID in a similar way to relational databases.\n\nThe following document represents a `User` (in the `User` collection):\n\n```\n{ \"_id\": { \"$oid\": \"60d5922d00581b8f0062e3a8\" }, \"name\": \"Ella\" }\n```\n\nThe following list of `Post` documents (in the `Post` collection) each have a `authorId` field which reference the same user:\n\n```\n[  {    \"_id\": { \"$oid\": \"60d5922e00581b8f0062e3a9\" },    \"title\": \"How to make sushi\",    \"authorId\": { \"$oid\": \"60d5922d00581b8f0062e3a8\" }  },  {    \"_id\": { \"$oid\": \"60d5922e00581b8f0062e3aa\" },    \"title\": \"How to re-install Windows\",    \"authorId\": { \"$oid\": \"60d5922d00581b8f0062e3a8\" }  }]\n```\n\nThis data structure represents a one-to-many relation because multiple `Post` documents refer to the same `User` document.\n\n#### `@db.ObjectId` on IDs and relation scalar fields[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#dbobjectid-on-ids-and-relation-scalar-fields \"Direct link to dbobjectid-on-ids-and-relation-scalar-fields\")\n\nIf your model's ID is an `ObjectId` (represented by a `String` field), you must add `@db.ObjectId` to the model's ID _and_ the relation scalar field on the other side of the relation:\n\n```\nmodel User {  id    String @id @default(auto()) @map(\"_id\") @db.ObjectId  posts Post[]}model Post {  id       String @id @default(auto()) @map(\"_id\") @db.ObjectId  author   User   @relation(fields: [authorId], references: [id])  authorId String @db.ObjectId // relation scalar field  (used in the `@relation` attribute above)}\n```\n\n## Relations in Prisma Client[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relations-in-prisma-client \"Direct link to Relations in Prisma Client\")\n\nPrisma Client is generated from the Prisma schema. The following examples demonstrate how relations manifest when you use Prisma Client to get, create, and update records.\n\n### Create a record and nested records[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#create-a-record-and-nested-records \"Direct link to Create a record and nested records\")\n\nThe following query creates a `User` record and two connected `Post` records:\n\n```\nconst userAndPosts = await prisma.user.create({  data: {    posts: {      create: [        { title: 'Prisma Day 2020' }, // Populates authorId with user's id        { title: 'How to write a Prisma schema' }, // Populates authorId with user's id      ],    },  },})\n```\n\nIn the underlying database, this query:\n\n1.  Creates a `User` with an auto-generated `id` (for example, `20`)\n2.  Creates two new `Post` records and sets the `authorId` of both records to `20`\n\n### Retrieve a record and include related records[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#retrieve-a-record-and-include-related-records \"Direct link to Retrieve a record and include related records\")\n\nThe following query retrieves a `User` by `id` and includes any related `Post` records:\n\n```\nconst getAuthor = await prisma.user.findUnique({  where: {    id: \"20\",  },  include: {    posts: true, // All posts where authorId == 20  },});\n```\n\nIn the underlying database, this query:\n\n1.  Retrieves the `User` record with an `id` of `20`\n2.  Retrieves all `Post` records with an `authorId` of `20`\n\n### Associate an existing record to another existing record[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#associate-an-existing-record-to-another-existing-record \"Direct link to Associate an existing record to another existing record\")\n\nThe following query associates an existing `Post` record with an existing `User` record:\n\n```\nconst updateAuthor = await prisma.user.update({  where: {    id: 20,  },  data: {    posts: {      connect: {        id: 4,      },    },  },})\n```\n\nIn the underlying database, this query uses a [nested `connect` query](https://www.prisma.io/docs/orm/reference/prisma-client-reference#connect) to link the post with an `id` of 4 to the user with an `id` of 20. The query does this with the following steps:\n\n*   The query first looks for the user with an `id` of `20`.\n*   The query then sets the `authorID` foreign key to `20`. This links the post with an `id` of `4` to the user with an `id` of `20`.\n\nIn this query, the current value of `authorID` does not matter. The query changes `authorID` to `20`, no matter its current value.\n\n## Types of relations[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#types-of-relations \"Direct link to Types of relations\")\n\nThere are three different types (or [cardinalities](https://en.wikipedia.org/wiki/Cardinality_(data_modeling))) of relations in Prisma ORM:\n\n*   [One-to-one](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/one-to-one-relations) (also called 1-1 relations)\n*   [One-to-many](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/one-to-many-relations) (also called 1-n relations)\n*   [Many-to-many](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations) (also called m-n relations)\n\nThe following Prisma schema includes every type of relation:\n\n*   one-to-one: `User` ↔ `Profile`\n*   one-to-many: `User` ↔ `Post`\n*   many-to-many: `Post` ↔ `Category`\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id      Int      @id @default(autoincrement())  posts   Post[]  profile Profile?}model Profile {  id     Int  @id @default(autoincrement())  user   User @relation(fields: [userId], references: [id])  userId Int  @unique // relation scalar field (used in the `@relation` attribute above)}model Post {  id         Int        @id @default(autoincrement())  author     User       @relation(fields: [authorId], references: [id])  authorId   Int // relation scalar field  (used in the `@relation` attribute above)  categories Category[]}model Category {  id    Int    @id @default(autoincrement())  posts Post[]}\n```\n\nNotice that the syntax is slightly different between relational databases and MongoDB - particularly for [many-to-many relations](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations).\n\nFor relational databases, the following entity relationship diagram represents the database that corresponds to the sample Prisma schema:\n\n![The sample schema as an entity relationship diagram](https://www.prisma.io/docs/assets/images/sample-schema-bb495abfe60492352874c8d62ceb36bc.png)\n\nFor MongoDB, Prisma ORM uses a [normalized data model design](https://docs.mongodb.com/manual/core/data-model-design/), which means that documents reference each other by ID in a similar way to relational databases. See [the MongoDB section](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#mongodb) for more details.\n\n### Implicit and explicit many-to-many relations[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#implicit-and-explicit-many-to-many-relations \"Direct link to Implicit and explicit many-to-many relations\")\n\nMany-to-many relations in relational databases can be modelled in two ways:\n\n*   [explicit many-to-many relations](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations#explicit-many-to-many-relations), where the relation table is represented as an explicit model in your Prisma schema\n*   [implicit many-to-many relations](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations#implicit-many-to-many-relations), where Prisma ORM manages the relation table and it does not appear in the Prisma schema.\n\nImplicit many-to-many relations require both models to have a single `@id`. Be aware of the following:\n\n*   You cannot use a [multi-field ID](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#id-1)\n*   You cannot use a `@unique` in place of an `@id`\n\nTo use either of these features, you must set up an explicit many-to-many instead.\n\nThe implicit many-to-many relation still manifests in a relation table in the underlying database. However, Prisma ORM manages this relation table.\n\nIf you use an implicit many-to-many relation instead of an explicit one, it makes the [Prisma Client API](https://www.prisma.io/docs/orm/prisma-client) simpler (because, for example, you have one fewer level of nesting inside of [nested writes](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries#nested-writes)).\n\nIf you're not using Prisma Migrate but obtain your data model from [introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection), you can still make use of implicit many-to-many relations by following Prisma ORM's [conventions for relation tables](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations#conventions-for-relation-tables-in-implicit-m-n-relations).\n\n## Relation fields[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relation-fields \"Direct link to Relation fields\")\n\nRelation [fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-fields) are fields on a Prisma [model](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-models) that do _not_ have a [scalar type](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#scalar-fields). Instead, their type is another model.\n\nEvery relation must have exactly two relation fields, one on each model. In the case of one-to-one and one-to-many relations, an additional _relation scalar field_ is required which gets linked by one of the two relation fields in the `@relation` attribute. This relation scalar field is the direct representation of the _foreign key_ in the underlying database.\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id    Int    @id @default(autoincrement())  email String @unique  role  Role   @default(USER)  posts Post[] // relation field (defined only at the Prisma ORM level)}model Post {  id       Int    @id @default(autoincrement())  title    String  author   User   @relation(fields: [authorId], references: [id]) // relation field (uses the relation scalar field `authorId` below)  authorId Int // relation scalar field (used in the `@relation` attribute above)}\n```\n\nBoth `posts` and `author` are relation fields because their types are not scalar types but other models.\n\nAlso note that the [annotated relation field](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#annotated-relation-fields) `author` needs to link the relation scalar field `authorId` on the `Post` model inside the `@relation` attribute. The relation scalar field represents the foreign key in the underlying database.\n\nThe other relation field called `posts` is defined purely on a Prisma ORM-level, it doesn't manifest in the database.\n\n### Annotated relation fields[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#annotated-relation-fields \"Direct link to Annotated relation fields\")\n\nRelations that require one side of the relation to be _annotated_ with the `@relation` attribute are referred to as _annotated relation fields_. This includes:\n\n*   one-to-one relations\n*   one-to-many relations\n*   many-to-many relations for MongoDB only\n\nThe side of the relation which is annotated with the `@relation` attribute represents the side that **stores the foreign key in the underlying database**. The \"actual\" field that represents the foreign key is required on that side of the relation as well, it's called _relation scalar field_, and is referenced inside `@relation` attribute:\n\n*   Relational databases\n*   MongoDB\n\n```\nauthor     User    @relation(fields: [authorId], references: [id])authorId   Int\n```\n\nA scalar field _becomes_ a relation scalar field when it's used in the `fields` of a `@relation` attribute.\n\n### Relation scalar fields[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relation-scalar-fields \"Direct link to Relation scalar fields\")\n\n#### Relation scalar field naming conventions[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relation-scalar-field-naming-conventions \"Direct link to Relation scalar field naming conventions\")\n\nBecause a relation scalar field always _belongs_ to a relation field, the following naming convention is common:\n\n*   Relation field: `author`\n*   Relation scalar field: `authorId` (relation field name + `Id`)\n\n## The `@relation` attribute[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#the-relation-attribute \"Direct link to the-relation-attribute\")\n\nThe [`@relation`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#relation) attribute can only be applied to the [relation fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relation-fields), not to [scalar fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#scalar-fields).\n\nThe `@relation` attribute is required when:\n\n*   you define a one-to-one or one-to-many relation, it is required on _one side_ of the relation (with the corresponding relation scalar field)\n*   you need to disambiguate a relation (that's e.g. the case when you have two relations between the same models)\n*   you define a [self-relation](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/self-relations)\n*   you define [a many-to-many relation for MongoDB](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations#mongodb)\n*   you need to control how the relation table is represented in the underlying database (e.g. use a specific name for a relation table)\n\n> **Note**: [Implicit many-to-many relations](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations#implicit-many-to-many-relations) in relational databases do not require the `@relation` attribute.\n\n## Disambiguating relations[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#disambiguating-relations \"Direct link to Disambiguating relations\")\n\nWhen you define two relations between the same two models, you need to add the `name` argument in the `@relation` attribute to disambiguate them. As an example for why that's needed, consider the following models:\n\n*   Relational databases\n*   MongoDB\n\n```\n// NOTE: This schema is intentionally incorrect. See below for a working solution.model User {  id           Int     @id @default(autoincrement())  name         String?  writtenPosts Post[]  pinnedPost   Post?}model Post {  id         Int     @id @default(autoincrement())  title      String?  author     User    @relation(fields: [authorId], references: [id])  authorId   Int  pinnedBy   User?   @relation(fields: [pinnedById], references: [id])  pinnedById Int?}\n```\n\nIn that case, the relations are ambiguous, there are four different ways to interpret them:\n\n*   `User.writtenPosts` ↔ `Post.author` + `Post.authorId`\n*   `User.writtenPosts` ↔ `Post.pinnedBy` + `Post.pinnedById`\n*   `User.pinnedPost` ↔ `Post.author` + `Post.authorId`\n*   `User.pinnedPost` ↔ `Post.pinnedBy` + `Post.pinnedById`\n\nTo disambiguate these relations, you need to annotate the relation fields with the `@relation` attribute and provide the `name` argument. You can set any `name` (except for the empty string `\"\"`), but it must be the same on both sides of the relation:\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id           Int     @id @default(autoincrement())  name         String?  writtenPosts Post[]  @relation(\"WrittenPosts\")  pinnedPost   Post?   @relation(\"PinnedPost\")}model Post {  id         Int     @id @default(autoincrement())  title      String?  author     User    @relation(\"WrittenPosts\", fields: [authorId], references: [id])  authorId   Int  pinnedBy   User?   @relation(\"PinnedPost\", fields: [pinnedById], references: [id])  pinnedById Int?    @unique}\n```",
    "title": "Relations (Reference) | Prisma Documentation",
    "description": "A relation is a connection between two models in the Prisma schema. This page explains how you can define one-to-one, one-to-many and many-to-many relations in Prisma.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-schema/data-model/models",
    "markdown": "# Models | Prisma Documentation\n\nThe data model definition part of the [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema) defines your application models (also called **Prisma models**). Models:\n\n*   Represent the **entities** of your application domain\n*   Map to the **tables** (relational databases like PostgreSQL) or **collections** (MongoDB) in your database\n*   Form the foundation of the **queries** available in the generated [Prisma Client API](https://www.prisma.io/docs/orm/prisma-client)\n*   When used with TypeScript, Prisma Client provides generated **type definitions** for your models and any [variations](https://www.prisma.io/docs/orm/prisma-client/type-safety/operating-against-partial-structures-of-model-types) of them to make database access entirely type safe.\n\nThe following schema describes a blogging platform - the data model definition is highlighted:\n\n*   Relational databases\n*   MongoDB\n\n```\ndatasource db {  provider = \"postgresql\"  url      = env(\"DATABASE_URL\")}generator client {  provider = \"prisma-client-js\"}model User {  id      Int      @id @default(autoincrement())  email   String   @unique  name    String?  role    Role     @default(USER)  posts   Post[]  profile Profile?}model Profile {  id     Int    @id @default(autoincrement())  bio    String  user   User   @relation(fields: [userId], references: [id])  userId Int    @unique}model Post {  id         Int        @id @default(autoincrement())  createdAt  DateTime   @default(now())  updatedAt  DateTime   @updatedAt  title      String  published  Boolean    @default(false)  author     User       @relation(fields: [authorId], references: [id])  authorId   Int  categories Category[]}model Category {  id    Int    @id @default(autoincrement())  name  String  posts Post[]}enum Role {  USER  ADMIN}\n```\n\nThe data model definition is made up of:\n\n*   [Models](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-models) ([`model`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model) primitives) that define a number of fields, including [relations between models](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#relation-fields)\n*   [Enums](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-enums) ([`enum`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#enum) primitives) (if your connector supports Enums)\n*   [Attributes](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-attributes) and [functions](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#using-functions) that change the behavior of fields and models\n\nThe corresponding database looks like this:\n\n![](https://www.prisma.io/docs/assets/images/sample-database-413397970cd797641de019f57d6abd06.png)\n\nA model maps to the underlying structures of the data source.\n\n*   In relational databases like PostgreSQL and MySQL, a `model` maps to a **table**\n*   In MongoDB, a `model` maps to a **collection**\n\n> **Note**: In the future there might be connectors for non-relational databases and other data sources. For example, for a REST API it would map to a _resource_.\n\nThe following query uses Prisma Client that's generated from this data model to create:\n\n*   A `User` record\n*   Two nested `Post` records\n*   Three nested `Category` records\n\n*   Query Example\n*   Copy-Paste Example\n\n```\nconst user = await prisma.user.create({  data: {    email: 'ariadne@prisma.io',    name: 'Ariadne',    posts: {      create: [        {          title: 'My first day at Prisma',          categories: {            create: {              name: 'Office',            },          },        },        {          title: 'How to connect to a SQLite database',          categories: {            create: [{ name: 'Databases' }, { name: 'Tutorials' }],          },        },      ],    },  },})\n```\n\nYour data model reflects _your_ application domain. For example:\n\n*   In an **ecommerce** application you probably have models like `Customer`, `Order`, `Item` and `Invoice`.\n*   In a **social media** application you probably have models like `User`, `Post`, `Photo` and `Message`.\n\n## Introspection and migration[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#introspection-and-migration \"Direct link to Introspection and migration\")\n\nThere are two ways to define a data model:\n\n*   **Write the data model manually and use Prisma Migrate**: You can write your data model manually and map it to your database using [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate). In this case, the data model is the single source of truth for the models of your application.\n*   **Generate the data model via introspection**: When you have an existing database or prefer migrating your database schema with SQL, you generate the data model by [introspecting](https://www.prisma.io/docs/orm/prisma-schema/introspection) your database. In this case, the database schema is the single source of truth for the models of your application.\n\n## Defining models[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-models \"Direct link to Defining models\")\n\nModels represent the entities of your application domain. Models are represented by [`model`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model) blocks and define a number of [fields](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-fields). In the example data model above, `User`, `Profile`, `Post` and `Category` are models.\n\nA blogging platform can be extended with the following models:\n\n```\nmodel Comment {  // Fields}model Tag {  // Fields}\n```\n\n### Mapping model names to tables or collections[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#mapping-model-names-to-tables-or-collections \"Direct link to Mapping model names to tables or collections\")\n\nPrisma model [naming conventions (singular form, PascalCase)](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#naming-conventions) do not always match table names in the database. A common approach for naming tables/collections in databases is to use plural form and [snake\\_case](https://en.wikipedia.org/wiki/Snake_case) notation - for example: `comments`. When you introspect a database with a table named `comments`, the result Prisma model will look like this:\n\n```\nmodel comments {  // Fields}\n```\n\nHowever, you can still adhere to the naming convention without renaming the underlying `comments` table in the database by using the [`@@map`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map-1) attribute:\n\n```\nmodel Comment {  // Fields  @@map(\"comments\")}\n```\n\nWith this model definition, Prisma ORM automatically maps the `Comment` model to the `comments` table in the underlying database.\n\n> **Note**: You can also [`@map`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#map) a column name or enum value, and `@@map` an enum name.\n\n`@map` and `@@map` allow you to [tune the shape of your Prisma Client API](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/custom-model-and-field-names#using-map-and-map-to-rename-fields-and-models-in-the-prisma-client-api) by decoupling model and field names from table and column names in the underlying database.\n\n## Defining fields[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-fields \"Direct link to Defining fields\")\n\nThe properties of a model are called _fields_, which consist of:\n\n*   A **[field name](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-fields)**\n*   A **[field type](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-fields)**\n*   Optional **[type modifiers](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#type-modifiers)**\n*   Optional **[attributes](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-attributes)**, including [native database type attributes](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#native-types-mapping)\n\nA field's type determines its _structure_, and fits into one of two categories:\n\n*   [Scalar types](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#scalar-fields) (includes [enums](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-enums)) that map to columns (relational databases) or document fields (MongoDB) in the database - for example, [`String`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string) or [`Int`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#int)\n*   Model types (the field is then called [relation field](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relation-fields)) - for example `Post` or `Comment[]`.\n\nThe following table describes `User` model's fields from the sample schema:\n\nExpand to see table\n\n| Name | Type | Scalar vs Relation | Type modifier | Attributes |\n| --- | --- | --- | --- | --- |\n| `id` | `Int` | Scalar | \\-  | `@id` and `@default(autoincrement())` |\n| `email` | `String` | Scalar | \\-  | `@unique` |\n| `name` | `String` | Scalar | `?` | \\-  |\n| `role` | `Role` | Scalar (`enum`) | \\-  | `@default(USER)` |\n| `posts` | `Post` | Relation (Prisma-level field) | `[]` | \\-  |\n| `profile` | `Profile` | Relation (Prisma-level field) | `?` | \\-  |\n\n### Scalar fields[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#scalar-fields \"Direct link to Scalar fields\")\n\nThe following example extends the `Comment` and `Tag` models with several scalar types. Some fields include [attributes](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-attributes):\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel Comment {  id      Int    @id @default(autoincrement())  title   String  content String}model Tag {  name String @id}\n```\n\nSee [complete list of scalar field types](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-scalar-types) .\n\n### Relation fields[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#relation-fields \"Direct link to Relation fields\")\n\nA relation field's type is another model - for example, a post (`Post`) can have multiple comments (`Comment[]`):\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel Post {  id       Int       @id @default(autoincrement())  // Other fields  comments Comment[] // A post can have many comments}model Comment {  id     Int  // Other fields  post   Post? @relation(fields: [postId], references: [id]) // A comment can have one post  postId Int?}\n```\n\nRefer to the [relations documentation](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations) for more examples and information about relationships between models.\n\n### Native types mapping[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#native-types-mapping \"Direct link to Native types mapping\")\n\nVersion [2.17.0](https://github.com/prisma/prisma/releases/tag/2.17.0) and later support **native database type attributes** (type attributes) that describe the underlying database type:\n\n```\nmodel Post {  id      Int    @id  title   String @db.VarChar(200)  content String}\n```\n\nType attributes are:\n\n*   Specific to the underlying provider - for example, PostgreSQL uses `@db.Boolean` for `Boolean` whereas MySQL uses `@db.TinyInt(1)`\n*   Written in PascalCase (for example, `VarChar` or `Text`)\n*   Prefixed by `@db`, where `db` is the name of the `datasource` block in your schema\n\nFurthermore, during [Introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection) type attributes are _only_ added to the schema if the underlying native type is **not the default type**. For example, if you are using the PostgreSQL provider, `String` fields where the underlying native type is `text` will not have a type attribute.\n\nSee [complete list of native database type attributes per scalar type and provider](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-scalar-types) .\n\n#### Benefits and workflows[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#benefits-and-workflows \"Direct link to Benefits and workflows\")\n\n*   Control **the exact native type** that [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate) creates in the database - for example, a `String` can be `@db.VarChar(200)` or `@db.Char(50)`\n*   See an **enriched schema** when you introspect\n\n### Type modifiers[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#type-modifiers \"Direct link to Type modifiers\")\n\nThe type of a field can be modified by appending either of two modifiers:\n\n*   [`[]`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#-modifier) Make a field a list\n*   [`?`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#-modifier-1) Make a field optional\n\n> **Note**: You **cannot** combine type modifiers - optional lists are not supported.\n\n#### Lists[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#lists \"Direct link to Lists\")\n\nThe following example includes a scalar list and a list of related models:\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel Post {  id       Int       @id @default(autoincrement())  // Other fields  comments Comment[] // A list of comments  keywords String[] // A scalar list}\n```\n\n> **Note**: Scalar lists are **only** supported if the database connector supports scalar lists, either natively or at a Prisma ORM level.\n\n#### Optional and mandatory fields[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#optional-and-mandatory-fields \"Direct link to Optional and mandatory fields\")\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel Comment {  id      Int     @id @default(autoincrement())  title   String  content String?}model Tag {  name String @id}\n```\n\nWhen **not** annotating a field with the `?` type modifier, the field will be _required_ on every record of the model. This has effects on two levels:\n\n*   **Databases**\n    *   **Relational databases**: Required fields are represented via `NOT NULL` constraints in the underlying database.\n    *   **MongoDB**: Required fields are not a concept on a MongoDB database level.\n*   **Prisma Client**: Prisma Client's generated [TypeScript types](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#type-definitions) that represent the models in your application code will also define these fields as required to ensure they always carry values at runtime.\n\n> **Note**: The default value of an optional field is `null`.\n\n### Unsupported types[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#unsupported-types \"Direct link to Unsupported types\")\n\nWhen you introspect a relational database, unsupported data types are added as [`Unsupported`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unsupported) :\n\n```\nlocation    Unsupported(\"POLYGON\")?\n```\n\nThe `Unsupported` type allows you to define fields in the Prisma schema for database types that are not yet supported by Prisma ORM. For example, MySQL's `POLYGON` type is not currently supported by Prisma ORM, but can now be added to the Prisma schema using the `Unsupported(\"POLYGON\")` type.\n\nFields of type `Unsupported` are not available in the generated Prisma Client API, but you can still use Prisma ORM's [raw database access](https://www.prisma.io/docs/orm/prisma-client/queries/raw-database-access/raw-queries) feature to query these fields.\n\n> **Note**: If a model has **mandatory `Unsupported` fields**, the generated client will not include `create` or `update` methods for that model.\n\n> **Note**: The MongoDB connector does not support nor require the `Unsupported` type because it supports all scalar types.\n\n## Defining attributes[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-attributes \"Direct link to Defining attributes\")\n\nAttributes modify the behavior of fields or model blocks. The following example includes three field attributes ([`@id`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#id) , [`@default`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default) , and [`@unique`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unique) ) and one block attribute ([`@@unique`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unique-1)):\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id        Int     @id @default(autoincrement())  firstName String  lastName  String  email     String  @unique  isAdmin   Boolean @default(false)  @@unique([firstName, lastName])}\n```\n\nSome attributes accept [arguments](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attribute-argument-types) - for example, `@default` accepts `true` or `false`:\n\n```\nisAdmin   Boolean @default(false) // short form of @default(value: false)\n```\n\nSee [complete list of field and block attributes](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attributes)\n\n### Defining an ID field[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-an-id-field \"Direct link to Defining an ID field\")\n\nAn ID uniquely identifies individual records of a model. A model can only have _one_ ID:\n\n*   In **relational databases**, the ID can be a single field or based on multiple fields. If a model does not have an `@id` or an `@@id`, you must define a mandatory `@unique` field or `@@unique` block instead.\n*   In **MongoDB**, an ID must be a single field that defines an `@id` attribute and a `@map(\"_id\")` attribute.\n\n#### Defining IDs in relational databases[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-ids-in-relational-databases \"Direct link to Defining IDs in relational databases\")\n\nIn relational databases, an ID can be defined by a single field using the [`@id`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#id) attribute, or multiple fields using the [`@@id`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#id-1) attribute.\n\n##### Single field IDs[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#single-field-ids \"Direct link to Single field IDs\")\n\nIn the following example, the `User` ID is represented by the `id` integer field:\n\n```\nmodel User {  id      Int      @id @default(autoincrement())  email   String   @unique  name    String?  role    Role     @default(USER)  posts   Post[]  profile Profile?}\n```\n\n##### Composite IDs[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#composite-ids \"Direct link to Composite IDs\")\n\nIn the following example, the `User` ID is represented by a combination of the `firstName` and `lastName` fields:\n\n```\nmodel User {  firstName String  lastName  String  email     String  @unique  isAdmin   Boolean @default(false)  @@id([firstName, lastName])}\n```\n\nBy default, the name of this field in Prisma Client queries will be `firstName_lastName`.\n\nYou can also provide your own name for the composite ID using the [`@@id`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#id-1) attribute's `name` field:\n\n```\nmodel User {  firstName String  lastName  String  email     String  @unique  isAdmin   Boolean @default(false)  @@id(name: \"fullName\", fields: [firstName, lastName])}\n```\n\nThe `firstName_lastName` field will now be named `fullName` instead.\n\n##### `@unique` fields as unique identifiers[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#unique-fields-as-unique-identifiers \"Direct link to unique-fields-as-unique-identifiers\")\n\nIn the following example, users are uniquely identified by a `@unique` field. Because the `email` field functions as a unique identifier for the model (which is required), it must be mandatory:\n\n```\nmodel User {  email   String   @unique  name    String?  role    Role     @default(USER)  posts   Post[]  profile Profile?}\n```\n\n#### Defining IDs in MongoDB[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-ids-in-mongodb \"Direct link to Defining IDs in MongoDB\")\n\nThe MongoDB connector has [specific rules for defining an ID field](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#mongodb) that differs from relational databases. An ID must be defined by a single field using the [`@id`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#id) attribute and must include `@map(\"_id\")`.\n\nIn the following example, the `User` ID is represented by the `id` string field that accepts an auto-generated `ObjectId`:\n\n```\nmodel User {  id      String   @id @default(auto()) @map(\"_id\") @db.ObjectId  email   String   @unique  name    String?  role    Role     @default(USER)  posts   Post[]  profile Profile?}\n```\n\nIn the following example, the `User` ID is represented by the `id` string field that accepts something other than an `ObjectId` - for example, a unique username:\n\n```\nmodel User {  id      String   @id @map(\"_id\")  email   String   @unique  name    String?  role    Role     @default(USER)  posts   Post[]  profile Profile?}\n```\n\nwarning\n\n**MongoDB does not support `@@id`**  \nMongoDB does not support composite IDs, which means you cannot identify a model with a `@@id` block.\n\n### Defining a default value[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-a-default-value \"Direct link to Defining a default value\")\n\nYou can define default values for scalar fields of your models using the [`@default`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default) attribute:\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel Post {  id         Int        @id @default(autoincrement())  createdAt  DateTime   @default(now())  title      String  published  Boolean    @default(false)  data       Json       @default(\"{ \\\"hello\\\": \\\"world\\\" }\")  author     User       @relation(fields: [authorId], references: [id])  authorId   Int  categories Category[] @relation(references: [id])}\n```\n\n`@default` attributes either:\n\n*   Represent `DEFAULT` values in the underlying database (relational databases only) _or_\n*   Use a Prisma ORM-level function. For example, `cuid()` and `uuid()` are provided by Prisma Client's [query engine](https://www.prisma.io/docs/orm/more/under-the-hood/engines) for all connectors.\n\nDefault values can be:\n\n*   Static values that correspond to the field type, such as `5` (`Int`), `Hello` (`String`), or `false` (`Boolean`)\n*   [Lists](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#-modifier) of static values, such as `[5, 6, 8]` (`Int[]`) or `[\"Hello\", \"Goodbye\"]` (`String`\\[\\]). These are available in Prisma ORM versions `4.0.0` and later, when using supported databases (PostgreSQL, CockroachDB and MongoDB)\n*   [Functions](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#using-functions), such as [`now()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#now) or [`uuid()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#uuid)\n*   JSON data. Note that JSON needs to be enclosed with double-quotes inside the `@default` attribute, e.g.: `@default(\"[]\")`. If you want to provide a JSON object, you need to enclose it with double-quotes and then escape any internal double quotes using a backslash, e.g.: `@default(\"{ \\\"hello\\\": \\\"world\\\" }\")`.\n\n### Defining a unique field[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-a-unique-field \"Direct link to Defining a unique field\")\n\nYou can add unique attributes to your models to be able to uniquely identify individual records of that model. Unique attributes can be defined on a single field using [`@unique`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unique) attribute, or on multiple fields (also called composite or compound unique constraints) using the [`@@unique`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#unique-1) attribute.\n\nIn the following example, the value of the `email` field must be unique:\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id    Int     @id @default(autoincrement())  email String  @unique  name  String?}\n```\n\nIn the following example, a combination of `authorId` and `title` must be unique:\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel Post {  id         Int        @id @default(autoincrement())  createdAt  DateTime   @default(now())  title      String  published  Boolean    @default(false)  author     User       @relation(fields: [authorId], references: [id])  authorId   Int  categories Category[] @relation(references: [id])  @@unique([authorId, title])}\n```\n\nBy default, the name of this field in Prisma Client queries will be `authorId_title`.\n\nYou can also provide your own name for the composite unique constraint using the [`@@unique`](https://www.prisma.io/docs/orm/prisma-schema/data-model/database-mapping#constraint-and-index-names) attribute's `name` field:\n\n```\nmodel Post {  id         String     @id @default(auto()) @map(\"_id\") @db.ObjectId  createdAt  DateTime   @default(now())  title      String  published  Boolean    @default(false)  author     User       @relation(fields: [authorId], references: [id])  authorId   String     @db.ObjectId  categories Category[] @relation(references: [id])  @@unique(name: \"authorTitle\", [authorId, title])}\n```\n\nThe `authorId_title` field will now be named `authorTitle` instead.\n\n#### Composite type unique constraints[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#composite-type-unique-constraints \"Direct link to Composite type unique constraints\")\n\nWhen using the MongoDB provider in version `3.12.0` and later, you can define a unique constraint on a field of a [composite type](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-composite-types) using the syntax `@@unique([compositeType.field])`. As with other fields, composite type fields can be used as part of a multi-column unique constraint.\n\nThe following example defines a multi-column unique constraint based on the `email` field of the `User` model and the `number` field of the `Address` composite type which is used in `User.address`:\n\nschema.prisma\n\n```\ntype Address {  street String  number Int}model User {  id      Int     @id  email   String  address Address  @@unique([email, address.number])}\n```\n\nThis notation can be chained if there is more than one nested composite type:\n\nschema.prisma\n\n```\ntype City {  name String}type Address {  number Int  city   City}model User {  id      Int       @id  address Address[]  @@unique([address.city.name])}\n```\n\n### Defining an index[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-an-index \"Direct link to Defining an index\")\n\nYou can define indexes on one or multiple fields of your models via the [`@@index`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#index) on a model. The following example defines a multi-column index based on the `title` and `content` field:\n\n```\nmodel Post {  id      Int     @id @default(autoincrement())  title   String  content String?  @@index([title, content])}\n```\n\ninfo\n\n**Index names in relational databases**  \nYou can optionally define a [custom index name](https://www.prisma.io/docs/orm/prisma-schema/data-model/database-mapping#constraint-and-index-names) in the underlying database.\n\n#### Defining composite type indexes[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-composite-type-indexes \"Direct link to Defining composite type indexes\")\n\nWhen using the MongoDB provider in version `3.12.0` and later, you can define an index on a field of a [composite type](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-composite-types) using the syntax `@@index([compositeType.field])`. As with other fields, composite type fields can be used as part of a multi-column index.\n\nThe following example defines a multi-column index based on the `email` field of the `User` model and the `number` field of the `Address` composite type:\n\nschema.prisma\n\n```\ntype Address {  street String  number Int}model User {  id      Int     @id  email   String  address Address  @@index([email, address.number])}\n```\n\nThis notation can be chained if there is more than one nested composite type:\n\nschema.prisma\n\n```\ntype City {  name String}type Address {  number Int  city   City}model User {  id      Int       @id  address Address[]  @@index([address.city.name])}\n```\n\n## Defining enums[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-enums \"Direct link to Defining enums\")\n\nYou can define enums in your data model [if enums are supported for your database connector](https://www.prisma.io/docs/orm/reference/database-features#misc), either natively or at Prisma ORM level.\n\nEnums are considered [scalar](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#scalar-fields) types in the Prisma schema data model. They're therefore [by default](https://www.prisma.io/docs/orm/prisma-client/queries/select-fields#return-the-default-selection-set) included as return values in [Prisma Client queries](https://www.prisma.io/docs/orm/prisma-client/queries/crud).\n\nEnums are defined via the [`enum`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#enum) block. For example, a `User` has a `Role`:\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel User {  id    Int     @id @default(autoincrement())  email String  @unique  name  String?  role  Role    @default(USER)}enum Role {  USER  ADMIN}\n```\n\n## Defining composite types[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-composite-types \"Direct link to Defining composite types\")\n\ninfo\n\nComposite types were added in version `3.10.0` under the `mongodb` Preview feature flag and are in General Availability since version `3.12.0`.\n\nwarning\n\nComposite types are currently only available on MongoDB.\n\nComposite types (known as [embedded documents](https://docs.mongodb.com/manual/core/data-model-design/#std-label-data-modeling-embedding) in MongoDB) provide support for embedding records inside other records, by allowing you to define new object types. Composite types are structured and typed in a similar way to [models](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-models).\n\nTo define a composite type, use the `type` block. As an example, take the following schema:\n\nschema.prisma\n\n```\nmodel Product {  id     String  @id @default(auto()) @map(\"_id\") @db.ObjectId  name   String  photos Photo[]}type Photo {  height Int  width  Int  url    String}\n```\n\nIn this case, the `Product` model has a list of `Photo` composite types stored in `photos`.\n\n### Considerations when using composite types[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#considerations-when-using-composite-types \"Direct link to Considerations when using composite types\")\n\nComposite types only support a limited set of [attributes](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attributes). The following attributes are supported:\n\n*   `@default`\n*   `@map`\n*   [Native types](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#model-field-scalar-types), such as `@db.ObjectId`\n\nThe following attributes are not supported inside composite types:\n\n*   `@unique`\n*   `@id`\n*   `@relation`\n*   `@ignore`\n*   `@updatedAt`\n\nHowever, unique constraints can still be defined by using the `@@unique` attribute on the level of the model that uses the composite type. For more details, see [Composite type unique constraints](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#composite-type-unique-constraints).\n\nIndexes can be defined by using the `@@index` attribute on the level of the model that uses the composite type. For more details, see [Composite type indexes](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-composite-type-indexes).\n\n## Using functions[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#using-functions \"Direct link to Using functions\")\n\nThe Prisma schema supports a number of [functions](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#attribute-functions) . These can be used to specify [default values](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default) on fields of a model.\n\nFor example, the default value of `createdAt` is [`now()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#now) :\n\n*   Relational databases\n*   MongoDB\n\n```\nmodel Post {  id        Int      @id @default(autoincrement())  createdAt DateTime @default(now())}\n```\n\n[`cuid()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#cuid) and [`uuid()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#uuid) are implemented by Prisma ORM and therefore are not \"visible\" in the underlying database schema. You can still use them when using [introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection) by [manually changing your Prisma schema](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/custom-model-and-field-names) and [generating Prisma Client](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client), in that case the values will be generated by Prisma Client's [query engine](https://www.prisma.io/docs/orm/more/under-the-hood/engines)\n\nSupport for [`autoincrement()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#autoincrement), [`now()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#now), and [`dbgenerated(...)`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#dbgenerated) differ between databases.\n\n**Relational database connectors** implement `autoincrement()`, `dbgenerated(...)`, and `now()` at database level. The **MongoDB connector** does not support `autoincrement()` or `dbgenerated(...)`, and `now()` is implemented at the Prisma ORM level. The [`auto()`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#auto) function is used to generate an `ObjectId`.\n\n## Relations[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#relations \"Direct link to Relations\")\n\nRefer to the [relations documentation](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations) for more examples and information about relationships between models.\n\n## Models in Prisma Client[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#models-in-prisma-client \"Direct link to Models in Prisma Client\")\n\n### Queries (CRUD)[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#queries-crud \"Direct link to Queries (CRUD)\")\n\nEvery model in the data model definition will result in a number of CRUD queries in the generated [Prisma Client API](https://www.prisma.io/docs/orm/prisma-client):\n\n*   [`findMany()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findmany)\n*   [`findFirst()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findfirst)\n*   [`findFirstOrThrow()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findfirstorthrow)\n*   [`findUnique()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#findunique)\n*   [`findUniqueOrThrow()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#finduniqueorthrow)\n*   [`create()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#create)\n*   [`update()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#update)\n*   [`upsert()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#upsert)\n*   [`delete()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#delete)\n*   [`createMany()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#createmany)\n*   [`createManyAndReturn()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#createmanyandreturn)\n*   [`updateMany()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#updatemany)\n*   [`deleteMany()`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#deletemany)\n\nThe operations are accessible via a generated property on the Prisma Client instance. By default the name of the property is the lowercase form of the model name, e.g. `user` for a `User` model or `post` for a `Post` model.\n\nHere is an example illustrating the use of a `user` property from the Prisma Client API:\n\n```\nconst newUser = await prisma.user.create({  data: {    name: 'Alice',  },})const allUsers = await prisma.user.findMany()\n```\n\n### Type definitions[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#type-definitions \"Direct link to Type definitions\")\n\nPrisma Client also generates **type definitions** that reflect your model structures. These are part of the generated [`@prisma/client`](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client#the-prismaclient-npm-package) node module.\n\nWhen using TypeScript, these type definitions ensure that all your database queries are entirely type safe and validated at compile-time (even partial queries using [`select`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#select) or [`include`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#include) ).\n\nEven when using plain JavaScript, the type definitions are still included in the `@prisma/client` node module, enabling features like [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense)/autocompletion in your editor.\n\n> **Note**: The actual types are stored in the `.prisma/client` folder. `@prisma/client/index.d.ts` exports the contents of this folder.\n\nFor example, the type definition for the `User` model from above would look as follows:\n\n```\nexport type User = {  id: number  email: string  name: string | null  role: string}\n```\n\nNote that the relation fields `posts` and `profile` are not included in the type definition by default. However, if you need variations of the `User` type you can still define them using some of [Prisma Client's generated helper types](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client) (in this case, these helper types would be called `UserGetIncludePayload` and `UserGetSelectPayload`).\n\n## Limitations[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#limitations \"Direct link to Limitations\")\n\n### Records must be uniquely identifiable[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#records-must-be-uniquely-identifiable \"Direct link to Records must be uniquely identifiable\")\n\nPrisma ORM currently only supports models that have at least one unique field or combination of fields. In practice, this means that every Prisma model must have either at least one of the following attributes:\n\n*   `@id` or `@@id` for a single- or multi-field primary key constraint (max one per model)\n*   `@unique` or `@@unique` for a single- or multi-field unique constraint",
    "title": "Models | Prisma Documentation",
    "description": "Learn about the concepts for building your data model with Prisma: Models, scalar types, enums, attributes, functions, IDs, default values and more.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions",
    "markdown": "# Referential actions | Prisma Documentation\n\nReferential actions determine what happens to a record when your application deletes or updates a related record.\n\nFrom version 2.26.0, you can define referential actions on the relation fields in your Prisma schema. This allows you to define referential actions like cascading deletes and cascading updates at a Prisma ORM level.\n\ninfo\n\n**Version differences**\n\n*   If you use version 3.0.1 or later, you can use referential actions as described on this page.\n*   If you use a version between 2.26.0 and 3.0.0, you can use referential actions as described on this page, but you must [enable the preview feature flag](https://www.prisma.io/docs/orm/reference/preview-features/client-preview-features#enabling-a-prisma-client-preview-feature) `referentialActions`.\n*   If you use version 2.25.0 or earlier, you can configure cascading deletes manually in your database.\n\nIn the following example, adding `onDelete: Cascade` to the `author` field on the `Post` model means that deleting the `User` record will also delete all related `Post` records.\n\nschema.prisma\n\n```\nmodel Post {  id       Int    @id @default(autoincrement())  title    String  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)  authorId Int}model User {  id    Int    @id @default(autoincrement())  posts Post[]}\n```\n\nIf you do not specify a referential action, Prisma ORM [uses a default](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#referential-action-defaults).\n\ndanger\n\nIf you upgrade from a version earlier than 2.26.0: It is extremely important that you check the [upgrade paths for referential actions](https://www.prisma.io/docs/orm/more/upgrade-guides/upgrading-versions/upgrading-to-prisma-3/referential-actions) section. Prisma ORM's support of referential actions **removes the safety net in Prisma Client that prevents cascading deletes at runtime**. If you use the feature _without upgrading your database_, the [old default action](https://www.prisma.io/docs/orm/more/upgrade-guides/upgrading-versions/upgrading-to-prisma-3/referential-actions#prisma-orm-2x-default-referential-actions) - `ON DELETE CASCADE` - becomes active. This might result in cascading deletes that you did not expect.\n\n## What are referential actions?[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#what-are-referential-actions \"Direct link to What are referential actions?\")\n\nReferential actions are policies that define how a referenced record is handled by the database when you run an [`update`](https://www.prisma.io/docs/orm/prisma-client/queries/crud#update) or [`delete`](https://www.prisma.io/docs/orm/prisma-client/queries/crud#delete) query.\n\nReferential actions on the database level\n\nReferential actions are features of foreign key constraints that exist to preserve referential integrity in your database.\n\nWhen you define relationships between data models in your Prisma schema, you use [relation fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relation-fields), **which do not exist on the database**, and [scalar fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#scalar-fields), **which do exist on the database**. These foreign keys connect the models on the database level.\n\nReferential integrity states that these foreign keys must reference an existing primary key value in the related database table. In your Prisma schema, this is generally represented by the `id` field on the related model.\n\nBy default a database will reject any operation that violates the referential integrity, for example, by deleting referenced records.\n\n### How to use referential actions[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#how-to-use-referential-actions \"Direct link to How to use referential actions\")\n\nReferential actions are defined in the [`@relation`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#relation) attribute and map to the actions on the **foreign key constraint** in the underlying database. If you do not specify a referential action, [Prisma ORM falls back to a default](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#referential-action-defaults).\n\nThe following model defines a one-to-many relation between `User` and `Post` and a many-to-many relation between `Post` and `Tag`, with explicitly defined referential actions:\n\nschema.prisma\n\n```\nmodel User {  id    Int    @id @default(autoincrement())  posts Post[]}model Post {  id     Int          @id @default(autoincrement())  title  String  tags   TagOnPosts[]  User   User?        @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)  userId Int?}model TagOnPosts {  id     Int   @id @default(autoincrement())  post   Post? @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)  tag    Tag?  @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)  postId Int?  tagId  Int?}model Tag {  id    Int          @id @default(autoincrement())  name  String       @unique  posts TagOnPosts[]}\n```\n\nThis model explicitly defines the following referential actions:\n\n*   If you delete a `Tag`, the corresponding tag assignment is also deleted in `TagOnPosts`, using the `Cascade` referential action\n*   If you delete a `User`, the author is removed from all posts by setting the field value to `Null`, because of the `SetNull` referential action. To allow this, `User` and `userId` must be optional fields in `Post`.\n\nPrisma ORM supports the following referential actions:\n\n*   [`Cascade`](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#cascade)\n*   [`Restrict`](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#restrict)\n*   [`NoAction`](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#noaction)\n*   [`SetNull`](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#setnull)\n*   [`SetDefault`](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#setdefault)\n\n### Referential action defaults[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#referential-action-defaults \"Direct link to Referential action defaults\")\n\nIf you do not specify a referential action, Prisma ORM uses the following defaults:\n\n| Clause | Optional relations | Mandatory relations |\n| --- | --- | --- |\n| `onDelete` | `SetNull` | `Restrict` |\n| `onUpdate` | `Cascade` | `Cascade` |\n\nFor example, in the following schema all `Post` records must be connected to a `User` via the `author` relation:\n\n```\nmodel Post {  id       Int    @id @default(autoincrement())  title    String  author   User   @relation(fields: [authorId], references: [id])  authorId Int}model User {  id    Int    @id @default(autoincrement())  posts Post[]}\n```\n\nThe schema does not explicitly define referential actions on the mandatory `author` relation field, which means that the default referential actions of `Restrict` for `onDelete` and `Cascade` for `onUpdate` apply.\n\n## Caveats[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#caveats \"Direct link to Caveats\")\n\nThe following caveats apply:\n\n*   Referential actions are **not** supported on [implicit many-to-many relations](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations#implicit-many-to-many-relations). To use referential actions, you must define an explicit many-to-many relation and define your referential actions on the [join table](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/troubleshooting-relations#how-to-use-a-relation-table-with-a-many-to-many-relationship).\n*   Certain combinations of referential actions and required/optional relations are incompatible. For example, using `SetNull` on a required relation will lead to database errors when deleting referenced records because the non-nullable constraint would be violated. See [this GitHub issue](https://github.com/prisma/prisma/issues/7909) for more information.\n\n## Types of referential actions[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#types-of-referential-actions \"Direct link to Types of referential actions\")\n\nThe following table shows which referential action each database supports.\n\n| Database | Cascade | Restrict | NoAction | SetNull | SetDefault |\n| --- | --- | --- | --- | --- | --- |\n| PostgreSQL | ✔️  | ✔️  | ✔️  | ✔️⌘ | ✔️  |\n| MySQL/MariaDB | ✔️  | ✔️  | ✔️  | ✔️  | ❌ (✔️†) |\n| SQLite | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  |\n| SQL Server | ✔️  | ❌‡  | ✔️  | ✔️  | ✔️  |\n| CockroachDB | ✔️  | ✔️  | ✔️  | ✔️  | ✔️  |\n| MongoDB†† | ✔️  | ✔️  | ✔️  | ✔️  | ❌   |\n\n*   † See [special cases for MySQL](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#mysqlmariadb).\n*   ⌘ See [special cases for PostgreSQL](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#postgresql).\n*   ‡ See [special cases for SQL Server](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#sql-server).\n*   †† Referential actions for MongoDB are available in Prisma ORM versions 3.7.0 and later.\n\n### Special cases for referential actions[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#special-cases-for-referential-actions \"Direct link to Special cases for referential actions\")\n\nReferential actions are part of the ANSI SQL standard. However, there are special cases where some relational databases diverge from the standard.\n\n#### MySQL/MariaDB[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#mysqlmariadb \"Direct link to MySQL/MariaDB\")\n\nMySQL/MariaDB, and the underlying InnoDB storage engine, does not support `SetDefault`. The exact behavior depends on the database version:\n\n*   In MySQL versions 8 and later, and MariaDB versions 10.5 and later, `SetDefault` effectively acts as an alias for `NoAction`. You can define tables using the `SET DEFAULT` referential action, but a foreign key constraint error is triggered at runtime.\n*   In MySQL versions 5.6 and later, and MariaDB versions before 10.5, attempting to create a table definition with the `SET DEFAULT` referential action fails with a syntax error.\n\nFor this reason, when you set `mysql` as the database provider, Prisma ORM warns users to replace `SetDefault` referential actions in the Prisma schema with another action.\n\n#### PostgreSQL[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#postgresql \"Direct link to PostgreSQL\")\n\nPostgreSQL is the only database supported by Prisma ORM that allows you to define a `SetNull` referential action that refers to a non-nullable field. However, this raises a foreign key constraint error when the action is triggered at runtime.\n\nFor this reason, when you set `postgres` as the database provider in the (default) `foreignKeys` relation mode, Prisma ORM warns users to mark as optional any fields that are included in a `@relation` attribute with a `SetNull` referential action. For all other database providers, Prisma ORM rejects the schema with a validation error.\n\n#### SQL Server[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#sql-server \"Direct link to SQL Server\")\n\n[`Restrict`](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#restrict) is not available for SQL Server databases, but you can use [`NoAction`](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#noaction) instead.\n\n### `Cascade`[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#cascade \"Direct link to cascade\")\n\n*   `onDelete: Cascade` Deleting a referenced record will trigger the deletion of referencing record.\n*   `onUpdate: Cascade` Updates the relation scalar fields if the referenced scalar fields of the dependent record are updated.\n\n#### Example usage[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#example-usage \"Direct link to Example usage\")\n\nschema.prisma\n\n```\nmodel Post {  id       Int    @id @default(autoincrement())  title    String  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)  authorId Int}model User {  id    Int    @id @default(autoincrement())  posts Post[]}\n```\n\n##### Result of using `Cascade`[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#result-of-using-cascade \"Direct link to result-of-using-cascade\")\n\nIf a `User` record is deleted, then their posts are deleted too. If the user's `id` is updated, then the corresponding `authorId` is also updated.\n\n##### How to use cascading deletes[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#how-to-use-cascading-deletes \"Direct link to How to use cascading deletes\")\n\n### `Restrict`[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#restrict \"Direct link to restrict\")\n\n*   `onDelete: Restrict` Prevents the deletion if any referencing records exist.\n*   `onUpdate: Restrict` Prevents the identifier of a referenced record from being changed.\n\n#### Example usage[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#example-usage-1 \"Direct link to Example usage\")\n\nschema.prisma\n\n```\nmodel Post {  id       Int    @id @default(autoincrement())  title    String  author   User   @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Restrict)  authorId Int}model User {  id    Int    @id @default(autoincrement())  posts Post[]}\n```\n\n##### Result of using `Restrict`[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#result-of-using-restrict \"Direct link to result-of-using-restrict\")\n\n`User`s with posts **cannot** be deleted. The `User`'s `id` **cannot** be changed.\n\nwarning\n\nThe `Restrict` action is **not** available on [Microsoft SQL Server](https://www.prisma.io/docs/orm/overview/databases/sql-server) and triggers a schema validation error. Instead, you can use [`NoAction`](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#noaction), which produces the same result and is compatible with SQL Server.\n\n### `NoAction`[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#noaction \"Direct link to noaction\")\n\nThe `NoAction` action is similar to `Restrict`, the difference between the two is dependent on the database being used:\n\n*   **PostgreSQL**: `NoAction` allows the check (if a referenced row on the table exists) to be deferred until later in the transaction. See [the PostgreSQL docs](https://www.postgresql.org/docs/current/ddl-constraints.html#DDL-CONSTRAINTS-FK) for more information.\n*   **MySQL**: `NoAction` behaves exactly the same as `Restrict`. See [the MySQL docs](https://dev.mysql.com/doc/refman/8.0/en/create-table-foreign-keys.html#foreign-key-referential-actions) for more information.\n*   **SQLite**: When a related primary key is modified or deleted, no action is taken. See [the SQLite docs](https://www.sqlite.org/foreignkeys.html#fk_actions) for more information.\n*   **SQL Server**: When a referenced record is deleted or modified, an error is raised. See [the SQL Server docs](https://docs.microsoft.com/en-us/sql/relational-databases/tables/graph-edge-constraints?view=sql-server-ver15#on-delete-referential-actions-on-edge-constraints) for more information.\n*   **MongoDB** (in preview from version 3.6.0): When a record is modified or deleted, nothing is done to any related records.\n\nwarning\n\nIf you are [managing relations in Prisma Client](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/relation-mode#emulate-relations-in-prisma-orm-with-the-prisma-relation-mode) rather than using foreign keys in the database, you should be aware that currently Prisma ORM only implements the referential actions. Foreign keys also create constraints, which make it impossible to manipulate data in a way that would violate these constraints: instead of executing the query, the database responds with an error. These constraints will not be created if you emulate referential integrity in Prisma Client, so if you set the referential action to `NoAction` there will be no checks to prevent you from breaking the referential integrity.\n\n#### Example usage[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#example-usage-2 \"Direct link to Example usage\")\n\nschema.prisma\n\n```\nmodel Post {  id       Int    @id @default(autoincrement())  title    String  author   User   @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)  authorId Int}model User {  id    Int    @id @default(autoincrement())  posts Post[]}\n```\n\n##### Result of using `NoAction`[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#result-of-using-noaction \"Direct link to result-of-using-noaction\")\n\n`User`'s with posts **cannot** be deleted. The `User`'s `id` **cannot** be changed.\n\n### `SetNull`[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#setnull \"Direct link to setnull\")\n\n*   `onDelete: SetNull` The scalar field of the referencing object will be set to `NULL`.\n    \n*   `onUpdate: SetNull` When updating the identifier of a referenced object, the scalar fields of the referencing objects will be set to `NULL`.\n    \n\n`SetNull` will only work on optional relations. On required relations, a runtime error will be thrown since the scalar fields cannot be null.\n\nschema.prisma\n\n```\nmodel Post {  id       Int    @id @default(autoincrement())  title    String  author   User?  @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: SetNull)  authorId Int?}model User {  id    Int    @id @default(autoincrement())  posts Post[]}\n```\n\n##### Result of using `SetNull`[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#result-of-using-setnull \"Direct link to result-of-using-setnull\")\n\nWhen deleting a `User`, the `authorId` will be set to `NULL` for all its authored posts.\n\nWhen changing a `User`'s `id`, the `authorId` will be set to `NULL` for all its authored posts.\n\n### `SetDefault`[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#setdefault \"Direct link to setdefault\")\n\n*   `onDelete: SetDefault` The scalar field of the referencing object will be set to the fields default value.\n    \n*   `onUpdate: SetDefault` The scalar field of the referencing object will be set to the fields default value.\n    \n\nThese require setting a default for the relation scalar field with [`@default`](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#default). If no defaults are provided for any of the scalar fields, a runtime error will be thrown.\n\nschema.prisma\n\n```\nmodel Post {  id             Int     @id @default(autoincrement())  title          String  authorUsername String? @default(\"anonymous\")  author         User?   @relation(fields: [authorUsername], references: [username], onDelete: SetDefault, onUpdate: SetDefault)}model User {  username String @id  posts    Post[]}\n```\n\n##### Result of using `SetDefault`[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#result-of-using-setdefault \"Direct link to result-of-using-setdefault\")\n\nWhen deleting a `User`, its existing posts' `authorUsername` field values will be set to 'anonymous'.\n\nWhen the `username` of a `User` changes, its existing posts' `authorUsername` field values will be set to 'anonymous'.\n\n### Database-specific requirements[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#database-specific-requirements \"Direct link to Database-specific requirements\")\n\nMongoDB and SQL Server have specific requirements for referential actions if you have [self-relations](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions/special-rules-for-referential-actions#self-relation-sql-server-and-mongodb) or [cyclic relations](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions/special-rules-for-referential-actions#cyclic-relation-between-three-tables-sql-server-and-mongodb) in your data model. SQL Server also has specific requirements if you have relations with [multiple cascade paths](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions/special-rules-for-referential-actions#multiple-cascade-paths-between-two-models-sql-server-only).\n\n## Upgrade paths from versions 2.25.0 and earlier[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#upgrade-paths-from-versions-2250-and-earlier \"Direct link to Upgrade paths from versions 2.25.0 and earlier\")\n\nThere are a couple of paths you can take when upgrading which will give different results depending on the desired outcome.\n\nIf you currently use the migration workflow, you can run an introspection to check how the defaults are reflected in your schema. You can then manually update your database if you need to.\n\nYou can also decide to skip checking the defaults and run a migration to update your database with the [new default values](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#referential-action-defaults).\n\nThe following assumes you have upgraded to 2.26.0 or newer and enabled the preview feature flag, or upgraded to 3.0.0 or newer:\n\n### Using Introspection[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#using-introspection \"Direct link to Using Introspection\")\n\nIf you [Introspect](https://www.prisma.io/docs/orm/prisma-schema/introspection) your database, the referential actions configured at the database level will be reflected in your Prisma Schema. If you have been using Prisma Migrate or `prisma db push` to manage the database schema, these are likely to be the [default values](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#referential-action-defaults) from 2.25.0 and earlier.\n\nWhen you run an Introspection, Prisma ORM compares all the foreign keys in the database with the schema, if the SQL statements `ON DELETE` and `ON UPDATE` do **not** match the default values, they will be explicitly set in the schema file.\n\nAfter introspecting, you can review the non-default clauses in your schema. The most important clause to review is `onDelete`, which defaults to `Cascade` in 2.25.0 and earlier.\n\nwarning\n\nIf you are using either the [`delete()`](https://www.prisma.io/docs/orm/prisma-client/queries/crud#delete-a-single-record) or [`deleteMany()`](https://www.prisma.io/docs/orm/prisma-client/queries/crud#delete-all-records) methods, **[cascading deletes](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#how-to-use-cascading-deletes) will now be performed** as the `referentialActions` preview feature **removed the safety net in Prisma Client that previously prevented cascading deletes at runtime**. Be sure to check your code and make any adjustments accordingly.\n\nMake sure you are happy with every case of `onDelete: Cascade` in your schema. If not, either:\n\n*   Modify your Prisma schema and `db push` or `dev migrate` to change the database\n\n_or_\n\n*   Manually update the underlying database if you use an introspection-only workflow\n\nThe following example would result in a cascading delete, if the `User` is deleted then all of their `Post`'s will be deleted too.\n\n#### A blog schema example[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#a-blog-schema-example \"Direct link to A blog schema example\")\n\n```\nmodel Post {  id       Int    @id @default(autoincrement())  title    String  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)  authorId Int}model User {  id    Int    @id @default(autoincrement())  posts Post[]}\n```\n\n### Using Migration[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#using-migration \"Direct link to Using Migration\")\n\nWhen running a [Migration](https://www.prisma.io/docs/orm/prisma-migrate) (or the [`prisma db push`](https://www.prisma.io/docs/orm/prisma-migrate/workflows/prototyping-your-schema) command) the [new defaults](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#referential-action-defaults) will be applied to your database.\n\ninfo\n\nUnlike when you run an Introspect for the first time, the new referential actions clause and property, will **not** automatically be added to your prisma schema by the Prisma VSCode extension. You will have to manually add them if you wish to use anything other than the new defaults.\n\nExplicitly defining referential actions in your Prisma schema is optional. If you do not explicitly define a referential action for a relation, Prisma ORM uses the [new defaults](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#referential-action-defaults).\n\nNote that referential actions can be added on a case by case basis. This means that you can add them to one single relation and leave the rest set to the defaults by not manually specifying anything.\n\n### Checking for errors[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#checking-for-errors \"Direct link to Checking for errors\")\n\n**Before** upgrading to 2.26.0 and enabling the referential actions **preview feature**, Prisma ORM prevented the deletion of records while using `delete()` or `deleteMany()` to preserve referential integrity. A custom runtime error would be thrown by Prisma Client with the error code `P2014`.\n\n**After** upgrading and enabling the referential actions **preview feature**, Prisma ORM no longer performs runtime checks. You can instead specify a custom referential action to preserve the referential integrity between relations.\n\nWhen you use [`NoAction`](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#noaction) or [`Restrict`](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#restrict) to prevent the deletion of records, the error messages will be different post 2.26.0 compared to pre 2.26.0. This is because they are now triggered by the database and **not** Prisma Client. The new error code that can be expected is `P2003`.\n\nTo make sure you catch these new errors you can adjust your code accordingly.\n\n#### Example of catching errors[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#example-of-catching-errors \"Direct link to Example of catching errors\")\n\nThe following example uses the below blog schema with a one-to-many relationship between `Post` and `User` and sets a [`Restrict`](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/referential-actions#restrict) referential actions on the `author` field.\n\nThis means that if a user has a post, that user (and their posts) **cannot** be deleted.\n\nschema.prisma\n\n```\nmodel Post {  id       Int    @id @default(autoincrement())  title    String  author   User   @relation(fields: [authorId], references: [id], onDelete: Restrict)  authorId String}model User {  id    Int    @id @default(autoincrement())  posts Post[]}\n```\n\nPrior to upgrading and enabling the referential actions **preview feature**, the error code you would receive when trying to delete a user which has posts would be `P2014` and it's message:\n\n> \"The change you are trying to make would violate the required relation '{relation\\_name}' between the {model\\_a\\_name} and {model\\_b\\_name} models.\"\n\n```\nimport { PrismaClient } from '@prisma/client'const prisma = new PrismaClient()async function main() {  try {    await prisma.user.delete({      where: {        id: 'some-long-id',      },    })  } catch (error) {    if (error instanceof Prisma.PrismaClientKnownRequestError) {      if (error.code === 'P2014') {        console.log(error.message)      }    }  }}main()\n```\n\nTo make sure you are checking for the correct errors in your code, modify your check to look for `P2003`, which will deliver the message:\n\n> \"Foreign key constraint failed on the field: {field\\_name}\"\n\n```\nimport { PrismaClient } from '@prisma/client'const prisma = new PrismaClient()async function main() {  try {    await prisma.user.delete({      where: {        id: 'some-long-id'      }    })  } catch (error) {    if (error instanceof Prisma.PrismaClientKnownRequestError) {      if (error.code === 'P2014') {      if (error.code === 'P2003') {        console.log(error.message)      }    }  }}main()\n```",
    "title": "Referential actions | Prisma Documentation",
    "description": "Referential actions let you define the update and delete behavior of related models on the database level",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes",
    "markdown": "# Indexes | Prisma Documentation\n\nPrisma ORM allows configuration of database indexes, unique constraints and primary key constraints. This is in General Availability in versions `4.0.0` and later. You can enable this with the `extendedIndexes` Preview feature in versions `3.5.0` and later.\n\nVersion `3.6.0` also introduces support for introspection and migration of full text indexes in MySQL and MongoDB through a new `@@fulltext` attribute, available through the `fullTextIndex` Preview feature.\n\nwarning\n\nIf you are upgrading from a version earlier than 4.0.0, these changes to index configuration and full text indexes might be **breaking changes** if you have a database that already uses these features. See [Upgrading from previous versions](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#upgrading-from-previous-versions) for more information on how to upgrade.\n\n## Index configuration[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#index-configuration \"Direct link to Index configuration\")\n\nYou can configure indexes, unique constraints, and primary key constraints with the following attribute arguments:\n\n*   The [`length` argument](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#configuring-the-length-of-indexes-with-length-mysql) allows you to specify a maximum length for the subpart of the value to be indexed on `String` and `Bytes` types\n    \n    *   Available on the `@id`, `@@id`, `@unique`, `@@unique` and `@@index` attributes\n    *   MySQL only\n*   The [`sort` argument](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#configuring-the-index-sort-order-with-sort) allows you to specify the order that the entries of the constraint or index are stored in the database\n    \n    *   Available on the `@unique`, `@@unique` and `@@index` attributes in all databases, and on the `@id` and `@@id` attributes in SQL Server\n*   The [`type` argument](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#configuring-the-access-type-of-indexes-with-type-postgresql) allows you to support index access methods other than PostgreSQL's default `BTree` access method\n    \n    *   Available on the `@@index` attribute\n    *   PostgreSQL only\n    *   Supported index access methods: `Hash`, `Gist`, `Gin`, `SpGist` and `Brin`\n*   The [`clustered` argument](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#configuring-if-indexes-are-clustered-or-non-clustered-with-clustered-sql-server) allows you to configure whether a constraint or index is clustered or non-clustered\n    \n    *   Available on the `@id`, `@@id`, `@unique`, `@@unique` and `@@index` attributes\n    *   SQL Server only\n\nSee the linked sections for details of which version each feature was first introduced in.\n\n### Configuring the length of indexes with `length` (MySQL)[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#configuring-the-length-of-indexes-with-length-mysql \"Direct link to configuring-the-length-of-indexes-with-length-mysql\")\n\nThe `length` argument is specific to MySQL and allows you to define indexes and constraints on columns of `String` and `Byte` types. For these types, MySQL requires you to specify a maximum length for the subpart of the value to be indexed in cases where the full value would exceed MySQL's limits for index sizes. See [the MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/innodb-limits.html) for more details.\n\nThe `length` argument is available on the `@id`, `@@id`, `@unique`, `@@unique` and `@@index` attributes. It is generally available in versions 4.0.0 and later, and available as part of the `extendedIndexes` preview feature in versions 3.5.0 and later.\n\nAs an example, the following data model declares an `id` field with a maximum length of 3000 characters:\n\nschema.prisma\n\n```\nmodel Id {  id String @id @db.VarChar(3000)}\n```\n\nThis is not valid in MySQL because it exceeds MySQL's index storage limit and therefore Prisma ORM rejects the data model. The generated SQL would be rejected by the database.\n\n```\nCREATE TABLE `Id` (  `id` VARCHAR(3000) PRIMARY KEY)\n```\n\nThe `length` argument allows you to specify that only a subpart of the `id` value represents the primary key. In the example below, the first 100 characters are used:\n\nschema.prisma\n\n```\nmodel Id {  id String @id(length: 100) @db.VarChar(3000)}\n```\n\nPrisma Migrate is able to create constraints and indexes with the `length` argument if specified in your data model. This means that you can create indexes and constraints on values of Prisma schema type `Byte` and `String`. If you don't specify the argument the index is treated as covering the full value as before.\n\nIntrospection will fetch these limits where they are present in your existing database. This allows Prisma ORM to support indexes and constraints that were previously suppressed and results in better support of MySQL databases utilizing this feature.\n\nThe `length` argument can also be used on compound primary keys, using the `@@id` attribute, as in the example below:\n\nschema.prisma\n\n```\nmodel CompoundId {  id_1 String @db.VarChar(3000)  id_2 String @db.VarChar(3000)  @@id([id_1(length: 100), id_2(length: 10)])}\n```\n\nA similar syntax can be used for the `@@unique` and `@@index` attributes.\n\n### Configuring the index sort order with `sort`[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#configuring-the-index-sort-order-with-sort \"Direct link to configuring-the-index-sort-order-with-sort\")\n\nThe `sort` argument is available for all databases supported by Prisma ORM. It allows you to specify the order that the entries of the index or constraint are stored in the database. This can have an effect on whether the database is able to use an index for specific queries.\n\nThe `sort` argument is available for all databases on `@unique`, `@@unique` and `@@index`. Additionally, SQL Server also allows it on `@id` and `@@id`. It is generally available in versions 4.0.0 and later, and available as part of the `extendedIndexes` preview feature in versions 3.5.0 and later.\n\nAs an example, the following table\n\n```\nCREATE TABLE `Unique` (  `unique` INT,  CONSTRAINT `Unique_unique_key` UNIQUE (`unique` DESC))\n```\n\nis now introspected as\n\nschema.prisma\n\n```\nmodel Unique {  unique Int @unique(sort: Desc)}\n```\n\nThe `sort` argument can also be used on compound indexes:\n\nschema.prisma\n\n```\nmodel CompoundUnique {  unique_1 Int  unique_2 Int  @@unique([unique_1(sort: Desc), unique_2])}\n```\n\n### Example: using `sort` and `length` together[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#example-using-sort-and-length-together \"Direct link to example-using-sort-and-length-together\")\n\nThe following example demonstrates the use of the `sort` and `length` arguments to configure indexes and constraints for a `Post` model:\n\nschema.prisma\n\n```\nmodel Post {  title      String   @db.VarChar(300)  abstract   String   @db.VarChar(3000)  slug       String   @unique(sort: Desc, length: 42) @db.VarChar(3000)  author     String  created_at DateTime  @@id([title(length: 100, sort: Desc), abstract(length: 10)])  @@index([author, created_at(sort: Desc)])}\n```\n\n### Configuring the access type of indexes with `type` (PostgreSQL)[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#configuring-the-access-type-of-indexes-with-type-postgresql \"Direct link to configuring-the-access-type-of-indexes-with-type-postgresql\")\n\nThe `type` argument is available for configuring the index type in PostgreSQL with the `@@index` attribute. The index access methods available are `Hash`, `Gist`, `Gin`, `SpGist` and `Brin`, as well as the default `BTree` index access method. The `type` argument is generally available in versions 4.0.0 and later. The `Hash` index access method is available as part of the `extendedIndexes` preview feature in versions 3.6.0 and later, and the `Gist`, `Gin`, `SpGist` and `Brin` index access methods are available in preview in versions 3.14.0 and later.\n\n#### Hash[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#hash \"Direct link to Hash\")\n\nThe `Hash` type will store the index data in a format that is much faster to search and insert, and that will use less disk space. However, only the `=` and `<>` comparisons can use the index, so other comparison operators such as `<` and `>` will be much slower with `Hash` than when using the default `BTree` type.\n\nAs an example, the following model adds an index with a `type` of `Hash` to the `value` field:\n\nschema.prisma\n\n```\nmodel Example {  id    Int @id  value Int  @@index([value], type: Hash)}\n```\n\nThis translates to the following SQL commands:\n\n```\nCREATE TABLE \"Example\" (  id INT PRIMARY KEY,  value INT NOT NULL);CREATE INDEX \"Example_value_idx\" ON \"Example\" USING HASH (value);\n```\n\n#### Generalized Inverted Index (GIN)[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#generalized-inverted-index-gin \"Direct link to Generalized Inverted Index (GIN)\")\n\nThe GIN index stores composite values, such as arrays or `JsonB` data. This is useful for speeding up querying whether one object is part of another object. It is commonly used for full-text searches.\n\nAn indexed field can define the operator class, which defines the operators handled by the index.\n\nwarning\n\nIndexes using a function (such as `to_tsvector`) to determine the indexed value are not yet supported by Prisma ORM. Indexes defined in this way will not be visible with `prisma db pull`.\n\nAs an example, the following model adds a `Gin` index to the `value` field, with `JsonbPathOps` as the class of operators allowed to use the index:\n\nschema.prisma\n\n```\nmodel Example {  id    Int  @id  value Json  //    ^ field type matching the operator class  //                  ^ operator class      ^ index type  @@index([value(ops: JsonbPathOps)], type: Gin)}\n```\n\nThis translates to the following SQL commands:\n\n```\nCREATE TABLE \"Example\" (  id INT PRIMARY KEY,  value JSONB NOT NULL);CREATE INDEX \"Example_value_idx\" ON \"Example\" USING GIN (value jsonb_path_ops);\n```\n\nAs part of the `JsonbPathOps` the `@>` operator is handled by the index, speeding up queries such as `value @> '{\"foo\": 2}'`.\n\n##### Supported Operator Classes for GIN[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#supported-operator-classes-for-gin \"Direct link to Supported Operator Classes for GIN\")\n\nPrisma ORM generally supports operator classes provided by PostgreSQL in versions 10 and later. If the operator class requires the field type to be of a type Prisma ORM does not yet support, using the `raw` function with a string input allows you to use these operator classes without validation.\n\nThe default operator class (marked with ✅) can be omitted from the index definition.\n\n| Operator class | Allowed field type (native types) | Default | Other |\n| --- | --- | --- | --- |\n| `ArrayOps` | Any array | ✅   | Also available in CockroachDB |\n| `JsonbOps` | `Json` (`@db.JsonB`) | ✅   | Also available in CockroachDB |\n| `JsonbPathOps` | `Json` (`@db.JsonB`) |     |     |\n| `raw(\"other\")` |     |     |     |\n\nRead more about built-in operator classes in the [official PostgreSQL documentation](https://www.postgresql.org/docs/14/gin-builtin-opclasses.html).\n\n##### CockroachDB[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#cockroachdb \"Direct link to CockroachDB\")\n\nGIN and BTree are the only index types supported by CockroachDB. The operator classes marked to work with CockroachDB are the only ones allowed on that database and supported by Prisma ORM. The operator class cannot be defined in the Prisma Schema Language: the `ops` argument is not necessary or allowed on CockroachDB.\n\n#### Generalized Search Tree (GiST)[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#generalized-search-tree-gist \"Direct link to Generalized Search Tree (GiST)\")\n\nThe GiST index type is used for implementing indexing schemes for user-defined types. By default there are not many direct uses for GiST indexes, but for example the B-Tree index type is built using a GiST index.\n\nAs an example, the following model adds a `Gist` index to the `value` field with `InetOps` as the operators that will be using the index:\n\nschema.prisma\n\n```\nmodel Example {  id    Int    @id  value String @db.Inet  //           ^ native type matching the operator class  //                                   ^ index type  //                  ^ operator class  @@index([value(ops: InetOps)], type: Gist)}\n```\n\nThis translates to the following SQL commands:\n\n```\nCREATE TABLE \"Example\" (  id INT PRIMARY KEY,  value INET NOT NULL);CREATE INDEX \"Example_value_idx\" ON \"Example\" USING GIST (value inet_ops);\n```\n\nQueries comparing IP addresses, such as `value > '10.0.0.2'`, will use the index.\n\n##### Supported Operator Classes for GiST[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#supported-operator-classes-for-gist \"Direct link to Supported Operator Classes for GiST\")\n\nPrisma ORM generally supports operator classes provided by PostgreSQL in versions 10 and later. If the operator class requires the field type to be of a type Prisma ORM does not yet support, using the `raw` function with a string input allows you to use these operator classes without validation.\n\n| Operator class | Allowed field type (allowed native types) |\n| --- | --- |\n| `InetOps` | `String` (`@db.Inet`) |\n| `raw(\"other\")` |     |\n\nRead more about built-in operator classes in the [official PostgreSQL documentation](https://www.postgresql.org/docs/14/gist-builtin-opclasses.html).\n\n#### Space-Partitioned GiST (SP-GiST)[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#space-partitioned-gist-sp-gist \"Direct link to Space-Partitioned GiST (SP-GiST)\")\n\nThe SP-GiST index is a good choice for many different non-balanced data structures. If the query matches the partitioning rule, it can be very fast.\n\nAs with GiST, SP-GiST is important as a building block for user-defined types, allowing implementation of custom search operators directly with the database.\n\nAs an example, the following model adds a `SpGist` index to the `value` field with `TextOps` as the operators using the index:\n\nschema.prisma\n\n```\nmodel Example {  id    Int    @id  value String  //    ^ field type matching the operator class  @@index([value], type: SpGist)  //                     ^ index type  //       ^ using the default ops: TextOps}\n```\n\nThis translates to the following SQL commands:\n\n```\nCREATE TABLE \"Example\" (  id INT PRIMARY KEY,  value TEXT NOT NULL);CREATE INDEX \"Example_value_idx\" ON \"Example\" USING SPGIST (value);\n```\n\nQueries such as `value LIKE 'something%'` will be sped up by the index.\n\n##### Supported Operator Classes for SP-GiST[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#supported-operator-classes-for-sp-gist \"Direct link to Supported Operator Classes for SP-GiST\")\n\nPrisma ORM generally supports operator classes provided by PostgreSQL in versions 10 and later. If the operator class requires the field type to be of a type Prisma ORM does not yet support, using the `raw` function with a string input allows you to use these operator classes without validation.\n\nThe default operator class (marked with ✅) can be omitted from the index definition.\n\n| Operator class | Allowed field type (native types) | Default | Supported PostgreSQL versions |\n| --- | --- | --- | --- |\n| `InetOps` | `String` (`@db.Inet`) | ✅   | 10+ |\n| `TextOps` | `String` (`@db.Text`, `@db.VarChar`) | ✅   |     |\n| `raw(\"other\")` |     |     |     |\n\nRead more about built-in operator classes from [official PostgreSQL documentation](https://www.postgresql.org/docs/14/spgist-builtin-opclasses.html).\n\n#### Block Range Index (BRIN)[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#block-range-index-brin \"Direct link to Block Range Index (BRIN)\")\n\nThe BRIN index type is useful if you have lots of data that does not change after it is inserted, such as date and time values. If your data is a good fit for the index, it can store large datasets in a minimal space.\n\nAs an example, the following model adds a `Brin` index to the `value` field with `Int4BloomOps` as the operators that will be using the index:\n\nschema.prisma\n\n```\nmodel Example {  id    Int @id  value Int  //    ^ field type matching the operator class  //                  ^ operator class      ^ index type  @@index([value(ops: Int4BloomOps)], type: Brin)}\n```\n\nThis translates to the following SQL commands:\n\n```\nCREATE TABLE \"Example\" (  id INT PRIMARY KEY,  value INT4 NOT NULL);CREATE INDEX \"Example_value_idx\" ON \"Example\" USING BRIN (value int4_bloom_ops);\n```\n\nQueries like `value = 2` will now use the index, which uses a fraction of the space used by the `BTree` or `Hash` indexes.\n\n##### Supported Operator Classes for BRIN[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#supported-operator-classes-for-brin \"Direct link to Supported Operator Classes for BRIN\")\n\nPrisma ORM generally supports operator classes provided by PostgreSQL in versions 10 and later, and some supported operators are only available from PostgreSQL versions 14 and later. If the operator class requires the field type to be of a type Prisma ORM does not yet support, using the `raw` function with a string input allows you to use these operator classes without validation.\n\nThe default operator class (marked with ✅) can be omitted from the index definition.\n\n| Operator class | Allowed field type (native types) | Default | Supported PostgreSQL versions |\n| --- | --- | --- | --- |\n| `BitMinMaxOps` | `String` (`@db.Bit`) | ✅   |     |\n| `VarBitMinMaxOps` | `String` (`@db.VarBit`) | ✅   |     |\n| `BpcharBloomOps` | `String` (`@db.Char`) |     | 14+ |\n| `BpcharMinMaxOps` | `String` (`@db.Char`) | ✅   |     |\n| `ByteaBloomOps` | `Bytes` (`@db.Bytea`) |     | 14+ |\n| `ByteaMinMaxOps` | `Bytes` (`@db.Bytea`) | ✅   |     |\n| `DateBloomOps` | `DateTime` (`@db.Date`) |     | 14+ |\n| `DateMinMaxOps` | `DateTime` (`@db.Date`) | ✅   |     |\n| `DateMinMaxMultiOps` | `DateTime` (`@db.Date`) |     | 14+ |\n| `Float4BloomOps` | `Float` (`@db.Real`) |     | 14+ |\n| `Float4MinMaxOps` | `Float` (`@db.Real`) | ✅   |     |\n| `Float4MinMaxMultiOps` | `Float` (`@db.Real`) |     | 14+ |\n| `Float8BloomOps` | `Float` (`@db.DoublePrecision`) |     | 14+ |\n| `Float8MinMaxOps` | `Float` (`@db.DoublePrecision`) | ✅   |     |\n| `Float8MinMaxMultiOps` | `Float` (`@db.DoublePrecision`) |     | 14+ |\n| `InetInclusionOps` | `String` (`@db.Inet`) | ✅   | 14+ |\n| `InetBloomOps` | `String` (`@db.Inet`) |     | 14+ |\n| `InetMinMaxOps` | `String` (`@db.Inet`) |     |     |\n| `InetMinMaxMultiOps` | `String` (`@db.Inet`) |     | 14+ |\n| `Int2BloomOps` | `Int` (`@db.SmallInt`) |     | 14+ |\n| `Int2MinMaxOps` | `Int` (`@db.SmallInt`) | ✅   |     |\n| `Int2MinMaxMultiOps` | `Int` (`@db.SmallInt`) |     | 14+ |\n| `Int4BloomOps` | `Int` (`@db.Integer`) |     | 14+ |\n| `Int4MinMaxOps` | `Int` (`@db.Integer`) | ✅   |     |\n| `Int4MinMaxMultiOps` | `Int` (`@db.Integer`) |     | 14+ |\n| `Int8BloomOps` | `BigInt` (`@db.BigInt`) |     | 14+ |\n| `Int8MinMaxOps` | `BigInt` (`@db.BigInt`) | ✅   |     |\n| `Int8MinMaxMultiOps` | `BigInt` (`@db.BigInt`) |     | 14+ |\n| `NumericBloomOps` | `Decimal` (`@db.Decimal`) |     | 14+ |\n| `NumericMinMaxOps` | `Decimal` (`@db.Decimal`) | ✅   |     |\n| `NumericMinMaxMultiOps` | `Decimal` (`@db.Decimal`) |     | 14+ |\n| `OidBloomOps` | `Int` (`@db.Oid`) |     | 14+ |\n| `OidMinMaxOps` | `Int` (`@db.Oid`) | ✅   |     |\n| `OidMinMaxMultiOps` | `Int` (`@db.Oid`) |     | 14+ |\n| `TextBloomOps` | `String` (`@db.Text`, `@db.VarChar`) |     | 14+ |\n| `TextMinMaxOps` | `String` (`@db.Text`, `@db.VarChar`) | ✅   |     |\n| `TextMinMaxMultiOps` | `String` (`@db.Text`, `@db.VarChar`) |     | 14+ |\n| `TimestampBloomOps` | `DateTime` (`@db.Timestamp`) |     | 14+ |\n| `TimestampMinMaxOps` | `DateTime` (`@db.Timestamp`) | ✅   |     |\n| `TimestampMinMaxMultiOps` | `DateTime` (`@db.Timestamp`) |     | 14+ |\n| `TimestampTzBloomOps` | `DateTime` (`@db.Timestamptz`) |     | 14+ |\n| `TimestampTzMinMaxOps` | `DateTime` (`@db.Timestamptz`) | ✅   |     |\n| `TimestampTzMinMaxMultiOps` | `DateTime` (`@db.Timestamptz`) |     | 14+ |\n| `TimeBloomOps` | `DateTime` (`@db.Time`) |     | 14+ |\n| `TimeMinMaxOps` | `DateTime` (`@db.Time`) | ✅   |     |\n| `TimeMinMaxMultiOps` | `DateTime` (`@db.Time`) |     | 14+ |\n| `TimeTzBloomOps` | `DateTime` (`@db.Timetz`) |     | 14+ |\n| `TimeTzMinMaxOps` | `DateTime` (`@db.Timetz`) | ✅   |     |\n| `TimeTzMinMaxMultiOps` | `DateTime` (`@db.Timetz`) |     | 14+ |\n| `UuidBloomOps` | `String` (`@db.Uuid`) |     | 14+ |\n| `UuidMinMaxOps` | `String` (`@db.Uuid`) | ✅   |     |\n| `UuidMinMaxMultiOps` | `String` (`@db.Uuid`) |     | 14+ |\n| `raw(\"other\")` |     |     |     |\n\nRead more about built-in operator classes in the [official PostgreSQL documentation](https://www.postgresql.org/docs/14/brin-builtin-opclasses.html).\n\n### Configuring if indexes are clustered or non-clustered with `clustered` (SQL Server)[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#configuring-if-indexes-are-clustered-or-non-clustered-with-clustered-sql-server \"Direct link to configuring-if-indexes-are-clustered-or-non-clustered-with-clustered-sql-server\")\n\nThe `clustered` argument is available to configure (non)clustered indexes in SQL Server. It can be used on the `@id`, `@@id`, `@unique`, `@@unique` and `@@index` attributes. It is generally available in versions 4.0.0 and later, and available as part of the `extendedIndexes` preview feature in versions 3.13.0 and later.\n\nAs an example, the following model configures the `@id` to be non-clustered (instead of the clustered default):\n\nschema.prisma\n\n```\nmodel Example {  id    Int @id(clustered: false)  value Int}\n```\n\nThis translates to the following SQL commands:\n\n```\nCREATE TABLE [Example] (  id INT NOT NULL,  value INT,  CONSTRAINT [Example_pkey] PRIMARY KEY NONCLUSTERED (id))\n```\n\nThe default value of `clustered` for each attribute is as follows:\n\n| Attribute | Value |\n| --- | --- |\n| `@id` | `true` |\n| `@@id` | `true` |\n| `@unique` | `false` |\n| `@@unique` | `false` |\n| `@@index` | `false` |\n\nA table can have at most one clustered index.\n\n### Upgrading from previous versions[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#upgrading-from-previous-versions \"Direct link to Upgrading from previous versions\")\n\nwarning\n\nThese index configuration changes can be **breaking changes** when activating the functionality for certain, existing Prisma schemas for existing databases. After enabling the preview features required to use them, run `prisma db pull` to introspect the existing database to update your Prisma schema before using Prisma Migrate again.\n\nA breaking change can occur in the following situations:\n\n*   **Existing sort constraints and indexes:** earlier versions of Prisma ORM will assume that the desired sort order is _ascending_ if no order is specified explicitly. This means that this is a breaking change if you have existing constraints or indexes that are using descending sort order and migrate your database without first specifying this in your data model.\n*   **Existing length constraints and indexes:** in earlier versions of Prisma ORM, indexes and constraints that were length constrained in MySQL could not be represented in the Prisma schema. Therefore `prisma db pull` was not fetching these and you could not manually specify them. When you ran `prisma db push` or `prisma migrate dev` they were ignored if already present in your database. Since you are now able to specify these, migrate commands will now drop them if they are missing from your data model but present in the database.\n*   **Existing indexes other than `BTree` (PostgreSQL):** earlier versions of Prisma ORM only supported the default `BTree` index type. Other supported indexes (`Hash`, `Gist`, `Gin`, `SpGist` and `Brin`) need to be added before migrating your database.\n*   **Existing (non-)clustered indexes (SQL Server):** earlier versions of Prisma ORM did not support configuring an index as clustered or non-clustered. For indexes that do not use the default, these need to be added before migrating your database.\n\nIn each of the cases above unwanted changes to your database can be prevented by properly specifying these properties in your data model where necessary. **The easiest way to do this is to use `prisma db pull` to retrieve any existing constraints or configuration.** Alternatively, you could also add these arguments manually. This should be done before using `prisma db push` or `prisma migrate dev` the first time after the upgrade.\n\n## Full text indexes (MySQL and MongoDB)[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#full-text-indexes-mysql-and-mongodb \"Direct link to Full text indexes (MySQL and MongoDB)\")\n\nThe `fullTextIndex` preview feature provides support for introspection and migration of full text indexes in MySQL and MongoDB in version 3.6.0 and later. This can be configured using the `@@fulltext` attribute. Existing full text indexes in the database are added to your Prisma schema after introspecting with `db pull`, and new full text indexes added in the Prisma schema are created in the database when using Prisma Migrate. This also prevents validation errors in some database schemas that were not working before.\n\nwarning\n\nFor now we do not enable the full text search commands in Prisma Client for MongoDB; the progress can be followed in the [MongoDB](https://github.com/prisma/prisma/issues/9413) issue.\n\n### Enabling the `fullTextIndex` preview feature[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#enabling-the-fulltextindex-preview-feature \"Direct link to enabling-the-fulltextindex-preview-feature\")\n\nTo enable the `fullTextIndex` preview feature, add the `fullTextIndex` feature flag to the `generator` block of the `schema.prisma` file:\n\nschema.prisma\n\n```\ngenerator client {  provider        = \"prisma-client-js\"  previewFeatures = [\"fullTextIndex\"]}\n```\n\n### Examples[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#examples \"Direct link to Examples\")\n\nThe following example demonstrates adding a `@@fulltext` index to the `title` and `content` fields of a `Post` model:\n\nschema.prisma\n\n```\nmodel Post {  id      Int    @id  title   String @db.VarChar(255)  content String @db.Text  @@fulltext([title, content])}\n```\n\nOn MongoDB, you can use the `@@fulltext` index attribute (via the `fullTextIndex` preview feature) with the `sort` argument to add fields to your full-text index in ascending or descending order. The following example adds a `@@fulltext` index to the `title` and `content` fields of the `Post` model, and sorts the `title` field in descending order:\n\nschema.prisma\n\n```\ngenerator js {  provider        = \"prisma-client-js\"  previewFeatures = [\"fullTextIndex\"]}datasource db {  provider = \"mongodb\"  url      = env(\"DATABASE_URL\")}model Post {  id      String @id @map(\"_id\") @db.ObjectId  title   String  content String  @@fulltext([title(sort: Desc), content])}\n```\n\n### Upgrading from previous versions[​](https://www.prisma.io/docs/orm/prisma-schema/data-model/indexes#upgrading-from-previous-versions-1 \"Direct link to Upgrading from previous versions\")\n\nwarning\n\nThis can be a **breaking change** when activating the functionality for certain, existing Prisma schemas for existing databases. After enabling the preview features required to use them, run `prisma db pull` to introspect the existing database to update your Prisma schema before using Prisma Migrate again.\n\nEarlier versions of Prisma ORM converted full text indexes using the `@@index` attribute rather than the `@@fulltext` attribute. After enabling the `fullTextIndex` preview feature, run `prisma db pull` to convert these indexes to `@@fulltext` before migrating again with Prisma Migrate. If you do not do this, the existing indexes will be dropped instead and normal indexes will be created in their place.",
    "title": "Indexes | Prisma Documentation",
    "description": "How to configure index functionality and add full text indexes",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/overview",
    "markdown": "# Overview | Prisma Documentation\n\n## In this section[​](https://www.prisma.io/docs/orm/overview#in-this-section \"Direct link to In this section\")\n\n[\n\n## Introduction\n\n](https://www.prisma.io/docs/orm/overview/introduction)\n\n[\n\n## Prisma ORM in your stack\n\n](https://www.prisma.io/docs/orm/overview/prisma-in-your-stack)\n\n[\n\n## Databases\n\n](https://www.prisma.io/docs/orm/overview/databases)",
    "title": "Overview | Prisma Documentation",
    "description": "Overview",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/overview/databases",
    "markdown": "# Databases | Prisma Documentation\n\nLearn about the different databases Prisma ORM supports.\n\n## In this section[​](https://www.prisma.io/docs/orm/overview/databases#in-this-section \"Direct link to In this section\")\n\n[\n\n## Database drivers\n\n](https://www.prisma.io/docs/orm/overview/databases/database-drivers)\n\n[\n\n## PostgreSQL\n\n](https://www.prisma.io/docs/orm/overview/databases/postgresql)\n\n[\n\n## MySQL/MariaDB\n\n](https://www.prisma.io/docs/orm/overview/databases/mysql)\n\n[\n\n## SQLite\n\n](https://www.prisma.io/docs/orm/overview/databases/sqlite)\n\n[\n\n## MongoDB\n\n](https://www.prisma.io/docs/orm/overview/databases/mongodb)\n\n[\n\n## Microsoft SQL Server\n\n](https://www.prisma.io/docs/orm/overview/databases/sql-server)\n\n[\n\n## CockroachDB\n\n](https://www.prisma.io/docs/orm/overview/databases/cockroachdb)\n\n[\n\n## PlanetScale\n\n](https://www.prisma.io/docs/orm/overview/databases/planetscale)\n\n[\n\n## Supabase\n\n](https://www.prisma.io/docs/orm/overview/databases/supabase)\n\n[\n\n## Neon\n\n](https://www.prisma.io/docs/orm/overview/databases/neon)\n\n[\n\n## Turso\n\n](https://www.prisma.io/docs/orm/overview/databases/turso)\n\n[\n\n## Cloudflare D1\n\n](https://www.prisma.io/docs/orm/overview/databases/cloudflare-d1)",
    "title": "Databases | Prisma Documentation",
    "description": "Databases",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/overview/introduction",
    "markdown": "# Introduction (Overview) | Prisma Documentation\n\nThis page gives a high-level overview of what Prisma ORM is and how it works.\n\nIf you want to get started with a _practical introduction_ and learn about the Prisma Client API, head over to the [**Getting Started**](https://www.prisma.io/docs/getting-started) documentation.\n\nTo learn more about the _motivation_ for Prisma ORM, check out the [**Why Prisma ORM?**](https://www.prisma.io/docs/orm/overview/introduction/why-prisma) page.\n\n## In this section[​](https://www.prisma.io/docs/orm/overview/introduction#in-this-section \"Direct link to In this section\")\n\n[\n\n## What is Prisma ORM?\n\n](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma)\n\n[\n\n## Why Prisma ORM?\n\n](https://www.prisma.io/docs/orm/overview/introduction/why-prisma)\n\n[\n\n## Should you use Prisma ORM?\n\n](https://www.prisma.io/docs/orm/overview/introduction/should-you-use-prisma)\n\n[\n\n## Data modeling\n\n](https://www.prisma.io/docs/orm/overview/introduction/data-modeling)",
    "title": "Introduction (Overview) | Prisma Documentation",
    "description": "This section gives a high-level overview of what Prisma is and how it works. It's a great starting point for Prisma newcomers!",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-schema/overview",
    "markdown": "# Prisma Schema Overview | Prisma Documentation\n\nThe Prisma Schema (or _schema_ for short) is the main method of configuration for your Prisma ORM setup. It consists of the following parts:\n\n*   [**Data sources**](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources): Specify the details of the data sources Prisma ORM should connect to (e.g. a PostgreSQL database)\n*   [**Generators**](https://www.prisma.io/docs/orm/prisma-schema/overview/generators): Specifies what clients should be generated based on the data model (e.g. Prisma Client)\n*   [**Data model definition**](https://www.prisma.io/docs/orm/prisma-schema/data-model): Specifies your application [models](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-models) (the shape of the data per data source) and their [relations](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations)\n\nIt is typically a single file called `schema.prisma` (or multiple files with `.prisma` file extension) that is stored in a defined but customizable [location](https://www.prisma.io/docs/orm/prisma-schema/overview/location).\n\nSee the [Prisma schema API reference](https://www.prisma.io/docs/orm/reference/prisma-schema-reference) for detailed information about each section of the schema.\n\nWhenever a `prisma` command is invoked, the CLI typically reads some information from the schema, e.g.:\n\n*   `prisma generate`: Reads _all_ above mentioned information from the Prisma schema to generate the correct data source client code (e.g. Prisma Client).\n*   `prisma migrate dev`: Reads the data sources and data model definition to create a new migration.\n\nYou can also [use environment variables](https://www.prisma.io/docs/orm/prisma-schema/overview#accessing-environment-variables-from-the-schema) inside the schema to provide configuration options when a CLI command is invoked.\n\n## Example[​](https://www.prisma.io/docs/orm/prisma-schema/overview#example \"Direct link to Example\")\n\nThe following is an example of a Prisma Schema that specifies:\n\n*   A data source (PostgreSQL or MongoDB)\n*   A generator (Prisma Client)\n*   A data model definition with two models (with one relation) and one `enum`\n*   Several [native data type attributes](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#native-types-mapping) (`@db.VarChar(255)`, `@db.ObjectId`)\n\n*   Relational databases\n*   MongoDB\n\n```\ndatasource db {  provider = \"postgresql\"  url      = env(\"DATABASE_URL\")}generator client {  provider = \"prisma-client-js\"}model User {  id        Int      @id @default(autoincrement())  createdAt DateTime @default(now())  email     String   @unique  name      String?  role      Role     @default(USER)  posts     Post[]}model Post {  id        Int      @id @default(autoincrement())  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  published Boolean  @default(false)  title     String   @db.VarChar(255)  author    User?    @relation(fields: [authorId], references: [id])  authorId  Int?}enum Role {  USER  ADMIN}\n```\n\n## Syntax[​](https://www.prisma.io/docs/orm/prisma-schema/overview#syntax \"Direct link to Syntax\")\n\nPrisma Schema files are written in Prisma Schema Language (PSL). See the [data sources](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources), [generators](https://www.prisma.io/docs/orm/prisma-schema/overview/generators), [data model definition](https://www.prisma.io/docs/orm/prisma-schema/data-model) and of course [Prisma Schema API reference](https://www.prisma.io/docs/orm/reference/prisma-schema-reference) pages for details and examples.\n\n### VS Code[​](https://www.prisma.io/docs/orm/prisma-schema/overview#vs-code \"Direct link to VS Code\")\n\nSyntax highlighting for PSL is available via a [VS Code extension](https://marketplace.visualstudio.com/items?itemName=Prisma.prisma) (which also lets you auto-format the contents of your Prisma schema and indicates syntax errors with red squiggly lines). Learn more about [setting up Prisma ORM in your editor](https://www.prisma.io/docs/orm/more/development-environment/editor-setup).\n\n### GitHub[​](https://www.prisma.io/docs/orm/prisma-schema/overview#github \"Direct link to GitHub\")\n\nPSL code snippets on GitHub can be rendered with syntax highlighting as well by using the `.prisma` file extension or annotating fenced code blocks in Markdown with `prisma`:\n\n````\n```prismamodel User {  id        Int      @id @default(autoincrement())  createdAt DateTime @default(now())  email     String   @unique  name      String?}```\n````\n\n## Accessing environment variables from the schema[​](https://www.prisma.io/docs/orm/prisma-schema/overview#accessing-environment-variables-from-the-schema \"Direct link to Accessing environment variables from the schema\")\n\nYou can use environment variables to provide configuration options when a CLI command is invoked, or a Prisma Client query is run.\n\nHardcoding URLs directly in your schema is possible but is discouraged because it poses a security risk. Using environment variables in the schema allows you to **keep secrets out of the schema** which in turn **improves the portability of the schema** by allowing you to use it in different environments.\n\nEnvironment variables can be accessed using the `env()` function:\n\n```\ndatasource db {  provider = \"postgresql\"  url      = env(\"DATABASE_URL\")}\n```\n\nYou can use the `env()` function in the following places:\n\n*   A datasource url\n*   Generator binary targets\n\nSee [Environment variables](https://www.prisma.io/docs/orm/more/development-environment/environment-variables) for more information about how to use an `.env` file during development.\n\nThere are two types of comments that are supported in Prisma Schema Language:\n\n*   `// comment`: This comment is for the reader's clarity and is not present in the abstract syntax tree (AST) of the schema.\n*   `/// comment`: These comments will show up in the abstract syntax tree (AST) of the schema as descriptions to AST nodes. Tools can then use these comments to provide additional information. All comments are attached to the next available node - [free-floating comments](https://github.com/prisma/prisma/issues/3544) are not supported and are not included in the AST.\n\nHere are some different examples:\n\n```\n/// This comment will get attached to the `User` node in the ASTmodel User {  /// This comment will get attached to the `id` node in the AST  id     Int   @default(autoincrement())  // This comment is just for you  weight Float /// This comment gets attached to the `weight` node}// This comment is just for you. It will not// show up in the AST./// This comment will get attached to the/// Customer node.model Customer {}\n```\n\n## Auto formatting[​](https://www.prisma.io/docs/orm/prisma-schema/overview#auto-formatting \"Direct link to Auto formatting\")\n\nPrisma ORM supports formatting `.prisma` files automatically. There are two ways to format `.prisma` files:\n\n*   Run the [`prisma format`](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#format) command.\n*   Install the [Prisma VS Code extension](https://marketplace.visualstudio.com/items?itemName=Prisma.prisma) and invoke the [VS Code format action](https://code.visualstudio.com/docs/editor/codebasics#_formatting) - manually or on save.\n\nThere are no configuration options - [formatting rules](https://www.prisma.io/docs/orm/prisma-schema/overview#formatting-rules) are fixed (similar to Golang's `gofmt` but unlike Javascript's `prettier`):\n\n### Formatting rules[​](https://www.prisma.io/docs/orm/prisma-schema/overview#formatting-rules \"Direct link to Formatting rules\")\n\n#### Configuration blocks are aligned by their `=` sign.[​](https://www.prisma.io/docs/orm/prisma-schema/overview#configuration-blocks-are-aligned-by-theirsign \"Direct link to configuration-blocks-are-aligned-by-theirsign\")\n\n```\nblock _ {  key      = \"value\"  key2     = 1  long_key = true}\n```\n\nA newline resets block alignment:\n\n```\nblock _ {  key   = \"value\"  key2  = 1  key10 = true  long_key   = true  long_key_2 = true}\n```\n\n#### Field definitions are aligned into columns separated by 2 or more spaces[​](https://www.prisma.io/docs/orm/prisma-schema/overview#field-definitions-are-aligned-into-columns-separated-by-2-or-more-spaces \"Direct link to Field definitions are aligned into columns separated by 2 or more spaces\")\n\n```\nblock _ {  id          String       @id  first_name  LongNumeric  @default}\n```\n\n#### Multiline field attributes are properly aligned with the rest of the field attributes[​](https://www.prisma.io/docs/orm/prisma-schema/overview#multiline-field-attributes-are-properly-aligned-with-the-rest-of-the-field-attributes \"Direct link to Multiline field attributes are properly aligned with the rest of the field attributes\")\n\n```\nblock _ {  id          String       @id                           @default  first_name  LongNumeric  @default}\n```\n\nA newline resets formatting rules:\n\n```\nblock _ {  id  String  @id              @default  first_name  LongNumeric  @default}\n```\n\n#### Block attributes are sorted to the end of the block[​](https://www.prisma.io/docs/orm/prisma-schema/overview#block-attributes-are-sorted-to-the-end-of-the-block \"Direct link to Block attributes are sorted to the end of the block\")\n\n```\nblock _ {  key   = \"value\"  @@attribute}\n```",
    "title": "Prisma Schema Overview | Prisma Documentation",
    "description": "The Prisma schema is the main method of configuration when using Prisma. It is typically called schema.prisma and contains your database connection and data model.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-schema/data-model",
    "markdown": "# Data model | Prisma Documentation\n\n[\n\n## How to use Prisma ORM with multiple database schemas\n\n](https://www.prisma.io/docs/orm/prisma-schema/data-model/multi-schema)",
    "title": "Data model | Prisma Documentation",
    "description": "Learn everything you need about the Prisma schema data model.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-schema/introspection",
    "markdown": "# What is introspection? (Reference) | Prisma Documentation\n\nYou can introspect your database using the Prisma CLI in order to generate the [data model](https://www.prisma.io/docs/orm/prisma-schema/data-model) in your [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema). The data model is needed to [generate Prisma Client](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/custom-model-and-field-names).\n\nIntrospection is often used to generate an _initial_ version of the data model when [adding Prisma ORM to an existing project](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-postgresql).\n\nHowever, it can also be [used _repeatedly_ in an application](https://www.prisma.io/docs/orm/prisma-schema/introspection#introspection-with-an-existing-schema). This is most commonly the case when you're _not_ using [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate) but perform schema migrations using plain SQL or another migration tool. In that case, you also need to re-introspect your database and subsequently re-generate Prisma Client to reflect the schema changes in your [Prisma Client API](https://www.prisma.io/docs/orm/prisma-client).\n\n## What does introspection do?[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#what-does-introspection-do \"Direct link to What does introspection do?\")\n\nIntrospection has one main function: Populate your Prisma schema with a data model that reflects the current database schema.\n\n![Introspect your database with Prisma](https://www.prisma.io/docs/assets/images/prisma-db-pull-generate-schema-8c7216308f1aa7f7117827cba2c96620.png)\n\nHere's an overview of its main functions on SQL databases:\n\n*   Map _tables_ in the database to [Prisma models](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-models)\n*   Map _columns_ in the database to the [fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-fields) of Prisma models\n*   Map _indexes_ in the database to [indexes](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-an-index) in the Prisma schema\n*   Map _database constraints_ to [attributes](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-attributes) or [type modifiers](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#type-modifiers) in the Prisma schema\n\nOn MongoDB, the main functions are the following:\n\n*   Map _collections_ in the database to [Prisma models](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-models). Because a _collection_ in MongoDB doesn't have a predefined structure, Prisma ORM _samples_ the _documents_ in the collection and derives the model structure accordingly (i.e. it maps the fields of the _document_ to the [fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-fields) of the Prisma model). If _embedded types_ are detected in a collection, these will be mapped to [composite types](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-composite-types) in the Prisma schema.\n*   Map _indexes_ in the database to [indexes](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-an-index) in the Prisma schema, if the collection contains at least one document contains a field included in the index\n\nYou can learn more about how Prisma ORM maps types from the database to the types available in the Prisma schema on the respective docs page for the data source connector:\n\n*   [PostgreSQL](https://www.prisma.io/docs/orm/overview/databases/postgresql#type-mapping-between-postgresql-and-prisma-schema)\n*   [MySQL](https://www.prisma.io/docs/orm/overview/databases/mysql#type-mapping-between-mysql-to-prisma-schema)\n*   [SQLite](https://www.prisma.io/docs/orm/overview/databases/sqlite#type-mapping-between-sqlite-to-prisma-schema)\n*   [Microsoft SQL Server](https://www.prisma.io/docs/orm/overview/databases/sql-server#type-mapping-between-microsoft-sql-server-to-prisma-schema)\n\n## The `prisma db pull` command[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#the-prisma-db-pull-command \"Direct link to the-prisma-db-pull-command\")\n\nYou can introspect your database using the `prisma db pull` command of the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli#installation). Note that using this command requires your [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls) to be set in your Prisma schema [`datasource`](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources).\n\nHere's a high-level overview of the steps that `prisma db pull` performs internally:\n\n1.  Read the [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls) from the `datasource` configuration in the Prisma schema\n2.  Open a connection to the database\n3.  Introspect database schema (i.e. read tables, columns and other structures ...)\n4.  Transform database schema into Prisma schema data model\n5.  Write data model into Prisma schema or [update existing schema](https://www.prisma.io/docs/orm/prisma-schema/introspection#introspection-with-an-existing-schema)\n\n## Introspection workflow[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#introspection-workflow \"Direct link to Introspection workflow\")\n\nThe typical workflow for projects that are not using Prisma Migrate, but instead use plain SQL or another migration tool looks as follows:\n\n1.  Change the database schema (e.g. using plain SQL)\n2.  Run `prisma db pull` to update the Prisma schema\n3.  Run `prisma generate` to update Prisma Client\n4.  Use the updated Prisma Client in your application\n\nNote that as you evolve the application, [this process can be repeated for an indefinite number of times](https://www.prisma.io/docs/orm/prisma-schema/introspection#introspection-with-an-existing-schema).\n\n![Introspect workflow](https://www.prisma.io/docs/assets/images/prisma-evolve-app-workflow-ef3834a9ab4af0633eb1e1ee32d2fde7.png)\n\n## Rules and conventions[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#rules-and-conventions \"Direct link to Rules and conventions\")\n\nPrisma ORM employs a number of conventions for translating a database schema into a data model in the Prisma schema:\n\n### Model, field and enum names[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#model-field-and-enum-names \"Direct link to Model, field and enum names\")\n\nField, model and enum names (identifiers) must start with a letter and generally must only contain underscores, letters and digits. You can find the naming rules and conventions for each of these identifiers on the respective docs page:\n\n*   [Naming models](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#naming-conventions)\n*   [Naming fields](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#naming-conventions-1)\n*   [Naming enums](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#naming-conventions-2)\n\nThe general rule for identifiers is that they need to adhere to this regular expression:\n\n#### Sanitization of invalid characters[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#sanitization-of-invalid-characters \"Direct link to Sanitization of invalid characters\")\n\n**Invalid characters** are being sanitized during introspection:\n\n*   If they appear _before_ a letter in an identifier, they get dropped.\n*   If they appear _after_ the first letter, they get replaced by an underscore.\n\nAdditionally, the transformed name is mapped to the database using `@map` or `@@map` to retain the original name.\n\nConsider the following table as an example:\n\n```\nCREATE TABLE \"42User\" (  _id SERIAL PRIMARY KEY,  _name VARCHAR(255),  two$two INTEGER);\n```\n\nBecause the leading `42` in the table name as well as the leading underscores and the `$` on the columns are forbidden in Prisma ORM, introspection adds the `@map` and `@@map` attributes so that these names adhere to Prisma ORM's naming conventions:\n\n```\nmodel User {  id      Int     @id @default(autoincrement()) @map(\"_id\")  name    String? @map(\"_name\")  two_two Int?    @map(\"two$two\")  @@map(\"42User\")}\n```\n\n#### Duplicate Identifiers after Sanitization[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#duplicate-identifiers-after-sanitization \"Direct link to Duplicate Identifiers after Sanitization\")\n\nIf sanitization results in duplicate identifiers, no immediate error handling is in place. You get the error later and can manually fix it.\n\nConsider the case of the following two tables:\n\n```\nCREATE TABLE \"42User\" (  _id SERIAL PRIMARY KEY);CREATE TABLE \"24User\" (  _id SERIAL PRIMARY KEY);\n```\n\nThis would result in the following introspection result:\n\n```\nmodel User {  id Int @id @default(autoincrement()) @map(\"_id\")  @@map(\"42User\")}model User {  id Int @id @default(autoincrement()) @map(\"_id\")  @@map(\"24User\")}\n```\n\nTrying to generate your Prisma Client with `prisma generate` you would get the following error:\n\nIn this case, you must manually change the name of one of the two generated `User` models because duplicate model names are not allowed in the Prisma schema.\n\n### Order of fields[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#order-of-fields \"Direct link to Order of fields\")\n\nIntrospection lists model fields in the same order as the corresponding table columns in the database.\n\n### Order of attributes[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#order-of-attributes \"Direct link to Order of attributes\")\n\nIntrospection adds attributes in the following order (this order is mirrored by `prisma format`):\n\n*   Block level: `@@id`, `@@unique`, `@@index`, `@@map`\n*   Field level : `@id`, `@unique`, `@default`, `@updatedAt`, `@map`, `@relation`\n\n### Relations[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#relations \"Direct link to Relations\")\n\nPrisma ORM translates foreign keys that are defined on your database tables into [relations](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations).\n\n#### One-to-one relations[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#one-to-one-relations \"Direct link to One-to-one relations\")\n\nPrisma ORM adds a [one-to-one](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/one-to-one-relations) relation to your data model when the foreign key on a table has a `UNIQUE` constraint, e.g.:\n\n```\nCREATE TABLE \"User\" (    id SERIAL PRIMARY KEY);CREATE TABLE \"Profile\" (    id SERIAL PRIMARY KEY,    \"user\" integer NOT NULL UNIQUE,    FOREIGN KEY (\"user\") REFERENCES \"User\"(id));\n```\n\nPrisma ORM translates this into the following data model:\n\n```\nmodel User {  id      Int      @id @default(autoincrement())  Profile Profile?}model Profile {  id   Int  @id @default(autoincrement())  user Int  @unique  User User @relation(fields: [user], references: [id])}\n```\n\n#### One-to-many relations[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#one-to-many-relations \"Direct link to One-to-many relations\")\n\nBy default, Prisma ORM adds a [one-to-many](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/one-to-many-relations) relation to your data model for a foreign key it finds in your database schema:\n\n```\nCREATE TABLE \"User\" (    id SERIAL PRIMARY KEY);CREATE TABLE \"Post\" (    id SERIAL PRIMARY KEY,    \"author\" integer NOT NULL,    FOREIGN KEY (\"author\") REFERENCES \"User\"(id));\n```\n\nThese tables are transformed into the following models:\n\n```\nmodel User {  id   Int    @id @default(autoincrement())  Post Post[]}model Post {  id     Int  @id @default(autoincrement())  author Int  User   User @relation(fields: [author], references: [id])}\n```\n\n#### Many-to-many relations[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#many-to-many-relations \"Direct link to Many-to-many relations\")\n\n[Many-to-many](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations) relations are commonly represented as [relation tables](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations#relation-tables) in relational databases.\n\nPrisma ORM supports two ways for defining many-to-many relations in the Prisma schema:\n\n*   [Implicit many-to-many relations](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations#implicit-many-to-many-relations) (Prisma ORM manages the relation table under the hood)\n*   [Explicit many-to-many relations](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations#explicit-many-to-many-relations) (the relation table is present as a [model](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-models))\n\n_Implicit_ many-to-many relations are recognized if they adhere to Prisma ORM's [conventions for relation tables](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/many-to-many-relations#conventions-for-relation-tables-in-implicit-m-n-relations). Otherwise the relation table is rendered in the Prisma schema as a model (therefore making it an _explicit_ many-to-many relation).\n\nThis topic is covered extensively on the docs page about [Relations](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations).\n\n#### Disambiguating relations[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#disambiguating-relations \"Direct link to Disambiguating relations\")\n\nPrisma ORM generally omits the `name` argument on the [`@relation`](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#the-relation-attribute) attribute if it's not needed. Consider the `User` ↔ `Post` example from the previous section. The `@relation` attribute only has the `references` argument, `name` is omitted because it's not needed in this case:\n\n```\nmodel Post {  id     Int  @id @default(autoincrement())  author Int  User   User @relation(fields: [author], references: [id])}\n```\n\nIt would be needed if there were _two_ foreign keys defined on the `Post` table:\n\n```\nCREATE TABLE \"User\" (    id SERIAL PRIMARY KEY);CREATE TABLE \"Post\" (    id SERIAL PRIMARY KEY,    \"author\" integer NOT NULL,    \"favoritedBy\" INTEGER,    FOREIGN KEY (\"author\") REFERENCES \"User\"(id),    FOREIGN KEY (\"favoritedBy\") REFERENCES \"User\"(id));\n```\n\nIn this case, Prisma ORM needs to [disambiguate the relation](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#disambiguating-relations) using a dedicated relation name:\n\n```\nmodel Post {  id                          Int   @id @default(autoincrement())  author                      Int  favoritedBy                 Int?  User_Post_authorToUser      User  @relation(\"Post_authorToUser\", fields: [author], references: [id])  User_Post_favoritedByToUser User? @relation(\"Post_favoritedByToUser\", fields: [favoritedBy], references: [id])}model User {  id                          Int    @id @default(autoincrement())  Post_Post_authorToUser      Post[] @relation(\"Post_authorToUser\")  Post_Post_favoritedByToUser Post[] @relation(\"Post_favoritedByToUser\")}\n```\n\nNote that you can rename the [Prisma-ORM level](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations#relation-fields) relation field to anything you like so that it looks friendlier in the generated Prisma Client API.\n\n## Introspection with an existing schema[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#introspection-with-an-existing-schema \"Direct link to Introspection with an existing schema\")\n\nRunning `prisma db pull` for relational databases with an existing Prisma Schema merges manual changes made to the schema, with changes made in the database. (This functionality has been added for the first time with version 2.6.0.) For MongoDB, Introspection for now is meant to be done only once for the initial data model. Running it repeatedly will lead to loss of custom changes, as the ones listed below.\n\nIntrospection for relational databases maintains the following manual changes:\n\n*   Order of `model` blocks\n*   Order of `enum` blocks\n*   Comments\n*   `@map` and `@@map` attributes\n*   `@updatedAt`\n*   `@default(cuid())` (`cuid()` is a Prisma-ORM level function)\n*   `@default(uuid())` (`uuid()` is a Prisma-ORM level function)\n*   Custom `@relation` names\n\n> **Note**: Only relations between models on the database level will be picked up. This means that there **must be a foreign key set**.\n\nThe following properties of the schema are determined by the database:\n\n*   Order of fields within `model` blocks\n*   Order of values within `enum` blocks\n\n> **Note**: All `enum` blocks are listed below `model` blocks.\n\n### Force overwrite[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#force-overwrite \"Direct link to Force overwrite\")\n\nTo overwrite manual changes, and generate a schema based solely on the introspected database and ignore any existing Prisma Schema, add the `--force` flag to the `db pull` command:\n\n```\nnpx prisma db pull --force\n```\n\nUse cases include:\n\n*   You want to start from scratch with a schema generated from the underlying database\n*   You have an invalid schema and must use `--force` to make introspection succeed\n\n## Introspecting only a subset of your database schema[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#introspecting-only-a-subset-of-your-database-schema \"Direct link to Introspecting only a subset of your database schema\")\n\nIntrospecting only a subset of your database schema is [not yet officially supported](https://github.com/prisma/prisma/issues/807) by Prisma ORM.\n\nHowever, you can achieve this by creating a new database user that only has access to the tables which you'd like to see represented in your Prisma schema, and then perform the introspection using that user. The introspection will then only include the tables the new user has access to.\n\nIf your goal is to exclude certain models from the [Prisma Client generation](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client), you can add the [`@@ignore` attribute](https://www.prisma.io/docs/orm/reference/prisma-schema-reference#ignore-1) to the model definition in your Prisma schema. Ignored models are excluded from the generated Prisma Client.\n\n## Introspection warnings for unsupported features[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#introspection-warnings-for-unsupported-features \"Direct link to Introspection warnings for unsupported features\")\n\nThe Prisma Schema Language (PSL) can express a majority of the database features of the [target databases](https://www.prisma.io/docs/orm/reference/supported-databases) Prisma ORM supports. However, there are features and functionality the Prisma Schema Language still needs to express.\n\nFor these features, the Prisma CLI will surface detect usage of the feature in your database and return a warning. The Prisma CLI will also add a comment in the models and fields the features are in use in the Prisma schema. The warnings will also contain a workaround suggestion.\n\nThe `prisma db pull` command will surface the following unsupported features:\n\n*   From version [4.13.0](https://github.com/prisma/prisma/releases/tag/4.13.0):\n    *   [Partitioned tables](https://github.com/prisma/prisma/issues/1708)\n    *   [PostgreSQL Row Level Security](https://github.com/prisma/prisma/issues/12735)\n    *   [Index sort order, `NULLS FIRST` / `NULLS LAST`](https://github.com/prisma/prisma/issues/15466)\n    *   [CockroachDB row-level TTL](https://github.com/prisma/prisma/issues/13982)\n    *   [Comments](https://github.com/prisma/prisma/issues/8703)\n    *   [PostgreSQL deferred constraints](https://github.com/prisma/prisma/issues/8807)\n*   From version [4.14.0](https://github.com/prisma/prisma/releases/tag/4.14.0):\n    *   [Check Constraints](https://github.com/prisma/prisma/issues/3388) (MySQL + PostgreSQL)\n    *   [Exclusion Constraints](https://github.com/prisma/prisma/issues/17514)\n    *   [MongoDB $jsonSchema](https://github.com/prisma/prisma/issues/8135)\n*   From version [4.16.0](https://github.com/prisma/prisma/releases/tag/4.16.0):\n    *   [Expression indexes](https://github.com/prisma/prisma/issues/2504)\n\nYou can find the list of features we intend to support on [GitHub (labeled with `topic:database-functionality`)](https://github.com/prisma/prisma/issues?q=is%3Aopen+label%3A%22topic%3A+database-functionality%22+label%3Ateam%2Fschema+sort%3Aupdated-desc+).\n\n### Workaround for introspection warnings for unsupported features[​](https://www.prisma.io/docs/orm/prisma-schema/introspection#workaround-for-introspection-warnings-for-unsupported-features \"Direct link to Workaround for introspection warnings for unsupported features\")\n\nIf you are using a relational database and either one of the above features listed in the previous section:\n\n1.  Create a draft migration:\n    \n    ```\n    npx prisma migrate dev --create-only\n    ```\n    \n2.  Add the SQL that adds the feature surfaced in the warnings.\n3.  Apply the draft migration to your database:",
    "title": "What is introspection? (Reference) | Prisma Documentation",
    "description": "Learn how you can introspect your database to generate a data model into your Prisma schema.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-schema/postgresql-extensions",
    "markdown": "# How to represent PostgreSQL extensions in your Prisma schema\n\nThis page introduces PostgreSQL extensions and describes how to represent extensions in your Prisma schema, how to introspect existing extensions in your database, and how to apply changes to your extensions to your database with Prisma Migrate.\n\nwarning\n\nSupport for declaring PostgreSQL extensions in your schema is available in preview for the PostgreSQL connector only in Prisma versions 4.5.0 and later.\n\n## What are PostgreSQL extensions?[​](https://www.prisma.io/docs/orm/prisma-schema/postgresql-extensions#what-are-postgresql-extensions \"Direct link to What are PostgreSQL extensions?\")\n\nPostgreSQL allows you to extend your database functionality by installing and activating packages known as _extensions_. For example, the `citext` extension adds a case-insensitive string data type. Some extensions, such as `citext`, are supplied directly by PostgreSQL, while other extensions are developed externally. For more information on extensions, see [the PostgreSQL documentation](https://www.postgresql.org/docs/current/sql-createextension.html).\n\nTo use an extension, it must first be _installed_ on the local file system of your database server. You then need to _activate_ the extension, which runs a script file that adds the new functionality.\n\ninfo\n\nNote that PostgreSQL's documentation uses the term 'install' to refer to what we call activating an extension. We have used separate terms here to make it clear that these are two different steps.\n\nPrisma's `postgresqlExtensions` preview feature allows you to represent PostgreSQL extensions in your Prisma schema. Note that specific extensions may add functionality that is not currently supported by Prisma. For example, an extension may add a type or index that is not supported by Prisma. This functionality must be implemented on a case-by-case basis and is not provided by this preview feature.\n\n## How to enable the `postgresqlExtensions` preview feature[​](https://www.prisma.io/docs/orm/prisma-schema/postgresql-extensions#how-to-enable-the-postgresqlextensions-preview-feature \"Direct link to how-to-enable-the-postgresqlextensions-preview-feature\")\n\nRepresenting PostgreSQL extensions in your Prisma Schema is currently a preview feature. To enable the `postgresqlExtensions` preview feature, you will need to add the `postgresqlExtensions` feature flag to the `previewFeatures` field of the `generator` block in your Prisma schema:\n\nschema.prisma\n\n```\ngenerator client {  provider        = \"prisma-client-js\"  previewFeatures = [\"postgresqlExtensions\"]}datasource db {  provider = \"postgresql\"  url      = env(\"DATABASE_URL\")}\n```\n\n## How to represent PostgreSQL extensions in your Prisma schema[​](https://www.prisma.io/docs/orm/prisma-schema/postgresql-extensions#how-to-represent-postgresql-extensions-in-your-prisma-schema \"Direct link to How to represent PostgreSQL extensions in your Prisma schema\")\n\nTo represent PostgreSQL extensions in your Prisma schema, add the `extensions` field to the `datasource` block of your `schema.prisma` file with an array of the extensions that you require. For example, the following schema lists the `hstore`, `pg_trgm` and `postgis` extensions:\n\nschema.prisma\n\n```\ndatasource db {  provider   = \"postgresql\"  url        = env(\"DATABASE_URL\")  extensions = [hstore(schema: \"myHstoreSchema\"), pg_trgm, postgis(version: \"2.1\")]}\n```\n\nEach extension name in the Prisma schema can take the following optional arguments:\n\n*   `schema`: the name of the schema in which to activate the extension's objects. If this argument is not specified, the current default object creation schema is used.\n*   `version`: the version of the extension to activate. If this argument is not specified, the value given in the extension's control file is used.\n*   `map`: the database name of the extension. If this argument is not specified, the name of the extension in the Prisma schema must match the database name.\n\nIn the example above, the `hstore` extension uses the `myHstoreSchema` schema, and the `postgis` extension is activated with version 2.1 of the extension.\n\nThe `map` argument is useful when the PostgreSQL extension that you want to activate has a name that is not a valid identifier in the Prisma schema. For example, the `uuid-ossp` PostgreSQL extension name is an invalid identifier because it contains a hyphen. In the following example, the extension is mapped to the valid name `uuidOssp` in the Prisma schema:\n\nschema.prisma\n\n```\ndatasource db {  provider   = \"postgresql\"  url        = env(\"DATABASE_URL\")  extensions = [uuidOssp(map: \"uuid-ossp\")]}\n```\n\n## How to introspect PostgreSQL extensions[​](https://www.prisma.io/docs/orm/prisma-schema/postgresql-extensions#how-to-introspect-postgresql-extensions \"Direct link to How to introspect PostgreSQL extensions\")\n\nTo [introspect](https://www.prisma.io/docs/orm/prisma-schema/introspection) PostgreSQL extensions currently activated in your database and add relevant extensions to your Prisma schema, run `npx prisma db pull`.\n\nMany PostgreSQL extensions are not relevant to the Prisma schema. For example, some extensions are intended for database administration tasks that do not change the schema. If all these extensions were included, the list of extensions would be very long. To avoid this, Prisma maintains an allowlist of known relevant extensions. The current allowlist is the following:\n\n*   [`citext`](https://www.postgresql.org/docs/current/citext.html): provides a case-insensitive character string type, `citext`\n*   [`pgcrypto`](https://www.postgresql.org/docs/current/pgcrypto.html): provides cryptographic functions, like `gen_random_uuid()`, to generate universally unique identifiers (UUIDs v4)\n*   [`uuid-ossp`](https://www.postgresql.org/docs/current/uuid-ossp.html): provides functions, like `uuid_generate_v4()`, to generate universally unique identifiers (UUIDs v4)\n*   [`postgis`](https://postgis.net/): adds GIS (Geographic Information Systems) support\n\n**Note**: Since PostgreSQL v13, `gen_random_uuid()` can be used without an extension to generate universally unique identifiers (UUIDs v4).\n\nExtensions are introspected as follows:\n\n*   The first time you introspect, all database extensions that are on the allowlist are added to your Prisma schema\n*   When you re-introspect, the behavior depends on whether the extension is on the allowlist or not.\n    *   Extensions on the allowlist:\n        *   are **added** to your Prisma schema if they are in the database but not in the Prisma schema\n        *   are **kept** in your Prisma schema if they are in the Prisma schema and in the database\n        *   are **removed** from your Prisma schema if they are in the Prisma schema but not the database\n    *   Extensions not on the allowlist:\n        *   are **kept** in your Prisma schema if they are in the Prisma schema and in the database\n        *   are **removed** from your Prisma schema if they are in the Prisma schema but not the database\n\nThe `version` argument will not be added to the Prisma schema when you introspect.\n\n## How to migrate PostgreSQL extensions[​](https://www.prisma.io/docs/orm/prisma-schema/postgresql-extensions#how-to-migrate-postgresql-extensions \"Direct link to How to migrate PostgreSQL extensions\")\n\nYou can update your list of PostgreSQL extensions in your Prisma schema and apply the changes to your database with [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate).\n\nThis works in a similar way to migration of other elements of your Prisma schema, such as models or fields. However, there are the following differences:\n\n*   If you remove an extension from your schema but it is still activated on your database, Prisma Migrate will not deactivate it from the database.\n*   If you add a new extension to your schema, it will only be activated if it does not already exist in the database, because the extension may already have been created manually.\n*   If you remove the `version` or `schema` arguments from the extension definition, it has no effect to the extensions in the database in the following migrations.",
    "title": "How to represent PostgreSQL extensions in your Prisma schema | Prisma Documentation",
    "description": "How to represent PostgreSQL extensions in your Prisma scheme, introspect extensions in your database, and apply changes to extensions with Prisma Migrate",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration",
    "markdown": "# Setup & configuration | Prisma Documentation\n\nThis section describes how to set up, generate, configure, and instantiate `PrismaClient` , as well as when and how to actively [manage connections](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/databases-connections/connection-management).\n\n## In this section[​](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration#in-this-section \"Direct link to In this section\")\n\n[\n\n## Introduction\n\n](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/introduction)\n\n[\n\n## Generating Prisma Client\n\n](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client)\n\n[\n\n## Instantiating Prisma Client\n\n](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/instantiate-prisma-client)\n\n[\n\n## Database connections\n\n](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/databases-connections)\n\n[\n\n## Custom model and field names\n\n](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/custom-model-and-field-names)\n\n[\n\n## Configuring error formatting\n\n](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/error-formatting)\n\n[\n\n## Read replicas\n\n](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/read-replicas)\n\n[\n\n## Database polyfills\n\n](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/database-polyfills)",
    "title": "Setup & configuration | Prisma Documentation",
    "description": "This section explains how to generate, configure, and instantiate Prisma Client, as well as when and how to manage database connections.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-client/queries",
    "markdown": "# Prisma Client Queries | Prisma Documentation\n\n[\n\n## Aggregation, grouping, and summarizing\n\n](https://www.prisma.io/docs/orm/prisma-client/queries/aggregation-grouping-summarizing)",
    "title": "Prisma Client Queries | Prisma Documentation",
    "description": "Learn about the database queries you can send with Prisma Client.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types",
    "markdown": "# Fields & types | Prisma Documentation\n\nThis section covers various special fields and types you can use with Prisma Client.\n\n## Working with `Decimal`[​](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types#working-with-decimal \"Direct link to working-with-decimal\")\n\n`Decimal` fields are represented by the [`Decimal.js` library](https://mikemcl.github.io/decimal.js/). The following example demonstrates how to import and use `Prisma.Decimal`:\n\n```\nimport { PrismaClient, Prisma } from '@prisma/client'const newTypes = await prisma.sample.create({  data: {    cost: new Prisma.Decimal(24.454545),  },})\n```\n\n  \n\n## Working with `BigInt`[​](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types#working-with-bigint \"Direct link to working-with-bigint\")\n\n`BigInt` fields are represented by the [`BigInt` type](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) (Node.js 10.4.0+ required). The following example demonstrates how to use the `BigInt` type:\n\n```\nimport { PrismaClient, Prisma } from '@prisma/client'const newTypes = await prisma.sample.create({  data: {    revenue: BigInt(534543543534),  },})\n```\n\n### Serializing BigInt[​](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types#serializing-bigint \"Direct link to Serializing BigInt\")\n\nPrisma Client returns records as plain JavaScript objects. If you attempt to use `JSON.stringify` on an object that includes a `BigInt` field, you will see the following error:\n\n```\nDo not know how to serialize a BigInt\n```\n\nTo work around this issue, use a customized implementation of `JSON.stringify`:\n\n```\nJSON.stringify(  this,  (key, value) => (typeof value === 'bigint' ? value.toString() : value) // return everything else unchanged)\n```\n\n## Working with `Bytes`[​](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types#working-with-bytes \"Direct link to working-with-bytes\")\n\n`Bytes` fields are represented by the [`Buffer`](https://nodejs.org/api/buffer.html) type. The following example demonstrates how to use the `Buffer` type:\n\n```\nimport { PrismaClient, Prisma } from '@prisma/client'const newTypes = await prisma.sample.create({  data: {    myField: Buffer.from([1, 2, 3, 4]),  },})\n```\n\n## Working with `Json`[​](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types#working-with-json \"Direct link to working-with-json\")\n\nSee: [Working with `Json` fields](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-json-fields)\n\n## Working with scalar lists / scalar arrays[​](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types#working-with-scalar-lists--scalar-arrays \"Direct link to Working with scalar lists / scalar arrays\")\n\nSee: [Working with scalar lists / arrays](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-scalar-lists-arrays)\n\n## Working with composite IDs and compound unique constraints[​](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types#working-with-composite-ids-and-compound-unique-constraints \"Direct link to Working with composite IDs and compound unique constraints\")\n\nSee: [Working with composite IDs and compound unique constraints](https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-composite-ids-and-constraints)",
    "title": "Fields & types | Prisma Documentation",
    "description": "Learn how to use about special fields and types with Prisma Client.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-client/client-extensions",
    "markdown": "# Prisma Client extensions | Prisma Documentation\n\ninfo\n\nPrisma Client extensions are Generally Available from versions 4.16.0 and later. They were introduced in Preview in version 4.7.0. Make sure you enable the `clientExtensions` Preview feature flag if you are running on a version earlier than 4.16.0.\n\nYou can use Prisma Client extensions to add functionality to your models, result objects, and queries, or to add client-level methods.\n\nYou can create an extension with one or more of the following component types:\n\n*   `model`: [add custom methods or fields to your models](https://www.prisma.io/docs/orm/prisma-client/client-extensions/model)\n*   `client`: [add client-level methods to Prisma Client](https://www.prisma.io/docs/orm/prisma-client/client-extensions/client)\n*   `query`: [create custom Prisma Client queries](https://www.prisma.io/docs/orm/prisma-client/client-extensions/query)\n*   `result`: [add custom fields to your query results](https://www.prisma.io/docs/orm/prisma-client/client-extensions/result)\n\nFor example, you might create an extension that uses the `model` and `client` component types.\n\n## About Prisma Client extensions[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#about-prisma-client-extensions \"Direct link to About Prisma Client extensions\")\n\nWhen you use a Prisma Client extension, you create an _extended client_. An extended client is a lightweight variant of the standard Prisma Client that is wrapped by one or more extensions. The standard client is not mutated. You can add as many extended clients as you want to your project. [Learn more about extended clients](https://www.prisma.io/docs/orm/prisma-client/client-extensions#extended-clients).\n\nYou can associate a single extension, or multiple extensions, with an extended client. [Learn more about multiple extensions](https://www.prisma.io/docs/orm/prisma-client/client-extensions#multiple-extensions).\n\nYou can [share your Prisma Client extensions](https://www.prisma.io/docs/orm/prisma-client/client-extensions/shared-extensions) with other Prisma ORM users, and [import Prisma Client extensions developed by other users](https://www.prisma.io/docs/orm/prisma-client/client-extensions/shared-extensions#install-a-shared-packaged-extension) into your Prisma ORM project.\n\n### Extended clients[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#extended-clients \"Direct link to Extended clients\")\n\nExtended clients interact with each other, and with the standard client, as follows:\n\n*   Each extended client operates independently in an isolated instance.\n*   Extended clients cannot conflict with each other, or with the standard client.\n*   All extended clients and the standard client communicate with the same [Prisma ORM query engine](https://www.prisma.io/docs/orm/more/under-the-hood/engines).\n*   All extended clients and the standard client share the same connection pool.\n\n> **Note**: The author of an extension can modify this behavior since they're able to run arbitrary code as part of an extension. For example, an extension might actually create an entirely new `PrismaClient` instance (including its own query engine and connection pool). Be sure to check the documentation of the extension you're using to learn about any specific behavior it might implement.\n\n### Example use cases for extended clients[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#example-use-cases-for-extended-clients \"Direct link to Example use cases for extended clients\")\n\nBecause extended clients operate in isolated instances, they can be a good way to do the following, for example:\n\n*   Implement row-level security (RLS), where each HTTP request has its own client with its own RLS extension, customized with session data. This can keep each user entirely separate, each in a separate client.\n*   Add a `user.current()` method for the `User` model to get the currently logged-in user.\n*   Enable more verbose logging for requests if a debug cookie is set.\n*   Attach a unique request id to all logs so that you can correlate them later, for example to help you analyze the operations that Prisma Client carries out.\n*   Remove a `delete` method from models unless the application calls the admin endpoint and the user has the necessary privileges.\n\n## Add an extension to Prisma Client[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#add-an-extension-to-prisma-client \"Direct link to Add an extension to Prisma Client\")\n\nYou can create an extension using two primary ways:\n\n*   Use the client-level [`$extends`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#client-methods) method\n    \n    ```\n    const xprisma = prisma.$extends({  name: 'signUp', // Optional: name appears in error logs  model: {        // This is a `model` component    user: { ... } // The extension logic for the `user` model goes inside the curly braces  },})\n    ```\n    \n*   Use the `Prisma.defineExtension` method to define an extension and assign it to a variable, and then pass the extension to the client-level `$extends` method\n    \n    ```\n    import { Prisma } from '@prisma/client'// Define the extensionconst myExtension = Prisma.defineExtension({  name: 'signUp', // Optional: name appears in error logs  model: {        // This is a `model` component    user: { ... } // The extension logic for the `user` model goes inside the curly braces  },})// Pass the extension to a Prisma Client instanceconst xprisma = prisma.$extends(myExtension)\n    ```\n    \n    tip\n    \n    This pattern is useful for when you would like to separate extensions into multiple files or directories within a project.\n    \n\nThe above examples use the [`model` extension component](https://www.prisma.io/docs/orm/prisma-client/client-extensions/model) to extend the `User` model.\n\nIn your `$extends` method, use the appropriate extension component or components ([`model`](https://www.prisma.io/docs/orm/prisma-client/client-extensions/model), [`client`](https://www.prisma.io/docs/orm/prisma-client/client-extensions/client), [`result`](https://www.prisma.io/docs/orm/prisma-client/client-extensions/result) or [`query`](https://www.prisma.io/docs/orm/prisma-client/client-extensions/query)).\n\n## Name an extension for error logs[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#name-an-extension-for-error-logs \"Direct link to Name an extension for error logs\")\n\nYou can name your extensions to help identify them in error logs. To do so, use the optional field `name`. For example:\n\n```\nconst prisma = new PrismaClient().$extends({  name: `signUp`,  // (Optional) Extension name  model: {    user: { ... } },})\n```\n\n## Multiple extensions[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#multiple-extensions \"Direct link to Multiple extensions\")\n\nYou can associate an extension with an [extended client](https://www.prisma.io/docs/orm/prisma-client/client-extensions#about-prisma-client-extensions) in one of two ways:\n\n*   You can associate it with an extended client on its own, or\n*   You can combine the extension with other extensions and associate all of these extensions with an extended client. The functionality from these combined extensions applies to the same extended client. Note: [Combined extensions can conflict](https://www.prisma.io/docs/orm/prisma-client/client-extensions#conflicts-in-combined-extensions).\n\nYou can combine the two approaches above. For example, you might associate one extension with its own extended client and associate two other extensions with another extended client. [Learn more about how client instances interact](https://www.prisma.io/docs/orm/prisma-client/client-extensions#extended-clients).\n\n### Apply multiple extensions to an extended client[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#apply-multiple-extensions-to-an-extended-client \"Direct link to Apply multiple extensions to an extended client\")\n\nIn the following example, suppose that you have two extensions, `extensionA` and `extensionB`. There are two ways to combine these.\n\n#### Option 1: Declare the new client in one line[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#option-1-declare-the-new-client-in-one-line \"Direct link to Option 1: Declare the new client in one line\")\n\nWith this option, you apply both extensions to a new client in one line of code.\n\n```\n// First of all, store your original Prisma Client in a variable as usualconst prisma = new PrismaClient()// Declare an extended client that has an extensionA and extensionBconst prismaAB = prisma.$extends(extensionA).$extends(extensionB)\n```\n\nYou can then refer to `prismaAB` in your code, for example `prismaAB.myExtensionMethod()`.\n\n#### Option 2: Declare multiple extended clients[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#option-2-declare-multiple-extended-clients \"Direct link to Option 2: Declare multiple extended clients\")\n\nThe advantage of this option is that you can call any of the extended clients separately.\n\n```\n// First of all, store your original Prisma Client in a variable as usualconst prisma = new PrismaClient()// Declare an extended client that has extensionA appliedconst prismaA = prisma.$extends(extensionA)// Declare an extended client that has extensionB appliedconst prismaB = prisma.$extends(extensionB)// Declare an extended client that is a combination of clientA and clientBconst prismaAB = prismaA.$extends(extensionB)\n```\n\nIn your code, you can call any of these clients separately, for example `prismaA.myExtensionMethod()`, `prismaB.myExtensionMethod()`, or `prismaAB.myExtensionMethod()`.\n\n### Conflicts in combined extensions[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#conflicts-in-combined-extensions \"Direct link to Conflicts in combined extensions\")\n\nWhen you combine two or more extensions into a single extended client, then the _last_ extension that you declare takes precedence in any conflict. In the example in option 1 above, suppose there is a method called `myExtensionMethod()` defined in `extensionA` and a method called `myExtensionMethod()` in `extensionB`. When you call `prismaAB.myExtensionMethod()`, then Prisma Client uses `myExtensionMethod()` as defined in `extensionB`.\n\n## Type of an extended client[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#type-of-an-extended-client \"Direct link to Type of an extended client\")\n\nYou can infer the type of an extended Prisma Client instance using the [`typeof`](https://www.typescriptlang.org/docs/handbook/2/typeof-types.html) utility as follows:\n\n```\nconst extendedPrismaClient = new PrismaClient().$extends({  /** extension */})type ExtendedPrismaClient = typeof extendedPrismaClient\n```\n\nIf you're using Prisma Client as a singleton, you can get the type of the extended Prisma Client instance using the `typeof` and [`ReturnType`](https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype) utilities as follows:\n\n```\nfunction getExtendedClient() {  return new PrismaClient().$extends({    /* extension */  })}type ExtendedPrismaClient = ReturnType<typeof getExtendedClient>\n```\n\n## Limitations[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#limitations \"Direct link to Limitations\")\n\n### Usage of `$on` and `$use` with extended clients[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#usage-of-on-and-use-with-extended-clients \"Direct link to usage-of-on-and-use-with-extended-clients\")\n\n`$on` and `$use` are not available in extended clients. If you would like to continue using these [client-level methods](https://www.prisma.io/docs/orm/reference/prisma-client-reference#client-methods) with an extended client, you will need to hook them up before extending the client.\n\n```\nconst prisma = new PrismaClient()prisma.$use(async (params, next) => {  console.log('This is middleware!')  return next(params)})const xPrisma = prisma.$extends({  name: 'myExtension',  model: {    user: {      async signUp(email: string) {        await prisma.user.create({ data: { email } })      },    },  },})\n```\n\nTo learn more, see our documentation on [`$on`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#on) and [`$use`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#use)\n\n### Usage of client-level methods in extended clients[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#usage-of-client-level-methods-in-extended-clients \"Direct link to Usage of client-level methods in extended clients\")\n\n[Client-level methods](https://www.prisma.io/docs/orm/reference/prisma-client-reference#client-methods) do not necessarily exist on extended clients. For these clients you will need to first check for existence before using.\n\n```\nconst xPrisma = prisma.$extends(...);if (xPrisma.$connect) {  xPrisma.$connect()}\n```\n\n### Usage with nested operations[​](https://www.prisma.io/docs/orm/prisma-client/client-extensions#usage-with-nested-operations \"Direct link to Usage with nested operations\")\n\nThe `query` extension type does not support nested read and write operations.",
    "title": "Prisma Client extensions | Prisma Documentation",
    "description": "Extend the functionality of Prisma Client",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-client/type-safety",
    "markdown": "# Type safety | Prisma Documentation\n\nThe generated code for Prisma Client contains several helpful types and utilities that you can use to make your application more type-safe. This page describes patterns for leveraging them.\n\n> **Note**: If you're interested in advanced type safety topics with Prisma ORM, be sure to check out this [blog post](https://www.prisma.io/blog/satisfies-operator-ur8ys8ccq7zb) about improving your Prisma Client workflows with the new TypeScript `satisfies` keyword.\n\n## Importing generated types[​](https://www.prisma.io/docs/orm/prisma-client/type-safety#importing-generated-types \"Direct link to Importing generated types\")\n\nYou can import the `Prisma` namespace and use dot notation to access types and utilities. The following example shows how to import the `Prisma` namespace and use it to access and use the `Prisma.UserSelect` [generated type](https://www.prisma.io/docs/orm/prisma-client/type-safety#what-are-generated-types):\n\n```\nimport { Prisma } from '@prisma/client'// Build 'select' objectconst userEmail: Prisma.UserSelect = {  email: true,}// Use select objectconst createUser = await prisma.user.create({  data: {    email: 'bob@prisma.io',  },  select: userEmail,})\n```\n\nSee also: [Using the `Prisma.UserCreateInput` generated type](https://www.prisma.io/docs/orm/prisma-client/queries/crud#create-a-single-record-using-generated-types)\n\n## What are generated types?[​](https://www.prisma.io/docs/orm/prisma-client/type-safety#what-are-generated-types \"Direct link to What are generated types?\")\n\nGenerated types are TypeScript types that are derived from your models. You can use them to create typed objects that you pass into top-level methods like `prisma.user.create(...)` or `prisma.user.update(...)`, or options such as `select` or `include`.\n\nFor example, `select` accepts an object of type `UserSelect`. Its object properties match those that are supported by `select` statements according to the model.\n\nThe first tab below shows the `UserSelect` generated type and how each property on the object has a type annotation. The second tab shows the resulting schema model.\n\n*   Generated type\n*   Model\n\n```\ntype Prisma.UserSelect = {    id?: boolean | undefined;    email?: boolean | undefined;    name?: boolean | undefined;    posts?: boolean | Prisma.PostFindManyArgs | undefined;    profile?: boolean | Prisma.ProfileArgs | undefined;}\n```\n\nIn TypeScript the concept of [type annotations](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-annotations-on-variables) is when you declare a variable and add a type annotation to describe the type of the variable. See the below example.\n\n```\nconst myAge: number = 37const myName: string = 'Rich'\n```\n\nBoth of these variable declarations have been given a type annotation to specify what primitive type they are, `number` and `string` respectively. Most of the time this kind of annotation is not needed as TypeScript will infer the type of the variable based on how its initialized. In the above example `myAge` was initialized with a number so TypeScript guesses that it should be typed as a number.\n\nGoing back to the `UserSelect` type, if you were to use dot notation on the created object `userEmail`, you would have access to all of the fields on the `User` model that can be interacted with using a `select` statement.\n\n```\nmodel User {  id      Int      @id @default(autoincrement())  email   String   @unique  name    String?  posts   Post[]  profile Profile?}\n```\n\n```\nimport { Prisma } from '@prisma/client'const userEmail: Prisma.UserSelect = {  email: true,}// properties available on the typed objectuserEmail.iduserEmail.emailuserEmail.nameuserEmail.postsuserEmail.profile\n```\n\nIn the same mould, you can type an object with an `include` generated type then your object would have access to those properties on which you can use an `include` statement.\n\n```\nimport { Prisma } from '@prisma/client'const userPosts: Prisma.UserInclude = {  posts: true,}// properties available on the typed objectuserPosts.postsuserPosts.profile\n```\n\n> See the [model query options](https://www.prisma.io/docs/orm/reference/prisma-client-reference#model-query-options) reference for more information about the different types available.\n\n### Generated `UncheckedInput` types[​](https://www.prisma.io/docs/orm/prisma-client/type-safety#generated-uncheckedinput-types \"Direct link to generated-uncheckedinput-types\")\n\nThe `UncheckedInput` types are a special set of generated types that allow you to perform some operations that Prisma Client considers \"unsafe\", like directly writing [relation scalar fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations). You can choose either the \"safe\" `Input` types or the \"unsafe\" `UncheckedInput` type when doing operations like `create`, `update`, or `upsert`.\n\nFor example, this Prisma schema has a one-to-many relation between `User` and `Post`:\n\n```\nmodel Post {  id       Int     @id @default(autoincrement())  title    String  @db.VarChar(255)  content  String?  author   User    @relation(fields: [authorId], references: [id])  authorId Int}model User {  id    Int     @id @default(autoincrement())  email String  @unique  name  String?  posts Post[]}\n```\n\nThe first tab shows the `PostUncheckedCreateInput` generated type. It contains the `authorId` property, which is a relation scalar field. The second tab shows an example query that uses the `PostUncheckedCreateInput` type. This query will result in an error if a user with an `id` of `1` does not exist.\n\n*   Generated type\n*   Example query\n\n```\ntype PostUncheckedCreateInput = {  id?: number  title: string  content?: string | null  authorId: number}\n```\n\nThe same query can be rewritten using the \"safer\" `PostCreateInput` type. This type does not contain the `authorId` field but instead contains the `author` relation field.\n\n*   Generated type\n*   Example query\n\n```\ntype PostCreateInput = {  title: string  content?: string | null  author: UserCreateNestedOneWithoutPostsInput}type UserCreateNestedOneWithoutPostsInput = {  create?: XOR<    UserCreateWithoutPostsInput,    UserUncheckedCreateWithoutPostsInput  >  connectOrCreate?: UserCreateOrConnectWithoutPostsInput  connect?: UserWhereUniqueInput}\n```\n\nThis query will also result in an error if an author with an `id` of `1` does not exist. In this case, Prisma Client will give a more descriptive error message. You can also use the [`connectOrCreate`](https://www.prisma.io/docs/orm/reference/prisma-client-reference#connectorcreate) API to safely create a new user if one does not already exist with the given `id`.\n\nWe recommend using the \"safe\" `Input` types whenever possible.\n\n## Type utilities[​](https://www.prisma.io/docs/orm/prisma-client/type-safety#type-utilities \"Direct link to Type utilities\")\n\ninfo\n\nThis feature is available from Prisma ORM version 4.9.0 upwards.\n\nTo help you create highly type-safe applications, Prisma Client provides a set of type utilities that tap into input and output types. These types are fully dynamic, which means that they adapt to any given model and schema. You can use them to improve the auto-completion and developer experience of your projects.\n\nThis is especially useful in [validating inputs](https://www.prisma.io/docs/orm/prisma-client/type-safety/prisma-validator) and [shared Prisma Client extensions](https://www.prisma.io/docs/orm/prisma-client/client-extensions/shared-extensions).\n\nThe following type utilities are available in Prisma Client:\n\n*   `Exact<Input, Shape>`: Enforces strict type safety on `Input`. `Exact` makes sure that a generic type `Input` strictly complies with the type that you specify in `Shape`. It [narrows](https://www.typescriptlang.org/docs/handbook/2/narrowing.html) `Input` down to the most precise types.\n*   `Args<Type, Operation>`: Retrieves the input arguments for any given model and operation. This is particularly useful for extension authors who want to do the following:\n    *   Re-use existing types to extend or modify them.\n    *   Benefit from the same auto-completion experience as on existing operations.\n*   `Result<Type, Arguments, Operation>`: Takes the input arguments and provides the result for a given model and operation. You would usually use this in conjunction with `Args`. As with `Args`, `Result` helps you to re-use existing types to extend or modify them.\n*   `Payload<Type, Operation>`: Retrieves the entire structure of the result, as scalars and relations objects for a given model and operation. For example, you can use this to determine which keys are scalars or objects at a type level.\n\nAs an example, here's a quick way you can enforce that the arguments to a function matches what you will pass to a `post.create`:\n\n```\ntype PostCreateBody = Prisma.Args<typeof prisma.post, 'create'>['data']const addPost = async (postBody: PostCreateBody) => {  const post = await prisma.post.create({ data: postBody })  return post}await addPost(myData)//              ^ guaranteed to match the input of `post.create`\n```",
    "title": "Type safety | Prisma Documentation",
    "description": "Prisma Client provides full type safety for queries, even for partial queries or included relations. This page explains how to leverage the generated types and utilities.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-client/observability-and-logging",
    "markdown": "# Observability & logging | Prisma Documentation\n\n## In this section[​](https://www.prisma.io/docs/orm/prisma-client/observability-and-logging#in-this-section \"Direct link to In this section\")\n\n[\n\n## Logging\n\n](https://www.prisma.io/docs/orm/prisma-client/observability-and-logging/logging)\n\n[\n\n## Metrics\n\n](https://www.prisma.io/docs/orm/prisma-client/observability-and-logging/metrics)\n\n[\n\n## OpenTelemetry tracing\n\n](https://www.prisma.io/docs/orm/prisma-client/observability-and-logging/opentelemetry-tracing)",
    "title": "Observability & logging | Prisma Documentation",
    "description": "Observability & logging",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-client/debugging-and-troubleshooting",
    "markdown": "# Debugging & troubleshooting | Prisma Documentation\n\nDebugging & troubleshooting\n\n## In this section[​](https://www.prisma.io/docs/orm/prisma-client/debugging-and-troubleshooting#in-this-section \"Direct link to In this section\")\n\n[\n\n## Debugging\n\n](https://www.prisma.io/docs/orm/prisma-client/debugging-and-troubleshooting/debugging)\n\n[\n\n## Handling exceptions and errors\n\n](https://www.prisma.io/docs/orm/prisma-client/debugging-and-troubleshooting/handling-exceptions-and-errors)",
    "title": "Debugging & troubleshooting | Prisma Documentation",
    "description": "Debugging & troubleshooting",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-client/testing",
    "markdown": "# Testing with Prisma ORM | Prisma Documentation\n\nThis section describes how to approach testing an application that uses Prisma Client.\n\n[\n\n## Unit testing\n\n](https://www.prisma.io/docs/orm/prisma-client/testing/unit-testing)\n\n[\n\n## Integration testing\n\n](https://www.prisma.io/docs/orm/prisma-client/testing/integration-testing)",
    "title": "Testing with Prisma ORM | Prisma Documentation",
    "description": "How to implement unit and integration testing with Prisma ORM",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-migrate/getting-started",
    "markdown": "# Getting started | Prisma Documentation\n\nThis page explains how to get started with migrating your schema in a development environment using Prisma Migrate. See [Developing with Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate) for a more in-depth development workflow.\n\n## Get started with Prisma Migrate from scratch[​](https://www.prisma.io/docs/orm/prisma-migrate/getting-started#get-started-with-prisma-migrate-from-scratch \"Direct link to Get started with Prisma Migrate from scratch\")\n\nTo get started with Prisma Migrate in a development environment:\n\n1.  Create a Prisma schema:\n    \n    schema.prisma\n    \n    ```\n    datasource db {  provider = \"postgresql\"  url      = env(\"DATABASE_URL\")}model User {  id    Int    @id @default(autoincrement())  name  String  posts Post[]}model Post {  id        Int     @id @default(autoincrement())  title     String  published Boolean @default(true)  authorId  Int  author    User    @relation(fields: [authorId], references: [id])}\n    ```\n    \n    tip\n    \n    You can use [native type mapping attributes](https://www.prisma.io/docs/orm/prisma-migrate/workflows/native-database-types) in your schema to decide which exact database type to create (for example, `String` can map to `varchar(100)` or `text`).\n    \n    1.  Create the first migration:\n    \n    ```\n    prisma migrate dev --name init\n    ```\n    \n    Your Prisma schema is now in sync with your database schema and you have initialized a migration history:\n    \n    ```\n    migrations/  └─ 20210313140442_init/    └─ migration.sql\n    ```\n    \n2.  Add additional fields to your schema:\n    \n    ```\n    model User {  id       Int    @id @default(autoincrement())  jobTitle String  name     String  posts    Post[]}\n    ```\n    \n3.  Create the second migration:\n    \n    ```\n    prisma migrate dev --name added_job_title\n    ```\n    \n    Your Prisma schema is once again in sync with your database schema, and your migration history contains two migrations:\n    \n    ```\n    migrations/  └─ 20210313140442_init/    └─ migration.sql  └─ 20210313140442_added_job_title/    └─ migration.sql\n    ```\n    \n\nYou now have a migration history that you can [source control](https://www.prisma.io/docs/orm/prisma-migrate/understanding-prisma-migrate/migration-histories#committing-the-migration-history-to-source-control) and use to [deploy changes to test environments and production](https://www.prisma.io/docs/orm/prisma-migrate/workflows/development-and-production#production-and-testing-environments).\n\n## Adding Prisma Migrate to an existing project[​](https://www.prisma.io/docs/orm/prisma-migrate/getting-started#adding-prisma-migrate-to-an-existing-project \"Direct link to Adding Prisma Migrate to an existing project\")\n\nThe steps involved in **adding Prisma Migrate to your existing project** are:\n\n1.  Introspect your database to update your Prisma schema\n2.  Create a baseline migration\n3.  Update your schema or migration to workaround features not supported by Prisma Schema Language\n4.  Apply the baseline migration\n5.  Commit the migration history and Prisma schema\n\n### Introspect to create or update your Prisma schema[​](https://www.prisma.io/docs/orm/prisma-migrate/getting-started#introspect-to-create-or-update-your-prisma-schema \"Direct link to Introspect to create or update your Prisma schema\")\n\nMake sure your Prisma schema is in sync with your database schema. This should already be true if you are using a previous version of Prisma Migrate.\n\n1.  Introspect the database to make sure that your Prisma schema is up-to-date:\n    \n\n### Create a baseline migration[​](https://www.prisma.io/docs/orm/prisma-migrate/getting-started#create-a-baseline-migration \"Direct link to Create a baseline migration\")\n\nBaselining is the process of initializing a migration history for a database that:\n\n*   ✔ Existed before you started using Prisma Migrate\n*   ✔ Contains data that must be maintained (like production), which means that the database cannot be reset\n\nBaselining tells Prisma Migrate to assume that one or more migrations have **already been applied**. This prevents generated migrations from failing when they try to create tables and fields that already exist.\n\nTo create a baseline migration:\n\n1.  If you have a `prisma/migrations` folder, delete, move, rename, or archive this folder.\n    \n2.  Run the following command to create a `migrations` directory inside with your preferred name. This example will use `0_init` for the migration name:\n    \n    ```\n    mkdir -p prisma/migrations/0_init\n    ```\n    \n    info\n    \n    The `0_` is important because Prisma Migrate applies migrations in a [lexicographic order](https://en.wikipedia.org/wiki/Lexicographic_order). You can use a different value such as the current timestamp.\n    \n3.  Generate a migration and save it to a file using `prisma migrate diff`\n    \n    ```\n    npx prisma migrate diff \\--from-empty \\--to-schema-datamodel prisma/schema.prisma \\--script > prisma/migrations/0_init/migration.sql\n    ```\n    \n4.  Review the generated migration\n    \n\n### Work around features not supported by Prisma Schema Language[​](https://www.prisma.io/docs/orm/prisma-migrate/getting-started#work-around-features-not-supported-by-prisma-schema-language \"Direct link to Work around features not supported by Prisma Schema Language\")\n\nTo include [unsupported database features](https://www.prisma.io/docs/orm/prisma-migrate/workflows/unsupported-database-features) that already exist in the database, you must replace or modify the initial migration SQL:\n\n1.  Open the `migration.sql` file generated in the [Create a baseline migration](https://www.prisma.io/docs/orm/prisma-migrate/getting-started#create-a-baseline-migration) section.\n    \n2.  Modify the generated SQL. For example:\n    \n\n*   If the changes are minor, you can append additional custom SQL to the generated migration - the following example creates a partial index:\n    \n    ```\n    /* Generated migration SQL */CREATE UNIQUE INDEX tests_success_constraint ON posts (subject, target)  WHERE success;\n    ```\n    \n*   If the changes are significant, it can be easier to replace the entire migration file with the result of a database dump ([`mysqldump`](https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html), [`pg_dump`](https://www.postgresql.org/docs/12/app-pgdump.html))\n    \n\ninfo\n\nNote that the order of the tables matters when creating all of them at once, since foreign keys are created at the same step. Therefore, either re-order them or move constraint creation to the last step after all tables are created, so you won't face `can't create constraint` errors\n\n### Apply the initial migrations[​](https://www.prisma.io/docs/orm/prisma-migrate/getting-started#apply-the-initial-migrations \"Direct link to Apply the initial migrations\")\n\nTo apply your initial migration(s):\n\n1.  Run the following command against your database:\n    \n    ```\n    npx prisma migrate resolve --applied 0_init\n    ```\n    \n2.  Review the database schema to ensure the migration leads to the desired end-state (for example, by comparing the schema to the production database).\n    \n\nThe new migration history and the database schema should now be in sync with your Prisma schema.\n\n### Commit the migration history and Prisma schema[​](https://www.prisma.io/docs/orm/prisma-migrate/getting-started#commit-the-migration-history-and-prisma-schema \"Direct link to Commit the migration history and Prisma schema\")\n\nCommit the following to source control:\n\n*   The entire migration history folder\n*   The `schema.prisma` file\n\n## Going further[​](https://www.prisma.io/docs/orm/prisma-migrate/getting-started#going-further \"Direct link to Going further\")\n\n*   Refer to the [Deploying database changes with Prisma Migrate](https://www.prisma.io/docs/orm/prisma-client/deployment/deploy-database-changes-with-prisma-migrate) guide for more on deploying migrations to production.\n*   Refer to the [Production Troubleshooting](https://www.prisma.io/docs/orm/prisma-migrate/workflows/patching-and-hotfixing#fixing-failed-migrations-with-migrate-diff-and-db-execute) guide to learn how to debug and resolve failed migrations in production using `prisma migrate diff`, `prisma db execute` and/ or `prisma migrate resolve`.",
    "title": "Getting started | Prisma Documentation",
    "description": "Getting started",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-migrate/understanding-prisma-migrate",
    "markdown": "# Understanding Prisma Migrate | Prisma Documentation\n\n[\n\n## About migration histories\n\n](https://www.prisma.io/docs/orm/prisma-migrate/understanding-prisma-migrate/migration-histories)",
    "title": "Understanding Prisma Migrate | Prisma Documentation",
    "description": "Learn about the mental model and basic building blocks of Prisma Migrate.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/prisma-migrate/workflows",
    "markdown": "# Workflows | Prisma Documentation\n\n## In this section[​](https://www.prisma.io/docs/orm/prisma-migrate/workflows#in-this-section \"Direct link to In this section\")\n\n[\n\n## Seeding\n\n](https://www.prisma.io/docs/orm/prisma-migrate/workflows/seeding)\n\n[\n\n## Prototyping your schema\n\n](https://www.prisma.io/docs/orm/prisma-migrate/workflows/prototyping-your-schema)\n\n[\n\n## Baselining a database\n\n](https://www.prisma.io/docs/orm/prisma-migrate/workflows/baselining)\n\n[\n\n## Customizing migrations\n\n](https://www.prisma.io/docs/orm/prisma-migrate/workflows/customizing-migrations)\n\n[\n\n## Data migrations\n\n](https://www.prisma.io/docs/orm/prisma-migrate/workflows/data-migration)\n\n[\n\n## Squashing migrations\n\n](https://www.prisma.io/docs/orm/prisma-migrate/workflows/squashing-migrations)\n\n[\n\n## Generating down migrations\n\n](https://www.prisma.io/docs/orm/prisma-migrate/workflows/generating-down-migrations)\n\n[\n\n## Patching & hotfixing\n\n](https://www.prisma.io/docs/orm/prisma-migrate/workflows/patching-and-hotfixing)\n\n[\n\n## Unsupported database features\n\n](https://www.prisma.io/docs/orm/prisma-migrate/workflows/unsupported-database-features)\n\n[\n\n## Development and production\n\n](https://www.prisma.io/docs/orm/prisma-migrate/workflows/development-and-production)\n\n[\n\n## Team development\n\n](https://www.prisma.io/docs/orm/prisma-migrate/workflows/team-development)\n\n[\n\n## Native database types\n\n](https://www.prisma.io/docs/orm/prisma-migrate/workflows/native-database-types)\n\n[\n\n## Native database functions\n\n](https://www.prisma.io/docs/orm/prisma-migrate/workflows/native-database-functions)\n\n[\n\n## Troubleshooting\n\n](https://www.prisma.io/docs/orm/prisma-migrate/workflows/troubleshooting)",
    "title": "Workflows | Prisma Documentation",
    "description": "Learn about important Prisma Migrate workflows, like seeding, prototyping, baselining, & more.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/tools",
    "markdown": "# Tools | Prisma Documentation\n\n## In this section[​](https://www.prisma.io/docs/orm/tools#in-this-section \"Direct link to In this section\")\n\n[\n\n## Prisma CLI\n\n](https://www.prisma.io/docs/orm/tools/prisma-cli)\n\n[\n\n## Prisma Studio\n\n](https://www.prisma.io/docs/orm/tools/prisma-studio)",
    "title": "Tools | Prisma Documentation",
    "description": "Learn about important Prisma tools.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/reference",
    "markdown": "# Reference | Prisma Documentation\n\nThe reference section of the documentation is a collection of reference pages that describe the Prisma ORM APIs and database implementations.\n\n## In this section[​](https://www.prisma.io/docs/orm/reference#in-this-section \"Direct link to In this section\")\n\n[\n\n## Prisma Client API\n\n](https://www.prisma.io/docs/orm/reference/prisma-client-reference)\n\n[\n\n## Prisma Schema\n\n](https://www.prisma.io/docs/orm/reference/prisma-schema-reference)\n\n[\n\n## Prisma CLI\n\n](https://www.prisma.io/docs/orm/reference/prisma-cli-reference)\n\n[\n\n## Errors\n\n](https://www.prisma.io/docs/orm/reference/error-reference)\n\n[\n\n## Environment variables\n\n](https://www.prisma.io/docs/orm/reference/environment-variables-reference)\n\n[\n\n## Database features matrix\n\n](https://www.prisma.io/docs/orm/reference/database-features)\n\n[\n\n## Supported databases\n\n](https://www.prisma.io/docs/orm/reference/supported-databases)\n\n[\n\n## Connection URLs\n\n](https://www.prisma.io/docs/orm/reference/connection-urls)\n\n[\n\n## System requirements\n\n](https://www.prisma.io/docs/orm/reference/system-requirements)\n\n[\n\n## Preview features\n\n](https://www.prisma.io/docs/orm/reference/preview-features)",
    "title": "Reference | Prisma Documentation",
    "description": "Reference for Prisma Client API, Prisma CLI, errors & more.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/reference/environment-variables-reference",
    "markdown": "# Prisma environment variables | Prisma Documentation\n\n## Environment variables reference\n\nThis document describes different environment variables and their use cases.\n\n## Prisma Client[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma-client \"Direct link to Prisma Client\")\n\n### `DEBUG`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#debug \"Direct link to debug\")\n\n`DEBUG` is used to enable debugging output in Prisma Client.\n\nExample setting Prisma Client level debugging output:\n\n```\n# enable only `prisma:client`-level debugging outputexport DEBUG=\"prisma:client\"\n```\n\nSee [Debugging](https://www.prisma.io/docs/orm/prisma-client/debugging-and-troubleshooting/debugging) for more information.\n\n### `NO_COLOR`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#no_color \"Direct link to no_color\")\n\n`NO_COLOR` if [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) will activate the `colorless` setting for error formatting and strip colors from error messages.\n\nSee [Formatting via environment variables](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/error-formatting#formatting-via-environment-variables) for more information.\n\n## Prisma Studio[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma-studio \"Direct link to Prisma Studio\")\n\n### `BROWSER`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#browser \"Direct link to browser\")\n\n`BROWSER` is for Prisma Studio to force which browser it should be open in, if not set it will open in the default browser.\n\n```\nBROWSER=firefox prisma studio --port 5555\n```\n\nAlternatively you can set this when starting Studio from the CLI as well:\n\n```\nprisma studio --browser firefox\n```\n\nSee [Studio](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#studio) documentation for more information.\n\n## Prisma CLI[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma-cli \"Direct link to Prisma CLI\")\n\n### `PRISMA_HIDE_PREVIEW_FLAG_WARNINGS`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_hide_preview_flag_warnings \"Direct link to prisma_hide_preview_flag_warnings\")\n\n`PRISMA_HIDE_PREVIEW_FLAG_WARNINGS` hides the warning message that states that a preview feature flag can be removed. It is a truthy value.\n\n### `PRISMA_HIDE_UPDATE_MESSAGE`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_hide_update_message \"Direct link to prisma_hide_update_message\")\n\n`PRISMA_HIDE_UPDATE_MESSAGE` is used to hide the update notification message that is shown when a newer Prisma CLI version is available. It's a truthy value.\n\n### `PRISMA_GENERATE_SKIP_AUTOINSTALL`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_generate_skip_autoinstall \"Direct link to prisma_generate_skip_autoinstall\")\n\n`PRISMA_GENERATE_SKIP_AUTOINSTALL` can be set to a truthy value to skip the auto-install of `prisma` CLI and `@prisma/client` dependencies (if they are missing), if the `prisma-client-js` generator is defined in the Prisma Schema, when using the `prisma generate` command.\n\n### `PRISMA_SKIP_POSTINSTALL_GENERATE`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_skip_postinstall_generate \"Direct link to prisma_skip_postinstall_generate\")\n\n`PRISMA_SKIP_POSTINSTALL_GENERATE` can be set to a truthy value to skip the auto-generation of Prisma Client when its `postinstall` hook is triggered by a package manager. The `postinstall` hook of the `@prisma/client` package is triggered when the package is installed, or its version is updated.\n\n### `PRISMA_DISABLE_WARNINGS`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_disable_warnings \"Direct link to prisma_disable_warnings\")\n\nDisables all CLI warnings generated by `logger.warn`.\n\n### `PRISMA_GENERATE_NO_ENGINE`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_generate_no_engine \"Direct link to prisma_generate_no_engine\")\n\ninfo\n\nThis environment variable is available since version `5.2.0`\n\n`PRISMA_GENERATE_NO_ENGINE` can be set to a truthy value to generate a Prisma Client without an included [query engine](https://www.prisma.io/docs/orm/more/under-the-hood/engines) in order to reduce deployed application size when paired with [Prisma Accelerate](https://www.prisma.io/docs/accelerate).\n\n### `PRISMA_SCHEMA_DISABLE_ADVISORY_LOCK`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_schema_disable_advisory_lock \"Direct link to prisma_schema_disable_advisory_lock\")\n\ninfo\n\nThis environment variable is available since version `5.3.0`\n\n`PRISMA_SCHEMA_DISABLE_ADVISORY_LOCK` can be set to a truthy value to disable the [advisory locking](https://www.prisma.io/docs/orm/prisma-migrate/workflows/development-and-production#advisory-locking) used by Prisma Migrate. This might be needed, depending on the database configuration, for example, for a Percona-XtraDB-Cluster or MariaDB Galera Cluster.\n\nThe Prisma CLI supports custom HTTP(S) proxies to download the Prisma engines. These can be helpful to use when working behind a corporate firewall. See [Using a HTTP proxy for the CLI](https://www.prisma.io/docs/orm/reference/prisma-cli-reference#using-a-http-proxy-for-the-cli) for more information.\n\n### `NO_PROXY`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#no_proxy \"Direct link to no_proxy\")\n\n`NO_PROXY` is a comma-separated list of hostnames or IP addresses that do not require a proxy.\n\n```\nNO_PROXY=myhostname.com,10.11.12.0/16,172.30.0.0/16\n```\n\n### `HTTP_PROXY`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#http_proxy \"Direct link to http_proxy\")\n\n`HTTP_PROXY` is set with the hostname or IP address of a proxy server.\n\n```\nHTTP_PROXY=http://proxy.example.com\n```\n\n### `HTTPS_PROXY`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#https_proxy \"Direct link to https_proxy\")\n\n`HTTPS_PROXY` is set with the hostname or IP address of a proxy server.\n\n```\nHTTPS_PROXY=https://proxy.example.com\n```\n\n## Engine environment variables[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#engine-environment-variables \"Direct link to Engine environment variables\")\n\n### Configuring Query Engine Type[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#configuring-query-engine-type \"Direct link to Configuring Query Engine Type\")\n\n#### `PRISMA_CLI_QUERY_ENGINE_TYPE`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_cli_query_engine_type \"Direct link to prisma_cli_query_engine_type\")\n\n`PRISMA_CLI_QUERY_ENGINE_TYPE` is used to [define the query engine type Prisma CLI downloads and uses](https://www.prisma.io/docs/orm/more/under-the-hood/engines#configuring-the-query-engine). Defaults to `library`, but can be set to `binary`:\n\n```\nPRISMA_CLI_QUERY_ENGINE_TYPE=binary\n```\n\n#### `PRISMA_CLIENT_ENGINE_TYPE`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_client_engine_type \"Direct link to prisma_client_engine_type\")\n\n`PRISMA_CLIENT_ENGINE_TYPE` is used to [define the query engine type Prisma Client downloads and uses](https://www.prisma.io/docs/orm/more/under-the-hood/engines#configuring-the-query-engine). Defaults to `library`, but can be set to `binary`:\n\n```\nPRISMA_CLIENT_ENGINE_TYPE=binary\n```\n\nNote: You need to generate your Prisma Client after setting this variable for the configuration to take effect and the libraries to be downloaded. Otherwise, Prisma Client will be missing the appropriate query engine library and you will _have to_ define their location using [`PRISMA_QUERY_ENGINE_LIBRARY`](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_query_engine_library).\n\nIt is the environment variable equivalent for the [`engineType` property of the `generator` block](https://www.prisma.io/docs/orm/more/under-the-hood/engines#configuring-the-query-engine) which enables you to define the same setting in your Prisma Schema.\n\n### Downloading Engines[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#downloading-engines \"Direct link to Downloading Engines\")\n\n#### `PRISMA_ENGINES_MIRROR`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_engines_mirror \"Direct link to prisma_engines_mirror\")\n\n`PRISMA_ENGINES_MIRROR` can be used to specify a custom CDN (or server) endpoint to download the engines files for the CLI/Client. The default value is `https://binaries.prisma.sh`, where Prisma hosts the engine files.\n\n```\nPRISMA_ENGINES_MIRROR=https://example.org/custom-engines/\n```\n\nSee [Prisma engines](https://www.prisma.io/docs/orm/more/under-the-hood/engines#hosting-engines) for a conceptual overview of how to use this environment variable.\n\nNote: This environment variable used to be available as `PRISMA_BINARIES_MIRROR`, which was deprecated in Prisma ORM 3.0.1. It is discouraged to use anymore and will be removed in the future.\n\n#### `PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_engines_checksum_ignore_missing \"Direct link to prisma_engines_checksum_ignore_missing\")\n\ninfo\n\nThis environment variable is available since version `4.16.0`\n\n`PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING` can be can be set to a truthy value to ignore problems around downloading & verifying the integrity (via a checksum file) of the Prisma ORM engines. This is particularly useful when deploying to an offline system environment where the checksum file cannot be downloaded.\n\n```\nPRISMA_ENGINES_CHECKSUM_IGNORE_MISSING=1\n```\n\nNote: we might change the overall download behavior in a future release in a way that this environment variable will not be needed anymore in a offline environment case.\n\n### Custom engine file locations[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#custom-engine-file-locations \"Direct link to Custom engine file locations\")\n\nBy default, all engine files are downloaded when you install Prisma CLI, copied when generating Prisma Client, and put into known locations. There are however situations where you may want to use a custom engine file from custom locations:\n\n#### `PRISMA_QUERY_ENGINE_BINARY`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_query_engine_binary \"Direct link to prisma_query_engine_binary\")\n\n`PRISMA_QUERY_ENGINE_BINARY` is used to set a custom location for your own query engine binary.\n\n```\nPRISMA_QUERY_ENGINE_BINARY=custom/query-engine-<target># Example: ./prisma/binaries/query-engine-linux-arm64-openssl-1.0.x\n```\n\nFor Prisma CLI it allows you to define the query engine file to be used.  \nFor Prisma Client, on build time (during `prisma generate`), it defines where the query engine file will be copied from into Prisma Client. At run time (when using the generated Client) it can be used to define the specific query engine file to be used instead of the included one.\n\nNote: This can only have an effect if the engine type of CLI or Client are set to `binary`. If the engine type is `library` (the default), use PRISMA\\_QUERY\\_ENGINE\\_LIBARY instead.\n\n#### `PRISMA_QUERY_ENGINE_LIBRARY`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_query_engine_library \"Direct link to prisma_query_engine_library\")\n\n`PRISMA_QUERY_ENGINE_LIBRARY` is used to set a custom location for your own query engine library.\n\n```\nPRISMA_QUERY_ENGINE_LIBRARY=custom/libquery_engine-<target>.so.node# Example: ./prisma/binaries/libquery_engine-linux-arm64-openssl-1.0.x.so.node\n```\n\nFor Prisma CLI it allows you to define the query engine file to be used.  \nFor Prisma Client, on build time (during `prisma generate`), it defines where the query engine file will be copied from into Prisma Client. At run time (when using the generated Client) it can be used to define the specific query engine file to be used instead of the included one.\n\nNote: This can only have an effect if the engine type of CLI or Client are set to `library` (the default)\n\n#### `PRISMA_SCHEMA_ENGINE_BINARY`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_schema_engine_binary \"Direct link to prisma_schema_engine_binary\")\n\n`PRISMA_SCHEMA_ENGINE_BINARY` is used to set a custom location for your Schema engine binary.\n\n```\nPRISMA_SCHEMA_ENGINE_BINARY=custom/my-schema-engine-unix\n```\n\n#### `PRISMA_MIGRATION_ENGINE_BINARY`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_migration_engine_binary \"Direct link to prisma_migration_engine_binary\")\n\nwarning\n\n**Deprecated**: `PRISMA_MIGRATION_ENGINE_BINARY` variable is deprecated in [5.0.0](https://github.com/prisma/prisma/releases/tag/5.0.0) because Migration engine was renamed to Schema Engine.\n\n`PRISMA_MIGRATION_ENGINE_BINARY` is used to set a custom location for your own migration engine binary.\n\n```\nPRISMA_MIGRATION_ENGINE_BINARY=custom/my-migration-engine-unix\n```\n\n#### `PRISMA_INTROSPECTION_ENGINE_BINARY`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_introspection_engine_binary \"Direct link to prisma_introspection_engine_binary\")\n\n`PRISMA_INTROSPECTION_ENGINE_BINARY` is used to set a custom location for your own introspection engine binary.\n\n```\nPRISMA_INTROSPECTION_ENGINE_BINARY=custom/my-introspection-engine-unix\n```\n\nwarning\n\nThe Introspection Engine is served by the Migration Engine from [4.9.0](https://github.com/prisma/prisma/releases/tag/4.9.0). Therefore, the `PRISMA_INTROSPECTION_ENGINE` environment variable will not be used.\n\n#### `PRISMA_FMT_BINARY`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_fmt_binary \"Direct link to prisma_fmt_binary\")\n\ndanger\n\nThis functionality has been removed in Prisma CLI version 4.10.0. It only works in earlier versions.\n\n`PRISMA_FMT_BINARY` is used to set a custom location for your own format engine binary.\n\n```\nPRISMA_FMT_BINARY=custom/my-custom-format-engine-unix\n```\n\nwarning\n\nThe `PRISMA_FMT_BINARY` variable is used in versions [4.2.0](https://github.com/prisma/prisma/releases/tag/4.2.0) or lower.\n\n### CLI Binary Targets[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#cli-binary-targets \"Direct link to CLI Binary Targets\")\n\n#### `PRISMA_CLI_BINARY_TARGETS`[​](https://www.prisma.io/docs/orm/reference/environment-variables-reference#prisma_cli_binary_targets \"Direct link to prisma_cli_binary_targets\")\n\n`PRISMA_CLI_BINARY_TARGETS` can be used to specify one or more binary targets that Prisma CLI will download during installation (so it must be provided during `npm install` of Prisma CLI and does not affect runtime of Prisma CLI or Prisma Client).\n\nUse `PRISMA_CLI_BINARY_TARGETS` if you 1) deploy to a specific platform via an upload of a local project that includes dependencies, and 2) your local environment is different from the target (e.g. AWS Lambda with Node.js 20+ is `rhel-openssl-3.0.x`, and your local environment might be macOS arm64 `darwin-arm64`). Using the `PRISMA_CLI_BINARY_TARGETS` environment variable ensures that the target engine files are also downloaded.\n\n```\nPRISMA_CLI_BINARY_TARGETS=darwin-arm64,rhel-openssl-3.0.x npm install\n```\n\nThis is the Prisma CLI equivalent for the [`binaryTargets` property of the `generator` block](https://www.prisma.io/docs/orm/prisma-schema/overview/generators#binary-targets), which enables you to define the same setting for Prisma Client.\n\n> **Note**: For Node.js versions earlier than 20, the openssl version was 1.0.x instead of 3.0.x. This is most obvious in AWS Lambda deployments, where the binary target would be `rhel-openssl-1.0.x` instead of `rhel-openssl-3.0.x`.",
    "title": "Prisma environment variables | Prisma Documentation",
    "description": "This page gives an overview of all environment variables available for use.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/reference/supported-databases",
    "markdown": "# Databases supported by Prisma ORM\n\nPrisma ORM currently supports the following databases.\n\n> See also: [System requirements](https://www.prisma.io/docs/orm/reference/system-requirements).\n\nAn asterisk (\\*) indicates that the version number is not relevant; either all versions are supported, there is not a public version number, etc.\n\n## Self-hosted databases[​](https://www.prisma.io/docs/orm/reference/supported-databases#self-hosted-databases \"Direct link to Self-hosted databases\")\n\n| Database | Version |\n| --- | --- |\n| CockroachDB | 21.2.4+ |\n| MariaDB | 10.0+ |\n| MariaDB | 11.0+ |\n| Microsoft SQL Server | 2017 |\n| Microsoft SQL Server | 2019 |\n| Microsoft SQL Server | 2022 |\n| MongoDB | 4.2+ |\n| MySQL | 5.6 |\n| MySQL | 5.7 |\n| MySQL | 8.0 |\n| PostgreSQL | 9.6 |\n| PostgreSQL | 10  |\n| PostgreSQL | 11  |\n| PostgreSQL | 12  |\n| PostgreSQL | 13  |\n| PostgreSQL | 14  |\n| PostgreSQL | 15  |\n| PostgreSQL | 16  |\n| SQLite | \\*  |\n\nNote that a fixed version of SQLite is shipped with every Prisma ORM release.\n\n## Managed databases[​](https://www.prisma.io/docs/orm/reference/supported-databases#managed-databases \"Direct link to Managed databases\")\n\n| Database | Version |\n| --- | --- |\n| AWS Aurora | \\*  |\n| AWS Aurora Serverless ¹ | \\*  |\n| Azure SQL | \\*  |\n| CockroachDB-as-a-Service | \\*  |\n| MongoDB Atlas | \\*  |\n| Neon Serverless Postgres | \\*  |\n| PlanetScale | \\*  |\n| Cloudflare D1 (Preview) | \\*  |\n\n¹ This does not include support for [Data API for Aurora Serverless](https://github.com/prisma/prisma/issues/1964).",
    "title": "Databases supported by Prisma ORM | Prisma Documentation",
    "description": "This page lists all the databases and their versions that are supported by Prisma ORM.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/reference/connection-urls",
    "markdown": "# Connection URLs (Reference) | Prisma Documentation\n\nPrisma ORM needs a connection URL to be able to connect to your database, e.g. when sending queries with [Prisma Client](https://www.prisma.io/docs/orm/prisma-client) or when changing the database schema with [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate).\n\nThe connection URL is provided via the `url` field of a `datasource` block in your Prisma schema. It generally consists of the following components (except for SQLite):\n\n*   **User**: The name of your database user\n*   **Password**: The password for your database user\n*   **Host**: The IP or domain name of the machine where your database server is running\n*   **Port**: The port on which your database server is running\n*   **Database name**: The name of the database you want to use\n\nMake sure you have this information at hand when getting started with Prisma ORM. If you don't have a database server running yet, you can either use a local SQLite database file (see the [Quickstart](https://www.prisma.io/docs/getting-started/quickstart)) or [setup a free PostgreSQL database on Supabase](https://dev.to/prisma/set-up-a-free-postgresql-database-on-supabase-to-use-with-prisma-3pk6).\n\n## Format[​](https://www.prisma.io/docs/orm/reference/connection-urls#format \"Direct link to Format\")\n\nThe format of the connection URL depends on the _database connector_ you're using. Prisma ORM generally supports the standard formats for each database. You can find out more about the connection URL of your database on the dedicated docs page:\n\n*   [PostgreSQL](https://www.prisma.io/docs/orm/overview/databases/postgresql)\n*   [MySQL](https://www.prisma.io/docs/orm/overview/databases/mysql)\n*   [SQLite](https://www.prisma.io/docs/orm/overview/databases/sqlite)\n*   [MongoDB](https://www.prisma.io/docs/orm/overview/databases/mongodb)\n*   [Microsoft SQL Server](https://www.prisma.io/docs/orm/overview/databases/sql-server)\n*   [CockroachDB](https://www.prisma.io/docs/orm/overview/databases/cockroachdb)\n\n### Special characters[​](https://www.prisma.io/docs/orm/reference/connection-urls#special-characters \"Direct link to Special characters\")\n\nFor MySQL, PostgreSQL and CockroachDB you must [percentage-encode special characters](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding) in any part of your connection URL - including passwords. For example, `p@$$w0rd` becomes `p%40%24%24w0rd`.\n\nFor Microsoft SQL Server, you must [escape special characters](https://www.prisma.io/docs/orm/overview/databases/sql-server#connection-details) in any part of your connection string.\n\n## Examples[​](https://www.prisma.io/docs/orm/reference/connection-urls#examples \"Direct link to Examples\")\n\nHere are examples for the connection URLs of the databases Prisma ORM supports:\n\n### PostgreSQL[​](https://www.prisma.io/docs/orm/reference/connection-urls#postgresql \"Direct link to PostgreSQL\")\n\nschema.prisma\n\n```\ndatasource db {  provider = \"postgresql\"  url      = \"postgresql://janedoe:mypassword@localhost:5432/mydb?schema=sample\"}\n```\n\n### MySQL[​](https://www.prisma.io/docs/orm/reference/connection-urls#mysql \"Direct link to MySQL\")\n\nschema.prisma\n\n```\ndatasource db {  provider = \"mysql\"  url      = \"mysql://janedoe:mypassword@localhost:3306/mydb\"}\n```\n\n### Microsoft SQL Server[​](https://www.prisma.io/docs/orm/reference/connection-urls#microsoft-sql-server \"Direct link to Microsoft SQL Server\")\n\nschema.prisma\n\n```\ndatasource db {  provider = \"sqlserver\"  url      = \"sqlserver://localhost:1433;initial catalog=sample;user=sa;password=mypassword;\"}\n```\n\n### SQLite[​](https://www.prisma.io/docs/orm/reference/connection-urls#sqlite \"Direct link to SQLite\")\n\nschema.prisma\n\n```\ndatasource db {  provider = \"sqlite\"  url      = \"file:./dev.db\"}\n```\n\n### CockroachDB[​](https://www.prisma.io/docs/orm/reference/connection-urls#cockroachdb \"Direct link to CockroachDB\")\n\nschema.prisma\n\n```\ndatasource db {  provider = \"cockroachdb\"  url      = \"postgresql://janedoe:mypassword@localhost:26257/mydb?schema=public\"}\n```\n\n### MongoDB[​](https://www.prisma.io/docs/orm/reference/connection-urls#mongodb \"Direct link to MongoDB\")\n\nschema.prisma\n\n```\ndatasource db {  provider = \"mongodb\"  url      = \"mongodb+srv://root:<password>@cluster0.ab1cd.mongodb.net/myDatabase?retryWrites=true&w=majority\"}\n```\n\n## .env[​](https://www.prisma.io/docs/orm/reference/connection-urls#env \"Direct link to .env\")\n\nYou can also provide the connection URL as an environment variable:\n\nschema.prisma\n\n```\ndatasource db {  provider = \"postgresql\"  url      = env(\"DATABASE_URL\")}\n```\n\nYou can then either set the environment variable in your terminal or by providing a [dotenv](https://github.com/motdotla/dotenv) file named `.env`. This will automatically be picked up by the Prisma CLI.\n\nPrisma ORM reads the connection URL from the dotenv file in the following situations:\n\n*   When it updates the schema during build time\n*   When it connects to the database during run time\n\n```\nDATABASE_URL=postgresql://janedoe:mypassword@localhost:5432/mydb\n```",
    "title": "Connection URLs (Reference) | Prisma Documentation",
    "description": "Learn about the format and syntax Prisma ORM uses for defining database connection URLs for PostgreSQL, MySQL and SQLite.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/reference/system-requirements",
    "markdown": "# System requirements (Reference) | Prisma Documentation\n\nThis page provides an overview of the system requirements for Prisma ORM.\n\n## System requirements[​](https://www.prisma.io/docs/orm/reference/system-requirements#system-requirements \"Direct link to System requirements\")\n\nThis section lists the software that Prisma ORM requires and the supported operating systems, along with runtime dependency requirements for specific operating systems.\n\n### Software requirements[​](https://www.prisma.io/docs/orm/reference/system-requirements#software-requirements \"Direct link to Software requirements\")\n\nThe latest version of Prisma ORM requires the following software:\n\n|     | Minimum required version |\n| --- | --- |\n| Node.js | 16.13 / 18.X / 20.X |\n| TypeScript (optional) | 4.7.X |\n| Yarn (optional) | 1.19.2 |\n\nNotes:\n\n*   Prisma ORM supports and tests all _Active LTS_ and _Maintenance LTS_ **Node.js** releases. [Releases that are not in these states like _Current_, and also odd-numbered versions](https://nodejs.org/en/about/releases/) probably also work, but are not recommended for production use.\n*   **TypeScript** is only required for TypeScript users.\n*   When using **Yarn 1**, `1.19.2` is the minimum version compatible with Prisma Client.\n\nSee also: [Supported database versions](https://www.prisma.io/docs/orm/reference/supported-databases)\n\n### Operating systems[​](https://www.prisma.io/docs/orm/reference/system-requirements#operating-systems \"Direct link to Operating systems\")\n\nPrisma ORM is supported on MacOS, Windows and most Linux distributions.\n\n#### Linux runtime dependencies[​](https://www.prisma.io/docs/orm/reference/system-requirements#linux-runtime-dependencies \"Direct link to Linux runtime dependencies\")\n\nPrisma ORM requires the following system libraries to be installed to work:\n\n*   OpenSSL 1.0.x, 1.1.x or 3.x\n*   zlib (`libz.so.1`)\n*   libgcc (`libgcc_s.so.1`)\n*   C standard library (glibc on most Linux distributions or musl libc on Alpine Linux)\n\nThe following two tables show the supported Linux distro families, OpenSSL versions and C standard libraries for each CPU architecture.\n\nOn `AMD64` (`x86_64`) architecture:\n\n| Distro family | OpenSSL version | libc version |\n| --- | --- | --- |\n| Alpine | 1.1.x, 3.x | musl 1.2.x |\n| RHEL | 1.0.x, 1.1.x, 3.x | glibc 2.17+ |\n| Debian or others | 1.0.x | glibc 2.19+ |\n| Debian or others | 1.1.x, 3.x | glibc 2.24+ |\n\nOn `ARM64` (`aarch64`) architecture:\n\n| Distro family | OpenSSL version | libc version |\n| --- | --- | --- |\n| Alpine | 1.1.x, 3.x | musl 1.2.x |\n| RHEL | 1.0.x, 1.1.x, 3.x | glibc 2.24+ |\n| Debian or others | 1.0.x, 1.1.x, 3.x | glibc 2.24+ |\n\nWhen Prisma ORM can not resolve the OpenSSL version on a system (e.g. because it is not installed), it will default to OpenSSL 1.1.x.\n\nSystems that can run the supported Node.js versions will most likely have zlib and libgcc available. One notable exception is Google's Distroless images, where `libz.so.1` needs to be copied from a compatible Debian system.\n\n#### Windows runtime dependencies[​](https://www.prisma.io/docs/orm/reference/system-requirements#windows-runtime-dependencies \"Direct link to Windows runtime dependencies\")\n\nOn Windows [Microsoft Visual C++ Redistributable 2015](https://download.microsoft.com/download/9/3/F/93FCF1E7-E6A4-478B-96E7-D4B285925B00/vc_redist.x64.exe) or newer must be installed (which is by default the case on most modern installations).\n\n#### macOS runtime dependencies[​](https://www.prisma.io/docs/orm/reference/system-requirements#macos-runtime-dependencies \"Direct link to macOS runtime dependencies\")\n\nPrisma ORM supports macOS 10.15 or newer. There are no additional platform-specific requirements on macOS other than what is listed for all platforms in the [Software requirements](https://www.prisma.io/docs/orm/reference/system-requirements#software-requirements) section.\n\n## Troubleshooting[​](https://www.prisma.io/docs/orm/reference/system-requirements#troubleshooting \"Direct link to Troubleshooting\")\n\nThere are some common problems caused by using outdated versions of the system requirements:\n\n### Unable to build a TypeScript project with `@prisma/client`[​](https://www.prisma.io/docs/orm/reference/system-requirements#unable-to-build-a-typescript-project-with-prismaclient \"Direct link to unable-to-build-a-typescript-project-with-prismaclient\")\n\n#### Problem[​](https://www.prisma.io/docs/orm/reference/system-requirements#problem \"Direct link to Problem\")\n\nYou see the following error when you try type-checking a project after you run `prisma generate`.\n\n```\n./node_modules/.prisma/client/index.d.ts:10:33Type error: Type expected.   8 | export type PrismaPromise<A> = Promise<A> & {[prisma]: true}   9 | type UnwrapTuple<Tuple extends readonly unknown[]> = {> 10 |   [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : never : never     |                                 ^  11 | };  12 |  13 |\n```\n\n#### Solution[​](https://www.prisma.io/docs/orm/reference/system-requirements#solution \"Direct link to Solution\")\n\nUpgrade the TypeScript dependency in your project to a [version supported by Prisma ORM](https://www.prisma.io/docs/orm/reference/system-requirements#software-requirements). `npm install -D typescript`.\n\n### Unable to use `groupBy` preview feature[​](https://www.prisma.io/docs/orm/reference/system-requirements#unable-to-use-groupby-preview-feature \"Direct link to unable-to-use-groupby-preview-feature\")\n\n#### Problem[​](https://www.prisma.io/docs/orm/reference/system-requirements#problem-1 \"Direct link to Problem\")\n\nYou see the following console error when you attempt to run an app that uses the `groupBy` preview feature:\n\n```\nserver.ts:6:25 - error TS2615: Type of property 'OR' circularly references itself in mapped type '{ [K in keyof { AND?: Enumerable<ProductScalarWhereWithAggregatesInput>; OR?: Enumerable<ProductScalarWhereWithAggregatesInput>; ... 4 more ...; category?: string | StringWithAggregatesFilter; }]: Or<...> extends 1 ? { ...; }[K] extends infer TK ? GetHavingFields<...> : never : {} extends FieldPaths<...> ? never : K...'.6   const grouped = await prisma.product.groupBy({                          ~~~~~~~~~~~~~~~~~~~~~~~~7     by: ['category']  ~~~~~~~~~~~~~~~~~~~~8   });  ~~~~server.ts:6:48 - error TS2554: Expected 0 arguments, but got 1.6   const grouped = await prisma.product.groupBy({                                                 ~7     by: ['category']  ~~~~~~~~~~~~~~~~~~~~8   });  ~~~\n```\n\n#### Solution[​](https://www.prisma.io/docs/orm/reference/system-requirements#solution-1 \"Direct link to Solution\")\n\nUpgrade the TypeScript dependency in your project to a [version supported by Prisma ORM](https://www.prisma.io/docs/orm/reference/system-requirements#software-requirements). `npm install -D typescript`.",
    "title": "System requirements (Reference) | Prisma Documentation",
    "description": "System requirements for running Prisma ORM",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/pulse/database-setup/general-database-instructions",
    "markdown": "# Prisma Pulse: General instructions | Prisma Documentation\n\ninfo\n\nPrisma Pulse requires a publicly accessible PostgreSQL (**version 12+**) database with logical replication enabled. To configure specific database providers for Prisma Pulse, visit [here](https://www.prisma.io/docs/pulse/database-setup#provider-specific-instructions).\n\nDatabase replication is the process of creating copies of a database and storing them across various on-premises or cloud destinations. Prisma Pulse uses logical replication to monitor your database for changes.\n\n## Enable logical replication[​](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#enable-logical-replication \"Direct link to Enable logical replication\")\n\n### Required settings[​](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#required-settings \"Direct link to Required settings\")\n\nYou can enable logical replication by setting [`wal_level`](https://www.postgresql.org/docs/current/runtime-config-wal.html) to `logical` in your database.\n\n```\nALTER SYSTEM SET wal_level = logical;\n```\n\nYou will need to restart the database after changing this setting.\n\n> **Note**: Some providers may not allow direct access to this setting. If you are unable to change this setting via the SQL command above, please refer to the provider-specific guides for further assistance.\n\n### Optional settings[​](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#optional-settings \"Direct link to Optional settings\")\n\n#### [`wal_keep_size`](https://www.postgresql.org/docs/current/runtime-config-replication.html)[​](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#wal_keep_size \"Direct link to wal_keep_size\")\n\nSetting `wal_keep_size` increases the memory usage of the [write-ahead log](https://www.postgresql.org/docs/current/wal-intro.html) on your PostgreSQL database.\n\nWe recommend setting a value for `wal_keep_size` tailored to your database's storage capacity. This ensures smooth operation of both your database and Prisma Pulse.\n\n```\nALTER SYSTEM SET wal_keep_size = 2048;\n```\n\n#### [`max_replication_slots`](https://www.postgresql.org/docs/current/runtime-config-replication.html)[​](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#max_replication_slots \"Direct link to max_replication_slots\")\n\nPrisma Pulse only needs one replication slot available. You can set the `max_replication_slots` if you have other replications in use.\n\n```\nALTER SYSTEM SET max_replication_slots = 20;\n```\n\n#### [`REPLICA IDENTITY`](https://www.postgresql.org/docs/current/sql-altertable.html#SQL-ALTERTABLE-REPLICA-IDENTITY)[​](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#replica-identity \"Direct link to replica-identity\")\n\nFor update and delete events, you have the option to include in the event the values of the record _before_ the operation was performed:\n\n*   For `update`: Include the values of the updated record before the update was performed in a field called `before`\n*   For `delete`: Include the values of the deleted record.\n\nIf you enable this, you will also be able to filter on these fields.\n\nTo include this data, you must set `REPLICA IDENTITY` to `FULL` on the table(s) you want to get field values for.\n\nFor example, running the following SQL command will set the `REPLICA IDENTITY` to `FULL` on a table named `User`:\n\n```\nALTER TABLE public.\"User\" REPLICA IDENTITY FULL;\n```\n\n## Manage your own publication slot[​](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#manage-your-own-publication-slot \"Direct link to Manage your own publication slot\")\n\nIf you want to enable replication for _specific models_ or use a database provider that restricts superuser access for Prisma Pulse you can configure your own publication slot and use it to enable Pulse.\n\n### Creating a publication slot[​](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#creating-a-publication-slot \"Direct link to Creating a publication slot\")\n\nYou can create publications in the following ways below depending on the version of your PostgreSQL database.\n\nPublication for all models.\n\n  \n\n```\nCREATE PUBLICATION all_models FOR ALL TABLES;\n```\n\nPublication for specific fields.\n\nFor example, create a publication that publishes all changes for table `users`, but replicates only columns `user_id` and `firstname`:\n\n```\n   CREATE PUBLICATION users_filtered FOR TABLE users (user_id, firstname);\n```\n\nPublication for specific models.\n\nFor example, create a publication that publishes all changes in two tables:\n\n```\nCREATE PUBLICATION user_and_department_publication FOR TABLE users, departments;\n```\n\nPublication for a model with a `WHERE` clause on it’s fields.\n\nFor example, create a publication that publishes all changes from active `departments`:\n\n```\nCREATE PUBLICATION active_departments FOR TABLE departments WHERE (active IS TRUE);\n```\n\nPublication based on DML operations.\n\nFor example, create a publication that only publishes `INSERT` operations in one table:\n\n```\nCREATE PUBLICATION insert_only FOR TABLE departmentsWITH (publish = 'insert');\n```\n\n> `publish` (`string`)\n> \n> This parameter determines which DML operations will be published by the new publication to the subscribers. The value is comma-separated list of operations. The allowed operations are `insert`, `update`, `delete`, and `truncate`. The default is to publish all actions, and so the default value for this option is `'insert, update, delete, truncate'`.\n\nYou can learn more about the PostgreSQL's `CREATE PUBLICATION`, supported versions and see more examples [here](https://www.postgresql.org/docs/current/sql-createpublication.html).\n\n### Submit your publication slot[​](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#submit-your-publication-slot \"Direct link to Submit your publication slot\")\n\nYou can submit the publication name in the [Console](https://console.prisma.io/), before enabling Prisma Pulse:\n\n1.  To view your [publications](https://www.postgresql.org/docs/current/view-pg-publication-tables.html), execute:\n    \n    ```\n    SELECT * FROM pg_publication_tables;\n    ```\n    \n2.  Then you can submit the desired publication name in the Console:\n    \n    ![](https://www.prisma.io/docs/assets/images/replication-slot-submission-d9aff33c6d4319db93577f289d654210.png)\n    \n\n### Removing publications[​](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#removing-publications \"Direct link to Removing publications\")\n\nIf you are managing your replications independently and choose to disable Prisma Pulse for a particular environment, you can refer to the following SQL queries to remove your publications.\n\n1.  To delete a publication:\n    \n    ```\n    DROP PUBLICATION IF EXISTS \"my_publication\";\n    ```\n    \n2.  View your [publications](https://www.postgresql.org/docs/current/view-pg-publication-tables.html):\n    \n    ```\n    SELECT * FROM pg_publication_tables;\n    ```\n    \n\n## Provider-specific instructions[​](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#provider-specific-instructions \"Direct link to Provider-specific instructions\")\n\nIf you want to see the specific instructions for your database, select your database provider:\n\n*   [AWS RDS](https://www.prisma.io/docs/pulse/database-setup/aws-rds)\n*   [Railway](https://www.prisma.io/docs/pulse/database-setup/railway)\n*   [Neon](https://www.prisma.io/docs/pulse/database-setup/neon)\n*   [Supabase](https://www.prisma.io/docs/pulse/database-setup/supabase)",
    "title": "Prisma Pulse: General instructions | Prisma Documentation",
    "description": "Instructions to use your database with Prisma Pulse",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/reference/preview-features",
    "markdown": "# Preview features (Reference) | Prisma Documentation\n\nSome Prisma ORM features are released as [Previews](https://www.prisma.io/docs/orm/more/releases#preview). [Share your feedback on all Preview features on GitHub](https://github.com/prisma/prisma/issues/3108). For information about available preview features and how to enable them, see:\n\n*   [Prisma Client and Prisma schema preview features](https://www.prisma.io/docs/orm/reference/preview-features/client-preview-features)\n*   [Prisma CLI preview features](https://www.prisma.io/docs/orm/reference/preview-features/cli-preview-features)\n\nFor information regarding upgrading Prisma ORM and enabling Preview features see [Upgrading to use Preview features](https://www.prisma.io/docs/orm/more/upgrade-guides/upgrading-to-use-preview-features).",
    "title": "Preview features (Reference) | Prisma Documentation",
    "description": "Previews are typically available behind a feature flag or require some form of opt-in.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/pulse/database-setup/aws-rds",
    "markdown": "# Prisma Pulse: AWS RDS | Prisma Documentation\n\nYou have to enable logical replication on AWS RDS to make it compatible with Prisma Pulse.\n\n## Enable logical replication on AWS RDS[​](https://www.prisma.io/docs/pulse/database-setup/aws-rds#enable-logical-replication-on-aws-rds \"Direct link to Enable logical replication on AWS RDS\")\n\nThe following instructions show how to create a parameter group, enable logical replication, and add the parameter group to your AWS RDS PostgreSQL database.\n\n1.  Create a parameter group for your RDS database (`RDS` > `Parameter groups` > `Create a parameter group`). In the **Parameter group family**, select your Postgres version. Select the type **DB Parameter group** option and assign a descriptive group name and description:\n    \n    ![Create a parameter group in AWS RDS](https://www.prisma.io/docs/assets/images/aws-rds-create-parameter-group-547be646ecdc4627ac0631103c38003d.png)\n    \n2.  Set the `rds.logical_replication` parameter to `1`(`true`) in the parameter group.\n    \n    ![Set logical replication parameter group](https://www.prisma.io/docs/assets/images/set-logical-replication-parameter-88329e63e06b185328187e93c1fabbb0.png)\n    \n3.  Modify **Database options** (`RDS` > `Databases` > `Modify`) to use the new DB parameter group:\n    \n    ![Add Parameter group to AWS RDS](https://www.prisma.io/docs/assets/images/add-group-44db12f6ed626c7df56b44549d37c54c.png)\n    \n    To reflect the configuration change into `wal_level`, select the **Apply immediately** option.\n    \n4.  Go to `RDS` > `Databases` > `[database name]`, then click on **Actions**, and then click on **Reboot** to restart your database.",
    "title": "Prisma Pulse: AWS RDS | Prisma Documentation",
    "description": "Instructions to use AWS RDS with Prisma Pulse",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/pulse/database-setup/railway",
    "markdown": "# Prisma Pulse: Railway | Prisma Documentation\n\nRailway provides a useful feature known as [templates](https://railway.app/templates) to facilitate quick project setup. These templates allow users to package a service or a group of services into a format that can be easily reused and shared. We have two templates for Prisma Pulse that you can use:\n\n*   [Prisma Pulse DB Only](https://railway.app/template/pulse-pg): Provides a fresh, pre-configured PostgreSQL database which you can use with Prisma Pulse.\n*   [Prisma Pulse DB & App](https://railway.app/template/pulse-starter): Provides a pre-configured PostgreSQL database and a [Prisma Pulse starter app](https://github.com/prisma/prisma-examples/tree/latest/pulse/starter).\n\n## Setup with template: \"Prisma Pulse DB Only\"[​](https://www.prisma.io/docs/pulse/database-setup/railway#setup-with-template-prisma-pulse-db-only \"Direct link to Setup with template: \"Prisma Pulse DB Only\"\")\n\n### Overview[​](https://www.prisma.io/docs/pulse/database-setup/railway#overview \"Direct link to Overview\")\n\nThis section provides step-by-step instructions for setting up a Pulse-ready PostgreSQL database using the Railway template called: [Prisma Pulse DB Only](https://railway.app/template/pulse-pg).\n\nThe template consists of two [services](https://docs.railway.app/reference/services):\n\n*   **Postgres**: A PostgreSQL database that you'll be able to use with Prisma Pulse after going through the setup instructions.\n*   **restart-and-delete-me**: This service contains a [script](https://github.com/prisma/pulse-railway-pg-config/blob/main/config-db.ts) that's executed once and configures the PostgreSQL database to make it usable with Prisma Pulse. Once the script has been executed, the instructions will tell you to delete this service since it won't be needed any more.\n\n### Instructions[​](https://www.prisma.io/docs/pulse/database-setup/railway#instructions \"Direct link to Instructions\")\n\n1.  Deploy the [template](https://railway.app/template/pulse-pg) on Railway.\n2.  Once the deployment has finished, click on the service called **restart-db-then-delete-me**.\n3.  You will see a list of deployments under the **Deployments** tab.\n4.  Click the most recent deployment's **View Logs** button.\n5.  Click on the **Deploy Logs** tab. If the service ran correctly, you should see a message in the logs that says:\n    \n    ```\n    All done please restart the database and delete this service.Here is the DATABASE_URLpostgresql://postgres:password@roundhouse.proxy.rlwy.net:28606/railway\n    ```\n    \n    > **Note**: The `DATABASE_URL` can also be found by clicking on the **Postgres** Service and navigating to the **Variables** tab, then clicking the copy icon next to `DATABASE_URL` environment variable value. ![](https://www.prisma.io/docs/assets/images/railway-database-url-a392cdd6beffd089a9021a57e4572dba.png)\n    \n6.  Copy the `DATABASE_URL` connection string and save it for later. Then restart your Railway database for the changes to be reflected:\n    1.  Click on the **Postgres** service that represents your deployed database.\n    2.  Navigate to the **Deployments** tab.\n    3.  Click on the three-dots menu on the latest deployment and click the **Restart** option.\n7.  After restarting your database, click on the **restart-db-then-delete-me** service and navigate to the **Settings** tab.\n8.  Scroll down to the bottom and click the red **Delete service** button.\n9.  You now have a Pulse-compatible PostgreSQL database running on Railway. You can now follow the instructions on the [Getting started](https://www.prisma.io/docs/pulse/getting-started) page.\n\n## Setup with template: \"Prisma Pulse DB & App\"[​](https://www.prisma.io/docs/pulse/database-setup/railway#setup-with-template-prisma-pulse-db--app \"Direct link to Setup with template: \"Prisma Pulse DB & App\"\")\n\n### Overview[​](https://www.prisma.io/docs/pulse/database-setup/railway#overview-1 \"Direct link to Overview\")\n\nThis section provides step-by-step instructions for setting up a Pulse starter project with a Pulse-ready PostgreSQL database using the Railway template called: [Prisma Pulse DB & App](https://railway.app/template/pulse-starter). The template consists of three [services](https://docs.railway.app/reference/services):\n\n*   **Pulse-Starter**: A Typescript app with a basic setup for using Prisma Pulse. You can find the repo for it [on GitHub](https://github.com/prisma/prisma-examples/tree/latest/pulse/starter).\n*   **Postgres**: A PostgreSQL database that you'll be able to use with Prisma Pulse after going through the setup instructions.\n*   **restart-and-delete-me**: This service contains a [script](https://github.com/prisma/pulse-railway-pg-config/blob/main/config-db.ts) that's executed once and configures the PostgreSQL database to make it usable with Prisma Pulse. Once the script has been executed, the instructions will tell you to delete this service since it won't be needed any more.\n\n### Instructions[​](https://www.prisma.io/docs/pulse/database-setup/railway#instructions-1 \"Direct link to Instructions\")\n\n1.  Deploy the [template](https://railway.app/template/pulse-starter) on Railway.\n2.  You'll be navigated to a page prompting configuration for both the **restart-db-then-delete-me** and **pulse-starter** service: ![Configure Railway template](https://www.prisma.io/docs/assets/images/railway-template-configure-87cae2f7d3e286d243cd1caaf6bfd1a2.png)\n    1.  For the **restart-db-then-delete-me** service, click on the **Configure** button and then save the configuration by clicking on **Save Config**.\n    2.  On the **pulse-starter** service, locate and click the **Configure** button. Within the **Environment variables** section, you'll find an option to include the `PULSE_API_KEY` environment variable. Keep the `PULSE_API_KEY` field blank for the time being. Once you've set up the database and obtained the database URL from the [Prisma Data Platform](https://console.prisma.io/), you can then add the `PULSE_API_KEY` to the **pulse-starter** service. With the empty field for the Pulse API key, click **Save Config**.\n    3.  Click on the **Deploy** button.\n3.  To set up the database and make it Pulse-ready, complete the steps outlined in the [previous section](https://www.prisma.io/docs/pulse/database-setup/railway#setup-with-template-prisma-pulse-db-only), starting from **step 2.** till **step 8.**, then follow the instructions below.\n4.  Go to the [Console](https://console.prisma.io/) and select the project in which you want to activate Pulse. If you don't have a project yet, create a new project via the **New project** button.\n5.  Navigate to the project's environment in which Pulse should be activated. If you just created a new project, the only available environment is the **Production** environment.\n6.  Click **Enable Pulse** on the environment's page.\n7.  Paste the `DATABASE_URL` that you acquired before into the **Database connection string** field. Then, finish the process by clicking **Enable Pulse**.\n8.  Pulse is now enabled in your project's environment. Click **Generate API key** to obtain the API key that you need in order to use Pulse in your TypeScript starter app.\n9.  Save the `PULSE_API_KEY` for later and click **I've securely stored my connection string**.\n10.  Back in the Railway UI, click on the **pulse-starter** service.\n    \n    > **Note**: You'll likely find that the build failed for the **pulse-starter** service. This is because the Prisma Pulse API key wasn't provided. Do not worry, this is to be expected and not a problem for the next steps.\n    \n11.  Click on the **Variables** tab.\n12.  Create your `PULSE_API_KEY` environment variable: Click the **New Variable** button, create the `PULSE_API_KEY` environment variable, and then paste the value of the `PULSE_API_KEY` that you obtained in the Console. Then save the changes by clicking the **Add** button.\n13.  With the `PULSE_API_KEY` environment variable in place, you need to rebuild the **pulse-starter** service for the environment variable to take effect:\n14.  Click on the **Deployments** tab.\n15.  Click on the three-dots menu on the deployment that failed. Then click **Redeploy**.\n16.  When the deployment starts, click the **View Logs** button.\n17.  Then click on the **Deploy Logs** tab to follow the deployment of the Pulse starter app.\n\nOnce the deployment is finished, your Pulse starter app should be running and any database events events will be logged under the **Deploy Logs** tab of the **pulse-starter** service.\n\nTo see an event in action, you need to make changes to the `User` table. You can follow the steps below to do that from the Railway UI:\n\n1.  Click on the **Postgres** service on your Railway project.\n2.  Click on the **Data** tab.\n3.  Select the **User** table and click **Add Row**.\n4.  Fill out an **email** and a **name**, then click **Insert**.\n5.  Return to the **Deploy Logs** of your **pulse-starter** service.\n6.  You should be able to see an output from Prisma Pulse for the user being created:\n    \n    ```\n    just received an event: {  action: \"create\",  created: { id: 1, email: \"test\", name: \"test@test.io\" },  id: 03/34334,  modelName: \"User\"}\n    ```\n    \n\n## Setup without using a template[​](https://www.prisma.io/docs/pulse/database-setup/railway#setup-without-using-a-template \"Direct link to Setup without using a template\")\n\n1.  Change the PostgreSQL database settings\n    \n    You can run these queries using a tool such as [pgAdmin](https://www.pgadmin.org/), [dbeaver](https://dbeaver.io/), or any other way you might run queries on your database.\n    \n    *   Set the [`wal_level`](https://www.postgresql.org/docs/current/runtime-config-wal.html) to `logical`:\n        \n        ```\n        ALTER SYSTEM SET wal_level = logical;\n        ```\n        \n    *   Set the [`max_replication_slots`](https://www.postgresql.org/docs/current/runtime-config-replication.html) to `20`:\n        \n        ```\n        ALTER SYSTEM SET max_replication_slots = 20;\n        ```\n        \n    *   Set the [`wal_keep_size`](https://www.postgresql.org/docs/current/runtime-config-replication.html) to `2048`:\n        \n        ```\n        ALTER SYSTEM SET wal_keep_size = 2048;\n        ```\n        \n    *   Reload the PostgreSQL configuration:\n2.  You have to restart your database for the changes to be reflected. To restart your database using the Railway UI:\n    \n    1.  Click on your database.\n    2.  Navigate to the **Deployments** tab.\n    3.  Click on the three-dots menu on the latest deployment and click the **Restart** option.\n3.  After setting up your Railway database, you have to use the [connection string](https://docs.railway.app/guides/postgresql#tcp-proxy-connection) provided by Railway that allows public access to your PostgreSQL database.\n    \n4.  You now have a Pulse-compatible PostgreSQL database running on Railway. You can now follow the instructions on the [Getting started](https://www.prisma.io/docs/pulse/getting-started) page.",
    "title": "Prisma Pulse: Railway | Prisma Documentation",
    "description": "Instructions to use Railway with Prisma Pulse",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/pulse/database-setup/neon",
    "markdown": "# Prisma Pulse: Neon | Prisma Documentation\n\nCreate a publication to listen to database events from your Neon database. Use the **SQL Editor** in your Neon project to execute the SQL query to create a publication to listen to database change events from all tables:\n\n```\nCREATE Publication $PUBLICATION_NAME FOR ALL TABLES;\n```",
    "title": "Prisma Pulse: Neon | Prisma Documentation",
    "description": "Instructions to use Neon for PostgreSQL with Prisma Pulse",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/pulse/database-setup/supabase",
    "markdown": "# Prisma Pulse: Supabase | Prisma Documentation\n\nYou have to use a direct database connection from Supabase to use it with Prisma Pulse.\n\n## Using a direct connection in Supabase[​](https://www.prisma.io/docs/pulse/database-setup/supabase#using-a-direct-connection-in-supabase \"Direct link to Using a direct connection in Supabase\")\n\nTo use a direct database connection string in Supabase:\n\n1.  Navigate to your Project settings (**Settings** > **Configurations** > **Database**).\n    \n2.  Disable the **Use connection pooling** option. ![Supabase direct database connection](https://www.prisma.io/docs/assets/images/supabase-direct-database-connection-845d6828f6ceaf50bcd67ae2b2111ceb.png)\n    \n3.  Copy the direct database connection string.\n    \n    info\n    \n    ℹ️ Prisma Pulse is currently incompatible with Supabase's connection pooler. This results from the connection pooler intercepting the connection between your database and Prisma Pulse and removing the [Streaming Replication Protocol](https://www.postgresql.org/docs/current/protocol-replication.html#PROTOCOL-REPLICATION) which is used by Prisma Pulse to transmit replication commands to the database.",
    "title": "Prisma Pulse: Supabase | Prisma Documentation",
    "description": "Instructions to use Supabase with Prisma Pulse",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/pulse/known-limitations",
    "markdown": "# Pulse: Known limitations | Prisma Documentation\n\nBelow are descriptions of known limitations when using Prisma Pulse. If you are aware of any limitations that are missing, please let us know on the `#help-and-questions` channel in our community [Discord](https://pris.ly/discord).\n\n## Superuser role required for starter plan[​](https://www.prisma.io/docs/pulse/known-limitations#superuser-role-required-for-starter-plan \"Direct link to Superuser role required for starter plan\")\n\nOur [Starter plan](https://www.prisma.io/pricing) requires a database role with superuser access.\n\n## Prisma Pulse is server-side[​](https://www.prisma.io/docs/pulse/known-limitations#prisma-pulse-is-server-side \"Direct link to Prisma Pulse is server-side\")\n\nPrisma Pulse streams cannot be initiated directly within client-side code. To receive events in real-time, Prisma Client needs to open a stream on a long-running server.\n\nTo propagate events to the frontend, you can use a WebSocket library like [socket.io](https://socket.io/).\n\n## Limited to Postgres versions 12 or higher[​](https://www.prisma.io/docs/pulse/known-limitations#limited-to-postgres-versions-12-or-higher \"Direct link to Limited to Postgres versions 12 or higher\")\n\nPrisma Pulse is currently supported with Postgres versions 12 or higher. It should work with most Postgres providers that expose Postgres’ native logical replication feature.\n\n## Subscription type limitation with custom publication slots[​](https://www.prisma.io/docs/pulse/known-limitations#subscription-type-limitation-with-custom-publication-slots \"Direct link to Subscription type limitation with custom publication slots\")\n\nThe onboarding flow in the Console enables you to provide a [custom publication slot](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#manage-your-own-publication-slot). Should that custom publication slot only contain a subset of your database tables, the Prisma Client instance generated with the Pulse extension will continue to permit streams to all models based on the entirety of your Prisma Schema definitions.\n\nFor example, if you have two models in your schema, the `User` and `Post` model. And you opt to create a publication to monitor changes in the `User` model exclusively:\n\n```\nCREATE PUBLICATION user_publication FOR TABLE users;\n```\n\n> To learn more about creating custom publication slots, see [managing your publication slot](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#manage-your-own-publication-slot).\n\nYour resulting code would be:\n\n```\nconst userStream = prisma.user.stream()\n```\n\nHowever, despite the absence of publication coverage, the generated Prisma Client permits streams for all models, such as the `Post` model:\n\n```\nconst postStream = prisma.post.stream()\n```\n\n> We are actively working on enhancing type generation for custom publications as part of our ongoing efforts to further refine Prisma Pulse.\n\n## Size limit for database events[​](https://www.prisma.io/docs/pulse/known-limitations#size-limit-for-database-events \"Direct link to Size limit for database events\")\n\nThe size limit of [database events](https://www.prisma.io/docs/pulse/database-events) depends on your [subscription plan](https://www.prisma.io/pricing).\n\nNote that database events are base64 encoded for transmission. The size limit applies to the _encoded_ not the _original_ size of the event.\n\nIf your events exceed the size limit, they will be rejected by Prisma Pulse and won't arrive on the receiver side. You can see how many events have been rejected by Prisma Pulse in the Pulse Dashboard in the [Console](https://console.prisma.io/).",
    "title": "Pulse: Known limitations | Prisma Documentation",
    "description": "Learn about known limitations of Pulse.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/pulse/database-events",
    "markdown": "# Database events with Prisma Pulse\n\n## Structure[​](https://www.prisma.io/docs/pulse/database-events#structure \"Direct link to Structure\")\n\nThe structure of a database change event depends on the model and the kind of operation that was performed. You can learn more in the [API reference](https://www.prisma.io/docs/pulse/api-reference).\n\nThe examples below are based on this `User` model:\n\n```\nmodel User {  id    Int     @id @default(autoincrement())  name  String?  email String  @unique}\n```\n\nAll events have the following fields in common:\n\n*   `id`: Unique identifier\n*   `modelName`: The model on which this was performed, e.g. `User` or `Post`\n*   `action`: The kind of event that was performed, either of the following: `create`, `update`, `delete`\n\nDepending on the kind of event, there may be additional fields in the event objects received via Prisma Pulse. See the following sections for a few sample events.\n\n### Create events[​](https://www.prisma.io/docs/pulse/database-events#create-events \"Direct link to Create events\")\n\nHere is an example of an event object you may receive when a new record is _created_:\n\n```\n{  action: 'create',  created: { id: 3, email: 'jane@prisma.io', name: 'Jane Doe' },  id: '0/2A5A590',  modelName: 'User'}\n```\n\n### Update events[​](https://www.prisma.io/docs/pulse/database-events#update-events \"Direct link to Update events\")\n\nHere is an example of an event object you may receive when a record is _updated_:\n\n```\n{  action: 'update',  after: { id: 2, email: 'jane@prisma.io', name: 'Jane Doe' },  before: null,  id: '0/2A5A248',  modelName: 'User'}\n```\n\nIf you want the `before` field to carry the values of the record _before_ it was updated, you need to set `REPLICA IDENTITY` to `FULL` as explained [here](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#replica-identity). In that case, the event object may look as follows:\n\n```\n{  action: 'update',  after: { id: 2, email: 'jane@prisma.io', name: 'Jane Doe' },  before: { id: 2, email: 'jane@prisma.io', name: 'Jane' },  id: '0/2A5A248',  modelName: 'User'}\n```\n\n### Delete events[​](https://www.prisma.io/docs/pulse/database-events#delete-events \"Direct link to Delete events\")\n\nHere is an example of an event object you may receive when a record is _deleted_:\n\n```\n {  action: 'delete',  deleted: { id: 1 },  id: '0/2A5A398',  modelName: 'User'}\n```\n\nIf you want the `deleted` field to carry the values of the record that was deleted, you need to set `REPLICA IDENTITY` to `FULL` as explained [here](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#replica-identity). Otherwise it will only carry the `id` value of the record. In that case, the event object may look as follows:\n\n```\n {  action: 'delete',  deleted: { id: 21, email: 'jane@prisma.io', name: 'Jane Doe' },  id: '0/2A5A398',  modelName: 'User'}\n```\n\n## Delivery semantics[​](https://www.prisma.io/docs/pulse/database-events#delivery-semantics \"Direct link to Delivery semantics\")\n\nThis section gives an overview of the event delivery semantics of Prisma Pulse.\n\n### What are event delivery semantics?[​](https://www.prisma.io/docs/pulse/database-events#what-are-event-delivery-semantics \"Direct link to What are event delivery semantics?\")\n\nEvent delivery semantics describe the _guarantees_ an event producer can provide about the delivery of events in an event-driven architecture.\n\nThere generally are three kinds of delivery guarantees:\n\n*   **At most once**: The event is delivered either once or not at all.\n*   **At least once**: The event is delivered one or more times, ensuring it never goes undelivered.\n*   **Exactly once**: The event is delivered exactly once, avoiding duplicates.\n\n### Event delivery semantics in Prisma Pulse[​](https://www.prisma.io/docs/pulse/database-events#event-delivery-semantics-in-prisma-pulse \"Direct link to Event delivery semantics in Prisma Pulse\")\n\nHere is a summary of the event delivery semantics in Prisma Pulse:\n\n|     | `stream()` | `subscribe()` |\n| --- | --- | --- |\n| **Requires event persistence** | Yes | No  |\n| **Delivery guarantees** | At least once | At most once |\n| **Event order** | Same order as events were produced | Maybe different order than events were produced |\n| **Can \"replay\" missed events** | Yes | No  |\n\nwarning\n\nNote that if an events exceeds the [size limit](https://www.prisma.io/docs/pulse/known-limitations#size-limit-for-database-events) for your [subscription plan](https://www.prisma.io/pricing), the event will be rejected and won't make it to your application..\n\n#### `stream()`[​](https://www.prisma.io/docs/pulse/database-events#stream \"Direct link to stream\")\n\nWhen using `stream()`, Prisma Pulse provides the following delivery guarantees:\n\n##### At least once delivery[​](https://www.prisma.io/docs/pulse/database-events#at-least-once-delivery \"Direct link to At least once delivery\")\n\nWhen streaming database change events with `stream()`, database change events are guaranteed to be delivered with _at least once_ semantics, meaning that Prisma Pulse can guarantee that any event happening in the database will be delivered one or more times.\n\n##### Delivery of events in the right order[​](https://www.prisma.io/docs/pulse/database-events#delivery-of-events-in-the-right-order \"Direct link to Delivery of events in the right order\")\n\nPrisma Pulse further guarantees to deliver the database change events in the order they were produced.\n\n##### Exactly once delivery[​](https://www.prisma.io/docs/pulse/database-events#exactly-once-delivery \"Direct link to Exactly once delivery\")\n\nWhile Pulse by default offers _at least once_ semantics, it also provides the _primitives_ for you to implement _exactly once_ delivery guarantees yourself!\n\nEach event produced by Prisma Pulse carries an identifier/idempotency key that you can use to deduplicate during downstream processing of the event. This is best implemented by passing the identifier along to external services that support idempotency or using concepts like upsert when working with a database.\n\nThe `id` field in this event payload for a `User` model represent the identifier/idempotency key:\n\n```\n{  action: 'update',  after: { id: 1, name: 'Jane', email: \"doe@prisma.io\" },  before: null,  id: '01HYBEER1JPSBVPG2NQADNQTA6',  modelName: 'User'}\n```\n\n#### `subscribe()`[​](https://www.prisma.io/docs/pulse/database-events#subscribe \"Direct link to subscribe\")\n\n##### At most once delivery[​](https://www.prisma.io/docs/pulse/database-events#at-most-once-delivery \"Direct link to At most once delivery\")\n\nWhen streaming database change events with `.subscribe()`, database change events are guaranteed to be delivered with _at most once_ semantics, meaning that some of the database events may get lost.\n\n##### No guarantees about the order of the events[​](https://www.prisma.io/docs/pulse/database-events#no-guarantees-about-the-order-of-the-events \"Direct link to No guarantees about the order of the events\")\n\n`subscribe()` doesn't provide any guarantees about the order in which events will arrive.\n\n## Event persistence[​](https://www.prisma.io/docs/pulse/database-events#event-persistence \"Direct link to Event persistence\")\n\nYou can configure **Event persistence** for Pulse in your Console [project](https://www.prisma.io/docs/platform/about#project). Only with **Event persistence** enabled, you will be able to take advantage of _at least once_ and _right order_ delivery guarantees by Prisma Pulse via the `stream()` API.\n\n### What events are persisted?[​](https://www.prisma.io/docs/pulse/database-events#what-events-are-persisted \"Direct link to What events are persisted?\")\n\nAs soon as you enable **Event persistence** for Pulse in your Console [project](https://www.prisma.io/docs/platform/about#project), Pulse will store _all database_ events from _all tables_.\n\n### In what shape are events being persisted?[​](https://www.prisma.io/docs/pulse/database-events#in-what-shape-are-events-being-persisted \"Direct link to In what shape are events being persisted?\")\n\nEvents are being persisted in the same [structure](https://www.prisma.io/docs/pulse/database-events#structure) that they're delivered.\n\n### How does event persistence impact pricing?[​](https://www.prisma.io/docs/pulse/database-events#how-does-event-persistence-impact-pricing \"Direct link to How does event persistence impact pricing?\")\n\nWith event persistence enabled, pricing is impacted as follows:\n\n*   **Database events**: The number of database events _captured_ by Pulse\n*   **Events reads**: The number of database events _read_ and _delivered_ by Pulse via `.stream()`\n*   **Event storage**: The amount of disk space the stored events consume (in GiB)\n\nSee the [subscription plans](https://www.prisma.io/pricing) for more details. Pricing applies regardless of whether you use `subscribe()` or `stream()`.\n\n## Resuming event streams[​](https://www.prisma.io/docs/pulse/database-events#resuming-event-streams \"Direct link to Resuming event streams\")\n\nThe `stream()` API offers the option to provide a [`name`](https://www.prisma.io/docs/pulse/api-reference#options) argument which makes a stream _resumable_:\n\n```\nconst stream = await prisma.user.stream({  name: \"all-user-events\"})\n```\n\nIf a `name` is provided, Pulse tracks the delivery of events with a _cursor_. Only if the event is acknowledged on the receiver side, the cursor associated with that `name` will move.\n\nIn case a stream is unavailable for some reason, e.g. because your server was down, the receiver can't acknowledge any events. Once the stream is available again, the stream will pick up at the last cursor position and deliver any events that haven't been acknowledged in the meantime:\n\n![](https://www.prisma.io/docs/assets/images/with-name-19bbbc994eb998432603000870466be0.png)\n\nIf the `name` option is omitted, no cursor will be associated with the stream and events that happen while a stream is down will not be delivered:\\`\n\n![](https://www.prisma.io/docs/assets/images/without-name-5504e23e5245cae558137222b608070f.png)",
    "title": "Database events with Prisma Pulse | Prisma Documentation",
    "description": "Learn about database change events in Prisma Pulse, their structure, delivery semantics, and more.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/pulse/faq",
    "markdown": "# Prisma Pulse: FAQ | Prisma Documentation\n\n## What databases are supported with Prisma Pulse?[​](https://www.prisma.io/docs/pulse/faq#what-databases-are-supported-with-prisma-pulse \"Direct link to What databases are supported with Prisma Pulse?\")\n\nPrisma Pulse currently supports PostgreSQL v12 and higher. We'd love to hear [which databases](https://tally.so/r/wLbb8G) you would like to see supported next.\n\n### What database providers are supported with Prisma Pulse?[​](https://www.prisma.io/docs/pulse/faq#what-database-providers-are-supported-with-prisma-pulse \"Direct link to What database providers are supported with Prisma Pulse?\")\n\nAny PostgreSQL provider that enables you to [enable logical replication](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#enable-logical-replication) is supported:\n\n| Provider | Starter | Pro | Business | Enterprise |\n| --- | --- | --- | --- | --- |\n| **Railway** | ✅   | ✅   | ✅   | ✅   |\n| **Supabase** | ✅   | ✅   | ✅   | ✅   |\n| **Neon** | ❌   | ✅   | ✅   | ✅   |\n| **AWS RDS** | ✅   | ✅   | ✅   | ✅   |\n\nNote that because Neon doesn't provide [superuser](https://www.postgresql.org/docs/current/role-attributes.html) access to the database, you can't use Neon-hosted databases on the Starter plan.\n\n## Does Pulse store my database events?[​](https://www.prisma.io/docs/pulse/faq#does-pulse-store-my-database-events \"Direct link to Does Pulse store my database events?\")\n\nPulse persists database events if you enable the **Event persistence** feature in your [project](https://www.prisma.io/docs/platform/about#project) via the Console. This lets you use the `stream()` API and take advantage of [delivery guarantees](https://www.prisma.io/docs/pulse/database-events#event-delivery-semantics-in-prisma-pulse).\n\n## How does persisting events impact pricing?[​](https://www.prisma.io/docs/pulse/faq#how-does-persisting-events-impact-pricing \"Direct link to How does persisting events impact pricing?\")\n\nIf you enable **Event persistence** for your project, Pulse will store the events that happen in your database in the same [shape](https://www.prisma.io/docs/pulse/database-events#structure) that they're delivered.\n\nUsage of the API is billed according to these factors:\n\n*   **Database events**: The number of database events _captured_ by Pulse\n*   **Events reads**: The number of database events _read_ and _delivered_ by Pulse via `.stream()`\n*   **Event storage**: The amount of disk space the stored events consume (in GiB)\n\n## How many Prisma Client instances can subscribe to a database event?[​](https://www.prisma.io/docs/pulse/faq#how-many-prisma-client-instances-can-subscribe-to-a-database-event \"Direct link to How many Prisma Client instances can subscribe to a database event?\")\n\nThe number of Prisma Client instances that can subscribe to via Prisma Pulse has the following limits:\n\n*   1000 subscribers for `stream()`\n*   20 subscribers for `subscribe()`\n\n## How can I increase the throughput for Prisma Pulse?[​](https://www.prisma.io/docs/pulse/faq#how-can-i-increase-the-throughput-for-prisma-pulse \"Direct link to How can I increase the throughput for Prisma Pulse?\")\n\nThroughput for Prisma Pulse will increase as the database event size and the number of concurrent listeners decrease.\n\nWhile limiting database event size can be tricky, we recommend some best practices, such as:\n\n*   Avoid large fields in your model, such as storing base64 image strings in the database. Instead, consider storing them in popular file storage options such as AWS S3 or Cloudflare.\n*   Creating publication slots for specific models rather than all the models in the database. You can learn more about managing your replication slots [here](https://www.prisma.io/docs/pulse/database-setup/general-database-instructions#max_replication_slots).\n*   Upgrading to use modern versions of PostgreSQL due to performance optimizations. Modern versions of PostgreSQL (`v15`+) allow you to create a publication slot for specific fields of a particular model.\n\n## Can I use Pulse in my front-end code?[​](https://www.prisma.io/docs/pulse/faq#can-i-use-pulse-in-my-front-end-code \"Direct link to Can I use Pulse in my front-end code?\")\n\nNo, Pulse is server-side and subscriptions cannot be initiated directly within client-side code. If you would find this feature valuable, please share your thoughts on the `#help-and-questions` channel in our community [Discord](https://pris.ly/discord).\n\nTo propagate events to the frontend, you can use a WebSocket library like [socket.io](https://socket.io/).\n\n## How to configure `tsconfig.json` with the Pulse extension?[​](https://www.prisma.io/docs/pulse/faq#how-to-configure-tsconfigjson-with-the-pulse-extension \"Direct link to how-to-configure-tsconfigjson-with-the-pulse-extension\")\n\nIf you're using [`\"moduleResolution\": \"bundler\"`](https://www.typescriptlang.org/docs/handbook/modules/reference.html#bundler) in your `tsconfig.json` file, you need to explicitly set [`customConditions`](https://www.typescriptlang.org/tsconfig/#customConditions) to either `node` or `workerd` depending on your target runtime. This will instruct TypeScript to match the correct type definitions of the Prisma Pulse extension, as well as any other packages that expose multiple entrypoints:\n\n```\n// tsconfig.json{  \"compilerOptions\": {    // ...other options    \"target\": \"es2022\",    \"moduleResolution\": \"bundler\",    \"customConditions\": [\"workerd\"] // or \"node\"  }}\n```\n\nThis is needed because Prisma Pulse extension offers separate implementations tailored for various runtimes, such as Node.js and Cloudflare Workers.\n\nIf you don't add this, you may run into the following error when using the `@prisma/extension-pulse` in your application code:\n\n```\nCannot find module '@prisma/extension-pulse' or its corresponding type declarations.\n```",
    "title": "Prisma Pulse: FAQ | Prisma Documentation",
    "description": "Frequently asked questions about Prisma Pulse.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/pulse/feedback",
    "markdown": "# Prisma Pulse: Feedback | Prisma Documentation\n\nYou can submit any feedback about Prisma Pulse in the `#help-and-questions` channel in our community [Discord](https://pris.ly/discord).",
    "title": "Prisma Pulse: Feedback | Prisma Documentation",
    "description": "Learn where to submit feedback about Prisma Pulse.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/platform/maturity-levels",
    "markdown": "# Console: Maturity levels | Prisma Documentation\n\nPrisma releases updates to Prisma Data Platform multiple times per week, as opposed to the Prisma ORM that we release on a set schedule every few weeks. This is why we consider the lifecycle and process for maturing features in Prisma Data Platform differently.\n\nYou can [check out the releases and maturity process for the Prisma ORM](https://www.prisma.io/docs/orm/more/releases) for further details.\n\nYou can find information about releases across _all_ Prisma tools and products in the [changelog](https://www.prisma.io/changelog).\n\n### Early Access[​](https://www.prisma.io/docs/platform/maturity-levels#early-access \"Direct link to Early Access\")\n\nIf a feature on the Prisma Data Platform is labeled as **Early Access**:\n\n*   We have validated a problem and are considering a solution to it but are not certain whether that solution is complete or a perfect fit.\n*   We want to gather more feedback and adjust the solution as necessary, knowing that users are prepared for significant breaking changes\n*   We reserve ourselves the right to throttle or remove access to a feature in Early Access to preserve the stability of the platform, or enforcing its use to stay within the scope defined in our [Terms of Service](https://pris.ly/terms).\n\nAs always, your feedback in our [Discord](https://pris.ly/discord) is invaluable to shape the design of the features. This will help us ensure that they can solve your problems in the best way possible.\n\n### Preview[​](https://www.prisma.io/docs/platform/maturity-levels#preview \"Direct link to Preview\")\n\nIf a feature on the Prisma Data Platform is labeled as **Preview**:\n\n*   We have refined the software based on the valuable feedback we obtained during the Early Access phase.\n*   We developed the feature further, bringing it closer to the final version, though it's not completely ready for production usage.\n*   We have lifted the invite gate, so users no longer need an invitation to access the feature. Users just need to sign up to gain access.\n*   We have increased the stability of the software compared to the Early Access phase. While there might still be some issues, they should be less frequent and less critical.\n*   We use the Preview phase as a final stress test to ensure the product is ready for heavy production workloads.\n\nWe recommend testing the product in a staging environment and welcome any feedback in our [Discord](https://pris.ly/discord). This will assist us in improving the product for its final release.\n\n### General Availability[​](https://www.prisma.io/docs/platform/maturity-levels#general-availability \"Direct link to General Availability\")\n\nIf a feature in the Prisma Data Platform is Generally Available:\n\n*   The solution has undergone extensive testing and, based on significant feedback, is deemed stable and ready for production use cases.",
    "title": "Console: Maturity levels | Prisma Documentation",
    "description": "Understand the maturity levels for features in Prisma Data Platform",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/platform",
    "markdown": "# Platform | Prisma Documentation\n\nLearn about the main concepts and workflows of the [Prisma Data Platform](https://prisma.io/data-platform/).\n\n## In this section[​](https://www.prisma.io/docs/platform#in-this-section \"Direct link to In this section\")\n\n[\n\n## Platform\n\n](https://www.prisma.io/docs/platform)\n\n[\n\n## About\n\n](https://www.prisma.io/docs/platform/about)\n\n[\n\n## Maturity levels\n\n](https://www.prisma.io/docs/platform/maturity-levels)\n\n[\n\n## Limits\n\n](https://www.prisma.io/docs/platform/limits)\n\n[\n\n## Support\n\n](https://www.prisma.io/docs/platform/support)\n\n[\n\n## Platform CLI\n\n](https://www.prisma.io/docs/platform/platform-cli)",
    "title": "Platform | Prisma Documentation",
    "description": "Get started with the Prisma Data Platform with its official documentation, and learn more about its features with reference documentation, guides, and more.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/platform/limits",
    "markdown": "# Console: Limits | Prisma Documentation\n\nMore details on limits will be available soon.",
    "title": "Console: Limits | Prisma Documentation",
    "description": "More details on limits will be available soon.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/platform/support",
    "markdown": "# Console: Support | Prisma Documentation\n\nYour feedback is invaluable, and we encourage you to share your experiences with us on [Discord](https://pris.ly/discord).\n\n## Support[​](https://www.prisma.io/docs/platform/support#support \"Direct link to Support\")\n\nReach out to us in our [Discord](https://pris.ly/discord).\n\n### Standard support[​](https://www.prisma.io/docs/platform/support#standard-support \"Direct link to Standard support\")\n\n*   Email support, [](mailto:support@prisma.io)[support@prisma.io](mailto:support@prisma.io)\n*   Mon-Fri, 9am-5pm CET\n\n### Premium support[​](https://www.prisma.io/docs/platform/support#premium-support \"Direct link to Premium support\")\n\n*   Email support, [](mailto:support@prisma.io)[support@prisma.io](mailto:support@prisma.io)\n*   24/7\n\n### Dedicated support[​](https://www.prisma.io/docs/platform/support#dedicated-support \"Direct link to Dedicated support\")\n\nDedicated contact person.\n\n## Deleting your PDP account[​](https://www.prisma.io/docs/platform/support#deleting-your-pdp-account \"Direct link to Deleting your PDP account\")\n\nIf you want to delete your PDP account, **email us at [](mailto:support@prisma.io)[support@prisma.io](mailto:support@prisma.io)**.\n\nTo ensure that you're not accidentally disabling any infrastructure powering one of your applications, we require that you **disable Accelerate and Pulse in _all_ environments of _all_ your projects** that live in the account to be deleted.",
    "title": "Console: Support | Prisma Documentation",
    "description": "Find the right support for any Console question.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/platform/platform-cli",
    "markdown": "# Platform CLI | Prisma Documentation\n\n## In this section[​](https://www.prisma.io/docs/platform/platform-cli#in-this-section \"Direct link to In this section\")\n\n[\n\n## About\n\n](https://www.prisma.io/docs/platform/platform-cli/about)\n\n[\n\n## Commands\n\n](https://www.prisma.io/docs/platform/platform-cli/commands)\n\n*   [In this section](https://www.prisma.io/docs/platform/platform-cli#in-this-section)",
    "title": "Platform CLI | Prisma Documentation",
    "description": "Learn about the CLI for Prisma Data Platform",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/platform/platform-cli/about",
    "markdown": "# Platform CLI: About | Prisma Documentation\n\nThis guide demonstrates how to access the Prisma Data Platform using the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli). Get started by ensuring you have the Prisma CLI installed, following our setup [instructions](https://www.prisma.io/docs/orm/tools/prisma-cli#installation).\n\nThis integration, now in Early Access, expands the capabilities of the Prisma CLI, enabling management of your Platform projects directly from the command line. For a detailed overview of all the commands, please refer to the [Commands page](https://www.prisma.io/docs/platform/platform-cli/commands).",
    "title": "Platform CLI: About | Prisma Documentation",
    "description": "This guide demonstrates how to access the Prisma Data Platform using the Prisma CLI. Get started by ensuring you have the Prisma CLI installed, following our setup instructions.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/quickstart",
    "markdown": "# Quickstart with TypeScript & SQLite\n\nIn this Quickstart guide, you'll learn how to get started with Prisma ORM from scratch using a plain **TypeScript** project and a local **SQLite** database file. It covers **data modeling**, **migrations** and **querying** a database.\n\nIf you want to use Prisma ORM with your own PostgreSQL, MySQL, MongoDB or any other supported database, go here instead:\n\n*   [Start with Prisma ORM from scratch](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql)\n*   [Add Prisma ORM to an existing project](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-postgresql)\n\n## Prerequisites[​](https://www.prisma.io/docs/getting-started/quickstart#prerequisites \"Direct link to Prerequisites\")\n\nYou need Node.js v16.13.0 or higher for this guide (learn more about [system requirements](https://www.prisma.io/docs/orm/reference/system-requirements)).\n\n## 1\\. Create TypeScript project and set up Prisma ORM[​](https://www.prisma.io/docs/getting-started/quickstart#1-create-typescript-project-and-set-up-prisma-orm \"Direct link to 1. Create TypeScript project and set up Prisma ORM\")\n\nAs a first step, create a project directory and navigate into it:\n\n```\nmkdir hello-prismacd hello-prisma\n```\n\nNext, initialize a TypeScript project using npm:\n\n```\nnpm init -ynpm install typescript ts-node @types/node --save-dev\n```\n\nThis creates a `package.json` with an initial setup for your TypeScript app.\n\nNow, initialize TypeScript:\n\nThen, install the Prisma CLI as a development dependency in the project:\n\n```\nnpm install prisma --save-dev\n```\n\nFinally, set up Prisma ORM with the `init` command of the Prisma CLI:\n\n```\nnpx prisma init --datasource-provider sqlite\n```\n\nThis creates a new `prisma` directory with a `prisma.schema` file and configures SQLite as your database. You're now ready to model your data and create your database with some tables.\n\n## 2\\. Model your data in the Prisma schema[​](https://www.prisma.io/docs/getting-started/quickstart#2-model-your-data-in-the-prisma-schema \"Direct link to 2. Model your data in the Prisma schema\")\n\nThe Prisma schema provides an intuitive way to model data. Add the following models to your `schema.prisma` file:\n\nprisma/schema.prisma\n\n```\nmodel User {  id    Int     @id @default(autoincrement())  email String  @unique  name  String?  posts Post[]}model Post {  id        Int     @id @default(autoincrement())  title     String  content   String?  published Boolean @default(false)  author    User    @relation(fields: [authorId], references: [id])  authorId  Int}\n```\n\nModels in the Prisma schema have two main purposes:\n\n*   Represent the tables in the underlying database\n*   Serve as foundation for the generated Prisma Client API\n\nIn the next section, you will map these models to database tables using Prisma Migrate.\n\n## 3\\. Run a migration to create your database tables with Prisma Migrate[​](https://www.prisma.io/docs/getting-started/quickstart#3-run-a-migration-to-create-your-database-tables-with-prisma-migrate \"Direct link to 3. Run a migration to create your database tables with Prisma Migrate\")\n\nAt this point, you have a Prisma schema but no database yet. Run the following command in your terminal to create the SQLite database and the `User` and `Post` tables represented by your models:\n\n```\nnpx prisma migrate dev --name init\n```\n\nThis command did three things:\n\n1.  It created a new SQL migration file for this migration in the `prisma/migrations` directory.\n2.  It executed the SQL migration file against the database.\n3.  It ran `prisma generate` under the hood (which installed the `@prisma/client` package and generated a tailored Prisma Client API based on your models).\n\nBecause the SQLite database file didn't exist before, the command also created it inside the `prisma` directory with the name `dev.db` as defined via the environment variable in the `.env` file.\n\nCongratulations, you now have your database and tables ready. Let's go and learn how you can send some queries to read and write data!\n\n## 4\\. Explore how to send queries to your database with Prisma Client[​](https://www.prisma.io/docs/getting-started/quickstart#4-explore-how-to-send-queries-to-your-database-with-prisma-client \"Direct link to 4. Explore how to send queries to your database with Prisma Client\")\n\nTo send queries to the database, you will need a TypeScript file to execute your Prisma Client queries. Create a new file called `script.ts` for this purpose:\n\nThen, paste the following boilerplate into it:\n\nscript.ts\n\n```\nimport { PrismaClient } from '@prisma/client'const prisma = new PrismaClient()async function main() {  // ... you will write your Prisma Client queries here}main()  .then(async () => {    await prisma.$disconnect()  })  .catch(async (e) => {    console.error(e)    await prisma.$disconnect()    process.exit(1)  })\n```\n\nThis code contains a `main` function that's invoked at the end of the script. It also instantiates `PrismaClient` which represents the query interface to your database.\n\n### 4.1. Create a new `User` record[​](https://www.prisma.io/docs/getting-started/quickstart#41-create-a-new-user-record \"Direct link to 41-create-a-new-user-record\")\n\nLet's start with a small query to create a new `User` record in the database and log the resulting object to the console. Add the following code to your `script.ts` file:\n\nscript.ts\n\n```\nimport { PrismaClient } from '@prisma/client'const prisma = new PrismaClient()async function main() {  const user = await prisma.user.create({    data: {      name: 'Alice',      email: 'alice@prisma.io',    },  })  console.log(user)}main()  .then(async () => {    await prisma.$disconnect()  })  .catch(async (e) => {    console.error(e)    await prisma.$disconnect()    process.exit(1)  })\n```\n\nInstead of copying the code, you can type it out in your editor to experience the autocompletion Prisma Client provides. You can also actively invoke the autocompletion by pressing the CTRL+SPACE keys on your keyboard.\n\nNext, execute the script with the following command:\n\nGreat job, you just created your first database record with Prisma Client! 🎉\n\nIn the next section, you'll learn how to read data from the database.\n\n### 4.2. Retrieve all `User` records[​](https://www.prisma.io/docs/getting-started/quickstart#42-retrieve-all-user-records \"Direct link to 42-retrieve-all-user-records\")\n\nPrisma Client offers various queries to read data from your database. In this section, you'll use the `findMany` query that returns _all_ the records in the database for a given model.\n\nDelete the previous Prisma Client query and add the new `findMany` query instead:\n\nscript.ts\n\n```\nimport { PrismaClient } from '@prisma/client'const prisma = new PrismaClient()async function main() {  const users = await prisma.user.findMany()  console.log(users)}main()  .then(async () => {    await prisma.$disconnect()  })  .catch(async (e) => {    console.error(e)    await prisma.$disconnect()    process.exit(1)  })\n```\n\nExecute the script again:\n\nNotice how the single `User` object is now enclosed with square brackets in the console. That's because the `findMany` returned an array with a single object inside.\n\n### 4.3. Explore relation queries with Prisma Client[​](https://www.prisma.io/docs/getting-started/quickstart#43-explore-relation-queries-with-prisma-client \"Direct link to 4.3. Explore relation queries with Prisma Client\")\n\nOne of the main features of Prisma Client is the ease of working with [relations](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations). In this section, you'll learn how to create a `User` and a `Post` record in a nested write query. Afterwards, you'll see how you can retrieve the relation from the database using the `include` option.\n\nFirst, adjust your script to include the nested query:\n\nscript.ts\n\n```\nimport { PrismaClient } from '@prisma/client'const prisma = new PrismaClient()async function main() {  const user = await prisma.user.create({    data: {      name: 'Bob',      email: 'bob@prisma.io',      posts: {        create: [          {            title: 'Hello World',            published: true          },          {            title: 'My second post',            content: 'This is still a draft'          }        ],      },    },  })  console.log(user)}main()  .then(async () => {    await prisma.$disconnect()  })  .catch(async (e) => {    console.error(e)    await prisma.$disconnect()    process.exit(1)  })\n```\n\nRun the query by executing the script again:\n\nBy default, Prisma Client only returns _scalar_ fields in the result objects of a query. That's why, even though you also created a new `Post` record for the new `User` record, the console only printed an object with three scalar fields: `id`, `email` and `name`.\n\nIn order to also retrieve the `Post` records that belong to a `User`, you can use the `include` option via the `posts` relation field:\n\nscript.ts\n\n```\nimport { PrismaClient } from '@prisma/client'const prisma = new PrismaClient()async function main() {  const usersWithPosts = await prisma.user.findMany({    include: {      posts: true,    },  })  console.dir(usersWithPosts, { depth: null })}main()  .then(async () => {    await prisma.$disconnect()  })  .catch(async (e) => {    console.error(e)    await prisma.$disconnect()    process.exit(1)  })\n```\n\nRun the script again to see the results of the nested read query:\n\nThis time, you're seeing two `User` objects being printed. Both of them have a `posts` field (which is empty for `\"Alice\"` and populated with a single `Post` object for `\"Bob\"`) that represents the `Post` records associated with them.\n\nNotice that the objects in the `usersWithPosts` array are fully typed as well. This means you will get autocompletion and the TypeScript compiler will prevent you from accidentally typing them.\n\n## 5\\. Next steps[​](https://www.prisma.io/docs/getting-started/quickstart#5-next-steps \"Direct link to 5. Next steps\")\n\nIn this Quickstart guide, you have learned how to get started with Prisma ORM in a plain TypeScript project. Feel free to explore the Prisma Client API a bit more on your own, e.g. by including filtering, sorting, and pagination options in the `findMany` query or exploring more operations like `update` and `delete` queries.\n\n### Explore the data in Prisma Studio[​](https://www.prisma.io/docs/getting-started/quickstart#explore-the-data-in-prisma-studio \"Direct link to Explore the data in Prisma Studio\")\n\nPrisma ORM comes with a built-in GUI to view and edit the data in your database. You can open it using the following command:\n\n### Set up Prisma ORM with your own database[​](https://www.prisma.io/docs/getting-started/quickstart#set-up-prisma-orm-with-your-own-database \"Direct link to Set up Prisma ORM with your own database\")\n\nIf you want to move forward with Prisma ORM using your own PostgreSQL, MySQL, MongoDB or any other supported database, follow the Set Up Prisma ORM guides:\n\n*   [Start with Prisma ORM from scratch](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql)\n*   [Add Prisma ORM to an existing project](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project)\n\n### Explore ready-to-run Prisma ORM examples[​](https://www.prisma.io/docs/getting-started/quickstart#explore-ready-to-run-prisma-orm-examples \"Direct link to Explore ready-to-run Prisma ORM examples\")\n\nCheck out the [`prisma-examples`](https://github.com/prisma/prisma-examples/) repository on GitHub to see how Prisma ORM can be used with your favorite library. The repo contains examples with Express, NestJS, GraphQL as well as fullstack examples with Next.js and Vue.js, and a lot more.\n\n### Build an app with Prisma ORM[​](https://www.prisma.io/docs/getting-started/quickstart#build-an-app-with-prisma-orm \"Direct link to Build an app with Prisma ORM\")\n\nThe Prisma blog features comprehensive tutorials about Prisma ORM, check out our latest ones:\n\n*   [Build a fullstack app with Next.js](https://www.youtube.com/watch?v=QXxy8Uv1LnQ&ab_channel=ByteGrad)\n*   [Build a fullstack app with Remix](https://www.prisma.io/blog/fullstack-remix-prisma-mongodb-1-7D0BfTXBmB6r) (5 parts, including videos)\n*   [Build a REST API with NestJS](https://www.prisma.io/blog/nestjs-prisma-rest-api-7D056s1BmOL0)\n\nPrisma has a huge [community](https://www.prisma.io/community) of developers. Join us on [Discord](https://discord.gg/KQyTW2H5ca) or ask questions using [GitHub Discussions](https://github.com/prisma/prisma/discussions).",
    "title": "Quickstart with TypeScript & SQLite | Prisma Documentation",
    "description": "Get started with Prisma ORM in 5 minutes. You will learn how to send queries to a SQLite database in a plain TypeScript script using Prisma Client.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/setup-prisma",
    "markdown": "# Set up Prisma ORM | Prisma Documentation\n\nStart from scratch or add Prisma ORM to an existing project. The following tutorials introduce you to the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli), [Prisma Client](https://www.prisma.io/docs/orm/prisma-client), and [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate).\n\n## In this section[​](https://www.prisma.io/docs/getting-started/setup-prisma#in-this-section \"Direct link to In this section\")\n\n[\n\n## Start from scratch\n\n](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch)\n\n[\n\n## Add to existing project\n\n](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project)",
    "title": "Set up Prisma ORM | Prisma Documentation",
    "description": "Get started with Prisma ORM and your favorite database. Learn about data modeling, migrations and querying.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch",
    "markdown": "# Start from scratch with Prisma ORM\n\nStart a fresh project from scratch with the following tutorials as they introduce you to the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli), [Prisma Client](https://www.prisma.io/docs/orm/prisma-client), and [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate).\n\n## In this section[​](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch#in-this-section \"Direct link to In this section\")\n\n[\n\n## Relational databases\n\n](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql)\n\n[\n\n## MongoDB\n\n](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-typescript-mongodb)",
    "title": "Start from scratch with Prisma ORM | Prisma Documentation",
    "description": "Learn how to create a new Node.js or TypeScript project from scratch by connecting Prisma ORM to your database of choice and generating a Prisma Client for database access.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project",
    "markdown": "# Add Prisma ORM to an existing project\n\nInclude Prisma ORM in an existing project with the following documentation, which explains some core concepts as it guides you through integrating Prisma ORM into your workflow.\n\n## In this section[​](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project#in-this-section \"Direct link to In this section\")\n\n[\n\n## Relational databases\n\n](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-postgresql)\n\n[\n\n## MongoDB\n\n](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb-typescript-mongodb)",
    "title": "Add Prisma ORM to an existing project | Prisma Documentation",
    "description": "Learn how to add Prisma ORM to an existing Node.js or TypeScript project by connecting it to your database of choice and generating a Prisma Client for database access.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql",
    "markdown": "# Start from scratch with Prisma ORM using TypeScript and PostgreSQL (15 min)\n\n## Relational databases\n\nLearn how to create a new Node.js or TypeScript project from scratch by connecting Prisma ORM to your database and generating a Prisma Client for database access. The following tutorial introduces you to the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli), [Prisma Client](https://www.prisma.io/docs/orm/prisma-client), and [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate).\n\n## Prerequisites[​](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql#prerequisites \"Direct link to Prerequisites\")\n\nIn order to successfully complete this guide, you need:\n\n*   [Node.js](https://nodejs.org/en/) installed on your machine\n*   a [PostgreSQL](https://www.postgresql.org/) database server running\n\n> See [System requirements](https://www.prisma.io/docs/orm/reference/system-requirements) for exact version requirements.\n\nMake sure you have your database [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls) at hand. If you don't have a database server running and just want to explore Prisma ORM, check out the [Quickstart](https://www.prisma.io/docs/getting-started/quickstart).\n\n## Create project setup[​](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql#create-project-setup \"Direct link to Create project setup\")\n\nAs a first step, create a project directory and navigate into it:\n\n```\nmkdir hello-prismacd hello-prisma\n```\n\nNext, initialize a TypeScript project and add the Prisma CLI as a development dependency to it:\n\n```\nnpm init -ynpm install prisma typescript ts-node @types/node --save-dev\n```\n\nThis creates a `package.json` with an initial setup for your TypeScript app.\n\nNext, initialize TypeScript:\n\nYou can now invoke the Prisma CLI by prefixing it with `npx`:\n\nNext, set up your Prisma ORM project by creating your [Prisma Schema](https://www.prisma.io/docs/orm/prisma-schema) file with the following command:\n\nThis command does two things:\n\n*   creates a new directory called `prisma` that contains a file called `schema.prisma`, which contains the Prisma schema with your database connection variable and schema models\n*   creates the [`.env` file](https://www.prisma.io/docs/orm/more/development-environment/environment-variables/env-files) in the root directory of the project, which is used for defining environment variables (such as your database connection)",
    "title": "Start from scratch with Prisma ORM using TypeScript and PostgreSQL (15 min) | Prisma Documentation",
    "description": "Learn how to create a new TypeScript project from scratch by connecting Prisma ORM to your PostgreSQL database and generating a Prisma Client for database access.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql",
    "markdown": "# Start from scratch with Prisma ORM using TypeScript and MySQL (15 min)\n\n## Relational databases\n\nLearn how to create a new Node.js or TypeScript project from scratch by connecting Prisma ORM to your database and generating a Prisma Client for database access. The following tutorial introduces you to the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli), [Prisma Client](https://www.prisma.io/docs/orm/prisma-client), and [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate).\n\n## Prerequisites[​](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql#prerequisites \"Direct link to Prerequisites\")\n\nIn order to successfully complete this guide, you need:\n\n*   [Node.js](https://nodejs.org/en/) installed on your machine\n*   a [MySQL](https://www.mysql.com/) database server running\n\n> See [System requirements](https://www.prisma.io/docs/orm/reference/system-requirements) for exact version requirements.\n\nMake sure you have your database [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls) at hand. If you don't have a database server running and just want to explore Prisma ORM, check out the [Quickstart](https://www.prisma.io/docs/getting-started/quickstart).\n\n## Create project setup[​](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql#create-project-setup \"Direct link to Create project setup\")\n\nAs a first step, create a project directory and navigate into it:\n\n```\nmkdir hello-prismacd hello-prisma\n```\n\nNext, initialize a TypeScript project and add the Prisma CLI as a development dependency to it:\n\n```\nnpm init -ynpm install prisma typescript ts-node @types/node --save-dev\n```\n\nThis creates a `package.json` with an initial setup for your TypeScript app.\n\nNext, initialize TypeScript:\n\nYou can now invoke the Prisma CLI by prefixing it with `npx`:\n\nNext, set up your Prisma ORM project by creating your [Prisma Schema](https://www.prisma.io/docs/orm/prisma-schema) file with the following command:\n\nThis command does two things:\n\n*   creates a new directory called `prisma` that contains a file called `schema.prisma`, which contains the Prisma schema with your database connection variable and schema models\n*   creates the [`.env` file](https://www.prisma.io/docs/orm/more/development-environment/environment-variables/env-files) in the root directory of the project, which is used for defining environment variables (such as your database connection)",
    "title": "Start from scratch with Prisma ORM using TypeScript and MySQL (15 min) | Prisma Documentation",
    "description": "Learn how to create a new TypeScript project from scratch by connecting Prisma ORM to your MySQL database and generating a Prisma Client for database access.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver",
    "markdown": "# Start from scratch with Prisma ORM using TypeScript and SQL Server (15 min)\n\n## Relational databases\n\nLearn how to create a new Node.js or TypeScript project from scratch by connecting Prisma ORM to your database and generating a Prisma Client for database access. The following tutorial introduces you to the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli), [Prisma Client](https://www.prisma.io/docs/orm/prisma-client), and [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate).\n\n## Prerequisites[​](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver#prerequisites \"Direct link to Prerequisites\")\n\nIn order to successfully complete this guide, you need:\n\n*   [Node.js](https://nodejs.org/en/) installed on your machine\n*   A [Microsoft SQL Server](https://docs.microsoft.com/en-us/sql/?view=sql-server-ver15) database\n    *   [Microsoft SQL Server on Linux for Docker](https://www.prisma.io/docs/orm/overview/databases/sql-server/sql-server-docker)\n    *   [Microsoft SQL Server on Windows (local)](https://www.prisma.io/docs/orm/overview/databases/sql-server/sql-server-local)\n\n> See [System requirements](https://www.prisma.io/docs/orm/reference/system-requirements) for exact version requirements.\n\nMake sure you have your database [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls) at hand. If you don't have a database server running and just want to explore Prisma ORM, check out the [Quickstart](https://www.prisma.io/docs/getting-started/quickstart).\n\n## Create project setup[​](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver#create-project-setup \"Direct link to Create project setup\")\n\nAs a first step, create a project directory and navigate into it:\n\n```\nmkdir hello-prismacd hello-prisma\n```\n\nNext, initialize a TypeScript project and add the Prisma CLI as a development dependency to it:\n\n```\nnpm init -ynpm install prisma typescript ts-node @types/node --save-dev\n```\n\nThis creates a `package.json` with an initial setup for your TypeScript app.\n\nNext, initialize TypeScript:\n\nYou can now invoke the Prisma CLI by prefixing it with `npx`:\n\nNext, set up your Prisma ORM project by creating your [Prisma Schema](https://www.prisma.io/docs/orm/prisma-schema) file with the following command:\n\nThis command does two things:\n\n*   creates a new directory called `prisma` that contains a file called `schema.prisma`, which contains the Prisma schema with your database connection variable and schema models\n*   creates the [`.env` file](https://www.prisma.io/docs/orm/more/development-environment/environment-variables/env-files) in the root directory of the project, which is used for defining environment variables (such as your database connection)",
    "title": "Start from scratch with Prisma ORM using TypeScript and SQL Server (15 min) | Prisma Documentation",
    "description": "Learn how to create a new TypeScript project from scratch by connecting Prisma ORM to your SQL Server database and generating a Prisma Client for database access.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb",
    "markdown": "# Start from scratch with Prisma ORM using TypeScript and CockroachDB (15 min)\n\n## Relational databases\n\nLearn how to create a new Node.js or TypeScript project from scratch by connecting Prisma ORM to your database and generating a Prisma Client for database access. The following tutorial introduces you to the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli), [Prisma Client](https://www.prisma.io/docs/orm/prisma-client), and [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate).\n\n## Prerequisites[​](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb#prerequisites \"Direct link to Prerequisites\")\n\nIn order to successfully complete this guide, you need:\n\n*   [Node.js](https://nodejs.org/en/) installed on your machine\n*   a [CockroachDB](https://www.cockroachlabs.com/) database server running\n\n> See [System requirements](https://www.prisma.io/docs/orm/reference/system-requirements) for exact version requirements.\n\nMake sure you have your database [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls) at hand. If you don't have a database server running and just want to explore Prisma ORM, check out the [Quickstart](https://www.prisma.io/docs/getting-started/quickstart).\n\n## Create project setup[​](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb#create-project-setup \"Direct link to Create project setup\")\n\nAs a first step, create a project directory and navigate into it:\n\n```\nmkdir hello-prismacd hello-prisma\n```\n\nNext, initialize a TypeScript project and add the Prisma CLI as a development dependency to it:\n\n```\nnpm init -ynpm install prisma typescript ts-node @types/node --save-dev\n```\n\nThis creates a `package.json` with an initial setup for your TypeScript app.\n\nNext, initialize TypeScript:\n\nYou can now invoke the Prisma CLI by prefixing it with `npx`:\n\nNext, set up your Prisma ORM project by creating your [Prisma Schema](https://www.prisma.io/docs/orm/prisma-schema) file with the following command:\n\nThis command does two things:\n\n*   creates a new directory called `prisma` that contains a file called `schema.prisma`, which contains the Prisma schema with your database connection variable and schema models\n*   creates the [`.env` file](https://www.prisma.io/docs/orm/more/development-environment/environment-variables/env-files) in the root directory of the project, which is used for defining environment variables (such as your database connection)",
    "title": "Start from scratch with Prisma ORM using TypeScript and CockroachDB (15 min) | Prisma Documentation",
    "description": "Learn how to create a new TypeScript project from scratch by connecting Prisma ORM to your CockroachDB database and generating a Prisma Client for database access.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale",
    "markdown": "# Start from scratch with Prisma ORM using TypeScript and PlanetScale (15 min)\n\n## Relational databases\n\nLearn how to create a new Node.js or TypeScript project from scratch by connecting Prisma ORM to your database and generating a Prisma Client for database access. The following tutorial introduces you to the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli), [Prisma Client](https://www.prisma.io/docs/orm/prisma-client), and [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate).\n\n## Prerequisites[​](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale#prerequisites \"Direct link to Prerequisites\")\n\nIn order to successfully complete this guide, you need:\n\n*   [Node.js](https://nodejs.org/en/) installed on your machine\n*   a [PlanetScale](https://www.planetscale.com/) database server running\n\nwarning\n\nThis tutorial will also assume that you can push to the `main` branch of your database. Do not do this if your `main` branch has been promoted to production.\n\n> See [System requirements](https://www.prisma.io/docs/orm/reference/system-requirements) for exact version requirements.\n\nMake sure you have your database [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls) at hand. If you don't have a database server running and just want to explore Prisma ORM, check out the [Quickstart](https://www.prisma.io/docs/getting-started/quickstart).\n\n## Create project setup[​](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale#create-project-setup \"Direct link to Create project setup\")\n\nAs a first step, create a project directory and navigate into it:\n\n```\nmkdir hello-prismacd hello-prisma\n```\n\nNext, initialize a TypeScript project and add the Prisma CLI as a development dependency to it:\n\n```\nnpm init -ynpm install prisma typescript ts-node @types/node --save-dev\n```\n\nThis creates a `package.json` with an initial setup for your TypeScript app.\n\nNext, initialize TypeScript:\n\nYou can now invoke the Prisma CLI by prefixing it with `npx`:\n\nNext, set up your Prisma ORM project by creating your [Prisma Schema](https://www.prisma.io/docs/orm/prisma-schema) file with the following command:\n\nThis command does two things:\n\n*   creates a new directory called `prisma` that contains a file called `schema.prisma`, which contains the Prisma schema with your database connection variable and schema models\n*   creates the [`.env` file](https://www.prisma.io/docs/orm/more/development-environment/environment-variables/env-files) in the root directory of the project, which is used for defining environment variables (such as your database connection)",
    "title": "Start from scratch with Prisma ORM using TypeScript and PlanetScale (15 min) | Prisma Documentation",
    "description": "Learn how to create a new TypeScript project from scratch by connecting Prisma ORM to your PlanetScale database and generating a Prisma Client for database access.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma",
    "markdown": "# What is Prisma ORM? (Overview)\n\nPrisma ORM is an [open-source](https://github.com/prisma/prisma) next-generation ORM. It consists of the following parts:\n\n*   **Prisma Client**: Auto-generated and type-safe query builder for Node.js & TypeScript\n    \n*   **Prisma Migrate**: Migration system\n    \n*   **Prisma Studio**: GUI to view and edit data in your database.\n    \n    info\n    \n    **Prisma Studio** is the only part of Prisma ORM that is not open source. You can only run Prisma Studio locally.\n    \n\nPrisma Client can be used in _any_ Node.js (supported versions) or TypeScript backend application (including serverless applications and microservices). This can be a [REST API](https://www.prisma.io/docs/orm/overview/prisma-in-your-stack/rest), a [GraphQL API](https://www.prisma.io/docs/orm/overview/prisma-in-your-stack/graphql), a gRPC API, or anything else that needs a database.\n\n## How does Prisma ORM work?[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#how-does-prisma-orm-work \"Direct link to How does Prisma ORM work?\")\n\n### The Prisma schema[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#the-prisma-schema \"Direct link to The Prisma schema\")\n\nEvery project that uses a tool from the Prisma ORM toolkit starts with a [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema). The Prisma schema allows developers to define their _application models_ in an intuitive data modeling language. It also contains the connection to a database and defines a _generator_:\n\n*   Relational databases\n*   MongoDB\n\n```\ndatasource db {  provider = \"postgresql\"  url      = env(\"DATABASE_URL\")}generator client {  provider = \"prisma-client-js\"}model Post {  id        Int     @id @default(autoincrement())  title     String  content   String?  published Boolean @default(false)  author    User?   @relation(fields: [authorId], references: [id])  authorId  Int?}model User {  id    Int     @id @default(autoincrement())  email String  @unique  name  String?  posts Post[]}\n```\n\n> **Note**: The Prisma schema has powerful data modeling features. For example, it allows you to define \"Prisma-level\" [relation fields](https://www.prisma.io/docs/orm/prisma-schema/data-model/relations) which will make it easier to work with [relations in the Prisma Client API](https://www.prisma.io/docs/orm/prisma-client/queries/relation-queries). In the case above, the `posts` field on `User` is defined only on \"Prisma-level\", meaning it does not manifest as a foreign key in the underlying database.\n\nIn this schema, you configure three things:\n\n*   **Data source**: Specifies your database connection (via an environment variable)\n*   **Generator**: Indicates that you want to generate Prisma Client\n*   **Data model**: Defines your application models\n\n### The Prisma schema data model[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#the-prisma-schema-data-model \"Direct link to The Prisma schema data model\")\n\nOn this page, the focus is on the data model. You can learn more about [Data sources](https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources) and [Generators](https://www.prisma.io/docs/orm/prisma-schema/overview/generators) on the respective docs pages.\n\n#### Functions of Prisma schema data models[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#functions-of-prisma-schema-data-models \"Direct link to Functions of Prisma schema data models\")\n\nThe data model is a collection of [models](https://www.prisma.io/docs/orm/prisma-schema/data-model/models#defining-models). A model has two major functions:\n\n*   Represent a table in relational databases or a collection in MongoDB\n*   Provide the foundation for the queries in the Prisma Client API\n\n#### Getting a data model[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#getting-a-data-model \"Direct link to Getting a data model\")\n\nThere are two major workflows for \"getting\" a data model into your Prisma schema:\n\n*   Manually writing the data model and mapping it to the database with [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate)\n*   Generating the data model by [introspecting](https://www.prisma.io/docs/orm/prisma-schema/introspection) a database\n\nOnce the data model is defined, you can [generate Prisma Client](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client) which will expose CRUD and more queries for the defined models. If you're using TypeScript, you'll get full type-safety for all queries (even when only retrieving the subsets of a model's fields).\n\n### Accessing your database with Prisma Client[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#accessing-your-database-with-prisma-client \"Direct link to Accessing your database with Prisma Client\")\n\n#### Generating Prisma Client[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#generating-prisma-client \"Direct link to Generating Prisma Client\")\n\nThe first step when using Prisma Client is installing the `@prisma/client` npm package:\n\n```\nnpm install @prisma/client\n```\n\nInstalling the `@prisma/client` package invokes the `prisma generate` command, which reads your Prisma schema and _generates_ Prisma Client code. The code is [generated into the `node_modules/.prisma/client` folder by default](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client#the-prismaclient-npm-package).\n\nAfter you change your data model, you'll need to manually re-generate Prisma Client to ensure the code inside `node_modules/.prisma/client` gets updated:\n\n#### Using Prisma Client to send queries to your database[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#using-prisma-client-to-send-queries-to-your-database \"Direct link to Using Prisma Client to send queries to your database\")\n\nOnce Prisma Client has been generated, you can import it in your code and send queries to your database. This is what the setup code looks like.\n\n##### Import and instantiate Prisma Client[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#import-and-instantiate-prisma-client \"Direct link to Import and instantiate Prisma Client\")\n\n*   import\n*   require\n\n```\nimport { PrismaClient } from '@prisma/client'const prisma = new PrismaClient()\n```\n\nNow you can start sending queries via the generated Prisma Client API, here are a few sample queries. Note that all Prisma Client queries return _plain old JavaScript objects_.\n\nLearn more about the available operations in the [Prisma Client API reference](https://www.prisma.io/docs/orm/prisma-client).\n\n##### Retrieve all `User` records from the database[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#retrieve-all-user-records-from-the-database \"Direct link to retrieve-all-user-records-from-the-database\")\n\n```\n// Run inside `async` functionconst allUsers = await prisma.user.findMany()\n```\n\n##### Include the `posts` relation on each returned `User` object[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#include-the-posts-relation-on-each-returned-user-object \"Direct link to include-the-posts-relation-on-each-returned-user-object\")\n\n```\n// Run inside `async` functionconst allUsers = await prisma.user.findMany({  include: { posts: true },})\n```\n\n##### Filter all `Post` records that contain `\"prisma\"`[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#filter-all-post-records-that-contain-prisma \"Direct link to filter-all-post-records-that-contain-prisma\")\n\n```\n// Run inside `async` functionconst filteredPosts = await prisma.post.findMany({  where: {    OR: [      { title: { contains: 'prisma' } },      { content: { contains: 'prisma' } },    ],  },})\n```\n\n##### Create a new `User` and a new `Post` record in the same query[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#create-a-new-user-and-a-new-post-record-in-the-same-query \"Direct link to create-a-new-user-and-a-new-post-record-in-the-same-query\")\n\n```\n// Run inside `async` functionconst user = await prisma.user.create({  data: {    name: 'Alice',    email: 'alice@prisma.io',    posts: {      create: { title: 'Join us for Prisma Day 2020' },    },  },})\n```\n\n##### Update an existing `Post` record[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#update-an-existing-post-record \"Direct link to update-an-existing-post-record\")\n\n```\n// Run inside `async` functionconst post = await prisma.post.update({  where: { id: 42 },  data: { published: true },})\n```\n\n#### Usage with TypeScript[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#usage-with-typescript \"Direct link to Usage with TypeScript\")\n\nNote that when using TypeScript, the result of this query will be _statically typed_ so that you can't accidentally access a property that doesn't exist (and any typos are caught at compile-time). Learn more about leveraging Prisma Client's generated types on the [Advanced usage of generated types](https://www.prisma.io/docs/orm/prisma-client/type-safety/operating-against-partial-structures-of-model-types) page in the docs.\n\n## Typical Prisma ORM workflows[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#typical-prisma-orm-workflows \"Direct link to Typical Prisma ORM workflows\")\n\nAs mentioned above, there are two ways for \"getting\" your data model into the Prisma schema. Depending on which approach you choose, your main Prisma ORM workflow might look different.\n\n### Prisma Migrate[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#prisma-migrate \"Direct link to Prisma Migrate\")\n\nWith **Prisma Migrate**, Prisma ORM's integrated database migration tool, the workflow looks as follows:\n\n1.  Manually adjust your [Prisma schema data model](https://www.prisma.io/docs/orm/prisma-schema/data-model/models)\n2.  Migrate your development database using the `prisma migrate dev` CLI command\n3.  Use Prisma Client in your application code to access your database\n\n![Typical workflow with Prisma Migrate](https://www.prisma.io/docs/assets/images/prisma-migrate-development-workflow-ef472d5e074a57e32dbd65f101f68a70.png)\n\nTo learn more about the Prisma Migrate workflow, see:\n\n*   [Deploying database changes with Prisma Migrate](https://www.prisma.io/docs/orm/prisma-client/deployment/deploy-database-changes-with-prisma-migrate)\n\n*   [Developing with Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate)\n\n### SQL migrations and introspection[​](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma#sql-migrations-and-introspection \"Direct link to SQL migrations and introspection\")\n\nIf for some reason, you can not or do not want to use Prisma Migrate, you can still use introspection to update your Prisma schema from your database schema. The typical workflow when using **SQL migrations and introspection** is slightly different:\n\n1.  Manually adjust your database schema using SQL or a third-party migration tool\n2.  (Re-)introspect your database\n3.  Optionally [(re-)configure your Prisma Client API](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/custom-model-and-field-names))\n4.  (Re-)generate Prisma Client\n5.  Use Prisma Client in your application code to access your database\n\n![Introspect workflow](https://www.prisma.io/docs/assets/images/prisma-evolve-app-workflow-ef3834a9ab4af0633eb1e1ee32d2fde7.png)\n\nTo learn more about the introspection workflow, please refer the [introspection section](https://www.prisma.io/docs/orm/prisma-schema/introspection).",
    "title": "What is Prisma ORM? (Overview) | Prisma Documentation",
    "description": "This page gives a high-level overview of what Prisma ORM is and how it works. It's a great starting point for Prisma newcomers!",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-typescript-mongodb",
    "markdown": "# Start from scratch with Prisma ORM using MongoDB and TypeScript (15 min)\n\nLearn how to create a new Node.js or TypeScript project from scratch by connecting Prisma ORM to your MongoDB database and generating a Prisma Client for database access. The following tutorial introduces you to the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli) and [Prisma Client](https://www.prisma.io/docs/orm/prisma-client).\n\n## Prerequisites[​](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-typescript-mongodb#prerequisites \"Direct link to Prerequisites\")\n\nIn order to successfully complete this guide, you need:\n\n*   [Node.js](https://nodejs.org/en/) installed on your machine\n    \n*   Access to a MongoDB 4.2+ server with a replica set deployment. We recommend using [MongoDB Atlas](https://www.mongodb.com/cloud/atlas).\n    \n    warning\n    \n    The MongoDB database connector uses transactions to support nested writes. Transactions **require** a [replica set](https://docs.mongodb.com/manual/tutorial/deploy-replica-set/) deployment. The easiest way to deploy a replica set is with [Atlas](https://docs.atlas.mongodb.com/getting-started/). It's free to get started.\n    \n\nMake sure you have your database [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls) at hand. If you don't have a database server running and just want to explore Prisma ORM, check out the [Quickstart](https://www.prisma.io/docs/getting-started/quickstart).\n\n> See [System requirements](https://www.prisma.io/docs/orm/reference/system-requirements) for exact version requirements.\n\n## Create project setup[​](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-typescript-mongodb#create-project-setup \"Direct link to Create project setup\")\n\nAs a first step, create a project directory and navigate into it:\n\n```\nmkdir hello-prismacd hello-prisma\n```\n\nNext, initialize a TypeScript project and add the Prisma CLI as a development dependency to it:\n\n```\nnpm init -ynpm install prisma typescript ts-node @types/node --save-dev\n```\n\nThis creates a `package.json` with an initial setup for your TypeScript app.\n\nNext, initialize TypeScript:\n\nYou can now invoke the Prisma CLI by prefixing it with `npx`:\n\nNext, set up your Prisma ORM project by creating your [Prisma Schema](https://www.prisma.io/docs/orm/prisma-schema) file with the following command:\n\nThis command does two things:\n\n*   creates a new directory called `prisma` that contains a file called `schema.prisma`, which contains the Prisma schema with your database connection variable and schema models\n*   creates the [`.env` file](https://www.prisma.io/docs/orm/more/development-environment/environment-variables/env-files) in the root directory of the project, which is used for defining environment variables (such as your database connection)",
    "title": "Start from scratch with Prisma ORM using MongoDB and TypeScript (15 min) | Prisma Documentation",
    "description": "Learn how to create a new TypeScript project from scratch by connecting Prisma ORM to your MongoDB database and generating a Prisma Client for database access.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-postgresql",
    "markdown": "# Add Prisma ORM to an existing project using TypeScript and PostgreSQL (15 min)\n\nLearn how to add Prisma ORM to an existing Node.js or TypeScript project by connecting it to your database and generating a Prisma Client for database access. The following tutorial introduces you to the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli), [Prisma Client](https://www.prisma.io/docs/orm/prisma-client), and [Prisma Introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection).\n\nMake sure you have your database [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls) (that includes your authentication credentials) at hand! If you don't have a database server running and just want to explore Prisma ORM, check out the [Quickstart](https://www.prisma.io/docs/getting-started/quickstart).\n\nAs a first step, navigate into your project directory that contains the `package.json` file.\n\n```\nnpm install prisma --save-dev\n```\n\nNext, set up your Prisma ORM project by creating your [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema) file template with the following command:",
    "title": "Add Prisma ORM to an existing project using TypeScript and PostgreSQL (15 min) | Prisma Documentation",
    "description": "Learn how to add Prisma ORM to an existing TypeScript project by connecting it to your PostgreSQL database and generating a Prisma Client for database access.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-mysql",
    "markdown": "# Add Prisma to an existing project using TypeScript and MySQL (15 min)\n\nLearn how to add Prisma ORM to an existing Node.js or TypeScript project by connecting it to your database and generating a Prisma Client for database access. The following tutorial introduces you to the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli), [Prisma Client](https://www.prisma.io/docs/orm/prisma-client), and [Prisma Introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection).\n\nMake sure you have your database [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls) (that includes your authentication credentials) at hand! If you don't have a database server running and just want to explore Prisma ORM, check out the [Quickstart](https://www.prisma.io/docs/getting-started/quickstart).\n\nAs a first step, navigate into your project directory that contains the `package.json` file.\n\n```\nnpm install prisma --save-dev\n```\n\nNext, set up your Prisma ORM project by creating your [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema) file template with the following command:",
    "title": "Add Prisma to an existing project using TypeScript and MySQL (15 min) | Prisma Documentation",
    "description": "Learn how to add Prisma to an existing TypeScript project by connecting it to your MySQL database and generating a Prisma Client for database access.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-planetscale",
    "markdown": "# Add Prisma ORM to an existing project using TypeScript and PlanetScale (15 min)\n\nLearn how to add Prisma ORM to an existing Node.js or TypeScript project by connecting it to your database and generating a Prisma Client for database access. The following tutorial introduces you to the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli), [Prisma Client](https://www.prisma.io/docs/orm/prisma-client), and [Prisma Introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection).\n\nMake sure you have your database [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls) (that includes your authentication credentials) at hand! If you don't have a database server running and just want to explore Prisma ORM, check out the [Quickstart](https://www.prisma.io/docs/getting-started/quickstart).\n\nAs a first step, navigate into your project directory that contains the `package.json` file.\n\n```\nnpm install prisma --save-dev\n```\n\nNext, set up your Prisma ORM project by creating your [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema) file template with the following command:",
    "title": "Add Prisma ORM to an existing project using TypeScript and PlanetScale (15 min) | Prisma Documentation",
    "description": "Learn how to add Prisma ORM to an existing TypeScript project by connecting it to your PlanetScale database and generating a Prisma Client for database access.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-sqlserver",
    "markdown": "# Add Prisma ORM to an existing project using TypeScript and SQL Server (15 min)\n\nLearn how to add Prisma ORM to an existing Node.js or TypeScript project by connecting it to your database and generating a Prisma Client for database access. The following tutorial introduces you to the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli), [Prisma Client](https://www.prisma.io/docs/orm/prisma-client), and [Prisma Introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection).\n\nMake sure you have your database [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls) (that includes your authentication credentials) at hand! If you don't have a database server running and just want to explore Prisma ORM, check out the [Quickstart](https://www.prisma.io/docs/getting-started/quickstart).\n\nAs a first step, navigate into your project directory that contains the `package.json` file.\n\n```\nnpm install prisma --save-dev\n```\n\nNext, set up your Prisma ORM project by creating your [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema) file template with the following command:",
    "title": "Add Prisma ORM to an existing project using TypeScript and SQL Server (15 min) | Prisma Documentation",
    "description": "Learn how to add Prisma ORM to an existing TypeScript project by connecting it to your SQL Server database and generating a Prisma Client for database access.",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/orm/overview/databases/database-drivers",
    "markdown": "# Database drivers | Prisma Documentation\n\n## Default built-in drivers[​](https://www.prisma.io/docs/orm/overview/databases/database-drivers#default-built-in-drivers \"Direct link to Default built-in drivers\")\n\nOne of Prisma Client's components is the [Query Engine](https://www.prisma.io/docs/orm/more/under-the-hood/engines). The Query Engine is responsible for transforming Prisma Client queries into SQL statements. It connects to your database via TCP using built-in drivers that don't require additional setup.\n\n![Query flow from the user application to the database with Prisma Client](https://www.prisma.io/docs/assets/images/qe-query-execution-flow-768c044bfaa528bf309224ff4f38633a.png)\n\n## Driver adapters[​](https://www.prisma.io/docs/orm/overview/databases/database-drivers#driver-adapters \"Direct link to Driver adapters\")\n\nPrisma Client can connect and run queries against your database using JavaScript database drivers using **driver adapters**. Adapters act as _translators_ between Prisma Client and the JavaScript database driver.\n\nPrisma Client will use the Query Engine to transform the Prisma Client query to SQL and run the generated SQL queries via the JavaScript database driver.\n\n![Query flow from the user application to the database using Prisma Client and driver adapters](https://www.prisma.io/docs/assets/images/qe-query-engine-adapter-b187bf5d6ea0859f728411aa7c04e96c.png)\n\nThere are two different types of driver adapters:\n\n*   [Database driver adapters](https://www.prisma.io/docs/orm/overview/databases/database-drivers#database-driver-adapters)\n*   [Serverless driver adapters](https://www.prisma.io/docs/orm/overview/databases/database-drivers#serverless-driver-adapters)\n\n> **Note**: Driver adapters enable [edge deployments](https://www.prisma.io/docs/orm/prisma-client/deployment/edge/overview) of applications that use Prisma ORM.\n\n### Database driver adapters[​](https://www.prisma.io/docs/orm/overview/databases/database-drivers#database-driver-adapters \"Direct link to Database driver adapters\")\n\nYou can connect to your database using a Node.js-based driver from Prisma Client using a database driver adapter. Prisma maintains the following database driver adapters:\n\n*   [PostgreSQL](https://www.prisma.io/docs/orm/overview/databases/postgresql#using-the-node-postgres-driver)\n*   [Turso](https://www.prisma.io/docs/orm/overview/databases/turso#how-to-connect-and-query-a-turso-database)\n\n### Serverless driver adapters[​](https://www.prisma.io/docs/orm/overview/databases/database-drivers#serverless-driver-adapters \"Direct link to Serverless driver adapters\")\n\nDatabase providers, such as Neon and PlanetScale, allow you to connect to your database using other protocols besides TCP, such as HTTP and WebSockets. These database drivers are optimized for connecting to your database in serverless and edge environments.\n\nPrisma ORM maintains the following serverless driver adapters:\n\n*   [Neon](https://www.prisma.io/docs/orm/overview/databases/neon#how-to-use-neons-serverless-driver-with-prisma-orm-preview) (and Vercel Postgres)\n*   [PlanetScale](https://www.prisma.io/docs/orm/overview/databases/planetscale#how-to-use-the-planetscale-serverless-driver-with-prisma-orm-preview)\n*   [Cloudflare D1](https://www.prisma.io/docs/orm/overview/databases/cloudflare-d1)\n\n### Community-maintained database driver adapters[​](https://www.prisma.io/docs/orm/overview/databases/database-drivers#community-maintained-database-driver-adapters \"Direct link to Community-maintained database driver adapters\")\n\nYou can also build your own driver adapter for the database you're using. The following is a list of community-maintained driver adapters:\n\n*   [TiDB Cloud Serverless Driver](https://github.com/tidbcloud/prisma-adapter)\n*   [PGlite - Postgres in WASM](https://github.com/lucasthevenet/pglite-utils/tree/main/packages/prisma-adapter)\n\n## How to use driver adapters[​](https://www.prisma.io/docs/orm/overview/databases/database-drivers#how-to-use-driver-adapters \"Direct link to How to use driver adapters\")\n\nTo use this feature:\n\n1.  Update the `previewFeatures` block in your schema to include the `driverAdapters` Preview feature:\n    \n    ```\n    generator client {  provider        = \"prisma-client-js\"  previewFeatures = [\"driverAdapters\"]}\n    ```\n    \n2.  Generate Prisma Client:\n    \n3.  Refer to the following pages to learn more about how to use the specific driver adapters with the specific database providers:\n    \n    *   [PostgreSQL](https://www.prisma.io/docs/orm/overview/databases/postgresql#using-the-node-postgres-driver)\n    *   [Neon](https://www.prisma.io/docs/orm/overview/databases/neon#how-to-use-neons-serverless-driver-with-prisma-orm-preview)\n    *   [PlanetScale](https://www.prisma.io/docs/orm/overview/databases/planetscale#how-to-use-the-planetscale-serverless-driver-with-prisma-orm-preview)\n    *   [Turso](https://www.prisma.io/docs/orm/overview/databases/turso#how-to-connect-and-query-a-turso-database)\n    *   [Cloudflare D1](https://www.prisma.io/docs/orm/overview/databases/cloudflare-d1)\n\n## Notes about using driver adapters[​](https://www.prisma.io/docs/orm/overview/databases/database-drivers#notes-about-using-driver-adapters \"Direct link to Notes about using driver adapters\")\n\n### Driver adapters don't read the connection string from the Prisma schema[​](https://www.prisma.io/docs/orm/overview/databases/database-drivers#driver-adapters-dont-read-the-connection-string-from-the-prisma-schema \"Direct link to Driver adapters don't read the connection string from the Prisma schema\")\n\nWhen using Prisma ORM's built-in drivers, the connection string is read from the `url` field of the `datasource` block in your Prisma schema.\n\nOn the other hand, when using a driver adapter, the connection string needs to be provided in your _application code_ when the driver adapter is set up initially. Here is how this is done for the `pg` driver and the `@prisma/adapter-pg` adapter:\n\n```\nimport { PrismaClient } from '@prisma/client'import { PrismaPg } from '@prisma/adapter-pg'import { Pool } from 'pg'const pool = new Pool({ connectionString: env.DATABASE_URL })const adapter = new PrismaPg(pool)const prisma = new PrismaClient({ adapter })\n```\n\nSee the docs for the driver adapter you're using for concrete setup instructions.\n\n### Driver adapters and custom output paths[​](https://www.prisma.io/docs/orm/overview/databases/database-drivers#driver-adapters-and-custom-output-paths \"Direct link to Driver adapters and custom output paths\")\n\nSince Prisma 5.9.0, when using the driver adapters Preview feature along with a [custom output path for Prisma Client](https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client#using-a-custom-output-path), you cannot reference Prisma Client using a relative path.\n\nLet's assume you had `output` in your Prisma schema set to `../src/generated/client`:\n\n```\ngenerator client {  provider = \"prisma-client-js\"  output   = \"../src/generated/client\"}\n```\n\nWhat you should **not** do is reference that path relatively:\n\n```\n// what not to do!import { PrismaClient } from './src/generated/client'const client = new PrismaClient()\n```\n\nInstead, you will need to use a linked dependency.\n\n*   npm\n*   pnpm\n*   yarn\n\n```\nnpm add db@./src/generated/client\n```\n\nNow, you should be able to reference your generated client using `db`!\n\n```\nimport { PrismaClient } from 'db'const client = new PrismaClient()\n```\n\n### Driver adapters and specific frameworks[​](https://www.prisma.io/docs/orm/overview/databases/database-drivers#driver-adapters-and-specific-frameworks \"Direct link to Driver adapters and specific frameworks\")\n\n#### Nuxt[​](https://www.prisma.io/docs/orm/overview/databases/database-drivers#nuxt \"Direct link to Nuxt\")\n\nUsing a driver adapter with [Nuxt](https://nuxt.com/) to deploy to an edge function environment does not work out of the box, but adding the `nitro.experimental.wasm` configuration option fixes that:\n\n```\nexport default defineNuxtConfig({  // ...  nitro: {    // ...    experimental: {      wasm: true,    },  },  // ...})\n```\n\nSee [this example project](https://github.com/prisma/ecosystem-tests/tree/dev/driver-adapters-wasm/d1-cfpages-nuxt) for a full example that can be deployed to Cloudflare Pages.",
    "title": "Database drivers | Prisma Documentation",
    "description": "Learn how Prisma connects to your database using the built-in drivers and how you can use Prisma along with other JavaScript database drivers using driver adapters (Preview)",
    "languageCode": "en"
  },
  {
    "url": "https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-cockroachdb",
    "markdown": "# Add Prisma ORM to an existing project using TypeScript and CockroachDB (15 min)\n\nLearn how to add Prisma ORM to an existing Node.js or TypeScript project by connecting it to your database and generating a Prisma Client for database access. The following tutorial introduces you to the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli), [Prisma Client](https://www.prisma.io/docs/orm/prisma-client), and [Prisma Introspection](https://www.prisma.io/docs/orm/prisma-schema/introspection).\n\nMake sure you have your database [connection URL](https://www.prisma.io/docs/orm/reference/connection-urls) (that includes your authentication credentials) at hand! If you don't have a database server running and just want to explore Prisma ORM, check out the [Quickstart](https://www.prisma.io/docs/getting-started/quickstart).\n\nAs a first step, navigate into your project directory that contains the `package.json` file.\n\n```\nnpm install prisma --save-dev\n```\n\nNext, set up your Prisma ORM project by creating your [Prisma schema](https://www.prisma.io/docs/orm/prisma-schema) file template with the following command:",
    "title": "Add Prisma ORM to an existing project using TypeScript and CockroachDB (15 min) | Prisma Documentation",
    "description": "Learn how to add Prisma ORM to an existing TypeScript project by connecting it to your CockroachDB database and generating a Prisma Client for database access.",
    "languageCode": "en"
  }
]