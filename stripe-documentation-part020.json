[
  {
    "url": "https://docs.stripe.com/api/promotion_codes/list",
    "markdown": "# List all promotion codes | Stripe API Reference\n\nReturns a list of your promotion codes.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` promotion codes, starting after promotion code `starting_after`. Each entry in the array is a separate promotion code object. If no more promotion codes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/promotion_codes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/promotion_codes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",      \"object\": \"promotion_code\",      \"active\": true,      \"code\": \"A1H1Q1MG\",      \"coupon\": {        \"id\": \"nVJYDOag\",        \"object\": \"coupon\",        \"amount_off\": null,        \"created\": 1678040164,        \"currency\": null,        \"duration\": \"repeating\",        \"duration_in_months\": 3,        \"livemode\": false,        \"max_redemptions\": null,        \"metadata\": {},        \"name\": null,        \"percent_off\": 25.5,        \"redeem_by\": null,        \"times_redeemed\": 0,        \"valid\": true      },      \"created\": 1678040164,      \"customer\": null,      \"expires_at\": null,      \"livemode\": false,      \"max_redemptions\": null,      \"metadata\": {},      \"restrictions\": {        \"first_time_transaction\": false,        \"minimum_amount\": null,        \"minimum_amount_currency\": null      },      \"times_redeemed\": 0    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all promotion codes | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_method_domains/list",
    "markdown": "# List payment method domains | Stripe API Reference\n\nLists the details of existing payment method domains.\n\n### Parameters\n\n*   The domain name that this payment method domain object represents.\n    \n*   Whether this payment method domain is enabled. If the domain is not enabled, payment methods will not appear in Elements\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of payment method domain objects.\n\nGET /v1/payment\\_method\\_domains\n\n```\ncurl -G https://api.stripe.com/v1/payment_method_domains \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payment_method_domains\",  \"has_more\": false,  \"data\": [    {      \"id\": \"pmd_1Nnrer2eZvKYlo2Cips79tWl\",      \"object\": \"payment_method_domain\",      \"apple_pay\": {        \"status\": \"active\"      },      \"created\": 1694129445,      \"domain_name\": \"example.com\",      \"enabled\": true,      \"google_pay\": {        \"status\": \"active\"      },      \"link\": {        \"status\": \"active\"      },      \"livemode\": false,      \"paypal\": {        \"status\": \"active\"      }    }    {...}    {...}  ],}\n```\n\n## [Validate an existing payment method domain](https://docs.stripe.com/api/payment_method_domains/validate)\n\nSome payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain. The payment method doesn’t appear in Elements for this domain until it is active.\n\nTo activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.\n\nRelated guides: [Payment method domains](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated payment method domain object.\n\nPOST /v1/payment\\_method\\_domains/:id/validate\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_method_domains/pmd_1Nnrer2eZvKYlo2Cips79tWl/validate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pmd_1Nnrer2eZvKYlo2Cips79tWl\",  \"object\": \"payment_method_domain\",  \"apple_pay\": {    \"status\": \"active\"  },  \"created\": 1694129445,  \"domain_name\": \"example.com\",  \"enabled\": true,  \"google_pay\": {    \"status\": \"active\"  },  \"link\": {    \"status\": \"active\"  },  \"livemode\": false,  \"paypal\": {    \"status\": \"active\"  }}\n```\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List payment method domains | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/credit_notes/object",
    "markdown": "# The Credit Note object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note\n    \n*   Customer-facing text that appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n*   Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://docs.stripe.com/billing/invoices/credit-notes#voiding).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `issued`<br><br>The credit note has been issued. |\n    | `void`<br><br>The credit note has been voided. |\n    \n*   The integer amount in cents representing the amount of the credit note, excluding exclusive tax and invoice level discounts.\n    \n*   The integer amount in cents representing the total amount of the credit note, including tax and all discount.\n    \n\n### More attributes\n\n*   #### \n    \n    customer\\_balance\\_transactionnullable stringExpandable\n    \n*   #### \n    \n    discount\\_amountintegerDeprecated\n    \n*   #### \n    \n    discount\\_amountsarray of objects\n    \n*   #### \n    \n    effective\\_atnullable timestamp\n    \n\n*   #### \n    \n    out\\_of\\_band\\_amountnullable integer\n    \n\n*   #### \n    \n    refundnullable stringExpandable\n    \n*   #### \n    \n    shipping\\_costnullable object\n    \n*   #### \n    \n    subtotal\\_excluding\\_taxnullable integer\n    \n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    total\\_excluding\\_taxnullable integer\n    \n\n*   #### \n    \n    voided\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [The Credit Note Line Item object](https://docs.stripe.com/api/credit_notes/line_item)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The integer amount in cents representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.\n    \n*   #### \n    \n    amount\\_excluding\\_taxnullable integer\n    \n    The integer amount in cents representing the amount being credited for this line item, excluding all tax and discounts.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    Description of the item being credited.\n    \n*   #### \n    \n    discount\\_amountintegerDeprecated\n    \n    The integer amount in cents representing the discount being credited for this line item.\n    \n*   #### \n    \n    discount\\_amountsarray of objects\n    \n    The amount of discount calculated per discount for this line item\n    \n*   #### \n    \n    invoice\\_line\\_itemnullable string\n    \n    ID of the invoice line item being credited\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The number of units of product being credited.\n    \n*   #### \n    \n    tax\\_amountsarray of objects\n    \n    The amount of tax calculated per tax rate for this line item\n    \n*   #### \n    \n    tax\\_ratesarray of objects\n    \n    The tax rates which apply to the line item.\n    \n*   The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `custom_line_item` |\n    | `invoice_line_item` |\n    \n*   #### \n    \n    unit\\_amountnullable integer\n    \n    The cost of each unit of product being credited.\n    \n*   #### \n    \n    unit\\_amount\\_decimalnullable decimal string\n    \n    Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.\n    \n*   #### \n    \n    unit\\_amount\\_excluding\\_taxnullable decimal string\n    \n    The amount in cents representing the unit amount being credited for this line item, excluding all tax and discounts.\n    \n\nThe Credit Note Line Item object\n\n```\n{  \"id\": \"cnli_1NPtOx2eZvKYlo2CBH1NpUsU\",  \"object\": \"credit_note_line_item\",  \"amount\": 749,  \"amount_excluding_tax\": 749,  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice_line_item\": \"il_1NPtOx2eZvKYlo2CAUuq0WVl\",  \"livemode\": false,  \"quantity\": 1,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoice_line_item\",  \"unit_amount\": null,  \"unit_amount_decimal\": null,  \"unit_amount_excluding_tax\": \"749\"}\n```\n\n## [Create a credit note](https://docs.stripe.com/api/credit_notes/create)\n\nIssue a credit note to adjust the amount of a finalized invoice. For a `status=open` invoice, a credit note reduces its `amount_due`. For a `status=paid` invoice, a credit note does not affect its `amount_due`. Instead, it can result in any combination of the following:\n\n*   Refund: create a new refund (using `refund_amount`) or link an existing refund (using `refund`).\n*   Customer balance credit: credit the customer’s balance (using `credit_amount`) which will be automatically applied to their next invoice when it’s finalized.\n*   Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using `out_of_band_amount`).\n\nFor post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.\n\nYou may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s `pre_payment_credit_notes_amount` or `post_payment_credit_notes_amount` depending on its `status` at the time of credit note creation.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a credit note object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/credit_notes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1MxvRkLkdIwHu7ixABNtI99m\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Update a credit note](https://docs.stripe.com/api/credit_notes/update)\n\nUpdates an existing credit note.\n\n### Parameters\n\n*   Credit note memo.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the updated credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id\n\n```\ncurl https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Retrieve a credit note's line items](https://docs.stripe.com/api/credit_notes/lines)\n\nWhen retrieving a credit note, you’ll get a **lines** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/:id/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\",      \"has_more\": false,      \"data\": [        {          \"id\": \"cnli_1Nn7fB2eZvKYlo2COYgPG88j\",          \"object\": \"credit_note_line_item\",          \"amount\": 799,          \"amount_excluding_tax\": 799,          \"description\": \"My First Invoice Item (created for API docs)\",          \"discount_amount\": 0,          \"discount_amounts\": [],          \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2C3GKZP9wi\",          \"livemode\": false,          \"quantity\": 1,          \"tax_amounts\": [],          \"tax_rates\": [],          \"type\": \"invoice_line_item\",          \"unit_amount\": null,          \"unit_amount_decimal\": null,          \"unit_amount_excluding_tax\": \"799\"        }      ]    }    {...}    {...}  ],}\n```",
    "title": "The Credit Note object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/credit_notes/line_item",
    "markdown": "# Credit Note Line Item | Stripe API Reference\n\n## [The Credit Note Line Item object](https://docs.stripe.com/api/credit_notes/line_item)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The integer amount in cents representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.\n    \n*   #### \n    \n    amount\\_excluding\\_taxnullable integer\n    \n    The integer amount in cents representing the amount being credited for this line item, excluding all tax and discounts.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    Description of the item being credited.\n    \n*   #### \n    \n    discount\\_amountintegerDeprecated\n    \n    The integer amount in cents representing the discount being credited for this line item.\n    \n*   #### \n    \n    discount\\_amountsarray of objects\n    \n    The amount of discount calculated per discount for this line item\n    \n*   #### \n    \n    invoice\\_line\\_itemnullable string\n    \n    ID of the invoice line item being credited\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The number of units of product being credited.\n    \n*   #### \n    \n    tax\\_amountsarray of objects\n    \n    The amount of tax calculated per tax rate for this line item\n    \n*   #### \n    \n    tax\\_ratesarray of objects\n    \n    The tax rates which apply to the line item.\n    \n*   The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `custom_line_item` |\n    | `invoice_line_item` |\n    \n*   #### \n    \n    unit\\_amountnullable integer\n    \n    The cost of each unit of product being credited.\n    \n*   #### \n    \n    unit\\_amount\\_decimalnullable decimal string\n    \n    Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.\n    \n*   #### \n    \n    unit\\_amount\\_excluding\\_taxnullable decimal string\n    \n    The amount in cents representing the unit amount being credited for this line item, excluding all tax and discounts.\n    \n\nThe Credit Note Line Item object\n\n```\n{  \"id\": \"cnli_1NPtOx2eZvKYlo2CBH1NpUsU\",  \"object\": \"credit_note_line_item\",  \"amount\": 749,  \"amount_excluding_tax\": 749,  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice_line_item\": \"il_1NPtOx2eZvKYlo2CAUuq0WVl\",  \"livemode\": false,  \"quantity\": 1,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoice_line_item\",  \"unit_amount\": null,  \"unit_amount_decimal\": null,  \"unit_amount_excluding_tax\": \"749\"}\n```\n\n## [Create a credit note](https://docs.stripe.com/api/credit_notes/create)\n\nIssue a credit note to adjust the amount of a finalized invoice. For a `status=open` invoice, a credit note reduces its `amount_due`. For a `status=paid` invoice, a credit note does not affect its `amount_due`. Instead, it can result in any combination of the following:\n\n*   Refund: create a new refund (using `refund_amount`) or link an existing refund (using `refund`).\n*   Customer balance credit: credit the customer’s balance (using `credit_amount`) which will be automatically applied to their next invoice when it’s finalized.\n*   Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using `out_of_band_amount`).\n\nFor post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.\n\nYou may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s `pre_payment_credit_notes_amount` or `post_payment_credit_notes_amount` depending on its `status` at the time of credit note creation.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a credit note object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/credit_notes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1MxvRkLkdIwHu7ixABNtI99m\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Update a credit note](https://docs.stripe.com/api/credit_notes/update)\n\nUpdates an existing credit note.\n\n### Parameters\n\n*   Credit note memo.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the updated credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id\n\n```\ncurl https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Retrieve a credit note's line items](https://docs.stripe.com/api/credit_notes/lines)\n\nWhen retrieving a credit note, you’ll get a **lines** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/:id/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\",      \"has_more\": false,      \"data\": [        {          \"id\": \"cnli_1Nn7fB2eZvKYlo2COYgPG88j\",          \"object\": \"credit_note_line_item\",          \"amount\": 799,          \"amount_excluding_tax\": 799,          \"description\": \"My First Invoice Item (created for API docs)\",          \"discount_amount\": 0,          \"discount_amounts\": [],          \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2C3GKZP9wi\",          \"livemode\": false,          \"quantity\": 1,          \"tax_amounts\": [],          \"tax_rates\": [],          \"type\": \"invoice_line_item\",          \"unit_amount\": null,          \"unit_amount_decimal\": null,          \"unit_amount_excluding_tax\": \"799\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Retrieve a credit note preview's line items](https://docs.stripe.com/api/credit_notes/preview_lines)\n\nWhen retrieving a credit note preview, you’ll get a **lines** property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/preview/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/preview/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1Nn8592eZvKYlo2Ci4yFC46f\n```\n\n```\n{  \"id\": \"cn_1Nn7fB2eZvKYlo2CuJ0wZBlA\",  \"object\": \"credit_note\",  \"amount\": 1451,  \"amount_shipping\": 0,  \"created\": 1693952641,  \"currency\": \"usd\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"effective_at\": null,  \"invoice\": \"in_1Nn7fB2eZvKYlo2C7meA67Xp\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1Nn7fB2eZvKYlo2Cp8nLMci9\",        \"object\": \"credit_note_line_item\",        \"amount\": 951,        \"amount_excluding_tax\": 951,        \"description\": \"My First Invoice Item (created for API docs)\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2ChKG2H1tv\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [          {            \"amount\": 152,            \"inclusive\": false,            \"tax_rate\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",            \"taxability_reason\": null,            \"taxable_amount\": 799          }        ],        \"tax_rates\": [          {            \"id\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",            \"object\": \"tax_rate\",            \"active\": true,            \"country\": \"DE\",            \"created\": 1693952641,            \"description\": \"VAT Germany\",            \"display_name\": \"VAT\",            \"effective_percentage\": null,            \"inclusive\": false,            \"jurisdiction\": \"DE\",            \"livemode\": false,            \"metadata\": {},            \"percentage\": 19,            \"state\": null,            \"tax_type\": \"vat\"          }        ],        \"type\": \"invoice_line_item\",        \"unit_amount\": null,        \"unit_amount_decimal\": null,        \"unit_amount_excluding_tax\": \"951\"      },      {        \"id\": \"cnli_1Nn7fB2eZvKYlo2C7OxQLHdz\",        \"object\": \"credit_note_line_item\",        \"amount\": 500,        \"amount_excluding_tax\": 500,        \"description\": \"Service credit\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"custom_line_item\",        \"unit_amount\": 500,        \"unit_amount_decimal\": \"500\",        \"unit_amount_excluding_tax\": \"500\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"ABCD-1234-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1032D82eZvKYlo2C/cnst_123456789/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1451,  \"subtotal_excluding_tax\": 1451,  \"tax_amounts\": [    {      \"amount\": 152,      \"inclusive\": false,      \"tax_rate\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",      \"taxability_reason\": null,      \"taxable_amount\": 799    }  ],  \"total\": 1451,  \"total_excluding_tax\": null,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```",
    "title": "Credit Note Line Item | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/invoices/create",
    "markdown": "# Use the Dashboard | Stripe DocumentationThe Stripe Docs logo\n\n## Create, send, and modify invoices from the Stripe Dashboard.\n\nLearn how to create, send, and modify an [invoice](https://docs.stripe.com/api/invoices \"invoices\") from the [Dashboard](https://dashboard.stripe.com/invoices). Invoices provide an itemized list of goods and services rendered, which includes the cost, quantity, and taxes. You can also use them as a tool to collect payment. To send invoices automatically, [integrate with the Invoicing API](https://docs.stripe.com/invoicing/integration).\n\n## Create an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create and send an invoice, complete the following steps:\n\n1.  In the Dashboard, go to the [Invoices overview page](https://dashboard.stripe.com/invoices) and click **Create Invoice** to open the [invoice editor](https://dashboard.stripe.com/invoices/create). Whenever you exit the invoice editor, Stripe saves a draft. (To delete a draft invoice, click the overflow menu () next to an invoice on the [Invoices page](https://dashboard.stripe.com/invoices).)\n    \n2.  Select an existing customer or click **Add new customer**. For new customers, you have to enter a name. You can optionally add an email address or other details.\n    \n3.  Optional Click the overflow menu () in the **Items** section to open the **Items Options** dialog. Choose the desired currency and tax rendering option for the invoice.\n    \n4.  Select **Add one-time item** to create a single, one-time item. To save a product for future use, select **Create new product**.\n    \n5.  Enter the **Quantity** and **Price** for your new item or product.\n    \n6.  Optional Click the **Item options** under each item to add a tax rate, coupon, or supply date.\n    \n    #### Note\n    \n7.  Optional Use the **Memo** box to provide more information to your customer. You can edit the memo on an invoice by clicking **Edit memo** on its details page.\n    \n8.  Select one of the following invoice delivery options:\n    \n    *   **Automatically charge a payment method on file**—Immediately charges the invoice amount to your customer’s payment method that you have on file.\n        \n    *   **Send invoice or payment page link manually**—Provides a payment link for you to send to customers after you confirm the invoice.\n        \n    *   **Email invoice with link**—Enables Stripe to send an email with a payment page and an invoice PDF.\n        \n    *   **Email invoice without link**—Enables Stripe to send an invoice PDF only.\n        \n9.  Optional Expand **Advanced options**, and add [custom fields](https://docs.stripe.com/invoicing/customize#custom-fields). To learn more, see [Net prices and taxes](https://docs.stripe.com/invoicing/taxes#net-price-taxes). Expand **Advanced options**, and add [custom fields](https://docs.stripe.com/invoicing/customize#custom-fields).\n    \n10.  Click **Review invoice** and decide whether you want to include additional emails or continue editing. Send the invoice.\n    \n\nCreate an invoice with the Dashboard\n\n## Modify an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the Dashboard, you can duplicate an invoice and modify the new copy. When you duplicate an invoice, Stripe copies all of the information on the original invoice except for credit notes, deleted (or archived) products, prices, coupons, discounts, and tax rates. If you made a mistake on an invoice you already created, duplicate it, make your corrections, and then send the new invoice. Remember to [void](https://docs.stripe.com/invoicing/overview#void) the incorrect invoice as well.\n\n#### Note\n\nYou can change the status of an [open](https://docs.stripe.com/invoicing/overview#open) invoice in the Dashboard by going to its details page and choosing **More** > **Change Invoice Status**.\n\nTo duplicate an invoice, [view your invoices](https://dashboard.stripe.com/invoices) and click the overflow menu () for the invoice you want to duplicate. Click **Duplicate invoice** to create, edit, and then send the new invoice.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/invoice-duplication.7f22a89383b54d5e45693f642942afa1.png)\n\nDuplicate an invoice from the Dashboard\n\n## Customize an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can [customize invoices](https://docs.stripe.com/invoicing/customize) in several ways. These options allow you to add your own [branding](https://docs.stripe.com/invoicing/customize#brand-customization) and modify your invoices so that they comply in the jurisdictions ​​where you operate.\n\n## Invoice receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe creates receipts when a customer pays an invoice, or makes any [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") payment. We itemize the receipts for subscription and invoice payments to include line items, discounts, and taxes for the payment. To automatically send receipts, make sure that you enable the **Successful payments** option in your [Email settings](https://dashboard.stripe.com/settings/emails) and that you also add the customer’s email.\n\nAfter payment, the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page) includes a link to a receipt that a customer can download for their own records. You can also manually send a receipt by clicking the **Send receipt** button on the **Invoice details** page. To email yourself a test receipt, go to your [Branding settings](https://dashboard.stripe.com/settings/branding) and hover over the email receipt to see the **Send test receipt** button. To learn more about email receipts, see [Email receipts](https://docs.stripe.com/receipts).",
    "title": "Use the Dashboard | Stripe Documentation",
    "description": "Create, send, and modify invoices from the Stripe Dashboard.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/billing/meter-event_adjustment/object",
    "markdown": "# The Meter Event Adjustment object\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Specifies which event to cancel.\n    \n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The meter event adjustment’s status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `complete`<br><br>The event adjustment has been processed. |\n    | `pending`<br><br>The event adjustment is still being processed. |\n    \n*   Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.\n    \n    Possible enum values\n    \n    `cancel`\n    \n    Cancel a single meter event by identifier.\n    \n\nThe Meter Event Adjustment object\n\n```\n{  \"object\": \"billing.meter_event_adjustment\",  \"livemode\": false,  \"status\": \"pending\",  \"event_name\": \"ai_search_api\",  \"type\": \"cancel\",  \"cancel\": {    \"identifier\": \"identifier_123\"  }}\n```\n\n## [Create a billing meter event adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment/create)\n\nCreates a billing meter event adjustment\n\n### Parameters\n\n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.\n    \n    Possible enum values\n    \n    `cancel`\n    \n    Cancel a single meter event by identifier.\n    \n*   Specifies which event to cancel.\n    \n\n### Returns\n\nReturns a billing meter event adjustment\n\nPOST /v1/billing/meter\\_event\\_adjustments\n\n```\ncurl https://api.stripe.com/v1/billing/meter_event_adjustments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=cancel \\  -d event_name=ai_search_api \\  -d \"cancel[identifier]\"=identifier_123\n```\n\n```\n{  \"object\": \"billing.meter_event_adjustment\",  \"livemode\": false,  \"status\": \"pending\",  \"event_name\": \"ai_search_api\",  \"type\": \"cancel\",  \"cancel\": {    \"identifier\": \"identifier_123\"  }}\n```\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Meter Event Adjustment object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/billing/meter-event_summary/object",
    "markdown": "# The Meter Event Summary object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Aggregated value of all the events within `start_time` (inclusive) and `end_time` (inclusive). The aggregation strategy is defined on meter via `default_aggregation`.\n    \n*   End timestamp for this event summary (exclusive). Must be aligned with minute boundaries.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The meter associated with this event summary.\n    \n*   Start timestamp for this event summary (inclusive). Must be aligned with minute boundaries.\n    \n\nThe Meter Event Summary object\n\n```\n{  \"id\": \"mtrusg_test_6041CMAXJrFdZ56U76ce6L35Hz7xA3Tn58z5sY7bq6gM3XN5bx5Y459D4Xt2E17ko6M86kt7kV3bl5PM7LV59l4sY50b6oU5QD7bY3HP58z5sY7bq6gM3Y57LF2Dr7od3Hb8927gh4Tt4Lo4xO4ge60T81C6Y53gl4QS2D33ft3HC3Xi3Cy3Cy3Cy\",  \"object\": \"billing.meter_event_summary\",  \"aggregated_value\": 10,  \"end_time\": 1711659600,  \"livemode\": false,  \"meter\": \"mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA\",  \"start_time\": 1711656000}\n```\n\n## [List billing meter event summaries](https://docs.stripe.com/api/billing/meter-event_summary/list)\n\nRetrieve a list of billing meter event summaries.\n\n### Parameters\n\n*   The customer for which to fetch event summaries.\n    \n*   #### \n    \n    end\\_timetimestampRequired\n    \n    The timestamp from when to stop aggregating meter events (exclusive). Must be aligned with minute boundaries.\n    \n*   Unique identifier for the object.\n    \n*   #### \n    \n    start\\_timetimestampRequired\n    \n    The timestamp from when to start aggregating meter events (inclusive). Must be aligned with minute boundaries.\n    \n*   #### \n    \n    value\\_grouping\\_windowenum\n    \n    Specifies what granularity to use when generating event summaries. If not specified, a single event summary would be returned for the specified time range. For hourly granularity, start and end times must align with hour boundaries (e.g., 00:00, 01:00, …, 23:00). For daily granularity, start and end times must align with UTC day boundaries (00:00 UTC).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `day`<br><br>Generate event summaries per day. |\n    | `hour`<br><br>Generate event summaries per hour. |\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of billing meter event summaries.\n\nGET /v1/billing/meters/:id/event\\_summaries\n\n```\ncurl -G https://api.stripe.com/v1/billing/meters/mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA/event_summaries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_Pp40waj64hdRxb \\  -d start_time=1711584000 \\  -d end_time=1711666800 \\  -d value_grouping_window=hour\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"mtrusg_test_6041CMAXJrFdZ56U76ce6L35Hz7xA3Tn58z5sY7bq6gM3XN5bx5Y459D4Xt2E17ko6M86kt7kV3bl5PM7LV59l4sY50b6oU5QD7bY3HP58z5sY7bq6gM3Y57LF2Dr7od3Hb8927gh4Tt4Lo4xO4ge60T81C6Y53gl4QS2D33ft3HC3Xl3bk3Cy3Cy\",      \"object\": \"billing.meter_event_summary\",      \"aggregated_value\": 15,      \"end_time\": 1711663200,      \"livemode\": false,      \"meter\": \"mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA\",      \"start_time\": 1711659600    },    {      \"id\": \"mtrusg_test_6041CMAXJrFdZ56U76ce6L35Hz7xA3Tn58z5sY7bq6gM3XN5bx5Y459D4Xt2E17ko6M86kt7kV3bl5PM7LV59l4sY50b6oU5QD7bY3HP58z5sY7bq6gM3Y57LF2Dr7od3Hb8927gh4Tt4Lo4xO4ge60T81C6Y53gl4QS2D33ft3HC3Xi3Cy3Cy3Cy\",      \"object\": \"billing.meter_event_summary\",      \"aggregated_value\": 10,      \"end_time\": 1711659600,      \"livemode\": false,      \"meter\": \"mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA\",      \"start_time\": 1711656000    }  ],  \"has_more\": false,  \"url\": \"/v1/billing/meters/:id/event_summaries\"}\n```\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Meter Event Summary object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/plans/object",
    "markdown": "# The Plan object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Whether the plan can be used for new purchases.\n    \n*   The unit amount in cents to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.\n    \n\n*   The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   A brief description of the plan, hidden from customers.\n    \n*   #### \n    \n    productnullable stringExpandable\n    \n    The product whose pricing this plan determines.\n    \n\n### More attributes\n\n*   #### \n    \n    aggregate\\_usagenullable enum\n    \n*   #### \n    \n    amount\\_decimalnullable decimal string\n    \n\n*   #### \n    \n    tiersnullable array of objectsExpandable\n    \n\n*   #### \n    \n    transform\\_usagenullable object\n    \n*   #### \n    \n    trial\\_period\\_daysnullable integer\n    \n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [Create a plan](https://docs.stripe.com/api/plans/create)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\n### Parameters\n\n*   Specifies billing frequency. Either `day`, `week`, `month` or `year`.\n    \n*   The product whose pricing the created plan will represent. This can either be the ID of an existing product, or a dictionary containing fields used to create a [service product](https://docs.stripe.com/api#product_object-type).\n    \n*   Whether the plan is currently available for new subscriptions. Defaults to `true`.\n    \n*   #### \n    \n    amountintegerRequired unless billing\\_scheme=tiered\n    \n    A positive integer in cents (or 0 for a free plan) representing how much to charge on a recurring basis.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the plan, hidden from customers.\n    \n\n### More parameters\n\n*   #### \n    \n    tiersarray of objectsRequired if billing\\_scheme=tiered\n    \n*   #### \n    \n    tiers\\_modeenumRequired if billing\\_scheme=tiered\n    \n\n### Returns\n\nReturns the plan object.\n\n```\ncurl https://api.stripe.com/v1/plans \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1200 \\  -d currency=usd \\  -d interval=month \\  -d product=prod_NjpI7DbZx6AlWQ\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [Update a plan](https://docs.stripe.com/api/plans/update)\n\nUpdates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.\n\n### Parameters\n\n*   Whether the plan is currently available for new subscriptions.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the plan, hidden from customers.\n    \n\n### More parameters\n\n### Returns\n\nThe updated plan object is returned upon success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [Retrieve a plan](https://docs.stripe.com/api/plans/retrieve)\n\nRetrieves the plan with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a plan if a valid plan ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [List all plans](https://docs.stripe.com/api/plans/list)\n\nReturns a list of your plans.\n\n### Parameters\n\n*   Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans).\n    \n*   Only return plans for the given product.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` plans, starting after plan `starting_after`. Each entry in the array is a separate plan object. If no more plans are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/plans \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/plans\",  \"has_more\": false,  \"data\": [    {      \"id\": \"plan_NjpIbv3g3ZibnD\",      \"object\": \"plan\",      \"active\": true,      \"aggregate_usage\": null,      \"amount\": 1200,      \"amount_decimal\": \"1200\",      \"billing_scheme\": \"per_unit\",      \"created\": 1681851647,      \"currency\": \"usd\",      \"interval\": \"month\",      \"interval_count\": 1,      \"livemode\": false,      \"metadata\": {},      \"nickname\": null,      \"product\": \"prod_NjpI7DbZx6AlWQ\",      \"tiers_mode\": null,      \"transform_usage\": null,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    }    {...}    {...}  ],}\n```",
    "title": "The Plan object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/fee_refunds/object",
    "markdown": "# The Application Fee Refund object\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ffee_refunds%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount, in cents.\n    \n\n*   ID of the application fee that was refunded.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\nThe Application Fee Refund object\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {}}\n```\n\n## [Create an application fee refund](https://docs.stripe.com/api/fee_refunds/create)\n\nRefunds an application fee that has previously been collected but not yet refunded. Funds will be refunded to the Stripe account from which the fee was originally collected.\n\nYou can optionally refund only part of an application fee. You can do so multiple times, until the entire fee has been refunded.\n\nOnce entirely refunded, an application fee can’t be refunded again. This method will raise an error when called on an already-refunded application fee, or when trying to refund more money than is left on an application fee.\n\n### Parameters\n\n*   A positive integer, in _cents_, representing how much of this fee to refund. Can refund only up to the remaining unrefunded amount of the fee.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the `Application Fee Refund` object if the refund succeeded. Raises [an error](#errors) if the fee has already been refunded, or if an invalid fee identifier was provided.\n\nPOST /v1/application\\_fees/:id/refunds\n\n```\ncurl -X POST https://api.stripe.com/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {}}\n```\n\n## [Update an application fee refund](https://docs.stripe.com/api/fee_refunds/update)\n\nUpdates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request only accepts metadata as an argument.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the application fee refund object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\nPOST /v1/application\\_fees/:id/refunds/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds/fr_1MtJRpKbnvuxQXGuM6Ww0D24 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Retrieve an application fee refund](https://docs.stripe.com/api/fee_refunds/retrieve)\n\nBy default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the application fee refund object.\n\nGET /v1/application\\_fees/:id/refunds/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds/fr_1MtJRpKbnvuxQXGuM6Ww0D24 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {}}\n```\n\n## [List all application fee refunds](https://docs.stripe.com/api/fee_refunds/list)\n\nYou can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional refunds.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` refunds, starting after `starting_after`. Each entry in the array is a separate application fee refund object. If no more refunds are available, the resulting array will be empty. If you provide a non-existent application fee ID, this call raises [an error](#errors).\n\nGET /v1/application\\_fees/:id/refunds\n\n```\ncurl -G https://api.stripe.com/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",      \"object\": \"fee_refund\",      \"amount\": 100,      \"balance_transaction\": null,      \"created\": 1680651573,      \"currency\": \"usd\",      \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",      \"metadata\": {}    }    {...}    {...}  ],}\n```",
    "title": "The Application Fee Refund object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/billing/meter/object",
    "markdown": "# The Meter object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fbilling%2Fmeter%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Fields that specify how to map a meter event to a customer.\n    \n*   The meter’s name.\n    \n*   The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.\n    \n*   #### \n    \n    event\\_time\\_windownullable enum\n    \n    The time window to pre-aggregate meter events for, if any.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `day`<br><br>Events are pre-aggregated in daily buckets. |\n    | `hour`<br><br>Events are pre-aggregated in hourly buckets. |\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The meter’s status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The meter is active. |\n    | `inactive`<br><br>The meter is inactive. No more events for this meter will be accepted. The meter cannot be attached to a price. |\n    \n*   The timestamps at which the meter status changed.\n    \n*   Time at which the object was last updated. Measured in seconds since the Unix epoch.\n    \n*   Fields that specify how to calculate a meter event’s value.\n    \n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Create a billing meter](https://docs.stripe.com/api/billing/meter/create)\n\nCreates a billing meter\n\n### Parameters\n\n*   #### \n    \n    default\\_aggregationobjectRequired\n    \n    The default settings to aggregate a meter’s events with.\n    \n*   #### \n    \n    display\\_namestringRequired\n    \n    The meter’s name.\n    \n*   The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.\n    \n*   Fields that specify how to map a meter event to a customer.\n    \n*   The time window to pre-aggregate meter events for, if any.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `day`<br><br>Events are pre-aggregated in daily buckets. |\n    | `hour`<br><br>Events are pre-aggregated in hourly buckets. |\n    \n*   Fields that specify how to calculate a meter event’s value.\n    \n\n### Returns\n\nReturns a billing meter\n\n```\ncurl https://api.stripe.com/v1/billing/meters \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"Search API Calls\" \\  -d event_name=ai_search_api \\  -d \"default_aggregation[formula]\"=sum \\  -d \"value_settings[event_payload_key]\"=tokens \\  -d \"customer_mapping[type]\"=by_id \\  -d \"customer_mapping[event_payload_key]\"=stripe_customer_id\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704824589,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Update a billing meter](https://docs.stripe.com/api/billing/meter/update)\n\nUpdates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n*   The meter’s name.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id\n\n```\ncurl https://api.stripe.com/v1/billing/meters/mtr_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"Updated Display Name\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Updated Display Name\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Retrieve a billing meter](https://docs.stripe.com/api/billing/meter/retrieve)\n\nRetrieves a billing meter given an ID\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nGET /v1/billing/meters/:id\n\n```\ncurl https://api.stripe.com/v1/billing/meters/mtr_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [List billing meters](https://docs.stripe.com/api/billing/meter/list)\n\nRetrieve a list of billing meters.\n\n### Parameters\n\n*   Filter results to only include meters with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The meter is active. |\n    | `inactive`<br><br>The meter is inactive. No more events for this meter will be accepted. The meter cannot be attached to a price. |\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of billing meters.\n\n```\ncurl https://api.stripe.com/v1/billing/meters \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"mtr_123\",      \"object\": \"billing.meter\",      \"created\": 1704824589,      \"customer_mapping\": {        \"type\": \"by_id\",        \"event_payload_key\": \"stripe_customer_id\"      },      \"default_aggregation\": {        \"formula\": \"sum\"      },      \"display_name\": \"Search API Calls\",      \"event_name\": \"ai_search_api\",      \"event_time_window\": null,      \"livemode\": false,      \"status\": \"active\",      \"status_transitions\": {        \"deactivated_at\": null      },      \"updated\": 1704898330,      \"value_settings\": {        \"event_payload_key\": \"tokens\"      }    }  ],  \"has_more\": true,  \"url\": \"v1/billing/meters\"}\n```",
    "title": "The Meter object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/test_clocks/object",
    "markdown": "# The Test Clock object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftest_clocks%2Fobject)\n\n## [The Test Clock object](https://docs.stripe.com/api/test_clocks/object)Test helper\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Time at which this clock is scheduled to auto delete.\n    \n*   Time at which all objects belonging to this clock are frozen.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The custom name supplied at creation.\n    \n*   The status of the Test Clock.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `advancing`<br><br>In the process of advancing time for the test clock objects. |\n    | `internal_failure`<br><br>Failed to advance time. Future requests to advance time will fail. |\n    | `ready`<br><br>All test clock objects have advanced to the `frozen_time`. |\n    \n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"ready\"}\n```\n\n## [Create a test clock](https://docs.stripe.com/api/test_clocks/create)Test helper\n\nCreates a new test clock that can be attached to new customers and quotes.\n\n### Parameters\n\n*   #### \n    \n    frozen\\_timetimestampRequired\n    \n    The initial frozen time for this test clock.\n    \n*   The name for this test clock.\n    \n\n### Returns\n\nThe newly created `TestClock` object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/test\\_helpers/test\\_clocks\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d frozen_time=1577836800\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"ready\"}\n```\n\n## [Retrieve a test clock](https://docs.stripe.com/api/test_clocks/retrieve)Test helper\n\nRetrieves a test clock.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `TestClock` object. Otherwise, this call raises [an error](#errors).\n\nGET /v1/test\\_helpers/test\\_clocks/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"ready\"}\n```\n\n## [List all test clocks](https://docs.stripe.com/api/test_clocks/list)Test helper\n\nReturns a list of your test clocks.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` test clocks, starting after `starting_after`. Each entry in the array is a separate test clock object. If no more test clocks are available, the resulting array will be empty.\n\nGET /v1/test\\_helpers/test\\_clocks\n\n```\ncurl -G https://api.stripe.com/v1/test_helpers/test_clocks \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/test_helpers/test_clocks\",  \"has_more\": false,  \"data\": [    {      \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",      \"object\": \"test_helpers.test_clock\",      \"created\": 1680112806,      \"deletes_after\": 1680717606,      \"frozen_time\": 1577836800,      \"livemode\": false,      \"name\": null,      \"status\": \"ready\"    }    {...}    {...}  ],}\n```\n\n## [Delete a test clock](https://docs.stripe.com/api/test_clocks/delete)Test helper\n\nDeletes a test clock.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nThe deleted `TestClock` object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/test\\_helpers/test\\_clocks/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"deleted\": true}\n```",
    "title": "The Test Clock object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/tokens/create_token?type=pii",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/country_specs/object",
    "markdown": "# The Country Spec object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object. Represented as the ISO country code for this country.\n    \n*   The default currency for this country. This applies to both payment methods and bank accounts.\n    \n*   #### \n    \n    supported\\_bank\\_account\\_currenciesobject\n    \n    Currencies that can be accepted in the specific country (for transfers).\n    \n*   #### \n    \n    supported\\_payment\\_currenciesarray of strings\n    \n    Currencies that can be accepted in the specified country (for payments).\n    \n*   #### \n    \n    supported\\_payment\\_methodsarray of strings\n    \n    Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).\n    \n*   #### \n    \n    supported\\_transfer\\_countriesarray of strings\n    \n    Countries that can accept transfers from the specified country.\n    \n\n### More attributes\n\n*   #### \n    \n    verification\\_fieldsobject\n    \n\n```\n{  \"id\": \"US\",  \"object\": \"country_spec\",  \"default_currency\": \"usd\",  \"supported_bank_account_currencies\": {    \"usd\": [      \"US\"    ]  },  \"supported_payment_currencies\": [    \"usd\",    \"aed\",    \"afn\",    \"...\"  ],  \"supported_payment_methods\": [    \"ach\",    \"card\",    \"stripe\"  ],  \"supported_transfer_countriesverification_fields\": {    \"company\": {      \"additional\": [],      \"minimum\": [        \"business_profile.mcc\",        \"business_profile.url\",        \"business_type\",        \"company.address.city\",        \"company.address.line1\",        \"company.address.postal_code\",        \"company.address.state\",        \"company.name\",        \"company.owners_provided\",        \"company.phone\",        \"company.tax_id\",        \"external_account\",        \"owners.address.city\",        \"owners.address.line1\",        \"owners.address.postal_code\",        \"owners.address.state\",        \"owners.dob.day\",        \"owners.dob.month\",        \"owners.dob.year\",        \"owners.email\",        \"owners.first_name\",        \"owners.id_number\",        \"owners.last_name\",        \"owners.phone\",        \"owners.ssn_last_4\",        \"owners.verification.document\",        \"representative.address.city\",        \"representative.address.line1\",        \"representative.address.postal_code\",        \"representative.address.state\",        \"representative.dob.day\",        \"representative.dob.month\",        \"representative.dob.year\",        \"representative.email\",        \"representative.first_name\",        \"representative.id_number\",        \"representative.last_name\",        \"representative.phone\",        \"representative.relationship.executive\",        \"representative.relationship.title\",        \"representative.ssn_last_4\",        \"representative.verification.document\",        \"tos_acceptance.date\",        \"tos_acceptance.ip\"      ]    },    \"individual\": {      \"additional\": [],      \"minimum\": [        \"business_profile.mcc\",        \"business_profile.url\",        \"business_type\",        \"external_account\",        \"individual.address.city\",        \"individual.address.line1\",        \"individual.address.postal_code\",        \"individual.address.state\",        \"individual.dob.day\",        \"individual.dob.month\",        \"individual.dob.year\",        \"individual.email\",        \"individual.first_name\",        \"individual.id_number\",        \"individual.last_name\",        \"individual.phone\",        \"individual.ssn_last_4\",        \"individual.verification.document\",        \"tos_acceptance.date\",        \"tos_acceptance.ip\"      ]    }  }}\n```\n\n## [Retrieve a Country Spec](https://docs.stripe.com/api/country_specs/retrieve)\n\nReturns a Country Spec for a given Country code.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a [country\\_spec](#country_spec_object) object if a valid country code is provided, and raises [an error](#errors) otherwise.\n\nGET /v1/country\\_specs/:id\n\n```\ncurl https://api.stripe.com/v1/country_specs/US \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"US\",  \"object\": \"country_spec\",  \"default_currency\": \"usd\",  \"supported_bank_account_currencies\": {    \"usd\": [      \"US\"    ]  },  \"supported_payment_currencies\": [    \"usd\",    \"aed\",    \"afn\",    \"...\"  ],  \"supported_payment_methods\": [    \"ach\",    \"card\",    \"stripe\"  ],  \"supported_transfer_countriesverification_fields\": {    \"company\": {      \"additional\": [],      \"minimum\": [        \"business_profile.mcc\",        \"business_profile.url\",        \"business_type\",        \"company.address.city\",        \"company.address.line1\",        \"company.address.postal_code\",        \"company.address.state\",        \"company.name\",        \"company.owners_provided\",        \"company.phone\",        \"company.tax_id\",        \"external_account\",        \"owners.address.city\",        \"owners.address.line1\",        \"owners.address.postal_code\",        \"owners.address.state\",        \"owners.dob.day\",        \"owners.dob.month\",        \"owners.dob.year\",        \"owners.email\",        \"owners.first_name\",        \"owners.id_number\",        \"owners.last_name\",        \"owners.phone\",        \"owners.ssn_last_4\",        \"owners.verification.document\",        \"representative.address.city\",        \"representative.address.line1\",        \"representative.address.postal_code\",        \"representative.address.state\",        \"representative.dob.day\",        \"representative.dob.month\",        \"representative.dob.year\",        \"representative.email\",        \"representative.first_name\",        \"representative.id_number\",        \"representative.last_name\",        \"representative.phone\",        \"representative.relationship.executive\",        \"representative.relationship.title\",        \"representative.ssn_last_4\",        \"representative.verification.document\",        \"tos_acceptance.date\",        \"tos_acceptance.ip\"      ]    },    \"individual\": {      \"additional\": [],      \"minimum\": [        \"business_profile.mcc\",        \"business_profile.url\",        \"business_type\",        \"external_account\",        \"individual.address.city\",        \"individual.address.line1\",        \"individual.address.postal_code\",        \"individual.address.state\",        \"individual.dob.day\",        \"individual.dob.month\",        \"individual.dob.year\",        \"individual.email\",        \"individual.first_name\",        \"individual.id_number\",        \"individual.last_name\",        \"individual.phone\",        \"individual.ssn_last_4\",        \"individual.verification.document\",        \"tos_acceptance.date\",        \"tos_acceptance.ip\"      ]    }  }}\n```\n\n## [List Country Specs](https://docs.stripe.com/api/country_specs/list)\n\nLists all Country Spec objects available in the API.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of country\\_spec objects.\n\n```\ncurl -G https://api.stripe.com/v1/country_specs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/country_specs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"US\",      \"object\": \"country_spec\",      \"default_currency\": \"usd\",      \"supported_bank_account_currencies\": {        \"usd\": [          \"US\"        ]      },      \"supported_payment_currencies\": [        \"usd\",        \"aed\",        \"afn\",        \"...\"      ],      \"supported_payment_methods\": [        \"ach\",        \"card\",        \"stripe\"      ],      \"supported_transfer_countriesverification_fields\": {        \"company\": {          \"additional\": [],          \"minimum\": [            \"business_profile.mcc\",            \"business_profile.url\",            \"business_type\",            \"company.address.city\",            \"company.address.line1\",            \"company.address.postal_code\",            \"company.address.state\",            \"company.name\",            \"company.owners_provided\",            \"company.phone\",            \"company.tax_id\",            \"external_account\",            \"owners.address.city\",            \"owners.address.line1\",            \"owners.address.postal_code\",            \"owners.address.state\",            \"owners.dob.day\",            \"owners.dob.month\",            \"owners.dob.year\",            \"owners.email\",            \"owners.first_name\",            \"owners.id_number\",            \"owners.last_name\",            \"owners.phone\",            \"owners.ssn_last_4\",            \"owners.verification.document\",            \"representative.address.city\",            \"representative.address.line1\",            \"representative.address.postal_code\",            \"representative.address.state\",            \"representative.dob.day\",            \"representative.dob.month\",            \"representative.dob.year\",            \"representative.email\",            \"representative.first_name\",            \"representative.id_number\",            \"representative.last_name\",            \"representative.phone\",            \"representative.relationship.executive\",            \"representative.relationship.title\",            \"representative.ssn_last_4\",            \"representative.verification.document\",            \"tos_acceptance.date\",            \"tos_acceptance.ip\"          ]        },        \"individual\": {          \"additional\": [],          \"minimum\": [            \"business_profile.mcc\",            \"business_profile.url\",            \"business_type\",            \"external_account\",            \"individual.address.city\",            \"individual.address.line1\",            \"individual.address.postal_code\",            \"individual.address.state\",            \"individual.dob.day\",            \"individual.dob.month\",            \"individual.dob.year\",            \"individual.email\",            \"individual.first_name\",            \"individual.id_number\",            \"individual.last_name\",            \"individual.phone\",            \"individual.ssn_last_4\",            \"individual.verification.document\",            \"tos_acceptance.date\",            \"tos_acceptance.ip\"          ]        }      }    }    {...}    {...}  ],}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Country Spec object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/radar/early_fraud_warnings/object",
    "markdown": "# The Early Fraud Warning object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later.\n    \n*   ID of the charge this early fraud warning is for, optionally expanded.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    ID of the Payment Intent this early fraud warning is for, optionally expanded.\n    \n\nThe Early Fraud Warning object\n\n```\n{  \"id\": \"issfr_1NnrwHBw2dPENLoi9lnhV3RQ\",  \"object\": \"radar.early_fraud_warning\",  \"actionable\": true,  \"charge\": \"ch_1234\",  \"created\": 123456789,  \"fraud_type\": \"misc\",  \"livemode\": false}\n```\n\n## [Retrieve an early fraud warning](https://docs.stripe.com/api/radar/early_fraud_warnings/retrieve)\n\nRetrieves the details of an early fraud warning that has previously been created.\n\nPlease refer to the [early fraud warning](#early_fraud_warning_object) object reference for more details.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an EarlyFraudWarning if a valid identifier was provided.\n\nGET /v1/radar/early\\_fraud\\_warnings/:id\n\n```\ncurl https://api.stripe.com/v1/radar/early_fraud_warnings/issfr_1NnrwHBw2dPENLoi9lnhV3RQ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"issfr_1NnrwHBw2dPENLoi9lnhV3RQ\",  \"object\": \"radar.early_fraud_warning\",  \"actionable\": true,  \"charge\": \"ch_1234\",  \"created\": 123456789,  \"fraud_type\": \"misc\",  \"livemode\": false}\n```\n\n## [List all early fraud warnings](https://docs.stripe.com/api/radar/early_fraud_warnings/list)\n\nReturns a list of early fraud warnings.\n\n### Parameters\n\n*   Only return early fraud warnings for the charge specified by this charge ID.\n    \n*   Only return early fraud warnings that were created during the given date interval.\n    \n*   Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` EarlyFraudWarnings, starting after EarlyFraudWarnings `starting_after`. Each entry in the array is a separate EarlyFraudWarning object. If no more EarlyFraudWarnings are available, the resulting array will be empty.\n\nGET /v1/radar/early\\_fraud\\_warnings\n\n```\ncurl -G https://api.stripe.com/v1/radar/early_fraud_warnings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/early_fraud_warnings\",  \"has_more\": false,  \"data\": [    {      \"id\": \"issfr_1NnrwHBw2dPENLoi9lnhV3RQ\",      \"object\": \"radar.early_fraud_warning\",      \"actionable\": true,      \"charge\": \"ch_1234\",      \"created\": 123456789,      \"fraud_type\": \"misc\",      \"livemode\": false    }    {...}    {...}  ],}\n```\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Early Fraud Warning object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/radar/value_lists/object",
    "markdown": "# The Value List object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The name of the value list for use in rules.\n    \n*   The type of items in the value list. One of `card_fingerprint`, `us_bank_account_fingerprint`, `sepa_debit_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `card_bin` |\n    | `card_fingerprint` |\n    | `case_sensitive_string` |\n    | `country` |\n    | `customer_id` |\n    | `email` |\n    | `ip_address` |\n    | `sepa_debit_fingerprint` |\n    | `string` |\n    | `us_bank_account_fingerprint` |\n    \n*   List of items contained within this value list.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The name of the value list.\n    \n\n### More attributes\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Custom IP Blocklist\"}\n```\n\n## [Create a value list](https://docs.stripe.com/api/radar/value_lists/create)\n\nCreates a new `ValueList` object, which can then be referenced in rules.\n\n### Parameters\n\n*   The name of the value list for use in rules.\n    \n*   The human-readable name of the value list.\n    \n*   Type of the items in the value list. One of `card_fingerprint`, `us_bank_account_fingerprint`, `sepa_debit_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`. Use `string` if the item type is unknown or mixed.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a `ValueList` object if creation succeeds.\n\nPOST /v1/radar/value\\_lists\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Custom IP Blocklist\" \\  -d alias=custom_ip_blocklist \\  -d item_type=ip_address\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Custom IP Blocklist\"}\n```\n\n## [Update a value list](https://docs.stripe.com/api/radar/value_lists/update)\n\nUpdates a `ValueList` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that `item_type` is immutable.\n\n### Parameters\n\n*   The name of the value list for use in rules.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The human-readable name of the value list.\n    \n\n### Returns\n\nReturns an updated `ValueList` object if a valid identifier was provided.\n\nPOST /v1/radar/value\\_lists/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Updated IP Blocklist\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Updated IP Blocklist\"}\n```\n\n## [Retrieve a value list](https://docs.stripe.com/api/radar/value_lists/retrieve)\n\nRetrieves a `ValueList` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `ValueList` object if a valid identifier was provided.\n\nGET /v1/radar/value\\_lists/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Custom IP Blocklist\"}\n```\n\n## [List all value lists](https://docs.stripe.com/api/radar/value_lists/list)\n\nReturns a list of `ValueList` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   The alias used to reference the value list when writing rules.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` lists, starting after list `starting_after`. Each entry in the array is a separate `ValueList` object. If no more lists are available, the resulting array will be empty.\n\nGET /v1/radar/value\\_lists\n\n```\ncurl -G https://api.stripe.com/v1/radar/value_lists \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/value_lists\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",      \"object\": \"radar.value_list\",      \"alias\": \"custom_ip_blocklist\",      \"created\": 1680201894,      \"created_by\": \"API\",      \"item_type\": \"ip_address\",      \"list_items\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Custom IP Blocklist\"    }    {...}    {...}  ],}\n```",
    "title": "The Value List object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/radar/reviews/object",
    "markdown": "# The Review object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    chargenullable stringExpandable\n    \n    The charge associated with this review.\n    \n*   If `true`, the review needs action.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    The PaymentIntent ID associated with this review, if one exists.\n    \n*   The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.\n    \n\n### More attributes\n\n*   #### \n    \n    billing\\_zipnullable string\n    \n*   #### \n    \n    closed\\_reasonnullable enum\n    \n\n*   #### \n    \n    ip\\_addressnullable string\n    \n*   #### \n    \n    ip\\_address\\_locationnullable object\n    \n\n```\n{  \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",  \"object\": \"review\",  \"billing_zip\": null,  \"charge\": null,  \"closed_reason\": null,  \"created\": 1689864901,  \"ip_address\": null,  \"ip_address_location\": null,  \"livemode\": false,  \"open\": true,  \"opened_reason\": \"rule\",  \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",  \"reason\": \"rule\",  \"session\": null}\n```\n\n## [Retrieve a review](https://docs.stripe.com/api/radar/reviews/retrieve)\n\nRetrieves a `Review` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Review` object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/reviews/prv_1NVyFt2eZvKYlo2CjubqF1xm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",  \"object\": \"review\",  \"billing_zip\": null,  \"charge\": null,  \"closed_reason\": null,  \"created\": 1689864901,  \"ip_address\": null,  \"ip_address_location\": null,  \"livemode\": false,  \"open\": true,  \"opened_reason\": \"rule\",  \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",  \"reason\": \"rule\",  \"session\": null}\n```\n\n## [List all open reviews](https://docs.stripe.com/api/radar/reviews/list)\n\nReturns a list of `Review` objects that have `open` set to `true`. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` reviews, starting after review `starting_after`. Each entry in the array is a separate `Review` object. If no more reviews are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/reviews \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/reviews\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",      \"object\": \"review\",      \"billing_zip\": null,      \"charge\": null,      \"closed_reason\": null,      \"created\": 1689864901,      \"ip_address\": null,      \"ip_address_location\": null,      \"livemode\": false,      \"open\": true,      \"opened_reason\": \"rule\",      \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",      \"reason\": \"rule\",      \"session\": null    }    {...}    {...}  ],}\n```\n\n## [Approve a review](https://docs.stripe.com/api/radar/reviews/approve)\n\nApproves a `Review` object, closing it and removing it from the list of reviews.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the approved `Review` object.\n\nPOST /v1/reviews/:id/approve\n\n```\ncurl -X POST https://api.stripe.com/v1/reviews/prv_1NVyFt2eZvKYlo2CjubqF1xm/approve \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",  \"object\": \"review\",  \"billing_zip\": null,  \"charge\": null,  \"closed_reason\": null,  \"created\": 1689864901,  \"ip_address\": null,  \"ip_address_location\": null,  \"livemode\": false,  \"open\": true,  \"opened_reason\": \"rule\",  \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",  \"reason\": \"rule\",  \"session\": null}\n```\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Review object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/transfer_reversals/object",
    "markdown": "# The Transfer Reversal object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftransfer_reversals%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount, in cents.\n    \n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   ID of the transfer that was reversed.\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    destination\\_payment\\_refundnullable stringExpandable\n    \n*   #### \n    \n    source\\_refundnullable stringExpandable\n    \n\nThe Transfer Reversal object\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {},  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [Create a transfer reversal](https://docs.stripe.com/api/transfer_reversals/create)\n\nWhen you create a new reversal, you must specify a transfer to create it on.\n\nWhen reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.\n\nOnce entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.\n\n### Parameters\n\n*   A positive integer in cents representing how much of this transfer to reverse. Can only reverse up to the unreversed amount remaining of the transfer. Partial transfer reversals are only allowed for transfers to Stripe Accounts. Defaults to the entire transfer amount.\n    \n*   An arbitrary string which you can attach to a reversal object. This will be unset if you POST an empty value.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    refund\\_application\\_feeboolean\n    \n\n### Returns\n\nReturns a transfer reversal object if the reversal succeeded. Raises [an error](#errors) if the transfer has already been reversed or an invalid transfer identifier was provided.\n\nPOST /v1/transfers/:id/reversals\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=400\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {},  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [Update a reversal](https://docs.stripe.com/api/transfer_reversals/update)\n\nUpdates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request only accepts metadata and description as arguments.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the reversal object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\nPOST /v1/transfers/:id/reversals/:id\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals/trr_1Mio2eLkdIwHu7ixN5LPJS4a \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [Retrieve a reversal](https://docs.stripe.com/api/transfer_reversals/retrieve)\n\nBy default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the reversal object.\n\nGET /v1/transfers/:id/reversals/:id\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals/trr_1Mio2eLkdIwHu7ixN5LPJS4a \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {},  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [List all reversals](https://docs.stripe.com/api/transfer_reversals/list)\n\nYou can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional reversals.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` reversals, starting after reversal `starting_after`. Each entry in the array is a separate reversal object. If no more reversals are available, the resulting array will be empty. If you provide a non-existent transfer ID, this call raises [an error](#errors).\n\nGET /v1/transfers/:id/reversals\n\n```\ncurl -G https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",      \"object\": \"transfer_reversal\",      \"amount\": 400,      \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",      \"created\": 1678147568,      \"currency\": \"usd\",      \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",      \"metadata\": {},      \"source_refund\": null,      \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"    }    {...}    {...}  ],}\n```",
    "title": "The Transfer Reversal object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/external_account_cards/list",
    "markdown": "# List all cards | Stripe API Reference\n\nYou can see a list of the cards that belong to a [connected account](https://docs.stripe.com/connect/accounts). The 10 most recent external accounts are available on the account object. If you need more than 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional cards.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the cards stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=card\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",      \"object\": \"card\",      \"address_city\": null,      \"address_country\": null,      \"address_line1\": null,      \"address_line1_check\": null,      \"address_line2\": null,      \"address_state\": null,      \"address_zip\": null,      \"address_zip_check\": null,      \"brand\": \"Visa\",      \"country\": \"US\",      \"cvc_check\": \"pass\",      \"dynamic_last4\": null,      \"exp_month\": 8,      \"exp_year\": 2024,      \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",      \"funding\": \"credit\",      \"last4\": \"4242\",      \"metadata\": {},      \"name\": null,      \"redaction\": null,      \"tokenization_method\": null,      \"wallet\": null,      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```\n\n## [Delete a card](https://docs.stripe.com/api/external_account_cards/delete)\n\nYou can delete cards from a connected account where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a card with `default_for_currency` set to true. You cannot delete a card if any of the following apply:\n\n*   The card’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the card.\n\nTo delete a card, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted card object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAz2x2eZvKYlo2C75wJ1YUs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",  \"object\": \"card\",  \"deleted\": true}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all cards | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/radar/value_list_items/object",
    "markdown": "# The Value List Item object\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fradar%2Fvalue_list_items%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The value of the item.\n    \n*   The identifier of the value list this item belongs to.\n    \n\n### More attributes\n\nThe Value List Item object\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"created\": 1681760074,  \"created_by\": \"API\",  \"livemode\": false,  \"value\": \"1.2.3.4\",  \"value_list\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\"}\n```\n\n## [Create a value list item](https://docs.stripe.com/api/radar/value_list_items/create)\n\nCreates a new `ValueListItem` object, which is added to the specified parent value list.\n\n### Parameters\n\n*   The value of the item (whose type must match the type of the parent value list).\n    \n*   The identifier of the value list which the created item will be added to.\n    \n\n### Returns\n\nReturns a `ValueListItem` object if creation succeeds.\n\nPOST /v1/radar/value\\_list\\_items\n\n```\ncurl https://api.stripe.com/v1/radar/value_list_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj \\  -d value=\"1.2.3.4\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"created\": 1681760074,  \"created_by\": \"API\",  \"livemode\": false,  \"value\": \"1.2.3.4\",  \"value_list\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\"}\n```\n\n## [Retrieve a value list item](https://docs.stripe.com/api/radar/value_list_items/retrieve)\n\nRetrieves a `ValueListItem` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `ValueListItem` object if a valid identifier was provided.\n\nGET /v1/radar/value\\_list\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_list_items/rsli_1MxxosLkdIwHu7ixxvA1yKiZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"created\": 1681760074,  \"created_by\": \"API\",  \"livemode\": false,  \"value\": \"1.2.3.4\",  \"value_list\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\"}\n```\n\n## [List all value list items](https://docs.stripe.com/api/radar/value_list_items/list)\n\nReturns a list of `ValueListItem` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Identifier for the parent value list this item belongs to.\n    \n*   Return items belonging to the parent list whose value matches the specified value (using an “is like” match).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` items, starting after item `starting_after`. Each entry in the array is a separate `ValueListItem` object. If no more items are available, the resulting array will be empty.\n\nGET /v1/radar/value\\_list\\_items\n\n```\ncurl -G https://api.stripe.com/v1/radar/value_list_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/value_list_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\",      \"object\": \"radar.value_list\",      \"alias\": \"custom_ip_blocklist\",      \"created\": 1681760074,      \"created_by\": \"API\",      \"item_type\": \"ip_address\",      \"list_items\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj\"      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Custom IP Blocklist\"    }    {...}    {...}  ],}\n```\n\n## [Delete a value list item](https://docs.stripe.com/api/radar/value_list_items/delete)\n\nDeletes a `ValueListItem` object, removing it from its parent value list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with the deleted `ValueListItem` object’s ID and a deleted parameter on success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/radar/value\\_list\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/radar/value_list_items/rsli_1MxxosLkdIwHu7ixxvA1yKiZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"deleted\": true}\n```",
    "title": "The Value List Item object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/external_account_cards",
    "markdown": "# External Account Cards | Stripe API Reference\n\n## [The External Account Card object](https://docs.stripe.com/api/external_account_cards/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    accountnullable stringExpandableAvailable conditionally\n    \n    The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. This property is only available for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   #### \n    \n    address\\_citynullable string\n    \n    City/District/Suburb/Town/Village.\n    \n*   #### \n    \n    address\\_countrynullable string\n    \n    Billing address country, if provided when creating card.\n    \n*   #### \n    \n    address\\_line1nullable string\n    \n    Address line 1 (Street address/PO Box/Company name).\n    \n*   #### \n    \n    address\\_line2nullable string\n    \n    Address line 2 (Apartment/Suite/Unit/Building).\n    \n*   #### \n    \n    address\\_statenullable string\n    \n    State/County/Province/Region.\n    \n*   #### \n    \n    address\\_zipnullable string\n    \n    ZIP or postal code.\n    \n*   #### \n    \n    address\\_zip\\_checknullable string\n    \n    If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.\n    \n*   Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.\n    \n*   Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.\n    \n*   #### \n    \n    currencynullable enumAvailable conditionally\n    \n    Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. This property is only available for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn’t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).\n    \n*   #### \n    \n    default\\_for\\_currencynullable booleanAvailable conditionally\n    \n    Whether this card is the default external account for its currency. This property is only available for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Two-digit number representing the card’s expiration month.\n    \n*   Four-digit number representing the card’s expiration year.\n    \n*   #### \n    \n    fingerprintnullable string\n    \n    Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n    \n    _As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card—one for India and one for the rest of the world._\n    \n*   Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.\n    \n*   The last four digits of the card.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Cardholder name.\n    \n*   For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated.\n    \n\n### More attributes\n\n*   #### \n    \n    address\\_line1\\_checknullable string\n    \n*   #### \n    \n    available\\_payout\\_methodsnullable array of enums\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    dynamic\\_last4nullable string\n    \n*   #### \n    \n    tokenization\\_methodnullable string\n    \n*   #### \n    \n    walletnullable objectPreview feature\n    \n\nThe External Account Card object\n\n```\n{  \"id\": \"card_1MvoiELkdIwHu7ixOeFGbN9D\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"customer\": \"cus_NhD8HD2bY8dP3V\",  \"cvc_check\": null,  \"dynamic_last4\": null,  \"exp_month\": 4,  \"exp_year\": 2024,  \"fingerprint\": \"mToisGZ01V71BCos\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [Create a card](https://docs.stripe.com/api/external_account_cards/create)\n\nWhen you create a new debit card, you must specify a [connected account](#accounts) to create it on. You can only specify connected accounts where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nIf the account has no default destination card, then the new card will become the default. However, if the owner already has a default then it will not change. To change the default, you should set `default_for_currency` to `true`.\n\n### Parameters\n\n*   #### \n    \n    external\\_accountobject | stringRequired\n    \n    A token, like the ones returned by [Stripe.js](https://docs.stripe.com/js) or a dictionary containing a user’s card details (with the options shown below). Stripe will automatically validate the card.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n\n### Returns\n\nReturns the card object\n\nPOST /v1/accounts/:id/external\\_accounts\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d external_account=tok_visa_debit\n```\n\n```\n{  \"id\": \"card_1NAiaG2eZvKYlo2CDXvcMb6m\",  \"object\": \"card\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [Update a card](https://docs.stripe.com/api/external_account_cards/update)\n\nIf you need to update only some card details, like the billing address or expiration date, you can do so without having to re-enter the full card details. Stripe also works directly with card networks so that your customers can [continue using your service](https://stripe.com/docs/saving-cards#automatic-card-updates) without interruption.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns the card object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NBLeN2eZvKYlo2CIq1o7Pzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"card_1NBLeN2eZvKYlo2CIq1o7Pzs\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/external_account_cards/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific card stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the card object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAinb2eZvKYlo2C1Fm9mZsu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAinb2eZvKYlo2C1Fm9mZsu\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```",
    "title": "External Account Cards | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/usage_records/subscription_item_summary_list",
    "markdown": "# List all subscription item period summaries\n\nFor the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).\n\nThe list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` summaries, starting after summary `starting_after`. Each entry in the array is a separate summary object. If no more summaries are available, the resulting array is empty.\n\nGET /v1/subscription\\_items/:id/usage\\_record\\_summaries\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries\",      \"has_more\": false,      \"data\": [        {          \"id\": \"sis_1Bnyrd2eZvKYlo2CuVcUbXln\",          \"object\": \"usage_record_summary\",          \"invoice\": \"in_1Bnyrd2eZvKYlo2CSV57GLV8\",          \"livemode\": false,          \"period\": {            \"end\": 0,            \"start\": null          },          \"subscription_item\": \"si_18UXa82eZvKYlo2CbYoIEZVv\",          \"total_usage\": 1        }      ]    }    {...}    {...}  ],}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all subscription item period summaries | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/account/reject",
    "markdown": "# Reject an account | Stripe API Reference\n\nWith [Connect](https://docs.stripe.com/connect), you can reject accounts that you have flagged as suspicious.\n\nOnly accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.\n\n### Parameters\n\n*   The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`.\n    \n\n### Returns\n\nReturns an account with `payouts_enabled` and `charges_enabled` set to false on success. If the account ID does not exist, this call raises [an error](#errors).\n\nPOST /v1/accounts/:id/reject\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d reason=fraud\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1385798567,  \"default_currency\": \"usd\",  \"details_submitted\": true,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": true,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"rejected.fraud\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Reject an account | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/application_fees/retrieve",
    "markdown": "# Retrieve an application fee | Stripe API Reference\n\nRetrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an application fee object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/application\\_fees/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"object\": \"application_fee\",  \"account\": \"acct_164wxjKbnvuxQXGu\",  \"amount\": 105,  \"amount_refunded\": 105,  \"application\": \"ca_32D88BD1qLklliziD7gYQvctJIhWBSQ7\",  \"balance_transaction\": \"txn_1032HU2eZvKYlo2CEPtcnUvl\",  \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",  \"created\": 1506609734,  \"currency\": \"gbp\",  \"livemode\": false,  \"originating_transaction\": null,  \"refunded\": true,  \"refunds\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"fr_1MBoV6KbnvuxQXGucP0PaPPO\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284508,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoU0KbnvuxQXGu2wCCz4Bb\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284441,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoRzKbnvuxQXGuvKkBKkSR\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284315,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoPOKbnvuxQXGueOBnke22\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284154,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoOGKbnvuxQXGu6EPQI2Zp\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284084,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoMUKbnvuxQXGu8Y0Peaoy\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670283974,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MAgZBKbnvuxQXGuLTUrgGeq\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670015681,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1JAu9EKbnvuxQXGuRdZYkxVW\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1625738880,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {          \"order_id\": \"6735\"        }      },      {        \"id\": \"fr_1HZK0UKbnvuxQXGuS428gH0W\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1602005482,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_D0s7fGBKB40Twy\",        \"object\": \"fee_refund\",        \"amount\": 138,        \"balance_transaction\": \"txn_1CaqNg2eZvKYlo2C75cA3Euk\",        \"created\": 1528486576,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      }    ],    \"has_more\": false,    \"url\": \"/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds\"  },  \"fee_source\": {    \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",    \"type\": \"charge\"  }}\n```\n\n## [List all application fees](https://docs.stripe.com/api/application_fees/list)\n\nReturns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.\n\n### Parameters\n\n*   Only return application fees for the charge specified by this charge ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` application fees, starting after application fee `starting_after`. Each entry in the array is a separate application fee object. If no more fees are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/application_fees \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/application_fees\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",      \"object\": \"application_fee\",      \"account\": \"acct_164wxjKbnvuxQXGu\",      \"amount\": 105,      \"amount_refunded\": 105,      \"application\": \"ca_32D88BD1qLklliziD7gYQvctJIhWBSQ7\",      \"balance_transaction\": \"txn_1032HU2eZvKYlo2CEPtcnUvl\",      \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",      \"created\": 1506609734,      \"currency\": \"gbp\",      \"livemode\": false,      \"originating_transaction\": null,      \"refunded\": true,      \"refunds\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"fr_1MBoV6KbnvuxQXGucP0PaPPO\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284508,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoU0KbnvuxQXGu2wCCz4Bb\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284441,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoRzKbnvuxQXGuvKkBKkSR\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284315,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoPOKbnvuxQXGueOBnke22\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284154,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoOGKbnvuxQXGu6EPQI2Zp\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284084,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoMUKbnvuxQXGu8Y0Peaoy\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670283974,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MAgZBKbnvuxQXGuLTUrgGeq\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670015681,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1JAu9EKbnvuxQXGuRdZYkxVW\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1625738880,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {              \"order_id\": \"6735\"            }          },          {            \"id\": \"fr_1HZK0UKbnvuxQXGuS428gH0W\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1602005482,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_D0s7fGBKB40Twy\",            \"object\": \"fee_refund\",            \"amount\": 138,            \"balance_transaction\": \"txn_1CaqNg2eZvKYlo2C75cA3Euk\",            \"created\": 1528486576,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          }        ],        \"has_more\": false,        \"url\": \"/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds\"      },      \"fee_source\": {        \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",        \"type\": \"charge\"      }    }    {...}    {...}  ],}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve an application fee | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/external_account_cards/update",
    "markdown": "# Update a card | Stripe API Reference\n\nIf you need to update only some card details, like the billing address or expiration date, you can do so without having to re-enter the full card details. Stripe also works directly with card networks so that your customers can [continue using your service](https://stripe.com/docs/saving-cards#automatic-card-updates) without interruption.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns the card object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NBLeN2eZvKYlo2CIq1o7Pzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"card_1NBLeN2eZvKYlo2CIq1o7Pzs\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/external_account_cards/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific card stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the card object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAinb2eZvKYlo2C1Fm9mZsu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAinb2eZvKYlo2C1Fm9mZsu\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [List all cards](https://docs.stripe.com/api/external_account_cards/list)\n\nYou can see a list of the cards that belong to a [connected account](https://docs.stripe.com/connect/accounts). The 10 most recent external accounts are available on the account object. If you need more than 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional cards.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the cards stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=card\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",      \"object\": \"card\",      \"address_city\": null,      \"address_country\": null,      \"address_line1\": null,      \"address_line1_check\": null,      \"address_line2\": null,      \"address_state\": null,      \"address_zip\": null,      \"address_zip_check\": null,      \"brand\": \"Visa\",      \"country\": \"US\",      \"cvc_check\": \"pass\",      \"dynamic_last4\": null,      \"exp_month\": 8,      \"exp_year\": 2024,      \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",      \"funding\": \"credit\",      \"last4\": \"4242\",      \"metadata\": {},      \"name\": null,      \"redaction\": null,      \"tokenization_method\": null,      \"wallet\": null,      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```\n\n## [Delete a card](https://docs.stripe.com/api/external_account_cards/delete)\n\nYou can delete cards from a connected account where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a card with `default_for_currency` set to true. You cannot delete a card if any of the following apply:\n\n*   The card’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the card.\n\nTo delete a card, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted card object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAz2x2eZvKYlo2C75wJ1YUs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",  \"object\": \"card\",  \"deleted\": true}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Update a card | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/application_fees/list",
    "markdown": "# List all application fees | Stripe API Reference\n\nReturns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.\n\n### Parameters\n\n*   Only return application fees for the charge specified by this charge ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` application fees, starting after application fee `starting_after`. Each entry in the array is a separate application fee object. If no more fees are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/application_fees \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/application_fees\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",      \"object\": \"application_fee\",      \"account\": \"acct_164wxjKbnvuxQXGu\",      \"amount\": 105,      \"amount_refunded\": 105,      \"application\": \"ca_32D88BD1qLklliziD7gYQvctJIhWBSQ7\",      \"balance_transaction\": \"txn_1032HU2eZvKYlo2CEPtcnUvl\",      \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",      \"created\": 1506609734,      \"currency\": \"gbp\",      \"livemode\": false,      \"originating_transaction\": null,      \"refunded\": true,      \"refunds\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"fr_1MBoV6KbnvuxQXGucP0PaPPO\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284508,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoU0KbnvuxQXGu2wCCz4Bb\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284441,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoRzKbnvuxQXGuvKkBKkSR\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284315,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoPOKbnvuxQXGueOBnke22\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284154,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoOGKbnvuxQXGu6EPQI2Zp\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284084,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoMUKbnvuxQXGu8Y0Peaoy\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670283974,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MAgZBKbnvuxQXGuLTUrgGeq\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670015681,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1JAu9EKbnvuxQXGuRdZYkxVW\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1625738880,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {              \"order_id\": \"6735\"            }          },          {            \"id\": \"fr_1HZK0UKbnvuxQXGuS428gH0W\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1602005482,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_D0s7fGBKB40Twy\",            \"object\": \"fee_refund\",            \"amount\": 138,            \"balance_transaction\": \"txn_1CaqNg2eZvKYlo2C75cA3Euk\",            \"created\": 1528486576,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          }        ],        \"has_more\": false,        \"url\": \"/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds\"      },      \"fee_source\": {        \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",        \"type\": \"charge\"      }    }    {...}    {...}  ],}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all application fees | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/usage_records",
    "markdown": "# Usage Records | Stripe API Reference\n\nEndpoints\n\n[POST/v1/subscription\\_items/:id/usage\\_records](https://docs.stripe.com/api/usage_records/create)[GET/v1/subscription\\_items/:id/usage\\_record\\_summaries](https://docs.stripe.com/api/usage_records/subscription_item_summary_list)\n\n## [The Usage Record object](https://docs.stripe.com/api/usage_records/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The usage quantity for the specified date.\n    \n*   The ID of the subscription item this usage record contains data for.\n    \n*   The timestamp when this usage occurred.\n    \n\n### More attributes\n\n```\n{  \"id\": \"mbur_1IJ3zE2eZvKYlo2CsJAtf1Jl\",  \"object\": \"usage_record\",  \"livemode\": false,  \"quantity\": 100,  \"subscription_item\": \"si_IutmSSymhsWA5i\",  \"timestamp\": 1571252444}\n```\n\n## [Create a usage record](https://docs.stripe.com/api/usage_records/create)\n\nCreates a usage record for a specified subscription item and date, and fills it with a quantity.\n\nUsage records provide `quantity` information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the [metered billing](https://stripe.com/docs/billing/subscriptions/metered-billing) plan, Stripe helps you send accurate invoices to your customers.\n\nThe default calculation for usage is to add up all the `quantity` values of the usage records within a billing period. You can change this default behavior with the billing plan’s `aggregate_usage` [parameter](https://docs.stripe.com/api/plans/create#create_plan-aggregate_usage). When there is more than one usage record with the same timestamp, Stripe adds the `quantity` values together. In most cases, this is the desired resolution, however, you can change this behavior with the `action` parameter.\n\nThe default pricing model for metered billing is [per-unit pricing](https://docs.stripe.com/api/plans/object#plan_object-billing_scheme). For finer granularity, you can configure metered billing to have a [tiered pricing](https://stripe.com/docs/billing/subscriptions/tiers) model.\n\n### Parameters\n\n*   The usage quantity for the specified timestamp.\n    \n*   Valid values are `increment` (default) or `set`. When using `increment` the specified `quantity` will be added to the usage at the specified timestamp. The `set` action will overwrite the usage quantity at that timestamp. If the subscription has [billing thresholds](https://docs.stripe.com/api/subscriptions/object#subscription_object-billing_thresholds), `increment` is the only allowed value.\n    \n*   #### \n    \n    timestampstring | timestamp\n    \n    The timestamp for the usage event. This timestamp must be within the current billing period of the subscription of the provided `subscription_item`, and must not be in the future. When passing `\"now\"`, Stripe records usage for the current time. Default is `\"now\"` if a value is not provided.\n    \n\n### Returns\n\nReturns the usage record object.\n\nPOST /v1/subscription\\_items/:id/usage\\_records\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_IutmSSymhsWA5i/usage_records \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d quantity=100 \\  -d timestamp=1571252444\n```\n\n```\n{  \"id\": \"mbur_1IJ3zE2eZvKYlo2CsJAtf1Jl\",  \"object\": \"usage_record\",  \"livemode\": false,  \"quantity\": 100,  \"subscription_item\": \"si_IutmSSymhsWA5i\",  \"timestamp\": 1571252444}\n```\n\n## [List all subscription item period summaries](https://docs.stripe.com/api/usage_records/subscription_item_summary_list)\n\nFor the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).\n\nThe list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` summaries, starting after summary `starting_after`. Each entry in the array is a separate summary object. If no more summaries are available, the resulting array is empty.\n\nGET /v1/subscription\\_items/:id/usage\\_record\\_summaries\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries\",      \"has_more\": false,      \"data\": [        {          \"id\": \"sis_1Bnyrd2eZvKYlo2CuVcUbXln\",          \"object\": \"usage_record_summary\",          \"invoice\": \"in_1Bnyrd2eZvKYlo2CSV57GLV8\",          \"livemode\": false,          \"period\": {            \"end\": 0,            \"start\": null          },          \"subscription_item\": \"si_18UXa82eZvKYlo2CbYoIEZVv\",          \"total_usage\": 1        }      ]    }    {...}    {...}  ],}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Usage Records | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/account_sessions",
    "markdown": "# Account Session | Stripe API Reference\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [The Account Session object](https://docs.stripe.com/api/account_sessions/object)\n\n### Attributes\n\n*   The ID of the account the AccountSession was created for\n    \n*   The client secret of this AccountSession. Used on the client to set up secure access to the given `account`.\n    \n    The client secret can be used to provide access to `account` from your frontend. It should not be stored, logged, or exposed to anyone other than the connected account. Make sure that you have TLS enabled on any page that includes the client secret.\n    \n    Refer to our docs to [setup Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components) and learn about how `client_secret` should be handled.\n    \n*   Each key of the dictionary represents an embedded component, and each embedded component maps to its configuration (e.g. whether it has been enabled or not).\n    \n*   The timestamp at which this AccountSession will expire.\n    \n\n### More attributes\n\nThe Account Session object\n\n```\n{  \"object\": \"account_session\",  \"account\": \"acct_1NkDjjJyhOZfPCWt\",  \"client_secret\": \"_OXIKXxEihJokDBnDoe2sgG5OGSO2Q12shKvbeboxpALZGng\",  \"expires_at\": 1693261123,  \"livemode\": false,  \"components\": {    \"account_management\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"account_onboarding\": {      \"enabled\": true,      \"features\": {        \"external_account_collection\": true      }    },    \"balances\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"documents\": {      \"enabled\": false,      \"features\": {}    },    \"notification_banner\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"payment_details\": {      \"enabled\": false,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payments\": {      \"enabled\": true,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payouts\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"payouts_list\": {      \"enabled\": false,      \"features\": {}    }  }}\n```\n\n## [Create an Account Session](https://docs.stripe.com/api/account_sessions/create)\n\nCreates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.\n\n### Parameters\n\n*   The identifier of the account to create an Account Session for.\n    \n*   Each key of the dictionary represents an embedded component, and each embedded component maps to its configuration (e.g. whether it has been enabled or not).\n    \n\n### Returns\n\nReturns an Account Session object if the call succeeded.\n\nPOST /v1/account\\_sessions\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=acct_1NkDjjJyhOZfPCWt \\  -d \"components[account_onboarding][enabled]\"=true \\  -d \"components[payments][enabled]\"=true \\  -d \"components[payouts][enabled]\"=true \\  -d \"components[balances][enabled]\"=true\n```\n\n```\n{  \"object\": \"account_session\",  \"account\": \"acct_1NkDjjJyhOZfPCWt\",  \"client_secret\": \"_OXIKXxEihJokDBnDoe2sgG5OGSO2Q12shKvbeboxpALZGng\",  \"expires_at\": 1693261123,  \"livemode\": false,  \"components\": {    \"account_management\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"account_onboarding\": {      \"enabled\": true,      \"features\": {        \"external_account_collection\": true      }    },    \"balances\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"documents\": {      \"enabled\": false,      \"features\": {}    },    \"notification_banner\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"payment_details\": {      \"enabled\": false,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payments\": {      \"enabled\": true,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payouts\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"payouts_list\": {      \"enabled\": false,      \"features\": {}    }  }}\n```\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Account Session | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/accounts/login_link",
    "markdown": "# Login Links | Stripe API Reference\n\nLogin Links are single-use URLs for a connected account to access the Express Dashboard. The connected account’s [account.controller.stripe\\_dashboard.type](https://docs.stripe.com/api/accounts/object#account_object-controller-stripe_dashboard-type) must be `express` to have access to the Express Dashboard.\n\n## [The Login Link object](https://docs.stripe.com/api/accounts/login_link/object)\n\n### Attributes\n\n*   The URL for the login link.\n    \n\n### More attributes\n\n```\n{  \"object\": \"login_link\",  \"created\": 1686084879,  \"url\": \"https://connect.stripe.com/express/acct_1032D82eZvKYlo2C/F44eiGHh5sEV\"}\n```\n\n## [Create a login link](https://docs.stripe.com/api/accounts/login_link/create)\n\nCreates a single-use login link for a connected account to access the Express Dashboard.\n\n**You can only create login links for accounts that use the [Express Dashboard](https://docs.stripe.com/connect/express-dashboard) and are connected to your platform**.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a login link object if the call succeeded.\n\nPOST /v1/accounts/:id/login\\_links\n\n```\ncurl -X POST https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/login_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"login_link\",  \"created\": 1686084879,  \"url\": \"https://connect.stripe.com/express/acct_1032D82eZvKYlo2C/F44eiGHh5sEV\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Login Links | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/persons",
    "markdown": "# Person | Stripe API Reference\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [The Person object](https://docs.stripe.com/api/persons/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The account the person is associated with.\n    \n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   #### \n    \n    first\\_namenullable string\n    \n    The person’s first name.\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The person’s phone number.\n    \n*   Describes the person’s relationship to the account.\n    \n*   #### \n    \n    requirementsnullable object\n    \n    Information about the requirements for this person, including what information needs to be collected, and by when.\n    \n\n### More attributes\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n*   #### \n    \n    address\\_kananullable object\n    \n*   #### \n    \n    address\\_kanjinullable object\n    \n\n*   #### \n    \n    first\\_name\\_kananullable string\n    \n*   #### \n    \n    first\\_name\\_kanjinullable string\n    \n*   #### \n    \n    full\\_name\\_aliasesnullable array of strings\n    \n*   #### \n    \n    future\\_requirementsnullable object\n    \n\n*   #### \n    \n    id\\_number\\_providedboolean\n    \n*   #### \n    \n    id\\_number\\_secondary\\_providednullable boolean\n    \n*   #### \n    \n    last\\_name\\_kananullable string\n    \n*   #### \n    \n    last\\_name\\_kanjinullable string\n    \n*   #### \n    \n    maiden\\_namenullable string\n    \n*   #### \n    \n    nationalitynullable string\n    \n*   #### \n    \n    political\\_exposurenullable enum\n    \n*   #### \n    \n    registered\\_addressnullable object\n    \n*   #### \n    \n    ssn\\_last\\_4\\_providedboolean\n    \n\n## [Create a person](https://docs.stripe.com/api/persons/create)\n\nCreates a new person.\n\n### Parameters\n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   The person’s first name.\n    \n*   The person’s ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The person’s phone number.\n    \n*   The relationship that this person has with the account’s legal entity.\n    \n*   The last four digits of the person’s Social Security number (U.S. only).\n    \n\n### More parameters\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n\n*   #### \n    \n    full\\_name\\_aliasesarray of strings\n    \n\n*   #### \n    \n    id\\_number\\_secondarystring\n    \n\n### Returns\n\nReturns a person object.\n\nPOST /v1/accounts/:id/persons\n\n```\ncurl -X POST https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1N9XNb2eZvKYlo2CjPX7xF6F\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1684518375,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": null,  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": null,  \"metadata\": {},  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [Update a person](https://docs.stripe.com/api/persons/update)\n\nUpdates an existing person.\n\n### Parameters\n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   The person’s first name.\n    \n*   The person’s ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The person’s phone number.\n    \n*   The relationship that this person has with the account’s legal entity.\n    \n*   The last four digits of the person’s Social Security number (U.S. only).\n    \n\n### More parameters\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n\n*   #### \n    \n    full\\_name\\_aliasesarray of strings\n    \n\n*   #### \n    \n    id\\_number\\_secondarystring\n    \n\n### Returns\n\nReturns a person object.\n\nPOST /v1/accounts/:id/persons/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"person\": \"person_1MqjB62eZvKYlo2CaeEJzKVR\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1680035496,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": \"Jane\",  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": \"Diaz\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [Retrieve a person](https://docs.stripe.com/api/persons/retrieve)\n\nRetrieves an existing person.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a person object.\n\nGET /v1/accounts/:id/persons/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons/person_1MqjB62eZvKYlo2CaeEJzKVR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1N9XNb2eZvKYlo2CjPX7xF6F\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1684518375,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": null,  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": null,  \"metadata\": {},  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```",
    "title": "Person | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/accounts/delete",
    "markdown": "# Delete an account | Stripe API Reference\n\nWith [Connect](https://docs.stripe.com/connect), you can delete accounts you manage.\n\nTest-mode accounts can be deleted at any time.\n\nLive-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all [balances](https://docs.stripe.com/api/balance/balanace_object) are zero.\n\nIf you want to delete your own account, use the [account information tab in your account settings](https://dashboard.stripe.com/settings/account) instead.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter if the call succeeds. If the account ID does not exist, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"deleted\": true}\n```\n\n## [Reject an account](https://docs.stripe.com/api/account/reject)\n\nWith [Connect](https://docs.stripe.com/connect), you can reject accounts that you have flagged as suspicious.\n\nOnly accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.\n\n### Parameters\n\n*   The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`.\n    \n\n### Returns\n\nReturns an account with `payouts_enabled` and `charges_enabled` set to false on success. If the account ID does not exist, this call raises [an error](#errors).\n\nPOST /v1/accounts/:id/reject\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d reason=fraud\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1385798567,  \"default_currency\": \"usd\",  \"details_submitted\": true,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": true,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"rejected.fraud\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Delete an account | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/external_account_cards/retrieve",
    "markdown": "# Retrieve a card | Stripe API Reference\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific card stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the card object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAinb2eZvKYlo2C1Fm9mZsu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAinb2eZvKYlo2C1Fm9mZsu\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [List all cards](https://docs.stripe.com/api/external_account_cards/list)\n\nYou can see a list of the cards that belong to a [connected account](https://docs.stripe.com/connect/accounts). The 10 most recent external accounts are available on the account object. If you need more than 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional cards.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the cards stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=card\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",      \"object\": \"card\",      \"address_city\": null,      \"address_country\": null,      \"address_line1\": null,      \"address_line1_check\": null,      \"address_line2\": null,      \"address_state\": null,      \"address_zip\": null,      \"address_zip_check\": null,      \"brand\": \"Visa\",      \"country\": \"US\",      \"cvc_check\": \"pass\",      \"dynamic_last4\": null,      \"exp_month\": 8,      \"exp_year\": 2024,      \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",      \"funding\": \"credit\",      \"last4\": \"4242\",      \"metadata\": {},      \"name\": null,      \"redaction\": null,      \"tokenization_method\": null,      \"wallet\": null,      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```\n\n## [Delete a card](https://docs.stripe.com/api/external_account_cards/delete)\n\nYou can delete cards from a connected account where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a card with `default_for_currency` set to true. You cannot delete a card if any of the following apply:\n\n*   The card’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the card.\n\nTo delete a card, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted card object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAz2x2eZvKYlo2C75wJ1YUs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",  \"object\": \"card\",  \"deleted\": true}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve a card | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/usage_records/create",
    "markdown": "# Create a usage record | Stripe API Reference\n\nCreates a usage record for a specified subscription item and date, and fills it with a quantity.\n\nUsage records provide `quantity` information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the [metered billing](https://stripe.com/docs/billing/subscriptions/metered-billing) plan, Stripe helps you send accurate invoices to your customers.\n\nThe default calculation for usage is to add up all the `quantity` values of the usage records within a billing period. You can change this default behavior with the billing plan’s `aggregate_usage` [parameter](https://docs.stripe.com/api/plans/create#create_plan-aggregate_usage). When there is more than one usage record with the same timestamp, Stripe adds the `quantity` values together. In most cases, this is the desired resolution, however, you can change this behavior with the `action` parameter.\n\nThe default pricing model for metered billing is [per-unit pricing](https://docs.stripe.com/api/plans/object#plan_object-billing_scheme). For finer granularity, you can configure metered billing to have a [tiered pricing](https://stripe.com/docs/billing/subscriptions/tiers) model.\n\n### Parameters\n\n*   The usage quantity for the specified timestamp.\n    \n*   Valid values are `increment` (default) or `set`. When using `increment` the specified `quantity` will be added to the usage at the specified timestamp. The `set` action will overwrite the usage quantity at that timestamp. If the subscription has [billing thresholds](https://docs.stripe.com/api/subscriptions/object#subscription_object-billing_thresholds), `increment` is the only allowed value.\n    \n*   #### \n    \n    timestampstring | timestamp\n    \n    The timestamp for the usage event. This timestamp must be within the current billing period of the subscription of the provided `subscription_item`, and must not be in the future. When passing `\"now\"`, Stripe records usage for the current time. Default is `\"now\"` if a value is not provided.\n    \n\n### Returns\n\nReturns the usage record object.\n\nPOST /v1/subscription\\_items/:id/usage\\_records\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_IutmSSymhsWA5i/usage_records \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d quantity=100 \\  -d timestamp=1571252444\n```\n\n```\n{  \"id\": \"mbur_1IJ3zE2eZvKYlo2CsJAtf1Jl\",  \"object\": \"usage_record\",  \"livemode\": false,  \"quantity\": 100,  \"subscription_item\": \"si_IutmSSymhsWA5i\",  \"timestamp\": 1571252444}\n```\n\n## [List all subscription item period summaries](https://docs.stripe.com/api/usage_records/subscription_item_summary_list)\n\nFor the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).\n\nThe list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` summaries, starting after summary `starting_after`. Each entry in the array is a separate summary object. If no more summaries are available, the resulting array is empty.\n\nGET /v1/subscription\\_items/:id/usage\\_record\\_summaries\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries\",      \"has_more\": false,      \"data\": [        {          \"id\": \"sis_1Bnyrd2eZvKYlo2CuVcUbXln\",          \"object\": \"usage_record_summary\",          \"invoice\": \"in_1Bnyrd2eZvKYlo2CSV57GLV8\",          \"livemode\": false,          \"period\": {            \"end\": 0,            \"start\": null          },          \"subscription_item\": \"si_18UXa82eZvKYlo2CbYoIEZVv\",          \"total_usage\": 1        }      ]    }    {...}    {...}  ],}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create a usage record | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/external_account_cards/delete",
    "markdown": "# Delete a card | Stripe API Reference\n\nYou can delete cards from a connected account where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a card with `default_for_currency` set to true. You cannot delete a card if any of the following apply:\n\n*   The card’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the card.\n\nTo delete a card, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted card object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAz2x2eZvKYlo2C75wJ1YUs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",  \"object\": \"card\",  \"deleted\": true}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Delete a card | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/application_fees",
    "markdown": "# Application Fees | Stripe API Reference\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [The Application Fee object](https://docs.stripe.com/api/application_fees/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   ID of the Stripe account this fee was taken from.\n    \n*   Amount earned, in cents.\n    \n*   Amount in cents refunded (can be less than the amount attribute on the fee if a partial refund was issued)\n    \n*   ID of the charge that the application fee was taken from.\n    \n\n*   Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationstringExpandable\n    \n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    fee\\_sourcenullable object\n    \n\n*   #### \n    \n    originating\\_transactionnullable stringExpandable\n    \n\nThe Application Fee object\n\n```\n{  \"id\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"object\": \"application_fee\",  \"account\": \"acct_164wxjKbnvuxQXGu\",  \"amount\": 105,  \"amount_refunded\": 105,  \"application\": \"ca_32D88BD1qLklliziD7gYQvctJIhWBSQ7\",  \"balance_transaction\": \"txn_1032HU2eZvKYlo2CEPtcnUvl\",  \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",  \"created\": 1506609734,  \"currency\": \"gbp\",  \"livemode\": false,  \"originating_transaction\": null,  \"refunded\": true,  \"refunds\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"fr_1MBoV6KbnvuxQXGucP0PaPPO\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284508,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoU0KbnvuxQXGu2wCCz4Bb\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284441,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoRzKbnvuxQXGuvKkBKkSR\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284315,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoPOKbnvuxQXGueOBnke22\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284154,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoOGKbnvuxQXGu6EPQI2Zp\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284084,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoMUKbnvuxQXGu8Y0Peaoy\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670283974,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MAgZBKbnvuxQXGuLTUrgGeq\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670015681,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1JAu9EKbnvuxQXGuRdZYkxVW\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1625738880,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {          \"order_id\": \"6735\"        }      },      {        \"id\": \"fr_1HZK0UKbnvuxQXGuS428gH0W\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1602005482,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_D0s7fGBKB40Twy\",        \"object\": \"fee_refund\",        \"amount\": 138,        \"balance_transaction\": \"txn_1CaqNg2eZvKYlo2C75cA3Euk\",        \"created\": 1528486576,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      }    ],    \"has_more\": false,    \"url\": \"/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds\"  },  \"fee_source\": {    \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",    \"type\": \"charge\"  }}\n```\n\n## [Retrieve an application fee](https://docs.stripe.com/api/application_fees/retrieve)\n\nRetrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an application fee object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/application\\_fees/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"object\": \"application_fee\",  \"account\": \"acct_164wxjKbnvuxQXGu\",  \"amount\": 105,  \"amount_refunded\": 105,  \"application\": \"ca_32D88BD1qLklliziD7gYQvctJIhWBSQ7\",  \"balance_transaction\": \"txn_1032HU2eZvKYlo2CEPtcnUvl\",  \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",  \"created\": 1506609734,  \"currency\": \"gbp\",  \"livemode\": false,  \"originating_transaction\": null,  \"refunded\": true,  \"refunds\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"fr_1MBoV6KbnvuxQXGucP0PaPPO\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284508,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoU0KbnvuxQXGu2wCCz4Bb\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284441,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoRzKbnvuxQXGuvKkBKkSR\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284315,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoPOKbnvuxQXGueOBnke22\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284154,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoOGKbnvuxQXGu6EPQI2Zp\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284084,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoMUKbnvuxQXGu8Y0Peaoy\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670283974,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MAgZBKbnvuxQXGuLTUrgGeq\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670015681,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1JAu9EKbnvuxQXGuRdZYkxVW\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1625738880,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {          \"order_id\": \"6735\"        }      },      {        \"id\": \"fr_1HZK0UKbnvuxQXGuS428gH0W\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1602005482,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_D0s7fGBKB40Twy\",        \"object\": \"fee_refund\",        \"amount\": 138,        \"balance_transaction\": \"txn_1CaqNg2eZvKYlo2C75cA3Euk\",        \"created\": 1528486576,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      }    ],    \"has_more\": false,    \"url\": \"/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds\"  },  \"fee_source\": {    \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",    \"type\": \"charge\"  }}\n```\n\n## [List all application fees](https://docs.stripe.com/api/application_fees/list)\n\nReturns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.\n\n### Parameters\n\n*   Only return application fees for the charge specified by this charge ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` application fees, starting after application fee `starting_after`. Each entry in the array is a separate application fee object. If no more fees are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/application_fees \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/application_fees\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",      \"object\": \"application_fee\",      \"account\": \"acct_164wxjKbnvuxQXGu\",      \"amount\": 105,      \"amount_refunded\": 105,      \"application\": \"ca_32D88BD1qLklliziD7gYQvctJIhWBSQ7\",      \"balance_transaction\": \"txn_1032HU2eZvKYlo2CEPtcnUvl\",      \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",      \"created\": 1506609734,      \"currency\": \"gbp\",      \"livemode\": false,      \"originating_transaction\": null,      \"refunded\": true,      \"refunds\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"fr_1MBoV6KbnvuxQXGucP0PaPPO\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284508,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoU0KbnvuxQXGu2wCCz4Bb\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284441,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoRzKbnvuxQXGuvKkBKkSR\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284315,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoPOKbnvuxQXGueOBnke22\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284154,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoOGKbnvuxQXGu6EPQI2Zp\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284084,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoMUKbnvuxQXGu8Y0Peaoy\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670283974,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MAgZBKbnvuxQXGuLTUrgGeq\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670015681,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1JAu9EKbnvuxQXGuRdZYkxVW\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1625738880,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {              \"order_id\": \"6735\"            }          },          {            \"id\": \"fr_1HZK0UKbnvuxQXGuS428gH0W\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1602005482,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_D0s7fGBKB40Twy\",            \"object\": \"fee_refund\",            \"amount\": 138,            \"balance_transaction\": \"txn_1CaqNg2eZvKYlo2C75cA3Euk\",            \"created\": 1528486576,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          }        ],        \"has_more\": false,        \"url\": \"/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds\"      },      \"fee_source\": {        \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",        \"type\": \"charge\"      }    }    {...}    {...}  ],}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Application Fees | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/authorizations/retrieve",
    "markdown": "# Retrieve an authorization | Stripe API Reference\n\nRetrieves an Issuing `Authorization` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Authorization` object if a valid identifier was provided.\n\nGET /v1/issuing/authorizations/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [List all authorizations](https://docs.stripe.com/api/issuing/authorizations/list)\n\nReturns a list of Issuing `Authorization` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return authorizations that belong to the given card.\n    \n*   Only return authorizations that belong to the given cardholder.\n    \n*   Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` authorizations, starting after authorization `starting_after`. Each entry in the array is a separate Issuing `Authorization` object. If no more authorizations are available, the resulting array will be empty.\n\nGET /v1/issuing/authorizations\n\n```\ncurl -G https://api.stripe.com/v1/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/authorizations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",      \"object\": \"issuing.authorization\",      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"authorization_method\": \"online\",      \"balance_transactions\": [],      \"card\": {        \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",        \"object\": \"issuing.card\",        \"brand\": \"Visa\",        \"cancellation_reason\": null,        \"cardholder\": {          \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",          \"object\": \"issuing.cardholder\",          \"billing\": {            \"address\": {              \"city\": \"San Francisco\",              \"country\": \"US\",              \"line1\": \"123 Main Street\",              \"line2\": null,              \"postal_code\": \"94111\",              \"state\": \"CA\"            }          },          \"company\": null,          \"created\": 1626425119,          \"email\": \"jenny.rosen@example.com\",          \"individual\": null,          \"livemode\": false,          \"metadata\": {},          \"name\": \"Jenny Rosen\",          \"phone_number\": \"+18008675309\",          \"redaction\": null,          \"requirements\": {            \"disabled_reason\": null,            \"past_due\": []          },          \"spending_controls\": {            \"allowed_categories\": [],            \"blocked_categories\": [],            \"spending_limits\": [],            \"spending_limits_currency\": null          },          \"status\": \"active\",          \"type\": \"individual\"        },        \"created\": 1626425206,        \"currency\": \"usd\",        \"exp_month\": 6,        \"exp_year\": 2024,        \"last4\": \"8693\",        \"livemode\": false,        \"metadata\": {},        \"redaction\": null,        \"replaced_by\": null,        \"replacement_for\": null,        \"replacement_reason\": null,        \"shipping\": null,        \"spending_controls\": {          \"allowed_categories\": null,          \"blocked_categories\": null,          \"spending_limits\": [            {              \"amount\": 50000,              \"categories\": [],              \"interval\": \"daily\"            }          ],          \"spending_limits_currency\": \"usd\"        },        \"status\": \"active\",        \"type\": \"virtual\",        \"wallets\": {          \"apple_pay\": {            \"eligible\": true,            \"ineligible_reason\": null          },          \"google_pay\": {            \"eligible\": true,            \"ineligible_reason\": null          },          \"primary_account_identifier\": null        }      },      \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"created\": 1630657706,      \"currency\": \"usd\",      \"livemode\": false,      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"merchant_data\": {        \"category\": \"computer_software_stores\",        \"category_code\": \"5734\",        \"city\": \"SAN FRANCISCO\",        \"country\": \"US\",        \"name\": \"STRIPE\",        \"network_id\": \"1234567890\",        \"postal_code\": \"94103\",        \"state\": \"CA\"      },      \"metadata\": {        \"order_id\": \"6735\"      },      \"network_data\": null,      \"pending_request\": null,      \"redaction\": null,      \"request_history\": [        {          \"amount\": 382,          \"amount_details\": {            \"atm_fee\": null          },          \"approved\": false,          \"created\": 1630657706,          \"currency\": \"usd\",          \"merchant_amount\": 382,          \"merchant_currency\": \"usd\",          \"reason\": \"verification_failed\",          \"reason_message\": null        }      ],      \"status\": \"closed\",      \"transactions\": [],      \"verification_data\": {        \"address_line1_check\": \"not_provided\",        \"address_postal_code_check\": \"not_provided\",        \"cvc_check\": \"mismatch\",        \"expiry_check\": \"match\"      },      \"wallet\": null    }    {...}    {...}  ],}\n```\n\n## [Approve an authorization](https://docs.stripe.com/api/issuing/authorizations/approve)\n\n\\[Deprecated\\] Approves a pending Issuing `Authorization` object. This request should be made within the timeout window of the [real-time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations) flow. This method is deprecated. Instead, [respond directly to the webhook request to approve an authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling).\n\n### Parameters\n\n*   If the authorization’s `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://docs.stripe.com/api/issuing/authorizations/decline) to decline an authorization request).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an approved Issuing `Authorization` object.\n\nPOST /v1/issuing/authorizations/:id/approve\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/authorizations/iauth_1MvSKeLkdIwHu7ixKr8rO1HV/approve \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1MvSKeLkdIwHu7ixKr8rO1HV\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1MvSKeLkdIwHu7ixFANTvxgn\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Anytown\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"12345\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1680415995,      \"email\": null,      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"John Doe\",      \"phone_number\": null,      \"requirements\": {        \"disabled_reason\": \"requirements.past_due\",        \"past_due\": [          \"individual.card_issuing.user_terms_acceptance.ip\",          \"individual.card_issuing.user_terms_acceptance.date\",          \"individual.first_name\",          \"individual.last_name\"        ]      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1681162380,    \"currency\": \"usd\",    \"exp_month\": 8,    \"exp_year\": 2024,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {},    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_cardholder_contact\"      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_cardholder_contact\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": null,  \"created\": 1681162380,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\"  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": {    \"amount\": 700,    \"amount_details\": {      \"atm_fee\": null    },    \"currency\": \"usd\",    \"is_amount_controllable\": false,    \"merchant_amount\": 700,    \"merchant_currency\": \"usd\"  },  \"request_history\": [],  \"status\": \"pending\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Decline an authorization](https://docs.stripe.com/api/issuing/authorizations/decline)\n\n\\[Deprecated\\] Declines a pending Issuing `Authorization` object. This request should be made within the timeout window of the [real time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations) flow. This method is deprecated. Instead, [respond directly to the webhook request to decline an authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling).\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a declined Issuing `Authorization` object.\n\nPOST /v1/issuing/authorizations/:id/decline\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn/decline \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Create a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)Test helper\n\nCreate a test-mode authorization.\n\n### Parameters\n\n*   The total amount to attempt to authorize. This amount is in the provided currency, or defaults to the card’s currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this authorization.\n    \n*   The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n*   #### \n    \n    is\\_amount\\_controllableboolean\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Nsse72eZvKYlo2CWBGm2WQ5\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```",
    "title": "Retrieve an authorization | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/accounts/login_link/create",
    "markdown": "# Create a login link | Stripe API Reference\n\nCreates a single-use login link for a connected account to access the Express Dashboard.\n\n**You can only create login links for accounts that use the [Express Dashboard](https://docs.stripe.com/connect/express-dashboard) and are connected to your platform**.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a login link object if the call succeeded.\n\nPOST /v1/accounts/:id/login\\_links\n\n```\ncurl -X POST https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/login_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"login_link\",  \"created\": 1686084879,  \"url\": \"https://connect.stripe.com/express/acct_1032D82eZvKYlo2C/F44eiGHh5sEV\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create a login link | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/external_account_cards/create",
    "markdown": "# Create a card | Stripe API Reference\n\nWhen you create a new debit card, you must specify a [connected account](#accounts) to create it on. You can only specify connected accounts where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nIf the account has no default destination card, then the new card will become the default. However, if the owner already has a default then it will not change. To change the default, you should set `default_for_currency` to `true`.\n\n### Parameters\n\n*   #### \n    \n    external\\_accountobject | stringRequired\n    \n    A token, like the ones returned by [Stripe.js](https://docs.stripe.com/js) or a dictionary containing a user’s card details (with the options shown below). Stripe will automatically validate the card.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n\n### Returns\n\nReturns the card object\n\nPOST /v1/accounts/:id/external\\_accounts\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d external_account=tok_visa_debit\n```\n\n```\n{  \"id\": \"card_1NAiaG2eZvKYlo2CDXvcMb6m\",  \"object\": \"card\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [Update a card](https://docs.stripe.com/api/external_account_cards/update)\n\nIf you need to update only some card details, like the billing address or expiration date, you can do so without having to re-enter the full card details. Stripe also works directly with card networks so that your customers can [continue using your service](https://stripe.com/docs/saving-cards#automatic-card-updates) without interruption.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns the card object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NBLeN2eZvKYlo2CIq1o7Pzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"card_1NBLeN2eZvKYlo2CIq1o7Pzs\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/external_account_cards/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific card stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the card object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAinb2eZvKYlo2C1Fm9mZsu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAinb2eZvKYlo2C1Fm9mZsu\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [List all cards](https://docs.stripe.com/api/external_account_cards/list)\n\nYou can see a list of the cards that belong to a [connected account](https://docs.stripe.com/connect/accounts). The 10 most recent external accounts are available on the account object. If you need more than 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional cards.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the cards stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=card\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",      \"object\": \"card\",      \"address_city\": null,      \"address_country\": null,      \"address_line1\": null,      \"address_line1_check\": null,      \"address_line2\": null,      \"address_state\": null,      \"address_zip\": null,      \"address_zip_check\": null,      \"brand\": \"Visa\",      \"country\": \"US\",      \"cvc_check\": \"pass\",      \"dynamic_last4\": null,      \"exp_month\": 8,      \"exp_year\": 2024,      \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",      \"funding\": \"credit\",      \"last4\": \"4242\",      \"metadata\": {},      \"name\": null,      \"redaction\": null,      \"tokenization_method\": null,      \"wallet\": null,      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```\n\n## [Delete a card](https://docs.stripe.com/api/external_account_cards/delete)\n\nYou can delete cards from a connected account where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a card with `default_for_currency` set to true. You cannot delete a card if any of the following apply:\n\n*   The card’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the card.\n\nTo delete a card, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted card object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAz2x2eZvKYlo2C75wJ1YUs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",  \"object\": \"card\",  \"deleted\": true}\n```",
    "title": "Create a card | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/test_clocks/advance",
    "markdown": "# Advance a test clock | Stripe API Reference\n\n## [Advance a test clock](https://docs.stripe.com/api/test_clocks/advance)Test helper\n\nStarts advancing a test clock to a specified time in the future. Advancement is done when status changes to `Ready`.\n\n### Parameters\n\n*   #### \n    \n    frozen\\_timetimestampRequired\n    \n    The time to advance the test clock. Must be after the test clock’s current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.\n    \n\n### Returns\n\nA `TestClock` object with status `Advancing` is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/test\\_helpers/test\\_clocks/:id/advance\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7/advance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d frozen_time=1680199613\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"advancing\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Advance a test clock | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/accounts/list",
    "markdown": "# List all connected accounts | Stripe API Reference\n\nReturns a list of accounts connected to your platform via [Connect](https://docs.stripe.com/connect). If you’re not a platform, the list is empty.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` accounts, starting after account `starting_after`. Each entry in the array is a separate [`Account`](#account_object) object. If no more accounts are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",      \"object\": \"account\",      \"business_profile\": {        \"annual_revenue\": null,        \"estimated_worker_count\": null,        \"mcc\": null,        \"name\": null,        \"product_description\": null,        \"support_address\": null,        \"support_email\": null,        \"support_phone\": null,        \"support_url\": null,        \"url\": null      },      \"business_type\": null,      \"capabilities\": {},      \"charges_enabled\": false,      \"controller\": {        \"fees\": {          \"payer\": \"application\"        },        \"is_controller\": true,        \"losses\": {          \"payments\": \"application\"        },        \"requirement_collection\": \"stripe\",        \"stripe_dashboard\": {          \"type\": \"express\"        },        \"type\": \"application\"      },      \"country\": \"US\",      \"created\": 1695830751,      \"default_currency\": \"usd\",      \"details_submitted\": false,      \"email\": \"jenny.rosen@example.com\",      \"external_accounts\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"      },      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"login_links\": {        \"object\": \"list\",        \"total_count\": 0,        \"has_more\": false,        \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",        \"data\": []      },      \"metadata\": {},      \"payouts_enabled\": false,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"disabled_reason\": \"requirements.past_due\",        \"errors\": [],        \"eventually_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"past_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"pending_verification\": []      },      \"settings\": {        \"bacs_debit_payments\": {          \"display_name\": null,          \"service_user_number\": null        },        \"branding\": {          \"icon\": null,          \"logo\": null,          \"primary_color\": null,          \"secondary_color\": null        },        \"card_issuing\": {          \"tos_acceptance\": {            \"date\": null,            \"ip\": null          }        },        \"card_payments\": {          \"decline_on\": {            \"avs_failure\": false,            \"cvc_failure\": false          },          \"statement_descriptor_prefix\": null,          \"statement_descriptor_prefix_kanji\": null,          \"statement_descriptor_prefix_kana\": null        },        \"dashboard\": {          \"display_name\": null,          \"timezone\": \"Etc/UTC\"        },        \"invoices\": {          \"default_account_tax_ids\": null        },        \"payments\": {          \"statement_descriptor\": null,          \"statement_descriptor_kana\": null,          \"statement_descriptor_kanji\": null        },        \"payouts\": {          \"debit_negative_balances\": true,          \"schedule\": {            \"delay_days\": 2,            \"interval\": \"daily\"          },          \"statement_descriptor\": null        },        \"sepa_debit_payments\": {}      },      \"tos_acceptance\": {        \"date\": null,        \"ip\": null,        \"user_agent\": null      },      \"type\": \"none\"    }    {...}    {...}  ],}\n```\n\n## [Delete an account](https://docs.stripe.com/api/accounts/delete)\n\nWith [Connect](https://docs.stripe.com/connect), you can delete accounts you manage.\n\nTest-mode accounts can be deleted at any time.\n\nLive-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all [balances](https://docs.stripe.com/api/balance/balanace_object) are zero.\n\nIf you want to delete your own account, use the [account information tab in your account settings](https://dashboard.stripe.com/settings/account) instead.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter if the call succeeds. If the account ID does not exist, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"deleted\": true}\n```\n\n## [Reject an account](https://docs.stripe.com/api/account/reject)\n\nWith [Connect](https://docs.stripe.com/connect), you can reject accounts that you have flagged as suspicious.\n\nOnly accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.\n\n### Parameters\n\n*   The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`.\n    \n\n### Returns\n\nReturns an account with `payouts_enabled` and `charges_enabled` set to false on success. If the account ID does not exist, this call raises [an error](#errors).\n\nPOST /v1/accounts/:id/reject\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d reason=fraud\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1385798567,  \"default_currency\": \"usd\",  \"details_submitted\": true,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": true,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"rejected.fraud\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all connected accounts | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/terminal/connection_tokens/object",
    "markdown": "# The Connection Token object | Stripe API Reference\n\n### Attributes\n\n*   The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens).\n    \n*   Your application should pass this token to the Stripe Terminal SDK.\n    \n\n### More attributes\n\nThe Connection Token object\n\n```\n{  \"object\": \"terminal.connection_token\",  \"secret\": \"pst_test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LE81ZEdIalZ6NlVuMUdjM3c3WkRnN0ZYRHZxRURwTXo_00gNK2DWAV\"}\n```\n\n## [Create a Connection Token](https://docs.stripe.com/api/terminal/connection_tokens/create)\n\nTo connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.\n\n### Parameters\n\n*   The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens).\n    \n\n### Returns\n\nReturns a Connection Token.\n\nPOST /v1/terminal/connection\\_tokens\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/connection_tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"terminal.connection_token\",  \"secret\": \"pst_test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LE81ZEdIalZ6NlVuMUdjM3c3WkRnN0ZYRHZxRURwTXo_00gNK2DWAV\"}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Connection Token object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api",
    "markdown": "# Manage locations | Stripe DocumentationThe Stripe Docs logo\n\n## Group and manage your readers by physical location.\n\nYou can streamline the management of multiple readers across different physical sites by using locations and zones.\n\nLocations and zones help by associating each reader with specific operational sites and guarantee that the correct regional configurations are downloaded.\n\n*   **Locations**: Allows you to group readers, monitor their connectivity status, and modify your settings based on physical location. This functionality is beneficial for marketplaces with multiple connected accounts.\n    \n*   **Zones**: Offers an optional method to further categorize locations and readers. Zones enable you to represent broader groups of readers or locations, such as larger geographic regions (for example, countries) or organizational sub-brands. Multiple locations can belong to a single zone, and you can create a hierarchical structure by grouping multiple zones under a single zone.\n    \n\n#### Note\n\nZones provide an additional way to group locations. You must still assign readers to a location, and you can assign a location to only one zone.\n\n## Locations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create a location for each physical place where your readers operate. You can [register](https://docs.stripe.com/terminal/fleet/register-readers) multiple readers to each location, and nest these locations within zones. Before you can use a reader, you must register it to a location.\n\nThe required [address properties](https://docs.stripe.com/api/terminal/locations/create#create_terminal_location-address) for a location vary by country:\n\n| Countries | Required Address Properties |\n| --- | --- |\n| Australia<br><br>Canada<br><br>Italy<br><br>Spain<br><br>United States | `line1`, `city`, `state`, `postal_code`, and `country` |\n| Austria+<br><br>Belgium<br><br>Czech Republic+<br><br>Denmark<br><br>Finland+<br><br>France<br><br>Germany<br><br>Luxembourg+<br><br>Malaysia+<br><br>Netherlands<br><br>New Zealand+<br><br>Norway+<br><br>Portugal+<br><br>Sweden<br><br>Switzerland+<br><br>United Kingdom | `line1`, `city`, `postal_code`, and `country` |\n| Ireland<br><br>Singapore | `line1`, `postal_code`, and `country` |\n\n+Terminal is currently in beta in this country.\n\n\\*\\*Compatibility for this mobile SDK also applies when used with React Native.\n\n#### Common mistake\n\nYou can use the Dashboard or API to update a `Location` object. If you do so, avoid changing the country associated with an existing location. Instead of changing the country, create a new location in a different country, and then re-register any readers associated with the old location.\n\n## Zones ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nZones are the top-level groups that can consist of either more zones or locations. You can add more zones nested under an existing one, creating additional hierarchy levels, such as “West coast.” However, organizing your locations into zones is optional.\n\n## Create locations and zones ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Note\n\nYou can’t create or modify zones using the API.\n\nFirst, you must [register your reader to a location](https://docs.stripe.com/terminal/fleet/register-readers?dashboard-or-api=api) to accept payments.\n\nTo create a new Terminal [Location](https://docs.stripe.com/api/terminal/locations) object using the API, use the [create location](https://docs.stripe.com/api/terminal/locations/create) request.\n\n`curl https://api.stripe.com/v1/terminal/locations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d display_name=HQ \\  -d \"address[line1]\"=\"1272 Valencia Street\" \\  -d \"address[city]\"=\"San Francisco\" \\  -d \"address[state]\"=CA \\  -d \"address[country]\"=US \\  -d \"address[postal_code]\"=94110`\n\n### Create a location for accounts using direct charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a Location for an account using [direct charges](https://docs.stripe.com/connect/direct-charges), use the `Stripe-Account` header in your request. Only the Connect account you authenticate as can access these locations. If the business operates in multiple physical sites, you can create multiple Locations for any individual accounts with direct charges.\n\n`curl https://api.stripe.com/v1/terminal/locations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d display_name=HQ \\  -d \"address[line1]\"=\"1272 Valencia Street\" \\  -d \"address[city]\"=\"San Francisco\" \\  -d \"address[state]\"=CA \\  -d \"address[country]\"=US \\  -d \"address[postal_code]\"=94110`\n\n### Create a location for accounts using destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor integrations using [destination charges](https://docs.stripe.com/connect/destination-charges), Locations belong to the _platform_ account and aren’t mapped strictly to connected accounts. If your platform needs to associate accounts using destination charges with Locations, you can store a reference to the relevant account(s) in the Location’s [metadata](https://docs.stripe.com/api/terminal/locations/object#terminal_location_object-metadata) property.\n\n`curl https://api.stripe.com/v1/terminal/locations \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"display_name\"=\"HQ\" \\   -d \"address[line1]\"=\"1272 Valencia Street\" \\   -d \"address[city]\"=\"San Francisco\" \\   -d \"address[state]\"=\"CA\" \\   -d \"address[country]\"=\"US\" \\   -d \"address[postal_code]\"=\"94110\" \\   -d \"metadata[connected_account]\"=  {{CONNECTED_ACCOUNT_ID}}    `\n\nWhen you [register your reader to a Location](https://docs.stripe.com/terminal/fleet/register-readers), the specified Location groups the reader and defines its country settings.\n\n## Scope connection tokens Server-side Smart readers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen creating a [ConnectionToken](https://docs.stripe.com/api/terminal/connection_tokens) for the Terminal SDK, you can provide a `location` parameter to control access to smart readers. If you provide a Location, the ConnectionToken is only usable with smart readers assigned to that Location. If you don’t provide a Location, the ConnectionToken is usable with all readers.\n\n#### Note\n\nFor Bluetooth readers, the `location` of a ConnectionToken has no effect. This ensures that any nearby Bluetooth readers remain discoverable.\n\n`curl https://api.stripe.com/v1/terminal/connection_tokens \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d location=  {{LOCATION_ID}}    `",
    "title": "Manage locations | Stripe Documentation",
    "description": "Group and manage your readers by physical location.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/terminal/locations/object",
    "markdown": "# The Location object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fterminal%2Flocations%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The full address of the location.\n    \n*   The display name of the location.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    configuration\\_overridesnullable string\n    \n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"address\": {    \"city\": \"San Francisco\",    \"country\": \"US\",    \"line1\": \"1234 Main Street\",    \"line2\": \"\",    \"postal_code\": \"94111\",    \"state\": \"CA\"  },  \"display_name\": \"My First Store\",  \"livemode\": false,  \"metadata\": {}}\n```\n\n## [Create a Location](https://docs.stripe.com/api/terminal/locations/create)\n\nCreates a new `Location` object. For further details, including which address fields are required in each country, see the [Manage locations](https://docs.stripe.com/terminal/fleet/locations) guide.\n\n### Parameters\n\n*   The full address of the location.\n    \n*   #### \n    \n    display\\_namestringRequired\n    \n    A name for the location.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    configuration\\_overridesstring\n    \n\n### Returns\n\nReturns a `Location` object if creation succeeds.\n\nPOST /v1/terminal/locations\n\n```\ncurl https://api.stripe.com/v1/terminal/locations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"My First Store\" \\  -d \"address[line1]\"=\"1234 Main Street\" \\  -d \"address[city]\"=\"San Francisco\" \\  -d \"address[postal_code]\"=94111 \\  -d \"address[state]\"=CA \\  -d \"address[country]\"=US\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"address\": {    \"city\": \"San Francisco\",    \"country\": \"US\",    \"line1\": \"1234 Main Street\",    \"line2\": \"\",    \"postal_code\": \"94111\",    \"state\": \"CA\"  },  \"display_name\": \"My First Store\",  \"livemode\": false,  \"metadata\": {}}\n```\n\n## [Update a Location](https://docs.stripe.com/api/terminal/locations/update)\n\nUpdates a `Location` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   The full address of the location. If you’re updating the `address` field, avoid changing the `country`. If you need to modify the `country` field, create a new `Location` object and re-register any existing readers to that location.\n    \n*   A name for the location.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    configuration\\_overridesstring\n    \n\n### Returns\n\nReturns an updated `Location` object if a valid identifier was provided.\n\nPOST /v1/terminal/locations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/locations/tml_FBakXQG8bQk4Mm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"Update Store Name\"\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"address\": {    \"city\": \"San Francisco\",    \"country\": \"US\",    \"line1\": \"1234 Main Street\",    \"line2\": \"\",    \"postal_code\": \"94111\",    \"state\": \"CA\"  },  \"display_name\": \"Update Store Name\",  \"livemode\": false,  \"metadata\": {}}\n```\n\n## [Retrieve a Location](https://docs.stripe.com/api/terminal/locations/retrieve)\n\nRetrieves a `Location` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Location` object if a valid identifier was provided.\n\nGET /v1/terminal/locations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/locations/tml_FBakXQG8bQk4Mm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tml_FBakXQG8bQk4Mm\",  \"object\": \"terminal.location\",  \"address\": {    \"city\": \"San Francisco\",    \"country\": \"US\",    \"line1\": \"1234 Main Street\",    \"line2\": \"\",    \"postal_code\": \"94111\",    \"state\": \"CA\"  },  \"display_name\": \"My First Store\",  \"livemode\": false,  \"metadata\": {}}\n```\n\n## [List all Locations](https://docs.stripe.com/api/terminal/locations/list)\n\nReturns a list of `Location` objects.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` locations, starting after location `starting_after`. Each entry in the array is a separate Terminal `location` object. If no more locations are available, the resulting array will be empty.\n\nGET /v1/terminal/locations\n\n```\ncurl -G https://api.stripe.com/v1/terminal/locations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/locations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tml_FBakXQG8bQk4Mm\",      \"object\": \"terminal.location\",      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Main Street\",        \"line2\": \"\",        \"postal_code\": \"94111\",        \"state\": \"CA\"      },      \"display_name\": \"My First Store\",      \"livemode\": false,      \"metadata\": {}    }    {...}    {...}  ],}\n```",
    "title": "The Location object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/disputes/object",
    "markdown": "# The Dispute object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Disputed amount in the card’s currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal). Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation).\n    \n*   #### \n    \n    balance\\_transactionsnullable array of objectsExpandable\n    \n    List of balance transactions associated with the dispute.\n    \n*   The currency the `transaction` was made in.\n    \n*   Evidence for the dispute. Evidence contains exactly two non-null fields: the `reason` for the dispute and the associated evidence field for the selected `reason`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Current status of the dispute.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `expired`<br><br>The dispute has expired. |\n    | `lost`<br><br>The dispute is lost. |\n    | `submitted`<br><br>The dispute has been submitted to Stripe. |\n    | `unsubmitted`<br><br>The dispute is pending submission to Stripe. |\n    | `won`<br><br>The dispute is won. |\n    \n*   #### \n    \n    transactionstringExpandable\n    \n    The transaction being disputed.\n    \n\n### More attributes\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"unsubmitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [Create a dispute](https://docs.stripe.com/api/issuing/disputes/create)\n\nCreates an Issuing `Dispute` object. Individual pieces of evidence within the `evidence` object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to [Dispute reasons and evidence](https://docs.stripe.com/issuing/purchases/disputes#dispute-reasons-and-evidence) for more details about evidence requirements.\n\n### Parameters\n\n*   Evidence provided for the dispute.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The ID of the issuing transaction to create a dispute for. For transaction on Treasury FinancialAccounts, use `treasury.received_debit`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an Issuing `Dispute` object in `unsubmitted` status if creation succeeds.\n\nPOST /v1/issuing/disputes\n\n```\ncurl https://api.stripe.com/v1/issuing/disputes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d transaction=ipi_1MykXhFtDWhhyHE1UjsZZ3xQ \\  -d \"evidence[reason]\"=fraudulent \\  -d \"evidence[fraudulent][explanation]\"=\"This transaction is fraudulent.\"\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"unsubmitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [Update a dispute](https://docs.stripe.com/api/issuing/disputes/update)\n\nUpdates the specified Issuing `Dispute` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the `evidence` object can be unset by passing in an empty string.\n\n### Parameters\n\n*   Evidence provided for the dispute.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an updated Issuing `Dispute` object if a valid identifier was provided.\n\nPOST /v1/issuing/disputes/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/disputes/idp_1MykdxFtDWhhyHE1BFAV3osZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"evidence[reason]\"=not_received \\  -d \"evidence[not_received][expected_at]\"=1590000000 \\  -d \"evidence[not_received][explanation]\"= \\  -d \"evidence[not_received][product_description]\"=\"Baseball cap\" \\  -d \"evidence[not_received][product_type]\"=merchandise\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"reason\": \"not_received\",    \"not_received\": {      \"expected_at\": 1590000000,      \"explanation\": \"\",      \"product_description\": \"Baseball cap\",      \"product_type\": \"merchandise\"    }  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"unsubmitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [Retrieve a dispute](https://docs.stripe.com/api/issuing/disputes/retrieve)\n\nRetrieves an Issuing `Dispute` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Dispute` object if a valid identifier was provided.\n\nGET /v1/issuing/disputes/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/disputes/idp_1MykdxFtDWhhyHE1BFAV3osZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",  \"object\": \"issuing.dispute\",  \"amount\": 100,  \"created\": 1681947753,  \"currency\": \"usd\",  \"evidence\": {    \"fraudulent\": {      \"additional_documentation\": null,      \"dispute_explanation\": null,      \"explanation\": \"This transaction is fraudulent.\",      \"uncategorized_file\": null    },    \"reason\": \"fraudulent\"  },  \"livemode\": false,  \"metadata\": {},  \"status\": \"unsubmitted\",  \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"}\n```\n\n## [List all disputes](https://docs.stripe.com/api/issuing/disputes/list)\n\nReturns a list of Issuing `Dispute` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Select the Issuing dispute for the given transaction.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` disputes, starting after dispute `starting_after`. Each entry in the array is a separate Issuing `Dispute` object. If no more disputes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/disputes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/disputes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"idp_1MykdxFtDWhhyHE1BFAV3osZ\",      \"object\": \"issuing.dispute\",      \"amount\": 100,      \"created\": 1681947753,      \"currency\": \"usd\",      \"evidence\": {        \"fraudulent\": {          \"additional_documentation\": null,          \"dispute_explanation\": null,          \"explanation\": \"This transaction is fraudulent.\",          \"uncategorized_file\": null        },        \"reason\": \"fraudulent\"      },      \"livemode\": false,      \"metadata\": {},      \"status\": \"unsubmitted\",      \"transaction\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\"    }    {...}    {...}  ],}\n```",
    "title": "The Dispute object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/physical_bundles/object",
    "markdown": "# The Physical Bundle object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Information about the features available for this physical bundle.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Friendly display name.\n    \n*   Whether this physical bundle can be used to create cards.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Cannot be used to create cards. |\n    | `review`<br><br>Can be used to create cards but cards will only be fulfilled when this physical bundle is activated. |\n    \n*   Whether this physical bundle is a standard Stripe offering or custom-made for you.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `custom`<br><br>Available only to you, you manage design and inventory. |\n    | `standard`<br><br>Publicly available, Stripe manages design and inventory. |\n    \n\nThe Physical Bundle object\n\n```\n{  \"id\": \"ics_NLuXJPDYSTjFON\",  \"object\": \"issuing.physical_bundle\",  \"livemode\": false,  \"name\": \"US Visa Credit White\",  \"features\": {    \"card_logo\": \"required\",    \"carrier_text\": \"optional\"  },  \"status\": \"active\",  \"type\": \"standard\"}\n```\n\n## [Retrieve a physical bundle](https://docs.stripe.com/api/issuing/physical_bundles/retrieve)\n\nRetrieves a physical bundle object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the physical bundle object.\n\nGET /v1/issuing/physical\\_bundles/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/physical_bundles/ics_NLuXJPDYSTjFON \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ics_NLuXJPDYSTjFON\",  \"object\": \"issuing.physical_bundle\",  \"livemode\": false,  \"name\": \"US Visa Credit White\",  \"features\": {    \"card_logo\": \"required\",    \"carrier_text\": \"optional\"  },  \"status\": \"active\",  \"type\": \"standard\"}\n```\n\n## [List all physical bundles](https://docs.stripe.com/api/issuing/physical_bundles/list)\n\nReturns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return physical bundles with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Cannot be used to create cards. |\n    | `review`<br><br>Can be used to create cards but cards will only be fulfilled when this physical bundle is activated. |\n    \n*   Only return physical bundles with the given type.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `custom`<br><br>Available only to you, you manage design and inventory. |\n    | `standard`<br><br>Publicly available, Stripe manages design and inventory. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate physical bundle object. If no more cards are available, the resulting array will be empty.\n\nGET /v1/issuing/physical\\_bundles\n\n```\ncurl -G https://api.stripe.com/v1/issuing/physical_bundles \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/physical_bundles\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ics_NLuXJPDYSTjFON\",      \"object\": \"issuing.physical_bundle\",      \"livemode\": false,      \"name\": \"US Visa Credit White\",      \"features\": {        \"card_logo\": \"required\",        \"carrier_text\": \"optional\"      },      \"status\": \"active\",      \"type\": \"standard\"    }    {...}    {...}  ],}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Physical Bundle object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/personalization_designs/object",
    "markdown": "# The Personalization Design object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    card\\_logonullable stringExpandable\n    \n    The file for the card logo to use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.\n    \n*   #### \n    \n    carrier\\_textnullable object\n    \n    Hash containing carrier text, for use with physical bundles that support carrier text.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    lookup\\_keynullable string\n    \n    A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Friendly display name.\n    \n*   #### \n    \n    physical\\_bundlestringExpandable\n    \n    The physical bundle object belonging to this personalization design.\n    \n*   Hash containing information on whether this personalization design is used to create cards when one is not specified.\n    \n*   Hash containing reasons why the personalization design was rejected.\n    \n*   Whether this personalization design can be used to create cards.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Personalization design can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Personalization design cannot be used to create cards because it was deactivated. |\n    | `rejected`<br><br>Personalization design cannot be used to create cards because it was rejected by design review. |\n    | `review`<br><br>Personalization design can be used to create cards but cards will only be fulfilled once the personalization design is activated. |\n    \n\nThe Personalization Design object\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [Create a personalization design](https://docs.stripe.com/api/issuing/personalization_designs/create)\n\nCreates a personalization design object.\n\n### Parameters\n\n*   #### \n    \n    physical\\_bundlestringRequired\n    \n    The physical bundle object belonging to this personalization design.\n    \n*   The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.\n    \n*   Hash containing carrier text, for use with physical bundles that support carrier text.\n    \n*   A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Friendly display name.\n    \n*   Information on whether this personalization design is used to create cards when one is not specified.\n    \n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n    If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.\n    \n\n### Returns\n\nReturns the created personalization design object.\n\nPOST /v1/issuing/personalization\\_designs\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"My personalization design name\" \\  -d \"preferences[is_default]\"=false \\  -d card_logo=file_1LzR9L2eZvKYlo2CelTpcvKu \\  -d physical_bundle=ics_Oiw9ahglMfql0U\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [Update a personalization design](https://docs.stripe.com/api/issuing/personalization_designs/update)\n\nUpdates a card personalization object.\n\n### Parameters\n\n*   The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.\n    \n*   Hash containing carrier text, for use with physical bundles that support carrier text.\n    \n*   A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Friendly display name. Providing an empty string will set the field to null.\n    \n*   The physical bundle object belonging to this personalization design.\n    \n*   Information on whether this personalization design is used to create cards when one is not specified.\n    \n*   #### \n    \n    transfer\\_lookup\\_keyboolean\n    \n    If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.\n    \n\n### Returns\n\nReturns the updated personalization design object.\n\nPOST /v1/issuing/personalization\\_designs/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [Retrieve a personalization design](https://docs.stripe.com/api/issuing/personalization_designs/retrieve)\n\nRetrieves a personalization design object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the personalization design object.\n\nGET /v1/issuing/personalization\\_designs/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/personalization_designs/ipcd_Oiw9GXcFRE81LZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ipcd_Oiw9GXcFRE81LZ\",  \"object\": \"issuing.personalization_design\",  \"livemode\": true,  \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",  \"carrier_text\": null,  \"lookup_key\": \"my_card_design_lookup_key\",  \"metadata\": {},  \"name\": \"My personalization design name\",  \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",  \"preferences\": {    \"is_default\": false  },  \"rejection_reasons\": {    \"card_logo\": [],    \"carrier_text\": []  },  \"status\": \"review\"}\n```\n\n## [List all personalization designs](https://docs.stripe.com/api/issuing/personalization_designs/list)\n\nReturns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   #### \n    \n    lookup\\_keysarray of strings\n    \n    Only return personalization designs with the given lookup keys.\n    \n*   Only return personalization designs with the given preferences.\n    \n*   Only return personalization designs with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Personalization design can be used to create cards that fulfill immediately. |\n    | `inactive`<br><br>Personalization design cannot be used to create cards because it was deactivated. |\n    | `rejected`<br><br>Personalization design cannot be used to create cards because it was rejected by design review. |\n    | `review`<br><br>Personalization design can be used to create cards but cards will only be fulfilled once the personalization design is activated. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate personalization design object. If no more cards are available, the resulting array will be empty.\n\nGET /v1/issuing/personalization\\_designs\n\n```\ncurl -G https://api.stripe.com/v1/issuing/personalization_designs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/personalization_designs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ipcd_Oiw9GXcFRE81LZ\",      \"object\": \"issuing.personalization_design\",      \"livemode\": true,      \"card_logo\": \"file_1LzR9L2eZvKYlo2CelTpcvKu\",      \"carrier_text\": null,      \"lookup_key\": \"my_card_design_lookup_key\",      \"metadata\": {},      \"name\": \"My personalization design name\",      \"physical_bundle\": \"ics_Oiw9ahglMfql0U\",      \"preferences\": {        \"is_default\": false      },      \"rejection_reasons\": {        \"card_logo\": [],        \"carrier_text\": []      },      \"status\": \"review\"    }    {...}    {...}  ],}\n```",
    "title": "The Personalization Design object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/terminal/configuration/object",
    "markdown": "# The Configuration object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fterminal%2Fconfiguration%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    bbpos\\_wisepos\\_enullable object\n    \n    An object containing device type specific settings for BBPOS WisePOS E\n    \n*   #### \n    \n    is\\_account\\_defaultnullable boolean\n    \n    Whether this Configuration is the default for your account\n    \n*   #### \n    \n    stripe\\_s700nullable object\n    \n    An object containing device type specific settings for Stripe S700\n    \n*   On-reader tipping settings\n    \n*   #### \n    \n    verifone\\_p400nullable object\n    \n    An object containing device type specific settings for Verifone P400\n    \n\n### More attributes\n\n*   #### \n    \n    reboot\\_windownullable objectPreview feature\n    \n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"is_account_default\": false,  \"livemode\": false}\n```\n\n## [Create a Configuration](https://docs.stripe.com/api/terminal/configuration/create)\n\nCreates a new `Configuration` object.\n\n### Parameters\n\n*   An object containing device type specific settings for BBPOS WisePOS E readers\n    \n*   An object containing device type specific settings for Stripe S700 readers\n    \n*   Tipping configurations for readers supporting on-reader tips\n    \n*   An object containing device type specific settings for Verifone P400 readers\n    \n\n### More parameters\n\n*   #### \n    \n    reboot\\_windowobjectPreview feature\n    \n\n### Returns\n\nReturns a `Configuration` object if creation succeeds.\n\nPOST /v1/terminal/configurations\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"is_account_default\": false,  \"livemode\": false}\n```\n\n## [Update a Configuration](https://docs.stripe.com/api/terminal/configuration/update)\n\nUpdates a new `Configuration` object.\n\n### Parameters\n\n*   An object containing device type specific settings for BBPOS WisePOS E readers\n    \n*   An object containing device type specific settings for Stripe S700 readers\n    \n*   Tipping configurations for readers supporting on-reader tips\n    \n*   An object containing device type specific settings for Verifone P400 readers\n    \n\n### More parameters\n\n*   #### \n    \n    reboot\\_windowobjectPreview feature\n    \n\n### Returns\n\nReturns a `Configuration` object if the update succeeds.\n\nPOST /v1/terminal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/configurations/tmc_FQqbaQCiy0m1xc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"bbpos_wisepos_e[splashscreen]\"=file_1NtDiHBHO5VeT9SUjuWGkEAN\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"bbpos_wisepos_e\": {    \"splashscreen\": \"file_1NtDiPBHO5VeT9SUvD7GHCi0\"  },  \"is_account_default\": false,  \"livemode\": false}\n```\n\n## [Retrieve a Configuration](https://docs.stripe.com/api/terminal/configuration/retrieve)\n\nRetrieves a `Configuration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Configuration` object if a valid identifier was provided.\n\nGET /v1/terminal/configurations/:id\n\n```\ncurl https://api.stripe.com/v1/terminal/configurations/tmc_FQqbaQCiy0m1xc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tmc_FQqbaQCiy0m1xc\",  \"object\": \"terminal.configuration\",  \"is_account_default\": false,  \"livemode\": false}\n```\n\n## [List all Configurations](https://docs.stripe.com/api/terminal/configuration/list)\n\nReturns a list of `Configuration` objects.\n\n### Parameters\n\n*   #### \n    \n    is\\_account\\_defaultboolean\n    \n    if present, only return the account default or non-default configurations.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` configurations, starting after configurations `configurations`. Each entry in the array is a separate Terminal `configurations` object. If no more configurations are available, the resulting array will be empty.\n\nGET /v1/terminal/configurations\n\n```\ncurl -G https://api.stripe.com/v1/terminal/configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/configurations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tmc_FQqbaQCiy0m1xc\",      \"object\": \"terminal.configuration\",      \"is_account_default\": false,      \"livemode\": false    }    {...}    {...}  ],}\n```",
    "title": "The Configuration object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/sigma/scheduled_queries/object",
    "markdown": "# The Scheduled Query object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   When the query was run, Sigma contained a snapshot of your Stripe data at this time.\n    \n*   The file object representing the results of the query.\n    \n*   SQL for the query.\n    \n*   The query’s execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise.\n    \n*   Title of the query.\n    \n\n### More attributes\n\n*   #### \n    \n    result\\_available\\_untiltimestamp\n    \n\nThe Scheduled Query object\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/sigma/scheduled_query_runs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sqr_1NpIuH2eZvKYlo2CP72f3rLR\",      \"object\": \"scheduled_query_run\",      \"created\": 1694472517,      \"data_load_time\": 1694217600,      \"file\": {        \"id\": \"file_1BE4yZ2eZvKYlo2C9MeXgqcB\",        \"object\": \"file\",        \"created\": 1508284799,        \"expires_at\": null,        \"filename\": \"path\",        \"links\": {          \"object\": \"list\",          \"data\": [],          \"has_more\": false,          \"url\": \"/v1/file_links?file=file_1BE4yZ2eZvKYlo2C9MeXgqcB\"        },        \"purpose\": \"sigma_scheduled_query\",        \"size\": 500,        \"title\": null,        \"type\": \"csv\",        \"url\": \"https://files.stripe.com/v1/files/file_1BE4yZ2eZvKYlo2C9MeXgqcB/contents\"      },      \"livemode\": false,      \"result_available_until\": 1726012800,      \"sql\": \"SELECT count(*) from charges\",      \"status\": \"completed\",      \"title\": \"Count all charges\"    }  ]}\n```\n\n## [Retrieve a scheduled query run](https://docs.stripe.com/api/sigma/scheduled_queries/retrieve)\n\nRetrieves the details of an scheduled query run.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the scheduled query run object if a valid identifier was provided.\n\nGET /v1/sigma/scheduled\\_query\\_runs/:id\n\n```\ncurl https://api.stripe.com/v1/sigma/scheduled_query_runs/sqr_1NpIuH2eZvKYlo2CP72f3rLR \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/sigma/scheduled_query_runs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sqr_1NpIuH2eZvKYlo2CP72f3rLR\",      \"object\": \"scheduled_query_run\",      \"created\": 1694472517,      \"data_load_time\": 1694217600,      \"file\": {        \"id\": \"file_1BE4yZ2eZvKYlo2C9MeXgqcB\",        \"object\": \"file\",        \"created\": 1508284799,        \"expires_at\": null,        \"filename\": \"path\",        \"links\": {          \"object\": \"list\",          \"data\": [],          \"has_more\": false,          \"url\": \"/v1/file_links?file=file_1BE4yZ2eZvKYlo2C9MeXgqcB\"        },        \"purpose\": \"sigma_scheduled_query\",        \"size\": 500,        \"title\": null,        \"type\": \"csv\",        \"url\": \"https://files.stripe.com/v1/files/file_1BE4yZ2eZvKYlo2C9MeXgqcB/contents\"      },      \"livemode\": false,      \"result_available_until\": 1726012800,      \"sql\": \"SELECT count(*) from charges\",      \"status\": \"completed\",      \"title\": \"Count all charges\"    }  ]}\n```\n\n## [List all scheduled query runs](https://docs.stripe.com/api/sigma/scheduled_queries/list)\n\nReturns a list of scheduled query runs.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA paginated list of all scheduled query runs.\n\nGET /v1/sigma/scheduled\\_query\\_runs\n\n```\ncurl -G https://api.stripe.com/v1/sigma/scheduled_query_runs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/sigma/scheduled_query_runs\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/sigma/scheduled_query_runs\",      \"has_more\": false,      \"data\": [        {          \"id\": \"sqr_1NpIuH2eZvKYlo2CP72f3rLR\",          \"object\": \"scheduled_query_run\",          \"created\": 1694472517,          \"data_load_time\": 1694217600,          \"file\": {            \"id\": \"file_1BE4yZ2eZvKYlo2C9MeXgqcB\",            \"object\": \"file\",            \"created\": 1508284799,            \"expires_at\": null,            \"filename\": \"path\",            \"links\": {              \"object\": \"list\",              \"data\": [],              \"has_more\": false,              \"url\": \"/v1/file_links?file=file_1BE4yZ2eZvKYlo2C9MeXgqcB\"            },            \"purpose\": \"sigma_scheduled_query\",            \"size\": 500,            \"title\": null,            \"type\": \"csv\",            \"url\": \"https://files.stripe.com/v1/files/file_1BE4yZ2eZvKYlo2C9MeXgqcB/contents\"          },          \"livemode\": false,          \"result_available_until\": 1726012800,          \"sql\": \"SELECT count(*) from charges\",          \"status\": \"completed\",          \"title\": \"Count all charges\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Scheduled Query object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/reporting/report_type/object",
    "markdown": "# The Report Type object | Stripe API Reference\n\n### Attributes\n\n*   #### \n    \n    data\\_available\\_endtimestamp\n    \n    Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    data\\_available\\_starttimestamp\n    \n    Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.\n    \n*   Human-readable name of the Report Type\n    \n\n### More attributes\n\n*   #### \n    \n    default\\_columnsnullable array of strings\n    \n\n```\n{  \"id\": \"balance.summary.1\",  \"object\": \"reporting.report_type\",  \"data_available_end\": 1695081600,  \"data_available_start\": 1667952000,  \"default_columns\": [    \"category\",    \"description\",    \"net_amount\",    \"currency\"  ],  \"livemode\": false,  \"name\": \"Balance summary\",  \"updated\": 1695109133,  \"version\": 1}\n```\n\n## [Retrieve a Report Type](https://docs.stripe.com/api/reporting/report_type/retrieve)\n\nRetrieves the details of a Report Type. (Certain report types require a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).)\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the specified `ReportType` object if found, and raises [an error](#errors) otherwise.\n\nGET /v1/reporting/report\\_types/:id\n\n```\ncurl https://api.stripe.com/v1/reporting/report_types/balance.summary.1 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"balance.summary.1\",  \"object\": \"reporting.report_type\",  \"data_available_end\": 1695081600,  \"data_available_start\": 1667952000,  \"default_columns\": [    \"category\",    \"description\",    \"net_amount\",    \"currency\"  ],  \"livemode\": false,  \"name\": \"Balance summary\",  \"updated\": 1695109133,  \"version\": 1}\n```\n\n## [List all Report Types](https://docs.stripe.com/api/reporting/report_type/list)\n\nReturns a full list of Report Types.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary with a `data` property that contains an array of Report Types. Each entry is a separate `ReportType` object.\n\nGET /v1/reporting/report\\_types\n\n```\ncurl https://api.stripe.com/v1/reporting/report_types \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/reporting/report_types\",  \"has_more\": false,  \"data\": [    {      \"id\": \"balance.summary.1\",      \"object\": \"reporting.report_type\",      \"data_available_end\": 1695081600,      \"data_available_start\": 1667952000,      \"default_columns\": [        \"category\",        \"description\",        \"net_amount\",        \"currency\"      ],      \"livemode\": false,      \"name\": \"Balance summary\",      \"updated\": 1695109133,      \"version\": 1    }    {...}    {...}  ],}\n```\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Report Type object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/financial_connections/ownership/object",
    "markdown": "# The Account Ownership object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   A paginated list of owners for this account.\n    \n\nThe Account Ownership object\n\n```\n{  \"id\": \"fcaowns_1MwVKR2eZvKYlo2CGV7Mmt6s\",  \"object\": \"linked_account_ownership\",  \"created\": 1681412227,  \"owners\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"url\": \"/v1/linked_accounts/fca_1MwVKR2eZvKYlo2CoMV2L3PV/owners?ownership=fcaowns_1MwVKR2eZvKYlo2CGV7Mmt6s\"  }}\n```\n\n## [List Account Owners](https://docs.stripe.com/api/financial_connections/ownership/list)\n\nLists all owners for a given `Account`\n\n### Parameters\n\n*   The ID of the ownership object to fetch owners from.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` owners for a given account, starting after owner `starting_after`. Each entry in the array is a separate owner object. If no more owners are available, the resulting array will be empty.\n\nGET /v1/financial\\_connections/accounts/:id/owners\n\n```\ncurl -G https://api.stripe.com/v1/financial_connections/accounts/fca_1NoEbE2eZvKYlo2CmmnAn2A1/owners \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d ownership=fcaowns_1NoEbE2eZvKYlo2C4Xj7vilA\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/financial_connections/accounts/fca_1NoEbE2eZvKYlo2CmmnAn2A1/owners\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/financial_connections/accounts/fca_1NoDzC2eZvKYlo2CwXpqO27d/owners\",      \"has_more\": false,      \"data\": [        {          \"id\": \"fcaown_1NoDzC2eZvKYlo2C1TlEZ0K2\",          \"object\": \"linked_account_owner\",          \"email\": \"nobody+janesmith@stripe.com\",          \"name\": \"Jane Smith\",          \"ownership\": \"fcaowns_1NoDzC2eZvKYlo2CAm1EDKTk\",          \"phone\": \"+1 555-555-5555\",          \"raw_address\": \"123 Main Street, Everytown USA\",          \"refreshed_at\": null        }      ]    }    {...}    {...}  ],}\n```\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Account Ownership object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/financial_connections/ownership/owner-object",
    "markdown": "# The Account Owner object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The email address of the owner.\n    \n*   The full name of the owner.\n    \n*   The ownership object that this owner belongs to.\n    \n*   The raw phone number of the owner.\n    \n*   #### \n    \n    raw\\_addressnullable string\n    \n    The raw physical address of the owner.\n    \n*   #### \n    \n    refreshed\\_atnullable timestamp\n    \n    The timestamp of the refresh that updated this owner.\n    \n\n```\n{  \"id\": \"fcaown_1NtI9uBHO5VeT9SUKLJU5suZ\",  \"object\": \"financial_connections.account_owner\",  \"email\": \"nobody+janesmith@stripe.com\",  \"name\": \"Jane Smith\",  \"ownership\": \"fcaowns_1NtI9uBHO5VeT9SUSRe21lqt\",  \"phone\": \"+1 555-555-5555\",  \"raw_address\": \"123 Main Street, Everytown USA\",  \"refreshed_at\": null}\n```\n\n## [The Account Ownership object](https://docs.stripe.com/api/financial_connections/ownership/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   A paginated list of owners for this account.\n    \n\nThe Account Ownership object\n\n```\n{  \"id\": \"fcaowns_1MwVKR2eZvKYlo2CGV7Mmt6s\",  \"object\": \"linked_account_ownership\",  \"created\": 1681412227,  \"owners\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"url\": \"/v1/linked_accounts/fca_1MwVKR2eZvKYlo2CoMV2L3PV/owners?ownership=fcaowns_1MwVKR2eZvKYlo2CGV7Mmt6s\"  }}\n```\n\n## [List Account Owners](https://docs.stripe.com/api/financial_connections/ownership/list)\n\nLists all owners for a given `Account`\n\n### Parameters\n\n*   The ID of the ownership object to fetch owners from.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` owners for a given account, starting after owner `starting_after`. Each entry in the array is a separate owner object. If no more owners are available, the resulting array will be empty.\n\nGET /v1/financial\\_connections/accounts/:id/owners\n\n```\ncurl -G https://api.stripe.com/v1/financial_connections/accounts/fca_1NoEbE2eZvKYlo2CmmnAn2A1/owners \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d ownership=fcaowns_1NoEbE2eZvKYlo2C4Xj7vilA\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/financial_connections/accounts/fca_1NoEbE2eZvKYlo2CmmnAn2A1/owners\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/financial_connections/accounts/fca_1NoDzC2eZvKYlo2CwXpqO27d/owners\",      \"has_more\": false,      \"data\": [        {          \"id\": \"fcaown_1NoDzC2eZvKYlo2C1TlEZ0K2\",          \"object\": \"linked_account_owner\",          \"email\": \"nobody+janesmith@stripe.com\",          \"name\": \"Jane Smith\",          \"ownership\": \"fcaowns_1NoDzC2eZvKYlo2CAm1EDKTk\",          \"phone\": \"+1 555-555-5555\",          \"raw_address\": \"123 Main Street, Everytown USA\",          \"refreshed_at\": null        }      ]    }    {...}    {...}  ],}\n```\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Account Owner object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/crypto",
    "markdown": "# Stripe Crypto | Stripe DocumentationThe Stripe Docs logo\n\n## Stripe CryptoBeta\n\n## Learn how to integrate the Stripe fiat-to-crypto onramp.\n\nYou must submit an onramp application to access the onramp API. Most applications are reviewed within 48 hours.\n\n### To submit your application:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Create or sign in to your Stripe account, and submit the [onramp application](https://dashboard.stripe.com/register?redirect=%2Fcrypto-onramp%2Fapplication).\n2.  Complete your [Stripe application](https://dashboard.stripe.com/account/onboarding).\n3.  After submitting the application in step 2, you can start development using test mode.\n\nStripe notifies you when your application is approved or if we require more information. Check the status of your application by visiting the [onboarding page](https://dashboard.stripe.com/crypto-onramp/onboarding).\n\nContact [Stripe Support](https://support.stripe.com/) with any questions.\n\nEnable users to purchase crypto directly from your application\n\n[](https://docs.stripe.com/crypto/overview)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/crypto-onramp-overview-banner.eb44e843dcabbf44808d8a0e7b85ae1f.png)\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLearn more about which integration option is right for your use case in the [onramp overview](https://docs.stripe.com/crypto/overview#integration-options).\n\n## Explore the API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Additional Resources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Stripe Crypto | Stripe Documentation",
    "description": "Learn how to integrate the Stripe fiat-to-crypto onramp.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/reporting/report_run/list",
    "markdown": "# List all Report Runs | Stripe API Reference\n\nReturns a list of Report Runs, with the most recent appearing first.\n\n### Parameters\n\n*   Only return Report Runs that were created during the given date interval.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Report Runs, starting after the argument `starting_after` if it is provided. Each entry in the array is a separate `ReportRun` object. If no more Report Runs are available, the resulting array will be empty.\n\nGET /v1/reporting/report\\_runs\n\n```\ncurl -G https://api.stripe.com/v1/reporting/report_runs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/reporting/report_runs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"frr_1MrQwrLkdIwHu7ixUov4x2b3\",      \"object\": \"reporting.report_run\",      \"created\": 1680203749,      \"error\": null,      \"livemode\": false,      \"parameters\": {        \"interval_end\": 1680100000,        \"interval_start\": 1680000000      },      \"report_type\": \"balance.summary.1\",      \"result\": null,      \"status\": \"pending\",      \"succeeded_at\": null    }    {...}    {...}  ],}\n```\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List all Report Runs | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/crypto/overview",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## OverviewBeta\n\n## Learn about the Stripe fiat-to-crypto onramp.\n\nThe Stripe fiat-to-crypto onramp enables individuals to securely purchase cryptocurrencies directly from your platform or Dapp at the time of checkout. The onramp is fully customizable and you can integrate it into your product or service.\n\nStripe acts as the merchant of record for these onramp transactions and takes full liability for all fraud and disputes. Stripe also handles all regulatory requirements, [know your customer](https://en.wikipedia.org/wiki/Know_your_customer \"know your customer\") (KYC) verifications, and sanctions screening. Customers have the option of saving payment methods, KYC data, and wallet information with Stripe, which makes the returning onramp experience much faster.\n\nYou must submit an onramp application to access the onramp API. Most applications are reviewed within 48 hours.\n\n### To submit your application:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Create or sign in to your Stripe account, and submit the [onramp application](https://dashboard.stripe.com/register?redirect=%2Fcrypto-onramp%2Fapplication).\n2.  Complete your [Stripe application](https://dashboard.stripe.com/account/onboarding).\n3.  After submitting the application in step 2, you can start development using test mode.\n\nStripe notifies you when your application is approved or if we require more information. Check the status of your application at any time by visiting the [onboarding page](https://dashboard.stripe.com/crypto-onramp/onboarding).\n\nPlease reach out to support@stripe.com with any questions.\n\n![An example of Stripe's fiat-to-crypto onramp being embedded into a 3rd party application](https://b.stripecdn.com/docs-statics-srv/assets/crypto-onramp-overview.c9ec889d4c12403f4b2dbc17600dc640.png)\n\nAn example of Stripe’s fiat-to-crypto onramp being embedded into a 3rd party application\n\n## Integration Options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides multiple ways for your application to integrate with the onramp. Learn more about the features available for each one to find which one is right for your use case.\n\n| **Option** | **Overview** | **Best for** |\n| --- | --- | --- |\n| **[No-code redirect URL generation](https://docs.stripe.com/crypto/no-code-quickstart)** | *   No code required<br>*   Some customization, including the suggested source or destination amount, and the destination currency and network<br>*   Send users to Stripe hosted onramp at [crypto.link.com](https://crypto.link.com/)<br>*   Stripe account optional | Users who don’t want to write any code and have static parameter values |\n| **[Embeddable onramp](https://docs.stripe.com/crypto/integrate-the-onramp)** Recommended | *   Brand customization<br>*   Dark mode supported<br>*   Full parameter customization, including destination wallet address, with the [Onramp API](https://docs.stripe.com/crypto/using-the-api#api-reference) | Users who want full customization and to embed the onramp widget directly into their application |\n| **Redirect URL to [standalone onramp](https://docs.stripe.com/crypto/standalone-hosted-onramp)†** | *   Some customization, including the suggested source or destination amount, and the destination currency and network<br>*   Send users to the Stripe hosted onramp at [crypto.link.com](https://crypto.link.com/)<br>*   Stripe account optional | Users who want light customization and a lightweight frontend integration |\n| **Minted session with redirect URL to [standalone onramp](https://docs.stripe.com/crypto/standalone-hosted-onramp)†** | *   Brand customization<br>*   Full parameter customization, including destination wallet address, with the [Onramp API](https://docs.stripe.com/crypto/using-the-api#api-reference)<br>*   Send users to the Stripe hosted onramp at [crypto.link.com](https://crypto.link.com/) | Users who want full customization but don’t want to host the onramp themselves |\n\n†The standalone hosted onramp provides two different integration options with different levels of customization available. See the [standalone hosted onramp docs](https://docs.stripe.com/crypto/standalone-hosted-onramp) for more information.\n\n## Feature Set![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n|     |     |\n| --- | --- |\n| Customizability | *   Ability to pre-populate parameters of the transaction (wallet\\_addresses, source and destination currencies, source and destination amounts, supported networks)<br>*   Free for platforms to integrate—fees are paid by users<br>*   Real-time quotes, automated KYC, and multi-chain support in just a few lines of code<br>*   Implement using an embeddable widget, customizable to the look and feel of your brand<br>*   Every status change within a session generates a webhook<br>*   No fraud liability for platforms—Stripe handles all disputes<br>*   Returning users can use 1-click checkout with Link, Stripe’s consumer account infrastructure |\n| Payment Methods | Credit, Debit, Apple Pay, ACH (US only)<br><br>*   All eligible for delivery of crypto _instantly_, post-KYC |\n| Currencies | *   ETH (Ethereum)<br>*   ETH (Base)\\*<br>*   SOL<br>*   MATIC<br>*   BTC<br>*   AVAX<br>*   XLM\\*<br>*   USDC (Ethereum)<br>*   USDC (Solana)\\*<br>*   USDC (Polygon)\\*<br>*   USDC (Avalanche)\\*<br>*   USDC (Base)\\*<br>*   USDC (Stellar)\\* |\n| Geo Availability | US (excl. Hawaii) and EU countries |\n\n\\*XLM, USDC (Solana), USDC (Stellar), USDC (Avalanche), and USDC (Polygon) aren’t available in New York. ETH (Base), MATIC, AVAX, USDC (Solana), USDC (Polygon), USDC (Avalanche), and USDC (Base) aren’t supported in the EU.",
    "title": "Overview | Stripe Documentation",
    "description": "Learn about the Stripe fiat-to-crypto onramp.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/crypto/quickstart",
    "markdown": "# Fiat to Crypto Onramp with Stripe\n\nSearch the docs or ask a question",
    "title": "Fiat to Crypto Onramp with Stripe | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/crypto/no-code-quickstart",
    "markdown": "# Onramp no-code quickstart | Stripe DocumentationThe Stripe Docs logo\n\n## Onramp no-code quickstartBeta\n\n## Customize and generate a redirect URL to the standalone hosted onramp.\n\nPlatforms can direct users to purchase crypto with a link to the standalone hosted onramp at [https://crypto.link.com](https://crypto.link.com/). The standalone hosted onramp redirect URL supports parameter customization and lets you prefill fields such as the destination currency and the source amount or destination amount.\n\nShare the link by sending it directly to users or by displaying it with a button, as in the example below.\n\nYou can also generate a redirect URL with code using the `Standalone` function and passing in the desired fields. See the [standalone hosted onramp docs](https://docs.stripe.com/crypto/standalone-hosted-onramp) to learn about what else you can do with the standalone hosted onramp, or to customize additional parameters.\n\nGenerate a redirect URL with code\n\n`const standaloneOnramp = window.StripeOnramp.Standalone(); const redirectUrl = standaloneOnramp.getUrl();  return (   <a href={redirectUrl}>     Buy Crypto   </a> );`",
    "title": "Onramp no-code quickstart | Stripe Documentation",
    "description": "Customize and generate a redirect URL to the standalone hosted onramp.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/crypto/integration-recipes",
    "markdown": "# Backend integration recipes | Stripe DocumentationThe Stripe Docs logo\n\n## Backend integration recipesBeta\n\n## Learn best practices for integrating the onramp for different web3 use cases.\n\nTo optimize the user experience, frame the onramp as a native component of your application. In addition to frontend design, you often want to pre-populate onramp parameters when creating an onramp session in the backend. The following are some common use cases and suggested implementations.\n\n### Wallet![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWallet users have two main onramp entry points—wallet funding and transaction top up.\n\n#### 1\\. Wallet funding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can proactively prompt users to fund their wallet after they create a new wallet or when their funds are critically low.\n\nIn these cases, you might want to specify the following:\n\n*   `wallet_addresses`: Use the wallet address already in use.\n*   `destination_networks`: Set to the default or selected network to reduce user confusion.\n*   `destination_currencies`: Leaving this blank is acceptable but you can optionally restrict it to the native gas token or any desired cryptocurrencies (for example, if you offer a Defi service in USDC, consider the case where the user likely needs both USDC and the gas token).\n*   `destination_network`: Leave this blank to inherit first value of supported network.\n*   `destination_currency`: Leave this blank to inherit first value of supported cryptocurrencies.\n\n`curl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer_ip_address\"=\"8.8.8.8\" \\   -d \"wallet_addresses[ethereum]\"=\"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\" \\   -d \"wallet_addresses[solana]\"=\"bufoH37MTiMTNAfBS4VEZ94dCEwMsmeSijD2vZRShuV\" \\   -d \"destination_networks[]\"=\"ethereum\" \\   -d \"destination_networks[]\"=\"solana\"`\n\n#### 2\\. Transaction top-up![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a Dapp or the user proposes a transaction, you might detect that the transaction fails because of insufficient funds. In this case, you can calculate the delta required for the transaction to complete. However, it’s often difficult to detect the requested amount or cryptocurrency for ERC or SPL tokens.\n\nIn these cases, you might want to specify the following:\n\n*   `wallet_addresses`: Use the wallet address in use\n*   `destination_networks`: Set to the selected network\n*   `destination_currencies`: Restrict to the missing currencies when possible\n*   `destination_network`: Set to the selected network (a required value if you want to set the amount)\n*   `destination_currency`: Set to the target currency (a required value if you want to set the amount)\n*   `destination_amount`: Set to the balance differences and leave enough buffer room for gas when applicable\n\n`curl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer_ip_address\"=\"8.8.8.8\" \\   -d \"wallet_addresses[ethereum]\"=\"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\" \\   -d \"destination_networks[]\"=\"ethereum\" \\   -d \"destination_currencies[]\"=\"usdc\" \\   -d \"destination_network\"=\"ethereum\" \\   -d \"destination_currency\"=\"usdc\" \\   -d \"destination_amount\"=\"10\"`\n\n### Dapp or NFT checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn some applications, you can use the onramp in checkout when you know what the destination amount is. For example, a Dapp might be used to sell memberships for a fixed price, or when the user is looking to buy a specific NFT from a marketplace.\n\nIn these cases, you might want to specify the following:\n\n*   `wallet_addresses`—Use the connected wallet address\n*   `destination_networks`—Use the connected network\n*   `destination_currencies`—Use the presentment currency (that is, the price in the currency the goods are quoted in)\n*   `destination_network`—Set to the selected network above (a required value if you want to set the amount)\n*   `destination_currency`—Set to the target currency above (a required value if you want to set amount)\n*   `destination_amount`—Set it to either the balance difference or to cover the entire purchase amount. Some users adopt both using on-chain analytics with just about an even split. A user might choose the full amount to simplify their tax cost basis or to not spend accumulated assets. In both cases, you should leave room for gas.\n\n`curl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer_ip_address\"=\"8.8.8.8\" \\   -d \"wallet_addresses[ethereum]\"=\"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\" \\   -d \"destination_networks[]\"=\"ethereum\" \\   -d \"destination_currencies[]\"=\"eth\" \\   -d \"destination_network\"=\"ethereum\" \\   -d \"destination_currency\"=\"eth\" \\   -d \"destination_amount\"=\"0.2343\"`\n\n### DEX![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA DEX presents a unique opportunity to let users buy any cryptocurrency with fiat. While a DEX can incrementally prompt users to top up crypto when exchanging arbitrary crypto pairs using an existing interface, it’s preferable to have a dedicated user flow that focuses on fiat to crypto only.\n\nAs the onramp lets you own your brand and user experience, a DEX can build an onramp widget that takes advantage of Stripe’s ability to process fiat into selective cryptocurrencies, and DEX can complete the final leg exchanging it to arbitrary currencies. A DEX can also build an onramp widget for a specific token. For example, a DAO might endorse a specific liquidity pool and use a DEX to distribute their tokens and onboard new users with fiat.\n\nIn these cases, you might want to specify the following\n\n*   `wallet_addresses`—Use the wallet address already in use\n*   `destination_networks`—Set to the selected network\n*   `destination_currencies`—Restrict to the selected cryptocurrency\n*   `destination_network`—Set to selected network (a required value if you want to set the amount)\n*   `destination_currency`—Set to the target currency (a required value if you want to set the amount)\n*   `destination_amount`—Set only if you can collect the user’s intent ahead of time—leave blank for Stripe to suggest smart default values\n\n`curl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer_ip_address\"=\"8.8.8.8\" \\   -d \"wallet_addresses[ethereum]\"=\"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\" \\   -d \"destination_networks[]\"=\"ethereum\" \\   -d \"destination_currencies[]\"=\"eth\" \\   -d \"destination_network\"=\"ethereum\" \\   -d \"destination_currency\"=\"eth\"`",
    "title": "Backend integration recipes | Stripe Documentation",
    "description": "Learn best practices for integrating the onramp for different web3 use cases.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/crypto/standalone-hosted-onramp",
    "markdown": "# Using the standalone hosted onramp\n\n## Using the standalone hosted onrampBeta\n\n## Learn how to use the standalone hosted onramp.\n\nThe standalone hosted onramp is a prebuilt frontend integration of the crypto onramp hosted at [https://crypto.link.com](https://crypto.link.com/). Platforms can integrate the crypto onramp by redirecting their users to the standalone hosted onramp, rather than hosting an embedded version of the onramp within their application.\n\n|     | Generate a redirect URL | Mint a session with a redirect URL |\n| --- | --- | --- |\n| **Overview** | Generate a redirect URL in the frontend without a Stripe account. | Mint a session with a redirect URL in the backend with a Stripe account. |\n| **Customization** | Customize the suggested source or destination amount, and the destination currency and network. | Allows full customization, including destination wallet address. For a full list of parameters, go to [using the api](https://docs.stripe.com/crypto/using-the-api#how-to-pre-populate-transaction-parameters). |\n| **Best for** | Platforms that want only want a lightweight frontend integration with light customization and no branding. | Platforms that want a fully customized onramp with branding. |\n\nPlatforms that want to embed the crypto onramp within their application can [integrate the onramp](https://docs.stripe.com/crypto/integrate-the-onramp).\n\n## Generate a redirect URL![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInclude the following scripts using script tags within the `<head>` element of your HTML. These scripts must always load directly from Stripe domains, **https://js.stripe.com** and **https://crypto-js.stripe.com**, for compatibility and [PCI compliance](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\"). Don’t include the scripts in a bundle or host a copy yourself. If you do, your integration might break without warning.\n\nGenerate a redirect URL using the `Standalone` function, passing in desired parameters:\n\n`const standaloneOnramp = window.StripeOnramp.Standalone({   source_currency: 'usd',   amount: {source_amount: '42'},   destination_networks: ['ethereum', 'bitcoin'],   destination_currencies: ['eth', 'btc'],   destination_currency: 'btc',   destination_network: 'bitcoin' }); const redirectUrl = standaloneOnramp.getUrl();`\n\nWe allow the following parameters to be pre-populated:\n\n*   `source_currency`: The fiat currency for the transaction (`usd` and `eur` only for now).\n*   `amount`: The fixed amount of fiat currency or cryptocurrency for this purchase. Specify a fiat amount by passing in `source_amount` (for example, `{source_amount: 42}`). Specify a cryptocurrency amount by passing in `destination_amount` (for example, `{destination_amount: 42}`). You can only specify one amount.\n*   `destination_currencies`: An array of cryptocurrencies you want to restrict to (for example, `[eth, usdc]`).\n*   `destination_networks`: An array of crypto networks you want to restrict to (for example, `[ethereum, polygon]`).\n*   `destination_network`: The default crypto network for this onramp (for example, `ethereum`).\n*   `destination_currency`: The default cryptocurrency for this onramp session (for example, `eth`).\n\nRedirect your users to the URL for a prebuilt frontend integration of the crypto onramp on the standalone hosted onramp.\n\n## Mint a session with a redirect URL![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSimilar to other integrations, you need to implement a server endpoint to [create a new onramp session](https://docs.stripe.com/crypto/using-the-api) for every user visit. The onramp session creation request returns a `redirect_url`. Redirect your users to the URL for a fully customized and branded crypto onramp on the standalone hosted onramp.\n\nGenerate a [crypto onramp session](https://docs.stripe.com/crypto/using-the-api#api-reference) with a `redirect_url` by running the following curl command in your terminal:\n\n`curl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\nSample response:\n\n`{   \"id\": \"cos_0MpKNb589O8KAxCGjmaOVF8T\",   \"object\": \"crypto.onramp_session\",   \"client_secret\": \"cos_0MpKNb589O8KAxCGjmaOVF8T_secret_fqV1TAdhSCFeO9FW5HnygRXca00AwEHIOu8\",   \"created\": 1679701843,   \"livemode\": false,   \"redirect_url\": \"[https://crypto.link.com?session_hash=CCwaGwoZYWNjdF8yOERUNTg5TzhLQXhDR2JMbXh5WijU7vigBjIGmyBbkqO4Oi10eFHEaFln9gFSsTGQBoQf5qRZK-A0NhiEIeH3QaCMrz-d4oYotirrAd_Bkz4](https://crypto.link.com/?session_hash=CCwaGwoZYWNjdF8yOERUNTg5TzhLQXhDR2JMbXh5WijU7vigBjIGmyBbkqO4Oi10eFHEaFln9gFSsTGQBoQf5qRZK-A0NhiEIeH3QaCMrz-d4oYotirrAd_Bkz4)\",   \"status\": \"initialized\",   \"transaction_details\": {     \"destination_currency\": null,     \"destination_amount\": null,     \"destination_network\": null,     \"fees\": null,     \"lock_wallet_address\": false,     \"source_currency\": null,     \"source_amount\": null,     \"destination_currencies\": [       \"btc\",       \"eth\",       \"sol\",       \"usdc\",       \"xlm\"     ],     \"destination_networks\": [       \"bitcoin\",       \"ethereum\",       \"solana\",       \"polygon\",       \"stellar\"     ],     \"transaction_id\": null,     \"wallet_address\": null,     \"wallet_addresses\": null   } }`",
    "title": "Using the standalone hosted onramp | Stripe Documentation",
    "description": "Learn how to use the standalone hosted onramp.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/crypto/esmodule",
    "markdown": "# Stripe Crypto SDK ES Module\n\n## Stripe Crypto SDK ES ModuleBeta\n\n## Set up the Stripe crypto client-side SDK in your web application.\n\nThis introductory guide shows you how to install the [Stripe crypto ES module](https://www.npmjs.com/@stripe/crypto) client-side SDK with a script tag or package manager. The SDK wraps the global `StripeOnramp` function provided by the Stripe crypto script as an ES module. It allows you to use the [onramp](https://docs.stripe.com/crypto/overview) widget to help your customers to acquire crypto using fiat.\n\n[](#web-stripejs-html)\n\n### Installation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInclude the following scripts using script tags within the `<head>` element of your HTML. These scripts must always load directly from Stripe’s domains, **https://js.stripe.com** and **https://crypto-js.stripe.com**, for compatibility and [PCI compliance](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\"). Don’t include the scripts in a bundle or host a copy yourself. If you do, your integration might break without warning.\n\n### StripeOnramp constructor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSet the [API publishable key](https://dashboard.stripe.com/test/apikeys) to allow Stripe to retrieve the `OnrampSession` object created by your backend. For example:\n\n`const stripeOnramp = StripeOnramp(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n[](#web-stripejs-esmodule)\n\n### Installation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo install through the package manager, install the [Stripe.js ES module](https://github.com/stripe/stripe-js) and [Stripe crypto ES module](https://www.npmjs.com/package/@stripe/crypto) from the [npm public registry](https://www.npmjs.com/). The package includes Typescript type definitions.\n\n`npm install @stripe/stripe-js @stripe/crypto`\n\n### StripeOnramp constructor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nImport the module and set the [API publishable key](https://dashboard.stripe.com/test/apikeys) to allow Stripe to retrieve the `OnrampSession` object created by your backend. The function returns a `Promise` object that resolves with a newly created `StripeOnramp` object after the scripts load.\n\n`import {loadStripeOnramp} from '@stripe/crypto';  const stripeOnramp = await loadStripeOnramp(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`",
    "title": "Stripe Crypto SDK ES Module | Stripe Documentation",
    "description": "Set up the Stripe crypto client-side SDK in your web application.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/crypto/using-the-api",
    "markdown": "# Using the API | Stripe DocumentationThe Stripe Docs logo\n\n## Using the APIBeta\n\n## Learn how to use the onramp API.\n\nRefer to the following developer flows when building your onramp integration.\n\n## How to integrate the onramp into your application![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIntegrating an application to use the onramp requires the following:\n\n1.  Onboard onto Stripe and get API keys\n\nGo to the [Dashboard](https://dashboard.stripe.com/apikeys) and get:\n\n*   The [secret key](https://docs.stripe.com/keys#obtain-api-keys) that you need to make API calls to Stripe from a server you control\n*   The [publishable key](https://docs.stripe.com/keys#obtain-api-keys) that you use to make requests from your frontend client\n\n1.  Generate a CryptoOnrampSession server-side\n\nOn a server you control, expose a new API endpoint (for example, `myserver.com/mint-onramp-session`) which makes a call to the Stripe `POST /v1/crypto/onramp_sessions` endpoint. This “mints” an onramp session with Stripe that you can use with new or returning users. You need to mint one session per user.\n\nThe request:\n\n`curl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\nThe response:\n\n`{   \"id\": \"cos_0MYvmj589O8KAxCGp14dTjiw\",   \"object\": \"crypto.onramp_session\",   \"client_secret\": \"cos_0MYvmj589O8KAxCGp14dTjiw_secret_BsxEqQLiYKANcTAoVnJ2ikH5q002b9xzouk\",   \"created\": 1675794053,   \"livemode\": false,   \"status\": \"initialized\",   \"transaction_details\": {     \"destination_currency\": null,     \"destination_amount\": null,     \"destination_network\": null,     \"fees\": null,     \"lock_wallet_address\": false,     \"source_currency\": null,     \"source_amount\": null,     \"destination_currencies\": [       \"btc\",       \"eth\",       \"sol\",       \"usdc\",       \"xlm\"     ],     \"destination_networks\": [       \"bitcoin\",       \"ethereum\",       \"solana\",       \"stellar\"     ],     \"transaction_id\": null,     \"wallet_address\": null,     \"wallet_addresses\": null   } }`\n\nThis endpoint returns error codes if Stripe can’t create onramp sessions. See the supportability section below to learn why this might happen.\n\n#### Note\n\nFor an optimal user experience, render the onramp component conditional when a user gets an HTTP status `200` during session creation and provide a fallback UI that can deal with session creation errors.\n\n1.  Use the session client\\_secret in the frontend\n\nTo initialize the onramp component you’ll need:\n\n*   Your publishable API key from step 1\n*   The client\\_secret from your request to `POST /v1/crypto/onramp_sessions` in step 2 above\n\n`<!DOCTYPE html> <html lang=\"en\">   <head>     <meta charset=\"utf-8\" />     <title>Crypto Onramp</title>     <meta name=\"description\" content=\"A demo of hosted onramp\" />     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />      <script src=\"[https://js.stripe.com/v3/](https://js.stripe.com/v3/)\"></script>     <script type=\"text/javascript\" src=\"[https://crypto-js.stripe.com/crypto-onramp-outer.js](https://crypto-js.stripe.com/crypto-onramp-outer.js)\"></script>   </head>   <body>     <div id=\"onramp-element\" style=\"max-width: 500px\">      <script>       const stripeOnramp = StripeOnramp(`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n`);       initialize();       // initialize onramp element with client secret       function initialize() {         const clientSecret = \"cos_1LLgeLF5fgi2FFcAWx8RlsMT_secret_WNA1VOkwZ0bHMc9MtOuyJ4vto00EMsLP7Io\";         const onrampSession = stripeOnramp.createSession({clientSecret});         onrampSession           .mount(\"#onramp-element\");       }     </script>   </body> </html>`\n\nThe above code mounts an iframe on the `#onramp-element` node, which hosts all of the onramp. You can use an event listener to enhance the user experience—for example, resuming operation in a Dapp after crypto purchases (see the [frontend events section](https://docs.stripe.com/crypto/using-the-api#frontend-events) for all events which can be subscribed to).\n\n1.  CryptoOnramp element renders and takes over\n\nAfter the above `CryptoOnramp` html element renders, the frontend client drives the interface. As the state of the session changes and we collect more details around `transaction_details`, the `CryptoOnrampSession` object updates accordingly. Webhooks and frontend events are generated for every status transition that occurs. By using frontend event listeners, you can redirect users back to your application user flow after the onramp session completes.\n\n1.  (Optional) Change the appearance of the onramp\n\nTo enable darkmode, include an appearance struct in the session creation call from above.\n\n`const onrampSession = stripeOnramp.createSession({   clientSecret: clientSecret,   appearance: {     theme: 'dark'   }, });`\n\nIf you don’t specify the appearance, the onramp defaults to a light theme. You can also change the theme after the onramp renders by calling:\n\n`onrampSession.setAppearance({   theme: newTheme });`\n\nYou can use [branding settings](https://docs.stripe.com/payments/checkout/customization#branding) to upload your logo and brand colors which automatically apply to onramp sessions created with your platform API key.\n\n## How to pre-populate transaction parameters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo deliver a seamless onramp user flow, you can pre-populate some of the parameters of the onramp session. For example, a Dapp or wallet would already have a user’s `wallet_addresses`. You can achieve this during session creation as follows:\n\n`curl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"wallet_addresses[ethereum]\"=\"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\" \\   -d \"source_currency\"=\"usd\" \\   -d \"destination_currency\"=\"eth\" \\   -d \"destination_network\"=\"ethereum\" \\   -d \"destination_amount\"=\"0.1234\"`\n\nThe response:\n\n`{   \"id\": \"cos_0MYvnp589O8KAxCGwmWATYfA\",   \"object\": \"crypto.onramp_session\",   \"client_secret\": \"cos_0MYvnp589O8KAxCGwmWATYfA_secret_LhqXJi2lvbMCYhVHfrHGfUfX6009qtZPtV7\",   \"created\": 1675794121,   \"livemode\": false,   \"status\": \"initialized\",   \"transaction_details\": {     \"destination_currency\": \"eth\",     \"destination_amount\": \"0.123400000000000000\",     \"destination_network\": \"ethereum\",     \"fees\": null,     \"lock_wallet_address\": false,     \"source_currency\": \"usd\",     \"source_amount\": null,     \"destination_currencies\": [       \"btc\",       \"eth\",       \"sol\",       \"usdc\",       \"xlm\"     ],     \"destination_networks\": [       \"bitcoin\",       \"ethereum\",       \"solana\",       \"stellar\"     ],     \"transaction_id\": null,     \"wallet_address\": null,     \"wallet_addresses\": {       \"bitcoin\": null,       \"ethereum\": \"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\",       \"polygon\": null,       \"solana\": null,       \"stellar\": null,       \"destination_tags\": null     }   } }`\n\nWe allow the following parameters to be pre-populated:\n\n*   `wallet_addresses`: The suggested wallet address to deliver crypto to (the default selection on the wallet attach screen)\n*   `lock_wallet_address`: Whether or not to lock the suggested wallet address\n*   `source_currency`: The fiat currency for the transaction (`usd` and `eur` only for now)\n*   `source_amount`: The amount of fiat currency to use for the purchase of crypto (mutually exclusive with destination amount)\n*   `destination_network`: The default crypto network for this onramp (for example, `ethereum`)\n*   `destination_currency`: The default cryptocurrency for this onramp session (for example, `eth`)\n*   `destination_amount`: The amount of cryptocurrency to purchase (mutually exclusive with the source amount)\n*   `destination_currencies`: An array of cryptocurrencies you want to restrict to (for example, `[eth, usdc]`)\n*   `destination_networks`: An array of crypto networks you want to restrict to (for example, `[ethereum, polygon]`)\n\nRefer to the API reference for more details on the specific requirements and how they impact users in the onramp UI.\n\n## How to pre-populate customer information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo reduce user friction during the onramp flow and increase conversion, you might want to pre-populate some of the required KYC information for the user if you’ve already collected it within your application.\n\nThroughout the flow, users will be required to provide at least:\n\n*   Email\n*   First name\n*   Last name\n*   Date of birth\n*   SSN\n*   Home address (country, address line 1, address line 2, city, state, postal code)\n\nThe onramp API provides the ability to pre-populate all of those fields except for SSN. To pre-populate this information, you can provide it using the `customer_information` parameter in the OnrampSession creation API.\n\nExample request:\n\n`curl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer_information[email]\"=\"john@doe.com\" \\   -d \"customer_information[first_name]\"=\"John\" \\   -d \"customer_information[last_name]\"=\"Doe\" \\   -d \"customer_information[dob][year]\"=1990 \\   -d \"customer_information[dob][month]\"=7 \\   -d \"customer_information[dob][day]\"=4 \\   -d \"customer_information[address][country]\"=\"US\" \\   -d \"customer_information[address][line1]\"=\"354 Oyster Point Blvd\" \\   -d \"customer_information[address][line2]\"=\"Apt 1A\" \\   -d \"customer_information[address][city]\"=\"South San Francisco\" \\   -d \"customer_information[address][state]\"=\"CA\" \\   -d \"customer_information[address][postal_code]\"=\"94080\"`\n\nResponse:\n\n`{   \"id\": \"cos_1MbuUeAEFtmWU4EVBFZS0gce\",   \"object\": \"crypto.onramp_session\",   \"client_secret\": \"cos_1MbuUeAEFtmWU4EVBFZS0gce_secret_zPsPPytwNU6mMKh1Bmz7ymXGi00ILwwyGeG\",   \"created\": 1676504072,   \"livemode\": false,   \"status\": \"initialized\",   \"transaction_details\": {     \"destination_currency\": null,     \"destination_amount\": null,     \"destination_network\": null,     \"fees\": null,     \"lock_wallet_address\": false,     \"source_currency\": null,     \"source_amount\": null,     \"destination_currencies\": [       \"btc\",       \"eth\",       \"sol\",       \"usdc\",       \"xlm\"     ],     \"destination_networks\": [       \"bitcoin\",       \"ethereum\",       \"solana\",       \"polygon\",       \"stellar\"     ],     \"transaction_id\": null,     \"wallet_address\": null,     \"wallet_addresses\": null   } }`\n\nWe allow the following parameters to be pre-populated:\n\n*   `customer_information.email`—Freeform string for the user’s email\n*   `customer_information.first_name`—Freeform string for the user’s first name\n*   `customer_information.last_name`—Freeform string for the user’s last name\n*   `customer_information.dob.year`—Integer for the user’s birth year\n*   `customer_information.dob.month`—Integer for the user’s birth month\n*   `customer_information.dob.day`—Integer for the user’s birth day\n*   `customer_information.address.country`—String of the two letter country code for the user’s country of residence\n*   `customer_information.address.line1`—Freeform string for the user’s address line one\n*   `customer_information.address.line2`—Freeform string for the user’s address line two\n*   `customer_information.address.city`—Freeform string for the user’s city\n*   `customer_information.address.state`—String of the two letter state code for US states (the full state name also works), for example, “CA” or “California”\n*   `customer_information.address.postal_code`—Freeform string for the user’s postal code\n\nAll of the fields are optional and you can provide any subset of them for pre-population. However, if you provide date of birth, you must also provide all of `year`, `month`, and `day` (that is, not just one or two of the birth fields).\n\n## Dealing with user supportability and fraud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe enforces limitations on the onramp product for both user supportability and in the event of fraud attacks.\n\n### Checking if a user is supportable![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs noted in the [Feature Set](https://docs.stripe.com/crypto/overview#feature-set) section, the onramp is only available in the United States at this time.\n\nPass `customer_ip_address` during session creation so we can preemptively check the aforementioned limitation. The endpoint returns `HTTP 400` with `code=crypto_onramp_unsupportable_customer` if the customer is in a geography we can’t support (based on `customer_ip_address`)\n\nYou might want to hide the onramp option from users in this case. Otherwise, our onramp UI renders in a `disabled` state.\n\nHere’s a sample request and response (400) illustrating this behavior:\n\n`curl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer_ip_address\"=\"8.8.8.8\" \\`\n\n`{   \"error\": {     \"type\": \"invalid_request_error\",     \"code\": \"crypto_onramp_unsupportable_customer\",     \"message\": \"Based on the information provided about the customer, we’re currently unable to support them.\"   } }`\n\n### Dealing with fraud attacks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe serves as the business of record and takes on the liability for disputes and fraud. Stripe has deep expertise in risk management, but we might decide to temporarily restrict creation of onramp sessions if we detect a high risk situation (for example, if we see active attacks and exploits).\n\nIf we need to shut off the API because of an unbounded fraud attack, we’ll return the following when anyone attempts to create a new session: Request:\n\n`curl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\`\n\nResponse (400):\n\n`{   \"error\": {     \"type\": \"api_error\",     \"code\": \"crypto_onramp_disabled\",     \"message\": \"The v1/crypto/onramp_sessions endpoint has been disabled temporarily. Stripe will get in contact with you about details of the outage.\",     \"updated\": 1652025690   } }`\n\n## API reference![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### CryptoOnrampSession Resource![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `CryptoOnrampSession` resource looks as follows:\n\n``{   \"id\": \"cos_1Ke0052eZvKYlo2Clh7lJ50Q\",   \"object\": \"crypto.onramp_session\",   // One of the most important parts of the resource is going to be this   // client_secret. This will be passed from the server to the client to   // drive a single session using our embedded widget.   \"client_secret\": \"cos_1Ke0052eZvKYlo2Clh7lJ50Q_secret_f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8\",   \"created\": 1647449225,   \"livemode\": true,   // A hash representing monetary details of the transaction this session represents   \"transaction_details\": {     // The consumer's wallet address (where crypto will be sent to)     \"wallet_addresses\": null |       {         \"ethereum\": \"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\",         \"solana\": \"bufoH37MTiMTNAfBS4VEZ94dCEwMsmeSijD2vZRShuV\",         \"bitcoin\": \"1BuFoRu4W1usdnj1nPSfnNUgUm9BM6JtnV\",         \"stellar\": \"GBUCRQX2GXV2CCPNBVB6FMXORFRNXXQMZ5RN2GMH2KZNMH7O4WON5DDN\",         // Mapping of assets to the destination tag where the crypto will be sent to (for supported assets)         \"destination_tags\": null | {           \"xlm\": \"123456789\"         }       },     // A fiat currency code     \"source_currency\": null | \"usd\", \"eur\",     // The amount of fiat we intend to onramp - excluding fees     \"source_amount\": null | \"1.01\",     // The selected destination_currency to convert the `source` to.     // This should be a a crypto currency, currency code     // If destination_currencies is set, it must be a value in that array.     \"destination_currency\": null | \"usdc\",     // The specific crypto network the `destination_currency` is settled on.     // If destination_networks is set, it must be a value in that array.     \"destination_network\": null | \"ethereum\",     // If a platform wants to lock the currencies an session will support,     // they can add supported currencies to this array. If left null, the experience     // will allow selection of all supported destination currencies.     \"destination_currencies\": null | [\"eth\", \"usdc\", \"btc\" , \"xlm\"],     // If a platform wants to lock the supported networks, they can do so through     // this array. If left null, the experience will allow selection of all     // supported networks.     \"destination_networks\": null | [\"solana\", \"ethereum\", \"polygon\" , \"stellar\"],     // The amount of crypto the customer will get deposited into their wallet     \"destination_amount\": null | \"1.012345678901234567\",     // Details about the fees associated with this transaction     // Note: The currency associated with fee is always the same as     // source_currency     // Note: We won't know what fees to charge until after the customer has     // passed status=onboarding     \"fees\": null | {       // The cost associated with moving crypto from Stripe to the end       // consumers's wallet. e.g: for ETH, this is called \"gas fee\",       // for BTC this is a \"miner's fee\".       \"network_fee_amount\": \"1.23\",       // Stripe's cut of the transaction       \"transaction_fee_amount\": \"1.23\",     },     // The total amount of source currency the consumer needs to give us to     // complete the transaction. Equivalent to source_amount + fees.     \"source_total_amount\": null | \"3.47\",     // Pointer to the on network transaction id/hash     // This will only be set if the sessions hits the stauts=fulfillment_complete     // and we've transferred the crypto successfully to the external wallet.     // E.g: [https://etherscan.io/tx/0xc2573af6b3a18e6f7c0e1cccc187a483f61d72cbb421f7166970d3ab45731a95](https://etherscan.io/tx/0xc2573af6b3a18e6f7c0e1cccc187a483f61d72cbb421f7166970d3ab45731a95)     \"transaction_id\": null | \"0xc2573af6b3a18e6f7c0e1cccc187a483f61d72cbb421f7166970d3ab45731a95\"   },   // The status of the OnrampSession.   // One of = {initialized, rejected,   //           requires_payment, fulfillment_processing, fulfillment_complete}   \"status\": \"initialized\" }``\n\n### CryptoOnrampSession state machine![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `status` field represents a state machine for the session with the following states:\n\n![The state machine for the CryptoOnrampSession](https://b.stripecdn.com/docs-statics-srv/assets/state_machine.2bed0615bff44c25bfc58f16f7383391.png)\n\n*   `initialized`—The application has newly minted the onramp session on the server-side, but the customer hasn’t used it yet. Sessions are in this state until the user onboards and is ready to pay.\n*   `rejected`—We rejected the customer for some reason (KYC failure, sanctions screening issues, fraud checks).\n*   `requires_payment`—The user has completed onboarding or sign-in and gets to the payment page. If they attempt payment and fail, they stay in this status.\n*   `fulfillment_processing`—The customer successfully completed payment. We haven’t delivered the crypto they purchased yet.\n*   `fulfillment_complete`—The customer was successfully able to pay for crypto and we have confirmed delivery.\n\n### CryptoOnrampSession operations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll endpoints require authentication with your [API key](https://docs.stripe.com/keys). The authentication header is omitted in the example requests.\n\nApplications can perform the following operations on a `CryptoOnrampSession`:\n\n*   Create a session\n*   Get an existing session\n\n### Create Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEndpoint: `POST /v1/crypto/onramp_sessions`\n\n| Parameter name | Type (optional?) default: ? | Details |\n| --- | --- | --- |\n| wallet\\_addresses | String (optional) default: null | The end customer’s crypto wallet address (for each network) to use for this transaction.<br><br>*   When left null, the user enters their wallet in the onramp UI.<br>*   When set, the platform must set either `destination_networks` or `destination_network` and we perform address validation. Users can still select a different wallet in the onramp UI.<br><br>For assets that use destination tags or memos, you can nest a `destination_tags` map in `wallet_addresses` that maps assets to the specified destination tag for a user. |\n| source\\_currency | String (optional) default: null | The default source fiat currency for the onramp session.<br><br>*   When left null, a default currency is selected based on user locale.<br>*   When set, it must be one of the fiat currencies supported by onramp. Users can still select a different currency in the onramp UI. |\n| source\\_amount | String (optional) default: null | The default amount of fiat (in decimal) to exchange into crypto.<br><br>*   When left null, a default value is computed if `destination_amount` is set.<br>*   When set, setting `source_amount` is mutually exclusive with setting `destination_amount` (only one or the other is supported). We don’t support fractional pennies. If fractional minor units of a currency are passed in, it generates an error. Users can update the value in the onramp UI. |\n| destination\\_networks | Array<String> (optional) default: null | The list of destination crypto networks user can choose from.<br><br>*   When left null, all supported crypto networks are shown in the onramp UI.<br>*   When set, it must be a non-empty array where values in the array are each a valid crypto network. Allowed values are `{solana, ethereum, bitcoin, polygon}`. It can be used to lock users to a specific network by passing a single value array. Users **cannot** override this parameter. |\n| destination\\_currencies | Array<String> (optional) default: null | The list of destination cryptocurrencies a user can choose from.<br><br>*   When left null, all supported cryptocurrencies are shown in the onramp UI subject to `destination_networks` if set.<br>*   When set, it must be a non-empty array where all values in the array are valid cryptocurrencies. These are `{eth, matic, sol, usdc, btc}`. You can use it to lock users to a specific cryptocurrency by passing a single value array. Users **cannot** override this parameter. |\n| destination\\_network | String (optional) default: null | The default destination crypto network.<br><br>*   When left null, the first value of `destination_networks` is selected.<br>*   When set, if `destination_networks` is also set, the value of `destination_network` must be present in that array. To lock a `destination_network`, specify that value as the single value for `destination_networks`. Supported destination networks are `{solana, bitcoin, ethereum, polygon}`. Users can select a different network in the onramp UI subject to `destination_networks` if set. |\n| destination\\_currency | String (optional) default: null | The default destination cryptocurrency.<br><br>*   When left null, the first value of `destination_currencies` is selected.<br>*   When set, if `destination_currencies` is also set, the value of `destination_currency` must be present in that array. To lock a `destination_currency`, specify that value as the single value for `destination_currencies`. Supported destination currencies are `{eth, matic, sol, usdc, btc}`. Users can select a different cryptocurrency in the onramp UI subject to `destination_currencies` if set. |\n| destination\\_amount | String (optional) default: null | The default amount of crypto to exchange into.<br><br>*   When left null, a default value is computed if `source_amount`, `destination_currency`, and `destination_network` are set.<br>*   When set, both `destination_currency` and `destination_network` must also be set. All cryptocurrencies are supported to their full precisions (for example, 18 decimal places for `eth`). We validate and generate an error if the amount exceeds the supported precision based on the exchange currency. Setting `source_amount` is mutually exclusive with setting `destination_amount` (only one or the other is supported). Users can update the amount in the onramp UI. |\n| customer\\_ip\\_address | String (optional) default: null | The IP address of the customer the platform intends to onramp. If the user’s IP is in a region we can’t support, we return an `HTTP 400` with an appropriate error code. We support IPv4 and IPv6 addresses. Geographic supportability is checked again later in the onramp flow, which provides a way to hide the onramp option from ineligible users for a better user experience. |\n\nSample request and response:\n\n`curl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"wallet_addresses[ethereum]\"=\"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\" \\   -d \"source_currency\"=\"usd\" \\   -d \"destination_currency\"=\"eth\" \\   -d \"destination_network\"=\"ethereum\" \\   -d \"destination_currencies[]\"=\"eth\" \\   -d \"destination_networks[]\"=\"ethereum\"`\n\n`{   \"id\": \"cos_0MYvv9589O8KAxCGPm84FhVR\",   \"object\": \"crypto.onramp_session\",   \"client_secret\": \"cos_0MYvv9589O8KAxCGPm84FhVR_secret_IGBYKVlTlnJL8UGxji48pKxBO00deNcBuVc\",   \"created\": 1675794575,   \"livemode\": false,   \"status\": \"initialized\",   \"transaction_details\": {     \"destination_currency\": \"eth\",     \"destination_amount\": null,     \"destination_network\": \"ethereum\",     \"fees\": null,     \"lock_wallet_address\": false,     \"source_currency\": \"usd\",     \"source_amount\": null,     \"destination_currencies\": [       \"eth\"     ],     \"destination_networks\": [       \"ethereum\"     ],     \"transaction_id\": null,     \"wallet_address\": null,     \"wallet_addresses\": {       \"bitcoin\": null,       \"ethereum\": \"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\",       \"polygon\": null,       \"solana\": null,       \"stellar\": null,       \"destination_tags\": null     }   } }`\n\n#### Get session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEndpoint: `GET /v1/crypto/onramp_sessions/:id`\n\n| Parameter name | Type (optional?) default: ? | Details |\n| --- | --- | --- |\n| No supported parameters for this operation! |     |     |\n\nSample request and response:\n\n`curl -X GET https://api.stripe.com/v1/crypto/onramp_sessions/cos_0MYvv9589O8KAxCGPm84FhVR \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\n`{   \"id\": \"cos_0MYvv9589O8KAxCGPm84FhVR\",   \"object\": \"crypto.onramp_session\",   \"client_secret\": \"cos_0MYvv9589O8KAxCGPm84FhVR_secret_IGBYKVlTlnJL8UGxji48pKxBO00deNcBuVc\",   \"created\": 1675794575,   \"livemode\": false,   \"status\": \"initialized\",   \"transaction_details\": {     \"destination_currency\": \"eth\",     \"destination_amount\": null,     \"destination_network\": \"ethereum\",     \"fees\": null,     \"lock_wallet_address\": false,     \"source_currency\": \"usd\",     \"source_amount\": null,     \"destination_currencies\": [       \"eth\"     ],     \"destination_networks\": [       \"ethereum\"     ],     \"transaction_id\": null,     \"wallet_address\": null,     \"wallet_addresses\": {       \"bitcoin\": null,       \"ethereum\": \"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\",       \"polygon\": null,       \"solana\": null,       \"stellar\": null,       \"destination_tags\": null     }   } }`\n\n#### Validation and errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Condition | HTTP status | Error code |\n| --- | --- | --- |\n| We’re unable to mint new sessions because of an incident | 400 | `crypto_onramp_disabled` |\n| Based on the `customer_ip_address` parameter, we’re unable to support the given consumer. | 400 | `crypto_onramp_unsupported_country` or `crypto_onramp_unsupportable_customer` |\n| Malformed `customer_ip_address` is passed in to the `/v1/crypto/onramp_session` endpoint | 400 | `customer_ip_address` |\n| `source_amount` and `destination_amount` are mutually exclusive, but the platform set both. | 400 | `crypto_onramp_invalid_source_destination_pair` |\n| One of `destination_currency` and `destination_network` is set, but the other one isn’t | 400 | `crypto_onramp_incomplete_destination_currency_and_network_pair` |\n| The combination of `destination_currency` and `destination_network` isn’t valid | 400 | `crypto_onramp_invalid_destination_currency_and_network_pair` |\n| `source_amount` is set, but `source_currency` isn’t set | 400 | `crypto_onramp_missing_source_currency` |\n| `source_amount` isn’t a positive number | 400 | `crypto_onramp_invalid_source_amount` |\n| `destination_amount` is set, but `destination_currency` isn’t set | 400 | `crypto_onramp_missing_destination_currency` |\n| `destination_amount` isn’t a positive number | 400 | `crypto_onramp_invalid_destination_amount` |\n| The combination of `destination_currencies` and `destination_networks` doesn’t have any supported currencies | 400 | `crypto_onramp_invalid_destination_currencies_and_networks` |\n| `destination_currency` isn’t included in `destination_currencies` | 400 | `crypto_onramp_conflicting_destination_currency` |\n| `destination_network` isn’t included in `destination_networks` | 400 | `crypto_onramp_conflicting_destination_network` |\n| At least one wallet address in `wallet_addresses` is associated with a network that isn’t included in `destination_networks` | 400 | `crypto_onramp_wallet_addresses_not_all_networks_supported` |\n| No wallet addresses were provided in `wallet_addresses` but `lock_wallet_address` was set to true | 400 | `crypto_onramp_no_wallet_address_to_lock` |\n| The business hasn’t set the `business_name` or `business_url` fields. These are populated in the [Dashboard](https://dashboard.stripe.com/settings/public/) under `Public business name` and `Business website` | 400 | `crypto_onramp_merchant_not_properly_setup` |\n\n#### Get multiple sessions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEndpoint: `GET /v1/crypto/onramp_sessions`\n\nFetch multiple onramp sessions at the same time using the [list endpoint](https://docs.stripe.com/api/crypto/onramp_sessions/list).\n\n### Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe send a `crypto.onramp_session_updated` webhook every time the status of an onramp session changes post creation. We won’t send one when a new session is created. You can [configure webhooks](https://docs.stripe.com/webhooks) in the Dashboard.\n\nThe resource used by the webhook will be the `CryptoOnrampSession` resource above:\n\n`{   \"id\": \"evt_123\",   \"object\": \"event\",   \"data\": {     \"object\": {       \"id\": \"cos_0MYvv9589O8KAxCGPm84FhVR\",       \"object\": \"crypto.onramp_session\",       \"client_secret\": \"cos_0MYvv9589O8KAxCGPm84FhVR_secret_IGBYKVlTlnJL8UGxji48pKxBO00deNcBuVc\",       \"created\": 1675794575,       \"livemode\": false,       \"status\": \"initialized\",       \"transaction_details\": {         \"destination_currency\": \"eth\",         \"destination_amount\": null,         \"destination_network\": \"ethereum\",         \"fees\": null,         \"lock_wallet_address\": false,         \"source_currency\": \"usd\",         \"source_amount\": null,         \"destination_currencies\": [           \"eth\"         ],         \"destination_networks\": [           \"ethereum\"         ],         \"transaction_id\": null,         \"wallet_address\": null,         \"wallet_addresses\": {           \"bitcoin\": null,           \"ethereum\": \"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\",           \"polygon\": null,           \"solana\": null,           \"stellar\": null,           \"destination_tags\": null         }       }     }   } }`\n\n### Frontend events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHere is the list of frontend events that you can subscribe to:\n\n`// when the onramp UI is rendered {   type: 'onramp_ui_loaded',   payload: {session: OnrampSession}, } // when the onramp session object is updated {   type: 'onramp_session_updated',   payload: {session: OnrampSession}, }  // for modal overlay render mode only {   type: 'onramp_ui_modal_opened',   payload: {session: OnrampSession}, } {   type: 'onramp_ui_modal_closed',   payload: {session: OnrampSession}, }`\n\nAs shown above, events can be subscribed to and unsubscribed to using the standard `addEventListener/removeEventListener` functions over OnrampSession. You can use `'*'` to match all events.\n\n### Session persistence![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use session persistence to help you provide notifications and keep users engaged with the onramp after fulfilling their purchase.\n\n#### Advantages of session persistence![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou might want to persist an onramp session across user visits in some instances. For example, when a user’s onramp session is disrupted or dropped, you could prompt them and provide ways to resume the onramp session later. Or if a user refreshes the page after completing the payment, you can retain the ability to notify them when a previous onramp purchase was fulfilled. For this reason, the OnrampSession object is stateful and stored as a server side resource. By initializing the onramp UI using a previously used OnrampSession client secret, users return to where they left off.\n\n#### Session persistence configuration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA client secret is a unique identifier for the onramp session that stores the lifecycle of a session without leaking sensitive payment information. However, it exposes private information such as wallet addresses. Don’t log it, embed it in URLs, or expose it to anyone other than the customer. Make sure that you have TLS on any page that includes the client secret. If you have a Web2-like account structure, you could link OnrampSession to your user object and fetch it upon authentication. For an account-less Web3 application, it would add user friction to require the use of message signing for authentication. Privacy-preserving local storage yields an acceptable user experience.",
    "title": "Using the API | Stripe Documentation",
    "description": "Learn how to use the onramp API.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/crypto/mobile-integration",
    "markdown": "# Mobile integration | Stripe DocumentationThe Stripe Docs logo\n\n## Mobile integrationBeta\n\n## Learn how to integrate the onramp for mobile use.\n\nThe onramp UI supports mobile web views and mobile browsers. We don’t support mobile SDKs.\n\n### Mint a session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSimilar to other integrations, you need to implement a server endpoint to [create a new onramp session](https://docs.stripe.com/crypto/using-the-api) for every user visit. The endpoint returns a client\\_secret that can load the onramp UI or display an error when the onramp is unavailable.\n\n### Hosted Onramp UI![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate a frontend route (for example, www.my-web3-wallet.com/onramp/<client\\_secret>) to host the onramp UI. Your /onramp/<client\\_secret> points to an onramp.html.\n\n`<!DOCTYPE html> <html lang=\"en\">   <head>     <meta charset=\"utf-8\" />     <title>Crypto Onramp</title>     <meta name=\"description\" content=\"A demo of hosted onramp\" />     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />     <script type=\"text/javascript\" src=\"[https://crypto-js.stripe.com/crypto-onramp-outer.js](https://crypto-js.stripe.com/crypto-onramp-outer.js)\"></script>     <script src=\"onramp.js\" defer></script>   </head>   <body>     <div id=\"onramp-element\" />   </body> </html>`\n\nWhere onramp.js consumes the client\\_secret from the URL and mounts the onramp UI:\n\n`const stripeOnramp = StripeOnramp(`\n\n`pk_test_TYooMQauvdEDq54NiTphI7jx`\n\n`); initialize(); // initialize onramp element with client secret function initialize() {   const url = window.location.href.replace(/\\/$/, '');   const clientSecret = url.substring(url.lastIndexOf('/') + 1);   const onrampSession = stripeOnramp.createSession({     clientSecret,     // other client side options that customize the look and feel   });   onrampSession     .addEventListener('onramp_session_updated', handleSessionUpdate)     .mount(\"#onramp-element\"); } function handleSessionUpdate(event) {   const session = event.payload.session;   if (session.status === 'fulfillment_complete' || session.status === 'rejected') {     // redirect back to mobile app via universal link     window.location.assign('/onramp_success/' + session.id);   } }`\n\nYou need to configure universal links to deep link /onramp\\_success back to your mobile app and consider providing a fallback or onramp\\_success page to ask users to manually switch back to your app.\n\n### Complete the purchase![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSimilar to a regular integration, the frontend client drives the entirety of the onramp UI. The UI is responsive to fit the screen size—as the state of the session changes and we collect more details around transaction\\_details, the CryptoOnrampSession object updates accordingly. Webhooks and frontend events are generated for every status transition that occurs. As shown above, by using frontend event listeners, you can redirect users back to your application user flow when the OnrampSession is complete.\n\n### Redirect to the mobile app![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing a deep link or manual switch, users can resume their flow in your mobile application. Your mobile application can use your backend to continue querying the state of CryptoOnrampSession. For example, if the user is topping up their user balance during initial setup, you could redirect users back to your application as soon as the session transitions into fulfillment\\_processing. You could allow users to explore the rest of your application while polling the status of the OnrampSession in the background.",
    "title": "Mobile integration | Stripe Documentation",
    "description": "Learn how to integrate the onramp for mobile use.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/identity/verify-identity-documents?platform=web&type=redirect",
    "markdown": "# Verify your users’ identity documents\n\nThis guide explains how to use Stripe Identity to securely collect and verify identity documents.\n\nSend your users to Stripe to upload their identity documents. Here’s what you’ll do:\n\n1.  Add a verification button to your webpage that redirects to Stripe Identity.\n2.  Display a confirmation page on identity document submission.\n3.  Handle verification results.\n\n[](#set-up-stripe)\n\nFirst, [register](https://dashboard.stripe.com/register) for a Stripe account.\n\nThen install the libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#add-a-button)\n\nCreate a button on your website for starting the verification.\n\n### Add a button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStart by adding a verify button to your page:\n\n`<html>   <head>     <title>Verify your identity</title>   </head>   <body>     <button id=\"verify-button\">Verify</button>   </body> </html>`\n\n[](#redirect-to-identity)\n\nSet up the button to redirect to Stripe Identity. After clicking the button, your frontend redirects to a Stripe-hosted page where they can capture and upload a picture of their passport, driver’s license, or national ID.\n\nThe redirect to Stripe Identity cuts down on development time and maintenance and gives you added security. It also decreases the amount of private information you handle on your site, allows you to support users in a variety of platforms and languages, and allows you to customize the style to match your branding.\n\n### Create a VerificationSession![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) is the programmatic representation of the verification. It contains details about the type of verification, such as what [check](https://docs.stripe.com/identity/verification-checks) to perform. You can [expand](https://docs.stripe.com/api/expanding_objects) the [verified outputs](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-verified_outputs) field to see details of the data that was verified.\n\nAfter successfully creating a `VerificationSession`, send the [session URL](https://docs.stripe.com/api/identity/verification_sessions/object#identity_verification_session_object-url) to the frontend to redirect to Stripe Identity.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/modal_integration_diagram.4c9ef035ee7fcb8b8f58a99fcad27202.svg)\n\nYou need a server-side endpoint to [create the VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/create). Creating the `VerificationSession` server-side prevents malicious users from overriding verification options and incurring processing charges on your account. Add authentication to this endpoint by including a user reference in the session metadata or storing the session ID in your database.\n\n`// Set your secret key. Remember to switch to your live secret key in production. // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  // In the route handler for /create-verification-session: // Authenticate your user.  // Create the session. const verificationSession = await stripe.identity.verificationSessions.create({   type: 'document',   metadata: {     user_id: '{{USER_ID}}',   }, });  // Return only the session URL to the frontend. const url = verificationSession.url;`\n\n#### Caution\n\nThe session URL is single-use and expires after 48 hours. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Send only the session URL to your frontend to avoid exposing verification configuration or results.\n\nTest your endpoint by starting your web server (for example, `localhost:4242`) and sending a POST request with curl to create a VerificationSession:\n\n`curl -X POST -is \"http://localhost:4242/create-verification-session\" -d \"\"`\n\nThe response in your terminal looks like this:\n\n### Add an event handler to the verify button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNow that you have a button and an endpoint to create a VerificationSession, modify the button to redirect to the session URL when clicked:\n\n`<html>   <head>     <title>Verify your identity</title>     <script src=\"[https://js.stripe.com/v3/](https://js.stripe.com/v3/)\"></script>   </head>   <body>     <button id=\"verify-button\">Verify</button>      <script type=\"text/javascript\">       var verifyButton = document.getElementById('verify-button');        verifyButton.addEventListener('click', function() {         // Get the VerificationSession client secret using the server-side         // endpoint you created in step 3.         fetch('/create-verification-session', {           method: 'POST',         })         .then(function(response) {           return response.json();         })         .then(function(session) {           // When the user clicks on the button, redirect to the session URL.           window.location.href = session.url;         })         .catch(function(error) {           console.error('Error:', error);         });       });     </script>   </body> </html>`\n\n### Test the redirect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTest that the verify button redirects to Stripe Identity:\n\n*   Click the verify button.\n*   Ensure your browser redirects to Stripe Identity.\n\nIf your integration isn’t working:\n\n1.  Open the Network tab in your browser’s developer tools.\n2.  Click the verify button to see if it makes an XHR request to your server-side endpoint (`POST /create-verification-session`).\n3.  Verify that the request returns a 200 status.\n4.  Use `console.log(session)` inside your button click listener to confirm that it returns the correct data.\n\n[\n\n## Handle verification events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-verification-events)\n\n[Document checks](https://docs.stripe.com/identity/verification-checks#document-availability) are typically completed as soon as the user redirects back to your site and you can retrieve the result from the API immediately. In some rare cases, the document verification isn’t ready yet and must continue asynchronously. In these cases, you’re notified through webhooks when the verification result is ready. After the processing completes, the VerificationSession [status changes](https://docs.stripe.com/identity/how-sessions-work) from `processing` to `verified`.\n\nStripe sends the following events when the session status changes:\n\nUse a [webhook handler](https://docs.stripe.com/identity/handle-verification-outcomes) to receive these events and automate actions like sending a confirmation email, updating the verification results in your database, or completing an onboarding step. You can also view [verification events in the Dashboard](https://dashboard.stripe.com/events?type=identity.%2A).\n\n## Receive events and run business actions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### With code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild a webhook handler to listen for events and build custom asynchronous verification flows. Test and debug your webhook integration locally with the Stripe CLI.\n\n[Build a custom webhook](https://docs.stripe.com/identity/handle-verification-outcomes)\n\n### Without code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Dashboard to view all your verifications, inspect collected data, and understand verification failures.\n\n[View your test verifications in the Dashboard](https://dashboard.stripe.com/test/identity/verification-sessions)\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Handle verification outcomes](https://docs.stripe.com/identity/handle-verification-outcomes)\n*   [Learn about VerificationSessions](https://docs.stripe.com/identity/verification-sessions)\n*   [Learn about Stripe.js](https://docs.stripe.com/payments/elements)",
    "title": "Verify your users’ identity documents | Stripe Documentation",
    "description": "Create sessions and collect identity documents.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/climate/order/object",
    "markdown": "# The Climate order object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Total amount of [Frontier](https://frontierclimate.com/)’s service fees in the currency’s smallest unit.\n    \n*   Total amount of the carbon removal in the currency’s smallest unit.\n    \n*   Total amount of the order including fees in the currency’s smallest unit.\n    \n*   #### \n    \n    beneficiarynullable object\n    \n    Publicly sharable reference for the end beneficiary of carbon removal. Assumed to be the Stripe account if not set.\n    \n*   #### \n    \n    canceled\\_atnullable timestamp\n    \n    Time at which the order was canceled. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    cancellation\\_reasonnullable enum\n    \n    Reason for the cancellation of this order.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `expired`<br><br>Order was not confirmed and expired automatically |\n    | `product_unavailable`<br><br>Order could not be fulfilled because the product is no longer available |\n    | `requested`<br><br>Order was canceled by a cancellation request |\n    \n*   #### \n    \n    certificatenullable string\n    \n    For delivered orders, a URL to a delivery certificate for the order.\n    \n*   #### \n    \n    confirmed\\_atnullable timestamp\n    \n    Time at which the order was confirmed. Measured in seconds since the Unix epoch.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase, representing the currency for this order.\n    \n*   #### \n    \n    delayed\\_atnullable timestamp\n    \n    Time at which the order’s expected\\_delivery\\_year was delayed. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    delivered\\_atnullable timestamp\n    \n    Time at which the order was delivered. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    delivery\\_detailsarray of objects\n    \n    Details about the delivery of carbon removal for this order.\n    \n*   #### \n    \n    expected\\_delivery\\_yearinteger\n    \n    The year this order is expected to be delivered.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    metric\\_tonsdecimal string\n    \n    Quantity of carbon removal that is included in this order.\n    \n*   Unique ID for the Climate `Product` this order is purchasing.\n    \n*   #### \n    \n    product\\_substituted\\_atnullable timestamp\n    \n    Time at which the order’s product was substituted for a different product. Measured in seconds since the Unix epoch.\n    \n*   The current status of this order.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `awaiting_funds`<br><br>Status when an order has been attached to a funding\\_source and is awaiting it’s settlement |\n    | `canceled`<br><br>Status when a reservation has been canceled |\n    | `confirmed`<br><br>Status when a reservation has been successfully confirmed and payment has been made |\n    | `delivered`<br><br>Status when a reservation has been delivered |\n    \n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"confirmed\"}\n```\n\n## [Create an order](https://docs.stripe.com/api/climate/order/create)\n\nCreates a Climate order object for a given Climate product. The order will be processed immediately after creation and payment will be deducted your Stripe balance.\n\n### Parameters\n\n*   Unique identifier of the Climate product.\n    \n*   Requested amount of carbon removal units. Either this or `metric_tons` must be specified.\n    \n*   Publicly sharable reference for the end beneficiary of carbon removal. Assumed to be the Stripe account if not set.\n    \n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Requested number of tons for the order. Either this or `amount` must be specified.\n    \n\n### Returns\n\nThe new Climate order object.\n\n```\ncurl https://api.stripe.com/v1/climate/orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d metric_tons=\"0.01\" \\  -d product=climsku_frontier_offtake_portfolio_2027\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"confirmed\"}\n```\n\n## [Update an order](https://docs.stripe.com/api/climate/order/update)\n\nUpdates the specified order by setting the values of the parameters passed.\n\n### Parameters\n\n*   Unique identifier of the order.\n    \n*   Publicly sharable reference for the end beneficiary of carbon removal. Assumed to be the Stripe account if not set.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe updated Climate order object.\n\nPOST /v1/climate/orders/:id\n\n```\ncurl https://api.stripe.com/v1/climate/orders/climorder_1aTnU0B63jkB3XAQKUbA5yyl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"confirmed\"}\n```\n\n## [Retrieve an order](https://docs.stripe.com/api/climate/order/retrieve)\n\nRetrieves the details of a Climate order object with the given ID.\n\n### Parameters\n\n*   Unique identifier of the order.\n    \n\n### Returns\n\nReturns a Climate order object if a valid identifier was provided. Throws an error otherwise.\n\nGET /v1/climate/orders/:id\n\n```\ncurl https://api.stripe.com/v1/climate/orders/climorder_1aTnU0B63jkB3XAQKUbA5yyl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",  \"object\": \"climate.order\",  \"amount_fees\": 17,  \"amount_subtotal\": 550,  \"amount_total\": 567,  \"beneficiary\": {    \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"certificate\": null,  \"confirmed_at\": 1881439205,  \"created\": 1881439205,  \"currency\": \"usd\",  \"delayed_at\": null,  \"delivered_at\": null,  \"delivery_details\": [],  \"expected_delivery_year\": 2027,  \"livemode\": false,  \"metadata\": {},  \"metric_tons\": \"0.01\",  \"product\": \"climsku_frontier_offtake_portfolio_2027\",  \"product_substituted_at\": null,  \"status\": \"confirmed\"}\n```\n\n## [List orders](https://docs.stripe.com/api/climate/order/list)\n\nLists all Climate order objects. The orders are returned sorted by creation date, with the most recently created orders appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` orders, starting after order `starting_after`. Each entry in the array is a separate order object. If no more orders are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/climate/orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/climate/orders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"climorder_1aTnU0B63jkB3XAQKUbA5yyl\",      \"object\": \"climate.order\",      \"amount_fees\": 17,      \"amount_subtotal\": 550,      \"amount_total\": 567,      \"beneficiary\": {        \"public_name\": \"{{YOUR_BUSINESS_NAME}}\"      },      \"canceled_at\": null,      \"cancellation_reason\": null,      \"certificate\": null,      \"confirmed_at\": 1881439205,      \"created\": 1881439205,      \"currency\": \"usd\",      \"delayed_at\": null,      \"delivered_at\": null,      \"delivery_details\": [],      \"expected_delivery_year\": 2027,      \"livemode\": false,      \"metadata\": {},      \"metric_tons\": \"0.01\",      \"product\": \"climsku_frontier_offtake_portfolio_2027\",      \"product_substituted_at\": null,      \"status\": \"confirmed\"    }    {...}    {...}  ],}\n```",
    "title": "The Climate order object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/climate/product/object",
    "markdown": "# The Climate product object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object. For convenience, Climate product IDs are human-readable strings that start with `climsku_`. See [carbon removal inventory](https://stripe.com/docs/climate/orders/carbon-removal-inventory) for a list of available carbon removal products.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    current\\_prices\\_per\\_metric\\_tonobject\n    \n    Current prices for a metric ton of carbon removal in a currency’s smallest unit.\n    \n*   #### \n    \n    delivery\\_yearnullable integer\n    \n    The year in which the carbon removal is expected to be delivered.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    metric\\_tons\\_availabledecimal string\n    \n    The quantity of metric tons available for reservation.\n    \n*   The Climate product’s name.\n    \n*   #### \n    \n    suppliersarray of objects\n    \n    The carbon removal suppliers that fulfill orders for this Climate product.\n    \n\nThe Climate product object\n\n```\n{  \"id\": \"climsku_frontier_offtake_portfolio_2027\",  \"object\": \"climate.product\",  \"created\": 1881439203,  \"current_prices_per_metric_ton\": {    \"usd\": {      \"amount_fees\": 1650,      \"amount_subtotal\": 55000,      \"amount_total\": 56650    }  },  \"delivery_year\": 2027,  \"livemode\": false,  \"metric_tons_available\": \"18000\",  \"name\": \"Frontier's 2027 offtake portfolio\",  \"suppliers\": [    {      \"id\": \"climsup_charm_industrial\",      \"object\": \"climate.supplier\",      \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",      \"livemode\": false,      \"locations\": [        {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"latitude\": 37.7749,          \"longitude\": -122.4194,          \"region\": \"CA\"        }      ],      \"name\": \"Charm Industrial\",      \"removal_pathway\": \"biomass_carbon_removal_and_storage\"    }  ]}\n```\n\n## [Retrieve a product](https://docs.stripe.com/api/climate/product/retrieve)\n\nRetrieves the details of a Climate product with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Climate product object if a valid identifier was provided. Throws an error otherwise.\n\nGET /v1/climate/products/:id\n\n```\ncurl https://api.stripe.com/v1/climate/products/climsku_frontier_offtake_portfolio_2027 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climsku_frontier_offtake_portfolio_2027\",  \"object\": \"climate.product\",  \"created\": 1881439203,  \"current_prices_per_metric_ton\": {    \"usd\": {      \"amount_fees\": 1650,      \"amount_subtotal\": 55000,      \"amount_total\": 56650    }  },  \"delivery_year\": 2027,  \"livemode\": false,  \"metric_tons_available\": \"18000\",  \"name\": \"Frontier's 2027 offtake portfolio\",  \"suppliers\": [    {      \"id\": \"climsup_charm_industrial\",      \"object\": \"climate.supplier\",      \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",      \"livemode\": false,      \"locations\": [        {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"latitude\": 37.7749,          \"longitude\": -122.4194,          \"region\": \"CA\"        }      ],      \"name\": \"Charm Industrial\",      \"removal_pathway\": \"biomass_carbon_removal_and_storage\"    }  ]}\n```\n\n## [List products](https://docs.stripe.com/api/climate/product/list)\n\nLists all available Climate product objects.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products, starting after product `starting_after`. Each entry in the array is a separate product object. If no more products are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/climate/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/climate/products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"climsku_frontier_offtake_portfolio_2027\",      \"object\": \"climate.product\",      \"created\": 1881439203,      \"current_prices_per_metric_ton\": {        \"usd\": {          \"amount_fees\": 1650,          \"amount_subtotal\": 55000,          \"amount_total\": 56650        }      },      \"delivery_year\": 2027,      \"livemode\": false,      \"metric_tons_available\": \"18000\",      \"name\": \"Frontier's 2027 offtake portfolio\",      \"suppliers\": [        {          \"id\": \"climsup_charm_industrial\",          \"object\": \"climate.supplier\",          \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",          \"livemode\": false,          \"locations\": [            {              \"city\": \"San Francisco\",              \"country\": \"US\",              \"latitude\": 37.7749,              \"longitude\": -122.4194,              \"region\": \"CA\"            }          ],          \"name\": \"Charm Industrial\",          \"removal_pathway\": \"biomass_carbon_removal_and_storage\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Climate product object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/climate/supplier/object",
    "markdown": "# The Climate supplier object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fclimate%2Fsupplier%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Link to a webpage to learn more about the supplier.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    locationsarray of objects\n    \n    The locations in which this supplier operates.\n    \n*   Name of this carbon removal supplier.\n    \n*   The scientific pathway used for carbon removal.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `biomass_carbon_removal_and_storage`<br><br>Biomass carbon removal and storage |\n    | `direct_air_capture`<br><br>Direct air capture |\n    | `enhanced_weathering`<br><br>Enhanced weathering |\n    \n\nThe Climate supplier object\n\n```\n{  \"id\": \"climsup_charm_industrial\",  \"object\": \"climate.supplier\",  \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",  \"livemode\": false,  \"locations\": [    {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"latitude\": 37.7749,      \"longitude\": -122.4194,      \"region\": \"CA\"    }  ],  \"name\": \"Charm Industrial\",  \"removal_pathway\": \"biomass_carbon_removal_and_storage\"}\n```\n\n## [Retrieve a supplier](https://docs.stripe.com/api/climate/supplier/retrieve)\n\nRetrieves a Climate supplier object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Climate supplier object.\n\nGET /v1/climate/suppliers/:id\n\n```\ncurl https://api.stripe.com/v1/climate/suppliers/climsup_charm_industrial \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"climsup_charm_industrial\",  \"object\": \"climate.supplier\",  \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",  \"livemode\": false,  \"locations\": [    {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"latitude\": 37.7749,      \"longitude\": -122.4194,      \"region\": \"CA\"    }  ],  \"name\": \"Charm Industrial\",  \"removal_pathway\": \"biomass_carbon_removal_and_storage\"}\n```\n\n## [List suppliers](https://docs.stripe.com/api/climate/supplier/list)\n\nLists all available Climate supplier objects.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` suppliers, starting after supplier `starting_after`. Each entry in the array is a separate supplier object. If no more suppliers are available, the resulting array is empty.\n\nGET /v1/climate/suppliers\n\n```\ncurl -G https://api.stripe.com/v1/climate/suppliers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/climate/suppliers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"climsup_charm_industrial\",      \"object\": \"climate.supplier\",      \"info_url\": \"https://frontierclimate.com/portfolio/charm-industrial\",      \"livemode\": false,      \"locations\": [        {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"latitude\": 37.7749,          \"longitude\": -122.4194,          \"region\": \"CA\"        }      ],      \"name\": \"Charm Industrial\",      \"removal_pathway\": \"biomass_carbon_removal_and_storage\"    }    {...}    {...}  ],}\n```\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Climate supplier object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/identity/verification_sessions/cancel",
    "markdown": "# Cancel a VerificationSession | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fidentity%2Fverification_sessions%2Fcancel)\n\nA VerificationSession object can be canceled when it is in `requires_input` [status](https://docs.stripe.com/identity/how-sessions-work).\n\nOnce canceled, future submission attempts are disabled. This cannot be undone. [Learn more](https://docs.stripe.com/identity/verification-sessions#cancel).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the canceled VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN3kLkdIwHu7ixk5OvTq3b/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuN3kLkdIwHu7ixk5OvTq3b\",  \"object\": \"identity.verification_session\",  \"client_secret\": null,  \"created\": 1695680120,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": null,  \"status\": \"canceled\",  \"type\": \"document\",  \"url\": null}\n```\n\n## [Redact a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/redact)\n\nRedact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.\n\nA VerificationSession object can be redacted when it is in `requires_input` or `verified` [status](https://docs.stripe.com/identity/how-sessions-work). Redacting a VerificationSession in `requires_action` state will automatically cancel it.\n\nThe redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s `redaction.status` field will be set to `processing`; when the process is finished, it will change to `redacted` and an `identity.verification_session.redacted` event will be emitted.\n\nRedaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string `[redacted]` or a similar placeholder. The `metadata` field will also be erased. Redacted objects cannot be updated or used for any purpose.\n\n[Learn more](https://docs.stripe.com/identity/verification-sessions#redact).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the redacted VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id/redact\n\n```\ncurl -X POST https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN3kLkdIwHu7ixk5OvTq3b/redact \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuN3kLkdIwHu7ixk5OvTq3b\",  \"object\": \"identity.verification_session\",  \"client_secret\": null,  \"created\": 1695680120,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": {    \"status\": \"processing\"  },  \"status\": \"canceled\",  \"type\": \"document\",  \"url\": null}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Cancel a VerificationSession | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/crypto/onramp_sessions",
    "markdown": "# Crypto Onramp Session | Stripe API Reference\n\n## [The Crypto Onramp Session object](https://docs.stripe.com/api/crypto/onramp_sessions/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n\n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    kyc\\_details\\_providedboolean\n    \n    Has the value `true` if any user kyc details were provided during the creation of the onramp session. Otherwise, has the value `false`.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    redirect\\_urlnullable string\n    \n*   The status of the Onramp Session. One of = `{initialized, rejected, requires_payment, fulfillment_processing, fulfillment_complete}`\n    \n*   #### \n    \n    transaction\\_detailsobject\n    \n    A hash representing monetary details of the transaction this session represents.\n    \n\nThe Crypto Onramp Session object\n\n```\n{  \"id\": \"cos_1NamBL2eZvKYlo2CP38sZVEW\",  \"object\": \"crypto.onramp_session\",  \"client_secret\": \"cos_1NamBL2eZvKYlo2CP38sZVEW_secret_B5faamUkzHbcpjy6NndGq1mMZGGCo8FhK2P\",  \"created\": 1691010131,  \"kyc_details_provided\": false,  \"livemode\": true,  \"metadata\": {},  \"redirect_url\": null,  \"status\": \"initialized\",  \"transaction_details\": {    \"destination_amount\": null,    \"destination_currencies\": [      \"btc\",      \"eth\",      \"matic\",      \"sol\",      \"xlm\",      \"avax\",      \"usdc\"    ],    \"destination_currency\": null,    \"destination_network\": null,    \"destination_networks\": [      \"bitcoin\",      \"ethereum\",      \"base\",      \"polygon\",      \"solana\",      \"stellar\",      \"avalanche\"    ],    \"fees\": null,    \"lock_wallet_address\": false,    \"source_amount\": null,    \"source_currency\": null,    \"transaction_id\": null,    \"wallet_address\": null,    \"wallet_addresses\": null  }}\n```\n\n## [Create a CryptoOnrampSession](https://docs.stripe.com/api/crypto/onramp_sessions/create)\n\nCreates a CryptoOnrampSession object.\n\nAfter the CryptoOnrampSession is created, display the onramp session modal using the `client_secret`.\n\nRelated guide: [Set up an onramp integration](https://docs.stripe.com/crypto/integrate-the-onramp)\n\n### Parameters\n\n*   #### \n    \n    customer\\_ip\\_addressstring\n    \n    The IP address of the customer the platform intends to onramp.\n    \n    If the user’s IP is in a region we can’t support, we return an `HTTP 400` with an appropriate error code.\n    \n    We support IPv4 and IPv6 addresses. Geographic supportability is checked again later in the onramp flow, which provides a way to hide the onramp option from ineligible users for a better user experience.\n    \n*   The default amount of crypto to exchange into.\n    \n    *   When left null, a default value is computed if `source_amount`, `destination_currency`, and `destination_network` are set.\n    *   When set, both `destination_currency` and `destination_network` must also be set. All cryptocurrencies are supported to their full precisions (for example, 18 decimal places for `eth`). We validate and generate an error if the amount exceeds the supported precision based on the exchange currency. Setting `source_amount` is mutually exclusive with setting `destination_amount` (only one or the other is supported). Users can update the amount in the onramp UI.\n    \n*   #### \n    \n    destination\\_currenciesarray of enums\n    \n    The list of destination cryptocurrencies a user can choose from.\n    \n    *   When left null, all supported cryptocurrencies are shown in the onramp UI subject to `destination_networks` if set.\n    *   When set, it must be a non-empty array where all values in the array are valid cryptocurrencies. You can use it to lock users to a specific cryptocurrency by passing a single value array. Users **cannot** override this parameter.\n    \n*   The default destination cryptocurrency.\n    \n    *   When left null, the first value of `destination_currencies` is selected.\n    *   When set, if `destination_currencies` is also set, the value of `destination_currency` must be present in that array. To lock a `destination_currency`, specify that value as the single value for `destination_currencies`. Users can select a different cryptocurrency in the onramp UI subject to `destination_currencies` if set.\n    \n*   The default destination crypto network.\n    \n    *   When left null, the first value of `destination_networks` is selected.\n    *   When set, if `destination_networks` is also set, the value of `destination_network` must be present in that array. To lock a `destination_network`, specify that value as the single value for `destination_networks`. Users can select a different network in the onramp UI subject to `destination_networks` if set.\n    \n*   #### \n    \n    destination\\_networksarray of enums\n    \n    The list of destination crypto networks user can choose from.\n    \n    *   When left null, all supported crypto networks are shown in the onramp UI.\n    *   When set, it must be a non-empty array where values in the array are each a valid crypto network. It can be used to lock users to a specific network by passing a single value array. Users **cannot** override this parameter.\n    \n*   Pre-populate some of the required KYC information for the user if you’ve already collected it within your application.\n    \n    Related guide: [Using the API](https://docs.stripe.com/crypto/using-the-api#how-to-pre-populate-customer-information)\n    \n*   #### \n    \n    lock\\_wallet\\_addressboolean\n    \n    Whether or not to lock the suggested wallet address. If destination tags are provided, this will also lock the destination tags.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The default amount of fiat (in decimal) to exchange into crypto.\n    \n    *   When left null, a default value is computed if `destination_amount` is set.\n    *   When set, setting `source_amount` is mutually exclusive with setting `destination_amount` (only one or the other is supported). We don’t support fractional pennies. If fractional minor units of a currency are passed in, it generates an error. Users can update the value in the onramp UI.\n    \n*   The default source fiat currency for the onramp session.\n    \n    *   When left null, a default currency is selected based on user locale.\n    *   When set, it must be one of the fiat currencies supported by onramp. Users can still select a different currency in the onramp UI.\n    \n*   The end customer’s crypto wallet address (for each network) to use for this transaction.\n    \n    *   When left null, the user enters their wallet in the onramp UI.\n    *   When set, the platform must set either `destination_networks` or `destination_network` and we perform address validation. Users can still select a different wallet in the onramp UI.\n    \n\n### Returns\n\nReturns the created CryptoOnrampSession object\n\nPOST /v1/crypto/onramp\\_sessions\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cos_1NamBL2eZvKYlo2CP38sZVEW\",  \"object\": \"crypto.onramp_session\",  \"client_secret\": \"cos_1NamBL2eZvKYlo2CP38sZVEW_secret_B5faamUkzHbcpjy6NndGq1mMZGGCo8FhK2P\",  \"created\": 1691010131,  \"kyc_details_provided\": false,  \"livemode\": true,  \"metadata\": {},  \"redirect_url\": null,  \"status\": \"initialized\",  \"transaction_details\": {    \"destination_amount\": null,    \"destination_currencies\": [      \"btc\",      \"eth\",      \"matic\",      \"sol\",      \"xlm\",      \"avax\",      \"usdc\"    ],    \"destination_currency\": null,    \"destination_network\": null,    \"destination_networks\": [      \"bitcoin\",      \"ethereum\",      \"base\",      \"polygon\",      \"solana\",      \"stellar\",      \"avalanche\"    ],    \"fees\": null,    \"lock_wallet_address\": false,    \"source_amount\": null,    \"source_currency\": null,    \"transaction_id\": null,    \"wallet_address\": null,    \"wallet_addresses\": null  }}\n```\n\n## [Retrieve a CryptoOnrampSession](https://docs.stripe.com/api/crypto/onramp_sessions/retrieve)\n\nRetrieves the details of a CryptoOnrampSession that was previously created.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a CryptoOnrampSession object\n\nGET /v1/crypto/onramp\\_sessions/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/crypto/onramp_sessions/cos_1NamBL2eZvKYlo2CP38sZVEW \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cos_1NamBL2eZvKYlo2CP38sZVEW\",  \"object\": \"crypto.onramp_session\",  \"client_secret\": \"cos_1NamBL2eZvKYlo2CP38sZVEW_secret_B5faamUkzHbcpjy6NndGq1mMZGGCo8FhK2P\",  \"created\": 1691010131,  \"kyc_details_provided\": false,  \"livemode\": true,  \"metadata\": {},  \"redirect_url\": null,  \"status\": \"initialized\",  \"transaction_details\": {    \"destination_amount\": null,    \"destination_currencies\": [      \"btc\",      \"eth\",      \"matic\",      \"sol\",      \"xlm\",      \"avax\",      \"usdc\"    ],    \"destination_currency\": null,    \"destination_network\": null,    \"destination_networks\": [      \"bitcoin\",      \"ethereum\",      \"base\",      \"polygon\",      \"solana\",      \"stellar\",      \"avalanche\"    ],    \"fees\": null,    \"lock_wallet_address\": false,    \"source_amount\": null,    \"source_currency\": null,    \"transaction_id\": null,    \"wallet_address\": null,    \"wallet_addresses\": null  }}\n```\n\n## [List CryptoOnrampSessions](https://docs.stripe.com/api/crypto/onramp_sessions/list)\n\nReturns a list of onramp sessions that match the filter criteria. The onramp sessions are returned in sorted order, with the most recent onramp sessions appearing first.\n\n### Parameters\n\n*   Only return onramp sessions that were created during the given date interval.\n    \n*   The destination cryptocurrency to filter by.\n    \n*   The destination blockchain network to filter by.\n    \n*   An object ID cursor for use in pagination.\n    \n*   A limit ranging from 1 to 100 (defaults to 10).\n    \n*   An object ID cursor for use in pagination.\n    \n*   The status of the Onramp Session. One of = `{initialized, rejected, requires_payment, fulfillment_processing, fulfillment_complete}`\n    \n\n### Returns\n\nA dictionary with a data property that contains an array of up to `limit` onramp sessions, starting after onramp session `starting_after`. Each entry in the array is a separate onramp session object. If no more onramp sessions are available, the resulting array will be empty.\n\nGET /v1/crypto/onramp\\_sessions\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/crypto/onramp_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/crypto/onramp_sessions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cos_1NamBL2eZvKYlo2CP38sZVEW\",      \"object\": \"crypto.onramp_session\",      \"client_secret\": \"cos_1NamBL2eZvKYlo2CP38sZVEW_secret_B5faamUkzHbcpjy6NndGq1mMZGGCo8FhK2P\",      \"created\": 1691010131,      \"kyc_details_provided\": false,      \"livemode\": true,      \"metadata\": {},      \"redirect_url\": null,      \"status\": \"initialized\",      \"transaction_details\": {        \"destination_amount\": null,        \"destination_currencies\": [          \"btc\",          \"eth\",          \"matic\",          \"sol\",          \"xlm\",          \"avax\",          \"usdc\"        ],        \"destination_currency\": null,        \"destination_network\": null,        \"destination_networks\": [          \"bitcoin\",          \"ethereum\",          \"base\",          \"polygon\",          \"solana\",          \"stellar\",          \"avalanche\"        ],        \"fees\": null,        \"lock_wallet_address\": false,        \"source_amount\": null,        \"source_currency\": null,        \"transaction_id\": null,        \"wallet_address\": null,        \"wallet_addresses\": null      }    }    {...}    {...}  ],}\n```",
    "title": "Crypto Onramp Session | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/webhook_endpoints/object",
    "markdown": "# The Webhook Endpoint object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    api\\_versionnullable string\n    \n    The API version events are rendered as for this webhook endpoint.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An optional description of what the webhook is used for.\n    \n*   #### \n    \n    enabled\\_eventsarray of strings\n    \n    The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The endpoint’s secret, used to generate [webhook signatures](https://docs.stripe.com/webhooks/signatures). Only returned at creation.\n    \n*   The status of the webhook. It can be `enabled` or `disabled`.\n    \n*   The URL of the webhook endpoint.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationnullable string\n    \n\nThe Webhook Endpoint object\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"api_version\": null,  \"application\": null,  \"created\": 1680122196,  \"description\": null,  \"enabled_events\": [    \"charge.succeeded\",    \"charge.failed\"  ],  \"livemode\": false,  \"metadata\": {},  \"secret\": \"whsec_wRNftLajMZNeslQOP6vEPm4iVx5NlZ6z\",  \"status\": \"enabled\",  \"url\": \"https://example.com/my/webhook/endpoint\"}\n```\n\n## [Create a webhook endpoint](https://docs.stripe.com/api/webhook_endpoints/create)\n\nA webhook endpoint must have a `url` and a list of `enabled_events`. You may optionally specify the Boolean `connect` parameter. If set to true, then a Connect webhook endpoint that notifies the specified `url` about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified `url` only about events from your account is created. You can also create webhook endpoints in the [webhooks settings](https://dashboard.stripe.com/account/webhooks) section of the Dashboard.\n\n### Parameters\n\n*   #### \n    \n    enabled\\_eventsarray of enumsRequired\n    \n    The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account.application.authorized`<br><br>Occurs whenever a user authorizes an application. Sent to the related application only. |\n    | `account.application.deauthorized`<br><br>Occurs whenever a user deauthorizes an application. Sent to the related application only. |\n    | `account.external_account.created`<br><br>Occurs whenever an external account is created. |\n    | `account.external_account.deleted`<br><br>Occurs whenever an external account is deleted. |\n    | `account.external_account.updated`<br><br>Occurs whenever an external account is updated. |\n    | `account.updated`<br><br>Occurs whenever an account status or property has changed. |\n    | `application_fee.created`<br><br>Occurs whenever an application fee is created on a charge. |\n    | `application_fee.refund.updated`<br><br>Occurs whenever an application fee refund is updated. |\n    | `application_fee.refunded`<br><br>Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds. |\n    | `balance.available`<br><br>Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions. |\n    | Show 336 more |\n    \n*   The URL of the webhook endpoint.\n    \n*   Events sent to this endpoint will be generated with this Stripe Version instead of your account’s default Stripe Version.\n    \n*   An optional description of what the webhook is used for.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns the webhook endpoint object with the `secret` field populated.\n\nPOST /v1/webhook\\_endpoints\n\n```\ncurl https://api.stripe.com/v1/webhook_endpoints \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"enabled_events[]\"=\"charge.succeeded\" \\  -d \"enabled_events[]\"=\"charge.failed\" \\  --data-urlencode url=\"https://example.com/my/webhook/endpoint\"\n```\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"api_version\": null,  \"application\": null,  \"created\": 1680122196,  \"description\": null,  \"enabled_events\": [    \"charge.succeeded\",    \"charge.failed\"  ],  \"livemode\": false,  \"metadata\": {},  \"secret\": \"whsec_wRNftLajMZNeslQOP6vEPm4iVx5NlZ6z\",  \"status\": \"enabled\",  \"url\": \"https://example.com/my/webhook/endpoint\"}\n```\n\n## [Update a webhook endpoint](https://docs.stripe.com/api/webhook_endpoints/update)\n\nUpdates the webhook endpoint. You may edit the `url`, the list of `enabled_events`, and the status of your endpoint.\n\n### Parameters\n\n*   An optional description of what the webhook is used for.\n    \n*   #### \n    \n    enabled\\_eventsarray of enums\n    \n    The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account.application.authorized`<br><br>Occurs whenever a user authorizes an application. Sent to the related application only. |\n    | `account.application.deauthorized`<br><br>Occurs whenever a user deauthorizes an application. Sent to the related application only. |\n    | `account.external_account.created`<br><br>Occurs whenever an external account is created. |\n    | `account.external_account.deleted`<br><br>Occurs whenever an external account is deleted. |\n    | `account.external_account.updated`<br><br>Occurs whenever an external account is updated. |\n    | `account.updated`<br><br>Occurs whenever an account status or property has changed. |\n    | `application_fee.created`<br><br>Occurs whenever an application fee is created on a charge. |\n    | `application_fee.refund.updated`<br><br>Occurs whenever an application fee refund is updated. |\n    | `application_fee.refunded`<br><br>Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds. |\n    | `balance.available`<br><br>Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions. |\n    | Show 336 more |\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The URL of the webhook endpoint.\n    \n\n### More parameters\n\n### Returns\n\nThe updated webhook endpoint object if successful. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/webhook\\_endpoints/:id\n\n```\ncurl https://api.stripe.com/v1/webhook_endpoints/we_1Mr5jULkdIwHu7ix1ibLTM0x \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"enabled_events[]\"=\"charge.succeeded\" \\  -d \"enabled_events[]\"=\"charge.failed\" \\  --data-urlencode url=\"https://example.com/new_endpoint\"\n```\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"api_version\": null,  \"application\": null,  \"created\": 1680122196,  \"description\": null,  \"enabled_events\": [    \"charge.succeeded\",    \"charge.failed\"  ],  \"livemode\": false,  \"metadata\": {},  \"status\": \"disabled\",  \"url\": \"https://example.com/new_endpoint\"}\n```\n\n## [Retrieve a webhook endpoint](https://docs.stripe.com/api/webhook_endpoints/retrieve)\n\nRetrieves the webhook endpoint with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a webhook endpoint if a valid webhook endpoint ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/webhook\\_endpoints/:id\n\n```\ncurl https://api.stripe.com/v1/webhook_endpoints/we_1Mr5jULkdIwHu7ix1ibLTM0x \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",  \"object\": \"webhook_endpoint\",  \"api_version\": null,  \"application\": null,  \"created\": 1680122196,  \"description\": null,  \"enabled_events\": [    \"charge.succeeded\",    \"charge.failed\"  ],  \"livemode\": false,  \"metadata\": {},  \"status\": \"enabled\",  \"url\": \"https://example.com/my/webhook/endpoint\"}\n```\n\n## [List all webhook endpoints](https://docs.stripe.com/api/webhook_endpoints/list)\n\nReturns a list of your webhook endpoints.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` webhook endpoints, starting after webhook endpoint `starting_after`. Each entry in the array is a separate webhook endpoint object. If no more webhook endpoints are available, the resulting array will be empty. This request should never raise an error.\n\nGET /v1/webhook\\_endpoints\n\n```\ncurl -G https://api.stripe.com/v1/webhook_endpoints \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/webhook_endpoints\",  \"has_more\": false,  \"data\": [    {      \"id\": \"we_1Mr5jULkdIwHu7ix1ibLTM0x\",      \"object\": \"webhook_endpoint\",      \"api_version\": null,      \"application\": null,      \"created\": 1680122196,      \"description\": null,      \"enabled_events\": [        \"charge.succeeded\",        \"charge.failed\"      ],      \"livemode\": false,      \"metadata\": {},      \"status\": \"enabled\",      \"url\": \"https://example.com/my/webhook/endpoint\"    }    {...}    {...}  ],}\n```",
    "title": "The Webhook Endpoint object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/registrations/all",
    "markdown": "# List registrations | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax%2Fregistrations%2Fall)\n\nReturns a list of Tax `Registration` objects.\n\n### Parameters\n\n*   The status of the Tax Registration.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Return all active Tax Registrations. |\n    | `all`<br><br>Return all Tax Registrations (default). |\n    | `expired`<br><br>Return all expired Tax Registrations. |\n    | `scheduled`<br><br>Return all scheduled Tax Registrations. |\n    \n\n### More parameters\n\n### Returns\n\nA list of Tax `Registration` objects.\n\nGET /v1/tax/registrations\n\n```\ncurl -G https://api.stripe.com/v1/tax/registrations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax/registrations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"taxreg_NkyGPRPytKq66j\",      \"object\": \"tax.registration\",      \"active_from\": 1682036640,      \"country\": \"US\",      \"country_options\": {        \"us\": {          \"state\": \"CA\",          \"type\": \"state_sales_tax\"        }      },      \"created\": 1682006400,      \"expires_at\": null,      \"livemode\": false,      \"status\": \"active\",      \"state\": \"CA\",      \"type\": \"standard\"    }    {...}    {...}  ],}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List registrations | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/identity/verification_sessions/redact",
    "markdown": "# Redact a VerificationSession | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fidentity%2Fverification_sessions%2Fredact)\n\nRedact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.\n\nA VerificationSession object can be redacted when it is in `requires_input` or `verified` [status](https://docs.stripe.com/identity/how-sessions-work). Redacting a VerificationSession in `requires_action` state will automatically cancel it.\n\nThe redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s `redaction.status` field will be set to `processing`; when the process is finished, it will change to `redacted` and an `identity.verification_session.redacted` event will be emitted.\n\nRedaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string `[redacted]` or a similar placeholder. The `metadata` field will also be erased. Redacted objects cannot be updated or used for any purpose.\n\n[Learn more](https://docs.stripe.com/identity/verification-sessions#redact).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the redacted VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id/redact\n\n```\ncurl -X POST https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN3kLkdIwHu7ixk5OvTq3b/redact \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuN3kLkdIwHu7ixk5OvTq3b\",  \"object\": \"identity.verification_session\",  \"client_secret\": null,  \"created\": 1695680120,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": {    \"status\": \"processing\"  },  \"status\": \"canceled\",  \"type\": \"document\",  \"url\": null}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Redact a VerificationSession | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/registrations/update",
    "markdown": "# Update a registration | Stripe API Reference\n\nUpdates an existing Tax `Registration` object.\n\nA registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting `expires_at`.\n\n### Parameters\n\n*   #### \n    \n    active\\_fromstring | timestamp\n    \n    Time at which the registration becomes active. It can be either `now` to indicate the current time, or a timestamp measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    expires\\_atstring | timestamp\n    \n    If set, the registration stops being active at this time. If not set, the registration will be active indefinitely. It can be either `now` to indicate the current time, or a timestamp measured in seconds since the Unix epoch.\n    \n\n### Returns\n\nA Tax `Registration` object.\n\nPOST /v1/tax/registrations/:id\n\n```\ncurl https://api.stripe.com/v1/tax/registrations/taxreg_NkyGPRPytKq66j \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d expires_at=now\n```\n\n```\n{  \"id\": \"taxreg_NkyGPRPytKq66j\",  \"object\": \"tax.registration\",  \"active_from\": 1683036640,  \"country\": \"US\",  \"country_options\": {    \"us\": {      \"state\": \"CA\",      \"type\": \"state_sales_tax\"    }  },  \"created\": 1682006400,  \"expires_at\": 1684072000,  \"livemode\": false,  \"status\": \"active\",  \"state\": \"CA\",  \"type\": \"standard\"}\n```\n\n## [Retrieve a registration](https://docs.stripe.com/api/tax/registrations/retrieve)\n\nReturns a Tax `Registration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Registration` object.\n\nGET /v1/tax/registrations/:id\n\n```\ncurl https://api.stripe.com/v1/tax/registrations/taxreg_NkyGPRPytKq66j \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"taxreg_NkyGPRPytKq66j\",  \"object\": \"tax.registration\",  \"active_from\": 1682036640,  \"country\": \"US\",  \"country_options\": {    \"us\": {      \"state\": \"CA\",      \"type\": \"state_sales_tax\"    }  },  \"created\": 1682006400,  \"expires_at\": null,  \"livemode\": false,  \"status\": \"active\",  \"state\": \"CA\",  \"type\": \"standard\"}\n```\n\n## [List registrations](https://docs.stripe.com/api/tax/registrations/all)\n\nReturns a list of Tax `Registration` objects.\n\n### Parameters\n\n*   The status of the Tax Registration.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Return all active Tax Registrations. |\n    | `all`<br><br>Return all Tax Registrations (default). |\n    | `expired`<br><br>Return all expired Tax Registrations. |\n    | `scheduled`<br><br>Return all scheduled Tax Registrations. |\n    \n\n### More parameters\n\n### Returns\n\nA list of Tax `Registration` objects.\n\nGET /v1/tax/registrations\n\n```\ncurl -G https://api.stripe.com/v1/tax/registrations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax/registrations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"taxreg_NkyGPRPytKq66j\",      \"object\": \"tax.registration\",      \"active_from\": 1682036640,      \"country\": \"US\",      \"country_options\": {        \"us\": {          \"state\": \"CA\",          \"type\": \"state_sales_tax\"        }      },      \"created\": 1682006400,      \"expires_at\": null,      \"livemode\": false,      \"status\": \"active\",      \"state\": \"CA\",      \"type\": \"standard\"    }    {...}    {...}  ],}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Update a registration | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/identity/verification_reports/list",
    "markdown": "# List VerificationReports | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fidentity%2Fverification_reports%2Flist)\n\nList all verification reports.\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Only return VerificationReports that were created during the given date interval.\n    \n*   Only return VerificationReports of this type\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `document`<br><br>Perform a document check. |\n    | `id_number`<br><br>Perform an ID number check. |\n    \n*   #### \n    \n    verification\\_sessionstring\n    \n    Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID.\n    \n\n### More parameters\n\n### Returns\n\nList of VerificationInent objects that match the provided filter criteria.\n\nGET /v1/identity/verification\\_reports\n\n```\ncurl -G https://api.stripe.com/v1/identity/verification_reports \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/identity/verification_reports\",  \"has_more\": false,  \"data\": [    {      \"id\": \"vr_1MwBlH2eZvKYlo2C91hOpFMf\",      \"object\": \"identity.verification_report\",      \"created\": 1681337011,      \"livemode\": false,      \"options\": {        \"document\": {}      },      \"type\": \"document\",      \"verification_session\": \"vs_NhaxYCqOE27AqaUTxbIZOnHw\",      \"document\": {        \"status\": \"verified\",        \"error\": null,        \"first_name\": \"Jenny\",        \"last_name\": \"Rosen\",        \"address\": {          \"line1\": \"1234 Main St.\",          \"city\": \"San Francisco\",          \"state\": \"CA\",          \"zip\": \"94111\",          \"country\": \"US\"        },        \"type\": \"driving_license\",        \"files\": [          \"file_NhaxRCXT8Iuu8apSuci00UC4\",          \"file_NhaxDeWKGAOTc8Uec7UY9Ljj\"        ],        \"expiration_date\": {          \"month\": 12,          \"day\": 1,          \"year\": 2025        },        \"issued_date\": {          \"month\": 12,          \"day\": 1,          \"year\": 2020        },        \"issuing_country\": \"US\"      }    }    {...}    {...}  ],}\n```\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List VerificationReports | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/identity/verification_reports/retrieve",
    "markdown": "# Retrieve a VerificationReport | Stripe API Reference\n\nRetrieves an existing VerificationReport\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a VerificationReport object\n\nGET /v1/identity/verification\\_reports/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_reports/vr_1MwBlH2eZvKYlo2C91hOpFMf \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vr_1MwBlH2eZvKYlo2C91hOpFMf\",  \"object\": \"identity.verification_report\",  \"created\": 1681337011,  \"livemode\": false,  \"options\": {    \"document\": {}  },  \"type\": \"document\",  \"verification_session\": \"vs_NhaxYCqOE27AqaUTxbIZOnHw\",  \"document\": {    \"status\": \"verified\",    \"error\": null,    \"first_name\": \"Jenny\",    \"last_name\": \"Rosen\",    \"address\": {      \"line1\": \"1234 Main St.\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"zip\": \"94111\",      \"country\": \"US\"    },    \"type\": \"driving_license\",    \"files\": [      \"file_NhaxRCXT8Iuu8apSuci00UC4\",      \"file_NhaxDeWKGAOTc8Uec7UY9Ljj\"    ],    \"expiration_date\": {      \"month\": 12,      \"day\": 1,      \"year\": 2025    },    \"issued_date\": {      \"month\": 12,      \"day\": 1,      \"year\": 2020    },    \"issuing_country\": \"US\"  }}\n```\n\n## [List VerificationReports](https://docs.stripe.com/api/identity/verification_reports/list)\n\nList all verification reports.\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Only return VerificationReports that were created during the given date interval.\n    \n*   Only return VerificationReports of this type\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `document`<br><br>Perform a document check. |\n    | `id_number`<br><br>Perform an ID number check. |\n    \n*   #### \n    \n    verification\\_sessionstring\n    \n    Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID.\n    \n\n### More parameters\n\n### Returns\n\nList of VerificationInent objects that match the provided filter criteria.\n\nGET /v1/identity/verification\\_reports\n\n```\ncurl -G https://api.stripe.com/v1/identity/verification_reports \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/identity/verification_reports\",  \"has_more\": false,  \"data\": [    {      \"id\": \"vr_1MwBlH2eZvKYlo2C91hOpFMf\",      \"object\": \"identity.verification_report\",      \"created\": 1681337011,      \"livemode\": false,      \"options\": {        \"document\": {}      },      \"type\": \"document\",      \"verification_session\": \"vs_NhaxYCqOE27AqaUTxbIZOnHw\",      \"document\": {        \"status\": \"verified\",        \"error\": null,        \"first_name\": \"Jenny\",        \"last_name\": \"Rosen\",        \"address\": {          \"line1\": \"1234 Main St.\",          \"city\": \"San Francisco\",          \"state\": \"CA\",          \"zip\": \"94111\",          \"country\": \"US\"        },        \"type\": \"driving_license\",        \"files\": [          \"file_NhaxRCXT8Iuu8apSuci00UC4\",          \"file_NhaxDeWKGAOTc8Uec7UY9Ljj\"        ],        \"expiration_date\": {          \"month\": 12,          \"day\": 1,          \"year\": 2025        },        \"issued_date\": {          \"month\": 12,          \"day\": 1,          \"year\": 2020        },        \"issuing_country\": \"US\"      }    }    {...}    {...}  ],}\n```\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve a VerificationReport | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/crypto/onramp_quotes",
    "markdown": "# Crypto Onramp Quotes | Stripe API Reference\n\nThe Crypto Onramp Quote object\n\n```\n{  \"id\": \"610a15d980d48eeaabc3e7375127cd10c8e7a6aad03ecf77d42dfd4c4f881faa\",  \"object\": \"crypto.onramp.quotes\",  \"destination_network_quotes\": {    \"avalanche\": [      {        \"id\": \"dec31b3a2ef646c0bbf525774fa767097a334d51567cab715523b19e2d4a83f1\",        \"destination_amount\": \"3.474296399973076273\",        \"destination_currency\": \"avax\",        \"destination_network\": \"avalanche\",        \"fees\": {          \"network_fee_monetary\": \"0.03\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.07\"      },      {        \"id\": \"3d56a9b2fdf3e5b9666461d5c28ea82ebb24287a8ece19869b02778dc70497e1\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"avalanche\",        \"fees\": {          \"network_fee_monetary\": \"0.06\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.10\"      }    ],    \"base_network\": [      {        \"id\": \"b2e849efda961116b180c9da75d7f852b9e46593f06a95e1ccd0893099579a9e\",        \"destination_amount\": \"0.029133919178255537\",        \"destination_currency\": \"eth\",        \"destination_network\": \"base\",        \"fees\": {          \"network_fee_monetary\": \"0.07\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.11\"      },      {        \"id\": \"e8bc97d01c0fbf0d0b18cf5a25f7da6b2f98183fd223ebb866b691bc652109ac\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"base\",        \"fees\": {          \"network_fee_monetary\": \"0.17\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.21\"      }    ],    \"bitcoin\": [      {        \"id\": \"2a83796a355cfc311aec441170e2448b678828d336828c3ebb427e180e552091\",        \"destination_amount\": \"0.00160673\",        \"destination_currency\": \"btc\",        \"destination_network\": \"bitcoin\",        \"fees\": {          \"network_fee_monetary\": \"11.89\",          \"transaction_fee_monetary\": \"4.27\"        },        \"source_total_amount\": \"116.16\"      }    ],    \"ethereum\": [      {        \"id\": \"52670639e0db4e969e472b1e7e1a219fb70d8674200a5ca30bfc941a73200c82\",        \"destination_amount\": \"0.029111240079494021\",        \"destination_currency\": \"eth\",        \"destination_network\": \"ethereum\",        \"fees\": {          \"network_fee_monetary\": \"1.25\",          \"transaction_fee_monetary\": \"4.06\"        },        \"source_total_amount\": \"105.31\"      },      {        \"id\": \"1fdae4939338d2ac2fdd2a18909cd570bdb7f412109304fb6965b826741e6f0f\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"ethereum\",        \"fees\": {          \"network_fee_monetary\": \"3.76\",          \"transaction_fee_monetary\": \"4.11\"        },        \"source_total_amount\": \"107.87\"      }    ],    \"polygon\": [      {        \"id\": \"3a039af52bb8d7aaab7ce3c89f9445dc58b0a3ef5cf8a5c9ce3e20cc030e1a07\",        \"destination_amount\": \"174.481810700000000000\",        \"destination_currency\": \"matic\",        \"destination_network\": \"polygon\",        \"fees\": {          \"network_fee_monetary\": \"0.01\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.05\"      },      {        \"id\": \"cce3462ecd4dc451e8ac16af79ada6997e969620547995bb2911e14e95903d6a\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"polygon\",        \"fees\": {          \"network_fee_monetary\": \"0.01\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.05\"      }    ],    \"solana\": [      {        \"id\": \"733e3fa8578e38020a78c6f45ea5f1da1210bc04b12e554841768ac4f5c505db\",        \"destination_amount\": \"0.653551160\",        \"destination_currency\": \"sol\",        \"destination_network\": \"solana\",        \"fees\": {          \"network_fee_monetary\": \"0.01\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.05\"      },      {        \"id\": \"c270e59f3e9aaa52662d18699cdff4112568b0dad888d56f37d05dfdedbc76c5\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"solana\",        \"fees\": {          \"network_fee_monetary\": \"0.01\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.05\"      }    ],    \"stellar\": [      {        \"id\": \"a0c754b8d68155e13318643d71ea1b0d00eba8614f3778d3ddcfe6e8c5ec711e\",        \"destination_amount\": \"1064.71823580\",        \"destination_currency\": \"xlm\",        \"destination_network\": \"stellar\",        \"fees\": {          \"network_fee_monetary\": \"0.18\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.22\"      },      {        \"id\": \"3e66d98654933b753971ba75f99f7e7fb47e03c5db1b0a4d02e8ec189842ab5b\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"stellar\",        \"fees\": {          \"network_fee_monetary\": \"0.18\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.22\"      }    ]  },  \"livemode\": false,  \"rate_fetched_at\": 1719947634.6564176,  \"source_amount\": \"100.00\",  \"source_currency\": \"usd\"}\n```",
    "title": "Crypto Onramp Quotes | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/crypto/onramp_sessions/list",
    "markdown": "# List CryptoOnrampSessions | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fcrypto%2Fonramp_sessions%2Flist)\n\nReturns a list of onramp sessions that match the filter criteria. The onramp sessions are returned in sorted order, with the most recent onramp sessions appearing first.\n\n### Parameters\n\n*   Only return onramp sessions that were created during the given date interval.\n    \n*   The destination cryptocurrency to filter by.\n    \n*   The destination blockchain network to filter by.\n    \n*   An object ID cursor for use in pagination.\n    \n*   A limit ranging from 1 to 100 (defaults to 10).\n    \n*   An object ID cursor for use in pagination.\n    \n*   The status of the Onramp Session. One of = `{initialized, rejected, requires_payment, fulfillment_processing, fulfillment_complete}`\n    \n\n### Returns\n\nA dictionary with a data property that contains an array of up to `limit` onramp sessions, starting after onramp session `starting_after`. Each entry in the array is a separate onramp session object. If no more onramp sessions are available, the resulting array will be empty.\n\nGET /v1/crypto/onramp\\_sessions\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/crypto/onramp_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/crypto/onramp_sessions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cos_1NamBL2eZvKYlo2CP38sZVEW\",      \"object\": \"crypto.onramp_session\",      \"client_secret\": \"cos_1NamBL2eZvKYlo2CP38sZVEW_secret_B5faamUkzHbcpjy6NndGq1mMZGGCo8FhK2P\",      \"created\": 1691010131,      \"kyc_details_provided\": false,      \"livemode\": true,      \"metadata\": {},      \"redirect_url\": null,      \"status\": \"initialized\",      \"transaction_details\": {        \"destination_amount\": null,        \"destination_currencies\": [          \"btc\",          \"eth\",          \"matic\",          \"sol\",          \"xlm\",          \"avax\",          \"usdc\"        ],        \"destination_currency\": null,        \"destination_network\": null,        \"destination_networks\": [          \"bitcoin\",          \"ethereum\",          \"base\",          \"polygon\",          \"solana\",          \"stellar\",          \"avalanche\"        ],        \"fees\": null,        \"lock_wallet_address\": false,        \"source_amount\": null,        \"source_currency\": null,        \"transaction_id\": null,        \"wallet_address\": null,        \"wallet_addresses\": null      }    }    {...}    {...}  ],}\n```\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List CryptoOnrampSessions | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/crypto/integrate-the-onramp",
    "markdown": "# Set up an onramp integration\n\nGenerate a [crypto onramp session](https://docs.stripe.com/crypto/using-the-api#api-reference) by running the following curl command in your terminal:\n\n`curl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   # this secret key is from step 1`\n\n`curl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"wallet_addresses[ethereum]\"=\"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\"   # add as many parameters as you'd like`\n\nSample response:\n\n`{   \"id\": \"cos_0MYfrA589O8KAxCGEDdIVYy3\",   \"object\": \"crypto.onramp_session\",   \"client_secret\": \"cos_0MYfrA589O8KAxCGEDdIVYy3_secret_rnpnWaxQbYQOvp6nVMvEeczx300NRU4hErZ\",   \"created\": 1675732824,   \"livemode\": false,   \"status\": \"initialized\",   \"transaction_details\": {     \"destination_currency\": null,     \"destination_amount\": null,     \"destination_network\": null,     \"fees\": null,     \"lock_wallet_address\": false,     \"source_currency\": null,     \"source_amount\": null,     \"destination_currencies\": [       \"btc\",       \"eth\",       \"sol\",       \"usdc\"     ],     \"destination_networks\": [       \"bitcoin\",       \"ethereum\",       \"solana\"     ],     \"transaction_id\": null,     \"wallet_address\": null,     \"wallet_addresses\": {       \"bitcoin\": null,       \"ethereum\": \"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\",       \"polygon\": null,       \"solana\": null     }   } }`\n\nYou can see a full list of the parameters you can pass into Session creation in our [API documentation](https://docs.stripe.com/crypto/using-the-api#api-reference).",
    "title": "Set up an onramp integration | Stripe Documentation",
    "description": "Learn how to mint a new onramp session.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/registrations",
    "markdown": "# Tax Registrations | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax%2Fregistrations)\n\n## [The Tax Registration object](https://docs.stripe.com/api/tax/registrations/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the registration becomes active. Measured in seconds since the Unix epoch.\n    \n\n*   Specific options for a registration in the specified `country`.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    expires\\_atnullable timestamp\n    \n    If set, the registration stops being active at this time. If not set, the registration will be active indefinitely. Measured in seconds since the Unix epoch.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The status of the registration. This field is present for convenience and can be deduced from `active_from` and `expires_at`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The Tax Registration is currently active. |\n    | `expired`<br><br>The Tax Registration is no longer active. |\n    | `scheduled`<br><br>The Tax Registration will become active in the future. |\n    \n\nThe Tax Registration object\n\n```\n{  \"id\": \"taxreg_NkyGPRPytKq66j\",  \"object\": \"tax.registration\",  \"active_from\": 1682036640,  \"country\": \"US\",  \"country_options\": {    \"us\": {      \"state\": \"CA\",      \"type\": \"state_sales_tax\"    }  },  \"created\": 1682006400,  \"expires_at\": null,  \"livemode\": false,  \"status\": \"active\",  \"state\": \"CA\",  \"type\": \"standard\"}\n```\n\n## [Create a registration](https://docs.stripe.com/api/tax/registrations/create)\n\nCreates a new Tax `Registration` object.\n\n### Parameters\n\n*   #### \n    \n    active\\_fromstring | timestampRequired\n    \n    Time at which the Tax Registration becomes active. It can be either `now` to indicate the current time, or a future timestamp measured in seconds since the Unix epoch.\n    \n\n*   #### \n    \n    country\\_optionsobjectRequired\n    \n    Specific options for a registration in the specified `country`.\n    \n*   If set, the Tax Registration stops being active at this time. If not set, the Tax Registration will be active indefinitely. Timestamp measured in seconds since the Unix epoch.\n    \n\n### Returns\n\nA Tax `Registration` object.\n\nPOST /v1/tax/registrations\n\n```\ncurl https://api.stripe.com/v1/tax/registrations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d country=US \\  -d \"country_options[us][state]\"=CA \\  -d \"country_options[us][type]\"=state_sales_tax \\  -d active_from=now\n```\n\n```\n{  \"id\": \"taxreg_NkyGPRPytKq66j\",  \"object\": \"tax.registration\",  \"active_from\": 1682036640,  \"country\": \"US\",  \"country_options\": {    \"us\": {      \"state\": \"CA\",      \"type\": \"state_sales_tax\"    }  },  \"created\": 1682006400,  \"expires_at\": null,  \"livemode\": false,  \"status\": \"active\",  \"state\": \"CA\",  \"type\": \"standard\"}\n```\n\n## [Update a registration](https://docs.stripe.com/api/tax/registrations/update)\n\nUpdates an existing Tax `Registration` object.\n\nA registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting `expires_at`.\n\n### Parameters\n\n*   #### \n    \n    active\\_fromstring | timestamp\n    \n    Time at which the registration becomes active. It can be either `now` to indicate the current time, or a timestamp measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    expires\\_atstring | timestamp\n    \n    If set, the registration stops being active at this time. If not set, the registration will be active indefinitely. It can be either `now` to indicate the current time, or a timestamp measured in seconds since the Unix epoch.\n    \n\n### Returns\n\nA Tax `Registration` object.\n\nPOST /v1/tax/registrations/:id\n\n```\ncurl https://api.stripe.com/v1/tax/registrations/taxreg_NkyGPRPytKq66j \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d expires_at=now\n```\n\n```\n{  \"id\": \"taxreg_NkyGPRPytKq66j\",  \"object\": \"tax.registration\",  \"active_from\": 1683036640,  \"country\": \"US\",  \"country_options\": {    \"us\": {      \"state\": \"CA\",      \"type\": \"state_sales_tax\"    }  },  \"created\": 1682006400,  \"expires_at\": 1684072000,  \"livemode\": false,  \"status\": \"active\",  \"state\": \"CA\",  \"type\": \"standard\"}\n```\n\n## [Retrieve a registration](https://docs.stripe.com/api/tax/registrations/retrieve)\n\nReturns a Tax `Registration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Registration` object.\n\nGET /v1/tax/registrations/:id\n\n```\ncurl https://api.stripe.com/v1/tax/registrations/taxreg_NkyGPRPytKq66j \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"taxreg_NkyGPRPytKq66j\",  \"object\": \"tax.registration\",  \"active_from\": 1682036640,  \"country\": \"US\",  \"country_options\": {    \"us\": {      \"state\": \"CA\",      \"type\": \"state_sales_tax\"    }  },  \"created\": 1682006400,  \"expires_at\": null,  \"livemode\": false,  \"status\": \"active\",  \"state\": \"CA\",  \"type\": \"standard\"}\n```",
    "title": "Tax Registrations | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/transactions",
    "markdown": "# Tax Transactions | Stripe API Reference\n\nEndpoints\n\n[POST/v1/tax/transactions/create\\_reversal](https://docs.stripe.com/api/tax/transactions/create_reversal)[POST/v1/tax/transactions/create\\_from\\_calculation](https://docs.stripe.com/api/tax/transactions/create_from_calculation)[GET/v1/tax/transactions/:id/line\\_items](https://docs.stripe.com/api/tax/transactions/line_items)[GET/v1/tax/transactions/:id](https://docs.stripe.com/api/tax/transactions/retrieve)\n\n## [The Tax Transaction object](https://docs.stripe.com/api/tax/transactions/object)\n\n### Attributes\n\n*   Unique identifier for the transaction.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n\n*   The customer’s details, such as address and tax IDs.\n    \n*   #### \n    \n    line\\_itemsnullable objectExpandable\n    \n    The tax collected or refunded, by line item.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   A custom unique identifier, such as ‘myOrder\\_123’.\n    \n*   If `reversal`, this transaction reverses an earlier transaction.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `reversal`<br><br>Represents a partial or full reversal of an earlier transaction. |\n    | `transaction`<br><br>Represents a customer sale or order. |\n    \n\n### More attributes\n\n*   #### \n    \n    ship\\_from\\_detailsnullable object\n    \n*   #### \n    \n    shipping\\_costnullable object\n    \n\nThe Tax Transaction object\n\n```\n{  \"id\": \"tax_1NaS0I2eZvKYlo2CRuMhUcmz\",  \"object\": \"tax.transaction\",  \"created\": 1690932566,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": \"South San Francisco\",      \"country\": \"US\",      \"line1\": \"354 Oyster Point Blvd\",      \"line2\": \"\",      \"postal_code\": \"94080\",      \"state\": \"CA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_ONCP443tgfS8I1\",        \"object\": \"tax.transaction_line_item\",        \"amount\": 1499,        \"amount_tax\": 148,        \"livemode\": false,        \"metadata\": null,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Pepperoni Pizza\",        \"reversal\": null,        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_40060003\",        \"type\": \"transaction\"      }    ],    \"has_more\": false,    \"url\": \"/v1/tax/transactions/tax_1NaS0I2eZvKYlo2CRuMhUcmz/line_items\"  },  \"livemode\": false,  \"metadata\": null,  \"posted_at\": 1690932566,  \"reference\": \"myOrder_123\",  \"reversal\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"ship_from_details\": {    \"address\": {      \"postal_code\": \"75001\",      \"state\": \"TX\",      \"country\": \"US\"    }  },  \"tax_date\": 1690932566,  \"type\": \"transaction\"}\n```\n\n## [Create a reversal transaction](https://docs.stripe.com/api/tax/transactions/create_reversal)\n\nPartially or fully reverses a previously created `Transaction`.\n\n### Parameters\n\n*   If `partial`, the provided line item or shipping cost amounts are reversed. If `full`, the original transaction is fully reversed.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `full`<br><br>The original transaction is fully reversed. |\n    | `partial`<br><br>The provided line item amounts are reversed. |\n    \n*   #### \n    \n    original\\_transactionstringRequired\n    \n    The ID of the Transaction to partially or fully reverse.\n    \n*   A custom identifier for this reversal, such as `myOrder_123-refund_1`, which must be unique across all transactions. The reference helps identify this reversal transaction in exported [tax reports](https://docs.stripe.com/tax/reports).\n    \n*   #### \n    \n    flat\\_amountintegerRequired if mode=partial and line\\_items nor shipping\\_cost provided\n    \n    A flat amount to reverse across the entire transaction, in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) in negative. This value represents the total amount to refund from the transaction, including taxes.\n    \n*   #### \n    \n    line\\_itemsarray of objectsRequired if mode=partial and neither shipping\\_cost nor flat\\_amount is provided\n    \n    The line item amounts to reverse.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    shipping\\_costobjectRequired if mode=partial and neither line\\_items nor flat\\_amount is provided\n    \n\n### Returns\n\nA new Tax `Transaction` object representing the reversal.\n\nPOST /v1/tax/transactions/create\\_reversal\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/create_reversal \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d mode=partial \\  -d original_transaction=tax_1NaTVd2eZvKYlo2CoOX2Nf7P \\  -d reference=myOrder_123-refund_1 \\  -d \"line_items[0][amount]\"=-1499 \\  -d \"line_items[0][amount_tax]\"=-148 \\  -d \"line_items[0][original_line_item]\"=tax_li_ONDxh8JZw14sP8 \\  -d \"line_items[0][reference]\"=\"refund of Pepperoni Pizza\" \\  -d \"expand[0]\"=line_items\n```\n\n```\n{  \"id\": \"tax_1NaTVd2eZvKYlo2CoOX2Nf7P\",  \"object\": \"tax.transaction\",  \"created\": 1690938353,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": \"354 Oyster Point Blvd\",      \"line2\": \"\",      \"postal_code\": \"94080\",      \"state\": \"CA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_ONDxh8JZw14sP8\",        \"object\": \"tax.transaction_line_item\",        \"amount\": 1499,        \"amount_tax\": 148,        \"livemode\": false,        \"metadata\": null,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Pepperoni Pizza\",        \"reversal\": null,        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_40060003\",        \"type\": \"transaction\"      }    ],    \"has_more\": false,    \"url\": \"/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items\"  },  \"livemode\": false,  \"metadata\": null,  \"posted_at\": 1690932566,  \"reference\": \"myOrder_123\",  \"reversal\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"tax_date\": 1690938353,  \"type\": \"transaction\"}\n```\n\n## [Create a transaction from a calculation](https://docs.stripe.com/api/tax/transactions/create_from_calculation)\n\nCreates a Tax Transaction from a calculation, if that calculation hasn’t expired. Calculations expire after 90 days.\n\n### Parameters\n\n*   #### \n    \n    calculationstringRequired\n    \n    Tax Calculation ID to be used as input when creating the transaction.\n    \n*   A custom order or sale identifier, such as ‘myOrder\\_123’. Must be unique across all transactions, including reversals.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nA Tax `Transaction` object.\n\nPOST /v1/tax/transactions/create\\_from\\_calculation\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/create_from_calculation \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d calculation=taxcalc_1NaTVT2eZvKYlo2CsqGeLeU2 \\  -d reference=myOrder_123 \\  -d \"expand[]\"=line_items\n```\n\n```\n{  \"id\": \"tax_1NaTVd2eZvKYlo2CoOX2Nf7P\",  \"object\": \"tax.transaction\",  \"created\": 1690938353,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": \"354 Oyster Point Blvd\",      \"line2\": \"\",      \"postal_code\": \"94080\",      \"state\": \"CA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_ONDxh8JZw14sP8\",        \"object\": \"tax.transaction_line_item\",        \"amount\": 1499,        \"amount_tax\": 148,        \"livemode\": false,        \"metadata\": null,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Pepperoni Pizza\",        \"reversal\": null,        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_40060003\",        \"type\": \"transaction\"      }    ],    \"has_more\": false,    \"url\": \"/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items\"  },  \"livemode\": false,  \"metadata\": null,  \"posted_at\": 1690932566,  \"reference\": \"myOrder_123\",  \"reversal\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"tax_date\": 1690938353,  \"type\": \"transaction\"}\n```\n\n## [Retrieve a transaction's line items](https://docs.stripe.com/api/tax/transactions/line_items)\n\nRetrieves the line items of a committed standalone transaction as a collection.\n\n### Parameters\n\n*   A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.\n    \n\n### Returns\n\nA list of Line Item objects if the Tax Transaction is found. Otherwise returns a ‘not found’ error.\n\nGET /v1/tax/transactions/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tax_1NaTVd2eZvKYlo2CoOX2Nf7P\",  \"object\": \"list\",  \"url\": \"/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tax_li_ONDxh8JZw14sP8\",      \"object\": \"tax.transaction_line_item\",      \"amount\": 1499,      \"amount_tax\": 148,      \"livemode\": false,      \"metadata\": null,      \"product\": null,      \"quantity\": 1,      \"reference\": \"Pepperoni Pizza\",      \"reversal\": null,      \"tax_behavior\": \"exclusive\",      \"tax_code\": \"txcd_40060003\",      \"type\": \"transaction\"    }  ]}\n```",
    "title": "Tax Transactions | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/registrations/retrieve",
    "markdown": "# Retrieve a registration | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax%2Fregistrations%2Fretrieve)\n\nReturns a Tax `Registration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Registration` object.\n\nGET /v1/tax/registrations/:id\n\n```\ncurl https://api.stripe.com/v1/tax/registrations/taxreg_NkyGPRPytKq66j \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"taxreg_NkyGPRPytKq66j\",  \"object\": \"tax.registration\",  \"active_from\": 1682036640,  \"country\": \"US\",  \"country_options\": {    \"us\": {      \"state\": \"CA\",      \"type\": \"state_sales_tax\"    }  },  \"created\": 1682006400,  \"expires_at\": null,  \"livemode\": false,  \"status\": \"active\",  \"state\": \"CA\",  \"type\": \"standard\"}\n```\n\n## [List registrations](https://docs.stripe.com/api/tax/registrations/all)\n\nReturns a list of Tax `Registration` objects.\n\n### Parameters\n\n*   The status of the Tax Registration.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Return all active Tax Registrations. |\n    | `all`<br><br>Return all Tax Registrations (default). |\n    | `expired`<br><br>Return all expired Tax Registrations. |\n    | `scheduled`<br><br>Return all scheduled Tax Registrations. |\n    \n\n### More parameters\n\n### Returns\n\nA list of Tax `Registration` objects.\n\nGET /v1/tax/registrations\n\n```\ncurl -G https://api.stripe.com/v1/tax/registrations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax/registrations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"taxreg_NkyGPRPytKq66j\",      \"object\": \"tax.registration\",      \"active_from\": 1682036640,      \"country\": \"US\",      \"country_options\": {        \"us\": {          \"state\": \"CA\",          \"type\": \"state_sales_tax\"        }      },      \"created\": 1682006400,      \"expires_at\": null,      \"livemode\": false,      \"status\": \"active\",      \"state\": \"CA\",      \"type\": \"standard\"    }    {...}    {...}  ],}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve a registration | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/identity/verification_reports",
    "markdown": "# Verification Report | Stripe API Reference\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [The VerificationReport object](https://docs.stripe.com/api/identity/verification_reports/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    client\\_reference\\_idnullable string\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Result of the document check for this report.\n    \n*   Result of the email check for this report.\n    \n*   Result of the id number check for this report.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Configuration options for this report.\n    \n*   Result of the phone check for this report.\n    \n*   Result of the selfie check for this report.\n    \n*   Type of report.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `document`<br><br>Perform a document check. |\n    | `id_number`<br><br>Perform an ID number check. |\n    | `verification_flow`<br><br>Configuration provided by Verification Flow |\n    \n*   #### \n    \n    verification\\_flownullable string\n    \n    The configuration token of a Verification Flow from the dashboard.\n    \n*   #### \n    \n    verification\\_sessionnullable string\n    \n    ID of the VerificationSession that created this report.\n    \n\nThe VerificationReport object\n\n```\n{  \"id\": \"vr_1MwBlH2eZvKYlo2C91hOpFMf\",  \"object\": \"identity.verification_report\",  \"created\": 1681337011,  \"livemode\": false,  \"options\": {    \"document\": {}  },  \"type\": \"document\",  \"verification_session\": \"vs_NhaxYCqOE27AqaUTxbIZOnHw\",  \"document\": {    \"status\": \"verified\",    \"error\": null,    \"first_name\": \"Jenny\",    \"last_name\": \"Rosen\",    \"address\": {      \"line1\": \"1234 Main St.\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"zip\": \"94111\",      \"country\": \"US\"    },    \"type\": \"driving_license\",    \"files\": [      \"file_NhaxRCXT8Iuu8apSuci00UC4\",      \"file_NhaxDeWKGAOTc8Uec7UY9Ljj\"    ],    \"expiration_date\": {      \"month\": 12,      \"day\": 1,      \"year\": 2025    },    \"issued_date\": {      \"month\": 12,      \"day\": 1,      \"year\": 2020    },    \"issuing_country\": \"US\"  }}\n```\n\n## [Retrieve a VerificationReport](https://docs.stripe.com/api/identity/verification_reports/retrieve)\n\nRetrieves an existing VerificationReport\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a VerificationReport object\n\nGET /v1/identity/verification\\_reports/:id\n\n```\ncurl https://api.stripe.com/v1/identity/verification_reports/vr_1MwBlH2eZvKYlo2C91hOpFMf \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vr_1MwBlH2eZvKYlo2C91hOpFMf\",  \"object\": \"identity.verification_report\",  \"created\": 1681337011,  \"livemode\": false,  \"options\": {    \"document\": {}  },  \"type\": \"document\",  \"verification_session\": \"vs_NhaxYCqOE27AqaUTxbIZOnHw\",  \"document\": {    \"status\": \"verified\",    \"error\": null,    \"first_name\": \"Jenny\",    \"last_name\": \"Rosen\",    \"address\": {      \"line1\": \"1234 Main St.\",      \"city\": \"San Francisco\",      \"state\": \"CA\",      \"zip\": \"94111\",      \"country\": \"US\"    },    \"type\": \"driving_license\",    \"files\": [      \"file_NhaxRCXT8Iuu8apSuci00UC4\",      \"file_NhaxDeWKGAOTc8Uec7UY9Ljj\"    ],    \"expiration_date\": {      \"month\": 12,      \"day\": 1,      \"year\": 2025    },    \"issued_date\": {      \"month\": 12,      \"day\": 1,      \"year\": 2020    },    \"issuing_country\": \"US\"  }}\n```\n\n## [List VerificationReports](https://docs.stripe.com/api/identity/verification_reports/list)\n\nList all verification reports.\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Only return VerificationReports that were created during the given date interval.\n    \n*   Only return VerificationReports of this type\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `document`<br><br>Perform a document check. |\n    | `id_number`<br><br>Perform an ID number check. |\n    \n*   #### \n    \n    verification\\_sessionstring\n    \n    Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID.\n    \n\n### More parameters\n\n### Returns\n\nList of VerificationInent objects that match the provided filter criteria.\n\nGET /v1/identity/verification\\_reports\n\n```\ncurl -G https://api.stripe.com/v1/identity/verification_reports \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/identity/verification_reports\",  \"has_more\": false,  \"data\": [    {      \"id\": \"vr_1MwBlH2eZvKYlo2C91hOpFMf\",      \"object\": \"identity.verification_report\",      \"created\": 1681337011,      \"livemode\": false,      \"options\": {        \"document\": {}      },      \"type\": \"document\",      \"verification_session\": \"vs_NhaxYCqOE27AqaUTxbIZOnHw\",      \"document\": {        \"status\": \"verified\",        \"error\": null,        \"first_name\": \"Jenny\",        \"last_name\": \"Rosen\",        \"address\": {          \"line1\": \"1234 Main St.\",          \"city\": \"San Francisco\",          \"state\": \"CA\",          \"zip\": \"94111\",          \"country\": \"US\"        },        \"type\": \"driving_license\",        \"files\": [          \"file_NhaxRCXT8Iuu8apSuci00UC4\",          \"file_NhaxDeWKGAOTc8Uec7UY9Ljj\"        ],        \"expiration_date\": {          \"month\": 12,          \"day\": 1,          \"year\": 2025        },        \"issued_date\": {          \"month\": 12,          \"day\": 1,          \"year\": 2020        },        \"issuing_country\": \"US\"      }    }    {...}    {...}  ],}\n```\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Verification Report | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/registrations/create",
    "markdown": "# Create a registration | Stripe API Reference\n\nCreates a new Tax `Registration` object.\n\n### Parameters\n\n*   #### \n    \n    active\\_fromstring | timestampRequired\n    \n    Time at which the Tax Registration becomes active. It can be either `now` to indicate the current time, or a future timestamp measured in seconds since the Unix epoch.\n    \n\n*   #### \n    \n    country\\_optionsobjectRequired\n    \n    Specific options for a registration in the specified `country`.\n    \n*   If set, the Tax Registration stops being active at this time. If not set, the Tax Registration will be active indefinitely. Timestamp measured in seconds since the Unix epoch.\n    \n\n### Returns\n\nA Tax `Registration` object.\n\nPOST /v1/tax/registrations\n\n```\ncurl https://api.stripe.com/v1/tax/registrations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d country=US \\  -d \"country_options[us][state]\"=CA \\  -d \"country_options[us][type]\"=state_sales_tax \\  -d active_from=now\n```\n\n```\n{  \"id\": \"taxreg_NkyGPRPytKq66j\",  \"object\": \"tax.registration\",  \"active_from\": 1682036640,  \"country\": \"US\",  \"country_options\": {    \"us\": {      \"state\": \"CA\",      \"type\": \"state_sales_tax\"    }  },  \"created\": 1682006400,  \"expires_at\": null,  \"livemode\": false,  \"status\": \"active\",  \"state\": \"CA\",  \"type\": \"standard\"}\n```\n\n## [Update a registration](https://docs.stripe.com/api/tax/registrations/update)\n\nUpdates an existing Tax `Registration` object.\n\nA registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting `expires_at`.\n\n### Parameters\n\n*   #### \n    \n    active\\_fromstring | timestamp\n    \n    Time at which the registration becomes active. It can be either `now` to indicate the current time, or a timestamp measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    expires\\_atstring | timestamp\n    \n    If set, the registration stops being active at this time. If not set, the registration will be active indefinitely. It can be either `now` to indicate the current time, or a timestamp measured in seconds since the Unix epoch.\n    \n\n### Returns\n\nA Tax `Registration` object.\n\nPOST /v1/tax/registrations/:id\n\n```\ncurl https://api.stripe.com/v1/tax/registrations/taxreg_NkyGPRPytKq66j \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d expires_at=now\n```\n\n```\n{  \"id\": \"taxreg_NkyGPRPytKq66j\",  \"object\": \"tax.registration\",  \"active_from\": 1683036640,  \"country\": \"US\",  \"country_options\": {    \"us\": {      \"state\": \"CA\",      \"type\": \"state_sales_tax\"    }  },  \"created\": 1682006400,  \"expires_at\": 1684072000,  \"livemode\": false,  \"status\": \"active\",  \"state\": \"CA\",  \"type\": \"standard\"}\n```\n\n## [Retrieve a registration](https://docs.stripe.com/api/tax/registrations/retrieve)\n\nReturns a Tax `Registration` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Registration` object.\n\nGET /v1/tax/registrations/:id\n\n```\ncurl https://api.stripe.com/v1/tax/registrations/taxreg_NkyGPRPytKq66j \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"taxreg_NkyGPRPytKq66j\",  \"object\": \"tax.registration\",  \"active_from\": 1682036640,  \"country\": \"US\",  \"country_options\": {    \"us\": {      \"state\": \"CA\",      \"type\": \"state_sales_tax\"    }  },  \"created\": 1682006400,  \"expires_at\": null,  \"livemode\": false,  \"status\": \"active\",  \"state\": \"CA\",  \"type\": \"standard\"}\n```\n\n## [List registrations](https://docs.stripe.com/api/tax/registrations/all)\n\nReturns a list of Tax `Registration` objects.\n\n### Parameters\n\n*   The status of the Tax Registration.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Return all active Tax Registrations. |\n    | `all`<br><br>Return all Tax Registrations (default). |\n    | `expired`<br><br>Return all expired Tax Registrations. |\n    | `scheduled`<br><br>Return all scheduled Tax Registrations. |\n    \n\n### More parameters\n\n### Returns\n\nA list of Tax `Registration` objects.\n\nGET /v1/tax/registrations\n\n```\ncurl -G https://api.stripe.com/v1/tax/registrations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax/registrations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"taxreg_NkyGPRPytKq66j\",      \"object\": \"tax.registration\",      \"active_from\": 1682036640,      \"country\": \"US\",      \"country_options\": {        \"us\": {          \"state\": \"CA\",          \"type\": \"state_sales_tax\"        }      },      \"created\": 1682006400,      \"expires_at\": null,      \"livemode\": false,      \"status\": \"active\",      \"state\": \"CA\",      \"type\": \"standard\"    }    {...}    {...}  ],}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create a registration | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/crypto/onramp_sessions/create",
    "markdown": "# Create a CryptoOnrampSession | Stripe API Reference\n\nCreates a CryptoOnrampSession object.\n\nAfter the CryptoOnrampSession is created, display the onramp session modal using the `client_secret`.\n\nRelated guide: [Set up an onramp integration](https://docs.stripe.com/crypto/integrate-the-onramp)\n\n### Parameters\n\n*   #### \n    \n    customer\\_ip\\_addressstring\n    \n    The IP address of the customer the platform intends to onramp.\n    \n    If the user’s IP is in a region we can’t support, we return an `HTTP 400` with an appropriate error code.\n    \n    We support IPv4 and IPv6 addresses. Geographic supportability is checked again later in the onramp flow, which provides a way to hide the onramp option from ineligible users for a better user experience.\n    \n*   The default amount of crypto to exchange into.\n    \n    *   When left null, a default value is computed if `source_amount`, `destination_currency`, and `destination_network` are set.\n    *   When set, both `destination_currency` and `destination_network` must also be set. All cryptocurrencies are supported to their full precisions (for example, 18 decimal places for `eth`). We validate and generate an error if the amount exceeds the supported precision based on the exchange currency. Setting `source_amount` is mutually exclusive with setting `destination_amount` (only one or the other is supported). Users can update the amount in the onramp UI.\n    \n*   #### \n    \n    destination\\_currenciesarray of enums\n    \n    The list of destination cryptocurrencies a user can choose from.\n    \n    *   When left null, all supported cryptocurrencies are shown in the onramp UI subject to `destination_networks` if set.\n    *   When set, it must be a non-empty array where all values in the array are valid cryptocurrencies. You can use it to lock users to a specific cryptocurrency by passing a single value array. Users **cannot** override this parameter.\n    \n*   The default destination cryptocurrency.\n    \n    *   When left null, the first value of `destination_currencies` is selected.\n    *   When set, if `destination_currencies` is also set, the value of `destination_currency` must be present in that array. To lock a `destination_currency`, specify that value as the single value for `destination_currencies`. Users can select a different cryptocurrency in the onramp UI subject to `destination_currencies` if set.\n    \n*   The default destination crypto network.\n    \n    *   When left null, the first value of `destination_networks` is selected.\n    *   When set, if `destination_networks` is also set, the value of `destination_network` must be present in that array. To lock a `destination_network`, specify that value as the single value for `destination_networks`. Users can select a different network in the onramp UI subject to `destination_networks` if set.\n    \n*   #### \n    \n    destination\\_networksarray of enums\n    \n    The list of destination crypto networks user can choose from.\n    \n    *   When left null, all supported crypto networks are shown in the onramp UI.\n    *   When set, it must be a non-empty array where values in the array are each a valid crypto network. It can be used to lock users to a specific network by passing a single value array. Users **cannot** override this parameter.\n    \n*   Pre-populate some of the required KYC information for the user if you’ve already collected it within your application.\n    \n    Related guide: [Using the API](https://docs.stripe.com/crypto/using-the-api#how-to-pre-populate-customer-information)\n    \n*   #### \n    \n    lock\\_wallet\\_addressboolean\n    \n    Whether or not to lock the suggested wallet address. If destination tags are provided, this will also lock the destination tags.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The default amount of fiat (in decimal) to exchange into crypto.\n    \n    *   When left null, a default value is computed if `destination_amount` is set.\n    *   When set, setting `source_amount` is mutually exclusive with setting `destination_amount` (only one or the other is supported). We don’t support fractional pennies. If fractional minor units of a currency are passed in, it generates an error. Users can update the value in the onramp UI.\n    \n*   The default source fiat currency for the onramp session.\n    \n    *   When left null, a default currency is selected based on user locale.\n    *   When set, it must be one of the fiat currencies supported by onramp. Users can still select a different currency in the onramp UI.\n    \n*   The end customer’s crypto wallet address (for each network) to use for this transaction.\n    \n    *   When left null, the user enters their wallet in the onramp UI.\n    *   When set, the platform must set either `destination_networks` or `destination_network` and we perform address validation. Users can still select a different wallet in the onramp UI.\n    \n\n### Returns\n\nReturns the created CryptoOnrampSession object\n\nPOST /v1/crypto/onramp\\_sessions\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cos_1NamBL2eZvKYlo2CP38sZVEW\",  \"object\": \"crypto.onramp_session\",  \"client_secret\": \"cos_1NamBL2eZvKYlo2CP38sZVEW_secret_B5faamUkzHbcpjy6NndGq1mMZGGCo8FhK2P\",  \"created\": 1691010131,  \"kyc_details_provided\": false,  \"livemode\": true,  \"metadata\": {},  \"redirect_url\": null,  \"status\": \"initialized\",  \"transaction_details\": {    \"destination_amount\": null,    \"destination_currencies\": [      \"btc\",      \"eth\",      \"matic\",      \"sol\",      \"xlm\",      \"avax\",      \"usdc\"    ],    \"destination_currency\": null,    \"destination_network\": null,    \"destination_networks\": [      \"bitcoin\",      \"ethereum\",      \"base\",      \"polygon\",      \"solana\",      \"stellar\",      \"avalanche\"    ],    \"fees\": null,    \"lock_wallet_address\": false,    \"source_amount\": null,    \"source_currency\": null,    \"transaction_id\": null,    \"wallet_address\": null,    \"wallet_addresses\": null  }}\n```\n\n## [Retrieve a CryptoOnrampSession](https://docs.stripe.com/api/crypto/onramp_sessions/retrieve)\n\nRetrieves the details of a CryptoOnrampSession that was previously created.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a CryptoOnrampSession object\n\nGET /v1/crypto/onramp\\_sessions/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/crypto/onramp_sessions/cos_1NamBL2eZvKYlo2CP38sZVEW \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cos_1NamBL2eZvKYlo2CP38sZVEW\",  \"object\": \"crypto.onramp_session\",  \"client_secret\": \"cos_1NamBL2eZvKYlo2CP38sZVEW_secret_B5faamUkzHbcpjy6NndGq1mMZGGCo8FhK2P\",  \"created\": 1691010131,  \"kyc_details_provided\": false,  \"livemode\": true,  \"metadata\": {},  \"redirect_url\": null,  \"status\": \"initialized\",  \"transaction_details\": {    \"destination_amount\": null,    \"destination_currencies\": [      \"btc\",      \"eth\",      \"matic\",      \"sol\",      \"xlm\",      \"avax\",      \"usdc\"    ],    \"destination_currency\": null,    \"destination_network\": null,    \"destination_networks\": [      \"bitcoin\",      \"ethereum\",      \"base\",      \"polygon\",      \"solana\",      \"stellar\",      \"avalanche\"    ],    \"fees\": null,    \"lock_wallet_address\": false,    \"source_amount\": null,    \"source_currency\": null,    \"transaction_id\": null,    \"wallet_address\": null,    \"wallet_addresses\": null  }}\n```\n\n## [List CryptoOnrampSessions](https://docs.stripe.com/api/crypto/onramp_sessions/list)\n\nReturns a list of onramp sessions that match the filter criteria. The onramp sessions are returned in sorted order, with the most recent onramp sessions appearing first.\n\n### Parameters\n\n*   Only return onramp sessions that were created during the given date interval.\n    \n*   The destination cryptocurrency to filter by.\n    \n*   The destination blockchain network to filter by.\n    \n*   An object ID cursor for use in pagination.\n    \n*   A limit ranging from 1 to 100 (defaults to 10).\n    \n*   An object ID cursor for use in pagination.\n    \n*   The status of the Onramp Session. One of = `{initialized, rejected, requires_payment, fulfillment_processing, fulfillment_complete}`\n    \n\n### Returns\n\nA dictionary with a data property that contains an array of up to `limit` onramp sessions, starting after onramp session `starting_after`. Each entry in the array is a separate onramp session object. If no more onramp sessions are available, the resulting array will be empty.\n\nGET /v1/crypto/onramp\\_sessions\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/crypto/onramp_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/crypto/onramp_sessions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cos_1NamBL2eZvKYlo2CP38sZVEW\",      \"object\": \"crypto.onramp_session\",      \"client_secret\": \"cos_1NamBL2eZvKYlo2CP38sZVEW_secret_B5faamUkzHbcpjy6NndGq1mMZGGCo8FhK2P\",      \"created\": 1691010131,      \"kyc_details_provided\": false,      \"livemode\": true,      \"metadata\": {},      \"redirect_url\": null,      \"status\": \"initialized\",      \"transaction_details\": {        \"destination_amount\": null,        \"destination_currencies\": [          \"btc\",          \"eth\",          \"matic\",          \"sol\",          \"xlm\",          \"avax\",          \"usdc\"        ],        \"destination_currency\": null,        \"destination_network\": null,        \"destination_networks\": [          \"bitcoin\",          \"ethereum\",          \"base\",          \"polygon\",          \"solana\",          \"stellar\",          \"avalanche\"        ],        \"fees\": null,        \"lock_wallet_address\": false,        \"source_amount\": null,        \"source_currency\": null,        \"transaction_id\": null,        \"wallet_address\": null,        \"wallet_addresses\": null      }    }    {...}    {...}  ],}\n```\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create a CryptoOnrampSession | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/crypto/onramp_sessions/retrieve",
    "markdown": "# Retrieve a CryptoOnrampSession | Stripe API Reference\n\nRetrieves the details of a CryptoOnrampSession that was previously created.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a CryptoOnrampSession object\n\nGET /v1/crypto/onramp\\_sessions/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/crypto/onramp_sessions/cos_1NamBL2eZvKYlo2CP38sZVEW \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cos_1NamBL2eZvKYlo2CP38sZVEW\",  \"object\": \"crypto.onramp_session\",  \"client_secret\": \"cos_1NamBL2eZvKYlo2CP38sZVEW_secret_B5faamUkzHbcpjy6NndGq1mMZGGCo8FhK2P\",  \"created\": 1691010131,  \"kyc_details_provided\": false,  \"livemode\": true,  \"metadata\": {},  \"redirect_url\": null,  \"status\": \"initialized\",  \"transaction_details\": {    \"destination_amount\": null,    \"destination_currencies\": [      \"btc\",      \"eth\",      \"matic\",      \"sol\",      \"xlm\",      \"avax\",      \"usdc\"    ],    \"destination_currency\": null,    \"destination_network\": null,    \"destination_networks\": [      \"bitcoin\",      \"ethereum\",      \"base\",      \"polygon\",      \"solana\",      \"stellar\",      \"avalanche\"    ],    \"fees\": null,    \"lock_wallet_address\": false,    \"source_amount\": null,    \"source_currency\": null,    \"transaction_id\": null,    \"wallet_address\": null,    \"wallet_addresses\": null  }}\n```\n\n## [List CryptoOnrampSessions](https://docs.stripe.com/api/crypto/onramp_sessions/list)\n\nReturns a list of onramp sessions that match the filter criteria. The onramp sessions are returned in sorted order, with the most recent onramp sessions appearing first.\n\n### Parameters\n\n*   Only return onramp sessions that were created during the given date interval.\n    \n*   The destination cryptocurrency to filter by.\n    \n*   The destination blockchain network to filter by.\n    \n*   An object ID cursor for use in pagination.\n    \n*   A limit ranging from 1 to 100 (defaults to 10).\n    \n*   An object ID cursor for use in pagination.\n    \n*   The status of the Onramp Session. One of = `{initialized, rejected, requires_payment, fulfillment_processing, fulfillment_complete}`\n    \n\n### Returns\n\nA dictionary with a data property that contains an array of up to `limit` onramp sessions, starting after onramp session `starting_after`. Each entry in the array is a separate onramp session object. If no more onramp sessions are available, the resulting array will be empty.\n\nGET /v1/crypto/onramp\\_sessions\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/crypto/onramp_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/crypto/onramp_sessions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"cos_1NamBL2eZvKYlo2CP38sZVEW\",      \"object\": \"crypto.onramp_session\",      \"client_secret\": \"cos_1NamBL2eZvKYlo2CP38sZVEW_secret_B5faamUkzHbcpjy6NndGq1mMZGGCo8FhK2P\",      \"created\": 1691010131,      \"kyc_details_provided\": false,      \"livemode\": true,      \"metadata\": {},      \"redirect_url\": null,      \"status\": \"initialized\",      \"transaction_details\": {        \"destination_amount\": null,        \"destination_currencies\": [          \"btc\",          \"eth\",          \"matic\",          \"sol\",          \"xlm\",          \"avax\",          \"usdc\"        ],        \"destination_currency\": null,        \"destination_network\": null,        \"destination_networks\": [          \"bitcoin\",          \"ethereum\",          \"base\",          \"polygon\",          \"solana\",          \"stellar\",          \"avalanche\"        ],        \"fees\": null,        \"lock_wallet_address\": false,        \"source_amount\": null,        \"source_currency\": null,        \"transaction_id\": null,        \"wallet_address\": null,        \"wallet_addresses\": null      }    }    {...}    {...}  ],}\n```\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve a CryptoOnrampSession | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/elements/address-element/collect-addresses?platform=ios",
    "markdown": "# Listen for address input | Stripe DocumentationThe Stripe Docs logo\n\nUse the Address Element to collect local and international addresses for your customers.\n\n![Examples of a checkout process where a user selects the Add Shipping Address option. Then they are taken to a new screen to add their shipping address into a form. As they type in their address, auto-complete suggestions are presented for your user to choose from.](https://b.stripecdn.com/docs-statics-srv/assets/ios-overview.4e83bb4e46fd7d131b5c4ff8abee27ea.png)\n\n[](#ios-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nThe [Stripe iOS SDK](https://github.com/stripe/stripe-ios) is open source, [fully documented](https://stripe.dev/stripe-ios/index.html), and compatible with apps supporting iOS 13 or above.\n\nTo install the SDK, follow these steps:\n\n1.  In Xcode, select **File** > **Add Packages…** and enter `https://github.com/stripe/stripe-ios-spm` as the repository URL.\n2.  Select the latest version number from our [releases page](https://github.com/stripe/stripe-ios/releases).\n3.  Add the **StripePaymentSheet** product to the [target of your app](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app).\n\nConfigure the SDK with your Stripe [publishable key](https://dashboard.stripe.com/test/apikeys) on app start. This enables your app to make requests to the Stripe API.\n\n`import UIKit import StripePaymentSheet  @main class AppDelegate: UIResponder, UIApplicationDelegate {      func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {         StripeAPI.defaultPublishableKey =` \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n        `// do any other necessary launch configuration         return true     } }`\n\n#### Note\n\nUse your [test mode](https://docs.stripe.com/keys#obtain-api-keys) keys while you test and develop, and your [live mode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your app.\n\n[](#ios-configure-address-element)\n\nYou can configure the Address Element with details such as displaying default values, setting allowed countries, customizing the appearance, and so on. Refer to [`AddressViewController.Configuration`](https://github.com/stripe/stripe-ios/blob/address-element-private-beta-2/Stripe/AddressViewController%2BConfiguration.swift#L72-L162) for the complete list of configuration options.\n\n`let addressConfiguration = AddressViewController.Configuration(   additionalFields: .init(phone: .required),   allowedCountries: [\"US\", \"CA\", \"GB\"],   title: \"Shipping Address\" )`\n\n[](#ios-retrieve-address-details)\n\nRetrieve the address details by conforming to `AddressViewControllerDelegate` and then using [`addressViewControllerDidFinish`](https://github.com/stripe/stripe-ios/blob/address-element-private-beta-2/Stripe/AddressViewController.swift#L19) to dismiss the view controller. The address value is either a valid [address](https://github.com/stripe/stripe-ios/blob/8399ea6cfe4e32190238375882e0a793b483d426/Stripe/AddressViewController%2BConfiguration.swift#L16-L36) or nil.\n\n`extension MyViewController: AddressViewControllerDelegate {     func addressViewControllerDidFinish(_ addressViewController: AddressViewController, with address: AddressViewController.AddressDetails?) {         addressViewController.dismiss(animated: true)         self.addressDetails = address     } }`\n\n[](#ios-present-the-address-element)\n\nCreate an [`AddressViewController`](https://github.com/stripe/stripe-ios/blob/address-element-private-beta-2/Stripe/AddressViewController.swift#L26) using the address configuration and delegate from the previous steps. You can either present it in a navigation controller or push it onto a navigation controller.\n\n`self.addressViewController = AddressViewController(configuration: addressConfiguration, delegate: self) let navigationController = UINavigationController(rootViewController: addressViewController)  present(navigationController, animated: true)`",
    "title": "Listen for address input | Stripe Documentation",
    "description": "Collect addresses to use in custom ways using an event listener",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/elements/address-element/collect-addresses?platform=android",
    "markdown": "# Listen for address input | Stripe DocumentationThe Stripe Docs logo\n\nUse the Address Element to collect local and international addresses for your customers.\n\n![Examples of a checkout process where a user selects the Add Shipping Address option. Then they are taken to a new screen to add their shipping address into a form. As they type in their address, auto-complete suggestions are presented for your user to choose from.](https://b.stripecdn.com/docs-statics-srv/assets/android-overview.6061212dc737aa700b79242cb5f77782.png)\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#android-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nThe [Stripe Android SDK](https://github.com/stripe/stripe-android) is open source and [fully documented](https://stripe.dev/stripe-android/).\n\nTo install the SDK, add `stripe-android` to the `dependencies` block of your [`app/build.gradle`](https://developer.android.com/studio/build/dependencies) file:\n\n`apply plugin: 'com.android.application'  android { ... }  dependencies {   // ...    // Stripe Android SDK   implementation 'com.stripe:stripe-android:20.48.0' }`\n\nConfigure the SDK with your Stripe [publishable key](https://dashboard.stripe.com/apikeys) so that it can make requests to the Stripe API, such as in your `Application` subclass:\n\n`import com.stripe.android.PaymentConfiguration  class MyApp : Application() {     override fun onCreate() {         super.onCreate()         PaymentConfiguration.init(             applicationContext,`\n            \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n        `)     } }`\n\n#### Note\n\nUse your [test mode](https://docs.stripe.com/keys#obtain-api-keys) keys while you test and develop, and your [live mode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your app.\n\n[\n\n## OptionalSet up address autocomplete suggestions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#android-setup-autocomplete)\n\nThe address element uses the [Google Places SDK](https://developers.google.com/maps/documentation/places/android-sdk/overview) to fetch address autocomplete suggestions. To enable autocomplete suggestions, you need to include the Google Places SDK dependency to your app’s `build.gradle`.\n\n`dependencies {     implementation 'com.google.android.libraries.places:places:2.6.0' }`\n\nAddress autocomplete suggestions requires a Google Places API key. Follow the [Google Places SDK setup guide](https://developers.google.com/maps/documentation/places/android-sdk/cloud-setup) to generate your API key.\n\n[\n\n## Configure the Address Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#android-configure-address-element)\n\nYou can configure the Address Element with details such as displaying default values, setting allowed countries, customizing the appearance, and so on. Refer to [`AddressLauncher.Configuration`](https://github.com/stripe/stripe-android/blob/master/paymentsheet/src/main/java/com/stripe/android/paymentsheet/addresselement/AddressLauncher.kt#L72) for the complete list of configuration options.\n\n`val addressConfiguration = AddressLauncher.Configuration(   additionalFields: AddressLauncher.AdditionalFieldsConfiguration(     phone: AdditionalFieldsConfiguration.FieldConfiguration.Required   ),   allowedCountries: setOf(\"US\", \"CA\", \"GB\"),   title: \"Shipping Address\",   googlePlacesApiKey = \"(optional) YOUR KEY HERE\" )`\n\n[\n\n## Retrieve address details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#android-retrieve-address-details)\n\nRetrieve the address details by creating an instance of `AddressLauncher` in the `onCreate` lifecycle method of your `Activity` or `Fragment` and creating a callback method that implements the `AddressLauncherResultCallback` interface.\n\n`private lateinit var addressLauncher: AddressLauncher private var shippingDetails: AddressDetails? = null  override fun onCreate(savedInstanceState: Bundle?) {     addressLauncher = AddressLauncher(this, ::onAddressLauncherResult) }  private fun onAddressLauncherResult(result: AddressLauncherResult) {     // TODO: Handle result and update your UI     when (result) {         is AddressLauncherResult.Succeeded -> {             shippingDetails = result.address         }         is AddressLauncherResult.Canceled -> {             // TODO: Handle cancel         }     } }`\n\nThe `AddressLauncherResult` can be `Succeeded` or `Canceled`. See more [implementation details](https://github.com/stripe/stripe-android/blob/master/paymentsheet/src/main/java/com/stripe/android/paymentsheet/addresselement/AddressLauncherResult.kt).\n\n#### Note\n\nStripe requires that you instantiate the `AddressLauncher` during the `onCreate` lifecycle event and not after. Otherwise, the callback can’t be registered properly, and your app will crash.\n\n[\n\n## Present the Address Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#android-present-the-address-element)\n\nPresent the address element using the address launcher and configuration from the previous steps.\n\n`addressLauncher.present(    publishableKey = publishableKey,    configuration = addressConfiguration )`",
    "title": "Listen for address input | Stripe Documentation",
    "description": "Collect addresses to use in custom ways using an event listener",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/oauth-changes-for-standard-platforms",
    "markdown": "# OAuth changes for platform-controlled Standard accounts\n\n## Learn about the changes Stripe has made to OAuth for Connect.\n\nWe’ve updated OAuth to isolate platforms’ processing activity on platform-controlled Standard accounts. Platforms using OAuth with `read_write` scope can’t connect to Standard accounts that are controlled by another platform. Prior to June 2021, multiple platforms could connect to the same Standard account.\n\nThis change ensures that in the rare case that a [Connect](https://docs.stripe.com/connect \"Connect\") user with access to the Stripe Dashboard interacts with two platforms, each platform’s activity is kept distinct in separate Standard accounts.\n\nWhen a user of a Standard account controlled by another platform connects to your platform, the Connect onboarding flow directs them to create a separate Standard account to use with your platform. The new account automatically connects to your platform.\n\nIf you registered your Connect application as an [Extension integration](https://docs.stripe.com/building-extensions), it can still connect to accounts that are connected to another platform. Extensions need to connect to existing Standard accounts that might also be connected to another Platform or Extension. Only Extensions can use `read_only`, which ensures that platforms can’t read other applications’ data.\n\nHowever, if you had previously selected ‘Platform’ for your Connect application, and find that you need Extension functionality, then you will need to [contact us](https://support.stripe.com/contact/email?topic=connect) to modify your integration selection. Your selection can be found at the [Connect Settings page](https://dashboard.stripe.com/settings/connect) in the ‘Availability’ section.",
    "title": "OAuth changes for platform-controlled Standard accounts | Stripe Documentation",
    "description": "Learn about the changes Stripe has made to OAuth for Connect.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=ios",
    "markdown": "# Collect card payments | Stripe DocumentationThe Stripe Docs logo\n\nCollecting payments with Stripe Terminal requires writing a payment flow in your application. Use the Stripe Terminal SDK to create and update a [PaymentIntent](https://docs.stripe.com/api#payment_intents), an object representing a single payment session.\n\nDesigned to be robust to failures, the Terminal integration splits the payment process into several steps, each of which can be retried safely:\n\n1.  [Create a PaymentIntent](#create-payment)\n2.  [Collect a payment method](#collect-payment) you can define whether to [automatically](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) or [manually](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method) capture your payments\n3.  [Confirm the payment](#confirm-payment) Authorization on the customer’s card takes place when the SDK confirms the payment.\n4.  (Optional) [Capture the payment](#capture-payment)\n\n[](#create-payment)\n\nThe first step when collecting payments is to start the payment flow. When a customer begins checking out, your application must create a `PaymentIntent` object. This represents a new payment session on Stripe.\n\nYou can create a PaymentIntent on the client or server.\n\nUse [test amounts](https://docs.stripe.com/terminal/references/testing#physical-test-cards) to try producing different results. An amount ending in `00` results in an approved payment.\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a PaymentIntent from your client:\n\n#### Warning\n\nIf your app is connected to the Verifone P400, you can’t create a PaymentIntent from the iOS SDK. Instead, you must [create the PaymentIntent server-side](https://docs.stripe.com/terminal/payments/collect-card-payment#create-server-side), and retrieve the PaymentIntent in your app using the `Terminal.retrievePaymentIntent` method in the SDK.\n\nPaymentViewController.swift\n\n`import UIKit import StripeTerminal  class PaymentViewController: UIViewController {      // ...      // Action for a \"Checkout\" button     func checkoutAction() throws {         let params = try PaymentIntentParametersBuilder(amount: 1000, currency: \"usd\").build()         Terminal.shared.createPaymentIntent(params) { createResult, createError in             if let error = createError {                 print(\"createPaymentIntent failed: \\(error)\")             } else if let paymentIntent = createResult {                 print(\"createPaymentIntent succeeded\")                 // ...             }          }     }      // ... }`\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create the `PaymentIntent` on your server if the information required to start a payment isn’t readily available in your app.\n\nThe following example shows how to create a `PaymentIntent` on your server:\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1000 \\   -d \"currency\"=\"usd\" \\   -d \"payment_method_types[]\"=\"card_present\" \\   -d \"capture_method\"=\"manual\"`\n\nFor Terminal payments, the `payment_method_types` parameter must include `card_present`.\n\nYou can control the payment flow as follows:\n\n*   To fully control the payment flow for `card_present` payments, set the `capture_method` to `manual`. This allows you to add a reconciliation step before finalizing the payment.\n*   To authorize and capture payments in one step, set the `capture_method` to `automatic`.\n\nTo accept payments in Australia, you need to set `capture_method` to `automatic` or `manual_preferred`. For more details, visit our [Australia documentation](https://docs.stripe.com/terminal/payments/regional?integration-country=AU). To accept Interac payments in Canada, you must also include `interac_present` in `payment_method_types`. For more details, visit our [Canada documentation](https://docs.stripe.com/terminal/payments/regional?integration-country=CA).\n\nThe PaymentIntent contains a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret), a key that is unique to the individual PaymentIntent. To use the client secret, you must obtain it from the PaymentIntent on your server and [pass it to the client side](https://docs.stripe.com/payments/payment-intents#passing-to-client).\n\n`post '/create_payment_intent' do   intent = # ... Create or retrieve the PaymentIntent   {client_secret: intent.client_secret}.to_json end`\n\nFirst use the client secret to call `retrievePaymentIntent`, and then use the retrieved PaymentIntent to call `collectPaymentMethod`.\n\nPaymentViewController.swift\n\n`func checkoutButtonAction() {     // ... Fetch the client secret from your backend     Terminal.shared.retrievePaymentIntent(clientSecret: clientSecret) { retrieveResult, retrieveError in         if let error = retrieveError {             print(\"retrievePaymentIntent failed: \\(error)\")         }         else if let paymentIntent = retrieveResult {             print(\"retrievePaymentIntent succeeded: \\(paymentIntent)\")             // ...         }     } }`\n\n[](#collect-payment)\n\nAfter you’ve created a PaymentIntent, the next step is to collect a payment method with the SDK.\n\nIn order to collect a payment method, your app needs to be connected to a reader. The connected reader waits for a card to be presented after your app calls `collectPaymentMethod`.\n\nPaymentViewController.swift\n\n`import UIKit import StripeTerminal  class PaymentViewController: UIViewController, ReaderDisplayDelegate {      // Label for displaying messages from the card reader     let readerMessageLabel = UILabel(frame: .zero)     var collectCancelable: Cancelable? = nil      // ...      // Action for a \"Checkout\" button     func checkoutAction() throws {         let params = try PaymentIntentParametersBuilder(amount: 1000, currency: \"usd\").build()         Terminal.shared.createPaymentIntent(params) { createResult, createError in             if let error = createError {                 print(\"createPaymentIntent failed: \\(error)\")             }             else if let paymentIntent = createResult {                 print(\"createPaymentIntent succeeded\")                 self.collectCancelable = Terminal.shared.collectPaymentMethod(paymentIntent) { collectResult, collectError in                     if let error = collectError {                         print(\"collectPaymentMethod failed: \\(error)\")                     }                     else if let paymentIntent = collectResult {                         print(\"collectPaymentMethod succeeded\")                         // ... Confirm the payment                     }                 }             }          }     }  }   // MARK: BluetoothReaderDelegate - only needed for Bluetooth readers, this is the delegate set during connectBluetoothReader   func reader(_ reader: Reader, didRequestReaderInput inputOptions: ReaderInputOptions = []) {      readerMessageLabel.text = Terminal.stringFromReaderInputOptions(inputOptions)  }   func reader(_ reader: Reader, didRequestReaderDisplayMessage displayMessage: ReaderDisplayMessage) {      readerMessageLabel.text = Terminal.stringFromReaderDisplayMessage(displayMessage)  }  // MARK: ReaderDisplayDelegate   func terminal(_ terminal: Terminal, didRequestReaderInput inputOptions: ReaderInputOptions = []) {      readerMessageLabel.text = Terminal.stringFromReaderInputOptions(inputOptions)  }   func terminal(_ terminal: Terminal, didRequestReaderDisplayMessage displayMessage: ReaderDisplayMessage) {      readerMessageLabel.text = Terminal.stringFromReaderDisplayMessage(displayMessage)  }`\n\nThis method collects encrypted payment method data using the connected card reader, and associates the encrypted data with the local PaymentIntent.\n\n#### Caution\n\nCollecting a payment method happens locally and requires no authorization or updates to the Payment Intents API object until the next step, [confirm the payment](#confirm-payment).\n\n### Optionally inspect payment method details Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor advanced use cases, you can examine the payment method details of the presented card and perform your own business logic prior to authorization.\n\nUse the `initWithUpdatePaymentIntent` parameter in `CollectConfiguration` to attach a PaymentMethod to the server-side PaymentIntent. This data is returned in the `collectPaymentMethod` response.\n\nPaymentViewController.swift\n\n`class PaymentViewController: UIViewController, ReaderDisplayDelegate {     // ...      // Action for a \"Checkout\" button     func checkoutAction() throws {         let params = try PaymentIntentParametersBuilder(amount: 1000, currency: \"usd\").build()         Terminal.shared.createPaymentIntent(params) { createResult, createError in             if let error = createError {                 print(\"createPaymentIntent failed: \\(error)\")             }             else if let paymentIntent = createResult {                 print(\"createPaymentIntent succeeded\")                 let collectConfig = try CollectConfigurationBuilder().setUpdatePaymentIntent(true).build()                 self.collectCancelable = Terminal.shared.collectPaymentMethod(paymentIntent: paymentIntent, collectConfig: collectConfig) {                   collectResult, collectError in                     if let error = collectError {                         print(\"collectPaymentMethod failed: \\(error)\")                     }                     else if let paymentIntent = collectResult {                         print(\"collectPaymentMethod succeeded\")                         if let paymentMethod = paymentIntent.paymentMethod,                             let card = paymentMethod.cardPresent ?? paymentMethod.interacPresent {                              // ... Perform business logic on card                         }                          // ... Confirm the payment                     }                 }             }          }     }  }`\n\n#### Note\n\nThis method attaches the collected encrypted payment method data with an update to the PaymentIntent object. It requires no authorization until the next step, [confirm the payment](#confirm-payment).\n\nThis advanced use case isn’t supported on the Verifone P400 or with simulated Terminal readers.\n\nYou can access attributes like card brand, funding, and other useful data at this point.\n\n#### Note\n\nStripe attempts to detect whether a mobile wallet is used in a transaction as shown in the `wallet.type` attribute. However, the attribute isn’t populated if the card’s issuing bank doesn’t support reader-driven identification of a mobile wallet, so accurate detection isn’t guaranteed. After authorization in the [confirmation](https://docs.stripe.com/terminal/payments/collect-card-payment#confirm-payment) step, Stripe receives up-to-date information from the networks and updates `wallet.type` reliably\n\n### Cancel collection ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Programmatic cancellation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can cancel collecting a payment method using the `Cancelable` object returned by the iOS SDK.\n\n#### Customer-initiated cancellation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you set `setEnableCustomerCancellation` to true for a transaction, smart reader users see a cancel button. Tapping the cancel button cancels the active transaction.\n\nPaymentViewController.swift\n\n`let collectConfig = try CollectConfigurationBuilder()     .setEnableCustomerCancellation(true)     .build() Terminal.shared.collectPaymentMethod(paymentIntent: paymentIntent, collectConfig: collectConfig) {     intentWithPaymentMethod, attachError in }`\n\n### Handle events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen collecting a payment method using a reader like the [BBPOS Chipper 2X BT](https://docs.stripe.com/terminal/readers/bbpos-chipper2xbt), without a built-in display, your app must be able to display events from the payment method collection process to users. These events help users successfully collect payments (for example, retrying a card, trying a different card, or using a different read method).\n\nWhen a transaction begins, the SDK passes a `ReaderInputOptions` value to your app’s reader display handler, denoting the acceptable types of input (for example, Swipe, Insert, Tap). In your app’s checkout UI, prompt the user to present a card using one of these options.\n\nDuring the transaction, the SDK might request your app to display additional prompts (for example, Retry Card) to your user by passing a `ReaderDisplayMessage` value to your app’s reader display handler. Make sure your checkout UI displays these messages to the user.\n\n#### Note\n\nYour application doesn’t need to display events from the payment method collection process to users because the reader displays them. To clear the payment method on a transaction, you can [cancel the request](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#payment-cancellation).\n\nPaymentViewController.swift\n\n`// MARK: BluetoothReaderDelegate - only needed for Bluetooth readers, this is the delegate set during connectBluetoothReader   func reader(_ reader: Reader, didRequestReaderInput inputOptions: ReaderInputOptions = []) {      readerMessageLabel.text = Terminal.stringFromReaderInputOptions(inputOptions)  }   func reader(_ reader: Reader, didRequestReaderDisplayMessage displayMessage: ReaderDisplayMessage) {      readerMessageLabel.text = Terminal.stringFromReaderDisplayMessage(displayMessage)  }`\n\n### Collect payments with Tap to Pay on iPhone ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen your application is ready to collect a payment, the Stripe iOS SDK takes over the display to handle the collection process. After calling the [collect payment method](https://docs.stripe.com/terminal/payments/collect-card-payment#collect-payment), your application remains running, but the iPhone displays a full-screen prompt to the cardholder, instructing them to present their card or NFC-based mobile wallet. If there’s an error reading the card, a prompt for retry displays. A successful presentation returns a success indication, and then control returns to your application to [confirm the payment](https://docs.stripe.com/terminal/payments/collect-card-payment#confirm-payment).\n\n![Tap to pay on iPhone](https://b.stripecdn.com/docs-statics-srv/assets/tap-on-mobile-ios-payment-collection.544683eeac33062a8cc3e6b4959fe895.jpeg)\n\nPayment collection\n\n[](#confirm-payment)\n\nAfter successfully collecting a payment method from the customer, the next step is to confirm the payment with the SDK. When you’re ready to proceed with the payment, call `confirmPaymentIntent` with the updated `PaymentIntent` from [Step 2](#collect_payment).\n\n*   For manual capture of payments, a successful `confirmPaymentIntent` call results in a `PaymentIntent` with a status of `requires_capture`.\n*   For automatic capture of payments, the `PaymentIntent` transitions to a `succeeded` state.\n\nPaymentViewController.swift\n\n`// Action for a \"Checkout\" button func checkoutAction() throws {   let params = try PaymentIntentParametersBuilder(amount: 1000, currency: \"usd\").build()   Terminal.shared.createPaymentIntent(params) { createResult, createError in       if let error = createError {           print(\"createPaymentIntent failed: \\(error)\")       } else if let paymentIntent = createResult {           print(\"createPaymentIntent succeeded\")           self.collectCancelable = Terminal.shared.collectPaymentMethod(paymentIntent) { collectResult, collectError in               if let error = collectError {                   print(\"collectPaymentMethod failed: \\(error)\")               } else if let collectPaymentMethodPaymentIntent = collectResult {                   print(\"collectPaymentMethod succeeded\")                   // ... Confirm the payment                   Terminal.shared.confirmPaymentIntent(collectPaymentMethodPaymentIntent) { confirmResult, confirmError in                       if let error = confirmError {                           print(\"confirmPaymentIntent failed: \\(error)\")                       } else if let confirmedPaymentIntent = confirmResult {                           print(\"confirmPaymentIntent succeeded\")                           // Notify your backend to capture the PaymentIntent                           if let stripeId = confirmedPaymentIntent.stripeId {                               APIClient.shared.capturePaymentIntent(stripeId) { captureError in                                   if let error = captureError {                                       print(\"capture failed: \\(error)\")                                   } else {                                       print(\"capture succeeded\")                                   }                               }                           } else {                               print(\"Payment collected offline\");                           }                       }                   }               }           }       }   }`\n\n#### Warning\n\nYou must manually capture `PaymentIntents` within two days or the authorization expires and funds are released to the customer.\n\n### Handle failures ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen confirming a payment fails, the SDK returns an error that includes the updated `PaymentIntent`. Your application needs to inspect the `PaymentIntent` to decide how to deal with the error.\n\n| PaymentIntent Status | Meaning | Resolution |\n| --- | --- | --- |\n| `requires_payment_method` | Payment method declined | Try collecting a different payment method by calling `collectPaymentMethod` again with the same PaymentIntent. |\n| `requires_confirmation` | Temporary connectivity problem | Call `confirmPaymentIntent` again with the same PaymentIntent to retry the request. |\n| PaymentIntent is `nil` | Request to Stripe timed out, unknown PaymentIntent status | Retry confirming the original PaymentIntent. Don’t create a new one, as that could result in multiple authorizations for the cardholder. |\n\nIf you encounter multiple, consecutive timeouts, there might be a problem with your connectivity. Make sure that your app can communicate with the internet.\n\n### Avoiding double charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe PaymentIntent object enables money movement at Stripe—use a single PaymentIntent to represent a transaction.\n\nRe-use the same PaymentIntent after a card is declined (for example, if it has insufficient funds), so your customer can try again with a different card.\n\nIf you edit the PaymentIntent, you must call `collectPaymentMethod` to update the payment information on the reader.\n\nA PaymentIntent must be in the `requires_payment_method` state before Stripe can confirm it. An authorized, captured, or canceled PaymentIntent can’t be confirmed by a reader.\n\n[](#capture-payment)\n\nIf you defined `capture_method` as `manual` during `PaymentIntent` creation in [Step 1](#create-payment), the SDK returns an authorized but not captured `PaymentIntent` to your application. Learn more about the difference between [authorization and capture](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method).\n\nWhen your app receives a confirmed `PaymentIntent` from the SDK, make sure it notifies your backend to capture the payment. Create an endpoint on your backend that accepts a `PaymentIntent` ID and sends a request to the Stripe API to capture it:\n\n`curl -X POST https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/capture \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nA successful `capture` call results in a `PaymentIntent` with a status of `succeeded`.\n\n#### Note\n\nTo ensure the application fee captured is correct for connected accounts, inspect each `PaymentIntent` and modify the application fee, if needed, prior to manually capturing the payment.\n\n### Reconcile payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo monitor the payments activity of your business, you may want to reconcile PaymentIntents with your internal orders system on your server at the end of a day’s activity.\n\nA PaymentIntent that retains a `requires_capture` status may represent two things:\n\n**Unnecessary authorization on your customer’s card statement**\n\n*   Cause: User abandons your app’s checkout flow in the middle of a transaction\n*   Solution: If the uncaptured PaymentIntent isn’t associated with a completed order on your server, you can [cancel](https://docs.stripe.com/api/payment_intents/cancel) it. A canceled PaymentIntent can no longer be used to perform charges.\n\n**Incomplete collection of funds from a customer**\n\n*   Cause: Failure of the request from your app notifying your backend to capture the payment\n*   Solution: If the uncaptured PaymentIntent is associated with a completed order on your server, and no other payment has been taken for the order (for example, a cash payment), you can [capture](https://docs.stripe.com/api/payment_intents/capture) it.\n\n### Collect tips US only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn the US, eligible users can [collect tips when capturing payments](https://docs.stripe.com/terminal/features/collecting-tips/on-receipt).",
    "title": "Collect card payments | Stripe Documentation",
    "description": "Prepare your application and backend to collect card payments using Stripe Terminal.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tls-certificates",
    "markdown": "# TLS Certificates | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to make sure your integration securely communicates with Stripe.\n\nYour integration connects to Stripe’s API securely over [HTTPS](https://en.wikipedia.org/wiki/HTTPS)–the HTTP protocol encrypted over a [Transport Security Layer (TLS)](https://en.wikipedia.org/wiki/Transport_Layer_Security) connection. Whether you use Stripe managed SDKs, curl, or other HTTP clients to connect to Stripe APIs, TLS ensures that you’re connecting to Stripe servers and that third parties can’t read or modify API requests or responses.\n\n## TLS certificates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[TLS certificates](https://www.digicert.com/tls-ssl/tls-ssl-certificates) are how your integration verifies it’s connecting to a Stripe-owned server. A digital certificate includes (but isn’t limited to) the host name of the server, information about the owner of the server/domain, duration of validity, and the identity of a trusted [certificate authority (CA)](https://en.wikipedia.org/wiki/Certificate_authority) that issued or signed this certificate. A client connecting to the server performs [path validation](https://en.wikipedia.org/wiki/Certification_path_validation_algorithm) on the certificate where it verifies that the subject field of the certificate matches the domain name of the server that it’s trying to connect to, the certificate isn’t expired, and that a trusted CA issued the certificate. For more details, you can [read about certificates](https://en.wikipedia.org/wiki/Public_key_certificate).\n\n## Certificate pinning![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you connect to Stripe API endpoints, certificates load from a CA certificates bundle that your operating system provides, or from browser or Stripe Bindings (depending on the HTTP client used for this connection). These certificates are treated as valid trusted certificates during certificate path validation. Certificate pinning is the process of restricting which certificates are considered valid for a particular HTTPS website or endpoint. Stripe recommends against certificate pinning to avoid complications with your integration when we roll out new certificates for our systems. DigiCert, one of the major CAs, also recommends against [certificate pinning](https://www.digicert.com/blog/certificate-pinning-what-is-certificate-pinning).\n\n### What to do if you need to use certificate pinning![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs a Stripe user, if you must use certificate pinning for some reason, make sure you pin _only_ (and **all** of) the **root** certificates listed [below](#root-certificates-for-stripe-domains). Do **NOT** pin the entire certificate chain, the intermediate certificate, or the end-entity (leaf) certificate. If you do, you run a high risk of breaking your integration as Stripe updates certificates for our systems every few months, including the intermediate CA certificates.\n\nOur root certificates listed below might also change in the future, both routinely and on an emergency basis. For routine changes to the list of root certificates, Stripe will give seven days notice through the [API announce mailing list](https://groups.google.com/a/lists.stripe.com/g/api-announce) before we roll out the change. You **must** make sure that all your clients that connect to Stripe APIs, including mobile applications, can handle this certificate list changing with seven days notice. Emergency rotations might have a shorter interval between notification and change.\n\n#### Root certificates for Stripe domains![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **DigiCert Global Root CA**\n    \n    *   Serial #: `08:3b:e0:56:90:42:46:b1:a1:75:6a:c9:59:91:c7:4a`\n    *   SHA1 Fingerprint: `a8:98:5d:3a:65:e5:e5:c4:b2:d7:d6:6d:40:c6:dd:2f:b1:9c:54:36`\n*   **DigiCert Global Root G2**\n    \n    *   Serial #: `03:3a:f1:e6:a7:11:a9:a0:bb:28:64:b1:1d:09:fa:e5`\n    *   SHA1 Fingerprint: `df:3c:24:f9:bf:d6:66:76:1b:26:80:73:fe:06:d1:cc:8d:4f:82:a4`\n*   **DigiCert Global Root G3**\n    \n    *   Serial #: `05:55:56:bc:f2:5e:a4:35:35:c3:a4:0f:d5:ab:45:72`\n    *   SHA1 Fingerprint: `7e:04:de:89:6a:3e:66:6d:00:e6:87:d3:3f:fa:d9:3b:e8:3d:34:9e`\n*   **DigiCert High Assurance EV Root CA**\n    \n    *   Serial #: `02:ac:5c:26:6a:0b:40:9b:8f:0b:79:f2:ae:46:25:77`\n    *   SHA1 Fingerprint: `5f:b7:ee:06:33:e2:59:db:ad:0c:4c:9a:e6:d3:8f:1a:61:c7:dc:25`\n*   **GlobalSign Root R3**\n    \n    *   Serial #: `04:00:00:00:00:01:21:58:53:08:a2`\n    *   SHA1 Fingerprint: `d6:9b:56:11:48:f0:1c:77:c5:45:78:c1:09:26:df:5b:85:69:76:ad`\n*   **GlobalSign Root R6**\n    \n    *   Serial #: `45:e6:bb:03:83:33:c3:85:65:48:e6:ff:45:51`\n    *   SHA1 Fingerprint: `80:94:64:0e:b5:a7:a1:ca:11:9c:1f:dd:d5:9f:81:02:63:a7:fb:d1`\n*   **GlobalSign ECC Root R5**\n    \n    *   Serial #: `60:59:49:e0:26:2e:bb:55:f9:0a:77:8a:71:f9:4a:d8:6c`\n    *   SHA1 Fingerprint: `1f:24:c6:30:cd:a4:18:ef:20:69:ff:ad:4f:dd:5f:46:3a:1b:69:aa`\n\nYou can verify and download the above root CA certificates from [DigiCert](https://www.digicert.com/kb/digicert-root-certificates.htm) and [GlobalSign](https://support.globalsign.com/ca-certificates/root-certificates/globalsign-root-certificates).",
    "title": "TLS Certificates | Stripe Documentation",
    "description": "Learn how to make sure your integration securely communicates with Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=js&reader-type=internet",
    "markdown": "# Connect to a reader | Stripe DocumentationThe Stripe Docs logo\n\nSmart readers run Stripe reader software to communicate directly with Stripe over the internet. Connecting your app to a smart reader requires three steps:\n\n*   [Register a reader](#register-reader) to your Stripe account\n*   [Discover readers](#discover-readers) with the SDK\n*   [Connect to a reader](#connect-reader) with the SDK\n\n[](#register-reader)\n\nBefore you can connect your application to a smart reader, you must register the reader to your account.\n\n### Register in the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe simplest way is to add your reader in the [Dashboard](https://dashboard.stripe.com/test/terminal).\n\n1.  If you already created a Location, click it. Otherwise, create one by clicking **\\+ New**.\n2.  Under the **Readers** section, click **\\+ New**.\n3.  If you have a Verifone P400, enter the key sequence `0-7-1-3-9` to display a unique registration code. If you have a BBPOS WisePOS E or Stripe Reader S700, go to the [reader settings](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e#settings) and tap **Generate pairing code**.\n4.  Enter the code when prompted.\n\n### Register using the API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor larger deployments, enable users in the field to receive and set up new readers on their own. In your app, build a flow to [register](https://docs.stripe.com/api/terminal/readers/create) a reader with the Stripe API.\n\n1.  If you have a Verifone P400, enter the key sequence `0-7-1-3-9` to display a unique registration code. If you have a BBPOS WisePOS E or Stripe Reader S700, go to the [reader settings](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e#settings) and tap **Generate pairing code**.\n2.  The user enters the code in your application.\n3.  Your application sends the code to Stripe:\n\n`curl https://api.stripe.com/v1/terminal/readers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d registration_code={{READER_REGISTRATION_CODE}} \\   --data-urlencode label=\"Alice's reader\" \\  -d location=  {{LOCATION_ID}}    `\n\nTo confirm that you’ve registered a reader correctly, list all the readers you’ve registered at that location:\n\n`curl https://api.stripe.com/v1/terminal/readers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\n[](#discover-readers)\n\nAfter registering the reader to your account, search for previously registered readers to connect to your point of sale application using the `discoverReaders` method. You can scope your discovery using the `location` you registered the reader to in the previous step.\n\n[](#connect-reader)\n\nTo connect your point of sale application to a reader, call [connectReader](https://docs.stripe.com/terminal/references/api/js-sdk#connect-reader) with the selected reader.\n\n`async function connectReader(discoverResult) {   // Just select the first reader here.   const selectedReader = discoverResult.discoveredReaders[0];    const connectResult = await terminal.connectReader(selectedReader);   if (connectResult.error) {     console.log('Failed to connect:', connectResult.error);   } else {     console.log('Connected to reader:', connectResult.reader.label);   } }`\n\n### Multiple connections![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`const connectResult = await terminal.connectReader(reader, {fail_if_in_use: true});`\n\n|     | fail\\_if\\_in\\_use is false (default) | fail\\_if\\_in\\_use is true |\n| --- | --- | --- |\n| `connectReader` called from a new SDK when the reader is idle | The existing SDK-to-reader connection breaks, and the new SDK connects to the reader. The next command from the previously-connected SDK fails with a reader error, and that app’s `onUnexpectedReaderDisconnect` method is called. | The existing SDK-to-reader connection breaks, and the new SDK connects to the reader. The next command from the previously-connected SDK fails with a reader error, and that app’s `onUnexpectedReaderDisconnect` method is called. |\n| `connectReader` called from a new SDK when the reader is mid-transaction | The existing SDK-to-reader connection breaks, and the new SDK connects to the reader. The next command from the previously-connected SDK fails with a reader error, and that app’s `onUnexpectedReaderDisconnect` method is called. | The incoming connection fails with a reader error. The existing SDK-to-reader connection does not break and the command in progress continues. |\n\nFor the least-disruptive connection experience in multi-reader environments, we recommend setting `fail_if_in_use` to `true` on your application’s initial connection attempt. Then, allow your users to retry the connection with `fail_if_in_use` set to `false` if the connection fails the first time. With this setup, one of your users can’t accidentally interrupt a transaction by inadvertently connecting to an in-use reader, but can still connect if needed.\n\n### Handle disconnects ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour app must implement the `UnexpectedReaderDisconnect` callback to handle when a reader is disconnected.\n\nWhen you implement this callback, display a UI that notifies your user of the disconnected reader. You can call `discoverReaders` to scan for readers and initiate reconnection. Your app can attempt to automatically reconnect to the disconnected reader or display a UI that prompts your user to reconnect to a different reader.\n\nThe reader can disconnect from your app if it loses connection to the network. To simulate an unexpected disconnect, power off the reader.\n\n`const terminal = StripeTerminal.create({   onFetchConnectionToken: fetchConnectionToken,   onUnexpectedReaderDisconnect: unexpectedDisconnect, });  function unexpectedDisconnect() {   // Consider displaying a UI to notify the user and start rediscovering readers }`\n\n### Automatic reconnection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Terminal doesn’t automatically reconnect to a reader when your application starts. Instead, you can build a reconnection flow by storing reader IDs and attempting to connect to a known reader on startup.\n\n1.  When you successfully connect to a reader, save its serial number in a persistent data storage location, such as the [localStorage API](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage).\n2.  When your app launches, check that persistent store for a saved serial number. If one is found, call the `discoverReaders` method so your application can try to find that reader again.\n3.  If the saved serial number matches any of the discovered readers, try connecting to that reader with the matching reader object returned from the call to `discoverReaders`. If the previously connected reader isn’t found, stop the discovery process.\n\nDisplay some UI during the discovery and connection process to indicate that an automatic reconnection is taking place.\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
    "title": "Connect to a reader | Stripe Documentation",
    "description": "Connect your application to a Stripe Terminal reader.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/terminal/reader-collected_data",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=android&reader-type=bluetooth",
    "markdown": "# Connect to a reader | Stripe DocumentationThe Stripe Docs logo\n\nBluetooth-connected readers are Bluetooth LE devices. They collect payment details, but rely on a paired mobile device for communication with Stripe.\n\nFollow these steps to connect your app to a Terminal reader using Bluetooth:\n\n*   [Discover readers](#discover-readers)\n*   [Connect to a reader](#connect-reader)\n\n#### Caution\n\nDon’t use mobile device settings to pair with your reader. Pairing the reader through device settings makes the reader unavailable to connect to your app.\n\n[](#discover-readers)\n\nFirst, turn on the reader. Then, from your app, search for nearby Bluetooth-connected readers using the [discoverReaders](https://stripe.dev/stripe-terminal-android/core/com.stripe.stripeterminal/-terminal/discover-readers.html) method.\n\nReaderDiscoveryActivity.kt\n\n``class ReaderDiscoveryActivity : AppCompatActivity(), DiscoveryListener {    var discoverCancelable: Cancelable? = null    // ...    // Action for a \"Discover Readers\" button    fun discoverReadersAction() {     val config = DiscoveryConfiguration.BluetoothDiscoveryConfiguration()      Terminal.getInstance().discoverReaders(config, this, object : Callback {       override fun onSuccess() {         println(\"discoverReaders succeeded\")       }        override fun onFailure(e: TerminalException) {         e.printStackTrace()       }     })    }    // DiscoveryListener   override fun onUpdateDiscoveredReaders(readers: List<Reader>) {     // In your app, display the discovered reader(s) to the user.     // Call `connectBluetoothReader` after the user selects a reader to connect to.    }  }``\n\n#### Bluetooth scan ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBluetooth scan searches for all nearby readers and returns a list of discovered readers to your app. As the discovery process continues, the SDK continues to invoke the `DiscoveryDelegate.didUpdateDiscoveredReaders` method with the latest list of nearby readers.\n\nWith the Bluetooth scan discovery method, you can set a timeout to scan for a set period of time, which you can use for managing battery life or triggering an error message if no devices are found.\n\nIn your mobile application, we recommend displaying an auto-updating list of discovered readers, with serial numbers or labels to help users identify their reader.\n\n[](#connect-reader)\n\nTo connect to a discovered reader, call the `connectBluetoothReader` method from your app. As soon as the SDK connects to the reader, the reader’s status light shines solid blue.\n\nYou must [register your reader](https://docs.stripe.com/terminal/fleet/locations-and-zones) to a [location](https://docs.stripe.com/api/terminal/locations) upon connection. To do so, create and use a `BluetoothConnectionConfiguration` with the `locationId` set to the relevant location ID when connecting.\n\nReaderDiscoveryActivity.kt\n\n``// Call `connectBluetoothReader` with the selected reader and a connection config // to register to a location as set by your app. val connectionConfig = ConnectionConfiguration.BluetoothConnectionConfiguration(``\n  \n\n`\"{{LOCATION_ID}}\"`\n\n`) Terminal.getInstance().connectBluetoothReader(selectedReader, connectionConfig, readerListener, object : ReaderCallback() {    override fun onSuccess(reader: Reader) {     println(\"Successfully connected to reader\")   }    override fun onFailure(e: TerminalException) {     e.printStackTrace()   } })`\n\nDon’t program your app to call `disconnectReader` to conserve power. The reader efficiently handles power management using its standby mode.\n\n### Handle reader disconnects ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReader disconnects can sometimes occur between your app and the reader. For example, the reader can disconnect from your app if it’s out of range or runs out of battery. You can simulate an unexpected disconnect while testing by powering off the reader.\n\nThe `ReaderListener` includes a `onDisconnect` callback that provides your application with the `DisconnectReason` to help identify why the reader disconnected.\n\nWhen a reader disconnects, we recommend you automatically attempt reconnection and display notifications in your app relaying the reader status throughout the process.\n\nTo implement automatic reconnection:\n\n1.  Set `autoReconnectOnUnexpectedDisconnect` to true on the `ConnectionConfiguration`.\n2.  Implement the callbacks found in the `ReaderReconnectionListener`.\n3.  Pass a `bluetoothReaderReconnectionListener` to your `ConnectionConfiguration`.\n    \n    `val bluetoothReaderReconnectionListener = yourReconnectionListener  Terminal.getInstance().connectBluetoothReader(     reader,     BluetoothConnectionConfiguration(connectLocationId, true, bluetoothReaderReconnectionListener),     readerListener,     readerCallback, )`\n    \n4.  When the SDK sends [onReaderReconnectStarted](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.callable/-reader-reconnection-listener/index.html#2086493177%2FFunctions%2F-405186196) to your app, display a message announcing that the reader lost connection and reconnection is in progress.\n    *   You can use the `Cancelable` object to stop the reconnection attempt at any time.\n5.  When the SDK indicates successful reconnection by sending [`onReaderReconnectSucceeded`](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.callable/-reader-reconnection-listener/index.html#677433242%2FFunctions%2F-405186196), display a message announcing the connection was restored and to continue normal operations.\n6.  If the SDK can’t reconnect to the reader and sends [`onReaderReconnectFailed`](https://stripe.dev/stripe-terminal-android/external/com.stripe.stripeterminal.external.callable/-reader-reconnection-listener/index.html#-1023342536%2FFunctions%2F-405186196), display a message stating that an unexpected disconnect occurred.\n\n`val readerReconnectionListener = object : ReaderReconnectionListener {     override fun onReaderReconnectStarted(reader: Reader, cancelReconnect: Cancelable) {         // 1. Notified at the start of a reconnection attempt         // Use cancelable to stop reconnection at any time     }      override fun onReaderReconnectSucceeded(reader: Reader) {         // 2. Notified when reader reconnection succeeds         // App is now connected     }      override fun onReaderReconnectFailed(reader: Reader) {         // 3. Notified when reader reconnection fails         // App is now disconnected     } }`\n\nIf you don’t configure automatic reconnection, you can handle the disconnect callback to just display a message in the app alerting the user that the reader unexpectedly disconnected and initiate reader discovery and connection.\n\n`class ReaderActivity : AppCompatActivity(), TerminalListener {    // ...    Terminal.getInstance().setTerminalListener(this)    // TerminalListener   override fun onUnexpectedReaderDisconnect(reader: Reader) {     // Consider displaying a UI to notify the user and start rediscovering readers   } }`\n\n### Reboot the connected reader![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Reader M2 and BBPOS WisePad 3 automatically reboot after operating for 24 hours. However, you can force the reader to reboot and reset its 24-hour timer by using the `rebootReader` API. After this action, the reader disconnects from the SDK and then reboots. If you’re using automatic reconnect, the SDK attempts to restore the connection with the reader.\n\n`Terminal.getInstance().rebootReader(object : Callback {     override fun onSuccess() {         // Reboot succeeded and the reader will disconnect.         // If your app is using automatic reconnect the reconnect will begin.     }      override fun onFailure(e: TerminalException) {         // Placeholder for handling the error     } })`\n\n### Automatic reconnection on application start![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Terminal doesn’t automatically reconnect to a reader when your application starts. Instead, you can build a reconnection flow by storing reader IDs and attempting to connect to a known reader on startup.\n\n1.  When you successfully connect to a reader, save its serial number in a persistent data storage location, such as the [Shared Preferences API](https://developer.android.com/training/data-storage/shared-preferences) (Android).\n2.  When your app launches, check the persistent data storage location for a saved serial number. If one is found, call the `discoverReaders` method so your application can try to find that reader again.\n3.  If the saved serial number matches any of the discovered readers, try connecting to that reader with the matching reader object returned from the call to `discoverReaders`. If the previously connected reader isn’t found, stop the discovery process.\n\nDisplay some UI during the discovery and connection process to indicate that an automatic reconnection is happening.\n\n[](#update-reader)\n\nYour application must update Bluetooth and USB readers to apply:\n\n*   Regional configurations that keep you up to date with card network and issuer requirements\n*   Security updates\n\nRequired updates start installing on connection to the reader. You can’t use the reader until updating completes.\n\n#### Note\n\nInstalling updates requires that the reader’s battery is charged to more than 50%.\n\n### Required updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen immediately required updates are available for the reader, the integration’s `ReaderListener` receives `onStartInstallingUpdate` with a `ReaderSoftwareUpdate`. The `ReaderSoftwareUpdate` provides the necessary details of the update including an estimate of the total update duration, indicated by `timeEstimate`. During the installation process, the Terminal’s `connectionStatus` transitions to `ConnectionStatus.CONNECTING` while the update is being installed on the reader.\n\nYour application must notify users that an update is being installed and display the progress in your UI. Make it clear why connecting is taking longer than normal.\n\nIf the required update process fails, your application’s `ReaderListener` receives `onFinishInstallingUpdate` with an exception. The connection attempt fails with the same exception unless the following conditions are met:\n\n*   The reader’s software version has been updated to the latest version for the location within the last 30 days.\n*   The Android SDK version is greater than or equal to `3.5.0`.\n\nIf the conditions are met, the connection process succeeds despite the required update being incomplete. Stripe retries the required update the next time you connect to that reader until it’s successfully installed.\n\n`class ReaderActivity : AppCompatActivity(), ReaderListener {      // ...      // ReaderListener      override fun onStartInstallingUpdate(update: ReaderSoftwareUpdate, cancelable: Cancelable) {         // Show UI communicating that a required update has started installing     }      override fun onReportReaderSoftwareUpdateProgress(progress: Float) {         // Update the progress of the install     }      override fun onFinishInstallingUpdate(update: ReaderSoftwareUpdate?, e: TerminalException?) {         // Report success or failure of the update     }      // ... }`\n\nYou can cancel required updates using the `Cancelable` object. However, this will result in a failed connection to the reader. For incremental-only updates no `Cancelable` is provided as these updates can not be canceled.\n\n### Optional updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can defer optional updates until the specified date, after which they become required. The SDK notifies you of optional updates through the `BluetoothReaderDelegate` at any time the reader is connected but not performing a transaction. If an optional update is available, your application’s `BluetoothReaderDelegate` receives the `didReportAvailableUpdate` callback with the `ReaderSoftwareUpdate` object containing the update details, including:\n\n*   Estimated of update duration (`estimatedUpdateTime`)\n*   Date after which the update becomes required (`requiredAt`).\n\nThe update is also stored on the reader object as `reader.availableUpdate`. Call `Terminal.installAvailableUpdate` to install the update.\n\nIn your application, notify users that an update is available, and display a prompt to optionally continue with the update.\n\nTo proceed with the update, call `installAvailableUpdate`, which will install the update previously reported via `didReportAvailableUpdate`.\n\nAs the update proceeds, block the user from leaving the page in your app, and instruct the user to keep the reader in range and powered on until the update completes. We recommend also providing your user with a visual indicator of the update’s progress. The `BluetoothReaderDelegate` reports the update’s progress in the `didReportReaderSoftwareUpdateProgress` method.\n\nWhen an optional update’s `requiredAt` date has passed, the update won’t be installed until the reader is disconnected and reconnected.\n\n``class ReaderActivity : AppCompatActivity(), ReaderListener {      // ...      // ReaderListener      override fun onReportAvailableUpdate(update: ReaderSoftwareUpdate) {         // An update is available for the connected reader. Show this update in your application.         // This update can be installed using `Terminal.shared.installAvailableUpdate`.     }      // ... }``\n\nSee [Testing reader updates](https://docs.stripe.com/terminal/references/testing#simulated-reader-updates) to learn more about making sure your application handles the different update types that a reader can have.\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
    "title": "Connect to a reader | Stripe Documentation",
    "description": "Connect your application to a Stripe Terminal reader.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/identity/verification_sessions/list",
    "markdown": "# List VerificationSessions | Stripe API Reference\n\nReturns a list of VerificationSessions\n\n### Parameters\n\n*   #### \n    \n    client\\_reference\\_idstring\n    \n    A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.\n    \n*   Only return VerificationSessions that were created during the given date interval.\n    \n*   Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://docs.stripe.com/identity/how-sessions-work).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The VerificationSession has been invalidated for future submission attempts. |\n    | `processing`<br><br>The session has been submitted and is being processed. Most [verification checks](https://docs.stripe.com/identity/verification-checks) are processed in less than 1 minute. |\n    | `requires_input`<br><br>Requires user input before processing can continue. |\n    | `verified`<br><br>Processing of all the verification checks are complete and successfully verified. |\n    \n\n### More parameters\n\n### Returns\n\nList of VerificationSession objects that match the provided filter criteria.\n\nGET /v1/identity/verification\\_sessions\n\n```\ncurl -G https://api.stripe.com/v1/identity/verification_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/identity/verification_sessions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"vs_1NuNAILkdIwHu7ixh7OtGMLw\",      \"object\": \"identity.verification_session\",      \"client_secret\": \"...\",      \"created\": 1695680526,      \"last_error\": null,      \"last_verification_report\": null,      \"livemode\": false,      \"metadata\": {},      \"options\": {        \"document\": {          \"require_matching_selfie\": true        }      },      \"redaction\": null,      \"status\": \"requires_input\",      \"type\": \"document\",      \"url\": \"...\"    }    {...}    {...}  ],}\n```\n\n## [Cancel a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/cancel)\n\nA VerificationSession object can be canceled when it is in `requires_input` [status](https://docs.stripe.com/identity/how-sessions-work).\n\nOnce canceled, future submission attempts are disabled. This cannot be undone. [Learn more](https://docs.stripe.com/identity/verification-sessions#cancel).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the canceled VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN3kLkdIwHu7ixk5OvTq3b/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuN3kLkdIwHu7ixk5OvTq3b\",  \"object\": \"identity.verification_session\",  \"client_secret\": null,  \"created\": 1695680120,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": null,  \"status\": \"canceled\",  \"type\": \"document\",  \"url\": null}\n```\n\n## [Redact a VerificationSession](https://docs.stripe.com/api/identity/verification_sessions/redact)\n\nRedact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.\n\nA VerificationSession object can be redacted when it is in `requires_input` or `verified` [status](https://docs.stripe.com/identity/how-sessions-work). Redacting a VerificationSession in `requires_action` state will automatically cancel it.\n\nThe redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s `redaction.status` field will be set to `processing`; when the process is finished, it will change to `redacted` and an `identity.verification_session.redacted` event will be emitted.\n\nRedaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string `[redacted]` or a similar placeholder. The `metadata` field will also be erased. Redacted objects cannot be updated or used for any purpose.\n\n[Learn more](https://docs.stripe.com/identity/verification-sessions#redact).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the redacted VerificationSession object\n\nPOST /v1/identity/verification\\_sessions/:id/redact\n\n```\ncurl -X POST https://api.stripe.com/v1/identity/verification_sessions/vs_1NuN3kLkdIwHu7ixk5OvTq3b/redact \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"vs_1NuN3kLkdIwHu7ixk5OvTq3b\",  \"object\": \"identity.verification_session\",  \"client_secret\": null,  \"created\": 1695680120,  \"last_error\": null,  \"last_verification_report\": null,  \"livemode\": false,  \"metadata\": {},  \"options\": {    \"document\": {      \"require_matching_selfie\": true    }  },  \"redaction\": {    \"status\": \"processing\"  },  \"status\": \"canceled\",  \"type\": \"document\",  \"url\": null}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "List VerificationSessions | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs",
    "markdown": "# Support recommendations and FAQ templates\n\n## Respond to top FAQs from connected accounts during 1099 tax season.\n\nWe know that supporting your connected accounts during tax season can be tricky. We’ve created this guide that addresses top reasons platforms contact Stripe support for help assisting your connected accounts. We’ve also assembled a set of the questions platforms tell us are most often asked by their connected accounts during 1099 tax season and provided boilerplate responses to those questions for you to incorporate as part of your own tax support strategy.\n\n## Platform support recommendations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following sections represent the questions platforms often contact Stripe support about during 1099 tax season, along with our recommendations for how you can proactively support your connected accounts.\n\n### A connected account wants to know if they’ve already been sent a pre-filing confirmation email from Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo check whether we sent a pre-filing confirmation email to your connected account:\n\n1.  Head to the [1099 tab](https://dashboard.stripe.com/connect/taxes/forms) of the Tax Forms dashboard.\n2.  Use the filter **Stripe merchant ID** to locate the connected account’s 1099 tax form.\n3.  Check the [Pre-filing confirmation](https://docs.stripe.com/connect/tax/whats-new-2023#tracking-stripe-outreach) email status and share with the payee.\n\n![Tax form with pre-filing confirmation status](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-pre-filing-confirmation-status.15e4a385e3360ece2cd743f4285e93b3.png)\n\nThe [Pre-Filing confirmation](https://docs.stripe.com/connect/tax/whats-new-2023#tracking-stripe-outreach) property has the following statuses:\n\n*   **Queued**: This connected account is in the queue and we’ll send their pre-filing confirmation email soon.\n*   **Sent**: We sent this connected account their pre-filing confirmation email.\n*   **Not eligible**: This connected account isn’t eligible for inclusion in pre-filing confirmation. Possible reasons for ineligibility include:\n    *   The account is missing an email address.\n    *   The account is under the 1099 reporting threshold\n    *   The account’s configuration excludes it from eligibility. See [Edge Cases](https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs#edge-cases-for-1099-tax-reporting) for more information.\n*   **Not Sent**: This connected account is eligible but wasn’t sent an invite prior to the cutoff date for pre-filing confirmation. See [Tax season 2023 checklist](https://docs.stripe.com/connect/get-started-tax-reporting#tax-season-checklist) for more details.\n\n### A connected account hasn’t received or can’t find their pre-filing confirmation email from Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo assist a connected account with getting their pre-filing confirmation email: Before taking any steps in the [1099 tab](https://dashboard.stripe.com/connect/taxes/forms) of the Tax Forms dashboard, advise your connected account to:\n\n1.  Check their inbox and spam folders for email with this subject line, **Get your \\[Platform\\_Name\\] 2023 tax forms faster by enabling e-delivery**.\n2.  Use the [self-serve tool](https://support.stripe.com/express/how-do-i-get-a-new-invite-link) to resend an invite email to themselves.\n\n#### Note\n\nThe email address must match the one associated with their Stripe account.\n\nIf those options don’t work, head to the [1099 tab](https://dashboard.stripe.com/connect/taxes/forms) of the Tax Forms dashboard to troubleshoot:\n\n**Check if the payee is 1099 eligible**:\n\n1.  Use the filters in the [1099 tab](https://dashboard.stripe.com/connect/taxes/forms) of the Tax Forms dashboard to locate the connected account’s 1099 tax form.\n2.  [Review the Pre-filing confirmation status](https://docs.stripe.com/connect/tax/whats-new-2023#tracking-stripe-outreach). If the status is **Not eligible** use the information in the tooltip to understand why.\n\n**Check if the payee has the correct email address or is missing an email address**:\n\n*   [Select the Edit option next to the email address field](https://docs.stripe.com/connect/tax/whats-new-2023#addressing-missing-emails) and add the correct email address. This updates the email address associated with the connected account itself, to avoid issues in future tax seasons.\n*   Learn more about other ways to [update emails for your accounts](https://docs.stripe.com/connect/express-dashboard-taxes#how-do-i-update-the-email-address).\n\n![Account email address](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-account-email.d60fd2c08eb5fedad766f98b0e5b9502.png)\n\n![Edit account email address modal](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-edit-account-email-modal.834f62cb61d6a4f2574e40b0e4146347.png)\n\nNavigate to the overflow menu () and select the option to ‘**Request pre-filing confirmation**’ to send an invite email to the payee’s email address.\n\n![Request pre-filing confirmation link](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-request-pre-filing-confirmation-link.fb53ecb1d73b4bbacf9f92b5a7c055b4.png)\n\n![Request pre-filing confirmation modal](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-request-pre-filing-confirmation-modal.04e45b1768e12dbd2a3db1bdd09bc85c.png)\n\n### A connected account has used up all account claim attempts and is blocked from retrying![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo reset the account claim attempts for a connected account:\n\n1.  Head to the [1099 tab](https://dashboard.stripe.com/connect/taxes/forms) of the Tax Forms dashboard.\n2.  Locate the connect account’s **Account claim status**.\n    *   If the status is **Not claimed, no attempts left**, navigate to the overflow menu () and select the option to **Reset account claim attempts**.\n    *   If the status is **Not claimed** and the payee is still struggling with access, check that you have the most up to date information on file for the account and if required, send a new pre-filing confirmation invite to the connect account.\n\n**Account claim status** has the following values:\n\n*   **Claimed**: the connected account has completed account claim and has access to the Stripe Express dashboard.\n*   **Not claimed, no attempts left**: the connected account has exhausted their attempts to complete account claim and the platform must reset them.\n*   **Not claimed**: the connected account has either not attempted yet or still has account claim attempts remaining.\n\n### A connected account wants to use their business tax details instead of their personal details (or vice versa) on their 1099 tax form![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax details that appear on the 1099 tax form are determined by a connected account’s [business type](https://docs.stripe.com/connect/required-verification-information-taxes#required-information). The IRS expects to see an SSN provided on 1099 forms for Single Person Entities (SPEs). To change the tax details that appear on the form, you can update the connected account’s business type by:\n\n1.  Collect the following details from the connected account:\n    *   Desired legal entity type\n    *   Desired legal entity name and TIN\n2.  Locate the connected account, navigate to **Business details**, and select **Edit**.\n3.  Select **Change business type** and choose the desired **Type of business** and **Business structure**.\n4.  Follow the prompts to enter the new legal entity details for the connected account’s business.\n5.  Return to the [1099 tab](https://dashboard.stripe.com/connect/taxes/forms) of the Tax Forms dashboard and verify that the name and TIN on the 1099 tax form match what was shared with you from the connected account.\n6.  If necessary, edit the 1099 tax form with the newly supplied information.\n\n#### Note\n\nOnly certain user roles can update this information in the Dashboard, such as the Connect Onboarding Analyst or an Admin. Tax Analysts can’t edit connected account information. See [Team roles](https://docs.stripe.com/get-started/account/teams) documentation for more information. You can also update this information using the [accounts\\_update API](https://docs.stripe.com/api/accounts/update).\n\n### A connected account no longer has access to the phone number they used for their Stripe Express account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo help your connected account update their phone number:\n\n1.  Direct your connected account to the options at the bottom of the [Stripe Express login page](http://express.stripe.com/).\n2.  Once there, they should select [I no longer have access to this phone](https://support.stripe.com/express/questions/i-lost-my-phone-or-changed-my-number-how-do-i-login-to-my-account) and follow the prompts to update their phone number.\n\n#### Note\n\nThe payee must have access to the email address that is listed for the connected account to complete the required verification steps.\n\n### A connected account agreed to paperless delivery but also wants a postal mailed copy sent to them![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter setting up their account during pre-filing confirmation, your connected account can change their delivery preferences in the Tax Forms page of Stripe Express. To request a mailed copy of their 1099, they can:\n\n1.  Navigate to the Tax Forms page of Stripe Express.\n2.  Select the overflow menu () next to their most recent 1099 tax form.\n3.  Select **Edit information**.\n4.  Switch the toggle for **Postal mail delivery** from **Off** to **On**.\n\n#### Note\n\nThis is only available if you as the platform have opted into **Optional Post Delivery** in your [Delivery Settings](https://docs.stripe.com/connect/tax-form-settings#delivery-method-settings).\n\n### A connect account has requested a transaction log of all the transactions included in their 1099 tax form![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSee [Export transaction logs](https://docs.stripe.com/connect/calculation-methods#export-transaction-logs) for instructions on exporting the logs for each 1099 form.\n\n## 1099 Tax Support FAQ template for connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe recommend creating public-facing support articles about the Stripe Express tax experience for your connected accounts. View a [great example from DoorDash](https://help.doordash.com/dashers/s/article/Common-Dasher-Tax-Questions?language=en_US).\n\n### What are 1099s?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1099 forms are federal income tax information forms used to report earnings and proceeds other than wages, salaries, and tips (which are reported on the federal W-2 form). The forms are filed with the US Internal Revenue Service (IRS) and, if required, state tax departments. Forms must be delivered to recipients by January 31 and can be postal mailed or sent via paperless delivery.\n\n### What is Stripe Express, and how do I access it?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Express allows you to update your tax information, manage tax forms, and track your earnings. If you’re working with \\[Platform\\_Name\\] and earned $600 or more (within the calendar year in the US), Stripe will send an email inviting you to create an account and log in to Stripe Express.\n\n### How do I download the app?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’d like to download the Stripe Express app, you can do so here from:\n\n*   **iOS:** [https://apps.apple.com/us/app/stripe-express/id1560214813](https://apps.apple.com/us/app/stripe-express/id1560214813)\n*   **Android:** Not available\n\n### Do I have to download an app?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou don’t need to download an app. You can use either the web-based portal or the Stripe Express app to access your account and tax information.\n\n### Which email address does Stripe use to send Stripe Express invitations?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe uses the email information associated with your \\[insert platform name\\] account to send you an invitation to sign up for Stripe Express.\n\nIf you’re unable to find that email, head to this [Support site page](https://support.stripe.com/express/how-do-i-get-a-new-invite-link) where you can request a new link to be sent to your email. If you still are not able to locate your invite email, please reach out to \\[Platform\\_Name\\] support for help updating your email address and getting a new invite email.\n\n### I no longer have access to the phone number I signed up with. How do I log in to my Stripe Express account?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’ve lost or updated your phone number, you can select the “[I no longer have access to this phone number](https://support.stripe.com/express/questions/how-do-i-login-to-my-stripe-express-account#:~:text=If%20you%27ve%20lost%20or,and%20change%20your%20phone%20number)” option during login or account creation to authenticate via email and change your phone number.\n\n### I earned enough to need a 1099 form in 2023. Why haven’t I received an email from Stripe?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you earned enough to need a 1099 form in 2023, you should have received an email from Stripe by mid-January 2024. Emails for pre-filing confirmation will be sent out starting Nov 1, 2023 - this is separate from the email you’ll receive when your form is filed by the platform in January.\n\nIf you can’t find an email from Stripe, it’s possible that:\n\n*   The may be in your spam/junk mail folder. Please search your inbox for an email titled: “Get your \\[Platform\\_Name\\] 2023 tax forms faster by enabling e-delivery”.\n*   \\[Platform\\_Name\\] does not have your most current email address on file. Please check any other email addresses you may have used to sign up for \\[Platform\\_Name\\], or reach out to \\[Platform\\_Name\\] to update your email and have an invite email sent to you.\n*   The email address associated with your \\[Platform\\_Name\\] account is incorrect, missing, or unable to receive mail.\n*   \\[Platform\\_Name\\] has chosen to postal deliver forms to you. If you haven’t received an email from Stripe or a 1099 in the mail, please reach out to \\[Platform\\_Name\\] to get a copy of your tax forms.\n\nYou may not have received an invitation for other reasons, such as:\n\n*   You earned less than the threshold for your form type.\n*   Your email address on file is incorrect, missing, or unable to receive email.\n*   Your specific account is unsupported on Stripe Express (in uncommon situations where multiple users are sharing the same account, or the same email address is being used on more than 20 accounts)\n\n### Will I receive a 1099 form?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you earned less than $600 over the course of the year, you may not receive a 1099 form and one won’t be generated for you unless you meet a threshold in your state. If your state has a filing threshold lower than $600, you might receive a 1099 form.\n\nYou can check your state’s requirements here: [View 1099 state requirements](https://docs.stripe.com/connect/tax-forms-state-requirements#check-1099-form-requirements-by-state).\n\n### When will I receive my 1099?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour 1099 tax form will be sent to you by January 31st, 2024 (note: paper forms delivered by postal delivery might take up to 10 additional business days).\n\n*   Starting November 1st, 2023: Stripe will email you instructions on how to set up e-delivery and create a Stripe Express account. If you haven’t already, you’ll need to complete these steps to access your 1099 tax form electronically.\n*   Before mid January: Confirm your tax information (e.g., name, address, and SSN or EIN) is correct via Stripe Express.\n*   By January 31st, 2024:\n    *   Your 1099 tax form will be available to download through Stripe Express.\n    *   Your 1099 tax form will be mailed to you if you don’t receive an email from Stripe or don’t consent to e-delivery. Please allow up to 10 business days for postal delivery.\n    *   \\[Platform\\_Name\\] will file your 1099 tax form with the IRS and relevant state tax authorities.\n*   April 15, 2024: IRS deadline to file taxes. You’ll need your 1099 tax form to file your taxes.\n\nIn January, we strongly suggest that you make sure all of your tax filing details and delivery preferences are up to date in Stripe Express. Your name, address, and Taxpayer Identification Number (Social Security Number /Employer Identification Number) are of primary importance.\n\n### How do I update my tax information?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOpen the email from Stripe and click on the “Get started” button, which will prompt you to create a Stripe Express account. After you create an account, you’ll be able to review your tax information (e.g., name, address, and SSN or EIN) and make any necessary changes via Stripe Express. Please update your information no later than mid January 2024.\n\nPlease note: If you don’t agree to paperless delivery by mid January 2024, we’ll automatically mail your 1099 tax form to the address on file, so it’s critical that your information is current, correct, and complete.\n\nYou may find that your 1099 tax form reports your SSN and you want to use your EIN (or vice-versa). If that’s the case, you’ll want to reach out to your platform to update your legal entity information.\n\nPlease note: If you’re operating as an individual, Sole Proprietorship, or Single Member LLC, the IRS will expect to see the individual owner’s Name and SSN (as opposed to Business Name and EIN) reported on your 1099 tax form.\n\n### When answering the account claim security questions, it states that my answers are incorrect, what should I do?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlease reach out to \\[Platform\\_Name\\] support to confirm the information that they have on file against the information you are providing.\n\nYour SSN, EIN, or ITIN is required to file your 1099 tax form with the IRS and relevant state tax authorities.\n\n### Is my tax information secure?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s security tools and best practices ensure that your sensitive information is safely stored and encrypted. [Learn more](https://stripe.com/legal/privacy-center) about the safeguards we’ve put in place to protect your information. Please make sure to keep your login credentials for Stripe Express secure.\n\n### How can I download my 1099 tax form?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you create a Stripe Express account and agree to paperless delivery, Stripe will email you to let you know when your 1099 tax form is available for download via Stripe Express. If you don’t agree to paperless delivery, Stripe will mail you a paper copy of your 1099 tax form instead.\n\n### My information has changed since I signed up for \\[Platform\\_Name\\]. How can I edit information?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUpdate your account information in the **Account** tab:\n\n*   Under **Stripe Express Account**, you can update the email address and phone number used to log in to Stripe Express. Please note that only one contact method can be updated at a time.\n*   Under **Language preference**, you can choose your preferred language for Stripe Express.\n*   Under **Payout and Professional Details**, you can update personal and legal entity information and view your bank account or debit card information for payouts. To update your payout details, please reach out to your platform.\n\n### How do I get a corrected 1099 tax form?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you feel you need corrections made to a 1099 tax form that has already been ‘Filed’, use the edit option in the Tax Forms page of Stripe Express. Information you edit will not appear in the 1099 tax form in the Stripe Express dashboard but it is shared with \\[Platform\\_Name\\]. You should reach out to \\[Platform\\_Name\\] after you’ve made the edits you want and they can assist you with a correction. Once \\[Platform\\_Name\\] ‘files’ your correction, you will be notified via email and you will see a new 1099 tax form appear in the Stripe Express dashboard.\n\nPlease note that it can take up to 72 hours after the platform files the correction for you to be notified.\n\n### How do I get in touch with Stripe for more help?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have a question that isn’t answered here, we recommend looking through the [1099 tax forms](https://support.stripe.com/express/topics/1099-tax-forms) or [Stripe Express](https://support.stripe.com/express) resource pages. If you still need help, please [contact Stripe support](https://support.stripe.com/express/contact/email).\n\n### How do I get into my account?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can log in to your account by visiting [connect.stripe.com/express\\_login](https://connect.stripe.com/express_login), where you’ll be prompted for your email address and 6-digit phone verification code to log in. If you don’t remember the email address that you signed up with, check your inbox for past emails that we sent about confirming your tax information for paperless delivery. Otherwise, I’ll need to confirm the email address that is associated with your Stripe account. If you have historically accessed your Stripe Express account via your \\[insert platform portal name\\], you can continue to log in this way - however, you will now have to enter a 6-digit verification code that will be sent via SMS to the phone number associated with your account to log in. If you’ve lost or updated your phone number, you can select the “[I no longer have access to this phone number](https://support.stripe.com/express/questions/i-lost-my-phone-or-changed-my-number-how-do-i-login-to-my-account)” option to authenticate via email and change your phone number.\n\n### How do I update my phone number? My phone number changed and I’m locked out.![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’ve lost your phone or changed your number, you can update the number used for SMS authentication when you log in to Stripe Express.\n\n*   Go to [express.stripe.com](https://express.stripe.com/) and enter the email address for your account\n*   On the next screen where a 6-digit verification code is requested, select the “[I no longer have access to this phone number](https://support.stripe.com/express/questions/i-lost-my-phone-or-changed-my-number-how-do-i-login-to-my-account)” option\n*   Follow the subsequent steps to authenticate your request and add a new phone number to the account.\n\n### Can you resend the email?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the tool on the [Stripe Express support page](https://support.stripe.com/express/how-do-i-get-a-new-invite-link) to request a new invite email. However, before doing so, it’s possible that:\n\n*   The email may be in your spam/junk mail folder. Please search your inbox for an email from Stripe.\n*   Your platform does not have your most current email address on file. Please check any other email addresses you may have used with your platform, or reach out to your platform to update your email.\n*   The email address associated with your account is incorrect, missing, or unable to receive mail.\n\n### I have multiple accounts with different emails. Do I have to sign up multiple times?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf all your accounts pass the 1099 reporting thresholds and your platform is using Stripe Express for e-delivery you’ll be sent invite emails for each account and you’ll need to create an account for each one. Follow the steps in the invite emails.\n\n### Can I update my custom connect account’s bank account or card through Stripe Express?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNote: only use this if you are a platform that does allow this in Stripe Express. To update these details, click on the avatar icon in the top right corner which will bring you to your Account Page. Under Payout Details, you will see the platforms tied to your account. Once a platform is selected, you can update:\n\n*   Where to send your payouts (debit card or bank account)\n*   Your bank account or card details Head to [this help page](https://support.stripe.com/express/questions/update-bank-account-or-debit-card-for-payouts) on the Stripe Express support site for more information on troubleshooting other scenarios related to updating your payout details.\n\n### Why do I need to provide my SSN/EIN?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe IRS requires this information to be reported correctly on your 1099 tax form. The IRS requires your Taxpayer Identification Number (TIN) on your 1099 tax form. If you are an individual, your Social Security Number (SSN) or Individual Taxpayer Identification Number (ITIN) is used as your TIN. If you are a business, your Employer Identification Number (EIN) is used as your TIN. If you have earned enough to qualify for a 1099 tax form, the IRS requires your full details to be reported on your 1099 tax form filings. The tax authorities which receive copies of your 1099 tax form will expect to see the income on your individual or business tax return. The EIN/SSN/ITIN is crucial in connecting this information, which is why the IRS requires it.\n\n### I have claimed my account and I think the information is wrong. How do I change it?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo update your personal information on your web browser, first head to the Accounts tab at the top of the page:\n\n*   Under Stripe Express Account, you can update the email address and phone number used to log in to Stripe Express. Please note that only one contact method can be updated at a time.\n*   Under Language preference, you can choose your preferred language for the dashboard.\n*   Under Payout details, you will see the platform(s) tied to your account. Once a platform is selected, you can update your bank details associated with that platform. Please note that this is only available for some accounts using Stripe Express.\n*   Under Platform settings, you will see the platform(s) tied to your account. Once a platform is selected, you can update your Professional and Personal details associated with that platform. You will also be able to invite and remove people to your account. Check the [article linked here](https://support.stripe.com/express/questions/how-can-i-update-my-personal-information) to learn more.\n\n### How do I access tax forms from previous years?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you were eligible for a 1099 tax form in previous years and your platform used Stripe Express to deliver tax forms in those years, you can use the dropdown menu in Stripe Express to change the year and view prior years’ tax forms.\n\nNote: Prior to 2023, the reporting threshold for 1099-K tax forms was $20,000 and 200 transactions.\n\n## Edge cases for 1099 tax reporting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe Express Dashboard doesn’t support certain types of accounts, as follows:\n\n*   Standalone and Split forms: If a form has been split or is a standalone form (that is, not tied to the active user of a connected account), it’s not eligible for electronic delivery.\n*   Multi-user and multi-currency express accounts: Express accounts that have multiple users or multiple currencies associated with them can’t view the new Express Dashboard and hence do not receive electronic delivery of forms\n*   Multiple accounts sharing the same email: When multiple accounts for the same platform have the same email, they receive one email per account for pre-filing confirmation, up to five emails. They receive one email per account for e-delivery.\n*   Rejected and deleted accounts: Accounts that you’ve rejected or deleted no longer have a Stripe relationship and are ineligible to login to Stripe Express\n*   Pre-filing confirmation outreach from Stripe: accounts that have missing email addresses or are below the filing threshold will be excluded from Stripe outreach.",
    "title": "Support recommendations and FAQ templates | Stripe Documentation",
    "description": "Respond to top FAQs from connected accounts during 1099 tax season.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/crypto/onramp_quotes/retrieve",
    "markdown": "# Retrieve CryptoOnrampQuotes | Stripe API Reference\n\n```\n{  \"id\": \"610a15d980d48eeaabc3e7375127cd10c8e7a6aad03ecf77d42dfd4c4f881faa\",  \"object\": \"crypto.onramp.quotes\",  \"destination_network_quotes\": {    \"avalanche\": [      {        \"id\": \"dec31b3a2ef646c0bbf525774fa767097a334d51567cab715523b19e2d4a83f1\",        \"destination_amount\": \"3.474296399973076273\",        \"destination_currency\": \"avax\",        \"destination_network\": \"avalanche\",        \"fees\": {          \"network_fee_monetary\": \"0.03\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.07\"      },      {        \"id\": \"3d56a9b2fdf3e5b9666461d5c28ea82ebb24287a8ece19869b02778dc70497e1\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"avalanche\",        \"fees\": {          \"network_fee_monetary\": \"0.06\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.10\"      }    ],    \"base_network\": [      {        \"id\": \"b2e849efda961116b180c9da75d7f852b9e46593f06a95e1ccd0893099579a9e\",        \"destination_amount\": \"0.029133919178255537\",        \"destination_currency\": \"eth\",        \"destination_network\": \"base\",        \"fees\": {          \"network_fee_monetary\": \"0.07\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.11\"      },      {        \"id\": \"e8bc97d01c0fbf0d0b18cf5a25f7da6b2f98183fd223ebb866b691bc652109ac\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"base\",        \"fees\": {          \"network_fee_monetary\": \"0.17\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.21\"      }    ],    \"bitcoin\": [      {        \"id\": \"2a83796a355cfc311aec441170e2448b678828d336828c3ebb427e180e552091\",        \"destination_amount\": \"0.00160673\",        \"destination_currency\": \"btc\",        \"destination_network\": \"bitcoin\",        \"fees\": {          \"network_fee_monetary\": \"11.89\",          \"transaction_fee_monetary\": \"4.27\"        },        \"source_total_amount\": \"116.16\"      }    ],    \"ethereum\": [      {        \"id\": \"52670639e0db4e969e472b1e7e1a219fb70d8674200a5ca30bfc941a73200c82\",        \"destination_amount\": \"0.029111240079494021\",        \"destination_currency\": \"eth\",        \"destination_network\": \"ethereum\",        \"fees\": {          \"network_fee_monetary\": \"1.25\",          \"transaction_fee_monetary\": \"4.06\"        },        \"source_total_amount\": \"105.31\"      },      {        \"id\": \"1fdae4939338d2ac2fdd2a18909cd570bdb7f412109304fb6965b826741e6f0f\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"ethereum\",        \"fees\": {          \"network_fee_monetary\": \"3.76\",          \"transaction_fee_monetary\": \"4.11\"        },        \"source_total_amount\": \"107.87\"      }    ],    \"polygon\": [      {        \"id\": \"3a039af52bb8d7aaab7ce3c89f9445dc58b0a3ef5cf8a5c9ce3e20cc030e1a07\",        \"destination_amount\": \"174.481810700000000000\",        \"destination_currency\": \"matic\",        \"destination_network\": \"polygon\",        \"fees\": {          \"network_fee_monetary\": \"0.01\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.05\"      },      {        \"id\": \"cce3462ecd4dc451e8ac16af79ada6997e969620547995bb2911e14e95903d6a\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"polygon\",        \"fees\": {          \"network_fee_monetary\": \"0.01\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.05\"      }    ],    \"solana\": [      {        \"id\": \"733e3fa8578e38020a78c6f45ea5f1da1210bc04b12e554841768ac4f5c505db\",        \"destination_amount\": \"0.653551160\",        \"destination_currency\": \"sol\",        \"destination_network\": \"solana\",        \"fees\": {          \"network_fee_monetary\": \"0.01\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.05\"      },      {        \"id\": \"c270e59f3e9aaa52662d18699cdff4112568b0dad888d56f37d05dfdedbc76c5\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"solana\",        \"fees\": {          \"network_fee_monetary\": \"0.01\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.05\"      }    ],    \"stellar\": [      {        \"id\": \"a0c754b8d68155e13318643d71ea1b0d00eba8614f3778d3ddcfe6e8c5ec711e\",        \"destination_amount\": \"1064.71823580\",        \"destination_currency\": \"xlm\",        \"destination_network\": \"stellar\",        \"fees\": {          \"network_fee_monetary\": \"0.18\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.22\"      },      {        \"id\": \"3e66d98654933b753971ba75f99f7e7fb47e03c5db1b0a4d02e8ec189842ab5b\",        \"destination_amount\": \"100.000000\",        \"destination_currency\": \"usdc\",        \"destination_network\": \"stellar\",        \"fees\": {          \"network_fee_monetary\": \"0.18\",          \"transaction_fee_monetary\": \"4.04\"        },        \"source_total_amount\": \"104.22\"      }    ]  },  \"livemode\": false,  \"rate_fetched_at\": 1719947634.6564176,  \"source_amount\": \"100.00\",  \"source_currency\": \"usd\"}\n```",
    "title": "Retrieve CryptoOnrampQuotes | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/platform-express-dashboard-taxes-communication",
    "markdown": "# 1099 Tax Support proposed communication guidelines\n\n## Review a proposed communication timeline for communicating with your connected accounts about 1099 Tax forms.\n\n## For platforms using e-delivery with Stripe Express to issue tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe recommend sending a reminder (example below) to connected accounts once they’ve received their pre-filing confirmation from Stripe. Preparing your connected accounts for outreach from Stripe helps to make a smoother user experience during tax season. We’ll send you a heads up email once we start sending pre-filing confirmation emails to your connected accounts.\n\n| Who sends? | Email to connected accounts | Date |\n| --- | --- | --- |\n| Stripe | Get your \\[Platform\\_Name\\] 2023 tax forms faster by enabling e-delivery | Starting the week of November 1st, 2023 |\n| Platform | Email template: Post-Stripe email | Any time after Stripe has sent the initial pre-filing confirmation email and before filing your 1099s. |\n| Stripe | Your \\[Platform\\_Name\\] 1099 tax form is ready | When your platform files in the Stripe Dashboard (must be before January 23rd, 2024) |\n\n## Stripe email to connected accounts: Get your \\[Platform\\_Name\\] 2023 tax forms faster by enabling e-delivery![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe will send a version of these communications starting the week of November 1st, 2023.\n\n![An example Stripe email to review draft 1099 tax form settings](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-confirm-information-email-2023.8868bb92bbd3f2fd5fa0e2fe319c11ab.png)\n\nAn example email from Stripe to a connected accounts to review draft 1099 tax forms.\n\n## Email template: Post-Stripe email![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe recommend letting your connected accounts know that they should’ve received information about their 1099 tax forms from Stripe. This is a proposed email template you can customize for your platform.\n\n**Reply-to:** \\[Platform’s preferred email\\]\n\n**Subject:** Confirm your tax information with Stripe\n\n**Pre-header:** Please verify your tax information is up to date\n\n**Email Copy:**\n\n_\\[Platform\\_Name\\] partners with Stripe to file 1099 tax forms that report your earnings or sales activity. You should have received an email from Stripe (express@stripe.com) with instructions about how to confirm your tax information and delivery preference to ensure your 1099 tax form is sent to the right place._\n\n_Please confirm your information using the link provided in the email from Stripe. You’ll need to create a Stripe Express account and confirm your information is up-to-date to receive your 1099 form for the 2023 tax year. You will be asked a series of security questions to verify your identity._\n\n_If you have any questions, visit https://support.stripe.com/express._\n\n_**What is a 1099 form?**_ _A 1099-NEC/1099-MISC form summarizes your earnings as an independent contractor or service provider. It’s provided to you and the IRS, as well as some US states, if you earned $600 or more in 2023._\n\n_The 1099-K form summarizes the sales activity of your account. It will be provided to you and the IRS, as well as some US states, if you processed more than $20,000 and had more than 200 transactions in 2023._\n\n_**Why do I need to verify my information?**_ _We want to ensure that information like your name, address, and Taxpayer Identification Number are up to date so that your 1099 tax form is accurate and sent to the right place._\n\n_**I didn’t receive an email from Stripe—what should I do?**_ _Please double check your spam or junk mail folder for an email with the subject line “Get your \\[Platform\\_Name\\] 2023 tax forms faster by enabling e-delivery.” If you haven’t received this email from Stripe, please reach out to \\[Platform email\\]._\n\n_**When and where can I expect my 1099 tax form?**_ _1099 tax forms are typically finalized in January. If you meet the income thresholds above, Stripe will send you a link to access your 1099 tax form (or mail a paper form if you prefer)._\n\n## Stripe email to connected accounts: Your \\[Platform\\_Name\\] 1099 tax form is ready![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe sends a version of this email to your connected accounts after you file your tax forms in the Connect Dashboard.\n\n![An example email from Stripe to a Rocket Rides connected account to view 1099 tax form.](https://b.stripecdn.com/docs-statics-srv/assets/tax-form-delivery-stripe-as-sender-2023.8fad13a7b8e7ff7adecd279791fcf47d.png)\n\nAn example email from Stripe to a connected account to view their 1099 tax form.  \nThe copy changes slightly if the platform issues a 1099-MISC or 1099-NEC.",
    "title": "1099 Tax Support proposed communication guidelines | Stripe Documentation",
    "description": "Review a proposed communication timeline for communicating with your connected accounts about 1099 Tax forms.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/platform-express-dashboard-taxes-implementation",
    "markdown": "# 1099 Tax Support implementation and timeline\n\n## Learn about implementation steps and timelines for doing e-delivery of your 1099 tax forms through Stripe Express.\n\nStarting the week of November 1st, Stripe will begin outreach to your connected accounts. You can use the implementation checklist on this page to make sure that you’re ready to use e-delivery and Stripe Express for the tax season.\n\n| Action | Comments |\n| --- | --- |\n| [Configure your platform tax settings](https://docs.stripe.com/connect/get-started-tax-reporting) for the tax year, including delivery settings to enable e-delivery and early collection of identity information for connected accounts. Learn more about [e-delivery on Stripe Express](https://docs.stripe.com/connect/express-dashboard-taxes). | Enabling e-delivery and collection of tax information triggers emails from Stripe to connected accounts starting in November. |\n| Identify connected accounts that are missing email addresses and add them. | Stripe requires [an email address](https://docs.stripe.com/connect/express-dashboard-taxes#which-email-address-does-stripe-use-for-e-delivery) for each of your connected accounts to confirm tax information and e-deliver tax forms. Use the `Missing email address` filter in the 1099 dashboard to see which accounts require you to [add an email address](https://docs.stripe.com/connect/express-dashboard-taxes#how-do-i-update-the-email-address). |\n| Identify connected accounts that need updated tax information, and reach out to those accounts. | This is important to make sure you have good tax data at filing time. For more information, see [Identifying 1099 forms that need attention](https://support.stripe.com/questions/7bd66c04-b645-4749-83f2-7d2fb36bf1d1). |\n| Prep your support teams for tax season. | Grant the Tax Analyst role for anyone on your team that needs permissions to work with tax forms. For more information, see [Teams and user roles](https://docs.stripe.com/get-started/account/teams). Also, create or update [FAQs](https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs) for internal support teams. |\n| Review edge cases that aren’t eligible for e-delivery (Stripe can only paper deliver to these accounts). | Work with your team to review these [edge cases](https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs#edge-cases-for-1099-tax-reporting). |\n| Make sure your Connect branding settings are up to date. We use those icons, colors, and the business name for Stripe emails to connected accounts. | Go to the [Connect settings page](https://dashboard.stripe.com/account/applications/settings). In the **Branding** section, customize the name, color, and icon of your brand. Please use a 128x128 pixel icon. |\n| Preview and test the outreach email from Stripe. | Go to the [Emails page](https://dashboard.stripe.com/settings/connect/emails) and preview the outreach email. You can send a test email. |\n| Make sure that your [support email address](https://docs.stripe.com/connect/platform-express-dashboard-taxes-walkthrough#for-delivery) is up to date. We use it in the e-delivery consent dialog. | Go to your [Account details](https://dashboard.stripe.com/settings/account?support_details=true) page in the Dashboard and confirm the **Support email** for your platform in the **Public business information** section. |\n| Prepare to notify your connected accounts to expect an email from Stripe before e-delivery begin. | In the [1099 Dashboard page](https://dashboard.stripe.com/connect/taxes/forms), filter for accounts with a **Pre-filing confirmation** status of **Sent** to check who’s already been emailed. Send reminder emails to accounts who’ve already been sent pre-filing confirmation emails. Suggested timing: Once outreach to your connected accounts begins, we recommend a weekly cadence for sending reminder emails. You may choose to send another reminder email prior to filing and e-delivering of 1099 tax forms in late January. For more information, see [Stripe communication timeline proposal](https://docs.stripe.com/connect/platform-express-dashboard-taxes-communication). |\n| Create a support article for your connected accounts to explain the tax timeline and your partnership with Stripe for taxes. | Example of a [support article by DoorDash](https://help.doordash.com/dashers/s/article/Common-Dasher-Tax-Questions?language=en_US). To view some example FAQs, see [Connected account FAQ template](https://docs.stripe.com/connect/platform-express-dashboard-taxes-faqs). |",
    "title": "1099 Tax Support implementation and timeline | Stripe Documentation",
    "description": "Learn about implementation steps and timelines for doing e-delivery of your 1099 tax forms through Stripe Express.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/1099-MISC",
    "markdown": "# 1099-MISC form state requirements | Stripe DocumentationThe Stripe Docs logo\n\n## View the state requirements for 1099-MISC forms.\n\n#### Warning\n\nSome participating State regulatory agencies haven’t fully finalized filing requirements and requirements remain subject to change for the 2023 tax season. Updates that occur to this page are automatically reflected in the form status badges and counts in the tax reporting Dashboard.\n\nFor 1099-MISC forms, the IRS requires filing if the amount of total reportable payments is $600 or more. Filing requirements for some states might differ from federal requirements.\n\nWe outline state filing requirements for 1099-MISC forms to help you identify which [states you can file directly](https://docs.stripe.com/connect/tax-forms-state-requirements) in your Dashboard, which states require a state tax registration or withholding ID when filing, and which states you’re responsible for filing directly with.\n\n#### Note\n\nIn the case of some box types, we always supply the federal threshold:\n\n1.  Royalties - $10\n2.  Payments in lieu of dividends or interest - $10\n3.  Fishing boat proceeds - $0.01\n4.  Excess golden parachute payments - $0.01\n\n#### Warning\n\nIf you have done backup withholding or state withholding, you might have additional reporting requirements with states. We recommend that you consult a tax advisor.\n\n| STATE | 1099-MISC FILING REQUIRED | DOES STRIPE FILE | FILING DUE DATE\\* | FILING THRESHOLD | IF ISSUED, PROVIDE STATE NUMBER |\n| --- | --- | --- | --- | --- | --- |\n| **Alabama** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Alaska** | No  | –   | –   | \\-  | –   |\n| **Arizona** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Arkansas** | CFSF |     | Same as IRS | $2,500 | –   |\n| **California** | CFSF |     | Same as IRS | Same as IRS | –   |\n| **Colorado** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Connecticut** | If State Witholding |     | Same as IRS | $0  | Connecticut Tax Registration Number |\n| **Delaware** | State Portal |     | Same as IRS | Same as IRS | Must use EIN |\n| **District of Columbia** | State Portal |     | Same as IRS | Same as IRS | –   |\n| **Florida** | No  | –   | –   | \\-  | –   |\n| **Georgia** | If State Witholding |     | Same as IRS | Same as IRS | –   |\n| **Hawaii** | CFSF |     | Same as IRS | Same as IRS | –   |\n| **Idaho** | CFSF |     | February 28 | Same as IRS | Idaho Withholding Account Number |\n| **Illinois** | No  | –   | –   | \\-  | –   |\n| **Indiana** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Iowa** | If State Witholding |     | February 15 | $0  | –   |\n| **Kansas** | If State Witholding |     | Same as IRS | $0  | Kansas Withholding Tax Account Number |\n| **Kentucky** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Louisiana** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Maine** | State Portal |     | Same as IRS | Same as IRS | –   |\n| **Maryland** | If State Witholding |     | Same as IRS | $0  | Maryland Central Registration Number |\n| **Massachusetts** | State Portal |     | Same as IRS | Same as IRS | –   |\n| **Michigan** | CFSF |     | Same as IRS | Same as IRS | –   |\n| **Minnesota** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Mississippi** | State Portal |     | Same as IRS | $601 | –   |\n| **Missouri** | CFSF |     | Same as IRS | Same as IRS | –   |\n| **Montana** | State Portal |     | February 28 | Same as IRS | –   |\n| **Nebraska** | If State Witholding |     | Same as IRS | $0  | Nebraska Number |\n| **Nevada** | No  | –   | –   | \\-  | –   |\n| **New Hampshire** | No  | –   | –   | \\-  | –   |\n| **New Jersey** | CFSF |     | Same as IRS | Same as IRS | –   |\n| **New Mexico** | CFSF |     | Same as IRS | Same as IRS | –   |\n| **New York** | No  | –   | –   | \\-  | –   |\n| **North Carolina** | If State Witholding |     | Same as IRS | $0  | NC Withholding ID Number or EIN |\n| **North Dakota** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Ohio** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Oklahoma** | CFSF |     | Same as IRS | Same as IRS | Oklahoma Withholding Account ID |\n| **Oregon** | State Portal |     | Same as IRS | Same as IRS | –   |\n| **Pennsylvania** | State Portal |     | Same as IRS | Same as IRS | PA Employer Account ID |\n| **Rhode Island** | If State Witholding |     | Same as IRS | $100 | –   |\n| **South Carolina** | If State Witholding |     | Same as IRS | $0  | SC Withholding File Number or EIN |\n| **South Dakota** | No  | –   | –   | \\-  | –   |\n| **Tennessee** | No  | –   | –   | \\-  | –   |\n| **Texas** | No  | –   | –   | \\-  | –   |\n| **Utah** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Vermont** | If State Witholding |     | Same as IRS | $0  | Vermont Withholding Account Number |\n| **Virginia** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Washington** | No  | –   | –   | \\-  | –   |\n| **West Virginia** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Wisconsin** | If State Witholding |     | Same as IRS | $0  | Wisconsin Withholding Tax Number\\*\\* |\n| **Wyoming** | No  | –   | –   | \\-  | –   |\n\n## How to interpret form state requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe supports filing in all states that require 1099-MISC filing and don’t have withholding-based filing requirements. When you file your 1099-MISC forms from the [Tax forms view](https://dashboard.stripe.com/connect/taxes/forms) in the Dashboard, Stripe submits your forms to the IRS and all qualifying states.\n\n### 1099-MISC FILING REQUIRED![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n|     |     |\n| --- | --- |\n| State Portal | Stripe submits the forms directly to these states. An additional state filing fee of 1.49 USD applies per 1099-MISC form filed directly with state revenue authorities. |\n| CFSF | States listed as CFSF are part of the Combined Federal / State Filing (CFSF) program. Forms filed to the IRS are automatically forwarded to the state, eliminating separate reporting to the participating states. If forms have already been filed with the IRS, you won’t be charged an additional state filing fee for filing in these states.<br><br>Some states still require direct filing with the state, even though they participate in the CFSF program. Stripe submits the forms directly to these states. |\n| If State Withholding | You’re required to file a 1099-MISC form with that state only if you withheld state taxes. In your Dashboard, you can specify the amount withheld by updating the form and updating the `state_tax_withheld` column. When you file your 1099-MISC forms in the Dashboard, we automatically export forms eligible for state filing and with `state_tax_withheld` so you can file directly with applicable states. |\n\n#### Note\n\nSome forms that appear to be below the federal filing threshold can also appear as `Ready` or `Needs attention` due to Grouped TINs or state filing thresholds. [Learn more](https://docs.stripe.com/connect/file-tax-forms#below-threshold-forms)\n\n### FILING DUE DATE![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile the IRS filing deadline for 1099-MISC forms is March 31 and the IRS deadline to deliver 1099 forms to your payees is January 31st, we coupled filing and delivery together to streamline the tax reporting process. **January 23rd, 2024** is the latest recommended date to file forms with the IRS and states in your Stripe Dashboard. This guarantees forms are filed with the IRS and a copy is sent to the recipients before the IRS delivery deadline of January 31st.\n\n### STATE NUMBERS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nState Tax Registration or Withholding IDs are only required for some states. After you obtain the registration or withholding ID, add the states in which you’ll file and the corresponding IDs on the [Tax forms settings](https://dashboard.stripe.com/settings/connect/tax_forms) page. In the Dashboard, click **Settings**. On **Product settings**, under **Connect**, click **Tax form settings**. When filing forms in your Dashboard, you must provide an appropriate ID in states that require one.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [File form with states](https://docs.stripe.com/connect/tax-forms-state-requirements)\n*   [Add the state tax Registration or withholding ID](https://docs.stripe.com/connect/tax-forms-state-requirements#add-state-reg)",
    "title": "1099-MISC form state requirements | Stripe Documentation",
    "description": "View the state requirements for 1099-MISC forms.",
    "languageCode": "en-US"
  }
]